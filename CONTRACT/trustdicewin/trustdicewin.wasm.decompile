(data (i32.const 8192) "Invalid hex character\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8223) "0123456789abcdef\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8331) "invalid sha256\00")
(data (i32.const 8346) "invalid sha1\00")
(data (i32.const 8359) "invalid first pos\00")
(data (i32.const 8377) "parse memo error\00stoull\00")
(data (i32.const 8416) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\ff\ff\ff\ff\ff\ff\ff\t\n\0b\0c\0d\0e\0f\10\ff\11\12\13\14\15\ff\16\17\18\19\1a\1b\1c\1d\1e\1f \ff\ff\ff\ff\ff\ff!\"#$%&\'()*+\ff,-./0123456789\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 8672) "No delimiter in signature\00")
(data (i32.const 8698) "SIG\00")
(data (i32.const 8702) "Signature Key has invalid prefix\00")
(data (i32.const 8735) "No curve in signature\00")
(data (i32.const 8757) "K1\00")
(data (i32.const 8760) "R1\00")
(data (i32.const 8763) "Incorrect curve\00")
(data (i32.const 8779) "Signature has no data\00")
(data (i32.const 8801) "Decode signature failed\00")
(data (i32.const 8825) "Invalid signature\00")
(data (i32.const 8843) "Signature checksum mismatch\00")
(data (i32.const 8871) "EOS\00")
(data (i32.const 8875) "Decode public key failed\00")
(data (i32.const 8900) "Invalid public key\00")
(data (i32.const 8919) "Public key checksum mismatch\00")
(data (i32.const 17652) "EOS5LzoqYy33TikaqXcnH2jwH9VYWfKXjoBU9LKsyaXEvovVhwnHV\00")
(data (i32.const 17706) "eosio.token\00")
(data (i32.const 17718) "trusteamwins\00")
(data (i32.const 17731) "trybenetwork\00")
(data (i32.const 17744) "eosiotptoken\00: no conversion\00")
(data (i32.const 17773) "eosiomeetone\00: out of range\00")
(data (i32.const 17801) "newdexissuer\00")
(data (i32.const 17814) "worktokenbvi\00")
(data (i32.const 17827) "txtprtltoken\00")
(data (i32.const 17840) "pixeos1token\00")
(data (i32.const 17853) "ptitokenhome\00")
(data (i32.const 17866) "transfer\00")
(data (i32.const 17875) "trustdicerev\00")
(data (i32.const 17888) "trustdice\00")
(data (i32.const 17899) "TXT\00")
(data (i32.const 17903) "TRYBE\00")
(data (i32.const 17909) "TPT\00")
(data (i32.const 17913) "MEETONE\00")
(data (i32.const 17921) "NDX\00")
(data (i32.const 17925) "LYNX\00")
(data (i32.const 17930) "BTC\00")
(data (i32.const 17934) "PIXEOS\00")
(data (i32.const 17941) "ETH\00")
(data (i32.const 17945) "OATH\00")
(data (i32.const 17950) "PTI\00")
(data (i32.const 17954) "UUU\00")
(data (i32.const 17958) "USDT\00")
(data (i32.const 17963) "under\00")
(data (i32.const 17969) "over\00")
(data (i32.const 17974) "trustdicelog\00")
(data (i32.const 17987) "only transfer\00")
(data (i32.const 18001) "place a bid for trustdice auction\00")
(data (i32.const 18035) "txtprotocol1\00")
(data (i32.const 18048) "player not null\00")
(data (i32.const 18064) "player length not in [3, 11]\00")
(data (i32.const 18093) "player name invalid\00")
(data (i32.const 18113) "referrer can not be self\00")
(data (i32.const 18138) "vip must in 0 - 10\00")
(data (i32.const 18157) "player is not equal to\00")
(data (i32.const 18180) "VITA\00")
(data (i32.const 18185) "only EOS, TXT, TRYBE, TPT, MEETONE, NDX, BTC, LYNX, PIXEOS can be claim\00")
(data (i32.const 18257) "only center user can get it\00")
(data (i32.const 18285) "BGG\00")
(data (i32.const 18289) "no active auction\00")
(data (i32.const 18307) "auction not end\00")
(data (i32.const 18323) "bet not found\00")
(data (i32.const 18337) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18388) "error reading iterator\00")
(data (i32.const 18411) "read\00")
(data (i32.const 18416) "get\00")
(data (i32.const 18420) "\f8G\00\00")
(data (i32.const 18424) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 18457) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 18506) "invalid symbol name\00")
(data (i32.const 18526) "bet id:\00")
(data (i32.const 18534) " player: \00")
(data (i32.const 18544) " winner! - trustdice.win\00")
(data (i32.const 18569) "write\00")
(data (i32.const 18575) " payout: \00")
(data (i32.const 18585) " jackpot winner! - trustdice.win\00")
(data (i32.const 18618) "fund unlock error\00")
(data (i32.const 18636) "cannot create objects in table of another contract\00")
(data (i32.const 18687) "attempt to subtract asset with different symbol\00")
(data (i32.const 18735) "subtraction underflow\00")
(data (i32.const 18757) "subtraction overflow\00")
(data (i32.const 18778) "cannot pass end iterator to modify\00")
(data (i32.const 18813) "object passed to modify is not in multi_index\00")
(data (i32.const 18859) "cannot modify objects in table of another contract\00")
(data (i32.const 18910) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18969) "cannot pass end iterator to erase\00")
(data (i32.const 19003) "cannot increment end iterator\00")
(data (i32.const 19033) "object passed to erase is not in multi_index\00")
(data (i32.const 19078) "cannot erase objects in table of another contract\00")
(data (i32.const 19128) "attempt to remove object that was not in multi_index\00")
(data (i32.const 19181) "Winner Rewards of Trust Dice Auction! (https://trustdice.win/)\00")
(data (i32.const 19244) "only EOS token or TXT token allowed\00")
(data (i32.const 19280) "quantity invalid\00")
(data (i32.const 19297) "transfer quantity must be greater than 100\00")
(data (i32.const 19340) "transfer quantity must be greater 30 per than last user quantity\00")
(data (i32.const 19405) "Bidding Rewards of Trust Dice Auction! (https://trustdice.win/)\00")
(data (i32.const 19469) "invalid memo\00")
(data (i32.const 19482) "no type\00")
(data (i32.const 19490) "no roll under\00")
(data (i32.const 19504) "no seed hash\00")
(data (i32.const 19517) "no user seed hash\00")
(data (i32.const 19535) "no expiration\00")
(data (i32.const 19549) "no vip\00")
(data (i32.const 19556) "no referrer\00")
(data (i32.const 19568) "no signature\00")
(data (i32.const 19581) "type is not under or over\00")
(data (i32.const 19607) "token not allowed\00")
(data (i32.const 19625) "transfer quantity must be greater than 0.1\00")
(data (i32.const 19668) "transfer quantity must be smaller than 300\00")
(data (i32.const 19711) "transfer quantity must be smaller than 1000000\00")
(data (i32.const 19758) "transfer quantity must be greater than 0.5\00")
(data (i32.const 19801) "transfer quantity must be smaller than 500\00")
(data (i32.const 19844) "transfer quantity must be greater than 1\00")
(data (i32.const 19885) "transfer quantity must be smaller than 1500\00")
(data (i32.const 19929) "transfer quantity must be smaller than 4000\00")
(data (i32.const 19973) "transfer quantity must be smaller than 3000\00")
(data (i32.const 20017) "transfer quantity must be greater than 0.0000001\00")
(data (i32.const 20066) "transfer quantity must be smaller than 0.1\00")
(data (i32.const 20109) "transfer quantity must be smaller than 10000\00")
(data (i32.const 20154) "transfer quantity must be greater than 0.00001\00")
(data (i32.const 20201) "transfer quantity must be smaller than 2\00")
(data (i32.const 20242) "transfer quantity must be smaller than 1000\00")
(data (i32.const 20286) "transfer quantity must be greater than 0.001\00")
(data (i32.const 20331) "roll overflow, must be greater than 4 and less than 97\00")
(data (i32.const 20386) "offered overflow, expected earning is greater than the maximum bonus\00")
(data (i32.const 20455) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 20514) "seed hash expired\00")
(data (i32.const 20532) "hash duplicate\00")
(data (i32.const 20547) "-\00")
(data (i32.const 20549) "next primary key in table is at autoincrement limit\00")
(data (i32.const 20601) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 20655) "cannot decrement iterator at beginning of table\00")
(data (i32.const 20703) "attempt to add asset with different symbol\00")
(data (i32.const 20746) "addition underflow\00")
(data (i32.const 20765) "addition overflow\00")
(data (i32.const 20783) "only EOS token allowed\00")
(data (i32.const 20806) "amount should lager than 0\00")
(data (i32.const 20833) "amount too large\00")
(data (i32.const 20850) "Congratulations! This is the faucet payout from Trustdice (https://trustdice.win/), have a great time here and best of luck.\00")
(data (i32.const 20975) "only EOS or BTC or ETH or USDT token allowed\00")
(data (i32.const 21020) "\e6\9d\a5\e8\87\aa trustdice.win \e7\9a\84\e6\8e\a8\e8\8d\90\e5\a5\96\e9\87\91\ef\bc\8c\e6\84\9f\e8\b0\a2\e6\82\a8\e7\9a\84\e6\94\af\e6\8c\81\e3\80\82Referral commission from trustdice.win. Thanks for your support.\00")
(data (i32.const 21145) "no to\00")
(data (i32.const 21151) "no player\00")
(data (i32.const 21161) "no coin\00")
(data (i32.const 21169) "-Faucet from the Trust Game Platform! (https://trustdice.win/)\e6\9d\a5\e8\87\aaTrust\e6\b8\b8\e6\88\8f\e5\b9\b3\e5\8f\b0\e7\9a\84\e5\85\8d\e8\b4\b9\e7\b3\96\e6\9e\9c!\00")
(data (i32.const 21280) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "sha256" (func $fimport$2 (param i32 i32 i32)))
(import "env" "memset" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "ripemd160" (func $fimport$5 (param i32 i32 i32)))
(import "env" "eosio_exit" (func $fimport$6 (param i32)))
(import "env" "action_data_size" (func $fimport$7 (result i32)))
(import "env" "read_action_data" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$9 (result i64)))
(import "env" "send_inline" (func $fimport$10 (param i32 i32)))
(import "env" "require_auth" (func $fimport$11 (param i64)))
(import "env" "require_recipient" (func $fimport$12 (param i64)))
(import "env" "assert_sha256" (func $fimport$13 (param i32 i32 i32)))
(import "env" "sha512" (func $fimport$14 (param i32 i32 i32)))
(import "env" "db_next_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "send_deferred" (func $fimport$16 (param i32 i64 i32 i32 i32)))
(import "env" "db_find_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_idx64_upperbound" (func $fimport$18 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$19 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$20 (param i32 i32 i32 i32 i32)))
(import "env" "db_get_i64" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$22 (result i64)))
(import "env" "db_store_i64" (func $fimport$23 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$24 (param i32 i64 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$25 (param i32)))
(import "env" "db_idx64_find_primary" (func $fimport$26 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_next" (func $fimport$27 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$28 (param i32)))
(import "env" "db_idx64_store" (func $fimport$29 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_previous_i64" (func $fimport$31 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$32 (param i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$33))
(import "env" "__unordtf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$40 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$41 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$42 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$43 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$44 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$45 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$46 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$47 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$48 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$49 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$50 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$51 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$52 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $12))
(export "_ZdlPv" (func $144))
(export "_Znwj" (func $142))
(export "_Znaj" (func $143))
(export "_ZdaPv" (func $145))
(table $0 10 10 anyfunc)
(elem (i32.const 1) $13 $16 $18 $20 $22 $24 $26 $28 $11)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 21537))
(global $global$2 i32 (i32.const 21537))


int_32 .FUNC $174 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $172($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( (CALL $167(int_32(($3 << [24]) >> [24])) == 0) ){ goto $label$3 }
	$3 = *($0 + [1])
	$4 = ($0 + [1])
	$0 = $4
	if ( $3 ){ goto $label$4 }
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)[49]) ){ goto $label$2 }
	$4 = [0]
	
.LOOP $label$5:
	$3 = ($0 + $4)
	$5 = ($4 + [1])
	$4 = $5
	if ( ((int_32)*(($3 + [1])) == (int_32)[49]) ){ goto $label$5 }
	$4 = ($0 + $5)
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	$4 = $0
	
.LABEL $label$1
	$6 = ((uint_32)((int_32)CALL $180($4) * (int_32)[733]) / (uint_32)[1000])
	$7 = ($6 + [1])
	$8 = CALL _Znwj($7)
	$9 = ($8 + $6)
	$0 = [0]
	
.LOOP $label$6:
	*(($8 + $0)) = [0]
	$0 = ($0 + [1])
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$6 }
	$10 = ($8 + $7)
	$11 = [0]
	$3 = *($4)
	if ( ($3 == 0) ){ goto $label$15 }
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$14 }
	$0 = [0]
	
.LOOP $label$16:
	$11 = $0
	$12 = $4
	if ( CALL $167(int_32(($3 << [24]) >> [24])) ){ goto $label$12 }
	$0 = *($12)
	$13 = *(($0 + [8416]))
	if ( ((int_32)$13 == (int_32)[-1]) ){ goto $label$13 }
	if ( ((int_32)$0 != (int_32)[49]) ){ goto $label$18 }
	$0 = [0]
	if ( ($11 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$4 = [0]
	$3 = $8
	
.LOOP $label$19:
	$14 = (((int_32)*($0) * (int_32)[58]) + $13)
	*(($0 = ($3 + $6))) = $14
	$0 = ($4 + [1])
	$13 = ((int_32)$14 / (int_32)[256])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$17 }
	$3 = ($3 + [-1])
	$4 = $0
	if ( (((uint_32)($14 + [255]) > (uint_32)[510]) | ($0 <= $11)) ){ goto $label$19 }
	
.LABEL $label$17
	$4 = ($12 + [1])
	$3 = *($12 + [1])
	if ( $3 ){ goto $label$16 }
	$13 = $10
	$11 = $0
	goto $label$10 
	
.LABEL $label$15
	$13 = $10
	goto $label$10 
	
.LABEL $label$14
	
.LOOP $label$20:
	if ( CALL $167(int_32(($3 << [24]) >> [24])) ){ goto $label$11 }
	if ( ((int_32)*((*($4) + [8416])) == (int_32)[255]) ){ goto $label$13 }
	$3 = *($4 + [1])
	$12 = ($4 + [1])
	$4 = $12
	if ( $3 ){ goto $label$20 }
	$11 = [0]
	$13 = $8
	goto $label$9 
	
.LABEL $label$13
	$4 = [0]
	if ( $8 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$12
	$13 = $10
	goto $label$9 
	
.LABEL $label$11
	$13 = $8
	
.LABEL $label$10
	$12 = $4
	
.LABEL $label$9
	$0 = ($12 + [-1])
	
.LOOP $label$21:
	$0 = ($0 + [1])
	if ( CALL $167(*($0)) ){ goto $label$21 }
	$4 = [0]
	if ( *($0) ){ goto $label$22 }
	$4 = ($8 + ($7 - $11))
	if ( ((int_32)$4 == (int_32)$13) ){ goto $label$25 }
	$0 = $4
	if ( *($4) ){ goto $label$23 }
	$14 = ([0] - $11)
	$0 = [-1]
	$3 = $9
	
.LOOP $label$26:
	$4 = $3
	if ( ((int_32)$14 == (int_32)$0) ){ goto $label$24 }
	$0 = ($0 + [-1])
	$3 = ($4 + [1])
	if ( (*((($4 + $14) + [2])) == 0) ){ goto $label$26 }
	$0 = (($4 - $11) + [2])
	$4 = (($3 - $11) + [1])
	goto $label$23 
	
.LABEL $label$25
	$0 = $13
	goto $label$23 
	
.LABEL $label$24
	$0 = (($4 - $11) + [2])
	$4 = $0
	
.LABEL $label$23
	$4 = (($10 - $4) + $5)
	$3 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) >= (uint_32)$4) ){ goto $label$27 }
	$14 = *($1 + [4])
	$3 = *($1)
	$14 = (*($1 + [4]) - $3)
	$11 = CALL _Znwj($4)
	$7 = ($11 + ($14 - $3))
	$6 = ($7 - $14)
	$4 = ($11 + $4)
	if ( ((int_32)$14 < (int_32)[1]) ){ goto $label$28 }
	CALL memcpy($6, $3, $14)
	$3 = *($1)
	
.LABEL $label$28
	*($1) = $6
	*(($1 + [4])) = $7
	*(($1 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$27 }
	CALL _ZdlPv($3)
	
.LABEL $label$27
	*($2 + [15]) = [0]
	CALL $7($1, $5, ($2 + [15]))
	if ( ((int_32)$0 == (int_32)$13) ){ goto $label$29 }
	$6 = ($9 + [1])
	$13 = ($1 + [8])
	$3 = ($1 + [4])
	
.LOOP $label$30:
	$4 = ($0 + [1])
	$14 = *($3)
	if ( ((int_32)$14 == (int_32)*($13)) ){ goto $label$31 }
	*($14) = *($0)
	*($3) = (*($3) + [1])
	$0 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	CALL $8($1, $0)
	$0 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$30 }
	
.LABEL $label$29
	$4 = [1]
	
.LABEL $label$22
	if ( ($8 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($8)
	
.LABEL $label$7
	$global$0 = ($2 + [16])
	return $4
}

int_64 .FUNC $176 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $173($3, (int_64)0)
	$4 = CALL $175($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

int_32 .FUNC $177 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $173($3, (int_64)0)
	$4 = CALL $175($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $170 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $181([8972])
	$3 = *([0] + [8980])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8984])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8988]
	*([0] + [8980]) = [8988]
	$4 = *([0] + [8984])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $186([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8980])
	*([0] + [8980]) = $3
	*([0] + [8984]) = [0]
	
.LABEL $label$2
	*([0] + [8984]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $182([8972])
	return [0]
	
.LABEL $label$1
	CALL $182([8972])
	return [-1]
}

int_32 .FUNC $171 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $172 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $171($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *($0)
	$3 = *($0 + [8])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$4 }
	if ( ($4 == 0) ){ goto $label$5 }
	*($0 + [4]) = $4
	CALL _ZdlPv($4)
	$3 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = [2147483647]
	if ( ((uint_32)$3 > (uint_32)[1073741822]) ){ goto $label$6 }
	$4 = ($3 << [1])
	$5 = ( $1 ? $4 : ($4 <= $1) )
	
.LABEL $label$6
	$4 = CALL _Znwj($5)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $5)
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($4) = *($2)
	$4 = (*($0) + [1])
	*($0) = $4
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$3 = (*($0 + [4]) - $4)
	$5 = ( $3 ? $1 : ($3 <= $1) )
	if ( ($5 == 0) ){ goto $label$8 }
	CALL memset($4, *($2), $5)
	
.LABEL $label$8
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	$1 = ($3 - $1)
	$4 = ($0 + [4])
	$0 = *($4)
	
.LOOP $label$9:
	*($0) = *($2)
	$0 = (*($4) + [1])
	*($4) = $0
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = (*($0) + $1)
	return (unreachable)
	
.LABEL $label$1
	CALL $166($0)
}

int_32 .FUNC $178 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_64 .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_64 $26
	int_64 $27
	int_64 $28
	int_64 $29
	int_64 $30
	int_64 $31
	int_64 $32
	int_64 $33
	int_64 $34
	int_64 $35
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = *($0)
	$3 = ($2 & [1])
	CALL sha256(( *($0 + [8]) ? ($0 + [1]) : $3 ), ( *($0 + [4]) ? uint_32($2 >> [1]) : $3 ), $1)
	$4 = *($1)
	$5 = *($1 + [1])
	$6 = *($1 + [2])
	$7 = *($1 + [3])
	$8 = *($1 + [4])
	$9 = *($1 + [5])
	$10 = *($1 + [6])
	$11 = *($1 + [7])
	$12 = *($1 + [8])
	$13 = *($1 + [9])
	$14 = *($1 + [10])
	$15 = *($1 + [11])
	$16 = *($1 + [12])
	$17 = *($1 + [13])
	$18 = *($1 + [14])
	$19 = *($1 + [15])
	$20 = *($1 + [16])
	$21 = *($1 + [17])
	$22 = *($1 + [18])
	$23 = *($1 + [19])
	$24 = *($1 + [20])
	$25 = *($1 + [21])
	$26 = *($1 + [22])
	$27 = *($1 + [23])
	$28 = *($1 + [24])
	$29 = *($1 + [25])
	$30 = *($1 + [26])
	$31 = *($1 + [27])
	$32 = *($1 + [28])
	$33 = *($1 + [29])
	$34 = *($1 + [30])
	$35 = *($1 + [31])
	$global$0 = ($1 + [32])
	return ((uint_64)((int_64)$35 | (int_64)((int_64)((uint_64)((int_64)$34 | (int_64)((int_64)((uint_64)((int_64)$33 | (int_64)((int_64)((uint_64)((int_64)$32 | (int_64)((int_64)((uint_64)((int_64)$31 | (int_64)((int_64)((uint_64)((int_64)$30 | (int_64)((int_64)((uint_64)((int_64)$29 | (int_64)((int_64)((uint_64)((int_64)$28 | (int_64)((int_64)((uint_64)((int_64)$27 | (int_64)((int_64)((uint_64)((int_64)$26 | (int_64)((int_64)((uint_64)((int_64)$25 | (int_64)((int_64)((uint_64)((int_64)$24 | (int_64)((int_64)((uint_64)((int_64)$23 | (int_64)((int_64)((uint_64)((int_64)$22 | (int_64)((int_64)((uint_64)((int_64)$21 | (int_64)((int_64)((uint_64)((int_64)$20 | (int_64)((int_64)((uint_64)((int_64)$19 | (int_64)((int_64)((uint_64)((int_64)$18 | (int_64)((int_64)((uint_64)((int_64)$17 | (int_64)((int_64)((uint_64)((int_64)$16 | (int_64)((int_64)((uint_64)((int_64)$15 | (int_64)((int_64)((uint_64)((int_64)$14 | (int_64)((int_64)((uint_64)((int_64)$13 | (int_64)((int_64)((uint_64)((int_64)$12 | (int_64)((int_64)((uint_64)((int_64)$11 | (int_64)((int_64)((uint_64)((int_64)$10 | (int_64)((int_64)((uint_64)((int_64)$9 | (int_64)((int_64)((uint_64)((int_64)$8 | (int_64)((int_64)((uint_64)((int_64)$7 | (int_64)((int_64)((uint_64)((int_64)$6 | (int_64)((int_64)((uint_64)((int_64)$5 | (int_64)((int_64)$4 << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007)
}

int_32 .FUNC $5 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [16])
	$global$0 = $5
	CALL eosio_assert(((int_32)*($3) != (int_32)[-1]), [8359])
	$2 = CALL $158($0, *($2), *($3))
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	$3 = *($3)
	CALL $148($5, $0, $3, ($2 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$2 }
	*($1) = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)*($4) ^ (int_32)[1]), [8377])
	$global$0 = ($5 + [16])
	return $2
	
.LABEL $label$2
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$1
	CALL $151($1, [0])
	*(($1 + [8])) = *(($5 + [8]))
	*($1) = *($5)
	$global$0 = ($5 + [16])
	return $2
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $128(*($1), *($0 + [8]))
	CALL $128(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18569])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18569])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $128(*($1), *($0 + [28]))
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [18569])
	CALL memcpy(*($3 + [4]), $2, [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[19]), [18569])
	CALL memcpy(*($3 + [4]), $2, [20])
	*($3 + [4]) = (*($3 + [4]) + [20])
	$3 = *($0 + [40])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18569])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $3 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = $1
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = $1
	$4 = ($4 & [1])
	$4 = *($0)
	if ( (( *($0 + [4]) ? uint_32($4 >> [1]) : $4 ) == 0) ){ goto $label$1 }
	$6 = ($0 + [1])
	$5 = ($0 + [8])
	$4 = ( *($5) ? $6 : $4 )
	$7 = ($2 + [-1])
	$3 = $1
	
.LOOP $label$2:
	$8 = *($4)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$3 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$4 }
	$2 = ($8 + [-87])
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$5 }
	$2 = ($8 + [-55])
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	CALL eosio_assert([0], [8192])
	
.LABEL $label$3
	$9 = ($2 << [4])
	*($3) = $9
	$11 = uint_32($11 >> [1])
	$12 = ($0 + [4])
	$13 = *($12)
	$11 = *($0)
	$2 = ($11 & [1])
	$8 = *($5)
	$10 = ($4 + [1])
	if ( ((int_32)$10 == (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$9 }
	$8 = *($10)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$7 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$8 }
	$2 = ($8 + [-87])
	goto $label$7 
	
.LABEL $label$9
	$4 = $10
	$3 = ($3 + [1])
	if ( $7 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$8
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$10 }
	$2 = ($8 + [-55])
	goto $label$7 
	
.LABEL $label$10
	$2 = [0]
	CALL eosio_assert([0], [8192])
	$9 = *($3)
	
.LABEL $label$7
	*($3) = ($9 | $2)
	$4 = ($4 + [2])
	$2 = *($0)
	$11 = uint_32($2 >> [1])
	$2 = ($2 & [1])
	$13 = *($12)
	$8 = *($5)
	$3 = ($3 + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	$7 = ($7 + [-1])
	if ( ((int_32)$4 != (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$2 }
	
.LABEL $label$1
	return ($3 - $1)
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [18337])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)6820308914865700864, (int_64)6820308914865700864)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $102($0, $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [18337])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18778])
	CALL $103($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $104($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = (int_64)1397703940
	*($2) = (int_64)0
	CALL eosio_assert([1], [18457])
	$3 = [0]
	$4 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $5
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [18506])
	CALL $101($0, ($1 + [48]), *($1), $2)
	$global$0 = ($2 + [16])
}

void .FUNC memory ()
{
	CALL $141()
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert((((*($1) + [-5]) & [255]) <= [92]), [20331])
	$5 = *($2 + [8])
	if ( ((int_64)$5 == (int_64)1397703940) ){ goto $label$4 }
	if ( ((int_64)$5 == (int_64)1129595400) ){ goto $label$4 }
	if ( ((int_64)$5 == (int_64)1213482248) ){ goto $label$4 }
	if ( ((int_64)$5 == (int_64)310651211528) ){ goto $label$4 }
	if ( ((int_64)$5 == (int_64)1431655688) ){ goto $label$4 }
	if ( ((int_64)$5 == (int_64)361923564804) ){ goto $label$4 }
	if ( ((int_64)$5 != (int_64)1415074820) ){ goto $label$3 }
	
.LABEL $label$4
	*(($4 + [24])) = [0]
	*($4 + [16]) = (int_64)0
	$6 = CALL $180([17963])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$7 }
	*($4 + [16]) = ($6 << [1])
	$7 = (($4 + [16]) | [1])
	if ( $6 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($4 + [16]) = ($8 | [1])
	*($4 + [24]) = $7
	*($4 + [20]) = $6
	
.LABEL $label$6
	CALL memcpy($7, [17963], $6)
	
.LABEL $label$5
	$9 = [0]
	*(($7 + $6)) = [0]
	$12 = ($6 & [1])
	$6 = *($4 + [16])
	$8 = ($6 & [1])
	$6 = *($3)
	$10 = uint_32($6 >> [1])
	$11 = ( *($3 + [4]) ? $10 : $8 )
	if ( ((int_32)$11 != (int_32)( *($4 + [20]) ? uint_32($6 >> [1]) : $12 )) ){ goto $label$10 }
	$6 = ( *($4 + [24]) ? (($4 + [16]) | [1]) : $12 )
	$7 = ($3 + [1])
	if ( $8 ){ goto $label$12 }
	if ( ($11 == 0) ){ goto $label$11 }
	$9 = [0]
	$8 = ([0] - $10)
	
.LOOP $label$13:
	if ( ((int_32)*($7) != (int_32)*($6)) ){ goto $label$10 }
	$6 = ($6 + [1])
	$7 = ($7 + [1])
	$8 = ($8 + [1])
	if ( $8 ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ($11 == 0) ){ goto $label$11 }
	$9 = (CALL $179(( *($3 + [8]) ? $7 : $8 ), $6, $11) == 0)
	if ( (*($4 + [16]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$9 = [1]
	
.LABEL $label$10
	if ( ($12 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*($4 + [24]))
	
.LABEL $label$8
	if ( ($9 == 0) ){ goto $label$14 }
	*($4 + [15]) = (*($1) + [-1])
	CALL $86(($4 + [16]), $0, ($4 + [15]), $2)
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*($4 + [24])), [20455])
	CALL eosio_assert(((int_64)*($2) <= (int_64)*($4 + [16])), [20386])
	
.LABEL $label$14
	*(($4 + [24])) = [0]
	*($4 + [16]) = (int_64)0
	$6 = CALL $180([17969])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$17 }
	*($4 + [16]) = ($6 << [1])
	$7 = (($4 + [16]) | [1])
	if ( $6 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($4 + [16]) = ($8 | [1])
	*($4 + [24]) = $7
	*($4 + [20]) = $6
	
.LABEL $label$16
	CALL memcpy($7, [17969], $6)
	
.LABEL $label$15
	$8 = [0]
	*(($7 + $6)) = [0]
	$9 = ($6 & [1])
	$6 = *($4 + [16])
	$12 = ($6 & [1])
	$6 = *($3)
	$10 = uint_32($6 >> [1])
	$11 = ( *(($3 + [4])) ? $10 : $12 )
	if ( ((int_32)$11 != (int_32)( *($4 + [20]) ? uint_32($6 >> [1]) : $9 )) ){ goto $label$20 }
	$6 = ( *($4 + [24]) ? (($4 + [16]) | [1]) : $9 )
	$7 = ($3 + [1])
	if ( $12 ){ goto $label$22 }
	if ( ($11 == 0) ){ goto $label$21 }
	$8 = [0]
	$3 = ([0] - $10)
	
.LOOP $label$23:
	if ( ((int_32)*($7) != (int_32)*($6)) ){ goto $label$20 }
	$6 = ($6 + [1])
	$7 = ($7 + [1])
	$3 = ($3 + [1])
	if ( $3 ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	if ( ($11 == 0) ){ goto $label$21 }
	$8 = (CALL $179(( *($3 + [8]) ? $7 : $12 ), $6, $11) == 0)
	if ( (*($4 + [16]) & [1]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$8 = [1]
	
.LABEL $label$20
	if ( ($9 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv(*($4 + [24]))
	
.LABEL $label$18
	if ( ($8 == 0) ){ goto $label$3 }
	*($4 + [15]) = ([100] - *($1))
	CALL $86(($4 + [16]), $0, ($4 + [15]), $2)
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*($4 + [24])), [20455])
	CALL eosio_assert(((int_64)*($2) <= (int_64)*($4 + [16])), [20386])
	
.LABEL $label$3
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $146(($4 + [16]))
	
.LABEL $label$1
	CALL $146(($4 + [16]))
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = [1]
	$3 = *($1 + [8])
	if ( ((int_64)$3 == (int_64)1397703940) ){ goto $label$1 }
	if ( ((int_64)$3 == (int_64)1415074820) ){ goto $label$1 }
	if ( ((int_64)$3 == (int_64)76151268725764) ){ goto $label$1 }
	if ( ((int_64)$3 == (int_64)1414550532) ){ goto $label$1 }
	if ( ((int_64)$3 == (int_64)4994016260158475524) ){ goto $label$1 }
	if ( ((int_64)$3 == (int_64)1480871428) ){ goto $label$1 }
	if ( ((int_64)$3 == (int_64)379271597060) ){ goto $label$1 }
	if ( ((int_64)$3 == (int_64)1129595400) ){ goto $label$1 }
	if ( ((int_64)$3 == (int_64)23449582319521796) ){ goto $label$1 }
	if ( ((int_64)$3 == (int_64)1213482248) ){ goto $label$1 }
	if ( ((int_64)$3 == (int_64)310651211528) ){ goto $label$1 }
	if ( ((int_64)$3 == (int_64)1230262276) ){ goto $label$1 }
	if ( ((int_64)$3 == (int_64)1431655688) ){ goto $label$1 }
	$2 = ((int_64)$3 == (int_64)361923564804)
	
.LABEL $label$1
	CALL eosio_assert($2, [19607])
	$4 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$3 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$3 = $5
	$4 = [1]
	$6 = $2
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$3 = $5
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$6 = ($2 + [1])
	$2 = $6
	if ( $4 ){ goto $label$6 }
	$4 = [1]
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	CALL eosio_assert($4, [19280])
	$3 = *(($1 + [8]))
	if ( ((int_64)$3 != (int_64)1397703940) ){ goto $label$7 }
	CALL eosio_assert(((int_64)*($1) > (int_64)999), [19625])
	CALL eosio_assert(((int_64)*($1) < (int_64)3000001), [19668])
	return 
	
.LABEL $label$7
	if ( ((int_64)$3 != (int_64)1415074820) ){ goto $label$8 }
	CALL eosio_assert(((int_64)*($1) > (int_64)999999), [19297])
	CALL eosio_assert(((int_64)*($1) < (int_64)10000000001), [19711])
	return 
	
.LABEL $label$8
	if ( ((int_64)$3 != (int_64)76151268725764) ){ goto $label$9 }
	CALL eosio_assert(((int_64)*($1) > (int_64)4999), [19758])
	CALL eosio_assert(((int_64)*($1) < (int_64)5000001), [19801])
	return 
	
.LABEL $label$9
	if ( ((int_64)$3 != (int_64)1414550532) ){ goto $label$10 }
	CALL eosio_assert(((int_64)*($1) > (int_64)9999), [19844])
	CALL eosio_assert(((int_64)*($1) < (int_64)15000001), [19885])
	return 
	
.LABEL $label$10
	if ( ((int_64)$3 != (int_64)4994016260158475524) ){ goto $label$11 }
	CALL eosio_assert(((int_64)*($1) > (int_64)9999), [19844])
	CALL eosio_assert(((int_64)*($1) < (int_64)15000001), [19885])
	return 
	
.LABEL $label$11
	if ( ((int_64)$3 != (int_64)1480871428) ){ goto $label$12 }
	CALL eosio_assert(((int_64)*($1) > (int_64)9999), [19844])
	CALL eosio_assert(((int_64)*($1) < (int_64)40000001), [19929])
	return 
	
.LABEL $label$12
	if ( ((int_64)$3 != (int_64)379271597060) ){ goto $label$13 }
	CALL eosio_assert(((int_64)*($1) > (int_64)9999), [19844])
	CALL eosio_assert(((int_64)*($1) < (int_64)30000001), [19973])
	return 
	
.LABEL $label$13
	if ( ((int_64)$3 != (int_64)1129595400) ){ goto $label$14 }
	CALL eosio_assert(((int_64)*($1) > (int_64)9), [20017])
	CALL eosio_assert(((int_64)*($1) < (int_64)10000001), [20066])
	return 
	
.LABEL $label$14
	if ( ((int_64)$3 != (int_64)23449582319521796) ){ goto $label$15 }
	CALL eosio_assert(((int_64)*($1) > (int_64)9999), [19844])
	CALL eosio_assert(((int_64)*($1) < (int_64)100000001), [20109])
	return 
	
.LABEL $label$15
	if ( ((int_64)$3 != (int_64)1213482248) ){ goto $label$16 }
	CALL eosio_assert(((int_64)*($1) > (int_64)999), [20154])
	CALL eosio_assert(((int_64)*($1) < (int_64)200000001), [20201])
	return 
	
.LABEL $label$16
	if ( ((int_64)$3 != (int_64)310651211528) ){ goto $label$17 }
	CALL eosio_assert(((int_64)*($1) > (int_64)99999999), [19844])
	CALL eosio_assert(((int_64)*($1) < (int_64)300000000001), [19973])
	return 
	
.LABEL $label$17
	if ( ((int_64)$3 != (int_64)1230262276) ){ goto $label$18 }
	CALL eosio_assert(((int_64)*($1) > (int_64)9999), [19844])
	CALL eosio_assert(((int_64)*($1) < (int_64)15000001), [19885])
	return 
	
.LABEL $label$18
	if ( ((int_64)$3 != (int_64)1431655688) ){ goto $label$19 }
	CALL eosio_assert(((int_64)*($1) > (int_64)99999999), [19844])
	CALL eosio_assert(((int_64)*($1) < (int_64)100000000001), [20242])
	return 
	
.LABEL $label$19
	if ( ((int_64)$3 != (int_64)361923564804) ){ goto $label$20 }
	CALL eosio_assert(((int_64)*($1) > (int_64)9), [20286])
	CALL eosio_assert(((int_64)*($1) < (int_64)3000001), [19668])
	
.LABEL $label$20
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	$3 = CALL $180([17963])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($2 + [16]) = ($3 << [1])
	$4 = (($2 + [16]) | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2 + [16]) = ($5 | [1])
	*($2 + [24]) = $4
	*($2 + [20]) = $3
	
.LABEL $label$5
	CALL memcpy($4, [17963], $3)
	
.LABEL $label$4
	*(($4 + $3)) = [0]
	$3 = ($3 & [1])
	$3 = *($2 + [16])
	$5 = ($3 & [1])
	$3 = *($1)
	$6 = uint_32($3 >> [1])
	$7 = ( *($1 + [4]) ? $6 : $5 )
	if ( ((int_32)$7 != (int_32)( *($2 + [20]) ? uint_32($3 >> [1]) : $3 )) ){ goto $label$13 }
	$3 = ( *($2 + [24]) ? (($2 + [16]) | [1]) : $3 )
	$4 = ($1 + [1])
	if ( $5 ){ goto $label$14 }
	if ( ($7 == 0) ){ goto $label$12 }
	$5 = ([0] - $6)
	
.LOOP $label$15:
	if ( ((int_32)*($4) != (int_32)*($3)) ){ goto $label$13 }
	$3 = ($3 + [1])
	$4 = ($4 + [1])
	$5 = ($5 + [1])
	if ( $5 ){ goto $label$15 }
	goto $label$12 
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$12 }
	if ( (CALL $179(( *($1 + [8]) ? $4 : $5 ), $3, $7) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$3 = CALL $180([17969])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$18 }
	*($2) = ($3 << [1])
	$4 = ($2 | [1])
	if ( $3 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2) = ($5 | [1])
	*($2 + [8]) = $4
	*($2 + [4]) = $3
	
.LABEL $label$17
	CALL memcpy($4, [17969], $3)
	
.LABEL $label$16
	$5 = [0]
	*(($4 + $3)) = [0]
	$3 = ($3 & [1])
	$3 = *($2)
	$7 = ($3 & [1])
	$3 = *($1)
	$8 = uint_32($3 >> [1])
	$6 = ( *(($1 + [4])) ? $8 : $7 )
	if ( ((int_32)$6 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : $3 )) ){ goto $label$8 }
	$3 = ( *($2 + [8]) ? ($2 | [1]) : $3 )
	$4 = ($1 + [1])
	if ( $7 ){ goto $label$11 }
	if ( ($6 == 0) ){ goto $label$10 }
	$1 = ([0] - $8)
	
.LOOP $label$19:
	if ( ((int_32)*($4) != (int_32)*($3)) ){ goto $label$9 }
	$5 = [1]
	$3 = ($3 + [1])
	$4 = ($4 + [1])
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$19 }
	goto $label$8 
	
.LABEL $label$12
	CALL eosio_assert([1], [19581])
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$1 }
	goto $label$7 
	
.LABEL $label$11
	if ( ($6 == 0) ){ goto $label$10 }
	$5 = (CALL $179(( *($1 + [8]) ? $4 : $7 ), $3, $6) == 0)
	goto $label$8 
	
.LABEL $label$10
	$5 = [1]
	goto $label$8 
	
.LABEL $label$9
	$5 = [0]
	
.LABEL $label$8
	CALL eosio_assert($5, [19581])
	if ( (*($2) & [1]) ){ goto $label$20 }
	if ( (*($2 + [16]) & [1]) ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$20
	CALL _ZdlPv(*($2 + [8]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$7
	CALL _ZdlPv(*($2 + [24]))
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$3
	CALL $146(($2 + [16]))
	
.LABEL $label$2
	CALL $146($2)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)1415074820), [19244])
	$3 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$4 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$3 = [1]
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $3 ){ goto $label$5 }
	$3 = [1]
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [19280])
	CALL eosio_assert(((int_64)((int_64)*($1) * (int_64)10) >= (int_64)((int_64)*($2) * (int_64)13)), [19340])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [24]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$22()), [18636])
	*($4 + [36]) = $3
	*($4 + [32]) = $1
	*($4 + [40]) = ($4 + [24])
	*(($5 = CALL _Znwj([176])) + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)1398362884
	CALL eosio_assert([1], [18457])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [18506])
	*($5 + [68]) = [0]
	*($5 + [60 align=4]) = (int_64)0
	*($5 + [152]) = $1
	CALL $125(($4 + [32]), $5)
	*($4 + [16]) = $5
	*($4 + [40]) = [0]
	*($4 + [32]) = (int_64)0
	$3 = [80]
	
.LOOP $label$6:
	$7 = *(($5 + $3))
	CALL $155(($4 + [32]), *((uint_32($7 >> [4]) + [8223])))
	CALL $155(($4 + [32]), *((($7 & [15]) + [8223])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[112]) ){ goto $label$6 }
	$2 = CALL $4(($4 + [32]))
	if ( (*($4 + [32]) & [1]) ){ goto $label$8 }
	$7 = $5
	goto $label$7 
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [40])))
	$7 = *($4 + [16])
	
.LABEL $label$7
	*($4 + [32]) = $2
	$8 = *($7 + [156])
	*($4 + [12]) = $8
	$9 = ($1 + [28])
	$3 = *($9)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$10 }
	*($3 + [8]) = $2
	*($3 + [16]) = $8
	*($4 + [16]) = [0]
	*($3) = $7
	*($9) = ($3 + [24])
	goto $label$9 
	
.LABEL $label$10
	CALL $95(($1 + [24]), ($4 + [16]), ($4 + [32]), ($4 + [12]))
	
.LABEL $label$9
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [16])
	*($4 + [16]) = [0]
	if ( ($3 == 0) ){ goto $label$11 }
	if ( (*($3 + [60]) & [1]) ){ goto $label$16 }
	if ( (*($3 + [28]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($3 + [68])))
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($3 + [36])))
	if ( (*($3 + [16]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$12
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$global$0 = ($4 + [48])
}

int_64 .FUNC $46 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = CALL $91(($0 + [8]))
	$2 = ($0 + [128])
	$3 = *(($0 + [156]))
	if ( ((int_32)$3 == (int_32)*(($0 + [152]))) ){ goto $label$2 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$2), [18337])
	if ( $3 ){ goto $label$1 }
	$3 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$3 = CALL db_find_i64(*($2), *(($0 + [136])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $92($2, $3)
	CALL eosio_assert(((int_32)*($3 + [8]) == (int_32)$2), [18337])
	goto $label$1 
	
.LABEL $label$3
	$3 = ($1 + [8])
	
.LABEL $label$1
	*($1 + [8]) = ((int_64)*($3) + (int_64)1)
	CALL $93($2, ($1 + [8]), *($0))
	$4 = *($1 + [8])
	$global$0 = ($1 + [16])
	return $4
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$8 = ($global$0 - [96])
	$global$0 = $8
	$9 = CALL $147(($8 + [80]), $1)
	CALL $154($9, [20547])
	*($8 + [48]) = (int_64)0
	*($8 + [56]) = [0]
	$1 = (($8 + [48]) | [1])
	$10 = *($2)
	
.LOOP $label$1:
	$11 = ((uint_64)$10 / (uint_64)(int_64)10)
	$2 = (CASTING uint_32)(uint_64 (int_64))($10 - ((int_64)$11 * (int_64)10))
	CALL $2(($8 + [8]), int_32((( ($2) | [48]) ? ($2 + [55]) : ($2 <= [10]) ) << [24]) >> [24]), ($8 + [48]))
	if ( (*($8 + [48]) & [1]) ){ goto $label$3 }
	*($8 + [48]) = [0]
	goto $label$2 
	
.LABEL $label$3
	*(*((($8 + [48]) + [8]))) = [0]
	*($8 + [52]) = [0]
	
.LABEL $label$2
	CALL $151(($8 + [48]), [0])
	*((($8 + [48]) + [8])) = *((($8 + [8]) + [8]))
	*($8 + [48]) = *($8 + [8])
	$2 = ((uint_64)$10 > (uint_64)(int_64)9)
	$10 = $11
	if ( $2 ){ goto $label$1 }
	$2 = *($8 + [48])
	$13 = ($2 & [1])
	$12 = ($8 + [56])
	CALL $156($9, ( *($12) ? $1 : $13 ), ( *($8 + [52]) ? uint_32($2 >> [1]) : $13 ))
	if ( ((*($8 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($12))
	
.LABEL $label$4
	CALL $154($9, [20547])
	$2 = [0]
	*($8 + [16]) = [0]
	*($8 + [8]) = (int_64)0
	
.LOOP $label$5:
	$1 = *(($3 + $2))
	CALL $155(($8 + [8]), *((uint_32($1 >> [4]) + [8223])))
	CALL $155(($8 + [8]), *((($1 & [15]) + [8223])))
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$5 }
	$2 = *($8 + [8])
	$3 = ($2 & [1])
	$1 = (($8 + [8]) + [8])
	CALL $156($9, ( *($1) ? (($8 + [8]) | [1]) : $3 ), ( *($8 + [12]) ? uint_32($2 >> [1]) : $3 ))
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($1))
	
.LABEL $label$6
	CALL $154($9, [20547])
	*($8 + [48]) = (int_64)0
	*($8 + [56]) = [0]
	$3 = (($8 + [48]) | [1])
	$10 = *($4)
	
.LOOP $label$7:
	$11 = ((uint_64)$10 / (uint_64)(int_64)10)
	$2 = (CASTING uint_32)(uint_64 (int_64))($10 - ((int_64)$11 * (int_64)10))
	CALL $2(($8 + [8]), int_32((( ($2) | [48]) ? ($2 + [55]) : ($2 <= [10]) ) << [24]) >> [24]), ($8 + [48]))
	if ( (*($8 + [48]) & [1]) ){ goto $label$9 }
	*($8 + [48]) = [0]
	goto $label$8 
	
.LABEL $label$9
	*(*((($8 + [48]) + [8]))) = [0]
	*($8 + [52]) = [0]
	
.LABEL $label$8
	CALL $151(($8 + [48]), [0])
	*((($8 + [48]) + [8])) = *($1)
	*($8 + [48]) = *($8 + [8])
	$2 = ((uint_64)$10 > (uint_64)(int_64)9)
	$10 = $11
	if ( $2 ){ goto $label$7 }
	$2 = *($8 + [48])
	$4 = ($2 & [1])
	$1 = (($8 + [48]) + [8])
	CALL $156($9, ( *($1) ? $3 : $4 ), ( *($8 + [52]) ? uint_32($2 >> [1]) : $4 ))
	if ( ((*($8 + [48]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($1))
	
.LABEL $label$10
	CALL $154($9, [20547])
	*($8 + [48]) = (int_64)0
	*($8 + [56]) = [0]
	$3 = (($8 + [48]) | [1])
	$10 = *($6)
	
.LOOP $label$11:
	$11 = ((uint_64)$10 / (uint_64)(int_64)10)
	$2 = (CASTING uint_32)(uint_64 (int_64))($10 - ((int_64)$11 * (int_64)10))
	CALL $2(($8 + [8]), int_32((( ($2) | [48]) ? ($2 + [55]) : ($2 <= [10]) ) << [24]) >> [24]), ($8 + [48]))
	if ( (*($8 + [48]) & [1]) ){ goto $label$13 }
	*($8 + [48]) = [0]
	goto $label$12 
	
.LABEL $label$13
	*(*($1)) = [0]
	*($8 + [52]) = [0]
	
.LABEL $label$12
	CALL $151(($8 + [48]), [0])
	*($1) = *((($8 + [8]) + [8]))
	*($8 + [48]) = *($8 + [8])
	$2 = ((uint_64)$10 > (uint_64)(int_64)9)
	$10 = $11
	if ( $2 ){ goto $label$11 }
	$2 = *($8 + [48])
	$1 = ($2 & [1])
	$4 = ($8 + [56])
	CALL $156($9, ( *($4) ? $3 : $1 ), ( *($8 + [52]) ? uint_32($2 >> [1]) : $1 ))
	if ( ((*($8 + [48]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($4))
	
.LABEL $label$14
	CALL $154($9, [20547])
	$2 = *($5)
	$1 = ($2 & [1])
	CALL $156($9, ( *($5 + [8]) ? ($5 + [1]) : $1 ), ( *($5 + [4]) ? uint_32($2 >> [1]) : $1 ))
	$2 = ( *($9 + [8]) ? ($9 + [1]) : (*($8 + [80]) & [1]) )
	CALL sha256($2, CALL $180($2), ($8 + [48]))
	*($8 + [7]) = [0]
	CALL $10(($8 + [8]), [8948], ($8 + [7]))
	CALL assert_recover_key(($8 + [48]), $7, [66], ($8 + [8]), [34])
	if ( ((*($8 + [80]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($9 + [8])))
	
.LABEL $label$15
	$global$0 = ($8 + [96])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = CALL current_time()
	$4 = ((int_64)((uint_64)$4 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((uint_64)*($2) > (uint_64)$4), [20514])
	$5 = [0]
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	
.LOOP $label$1:
	$6 = *(($1 + $5))
	CALL $155(($3 + [16]), *((uint_32($6 >> [4]) + [8223])))
	CALL $155(($3 + [16]), *((($6 & [15]) + [8223])))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$1 }
	$7 = CALL $4(($3 + [16]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$2
	$8 = ($0 + [88])
	CALL $87(($3 + [8]), $8, $7)
	CALL eosio_assert((*($3 + [12]) == 0), [20532])
	*($3) = $8
	*($3 + [16]) = (int_64)0
	*($3 + [40]) = $4
	$5 = [0]
	$6 = $8
	$9 = [0]
	$10 = CALL db_idx64_upperbound(*($0 + [88]), *(($0 + [96])), (int_64)7615815668302086144, ($3 + [40]), ($3 + [16]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	CALL $87(($3 + [32]), $8, *($3 + [16]))
	*((($9 = *($3 + [36])) + [56])) = $10
	$6 = *($3)
	
.LABEL $label$3
	*($3 + [16]) = (int_64)0
	*($3 + [40]) = (int_64)0
	$10 = CALL db_idx64_lowerbound(*($6), *($6 + [8]), (int_64)7615815668302086144, ($3 + [40]), ($3 + [16]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$4 }
	CALL $87(($3 + [32]), $6, *($3 + [16]))
	*((($5 = *($3 + [36])) + [56])) = $10
	
.LABEL $label$4
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$5 }
	$10 = $3
	$6 = [1]
	
.LOOP $label$6:
	*($3 + [16]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $10))
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [18969])
	CALL $88(($3 + [16]))
	CALL $89(*($3), $5)
	$4 = *($3 + [16])
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$9 == (int_32)$5)) ){ goto $label$5 }
	$10 = (CASTING uint_32)(uint_64 $4)
	$11 = ($6 <= [3])
	$6 = ($6 + [1])
	if ( $11 ){ goto $label$6 }
	
.LABEL $label$5
	$4 = *($0)
	*($3 + [20]) = $2
	*($3 + [16]) = $1
	CALL $90(($3 + [40]), $8, $4, ($3 + [16]))
	$global$0 = ($3 + [48])
}

int_32 .FUNC $167 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

void .FUNC $166 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $165 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $164 ()
{
	CALL abort()
	(unreachable)
}

int_64 .FUNC $163 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $180([8394])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8394], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $168())
	*(CALL $168()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $176($4, ($3 + [12]), $2)
	$0 = CALL $168()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $161($3)
	
.LABEL $label$1
	CALL $162($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $162 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $72($1, $0, [17757])
	CALL $165()
	(unreachable)
}

void .FUNC $161 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $72($1, $0, [17786])
	CALL $164()
	(unreachable)
}

int_32 .FUNC $160 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $180([8240])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8240], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $168())
	*(CALL $168()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $177($4, ($3 + [12]), $2)
	$5 = CALL $168()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $161($3)
	
.LABEL $label$1
	CALL $162($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $169 (int_32 $0)
{
}

int_32 .FUNC $168 ()
{
	return [8964]
}

int_64 .FUNC $175 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $174($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $168()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $174($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [21281]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $173($0, (int_64)0)
	*(CALL $168()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $174($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $174($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $174($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $174($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [21281])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [21281]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [21281]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $174($0)
	$5 = *(($6 + [21281]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $174($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [21281]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8214]))
	$8 = (int_64)0
	$5 = *(($6 + [21281]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [21281]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $174($0)
	$5 = *(($6 + [21281]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $174($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [21281]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $173($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [21281]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [21281]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $174($0) + [21281]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $168()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $168()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $168()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [16])
	$global$0 = $3
	$5 = *(($1 + [28]))
	$4 = *($1 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$6 = ($3 + [8])
	$7 = $5
	
.LOOP $label$3:
	$7 = ($7 + [-24])
	$8 = *($7)
	$9 = [0]
	*($6) = [0]
	*($3) = (int_64)0
	$10 = ($8 + [80])
	
.LOOP $label$4:
	$8 = *(($10 + $9))
	CALL $155($3, *((uint_32($8 >> [4]) + [8223])))
	CALL $155($3, *((($8 & [15]) + [8223])))
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)[32]) ){ goto $label$4 }
	$11 = CALL $4($3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($6))
	
.LABEL $label$5
	if ( ((int_64)$11 == (int_64)$2) ){ goto $label$1 }
	$5 = $7
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$5 = $4
	
.LABEL $label$1
	if ( ((int_32)$5 == (int_32)*(($1 + [24]))) ){ goto $label$7 }
	$9 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [152]) == (int_32)$1), [18337])
	*($0 + [4]) = $9
	goto $label$6 
	
.LABEL $label$7
	$9 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)4229865212519383040, $2)
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$8 }
	$9 = CALL $76($1, $9)
	CALL eosio_assert(((int_32)*($9 + [152]) == (int_32)$1), [18337])
	*($0 + [4]) = $9
	goto $label$6 
	
.LABEL $label$8
	*($0 + [4]) = [0]
	
.LABEL $label$6
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	
.LOOP $label$1:
	$5 = *(($1 + $4))
	CALL $155($3, *((uint_32($5 >> [4]) + [8223])))
	CALL $155($3, *((($5 & [15]) + [8223])))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$1 }
	$5 = ($3 + [8])
	$4 = ( *($5) ? ($3 | [1]) : (*($3) & [1]) )
	CALL assert_sha256($4, CALL $180($4), $2)
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$2
	$global$0 = ($3 + [16])
}

int_64 .FUNC $50 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$2 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [18337])
	if ( ($4 == 0) ){ goto $label$1 }
	$1 = *($4)
	$global$0 = ($3 + [16])
	return $1
	
.LABEL $label$2
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3932090329917215744, (int_64)3932090329917215744)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $129($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [18337])
	$1 = *($4)
	$global$0 = ($3 + [16])
	return $1
	
.LABEL $label$1
	*($3 + [8]) = $2
	CALL $130($3, $0, $1, ($3 + [8]))
	$1 = *(*($3 + [4]))
	$global$0 = ($3 + [16])
	return $1
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [18337])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3932090329917215744, (int_64)3932090329917215744)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $129($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [18337])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18778])
	CALL $132($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $133($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [18337])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3932090330088022528, (int_64)3932090330088022528)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $112($0, $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [18337])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18778])
	CALL $115($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $116($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2 + [24]) = [0]
	*($2 + [8]) = ($2 + [24])
	$4 = ($1 + [8])
	*($2 + [36]) = $4
	*($2 + [32]) = $1
	$5 = ($1 + [16])
	*($2 + [40]) = $5
	$6 = ($1 + [28])
	*($2 + [44]) = $6
	$7 = ($1 + [40])
	*($2 + [48]) = $7
	$8 = ($1 + [56])
	*($2 + [52]) = $8
	$9 = ($1 + [57])
	*($2 + [56]) = $9
	$10 = ($1 + [60])
	*($2 + [60]) = $10
	$11 = ($1 + [80])
	*($2 + [64]) = $11
	$12 = ($1 + [112])
	*($2 + [68]) = $12
	$13 = ($1 + [144])
	*($2 + [72]) = $13
	CALL $126(($2 + [32]), ($2 + [8]))
	$14 = *($2 + [24])
	if ( ($14 == 0) ){ goto $label$2 }
	CALL $74($0, $14)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [12]) = $0
	*($2 + [8]) = $0
	*($2 + [16]) = $3
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = $4
	*($2 + [32]) = $1
	*($2 + [40]) = $5
	*($2 + [44]) = $6
	*($2 + [48]) = $7
	*($2 + [52]) = $8
	*($2 + [56]) = $9
	*($2 + [60]) = $10
	*($2 + [64]) = $11
	*($2 + [68]) = $12
	*($2 + [72]) = $13
	CALL $127(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [80])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)1415074820), [19244])
	$2 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$3 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$2 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$4 < (int_32)[6])
	$6 = ($4 + [1])
	$4 = $6
	if ( $2 ){ goto $label$5 }
	$2 = [1]
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [19280])
	CALL eosio_assert(((int_64)*($1) > (int_64)999999), [19297])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = [0]
	*(($5 = CALL memset($0, [0], [160])) + [16]) = (int_64)0
	*(($5 + [24])) = (int_64)0
	*(($5 + [32])) = (int_64)0
	*($5 + [40]) = (int_64)0
	*(($0 = ($5 + [48]))) = (int_64)1398362884
	CALL eosio_assert([1], [18457])
	$6 = (uint_64)*($0) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$0 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$0 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $0 ){ goto $label$5 }
	$0 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	CALL eosio_assert($0, [18506])
	*(($5 + [68])) = [0]
	*($5 + [60 align=4]) = (int_64)0
	*($3 + [12]) = $1
	*($3 + [8]) = $1
	*($3 + [16]) = ($1 + $2)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [28])
	*($3 + [48]) = ($5 + [40])
	*($3 + [52]) = ($5 + [56])
	*($3 + [56]) = ($5 + [57])
	*($3 + [60]) = ($5 + [60])
	*($3 + [64]) = ($5 + [80])
	*($3 + [68]) = ($5 + [112])
	*($3 + [72]) = ($5 + [144])
	CALL $96(($3 + [32]), ($3 + [24]))
	$global$0 = ($3 + [80])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [160])
	$global$0 = $2
	*($2) = *($1)
	*($2 + [8]) = *(($1 + [8]))
	$3 = CALL $147(($2 + [16]), ($1 + [16]))
	$4 = CALL $147(($2 + [28]), ($1 + [28]))
	*(($2 + [56])) = *(($1 + [56]))
	*(($2 + [48])) = *(($1 + [48]))
	*($2 + [40]) = *($1 + [40])
	$5 = CALL $147(($2 + [60]), ($1 + [60]))
	CALL memcpy(($2 + [80]), ($1 + [80]), [72])
	$1 = *($0 + [4])
	$6 = *($1 + [4])
	$0 = (*(*($0)) + int_32($6 >> [1]))
	$1 = *($1)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL void $0((int_32 $2), (int_32 $1))
	if ( (*($5) & [1]) ){ goto $label$6 }
	if ( (*($4) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($2 + [68])))
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($2 + [36])))
	if ( ((*($3) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($3) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($2 + [160])
	return 
	
.LABEL $label$2
	CALL _ZdlPv(*(($2 + [24])))
	$global$0 = ($2 + [160])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [18411])
	CALL memcpy($2, *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [18411])
	CALL memcpy(($0 + [32]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18411])
	CALL memcpy(($0 + [64]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [18411])
	CALL memcpy(($0 + [72]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $173 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

void .FUNC $152 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = ($2 & [1])
	if ( $3 ){ goto $label$3 }
	if ( ((uint_32)uint_32($2 >> [1]) > (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((uint_32)*($0 + [4]) <= (uint_32)$1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( $3 ){ goto $label$4 }
	return (($0 + [1]) + $1)
	
.LABEL $label$4
	return (*($0 + [8]) + $1)
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $150 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $156 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $150($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $157 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $180($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $150($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $152($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC $158 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $178(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

int_32 .FUNC $159 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $179(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $179 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $183 (int_32 $0)
{
	return CALL $184([9256], $0)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $147(($2 + [24]), ($1 + [8]))
	$1 = CALL $147(($2 + [8]), ($1 + [20]))
	*($2 + [40]) = $3
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*(*($0)) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	CALL void $6((int_32 ($2 + [40])), (int_32 $4), (int_32 $1), (int_32 $0))
	if ( (*($1) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [48])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = [1]
	$3 = *($1 + [8])
	if ( ((int_64)$3 == (int_64)1397703940) ){ goto $label$1 }
	if ( ((int_64)$3 == (int_64)1129595400) ){ goto $label$1 }
	if ( ((int_64)$3 == (int_64)1213482248) ){ goto $label$1 }
	$2 = ((int_64)$3 == (int_64)361923564804)
	
.LABEL $label$1
	CALL eosio_assert($2, [20975])
	$4 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$3 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$3 = $5
	$4 = [1]
	$6 = $2
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$3 = $5
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$6 = ($2 + [1])
	$2 = $6
	if ( $4 ){ goto $label$6 }
	$4 = [1]
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	CALL eosio_assert($4, [19280])
	CALL eosio_assert(((int_64)*($1) > (int_64)0), [20806])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [96])
	$global$0 = $5
	$6 = CALL current_time()
	*(($5 + [44])) = (int_64)0
	*(($5 + [60])) = (int_64)0
	*(($5 + [68])) = (int_64)0
	*($5 + [28]) = [0]
	*($5 + [32]) = [0]
	*($5 + [36 align=4]) = (int_64)0
	*($5 + [52 align=4]) = (int_64)0
	*($5 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	CALL $78(($5 + [52]), $1, $2, $3, $4)
	$6 = CALL $46($0)
	*($5 + [8]) = (int_64)0
	*($5) = $6
	$6 = *($0)
	CALL $79(($5 + [80]), ($5 + [16]))
	$0 = *($5 + [80])
	CALL send_deferred($5, $6, $0, (*($5 + [84]) - $0), [0])
	$0 = *($5 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($5 + [84]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $80(($5 + [16]))
	$global$0 = ($5 + [96])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$0 = ($0 + [8])
	CALL $58($2, $0, *($1))
	$3 = *($2)
	$1 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$4 = ((int_32)$1) != (int_32)[0]
	CALL eosio_assert($4), [18969])
	CALL eosio_assert($4, [19003])
	$4 = CALL db_next_i64(*($1 + [156]), ($2 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	CALL $76((CASTING uint_32)(uint_64 $3), $4)
	
.LABEL $label$1
	CALL $77($0, $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $97($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $151($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $151($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $146($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)1397703940), [20783])
	$2 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$3 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$2 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$4 < (int_32)[6])
	$6 = ($4 + [1])
	$4 = $6
	if ( $2 ){ goto $label$5 }
	$2 = [1]
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [19280])
	CALL eosio_assert(((int_64)*($1) > (int_64)0), [20806])
	$3 = CALL current_time()
	$5 = *($1)
	if ( ((uint_32)((CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000)) + [-1540944000]) > (uint_32)[259200]) ){ goto $label$6 }
	CALL eosio_assert(((int_64)$5 < (int_64)2000001), [20833])
	return 
	
.LABEL $label$6
	CALL eosio_assert(((int_64)$5 < (int_64)1000001), [20833])
}

int_64 .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = [0]
	*($4 + [24]) = [0]
	*($4 + [16]) = (int_64)0
	
.LOOP $label$1:
	$6 = *(($1 + $5))
	CALL $155(($4 + [16]), *((uint_32($6 >> [4]) + [8223])))
	CALL $155(($4 + [16]), *((($6 & [15]) + [8223])))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$1 }
	$5 = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	
.LOOP $label$2:
	$6 = *(($2 + $5))
	CALL $155($4, *((uint_32($6 >> [4]) + [8223])))
	CALL $155($4, *((($6 & [15]) + [8223])))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[20]) ){ goto $label$2 }
	$5 = *($4)
	$6 = ($5 & [1])
	$1 = ($4 + [8])
	CALL $156(($4 + [16]), ( *($1) ? ($4 | [1]) : $6 ), ( *($4 + [4]) ? uint_32($5 >> [1]) : $6 ))
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($1))
	
.LABEL $label$3
	$5 = *($3)
	$6 = ($5 & [1])
	CALL $156(($4 + [16]), ( *($3 + [8]) ? ($3 + [1]) : $6 ), ( *($3 + [4]) ? uint_32($5 >> [1]) : $6 ))
	$7 = ((uint_64)((uint_64)CALL $4(($4 + [16])) / (uint_64)(int_64)100) % (uint_64)(int_64)10000)
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$4
	$global$0 = ($4 + [32])
	return $7
}

int_32 .FUNC $60 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = ($global$0 - [80])
	$global$0 = $5
	$6 = [0]
	*($5 + [72]) = [0]
	*($5 + [64]) = (int_64)0
	
.LOOP $label$1:
	$7 = *(($1 + $6))
	CALL $155(($5 + [64]), *((uint_32($7 >> [4]) + [8223])))
	CALL $155(($5 + [64]), *((($7 & [15]) + [8223])))
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)[32]) ){ goto $label$1 }
	$6 = [0]
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	
.LOOP $label$2:
	$7 = *(($2 + $6))
	CALL $155($5, *((uint_32($7 >> [4]) + [8223])))
	CALL $155($5, *((($7 & [15]) + [8223])))
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)[20]) ){ goto $label$2 }
	$6 = *($5)
	$7 = ($6 & [1])
	$1 = ($5 + [8])
	CALL $156(($5 + [64]), ( *($1) ? ($5 | [1]) : $7 ), ( *($5 + [4]) ? uint_32($6 >> [1]) : $7 ))
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($1))
	
.LABEL $label$3
	$6 = *($3)
	$7 = ($6 & [1])
	CALL $156(($5 + [64]), ( *($3 + [8]) ? ($3 + [1]) : $7 ), ( *($3 + [4]) ? uint_32($6 >> [1]) : $7 ))
	$6 = *($5 + [64])
	$7 = ($6 & [1])
	CALL sha512(( *((($5 + [64]) + [8])) ? (($5 + [64]) | [1]) : $7 ), ( *($5 + [68]) ? uint_32($6 >> [1]) : $7 ), $5)
	$6 = [0]
	
.LOOP $label$6:
	$7 = ($5 + uint_32($6 >> [1]))
	$1 = *($7)
	if ( ($6 & [1]) ){ goto $label$9 }
	$7 = (((*(($7 + [1])) << [4]) | ($1 << [12])) | (uint_32(*(($7 + [2])) >> [4]) & [255]))
	if ( ((uint_32)$7 <= (uint_32)[999999]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$7 = (((*(($7 + [1])) << [8]) | (($1 << [16]) & [983040])) | (*(($7 + [2])) & [255]))
	if ( ((uint_32)$7 > (uint_32)[999999]) ){ goto $label$7 }
	
.LABEL $label$8
	$6 = (((uint_32)(((uint_32)$7 / (uint_32)[100]) & [65535]) % (uint_32)[100]) + [1])
	if ( (*($5 + [64]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$6 = ($6 + [5])
	if ( ((uint_32)$6 <= (uint_32)[123]) ){ goto $label$6 }
	$6 = [100]
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($5 + [72])))
	
.LABEL $label$4
	$global$0 = ($5 + [80])
	return $6
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL $180([18526])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$7 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	if ( $5 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$6
	CALL memcpy($6, [18526], $5)
	
.LABEL $label$5
	*(($6 + $5)) = [0]
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = [0]
	$6 = (($4 + [16]) | [1])
	$8 = *($2)
	
.LOOP $label$8:
	$9 = ((uint_64)$8 / (uint_64)(int_64)10)
	$5 = (CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$9 * (int_64)10))
	CALL $2(($4 + [32]), int_32((( ($5) | [48]) ? ($5 + [55]) : ($5 <= [10]) ) << [24]) >> [24]), ($4 + [16]))
	if ( (*($4 + [16]) & [1]) ){ goto $label$10 }
	*($4 + [16]) = [0]
	goto $label$9 
	
.LABEL $label$10
	*(*((($4 + [16]) + [8]))) = [0]
	*($4 + [20]) = [0]
	
.LABEL $label$9
	CALL $151(($4 + [16]), [0])
	*((($4 + [16]) + [8])) = *((($4 + [32]) + [8]))
	*($4 + [16]) = *($4 + [32])
	$5 = ((uint_64)$8 > (uint_64)(int_64)9)
	$8 = $9
	if ( $5 ){ goto $label$8 }
	$5 = *($4 + [16])
	$7 = ($5 & [1])
	CALL $156($0, ( *((($4 + [16]) + [8])) ? $6 : $7 ), ( *($4 + [20]) ? uint_32($5 >> [1]) : $7 ))
	CALL $154($0, [18534])
	$6 = *($4 + [32])
	$2 = ($6 & [1])
	$5 = CALL $147(($4 + [32]), ($2 + [16]))
	CALL $156($0, ( *($5 + [8]) ? ($5 + [1]) : $2 ), ( *($5 + [4]) ? uint_32($6 >> [1]) : $2 ))
	CALL $1($4, $3)
	CALL $154($0, [18575])
	$6 = *($4)
	$2 = ($6 & [1])
	CALL $156($0, ( *($4 + [8]) ? ($4 | [1]) : $2 ), ( *($4 + [4]) ? uint_32($6 >> [1]) : $2 ))
	CALL $154($0, [18585])
	if ( (*($4) & [1]) ){ goto $label$12 }
	if ( (*($4 + [32]) & [1]) ){ goto $label$11 }
	goto $label$3 
	
.LABEL $label$12
	CALL _ZdlPv(*(($4 + [8])))
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($5 + [8])))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL $146($0)
	
.LABEL $label$3
	if ( (*($4 + [16]) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*(($4 + [24])))
	$global$0 = ($4 + [48])
	(unreachable)
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $180([18526])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$4
	CALL memcpy($5, [18526], $4)
	
.LABEL $label$3
	*(($5 + $4)) = [0]
	*($3) = (int_64)0
	*($3 + [8]) = [0]
	$5 = ($3 | [1])
	$7 = *($2)
	
.LOOP $label$6:
	$8 = ((uint_64)$7 / (uint_64)(int_64)10)
	$4 = (CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$8 * (int_64)10))
	CALL $2(($3 + [16]), int_32((( ($4) | [48]) ? ($4 + [55]) : ($4 <= [10]) ) << [24]) >> [24]), $3)
	if ( (*($3) & [1]) ){ goto $label$8 }
	*($3) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*(($3 + [8]))) = [0]
	*($3 + [4]) = [0]
	
.LABEL $label$7
	CALL $151($3, [0])
	*(($3 + [8])) = *((($3 + [16]) + [8]))
	*($3) = *($3 + [16])
	$4 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $8
	if ( $4 ){ goto $label$6 }
	$4 = *($3)
	$6 = ($4 & [1])
	CALL $156($0, ( *(($3 + [8])) ? $5 : $6 ), ( *($3 + [4]) ? uint_32($4 >> [1]) : $6 ))
	CALL $154($0, [18534])
	$5 = *($3 + [16])
	$2 = ($5 & [1])
	$4 = CALL $147(($3 + [16]), ($2 + [16]))
	CALL $156($0, ( *($4 + [8]) ? ($4 + [1]) : $2 ), ( *($4 + [4]) ? uint_32($5 >> [1]) : $2 ))
	CALL $154($0, [18544])
	if ( (*($3 + [16]) & [1]) ){ goto $label$10 }
	if ( (*($3) & [1]) ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$10
	CALL _ZdlPv(*(($4 + [8])))
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [8])))
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $146($0)
	
.LABEL $label$1
	$global$0 = ($3 + [32])
}

void .FUNC $1 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = (int_64)1
	$4 = *($1 + [8])
	if ( (int_64)($4 == 0) ){ goto $label$1 }
	$5 = $4
	
.LOOP $label$2:
	$3 = ((int_64)$3 * (int_64)10)
	$5 = ((int_64)$5 + (int_64)-1)
	if ( ((int_64)($5 == 0) == 0) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [4])
	$7 = *($1)
	$8 = ((uint_64)$7 / (uint_64)$3)
	$5 = $8
	
.LOOP $label$3:
	$9 = ((uint_64)$5 / (uint_64)(int_64)10)
	CALL $2(($2 + [16]), (int_32(((CASTING uint_32)(uint_64 (int_64))($5 - ((int_64)$9 * (int_64)10))) << [24]) >> [24]) | [48]), $0)
	if ( (*($0) & [1]) ){ goto $label$5 }
	*($0) = [0]
	goto $label$4 
	
.LABEL $label$5
	*(*(($0 + [8]))) = [0]
	*($6) = [0]
	
.LABEL $label$4
	CALL $151($0, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$10 = ((uint_64)$5 > (uint_64)(int_64)9)
	$5 = $9
	if ( $10 ){ goto $label$3 }
	CALL $155($0, [46])
	$6 = [0]
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$7 }
	$5 = (int_64))($7 - ((int_64)$8 * (int_64)$3))
	$11 = (($2 + [16]) | [1])
	
.LOOP $label$8:
	$9 = ((uint_64)$5 / (uint_64)(int_64)10)
	CALL $2($2, (int_32(((CASTING uint_32)(uint_64 (int_64))($5 - ((int_64)$9 * (int_64)10))) << [24]) >> [24]) | [48]), ($2 + [16]))
	if ( (*($2 + [16]) & [1]) ){ goto $label$10 }
	*($2 + [16]) = [0]
	goto $label$9 
	
.LABEL $label$10
	*(*((($2 + [16]) + [8]))) = [0]
	*($2 + [20]) = [0]
	
.LABEL $label$9
	CALL $151(($2 + [16]), [0])
	*((($2 + [16]) + [8])) = *(($2 + [8]))
	*($2 + [16]) = *($2)
	$5 = $9
	$4 = ((int_64)$4 + (int_64)-1)
	if ( ((int_64)($4 == 0) == 0) ){ goto $label$8 }
	$12 = *(($2 + [24]))
	$6 = *($2 + [20])
	$10 = *($2 + [16])
	goto $label$6 
	
.LABEL $label$7
	$11 = (($2 + [16]) | [1])
	$12 = [0]
	$10 = [0]
	
.LABEL $label$6
	$13 = ($10 & [1])
	CALL $156($0, ( $12 ? $11 : $13 ), ( $6 ? uint_32(($10 & [254]) >> [1]) : $13 ))
	CALL $155($0, [32])
	$5 = *(($1 + [8]))
	$10 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)8)
	if ( (($10) & [255]) == 0) ){ goto $label$11 }
	CALL $155($0, int_32(($10 << [24]) >> [24]))
	$10 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)16)
	if ( (($10) & [255]) == 0) ){ goto $label$11 }
	CALL $155($0, int_32(($10 << [24]) >> [24]))
	$10 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)24)
	if ( (($10) & [255]) == 0) ){ goto $label$11 }
	CALL $155($0, int_32(($10 << [24]) >> [24]))
	$10 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)
	if ( (($10) & [255]) == 0) ){ goto $label$11 }
	CALL $155($0, int_32(($10 << [24]) >> [24]))
	$10 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)40)
	if ( (($10) & [255]) == 0) ){ goto $label$11 }
	CALL $155($0, int_32(($10 << [24]) >> [24]))
	$10 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)48)
	if ( (($10) & [255]) == 0) ){ goto $label$11 }
	CALL $155($0, int_32(($10 << [24]) >> [24]))
	$10 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)56)
	if ( ($10) == 0) ){ goto $label$11 }
	CALL $155($0, int_32(($10 << [24]) >> [24]))
	
.LABEL $label$11
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$12
	$global$0 = ($2 + [32])
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [19033])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$22()), [19078])
	$3 = [0]
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	
.LOOP $label$1:
	$4 = *(($1 + $3))
	CALL $155($2, *((uint_32($4 >> [4]) + [8223])))
	CALL $155($2, *((($4 & [15]) + [8223])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$1 }
	$5 = CALL $4($2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$2
	$7 = ($0 + [28])
	$8 = *($7)
	$6 = *($0 + [24])
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$4 }
	$9 = ($2 + [8])
	$10 = $8
	
.LOOP $label$5:
	$10 = ($10 + [-24])
	$11 = *($10)
	$3 = [0]
	*($9) = [0]
	*($2) = (int_64)0
	
.LOOP $label$6:
	$4 = *(($11 + $3))
	CALL $155($2, *((uint_32($4 >> [4]) + [8223])))
	CALL $155($2, *((($4 & [15]) + [8223])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$6 }
	$12 = CALL $4($2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$7
	if ( ((int_64)$12 == (int_64)$5) ){ goto $label$3 }
	$8 = $10
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = $6
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$8 != (int_32)*(($0 + [24]))), [19128])
	$10 = *($7)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$10 }
	$3 = $8
	
.LOOP $label$11:
	$11 = *($3)
	*($3) = [0]
	$8 = ($3 + [-24])
	$4 = *($8)
	*($8) = $11
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	*(($3 + [-8])) = *(($3 + [16]))
	*(($3 + [-16])) = *(($3 + [8]))
	$3 = ($3 + [24])
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$11 }
	$4 = ($3 + [-24])
	$8 = *(($0 + [28]))
	if ( ((int_32)($8 + [24]) != (int_32)$3) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$4 = ($8 + [-24])
	
.LABEL $label$9
	
.LOOP $label$13:
	$8 = ($8 + [-24])
	$3 = *($8)
	*($8) = [0]
	if ( ($3 == 0) ){ goto $label$14 }
	CALL _ZdlPv($3)
	
.LABEL $label$14
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$13 }
	
.LABEL $label$8
	*(($0 + [28])) = $4
	CALL db_remove_i64(*(($1 + [52])))
	$3 = *(($1 + [56]))
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$16 }
	$12 = *($0 + [8])
	$5 = *($0)
	$3 = [0]
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	
.LOOP $label$17:
	$4 = *(($1 + $3))
	CALL $155($2, *((uint_32($4 >> [4]) + [8223])))
	CALL $155($2, *((($4 & [15]) + [8223])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$17 }
	$13 = CALL $4($2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$18
	$3 = CALL db_idx64_find_primary($5, $12, (int_64)7615815668302086144, $2, $13)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$16
	CALL db_idx64_remove($3)
	
.LABEL $label$15
	$global$0 = ($2 + [16])
}

int_32 .FUNC $88 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [19003])
	$3 = *($0 + [4])
	$4 = *($3 + [56])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$5 = *($4 + [8])
	$6 = *($4)
	*($1 + [24]) = [0]
	*($1 + [16]) = (int_64)0
	
.LOOP $label$2:
	$4 = *(($3 + $2))
	CALL $155(($1 + [16]), *((uint_32($4 >> [4]) + [8223])))
	CALL $155(($1 + [16]), *((($4 & [15]) + [8223])))
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	$7 = CALL $4(($1 + [16]))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$3
	$4 = CALL db_idx64_find_primary($6, $5, (int_64)7615815668302086144, ($1 + [16]), $7)
	*(*(($0 + [4])) + [56]) = $4
	
.LABEL $label$1
	*($1 + [16]) = (int_64)0
	$2 = CALL db_idx64_next($4, ($1 + [16]))
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$4 }
	CALL $87(($1 + [8]), *(*($0)), *($1 + [16]))
	$4 = *($1 + [12])
	*(($0 + [4])) = $4
	*(($4 + [56])) = $2
	$global$0 = ($1 + [32])
	return $0
	
.LABEL $label$4
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [32])
	return $0
}

void .FUNC $87 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [16])
	$global$0 = $3
	$5 = *(($1 + [28]))
	$4 = *($1 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$6 = ($3 + [8])
	$7 = $5
	
.LOOP $label$3:
	$7 = ($7 + [-24])
	$8 = *($7)
	$9 = [0]
	*($6) = [0]
	*($3) = (int_64)0
	
.LOOP $label$4:
	$10 = *(($8 + $9))
	CALL $155($3, *((uint_32($10 >> [4]) + [8223])))
	CALL $155($3, *((($10 & [15]) + [8223])))
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)[32]) ){ goto $label$4 }
	$11 = CALL $4($3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($6))
	
.LABEL $label$5
	if ( ((int_64)$11 == (int_64)$2) ){ goto $label$1 }
	$5 = $7
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$5 = $4
	
.LABEL $label$1
	if ( ((int_32)$5 == (int_32)*(($1 + [24]))) ){ goto $label$7 }
	$9 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$1), [18337])
	*($0 + [4]) = $9
	goto $label$6 
	
.LABEL $label$7
	$9 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)7615815668302086144, $2)
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$8 }
	$9 = CALL $117($1, $9)
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$1), [18337])
	*($0 + [4]) = $9
	goto $label$6 
	
.LABEL $label$8
	*($0 + [4]) = [0]
	
.LABEL $label$6
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$4 = *($3 + [8])
	*($0 + [8]) = $4
	$5 = ((uint_64)( (int_64)100000000000000 ? ( (int_64)30000000000 ? ( (int_64)1000000000000000 ? ( (int_64)3000000000000000 ? ( (int_64)2000000000000 ? ( (int_64)100000000000 ? (int_64)30000000000 : ((int_64)$4 == (int_64)1129595400) ) : ((int_64)$4 == (int_64)1213482248) ) : ((int_64)$4 == (int_64)310651211528) ) : ((int_64)$4 == (int_64)1431655688) ) : ((int_64)$4 == (int_64)361923564804) ) : ((int_64)$4 == (int_64)1415074820) ) / (uint_64)((int_64)(CASTING uint_64)(uint_32 ((uint_32)[985000] / (uint_32)*($2))) + (int_64)-10000))
	*($0) = $5
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18457])
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$1 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$4 = $5
	$6 = [1]
	$2 = $0
	$0 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$4 = $5
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $2 ){ goto $label$6 }
	$6 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert($6, [18506])
	return 
	
.LABEL $label$2
	CALL eosio_assert([0], [18506])
	return 
	
.LABEL $label$1
	CALL eosio_assert([0], [18506])
}

void .FUNC $85 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [160])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$22()), [18636])
	$5 = CALL _Znwj([112])
	CALL $108($5)
	*($5 + [96]) = $1
	$5 = CALL memcpy($5, *($3), [96])
	*($4 + [112]) = ($4 + [96])
	*($4 + [108]) = $4
	*($4 + [104]) = $4
	*($4 + [120]) = ($4 + [104])
	*($4 + [132]) = ($5 + [8])
	*($4 + [128]) = $5
	*($4 + [136]) = ($5 + [16])
	*($4 + [140]) = ($5 + [32])
	*($4 + [144]) = ($5 + [48])
	*($4 + [148]) = ($5 + [56])
	*($4 + [152]) = ($5 + [64])
	*($4 + [156]) = ($5 + [80])
	CALL $109(($4 + [128]), ($4 + [120]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)3932090329929651200, $2, (int_64)3932090329929651200, $4, [96])
	*($5 + [100]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)3932090329929651200) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)3932090329929651201
	
.LABEL $label$1
	*($4 + [128]) = $5
	*($4) = (int_64)3932090329929651200
	*($4 + [104]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)3932090329929651200
	*($3 + [16]) = $6
	*($4 + [128]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $110(($1 + [24]), ($4 + [128]), $4, ($4 + [104]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [128])
	*($4 + [128]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [160])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [160])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [18813])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$22()), [18859])
	$1 = CALL memcpy($1, *($3), [96])
	CALL eosio_assert([1], [18910])
	*($4 + [112]) = ($4 + [96])
	*($4 + [108]) = $4
	*($4 + [104]) = $4
	*($4 + [120]) = ($4 + [104])
	*($4 + [132]) = ($1 + [8])
	*($4 + [128]) = $1
	*($4 + [136]) = ($1 + [16])
	*($4 + [140]) = ($1 + [32])
	*($4 + [144]) = ($1 + [48])
	*($4 + [148]) = ($1 + [56])
	*($4 + [152]) = ($1 + [64])
	*($4 + [156]) = ($1 + [80])
	CALL $109(($4 + [128]), ($4 + [120]))
	CALL db_update_i64(*($1 + [100]), $2, $4, [96])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)3932090329929651200) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)3932090329929651201
	
.LABEL $label$1
	$global$0 = ($4 + [160])
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18388])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $183($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $187($4)
	
.LABEL $label$6
	$5 = CALL _Znwj([112])
	CALL $108($5)
	*($5 + [96]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [48])
	*($3 + [52]) = ($5 + [56])
	*($3 + [56]) = ($5 + [64])
	*($3 + [60]) = ($5 + [80])
	CALL $111(($3 + [32]), ($3 + [24]))
	*($5 + [100]) = $1
	*($3 + [24]) = $5
	*($3 + [32]) = (int_64)3932090329929651200
	*($3 + [4]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)3932090329929651200
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $110(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [18337])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)3932090330088022528, (int_64)3932090330088022528)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $112($1, $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [18337])
	
.LABEL $label$2
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$1
	*($4 + [8]) = $3
	CALL $113($4, $1, $2, ($4 + [8]))
	$1 = *($4 + [4])
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	$global$0 = ($4 + [16])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [96]) == (int_32)$1), [18337])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)3932090329929651200, (int_64)3932090329929651200)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $83($1, $5)
	CALL eosio_assert(((int_32)*($5 + [96]) == (int_32)$1), [18337])
	
.LABEL $label$2
	CALL memcpy($0, $5, [96])
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$1
	*($4 + [8]) = $3
	CALL $107($4, $1, $2, ($4 + [8]))
	CALL memcpy($0, *($4 + [4]), [96])
	$global$0 = ($4 + [16])
}

int_32 .FUNC $80 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $182 (int_32 $0)
{
	*($0) = [0]
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $150($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $148 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $187($0)
	
.LABEL $label$1
}

int_32 .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $146 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $141 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	*([0] + [8948 align=4]) = (int_64)0
	*([0] + [8956]) = [0]
	$0 = CALL $180([17652])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$4 }
	*([0] + [8948]) = ($0 << [1])
	$1 = [8949]
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8948]) = ($2 | [1])
	*([0] + [8956]) = $1
	*([0] + [8952]) = $0
	
.LABEL $label$3
	CALL memcpy($1, [17652], $0)
	
.LABEL $label$2
	*(($1 + $0)) = [0]
	CALL $170([9], [0], [8192])
	return (unreachable)
	
.LABEL $label$1
	CALL $146([8948])
}

int_32 .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18569])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [18569])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $100($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $183($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8960])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $183($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $180($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	CALL $156($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $146($0)
}

int_32 .FUNC $73 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [60]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [68])))
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [36])))
	if ( (*($3 + [16]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	$8 = ($global$0 - [96])
	$global$0 = $8
	$9 = *($1)
	if ( ($9 & [1]) ){ goto $label$6 }
	$9 = uint_32($9 >> [1])
	$10 = ($1 + [1])
	$11 = ($10 + $9)
	if ( $9 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$9 = *($1 + [4])
	$10 = *($1 + [8])
	$11 = ($10 + $9)
	if ( ($9 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	
.LOOP $label$7:
	if ( CALL $167(*($10)) ){ goto $label$4 }
	$10 = ($10 + [1])
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$7 }
	$10 = $11
	$9 = [1]
	$12 = *($1)
	if ( (($12 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$8 }
	$9 = ($10 + [1])
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( (CALL $167(*($9)) == 0) ){ goto $label$10 }
	$9 = ($9 + [1])
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($10) = *($9)
	$10 = ($10 + [1])
	$9 = ($9 + [1])
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	$9 = [1]
	$12 = *($1)
	if ( ($12 & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$11 = ($1 + $9)
	$9 = ($11 + uint_32($12 >> $9))
	goto $label$1 
	
.LABEL $label$2
	$11 = *($1 + [8])
	$9 = ($11 + *($1 + [4]))
	
.LABEL $label$1
	CALL $157($1, ($10 - $11), ($9 - $10))
	$12 = *($1)
	if ( ($12 & [1]) ){ goto $label$13 }
	$10 = ($1 + [1])
	$9 = [0]
	$11 = [0]
	$12 = uint_32($12 >> [1])
	if ( $12 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$10 = *($1 + [8])
	$9 = [0]
	$11 = [0]
	$12 = *($1 + [4])
	if ( ($12 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$11 = [0]
	
.LOOP $label$14:
	$11 = ($11 + ((int_32)*($10) == (int_32)[45]))
	$10 = ($10 + [1])
	$12 = ($12 + [-1])
	if ( $12 ){ goto $label$14 }
	$11 = ((int_32)$11 == (int_32)[5])
	
.LABEL $label$11
	CALL eosio_assert($11, [19469])
	*($8 + [88]) = $9
	*($8 + [80]) = (int_64)0
	*($8 + [79]) = [45]
	*($8) = $9
	*($8 + [78]) = [1]
	$13 = CALL $5($1, ($8 + [80]), ($8 + [79]), $8, ($8 + [78]))
	*($8 + [92]) = $13
	$10 = *($8 + [80])
	CALL eosio_assert(((int_32)( *($8 + [84]) ? uint_32($10 >> [1]) : ($10 & [1]) ) != (int_32)$9), [21145])
	$10 = ( *($8 + [88]) ? (($8 + [80]) | [1]) : (*($8 + [80]) & [1]) )
	
.LOOP $label$15:
	$11 = ($10 + $9)
	$12 = ($9 + [1])
	$9 = $12
	if ( *($11) ){ goto $label$15 }
	$14 = (CASTING uint_64)(uint_32 ($12 + [-1]))
	$15 = (int_64)0
	$16 = (int_64)59
	$17 = (int_64)0
	
.LOOP $label$16:
	$18 = (int_64)0
	if ( ((uint_64)$15 >= (uint_64)$14) ){ goto $label$17 }
	$9 = *($10)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$9 = ($9 + [-91])
	goto $label$18 
	
.LABEL $label$19
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	if ( ((uint_64)$15 > (uint_64)(int_64)11) ){ goto $label$21 }
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	goto $label$20 
	
.LABEL $label$21
	$18 = ((int_64)$18 & (int_64)15)
	
.LABEL $label$20
	$10 = ($10 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)4294967291)
	if ( ((int_64)$16 != (int_64)55834574842) ){ goto $label$16 }
	*($2) = $17
	*($8 + [92]) = ($13 + [1])
	*($8) = [45]
	*($8 + [79]) = [1]
	$10 = CALL $5($1, ($8 + [80]), $8, ($8 + [92]), ($8 + [79]))
	$9 = *($8 + [80])
	CALL eosio_assert(((int_32)( *($8 + [84]) ? uint_32($9 >> [1]) : ($9 & [1]) ) != (int_32)[0]), [21151])
	CALL $149($3, ($8 + [80]))
	*($8 + [92]) = ($10 + [1])
	*($8) = [45]
	*($8 + [79]) = [1]
	$10 = CALL $5($1, ($8 + [80]), $8, ($8 + [92]), ($8 + [79]))
	$9 = *($8 + [80])
	CALL eosio_assert(((int_32)( *($8 + [84]) ? uint_32($9 >> [1]) : ($9 & [1]) ) != (int_32)[0]), [21161])
	CALL $149($4, ($8 + [80]))
	*($8 + [92]) = ($10 + [1])
	*($8) = [45]
	*($8 + [79]) = [1]
	$10 = CALL $5($1, ($8 + [80]), $8, ($8 + [92]), ($8 + [79]))
	$9 = *($8 + [80])
	CALL eosio_assert(((int_32)( *($8 + [84]) ? uint_32($9 >> [1]) : ($9 & [1]) ) != (int_32)[0]), [19504])
	$9 = *($8 + [80])
	CALL eosio_assert(((int_32)( *($8 + [84]) ? uint_32($9 >> [1]) : ($9 & [1]) ) == (int_32)[64]), [8331])
	CALL $3(($8 + [80]), $8, [32])
	*(($5 + [24])) = *(($8 + [24]))
	*(($5 + [16])) = *(($8 + [16]))
	*(($5 + [8])) = *($8 + [8])
	*($5) = *($8)
	*($8 + [92]) = ($10 + [1])
	*($8) = [45]
	*($8 + [79]) = [1]
	$10 = CALL $5($1, ($8 + [80]), $8, ($8 + [92]), ($8 + [79]))
	$9 = *($8 + [80])
	CALL eosio_assert(((int_32)( *($8 + [84]) ? uint_32($9 >> [1]) : ($9 & [1]) ) != (int_32)[0]), [19535])
	*($6) = CALL $163(($8 + [80]), [0], [10])
	$10 = ($10 + [1])
	*($8 + [92]) = $10
	CALL $148($8, $1, $10, [-1], $1)
	if ( (*($8 + [80]) & [1]) ){ goto $label$23 }
	*($8 + [80]) = [0]
	goto $label$22 
	
.LABEL $label$23
	*(*((($8 + [80]) + [8]))) = [0]
	*($8 + [84]) = [0]
	
.LABEL $label$22
	CALL $151(($8 + [80]), [0])
	*(($9 = (($8 + [80]) + [8]))) = *(($8 + [8]))
	*($8 + [80]) = *($8)
	$10 = *($8 + [80])
	CALL eosio_assert(((int_32)( *($8 + [84]) ? uint_32($10 >> [1]) : ($10 & [1]) ) != (int_32)[0]), [19568])
	*($8 + [79]) = [1]
	CALL $9($8, ($8 + [80]), ($8 + [79]))
	CALL memcpy($7, $8, [66])
	if ( ((*($8 + [80]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$24
	$global$0 = ($8 + [96])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$7 = ($global$0 - [96])
	$global$0 = $7
	*($7 + [8]) = *($1)
	CALL $39(($7 + [80]), ($7 + [8]))
	CALL $154(($7 + [80]), [20547])
	$1 = *($2)
	$8 = ($1 & [1])
	CALL $156(($7 + [80]), ( *($2 + [8]) ? ($2 + [1]) : $8 ), ( *($2 + [4]) ? uint_32($1 >> [1]) : $8 ))
	CALL $154(($7 + [80]), [20547])
	$2 = *($3)
	$1 = ($2 & [1])
	CALL $156(($7 + [80]), ( *($3 + [8]) ? ($3 + [1]) : $1 ), ( *($3 + [4]) ? uint_32($2 >> [1]) : $1 ))
	CALL $154(($7 + [80]), [20547])
	$3 = [0]
	*($7 + [16]) = [0]
	*($7 + [8]) = (int_64)0
	
.LOOP $label$1:
	$2 = *(($4 + $3))
	CALL $155(($7 + [8]), *((uint_32($2 >> [4]) + [8223])))
	CALL $155(($7 + [8]), *((($2 & [15]) + [8223])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$1 }
	$3 = *($7 + [8])
	$4 = ($3 & [1])
	$2 = (($7 + [8]) + [8])
	CALL $156(($7 + [80]), ( *($2) ? (($7 + [8]) | [1]) : $4 ), ( *($7 + [12]) ? uint_32($3 >> [1]) : $4 ))
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($2))
	
.LABEL $label$2
	CALL $154(($7 + [80]), [20547])
	*($7 + [48]) = (int_64)0
	*($7 + [56]) = [0]
	$4 = (($7 + [48]) | [1])
	$9 = *($5)
	
.LOOP $label$3:
	$10 = ((uint_64)$9 / (uint_64)(int_64)10)
	$3 = (CASTING uint_32)(uint_64 (int_64))($9 - ((int_64)$10 * (int_64)10))
	CALL $2(($7 + [8]), int_32((( ($3) | [48]) ? ($3 + [55]) : ($3 <= [10]) ) << [24]) >> [24]), ($7 + [48]))
	if ( (*($7 + [48]) & [1]) ){ goto $label$5 }
	*($7 + [48]) = [0]
	goto $label$4 
	
.LABEL $label$5
	*(*((($7 + [48]) + [8]))) = [0]
	*($7 + [52]) = [0]
	
.LABEL $label$4
	CALL $151(($7 + [48]), [0])
	*((($7 + [48]) + [8])) = *($2)
	*($7 + [48]) = *($7 + [8])
	$3 = ((uint_64)$9 > (uint_64)(int_64)9)
	$9 = $10
	if ( $3 ){ goto $label$3 }
	$3 = *($7 + [48])
	$2 = ($3 & [1])
	$5 = ($7 + [56])
	CALL $156(($7 + [80]), ( *($5) ? $4 : $2 ), ( *($7 + [52]) ? uint_32($3 >> [1]) : $2 ))
	if ( ((*($7 + [48]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$6
	$3 = ( *($7 + [88]) ? (($7 + [80]) | [1]) : (*($7 + [80]) & [1]) )
	CALL sha256($3, CALL $180($3), ($7 + [48]))
	*($7 + [7]) = [0]
	CALL $10(($7 + [8]), [8948], ($7 + [7]))
	CALL assert_recover_key(($7 + [48]), $6, [66], ($7 + [8]), [34])
	if ( ((*($7 + [80]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($7 + [88])))
	
.LABEL $label$7
	$global$0 = ($7 + [96])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [28]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18388])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $183($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $187($4)
	
.LABEL $label$6
	$6 = ($0 + [24])
	*($3 + [36]) = ($3 + [16])
	*($3 + [40]) = ($3 + [28])
	*($3 + [32]) = $0
	$2 = CALL _Znwj([176])
	$7 = CALL $94($2, $0, ($3 + [32]))
	*($3 + [8]) = $2
	$5 = [0]
	*($3 + [40]) = [0]
	*($3 + [32]) = (int_64)0
	$4 = ($2 + [80])
	
.LOOP $label$7:
	$1 = *(($4 + $5))
	CALL $155(($3 + [32]), *((uint_32($1 >> [4]) + [8223])))
	CALL $155(($3 + [32]), *((($1 & [15]) + [8223])))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$7 }
	$8 = CALL $4(($3 + [32]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($3 + [40])))
	$2 = *($3 + [8])
	
.LABEL $label$8
	*($3 + [32]) = $8
	$1 = *($2 + [156])
	*($3 + [4]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($5 + [8]) = $8
	*($5 + [16]) = $1
	*($3 + [8]) = [0]
	*($5) = $2
	*($4) = ($5 + [24])
	$5 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $95($6, ($3 + [8]), ($3 + [32]), ($3 + [4]))
	$5 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( $5 ){ goto $label$9 }
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $7
	
.LABEL $label$9
	if ( (*($5 + [60]) & [1]) ){ goto $label$16 }
	if ( (*($5 + [28]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($5 + [68])))
	if ( ((*($5 + [28]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($5 + [36])))
	if ( (*($5 + [16]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$12
	CALL _ZdlPv($5)
	$global$0 = ($3 + [48])
	return $7
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [19033])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$22()), [19078])
	$3 = [0]
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$4 = ($1 + [80])
	
.LOOP $label$1:
	$5 = *(($4 + $3))
	CALL $155($2, *((uint_32($5 >> [4]) + [8223])))
	CALL $155($2, *((($5 & [15]) + [8223])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$1 }
	$6 = CALL $4($2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$2
	$8 = ($0 + [28])
	$9 = *($8)
	$7 = *($0 + [24])
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$4 }
	$10 = ($2 + [8])
	$11 = $9
	
.LOOP $label$5:
	$11 = ($11 + [-24])
	$5 = *($11)
	$3 = [0]
	*($10) = [0]
	*($2) = (int_64)0
	$4 = ($5 + [80])
	
.LOOP $label$6:
	$5 = *(($4 + $3))
	CALL $155($2, *((uint_32($5 >> [4]) + [8223])))
	CALL $155($2, *((($5 & [15]) + [8223])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$6 }
	$12 = CALL $4($2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$7
	if ( ((int_64)$12 == (int_64)$6) ){ goto $label$3 }
	$9 = $11
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$5 }
	
.LABEL $label$4
	$9 = $7
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$9 != (int_32)*(($0 + [24]))), [19128])
	$11 = *($8)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$10 }
	$3 = $9
	
.LOOP $label$11:
	$4 = *($3)
	*($3) = [0]
	$9 = ($3 + [-24])
	$5 = *($9)
	*($9) = $4
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [60]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($5 + [68])))
	if ( ((*($5 + [28]) & [1]) == 0) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((*($5 + [28]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($5 + [36])))
	if ( (*($5 + [16]) & [1]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	*(($3 + [-8])) = *(($3 + [16]))
	*(($3 + [-16])) = *(($3 + [8]))
	$3 = ($3 + [24])
	if ( ((int_32)$11 != (int_32)$3) ){ goto $label$11 }
	$5 = ($3 + [-24])
	$9 = *(($0 + [28]))
	if ( ((int_32)($9 + [24]) != (int_32)$3) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($9 + [-24])
	
.LABEL $label$9
	
.LOOP $label$18:
	$9 = ($9 + [-24])
	$3 = *($9)
	*($9) = [0]
	if ( ($3 == 0) ){ goto $label$19 }
	if ( ((*($3 + [60]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($3 + [68])))
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$24
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL _ZdlPv(*(($3 + [36])))
	if ( (*($3 + [16]) & [1]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$20
	CALL _ZdlPv($3)
	
.LABEL $label$19
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$18 }
	
.LABEL $label$8
	*(($0 + [28])) = $5
	CALL db_remove_i64(*(($1 + [156])))
	$global$0 = ($2 + [16])
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $166($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $128(*($1), ($0 + [32]))
}

void .FUNC $78 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $134(($6 + [28]), $4)
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($8 + [-24])
	*($5) = *($4)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($4) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $137($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $74($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $138($2, $1)
	CALL $140(CALL $139(CALL $139($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $98 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [60]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [68])))
	if ( ((*($1 + [28]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [28]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [36])))
	if ( (*($1 + [16]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	return $0
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18569])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18569])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18569])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $94 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($0 + [16 align=4]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*(($4 = ($0 + [48]))) = (int_64)1398362884
	CALL eosio_assert([1], [18457])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [18506])
	*(($0 + [68])) = [0]
	*($0 + [60 align=4]) = (int_64)0
	*($0 + [152]) = $1
	*($3 + [8]) = *($2 + [4])
	*($3 + [20]) = ($0 + [8])
	*($3 + [16]) = $0
	*($3 + [24]) = ($0 + [16])
	*($3 + [28]) = ($0 + [28])
	*($3 + [32]) = ($0 + [40])
	*($3 + [36]) = ($0 + [56])
	*($3 + [40]) = ($0 + [57])
	*($3 + [44]) = ($0 + [60])
	*($3 + [48]) = ($0 + [80])
	*($3 + [52]) = ($0 + [112])
	*($3 + [56]) = ($0 + [144])
	CALL $96(($3 + [16]), ($3 + [8]))
	*($0 + [156]) = *(*($2 + [8]))
	$global$0 = ($3 + [64])
	return $0
}

void .FUNC $95 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $98(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18411])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18411])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $67(*($1), *($0 + [8]))
	CALL $67(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18411])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18411])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18411])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18411])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $67(*($1), *($0 + [28]))
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [18411])
	CALL memcpy($2, *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[19]), [18411])
	CALL memcpy($2, *($3 + [4]), [20])
	*($3 + [4]) = (*($3 + [4]) + [20])
	$3 = *($0 + [40])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18411])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18416])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $74($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [18411])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [24]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$22()), [18636])
	*($4 + [36]) = $3
	*($4 + [32]) = $1
	*($4 + [40]) = ($4 + [24])
	*(($5 = CALL _Znwj([64])) + [48]) = $1
	CALL $118(($4 + [32]), $5)
	*($4 + [16]) = $5
	$3 = [0]
	*($4 + [40]) = [0]
	*($4 + [32]) = (int_64)0
	
.LOOP $label$1:
	$6 = *(($5 + $3))
	CALL $155(($4 + [32]), *((uint_32($6 >> [4]) + [8223])))
	CALL $155(($4 + [32]), *((($6 & [15]) + [8223])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$1 }
	$2 = CALL $4(($4 + [32]))
	if ( (*($4 + [32]) & [1]) ){ goto $label$3 }
	$6 = $5
	goto $label$2 
	
.LABEL $label$3
	CALL _ZdlPv(*(($4 + [40])))
	$6 = *($4 + [16])
	
.LABEL $label$2
	*($4 + [32]) = $2
	$7 = *($6 + [52])
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$5 }
	*($3 + [8]) = $2
	*($3 + [16]) = $7
	*($4 + [16]) = [0]
	*($3) = $6
	*($8) = ($3 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $119(($1 + [24]), ($4 + [16]), ($4 + [32]), ($4 + [12]))
	
.LABEL $label$4
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [16])
	*($4 + [16]) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
}

int_64 .FUNC $91 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = *($0 + [16])
	if ( ((int_64)$2 != (int_64)-1) ){ goto $label$1 }
	$2 = (int_64)0
	$3 = [0]
	$4 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $76($0, $4)
	*($1 + [12]) = [0]
	*($1 + [8]) = $0
	$4 = *(CALL $121(($1 + [8])) + [4])
	*($1 + [24]) = [0]
	*($1 + [16]) = (int_64)0
	$5 = ($4 + [80])
	
.LOOP $label$3:
	$4 = *(($5 + $3))
	CALL $155(($1 + [16]), *((uint_32($4 >> [4]) + [8223])))
	CALL $155(($1 + [16]), *((($4 & [15]) + [8223])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$3 }
	$2 = CALL $4(($1 + [16]))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$4
	$2 = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [16])) = $2
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($2 <= (int_64)-2), [20549])
	$2 = *(($0 + [16]))
	$global$0 = ($1 + [32])
	return $2
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18388])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$5 }
	$2 = CALL $183($4)
	CALL db_get_i64($1, $2, $4)
	CALL $187($2)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	CALL db_get_i64($1, $2, $4)
	
.LABEL $label$4
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18411])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)7235159537265672192
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)7235159537265672192
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $124(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [18337])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $92($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [18337])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18778])
	CALL $122($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $123($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [18569])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [18569])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [18569])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [18569])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [18569])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [18569])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18569])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [18569])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [18569])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $100(CALL $99($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $130 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$22()), [18636])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [18569])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)3932090329917215744, $2, (int_64)3932090329917215744, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)3932090329917215744) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)3932090329917215745
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)3932090329917215744
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)3932090329917215744
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $131(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $131 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $132 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [18813])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$22()), [18859])
	*($1) = *(*($3))
	CALL eosio_assert([1], [18910])
	CALL eosio_assert([1], [18569])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)3932090329917215744) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)3932090329917215745
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $133 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$22()), [18636])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [18569])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)3932090329917215744, $2, (int_64)3932090329917215744, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)3932090329917215744) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)3932090329917215745
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)3932090329917215744
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)3932090329917215744
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $131(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$2 = ($global$0 - [96])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2 + [24]) = [0]
	*($2 + [8]) = ($2 + [24])
	$3 = ($1 + [8])
	*($2 + [36]) = $3
	*($2 + [32]) = $1
	$4 = ($1 + [16])
	*($2 + [40]) = $4
	$5 = ($1 + [28])
	*($2 + [44]) = $5
	$6 = ($1 + [40])
	*($2 + [48]) = $6
	$7 = ($1 + [56])
	*($2 + [52]) = $7
	$8 = ($1 + [57])
	*($2 + [56]) = $8
	$9 = ($1 + [60])
	*($2 + [60]) = $9
	$10 = ($1 + [72])
	*($2 + [64]) = $10
	$11 = ($1 + [80])
	*($2 + [68]) = $11
	$12 = ($1 + [112])
	*($2 + [72]) = $12
	$13 = ($1 + [144])
	*($2 + [76]) = $13
	$14 = ($1 + [176])
	*($2 + [80]) = $14
	$15 = ($1 + [192])
	*($2 + [84]) = $15
	$16 = ($1 + [200])
	*($2 + [88]) = $16
	$17 = ($1 + [216])
	*($2 + [92]) = $17
	CALL $135(($2 + [32]), ($2 + [8]))
	$19 = *($0)
	$20 = ([0] - $19)
	$18 = *($2 + [24])
	if ( ((uint_32)$18 <= (uint_32)$20) ){ goto $label$2 }
	CALL $74($0, ($18 + $19))
	$19 = *($0)
	goto $label$1 
	
.LABEL $label$2
	if ( ((uint_32)$18 >= (uint_32)$20) ){ goto $label$1 }
	*(($0 + [4])) = ($19 + $18)
	
.LABEL $label$1
	*($2 + [8]) = $19
	*($2 + [12]) = $19
	*($2 + [16]) = *(($0 + [4]))
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = $3
	*($2 + [32]) = $1
	*($2 + [40]) = $4
	*($2 + [44]) = $5
	*($2 + [48]) = $6
	*($2 + [52]) = $7
	*($2 + [56]) = $8
	*($2 + [60]) = $9
	*($2 + [64]) = $10
	*($2 + [68]) = $11
	*($2 + [72]) = $12
	*($2 + [76]) = $13
	*($2 + [80]) = $14
	*($2 + [84]) = $15
	*($2 + [88]) = $16
	*($2 + [92]) = $17
	CALL $136(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [96])
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [16])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [8])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($3)
	$3 = *($0 + [12])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$1 = ($1 + [18])
	*($2) = $1
	$3 = *($0)
	$0 = *($0 + [28])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	$1 = ($0 + $1)
	*($2) = $1
	
.LABEL $label$6
	*($2) = ($1 + [141])
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $128(*($1), *($0 + [8]))
	CALL $128(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18569])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18569])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $128(*($1), *($0 + [28]))
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18569])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [18569])
	CALL memcpy(*($3 + [4]), $2, [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [18569])
	CALL memcpy(*($3 + [4]), $2, [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[19]), [18569])
	CALL memcpy(*($3 + [4]), $2, [20])
	*($3 + [4]) = (*($3 + [4]) + [20])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [60])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18569])
	CALL memcpy(*($0 + [4]), $3, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [18569])
	CALL memcpy(*($0 + [4]), ($3 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $181 (int_32 $0)
{
	*($0) = [1]
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18388])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$5 }
	$2 = CALL $183($4)
	CALL db_get_i64($1, $2, $4)
	CALL $187($2)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	CALL db_get_i64($1, $2, $4)
	
.LABEL $label$4
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18411])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)3932090329917215744
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)3932090329917215744
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $131(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [18569])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [18569])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [176])
	$global$0 = $3
	$4 = [0]
	$5 = CALL $158($1, [95], [0])
	CALL eosio_assert(((int_32)$5 != (int_32)[-1]), [8672])
	$6 = CALL $148(($3 + [160]), $1, [0], $5, $1)
	$8 = *($3 + [160])
	$7 = CALL $180([8698])
	if ( ((int_32)$7 != (int_32)( *($6 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$1 }
	$4 = (CALL $159($6, [0], [-1], [8698], $7) == 0)
	
.LABEL $label$1
	CALL eosio_assert($4, [8702])
	$4 = ($5 + [1])
	$8 = CALL $158($1, [95], $4)
	CALL eosio_assert(((int_32)$8 != (int_32)[-1]), [8735])
	$4 = CALL $148(($3 + [144]), $1, $4, ($8 + ((int_32)$5 ^ (int_32)[-1])), $1)
	$5 = *($3 + [144])
	$7 = CALL $180([8757])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$4 }
	if ( (CALL $159($4, [0], [-1], [8757], $7) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = [0]
	$7 = *($3 + [144])
	$9 = CALL $180([8760])
	if ( ((int_32)$9 != (int_32)( *(($4 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$2 }
	$5 = (CALL $159($4, [0], [-1], [8760], $9) == 0)
	goto $label$2 
	
.LABEL $label$3
	$5 = [1]
	
.LABEL $label$2
	CALL eosio_assert($5, [8763])
	$5 = [0]
	$7 = *($3 + [144])
	$9 = CALL $180([8757])
	if ( ((int_32)$9 != (int_32)( *(($4 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$5 }
	$5 = (CALL $159($4, [0], [-1], [8757], $9) == 0)
	
.LABEL $label$5
	$1 = *($3 + [128])
	$8 = CALL $148(($3 + [128]), $1, ($8 + [1]), [-1], $1)
	CALL eosio_assert(((int_32)( *($8 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) ) != (int_32)[0]), [8779])
	*($3 + [120]) = [0]
	*($3 + [112]) = (int_64)0
	CALL eosio_assert(CALL $6(( *($8 + [8]) ? ($8 + [1]) : (*($3 + [128]) & [1]) ), ($3 + [112])), [8801])
	CALL eosio_assert(((int_32)(*($3 + [116]) - *($3 + [112])) == (int_32)[69]), [8825])
	if ( (*($2) == 0) ){ goto $label$6 }
	CALL memmove(($3 + [40]), *($3 + [112]), [65])
	*($3 + [106]) = [49]
	*($3 + [105]) = ( [75] ? [82] : $5 )
	CALL ripemd160(($3 + [40]), [67], $3)
	CALL eosio_assert((CALL $179($3, (*($3 + [116]) + [-4]), [4]) == 0), [8843])
	
.LABEL $label$6
	*($0) = ((int_32)$5 ^ (int_32)[1])
	$0 = ($0 + [1])
	$1 = [0]
	$5 = *($3 + [112])
	
.LOOP $label$7:
	*(($0 + $1)) = *(($5 + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[65]) ){ goto $label$7 }
	*($3 + [116]) = $5
	CALL _ZdlPv($5)
	if ( (*($3 + [128]) & [1]) ){ goto $label$12 }
	if ( (*($3 + [144]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*(($8 + [8])))
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3 + [160]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( (*($3 + [160]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	$global$0 = ($3 + [176])
	return 
	
.LABEL $label$8
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($3 + [176])
}

void .FUNC $123 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$22()), [18636])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [18569])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)7235159537265672192
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $124(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $122 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [18813])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$22()), [18859])
	*($1) = *(*($3))
	CALL eosio_assert([1], [18910])
	CALL eosio_assert([1], [18569])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $121 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [156]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [20655])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4229865212519383040)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [20601])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [20601])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $76(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [12])
	$5 = *(*($3 + [8]))
	$6 = *(*($3) + [8])
	$0 = [0]
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	
.LOOP $label$1:
	$7 = *(($4 + $0))
	CALL $155($2, *((uint_32($7 >> [4]) + [8223])))
	CALL $155($2, *((($7 & [15]) + [8223])))
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[32]) ){ goto $label$1 }
	$8 = CALL $4($2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$2
	*($2) = *(*(($3 + [12])) + [32])
	$0 = CALL db_idx64_store($6, (int_64)7615815668302086144, $5, $8, $2)
	*(*($3 + [4]) + [56]) = $0
	$global$0 = ($2 + [16])
}

void .FUNC $2 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($3 + [15]) = $1
	$1 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($4 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = (($4 + [17]) & [-16])
	$1 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($3 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $156($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $146($0)
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [16])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [8])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($3)
	$3 = *($0 + [12])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$1 = ($1 + [18])
	*($2) = $1
	$3 = *($0)
	$0 = *($0 + [28])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	$1 = ($0 + $1)
	*($2) = $1
	
.LABEL $label$6
	*($2) = ($1 + [60])
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($3)
	*($1) = *($4)
	*($1 + [8]) = *($4 + [8])
	$5 = *($0)
	$6 = ($1 + [16])
	CALL $149($6, ($4 + [16]))
	$7 = ($1 + [28])
	CALL $149($7, (*($3) + [28]))
	$4 = *($3)
	*($1 + [40]) = *($4 + [40])
	*(($1 + [48])) = *(($4 + [48]))
	$4 = *($3)
	*($1 + [56]) = *($4 + [56])
	*($1 + [57]) = *($4 + [57])
	$8 = ($1 + [60])
	CALL $149($8, ($4 + [60]))
	$4 = *($3)
	*($1 + [80]) = *($4 + [80])
	*(($1 + [104])) = *(($4 + [104]))
	*(($1 + [96])) = *(($4 + [96]))
	*(($1 + [88])) = *(($4 + [88]))
	$4 = *($3)
	*($1 + [112]) = *($4 + [112])
	*(($1 + [136])) = *(($4 + [136]))
	*(($1 + [120])) = *(($4 + [120]))
	*(($1 + [128])) = *(($4 + [128]))
	*($1 + [144]) = *(*($3) + [144])
	*(($3 = $2) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	$4 = ($1 + [8])
	*($3 + [36]) = $4
	*($3 + [32]) = $1
	*($3 + [40]) = $6
	*($3 + [44]) = $7
	$9 = ($1 + [40])
	*($3 + [48]) = $9
	$10 = ($1 + [56])
	*($3 + [52]) = $10
	$11 = ($1 + [57])
	*($3 + [56]) = $11
	*($3 + [60]) = $8
	$12 = ($1 + [80])
	*($3 + [64]) = $12
	$13 = ($1 + [112])
	*($3 + [68]) = $13
	$14 = ($1 + [144])
	*($3 + [72]) = $14
	CALL $126(($3 + [32]), ($3 + [8]))
	$15 = *($3 + [24])
	if ( ($15 <= [513]) ){ goto $label$2 }
	$2 = CALL $183($15)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($15 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $15)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $4
	*($3 + [40]) = $6
	*($3 + [44]) = $7
	*($3 + [48]) = $9
	*($3 + [52]) = $10
	*($3 + [56]) = $11
	*($3 + [60]) = $8
	*($3 + [64]) = $12
	*($3 + [68]) = $13
	*($3 + [72]) = $14
	*($3 + [32]) = $1
	CALL $127(($3 + [32]), ($3 + [24]))
	$4 = [0]
	*($3 + [40]) = [0]
	*($3 + [32]) = (int_64)0
	$7 = ($1 + [80])
	
.LOOP $label$3:
	$6 = *(($7 + $4))
	CALL $155(($3 + [32]), *((uint_32($6 >> [4]) + [8223])))
	CALL $155(($3 + [32]), *((($6 & [15]) + [8223])))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$3 }
	$16 = CALL $4(($3 + [32]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$4
	*($1 + [156]) = CALL db_store_i64(*($5 + [8]), (int_64)4229865212519383040, *(*($0 + [8])), $16, $2, $15)
	if ( ((uint_32)$15 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$16 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $187($2)
	if ( (uint_64)($16 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$16 + (int_64)1) : ((uint_64)$16 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [80])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $183($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [18457])
	$8 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$8 = $9
	$2 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$8 = $9
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [18506])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [84]) = $6
	*($3 + [80]) = $6
	*($3 + [88]) = ($6 + $7)
	*($3 + [48]) = ($3 + [80])
	*($3 + [64]) = $3
	CALL $30(($3 + [64]), ($3 + [48]))
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL $187($6)
	
.LABEL $label$9
	*(($2 = (($3 + [64]) + [8]))) = *(($3 + [24]))
	*($3 + [64]) = *($3 + [16])
	$8 = *(($3 + [8]))
	$9 = *($3)
	$1 = CALL $147(($3 + [48]), ($3 + [32]))
	*((($3 + [80]) + [8])) = *($2)
	*($3 + [104]) = $9
	*($3 + [96]) = $8
	*($3 + [80]) = *($3 + [64])
	$2 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$10 }
	$5 = *((*($2) + $5))
	
.LABEL $label$10
	CALL void $2((int_32 ($3 + [104])), (int_32 ($3 + [96])), (int_32 ($3 + [80])), (int_32 $1), (int_32 $5))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$11
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$12
	$global$0 = ($3 + [112])
	return [1]
}

int_32 .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [272]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [276])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [272]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [232]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [236])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [232]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [192]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [196])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [192]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [152]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [156])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [152]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [116])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [112]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$26 }
	$2 = ($0 + [76])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$28 }
	
.LOOP $label$29:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$30 }
	CALL _ZdlPv($4)
	
.LABEL $label$30
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$29 }
	$3 = *(($0 + [72]))
	goto $label$27 
	
.LABEL $label$28
	$3 = $1
	
.LABEL $label$27
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$26
	CALL $73(($0 + [32]))
	return $0
}

void .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$1 = ($global$0 - [304])
	$global$0 = $1
	CALL $31(($1 + [96]), $0)
	CALL eosio_assert(((int_64)*($1 + [144]) != (int_64)0), [18289])
	CALL eosio_assert((uint_64)(((int_64)*($1 + [144]) + (int_64)600) <= ((int_64)((uint_64)CALL $fimport$9() / (uint_64)(int_64)1000000) & (int_64)4294967295)), [18307])
	CALL $32(($1 + [80]), $0)
	if ( ((int_64)*($1 + [80]) <= (int_64)0) ){ goto $label$6 }
	$2 = *($0)
	$3 = (int_64)6
	
.LOOP $label$7:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$7 }
	*($1 + [32]) = (int_64)3617214756542218240
	*($1 + [24]) = $2
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [17706]
	$6 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$3 > (uint_64)(int_64)10) ){ goto $label$13 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$7 = ($7 + [-91])
	goto $label$11 
	
.LABEL $label$13
	$2 = (int_64)0
	if ( ((int_64)$3 == (int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$9
	$5 = ($5 + [1])
	$4 = ((int_64)$4 + (int_64)4294967291)
	$6 = ((int_64)$2 | (int_64)$6)
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$8 }
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [17866]
	$8 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$19 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$7 = ($7 + [-91])
	goto $label$17 
	
.LABEL $label$19
	$2 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$15
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$8 = ((int_64)$2 | (int_64)$8)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$14 }
	*(($1 + [16])) = [0]
	*($1 + [8]) = (int_64)0
	$5 = CALL $180([19181])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$5 }
	*($1 + [8]) = ($5 << [1])
	$7 = (($1 + [8]) | [1])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$5 = ($1 + [96])
	goto $label$2 
	
.LABEL $label$5
	$9 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($1 + [8]) = ($9 | [1])
	*($1 + [16]) = $7
	*($1 + [12]) = $5
	
.LABEL $label$4
	CALL memcpy($7, [19181], $5)
	
.LABEL $label$3
	*(($7 + $5)) = [0]
	*(($1 + [216])) = *((($1 + [80]) + [8]))
	$5 = (($1 + [8]) + [8])
	*(($1 + [232])) = *($5)
	*($5) = [0]
	*($1 + [192]) = *($0)
	*($1 + [200]) = *($1 + [96])
	*($1 + [208]) = *($1 + [80])
	*($1 + [224]) = *($1 + [8])
	*($1 + [8]) = (int_64)0
	$5 = CALL $33(($1 + [40]), ($1 + [24]), $6, $8, ($1 + [192]))
	CALL $34(($1 + [288]), $5)
	$7 = *($1 + [288])
	CALL send_inline($7, (*($1 + [292]) - $7))
	$7 = *($1 + [288])
	if ( ($7 == 0) ){ goto $label$20 }
	*($1 + [292]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$20
	$7 = *($5 + [28])
	if ( ($7 == 0) ){ goto $label$21 }
	*(($5 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$21
	$7 = *($5 + [16])
	if ( ($7 == 0) ){ goto $label$22 }
	*(($5 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$22
	if ( ((*(($1 + [224])) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($1 + [232])))
	
.LABEL $label$23
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$24
	$5 = ($1 + [96])
	
.LABEL $label$2
	CALL $35($0)
	CALL $36(($1 + [192]), $0, $5, ($1 + [112]), ($1 + [80]))
	CALL $37(($0 + [208]), ($1 + [192]), *($0))
	$global$0 = ($1 + [304])
	return (unreachable)
	
.LABEL $label$1
	CALL $146(($1 + [8]))
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = $global$0
	$3 = $2
	$4 = *($1 + [4])
	$1 = *($1)
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$2 }
	$2 = CALL $183($5)
	CALL read_action_data($2, $5)
	CALL $187($2)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	$5 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($5) + $1))
	
.LABEL $label$3
	CALL void $5((int_32 $1))
	$global$0 = $3
	return [1]
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [128])
	$global$0 = $3
	*(($3 + [120])) = [0]
	*($3 + [112]) = (int_64)0
	$4 = CALL $180([8871])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($3 + [112]) = ($4 << [1])
	$5 = (($3 + [112]) | [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [112]) = ($6 | [1])
	*($3 + [120]) = $5
	*($3 + [116]) = $4
	
.LABEL $label$4
	CALL memcpy($5, [8871], $4)
	
.LABEL $label$3
	*(($5 + $4)) = [0]
	$4 = *($3 + [112])
	$5 = CALL $148(($3 + [96]), $1, ( *($3 + [116]) ? uint_32($4 >> [1]) : ($4 & [1]) ), [-1], $1)
	*($3 + [88]) = [0]
	*($3 + [80]) = (int_64)0
	CALL eosio_assert(CALL $6(( *($5 + [8]) ? ($5 + [1]) : (*($3 + [96]) & [1]) ), ($3 + [80])), [8875])
	CALL eosio_assert(((int_32)(*($3 + [84]) - *($3 + [80])) == (int_32)[37]), [8900])
	if ( (*($2) == 0) ){ goto $label$6 }
	CALL memmove(($3 + [40]), *($3 + [80]), [33])
	CALL ripemd160(($3 + [40]), [33], $3)
	CALL eosio_assert((CALL $179($3, (*($3 + [84]) + [-4]), [4]) == 0), [8919])
	
.LABEL $label$6
	*($0) = [0]
	$4 = *($3 + [80])
	*($0 + [1 align=1]) = *($4)
	*($0 + [9 align=1]) = *($4 + [8 align=1])
	*($0 + [13 align=1]) = *($4 + [12 align=1])
	*($0 + [21 align=1]) = *($4 + [20 align=1])
	*($0 + [29 align=1]) = *($4 + [28 align=1])
	*($0 + [33]) = *($4 + [32])
	if ( ($4 == 0) ){ goto $label$7 }
	*($3 + [84]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( (*($3 + [96]) & [1]) ){ goto $label$9 }
	if ( (*($3 + [112]) & [1]) ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$9
	CALL _ZdlPv(*(($5 + [8])))
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$8
	CALL _ZdlPv(*($3 + [120]))
	$global$0 = ($3 + [128])
	return (unreachable)
	
.LABEL $label$2
	CALL $146(($3 + [112]))
	
.LABEL $label$1
	$global$0 = ($3 + [128])
}

void .FUNC $11 (int_32 $0)
{
	if ( ((*([0] + [8948]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8956]))
	
.LABEL $label$1
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [416])
	$global$0 = $3
	CALL memory()
	*(($3 + [144])) = $0
	*(($3 + [152])) = (int_64)-1
	$4 = (int_64)0
	*(($3 + [160])) = (int_64)0
	*(($3 + [168])) = [0]
	*(($3 + [184])) = $0
	*(($3 + [192])) = (int_64)-1
	*(($3 + [200])) = (int_64)0
	*(($3 + [208])) = [0]
	*(($3 + [224])) = $0
	*(($3 + [232])) = (int_64)-1
	*(($3 + [240])) = (int_64)0
	*(($3 + [248])) = [0]
	*(($3 + [252])) = [0]
	*($3 + [136]) = $0
	*($3 + [128]) = $0
	*($3 + [176]) = $0
	*($3 + [216]) = $0
	*($3 + [256]) = $0
	*(($3 + [272])) = (int_64)-1
	*(($3 + [264])) = $0
	*(($3 + [280])) = (int_64)0
	*(($3 + [288])) = [0]
	*(($3 + [304])) = $0
	*(($3 + [312])) = (int_64)-1
	*(($3 + [320])) = (int_64)0
	*(($3 + [328])) = [0]
	*(($3 + [344])) = $0
	*(($3 + [352])) = (int_64)-1
	*(($3 + [360])) = (int_64)0
	*(($3 + [368])) = [0]
	*(($3 + [384])) = $0
	*(($3 + [392])) = (int_64)-1
	*(($3 + [400])) = [0]
	*($3 + [296]) = $0
	*($3 + [336]) = $0
	*($3 + [376]) = $0
	*(($3 + [404])) = (int_64)0
	$5 = (int_64)59
	$6 = [17706]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$6 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$8 = ($8 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$10 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [17718]
	$7 = (int_64)0
	
.LOOP $label$11:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$12 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$8 = ($8 + [-91])
	goto $label$13 
	
.LABEL $label$14
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$12
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$11 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$10 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [17731]
	$7 = (int_64)0
	
.LOOP $label$15:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$16 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$8 = ($8 + [-91])
	goto $label$17 
	
.LABEL $label$18
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$16
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$15 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$10 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [17744]
	$7 = (int_64)0
	
.LOOP $label$19:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$20 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$8 = ($8 + [-91])
	goto $label$21 
	
.LABEL $label$22
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$20
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$19 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$10 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [17773]
	$7 = (int_64)0
	
.LOOP $label$23:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$24 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$8 = ($8 + [-91])
	goto $label$25 
	
.LABEL $label$26
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$24
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$23 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$10 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [17801]
	$7 = (int_64)0
	
.LOOP $label$27:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$28 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$8 = ($8 + [-91])
	goto $label$29 
	
.LABEL $label$30
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$28
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$27 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$10 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [17814]
	$7 = (int_64)0
	
.LOOP $label$31:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$32 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$8 = ($8 + [-91])
	goto $label$33 
	
.LABEL $label$34
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$32
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$31 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$10 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [17827]
	$7 = (int_64)0
	
.LOOP $label$35:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$36 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$8 = ($8 + [-91])
	goto $label$37 
	
.LABEL $label$38
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$36
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$35 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$10 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [17840]
	$7 = (int_64)0
	
.LOOP $label$39:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$40 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$42 }
	$8 = ($8 + [-91])
	goto $label$41 
	
.LABEL $label$42
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$41
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$40
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$39 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$10 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [17827]
	$7 = (int_64)0
	
.LOOP $label$43:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$44 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$8 = ($8 + [-91])
	goto $label$45 
	
.LABEL $label$46
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$44
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$43 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$10 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [17827]
	$7 = (int_64)0
	
.LOOP $label$47:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$48 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$50 }
	$8 = ($8 + [-91])
	goto $label$49 
	
.LABEL $label$50
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$49
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$48
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$47 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$10 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [17853]
	$7 = (int_64)0
	
.LOOP $label$51:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$52 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$8 = ($8 + [-91])
	goto $label$53 
	
.LABEL $label$54
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$52
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$51 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$10 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [17827]
	$7 = (int_64)0
	
.LOOP $label$55:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$56 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$58 }
	$8 = ($8 + [-91])
	goto $label$57 
	
.LABEL $label$58
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$57
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$56
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$55 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$10 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [17827]
	$7 = (int_64)0
	
.LOOP $label$59:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$60 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$62 }
	$8 = ($8 + [-91])
	goto $label$61 
	
.LABEL $label$62
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$61
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$60
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$59 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$9 }
	
.LABEL $label$10
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [17866]
	$7 = (int_64)0
	
.LOOP $label$63:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$68 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$67 }
	$8 = ($8 + [-91])
	goto $label$66 
	
.LABEL $label$68
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$67
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$66
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$65
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$64
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$63 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$9 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [1]
	*($3) = *($3 + [120])
	CALL $14(($3 + [128]), $3)
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $15(($3 + [128]))
	CALL $169([0])
	$global$0 = ($3 + [416])
	return (unreachable)
	
.LABEL $label$7
	if ( ((int_64)$2 <= (int_64)-4992623624440512513) ){ goto $label$75 }
	if ( ((int_64)$2 > (int_64)4921565079714250751) ){ goto $label$74 }
	if ( ((int_64)$2 == (int_64)-4992623624440512512) ){ goto $label$73 }
	if ( ((int_64)$2 != (int_64)3932090329902759936) ){ goto $label$69 }
	*($3 + [68]) = [0]
	*($3 + [64]) = [2]
	*($3 + [56]) = *($3 + [64])
	CALL $17(($3 + [128]), ($3 + [56]))
	CALL eosio_exit([0])
	
.LABEL $label$75
	if ( ((int_64)$2 == (int_64)-8173735356026322944) ){ goto $label$72 }
	if ( ((int_64)$2 == (int_64)-7297660983688822784) ){ goto $label$71 }
	if ( ((int_64)$2 != (int_64)-5003315193367756800) ){ goto $label$69 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [3]
	*($3 + [8]) = *($3 + [112])
	CALL $19(($3 + [128]), ($3 + [8]))
	CALL eosio_exit([0])
	
.LABEL $label$74
	if ( ((int_64)$2 == (int_64)4921565079714250752) ){ goto $label$70 }
	if ( ((int_64)$2 != (int_64)4980193746957107200) ){ goto $label$69 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [4]
	*($3 + [48]) = *($3 + [72])
	CALL $21(($3 + [128]), ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$73
	*($3 + [108]) = [0]
	*($3 + [104]) = [5]
	*($3 + [16]) = *($3 + [104])
	CALL $23(($3 + [128]), ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$72
	*($3 + [100]) = [0]
	*($3 + [96]) = [6]
	*($3 + [24]) = *($3 + [96])
	CALL $25(($3 + [128]), ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$71
	*($3 + [84]) = [0]
	*($3 + [80]) = [7]
	*($3 + [40]) = *($3 + [80])
	CALL $27(($3 + [128]), ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$70
	*($3 + [92]) = [0]
	*($3 + [88]) = [8]
	*($3 + [32]) = *($3 + [88])
	CALL $29(($3 + [128]), ($3 + [32]))
	
.LABEL $label$69
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	$5 = ($global$0 - [560])
	$global$0 = $5
	*(($5 + [56])) = [0]
	*($5 + [48]) = (int_64)0
	$6 = CALL $180([17987])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$18 }
	*($5 + [48]) = ($6 << [1])
	$7 = (($5 + [48]) | [1])
	if ( $6 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($5 + [48]) = ($8 | [1])
	*($5 + [56]) = $7
	*($5 + [52]) = $6
	
.LABEL $label$17
	CALL memcpy($7, [17987], $6)
	
.LABEL $label$16
	$9 = [0]
	*(($7 + $6)) = [0]
	$12 = ($6 & [1])
	$6 = *($5 + [48])
	$8 = ($6 & [1])
	$6 = *($4)
	$10 = uint_32($6 >> [1])
	$11 = ( *($4 + [4]) ? $10 : $8 )
	if ( ((int_32)$11 != (int_32)( *($5 + [52]) ? uint_32($6 >> [1]) : $12 )) ){ goto $label$21 }
	$6 = ( *($5 + [56]) ? (($5 + [48]) | [1]) : $12 )
	$7 = ($4 + [1])
	if ( $8 ){ goto $label$23 }
	if ( ($11 == 0) ){ goto $label$22 }
	$9 = [0]
	$8 = ([0] - $10)
	
.LOOP $label$24:
	if ( ((int_32)*($7) != (int_32)*($6)) ){ goto $label$21 }
	$6 = ($6 + [1])
	$7 = ($7 + [1])
	$8 = ($8 + [1])
	if ( $8 ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	if ( ($11 == 0) ){ goto $label$22 }
	$9 = (CALL $179(( *($4 + [8]) ? $7 : $8 ), $6, $11) == 0)
	if ( (*($5 + [48]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$9 = [1]
	
.LABEL $label$21
	if ( ($12 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*($5 + [56]))
	
.LABEL $label$19
	if ( $9 ){ goto $label$1 }
	$13 = *($0)
	if ( ((int_64)*($1) == (int_64)$13) ){ goto $label$1 }
	if ( ((int_64)*($2) != (int_64)$13) ){ goto $label$1 }
	CALL $31(($5 + [448]), $0)
	$13 = *($5 + [496])
	if ( (int_64)($13 == 0) ){ goto $label$25 }
	if ( ((uint_64)((int_64)$13 + (int_64)600) >= (uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$25 }
	CALL $32(($5 + [8]), $0)
	if ( ((int_64)*($5 + [8]) <= (int_64)0) ){ goto $label$30 }
	$14 = *($0)
	$13 = (int_64)6
	
.LOOP $label$31:
	$13 = ((int_64)$13 + (int_64)1)
	if ( ((int_64)$13 != (int_64)13) ){ goto $label$31 }
	*($5 + [376]) = (int_64)3617214756542218240
	*($5 + [368]) = $14
	$13 = (int_64)0
	$15 = (int_64)59
	$6 = [17706]
	$16 = (int_64)0
	
.LOOP $label$32:
	if ( ((uint_64)$13 > (uint_64)(int_64)10) ){ goto $label$37 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$7 = ($7 + [-91])
	goto $label$35 
	
.LABEL $label$37
	$14 = (int_64)0
	if ( ((int_64)$13 == (int_64)11) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$34
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$33
	$6 = ($6 + [1])
	$15 = ((int_64)$15 + (int_64)4294967291)
	$16 = ((int_64)$14 | (int_64)$16)
	$13 = ((int_64)$13 + (int_64)1)
	if ( ((int_64)$13 != (int_64)13) ){ goto $label$32 }
	$13 = (int_64)0
	$15 = (int_64)59
	$6 = [17866]
	$17 = (int_64)0
	
.LOOP $label$38:
	if ( ((uint_64)$13 > (uint_64)(int_64)7) ){ goto $label$43 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$42 }
	$7 = ($7 + [-91])
	goto $label$41 
	
.LABEL $label$43
	$14 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$42
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$41
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$40
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$39
	$6 = ($6 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$17 = ((int_64)$14 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)4294967291)
	if ( ((int_64)$15 != (int_64)55834574842) ){ goto $label$38 }
	*(($5 + [552])) = [0]
	*($5 + [544]) = (int_64)0
	$6 = CALL $180([19181])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$29 }
	*($5 + [544]) = ($6 << [1])
	$7 = (($5 + [544]) | [1])
	if ( $6 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$6 = ($5 + [448])
	goto $label$26 
	
.LABEL $label$29
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($5 + [544]) = ($8 | [1])
	*($5 + [552]) = $7
	*($5 + [548]) = $6
	
.LABEL $label$28
	CALL memcpy($7, [19181], $6)
	
.LABEL $label$27
	*(($7 + $6)) = [0]
	*(($5 + [72])) = *((($5 + [8]) + [8]))
	$6 = (($5 + [544]) + [8])
	*(($5 + [88])) = *($6)
	*($6) = [0]
	*($5 + [48]) = *($0)
	*($5 + [56]) = *($5 + [448])
	*($5 + [64]) = *($5 + [8])
	*($5 + [80]) = *($5 + [544])
	*($5 + [544]) = (int_64)0
	$6 = CALL $33(($5 + [240]), ($5 + [368]), $16, $17, ($5 + [48]))
	CALL $34(($5 + [336]), $6)
	$7 = *($5 + [336])
	CALL send_inline($7, (*($5 + [340]) - $7))
	$7 = *($5 + [336])
	if ( ($7 == 0) ){ goto $label$44 }
	*($5 + [340]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$44
	$7 = *($6 + [28])
	if ( ($7 == 0) ){ goto $label$45 }
	*(($6 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$45
	$7 = *($6 + [16])
	if ( ($7 == 0) ){ goto $label$46 }
	*(($6 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$46
	if ( ((*(($5 + [80])) & [1]) == 0) ){ goto $label$47 }
	CALL _ZdlPv(*(($5 + [88])))
	
.LABEL $label$47
	if ( ((*($5 + [544]) & [1]) == 0) ){ goto $label$48 }
	CALL _ZdlPv(*(($5 + [552])))
	
.LABEL $label$48
	$6 = ($5 + [448])
	
.LABEL $label$26
	CALL $35($0)
	CALL $36(($5 + [48]), $0, $6, ($5 + [464]), ($5 + [8]))
	CALL $37(($0 + [208]), ($5 + [48]), *($0))
	
.LABEL $label$25
	*(($5 + [440])) = [0]
	*($5 + [432]) = (int_64)0
	$6 = CALL $180([18001])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$51 }
	*($5 + [432]) = ($6 << [1])
	$7 = (($5 + [432]) | [1])
	if ( $6 ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($5 + [432]) = ($8 | [1])
	*($5 + [440]) = $7
	*($5 + [436]) = $6
	
.LABEL $label$50
	CALL memcpy($7, [18001], $6)
	
.LABEL $label$49
	*(($7 + $6)) = [0]
	$6 = ($6 & [1])
	$6 = *($5 + [432])
	$8 = ($6 & [1])
	$6 = *($4)
	$12 = uint_32($6 >> [1])
	$9 = ( *(($4 + [4])) ? $12 : $8 )
	if ( ((int_32)$9 != (int_32)( *($5 + [436]) ? uint_32($6 >> [1]) : $6 )) ){ goto $label$65 }
	$6 = ( *($5 + [440]) ? (($5 + [432]) | [1]) : $6 )
	$7 = ($4 + [1])
	if ( $8 ){ goto $label$66 }
	if ( ($9 == 0) ){ goto $label$64 }
	$8 = ([0] - $12)
	
.LOOP $label$67:
	if ( ((int_32)*($7) != (int_32)*($6)) ){ goto $label$65 }
	$6 = ($6 + [1])
	$7 = ($7 + [1])
	$8 = ($8 + [1])
	if ( $8 ){ goto $label$67 }
	goto $label$64 
	
.LABEL $label$66
	if ( ($9 == 0) ){ goto $label$64 }
	if ( (CALL $179(( *($4 + [8]) ? $7 : $8 ), $6, $9) == 0) ){ goto $label$64 }
	
.LABEL $label$65
	*($5 + [424]) = [0]
	$13 = (int_64)0
	*($5 + [416]) = (int_64)0
	*($5 + [320]) = [0]
	*($5 + [312]) = (int_64)0
	*($5 + [232]) = [0]
	*($5 + [224]) = (int_64)0
	$6 = CALL $147(($5 + [208]), $4)
	CALL $38($0, $6, ($5 + [416]), ($5 + [415]), ($5 + [224]), ($5 + [368]), ($5 + [336]), ($5 + [328]), ($5 + [311]), ($5 + [312]), ($5 + [240]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$68 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$68
	$17 = *($1)
	$14 = (int_64)59
	$6 = [18035]
	$16 = (int_64)0
	
.LOOP $label$69:
	$15 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$70 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$72 }
	$7 = ($7 + [-91])
	goto $label$71 
	
.LABEL $label$72
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$71
	$15 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$70
	$6 = ($6 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)4294967291)
	if ( ((int_64)$14 != (int_64)55834574842) ){ goto $label$69 }
	$6 = *($5 + [224])
	$4 = ( *($5 + [228]) ? uint_32($6 >> [1]) : ($6 & [1]) )
	if ( ((int_64)$17 != (int_64)$16) ){ goto $label$73 }
	CALL eosio_assert((($4 + [-3]) <= [9]), [18064])
	if ( ($4 == 0) ){ goto $label$61 }
	$7 = [0]
	
.LOOP $label$74:
	$6 = [1]
	$8 = *(CALL $153(($5 + [224]), $7))
	if ( ((($8 + [-48]) & [255]) <= [10]) ){ goto $label$75 }
	$6 = [1]
	if ( ((($8 + [-97]) & [255]) <= [26]) ){ goto $label$75 }
	$6 = ((($8 + [-65]) & [255]) <= [26])
	
.LABEL $label$75
	CALL eosio_assert($6, [18093])
	$7 = ($7 + [1])
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$74 }
	goto $label$61 
	
.LABEL $label$73
	CALL eosio_assert(($4 == 0), [18048])
	*($5 + [8]) = *($1)
	CALL $39(($5 + [48]), ($5 + [8]))
	if ( (*($5 + [224]) & [1]) ){ goto $label$63 }
	*($5 + [224]) = [0]
	goto $label$62 
	
.LABEL $label$64
	CALL $31(($5 + [48]), $0)
	CALL memcpy(($5 + [448]), ($5 + [48]), [96])
	$13 = (int_64)0
	if ( ((int_64)*(($5 + [496])) == (int_64)0) ){ goto $label$60 }
	$4 = ($5 + [464])
	CALL $40($0, $3, $4)
	if ( (int_64)(*($5 + [448]) == 0) ){ goto $label$52 }
	$18 = *((($5 + [448]) + [24]))
	$19 = ((int_64)((int_64)*($4) * (int_64)6) / (int_64)5)
	CALL eosio_assert((uint_64)(((int_64)$19 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18457])
	$13 = (uint_64)$18 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$76:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$59 }
	$14 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$77 }
	$13 = $14
	$7 = [1]
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$76 }
	goto $label$58 
	
.LABEL $label$77
	$13 = $14
	
.LOOP $label$78:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$59 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $7 ){ goto $label$78 }
	$7 = [1]
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$76 }
	goto $label$58 
	
.LABEL $label$63
	*(*(($5 + [232]))) = [0]
	*($5 + [228]) = [0]
	
.LABEL $label$62
	CALL $151(($5 + [224]), [0])
	*((($5 + [224]) + [8])) = *((($5 + [48]) + [8]))
	*($5 + [224]) = *($5 + [48])
	
.LABEL $label$61
	CALL $41($0, ($5 + [416]))
	CALL $42($0, $3)
	CALL $43($0, ($5 + [415]), $3, ($5 + [416]))
	CALL $44($0, ($5 + [368]), ($5 + [328]))
	*($5 + [8]) = *($1)
	CALL $39(($5 + [48]), ($5 + [8]))
	$4 = [1]
	$6 = ($6 & [1])
	$6 = *($5 + [48])
	$8 = ($6 & [1])
	$6 = *($5 + [312])
	$12 = uint_32($6 >> [1])
	$9 = ( *($5 + [316]) ? $12 : $8 )
	if ( ((int_32)$9 != (int_32)( *($5 + [52]) ? uint_32($6 >> [1]) : $6 )) ){ goto $label$79 }
	$6 = ( *($5 + [56]) ? (($5 + [48]) | [1]) : $6 )
	$7 = (($5 + [312]) | [1])
	if ( $8 ){ goto $label$81 }
	if ( ($9 == 0) ){ goto $label$80 }
	$8 = ([0] - $12)
	$4 = [1]
	
.LOOP $label$82:
	if ( ((int_32)*($7) != (int_32)*($6)) ){ goto $label$79 }
	$6 = ($6 + [1])
	$7 = ($7 + [1])
	$8 = ($8 + [1])
	if ( $8 ){ goto $label$82 }
	goto $label$80 
	
.LABEL $label$81
	if ( ($9 == 0) ){ goto $label$80 }
	$4 = ((int_32)CALL $179(( *(($5 + [320])) ? $7 : $8 ), $6, $9) != (int_32)[0])
	goto $label$79 
	
.LABEL $label$80
	$4 = [0]
	
.LABEL $label$79
	CALL eosio_assert($4, [18113])
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$83 }
	CALL _ZdlPv(*($5 + [56]))
	
.LABEL $label$83
	CALL eosio_assert((*($5 + [311]) <= [11]), [18138])
	CALL $45($0, ($5 + [416]), ($5 + [415]), ($5 + [368]), ($5 + [328]), ($5 + [312]), ($5 + [311]), ($5 + [240]))
	*($5 + [48]) = CALL $46($0)
	*($5 + [56]) = *($1)
	$4 = CALL $147((($5 + [48]) + [16]), ($5 + [224]))
	$9 = CALL $147(($5 + [76]), ($5 + [312]))
	$6 = ($3 + [8])
	*((($5 + [48]) + [48])) = *($6)
	*($5 + [88]) = *($3)
	*($5 + [104]) = *($5 + [311])
	*($5 + [105]) = *($5 + [415])
	$12 = CALL $147(($5 + [108]), ($5 + [416]))
	*(($5 + [152])) = *((($5 + [368]) + [24]))
	*(($5 + [144])) = *((($5 + [368]) + [16]))
	*(($5 + [136])) = *($5 + [376])
	*(($5 + [168])) = *($5 + [344])
	*(($5 + [176])) = *((($5 + [336]) + [16]))
	*(($5 + [184])) = *((($5 + [336]) + [24]))
	*($5 + [128]) = *($5 + [368])
	*($5 + [160]) = *($5 + [336])
	*($5 + [192]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$13 = *($0)
	*($5 + [544]) = ($5 + [48])
	CALL $47(($5 + [8]), ($0 + [8]), $13, ($5 + [544]))
	if ( ((int_64)*($6) != (int_64)1397703940) ){ goto $label$84 }
	CALL $48(($5 + [8]), $0)
	CALL eosio_assert(((int_64)*($6) == (int_64)*($5 + [16])), [20703])
	$13 = ((int_64)*($5 + [8]) + (int_64)*($3))
	*($5 + [8]) = $13
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [20746])
	CALL eosio_assert(((int_64)*($5 + [8]) < (int_64)4611686018427387904), [20765])
	CALL $49(($0 + [48]), ($5 + [8]), *($0))
	*($5 + [8]) = (int_64)0
	$1 = ($0 + [248])
	$13 = CALL $50($1, *($0), ($5 + [8]))
	$16 = *($6)
	$14 = *($3)
	$6 = *($5 + [311])
	CALL eosio_assert([1], [18457])
	$15 = ((int_64)$13 + (int_64)((int_64)((int_64)$14 * (int_64)(CASTING int_64)(int_32 ([150] - ($6 << [1])))) / (int_64)200000))
	$17 = ((uint_64)$15 / (uint_64)(int_64)10)
	$13 = (uint_64)$16 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$87:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$86 }
	$14 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$88 }
	$13 = $14
	$7 = [1]
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$87 }
	goto $label$85 
	
.LABEL $label$88
	$13 = $14
	
.LOOP $label$89:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$86 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $7 ){ goto $label$89 }
	$7 = [1]
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$87 }
	goto $label$85 
	
.LABEL $label$86
	$7 = [0]
	
.LABEL $label$85
	CALL eosio_assert($7, [18506])
	*($5 + [8]) = (int_64)0
	CALL $50($1, *($0), ($5 + [8]))
	*($5 + [8]) = (int_64))($15 - ((int_64)$17 * (int_64)10))
	CALL $51($1, ($5 + [8]), *($0))
	if ( (uint_64)($15 <= (int_64)10) ){ goto $label$84 }
	CALL $32(($5 + [8]), $0)
	CALL eosio_assert(((int_64)$16 == (int_64)*($5 + [16])), [20703])
	$13 = ((int_64)*($5 + [8]) + (int_64)$17)
	*($5 + [8]) = $13
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [20746])
	CALL eosio_assert(((int_64)*($5 + [8]) < (int_64)4611686018427387904), [20765])
	CALL $52(($0 + [168]), ($5 + [8]), *($0))
	
.LABEL $label$84
	$14 = *($0)
	$13 = (int_64)6
	
.LOOP $label$90:
	$13 = ((int_64)$13 + (int_64)1)
	if ( ((int_64)$13 != (int_64)13) ){ goto $label$90 }
	$13 = (int_64)7
	
.LOOP $label$91:
	$13 = ((int_64)$13 + (int_64)1)
	if ( ((int_64)$13 != (int_64)13) ){ goto $label$91 }
	*($5 + [16]) = (int_64)-5003315193367756800
	*($5 + [8]) = $14
	*(($6 = CALL _Znwj([16]))) = $14
	*($6 + [8]) = (int_64)3617214756542218240
	$7 = ($6 + [16])
	*(($5 + [32])) = $7
	*(($5 + [28])) = $7
	*($5 + [24]) = $6
	CALL $53(($5 + [36]), ($5 + [48]))
	CALL $34(($5 + [544]), ($5 + [8]))
	$6 = *($5 + [544])
	CALL send_inline($6, (*($5 + [548]) - $6))
	$6 = *($5 + [544])
	if ( ($6 == 0) ){ goto $label$92 }
	*($5 + [548]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$92
	$6 = *($5 + [36])
	if ( ($6 == 0) ){ goto $label$93 }
	*(($5 + [40])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$93
	$6 = *($5 + [24])
	if ( ($6 == 0) ){ goto $label$94 }
	*(($5 + [28])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$94
	if ( (*($12) & [1]) ){ goto $label$96 }
	if ( (*($9) & [1]) ){ goto $label$95 }
	goto $label$11 
	
.LABEL $label$96
	CALL _ZdlPv(*(($5 + [116])))
	if ( ((*($9) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$95
	CALL _ZdlPv(*(($5 + [84])))
	$6 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$60
	CALL $54($0, $3)
	*(($5 + [88])) = (int_64)1415074820
	*((($5 + [48]) + [24])) = *(($3 + [8]))
	*($5 + [56]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [48]) = *($1)
	*($5 + [64]) = *($3)
	CALL eosio_assert([1], [18457])
	$4 = ($0 + [208])
	$13 = (int_64)5527636
	$6 = [0]
	
.LOOP $label$97:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$57 }
	$14 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$98 }
	$13 = $14
	$7 = [1]
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$97 }
	goto $label$56 
	
.LABEL $label$98
	$13 = $14
	
.LOOP $label$99:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$57 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $7 ){ goto $label$99 }
	$7 = [1]
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$97 }
	goto $label$56 
	
.LABEL $label$59
	$7 = [0]
	
.LABEL $label$58
	CALL eosio_assert($7, [18506])
	$14 = *($0)
	$13 = (int_64)6
	
.LOOP $label$100:
	$13 = ((int_64)$13 + (int_64)1)
	if ( ((int_64)$13 != (int_64)13) ){ goto $label$100 }
	*($5 + [16]) = (int_64)3617214756542218240
	*($5 + [8]) = $14
	$13 = (int_64)0
	$14 = (int_64)59
	$6 = [17718]
	$16 = (int_64)0
	
.LOOP $label$101:
	$15 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$102 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$104 }
	$7 = ($7 + [-91])
	goto $label$103 
	
.LABEL $label$104
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$103
	$15 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$102
	$6 = ($6 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)4294967291)
	if ( ((int_64)$14 != (int_64)55834574842) ){ goto $label$101 }
	$13 = (int_64)0
	$15 = (int_64)59
	$6 = [17866]
	$17 = (int_64)0
	
.LOOP $label$105:
	if ( ((uint_64)$13 > (uint_64)(int_64)7) ){ goto $label$110 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$109 }
	$7 = ($7 + [-91])
	goto $label$108 
	
.LABEL $label$110
	$14 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$107 }
	goto $label$106 
	
.LABEL $label$109
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$108
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$107
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$106
	$6 = ($6 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$17 = ((int_64)$14 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)4294967291)
	if ( ((int_64)$15 != (int_64)55834574842) ){ goto $label$105 }
	*(($5 + [344])) = [0]
	*($5 + [336]) = (int_64)0
	$6 = CALL $180([19405])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$55 }
	*($5 + [336]) = ($6 << [1])
	$7 = (($5 + [336]) | [1])
	if ( $6 ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$57
	$7 = [0]
	
.LABEL $label$56
	CALL eosio_assert($7, [18506])
	$13 = CALL current_time()
	*((($5 + [48]) + [72])) = *((($5 + [448]) + [72]))
	*((($5 + [48]) + [88])) = *((($5 + [448]) + [88]))
	*($5 + [104]) = *($5 + [504])
	*($5 + [112]) = *($5 + [512])
	*($5 + [128]) = *($5 + [528])
	*($5 + [96]) = ((int_64)((uint_64)$13 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL $37($4, ($5 + [48]), *($0))
	if ( ((*($5 + [432]) & [1]) == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$55
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($5 + [336]) = ($8 | [1])
	*($5 + [344]) = $7
	*($5 + [340]) = $6
	
.LABEL $label$54
	CALL memcpy($7, [19405], $6)
	
.LABEL $label$53
	*(($7 + $6)) = [0]
	*(($5 + [72])) = $18
	$6 = ($5 + [344])
	*(($5 + [88])) = *($6)
	*($6) = [0]
	*($5 + [64]) = $19
	*($5 + [48]) = *($0)
	*($5 + [56]) = *($5 + [448])
	*($5 + [80]) = *($5 + [336])
	*($5 + [336]) = (int_64)0
	$6 = CALL $33(($5 + [240]), ($5 + [8]), $16, $17, ($5 + [48]))
	CALL $34(($5 + [368]), $6)
	$7 = *($5 + [368])
	CALL send_inline($7, (*($5 + [372]) - $7))
	$7 = *($5 + [368])
	if ( ($7 == 0) ){ goto $label$111 }
	*($5 + [372]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$111
	$7 = *($6 + [28])
	if ( ($7 == 0) ){ goto $label$112 }
	*(($6 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$112
	$7 = *($6 + [16])
	if ( ($7 == 0) ){ goto $label$113 }
	*(($6 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$113
	if ( ((*(($5 + [80])) & [1]) == 0) ){ goto $label$114 }
	CALL _ZdlPv(*(($5 + [88])))
	
.LABEL $label$114
	if ( ((*($5 + [336]) & [1]) == 0) ){ goto $label$115 }
	CALL _ZdlPv(*(($5 + [344])))
	
.LABEL $label$115
	$13 = *($5 + [448])
	
.LABEL $label$52
	*(($5 + [72])) = *(($3 + [8]))
	*(($5 + [88])) = *(($4 + [8]))
	*($5 + [56]) = $13
	*($5 + [48]) = *($1)
	*($5 + [64]) = *($3)
	*($5 + [80]) = *($4)
	$13 = CALL current_time()
	*((($5 + [48]) + [72])) = *((($5 + [448]) + [72]))
	*((($5 + [48]) + [88])) = *((($5 + [448]) + [88]))
	*($5 + [104]) = *($5 + [504])
	*($5 + [112]) = *($5 + [512])
	*($5 + [128]) = *($5 + [528])
	*($5 + [96]) = ((int_64)((uint_64)$13 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL $37(($0 + [208]), ($5 + [48]), *($0))
	if ( ((*($5 + [432]) & [1]) == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$15
	CALL $146(($5 + [48]))
	
.LABEL $label$14
	CALL $146(($5 + [432]))
	
.LABEL $label$13
	CALL $146(($5 + [544]))
	
.LABEL $label$12
	CALL $146(($5 + [336]))
	
.LABEL $label$11
	$6 = [1]
	if ( (*($4) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($5 + [224]) & $6) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($5 + [72])))
	if ( ((*($5 + [224]) & $6) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($5 + [232])))
	$6 = [1]
	if ( ((*($5 + [312]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = [1]
	if ( (*($5 + [312]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($5 + [416]) & $6) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*(($5 + [320])))
	if ( ((*($5 + [416]) & $6) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*(($5 + [424])))
	if ( ((*($5 + [432]) & [1]) == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((*($5 + [432]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($5 + [440]))
	$global$0 = ($5 + [560])
	return 
	
.LABEL $label$1
	$global$0 = ($5 + [560])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $185 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9248]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9252])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9248]) = [1]
	$2 = ($2 << [16])
	*([0] + [9252]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9252])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9252]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9248]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9248]) = [1]
	$3 = ($3 << [16])
	*([0] + [9252]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9252])
	
.LABEL $label$10
	*([0] + [9252]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [192])
	$global$0 = $2
	*(($3 = $2) + [188]) = $0
	*($3 + [176]) = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $183($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $55(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $187($2)
	
.LABEL $label$5
	*($3 + [12]) = ($3 + [176])
	*($3 + [8]) = ($3 + [188])
	CALL $56(($3 + [8]), ($3 + [16]))
	if ( (*($3 + [76]) & [1]) ){ goto $label$10 }
	if ( (*($3 + [44]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($3 + [84])))
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [52])))
	$1 = [1]
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$1 = [1]
	if ( (*($3 + [32]) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	$global$0 = ($3 + [192])
	return $1
	
.LABEL $label$6
	CALL _ZdlPv(*(($3 + [40])))
	$global$0 = ($3 + [192])
	return $1
}

int_32 .FUNC $184 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $185($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8245])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $187 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17640])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17448]
	$3 = (((int_32)$1 * (int_32)[12]) + [17448])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $186 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $184([9256], $1)
	CALL memset($0, [0], $1)
	return $0
}

int_32 .FUNC $180 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $116 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$22()), [18636])
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($5) = (int_64)0
	CALL eosio_assert([1], [18457])
	$6 = ($5 + [8])
	$7 = (int_64)5462355
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [18506])
	*($5 + [16]) = $1
	$8 = *($3)
	*($5) = *($8)
	*(($5 + [8])) = *(($8 + [8]))
	CALL eosio_assert([1], [18569])
	CALL memcpy(($4 + [16]), $5, [8])
	CALL eosio_assert([1], [18569])
	CALL memcpy((($4 + [16]) | [8]), $6, [8])
	$10 = CALL db_store_i64(*($1 + [8]), (int_64)3932090330088022528, $2, (int_64)3932090330088022528, ($4 + [16]), [16])
	*($5 + [20]) = $10
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)3932090330088022528) ){ goto $label$6 }
	*(($1 + [16])) = (int_64)3932090330088022529
	
.LABEL $label$6
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)3932090330088022528
	*($4 + [4]) = $10
	$11 = ($1 + [28])
	$8 = *($11)
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = (int_64)3932090330088022528
	*($8 + [16]) = $10
	*($4 + [8]) = [0]
	*($8) = $5
	*($11) = ($8 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $114(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$7
	*($0 + [4]) = $5
	*($0) = $1
	$8 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($8 == 0) ){ goto $label$9 }
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$global$0 = ($4 + [32])
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [18388])
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$5 }
	$2 = CALL $183($5)
	CALL db_get_i64($1, $2, $5)
	CALL $187($2)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	CALL db_get_i64($1, $2, $5)
	
.LABEL $label$4
	$6 = ($0 + [24])
	*(($4 = CALL _Znwj([64])) + [48]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[31]), [18411])
	CALL memcpy($4, $2, [32])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[32]), [18411])
	CALL memcpy(($4 + [32]), ($2 + [32]), [8])
	*($4 + [56]) = [-1]
	*($4 + [52]) = $1
	*($3 + [8]) = $4
	$5 = [0]
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	
.LOOP $label$6:
	$1 = *(($4 + $5))
	CALL $155(($3 + [16]), *((uint_32($1 >> [4]) + [8223])))
	CALL $155(($3 + [16]), *((($1 & [15]) + [8223])))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$6 }
	$7 = CALL $4(($3 + [16]))
	if ( (*($3 + [16]) & [1]) ){ goto $label$8 }
	$1 = $4
	goto $label$7 
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [24])))
	$1 = *($3 + [8])
	
.LABEL $label$7
	*($3 + [16]) = $7
	$2 = *($1 + [52])
	*($3 + [4]) = $2
	$8 = ($0 + [28])
	$5 = *($8)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($5 + [8]) = $7
	*($5 + [16]) = $2
	*($3 + [8]) = [0]
	*($5) = $1
	*($8) = ($5 + [24])
	$5 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( $5 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $119($6, ($3 + [8]), ($3 + [16]), ($3 + [4]))
	$5 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $115 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [18813])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$22()), [18859])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [18910])
	CALL eosio_assert([1], [18569])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [18569])
	CALL memcpy(($4 | [8]), $5, [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)3932090330088022528) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)3932090330088022529
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [18388])
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$5 }
	$7 = CALL $183($6)
	CALL db_get_i64($1, $7, $6)
	CALL $187($7)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	CALL db_get_i64($1, $7, $6)
	
.LABEL $label$4
	$8 = ($0 + [24])
	*(($9 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($9) = (int_64)0
	CALL eosio_assert([1], [18457])
	$10 = ($9 + [8])
	$11 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$11 = $12
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$11 = $12
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [18506])
	*($9 + [16]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [18411])
	CALL memcpy($9, $7, [8])
	CALL eosio_assert(((int_32)($6 & [-8]) != (int_32)[8]), [18411])
	CALL memcpy($10, ($7 + [8]), [8])
	*($9 + [20]) = $1
	*($3 + [24]) = $9
	*($3 + [16]) = (int_64)3932090330088022528
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = (int_64)3932090330088022528
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $5 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $114($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return $9
}

void .FUNC $113 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$22()), [18636])
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($5) = (int_64)0
	CALL eosio_assert([1], [18457])
	$6 = ($5 + [8])
	$7 = (int_64)5462355
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [18506])
	*($5 + [16]) = $1
	$8 = *($3)
	*($5) = *($8)
	*(($5 + [8])) = *(($8 + [8]))
	CALL eosio_assert([1], [18569])
	CALL memcpy(($4 + [16]), $5, [8])
	CALL eosio_assert([1], [18569])
	CALL memcpy((($4 + [16]) | [8]), $6, [8])
	$10 = CALL db_store_i64(*($1 + [8]), (int_64)3932090330088022528, $2, (int_64)3932090330088022528, ($4 + [16]), [16])
	*($5 + [20]) = $10
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)3932090330088022528) ){ goto $label$6 }
	*(($1 + [16])) = (int_64)3932090330088022529
	
.LABEL $label$6
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)3932090330088022528
	*($4 + [4]) = $10
	$11 = ($1 + [28])
	$8 = *($11)
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = (int_64)3932090330088022528
	*($8 + [16]) = $10
	*($4 + [8]) = [0]
	*($8) = $5
	*($11) = ($8 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $114(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$7
	*($0 + [4]) = $5
	*($0) = $1
	$8 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($8 == 0) ){ goto $label$9 }
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$global$0 = ($4 + [32])
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18411])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18411])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18411])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18411])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18411])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18411])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18411])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18411])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18411])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18411])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18411])
	CALL memcpy($3, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [18411])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0)
	$4 = *($0 + [4])
	$5 = *($4)
	*($1) = *($5)
	*(($1 + [24])) = *(($5 + [24]))
	*(($1 + [16])) = *(($5 + [16]))
	*(($1 + [8])) = *(($5 + [8]))
	*($1 + [32]) = *(*($4 + [4]))
	CALL eosio_assert([1], [18569])
	CALL memcpy($2, $1, [32])
	CALL eosio_assert([1], [18569])
	CALL memcpy(($2 + [32]), ($1 + [32]), [8])
	$5 = [0]
	*($2 + [48]) = [0]
	*($2 + [40]) = (int_64)0
	
.LOOP $label$1:
	$4 = *(($1 + $5))
	CALL $155(($2 + [40]), *((uint_32($4 >> [4]) + [8223])))
	CALL $155(($2 + [40]), *((($4 & [15]) + [8223])))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$1 }
	$6 = CALL $4(($2 + [40]))
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($2 + [48])))
	
.LABEL $label$2
	*($1 + [52]) = CALL db_store_i64(*($3 + [8]), (int_64)7615815668302086144, *(*($0 + [8])), $6, $2, [40])
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$3 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($2 + [44]) = $1
	*($2 + [52]) = $1
	*($2 + [48]) = *(($0 + [8]))
	*($2 + [40]) = $3
	*($2 + [56]) = ($2 + [40])
	CALL $120(($2 + [56]), ($3 + [36]))
	$global$0 = ($2 + [64])
}

void .FUNC $119 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $183($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)1398362884
	*($3) = (int_64)0
	CALL eosio_assert([1], [18457])
	$8 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$8 = $9
	$2 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$8 = $9
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [18506])
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [80]) = ($6 + $7)
	*($3 + [72]) = $6
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18411])
	CALL memcpy($3, $6, [8])
	$1 = ($7 & [-8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [18411])
	$2 = ($3 + [8])
	CALL memcpy($2, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[16]), [18411])
	$1 = ($3 + [16])
	CALL memcpy($1, ($6 + [16]), [8])
	*($3 + [76]) = ($6 + [24])
	$10 = ($3 + [24])
	CALL $67(($3 + [72]), $10)
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL $187($6)
	
.LABEL $label$9
	*(($6 = (($3 + [56]) + [8]))) = *($2)
	*($3 + [56]) = *($3)
	$8 = *($1)
	$1 = CALL $147(($3 + [40]), $10)
	*((($3 + [72]) + [8])) = *($6)
	*($3 + [88]) = $8
	*($3 + [72]) = *($3 + [56])
	$2 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$10 }
	$5 = *((*($2) + $5))
	
.LABEL $label$10
	CALL void $2((int_32 ($3 + [72])), (int_32 ($3 + [88])), (int_32 $1), (int_32 $5))
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$11
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$12
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$4 = ($global$0 - [144])
	$global$0 = $4
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17875]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$10 = ($10 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($8)
	CALL $68($0, $1)
	$6 = (int_64)0
	$8 = (int_64)59
	$7 = [17706]
	$5 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$10 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$10 = ($10 + [-91])
	goto $label$8 
	
.LABEL $label$10
	$9 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$6
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)4294967291)
	$5 = ((int_64)$9 | (int_64)$5)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$5 }
	$11 = *($1 + [8])
	if ( ((int_64)$11 != (int_64)1129595400) ){ goto $label$11 }
	$6 = (int_64)0
	$9 = (int_64)59
	$7 = [17827]
	$5 = (int_64)0
	
.LOOP $label$12:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$13 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$10 = ($10 + [-91])
	goto $label$14 
	
.LABEL $label$15
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$13
	$7 = ($7 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$5 = ((int_64)$8 | (int_64)$5)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_64)$11 != (int_64)1213482248) ){ goto $label$16 }
	$6 = (int_64)0
	$9 = (int_64)59
	$7 = [17827]
	$5 = (int_64)0
	
.LOOP $label$17:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$18 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$10 = ($10 + [-91])
	goto $label$19 
	
.LABEL $label$20
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$18
	$7 = ($7 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$5 = ((int_64)$8 | (int_64)$5)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$17 }
	
.LABEL $label$16
	if ( ((int_64)$11 != (int_64)361923564804) ){ goto $label$21 }
	$6 = (int_64)0
	$9 = (int_64)59
	$7 = [17827]
	$5 = (int_64)0
	
.LOOP $label$22:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$23 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$10 = ($10 + [-91])
	goto $label$24 
	
.LABEL $label$25
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$23
	$7 = ($7 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$5 = ((int_64)$8 | (int_64)$5)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$22 }
	
.LABEL $label$21
	$9 = *($0)
	$6 = (int_64)6
	
.LOOP $label$26:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$26 }
	*($4 + [80]) = (int_64)3617214756542218240
	*($4 + [72]) = $9
	$6 = (int_64)0
	$8 = (int_64)59
	$7 = [17866]
	$11 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$32 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$10 = ($10 + [-91])
	goto $label$30 
	
.LABEL $label$32
	$9 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$28
	$7 = ($7 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$27 }
	*(($4 + [16])) = [0]
	*($4 + [8]) = (int_64)0
	$7 = CALL $180([21020])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$34 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$37 }
	*($4 + [8]) = ($7 << [1])
	$10 = (($4 + [8]) | [1])
	if ( $7 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	$12 = (($7 + [16]) & [-16])
	$10 = CALL _Znwj($12)
	*($4 + [8]) = ($12 | [1])
	*($4 + [16]) = $10
	*($4 + [12]) = $7
	
.LABEL $label$36
	CALL memcpy($10, [21020], $7)
	
.LABEL $label$35
	*(($10 + $7)) = [0]
	*(($4 + [48])) = *(($1 + [8]))
	$7 = (($4 + [8]) + [8])
	*(($4 + [64])) = *($7)
	*($7) = [0]
	*($4 + [24]) = *($0)
	*($4 + [32]) = *($2)
	*($4 + [40]) = *($1)
	*($4 + [56]) = *($4 + [8])
	*($4 + [8]) = (int_64)0
	$7 = CALL $33(($4 + [88]), ($4 + [72]), $5, $11, ($4 + [24]))
	CALL $34(($4 + [128]), $7)
	$10 = *($4 + [128])
	CALL send_inline($10, (*($4 + [132]) - $10))
	$10 = *($4 + [128])
	if ( ($10 == 0) ){ goto $label$38 }
	*($4 + [132]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$38
	$10 = *($7 + [28])
	if ( ($10 == 0) ){ goto $label$39 }
	*(($7 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$39
	$10 = *($7 + [16])
	if ( ($10 == 0) ){ goto $label$40 }
	*(($7 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$40
	if ( (*(($4 + [56])) & [1]) ){ goto $label$42 }
	if ( (*($4 + [8]) & [1]) ){ goto $label$41 }
	goto $label$33 
	
.LABEL $label$42
	CALL _ZdlPv(*(($4 + [64])))
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$33 }
	
.LABEL $label$41
	CALL _ZdlPv(*(($4 + [16])))
	$global$0 = ($4 + [144])
	return (unreachable)
	
.LABEL $label$34
	CALL $146(($4 + [8]))
	
.LABEL $label$33
	$global$0 = ($4 + [144])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = CALL action_data_size()
	if ( ($6 == 0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$1 = CALL $183($6)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $6)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [20]) = $1
	*($3 + [16]) = $1
	*($3 + [24]) = ($1 + $6)
	CALL $67(($3 + [16]), $3)
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL $187($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	$6 = CALL $147(($3 + [16]), $3)
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $6), (int_32 $5))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$6
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$7
	$global$0 = ($3 + [32])
	return [1]
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [320])
	$global$0 = $2
	*($2 + [168]) = [0]
	$3 = (int_64)0
	*($2 + [160]) = (int_64)0
	*($2 + [152]) = [0]
	*($2 + [144]) = (int_64)0
	$1 = CALL $147(($2 + [128]), $1)
	CALL $70($0, $1, ($2 + [296]), ($2 + [144]), ($2 + [160]), ($2 + [256]), ($2 + [248]), ($2 + [176]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$1
	$4 = (int_64)59
	$1 = [18035]
	$5 = *($2 + [296])
	$6 = (int_64)0
	
.LOOP $label$2:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$3 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$8 = ($8 + [-91])
	goto $label$4 
	
.LABEL $label$5
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$3
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$2 }
	if ( ((int_64)$5 != (int_64)$6) ){ goto $label$7 }
	$1 = *($2 + [144])
	$9 = ( *($2 + [148]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	CALL eosio_assert((($9 + [-3]) <= [9]), [18064])
	if ( ($9 == 0) ){ goto $label$6 }
	$1 = [0]
	
.LOOP $label$8:
	$8 = [1]
	$10 = *(CALL $153(($2 + [144]), $1))
	if ( ((($10 + [-48]) & [255]) <= [10]) ){ goto $label$9 }
	if ( ((($10 + [-97]) & [255]) <= [26]) ){ goto $label$9 }
	$8 = ((($10 + [-65]) & [255]) <= [26])
	
.LABEL $label$9
	CALL eosio_assert($8, [18093])
	$1 = ($1 + [1])
	if ( ((int_32)$9 != (int_32)$1) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	*($2 + [88]) = $5
	CALL $39(($2 + [24]), ($2 + [88]))
	$9 = [0]
	$8 = ($1 & [1])
	$1 = *($2 + [144])
	$10 = ($1 & [1])
	$1 = *($2 + [24])
	$11 = uint_32($1 >> [1])
	$12 = ( *($2 + [28]) ? $11 : $10 )
	if ( ((int_32)$12 != (int_32)( *($2 + [148]) ? uint_32($1 >> [1]) : $8 )) ){ goto $label$10 }
	$1 = (($2 + [24]) | [1])
	$8 = ( *(($2 + [152])) ? (($2 + [144]) | [1]) : $8 )
	if ( $10 ){ goto $label$13 }
	if ( ($12 == 0) ){ goto $label$12 }
	$10 = ([0] - $11)
	
.LOOP $label$14:
	if ( ((int_32)*($1) != (int_32)*($8)) ){ goto $label$11 }
	$9 = [1]
	$8 = ($8 + [1])
	$1 = ($1 + [1])
	$10 = ($10 + [1])
	if ( $10 ){ goto $label$14 }
	goto $label$10 
	
.LABEL $label$13
	if ( ($12 == 0) ){ goto $label$12 }
	$9 = (CALL $179(( *($2 + [32]) ? $1 : $10 ), $8, $12) == 0)
	goto $label$10 
	
.LABEL $label$12
	$9 = [1]
	goto $label$10 
	
.LABEL $label$11
	$9 = [0]
	
.LABEL $label$10
	CALL eosio_assert($9, [18157])
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($2 + [32]))
	
.LABEL $label$6
	CALL require_auth(*($2 + [296]))
	$1 = [1]
	$8 = *($2 + [160])
	$10 = CALL $180([8871])
	if ( ((int_32)$10 != (int_32)( *($2 + [164]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$16 }
	if ( (CALL $159(($2 + [160]), [0], [-1], [8871], $10) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$1 = *($2 + [160])
	$8 = CALL $180([17899])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$18 }
	if ( (CALL $159(($2 + [160]), [0], [-1], [17899], $8) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$1 = [1]
	$8 = *($2 + [160])
	$10 = CALL $180([17903])
	if ( ((int_32)$10 != (int_32)( *($2 + [164]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$19 }
	if ( (CALL $159(($2 + [160]), [0], [-1], [17903], $10) == 0) ){ goto $label$15 }
	
.LABEL $label$19
	$1 = *($2 + [160])
	$8 = CALL $180([17909])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$20 }
	if ( (CALL $159(($2 + [160]), [0], [-1], [17909], $8) == 0) ){ goto $label$17 }
	
.LABEL $label$20
	$1 = [1]
	$8 = *($2 + [160])
	$10 = CALL $180([17913])
	if ( ((int_32)$10 != (int_32)( *($2 + [164]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$21 }
	if ( (CALL $159(($2 + [160]), [0], [-1], [17913], $10) == 0) ){ goto $label$15 }
	
.LABEL $label$21
	$1 = *($2 + [160])
	$8 = CALL $180([17921])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$22 }
	if ( (CALL $159(($2 + [160]), [0], [-1], [17921], $8) == 0) ){ goto $label$17 }
	
.LABEL $label$22
	$1 = [1]
	$8 = *($2 + [160])
	$10 = CALL $180([17930])
	if ( ((int_32)$10 != (int_32)( *($2 + [164]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$23 }
	if ( (CALL $159(($2 + [160]), [0], [-1], [17930], $10) == 0) ){ goto $label$15 }
	
.LABEL $label$23
	$1 = *($2 + [160])
	$8 = CALL $180([17925])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$24 }
	if ( (CALL $159(($2 + [160]), [0], [-1], [17925], $8) == 0) ){ goto $label$17 }
	
.LABEL $label$24
	$1 = [1]
	$8 = *($2 + [160])
	$10 = CALL $180([17934])
	if ( ((int_32)$10 != (int_32)( *($2 + [164]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$25 }
	if ( (CALL $159(($2 + [160]), [0], [-1], [17934], $10) == 0) ){ goto $label$15 }
	
.LABEL $label$25
	$1 = *($2 + [160])
	$8 = CALL $180([17941])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$26 }
	if ( (CALL $159(($2 + [160]), [0], [-1], [17941], $8) == 0) ){ goto $label$17 }
	
.LABEL $label$26
	$1 = [1]
	$8 = *($2 + [160])
	$10 = CALL $180([17945])
	if ( ((int_32)$10 != (int_32)( *($2 + [164]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$27 }
	if ( (CALL $159(($2 + [160]), [0], [-1], [17945], $10) == 0) ){ goto $label$15 }
	
.LABEL $label$27
	$1 = *($2 + [160])
	$8 = CALL $180([17950])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$28 }
	if ( (CALL $159(($2 + [160]), [0], [-1], [17950], $8) == 0) ){ goto $label$17 }
	
.LABEL $label$28
	$1 = [1]
	$8 = *($2 + [160])
	$10 = CALL $180([17954])
	if ( ((int_32)$10 != (int_32)( *($2 + [164]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$29 }
	if ( (CALL $159(($2 + [160]), [0], [-1], [17954], $10) == 0) ){ goto $label$15 }
	
.LABEL $label$29
	$1 = *($2 + [160])
	$8 = CALL $180([18180])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$30 }
	if ( (CALL $159(($2 + [160]), [0], [-1], [18180], $8) == 0) ){ goto $label$17 }
	
.LABEL $label$30
	$1 = [0]
	$8 = *($2 + [160])
	$10 = CALL $180([17958])
	if ( ((int_32)$10 != (int_32)( *($2 + [164]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$15 }
	$1 = (CALL $159(($2 + [160]), [0], [-1], [17958], $10) == 0)
	goto $label$15 
	
.LABEL $label$17
	$1 = [1]
	
.LABEL $label$15
	CALL eosio_assert($1, [18185])
	CALL $44($0, ($2 + [256]), ($2 + [248]))
	CALL $71($0, ($2 + [296]), ($2 + [144]), ($2 + [160]), ($2 + [256]), ($2 + [248]), ($2 + [176]))
	$1 = *($2 + [160])
	$8 = CALL $180([8871])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$31 }
	if ( CALL $159(($2 + [160]), [0], [-1], [8871], $8) ){ goto $label$31 }
	$4 = *($0)
	$3 = (int_64)6
	
.LOOP $label$32:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$32 }
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $4
	$3 = (int_64)0
	$7 = (int_64)59
	$1 = [17706]
	$6 = (int_64)0
	
.LOOP $label$33:
	if ( ((uint_64)$3 > (uint_64)(int_64)10) ){ goto $label$38 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$37 }
	$8 = ($8 + [-91])
	goto $label$36 
	
.LABEL $label$38
	$4 = (int_64)0
	if ( ((int_64)$3 == (int_64)11) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$37
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$36
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$35
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$34
	$1 = ($1 + [1])
	$7 = ((int_64)$7 + (int_64)4294967291)
	$6 = ((int_64)$4 | (int_64)$6)
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$33 }
	$3 = (int_64)0
	$7 = (int_64)59
	$1 = [17866]
	$5 = (int_64)0
	
.LOOP $label$39:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$44 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$43 }
	$8 = ($8 + [-91])
	goto $label$42 
	
.LABEL $label$44
	$4 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$43
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$42
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$41
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$40
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$4 | (int_64)$5)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$39 }
	CALL eosio_assert([1], [18457])
	$3 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$47:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$46 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$48 }
	$3 = $4
	$8 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$47 }
	goto $label$45 
	
.LABEL $label$48
	$3 = $4
	
.LOOP $label$49:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$46 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $8 ){ goto $label$49 }
	$8 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$47 }
	goto $label$45 
	
.LABEL $label$46
	$8 = [0]
	
.LABEL $label$45
	CALL eosio_assert($8, [18506])
	CALL $72(($2 + [8]), ($2 + [144]), [21169])
	*(($2 + [48])) = (int_64)1397703940
	$1 = ($2 + [16])
	*(($2 + [64])) = *($1)
	*($1) = [0]
	*($2 + [40]) = (int_64)5
	*($2 + [24]) = *($0)
	*($2 + [32]) = *($2 + [296])
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	$1 = CALL $33(($2 + [88]), ($2 + [72]), $6, $5, ($2 + [24]))
	CALL $34(($2 + [304]), $1)
	$8 = *($2 + [304])
	CALL send_inline($8, (*($2 + [308]) - $8))
	$8 = *($2 + [304])
	if ( ($8 == 0) ){ goto $label$50 }
	*($2 + [308]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$50
	$8 = *($1 + [28])
	if ( ($8 == 0) ){ goto $label$51 }
	*(($1 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$51
	$8 = *($1 + [16])
	if ( ($8 == 0) ){ goto $label$52 }
	*(($1 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$52
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$53 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$53
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$31
	$1 = *($2 + [160])
	$8 = CALL $180([17899])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$54 }
	if ( CALL $159(($2 + [160]), [0], [-1], [17899], $8) ){ goto $label$54 }
	$4 = *($0)
	$3 = (int_64)6
	
.LOOP $label$55:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$55 }
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $4
	$3 = (int_64)0
	$4 = (int_64)59
	$1 = [17718]
	$6 = (int_64)0
	
.LOOP $label$56:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$57 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$59 }
	$8 = ($8 + [-91])
	goto $label$58 
	
.LABEL $label$59
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$58
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$57
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$56 }
	$3 = (int_64)0
	$7 = (int_64)59
	$1 = [17866]
	$5 = (int_64)0
	
.LOOP $label$60:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$65 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$64 }
	$8 = ($8 + [-91])
	goto $label$63 
	
.LABEL $label$65
	$4 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$64
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$63
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$62
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$61
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$4 | (int_64)$5)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$60 }
	CALL eosio_assert([1], [18457])
	$3 = (int_64)5527636
	$1 = [0]
	
.LOOP $label$68:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$67 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$69 }
	$3 = $4
	$8 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$68 }
	goto $label$66 
	
.LABEL $label$69
	$3 = $4
	
.LOOP $label$70:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$67 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $8 ){ goto $label$70 }
	$8 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$68 }
	goto $label$66 
	
.LABEL $label$67
	$8 = [0]
	
.LABEL $label$66
	CALL eosio_assert($8, [18506])
	CALL $72(($2 + [8]), ($2 + [144]), [21169])
	*(($2 + [48])) = (int_64)1415074820
	$1 = ($2 + [16])
	*(($2 + [64])) = *($1)
	*($1) = [0]
	*($2 + [40]) = (int_64)30000
	*($2 + [24]) = *($0)
	*($2 + [32]) = *($2 + [296])
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	$1 = CALL $33(($2 + [88]), ($2 + [72]), $6, $5, ($2 + [24]))
	CALL $34(($2 + [304]), $1)
	$8 = *($2 + [304])
	CALL send_inline($8, (*($2 + [308]) - $8))
	$8 = *($2 + [304])
	if ( ($8 == 0) ){ goto $label$71 }
	*($2 + [308]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$71
	$8 = *($1 + [28])
	if ( ($8 == 0) ){ goto $label$72 }
	*(($1 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$72
	$8 = *($1 + [16])
	if ( ($8 == 0) ){ goto $label$73 }
	*(($1 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$73
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$74 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$74
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$54 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$54
	$1 = *($2 + [160])
	$8 = CALL $180([17903])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$75 }
	if ( CALL $159(($2 + [160]), [0], [-1], [17903], $8) ){ goto $label$75 }
	$4 = *($0)
	$3 = (int_64)6
	
.LOOP $label$76:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$76 }
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $4
	$3 = (int_64)0
	$4 = (int_64)59
	$1 = [17731]
	$6 = (int_64)0
	
.LOOP $label$77:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$78 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$80 }
	$8 = ($8 + [-91])
	goto $label$79 
	
.LABEL $label$80
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$79
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$78
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$77 }
	$3 = (int_64)0
	$7 = (int_64)59
	$1 = [17866]
	$5 = (int_64)0
	
.LOOP $label$81:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$86 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$85 }
	$8 = ($8 + [-91])
	goto $label$84 
	
.LABEL $label$86
	$4 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$85
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$84
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$83
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$82
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$4 | (int_64)$5)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$81 }
	CALL eosio_assert([1], [18457])
	$3 = (int_64)297465893460
	$1 = [0]
	
.LOOP $label$89:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$88 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$90 }
	$3 = $4
	$8 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$89 }
	goto $label$87 
	
.LABEL $label$90
	$3 = $4
	
.LOOP $label$91:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$88 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $8 ){ goto $label$91 }
	$8 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$89 }
	goto $label$87 
	
.LABEL $label$88
	$8 = [0]
	
.LABEL $label$87
	CALL eosio_assert($8, [18506])
	CALL $72(($2 + [8]), ($2 + [144]), [21169])
	*(($2 + [48])) = (int_64)76151268725764
	$1 = ($2 + [16])
	*(($2 + [64])) = *($1)
	*($1) = [0]
	*($2 + [40]) = (int_64)5000
	*($2 + [24]) = *($0)
	*($2 + [32]) = *($2 + [296])
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	$1 = CALL $33(($2 + [88]), ($2 + [72]), $6, $5, ($2 + [24]))
	CALL $34(($2 + [304]), $1)
	$8 = *($2 + [304])
	CALL send_inline($8, (*($2 + [308]) - $8))
	$8 = *($2 + [304])
	if ( ($8 == 0) ){ goto $label$92 }
	*($2 + [308]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$92
	$8 = *($1 + [28])
	if ( ($8 == 0) ){ goto $label$93 }
	*(($1 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$93
	$8 = *($1 + [16])
	if ( ($8 == 0) ){ goto $label$94 }
	*(($1 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$94
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$95 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$95
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$75 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$75
	$1 = *($2 + [160])
	$8 = CALL $180([17909])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$96 }
	if ( CALL $159(($2 + [160]), [0], [-1], [17909], $8) ){ goto $label$96 }
	$4 = *($0)
	$3 = (int_64)6
	
.LOOP $label$97:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$97 }
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $4
	$3 = (int_64)0
	$4 = (int_64)59
	$1 = [17744]
	$6 = (int_64)0
	
.LOOP $label$98:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$99 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$101 }
	$8 = ($8 + [-91])
	goto $label$100 
	
.LABEL $label$101
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$100
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$99
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$98 }
	$3 = (int_64)0
	$7 = (int_64)59
	$1 = [17866]
	$5 = (int_64)0
	
.LOOP $label$102:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$107 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$106 }
	$8 = ($8 + [-91])
	goto $label$105 
	
.LABEL $label$107
	$4 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$104 }
	goto $label$103 
	
.LABEL $label$106
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$105
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$104
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$103
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$4 | (int_64)$5)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$102 }
	CALL eosio_assert([1], [18457])
	$3 = (int_64)5525588
	$1 = [0]
	
.LOOP $label$110:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$109 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$111 }
	$3 = $4
	$8 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$110 }
	goto $label$108 
	
.LABEL $label$111
	$3 = $4
	
.LOOP $label$112:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$109 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $8 ){ goto $label$112 }
	$8 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$110 }
	goto $label$108 
	
.LABEL $label$109
	$8 = [0]
	
.LABEL $label$108
	CALL eosio_assert($8, [18506])
	CALL $72(($2 + [8]), ($2 + [144]), [21169])
	*(($2 + [48])) = (int_64)1414550532
	$1 = ($2 + [16])
	*(($2 + [64])) = *($1)
	*($1) = [0]
	*($2 + [40]) = (int_64)10000
	*($2 + [24]) = *($0)
	*($2 + [32]) = *($2 + [296])
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	$1 = CALL $33(($2 + [88]), ($2 + [72]), $6, $5, ($2 + [24]))
	CALL $34(($2 + [304]), $1)
	$8 = *($2 + [304])
	CALL send_inline($8, (*($2 + [308]) - $8))
	$8 = *($2 + [304])
	if ( ($8 == 0) ){ goto $label$113 }
	*($2 + [308]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$113
	$8 = *($1 + [28])
	if ( ($8 == 0) ){ goto $label$114 }
	*(($1 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$114
	$8 = *($1 + [16])
	if ( ($8 == 0) ){ goto $label$115 }
	*(($1 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$115
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$116 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$116
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$96 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$96
	$1 = *($2 + [160])
	$8 = CALL $180([17913])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$117 }
	if ( CALL $159(($2 + [160]), [0], [-1], [17913], $8) ){ goto $label$117 }
	$4 = *($0)
	$3 = (int_64)6
	
.LOOP $label$118:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$118 }
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $4
	$3 = (int_64)0
	$4 = (int_64)59
	$1 = [17773]
	$6 = (int_64)0
	
.LOOP $label$119:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$120 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$122 }
	$8 = ($8 + [-91])
	goto $label$121 
	
.LABEL $label$122
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$121
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$120
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$119 }
	$3 = (int_64)0
	$7 = (int_64)59
	$1 = [17866]
	$5 = (int_64)0
	
.LOOP $label$123:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$128 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$127 }
	$8 = ($8 + [-91])
	goto $label$126 
	
.LABEL $label$128
	$4 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$125 }
	goto $label$124 
	
.LABEL $label$127
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$126
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$125
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$124
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$4 | (int_64)$5)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$123 }
	CALL eosio_assert([1], [18457])
	$3 = (int_64)19507876016244045
	$1 = [0]
	
.LOOP $label$131:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$130 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$132 }
	$3 = $4
	$8 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$131 }
	goto $label$129 
	
.LABEL $label$132
	$3 = $4
	
.LOOP $label$133:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$130 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $8 ){ goto $label$133 }
	$8 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$131 }
	goto $label$129 
	
.LABEL $label$130
	$8 = [0]
	
.LABEL $label$129
	CALL eosio_assert($8, [18506])
	CALL $72(($2 + [8]), ($2 + [144]), [21169])
	*(($2 + [48])) = (int_64)4994016260158475524
	$1 = ($2 + [16])
	*(($2 + [64])) = *($1)
	*($1) = [0]
	*($2 + [40]) = (int_64)10000
	*($2 + [24]) = *($0)
	*($2 + [32]) = *($2 + [296])
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	$1 = CALL $33(($2 + [88]), ($2 + [72]), $6, $5, ($2 + [24]))
	CALL $34(($2 + [304]), $1)
	$8 = *($2 + [304])
	CALL send_inline($8, (*($2 + [308]) - $8))
	$8 = *($2 + [304])
	if ( ($8 == 0) ){ goto $label$134 }
	*($2 + [308]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$134
	$8 = *($1 + [28])
	if ( ($8 == 0) ){ goto $label$135 }
	*(($1 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$135
	$8 = *($1 + [16])
	if ( ($8 == 0) ){ goto $label$136 }
	*(($1 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$136
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$137 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$137
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$117 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$117
	$1 = *($2 + [160])
	$8 = CALL $180([17921])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$138 }
	if ( CALL $159(($2 + [160]), [0], [-1], [17921], $8) ){ goto $label$138 }
	$4 = *($0)
	$3 = (int_64)6
	
.LOOP $label$139:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$139 }
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $4
	$3 = (int_64)0
	$4 = (int_64)59
	$1 = [17801]
	$6 = (int_64)0
	
.LOOP $label$140:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$141 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$143 }
	$8 = ($8 + [-91])
	goto $label$142 
	
.LABEL $label$143
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$142
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$141
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$140 }
	$3 = (int_64)0
	$7 = (int_64)59
	$1 = [17866]
	$5 = (int_64)0
	
.LOOP $label$144:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$149 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$148 }
	$8 = ($8 + [-91])
	goto $label$147 
	
.LABEL $label$149
	$4 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$146 }
	goto $label$145 
	
.LABEL $label$148
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$147
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$146
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$145
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$4 | (int_64)$5)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$144 }
	CALL eosio_assert([1], [18457])
	$3 = (int_64)5784654
	$1 = [0]
	
.LOOP $label$152:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$151 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$153 }
	$3 = $4
	$8 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$152 }
	goto $label$150 
	
.LABEL $label$153
	$3 = $4
	
.LOOP $label$154:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$151 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $8 ){ goto $label$154 }
	$8 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$152 }
	goto $label$150 
	
.LABEL $label$151
	$8 = [0]
	
.LABEL $label$150
	CALL eosio_assert($8, [18506])
	CALL $72(($2 + [8]), ($2 + [144]), [21169])
	*(($2 + [48])) = (int_64)1480871428
	$1 = ($2 + [16])
	*(($2 + [64])) = *($1)
	*($1) = [0]
	*($2 + [40]) = (int_64)20000
	*($2 + [24]) = *($0)
	*($2 + [32]) = *($2 + [296])
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	$1 = CALL $33(($2 + [88]), ($2 + [72]), $6, $5, ($2 + [24]))
	CALL $34(($2 + [304]), $1)
	$8 = *($2 + [304])
	CALL send_inline($8, (*($2 + [308]) - $8))
	$8 = *($2 + [304])
	if ( ($8 == 0) ){ goto $label$155 }
	*($2 + [308]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$155
	$8 = *($1 + [28])
	if ( ($8 == 0) ){ goto $label$156 }
	*(($1 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$156
	$8 = *($1 + [16])
	if ( ($8 == 0) ){ goto $label$157 }
	*(($1 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$157
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$158 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$158
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$138 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$138
	$1 = *($2 + [160])
	$8 = CALL $180([17930])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$159 }
	if ( CALL $159(($2 + [160]), [0], [-1], [17930], $8) ){ goto $label$159 }
	$4 = *($0)
	$3 = (int_64)6
	
.LOOP $label$160:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$160 }
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $4
	$3 = (int_64)0
	$4 = (int_64)59
	$1 = [17827]
	$6 = (int_64)0
	
.LOOP $label$161:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$162 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$164 }
	$8 = ($8 + [-91])
	goto $label$163 
	
.LABEL $label$164
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$163
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$162
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$161 }
	$3 = (int_64)0
	$7 = (int_64)59
	$1 = [17866]
	$5 = (int_64)0
	
.LOOP $label$165:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$170 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$169 }
	$8 = ($8 + [-91])
	goto $label$168 
	
.LABEL $label$170
	$4 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$167 }
	goto $label$166 
	
.LABEL $label$169
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$168
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$167
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$166
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$4 | (int_64)$5)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$165 }
	CALL eosio_assert([1], [18457])
	$3 = (int_64)4412482
	$1 = [0]
	
.LOOP $label$173:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$172 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$174 }
	$3 = $4
	$8 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$173 }
	goto $label$171 
	
.LABEL $label$174
	$3 = $4
	
.LOOP $label$175:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$172 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $8 ){ goto $label$175 }
	$8 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$173 }
	goto $label$171 
	
.LABEL $label$172
	$8 = [0]
	
.LABEL $label$171
	CALL eosio_assert($8, [18506])
	CALL $72(($2 + [8]), ($2 + [144]), [21169])
	*(($2 + [48])) = (int_64)1129595400
	$1 = ($2 + [16])
	*(($2 + [64])) = *($1)
	*($1) = [0]
	*($2 + [40]) = (int_64)50
	*($2 + [24]) = *($0)
	*($2 + [32]) = *($2 + [296])
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	$1 = CALL $33(($2 + [88]), ($2 + [72]), $6, $5, ($2 + [24]))
	CALL $34(($2 + [304]), $1)
	$8 = *($2 + [304])
	CALL send_inline($8, (*($2 + [308]) - $8))
	$8 = *($2 + [304])
	if ( ($8 == 0) ){ goto $label$176 }
	*($2 + [308]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$176
	$8 = *($1 + [28])
	if ( ($8 == 0) ){ goto $label$177 }
	*(($1 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$177
	$8 = *($1 + [16])
	if ( ($8 == 0) ){ goto $label$178 }
	*(($1 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$178
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$179 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$179
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$159 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$159
	$1 = *($2 + [160])
	$8 = CALL $180([17925])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$180 }
	if ( CALL $159(($2 + [160]), [0], [-1], [17925], $8) ){ goto $label$180 }
	$4 = *($0)
	$3 = (int_64)6
	
.LOOP $label$181:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$181 }
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $4
	$3 = (int_64)0
	$4 = (int_64)59
	$1 = [17814]
	$6 = (int_64)0
	
.LOOP $label$182:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$183 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$185 }
	$8 = ($8 + [-91])
	goto $label$184 
	
.LABEL $label$185
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$184
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$183
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$182 }
	$3 = (int_64)0
	$7 = (int_64)59
	$1 = [17866]
	$5 = (int_64)0
	
.LOOP $label$186:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$191 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$190 }
	$8 = ($8 + [-91])
	goto $label$189 
	
.LABEL $label$191
	$4 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$188 }
	goto $label$187 
	
.LABEL $label$190
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$189
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$188
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$187
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$4 | (int_64)$5)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$186 }
	CALL eosio_assert([1], [18457])
	$3 = (int_64)1481529676
	$1 = [0]
	
.LOOP $label$194:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$193 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$195 }
	$3 = $4
	$8 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$194 }
	goto $label$192 
	
.LABEL $label$195
	$3 = $4
	
.LOOP $label$196:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$193 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $8 ){ goto $label$196 }
	$8 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$194 }
	goto $label$192 
	
.LABEL $label$193
	$8 = [0]
	
.LABEL $label$192
	CALL eosio_assert($8, [18506])
	CALL $72(($2 + [8]), ($2 + [144]), [21169])
	*(($2 + [48])) = (int_64)379271597060
	$1 = ($2 + [16])
	*(($2 + [64])) = *($1)
	*($1) = [0]
	*($2 + [40]) = (int_64)10000
	*($2 + [24]) = *($0)
	*($2 + [32]) = *($2 + [296])
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	$1 = CALL $33(($2 + [88]), ($2 + [72]), $6, $5, ($2 + [24]))
	CALL $34(($2 + [304]), $1)
	$8 = *($2 + [304])
	CALL send_inline($8, (*($2 + [308]) - $8))
	$8 = *($2 + [304])
	if ( ($8 == 0) ){ goto $label$197 }
	*($2 + [308]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$197
	$8 = *($1 + [28])
	if ( ($8 == 0) ){ goto $label$198 }
	*(($1 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$198
	$8 = *($1 + [16])
	if ( ($8 == 0) ){ goto $label$199 }
	*(($1 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$199
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$200 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$200
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$180 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$180
	$1 = *($2 + [160])
	$8 = CALL $180([17934])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$201 }
	if ( CALL $159(($2 + [160]), [0], [-1], [17934], $8) ){ goto $label$201 }
	$4 = *($0)
	$3 = (int_64)6
	
.LOOP $label$202:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$202 }
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $4
	$3 = (int_64)0
	$4 = (int_64)59
	$1 = [17840]
	$6 = (int_64)0
	
.LOOP $label$203:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$204 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$206 }
	$8 = ($8 + [-91])
	goto $label$205 
	
.LABEL $label$206
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$205
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$204
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$203 }
	$3 = (int_64)0
	$7 = (int_64)59
	$1 = [17866]
	$5 = (int_64)0
	
.LOOP $label$207:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$212 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$211 }
	$8 = ($8 + [-91])
	goto $label$210 
	
.LABEL $label$212
	$4 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$209 }
	goto $label$208 
	
.LABEL $label$211
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$210
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$209
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$208
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$4 | (int_64)$5)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$207 }
	CALL eosio_assert([1], [18457])
	$3 = (int_64)91599930935632
	$1 = [0]
	
.LOOP $label$215:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$214 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$216 }
	$3 = $4
	$8 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$215 }
	goto $label$213 
	
.LABEL $label$216
	$3 = $4
	
.LOOP $label$217:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$214 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $8 ){ goto $label$217 }
	$8 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$215 }
	goto $label$213 
	
.LABEL $label$214
	$8 = [0]
	
.LABEL $label$213
	CALL eosio_assert($8, [18506])
	CALL $72(($2 + [8]), ($2 + [144]), [21169])
	*(($2 + [48])) = (int_64)23449582319521796
	$1 = ($2 + [16])
	*(($2 + [64])) = *($1)
	*($1) = [0]
	*($2 + [40]) = (int_64)60000
	*($2 + [24]) = *($0)
	*($2 + [32]) = *($2 + [296])
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	$1 = CALL $33(($2 + [88]), ($2 + [72]), $6, $5, ($2 + [24]))
	CALL $34(($2 + [304]), $1)
	$8 = *($2 + [304])
	CALL send_inline($8, (*($2 + [308]) - $8))
	$8 = *($2 + [304])
	if ( ($8 == 0) ){ goto $label$218 }
	*($2 + [308]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$218
	$8 = *($1 + [28])
	if ( ($8 == 0) ){ goto $label$219 }
	*(($1 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$219
	$8 = *($1 + [16])
	if ( ($8 == 0) ){ goto $label$220 }
	*(($1 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$220
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$221 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$221
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$201 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$201
	$1 = *($2 + [160])
	$8 = CALL $180([17941])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$222 }
	if ( CALL $159(($2 + [160]), [0], [-1], [17941], $8) ){ goto $label$222 }
	$4 = *($0)
	$3 = (int_64)6
	
.LOOP $label$223:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$223 }
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $4
	$3 = (int_64)0
	$4 = (int_64)59
	$1 = [17827]
	$6 = (int_64)0
	
.LOOP $label$224:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$225 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$227 }
	$8 = ($8 + [-91])
	goto $label$226 
	
.LABEL $label$227
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$226
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$225
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$224 }
	$3 = (int_64)0
	$7 = (int_64)59
	$1 = [17866]
	$5 = (int_64)0
	
.LOOP $label$228:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$233 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$232 }
	$8 = ($8 + [-91])
	goto $label$231 
	
.LABEL $label$233
	$4 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$230 }
	goto $label$229 
	
.LABEL $label$232
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$231
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$230
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$229
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$4 | (int_64)$5)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$228 }
	CALL eosio_assert([1], [18457])
	$3 = (int_64)4740165
	$1 = [0]
	
.LOOP $label$236:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$235 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$237 }
	$3 = $4
	$8 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$236 }
	goto $label$234 
	
.LABEL $label$237
	$3 = $4
	
.LOOP $label$238:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$235 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $8 ){ goto $label$238 }
	$8 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$236 }
	goto $label$234 
	
.LABEL $label$235
	$8 = [0]
	
.LABEL $label$234
	CALL eosio_assert($8, [18506])
	CALL $72(($2 + [8]), ($2 + [144]), [21169])
	*(($2 + [48])) = (int_64)1213482248
	$1 = ($2 + [16])
	*(($2 + [64])) = *($1)
	*($1) = [0]
	*($2 + [40]) = (int_64)2000
	*($2 + [24]) = *($0)
	*($2 + [32]) = *($2 + [296])
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	$1 = CALL $33(($2 + [88]), ($2 + [72]), $6, $5, ($2 + [24]))
	CALL $34(($2 + [304]), $1)
	$8 = *($2 + [304])
	CALL send_inline($8, (*($2 + [308]) - $8))
	$8 = *($2 + [304])
	if ( ($8 == 0) ){ goto $label$239 }
	*($2 + [308]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$239
	$8 = *($1 + [28])
	if ( ($8 == 0) ){ goto $label$240 }
	*(($1 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$240
	$8 = *($1 + [16])
	if ( ($8 == 0) ){ goto $label$241 }
	*(($1 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$241
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$242 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$242
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$222 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$222
	$1 = *($2 + [160])
	$8 = CALL $180([17945])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$243 }
	if ( CALL $159(($2 + [160]), [0], [-1], [17945], $8) ){ goto $label$243 }
	$3 = (int_64)0
	$4 = (int_64)59
	$1 = [18035]
	$5 = *($2 + [296])
	$6 = (int_64)0
	
.LOOP $label$244:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$245 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$247 }
	$8 = ($8 + [-91])
	goto $label$246 
	
.LABEL $label$247
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$246
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$245
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$244 }
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [18257])
	$4 = *($0)
	$3 = (int_64)6
	
.LOOP $label$248:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$248 }
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $4
	$3 = (int_64)0
	$4 = (int_64)59
	$1 = [17827]
	$6 = (int_64)0
	
.LOOP $label$249:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$250 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$252 }
	$8 = ($8 + [-91])
	goto $label$251 
	
.LABEL $label$252
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$251
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$250
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$249 }
	$3 = (int_64)0
	$7 = (int_64)59
	$1 = [17866]
	$5 = (int_64)0
	
.LOOP $label$253:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$258 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$257 }
	$8 = ($8 + [-91])
	goto $label$256 
	
.LABEL $label$258
	$4 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$255 }
	goto $label$254 
	
.LABEL $label$257
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$256
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$255
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$254
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$4 | (int_64)$5)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$253 }
	CALL eosio_assert([1], [18457])
	$3 = (int_64)1213481295
	$1 = [0]
	
.LOOP $label$261:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$260 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$262 }
	$3 = $4
	$8 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$261 }
	goto $label$259 
	
.LABEL $label$262
	$3 = $4
	
.LOOP $label$263:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$260 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $8 ){ goto $label$263 }
	$8 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$261 }
	goto $label$259 
	
.LABEL $label$260
	$8 = [0]
	
.LABEL $label$259
	CALL eosio_assert($8, [18506])
	CALL $72(($2 + [8]), ($2 + [144]), [21169])
	*(($2 + [48])) = (int_64)310651211528
	$1 = ($2 + [16])
	*(($2 + [64])) = *($1)
	*($1) = [0]
	*($2 + [40]) = (int_64)100000000
	*($2 + [24]) = *($0)
	*($2 + [32]) = *($2 + [296])
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	$1 = CALL $33(($2 + [88]), ($2 + [72]), $6, $5, ($2 + [24]))
	CALL $34(($2 + [304]), $1)
	$8 = *($2 + [304])
	CALL send_inline($8, (*($2 + [308]) - $8))
	$8 = *($2 + [304])
	if ( ($8 == 0) ){ goto $label$264 }
	*($2 + [308]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$264
	$8 = *($1 + [28])
	if ( ($8 == 0) ){ goto $label$265 }
	*(($1 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$265
	$8 = *($1 + [16])
	if ( ($8 == 0) ){ goto $label$266 }
	*(($1 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$266
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$267 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$267
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$243 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$243
	$1 = *($2 + [160])
	$8 = CALL $180([17950])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$268 }
	if ( CALL $159(($2 + [160]), [0], [-1], [17950], $8) ){ goto $label$268 }
	$4 = *($0)
	$3 = (int_64)6
	
.LOOP $label$269:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$269 }
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $4
	$3 = (int_64)0
	$4 = (int_64)59
	$1 = [17853]
	$6 = (int_64)0
	
.LOOP $label$270:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$271 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$273 }
	$8 = ($8 + [-91])
	goto $label$272 
	
.LABEL $label$273
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$272
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$271
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$270 }
	$3 = (int_64)0
	$7 = (int_64)59
	$1 = [17866]
	$5 = (int_64)0
	
.LOOP $label$274:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$279 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$278 }
	$8 = ($8 + [-91])
	goto $label$277 
	
.LABEL $label$279
	$4 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$276 }
	goto $label$275 
	
.LABEL $label$278
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$277
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$276
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$275
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$4 | (int_64)$5)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$274 }
	CALL eosio_assert([1], [18457])
	$3 = (int_64)4805712
	$1 = [0]
	
.LOOP $label$282:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$281 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$283 }
	$3 = $4
	$8 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$282 }
	goto $label$280 
	
.LABEL $label$283
	$3 = $4
	
.LOOP $label$284:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$281 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $8 ){ goto $label$284 }
	$8 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$282 }
	goto $label$280 
	
.LABEL $label$281
	$8 = [0]
	
.LABEL $label$280
	CALL eosio_assert($8, [18506])
	CALL $72(($2 + [8]), ($2 + [144]), [21169])
	*(($2 + [48])) = (int_64)1230262276
	$1 = ($2 + [16])
	*(($2 + [64])) = *($1)
	*($1) = [0]
	*($2 + [40]) = (int_64)10000
	*($2 + [24]) = *($0)
	*($2 + [32]) = *($2 + [296])
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	$1 = CALL $33(($2 + [88]), ($2 + [72]), $6, $5, ($2 + [24]))
	CALL $34(($2 + [304]), $1)
	$8 = *($2 + [304])
	CALL send_inline($8, (*($2 + [308]) - $8))
	$8 = *($2 + [304])
	if ( ($8 == 0) ){ goto $label$285 }
	*($2 + [308]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$285
	$8 = *($1 + [28])
	if ( ($8 == 0) ){ goto $label$286 }
	*(($1 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$286
	$8 = *($1 + [16])
	if ( ($8 == 0) ){ goto $label$287 }
	*(($1 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$287
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$288 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$288
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$268 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$268
	$1 = *($2 + [160])
	$8 = CALL $180([17954])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$289 }
	if ( CALL $159(($2 + [160]), [0], [-1], [17954], $8) ){ goto $label$289 }
	$4 = *($0)
	$3 = (int_64)6
	
.LOOP $label$290:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$290 }
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $4
	$3 = (int_64)0
	$4 = (int_64)59
	$1 = [17827]
	$6 = (int_64)0
	
.LOOP $label$291:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$292 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$294 }
	$8 = ($8 + [-91])
	goto $label$293 
	
.LABEL $label$294
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$293
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$292
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$291 }
	$3 = (int_64)0
	$7 = (int_64)59
	$1 = [17866]
	$5 = (int_64)0
	
.LOOP $label$295:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$300 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$299 }
	$8 = ($8 + [-91])
	goto $label$298 
	
.LABEL $label$300
	$4 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$297 }
	goto $label$296 
	
.LABEL $label$299
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$298
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$297
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$296
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$4 | (int_64)$5)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$295 }
	CALL eosio_assert([1], [18457])
	$3 = (int_64)5592405
	$1 = [0]
	
.LOOP $label$303:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$302 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$304 }
	$3 = $4
	$8 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$303 }
	goto $label$301 
	
.LABEL $label$304
	$3 = $4
	
.LOOP $label$305:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$302 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $8 ){ goto $label$305 }
	$8 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$303 }
	goto $label$301 
	
.LABEL $label$302
	$8 = [0]
	
.LABEL $label$301
	CALL eosio_assert($8, [18506])
	CALL $72(($2 + [8]), ($2 + [144]), [21169])
	*(($2 + [48])) = (int_64)1431655688
	$1 = ($2 + [16])
	*(($2 + [64])) = *($1)
	*($1) = [0]
	*($2 + [40]) = (int_64)100000000
	*($2 + [24]) = *($0)
	*($2 + [32]) = *($2 + [296])
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	$1 = CALL $33(($2 + [88]), ($2 + [72]), $6, $5, ($2 + [24]))
	CALL $34(($2 + [304]), $1)
	$8 = *($2 + [304])
	CALL send_inline($8, (*($2 + [308]) - $8))
	$8 = *($2 + [304])
	if ( ($8 == 0) ){ goto $label$306 }
	*($2 + [308]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$306
	$8 = *($1 + [28])
	if ( ($8 == 0) ){ goto $label$307 }
	*(($1 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$307
	$8 = *($1 + [16])
	if ( ($8 == 0) ){ goto $label$308 }
	*(($1 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$308
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$309 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$309
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$289 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$289
	$1 = *($2 + [160])
	$8 = CALL $180([18180])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$310 }
	if ( CALL $159(($2 + [160]), [0], [-1], [18180], $8) ){ goto $label$310 }
	$4 = *($0)
	$3 = (int_64)6
	
.LOOP $label$311:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$311 }
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $4
	$3 = (int_64)0
	$4 = (int_64)59
	$1 = [17827]
	$6 = (int_64)0
	
.LOOP $label$312:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$313 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$315 }
	$8 = ($8 + [-91])
	goto $label$314 
	
.LABEL $label$315
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$314
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$313
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$312 }
	$3 = (int_64)0
	$7 = (int_64)59
	$1 = [17866]
	$5 = (int_64)0
	
.LOOP $label$316:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$321 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$320 }
	$8 = ($8 + [-91])
	goto $label$319 
	
.LABEL $label$321
	$4 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$318 }
	goto $label$317 
	
.LABEL $label$320
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$319
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$318
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$317
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$4 | (int_64)$5)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$316 }
	CALL eosio_assert([1], [18457])
	$3 = (int_64)1096042838
	$1 = [0]
	
.LOOP $label$324:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$323 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$325 }
	$3 = $4
	$8 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$324 }
	goto $label$322 
	
.LABEL $label$325
	$3 = $4
	
.LOOP $label$326:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$323 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $8 ){ goto $label$326 }
	$8 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$324 }
	goto $label$322 
	
.LABEL $label$323
	$8 = [0]
	
.LABEL $label$322
	CALL eosio_assert($8, [18506])
	CALL $72(($2 + [8]), ($2 + [144]), [21169])
	*(($2 + [48])) = (int_64)280586966536
	$1 = ($2 + [16])
	*(($2 + [64])) = *($1)
	*($1) = [0]
	*($2 + [40]) = (int_64)100000000
	*($2 + [24]) = *($0)
	*($2 + [32]) = *($2 + [296])
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	$1 = CALL $33(($2 + [88]), ($2 + [72]), $6, $5, ($2 + [24]))
	CALL $34(($2 + [304]), $1)
	$8 = *($2 + [304])
	CALL send_inline($8, (*($2 + [308]) - $8))
	$8 = *($2 + [304])
	if ( ($8 == 0) ){ goto $label$327 }
	*($2 + [308]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$327
	$8 = *($1 + [28])
	if ( ($8 == 0) ){ goto $label$328 }
	*(($1 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$328
	$8 = *($1 + [16])
	if ( ($8 == 0) ){ goto $label$329 }
	*(($1 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$329
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$330 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$330
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$310 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$310
	$1 = *($2 + [160])
	$8 = CALL $180([17958])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$331 }
	if ( CALL $159(($2 + [160]), [0], [-1], [17958], $8) ){ goto $label$331 }
	$4 = *($0)
	$3 = (int_64)6
	
.LOOP $label$332:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$332 }
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $4
	$3 = (int_64)0
	$4 = (int_64)59
	$1 = [17827]
	$6 = (int_64)0
	
.LOOP $label$333:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$334 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$336 }
	$8 = ($8 + [-91])
	goto $label$335 
	
.LABEL $label$336
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$335
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$334
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$333 }
	$3 = (int_64)0
	$7 = (int_64)59
	$1 = [17866]
	$5 = (int_64)0
	
.LOOP $label$337:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$342 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$341 }
	$8 = ($8 + [-91])
	goto $label$340 
	
.LABEL $label$342
	$4 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$339 }
	goto $label$338 
	
.LABEL $label$341
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$340
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$339
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$338
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$4 | (int_64)$5)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$337 }
	CALL eosio_assert([1], [18457])
	$3 = (int_64)1413763925
	$1 = [0]
	
.LOOP $label$345:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$344 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$346 }
	$3 = $4
	$8 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$345 }
	goto $label$343 
	
.LABEL $label$346
	$3 = $4
	
.LOOP $label$347:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$344 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $8 ){ goto $label$347 }
	$8 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$345 }
	goto $label$343 
	
.LABEL $label$344
	$8 = [0]
	
.LABEL $label$343
	CALL eosio_assert($8, [18506])
	CALL $72(($2 + [8]), ($2 + [144]), [21169])
	*(($2 + [48])) = (int_64)361923564804
	$1 = ($2 + [16])
	*(($2 + [64])) = *($1)
	*($1) = [0]
	*($2 + [40]) = (int_64)20
	*($2 + [24]) = *($0)
	*($2 + [32]) = *($2 + [296])
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	$1 = CALL $33(($2 + [88]), ($2 + [72]), $6, $5, ($2 + [24]))
	CALL $34(($2 + [304]), $1)
	$8 = *($2 + [304])
	CALL send_inline($8, (*($2 + [308]) - $8))
	$8 = *($2 + [304])
	if ( ($8 == 0) ){ goto $label$348 }
	*($2 + [308]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$348
	$8 = *($1 + [28])
	if ( ($8 == 0) ){ goto $label$349 }
	*(($1 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$349
	$8 = *($1 + [16])
	if ( ($8 == 0) ){ goto $label$350 }
	*(($1 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$350
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$351 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$351
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$331 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$331
	$1 = *($2 + [160])
	$8 = CALL $180([18285])
	if ( ((int_32)$8 != (int_32)( *($2 + [164]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$352 }
	if ( CALL $159(($2 + [160]), [0], [-1], [18285], $8) ){ goto $label$352 }
	$4 = *($0)
	$3 = (int_64)6
	
.LOOP $label$353:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$353 }
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $4
	$3 = (int_64)0
	$4 = (int_64)59
	$1 = [17827]
	$6 = (int_64)0
	
.LOOP $label$354:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$355 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$357 }
	$8 = ($8 + [-91])
	goto $label$356 
	
.LABEL $label$357
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$356
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$355
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$354 }
	$3 = (int_64)0
	$7 = (int_64)59
	$1 = [17866]
	$5 = (int_64)0
	
.LOOP $label$358:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$363 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$362 }
	$8 = ($8 + [-91])
	goto $label$361 
	
.LABEL $label$363
	$4 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$360 }
	goto $label$359 
	
.LABEL $label$362
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$361
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$360
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$359
	$1 = ($1 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$4 | (int_64)$5)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$358 }
	CALL eosio_assert([1], [18457])
	$3 = (int_64)4671298
	$1 = [0]
	
.LOOP $label$366:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$365 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$367 }
	$3 = $4
	$8 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$366 }
	goto $label$364 
	
.LABEL $label$367
	$3 = $4
	
.LOOP $label$368:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$365 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $8 ){ goto $label$368 }
	$8 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$366 }
	goto $label$364 
	
.LABEL $label$365
	$8 = [0]
	
.LABEL $label$364
	CALL eosio_assert($8, [18506])
	CALL $72(($2 + [8]), ($2 + [144]), [21169])
	*(($2 + [48])) = (int_64)1195852296
	$1 = ($2 + [16])
	*(($2 + [64])) = *($1)
	*($1) = [0]
	*($2 + [40]) = (int_64)3000000
	*($2 + [24]) = *($0)
	*($2 + [32]) = *($2 + [296])
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	$1 = CALL $33(($2 + [88]), ($2 + [72]), $6, $5, ($2 + [24]))
	CALL $34(($2 + [304]), $1)
	$8 = *($2 + [304])
	CALL send_inline($8, (*($2 + [308]) - $8))
	$8 = *($2 + [304])
	if ( ($8 == 0) ){ goto $label$369 }
	*($2 + [308]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$369
	$8 = *($1 + [28])
	if ( ($8 == 0) ){ goto $label$370 }
	*(($1 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$370
	$8 = *($1 + [16])
	if ( ($8 == 0) ){ goto $label$371 }
	*(($1 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$371
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$372 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$372
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$352 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$352
	if ( (*($2 + [144]) & [1]) ){ goto $label$375 }
	if ( (*($2 + [160]) & [1]) ){ goto $label$374 }
	goto $label$373 
	
.LABEL $label$375
	CALL _ZdlPv(*(($2 + [152])))
	if ( ((*($2 + [160]) & [1]) == 0) ){ goto $label$373 }
	
.LABEL $label$374
	CALL _ZdlPv(*(($2 + [168])))
	$global$0 = ($2 + [320])
	return 
	
.LABEL $label$373
	$global$0 = ($2 + [320])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$2 = ($global$0 - [240])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $183($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [56])) = (int_64)0
	*(($3 + [48])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [72]) = (int_64)1398362884
	CALL eosio_assert([1], [18457])
	$8 = ($3 + [64])
	$9 = ($3 + [32])
	$10 = (int_64)5462355
	
.LOOP $label$5:
	$11 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$12 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$10 = $12
	$11 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$10 = $12
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$13 = ($1 + [1])
	$1 = $13
	if ( $2 ){ goto $label$7 }
	$11 = [1]
	$1 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($11, [18506])
	*($3 + [196]) = $6
	*($3 + [192]) = $6
	*($3 + [200]) = ($6 + $7)
	*($3 + [128]) = ($3 + [192])
	*($3 + [160]) = $3
	CALL $57(($3 + [160]), ($3 + [128]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $187($6)
	
.LABEL $label$8
	*(($1 = (($3 + [128]) + [24]))) = *(($3 + [24]))
	*(($2 = (($3 + [128]) + [16]))) = *(($3 + [16]))
	*(($13 = (($3 + [96]) + [16]))) = *(($9 + [16]))
	*(($11 = (($3 + [96]) + [24]))) = *(($9 + [24]))
	*(($6 = (($3 + [80]) + [8]))) = *(($8 + [8]))
	*($3 + [136]) = *($3 + [8])
	*($3 + [128]) = *($3)
	*($3 + [96]) = *($9)
	*($3 + [104]) = *(($9 + [8]))
	*($3 + [80]) = *($8)
	*((($3 + [224]) + [8])) = *($6)
	*((($3 + [192]) + [16])) = *($13)
	*((($3 + [192]) + [24])) = *($11)
	*((($3 + [160]) + [16])) = *($2)
	*((($3 + [160]) + [24])) = *($1)
	*($3 + [224]) = *($3 + [80])
	*($3 + [192]) = *($3 + [96])
	*($3 + [200]) = *($3 + [104])
	*($3 + [160]) = *($3 + [128])
	*($3 + [168]) = *($3 + [136])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	CALL void $1((int_32 ($3 + [160])), (int_32 ($3 + [192])), (int_32 ($3 + [224])), (int_32 $5))
	$global$0 = ($3 + [240])
	return [1]
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_64 $25
	int_32 $26
	int_64 $27
	$4 = ($global$0 - [560])
	$global$0 = $4
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17875]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$10 = ($10 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($8)
	$7 = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	
.LOOP $label$5:
	$10 = *(($2 + $7))
	CALL $155($4, *((uint_32($10 >> [4]) + [8223])))
	CALL $155($4, *((($10 & [15]) + [8223])))
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)[32]) ){ goto $label$5 }
	$5 = CALL $4($4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$6
	*($4 + [536]) = $5
	CALL $58($4, ($0 + [8]), $5)
	CALL eosio_assert(((int_32)*($4 + [4]) != (int_32)[0]), [18323])
	$7 = *($4 + [4])
	*($4 + [368]) = *($7)
	*($4 + [376]) = *(($7 + [8]))
	$11 = CALL $147((($4 + [368]) + [16]), ($7 + [16]))
	$12 = CALL $147((($4 + [368]) + [28]), ($7 + [28]))
	*((($4 + [368]) + [56])) = *(($7 + [56]))
	*((($4 + [368]) + [48])) = *(($7 + [48]))
	*($4 + [408]) = *($7 + [40])
	$13 = CALL $147((($4 + [368]) + [60]), ($7 + [60]))
	$14 = CALL memcpy((($4 + [368]) + [80]), ($7 + [80]), [72])
	CALL $59($0, $1, $14)
	*((($4 + [352]) + [8])) = [0]
	*($4 + [352]) = (int_64)0
	$7 = CALL $180([17888])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$27 }
	*($4 + [352]) = ($7 << [1])
	$10 = (($4 + [352]) | [1])
	if ( $7 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$2 = (($7 + [16]) & [-16])
	$10 = CALL _Znwj($2)
	*($4 + [352]) = ($2 | [1])
	*($4 + [360]) = $10
	*($4 + [356]) = $7
	
.LABEL $label$26
	CALL memcpy($10, [17888], $7)
	
.LABEL $label$25
	$15 = [0]
	*(($10 + $7)) = [0]
	*($4 + [280]) = *($4 + [376])
	CALL $39($4, ($4 + [280]))
	$10 = ($7 & [1])
	$7 = *($11)
	$2 = ($7 & [1])
	$7 = *($4)
	$16 = uint_32($7 >> [1])
	$17 = ( *($4 + [4]) ? $16 : $2 )
	if ( ((int_32)$17 != (int_32)( *(($4 + [388])) ? uint_32($7 >> [1]) : $10 )) ){ goto $label$31 }
	$7 = ($4 | [1])
	$10 = ( *(($4 + [392])) ? ($11 + [1]) : $10 )
	if ( $2 ){ goto $label$32 }
	if ( ($17 == 0) ){ goto $label$29 }
	$2 = ([0] - $16)
	
.LOOP $label$33:
	if ( ((int_32)*($7) != (int_32)*($10)) ){ goto $label$28 }
	$10 = ($10 + [1])
	$7 = ($7 + [1])
	$2 = ($2 + [1])
	if ( $2 ){ goto $label$33 }
	goto $label$29 
	
.LABEL $label$32
	if ( ($17 == 0) ){ goto $label$30 }
	$15 = (CALL $179(( *($4 + [8]) ? $7 : $2 ), $10, $17) == 0)
	$2 = (*($4) & [1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$34 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$34
	if ( $15 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$29
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	$7 = CALL $180([17898])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$37 }
	*($4) = ($7 << [1])
	$10 = ($4 | [1])
	if ( $7 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	$2 = (($7 + [16]) & [-16])
	$10 = CALL _Znwj($2)
	*($4) = ($2 | [1])
	*($4 + [8]) = $10
	*($4 + [4]) = $7
	
.LABEL $label$36
	CALL memcpy($10, [17898], $7)
	
.LABEL $label$35
	*(($10 + $7)) = [0]
	if ( (*($4 + [352]) & [1]) ){ goto $label$39 }
	*($4 + [352]) = [0]
	goto $label$38 
	
.LABEL $label$39
	*(*($4 + [360])) = [0]
	*($4 + [356]) = [0]
	
.LABEL $label$38
	CALL $151(($4 + [352]), [0])
	*((($4 + [352]) + [8])) = *(($4 + [8]))
	*($4 + [352]) = *($4)
	
.LABEL $label$28
	$16 = ($4 + [408])
	$15 = ($4 + [480])
	$17 = CALL $60($0, $1, $15, ($4 + [352]), ($4 + [368]))
	$18 = *(($4 + [416]))
	CALL eosio_assert([1], [18457])
	$5 = (uint_64)$18 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$42:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$41 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$43 }
	$5 = $6
	$10 = [1]
	$2 = $7
	$7 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$43
	$5 = $6
	
.LOOP $label$44:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$41 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$10 = ((int_32)$7 < (int_32)[6])
	$2 = ($7 + [1])
	$7 = $2
	if ( $10 ){ goto $label$44 }
	$10 = [1]
	$7 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$41
	$10 = [0]
	
.LABEL $label$40
	CALL eosio_assert($10, [18506])
	$9 = *(($4 + [416]))
	CALL eosio_assert([1], [18457])
	$5 = (uint_64)$9 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$47:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$46 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$48 }
	$5 = $6
	$10 = [1]
	$2 = $7
	$7 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$47 }
	goto $label$45 
	
.LABEL $label$48
	$5 = $6
	
.LOOP $label$49:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$46 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$10 = ((int_32)$7 < (int_32)[6])
	$2 = ($7 + [1])
	$7 = $2
	if ( $10 ){ goto $label$49 }
	$10 = [1]
	$7 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$47 }
	goto $label$45 
	
.LABEL $label$46
	$10 = [0]
	
.LABEL $label$45
	CALL eosio_assert($10, [18506])
	*((($4 + [336]) + [8])) = *(($3 + [8]))
	*($4 + [336]) = *($3)
	$19 = *(($4 + [416]))
	if ( ((int_64)$19 == (int_64)1397703940) ){ goto $label$51 }
	if ( ((int_64)$19 == (int_64)1415074820) ){ goto $label$51 }
	if ( ((int_64)$19 == (int_64)76151268725764) ){ goto $label$51 }
	if ( ((int_64)$19 == (int_64)1414550532) ){ goto $label$51 }
	if ( ((int_64)$19 == (int_64)4994016260158475524) ){ goto $label$51 }
	if ( ((int_64)$19 == (int_64)1480871428) ){ goto $label$51 }
	if ( ((int_64)$19 == (int_64)379271597060) ){ goto $label$51 }
	if ( ((int_64)$19 == (int_64)1129595400) ){ goto $label$51 }
	if ( ((int_64)$19 == (int_64)23449582319521796) ){ goto $label$51 }
	if ( ((int_64)$19 == (int_64)1213482248) ){ goto $label$51 }
	if ( ((int_64)$19 == (int_64)310651211528) ){ goto $label$51 }
	if ( ((int_64)$19 == (int_64)1230262276) ){ goto $label$51 }
	if ( ((int_64)$19 == (int_64)1431655688) ){ goto $label$51 }
	$20 = (int_64)0
	if ( ((int_64)$19 != (int_64)361923564804) ){ goto $label$50 }
	
.LABEL $label$51
	$6 = *(($4 + [408]))
	$9 = *($4 + [424])
	CALL eosio_assert([1], [18457])
	$5 = (uint_64)$19 >> (uint_64)(int_64)8)
	$20 = ((uint_64)((int_64)((int_64)$6 * (int_64))((int_64)150 - ((int_64)$9 << (int_64)1))) * (int_64)7) / (uint_64)(int_64)1000000)
	$7 = [0]
	
.LOOP $label$54:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$53 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$55 }
	$5 = $6
	$10 = [1]
	$2 = $7
	$7 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$55
	$5 = $6
	
.LOOP $label$56:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$53 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$10 = ((int_32)$7 < (int_32)[6])
	$2 = ($7 + [1])
	$7 = $2
	if ( $10 ){ goto $label$56 }
	$10 = [1]
	$7 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$53
	$10 = [0]
	
.LABEL $label$52
	CALL eosio_assert($10, [18506])
	$5 = *(($4 + [416]))
	if ( ((int_64)$5 != (int_64)1397703940) ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$50
	$5 = $19
	$19 = $9
	if ( ((int_64)$5 == (int_64)1397703940) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	CALL $146(($4 + [352]))
	
.LABEL $label$23
	if ( ((int_64)*(($4 + [408])) > (int_64)9999) ){ goto $label$21 }
	
.LABEL $label$22
	if ( ((int_64)$5 != (int_64)1415074820) ){ goto $label$57 }
	if ( ((int_64)*(($4 + [408])) > (int_64)9999999) ){ goto $label$21 }
	
.LABEL $label$57
	if ( ((int_64)$5 != (int_64)76151268725764) ){ goto $label$58 }
	if ( ((int_64)*(($4 + [408])) > (int_64)999999) ){ goto $label$21 }
	
.LABEL $label$58
	if ( ((int_64)$5 != (int_64)1414550532) ){ goto $label$59 }
	if ( ((int_64)*(($4 + [408])) > (int_64)1999999) ){ goto $label$21 }
	
.LABEL $label$59
	if ( ((int_64)$5 != (int_64)4994016260158475524) ){ goto $label$60 }
	if ( ((int_64)*(($4 + [408])) > (int_64)1999999) ){ goto $label$21 }
	
.LABEL $label$60
	if ( ((int_64)$5 != (int_64)1480871428) ){ goto $label$61 }
	if ( ((int_64)*(($4 + [408])) > (int_64)4999999) ){ goto $label$21 }
	
.LABEL $label$61
	if ( ((int_64)$5 != (int_64)379271597060) ){ goto $label$62 }
	if ( ((int_64)*(($4 + [408])) > (int_64)2999999) ){ goto $label$21 }
	
.LABEL $label$62
	if ( ((int_64)$5 != (int_64)1129595400) ){ goto $label$63 }
	if ( ((int_64)*(($4 + [408])) > (int_64)99999) ){ goto $label$21 }
	
.LABEL $label$63
	if ( ((int_64)$5 != (int_64)23449582319521796) ){ goto $label$64 }
	if ( ((int_64)*(($4 + [408])) > (int_64)9999999) ){ goto $label$21 }
	
.LABEL $label$64
	if ( ((int_64)$5 != (int_64)1213482248) ){ goto $label$65 }
	if ( ((int_64)*(($4 + [408])) > (int_64)999999) ){ goto $label$21 }
	
.LABEL $label$65
	if ( ((int_64)$5 != (int_64)310651211528) ){ goto $label$66 }
	if ( ((int_64)*(($4 + [408])) > (int_64)9999999999) ){ goto $label$21 }
	
.LABEL $label$66
	if ( ((int_64)$5 != (int_64)1230262276) ){ goto $label$67 }
	if ( ((int_64)*(($4 + [408])) > (int_64)1999999) ){ goto $label$21 }
	
.LABEL $label$67
	if ( ((int_64)$5 != (int_64)1431655688) ){ goto $label$68 }
	if ( ((int_64)*(($4 + [408])) > (int_64)9999999999) ){ goto $label$21 }
	
.LABEL $label$68
	$21 = (int_64)0
	if ( ((int_64)$5 != (int_64)361923564804) ){ goto $label$20 }
	if ( ((int_64)*(($4 + [408])) < (int_64)20000) ){ goto $label$20 }
	
.LABEL $label$21
	$21 = CALL $61($0, $1, $15, ($4 + [352]))
	
.LABEL $label$20
	$3 = [0]
	if ( ((uint_32)$17 >= (uint_32)*($4 + [425])) ){ goto $label$72 }
	*(($4 + [328])) = [0]
	*($4 + [320]) = (int_64)0
	$7 = CALL $180([17963])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$75 }
	*($4 + [320]) = ($7 << [1])
	$10 = (($4 + [320]) | [1])
	if ( $7 ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$75
	$2 = (($7 + [16]) & [-16])
	$10 = CALL _Znwj($2)
	*($4 + [320]) = ($2 | [1])
	*($4 + [328]) = $10
	*($4 + [324]) = $7
	
.LABEL $label$74
	CALL memcpy($10, [17963], $7)
	
.LABEL $label$73
	*(($10 + $7)) = [0]
	$3 = [1]
	$7 = ($7 & [1])
	$7 = *($4 + [320])
	$23 = ($7 & [1])
	$7 = *($13)
	$22 = uint_32($7 >> [1])
	$24 = ( *(($4 + [432])) ? $22 : $23 )
	if ( ((int_32)$24 != (int_32)( *($4 + [324]) ? uint_32($7 >> [1]) : $7 )) ){ goto $label$72 }
	$2 = [1]
	$7 = ( *($4 + [328]) ? (($4 + [320]) | [1]) : $7 )
	$10 = ($13 + [1])
	if ( $23 ){ goto $label$77 }
	if ( ($24 == 0) ){ goto $label$71 }
	$3 = ([0] - $22)
	
.LOOP $label$78:
	if ( ((int_32)*($10) != (int_32)*($7)) ){ goto $label$76 }
	$2 = [1]
	$7 = ($7 + [1])
	$10 = ($10 + [1])
	$3 = ($3 + [1])
	if ( $3 ){ goto $label$78 }
	goto $label$71 
	
.LABEL $label$77
	if ( ($24 == 0) ){ goto $label$71 }
	$3 = [1]
	$2 = [1]
	if ( CALL $179(( *(($4 + [436])) ? $10 : $23 ), $7, $24) ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$76
	$3 = [1]
	
.LABEL $label$72
	if ( ((uint_32)$17 <= (uint_32)*(($4 + [425]))) ){ goto $label$82 }
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	$7 = CALL $180([17969])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$81 }
	*($4) = ($7 << [1])
	$10 = ($4 | [1])
	if ( $7 ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$82
	$25 = (int_64)0
	$2 = [0]
	if ( $3 ){ goto $label$71 }
	goto $label$69 
	
.LABEL $label$81
	$2 = (($7 + [16]) & [-16])
	$10 = CALL _Znwj($2)
	*($4) = ($2 | [1])
	*($4 + [8]) = $10
	*($4 + [4]) = $7
	
.LABEL $label$80
	CALL memcpy($10, [17969], $7)
	
.LABEL $label$79
	$2 = [0]
	*(($10 + $7)) = [0]
	$24 = ($7 & [1])
	$7 = *($4)
	$23 = ($7 & [1])
	$7 = *($13)
	$26 = uint_32($7 >> [1])
	$22 = ( *(($4 + [432])) ? $26 : $23 )
	if ( ((int_32)$22 != (int_32)( *($4 + [4]) ? uint_32($7 >> [1]) : $24 )) ){ goto $label$85 }
	$7 = ( *($4 + [8]) ? ($4 | [1]) : $24 )
	$10 = ($13 + [1])
	if ( $23 ){ goto $label$87 }
	if ( ($22 == 0) ){ goto $label$86 }
	$2 = [0]
	$23 = ([0] - $26)
	
.LOOP $label$88:
	if ( ((int_32)*($10) != (int_32)*($7)) ){ goto $label$85 }
	$7 = ($7 + [1])
	$10 = ($10 + [1])
	$23 = ($23 + [1])
	if ( $23 ){ goto $label$88 }
	goto $label$86 
	
.LABEL $label$87
	if ( ($22 == 0) ){ goto $label$86 }
	$2 = (CALL $179(( *(($4 + [436])) ? $10 : $23 ), $7, $22) == 0)
	if ( (*($4) & [1]) ){ goto $label$84 }
	goto $label$83 
	
.LABEL $label$86
	$2 = [1]
	
.LABEL $label$85
	if ( ($24 == 0) ){ goto $label$83 }
	
.LABEL $label$84
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$83
	if ( ($3 == 0) ){ goto $label$70 }
	
.LABEL $label$71
	if ( ((*($4 + [320]) & [1]) == 0) ){ goto $label$70 }
	CALL _ZdlPv(*($4 + [328]))
	
.LABEL $label$70
	$25 = (int_64)0
	if ( ($2 == 0) ){ goto $label$69 }
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	$7 = CALL $180([17963])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$91 }
	*($4) = ($7 << [1])
	$10 = ($4 | [1])
	if ( $7 ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$91
	$2 = (($7 + [16]) & [-16])
	$10 = CALL _Znwj($2)
	*($4) = ($2 | [1])
	*($4 + [8]) = $10
	*($4 + [4]) = $7
	
.LABEL $label$90
	CALL memcpy($10, [17963], $7)
	
.LABEL $label$89
	$3 = [0]
	*(($10 + $7)) = [0]
	$23 = ($7 & [1])
	$7 = *($4)
	$2 = ($7 & [1])
	$7 = *($13)
	$22 = uint_32($7 >> [1])
	$24 = ( *(($4 + [432])) ? $22 : $2 )
	if ( ((int_32)$24 != (int_32)( *($4 + [4]) ? uint_32($7 >> [1]) : $23 )) ){ goto $label$94 }
	$7 = ( *($4 + [8]) ? ($4 | [1]) : $23 )
	$10 = ($13 + [1])
	if ( $2 ){ goto $label$96 }
	if ( ($24 == 0) ){ goto $label$95 }
	$3 = [0]
	$2 = ([0] - $22)
	
.LOOP $label$97:
	if ( ((int_32)*($10) != (int_32)*($7)) ){ goto $label$94 }
	$7 = ($7 + [1])
	$10 = ($10 + [1])
	$2 = ($2 + [1])
	if ( $2 ){ goto $label$97 }
	goto $label$95 
	
.LABEL $label$96
	if ( ($24 == 0) ){ goto $label$95 }
	$3 = (CALL $179(( *(($4 + [436])) ? $10 : $2 ), $7, $24) == 0)
	if ( (*($4) & [1]) ){ goto $label$93 }
	goto $label$92 
	
.LABEL $label$95
	$3 = [1]
	
.LABEL $label$94
	if ( ($23 == 0) ){ goto $label$92 }
	
.LABEL $label$93
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$92
	$25 = (int_64)0
	if ( ($3 == 0) ){ goto $label$98 }
	$18 = *(($4 + [416]))
	$5 = *(($4 + [408]))
	$7 = *(($4 + [425]))
	$10 = *($4 + [424])
	CALL eosio_assert([1], [18457])
	$25 = ((uint_64)((int_64)$5 * (int_64)(CASTING uint_64)(uint_32 ((uint_32)(((int_32)$10 * (int_32)[200]) + [985000]) / (uint_32)(($7 + [-1]) & [255])))) / (uint_64)(int_64)10000)
	$5 = (uint_64)$18 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$101:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$100 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$102 }
	$5 = $6
	$10 = [1]
	$2 = $7
	$7 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$101 }
	goto $label$99 
	
.LABEL $label$102
	$5 = $6
	
.LOOP $label$103:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$100 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$10 = ((int_32)$7 < (int_32)[6])
	$2 = ($7 + [1])
	$7 = $2
	if ( $10 ){ goto $label$103 }
	$10 = [1]
	$7 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$101 }
	goto $label$99 
	
.LABEL $label$100
	$10 = [0]
	
.LABEL $label$99
	CALL eosio_assert($10, [18506])
	
.LABEL $label$98
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	$7 = CALL $180([17969])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$106 }
	*($4) = ($7 << [1])
	$10 = ($4 | [1])
	if ( $7 ){ goto $label$105 }
	goto $label$104 
	
.LABEL $label$106
	$2 = (($7 + [16]) & [-16])
	$10 = CALL _Znwj($2)
	*($4) = ($2 | [1])
	*($4 + [8]) = $10
	*($4 + [4]) = $7
	
.LABEL $label$105
	CALL memcpy($10, [17969], $7)
	
.LABEL $label$104
	$3 = [0]
	*(($10 + $7)) = [0]
	$23 = ($7 & [1])
	$7 = *($4)
	$2 = ($7 & [1])
	$7 = *($13)
	$22 = uint_32($7 >> [1])
	$24 = ( *(($4 + [432])) ? $22 : $2 )
	if ( ((int_32)$24 != (int_32)( *($4 + [4]) ? uint_32($7 >> [1]) : $23 )) ){ goto $label$109 }
	$7 = ( *($4 + [8]) ? ($4 | [1]) : $23 )
	$10 = ($13 + [1])
	if ( $2 ){ goto $label$111 }
	if ( ($24 == 0) ){ goto $label$110 }
	$3 = [0]
	$2 = ([0] - $22)
	
.LOOP $label$112:
	if ( ((int_32)*($10) != (int_32)*($7)) ){ goto $label$109 }
	$7 = ($7 + [1])
	$10 = ($10 + [1])
	$2 = ($2 + [1])
	if ( $2 ){ goto $label$112 }
	goto $label$110 
	
.LABEL $label$111
	if ( ($24 == 0) ){ goto $label$110 }
	$3 = (CALL $179(( *(($4 + [436])) ? $10 : $2 ), $7, $24) == 0)
	if ( (*($4) & [1]) ){ goto $label$108 }
	goto $label$107 
	
.LABEL $label$110
	$3 = [1]
	
.LABEL $label$109
	if ( ($23 == 0) ){ goto $label$107 }
	
.LABEL $label$108
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$107
	if ( ($3 == 0) ){ goto $label$113 }
	$18 = *(($4 + [416]))
	$5 = *(($4 + [408]))
	$7 = *(($4 + [425]))
	$10 = *($4 + [424])
	CALL eosio_assert([1], [18457])
	$25 = ((uint_64)((int_64)$5 * (int_64)(CASTING uint_64)(uint_32 ((uint_32)(((int_32)$10 * (int_32)[200]) + [985000]) / (uint_32)(([100] - $7) & [255])))) / (uint_64)(int_64)10000)
	$5 = (uint_64)$18 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$116:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$115 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$117 }
	$5 = $6
	$10 = [1]
	$2 = $7
	$7 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$116 }
	goto $label$114 
	
.LABEL $label$117
	$5 = $6
	
.LOOP $label$118:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$115 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$10 = ((int_32)$7 < (int_32)[6])
	$2 = ($7 + [1])
	$7 = $2
	if ( $10 ){ goto $label$118 }
	$10 = [1]
	$7 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$116 }
	goto $label$114 
	
.LABEL $label$115
	$10 = [0]
	
.LABEL $label$114
	CALL eosio_assert($10, [18506])
	
.LABEL $label$113
	if ( ((int_64)$25 <= (int_64)0) ){ goto $label$69 }
	if ( ((int_64)$18 != (int_64)1397703940) ){ goto $label$120 }
	$5 = (int_64)0
	$9 = (int_64)59
	$7 = [17706]
	$27 = (int_64)0
	
.LOOP $label$121:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$126 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$125 }
	$10 = ($10 + [-91])
	goto $label$124 
	
.LABEL $label$126
	$6 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$123 }
	goto $label$122 
	
.LABEL $label$125
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$124
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$123
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$122
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)4294967291)
	$27 = ((int_64)$6 | (int_64)$27)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$121 }
	goto $label$119 
	
.LABEL $label$120
	if ( ((int_64)$18 != (int_64)1415074820) ){ goto $label$127 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17718]
	$27 = (int_64)0
	
.LOOP $label$128:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$129 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$131 }
	$10 = ($10 + [-91])
	goto $label$130 
	
.LABEL $label$131
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$130
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$129
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$128 }
	goto $label$119 
	
.LABEL $label$127
	if ( ((int_64)$18 != (int_64)76151268725764) ){ goto $label$132 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17731]
	$27 = (int_64)0
	
.LOOP $label$133:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$134 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$136 }
	$10 = ($10 + [-91])
	goto $label$135 
	
.LABEL $label$136
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$135
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$134
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$133 }
	goto $label$119 
	
.LABEL $label$132
	if ( ((int_64)$18 != (int_64)1414550532) ){ goto $label$137 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17744]
	$27 = (int_64)0
	
.LOOP $label$138:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$139 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$141 }
	$10 = ($10 + [-91])
	goto $label$140 
	
.LABEL $label$141
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$140
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$139
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$138 }
	goto $label$119 
	
.LABEL $label$137
	if ( ((int_64)$18 != (int_64)4994016260158475524) ){ goto $label$142 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17773]
	$27 = (int_64)0
	
.LOOP $label$143:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$144 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$146 }
	$10 = ($10 + [-91])
	goto $label$145 
	
.LABEL $label$146
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$145
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$144
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$143 }
	goto $label$119 
	
.LABEL $label$142
	if ( ((int_64)$18 != (int_64)1480871428) ){ goto $label$147 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17801]
	$27 = (int_64)0
	
.LOOP $label$148:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$149 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$151 }
	$10 = ($10 + [-91])
	goto $label$150 
	
.LABEL $label$151
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$150
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$149
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$148 }
	goto $label$119 
	
.LABEL $label$147
	if ( ((int_64)$18 != (int_64)379271597060) ){ goto $label$152 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17814]
	$27 = (int_64)0
	
.LOOP $label$153:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$154 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$156 }
	$10 = ($10 + [-91])
	goto $label$155 
	
.LABEL $label$156
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$155
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$154
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$153 }
	goto $label$119 
	
.LABEL $label$152
	if ( ((int_64)$18 != (int_64)1129595400) ){ goto $label$157 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17827]
	$27 = (int_64)0
	
.LOOP $label$158:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$159 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$161 }
	$10 = ($10 + [-91])
	goto $label$160 
	
.LABEL $label$161
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$160
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$159
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$158 }
	goto $label$119 
	
.LABEL $label$157
	if ( ((int_64)$18 != (int_64)23449582319521796) ){ goto $label$162 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17840]
	$27 = (int_64)0
	
.LOOP $label$163:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$164 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$166 }
	$10 = ($10 + [-91])
	goto $label$165 
	
.LABEL $label$166
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$165
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$164
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$163 }
	goto $label$119 
	
.LABEL $label$162
	if ( ((int_64)$18 != (int_64)1213482248) ){ goto $label$167 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17827]
	$27 = (int_64)0
	
.LOOP $label$168:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$169 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$171 }
	$10 = ($10 + [-91])
	goto $label$170 
	
.LABEL $label$171
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$170
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$169
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$168 }
	goto $label$119 
	
.LABEL $label$167
	if ( ((int_64)$18 != (int_64)310651211528) ){ goto $label$172 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17827]
	$27 = (int_64)0
	
.LOOP $label$173:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$174 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$176 }
	$10 = ($10 + [-91])
	goto $label$175 
	
.LABEL $label$176
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$175
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$174
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$173 }
	goto $label$119 
	
.LABEL $label$172
	if ( ((int_64)$18 != (int_64)1230262276) ){ goto $label$177 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17853]
	$27 = (int_64)0
	
.LOOP $label$178:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$179 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$181 }
	$10 = ($10 + [-91])
	goto $label$180 
	
.LABEL $label$181
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$180
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$179
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$178 }
	goto $label$119 
	
.LABEL $label$177
	if ( ((int_64)$18 != (int_64)1431655688) ){ goto $label$182 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17827]
	$27 = (int_64)0
	
.LOOP $label$183:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$184 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$186 }
	$10 = ($10 + [-91])
	goto $label$185 
	
.LABEL $label$186
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$185
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$184
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$183 }
	goto $label$119 
	
.LABEL $label$182
	$27 = (int_64)0
	if ( ((int_64)$18 != (int_64)361923564804) ){ goto $label$119 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17827]
	$27 = (int_64)0
	
.LOOP $label$187:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$188 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$190 }
	$10 = ($10 + [-91])
	goto $label$189 
	
.LABEL $label$190
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$189
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$188
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$187 }
	
.LABEL $label$119
	$6 = *($0)
	$5 = (int_64)6
	
.LOOP $label$191:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$191 }
	*($4 + [272]) = (int_64)3617214756542218240
	*($4 + [264]) = $6
	$5 = (int_64)0
	$9 = (int_64)59
	$7 = [17866]
	$8 = (int_64)0
	
.LOOP $label$192:
	if ( ((uint_64)$5 > (uint_64)(int_64)7) ){ goto $label$197 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$196 }
	$10 = ($10 + [-91])
	goto $label$195 
	
.LABEL $label$197
	$6 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$194 }
	goto $label$193 
	
.LABEL $label$196
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$195
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$194
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$193
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$6 | (int_64)$8)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$192 }
	CALL $62(($4 + [248]), $0, ($4 + [368]))
	*(($4 + [24])) = $18
	$7 = ($4 + [256])
	*(($4 + [40])) = *($7)
	*($7) = [0]
	*($4 + [16]) = $25
	*($4) = *($0)
	*($4 + [8]) = *($4 + [376])
	*($4 + [32]) = *($4 + [248])
	*($4 + [248]) = (int_64)0
	$7 = CALL $33(($4 + [280]), ($4 + [264]), $27, $8, $4)
	CALL $34(($4 + [544]), $7)
	$10 = *($4 + [544])
	CALL send_inline($10, (*($4 + [548]) - $10))
	$10 = *($4 + [544])
	if ( ($10 == 0) ){ goto $label$198 }
	*($4 + [548]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$198
	$10 = *($7 + [28])
	if ( ($10 == 0) ){ goto $label$199 }
	*(($7 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$199
	$10 = *($7 + [16])
	if ( ($10 == 0) ){ goto $label$200 }
	*(($7 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$200
	if ( ((*(($4 + [32])) & [1]) == 0) ){ goto $label$201 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$201
	if ( ((*($4 + [248]) & [1]) == 0) ){ goto $label$69 }
	CALL _ZdlPv(*(($4 + [256])))
	
.LABEL $label$69
	if ( ((int_64)*($4 + [336]) < (int_64)1) ){ goto $label$202 }
	$5 = *($4 + [344])
	if ( ((int_64)$5 != (int_64)1397703940) ){ goto $label$204 }
	$5 = (int_64)0
	$9 = (int_64)59
	$7 = [17706]
	$27 = (int_64)0
	
.LOOP $label$205:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$210 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$209 }
	$10 = ($10 + [-91])
	goto $label$208 
	
.LABEL $label$210
	$6 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$207 }
	goto $label$206 
	
.LABEL $label$209
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$208
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$207
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$206
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)4294967291)
	$27 = ((int_64)$6 | (int_64)$27)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$205 }
	goto $label$203 
	
.LABEL $label$204
	if ( ((int_64)$5 != (int_64)1415074820) ){ goto $label$211 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17718]
	$27 = (int_64)0
	
.LOOP $label$212:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$213 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$215 }
	$10 = ($10 + [-91])
	goto $label$214 
	
.LABEL $label$215
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$214
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$213
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$212 }
	goto $label$203 
	
.LABEL $label$211
	if ( ((int_64)$5 != (int_64)76151268725764) ){ goto $label$216 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17731]
	$27 = (int_64)0
	
.LOOP $label$217:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$218 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$220 }
	$10 = ($10 + [-91])
	goto $label$219 
	
.LABEL $label$220
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$219
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$218
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$217 }
	goto $label$203 
	
.LABEL $label$216
	if ( ((int_64)$5 != (int_64)1414550532) ){ goto $label$221 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17744]
	$27 = (int_64)0
	
.LOOP $label$222:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$223 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$225 }
	$10 = ($10 + [-91])
	goto $label$224 
	
.LABEL $label$225
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$224
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$223
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$222 }
	goto $label$203 
	
.LABEL $label$221
	if ( ((int_64)$5 != (int_64)4994016260158475524) ){ goto $label$226 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17773]
	$27 = (int_64)0
	
.LOOP $label$227:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$228 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$230 }
	$10 = ($10 + [-91])
	goto $label$229 
	
.LABEL $label$230
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$229
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$228
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$227 }
	goto $label$203 
	
.LABEL $label$226
	if ( ((int_64)$5 != (int_64)1480871428) ){ goto $label$231 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17801]
	$27 = (int_64)0
	
.LOOP $label$232:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$233 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$235 }
	$10 = ($10 + [-91])
	goto $label$234 
	
.LABEL $label$235
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$234
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$233
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$232 }
	goto $label$203 
	
.LABEL $label$231
	if ( ((int_64)$5 != (int_64)379271597060) ){ goto $label$236 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17814]
	$27 = (int_64)0
	
.LOOP $label$237:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$238 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$240 }
	$10 = ($10 + [-91])
	goto $label$239 
	
.LABEL $label$240
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$239
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$238
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$237 }
	goto $label$203 
	
.LABEL $label$236
	if ( ((int_64)$5 != (int_64)1129595400) ){ goto $label$241 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17827]
	$27 = (int_64)0
	
.LOOP $label$242:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$243 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$245 }
	$10 = ($10 + [-91])
	goto $label$244 
	
.LABEL $label$245
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$244
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$243
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$242 }
	goto $label$203 
	
.LABEL $label$241
	if ( ((int_64)$5 != (int_64)23449582319521796) ){ goto $label$246 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17840]
	$27 = (int_64)0
	
.LOOP $label$247:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$248 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$250 }
	$10 = ($10 + [-91])
	goto $label$249 
	
.LABEL $label$250
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$249
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$248
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$247 }
	goto $label$203 
	
.LABEL $label$246
	if ( ((int_64)$5 != (int_64)1213482248) ){ goto $label$251 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17827]
	$27 = (int_64)0
	
.LOOP $label$252:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$253 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$255 }
	$10 = ($10 + [-91])
	goto $label$254 
	
.LABEL $label$255
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$254
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$253
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$252 }
	goto $label$203 
	
.LABEL $label$251
	if ( ((int_64)$5 != (int_64)1230262276) ){ goto $label$256 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17853]
	$27 = (int_64)0
	
.LOOP $label$257:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$258 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$260 }
	$10 = ($10 + [-91])
	goto $label$259 
	
.LABEL $label$260
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$259
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$258
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$257 }
	goto $label$203 
	
.LABEL $label$256
	if ( ((int_64)$5 != (int_64)1431655688) ){ goto $label$261 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17827]
	$27 = (int_64)0
	
.LOOP $label$262:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$263 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$265 }
	$10 = ($10 + [-91])
	goto $label$264 
	
.LABEL $label$265
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$264
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$263
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$262 }
	goto $label$203 
	
.LABEL $label$261
	$27 = (int_64)0
	if ( ((int_64)$5 != (int_64)361923564804) ){ goto $label$203 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17827]
	$27 = (int_64)0
	
.LOOP $label$266:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$267 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$269 }
	$10 = ($10 + [-91])
	goto $label$268 
	
.LABEL $label$269
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$268
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$267
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$27 = ((int_64)$9 | (int_64)$27)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$266 }
	
.LABEL $label$203
	$6 = *($0)
	$5 = (int_64)6
	
.LOOP $label$270:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$270 }
	*($4 + [272]) = (int_64)3617214756542218240
	*($4 + [264]) = $6
	$5 = (int_64)0
	$9 = (int_64)59
	$7 = [17866]
	$8 = (int_64)0
	
.LOOP $label$271:
	if ( ((uint_64)$5 > (uint_64)(int_64)7) ){ goto $label$276 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$275 }
	$10 = ($10 + [-91])
	goto $label$274 
	
.LABEL $label$276
	$6 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$273 }
	goto $label$272 
	
.LABEL $label$275
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$274
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$273
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$272
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$6 | (int_64)$8)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$271 }
	CALL $63(($4 + [248]), $0, ($4 + [368]), ($4 + [336]))
	*(($4 + [24])) = *((($4 + [336]) + [8]))
	$7 = (($4 + [248]) + [8])
	*(($4 + [40])) = *($7)
	*($7) = [0]
	*($4) = *($0)
	*($4 + [8]) = *($4 + [376])
	*($4 + [16]) = *($4 + [336])
	*($4 + [32]) = *($4 + [248])
	*($4 + [248]) = (int_64)0
	$7 = CALL $33(($4 + [280]), ($4 + [264]), $27, $8, $4)
	CALL $34(($4 + [544]), $7)
	$10 = *($4 + [544])
	CALL send_inline($10, (*($4 + [548]) - $10))
	$10 = *($4 + [544])
	if ( ($10 == 0) ){ goto $label$277 }
	*($4 + [548]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$277
	$10 = *($7 + [28])
	if ( ($10 == 0) ){ goto $label$278 }
	*(($7 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$278
	$10 = *($7 + [16])
	if ( ($10 == 0) ){ goto $label$279 }
	*(($7 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$279
	if ( ((*(($4 + [32])) & [1]) == 0) ){ goto $label$280 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$280
	if ( ((*($4 + [248]) & [1]) == 0) ){ goto $label$202 }
	CALL _ZdlPv(*(($4 + [256])))
	
.LABEL $label$202
	$7 = (($4 + [368]) + [48])
	if ( ((int_64)*($7) != (int_64)1397703940) ){ goto $label$281 }
	CALL $48($4, $0)
	CALL eosio_assert(((int_64)*($7) == (int_64)*($4 + [8])), [18687])
	$5 = (int_64)
	*($4) = $5(*($4) - *(($4 + [408]))))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [18735])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [18757])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($4) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [18618])
	CALL $49(($0 + [48]), $4, *($0))
	
.LABEL $label$281
	CALL $64($0, ($4 + [536]))
	*($4) = *($4 + [368])
	*($4 + [8]) = *($4 + [376])
	$2 = CALL $147(($4 + [16]), $11)
	$3 = CALL $147(($4 + [28]), $12)
	*(($4 + [48])) = *(($16 + [8]))
	*($4 + [40]) = *($16)
	*($4 + [56]) = *($4 + [424])
	$16 = CALL $147(($4 + [60]), $13)
	*(($4 + [88])) = *(($1 + [8]))
	*(($4 + [96])) = *(($1 + [16]))
	*(($4 + [104])) = *(($1 + [24]))
	*(($4 + [120])) = *(($14 + [8]))
	*(($4 + [128])) = *(($14 + [16]))
	*(($4 + [136])) = *(($14 + [24]))
	*(($4 + [152])) = *(($15 + [8]))
	*(($4 + [160])) = *(($15 + [16]))
	*(($4 + [168])) = *(($15 + [24]))
	*($4 + [72]) = $17
	*($4 + [80]) = *($1)
	*($4 + [112]) = *($14)
	*($4 + [144]) = *($15)
	*(($4 + [184])) = $18
	*(($4 + [224])) = $19
	*(($4 + [208])) = *((($4 + [336]) + [8]))
	*($4 + [176]) = $25
	*($4 + [192]) = $21
	*($4 + [216]) = $20
	*($4 + [200]) = *($4 + [336])
	$6 = *($0)
	$5 = (int_64)6
	
.LOOP $label$282:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$282 }
	*($4 + [288]) = (int_64)3617214756542218240
	*($4 + [280]) = $6
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17974]
	$8 = (int_64)0
	
.LOOP $label$283:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$284 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$286 }
	$10 = ($10 + [-91])
	goto $label$285 
	
.LABEL $label$286
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$285
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$284
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$283 }
	*($4 + [264]) = $8
	$5 = (int_64)6
	
.LOOP $label$287:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$287 }
	*($4 + [544]) = (int_64)-4994024814571159552
	CALL $65($0, ($4 + [280]), ($4 + [264]), ($4 + [544]), $4)
	if ( (*($16) & [1]) ){ goto $label$289 }
	if ( (*($3) & [1]) ){ goto $label$288 }
	goto $label$17 
	
.LABEL $label$289
	CALL _ZdlPv(*(($4 + [68])))
	if ( ((*($3) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$288
	CALL _ZdlPv(*(($4 + [36])))
	$7 = [1]
	if ( ((*($2) & [1]) == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$19
	CALL $146($4)
	
.LABEL $label$18
	CALL $146(($4 + [320]))
	
.LABEL $label$17
	$7 = [1]
	if ( (*($2) & [1]) ){ goto $label$15 }
	
.LABEL $label$16
	if ( (*($4 + [352]) & $7) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*(($4 + [24])))
	if ( ((*($4 + [352]) & $7) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*($4 + [360]))
	$7 = [1]
	if ( ((*($13) & [1]) == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$7 = [1]
	if ( (*($13) & [1]) ){ goto $label$11 }
	
.LABEL $label$12
	if ( (*($12) & $7) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*(($4 + [436])))
	if ( ((*($12) & $7) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($4 + [404])))
	if ( ((*($11) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( (*($11) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	$global$0 = ($4 + [560])
	return 
	
.LABEL $label$7
	CALL _ZdlPv(*(($4 + [392])))
	$global$0 = ($4 + [560])
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $183($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)1398362884
	*($3) = (int_64)0
	CALL eosio_assert([1], [18457])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [18506])
	*($3 + [16]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18411])
	CALL memcpy($3, $6, [8])
	$1 = ($7 & [-8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [18411])
	$2 = ($3 + [8])
	CALL memcpy($2, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[16]), [18411])
	$1 = ($3 + [16])
	CALL memcpy($1, ($6 + [16]), [8])
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $187($6)
	
.LABEL $label$8
	*(($11 = (($3 + [24]) + [8]))) = *($2)
	*($3 + [24]) = *($3)
	$8 = *($1)
	*((($3 + [40]) + [8])) = *($11)
	*($3 + [56]) = $8
	*($3 + [40]) = *($3 + [24])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	CALL void $1((int_32 ($3 + [40])), (int_32 ($3 + [56])), (int_32 $5))
	$global$0 = ($3 + [64])
	return [1]
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [144])
	$global$0 = $3
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [17875]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($7)
	CALL $66($0, $1)
	$5 = *($0)
	$4 = (int_64)6
	
.LOOP $label$5:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$5 }
	*($3 + [80]) = (int_64)3617214756542218240
	*($3 + [72]) = $5
	$4 = (int_64)0
	$8 = (int_64)59
	$6 = [17706]
	$7 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$11 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$9 = ($9 + [-91])
	goto $label$9 
	
.LABEL $label$11
	$5 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$7
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)4294967291)
	$7 = ((int_64)$5 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$6 }
	$4 = (int_64)0
	$8 = (int_64)59
	$6 = [17866]
	$10 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$17 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$9 = ($9 + [-91])
	goto $label$15 
	
.LABEL $label$17
	$5 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$13
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$10 = ((int_64)$5 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$12 }
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$6 = CALL $180([20850])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$22 }
	*($3 + [8]) = ($6 << [1])
	$9 = (($3 + [8]) | [1])
	if ( $6 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$11 = (($6 + [16]) & [-16])
	$9 = CALL _Znwj($11)
	*($3 + [8]) = ($11 | [1])
	*($3 + [16]) = $9
	*($3 + [12]) = $6
	
.LABEL $label$21
	CALL memcpy($9, [20850], $6)
	
.LABEL $label$20
	*(($9 + $6)) = [0]
	*(($3 + [48])) = *(($1 + [8]))
	$6 = (($3 + [8]) + [8])
	*(($3 + [64])) = *($6)
	*($6) = [0]
	*($3 + [24]) = *($0)
	*($3 + [32]) = *($2)
	*($3 + [40]) = *($1)
	*($3 + [56]) = *($3 + [8])
	*($3 + [8]) = (int_64)0
	$6 = CALL $33(($3 + [88]), ($3 + [72]), $7, $10, ($3 + [24]))
	CALL $34(($3 + [128]), $6)
	$9 = *($3 + [128])
	CALL send_inline($9, (*($3 + [132]) - $9))
	$9 = *($3 + [128])
	if ( ($9 == 0) ){ goto $label$23 }
	*($3 + [132]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$23
	$9 = *($6 + [28])
	if ( ($9 == 0) ){ goto $label$24 }
	*(($6 + [32])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$24
	$9 = *($6 + [16])
	if ( ($9 == 0) ){ goto $label$25 }
	*(($6 + [20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$25
	if ( (*(($3 + [56])) & [1]) ){ goto $label$27 }
	if ( (*($3 + [8]) & [1]) ){ goto $label$26 }
	goto $label$18 
	
.LABEL $label$27
	CALL _ZdlPv(*(($3 + [64])))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$26
	CALL _ZdlPv(*(($3 + [16])))
	$global$0 = ($3 + [144])
	return (unreachable)
	
.LABEL $label$19
	CALL $146(($3 + [8]))
	
.LABEL $label$18
	$global$0 = ($3 + [144])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $183($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*(($3 + [16])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [56]) = ($2 + $1)
	*($3 + [48]) = $2
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [18411])
	CALL memcpy($3, $2, [8])
	*($3 + [52]) = ($2 + [8])
	CALL $67(($3 + [48]), ($3 + [8]))
	CALL $67(($3 + [48]), ($3 + [20]))
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $187($2)
	
.LABEL $label$5
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $69(($3 + [48]), $3)
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$6
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$7
	$global$0 = ($3 + [64])
	return [1]
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	CALL require_auth(*($0))
	CALL require_recipient(*($1))
}

void .FUNC $101 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [18337])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)6820308914865700864, (int_64)6820308914865700864)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $102($1, $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [18337])
	
.LABEL $label$2
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$1
	*($4 + [8]) = $3
	CALL $105($4, $1, $2, ($4 + [8]))
	$1 = *($4 + [4])
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	$global$0 = ($4 + [16])
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18569])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [18569])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $103 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [18813])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$22()), [18859])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [18910])
	CALL eosio_assert([1], [18569])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [18569])
	CALL memcpy(($4 | [8]), $5, [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)6820308914865700864) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)6820308914865700865
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [18388])
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$5 }
	$7 = CALL $183($6)
	CALL db_get_i64($1, $7, $6)
	CALL $187($7)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	CALL db_get_i64($1, $7, $6)
	
.LABEL $label$4
	$8 = ($0 + [24])
	*(($9 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($9) = (int_64)0
	CALL eosio_assert([1], [18457])
	$10 = ($9 + [8])
	$11 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$11 = $12
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$11 = $12
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [18506])
	*($9 + [16]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [18411])
	CALL memcpy($9, $7, [8])
	CALL eosio_assert(((int_32)($6 & [-8]) != (int_32)[8]), [18411])
	CALL memcpy($10, ($7 + [8]), [8])
	*($9 + [20]) = $1
	*($3 + [24]) = $9
	*($3 + [16]) = (int_64)6820308914865700864
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = (int_64)6820308914865700864
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $5 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $106($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return $9
}

void .FUNC $105 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$22()), [18636])
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($5) = (int_64)0
	CALL eosio_assert([1], [18457])
	$6 = ($5 + [8])
	$7 = (int_64)5462355
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [18506])
	*($5 + [16]) = $1
	$8 = *($3)
	*($5) = *($8)
	*(($5 + [8])) = *(($8 + [8]))
	CALL eosio_assert([1], [18569])
	CALL memcpy(($4 + [16]), $5, [8])
	CALL eosio_assert([1], [18569])
	CALL memcpy((($4 + [16]) | [8]), $6, [8])
	$10 = CALL db_store_i64(*($1 + [8]), (int_64)6820308914865700864, $2, (int_64)6820308914865700864, ($4 + [16]), [16])
	*($5 + [20]) = $10
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)6820308914865700864) ){ goto $label$6 }
	*(($1 + [16])) = (int_64)6820308914865700865
	
.LABEL $label$6
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)6820308914865700864
	*($4 + [4]) = $10
	$11 = ($1 + [28])
	$8 = *($11)
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = (int_64)6820308914865700864
	*($8 + [16]) = $10
	*($4 + [8]) = [0]
	*($8) = $5
	*($11) = ($8 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $106(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$7
	*($0 + [4]) = $5
	*($0) = $1
	$8 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($8 == 0) ){ goto $label$9 }
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$global$0 = ($4 + [32])
}

void .FUNC $104 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$22()), [18636])
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($5) = (int_64)0
	CALL eosio_assert([1], [18457])
	$6 = ($5 + [8])
	$7 = (int_64)5462355
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [18506])
	*($5 + [16]) = $1
	$8 = *($3)
	*($5) = *($8)
	*(($5 + [8])) = *(($8 + [8]))
	CALL eosio_assert([1], [18569])
	CALL memcpy(($4 + [16]), $5, [8])
	CALL eosio_assert([1], [18569])
	CALL memcpy((($4 + [16]) | [8]), $6, [8])
	$10 = CALL db_store_i64(*($1 + [8]), (int_64)6820308914865700864, $2, (int_64)6820308914865700864, ($4 + [16]), [16])
	*($5 + [20]) = $10
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)6820308914865700864) ){ goto $label$6 }
	*(($1 + [16])) = (int_64)6820308914865700865
	
.LABEL $label$6
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)6820308914865700864
	*($4 + [4]) = $10
	$11 = ($1 + [28])
	$8 = *($11)
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = (int_64)6820308914865700864
	*($8 + [16]) = $10
	*($4 + [8]) = [0]
	*($8) = $5
	*($11) = ($8 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $106(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$7
	*($0 + [4]) = $5
	*($0) = $1
	$8 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($8 == 0) ){ goto $label$9 }
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$global$0 = ($4 + [32])
}

void .FUNC $107 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [160])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$22()), [18636])
	$5 = CALL _Znwj([112])
	CALL $108($5)
	*($5 + [96]) = $1
	$5 = CALL memcpy($5, *($3), [96])
	*($4 + [112]) = ($4 + [96])
	*($4 + [108]) = $4
	*($4 + [104]) = $4
	*($4 + [120]) = ($4 + [104])
	*($4 + [132]) = ($5 + [8])
	*($4 + [128]) = $5
	*($4 + [136]) = ($5 + [16])
	*($4 + [140]) = ($5 + [32])
	*($4 + [144]) = ($5 + [48])
	*($4 + [148]) = ($5 + [56])
	*($4 + [152]) = ($5 + [64])
	*($4 + [156]) = ($5 + [80])
	CALL $109(($4 + [128]), ($4 + [120]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)3932090329929651200, $2, (int_64)3932090329929651200, $4, [96])
	*($5 + [100]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)3932090329929651200) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)3932090329929651201
	
.LABEL $label$1
	*($4 + [128]) = $5
	*($4) = (int_64)3932090329929651200
	*($4 + [104]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)3932090329929651200
	*($3 + [16]) = $6
	*($4 + [128]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $110(($1 + [24]), ($4 + [128]), $4, ($4 + [104]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [128])
	*($4 + [128]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [160])
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18569])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18569])
	CALL memcpy(*($0 + [4]), $3, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [18569])
	CALL memcpy(*($0 + [4]), ($3 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $108 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [16]) = (int_64)0
	*(($1 = ($0 + [24]))) = (int_64)1398362884
	CALL eosio_assert([1], [18457])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [18506])
	*(($1 = ($0 + [40]))) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [18457])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [18506])
	*(($1 = ($0 + [72]))) = (int_64)1398362884
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [18457])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$2 = $3
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [18506])
	*(($1 = ($0 + [88]))) = (int_64)1398362884
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [18457])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$20
	$2 = $3
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$21 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	
.LABEL $label$19
	CALL eosio_assert($6, [18506])
	return $0
	
.LABEL $label$17
	CALL eosio_assert([0], [18506])
	return $0
	
.LABEL $label$16
	CALL eosio_assert([0], [18506])
	return $0
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$11 = ($global$0 - [96])
	$global$0 = $11
	$12 = *($1)
	if ( ($12 & [1]) ){ goto $label$6 }
	$12 = uint_32($12 >> [1])
	$13 = ($1 + [1])
	$14 = ($13 + $12)
	if ( $12 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$12 = *($1 + [4])
	$13 = *($1 + [8])
	$14 = ($13 + $12)
	if ( ($12 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	
.LOOP $label$7:
	if ( CALL $167(*($13)) ){ goto $label$4 }
	$13 = ($13 + [1])
	$12 = ($12 + [-1])
	if ( $12 ){ goto $label$7 }
	$13 = $14
	$12 = [1]
	$15 = *($1)
	if ( (($15 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$8 }
	$12 = ($13 + [1])
	if ( ((int_32)$12 == (int_32)$14) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( (CALL $167(*($12)) == 0) ){ goto $label$10 }
	$12 = ($12 + [1])
	if ( ((int_32)$14 != (int_32)$12) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($13) = *($12)
	$13 = ($13 + [1])
	$12 = ($12 + [1])
	if ( ((int_32)$14 != (int_32)$12) ){ goto $label$9 }
	
.LABEL $label$8
	$12 = [1]
	$15 = *($1)
	if ( ($15 & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$14 = ($1 + $12)
	$12 = ($14 + uint_32($15 >> $12))
	goto $label$1 
	
.LABEL $label$2
	$14 = *($1 + [8])
	$12 = ($14 + *($1 + [4]))
	
.LABEL $label$1
	CALL $157($1, ($13 - $14), ($12 - $13))
	$14 = *($1)
	if ( ($14 & [1]) ){ goto $label$13 }
	$13 = ($1 + [1])
	$15 = [0]
	$12 = [0]
	$14 = uint_32($14 >> [1])
	if ( $14 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$13 = *($1 + [8])
	$15 = [0]
	$12 = [0]
	$14 = *($1 + [4])
	if ( ($14 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$12 = [0]
	
.LOOP $label$14:
	$12 = ($12 + ((int_32)*($13) == (int_32)[45]))
	$13 = ($13 + [1])
	$14 = ($14 + [-1])
	if ( $14 ){ goto $label$14 }
	$12 = ((int_32)$12 == (int_32)[8])
	
.LABEL $label$11
	CALL eosio_assert($12, [19469])
	*($11 + [88]) = $15
	*($11 + [80]) = (int_64)0
	*($11 + [79]) = [45]
	*($11) = $15
	*($11 + [78]) = [1]
	*($11 + [92]) = CALL $5($1, ($11 + [80]), ($11 + [79]), $11, ($11 + [78]))
	$13 = *($11 + [80])
	CALL eosio_assert(((int_32)( *($11 + [84]) ? uint_32($13 >> [1]) : ($13 & [1]) ) != (int_32)$15), [19482])
	CALL $149($2, ($11 + [80]))
	*($11) = [45]
	*($11 + [92]) = (*($11 + [92]) + [1])
	*($11 + [79]) = [1]
	*($11 + [92]) = CALL $5($1, ($11 + [80]), $11, ($11 + [92]), ($11 + [79]))
	$13 = *($11 + [80])
	CALL eosio_assert(((int_32)( *($11 + [84]) ? uint_32($13 >> [1]) : ($13 & [1]) ) != (int_32)$15), [19490])
	*($3) = CALL $160(($11 + [80]), $15, [10])
	*($11) = [45]
	*($11 + [92]) = (*($11 + [92]) + [1])
	*($11 + [79]) = [1]
	*($11 + [92]) = CALL $5($1, ($11 + [80]), $11, ($11 + [92]), ($11 + [79]))
	CALL $149($4, ($11 + [80]))
	*($11) = [45]
	*($11 + [92]) = (*($11 + [92]) + [1])
	*($11 + [79]) = [1]
	*($11 + [92]) = CALL $5($1, ($11 + [80]), $11, ($11 + [92]), ($11 + [79]))
	$13 = *($11 + [80])
	CALL eosio_assert(((int_32)( *($11 + [84]) ? uint_32($13 >> [1]) : ($13 & [1]) ) != (int_32)$15), [19504])
	$13 = *($11 + [80])
	CALL eosio_assert(((int_32)( *($11 + [84]) ? uint_32($13 >> [1]) : ($13 & [1]) ) == (int_32)[64]), [8331])
	CALL $3(($11 + [80]), $11, [32])
	$13 = ($11 + [24])
	*(($5 + [24])) = *($13)
	$12 = ($11 + [16])
	*(($5 + [16])) = *($12)
	*(($5 + [8])) = *($11 + [8])
	*($5) = *($11)
	*($11) = [45]
	*($11 + [92]) = (*($11 + [92]) + [1])
	*($11 + [79]) = [1]
	*($11 + [92]) = CALL $5($1, ($11 + [80]), $11, ($11 + [92]), ($11 + [79]))
	$14 = *($11 + [80])
	CALL eosio_assert(((int_32)( *($11 + [84]) ? uint_32($14 >> [1]) : ($14 & [1]) ) != (int_32)$15), [19517])
	$14 = *($11 + [80])
	CALL eosio_assert(((int_32)( *($11 + [84]) ? uint_32($14 >> [1]) : ($14 & [1]) ) == (int_32)[40]), [8346])
	CALL $3(($11 + [80]), $11, [20])
	*(($6 + [24])) = *($13)
	*(($6 + [16])) = *($12)
	*(($6 + [8])) = *($11 + [8])
	*($6) = *($11)
	*($11) = [45]
	*($11 + [92]) = (*($11 + [92]) + [1])
	*($11 + [79]) = [1]
	*($11 + [92]) = CALL $5($1, ($11 + [80]), $11, ($11 + [92]), ($11 + [79]))
	$13 = *($11 + [80])
	CALL eosio_assert(((int_32)( *($11 + [84]) ? uint_32($13 >> [1]) : ($13 & [1]) ) != (int_32)$15), [19535])
	*($7) = CALL $163(($11 + [80]), $15, [10])
	*($11) = [45]
	*($11 + [92]) = (*($11 + [92]) + [1])
	*($11 + [79]) = [1]
	*($11 + [92]) = CALL $5($1, ($11 + [80]), $11, ($11 + [92]), ($11 + [79]))
	$13 = *($11 + [80])
	CALL eosio_assert(((int_32)( *($11 + [84]) ? uint_32($13 >> [1]) : ($13 & [1]) ) != (int_32)$15), [19549])
	*($8) = CALL $160(($11 + [80]), $15, [10])
	*($11) = [45]
	*($11 + [92]) = (*($11 + [92]) + [1])
	*($11 + [79]) = [1]
	*($11 + [92]) = CALL $5($1, ($11 + [80]), $11, ($11 + [92]), ($11 + [79]))
	$13 = *($11 + [80])
	CALL eosio_assert(((int_32)( *($11 + [84]) ? uint_32($13 >> [1]) : ($13 & [1]) ) != (int_32)$15), [19556])
	CALL $149($9, ($11 + [80]))
	$13 = (*($11 + [92]) + [1])
	*($11 + [92]) = $13
	CALL $148($11, $1, $13, [-1], $1)
	if ( (*($11 + [80]) & [1]) ){ goto $label$16 }
	*($11 + [80]) = [0]
	goto $label$15 
	
.LABEL $label$16
	*(*((($11 + [80]) + [8]))) = [0]
	*($11 + [84]) = [0]
	
.LABEL $label$15
	CALL $151(($11 + [80]), [0])
	*(($12 = (($11 + [80]) + [8]))) = *(($11 + [8]))
	*($11 + [80]) = *($11)
	$13 = *($11 + [80])
	CALL eosio_assert(((int_32)( *($11 + [84]) ? uint_32($13 >> [1]) : ($13 & [1]) ) != (int_32)[0]), [19568])
	*($11 + [79]) = [1]
	CALL $9($11, ($11 + [80]), ($11 + [79]))
	CALL memcpy($10, $11, [66])
	if ( ((*($11 + [80]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($12))
	
.LABEL $label$17
	$global$0 = ($11 + [96])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = CALL _Znwj([16])
	*($0 + [8]) = $3
	*($0) = (int_64)55834574865
	CALL memset($3, [46], [13])
	*($3 + [13]) = [0]
	$5 = *($1)
	$1 = (CASTING uint_32)(uint_64 $5)
	$4 = *([0] + [18420])
	*($3 + [12]) = *(($4 + ($1 & [15])))
	*($3 + [11]) = *(($4 + (uint_32($1 >> [4]) & [31])))
	*($3 + [10]) = *(($4 + (uint_32($1 >> [9]) & [31])))
	*($3 + [9]) = *(($4 + (uint_32($1 >> [14]) & [31])))
	*($3 + [8]) = *(($4 + (uint_32($1 >> [19]) & [31])))
	*($3 + [7]) = *(($4 + (uint_32($1 >> [24]) & [31])))
	*($3 + [6]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)29)) & [31])))
	*($3 + [5]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)34)) & [31])))
	*($3 + [4]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)39)) & [31])))
	*($3 + [3]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)44)) & [31])))
	*($3 + [2]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)49)) & [31])))
	*($3 + [1]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)54)) & [31])))
	*(*($0 + [8])) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)59))))
	$4 = ($3 & [1])
	$3 = *($0)
	$3 = ( *($0 + [4]) ? uint_32($3 >> [1]) : $4 )
	$1 = ( *($0 + [8]) ? ($0 + [1]) : $4 )
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($1 + $3)
	$6 = ($3 + [-1])
	$3 = $6
	if ( ((int_32)*(($4 + [-1])) == (int_32)[46]) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$1 }
	CALL $148($2, $0, [0], ($6 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$4 }
	*($0) = [0]
	goto $label$3 
	
.LABEL $label$4
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$3
	CALL $151($0, [0])
	*(($0 + [8])) = *(($2 + [8]))
	*($0) = *($2)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1415074820
	CALL eosio_assert([1], [18457])
	$5 = [0]
	$6 = (int_64)5527636
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$8 = [1]
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$5 < (int_32)[6])
	$9 = ($5 + [1])
	$5 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [18506])
	*(($0 + [40])) = (int_64)1415074820
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [18457])
	$6 = (int_64)5527636
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$6 = $7
	$8 = [1]
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$6 = $7
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$5 < (int_32)[6])
	$9 = ($5 + [1])
	$5 = $9
	if ( $8 ){ goto $label$10 }
	$8 = [1]
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	
.LABEL $label$6
	CALL eosio_assert($8, [18506])
	*($0 + [48]) = (int_64)0
	*($0 + [56]) = *($2)
	*($0 + [64]) = *($3)
	*(($0 + [72])) = *(($3 + [8]))
	*($0 + [80]) = *($4)
	*(($0 + [88])) = *(($4 + [8]))
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)$0), [18337])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3932090329929651200, (int_64)3932090329929651200)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $83($0, $4)
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)$0), [18337])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18778])
	CALL $84($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $85($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $74($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [18569])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [18569])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $100(CALL $99($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $35 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = (int_64)1397703940
	*($1) = (int_64)0
	CALL eosio_assert([1], [18457])
	$2 = [0]
	$3 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $4
	$5 = [1]
	$6 = $2
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $4
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = ((int_32)$2 < (int_32)[6])
	$6 = ($2 + [1])
	$2 = $6
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [18506])
	CALL $52(($0 + [168]), $1, *($0))
	$global$0 = ($1 + [16])
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = (int_64)1397703940
	*($2) = (int_64)0
	CALL eosio_assert([1], [18457])
	$3 = [0]
	$4 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $5
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [18506])
	CALL $82($0, ($1 + [168]), *($1), $2)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $74($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $75(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18411])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18411])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18411])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [18411])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $67(*($1), ($0 + [32]))
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = *($1)
	*($2 + [40]) = (int_64)0
	*($2 + [32]) = (int_64)1415074820
	*($2 + [24]) = (int_64)0
	CALL eosio_assert([1], [18457])
	$4 = ($1 + [208])
	$5 = [0]
	$6 = (int_64)5527636
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$8 = [1]
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$5 < (int_32)[6])
	$9 = ($5 + [1])
	$5 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [18506])
	*($2 + [16]) = (int_64)1397703940
	*($2 + [8]) = (int_64)0
	CALL eosio_assert([1], [18457])
	$6 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$6 = $7
	$8 = [1]
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$6 = $7
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$5 < (int_32)[6])
	$9 = ($5 + [1])
	$5 = $9
	if ( $8 ){ goto $label$10 }
	$8 = [1]
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	
.LABEL $label$6
	CALL eosio_assert($8, [18506])
	CALL $36(($2 + [48]), $1, ($2 + [40]), ($2 + [24]), ($2 + [8]))
	CALL $81($0, $4, $3, ($2 + [48]))
	$global$0 = ($2 + [144])
}