(data (i32.const 8220) "failed to allocate pages\00Add company \00")
(data (i32.const 8258) " - \00")
(data (i32.const 8262) "Company already exists.\00")
(data (i32.const 8286) "account_name is not an EOS account\00")
(data (i32.const 8321) "Remove company: \00")
(data (i32.const 8338) "Company does not exist.\00")
(data (i32.const 8362) "Update signature: \00")
(data (i32.const 8381) "Update public key: \00")
(data (i32.const 8401) "subject is not an EOS account\00")
(data (i32.const 8431) "Add certificate: \00")
(data (i32.const 8449) " -> \00")
(data (i32.const 8454) "Issuer does not exist.\00")
(data (i32.const 8477) "Subject does not exist.\00")
(data (i32.const 8501) "Could not find certificate for subject.\00")
(data (i32.const 8541) "Certificate already exists: \00")
(data (i32.const 8570) "error reading iterator\00")
(data (i32.const 8593) "cannot pass end iterator to erase\00")
(data (i32.const 8627) "cannot increment end iterator\00")
(data (i32.const 8657) "object passed to erase is not in multi_index\00")
(data (i32.const 8702) "cannot erase objects in table of another contract\00")
(data (i32.const 8752) "attempt to remove object that was not in multi_index\00")
(data (i32.const 8805) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8856) "cannot create objects in table of another contract\00")
(data (i32.const 8907) "write\00")
(data (i32.const 8913) "cannot pass end iterator to modify\00")
(data (i32.const 8948) "object passed to modify is not in multi_index\00")
(data (i32.const 8994) "cannot modify objects in table of another contract\00")
(data (i32.const 9045) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9104) "read\00")
(data (i32.const 9109) "get\00")
(data (i32.const 0) "\a0#\00\00")
(import "env" "db_lowerbound_i64" (func $fimport$0 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "abort" (func $fimport$2))
(import "env" "eosio_assert" (func $fimport$3 (param i32 i32)))
(import "env" "memset" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$5 (param i32)))
(import "env" "printn" (func $fimport$6 (param i64)))
(import "env" "prints_l" (func $fimport$7 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$9 (result i64)))
(import "env" "require_auth" (func $fimport$10 (param i64)))
(import "env" "is_account" (func $fimport$11 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$13 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$14 (result i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$17 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$18 (param i32 i32)))
(import "env" "__multf3" (func $fimport$19 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$20 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$23 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$28 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$30 (param i64 i64) (result f32)))
(import "env" "__unordtf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "eosio_assert_code" (func $fimport$34 (param i32 i64)))
(import "env" "db_get_i64" (func $fimport$35 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$36 (param i32)))
(import "env" "db_update_i64" (func $fimport$37 (param i32 i64 i32 i32)))
(export "apply" (func $1))
(table $0 1 1 anyfunc)

(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 9113))
(global $global$2 i32 (i32.const 9113))


void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $8($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $10($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $8(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $10($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [9109])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $49($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [9104])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL require_auth(*($1))
	if ( CALL is_account(*($2)) ){ goto $label$1 }
	CALL eosio_assert([0], [8401])
	
.LABEL $label$1
	CALL prints([8431])
	CALL printn(*($1))
	CALL prints([8449])
	CALL printn(*($2))
	$5 = [0]
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [8]) = *($0)
	$6 = *($1)
	*($4 + [16]) = $6
	$0 = ($0 + [32])
	CALL $30(($4 + [64]), $0, $6, [8454])
	CALL $30(($4 + [64]), $0, *($2), [8477])
	$6 = *($2)
	$8 = *(($4 + [36]))
	$7 = *($4 + [32])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$8:
	$0 = ($8 + [-24])
	$9 = *($0)
	if ( ((int_64)*($9) == (int_64)$6) ){ goto $label$7 }
	$8 = $0
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$6 }
	if ( ((int_32)*($9 + [8]) == (int_32)($4 + [8])) ){ goto $label$9 }
	CALL eosio_assert([0], [8805])
	
.LABEL $label$9
	$5 = $9
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = CALL db_find_i64(*($4 + [8]), *(($4 + [16])), (int_64)4805225550315934720, $6)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$10 }
	$5 = CALL $23(($4 + [8]), $0)
	if ( ((int_32)*($5 + [8]) == (int_32)($4 + [8])) ){ goto $label$10 }
	CALL eosio_assert([0], [8805])
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	if ( $5 ){ goto $label$11 }
	CALL eosio_assert([0], [8501])
	CALL eosio_assert([0], [8593])
	CALL eosio_assert([0], [8627])
	
.LABEL $label$11
	$0 = CALL db_next_i64(*($5 + [12]), ($4 + [64]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$12 }
	CALL $23(($4 + [8]), $0)
	
.LABEL $label$12
	CALL $24(($4 + [8]), $5)
	$7 = *($4 + [32])
	if ( $7 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$13 }
	CALL prints([8541])
	CALL printn(*($1))
	CALL prints([8449])
	CALL printn(*($2))
	$7 = *($4 + [32])
	if ( $7 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$13
	$10 = *($1)
	if ( ((int_64)CALL current_receiver() == (int_64)*($4 + [8])) ){ goto $label$14 }
	CALL eosio_assert([0], [8856])
	
.LABEL $label$14
	*(($0 = CALL $8([24])) + [8]) = ($4 + [8])
	*($0) = *($2)
	CALL memcpy(($4 + [64]), $0, [8])
	$6 = *($0)
	$7 = CALL db_store_i64(*((($4 + [8]) + [8])), (int_64)4805225550315934720, $10, $6, ($4 + [64]), [8])
	*($0 + [12]) = $7
	$8 = ($4 + [24])
	if ( (uint_64)($6 <= *($8)) ){ goto $label$15 }
	*($8) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	*($4 + [56]) = $0
	$6 = *($0)
	*($4 + [64]) = $6
	*($4 + [52]) = $7
	$9 = ($4 + [36])
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)*(($4 + [40]))) ){ goto $label$18 }
	*($8 + [8]) = $6
	*($8 + [16]) = $7
	*($4 + [56]) = [0]
	*($8) = $0
	*($9) = ($8 + [24])
	$0 = *($4 + [56])
	*($4 + [56]) = [0]
	if ( $0 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL $31(($4 + [32]), ($4 + [56]), ($4 + [64]), ($4 + [52]))
	$0 = *($4 + [56])
	*($4 + [56]) = [0]
	if ( ($0 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL $10($0)
	
.LABEL $label$16
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = ($4 + [36])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$20 }
	
.LOOP $label$21:
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$22 }
	CALL $10($8)
	
.LABEL $label$22
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$21 }
	$0 = *(($4 + [32]))
	goto $label$19 
	
.LABEL $label$20
	$0 = $7
	
.LABEL $label$19
	*($9) = $7
	CALL $10($0)
	
.LABEL $label$2
	$global$0 = ($4 + [80])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL $8(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $21($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $46(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $21 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $20 (int_32 $0)
{
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8570])
	
.LABEL $label$5
	$2 = CALL $2($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $8([24])) + [8]) = $0
	*($5) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9104])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$4 = *($8)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($4 + [8]) = $7
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($8) = ($4 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $31(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $3($2)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL $10($1)
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	$3 = *($0)
	*($2) = $3
	$4 = *($1)
	*($2 + [8]) = $4
	*($2 + [24]) = (int_64)0
	$1 = CALL db_lowerbound_i64($3, $4, (int_64)4805225550315934720, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $23($2, $1)
	
.LOOP $label$2:
	$1 = [0]
	$5 = CALL db_next_i64(*($0 + [12]), ($2 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $23($2, $5)
	
.LABEL $label$3
	CALL $24($2, $0)
	$0 = $1
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$1
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$4 }
	$6 = ($2 + [28])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	CALL $10($0)
	
.LABEL $label$8
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$7 }
	$1 = *(($2 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$1 = $5
	
.LABEL $label$5
	*($6) = $5
	CALL $10($1)
	
.LABEL $label$4
	$global$0 = ($2 + [48])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$6 = ($global$0 - [64])
	$global$0 = $6
	CALL prints([8245])
	CALL printn(*($2))
	CALL prints([8258])
	$7 = *($3)
	$8 = ($7 & [1])
	CALL prints_l(( *($3 + [8]) ? ($3 + [1]) : $8 ), ( *($3 + [4]) ? uint_32($7 >> [1]) : $8 ))
	$9 = ($0 + [32])
	$10 = *($2)
	$8 = *(($0 + [60]))
	$11 = *(($0 + [56]))
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($8 + [-24])
	$12 = *($7)
	if ( ((int_64)*($12) == (int_64)$10) ){ goto $label$4 }
	$8 = $7
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$3 }
	if ( ((int_32)*($12 + [44]) == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert([0], [8805])
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($9), *(($0 + [40])), (int_64)4982480164744069120, $10)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	if ( ((int_32)*(CALL $26($9, $7) + [44]) == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert([0], [8805])
	
.LABEL $label$2
	CALL eosio_assert([0], [8262])
	
.LABEL $label$1
	$10 = *($1)
	*($6 + [12]) = $3
	*($6 + [8]) = $2
	*($6 + [16]) = $4
	*($6 + [20]) = $5
	*($6 + [56]) = $10
	if ( ((int_64)CALL current_receiver() == (int_64)*($9)) ){ goto $label$6 }
	CALL eosio_assert([0], [8856])
	
.LABEL $label$6
	*($6 + [32]) = $9
	*($6 + [36]) = ($6 + [8])
	*($6 + [40]) = ($6 + [56])
	*(($7 = CALL $8([56]))) = (int_64)0
	*($7 + [8 align=4]) = (int_64)0
	*($7 + [16 align=4]) = (int_64)0
	*($7 + [24 align=4]) = (int_64)0
	*($7 + [32 align=4]) = (int_64)0
	*($7 + [40]) = [0]
	*($7 + [44]) = $9
	CALL $27(($6 + [32]), $7)
	*($6 + [48]) = $7
	$10 = *($7)
	*($6 + [32]) = $10
	$11 = *($7 + [48])
	*($6 + [28]) = $11
	$12 = ($0 + [60])
	$8 = *($12)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [64]))) ){ goto $label$9 }
	*($8 + [8]) = $10
	*($8 + [16]) = $11
	*($6 + [48]) = [0]
	*($8) = $7
	*($12) = ($8 + [24])
	$7 = *($6 + [48])
	*($6 + [48]) = [0]
	if ( ($7 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $28(($0 + [56]), ($6 + [48]), ($6 + [32]), ($6 + [28]))
	$7 = *($6 + [48])
	*($6 + [48]) = [0]
	if ( $7 ){ goto $label$7 }
	
.LABEL $label$8
	$global$0 = ($6 + [64])
	return 
	
.LABEL $label$7
	if ( (*($7 + [32]) & [1]) ){ goto $label$14 }
	if ( (*($7 + [20]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $10(*(($7 + [40])))
	if ( ((*($7 + [20]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL $10(*(($7 + [28])))
	if ( (*($7 + [8]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $10(*(($7 + [16])))
	
.LABEL $label$10
	CALL $10($7)
	$global$0 = ($6 + [64])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [8]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8657])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [8702])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [8752])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $10($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL $10($8)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$5 = ($1 + [8])
	CALL $17($5, *($3 + [4]))
	$6 = ($1 + [20])
	CALL $17($6, *($3 + [8]))
	$7 = ($1 + [32])
	CALL $17($7, *($3 + [12]))
	*(($3 = $2)) = [0]
	*($3 + [8]) = $3
	*($3 + [20]) = $5
	*($3 + [16]) = $1
	*($3 + [24]) = $6
	*($3 + [28]) = $7
	CALL $47(($3 + [16]), ($3 + [8]))
	$8 = *($3)
	if ( ($8 <= [513]) ){ goto $label$2 }
	$2 = CALL $2($8)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($8 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $8)
	$9 = $2
	if ( ((int_32)$8 > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8907])
	$9 = *($3 + [20])
	
.LABEL $label$3
	CALL memcpy($9, $1, [8])
	*($3 + [20]) = ($9 + [8])
	CALL $48(($3 + [16]), $5)
	CALL $48(($3 + [16]), $6)
	CALL $48(($3 + [16]), $7)
	$10 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($4 + [8]), (int_64)4982480164744069120, *(*($0 + [8])), $10, $2, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$10 >= (uint_64)*($4 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $3($2)
	if ( (uint_64)($10 <= *($4 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [32])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	$2 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8570])
	
.LABEL $label$5
	$5 = CALL $2($4)
	$2 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $5, $4)
	*($3 + [36]) = $5
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + $4)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $8([56])
	$6 = CALL $45($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1)
	*($3 + [8]) = $7
	$8 = *($1 + [48])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$4 = *($9)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $7
	*($4 + [16]) = $8
	*($3 + [24]) = [0]
	*($4) = $1
	*($9) = ($4 + [24])
	if ( $2 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $28(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($2 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $3($5)
	
.LABEL $label$7
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	if ( (*($5 + [32]) & [1]) ){ goto $label$15 }
	if ( (*($5 + [20]) & [1]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL $10(*(($5 + [40])))
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL $10(*(($5 + [28])))
	if ( (*($5 + [8]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $10(*(($5 + [16])))
	
.LABEL $label$11
	CALL $10($5)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $8($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $21($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $10($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8907])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [8907])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $43 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [176])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [116]) = $2
	*($3 + [112]) = $2
	*($3 + [120]) = ($2 + $4)
	*($3 + [104]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9104])
	$2 = *($3 + [116])
	
.LABEL $label$5
	CALL memcpy(($3 + [104]), $2, [8])
	*($3 + [116]) = ($2 + [8])
	*($3 + [96]) = [0]
	*($3 + [88]) = (int_64)0
	CALL $37(($3 + [112]), ($3 + [88]))
	*(($2 = ($3 + [8]))) = *((($3 + [112]) + [8]))
	*($3) = *($3 + [112])
	$2 = *($2)
	*((($3 + [128]) + [8])) = $2
	*(($4 = (($3 + [144]) + [8]))) = $2
	$5 = *($3)
	*($3 + [144]) = $5
	*($3 + [128]) = $5
	$2 = *($4)
	*((($3 + [160]) + [8])) = $2
	*(($3 + [40])) = $2
	*($3 + [16]) = $0
	*($3 + [24]) = $1
	$5 = *($3 + [144])
	*($3 + [32]) = $5
	*($3 + [160]) = $5
	*(($3 + [56])) = $1
	*(($3 + [64])) = (int_64)-1
	*(($4 = ($3 + [72]))) = (int_64)0
	*(($3 + [80])) = [0]
	*($3 + [48]) = $0
	CALL require_auth(*($3 + [104]))
	CALL prints([8381])
	CALL printn(*($3 + [104]))
	$6 = ($3 + [48])
	CALL $30(($3 + [160]), $6, *($3 + [104]), [8338])
	$0 = *($3 + [104])
	$2 = *($3 + [164])
	*($3 + [144]) = ($3 + [88])
	if ( $2 ){ goto $label$6 }
	CALL eosio_assert([0], [8913])
	
.LABEL $label$6
	CALL $35($6, $2, $0, ($3 + [144]))
	CALL $38($4)
	if ( ((*($3 + [88]) & [1]) == 0) ){ goto $label$7 }
	CALL $10(*(($3 + [96])))
	
.LABEL $label$7
	$global$0 = ($3 + [176])
}

void .FUNC $42 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [176])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [116]) = $2
	*($3 + [112]) = $2
	*($3 + [120]) = ($2 + $4)
	*($3 + [104]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9104])
	$2 = *($3 + [116])
	
.LABEL $label$5
	CALL memcpy(($3 + [104]), $2, [8])
	*($3 + [116]) = ($2 + [8])
	*($3 + [96]) = [0]
	*($3 + [88]) = (int_64)0
	CALL $37(($3 + [112]), ($3 + [88]))
	*(($2 = ($3 + [8]))) = *((($3 + [112]) + [8]))
	*($3) = *($3 + [112])
	$2 = *($2)
	*((($3 + [128]) + [8])) = $2
	*(($4 = (($3 + [144]) + [8]))) = $2
	$5 = *($3)
	*($3 + [144]) = $5
	*($3 + [128]) = $5
	$2 = *($4)
	*((($3 + [160]) + [8])) = $2
	*(($3 + [40])) = $2
	*($3 + [16]) = $0
	*($3 + [24]) = $1
	$5 = *($3 + [144])
	*($3 + [32]) = $5
	*($3 + [160]) = $5
	*(($3 + [56])) = $1
	*(($3 + [64])) = (int_64)-1
	*(($4 = ($3 + [72]))) = (int_64)0
	*(($3 + [80])) = [0]
	*($3 + [48]) = $0
	CALL require_auth(*($3 + [104]))
	CALL prints([8362])
	CALL printn(*($3 + [104]))
	$6 = ($3 + [48])
	CALL $30(($3 + [160]), $6, *($3 + [104]), [8338])
	$0 = *($3 + [104])
	$2 = *($3 + [164])
	*($3 + [144]) = ($3 + [88])
	if ( $2 ){ goto $label$6 }
	CALL eosio_assert([0], [8913])
	
.LABEL $label$6
	CALL $34($6, $2, $0, ($3 + [144]))
	CALL $38($4)
	if ( ((*($3 + [88]) & [1]) == 0) ){ goto $label$7 }
	CALL $10(*(($3 + [96])))
	
.LABEL $label$7
	$global$0 = ($3 + [176])
}

void .FUNC $41 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [72]) = (int_64)0
	$5 = ($2 + $4)
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9104])
	
.LABEL $label$5
	CALL memcpy(($3 + [72]), $2, [8])
	*(($3 + [20])) = ($2 + [8])
	*(($3 + [24])) = $5
	*(($3 + [40])) = $1
	*(($3 + [48])) = (int_64)-1
	*(($4 = ($3 + [56]))) = (int_64)0
	*(($3 + [64])) = [0]
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [16]) = $2
	*($3 + [32]) = $0
	CALL $32($3, ($3 + [72]))
	CALL $38($4)
	$global$0 = ($3 + [80])
}

void .FUNC $40 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [208])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [148]) = $2
	*($3 + [144]) = $2
	*($3 + [152]) = ($2 + $4)
	*($3 + [136]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9104])
	$2 = *($3 + [148])
	
.LABEL $label$5
	CALL memcpy(($3 + [136]), $2, [8])
	*($3 + [148]) = ($2 + [8])
	*($3 + [128]) = [0]
	*($3 + [120]) = (int_64)0
	CALL $37(($3 + [144]), ($3 + [120]))
	*($3 + [112]) = [0]
	*($3 + [104]) = (int_64)0
	CALL $37(($3 + [144]), ($3 + [104]))
	*($3 + [96]) = [0]
	*($3 + [88]) = (int_64)0
	CALL $37(($3 + [144]), ($3 + [88]))
	*(($2 = ($3 + [8]))) = *((($3 + [144]) + [8]))
	*($3) = *($3 + [144])
	$2 = *($2)
	*((($3 + [160]) + [8])) = $2
	*(($4 = (($3 + [176]) + [8]))) = $2
	$5 = *($3)
	*($3 + [176]) = $5
	*($3 + [160]) = $5
	$2 = *($4)
	*((($3 + [192]) + [8])) = $2
	*(($3 + [40])) = $2
	*($3 + [16]) = $0
	*($3 + [24]) = $1
	$5 = *($3 + [176])
	*($3 + [32]) = $5
	*($3 + [192]) = $5
	*(($3 + [56])) = $1
	*(($3 + [64])) = (int_64)-1
	*(($2 = ($3 + [72]))) = (int_64)0
	*(($3 + [80])) = [0]
	*($3 + [48]) = $0
	CALL require_auth($0)
	if ( CALL is_account(*($3 + [136])) ){ goto $label$6 }
	CALL eosio_assert([0], [8286])
	$0 = *($3 + [16])
	
.LABEL $label$6
	*($3 + [192]) = $0
	CALL $25(($3 + [16]), ($3 + [192]), ($3 + [136]), ($3 + [120]), ($3 + [104]), ($3 + [88]))
	*($3 + [192]) = *($3 + [16])
	CALL $29(($3 + [16]), ($3 + [192]), ($3 + [136]), [0])
	CALL $38($2)
	if ( (*($3 + [88]) & [1]) ){ goto $label$11 }
	if ( (*($3 + [104]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $10(*(($3 + [96])))
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $10(*(($3 + [112])))
	if ( ((*($3 + [120]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( (*($3 + [120]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	$global$0 = ($3 + [208])
	return 
	
.LABEL $label$7
	CALL $10(*(($3 + [128])))
	$global$0 = ($3 + [208])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [8])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [4])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($3)
	$3 = *($0 + [8])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$3 = *($0)
	$0 = *($0 + [12])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	*($2) = ($0 + $1)
	
.LABEL $label$6
}

int_32 .FUNC $46 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$8 }
	CALL $10(*(($1 + [40])))
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $10(*(($1 + [28])))
	if ( (*($1 + [8]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $10(*(($1 + [16])))
	
.LABEL $label$4
	CALL $10($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $10($1)
	
.LABEL $label$9
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0) = (int_64)0
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*($0 + [44]) = $1
	*(($0 + [16])) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*(($0 + [40])) = [0]
	$3 = ($0 + [32])
	$4 = ($0 + [20])
	$5 = ($0 + [8])
	$6 = *($1 + [4])
	$1 = *($2 + [4])
	if ( ((uint_32)(*($1 + [8]) - $6) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9104])
	$6 = *(($1 + [4]))
	
.LABEL $label$1
	CALL memcpy($0, $6, [8])
	*(($6 = ($1 + [4]))) = (*($6) + [8])
	CALL $37($1, $5)
	CALL $37($1, $4)
	CALL $37($1, $3)
	*($0 + [48]) = *(*($2 + [8]))
	return $0
}

void .FUNC $44 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [88]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9104])
	
.LABEL $label$5
	CALL memcpy(($3 + [88]), $2, [8])
	*($3 + [80]) = (int_64)0
	$5 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9104])
	
.LABEL $label$6
	$6 = ($2 + $4)
	CALL memcpy(($3 + [80]), $5, [8])
	$5 = ($2 + [16])
	if ( ((int_32)$4 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [9104])
	
.LABEL $label$7
	CALL memcpy(($3 + [8]), $5, [1])
	$4 = *($3 + [8])
	*(($3 + [32])) = $6
	*(($3 + [48])) = $1
	*(($3 + [56])) = (int_64)-1
	*(($5 = ($3 + [64]))) = (int_64)0
	*(($3 + [72])) = [0]
	*($3 + [24]) = $2
	*(($3 + [28])) = ($2 + [17])
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [40]) = $0
	CALL $29(($3 + [8]), ($3 + [88]), ($3 + [80]), ((int_32)$4 != (int_32)[0]))
	CALL $38($5)
	$global$0 = ($3 + [96])
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $2($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $2($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $9 (int_32 $0)
{
	return CALL $8($0)
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $2($1)
	
.LABEL $label$2
	*(CALL $5()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $2(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $3($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $5())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $6($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $4 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

int_32 .FUNC $5 ()
{
	return [8208]
}

int_32 .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8220])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $3 (int_32 $0)
{
}

void .FUNC $0 ()
{
	CALL $4()
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	CALL $0()
	CALL $36($0, $1)
	CALL $40($0, $1)
	CALL $41($0, $1)
	CALL $42($0, $1)
	CALL $43($0, $1)
	CALL $44($0, $1)
	CALL eosio_assert_code([0], (int_64)8000000000000000000)
	CALL eosio_assert_code([0], (int_64)8000000000000000001)
	CALL $20([0])
	((int_64)$0 == (int_64)$1)
	((int_64)3625960649986670592 == (int_64)$2)
	((int_64)3626328219042447360 == (int_64)$2)
	((int_64)-4997502827547852800 == (int_64)$2)
	((int_64)-3075276113604247552 == (int_64)$2)
	((int_64)-3075276115187597312 == (int_64)$2)
	((int_64)4805225558768091136 == (int_64)$2)
	((int_64)$0 != (int_64)6138663577826885632)
	((int_64)6138663577826885632 == (int_64)$1)
	((int_64)-6569208335818555392 == (int_64)$2)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $3($0)
	
.LABEL $label$1
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	CALL $14($0, $1)
}

void .FUNC $16 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $18($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $10 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $3($0)
	
.LABEL $label$1
}

void .FUNC $11 (int_32 $0)
{
	CALL $10($0)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $7(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $7(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	return CALL $12($0, $1)
}

void .FUNC $36 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [208])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [148]) = $2
	*($3 + [144]) = $2
	*($3 + [152]) = ($2 + $4)
	*($3 + [136]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9104])
	$2 = *($3 + [148])
	
.LABEL $label$5
	CALL memcpy(($3 + [136]), $2, [8])
	*($3 + [148]) = ($2 + [8])
	*($3 + [128]) = [0]
	*($3 + [120]) = (int_64)0
	CALL $37(($3 + [144]), ($3 + [120]))
	*($3 + [112]) = [0]
	*($3 + [104]) = (int_64)0
	CALL $37(($3 + [144]), ($3 + [104]))
	*($3 + [96]) = [0]
	*($3 + [88]) = (int_64)0
	CALL $37(($3 + [144]), ($3 + [88]))
	*(($2 = ($3 + [8]))) = *((($3 + [144]) + [8]))
	*($3) = *($3 + [144])
	$2 = *($2)
	*((($3 + [160]) + [8])) = $2
	*(($4 = (($3 + [176]) + [8]))) = $2
	$5 = *($3)
	*($3 + [176]) = $5
	*($3 + [160]) = $5
	$2 = *($4)
	*((($3 + [192]) + [8])) = $2
	*(($3 + [40])) = $2
	*($3 + [16]) = $0
	*($3 + [24]) = $1
	$5 = *($3 + [176])
	*($3 + [32]) = $5
	*($3 + [192]) = $5
	*(($3 + [56])) = $1
	*(($3 + [64])) = (int_64)-1
	*(($2 = ($3 + [72]))) = (int_64)0
	*(($3 + [80])) = [0]
	*($3 + [48]) = $0
	CALL require_auth(*($3 + [136]))
	CALL $25(($3 + [16]), ($3 + [136]), ($3 + [136]), ($3 + [120]), ($3 + [104]), ($3 + [88]))
	CALL $29(($3 + [16]), ($3 + [136]), ($3 + [136]), [0])
	CALL $38($2)
	if ( (*($3 + [88]) & [1]) ){ goto $label$10 }
	if ( (*($3 + [104]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $10(*((($3 + [88]) + [8])))
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $10(*(($3 + [112])))
	if ( ((*($3 + [120]) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($3 + [120]) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	$global$0 = ($3 + [208])
	return 
	
.LABEL $label$6
	CALL $10(*(($3 + [128])))
	$global$0 = ($3 + [208])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $39($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $8($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $19($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $19($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $16($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $10($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [44]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8948])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [8994])
	
.LABEL $label$2
	$6 = *($1)
	$7 = ($1 + [32])
	CALL $17($7, *($3))
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [9045])
	
.LABEL $label$3
	*($5) = [0]
	*($5 + [8]) = $5
	*($5 + [28]) = $7
	*($5 + [16]) = $1
	$8 = ($1 + [8])
	*($5 + [20]) = $8
	$9 = ($1 + [20])
	*($5 + [24]) = $9
	CALL $47(($5 + [16]), ($5 + [8]))
	$3 = *($5)
	if ( ($3 <= [513]) ){ goto $label$5 }
	$4 = CALL $2($3)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	*($5 + [20]) = $4
	*($5 + [16]) = $4
	*($5 + [24]) = ($4 + $3)
	$10 = $4
	if ( ((int_32)$3 > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8907])
	$10 = *($5 + [20])
	
.LABEL $label$6
	CALL memcpy($10, $1, [8])
	*($5 + [20]) = ($10 + [8])
	CALL $48(($5 + [16]), $8)
	CALL $48(($5 + [16]), $9)
	CALL $48(($5 + [16]), $7)
	CALL db_update_i64(*($1 + [48]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $3($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [32])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [32])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [44]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8948])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [8994])
	
.LABEL $label$2
	$6 = *($1)
	$7 = ($1 + [20])
	CALL $17($7, *($3))
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [9045])
	
.LABEL $label$3
	*($5) = [0]
	*($5 + [8]) = $5
	*($5 + [24]) = $7
	*($5 + [16]) = $1
	$8 = ($1 + [8])
	*($5 + [20]) = $8
	$9 = ($1 + [32])
	*($5 + [28]) = $9
	CALL $47(($5 + [16]), ($5 + [8]))
	$3 = *($5)
	if ( ($3 <= [513]) ){ goto $label$5 }
	$4 = CALL $2($3)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	*($5 + [20]) = $4
	*($5 + [16]) = $4
	*($5 + [24]) = ($4 + $3)
	$10 = $4
	if ( ((int_32)$3 > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8907])
	$10 = *($5 + [20])
	
.LABEL $label$6
	CALL memcpy($10, $1, [8])
	*($5 + [20]) = ($10 + [8])
	CALL $48(($5 + [16]), $8)
	CALL $48(($5 + [16]), $7)
	CALL $48(($5 + [16]), $9)
	CALL db_update_i64(*($1 + [48]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $3($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [32])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [32])
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($1))
	CALL prints([8321])
	CALL printn(*($1))
	CALL $22($0, $1)
	$0 = ($0 + [32])
	CALL $30($2, $0, *($1), [8338])
	$3 = *($2)
	$1 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( $1) ){ goto $label$1 }
	CALL eosio_assert([0], [8593])
	CALL eosio_assert([0], [8627])
	
.LABEL $label$1
	$4 = CALL db_next_i64(*($1 + [48]), ($2 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $26((CASTING uint_32)(uint_64 $3), $4)
	
.LABEL $label$2
	CALL $33($0, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [44]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8657])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [8702])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [8752])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$17 }
	CALL $10(*(($5 + [40])))
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL $10(*(($5 + [28])))
	if ( (*($5 + [8]) & [1]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL $10(*(($5 + [16])))
	
.LABEL $label$13
	CALL $10($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$18:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$19 }
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$24 }
	CALL $10(*(($8 + [40])))
	if ( ((*($8 + [20]) & [1]) == 0) ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$24
	if ( ((*($8 + [20]) & [1]) == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL $10(*(($8 + [28])))
	if ( (*($8 + [8]) & [1]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL $10(*(($8 + [16])))
	
.LABEL $label$20
	CALL $10($8)
	
.LABEL $label$19
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$18 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [48]))
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *(($1 + [28]))
	$4 = *($1 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	$6 = ($5 + [-24])
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$2 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$6 = *(($5 + [-24]))
	if ( ((int_32)*($6 + [44]) == (int_32)$1) ){ goto $label$4 }
	CALL eosio_assert([0], [8805])
	
.LABEL $label$4
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$1
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)4982480164744069120, $2)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$5 }
	CALL eosio_assert([0], $3)
	
.LABEL $label$5
	$6 = CALL $26($1, $6)
	if ( ((int_32)*($6 + [44]) == (int_32)$1) ){ goto $label$6 }
	CALL eosio_assert([0], [8805])
	
.LABEL $label$6
	*($0 + [4]) = $6
	*($0) = $1
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $21($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $10($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $38 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($3 + [40])))
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $10(*(($3 + [28])))
	if ( (*($3 + [8]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $10(*(($3 + [16])))
	
.LABEL $label$6
	CALL $10($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $10($3)
	
.LABEL $label$1
	return $0
}