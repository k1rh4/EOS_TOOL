(data (i32.const 8192) "-\00")
(data (i32.const 8194) "read flag error: too large\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8307) "read flag error: char < 0\00")
(data (i32.const 8333) "read flag error: char > 9\00")
(data (i32.const 8359) "cannot transfer to self\00")
(data (i32.const 8383) "invalid quantity\00")
(data (i32.const 8400) "eos \e5\86\85\e9\83\a8\e9\94\99\e8\af\af\00%d\00")
(data (i32.const 8420) "not fond game\00")
(data (i32.const 8434) "round not equal\00")
(data (i32.const 8450) "pay is not open\00")
(data (i32.const 8466) "token not match\00%lld\00")
(data (i32.const 8487) "BCC\00%llu\00")
(data (i32.const 8496) "error symbol\00%f\00")
(data (i32.const 8512) "param error\00")
(data (i32.const 8524) "player pledge\00")
(data (i32.const 8538) " \e8\b4\a8\e6\8a\bc\e6\94\b6\e6\ac\be\e5\ae\8c\e6\88\90.....\00")
(data (i32.const 8563) "string is too long to be a valid name\00")
(data (i32.const 8601) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8668) "character is not in allowed character set for names\00")
(data (i32.const 8720) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8771) "error reading iterator\00")
(data (i32.const 8794) "read\00")
(data (i32.const 8799) "get\00")
(data (i32.const 8804) "h\"\00\00")
(data (i32.const 8808) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 8841) "2\00")
(data (i32.const 8843) "\e5\87\ba\e7\ba\b3\e5\90\88\e7\ba\a6\e6\94\b6\e5\88\b0\e6\b8\b8\e6\88\8f\e7\94\a8\e6\88\b7\e8\bd\ac\e8\b4\a6 , from = \00")
(data (i32.const 8890) "\e7\bb\99\e6\b8\b8\e6\88\8f\00")
(data (i32.const 8900) "\e6\94\b6\e6\ac\be\e9\92\b1\e5\8c\85=\00")
(data (i32.const 8914) " \e6\94\b6\e6\ac\be\e9\87\91\e9\a2\9d =\00")
(data (i32.const 8930) "EOS\00")
(data (i32.const 8934) "-%lld.%s %s\00")
(data (i32.const 8946) "%lld.%s %s\00")
(data (i32.const 8957) " \e7\94\a8\e6\88\b7 \00")
(data (i32.const 8966) " \e8\bf\9b\e8\a1\8c\e6\8c\96\e7\9f\bf\e5\85\91\e6\8d\a2 \ef\bc\8c \e9\87\91\e9\a2\9d = \00")
(data (i32.const 9000) "quantity.amount = \00")
(data (i32.const 9019) " proportion = \00")
(data (i32.const 9034) "  result = \00")
(data (i32.const 9046) " real result = \00")
(data (i32.const 9062) " \e5\ba\94\e8\af\a5\e6\94\af\e4\bb\98\e4\bb\a3\e5\b8\81 = \00")
(data (i32.const 9085) "BetCity mining reward for your bet! \e8\bf\99\e6\98\af\e6\82\a8\e4\b8\8b\e6\b3\a8\e5\be\97\e5\88\b0\e7\9a\84\e6\8c\96\e7\9f\bf\e5\a5\96\e5\8a\b1\ef\bc\81https://www.betcity.one\00")
(data (i32.const 9184) " \e6\8c\96\e7\9f\bf\e8\bd\ac\e8\b4\a6\e5\ae\8c\e6\88\90\00")
(data (i32.const 9204) " \e5\ae\8c\e7\bb\93\e5\bd\93\e5\89\8d\e9\98\b6\e6\ae\b5\00")
(data (i32.const 9224) " \e5\bc\80\e5\90\af\e4\b8\8b\e4\b8\80\e9\98\b6\e6\ae\b5\00")
(data (i32.const 9244) " \e6\8c\96\e7\9f\bf\e4\b8\9a\e5\8a\a1\e5\ae\8c\e6\88\90\00")
(data (i32.const 9264) "object passed to modify is not in multi_index\00")
(data (i32.const 9310) "cannot modify objects in table of another contract\00")
(data (i32.const 9361) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9420) "write\00")
(data (i32.const 9426) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9475) "invalid symbol name\00")
(data (i32.const 9495) "object passed to erase is not in multi_index\00")
(data (i32.const 9540) "cannot erase objects in table of another contract\00")
(data (i32.const 9590) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9643) "cannot increment end iterator\00")
(data (i32.const 9673) "cannot pass end iterator to modify\00")
(data (i32.const 9708) "string is too long to be a valid symbol_code\00")
(data (i32.const 9753) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9806) "cannot create objects in table of another contract\00")
(data (i32.const 9857) "  game = \00")
(data (i32.const 9867) "state error\00")
(data (i32.const 9879) "transaction id = \00")
(data (i32.const 9897) " grant from = \00")
(data (i32.const 9912) " to =\00")
(data (i32.const 9918) " quantity = \00")
(data (i32.const 9931) " tokenId = \00")
(data (i32.const 9943) "not fond token\00")
(data (i32.const 9958) "token error\00")
(data (i32.const 9970) "max cutting\00")
(data (i32.const 9982) "send win\00")
(data (i32.const 9991) "\e5\bc\80\e5\a5\96\e8\bd\ac\e8\b4\a6\e5\ae\8c\e6\88\90\00")
(data (i32.const 10010) " id = \00")
(data (i32.const 10017) " \e7\ae\a1\e7\90\86\e5\91\98\e6\b7\bb\e5\8a\a0token\e4\bf\a1\e6\81\af\e5\ae\8c\e6\88\90\00")
(data (i32.const 10051) " \e7\ae\a1\e7\90\86\e5\91\98\e6\9b\b4\e6\96\b0token\e4\bf\a1\e6\81\af\e5\ae\8c\e6\88\90\00")
(data (i32.const 10085) " remove token = \00")
(data (i32.const 10102) "  \e6\9c\aa\e6\89\be\e5\88\b0token\00")
(data (i32.const 10119) "cannot pass end iterator to erase\00")
(data (i32.const 10153) "  \e6\b7\bb\e5\8a\a0\e6\96\b0\e7\9a\84\e7\9f\bf\e6\b1\a0\e4\bf\a1\e6\81\af id = \00")
(data (i32.const 10186) " total = \00")
(data (i32.const 10196) " proportion =\00")
(data (i32.const 10210) "The total amount must be greater than the current amount\00")
(data (i32.const 10267) "  \e6\9b\b4\e6\94\b9\e5\89\8d\e7\9f\bf\e6\b1\a0\e4\bf\a1\e6\81\af total = \00")
(data (i32.const 10300) "  propertion = \00")
(data (i32.const 10316) "  \e6\9b\b4\e6\94\b9\e7\9f\bf\e6\b1\a0\e4\bf\a1\e6\81\af id = \00")
(data (i32.const 10343) " total =\00")
(data (i32.const 10352) " \e6\94\b6\e5\88\b0\e7\94\a8\e6\88\b7 \00")
(data (i32.const 10367) " \e8\b5\8e\e5\9b\9e\e8\b4\a8\e6\8a\bc \00")
(data (i32.const 10382) "not fond id\00")
(data (i32.const 10394) "symbol same\00")
(data (i32.const 10406) "repeat application\00")
(data (i32.const 10425) "time not enough\00")
(data (i32.const 10441) " \e7\bb\99\e7\94\a8\e6\88\b7 \00")
(data (i32.const 10453) " \e5\9b\9e\e9\80\80\e8\b4\a8\e6\8a\bc \00")
(data (i32.const 10468) " \e8\b4\a8\e6\8a\bc\e6\95\b0\e9\87\8f = \00")
(data (i32.const 10485) "BetCity redemption for your! \e8\bf\99\e6\98\af\e9\80\80\e5\9b\9e\e7\bb\99\e4\bd\a0\e7\9a\84\e8\b4\a8\e6\8a\bc\ef\bc\81https://www.betcity.one\00")
(data (i32.const 10568) "  \e6\b8\85\e7\a9\ba\e7\94\a8\e6\88\b7\00")
(data (i32.const 10583) " \e6\95\b0\e6\8d\ae\00")
(data (i32.const 10591) " \e6\9c\aa\e6\89\be\e5\88\b0\e7\94\a8\e6\88\b7\e7\9a\84\e8\b4\a8\e6\8a\bc\e4\bf\a1\e6\81\af\00")
(data (i32.const 10623) "\e5\88\86\e7\ba\a2\e9\97\b4\e9\9a\94\e8\bf\87\e5\b0\8f , \00")
(data (i32.const 10645) "\e7\bb\99\e7\94\a8\e6\88\b7\e5\88\86\e7\ba\a2\00")
(data (i32.const 10661) "\e7\bb\99\e7\94\a8\e6\88\b7\00")
(data (i32.const 10671) " \e5\8f\91\e9\80\81\e5\88\86\e7\ba\a2\00")
(data (i32.const 10685) "BetCity mining reward for your! \e8\bf\99\e6\98\af\e6\82\a8\e5\be\97\e5\88\b0\e7\9a\84\e5\88\86\e7\ba\a2\e5\a5\96\e5\8a\b1\ef\bc\81https://www.betcity.one\00")
(data (i32.const 19200) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "require_auth2" (func $fimport$2 (param i64 i64)))
(import "env" "prints" (func $fimport$3 (param i32)))
(import "env" "eosio_exit" (func $fimport$4 (param i32)))
(import "env" "action_data_size" (func $fimport$5 (result i32)))
(import "env" "read_action_data" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$7 (param i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "send_inline" (func $fimport$9 (param i32 i32)))
(import "env" "prints_l" (func $fimport$10 (param i32 i32)))
(import "env" "printn" (func $fimport$11 (param i64)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$13 (result i64)))
(import "env" "current_receiver" (func $fimport$14 (result i64)))
(import "env" "db_store_i64" (func $fimport$15 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_update_i64" (func $fimport$18 (param i32 i64 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$19 (param i32)))
(import "env" "printui" (func $fimport$20 (param i64)))
(import "env" "send_deferred" (func $fimport$21 (param i32 i64 i32 i32 i32)))
(import "env" "abort" (func $fimport$22))
(import "env" "memset" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$35 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$36 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$39 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$41 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$42 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$43 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $3))
(export "_Znwj" (func $112))
(export "_ZdlPv" (func $114))
(export "_Znaj" (func $113))
(export "_ZdaPv" (func $115))
(export "_ZnwjSt11align_val_t" (func $116))
(export "_ZnajSt11align_val_t" (func $117))
(export "_ZdlPvSt11align_val_t" (func $118))
(export "_ZdaPvSt11align_val_t" (func $119))
(table $0 17 17 anyfunc)
(elem (i32.const 1) $4 $6 $8 $10 $12 $14 $16 $18 $19 $20 $21 $22 $23 $25 $138 $140)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19280))
(global $global$2 i32 (i32.const 19280))


int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9420])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [9420])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9420])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [9420])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9420])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9420])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9420])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9420])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9420])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $85(CALL $84($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $94 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert4()), [9806])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [9420])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)3617211070537531392, $2, (int_64)3617211070537531392, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)3617211070537531392) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)3617211070537531393
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)3617211070537531392
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)3617211070537531392
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $96(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $95 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert4()), [9806])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [9420])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)3617211070537531392, $2, (int_64)3617211070537531392, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)3617211070537531392) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)3617211070537531393
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)3617211070537531392
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)3617211070537531392
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $96(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $90 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $83(*($1), *($0 + [4]))
	CALL $83(*($1), *($0 + [8]))
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9420])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [8771])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8794])
	CALL memcpy($4, $2, [8])
	*($4 + [12]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)3617211070537531392
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)3617211070537531392
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $96(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [9264])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9310])
	*($1) = *(*($3))
	CALL eosio_assert([1], [9361])
	CALL eosio_assert([1], [9420])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)3617211070537531392) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)3617211070537531393
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $138 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $124($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $122 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $130 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $126(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $141(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8482], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $126(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $126(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $131 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $126(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $141(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8491], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $126(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $126(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $132 (int_32 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $126(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $141(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8509], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $126(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $126(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $133 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $134 ()
{
	return [10780]
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_64 .FUNC $136 (float_64 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	float_64 $4
	$1 = ($global$0 - [16])
	if ( ((float_64)$0 == (float_64)(float_64)0) ){ goto $label$1 }
	$2 = (CASTING int_64)(float_64 $0)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)52)) & [2047]
	if ( ((uint_32)$3) > (uint_32)[1074]) ){ goto $label$1 }
	$4 = (float_64))(( ((float_64)((float_64)$0 + (float_64)(float_64)-4503599627370496) + (float_64)(float_64)4503599627370496) ? ((float_64)((float_64)$0 + (float_64)(float_64)4503599627370496) + (float_64)(float_64)-4503599627370496) : ((int_64)$2 < (int_64)0) ) - $0)
	if ( ((uint_32)$3 > (uint_32)[1022]) ){ goto $label$2 }
	*($1 + [8]) = $4
	return (CASTING float_64)(int_32 (CASTING uint_32)(uint_64 (int_64)$2 >> (int_64)63)))
	
.LABEL $label$2
	$0 = ((float_64)$4 + (float_64)$0)
	if ( ((int_32)((float_64)$4 > (float_64)(float_64)0) ^ (int_32)[1]) ){ goto $label$1 }
	$0 = ((float_64)$0 + (float_64)(float_64)-1)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [15] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $139($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $139($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $139($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $139($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19200]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $139($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $139($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $139($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $120 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8771])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [8]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24]) = [0]
	*($5 + [64]) = [0]
	*($5 + [68]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [28])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	*($3 + [64]) = ($5 + [48])
	*($3 + [68]) = ($5 + [56])
	*($3 + [72]) = ($5 + [64])
	CALL $73(($3 + [40]), ($3 + [32]))
	*($5 + [72]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $74(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $126 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $127($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [68])) == (int_32)$0), [9264])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9310])
	*($1 + [56]) = *(*($3))
	$6 = *($1)
	CALL eosio_assert([1], [9361])
	$3 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [50])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [16])
	$9 = ($1 + [56])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $147($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [16]) = $5
	*($5 + [32]) = $7
	*($5 + [52]) = $9
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [8])
	*($5 + [36]) = ($1 + [28])
	*($5 + [40]) = ($1 + [32])
	*($5 + [44]) = ($1 + [40])
	*($5 + [48]) = ($1 + [48])
	*($5 + [56]) = ($1 + [64])
	CALL $102(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [72]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $150($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [64])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL $57($3, $0)
	$0 = *($3)
	$4 = ($0 & [1])
	CALL prints_l(( *($3 + [8]) ? ($3 | [1]) : $4 ), ( *($3 + [4]) ? uint_32($0 >> [1]) : $4 ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$1
	CALL prints($1)
	$1 = *($2)
	$0 = ($1 & [1])
	CALL prints_l(( *($2 + [8]) ? ($2 + [1]) : $0 ), ( *($2 + [4]) ? uint_32($1 >> [1]) : $0 ))
	$global$0 = ($3 + [16])
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($1 + [8])
	$4 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ([-8] - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	$6 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $68($0, ([0] - $3))
	$4 = *(($0 + [4]))
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	
.LABEL $label$2
	*($2) = $3
	*($2 + [8]) = $4
	CALL eosio_assert(((int_32)($4 - $3) > (int_32)[7]), [9420])
	CALL memcpy($3, $1, [8])
	*($2 + [4]) = ($3 + [8])
	CALL $83($2, $6)
	$global$0 = ($2 + [16])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [9264])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9310])
	$6 = *($1)
	$7 = ($1 + [20])
	CALL $123($7, *($3))
	*($1 + [32]) = [1]
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9361])
	$3 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [17])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [8])
	$10 = ($1 + [40])
	$11 = ($1 + [32])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	$12 = *(($1 + [20]))
	$12 = ( *(($1 + [24])) ? uint_32($12 >> [1]) : ($12 & [1]) )
	$3 = ($12 + $3)
	$9 = (CASTING uint_64)(uint_32 $12)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $147($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [16]) = $5
	*($5 + [28]) = $8
	*($5 + [32]) = $7
	*($5 + [36]) = $11
	*($5 + [40]) = $10
	*($5 + [24]) = $1
	CALL $91(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [52]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $150($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [48])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $121($2, ($1 + [8]))
	$5 = *($1 + [20])
	$1 = *($0 + [4])
	$6 = *($1 + [4])
	$0 = (*($0) + int_32($6 >> [1]))
	$1 = *($1)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$6 = CALL $121(($2 + [16]), $4)
	CALL void $0((int_32 $3), (int_64 $6), (int_32 ($5 & [255])), (int_32 $1))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $72($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $125($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $125($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $120($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy(($4 + [24]), *($1 + [4]), [8])
	$0 = (*($1 + [4]) + [8])
	*($1 + [4]) = $0
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $0) > (uint_32)[7]), [8794])
	CALL memcpy(($2 + [8]), *($1 + [4]), [8])
	*(($4 + [32])) = *($2 + [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $46 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = ($0 + [32])
	$6 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$4), [8720])
	$7 = [1]
	if ( ((int_32)*($8 + [32]) == (int_32)[1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)7035938290743115776, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $36($4, $7)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$4), [8720])
	$7 = [1]
	if ( ((int_32)*($8 + [32]) != (int_32)[1]) ){ goto $label$1 }
	
.LABEL $label$2
	$1 = *($0)
	CALL eosio_assert($7, [9673])
	CALL $101($4, $8, $1, ($3 + [8]))
	
.LABEL $label$1
	$global$0 = ($3 + [16])
}

int_64 .FUNC $45 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($3 + [16]) = (int_64)0
	$4 = ($0 + [32])
	*($3 + [16]) = ((int_64)CALL $86($4, *($0), ($3 + [16])) + (int_64)1)
	CALL $87($4, ($3 + [16]), *($0))
	$5 = *($3 + [16])
	CALL prints([9879])
	CALL printui($5)
	$6 = CALL current_time()
	*(($3 + [44])) = (int_64)0
	*(($3 + [60])) = (int_64)0
	*(($3 + [68])) = (int_64)0
	*($3 + [28]) = [0]
	*($3 + [32]) = [0]
	*($3 + [36 align=4]) = (int_64)0
	*($3 + [52 align=4]) = (int_64)0
	*($3 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	CALL $88(($3 + [52]), $2)
	*($3 + [36]) = $1
	$6 = *($0)
	*($3 + [8]) = (int_64)0
	*($3) = $5
	CALL $89(($3 + [80]), ($3 + [16]))
	$0 = *($3 + [80])
	CALL send_deferred($3, $6, $0, (*($3 + [84]) - $0), [0])
	$0 = *($3 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($3 + [84]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $90(($3 + [16]))
	$global$0 = ($3 + [96])
	return $5
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0) = *($1)
	$2 = *(($1 + [8]))
	*(($0 + [20])) = (int_64)0
	*(($0 + [8])) = $2
	*($0 + [16]) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($0 + [16])) = $3
	*(($0 + [24])) = ($3 + ($4 << [4]))
	*(($4 = ($0 + [20]))) = $3
	$5 = *(($1 + [16]))
	$6 = (*(($1 + [20])) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $6)
	*($4) = (*($4) + $6)
	
.LABEL $label$3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$3 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL _Znwj($3)
	*(($0 + [28])) = $4
	*(($0 + [36])) = ($4 + $3)
	*(($3 = ($0 + [32]))) = $4
	$6 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $6, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $133(($0 + [16]))
	
.LABEL $label$1
	CALL $133(($0 + [28]))
	(unreachable)
	return (unreachable)
}

void .FUNC $124 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $128 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $124($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $8 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [160])
	$global$0 = $2
	CALL require_auth2((int_64)4229591879832608048, (int_64)3617214756542218240)
	$3 = ($0 + [152])
	$5 = *(($0 + [180]))
	$4 = *(($0 + [176]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$3), [8720])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [160])), (int_64)-6030912130159137136, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $31($3, $6)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$3), [8720])
	
.LABEL $label$1
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [10382])
	CALL eosio_assert(((uint_64)(int_64))(((int_64)((uint_64)CALL eosio_assert3() / (uint_64)(int_64)1000000) & (int_64)4294967295) - *($7 + [16])) > (uint_64)(int_64)86400), [10425])
	CALL $131(($2 + [24]), *($7 + [24]))
	CALL prints([10441])
	CALL printn(*($7))
	CALL prints([10453])
	$6 = *($2 + [24])
	$5 = ($6 & [1])
	CALL prints_l(( *($2 + [32]) ? (($2 + [24]) | [1]) : $5 ), ( *($2 + [28]) ? uint_32($6 >> [1]) : $5 ))
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($2 + [32])))
	
.LABEL $label$5
	$9 = *(($7 + [24]))
	$6 = CALL $144([8487])
	if ( ($6 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [9708])
	goto $label$8 
	
.LABEL $label$9
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$10 = (int_64)0
	
.LOOP $label$10:
	$5 = *(($6 + [8486]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [9753])
	
.LABEL $label$11
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$10 }
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)4)
	goto $label$6 
	
.LABEL $label$7
	$10 = (int_64)4
	
.LABEL $label$6
	*($2 + [128]) = $9
	*($2 + [136]) = $10
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9426])
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$9 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$10 = $9
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$10 = $9
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$16 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$5 = [0]
	
.LABEL $label$12
	CALL eosio_assert($5, [9475])
	CALL prints([10468])
	CALL $57(($2 + [24]), ($2 + [128]))
	$6 = *($2 + [24])
	$5 = ($6 & [1])
	CALL prints_l(( *($2 + [32]) ? (($2 + [24]) | [1]) : $5 ), ( *($2 + [28]) ? uint_32($6 >> [1]) : $5 ))
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($2 + [32])))
	
.LABEL $label$17
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = (int_64)4229591880143016192
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	$6 = CALL $144([10485])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$21 }
	*($2 + [8]) = ($6 << [1])
	$5 = (($2 + [8]) | [1])
	if ( $6 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [8]) = ($4 | [1])
	*($2 + [16]) = $5
	*($2 + [12]) = $6
	
.LABEL $label$20
	CALL memcpy($5, [10485], $6)
	
.LABEL $label$19
	*(($5 + $6)) = [0]
	$10 = *($7)
	*(($2 + [48])) = *((($2 + [128]) + [8]))
	$6 = (($2 + [8]) + [8])
	*(($2 + [64])) = *($6)
	*($6) = [0]
	*($2 + [24]) = (int_64)4229591880143016192
	$9 = *($2 + [8])
	*($2 + [8]) = (int_64)0
	*($2 + [40]) = *($2 + [128])
	*($2 + [56]) = $9
	*($2 + [32]) = $10
	$6 = CALL $34(($2 + [88]), ($2 + [72]), (int_64)4229591880157107504, (int_64)-3617168760277827584, ($2 + [24]))
	CALL $35(($2 + [144]), $6)
	$5 = *($2 + [144])
	CALL send_inline($5, (*($2 + [148]) - $5))
	$5 = *($2 + [144])
	if ( ($5 == 0) ){ goto $label$22 }
	*($2 + [148]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$22
	$5 = *($6 + [28])
	if ( ($5 == 0) ){ goto $label$23 }
	*(($6 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$23
	$5 = *($6 + [16])
	if ( ($5 == 0) ){ goto $label$24 }
	*(($6 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$24
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$25
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$26
	$10 = *($0)
	CALL eosio_assert($8, [9673])
	CALL $60($3, $7, $10, ($2 + [24]))
	if ( ((int_64)*($7 + [8]) != (int_64)0) ){ goto $label$28 }
	if ( ((int_64)*(($7 + [24])) == (int_64)0) ){ goto $label$27 }
	
.LABEL $label$28
	$global$0 = ($2 + [160])
	return 
	
.LABEL $label$27
	CALL eosio_assert($8, [10119])
	CALL eosio_assert($8, [9643])
	$6 = CALL db_next_i64(*($7 + [44]), ($2 + [24]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$29 }
	CALL $31($3, $6)
	
.LABEL $label$29
	CALL $61($3, $7)
	CALL prints([10568])
	CALL printn($1)
	CALL prints([10583])
	$global$0 = ($2 + [160])
	return (unreachable)
	
.LABEL $label$18
	CALL $120(($2 + [8]))
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [200]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8794])
	CALL memcpy(($4 + [200]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*($4 + [160]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [200])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $150($2)
	
.LABEL $label$5
	CALL $29(($4 + [8]))
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC $6 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4, int_64 $5, int_32 $6)
{
	CALL require_auth2((int_64)4229591879832608048, (int_64)3617214756542218240)
	CALL $52($0, $1, $2, $3, $4, $5, $6)
}

int_32 .FUNC $7 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [336])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [248]))) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [256]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [272]) = (int_64)0
	*($4 + [280]) = [0]
	*($4 + [220]) = $2
	*($4 + [216]) = $2
	*($4 + [224]) = ($2 + $7)
	*($4 + [304]) = ($4 + [216])
	*($4 + [24]) = ($4 + [232])
	CALL $51(($4 + [24]), ($4 + [304]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [224])
	*($4 + [8]) = *($4 + [216])
	$9 = *($3)
	*((($4 + [320]) + [8])) = $9
	*(($3 = (($4 + [288]) + [8]))) = $9
	$10 = *($4 + [8])
	*($4 + [288]) = $10
	*($4 + [320]) = $10
	$11 = *($3)
	*(($9 = (($4 + [304]) + [8]))) = $11
	*(($4 + [48])) = $11
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [288])
	*($4 + [40]) = $1
	*($4 + [304]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	*($3) = *($8)
	*($4 + [288]) = *($4 + [240])
	$0 = *($4 + [232])
	$1 = *($4 + [256])
	$10 = *($4 + [264])
	$12 = *($4 + [272])
	$8 = *($4 + [280])
	*($9) = *($3)
	*($4 + [304]) = *($4 + [288])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ($4 + [304])), (int_32 $1), (int_64 $10), (int_64 $12), (int_64 ($8 & [255])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $150($2)
	
.LABEL $label$5
	CALL $29(($4 + [24]))
	$global$0 = ($4 + [336])
	return [1]
}

void .FUNC $4 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$5 = ($global$0 - [240])
	$global$0 = $5
	*($5 + [216]) = $1
	$6 = CALL $121(($5 + [200]), $4)
	CALL require_auth2($1, (int_64)3617214756542218240)
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [8359])
	$7 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$1 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $9
	$7 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8383])
	if ( ((*($6) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$6
	$7 = [0]
	*($5 + [192]) = [0]
	*($5 + [184]) = (int_64)0
	CALL $1($4, ($5 + [184]))
	$4 = CALL $121(($5 + [168]), *($5 + [184]))
	if ( (*($4) & [1]) ){ goto $label$9 }
	$8 = ($4 + [1])
	goto $label$8 
	
.LABEL $label$9
	$8 = *($4 + [8])
	if ( ($8 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$10 = CALL $144($8)
	CALL eosio_assert(((int_32)$10 < (int_32)[20]), [8194])
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$7 }
	$1 = (int_64)0
	
.LOOP $label$10:
	$7 = *($8)
	CALL eosio_assert(((int_32)$7 > (int_32)[47]), [8307])
	CALL eosio_assert(((int_32)$7 < (int_32)[58]), [8333])
	$1 = ((int_64)((int_64)$1 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 ($7 + [-48])) & (int_64)255))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$10 }
	$7 = (CASTING uint_32)(uint_64 $1)
	
.LABEL $label$7
	if ( ((*($4) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$11
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$14 }
	$8 = ($7 & [255])
	if ( ((int_32)$8 == (int_32)[2]) ){ goto $label$24 }
	if ( ((int_32)$8 != (int_32)[1]) ){ goto $label$14 }
	$8 = *($5 + [184])
	$7 = *($8 + [24])
	if ( ($7 & [1]) ){ goto $label$23 }
	$7 = uint_32($7 >> [1])
	$8 = (($8 + [24]) + [1])
	goto $label$22 
	
.LABEL $label$24
	$8 = CALL $144([8487])
	if ( ($8 <= [8]) ){ goto $label$21 }
	CALL eosio_assert([0], [9708])
	goto $label$20 
	
.LABEL $label$23
	$7 = *(($8 + [28]))
	$8 = *(($8 + [32]))
	
.LABEL $label$22
	*($5 + [164]) = $7
	*($5 + [160]) = $8
	*($5) = *($5 + [160])
	$11 = CALL $30(($5 + [24]), $5)
	CALL is_account(*($11))
	CALL require_auth2((int_64)4229591880032465776, (int_64)3617214756542218240)
	$4 = CALL $121(($5 + [144]), (*($5 + [184]) + [12]))
	if ( (*($4) & [1]) ){ goto $label$26 }
	$10 = [1]
	$8 = ($4 + [1])
	$7 = CALL $144($8)
	if ( ((int_32)$7 >= (int_32)[1]) ){ goto $label$25 }
	goto $label$19 
	
.LABEL $label$26
	$8 = *($4 + [8])
	if ( ($8 == 0) ){ goto $label$19 }
	$10 = [1]
	$7 = CALL $144($8)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$19 }
	
.LABEL $label$25
	$9 = (int_64)0
	
.LOOP $label$27:
	$1 = *($8)
	CALL eosio_assert(((int_64)$1 > (int_64)47), [8307])
	CALL eosio_assert(((int_64)$1 < (int_64)58), [8333])
	$8 = ($8 + $10)
	$9 = ((int_64)((int_64)$1 + (int_64)((int_64)$9 * (int_64)10)) + (int_64)-48)
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$27 }
	if ( ((*($4) & [1]) == 0) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$21
	if ( ($8 == 0) ){ goto $label$18 }
	
.LABEL $label$20
	$1 = (int_64)0
	
.LOOP $label$28:
	$7 = *(($8 + [8486]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$29 }
	CALL eosio_assert([0], [9753])
	
.LABEL $label$29
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$28 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$17 
	
.LABEL $label$19
	$9 = (int_64)0
	if ( (*($4) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$1 = (int_64)4
	
.LABEL $label$17
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$1), [8496])
	CALL eosio_assert(((uint_32)((int_32)(*($5 + [188]) - *($5 + [184])) / (int_32)[12]) > (uint_32)[1]), [8512])
	$6 = ($0 + [152])
	$1 = *($5 + [216])
	$7 = *(($0 + [180]))
	$4 = *(($0 + [176]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$33 }
	
.LOOP $label$35:
	$8 = ($7 + [-24])
	$10 = *($8)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$34 }
	$7 = $8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$34
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$33 }
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)$6), [8720])
	goto $label$32 
	
.LABEL $label$33
	$8 = CALL db_find_i64(*($6), *(($0 + [160])), (int_64)-6030912130159137136, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$31 }
	$10 = CALL $31($6, $8)
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)$6), [8720])
	
.LABEL $label$32
	$1 = *($0)
	*($5 + [24]) = $3
	CALL eosio_assert([1], [9673])
	CALL $32($6, $10, $1, ($5 + [24]))
	goto $label$30 
	
.LABEL $label$31
	$1 = *($0)
	*($5 + [28]) = $3
	*($5 + [24]) = ($5 + [216])
	CALL $33(($5 + [88]), $6, $1, ($5 + [24]))
	
.LABEL $label$30
	*($5 + [80]) = (int_64)3617214756542218240
	$1 = *($0)
	*($5 + [72]) = $1
	*(($5 + [16])) = [0]
	*($5 + [8]) = (int_64)0
	$8 = CALL $144([8524])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$36 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$39 }
	*($5 + [8]) = ($8 << [1])
	$7 = (($5 + [8]) | [1])
	if ( $8 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$10 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($10)
	*($5 + [8]) = ($10 | [1])
	*($5 + [16]) = $7
	*($5 + [12]) = $8
	
.LABEL $label$38
	CALL memcpy($7, [8524], $8)
	
.LABEL $label$37
	*(($7 + $8)) = [0]
	*(($5 + [48])) = *(($3 + [8]))
	$8 = (($5 + [8]) + [8])
	*(($5 + [64])) = *($8)
	*($8) = [0]
	*($5 + [32]) = (int_64)4229591880143016192
	*($5 + [24]) = $1
	*($5 + [40]) = *($3)
	*($5 + [56]) = *($5 + [8])
	*($5 + [8]) = (int_64)0
	$8 = CALL $34(($5 + [88]), ($5 + [72]), (int_64)4229591880157107504, (int_64)-3617168760277827584, ($5 + [24]))
	CALL $35(($5 + [224]), $8)
	$7 = *($5 + [224])
	CALL send_inline($7, (*($5 + [228]) - $7))
	$7 = *($5 + [224])
	if ( ($7 == 0) ){ goto $label$40 }
	*($5 + [228]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$40
	$7 = *($8 + [28])
	if ( ($7 == 0) ){ goto $label$41 }
	*(($8 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$41
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$42 }
	*(($8 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$42
	if ( ((*(($5 + [56])) & [1]) == 0) ){ goto $label$43 }
	CALL _ZdlPv(*(($5 + [64])))
	
.LABEL $label$43
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$44 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$44
	CALL prints([8538])
	$10 = *($5 + [184])
	if ( ($10 == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$36
	CALL $120(($5 + [8]))
	
.LABEL $label$16
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$15
	$6 = ($0 + [32])
	$7 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$46 }
	
.LOOP $label$48:
	$8 = ($7 + [-24])
	$10 = *($8)
	if ( ((int_64)*($10) == (int_64)$9) ){ goto $label$47 }
	$7 = $8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$46 }
	CALL eosio_assert(((int_32)*($10 + [48]) == (int_32)$6), [8720])
	goto $label$45 
	
.LABEL $label$46
	$10 = [0]
	$8 = CALL db_find_i64(*($6), *(($0 + [40])), (int_64)7035938290743115776, $9)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$45 }
	$10 = CALL $36($6, $8)
	CALL eosio_assert(((int_32)*($10 + [48]) == (int_32)$6), [8720])
	
.LABEL $label$45
	$6 = [0]
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [8420])
	$8 = ($8 & [1])
	$8 = *($10 + [20])
	$13 = ($8 & [1])
	$8 = *($4 + [36])
	$12 = uint_32($8 >> [1])
	$4 = *($5 + [184])
	$14 = ( *(($4 + [40])) ? $12 : $13 )
	if ( ((int_32)$14 != (int_32)( *(($10 + [24])) ? uint_32($8 >> [1]) : $8 )) ){ goto $label$49 }
	$8 = ( *(($10 + [28])) ? (($10 + [20]) + [1]) : $8 )
	$7 = (($4 + [36]) + [1])
	if ( $13 ){ goto $label$52 }
	if ( ($14 == 0) ){ goto $label$51 }
	$4 = ([0] - $12)
	
.LOOP $label$53:
	if ( ((int_32)*($7) != (int_32)*($8)) ){ goto $label$50 }
	$6 = [1]
	$8 = ($8 + [1])
	$7 = ($7 + [1])
	$4 = ($4 + [1])
	if ( $4 ){ goto $label$53 }
	goto $label$49 
	
.LABEL $label$52
	if ( ($14 == 0) ){ goto $label$51 }
	$6 = (CALL $143(( *(($4 + [44])) ? $7 : $13 ), $8, $14) == 0)
	goto $label$49 
	
.LABEL $label$51
	$6 = [1]
	goto $label$49 
	
.LABEL $label$50
	$6 = [0]
	
.LABEL $label$49
	CALL eosio_assert($6, [8434])
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)[1]), [8450])
	$1 = CALL $37($0, *($0 + [8]), *($3 + [8]))
	$6 = ($0 + [72])
	$7 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$55 }
	
.LOOP $label$57:
	$8 = ($7 + [-24])
	$10 = *($8)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$56 }
	$7 = $8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$57 }
	goto $label$55 
	
.LABEL $label$56
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$55 }
	CALL eosio_assert(((int_32)*(($10 + [68])) == (int_32)$6), [8720])
	goto $label$54 
	
.LABEL $label$55
	$10 = [0]
	$8 = CALL db_find_i64(*($6), *(($0 + [80])), (int_64)-3665743296614203392, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$54 }
	$10 = CALL $38($6, $8)
	CALL eosio_assert(((int_32)*($10 + [68]) == (int_32)$6), [8720])
	
.LABEL $label$54
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [8466])
	CALL $131(($5 + [128]), $9)
	CALL $39($0, ($5 + [128]), *($11), *($10 + [8]), (int_64)4229591879931537296, $3)
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($5 + [136]))
	
.LABEL $label$14
	$10 = *($5 + [184])
	if ( $10 ){ goto $label$12 }
	
.LABEL $label$13
	$global$0 = ($5 + [240])
	return 
	
.LABEL $label$12
	$7 = *($5 + [188])
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$59 }
	
.LOOP $label$60:
	$8 = ($7 + [-12])
	if ( ((*($8) & [1]) == 0) ){ goto $label$61 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$61
	$7 = $8
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$60 }
	$8 = *($5 + [184])
	goto $label$58 
	
.LABEL $label$59
	$8 = $10
	
.LABEL $label$58
	*($5 + [188]) = $10
	CALL _ZdlPv($8)
	$global$0 = ($5 + [240])
	(unreachable)
}

int_32 .FUNC $5 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [336])
	$global$0 = $3
	*(($4 = $3) + [280]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [232]) + [24])) = (int_64)0
	*((($4 + [232]) + [40])) = [0]
	*($4 + [240]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [248]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [220]) = $2
	*($4 + [216]) = $2
	*($4 + [224]) = ($2 + $5)
	*($4 + [320]) = ($4 + [216])
	*($4 + [24]) = ($4 + [232])
	CALL $27(($4 + [24]), ($4 + [320]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [224])
	*($4 + [8]) = *($4 + [216])
	$3 = *($3)
	*((($4 + [288]) + [8])) = $3
	*(($6 = (($4 + [304]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [304]) = $7
	*($4 + [288]) = $7
	$3 = *($6)
	*((($4 + [320]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [304])
	*($4 + [40]) = $1
	*($4 + [320]) = $1
	*((($4 + [24]) + [40])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	*($4 + [324]) = ($4 + [280])
	*($4 + [320]) = ($4 + [24])
	CALL $28(($4 + [320]), ($4 + [232]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $150($2)
	
.LABEL $label$4
	CALL $29(($4 + [24]))
	if ( ((*($4 + [264]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [272])))
	
.LABEL $label$5
	$global$0 = ($4 + [336])
	return [1]
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)6138663577826885632) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-6569208335818555392) ){ goto $label$1 }
	CALL prints([8400])
	CALL $135([0])
	$global$0 = ($3 + [224])
	return (unreachable)
	
.LABEL $label$1
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [1]
	*($3 + [104]) = *($3 + [216])
	CALL $5($0, $1, ($3 + [104]))
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$3 }
	if ( ((int_64)$2 <= (int_64)4929617502180212735) ){ goto $label$15 }
	if ( ((int_64)$2 <= (int_64)5935068360186986495) ){ goto $label$14 }
	if ( ((int_64)$2 > (int_64)7335585922869624831) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)5935068360186986496) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)5935072309878980608) ){ goto $label$3 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [2]
	*($3 + [40]) = *($3 + [168])
	CALL $7($1, $1, ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$15
	if ( ((int_64)$2 > (int_64)-4997502813781973505) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)-6533262907872903168) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-6029028902599393280) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-5002750044145401856) ){ goto $label$3 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [3]
	*($3 + [80]) = *($3 + [128])
	CALL $9($1, $1, ($3 + [80]))
	CALL eosio_exit([0])
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)4929617502180212736) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)5455799419163115520) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)5935064923599011840) ){ goto $label$3 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [4]
	*($3 + [32]) = *($3 + [176])
	CALL $11($1, $1, ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)-4997502813781973504) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)3626127147771679232) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)4730614994944370992) ){ goto $label$3 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [5]
	*($3 + [64]) = *($3 + [144])
	CALL $13($1, $1, ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)7335585922869624832) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)8423608866201305088) ){ goto $label$3 }
	*($3 + [196]) = [0]
	*($3 + [192]) = [6]
	*($3 + [16]) = *($3 + [192])
	CALL $15($1, $1, ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$11
	*($3 + [156]) = [0]
	*($3 + [152]) = [7]
	*($3 + [56]) = *($3 + [152])
	CALL $17($1, $1, ($3 + [56]))
	CALL eosio_exit([0])
	
.LABEL $label$10
	*($3 + [212]) = [0]
	*($3 + [208]) = [8]
	*($3) = *($3 + [208])
	CALL $11($1, $1, $3)
	CALL eosio_exit([0])
	
.LABEL $label$9
	*($3 + [140]) = [0]
	*($3 + [136]) = [9]
	*($3 + [72]) = *($3 + [136])
	CALL $13($1, $1, ($3 + [72]))
	CALL eosio_exit([0])
	
.LABEL $label$8
	*($3 + [204]) = [0]
	*($3 + [200]) = [10]
	*($3 + [8]) = *($3 + [200])
	CALL $15($1, $1, ($3 + [8]))
	CALL eosio_exit([0])
	
.LABEL $label$7
	*($3 + [124]) = [0]
	*($3 + [120]) = [11]
	*($3 + [88]) = *($3 + [120])
	CALL $13($1, $1, ($3 + [88]))
	CALL eosio_exit([0])
	
.LABEL $label$6
	*($3 + [164]) = [0]
	*($3 + [160]) = [12]
	*($3 + [48]) = *($3 + [160])
	CALL $13($1, $1, ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$5
	*($3 + [116]) = [0]
	*($3 + [112]) = [13]
	*($3 + [96]) = *($3 + [112])
	CALL $24($1, $1, ($3 + [96]))
	CALL eosio_exit([0])
	
.LABEL $label$4
	*($3 + [188]) = [0]
	*($3 + [184]) = [14]
	*($3 + [24]) = *($3 + [184])
	CALL $26($1, $1, ($3 + [24]))
	
.LABEL $label$3
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$2 = ($global$0 - [32])
	$global$0 = $2
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	$3 = CALL $144([8192])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($2 + [16]) = ($3 << [1])
	$4 = (($2 + [16]) | [1])
	$5 = $4
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2 + [16]) = ($6 | [1])
	*($2 + [24]) = $5
	*($2 + [20]) = $3
	$4 = (($2 + [16]) | [1])
	
.LABEL $label$3
	CALL memcpy($5, [8192], $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	$7 = ($0 + [1])
	$5 = [0]
	$6 = ($3 & [1])
	$3 = *($2 + [16])
	$3 = ( *($2 + [20]) ? uint_32($3 >> [1]) : $6 )
	if ( ($3 == 0) ){ goto $label$8 }
	$8 = ($5 & [1])
	$5 = *($0)
	$5 = ( *($0 + [4]) ? uint_32($5 >> [1]) : $8 )
	if ( ((int_32)$5 < (int_32)$3) ){ goto $label$7 }
	$9 = ( *($0 + [8]) ? $7 : $8 )
	$10 = ($9 + $5)
	$11 = ( *($2 + [24]) ? $4 : $6 )
	$8 = *($11)
	$6 = $9
	
.LOOP $label$9:
	$5 = (($5 - $3) + [1])
	if ( ($5 == 0) ){ goto $label$7 }
	$5 = CALL $142($6, $8, $5)
	if ( ($5 == 0) ){ goto $label$7 }
	if ( (CALL $143($5, $11, $3) == 0) ){ goto $label$10 }
	$6 = ($5 + [1])
	$5 = ($10 - $6)
	if ( ((int_32)$5 >= (int_32)$3) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$7 }
	$5 = ($5 - $9)
	if ( ((int_32)$5 == (int_32)[-1]) ){ goto $label$7 }
	
.LABEL $label$8
	$12 = ($1 + [8])
	$13 = ($1 + [4])
	$8 = [0]
	
.LOOP $label$11:
	$6 = CALL $122($2, $0, $8, ($5 - $8), $0)
	$3 = *($13)
	if ( ((uint_32)$3 >= (uint_32)*($12)) ){ goto $label$13 }
	*($3) = *($2)
	$3 = ($2 + [8])
	*(($3 + [8])) = *($3)
	*($3) = [0]
	*($13) = (*($13) + [12])
	*($2) = (int_64)0
	goto $label$12 
	
.LABEL $label$13
	CALL $2($1, $6)
	if ( ((*($2) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$12
	$9 = ($3 & [1])
	$3 = *($2 + [16])
	$3 = ( *($2 + [20]) ? uint_32($3 >> [1]) : $9 )
	$8 = ($3 + $5)
	$6 = ($3 & [1])
	$3 = *($0)
	$11 = ( *(($0 + [4])) ? uint_32($3 >> [1]) : $6 )
	if ( ($11 <= $8) ){ goto $label$14 }
	$5 = $8
	if ( ($3 == 0) ){ goto $label$15 }
	$6 = ($14 + $8)
	$14 = ( *(($0 + [8])) ? $7 : $6 )
	$10 = ($14 + $11)
	$5 = ($10 - $6)
	if ( ((int_32)$5 < (int_32)$3) ){ goto $label$14 }
	$9 = ( *((($2 + [16]) + [8])) ? $4 : $9 )
	$11 = *($9)
	
.LOOP $label$16:
	$5 = (($5 - $3) + [1])
	if ( ($5 == 0) ){ goto $label$14 }
	$5 = CALL $142($6, $11, $5)
	if ( ($5 == 0) ){ goto $label$14 }
	if ( (CALL $143($5, $9, $3) == 0) ){ goto $label$17 }
	$6 = ($5 + [1])
	$5 = ($10 - $6)
	if ( ((int_32)$5 >= (int_32)$3) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$14 }
	$5 = ($5 - $14)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)[-1]) ){ goto $label$11 }
	
.LABEL $label$14
	$3 = CALL $122($2, $0, $8, [-1], $0)
	$5 = *($1 + [4])
	if ( ((uint_32)$5 >= (uint_32)*($1 + [8])) ){ goto $label$18 }
	*($5) = *($2)
	*(($5 + [8])) = *(($2 + [8]))
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	*(($3 = ($1 + [4]))) = (*($3) + [12])
	if ( (*($2 + [16]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$18
	CALL $2($1, $3)
	if ( ((*($2) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$7
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$5
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $120(($2 + [16]))
}

void .FUNC $14 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth2(*($0), (int_64)3617214756542218240)
	$2 = CALL $121($3, $2)
	CALL $46($0, $1, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $15 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [248])) = [0]
	*($4 + [232]) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [224]) = ($2 + $7)
	*($4 + [216]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8794])
	CALL memcpy(($4 + [232]), $2, [8])
	*($4 + [220]) = ($2 + [8])
	$8 = (($4 + [232]) + [8])
	CALL $40(($4 + [216]), $8)
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [224])
	*($4 + [8]) = *($4 + [216])
	$3 = *($3)
	*((($4 + [256]) + [8])) = $3
	*(($9 = (($4 + [272]) + [8]))) = $3
	$10 = *($4 + [8])
	*($4 + [272]) = $10
	*($4 + [256]) = $10
	$3 = *($9)
	*((($4 + [288]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [272])
	*($4 + [40]) = $1
	*($4 + [288]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [232])
	$8 = CALL $121(($4 + [272]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $121(($4 + [288]), $8)
	CALL void $3((int_32 $0), (int_64 $5), (int_32 $6))
	if ( (*($4 + [288]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [272]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [272]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($8 + [8]))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $150($2)
	
.LABEL $label$5
	CALL $29(($4 + [24]))
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [248])))
	
.LABEL $label$10
	$global$0 = ($4 + [304])
	return [1]
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [64]) = $2
	*($4 + [72]) = $1
	*($4 + [63]) = $3
	CALL require_auth2((int_64)4229591879832608048, (int_64)3617214756542218240)
	$5 = ($0 + [112])
	$7 = *(($0 + [140]))
	$6 = *(($0 + [136]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$12 }
	
.LOOP $label$14:
	$3 = ($7 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$13 }
	$7 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(($8 + [28])) == (int_32)$5), [8720])
	if ( $8 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$3 = CALL db_find_i64(*($5), *(($0 + [120])), (int_64)-7807363788000198656, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$10 }
	$8 = CALL $54($5, $3)
	CALL eosio_assert(((int_32)*($8 + [28]) == (int_32)$5), [8720])
	
.LABEL $label$11
	CALL eosio_assert(((uint_64)*($8 + [16]) <= (uint_64)((int_64)$2 * (int_64)10000)), [10210])
	CALL $131(($4 + [40]), *($8 + [8]))
	CALL $129(($4 + [24]), *($8 + [24]))
	CALL prints([10267])
	$3 = *($4 + [40])
	$7 = ($3 & [1])
	CALL prints_l(( *($4 + [48]) ? (($4 + [40]) | [1]) : $7 ), ( *($4 + [44]) ? uint_32($3 >> [1]) : $7 ))
	CALL prints([10300])
	$3 = *($4 + [24])
	$7 = ($3 & [1])
	CALL prints_l(( *($4 + [32]) ? (($4 + [24]) | [1]) : $7 ), ( *($4 + [28]) ? uint_32($3 >> [1]) : $7 ))
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [32])))
	
.LABEL $label$15
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($4 + [48])))
	
.LABEL $label$16
	$1 = *($0)
	*($4 + [44]) = ($4 + [63])
	*($4 + [40]) = ($4 + [64])
	CALL eosio_assert([1], [9673])
	CALL $55($5, $8, $1, ($4 + [40]))
	CALL $131(($4 + [40]), *($4 + [72]))
	CALL $131(($4 + [24]), *(($8 + [8])))
	CALL $129(($4 + [8]), *(($8 + [24])))
	CALL prints([10316])
	$3 = *($4 + [40])
	$7 = ($3 & [1])
	CALL prints_l(( *($4 + [48]) ? (($4 + [40]) | [1]) : $7 ), ( *($4 + [44]) ? uint_32($3 >> [1]) : $7 ))
	CALL prints([10343])
	$3 = *($4 + [24])
	$7 = ($3 & [1])
	CALL prints_l(( *($4 + [32]) ? (($4 + [24]) | [1]) : $7 ), ( *($4 + [28]) ? uint_32($3 >> [1]) : $7 ))
	CALL prints([9019])
	$3 = *($4 + [8])
	$7 = ($3 & [1])
	CALL prints_l(( *($4 + [16]) ? (($4 + [8]) | [1]) : $7 ), ( *($4 + [12]) ? uint_32($3 >> [1]) : $7 ))
	if ( (*($4 + [8]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [24]) & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$10
	*($4 + [62]) = ( [1] ? [2] : ((int_64)$1 == (int_64)1) )
	$1 = *($0)
	*($4 + [44]) = ($4 + [64])
	*($4 + [40]) = ($4 + [72])
	*($4 + [48]) = ($4 + [63])
	*($4 + [52]) = ($4 + [62])
	CALL $56(($4 + [24]), $5, $1, ($4 + [40]))
	CALL $131(($4 + [40]), *($4 + [72]))
	CALL $131(($4 + [24]), *($4 + [64]))
	CALL $129(($4 + [8]), *($4 + [63]))
	CALL prints([10153])
	$3 = *($4 + [40])
	$7 = ($3 & [1])
	CALL prints_l(( *($4 + [48]) ? (($4 + [40]) | [1]) : $7 ), ( *($4 + [44]) ? uint_32($3 >> [1]) : $7 ))
	CALL prints([10186])
	$3 = *($4 + [24])
	$7 = ($3 & [1])
	CALL prints_l(( *($4 + [32]) ? (($4 + [24]) | [1]) : $7 ), ( *($4 + [28]) ? uint_32($3 >> [1]) : $7 ))
	CALL prints([10196])
	$3 = *($4 + [8])
	$7 = ($3 & [1])
	CALL prints_l(( *($4 + [16]) ? (($4 + [8]) | [1]) : $7 ), ( *($4 + [12]) ? uint_32($3 >> [1]) : $7 ))
	if ( (*($4 + [8]) & [1]) ){ goto $label$7 }
	if ( (*($4 + [24]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$9
	CALL _ZdlPv(*((($4 + [8]) + [8])))
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [32])))
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$7
	CALL _ZdlPv(*(($4 + [16])))
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [32])))
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$1 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$4
	CALL _ZdlPv(*(($4 + [48])))
	goto $label$1 
	
.LABEL $label$3
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*(($4 + [48])))
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [224])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [208]) = (int_64)0
	*($4 + [200]) = (int_64)0
	*($4 + [216]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8794])
	CALL memcpy(($4 + [200]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8794])
	CALL memcpy((($4 + [200]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [8794])
	CALL memcpy((($4 + [200]) + [16]), ($2 + [16]), [1])
	*(($4 + [28])) = ($2 + [17])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*($4 + [160]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$8 = *($4 + [216])
	$0 = *($4 + [208])
	$1 = *($4 + [200])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($8 & [255])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $150($2)
	
.LABEL $label$5
	CALL $29(($4 + [8]))
	$global$0 = ($4 + [224])
	return [1]
}

void .FUNC $10 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL require_auth2((int_64)4229591879832608048, (int_64)3617214756542218240)
	$2 = CALL $121($4, $2)
	CALL $50($0, $1, $2, $3)
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $11 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [304])
	$global$0 = $3
	*(($4 = $3) + [248]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [240])) = [0]
	*($4 + [224]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [244]) = [0]
	*($4 + [216]) = ($2 + $5)
	*($4 + [208]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8794])
	CALL memcpy(($4 + [224]), $2, [8])
	*($4 + [212]) = ($2 + [8])
	CALL $40(($4 + [208]), (($4 + [224]) + [8]))
	CALL eosio_assert(((int_32)*($4 + [216]) != (int_32)*($4 + [212])), [8794])
	CALL memcpy(($4 + [244]), *($4 + [212]), [1])
	*($4 + [212]) = (*($4 + [212]) + [1])
	*(($3 = ($4 + [8]))) = *($4 + [216])
	*($4) = *($4 + [208])
	$3 = *($3)
	*((($4 + [256]) + [8])) = $3
	*(($6 = (($4 + [272]) + [8]))) = $3
	$7 = *($4)
	*($4 + [272]) = $7
	*($4 + [256]) = $7
	$3 = *($6)
	*((($4 + [288]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [272])
	*($4 + [32]) = $1
	*($4 + [288]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*($4 + [292]) = ($4 + [248])
	*($4 + [288]) = ($4 + [16])
	CALL $41(($4 + [288]), ($4 + [224]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $150($2)
	
.LABEL $label$4
	CALL $29(($4 + [16]))
	if ( ((*($4 + [232]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [240])))
	
.LABEL $label$5
	$global$0 = ($4 + [304])
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth2($1, (int_64)3617214756542218240)
	$4 = CALL $144([8487])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9708])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($4 + [8486]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9753])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$5), [8496])
	CALL prints([10352])
	CALL printn($1)
	CALL prints([10367])
	CALL $57($3, $2)
	$4 = *($3)
	$6 = ($4 & [1])
	CALL prints_l(( *($3 + [8]) ? ($3 | [1]) : $6 ), ( *($3 + [4]) ? uint_32($4 >> [1]) : $6 ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$7
	$7 = ($0 + [152])
	$6 = *(($0 + [180]))
	$8 = *(($0 + [176]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$11:
	$4 = ($6 + [-24])
	$9 = *($4)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$10 }
	$6 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)$7), [8720])
	goto $label$8 
	
.LABEL $label$9
	$9 = [0]
	$4 = CALL db_find_i64(*($7), *(($0 + [160])), (int_64)-6030912130159137136, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$9 = CALL $31($7, $4)
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)$7), [8720])
	
.LABEL $label$8
	$8 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($8, [10382])
	$4 = CALL $144([8487])
	if ( ($4 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [9708])
	goto $label$14 
	
.LABEL $label$15
	if ( ($4 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$5 = (int_64)0
	
.LOOP $label$16:
	$6 = *(($4 + [8486]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [9753])
	
.LABEL $label$17
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$16 }
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$5 = (int_64)4
	
.LABEL $label$12
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)$5), [10394])
	CALL eosio_assert(((uint_64)*($9 + [8]) >= (uint_64)*($2)), [10406])
	$5 = *($0)
	*($3) = $2
	CALL eosio_assert($8, [9673])
	CALL $58($7, $9, $5, $3)
	$global$0 = ($3 + [16])
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [200]) + [16]))) = (int_64)0
	*($4 + [208]) = (int_64)0
	*($4 + [200]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8794])
	CALL memcpy(($4 + [200]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [8794])
	CALL memcpy((($4 + [200]) + [8]), ($2 + [8]), [8])
	*($4 + [8]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [8794])
	CALL memcpy(($4 + [8]), ($2 + [16]), [8])
	*($3) = *($4 + [8])
	*(($4 + [28])) = ($2 + [24])
	*((($4 + [8]) + [24])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*($4 + [160]) = $0
	*(($8 = (($4 + [224]) + [8]))) = *($3)
	*($4 + [224]) = *($4 + [208])
	$0 = *($4 + [200])
	*((($4 + [240]) + [8])) = *($8)
	*($4 + [240]) = *($4 + [224])
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ($4 + [240])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $150($2)
	
.LABEL $label$5
	CALL $29(($4 + [8]))
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	CALL prints($0)
	$0 = *($1)
	$8 = ($0 & [1])
	CALL prints_l(( *($1 + [8]) ? ($1 + [1]) : $8 ), ( *($1 + [4]) ? uint_32($0 >> [1]) : $8 ))
	CALL prints($2)
	$1 = *($3)
	$2 = ($1 & [1])
	CALL prints_l(( *($3 + [8]) ? ($3 + [1]) : $2 ), ( *($3 + [4]) ? uint_32($1 >> [1]) : $2 ))
	CALL prints($4)
	$3 = *($5)
	$1 = ($3 & [1])
	CALL prints_l(( *($5 + [8]) ? ($5 + [1]) : $1 ), ( *($5 + [4]) ? uint_32($3 >> [1]) : $1 ))
	CALL prints($6)
	$5 = *($7)
	$3 = ($5 & [1])
	CALL prints_l(( *($7 + [8]) ? ($7 + [1]) : $3 ), ( *($7 + [4]) ? uint_32($5 >> [1]) : $3 ))
}

void .FUNC $18 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$4 = ($global$0 - [224])
	$global$0 = $4
	CALL require_auth2((int_64)4229591879832608048, (int_64)3617214756542218240)
	$5 = ($0 + [32])
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$5), [8720])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [40])), (int_64)7035938290743115776, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $36($5, $8)
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$5), [8720])
	
.LABEL $label$1
	CALL $131(($4 + [64]), $1)
	CALL prints([9857])
	$8 = *($4 + [64])
	$7 = ($8 & [1])
	CALL prints_l(( *($4 + [72]) ? (($4 + [64]) | [1]) : $7 ), ( *($4 + [68]) ? uint_32($8 >> [1]) : $7 ))
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [72])))
	
.LABEL $label$5
	$8 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($8, [8420])
	CALL eosio_assert((*($9 + [32]) == 0), [9867])
	$10 = *($0)
	*($4 + [64]) = $2
	CALL eosio_assert($8, [9673])
	CALL $42($5, $9, $10, ($4 + [64]))
	if ( ($3 == 0) ){ goto $label$6 }
	$10 = *($0)
	*($4 + [64]) = $1
	CALL $121((($4 + [64]) + [8]), $2)
	*($4 + [144]) = (int_64)8423608866201305088
	*($4 + [136]) = $10
	*(($8 = CALL _Znwj([16]))) = $10
	*($8 + [8]) = (int_64)3617214756542218240
	$7 = ($8 + [16])
	*((($4 + [136]) + [24])) = $7
	*(($4 + [156])) = $7
	*($4 + [152]) = $8
	CALL $43(($4 + [164]), ($4 + [64]))
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*((($4 + [64]) + [16])))
	
.LABEL $label$7
	*(($8 = (($4 + [48]) + [8]))) = *(($0 + [24]))
	*($4 + [48]) = *($0 + [16 align=4])
	$10 = *($0 + [8])
	$1 = *($0)
	$8 = *($8)
	*((($4 + [176]) + [8])) = $8
	*(($7 = (($4 + [192]) + [8]))) = $8
	$11 = *($4 + [48])
	*($4 + [192]) = $11
	*($4 + [176]) = $11
	$8 = *($7)
	*((($4 + [208]) + [8])) = $8
	*((($4 + [64]) + [24])) = $8
	*($4 + [64]) = $1
	*($4 + [72]) = $10
	$10 = *($4 + [192])
	*($4 + [80]) = $10
	*($4 + [208]) = $10
	*(($4 + [104])) = $1
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*($4 + [96]) = $1
	$8 = CALL $44(($4 + [8]), ($4 + [136]))
	CALL $45(($4 + [64]), $3, $8)
	$7 = *($8 + [28])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($8 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($8 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$9 = *(($4 + [120]))
	if ( ($9 == 0) ){ goto $label$10 }
	$6 = ($4 + [124])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$12 }
	
.LOOP $label$13:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$14 }
	CALL _ZdlPv($7)
	
.LABEL $label$14
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$13 }
	$8 = *(($4 + [120]))
	goto $label$11 
	
.LABEL $label$12
	$8 = $9
	
.LABEL $label$11
	*($6) = $9
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = *($4 + [164])
	if ( ($8 == 0) ){ goto $label$15 }
	*(($4 + [168])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$15
	$8 = *($4 + [152])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($4 + [156])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$6
	$global$0 = ($4 + [224])
}

void .FUNC $19 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth2($1, (int_64)3617214756542218240)
	$4 = CALL $144([8487])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9708])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($4 + [8486]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9753])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$5), [8496])
	$7 = ($0 + [152])
	$6 = *(($0 + [180]))
	$8 = *(($0 + [176]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$11:
	$4 = ($6 + [-24])
	$9 = *($4)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$10 }
	$6 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)$7), [8720])
	goto $label$8 
	
.LABEL $label$9
	$9 = [0]
	$4 = [0]
	$6 = CALL db_find_i64(*($7), *(($0 + [160])), (int_64)-6030912130159137136, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$9 = CALL $31($7, $6)
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)$7), [8720])
	
.LABEL $label$8
	$4 = ((uint_64)*($9 + [24]) >= (uint_64)*($2))
	
.LABEL $label$7
	CALL eosio_assert($4, [10382])
	$5 = *($0)
	*($3 + [8]) = $2
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9673])
	CALL $59($7, $9, $5, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9264])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9310])
	*($1 + [8]) = (int_64))(*($1 + [8]) - *(*($3)))
	$5 = *($1)
	*($1 + [16]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3)))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9361])
	*($4 + [56]) = ($4 + [40])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [64]) = ($4 + [48])
	*($4 + [76]) = ($1 + [8])
	*($4 + [72]) = $1
	*($4 + [80]) = ($1 + [16])
	*($4 + [84]) = ($1 + [24])
	*($4 + [88]) = ($1 + [32])
	CALL $66(($4 + [72]), ($4 + [64]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9264])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9310])
	$5 = *(*($3))
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)$5)
	*($1 + [24]) = (int_64))(*($1 + [24]) - $5)
	$5 = *($1)
	CALL eosio_assert([1], [9361])
	*($4 + [56]) = ($4 + [40])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [64]) = ($4 + [48])
	*($4 + [76]) = ($1 + [8])
	*($4 + [72]) = $1
	*($4 + [80]) = ($1 + [16])
	*($4 + [84]) = ($1 + [24])
	*($4 + [88]) = ($1 + [32])
	CALL $66(($4 + [72]), ($4 + [64]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $50 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	*($4 + [23]) = $3
	*($4 + [24]) = $1
	$5 = ($0 + [32])
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$5:
	$3 = ($7 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$7 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$5), [8720])
	goto $label$2 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($5), *(($0 + [40])), (int_64)7035938290743115776, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $36($5, $3)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$5), [8720])
	
.LABEL $label$2
	$1 = *($0)
	*($4 + [8]) = $2
	*($4 + [12]) = ($4 + [23])
	CALL eosio_assert([1], [9673])
	CALL $103($5, $8, $1, ($4 + [8]))
	$global$0 = ($4 + [32])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($4 + [12]) = $2
	*($4 + [8]) = ($4 + [24])
	CALL $104($4, $5, $1, ($4 + [8]))
	$global$0 = ($4 + [32])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8794])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy(($0 + [40]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8794])
	CALL memcpy(($0 + [48]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $52 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4, int_64 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$7 = ($global$0 - [96])
	$global$0 = $7
	*($7 + [80]) = $3
	*($7 + [72]) = $4
	*($7 + [64]) = $5
	*($7 + [63]) = $6
	*($7 + [88]) = $1
	$1 = CALL $37($0, $1, *($2 + [8]))
	*($7 + [48]) = $1
	CALL $131(($7 + [16]), $1)
	CALL prints([10010])
	$6 = *($7 + [16])
	$8 = ($6 & [1])
	CALL prints_l(( *($7 + [24]) ? (($7 + [16]) | [1]) : $8 ), ( *($7 + [20]) ? uint_32($6 >> [1]) : $8 ))
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($7 + [24])))
	$1 = *($7 + [48])
	
.LABEL $label$1
	$9 = ($0 + [72])
	$8 = *(($0 + [100]))
	$10 = *(($0 + [96]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$5 }
	
.LOOP $label$7:
	$6 = ($8 + [-24])
	$11 = *($6)
	if ( ((int_64)*($11) == (int_64)$1) ){ goto $label$6 }
	$8 = $6
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(($11 + [68])) == (int_32)$9), [8720])
	if ( $11 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = CALL db_find_i64(*($9), *(($0 + [80])), (int_64)-3665743296614203392, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $38($9, $6)
	CALL eosio_assert(((int_32)*($11 + [68]) == (int_32)$9), [8720])
	
.LABEL $label$4
	$1 = *($0)
	*($7 + [20]) = ($7 + [72])
	*($7 + [16]) = ($7 + [80])
	*($7 + [24]) = ($7 + [64])
	*($7 + [28]) = ($7 + [63])
	CALL eosio_assert([1], [9673])
	CALL $106($9, $11, $1, ($7 + [16]))
	CALL $131(($7 + [16]), *($7 + [48]))
	CALL prints([10051])
	$6 = *($7 + [16])
	$8 = ($6 & [1])
	CALL prints_l(( *($7 + [24]) ? (($7 + [16]) | [1]) : $8 ), ( *($7 + [20]) ? uint_32($6 >> [1]) : $8 ))
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($7 + [24])))
	$global$0 = ($7 + [96])
	return 
	
.LABEL $label$3
	$1 = *($0)
	*($7 + [24]) = $2
	*($7 + [20]) = ($7 + [88])
	*($7 + [16]) = ($7 + [48])
	*($7 + [28]) = ($7 + [80])
	*($7 + [32]) = ($7 + [72])
	*($7 + [36]) = ($7 + [64])
	*($7 + [40]) = ($7 + [63])
	CALL $107(($7 + [8]), $9, $1, ($7 + [16]))
	CALL $131(($7 + [16]), *($7 + [48]))
	CALL prints([10017])
	$6 = *($7 + [16])
	$8 = ($6 & [1])
	CALL prints_l(( *($7 + [24]) ? (($7 + [16]) | [1]) : $8 ), ( *($7 + [20]) ? uint_32($6 >> [1]) : $8 ))
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($7 + [24])))
	
.LABEL $label$2
	$global$0 = ($7 + [96])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [68])) == (int_32)$0), [9495])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9540])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9590])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [72]))
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8771])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([40])) + [28]) = $0
	*($5 + [25]) = [2]
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [25])
	CALL $80(($3 + [40]), ($3 + [32]))
	*($5 + [32]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $81(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $68($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $69(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert4()), [9806])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([40])
	CALL $110($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [32])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $81(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [8])
	$5 = (CASTING uint_32)(uint_64 $4)
	$6 = ((int_64)$4 & (int_64)255)
	$7 = (int_64)($6 == 0)
	if ( $7 ){ goto $label$2 }
	$8 = ((int_64)$6 + (int_64)1)
	$9 = (int_64)1
	
.LOOP $label$3:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)1
	
.LABEL $label$1
	$5 = ($5 & [255])
	$10 = ($2 - (($5 + [16]) & [496]))
	$11 = $10
	$global$0 = $11
	*(($12 = ($10 + $5))) = [0]
	$13 = *($1)
	$2 = ((int_64)$13 < (int_64)0)
	if ( $7 ){ goto $label$4 }
	$8 = ((int_64)( (int_64)-1 ? (int_64)1 : $2 ) * (int_64)((int_64)$13 % (int_64)$9))
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ($12 + [-1])
	
.LOOP $label$5:
	$14 = ((int_64)$8 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$14 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$8 = $14
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	$12 = ( [8934] ? [8946] : $2 )
	$9 = ((int_64)$13 / (int_64)$9)
	$15 = ($5 + [32])
	$11 = ($11 - (($5 + [47]) & [496]))
	$global$0 = $11
	$8 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( (int_64)($8) == 0) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	*((($3 + [41]) + ($1 = $5))) = $8
	$5 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [24]) = ($5 << [1])
	$2 = (($3 + [24]) | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [24]) = [0]
	$1 = (($3 + [24]) | [1])
	$5 = $1
	goto $label$6 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($7)
	*($3 + [24]) = ($7 | [1])
	*($3 + [32]) = $2
	*($3 + [28]) = $5
	
.LABEL $label$7
	$7 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$12:
	*(($2 + $1)) = *((($3 + [41]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$12 }
	$5 = ($2 + $5)
	$1 = (($3 + [24]) | [1])
	
.LABEL $label$6
	*($5) = [0]
	*($3 + [8]) = $10
	*($3) = $9
	*($3 + [12]) = ( *($3 + [32]) ? $1 : (*($3 + [24]) & [1]) )
	CALL $141($11, $15, $12, $3)
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$13
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $144($11)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$17 }
	*($0) = ($1 << [1])
	$5 = ($0 + [1])
	if ( $1 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$2 = (($1 + [16]) & [-16])
	$5 = CALL _Znwj($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $1
	
.LABEL $label$16
	CALL memcpy($5, $11, $1)
	
.LABEL $label$15
	*(($5 + $1)) = [0]
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$14
	CALL $120($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $145(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10776])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $145(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $150($0)
	
.LABEL $label$1
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $68($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9420])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9420])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $85(CALL $84($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $147($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10776])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $147($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC $110 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [80])
	$global$0 = $3
	*($0 + [28]) = $1
	*($0 + [25]) = [2]
	$1 = *($2 + [4])
	*($0) = *(*($1))
	$4 = *($1 + [4])
	*($0 + [8]) = ((int_64)*($4) * (int_64)10000)
	*($0 + [16]) = ((int_64)*($4) * (int_64)10000)
	*($0 + [24]) = *(*($1 + [8]))
	*($0 + [25]) = *(*($1 + [12]))
	$1 = *($2)
	*($3 + [40]) = ($3 + [26])
	*($3 + [36]) = $3
	*($3 + [32]) = $3
	*($3 + [48]) = ($3 + [32])
	*($3 + [60]) = ($0 + [8])
	*($3 + [56]) = $0
	*($3 + [64]) = ($0 + [16])
	*($3 + [68]) = ($0 + [24])
	*($3 + [72]) = ($0 + [25])
	CALL $79(($3 + [56]), ($3 + [48]))
	$5 = *($0)
	*($0 + [32]) = CALL db_store_i64(*($1 + [8]), (int_64)-7807363788000198656, *(*($2 + [8])), $5, $3, [26])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [80])
	return $0
}

int_32 .FUNC $111 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [40]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	*($0 + [16]) = *(*($1 + [8]))
	*($0 + [24]) = *(*($1 + [12]))
	*($0 + [32]) = *(*($1 + [16]))
	$1 = *($2)
	*($3 + [56]) = ($3 + [40])
	*($3 + [52]) = $3
	*($3 + [48]) = $3
	*($3 + [64]) = ($3 + [48])
	*($3 + [76]) = ($0 + [8])
	*($3 + [72]) = $0
	*($3 + [80]) = ($0 + [16])
	*($3 + [84]) = ($0 + [24])
	*($3 + [88]) = ($0 + [32])
	CALL $66(($3 + [72]), ($3 + [64]))
	$4 = *($0)
	*($0 + [44]) = CALL db_store_i64(*($1 + [8]), (int_64)-6030912130159137136, *(*($2 + [8])), $4, $3, [40])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [96])
	return $0
}

int_32 .FUNC $139 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $150($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $150 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19180])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18988]
	$3 = (((int_32)$1 * (int_32)[12]) + [18988])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $29 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [176]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [136]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$16
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [96]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$17 }
	$2 = ($0 + [60])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$19 }
	
.LOOP $label$20:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$21 }
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$22
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$23
	CALL _ZdlPv($3)
	
.LABEL $label$21
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$20 }
	$3 = *(($0 + [56]))
	goto $label$18 
	
.LABEL $label$19
	$3 = $1
	
.LABEL $label$18
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$17
	return $0
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = (($2 + [16]) + [8]))) = *(($1 + [24]))
	*($2 + [16]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $121($2, ($1 + [32]))
	*((($2 + [32]) + [8])) = *($3)
	*($2 + [32]) = *($2 + [16])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	$6 = CALL $121(($2 + [48]), $1)
	CALL void $3((int_32 $5), (int_64 $4), (int_64 ($2 + [32])), (int_32 $6), (int_32 $0))
	if ( (*($2 + [48]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [28])) == (int_32)$0), [9264])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9310])
	*($1 + [8]) = ((int_64)*(*($3)) * (int_64)10000)
	*($1 + [24]) = *(*($3 + [4]))
	$5 = *($1)
	CALL eosio_assert([1], [9361])
	*($4 + [40]) = ($4 + [26])
	*($4 + [36]) = $4
	*($4 + [32]) = $4
	*($4 + [48]) = ($4 + [32])
	*($4 + [60]) = ($1 + [8])
	*($4 + [56]) = $1
	*($4 + [64]) = ($1 + [16])
	*($4 + [68]) = ($1 + [24])
	*($4 + [72]) = ($1 + [25])
	CALL $79(($4 + [56]), ($4 + [48]))
	CALL db_update_i64(*($1 + [32]), $2, $4, [26])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $107 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert4()), [9806])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([80])) + [8]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24]) = [0]
	*($3 + [64]) = [0]
	*($3 + [68]) = $1
	CALL $108(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [72])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $74(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $106 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [68])) == (int_32)$0), [9264])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9310])
	$6 = *($1)
	$7 = *(*($3))
	if ( (int_64)($7 == 0) ){ goto $label$1 }
	*($1 + [40]) = $7
	
.LABEL $label$1
	$7 = *(*($3 + [4]))
	if ( (int_64)($7 == 0) ){ goto $label$2 }
	*($1 + [48]) = $7
	
.LABEL $label$2
	$7 = *(*($3 + [8]))
	if ( (int_64)($7 == 0) ){ goto $label$3 }
	*($1 + [32]) = $7
	
.LABEL $label$3
	*($1 + [64]) = *(*($3 + [12]))
	CALL eosio_assert([1], [9361])
	$3 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [50])
	$7 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [16])
	$9 = ($1 + [64])
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $147($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [16]) = $5
	*($5 + [32]) = $8
	*($5 + [56]) = $9
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [8])
	*($5 + [36]) = ($1 + [28])
	*($5 + [40]) = ($1 + [32])
	*($5 + [44]) = ($1 + [40])
	*($5 + [48]) = ($1 + [48])
	*($5 + [52]) = ($1 + [56])
	CALL $102(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [72]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $150($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [64])
}

void .FUNC $21 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL require_auth2((int_64)4229591879832608048, (int_64)3617214756542218240)
	$4 = ($0 + [152])
	$6 = *(($0 + [180]))
	$5 = *(($0 + [176]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$9:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$8 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$4), [8720])
	goto $label$6 
	
.LABEL $label$7
	$7 = CALL db_find_i64(*($4), *(($0 + [160])), (int_64)-6030912130159137136, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $31($4, $7)
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$4), [8720])
	
.LABEL $label$6
	$9 = (int_64)
	if ( ((uint_64)$9(((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) - *($8 + [32]))) > (uint_64)(int_64)85799) ){ goto $label$10 }
	CALL $131(($3 + [24]), $9)
	CALL prints([10623])
	$7 = *($3 + [24])
	$6 = ($7 & [1])
	CALL prints_l(( *($3 + [32]) ? (($3 + [24]) | [1]) : $6 ), ( *($3 + [28]) ? uint_32($7 >> [1]) : $6 ))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$11
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$10
	$7 = CALL $144([8930])
	if ( ($7 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9708])
	goto $label$3 
	
.LABEL $label$5
	CALL prints([10591])
	CALL printn($1)
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$4
	if ( ($7 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = (int_64)0
	
.LOOP $label$12:
	$6 = *(($7 + [8929]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$13 }
	CALL eosio_assert([0], [9753])
	
.LABEL $label$13
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$12 }
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$9), [10645])
	CALL prints([10661])
	CALL printn($1)
	CALL prints([10671])
	CALL $57(($3 + [24]), $2)
	$7 = *($3 + [24])
	$6 = ($7 & [1])
	CALL prints_l(( *($3 + [32]) ? (($3 + [24]) | [1]) : $6 ), ( *($3 + [28]) ? uint_32($7 >> [1]) : $6 ))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$14
	*($3 + [80]) = (int_64)3617214756542218240
	*($3 + [72]) = (int_64)4229591879855175040
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$7 = CALL $144([10685])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$18 }
	*($3 + [8]) = ($7 << [1])
	$6 = (($3 + [8]) | [1])
	if ( $7 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$5 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($3 + [8]) = ($5 | [1])
	*($3 + [16]) = $6
	*($3 + [12]) = $7
	
.LABEL $label$17
	CALL memcpy($6, [10685], $7)
	
.LABEL $label$16
	*(($6 + $7)) = [0]
	$9 = *($8)
	*(($3 + [48])) = *(($2 + [8]))
	$7 = (($3 + [8]) + [8])
	*(($3 + [64])) = *($7)
	*($7) = [0]
	*($3 + [24]) = (int_64)4229591879855175040
	$1 = *($3 + [8])
	*($3 + [8]) = (int_64)0
	*($3 + [40]) = *($2)
	*($3 + [56]) = $1
	*($3 + [32]) = $9
	$7 = CALL $34(($3 + [88]), ($3 + [72]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($3 + [24]))
	CALL $35(($3 + [128]), $7)
	$6 = *($3 + [128])
	CALL send_inline($6, (*($3 + [132]) - $6))
	$6 = *($3 + [128])
	if ( ($6 == 0) ){ goto $label$19 }
	*($3 + [132]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$19
	$6 = *($7 + [28])
	if ( ($6 == 0) ){ goto $label$20 }
	*(($7 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$20
	$6 = *($7 + [16])
	if ( ($6 == 0) ){ goto $label$21 }
	*(($7 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$21
	if ( ((*(($3 + [56])) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($3 + [64])))
	
.LABEL $label$22
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$23
	$9 = *($0)
	CALL eosio_assert([1], [9673])
	CALL $62($4, $8, $9, ($3 + [24]))
	$global$0 = ($3 + [144])
	return (unreachable)
	
.LABEL $label$15
	CALL $120(($3 + [8]))
}

void .FUNC $20 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth2((int_64)4229591879832608048, (int_64)3617214756542218240)
	$2 = CALL $121($3, $2)
	CALL $46($0, $1, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$1
	$global$0 = ($3 + [16])
}

void .FUNC $23 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$6 = ($global$0 - [80])
	$global$0 = $6
	*($6 + [64]) = $2
	*($6 + [72]) = $1
	*($6 + [56]) = $3
	*($6 + [48]) = $4
	*($6 + [40]) = $5
	CALL require_auth2((int_64)4229591879832608048, (int_64)3617214756542218240)
	$7 = ($0 + [152])
	$9 = *(($0 + [180]))
	$8 = *(($0 + [176]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	
.LOOP $label$4:
	$10 = ($9 + [-24])
	$11 = *($10)
	if ( ((int_64)*($11) == (int_64)$1) ){ goto $label$3 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)$7), [8720])
	if ( ($11 == 0) ){ goto $label$1 }
	$global$0 = ($6 + [80])
	return 
	
.LABEL $label$2
	$10 = CALL db_find_i64(*($7), *(($0 + [160])), (int_64)-6030912130159137136, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $31($7, $10) + [40]) == (int_32)$7), [8720])
	$global$0 = ($6 + [80])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($6 + [20]) = ($6 + [64])
	*($6 + [16]) = ($6 + [72])
	*($6 + [24]) = ($6 + [56])
	*($6 + [28]) = ($6 + [48])
	*($6 + [32]) = ($6 + [40])
	CALL $64(($6 + [8]), $7, $1, ($6 + [16]))
	$global$0 = ($6 + [80])
}

void .FUNC $22 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	$1 = CALL $37($0, $1, *($2 + [8]))
	CALL $131($3, $1)
	CALL prints([10085])
	$2 = *($3)
	$4 = ($2 & [1])
	CALL prints_l(( *($3 + [8]) ? ($3 | [1]) : $4 ), ( *($3 + [4]) ? uint_32($2 >> [1]) : $4 ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$1
	$5 = ($0 + [72])
	$4 = *(($0 + [100]))
	$6 = *(($0 + [96]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$6:
	$2 = ($4 + [-24])
	$7 = *($2)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$5 }
	$4 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(($7 + [68])) == (int_32)$5), [8720])
	if ( $7 ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL db_find_i64(*($5), *(($0 + [80])), (int_64)-3665743296614203392, $1)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = CALL $38($5, $2)
	CALL eosio_assert(((int_32)*($7 + [68]) == (int_32)$5), [8720])
	goto $label$2 
	
.LABEL $label$3
	CALL prints([10102])
	$7 = [0]
	
.LABEL $label$2
	$2 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($2, [10119])
	CALL eosio_assert($2, [9643])
	$2 = CALL db_next_i64(*($7 + [72]), $3)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	CALL $38($5, $2)
	
.LABEL $label$7
	CALL $53($5, $7)
	$global$0 = ($3 + [16])
}

void .FUNC $25 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [144])
	$global$0 = $5
	CALL require_auth2((int_64)4229591880032465776, (int_64)3617214756542218240)
	$6 = [0]
	if ( ((uint_64)((int_64)*($4) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$6 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$6 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8383])
	CALL $131(($5 + [24]), $1)
	CALL $131(($5 + [88]), $3)
	CALL prints([9897])
	$8 = *($5 + [24])
	$6 = ($8 & [1])
	CALL prints_l(( *($5 + [32]) ? (($5 + [24]) | [1]) : $6 ), ( *($5 + [28]) ? uint_32($8 >> [1]) : $6 ))
	CALL prints([9912])
	CALL printn($2)
	CALL prints([9918])
	CALL $48($4, [9931], ($5 + [88]))
	if ( ((*($5 + [88]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($5 + [96]))
	
.LABEL $label$6
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$7
	$11 = ($0 + [72])
	$6 = *(($0 + [100]))
	$12 = *(($0 + [96]))
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$11:
	$8 = ($6 + [-24])
	$10 = *($8)
	if ( ((int_64)*($10) == (int_64)$3) ){ goto $label$10 }
	$6 = $8
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*(($10 + [68])) == (int_32)$11), [8720])
	goto $label$8 
	
.LABEL $label$9
	$10 = [0]
	$8 = CALL db_find_i64(*($11), *(($0 + [80])), (int_64)-3665743296614203392, $3)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$8 }
	$10 = CALL $38($11, $8)
	CALL eosio_assert(((int_32)*($10 + [68]) == (int_32)$11), [8720])
	
.LABEL $label$8
	$12 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($12, [9943])
	CALL eosio_assert(((uint_64)*($4) <= (uint_64)*($10 + [48])), [9958])
	CALL eosio_assert((uint_64)(*($10 + [56]) <= *($10 + [32])), [9970])
	*($5 + [80]) = (int_64)3617214756542218240
	*($5 + [72]) = (int_64)4229591879931537296
	$7 = *($10 + [8])
	*(($5 + [16])) = [0]
	*($5 + [8]) = (int_64)0
	$8 = CALL $144([9982])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$15 }
	*($5 + [8]) = ($8 << [1])
	$6 = (($5 + [8]) | [1])
	if ( $8 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$13 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($13)
	*($5 + [8]) = ($13 | [1])
	*($5 + [16]) = $6
	*($5 + [12]) = $8
	
.LABEL $label$14
	CALL memcpy($6, [9982], $8)
	
.LABEL $label$13
	*(($6 + $8)) = [0]
	*(($5 + [48])) = *(($4 + [8]))
	$8 = (($5 + [8]) + [8])
	*(($5 + [64])) = *($8)
	*($8) = [0]
	*($5 + [32]) = $2
	*($5 + [24]) = (int_64)4229591879931537296
	*($5 + [40]) = *($4)
	*($5 + [56]) = *($5 + [8])
	*($5 + [8]) = (int_64)0
	$8 = CALL $34(($5 + [88]), ($5 + [72]), $7, (int_64)-3617168760277827584, ($5 + [24]))
	CALL $35(($5 + [128]), $8)
	$6 = *($5 + [128])
	CALL send_inline($6, (*($5 + [132]) - $6))
	$6 = *($5 + [128])
	if ( ($6 == 0) ){ goto $label$16 }
	*($5 + [132]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$16
	$6 = *($8 + [28])
	if ( ($6 == 0) ){ goto $label$17 }
	*(($8 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$17
	$6 = *($8 + [16])
	if ( ($6 == 0) ){ goto $label$18 }
	*(($8 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$18
	if ( ((*(($5 + [56])) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($5 + [64])))
	
.LABEL $label$19
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$20
	$3 = *(($10 + [56]))
	$7 = *($4)
	*($5 + [24]) = (int_64))(( $7 ? $3 : (uint_64)($3 <= $7) ) - $7)
	$7 = *($0)
	*($5 + [88]) = ($5 + [24])
	CALL eosio_assert($12, [9673])
	CALL $49($11, $10, $7, ($5 + [88]))
	CALL prints([9991])
	$global$0 = ($5 + [144])
	return (unreachable)
	
.LABEL $label$12
	CALL $120(($5 + [8]))
}

int_32 .FUNC $24 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [240]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [248]) = (int_64)0
	*($4 + [256]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [220]) = $2
	*($4 + [216]) = $2
	*($4 + [224]) = ($2 + $7)
	*($4 + [304]) = ($4 + [216])
	*($4 + [24]) = ($4 + [232])
	CALL $63(($4 + [24]), ($4 + [304]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [224])
	*($4 + [8]) = *($4 + [216])
	$3 = *($3)
	*((($4 + [272]) + [8])) = $3
	*(($8 = (($4 + [288]) + [8]))) = $3
	$9 = *($4 + [8])
	*($4 + [288]) = $9
	*($4 + [272]) = $9
	$3 = *($8)
	*((($4 + [304]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [288])
	*($4 + [40]) = $1
	*($4 + [304]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [264])
	$1 = *($4 + [256])
	$9 = *($4 + [248])
	$10 = *($4 + [240])
	$11 = *($4 + [232])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $11), (int_64 $10), (int_64 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $150($2)
	
.LABEL $label$5
	CALL $29(($4 + [24]))
	$global$0 = ($4 + [320])
	return [1]
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8794])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $40(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $26 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [264]))) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [248]) = (int_64)0
	*($4 + [256]) = (int_64)0
	*($4 + [220]) = $2
	*($4 + [216]) = $2
	*($4 + [224]) = ($2 + $7)
	*($4 + [288]) = ($4 + [216])
	*($4 + [24]) = ($4 + [232])
	CALL $47(($4 + [24]), ($4 + [288]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [224])
	*($4 + [8]) = *($4 + [216])
	$9 = *($3)
	*((($4 + [304]) + [8])) = $9
	*(($3 = (($4 + [272]) + [8]))) = $9
	$10 = *($4 + [8])
	*($4 + [272]) = $10
	*($4 + [304]) = $10
	$11 = *($3)
	*(($9 = (($4 + [288]) + [8]))) = $11
	*(($4 + [48])) = $11
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [272])
	*($4 + [40]) = $1
	*($4 + [288]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	*($3) = *($8)
	*($4 + [272]) = *($4 + [256])
	$0 = *($4 + [248])
	$1 = *($4 + [240])
	$10 = *($4 + [232])
	*($9) = *($3)
	*($4 + [288]) = *($4 + [272])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $10), (int_64 $1), (int_64 $0), (int_64 ($4 + [288])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $150($2)
	
.LABEL $label$5
	CALL $29(($4 + [24]))
	$global$0 = ($4 + [320])
	return [1]
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($1) = *(*($0))
	*($1 + [8]) = *(*($0 + [4]))
	$3 = (uint_64)*(*($0 + [8]) + [8]) >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$4 }
	$4 = [0]
	
.LOOP $label$6:
	*((($2 + [25]) + ($5 = $4))) = $3
	$4 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[5]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$3 }
	*($2 + [8]) = ($4 << [1])
	$6 = (($2 + [8]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [8]) = [0]
	$5 = (($2 + [8]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$7 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($2 + [8]) = ($7 | [1])
	*($2 + [16]) = $6
	*($2 + [12]) = $4
	
.LABEL $label$2
	$7 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$7:
	*(($6 + $5)) = *((($2 + [25]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$7 }
	$5 = ($6 + $4)
	
.LABEL $label$1
	*($5) = [0]
	$5 = ($1 + [16])
	if ( (*($1 + [16]) & [1]) ){ goto $label$9 }
	*($5) = [0]
	goto $label$8 
	
.LABEL $label$9
	*(*(($1 + [24]))) = [0]
	*(($1 + [20])) = [0]
	
.LABEL $label$8
	CALL $125($5, [0])
	*(($5 + [8])) = *((($2 + [8]) + [8]))
	*($5) = *($2 + [8])
	$3 = *(*(($0 + [8])) + [8])
	$5 = *($0 + [24])
	$4 = *($0 + [20])
	$6 = *($0 + [16])
	*($1 + [40]) = *(*($0 + [12]))
	*($1 + [48]) = *($6)
	*($1 + [28]) = $3
	*($1 + [32]) = *($4)
	*($1 + [64]) = *($5)
	$global$0 = ($2 + [32])
}

void .FUNC $135 (int_32 $0)
{
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9420])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $83(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $133($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	CALL $109(*($0 + [4]), $1)
	$5 = *($1 + [16])
	$6 = ( *(($1 + [20])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [50])
	$7 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [16])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $147($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = $6
	*($3 + [36]) = ($1 + [28])
	*($3 + [40]) = ($1 + [32])
	*($3 + [44]) = ($1 + [40])
	*($3 + [48]) = ($1 + [48])
	*($3 + [52]) = ($1 + [56])
	*($3 + [56]) = ($1 + [64])
	CALL $102(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [72]) = CALL db_store_i64(*($4 + [8]), (int_64)-3665743296614203392, *(*($0 + [8])), $7, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $150($2)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [64])
}

void .FUNC $65 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	float_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL prints([8957])
	CALL printn($1)
	CALL prints([8966])
	CALL $57(($3 + [16]), $2)
	$4 = *($3 + [16])
	$5 = ($4 & [1])
	CALL prints_l(( *($3 + [24]) ? (($3 + [16]) | [1]) : $5 ), ( *($3 + [20]) ? uint_32($4 >> [1]) : $5 ))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$1
	$4 = CALL db_lowerbound_i64(*($0 + [112]), *(($0 + [120])), (int_64)-7807363788000198656, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$6 = ($0 + [112])
	$5 = CALL $54($6, $4)
	if ( ((int_32)*($5 + [25]) == (int_32)[1]) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL eosio_assert([1], [9643])
	$4 = CALL db_next_i64(*($5 + [32]), ($3 + [16]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $54($6, $4)
	if ( ((int_32)*($5 + [25]) != (int_32)[1]) ){ goto $label$4 }
	
.LABEL $label$3
	CALL $130(($3 + [16]), *($2))
	CALL $129(($3 + [80]), *($5 + [24]))
	CALL $130(($3 + [64]), ((int_64)*($2) / (int_64)*($5 + [24])))
	CALL $132(($3 + [128]), CALL $136((CASTING float_64)(int_64 ((int_64)*($2) / (int_64)*($5 + [24])))))
	CALL $75([9000], ($3 + [16]), [9019], ($3 + [80]), [9034], ($3 + [64]), [9046], ($3 + [128]))
	if ( (*($3 + [128]) & [1]) ){ goto $label$11 }
	$4 = [1]
	if ( (*($3 + [64]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($3 + [136]))
	$4 = [1]
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($3 + [72]))
	if ( ((*($3 + [80]) & $4) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( (*($3 + [80]) & $4) ){ goto $label$7 }
	
.LABEL $label$8
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	CALL _ZdlPv(*($3 + [88]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($3 + [24]))
	
.LABEL $label$5
	$7 = CALL $136((CASTING float_64)(int_64 ((int_64)*($2) / (int_64)*(($5 + [24])))))
	if ( (((float_64)$7 < (float_64)(float_64)18446744073709551615) & ((float_64)$7 >= (float_64)(float_64)0)) ){ goto $label$13 }
	$8 = (int_64)0
	goto $label$12 
	
.LABEL $label$13
	$8 = (Rounds 0)($7)
	
.LABEL $label$12
	*($3 + [120]) = $8
	CALL $131(($3 + [16]), $8)
	CALL prints([9062])
	$4 = *($3 + [16])
	$2 = ($4 & [1])
	CALL prints_l(( *($3 + [24]) ? (($3 + [16]) | [1]) : $2 ), ( *($3 + [20]) ? uint_32($4 >> [1]) : $2 ))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$14
	$8 = *($5 + [16])
	if ( ((uint_64)$8 > (uint_64)*($3 + [120])) ){ goto $label$15 }
	*($3 + [120]) = $8
	
.LABEL $label$15
	$8 = *($0)
	*($3 + [16]) = ($3 + [120])
	CALL $76($6, $5, $8, ($3 + [16]))
	$9 = *($3 + [120])
	$4 = CALL $144([8487])
	if ( ($4 <= [8]) ){ goto $label$19 }
	CALL eosio_assert([0], [9708])
	goto $label$18 
	
.LABEL $label$19
	if ( ($4 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$8 = (int_64)0
	
.LOOP $label$20:
	$2 = *(($4 + [8486]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$21 }
	CALL eosio_assert([0], [9753])
	
.LABEL $label$21
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$20 }
	$10 = ((int_64)$8 << (int_64)8)
	goto $label$16 
	
.LABEL $label$17
	$10 = (int_64)0
	
.LABEL $label$16
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9426])
	$8 = (uint_64)$10 >> (uint_64)(int_64)8)
	$11 = ((int_64)$10 | (int_64)4)
	$4 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$25 }
	$8 = $10
	$2 = [1]
	$12 = $4
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$25
	$8 = $10
	
.LOOP $label$26:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$23 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$4 < (int_32)[6])
	$12 = ($4 + [1])
	$4 = $12
	if ( $2 ){ goto $label$26 }
	$2 = [1]
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$2 = [0]
	
.LABEL $label$22
	CALL eosio_assert($2, [9475])
	*($3 + [72]) = (int_64)3617214756542218240
	*($3 + [64]) = *($0)
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $144([9085])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$27 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$30 }
	*($3) = ($4 << [1])
	$2 = ($3 | [1])
	if ( $4 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$12 = (($4 + [16]) & [-16])
	$2 = CALL _Znwj($12)
	*($3) = ($12 | [1])
	*($3 + [8]) = $2
	*($3 + [4]) = $4
	
.LABEL $label$29
	CALL memcpy($2, [9085], $4)
	
.LABEL $label$28
	*(($2 + $4)) = [0]
	*(($3 + [40])) = $11
	$4 = ($3 + [8])
	*(($3 + [56])) = *($4)
	*($4) = [0]
	*($3 + [24]) = $1
	*($3 + [32]) = $9
	*($3 + [16]) = *($0)
	*($3 + [48]) = *($3)
	*($3) = (int_64)0
	$4 = CALL $34(($3 + [80]), ($3 + [64]), (int_64)4229591880157107504, (int_64)-3617168760277827584, ($3 + [16]))
	CALL $35(($3 + [128]), $4)
	$2 = *($3 + [128])
	CALL send_inline($2, (*($3 + [132]) - $2))
	$2 = *($3 + [128])
	if ( ($2 == 0) ){ goto $label$31 }
	*($3 + [132]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$31
	$2 = *($4 + [28])
	if ( ($2 == 0) ){ goto $label$32 }
	*(($4 + [32])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$32
	$2 = *($4 + [16])
	if ( ($2 == 0) ){ goto $label$33 }
	*(($4 + [20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$33
	if ( ((*(($3 + [48])) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$34
	if ( ((*($3) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$35
	CALL prints([9184])
	if ( ((int_64)(*(($5 + [16])) == 0) == 0) ){ goto $label$2 }
	$8 = *($5)
	CALL $77($6, $5)
	CALL $131(($3 + [16]), *($5))
	CALL prints([9204])
	$4 = *($3 + [16])
	$2 = ($4 & [1])
	CALL prints_l(( *($3 + [24]) ? (($3 + [16]) | [1]) : $2 ), ( *($3 + [20]) ? uint_32($4 >> [1]) : $2 ))
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$36
	if ( (int_64)($8 == 0) ){ goto $label$2 }
	$2 = *(($0 + [140]))
	$12 = *(($0 + [136]))
	if ( ((int_32)$12 == (int_32)$2) ){ goto $label$38 }
	
.LOOP $label$40:
	$4 = ($2 + [-24])
	$5 = *($4)
	if ( ((int_64)*($5) == (int_64)$8) ){ goto $label$39 }
	$2 = $4
	if ( ((int_32)$12 != (int_32)$4) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$39
	if ( ((int_32)$12 == (int_32)$2) ){ goto $label$38 }
	CALL eosio_assert(((int_32)*(($5 + [28])) == (int_32)$6), [8720])
	if ( $5 ){ goto $label$37 }
	goto $label$2 
	
.LABEL $label$38
	$4 = CALL db_find_i64(*(($0 + [112])), *(($0 + [120])), (int_64)-7807363788000198656, $8)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $54($6, $4)
	CALL eosio_assert(((int_32)*($5 + [28]) == (int_32)$6), [8720])
	
.LABEL $label$37
	if ( ((int_32)*($5 + [25]) != (int_32)[2]) ){ goto $label$2 }
	$8 = *($0)
	CALL eosio_assert([1], [9673])
	CALL $78($6, $5, $8, ($3 + [16]))
	CALL $131(($3 + [16]), *($5))
	CALL prints([9224])
	$4 = *($3 + [16])
	$2 = ($4 & [1])
	CALL prints_l(( *($3 + [24]) ? (($3 + [16]) | [1]) : $2 ), ( *($3 + [20]) ? uint_32($4 >> [1]) : $2 ))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($3 + [24])))
	goto $label$2 
	
.LABEL $label$27
	CALL $120($3)
	
.LABEL $label$2
	CALL prints([9244])
	$global$0 = ($3 + [144])
	(unreachable)
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert4()), [9806])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([56])
	CALL $111($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [44])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $67(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9495])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9540])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9590])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9264])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9310])
	*($1 + [24]) = (int_64)0
	*($1 + [16]) = (int_64)0
	$5 = *($1)
	CALL eosio_assert([1], [9361])
	*($4 + [56]) = ($4 + [40])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [64]) = ($4 + [48])
	*($4 + [76]) = ($1 + [8])
	*($4 + [72]) = $1
	*($4 + [80]) = ($1 + [16])
	*($4 + [84]) = ($1 + [24])
	*($4 + [88]) = ($1 + [32])
	CALL $66(($4 + [72]), ($4 + [64]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy(($3 + [32]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9264])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9310])
	$5 = *($1)
	*($1 + [32]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9361])
	*($4 + [56]) = ($4 + [40])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [64]) = ($4 + [48])
	*($4 + [76]) = ($1 + [8])
	*($4 + [72]) = $1
	*($4 + [80]) = ($1 + [16])
	*($4 + [84]) = ($1 + [24])
	*($4 + [88]) = ($1 + [32])
	CALL $66(($4 + [72]), ($4 + [64]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $101 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [9264])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9310])
	*($1 + [32]) = [0]
	$6 = *($1)
	CALL eosio_assert([1], [9361])
	$7 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($8 + [17])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [8])
	$10 = ($1 + [32])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	$11 = *($1 + [20])
	$11 = ( *(($1 + [24])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$7 = ($11 + $7)
	$9 = (CASTING uint_64)(uint_32 $11)
	$11 = ($1 + [20])
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ($7 <= [513]) ){ goto $label$4 }
	$4 = CALL $147($7)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $7)
	*($5 + [16]) = $5
	*($5 + [28]) = $8
	*($5 + [32]) = $11
	*($5 + [36]) = $10
	*($5 + [24]) = $1
	*($5 + [40]) = ($1 + [40])
	CALL $91(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [52]), $2, $4, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $150($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [48])
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9420])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9420])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $85($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $103 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [9264])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9310])
	$6 = *($1)
	$7 = ($1 + [8])
	CALL $123($7, *($3))
	*($1 + [32]) = *(*($3 + [4]))
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9361])
	$3 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [17])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [40])
	$10 = ($1 + [32])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	$11 = *($1 + [20])
	$11 = ( *(($1 + [24])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$3 = ($11 + $3)
	$9 = (CASTING uint_64)(uint_32 $11)
	$11 = ($1 + [20])
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $147($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [16]) = $5
	*($5 + [28]) = $7
	*($5 + [32]) = $11
	*($5 + [36]) = $10
	*($5 + [40]) = $8
	*($5 + [24]) = $1
	CALL $91(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [52]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $150($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [48])
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $83(*($1), *($0 + [8]))
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9420])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [9420])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [8])
	CALL $123($6, *($4 + [4]))
	*($1 + [32]) = [0]
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$4 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [17])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [40])
	$9 = ($1 + [32])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$10 = *($1 + [20])
	$10 = ( *(($1 + [24])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$4 = ($10 + $4)
	$8 = (CASTING uint_64)(uint_32 $10)
	$10 = ($1 + [20])
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$2 = CALL $147($4)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	*($3 + [32]) = $10
	*($3 + [36]) = $9
	*($3 + [40]) = $7
	CALL $91(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($5 + [8]), (int_64)7035938290743115776, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $150($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [48])
}

void .FUNC $104 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert4()), [9806])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([64])) + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [48]) = $1
	CALL $105(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [52])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $71(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$4
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $97($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $68($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $98($2, $1)
	CALL $100(CALL $99(CALL $99($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[40])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$2 }
	$5 = [107374182]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$6 = ($2 + ((int_32)$5 * (int_32)[40]))
	$7 = ($2 + ((int_32)$3 * (int_32)[40]))
	$2 = CALL $44($7, $1)
	$8 = ($2 + [40])
	$5 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$6 }
	$10 = ($5 - $9)
	$1 = [0]
	
.LOOP $label$7:
	$2 = ($9 + $1)
	*((($5 = ($7 + $1)) + [-32])) = *(($2 + [-32]))
	*(($5 + [-40])) = *(($2 + [-40]))
	*(($3 = ($5 + [-24]))) = (int_64)0
	*(($4 = ($5 + [-16]))) = [0]
	$11 = ($2 + [-24])
	*($3) = *($11)
	$3 = ($2 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($5 + [-12]))) = (int_64)0
	*(($5 = ($5 + [-4]))) = [0]
	$4 = ($2 + [-12])
	*($3) = *($4)
	*($11) = (int_64)0
	$2 = ($2 + [-4])
	*($5) = *($2)
	*($2) = [0]
	*($4) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$7 }
	$2 = ($7 + $1)
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $8
	*(($0 + [8])) = $6
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = *(($5 + [-12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($5 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$10
	$2 = ($5 + [-40])
	$1 = *(($5 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($5 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$12 }
	CALL _ZdlPv($3)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $87 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [8720])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3617211070537531392, (int_64)3617211070537531392)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $92($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [8720])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9673])
	CALL $93($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $94($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_64 .FUNC $86 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$2 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [8720])
	if ( ($4 == 0) ){ goto $label$1 }
	$1 = *($4)
	$global$0 = ($3 + [16])
	return $1
	
.LABEL $label$2
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3617211070537531392, (int_64)3617211070537531392)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $92($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [8720])
	$1 = *($4)
	$global$0 = ($3 + [16])
	return $1
	
.LABEL $label$1
	*($3 + [8]) = $2
	CALL $95($3, $0, $1, ($3 + [8]))
	$1 = *(*($3 + [4]))
	$global$0 = ($3 + [16])
	return $1
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9420])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9420])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9420])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9420])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9420])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9420])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9420])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8794])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [8794])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $149 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10788]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10792])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10788]) = [1]
	$2 = ($2 << [16])
	*([0] + [10792]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10792])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10792]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10788]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10788]) = [1]
	$3 = ($3 << [16])
	*([0] + [10792]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10792])
	
.LABEL $label$10
	*([0] + [10792]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $149($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8221])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $145 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $134())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $146($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $144 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $147 (int_32 $0)
{
	return CALL $148([10796], $0)
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $147($1)
	
.LABEL $label$2
	*(CALL $134()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $147(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $150($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $141 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $137([16], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $140 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $143 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $142 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8799])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $68($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8794])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $40(*($1), *($0 + [8]))
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8794])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [8794])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $40(*($1), *($0 + [4]))
	CALL $40(*($1), *($0 + [8]))
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8794])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8794])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [28])) == (int_32)$0), [9264])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9310])
	*($1 + [16]) = (int_64))(*($1 + [16]) - *(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [9361])
	*($4 + [40]) = ($4 + [26])
	*($4 + [36]) = $4
	*($4 + [32]) = $4
	*($4 + [48]) = ($4 + [32])
	*($4 + [60]) = ($1 + [8])
	*($4 + [56]) = $1
	*($4 + [64]) = ($1 + [16])
	*($4 + [68]) = ($1 + [24])
	*($4 + [72]) = ($1 + [25])
	CALL $79(($4 + [56]), ($4 + [48]))
	CALL db_update_i64(*($1 + [32]), $2, $4, [26])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [28])) == (int_32)$0), [9495])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9540])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9590])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [32]))
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$6 = ($global$0 - [160])
	$global$0 = $6
	*(($6 + [136])) = [0]
	*($6 + [128]) = (int_64)0
	$7 = CALL $144([8192])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$7 }
	*($6 + [128]) = ($7 << [1])
	$8 = (($6 + [128]) | [1])
	if ( $7 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($6 + [128]) = ($9 | [1])
	*($6 + [136]) = $8
	*($6 + [132]) = $7
	
.LABEL $label$6
	CALL memcpy($8, [8192], $7)
	
.LABEL $label$5
	*(($8 + $7)) = [0]
	*(($6 + [120])) = [0]
	*($6 + [112]) = (int_64)0
	$7 = CALL $144([8841])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$10 }
	*($6 + [112]) = ($7 << [1])
	$9 = (($6 + [112]) | [1])
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$8 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($8)
	*($6 + [112]) = ($8 | [1])
	*($6 + [120]) = $9
	*($6 + [116]) = $7
	
.LABEL $label$9
	CALL memcpy($9, [8841], $7)
	
.LABEL $label$8
	$8 = [0]
	*(($9 + $7)) = [0]
	$9 = *($6 + [128])
	$10 = ($9 & [1])
	$7 = (($6 + [128]) | [1])
	CALL $128(($6 + [112]), ( *($6 + [136]) ? $7 : $10 ), ( *($6 + [132]) ? uint_32($9 >> [1]) : $10 ))
	$9 = *($1)
	$10 = ($9 & [1])
	$11 = ($1 + [1])
	CALL $128(($6 + [112]), ( *($1 + [8]) ? $11 : $10 ), ( *($1 + [4]) ? uint_32($9 >> [1]) : $10 ))
	$9 = *($6 + [128])
	$10 = ($9 & [1])
	CALL $128(($6 + [112]), ( *($6 + [136]) ? $7 : $10 ), ( *($6 + [132]) ? uint_32($9 >> [1]) : $10 ))
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$14 }
	$9 = *([0] + [8804])
	$12 = $2
	
.LOOP $label$16:
	*((($6 + [8]) + ($7 = $8))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$12 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$7 == (int_32)[12]) )))))
	$8 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[11]) ){ goto $label$15 }
	$12 = ((int_64)$12 << (int_64)5)
	if ( ((int_64)$12 != (int_64)0) ){ goto $label$16 }
	
.LABEL $label$15
	*(($6 + [80])) = [0]
	*($6 + [72]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$13 }
	*($6 + [72]) = ($8 << [1])
	$9 = (($6 + [72]) | [1])
	goto $label$12 
	
.LABEL $label$14
	*(($6 + [80])) = [0]
	*($6 + [72]) = (int_64)0
	*($6 + [72]) = [0]
	$7 = (($6 + [72]) | [1])
	$8 = $7
	goto $label$11 
	
.LABEL $label$13
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($6 + [72]) = ($10 | [1])
	*($6 + [80]) = $9
	*($6 + [76]) = $8
	
.LABEL $label$12
	$10 = ($7 + [1])
	$7 = [0]
	
.LOOP $label$17:
	*(($9 + $7)) = *((($6 + [8]) + $7))
	$7 = ($7 + [1])
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$17 }
	$8 = ($9 + $8)
	$7 = (($6 + [72]) | [1])
	
.LABEL $label$11
	*($8) = [0]
	$8 = *($6 + [72])
	$9 = ($8 & [1])
	CALL $128(($6 + [112]), ( *($6 + [80]) ? $7 : $9 ), ( *($6 + [76]) ? uint_32($8 >> [1]) : $9 ))
	if ( ((*($6 + [72]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($6 + [80])))
	
.LABEL $label$18
	if ( ((*($1) & [1]) == 0) ){ goto $label$19 }
	$11 = *(($1 + [8]))
	
.LABEL $label$19
	CALL prints([8843])
	CALL printn($2)
	CALL prints([8890])
	CALL prints($11)
	CALL prints([8900])
	CALL printn($4)
	CALL prints([8914])
	CALL $57(($6 + [8]), $5)
	$7 = *($6 + [8])
	$8 = ($7 & [1])
	CALL prints_l(( *($6 + [16]) ? (($6 + [8]) | [1]) : $8 ), ( *($6 + [12]) ? uint_32($7 >> [1]) : $8 ))
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$20
	*($6 + [64]) = (int_64)3617214756542218240
	$12 = *($0)
	*($6 + [56]) = $12
	*(($6 + [32])) = *(($5 + [8]))
	*($6 + [16]) = $4
	*($6 + [8]) = $12
	*($6 + [24]) = *($5)
	CALL $121(($6 + [40]), ($6 + [112]))
	$7 = CALL $34(($6 + [72]), ($6 + [56]), $3, (int_64)-3617168760277827584, ($6 + [8]))
	CALL $35(($6 + [144]), $7)
	$8 = *($6 + [144])
	CALL send_inline($8, (*($6 + [148]) - $8))
	$8 = *($6 + [144])
	if ( ($8 == 0) ){ goto $label$21 }
	*($6 + [148]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$21
	$8 = *($7 + [28])
	if ( ($8 == 0) ){ goto $label$22 }
	*(($7 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$22
	$8 = *($7 + [16])
	if ( ($8 == 0) ){ goto $label$23 }
	*(($7 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$23
	if ( ((*($6 + [40]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($6 + [48])))
	
.LABEL $label$24
	if ( ((int_64)$3 != (int_64)6138663591592764928) ){ goto $label$1 }
	$7 = CALL $144([8930])
	if ( ($7 <= [8]) ){ goto $label$27 }
	CALL eosio_assert([0], [9708])
	goto $label$26 
	
.LABEL $label$27
	if ( ($7 == 0) ){ goto $label$25 }
	
.LABEL $label$26
	$12 = (int_64)0
	
.LOOP $label$28:
	$8 = *(($7 + [8929]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$29 }
	CALL eosio_assert([0], [9753])
	
.LABEL $label$29
	$12 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$28 }
	if ( ((int_64)*($5 + [8]) != (int_64)((int_64)((int_64)$12 << (int_64)8) | (int_64)4)) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$25
	if ( ((int_64)*($5 + [8]) == (int_64)4) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL $120(($6 + [128]))
	
.LABEL $label$3
	CALL $120(($6 + [112]))
	
.LABEL $label$2
	CALL $65($0, $2, $5)
	
.LABEL $label$1
	if ( (*($6 + [112]) & [1]) ){ goto $label$32 }
	if ( (*($6 + [128]) & [1]) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	CALL _ZdlPv(*($6 + [120]))
	if ( ((*($6 + [128]) & [1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	CALL _ZdlPv(*(($6 + [136])))
	$global$0 = ($6 + [160])
	return 
	
.LABEL $label$30
	$global$0 = ($6 + [160])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8771])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [48]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [20])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [40])
	CALL $70(($3 + [40]), ($3 + [32]))
	*($5 + [52]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $71(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$10
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_64 .FUNC $37 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [48])
	$global$0 = $3
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$4 }
	$4 = [0]
	$5 = *([0] + [8804])
	
.LOOP $label$6:
	*((($3 + [24]) + ($6 = $4))) = *(($5 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$4 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$5 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$3 }
	*($3 + [8]) = ($4 << [1])
	$5 = (($3 + [8]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [8]) = [0]
	$6 = (($3 + [8]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$7 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($7)
	*($3 + [8]) = ($7 | [1])
	*($3 + [16]) = $5
	*($3 + [12]) = $4
	
.LABEL $label$2
	$7 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$7:
	*(($5 + $6)) = *((($3 + [24]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$7 }
	$6 = ($5 + $4)
	
.LABEL $label$1
	$4 = [0]
	*($6) = [0]
	$1 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( (int_64)($1) == 0) ){ goto $label$11 }
	
.LOOP $label$13:
	*((($3 + [41]) + ($6 = $4))) = $1
	$4 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[5]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$13 }
	
.LABEL $label$12
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$10 }
	*($3 + [24]) = ($4 << [1])
	$5 = (($3 + [24]) | [1])
	goto $label$9 
	
.LABEL $label$11
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [24]) = [0]
	$6 = (($3 + [24]) | [1])
	$4 = $6
	goto $label$8 
	
.LABEL $label$10
	$7 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($7)
	*($3 + [24]) = ($7 | [1])
	*($3 + [32]) = $5
	*($3 + [28]) = $4
	
.LABEL $label$9
	$7 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$14:
	*(($5 + $6)) = *((($3 + [41]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$14 }
	$4 = ($5 + $4)
	$6 = (($3 + [24]) | [1])
	
.LABEL $label$8
	*($4) = [0]
	$4 = *($3 + [24])
	$5 = ($4 & [1])
	CALL $128(($3 + [8]), ( *($3 + [32]) ? $6 : $5 ), ( *($3 + [28]) ? uint_32($4 >> [1]) : $5 ))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$15
	$6 = *($3 + [8])
	$4 = ($6 & [1])
	$8 = ( *($3 + [16]) ? (($3 + [8]) | [1]) : $4 )
	$5 = ( *($3 + [12]) ? uint_32($6 >> [1]) : $4 )
	if ( ($5 <= [4]) ){ goto $label$19 }
	$9 = ($5 + [-4])
	$6 = $8
	$4 = $5
	
.LOOP $label$20:
	CALL memcpy(($3 + [24]), $6, [4])
	$7 = ((int_32)*($3 + [24]) * (int_32)[1540483477])
	$4 = ((int_32)((int_32)((int_32)uint_32($7 >> [24]) ^ (int_32)$7) * (int_32)[1540483477]) ^ (int_32)((int_32)$4 * (int_32)[1540483477]))
	$6 = ($6 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$20 }
	$6 = ($9 & [-4])
	$8 = (($8 + $6) + [4])
	$5 = ($9 - $6)
	if ( ((int_32)$5 == (int_32)[1]) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	$4 = $5
	if ( ((int_32)$5 == (int_32)[1]) ){ goto $label$17 }
	
.LABEL $label$18
	if ( ((int_32)$5 == (int_32)[2]) ){ goto $label$21 }
	if ( ((int_32)$5 != (int_32)[3]) ){ goto $label$16 }
	$4 = ((int_32)(*($8 + [2]) << [16]) ^ (int_32)$4)
	
.LABEL $label$21
	$4 = ((int_32)(*($8 + [1]) << [8]) ^ (int_32)$4)
	
.LABEL $label$17
	$4 = ((int_32)((int_32)$4 ^ (int_32)*($8)) * (int_32)[1540483477])
	
.LABEL $label$16
	$6 = ((int_32)((int_32)uint_32($4 >> [13]) ^ (int_32)$4) * (int_32)[1540483477])
	$1 = (CASTING uint_64)(uint_32 ((int_32)uint_32($6 >> [15]) ^ (int_32)$6))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$22
	$global$0 = ($3 + [48])
	return $1
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [28])) == (int_32)$0), [9264])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9310])
	*($1 + [25]) = [1]
	$5 = *($1)
	CALL eosio_assert([1], [9361])
	*($4 + [40]) = ($4 + [26])
	*($4 + [36]) = $4
	*($4 + [32]) = $4
	*($4 + [48]) = ($4 + [32])
	*($4 + [60]) = ($1 + [8])
	*($4 + [56]) = $1
	*($4 + [64]) = ($1 + [16])
	*($4 + [68]) = ($1 + [24])
	*($4 + [72]) = ($1 + [25])
	CALL $79(($4 + [56]), ($4 + [48]))
	CALL db_update_i64(*($1 + [32]), $2, $4, [26])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9420])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9420])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [9420])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9264])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9310])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [9361])
	*($4 + [56]) = ($4 + [40])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [64]) = ($4 + [48])
	*($4 + [76]) = ($1 + [8])
	*($4 + [72]) = $1
	*($4 + [80]) = ($1 + [16])
	*($4 + [84]) = ($1 + [24])
	*($4 + [88]) = ($1 + [32])
	CALL $66(($4 + [72]), ($4 + [64]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert4()), [9806])
	*(($5 = CALL _Znwj([56])) + [16]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $1
	*($5) = *(*($3))
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [8]) = *(*($3 + [4]))
	*($4 + [56]) = ($4 + [40])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [64]) = ($4 + [48])
	*($4 + [76]) = ($5 + [8])
	*($4 + [72]) = $5
	*($4 + [80]) = ($5 + [16])
	*($4 + [84]) = ($5 + [24])
	*($4 + [88]) = ($5 + [32])
	CALL $66(($4 + [72]), ($4 + [64]))
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-6030912130159137136, $2, $6, $4, [40])
	*($5 + [44]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [72]) = $5
	$6 = *($5)
	*($4) = $6
	*($4 + [48]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [72]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $67(($1 + [24]), ($4 + [72]), $4, ($4 + [48]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [96])
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8563])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8668])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8601])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8668])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8771])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $147($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [16]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	CALL $82(($3 + [40]), ($3 + [32]))
	*($5 + [44]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $67(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $150($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $126(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $141(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8417], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $126(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $126(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}