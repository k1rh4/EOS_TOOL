(data (i32.const 4) "p\93\00\00")
(data (i32.const 12) "\00/hY")
(data (i32.const 16) "\80Q\01\00")
(data (i32.const 20) "\10\0e\00\00")
(data (i32.const 24) "<\00\00\00")
(data (i32.const 32) "valuenetwork\00")
(data (i32.const 48) "ramcollector\00")
(data (i32.const 64) "mrnumberzero\00")
(data (i32.const 80) "siuhangmeiyu\00")
(data (i32.const 96) "amazinggamer\00")
(data (i32.const 112) "mantikmantik\00")
(data (i32.const 128) "meiyusiuhang\00")
(data (i32.const 144) "gameplayer11\00")
(data (i32.const 160) "gameplayer12\00")
(data (i32.const 176) "gameplayer13\00")
(data (i32.const 192) "gameplayer14\00")
(data (i32.const 208) "gameplayer15\00")
(data (i32.const 224) "eos4chatting\00")
(data (i32.const 240) "gi4temzqhege\00")
(data (i32.const 256) "messcomposer\00")
(data (i32.const 272) "pvtmessenger\00")
(data (i32.const 288) "eospromoter1\00")
(data (i32.const 304) "burjuiburjui\00")
(data (i32.const 320) "cashnotfound\00")
(data (i32.const 336) "pimpmyknight\00")
(data (i32.const 352) "singularityx\00")
(data (i32.const 368) "chessxplayer\00")
(data (i32.const 384) "margincallxx\00")
(data (i32.const 400) "eosexcalibur\00")
(data (i32.const 416) "kingofrandom\00")
(data (i32.const 432) "dadarkknight\00")
(data (i32.const 448) "triplesevenx\00")
(data (i32.const 464) "xluckygamerx\00")
(data (i32.const 480) "gamingmaster\00")
(data (i32.const 496) "gaminglegend\00")
(data (i32.const 512) "eostokenizer\00")
(data (i32.const 528) "aidanjackso2\00")
(data (i32.const 544) "v.io\00")
(data (i32.const 560) "xtigerlegend\00")
(data (i32.const 576) "xtigershadow\00")
(data (i32.const 592) "xtigergalaxy\00")
(data (i32.const 608) "xtigermoment\00")
(data (i32.const 624) "xtigerrrrrrr\00")
(data (i32.const 640) "xtiger.game\00")
(data (i32.const 656) "tiger.x\00")
(data (i32.const 672) "oi.io\00")
(data (i32.const 688) "greedysogood\00")
(data (i32.const 704) "g5rzmqruqygd\00")
(data (i32.const 720) "blacklist rejected\00")
(data (i32.const 740) "\00\00\00\00\00\00\00\00D\00\00\00E\00\00\00F\00\00\00")
(data (i32.const 760) "\00\00\00\00\00\00\00\00G\00\00\00H\00\00\00I\00\00\00J\00\00\00")
(data (i32.const 784) "\00\00\00\00\00\00\00\00K\00\00\00L\00\00\00M\00\00\00N\00\00\00O\00\00\00P\00\00\00Q\00\00\00R\00\00\00S\00\00\00T\00\00\00")
(data (i32.const 832) "\00\00\00\00\00\00\00\00U\00\00\00V\00\00\00W\00\00\00X\00\00\00Y\00\00\00Z\00\00\00[\00\00\00\\\00\00\00]\00\00\00^\00\00\00")
(data (i32.const 880) "\00\00\00\00\00\00\00\00_\00\00\00`\00\00\00a\00\00\00b\00\00\00c\00\00\00d\00\00\00e\00\00\00f\00\00\00")
(data (i32.const 920) "\00\00\00\00\00\00\00\00g\00\00\00h\00\00\00i\00\00\00j\00\00\00k\00\00\00l\00\00\00m\00\00\00n\00\00\00")
(data (i32.const 960) "dividend\00")
(data (i32.const 972) "\00\00\00\00\00\00\00\00o\00\00\00p\00\00\00q\00\00\00")
(data (i32.const 992) "\00\00\00\00\00\00\00\00r\00\00\00s\00\00\00t\00\00\00u\00\00\00")
(data (i32.const 1024) "knt\00")
(data (i32.const 1040) "mw\00")
(data (i32.const 1056) "dmw\00")
(data (i32.const 1072) "item\00")
(data (i32.const 1088) "item-season\00")
(data (i32.const 1104) "mat\00")
(data (i32.const 1120) "mat-season\00")
(data (i32.const 1136) "skin\00")
(data (i32.const 1152) "ivn\00")
(data (i32.const 1168) "eosknights\00")
(data (i32.const 1184) "material-sale\00")
(data (i32.const 1200) "onerror\00")
(data (i32.const 1216) "eosio\00")
(data (i32.const 1232) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 1296) "transfer\00")
(data (i32.const 1312) "eosio.token\00")
(data (i32.const 1324) "\00\00\00\00\00\00\00\00g\00\00\00h\00\00\00i\00\00\00j\00\00\00k\00\00\00l\00\00\00m\00\00\00v\00\00\00")
(data (i32.const 1364) "\00\00\00\00\00\00\00\00_\00\00\00`\00\00\00a\00\00\00b\00\00\00c\00\00\00d\00\00\00e\00\00\00f\00\00\00")
(data (i32.const 1404) "\00\00\00\00\00\00\00\00U\00\00\00V\00\00\00W\00\00\00X\00\00\00Y\00\00\00Z\00\00\00w\00\00\00x\00\00\00y\00\00\00z\00\00\00")
(data (i32.const 1452) "\00\00\00\00\00\00\00\00K\00\00\00L\00\00\00M\00\00\00N\00\00\00O\00\00\00P\00\00\00Q\00\00\00R\00\00\00S\00\00\00T\00\00\00")
(data (i32.const 1504) "too short to get rebirth\00")
(data (i32.const 1536) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 1600) "error reading iterator\00")
(data (i32.const 1632) "read\00")
(data (i32.const 1648) "get\00")
(data (i32.const 1664) "can not found knight\00")
(data (i32.const 1696) "cannot pass end iterator to modify\00")
(data (i32.const 1744) "object passed to modify is not in multi_index\00")
(data (i32.const 1792) "cannot modify objects in table of another contract\00")
(data (i32.const 1856) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1920) "write\00")
(data (i32.const 1936) "no knight rule\00")
(data (i32.const 1952) "could not find pet rule\00")
(data (i32.const 1984) "invalid stat type\00")
(data (i32.const 2016) "could not find rule\00")
(data (i32.const 2048) "could not find level rule\00")
(data (i32.const 2080) "can not found set rule\00")
(data (i32.const 2112) "can not found item\00")
(data (i32.const 2144) "could not found item\00")
(data (i32.const 2176) "invalid knight type\00")
(data (i32.const 2208) "item is on sale\00")
(data (i32.const 2224) "it\'s invalid knight to attach\00")
(data (i32.const 2256) "could not found knight\00")
(data (i32.const 2288) "not enough knight level to equip item\00")
(data (i32.const 2336) "could not find target item rule\00")
(data (i32.const 2368) "could not find player\00")
(data (i32.const 2400) "active\00")
(data (i32.const 2416) "rebirth3i\00")
(data (i32.const 2432) "insufficient inventory\00")
(data (i32.const 2464) "no stage rule\00")
(data (i32.const 2480) "cannot create objects in table of another contract\00")
(data (i32.const 2544) "\da\t\8c\c4f\d1\e0?\da\t\8c\c4f\d1\d0?\da\t\8c\c4f\d1\c0?\da\t\8c\c4f\d1\b0?\00q\85\c4f\d1\80?\cd<\8e\c4f\d1p?\cd<\8e\c4f\d1`?\ec)\80\c4f\d1 ?9l\8b\c4f\d1\10?\c4+\89\c4f\d1\e0>\98^\87\c4f\d1\a0>")
(data (i32.const 2640) "wrong number of actions in transaction\00")
(data (i32.const 2688) "wrong action recipient\00")
(data (i32.const 2720) "duplicated transaction\00")
(data (i32.const 2752) "already max level\00")
(data (i32.const 2784) "there is no level rule\00")
(data (i32.const 2816) "Insufficient exp\00")
(data (i32.const 2848) "Insufficient powder\00")
(data (i32.const 2880) "not enough powder\00")
(data (i32.const 2912) "invalid recipe material count\00")
(data (i32.const 2944) "itemlvup3i\00")
(data (i32.const 2960) "can not found next level rule\00")
(data (i32.const 2992) "insufficient item exp\00")
(data (i32.const 3024) "no item rule\00")
(data (i32.const 3040) "already full exp\00")
(data (i32.const 3072) "invalid ingredient\00")
(data (i32.const 3104) "can not remove item on sale\00")
(data (i32.const 3136) "can not remove equipped item\00")
(data (i32.const 3168) "can not found rule\00")
(data (i32.const 3200) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 3264) "cannot decrement iterator at beginning of table\00")
(data (i32.const 3312) "can not found player\00")
(data (i32.const 3344) "needs material for the crafting!\00")
(data (i32.const 3392) "craft3i\00")
(data (i32.const 3408) "could not find recipe\00")
(data (i32.const 3440) "full inventory\00")
(data (i32.const 3456) "no materials\00")
(data (i32.const 3472) "can not found material\00")
(data (i32.const 3504) "material is on sale\00")
(data (i32.const 3536) "invalid recipe material\00")
(data (i32.const 3568) "could not found material\00")
(data (i32.const 3600) "only accepts EOS for deposits\00")
(data (i32.const 3632) "Invalid token transfer\00")
(data (i32.const 3664) "Quantity must be positive\00")
(data (i32.const 3696) "sign up first!\00")
(data (i32.const 3712) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 3776) "invalid symbol name\00")
(data (i32.const 3808) "can not buy dmw this mode\00")
(data (i32.const 3840) "invalid inventory\00")
(data (i32.const 3872) "invalid transfer\00")
(data (i32.const 3904) "no revenue yet\00")
(data (i32.const 3920) "next primary key in table is at autoincrement limit\00")
(data (i32.const 3984) "multiplication overflow or underflow\00")
(data (i32.const 4032) "multiplication underflow\00")
(data (i32.const 4064) "multiplication overflow\00")
(data (i32.const 4096) "attempt to add asset with different symbol\00")
(data (i32.const 4144) "addition underflow\00")
(data (i32.const 4176) "addition overflow\00")
(data (i32.const 4208) "cannot increment end iterator\00")
(data (i32.const 4240) "can not exceed max size\00")
(data (i32.const 4272) "no price rule\00")
(data (i32.const 4288) "ivn price does not match\00")
(data (i32.const 4320) "can not found skin\00")
(data (i32.const 4352) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 4416) "price not matching\00")
(data (i32.const 4448) "already have same skin\00")
(data (i32.const 4480) "not on sale\00")
(data (i32.const 4496) "attempt to subtract asset with different symbol\00")
(data (i32.const 4544) "subtraction underflow\00")
(data (i32.const 4576) "subtraction overflow\00")
(data (i32.const 4608) "eosknights:skin-sale:\00")
(data (i32.const 4640) ":\00")
(data (i32.const 4644) "0\12\00\00")
(data (i32.const 4656) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 4704) "can not found player info\00")
(data (i32.const 4736) "there is no knight\00")
(data (i32.const 4768) "could not find mat\00")
(data (i32.const 4800) "it\'s your mat\00")
(data (i32.const 4816) "can not buy item this mode\00")
(data (i32.const 4848) "could not find material rule\00")
(data (i32.const 4880) "can not buy this item\00")
(data (i32.const 4912) "cannot pass end iterator to erase\00")
(data (i32.const 4960) "material price does not match\00")
(data (i32.const 4992) "eosknights:material-sale:\00")
(data (i32.const 5024) "object passed to erase is not in multi_index\00")
(data (i32.const 5072) "cannot erase objects in table of another contract\00")
(data (i32.const 5136) "attempt to remove object that was not in multi_index\00")
(data (i32.const 5200) "check your system time. it\'s too fast. (checksum failure)\00")
(data (i32.const 5264) "check your system time it\'s too slow. (checksum failure)\00")
(data (i32.const 5328) "invalid checksum\00")
(data (i32.const 5360) "duplicated or expired checksum!\00")
(data (i32.const 5392) "there is no user admin value\00")
(data (i32.const 5424) "could not find item\00")
(data (i32.const 5456) "it\'s your item\00")
(data (i32.const 5472) "item price does not match\00")
(data (i32.const 5504) "eosknights:item-sale:\00")
(data (i32.const 5536) "could not find goods rule\00")
(data (i32.const 5568) "mw price does not match\00")
(data (i32.const 5600) "no season yet\00")
(data (i32.const 5616) "not in season period\00")
(data (i32.const 5648) "could not find price rule\00")
(data (i32.const 5680) "knight price does not match\00")
(data (i32.const 5712) "you have already same knight\00")
(data (i32.const 5744) "share\00")
(data (i32.const 5760) "eosio.bpay\00")
(data (i32.const 5776) "eosio.msig\00")
(data (i32.const 5792) "eosio.names\00")
(data (i32.const 5808) "eosio.ram\00")
(data (i32.const 5824) "eosio.ramfee\00")
(data (i32.const 5840) "eosio.saving\00")
(data (i32.const 5856) "eosio.stake\00")
(data (i32.const 5872) "eosio.vpay\00")
(data (i32.const 5888) "there is no admin value\00")
(data (i32.const 5920) "overdrawn dividend\00")
(data (i32.const 5952) "variable\00")
(data (i32.const 5968) "ivnprice\00")
(data (i32.const 5984) "kntlv\00")
(data (i32.const 6000) "kntprice\00")
(data (i32.const 6016) "kntskills\00")
(data (i32.const 6032) "stage\00")
(data (i32.const 6048) "itemlv\00")
(data (i32.const 6064) "itemset\00")
(data (i32.const 6080) "material\00")
(data (i32.const 6096) "pet\00")
(data (i32.const 6112) "petlv\00")
(data (i32.const 6128) "petexp\00")
(data (i32.const 6144) "mpgoods\00")
(data (i32.const 6160) "dungeon\00")
(data (i32.const 6176) "dgticket\00")
(data (i32.const 6192) "mobs\00")
(data (i32.const 6208) "mobskills\00")
(data (i32.const 6224) "could not find table\00")
(data (i32.const 6256) "available only when normal\00")
(data (i32.const 6288) "already on sale\00")
(data (i32.const 6304) "only EOS token allowed\00")
(data (i32.const 6336) "invalid price\00")
(data (i32.const 6352) "must price positive quantity\00")
(data (i32.const 6384) "too small price\00")
(data (i32.const 6400) "too big price\00")
(data (i32.const 6416) "to dungeon data\00")
(data (i32.const 6432) "there is no dungeon\00")
(data (i32.const 6464) "there is no dungeon rule\00")
(data (i32.const 6496) "dgcleari\00")
(data (i32.const 6512) "can not find dungeon\00")
(data (i32.const 6544) "could not dungeon rule\00")
(data (i32.const 6576) "\04\00\00\00\03\00\00\00\02\00\00\00\01\00\00\00\01\00\00\00")
(data (i32.const 6608) "\00\00\00\00\04\00\00\00\07\00\00\00\t\00\00\00\n\00\00\00")
(data (i32.const 6640) "validation failed 1\00")
(data (i32.const 6672) "could not find dungeon rule\00")
(data (i32.const 6704) "validation failed 2\00")
(data (i32.const 6736) "validation failed 3\00")
(data (i32.const 6768) "validation failed 4\00")
(data (i32.const 6800) "validation failed 2-2\00")
(data (i32.const 6832) "validation failed 2-3\00")
(data (i32.const 6864) "validation failed 2-4\00")
(data (i32.const 6896) "need more maxfloor\00")
(data (i32.const 6928) "not enough ticket\00")
(data (i32.const 6960) "there is already opened dungeon\00")
(data (i32.const 6992) "3 knights needed\00")
(data (i32.const 7024) "every knights needs to have 5 or more skills\00")
(data (i32.const 7072) "free ticket is full\00")
(data (i32.const 7104) "need more time to get one\00")
(data (i32.const 7136) "invalid ticket recipe\00")
(data (i32.const 7168) "ticket is full\00")
(data (i32.const 7184) "pexpreturn2i\00")
(data (i32.const 7200) "could not find pet expedition data\00")
(data (i32.const 7248) "can not found pet exp data\00")
(data (i32.const 7280) "can not found pet data\00")
(data (i32.const 7312) "invalid material drop\00")
(data (i32.const 7344) "already return\00")
(data (i32.const 7360) "too early return\00")
(data (i32.const 7392) "no pets\00")
(data (i32.const 7408) "already fight with knight\00")
(data (i32.const 7440) "can not found pet\00")
(data (i32.const 7472) "exceed max slots\00")
(data (i32.const 7504) "already in expedition\00")
(data (i32.const 7536) "invalid season\00")
(data (i32.const 7552) "can not use pet this mode\00")
(data (i32.const 7584) "hire knight first!\00")
(data (i32.const 7616) "too short to sell\00")
(data (i32.const 7648) "can not found material grade\00")
(data (i32.const 7680) "sell limit\00")
(data (i32.const 7696) "equipped item can not be sold\00")
(data (i32.const 7728) "can not found item grade\00")
(data (i32.const 7760) "eosknightsvg\00")
(data (i32.const 7776) "invalid knt\00")
(data (i32.const 7792) "can not found skill set\00")
(data (i32.const 7824) "no skill to clear\00")
(data (i32.const 7856) "no remain skill point\00")
(data (i32.const 7888) "can not found skill rule\00")
(data (i32.const 7920) "not enough knight level\00")
(data (i32.const 7952) "required previous skill first\00")
(data (i32.const 7984) "already full level\00")
(data (i32.const 8016) "invalid mat count\00")
(data (i32.const 8048) "invalid grade\00")
(data (i32.const 8064) "\00\00\00\04\00\00\10\00\00@\00\00\00\04\00\00@\00\00\00")
(data (i32.const 8096) "it has a invalid grade material\00")
(data (i32.const 8128) "can not use on sale material\00")
(data (i32.const 8160) "invalid material\00")
(data (i32.const 8192) "\00\00\00\00\00\00\90A\00\00\00\00\00\00\80A\00\00\00\00\00\00pA\00\00\00\00\00\00`A\00\00\00\00\00\000A\00\00\00\00\00\00 A\00\00\00\00\00\00\10A\00\00\00\00\00\00\d0@\00\00\00\00\00\00\c0@\00\00\00\00\00\00\90@\00\00\00\00\00\00P@")
(data (i32.const 8288) "alchemisti\00")
(data (i32.const 8304) "no one exceed stage minmium level\00")
(data (i32.const 8352) "no cquest exist\00")
(data (i32.const 8368) "cquest is still doing\00")
(data (i32.const 8400) "incorrect no\00")
(data (i32.const 8416) "cquest-dividend:\00")
(data (i32.const 8448) "eosiomeetone\00")
(data (i32.const 8464) "trybenetwork\00")
(data (i32.const 8480) "thebadatoken\00")
(data (i32.const 8496) "craft contest dividend to players\00")
(data (i32.const 8544) "no admin values yet\00")
(data (i32.const 8576) "incorrect cquest id\00")
(data (i32.const 8608) "it is not in the quest period\00")
(data (i32.const 8640) "cquest is done!\00")
(data (i32.const 8656) "incorrect item code\00")
(data (i32.const 8688) "incorrect item level\00")
(data (i32.const 8720) "incorrect item score\00")
(data (i32.const 8752) "can not exceed submit limit\00")
(data (i32.const 8784) "there is no event\00")
(data (i32.const 8816) "not match quest item count\00")
(data (i32.const 8848) "there is already a cquest\00")
(data (i32.const 8880) "cquest\00")
(data (i32.const 8896) "already has winner\00")
(data (i32.const 8928) "invalid quest item\00")
(data (i32.const 8960) "invalid season id\00")
(data (i32.const 8992) "season not ended\00")
(data (i32.const 9024) "can not found play log\00")
(data (i32.const 9056) "invalid request\00")
(data (i32.const 9072) "already got reward\00")
(data (i32.const 9104) "EK. Cup reward\00")
(data (i32.const 9120) "no season period\00")
(data (i32.const 9152) "no knights\00")
(data (i32.const 9168) "you need all of knights\00")
(data (i32.const 9200) "already in season\00")
(data (i32.const 9232) "receive last season reward first!\00")
(data (i32.const 9280) "there is already a season\00")
(data (i32.const 9312) "season\00")
(data (i32.const 9328) "it\'s over\00")
(data (i32.const 9344) "can not found comment\00")
(data (i32.const 9376) "exceed maximum comment length\00")
(data (i32.const 9408) "exceed maximum link length\00")
(data (i32.const 9440) "invalid gift\00")
(data (i32.const 9456) "the gift is over\00")
(data (i32.const 9488) "you already got gift\00")
(data (i32.const 9520) "no gift\00")
(data (i32.const 9536) "wrong recipient\00")
(data (i32.const 9552) "one or more knight required.\00")
(data (i32.const 9584) "one or more knight required for the recipient.\00")
(data (i32.const 9632) "you have already received a referral bonus.\00")
(data (i32.const 9680) "you received already maximum referral bonus\00")
(data (i32.const 9728) "recipient received already maximum referral bonus\00")
(data (i32.const 9792) "already signed up\00")
(data (i32.const 9824) "can not found powder rule\00")
(data (i32.const 9856) "could not find pet\00")
(data (i32.const 9888) "could not find pet level rule\00")
(data (i32.const 9920) "not enough pet count\00")
(data (i32.const 9952) "already max up\00")
(data (i32.const 9968) "petgacha3i\00")
(data (i32.const 9984) "invalid gacha type\00")
(data (i32.const 10016) "invalid count\00")
(data (i32.const 10032) "\00d\00\00\00d\00\00\00d\00\00\00d\00\00\00d\00\00\00d\00\00\00d\00\00\00d\00\00\80\0c\00\00\80\0c\00\00\80\0c\00\00\80\0c\00\00\80\0c\00\00\80\0c\00\00\80\0c\00\00\80\0c\00\00 \03\00\00 \03\00\00 \03\00\00 \03\00\00(\00\00\00(\00\00\00(\00\00\00(\00\00\00\04\00\00\00\04\00\00\00")
(data (i32.const 10144) "can not craft\00")
(data (i32.const 10160) "can not found material rule\00")
(data (i32.const 10192) "the pet is on expedition or resting\00")
(data (i32.const 18624) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 18720) "%d\00")
(data (i32.const 18736) "%lu\00")
(data (i32.const 18752) "%llu\00")
(data (i32.const 18768) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 18784) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 18800) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 18816) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 19280) "0123456789ABCDEF")
(data (i32.const 19296) "-+   0X0x\00")
(data (i32.const 19312) "(null)\00")
(data (i32.const 19328) "-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 19360) "inf\00")
(data (i32.const 19376) "INF\00")
(data (i32.const 19392) "nan\00")
(data (i32.const 19408) "NAN\00")
(data (i32.const 19424) ".\00")
(data (i32.const 19440) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 19536) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(import "env" "__addtf3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__eqtf2" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "__extenddftf2" (func $fimport$2 (param i32 f64)))
(import "env" "__fixtfsi" (func $fimport$3 (param i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$4 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$5 (param i32 i32)))
(import "env" "__floatunsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__unordtf2" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$11))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "current_receiver" (func $fimport$13 (result i64)))
(import "env" "current_time" (func $fimport$14 (result i64)))
(import "env" "db_end_i64" (func $fimport$15 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$16 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "db_store_i64" (func $fimport$22 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$23 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$24 (param i32 i32)))
(import "env" "has_auth" (func $fimport$25 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$26 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$27 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$28 (param i32 i32 i32) (result i32)))
(import "env" "publication_time" (func $fimport$29 (result i64)))
(import "env" "read_action_data" (func $fimport$30 (param i32 i32) (result i32)))
(import "env" "read_transaction" (func $fimport$31 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$32 (param i64)))
(import "env" "require_auth2" (func $fimport$33 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$34 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$35 (param i32 i32)))
(import "env" "tapos_block_prefix" (func $fimport$36 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN14system_control11shuffle_bitEmm" (func $5))
(export "_ZN14system_control13seed_identityEN5eosio4nameE" (func $6))
(export "_ZN14system_control7get_keyEN5eosio4nameE" (func $7))
(export "_ZN14system_control8get_key2EN5eosio4nameE" (func $8))
(export "_ZN14system_control16get_checksum_keyEN5eosio4nameE" (func $9))
(export "_ZN14system_control18calculate_trx_hashEPci" (func $10))
(export "_ZN14system_control19calculate_trx_hash2Ev" (func $11))
(export "_ZN14system_control19calculate_trx_hash3Em" (func $12))
(export "_ZN14system_control15check_blacklistEN5eosio4nameE" (func $13))
(export "apply" (func $14))
(export "malloc" (func $951))
(export "free" (func $954))
(export "_ZNSt3__19to_stringEi" (func $966))
(export "_ZNSt3__19to_stringEm" (func $969))
(export "_ZNSt3__19to_stringEy" (func $970))
(export "pow" (func $974))
(export "sqrt" (func $975))
(export "fabs" (func $976))
(export "scalbn" (func $977))
(export "snprintf" (func $978))
(export "vsnprintf" (func $979))
(export "__errno_location" (func $981))
(export "vfprintf" (func $982))
(export "__lockfile" (func $984))
(export "__unlockfile" (func $985))
(export "__fwritex" (func $986))
(export "strerror" (func $988))
(export "strnlen" (func $989))
(export "wctomb" (func $990))
(export "__signbitl" (func $991))
(export "__fpclassifyl" (func $992))
(export "frexpl" (func $993))
(export "wcrtomb" (func $994))
(export "memchr" (func $995))
(export "__lctrans" (func $996))
(export "__lctrans_impl" (func $997))
(export "__mo_lookup" (func $998))
(export "strcmp" (func $999))
(export "__towrite" (func $1000))
(export "atoi" (func $1001))
(export "atoll" (func $1002))
(export "memcmp" (func $1003))
(export "strlen" (func $1004))
(table $0 123 123 anyfunc)
(elem (i32.const 0) $1005 $116 $126 $31 $93 $74 $85 $122 $50 $29 $60 $44 $99 $27 $15 $103 $59 $86 $42 $67 $89 $80 $46 $104 $119 $57 $111 $52 $95 $38 $113 $108 $32 $63 $34 $69 $72 $47 $40 $81 $65 $49 $36 $62 $100 $91 $76 $19 $106 $70 $83 $115 $23 $87 $78 $118 $54 $21 $55 $109 $120 $97 $25 $17 $102 $28 $124 $980 $947 $948 $949 $935 $936 $937 $938 $132 $133 $134 $135 $136 $137 $138 $139 $140 $141 $252 $253 $254 $255 $256 $257 $928 $929 $930 $931 $297 $298 $299 $300 $301 $302 $303 $304 $330 $331 $332 $333 $334 $335 $336 $927 $919 $920 $921 $901 $902 $903 $904 $337 $258 $259 $260 $261)



void .FUNC $220 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [12])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [16])) = $6
	CALL $956($6)
	
.LABEL $label$11
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $956($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $938 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	CALL eosio_assert(CALL $939($0, $1, int_32(($2 << [16]) >> [16])), [10192])
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5 + [16]) = [0]
	*($5 + [8]) = (int_64)0
	*($5 + [20]) = [0]
	*($5 + [36]) = $1
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + $3)
	CALL $548(($5 + [32]), ($5 + [8]))
	CALL eosio_assert(((int_32)*($5 + [40]) != (int_32)*($5 + [36])), [1632])
	CALL memcpy(($5 + [31]), *($5 + [36]), [1])
	*($5 + [20]) = ((int_32)*($5 + [31]) != (int_32)[0])
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = [0]
	$1 = (*($5 + [12]) - *($5 + [8]))
	$3 = int_32($1 >> [4])
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$5 }
	$1 = CALL $955($1)
	*(($5 + [40])) = ($1 + ($3 << [4]))
	*($5 + [32]) = $1
	*($5 + [36]) = $1
	$6 = *($5 + [8])
	$3 = (*($5 + [12]) - $6)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $6, $3)
	*($5 + [36]) = (*($5 + [36]) + $3)
	
.LABEL $label$6
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($5 + [20]))
	if ( (($2 & [1]) == 0) ){ goto $label$7 }
	$4 = *((*($1) + $4))
	
.LABEL $label$7
	CALL void $1((int_32 ($5 + [32])), (int_32 ((int_32)($3 & [255]) != (int_32)[0])), (int_32 $4))
	$1 = *($5 + [32])
	if ( ($1 == 0) ){ goto $label$8 }
	*($5 + [36]) = $1
	CALL $956($1)
	
.LABEL $label$8
	$1 = *($5 + [8])
	if ( ($1 == 0) ){ goto $label$9 }
	*($5 + [12]) = $1
	CALL $956($1)
	
.LABEL $label$9
	*([0] + [4]) = ($5 + [48])
	return [1]
	
.LABEL $label$5
	CALL $971(($5 + [32]))
	return (unreachable)
}

void .FUNC $122 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	$3 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$0 = [5952]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$4 = *($0)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	*(($9 + [40])) = [0]
	*($9 + [16]) = $3
	*($9 + [8]) = $3
	*($9 + [24]) = (int_64)-1
	*($9 + [32]) = (int_64)0
	*($9 + [48]) = $3
	*($9 + [56]) = $7
	CALL $550(($9 + [8]), $1, $2)
	$1 = *($9 + [32])
	if ( ($1 == 0) ){ goto $label$7 }
	$2 = ($9 + [36])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $956($4)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($9 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $1
	
.LABEL $label$8
	*($2) = $1
	CALL $956($0)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [64])
}

void .FUNC $288 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [12])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [16])) = $6
	CALL $956($6)
	
.LABEL $label$11
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $956($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC frexpl (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$5 = ($4) & [32767]
	if ( ((int_32)$5) == (int_32)[32767]) ){ goto $label$1 }
	if ( $5 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($6, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL frexpl(($6 + [16]), *($6), *(($6 + [8])), $3)
	$4 = (*($3) + [-120])
	$2 = *($6 + [24])
	$1 = *($6 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($4 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($4 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	*($3) = $4
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $221 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $6) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ((int_32)($6 - $5) / (int_32)[12])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$3 }
	$6 = [357913941]
	$2 = ((int_32)($2 - $5) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $955(((int_32)$6 * (int_32)[12]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = (int_64)0
	*($6 + [8]) = [0]
	*($6 + [4]) = [0]
	*($6) = [0]
	$6 = (*($0) + [12])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$6 * (int_32)[12]))
	$5 = ($2 + ((int_32)$3 * (int_32)[12]))
	$6 = $5
	
.LOOP $label$8:
	*($6) = (int_64)0
	*($6 + [8]) = [0]
	*($6 + [4]) = [0]
	*($6) = [0]
	$6 = ($6 + [12])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 + ((int_32)((int_32)$2 / (int_32)[-12]) * (int_32)[12]))
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $956($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $537 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [64])
	*([0] + [4]) = $12
	CALL require_auth(*($0 + [40]))
	if ( ($2 == 0) ){ goto $label$1 }
	CALL $538($0, [9999])
	
.LABEL $label$1
	$2 = *($1)
	*($12 + [8]) = $2
	if ( ((int_32)$2 == (int_32)*($1 + [4])) ){ goto $label$2 }
	$6 = ($0 + [24])
	$7 = ($0 + [28])
	$8 = ($0 + [8])
	$9 = ($0 + [40])
	$10 = ($1 + [4])
	
.LOOP $label$3:
	$3 = *($2)
	$4 = *($6)
	$11 = *($7)
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$4 }
	$2 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$5:
	if ( ((int_64)*(*($2)) == (int_64)$3) ){ goto $label$4 }
	$11 = $2
	$1 = ($2 + [-24])
	$2 = $1
	if ( ((int_32)($1 + $5) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$10 }
	$2 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [52]) == (int_32)$0), [1536])
	$3 = *($9)
	if ( $2 ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$2 = CALL db_find_i64(*($0), *($8), (int_64)-4921685625297436672, $3)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$8 }
	$2 = CALL $167($0, $2)
	CALL eosio_assert(((int_32)*($2 + [52]) == (int_32)$0), [1536])
	$3 = *($9)
	
.LABEL $label$9
	*($12 + [16]) = ($12 + [8])
	CALL eosio_assert([1], [1696])
	CALL $542($0, $2, $3, ($12 + [16]))
	goto $label$6 
	
.LABEL $label$8
	$3 = *($9)
	
.LABEL $label$7
	*($12 + [56]) = ($12 + [8])
	CALL $543(($12 + [16]), $0, $3, ($12 + [56]))
	
.LABEL $label$6
	$2 = (*($12 + [8]) + [56])
	*($12 + [8]) = $2
	if ( ((int_32)$2 != (int_32)*($10)) ){ goto $label$3 }
	
.LABEL $label$2
	*(($12 + [48])) = [0]
	*($12 + [32]) = (int_64)-1
	*($12 + [40]) = (int_64)0
	$2 = ($0 + [40])
	$3 = *($2)
	*($12 + [16]) = $3
	*($12 + [24]) = $3
	$1 = CALL db_find_i64($3, $3, (int_64)-4695710445447675904, *($0 + [48]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$13 }
	$1 = CALL $540(($12 + [16]), $1)
	CALL eosio_assert(((int_32)*($1 + [12]) == (int_32)($12 + [16])), [1536])
	$3 = *($2)
	CALL eosio_assert([1], [1696])
	CALL $541(($12 + [16]), $1, $3, ($12 + [8]))
	$11 = *($12 + [40])
	if ( $11 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$3 = *($2)
	*($12 + [56]) = $0
	CALL $539(($12 + [8]), ($12 + [16]), $3, ($12 + [56]))
	$11 = *($12 + [40])
	if ( ($11 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$5 = ($12 + [44])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$11) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$1 = *($2)
	*($2) = [0]
	if ( ($1 == 0) ){ goto $label$17 }
	CALL $956($1)
	
.LABEL $label$17
	if ( ((int_32)$11 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($12 + [40]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $11
	
.LABEL $label$14
	*($5) = $11
	CALL $956($2)
	
.LABEL $label$11
	*([0] + [4]) = ($12 + [64])
}

int_32 .FUNC $939 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	*(($8 + [40])) = [0]
	*($8 + [24]) = (int_64)-1
	*($8 + [32]) = (int_64)0
	$5 = *($0 + [8])
	*($8 + [8]) = $5
	*($8 + [16]) = $5
	$7 = [1]
	$0 = CALL db_find_i64($5, $5, (int_64)-6146658315851005952, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $683(($8 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [28]) == (int_32)($8 + [8])), [1536])
	$5 = ((uint_64)CALL publication_time() / (uint_64)(int_64)1000000)
	$0 = *($0 + [16])
	$4 = *(($0 + [20]))
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 (int_64))($5 - *([0] + [12])))
	$3 = int_32(($4 - $0) >> [4])
	$4 = [0]
	
.LOOP $label$3:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$2 }
	$0 = ($0 + [16])
	$7 = [1]
	$4 = ($4 + [1])
	if ( ($4 <= $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	if ( ($6 <= *(($0 + [8]))) ){ goto $label$1 }
	$7 = ((int_32)*(($0 + [12])) != (int_32)[0])
	
.LABEL $label$1
	$3 = *($8 + [32])
	if ( ($3 == 0) ){ goto $label$4 }
	$6 = ($8 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	$2 = *($4 + [16])
	if ( ($2 == 0) ){ goto $label$9 }
	*(($4 + [20])) = $2
	CALL $956($2)
	
.LABEL $label$9
	CALL $956($4)
	
.LABEL $label$8
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($8 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $3
	
.LABEL $label$5
	*($6) = $3
	CALL $956($0)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [48])
	return $7
}

void .FUNC $503 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	$9 = *($1 + [8])
	$5 = *(($1 + [12]))
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$1 }
	$6 = int_32(($5 - $9) >> [4])
	$8 = [0]
	$7 = (*(*($3)) & [255])
	
.LOOP $label$3:
	if ( ((int_32)*($9) == (int_32)$7) ){ goto $label$2 }
	$9 = ($9 + [16])
	$8 = ($8 + [1])
	if ( ($8 <= $6) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*(*($3 + [4])) = [1]
	
.LABEL $label$1
	$7 = ($1 + [8])
	$9 = *($3 + [8])
	if ( ((int_32)$5 == (int_32)*(($1 + [16]))) ){ goto $label$5 }
	*($5) = *($9)
	*(($5 + [8])) = *(($9 + [8]))
	$8 = (*($9) + [16])
	*(($9 = ($1 + [12]))) = $8
	goto $label$4 
	
.LABEL $label$5
	CALL $504($7, $9)
	$8 = *(($1 + [12]))
	
.LABEL $label$4
	$9 = ($1 + [8])
	*(*($3 + [12])) = int_32(($8 - *($9)) >> [4])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$6 = *($9)
	$8 = *(($1 + [12]))
	$3 = ($8 - $6)
	$10 = (CASTING uint_64)(uint_32 int_32($3 >> [4]))
	$9 = [22]
	
.LOOP $label$6:
	$9 = ($9 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$8 }
	$9 = (((int_32)uint_32(($3 + [-16]) >> [4]) * (int_32)[14]) + $9)
	goto $label$7 
	
.LABEL $label$8
	$9 = ($9 + [-14])
	
.LABEL $label$7
	if ( ($9 <= [513]) ){ goto $label$10 }
	$8 = CALL malloc($9)
	goto $label$9 
	
.LABEL $label$10
	$8 = ($12 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$9
	*($11) = $8
	*($11 + [8]) = ($8 + $9)
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [1920])
	CALL memcpy($8, $1, [8])
	*($11 + [4]) = ($8 + [8])
	CALL $151($11, $7)
	CALL db_update_i64(*($1 + [24]), $2, $8, $9)
	if ( ($9 <= [513]) ){ goto $label$11 }
	CALL free($8)
	
.LABEL $label$11
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$12 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*([0] + [4]) = ($11 + [16])
}

int_32 .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1632])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [1632])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $502 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([32]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16]) = [0]
	*($3 + [20]) = $1
	CALL $505(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [24])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $146(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [12])) = $1
	CALL $956($1)
	
.LABEL $label$4
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $531 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [192])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [184]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	$5 = *($3)
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)*(($1 + [24]))), [4496])
	$6 = (int_64)
	*($1 + [16]) = $6(*($1 + [16]) - *($5)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [4544])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [4576])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [40]))), [4096])
	$6 = ((int_64)*($1 + [32]) + (int_64)*($3))
	*($1 + [32]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [4176])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	*($7 + [184]) = ($7 + [169])
	*($7 + [180]) = $7
	*($7 + [176]) = $7
	CALL $463(($7 + [176]), $1)
	CALL db_update_i64(*($1 + [188]), $2, $7, [169])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [192])
}

void .FUNC $49 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	CALL $446(($0 + [8]), $1, $3, $4)
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $704($8, $0, $2)
	$5 = *($8 + [96])
	if ( ($5 == 0) ){ goto $label$2 }
	$7 = ($8 + [100])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$4 }
	$6 = ([0] - $5)
	$3 = ($3 + [-24])
	
.LOOP $label$6:
	if ( ((*(($3 + [12])) & [1]) == 0) ){ goto $label$7 }
	CALL $956(*(($3 + [20])))
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL $956(*(($3 + [8])))
	
.LABEL $label$8
	$3 = ($3 + [-24])
	if ( ((int_32)($3 + $6) != (int_32)[-24]) ){ goto $label$6 }
	$3 = *(($8 + [96]))
	goto $label$3 
	
.LABEL $label$5
	$3 = ($0 + [328])
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LABEL $label$3
	*($7) = $5
	CALL $956($3)
	
.LABEL $label$2
	$3 = ($0 + [472])
	
.LABEL $label$1
	CALL void $3((int_32 $1), (int_64 $2), (int_32 $4), (int_32 [1]), (int_32 *(*($3) + [4])))
	*([0] + [4]) = ($8 + [112])
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$6 = *($1)
	$5 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	*($7 + [8]) = [0]
	*($7) = (int_64)0
	*($7 + [12]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1632])
	CALL memcpy($7, $5, [8])
	CALL eosio_assert(((int_32)($1 & [-4]) != (int_32)[8]), [1632])
	$8 = ($7 + [8])
	CALL memcpy($8, ($5 + [8]), [4])
	CALL eosio_assert(((int_32)$1 != (int_32)[12]), [1632])
	$4 = ($7 + [12])
	CALL memcpy($4, ($5 + [12]), [1])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($5)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($4)
	$8 = *($8)
	$3 = *($7)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($1) + $6))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 $8), (int_32 ($5 & [255])), (int_32 $6))
	*([0] + [4]) = ($7 + [16])
	return [1]
}

int_32 .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5 + [16]) = [0]
	*($5 + [8]) = (int_64)0
	*($5 + [20]) = [0]
	*($5 + [36]) = $1
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + $3)
	CALL $535(($5 + [32]), ($5 + [8]))
	CALL eosio_assert(((int_32)*($5 + [40]) != (int_32)*($5 + [36])), [1632])
	CALL memcpy(($5 + [31]), *($5 + [36]), [1])
	*($5 + [20]) = ((int_32)*($5 + [31]) != (int_32)[0])
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = [0]
	$1 = (*($5 + [12]) - *($5 + [8]))
	$3 = ((int_32)$1 / (int_32)[56])
	if ( ($1 == 0) ){ goto $label$6 }
	if ( ((uint_32)$3 >= (uint_32)[76695845]) ){ goto $label$5 }
	$1 = CALL $955($1)
	*(($5 + [40])) = ($1 + ((int_32)$3 * (int_32)[56]))
	*($5 + [32]) = $1
	*($5 + [36]) = $1
	$6 = *($5 + [8])
	$3 = (*($5 + [12]) - $6)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $6, $3)
	*($5 + [36]) = (*($5 + [36]) + ((int_32)((uint_32)$3 / (uint_32)[56]) * (int_32)[56]))
	
.LABEL $label$6
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($5 + [20]))
	if ( (($2 & [1]) == 0) ){ goto $label$7 }
	$4 = *((*($1) + $4))
	
.LABEL $label$7
	CALL void $1((int_32 ($5 + [32])), (int_32 ((int_32)($3 & [255]) != (int_32)[0])), (int_32 $4))
	$1 = *($5 + [32])
	if ( ($1 == 0) ){ goto $label$8 }
	*($5 + [36]) = $1
	CALL $956($1)
	
.LABEL $label$8
	$1 = *($5 + [8])
	if ( ($1 == 0) ){ goto $label$9 }
	*($5 + [12]) = $1
	CALL $956($1)
	
.LABEL $label$9
	*([0] + [4]) = ($5 + [48])
	return [1]
	
.LABEL $label$5
	CALL $971(($5 + [32]))
	return (unreachable)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($8 + [8]) = [0]
	*($8) = (int_64)0
	*($8 + [12]) = [0]
	*($8 + [16]) = [0]
	*($8 + [20]) = [0]
	*($8 + [24]) = [0]
	*($8 + [36]) = $1
	*($8 + [32]) = $1
	*($8 + [40]) = ($1 + $3)
	*($8 + [48]) = ($8 + [32])
	*($8 + [56]) = $8
	CALL $782(($8 + [56]), ($8 + [48]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($8 + [24]))
	$9 = *(($8 + [20]))
	$0 = *(($8 + [16]))
	$6 = *(($8 + [12]))
	$5 = *(($8 + [8]))
	$4 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$7 = *((*($1) + $7))
	
.LABEL $label$5
	CALL void $1((int_32 $4), (int_64 $5), (int_32 ($6 & [255])), (int_32 $0), (int_32 $9), (int_32 $3), (int_32 $7))
	*([0] + [4]) = ($8 + [64])
	return [1]
}

void .FUNC $42 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	CALL $446(($0 + [8]), $1, $5, $6)
	CALL $783(($0 + [1104]), $1, $2, $3, $4)
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [48])
	*([0] + [4]) = $3
	*(($2 = $3) + [28]) = $0
	*($2 + [16]) = *($1)
	*($2 + [20]) = *($1 + [4])
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [8])) = (int_64)0
	*($2) = (int_64)0
	*($2 + [40]) = ($1 + $0)
	*($2 + [32]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[3]), [1632])
	CALL memcpy($2, $1, [4])
	*($2 + [36]) = ($1 + [4])
	CALL $788(($2 + [32]), ($2 | [4]))
	if ( ($0 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	*($2 + [36]) = ($2 + [16])
	*($2 + [32]) = ($2 + [28])
	CALL $789(($2 + [32]), $2)
	$1 = *($2 + [4])
	if ( ($1 == 0) ){ goto $label$6 }
	*(($2 + [8])) = $1
	CALL $956($1)
	
.LABEL $label$6
	*([0] + [4]) = ($2 + [48])
	return [1]
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $791(($0 + [1104]), $1, $2)
}

void .FUNC $47 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	*([0] + [4]) = $7
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $704($7, $0, $2)
	$4 = *($7 + [96])
	if ( ($4 == 0) ){ goto $label$2 }
	$6 = ($7 + [100])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$4 }
	$5 = ([0] - $4)
	$2 = ($2 + [-24])
	
.LOOP $label$6:
	if ( ((*(($2 + [12])) & [1]) == 0) ){ goto $label$7 }
	CALL $956(*(($2 + [20])))
	
.LABEL $label$7
	if ( ((*($2) & [1]) == 0) ){ goto $label$8 }
	CALL $956(*(($2 + [8])))
	
.LABEL $label$8
	$2 = ($2 + [-24])
	if ( ((int_32)($2 + $5) != (int_32)[-24]) ){ goto $label$6 }
	$2 = *(($7 + [96]))
	goto $label$3 
	
.LABEL $label$5
	$2 = ($0 + [328])
	goto $label$1 
	
.LABEL $label$4
	$2 = $4
	
.LABEL $label$3
	*($6) = $4
	CALL $956($2)
	
.LABEL $label$2
	$2 = ($0 + [472])
	
.LABEL $label$1
	CALL void $2((int_32 $1), (int_64 $3), (int_32 *(*($2))))
	*([0] + [4]) = ($7 + [112])
}

void .FUNC $46 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL $763(($0 + [328]), $1, $2)
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($6 + [4]) = [0]
	*($6) = [0]
	*($6 + [6 align=2]) = [0]
	*($6 + [20]) = $1
	*($6 + [16]) = $1
	*($6 + [24]) = ($1 + $3)
	*($6 + [32]) = ($6 + [16])
	*($6 + [40]) = $6
	CALL $765(($6 + [40]), ($6 + [32]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($6 + [8]))
	$7 = *($6 + [6])
	$0 = *($6 + [4])
	$4 = *($6)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $4), (int_32 ($0 & [255])), (int_32 int_32(($7 << [16]) >> [16])), (int_32 int_32(($3 << [16]) >> [16])), (int_32 $5))
	*([0] + [4]) = ($6 + [48])
	return [1]
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	CALL $766(($0 + [1104]), $1, $2, $3, $4)
}

void .FUNC $222 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	CALL $223(*($0 + [4]), $1)
	$7 = [12]
	$3 = ($1 + [12])
	$5 = *($1 + [12])
	$4 = *(($1 + [16]))
	$6 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[12]))
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$2 }
	$7 = ((((int_32)((uint_32)($6 + [-12]) / (uint_32)[12]) * (int_32)[10]) + $7) + [10])
	
.LABEL $label$2
	if ( ($7 <= [513]) ){ goto $label$4 }
	$9 = CALL malloc($7)
	goto $label$3 
	
.LABEL $label$4
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$3
	*($10) = $9
	$4 = ($9 + $7)
	*($10 + [8]) = $4
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [1920])
	CALL memcpy($9, $1, [8])
	$5 = ($9 + [8])
	CALL eosio_assert(((int_32)($4 - $5) > (int_32)[3]), [1920])
	CALL memcpy($5, ($1 + [8]), [4])
	*($10 + [4]) = ($9 + [12])
	CALL $217($10, $3)
	$8 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)-7948101582086733824, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL free($9)
	
.LABEL $label$5
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $509 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [240])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [216]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	CALL $518($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	*($5 + [232]) = ($5 + [216])
	*($5 + [228]) = $5
	*($5 + [224]) = $5
	CALL $519(($5 + [224]), $1)
	CALL db_update_i64(*($1 + [220]), $2, $5, [216])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [240])
}

void .FUNC $714 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [80])
	*([0] + [4]) = $8
	*($8 + [72]) = $2
	*($8 + [64]) = $3
	*(($8 + [56])) = [0]
	*($8 + [40]) = (int_64)-1
	*($8 + [48]) = (int_64)0
	$3 = *($0 + [8])
	*($8 + [24]) = $3
	*($8 + [32]) = $3
	$7 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)-7948101582086733824, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $214(($8 + [24]), $5)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($8 + [24])), [1536])
	
.LABEL $label$1
	$5 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($5, [3568])
	*($8 + [23]) = [0]
	$3 = *(($0 + [8]))
	*($8 + [12]) = ($8 + [64])
	*($8 + [8]) = ($8 + [72])
	*($8 + [16]) = ($8 + [23])
	CALL eosio_assert($5, [1696])
	CALL $715(($8 + [24]), $7, $3, ($8 + [8]))
	CALL eosio_assert(*($8 + [23]), [3568])
	$4 = *($8 + [48])
	if ( ($4 == 0) ){ goto $label$2 }
	$6 = ($8 + [52])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = ($7 + [-24])
	$0 = *($7)
	*($7) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	$5 = *($0 + [12])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($0 + [16])) = $5
	CALL $956($5)
	
.LABEL $label$7
	CALL $956($0)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$5 }
	$7 = *(($8 + [48]))
	goto $label$3 
	
.LABEL $label$4
	$7 = $4
	
.LABEL $label$3
	*($6) = $4
	CALL $956($7)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [80])
}

void .FUNC $508 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [256])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	$4 = CALL $955([232])
	$7 = CALL $520($4)
	*($4 + [216]) = $1
	*($9 + [248]) = (($9 + [16]) + [216])
	*($9 + [244]) = ($9 + [16])
	*($9 + [240]) = ($9 + [16])
	CALL $519(($9 + [240]), $7)
	$5 = *($4)
	*($4 + [220]) = CALL db_store_i64(*($1 + [8]), (int_64)-4992616317463265280, $2, $5, ($9 + [16]), [216])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($9 + [240]) = $4
	$5 = *($4)
	*($9 + [16]) = $5
	$6 = *($4 + [220])
	*($9 + [12]) = $6
	$8 = ($1 + [28])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($9 + [240]) = [0]
	*($7) = $4
	*($8) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $521(($1 + [24]), ($9 + [240]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($9 + [240])
	*($9 + [240]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $956($1)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [256])
}

void .FUNC $923 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([40]))) = (int_64)0
	*($3 + [12 align=4]) = (int_64)0
	*($3 + [20]) = [0]
	*($3 + [24]) = $1
	CALL $925(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $288(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [12])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [16])) = $1
	CALL $956($1)
	
.LABEL $label$4
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $922 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	*($7 + [72]) = $1
	*($7 + [60]) = $2
	*($7 + [56]) = [0]
	*($7 + [64]) = [0]
	*(($7 + [48])) = [0]
	*($7 + [32]) = (int_64)-1
	*($7 + [40]) = (int_64)0
	$5 = *($0 + [8])
	*($7 + [16]) = $5
	*($7 + [24]) = $5
	$2 = CALL db_find_i64($5, $5, (int_64)-4283603440564174848, $1)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$3 }
	$2 = CALL $285(($7 + [16]), $2)
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)($7 + [16])), [1536])
	$5 = *(($0 + [8]))
	*($7 + [12]) = ($7 + [72])
	*($7 + [8]) = ($7 + [56])
	CALL eosio_assert([1], [1696])
	CALL $924(($7 + [16]), $2, $5, ($7 + [8]))
	$3 = *($7 + [40])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *(($0 + [8]))
	*($7 + [12]) = ($7 + [72])
	*($7 + [8]) = ($7 + [56])
	CALL $923($7, ($7 + [16]), $5, ($7 + [8]))
	$3 = *($7 + [40])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($7 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	$4 = *($2 + [12])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [16])) = $4
	CALL $956($4)
	
.LABEL $label$8
	CALL $956($2)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($7 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $3
	
.LABEL $label$4
	*($6) = $3
	CALL $956($0)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [80])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	$3 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$0 = [1072]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)3) ){ goto $label$6 }
	$4 = *($0)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	*(($9 + [40])) = [0]
	*($9 + [16]) = $3
	*($9 + [8]) = $3
	*($9 + [24]) = (int_64)-1
	*($9 + [32]) = (int_64)0
	*($9 + [48]) = $3
	*($9 + [56]) = $7
	CALL $537(($9 + [8]), $1, $2)
	$1 = *($9 + [32])
	if ( ($1 == 0) ){ goto $label$7 }
	$2 = ($9 + [36])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $956($4)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($9 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $1
	
.LABEL $label$8
	*($2) = $1
	CALL $956($0)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [64])
}

int_32 .FUNC $920 (int_32 $0, int_32 $1)
{
	return ((( $1 ? [5] : ((int_32)$1 < (int_32)[5]) ) << [2]) + [28])
}

void .FUNC $927 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)$2 > (int_32)[3]), [10144])
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	*($6 + [24]) = (int_64)0
	$5 = *($0 + [8])
	*($6) = $5
	*($6 + [8]) = $5
	$2 = [0]
	$3 = CALL db_find_i64($5, $5, (int_64)-4860064192867598336, (CASTING int_64)(int_32 $3))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $327($6, $3)
	CALL eosio_assert(((int_32)*($2 + [20]) == (int_32)$6), [1536])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [10160])
	$3 = *($0 + [60])
	$0 = *($1 + [4])
	$2 = (*($2 + [16]) << [3])
	*($6 + [44]) = $2
	CALL eosio_assert(((uint_32)*($0 + [16]) >= (uint_32)$2), [2880])
	if ( $4 ){ goto $label$2 }
	$5 = *($3)
	*($6 + [40]) = ($6 + [44])
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [1696])
	CALL $295(($3 + [8]), $0, $5, ($6 + [40]))
	
.LABEL $label$2
	$1 = *($6 + [24])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($6 + [28])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL $956($0)
	
.LABEL $label$7
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($6 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $1
	
.LABEL $label$4
	*($4) = $1
	CALL $956($2)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $854 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	$12 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [200]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$10 = ($1 + [104])
	$4 = *($1)
	$11 = $4
	$3 = *($3)
	if ( ((int_32)$3 == (int_32)CALL memcpy(($1 + [8]), $3, [96])) ){ goto $label$1 }
	CALL $855($10, *($3 + [96]), *(($3 + [100])))
	$11 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$11), [1856])
	$8 = *($10)
	$5 = *(($1 + [108]))
	$11 = (CASTING uint_64)(uint_32 ((int_32)($5 - $8) / (int_32)[24]))
	$3 = [90]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$10 = *($8)
	$6 = ( *($8 + [4]) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($6 + $3)
	$11 = (CASTING uint_64)(uint_32 $6)
	$9 = [0]
	
.LOOP $label$5:
	$7 = $9
	$9 = ($7 + [1])
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$5 }
	$10 = *($8 + [12])
	$10 = ( *(($8 + [16])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$3 = (($7 + (($6 + $10) + $3)) + [1])
	$11 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$6 }
	$8 = ($8 + [24])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$4 }
	
.LABEL $label$3
	$9 = *(($1 + [168]))
	$10 = *(($1 + [172]))
	$7 = ($10 - $9)
	$11 = (CASTING uint_64)(uint_32 int_32($7 >> [5]))
	$3 = ($3 + [44])
	
.LOOP $label$7:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$8 }
	$3 = ((((int_32)uint_32(($7 + [-32]) >> [5]) * (int_32)[21]) + $3) + [21])
	
.LABEL $label$8
	$10 = ($3 + [16])
	if ( ($10 <= [513]) ){ goto $label$10 }
	$3 = CALL malloc($10)
	goto $label$9 
	
.LABEL $label$10
	$3 = ($13 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$9
	*($12 + [4]) = $3
	*($12) = $3
	*($12 + [8]) = ($3 + $10)
	CALL $470($12, $1)
	CALL db_update_i64(*($1 + [204]), $2, $3, $10)
	if ( ($10 <= [513]) ){ goto $label$11 }
	CALL free($3)
	
.LABEL $label$11
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$12 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $925 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	*(*(($7 = *($0 + [4])))) = [1]
	*($1 + [8]) = *(*($7))
	$2 = *($0)
	*($1) = *(*($7 + [4]))
	$7 = *($7)
	$4 = ($1 + [16])
	$9 = *($4)
	if ( ((int_32)$9 == (int_32)*(($1 + [20]))) ){ goto $label$2 }
	*($9) = *($7)
	*(($9 + [8])) = *(($7 + [8]))
	$9 = (*($4) + [12])
	*($4) = $9
	$6 = ($1 + [12])
	goto $label$1 
	
.LABEL $label$2
	$6 = ($1 + [12])
	CALL $218($6, $7)
	$9 = *($4)
	
.LABEL $label$1
	$4 = ($1 + [8])
	$7 = [12]
	$3 = *($6)
	$5 = ($9 - $3)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[12]))
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$4 }
	$7 = ((((int_32)((uint_32)($5 + [-12]) / (uint_32)[12]) * (int_32)[10]) + $7) + [10])
	
.LABEL $label$4
	if ( ($7 <= [513]) ){ goto $label$6 }
	$9 = CALL malloc($7)
	goto $label$5 
	
.LABEL $label$6
	$9 = ($11 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$5
	*($10) = $9
	$11 = ($9 + $7)
	*($10 + [8]) = $11
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [1920])
	CALL memcpy($9, $1, [8])
	$3 = ($9 + [8])
	CALL eosio_assert(((int_32)($11 - $3) > (int_32)[3]), [1920])
	CALL memcpy($3, $4, [4])
	*($10 + [4]) = ($9 + [12])
	CALL $217($10, $6)
	$8 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)-4283603440564174848, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL free($9)
	
.LABEL $label$7
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $924 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$11 = (*([0] + [4]) - [16])
	$12 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*(*($3)) = (*($1 + [8]) + [1])
	$4 = *($1)
	*($1) = *(*($3 + [4]))
	*($1 + [8]) = *(*($3))
	$3 = *($3)
	$9 = ($1 + [16])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)*(($1 + [20]))) ){ goto $label$2 }
	*($5) = *($3)
	*(($5 + [8])) = *(($3 + [8]))
	*($9) = (*($9) + [12])
	$9 = ($1 + [12])
	goto $label$1 
	
.LABEL $label$2
	$9 = ($1 + [12])
	CALL $218($9, $3)
	
.LABEL $label$1
	$5 = ($1 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$3 = [12]
	$7 = *($9)
	$6 = *(($1 + [16]))
	$8 = ($6 - $7)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$8 / (int_32)[12]))
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	$3 = ((((int_32)((uint_32)($8 + [-12]) / (uint_32)[12]) * (int_32)[10]) + $3) + [10])
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$11 = CALL malloc($3)
	goto $label$5 
	
.LABEL $label$6
	$11 = ($11 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $11
	
.LABEL $label$5
	*($12) = $11
	$6 = ($11 + $3)
	*($12 + [8]) = $6
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [1920])
	CALL memcpy($11, $1, [8])
	$7 = ($11 + [8])
	CALL eosio_assert(((int_32)($6 - $7) > (int_32)[3]), [1920])
	CALL memcpy($7, $5, [4])
	*($12 + [4]) = ($11 + [12])
	CALL $217($12, $9)
	CALL db_update_i64(*($1 + [28]), $2, $11, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL free($11)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $289 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	CALL $290(*($0 + [4]), $1)
	$7 = [12]
	$3 = ($1 + [12])
	$5 = *($1 + [12])
	$4 = *(($1 + [16]))
	$6 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[12]))
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$2 }
	$7 = ((((int_32)((uint_32)($6 + [-12]) / (uint_32)[12]) * (int_32)[10]) + $7) + [10])
	
.LABEL $label$2
	if ( ($7 <= [513]) ){ goto $label$4 }
	$9 = CALL malloc($7)
	goto $label$3 
	
.LABEL $label$4
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$3
	*($10) = $9
	$4 = ($9 + $7)
	*($10 + [8]) = $4
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [1920])
	CALL memcpy($9, $1, [8])
	$5 = ($9 + [8])
	CALL eosio_assert(((int_32)($4 - $5) > (int_32)[3]), [1920])
	CALL memcpy($5, ($1 + [8]), [4])
	*($10 + [4]) = ($9 + [12])
	CALL $217($10, $3)
	$8 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)-4283603440564174848, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL free($9)
	
.LABEL $label$5
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $928 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [48])
	*([0] + [4]) = $3
	*(($3 + [40])) = [0]
	$2 = *($0 + [8])
	*($3 + [8]) = $2
	*($3 + [4]) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [16]) = $2
	*($3) = ($3 + [8])
	$0 = *((*(CALL $365($3) + [4]) + [20]))
	CALL $367(($3 + [32]))
	*([0] + [4]) = ($3 + [48])
	return ((uint_32)$1 / (uint_32)$0)
}

void .FUNC $563 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [12])) == (int_32)$0), [5024])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [5072])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [5136])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $956($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $956($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [16]))
}

void .FUNC $562 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	*($8 + [16]) = $1
	*($8 + [14]) = $2
	CALL require_auth(*($0))
	$3 = *(($0 + [72]))
	$7 = *(($0 + [76]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [48])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$7 }
	$5 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*(($5 + [12])) == (int_32)$6), [1536])
	if ( $5 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$5 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-4149917288674710016, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $355($6, $5)
	CALL eosio_assert(((int_32)*($5 + [12]) == (int_32)$6), [1536])
	
.LABEL $label$6
	if ( ($2 == 0) ){ goto $label$4 }
	$1 = *($0)
	*($8 + [24]) = ($8 + [14])
	CALL eosio_assert([1], [1696])
	CALL $564($6, $5, $1, ($8 + [24]))
	goto $label$3 
	
.LABEL $label$5
	$1 = *($0)
	*($8 + [28]) = ($8 + [14])
	*($8 + [24]) = ($8 + [16])
	CALL $565($8, $6, $1, ($8 + [24]))
	goto $label$3 
	
.LABEL $label$4
	CALL eosio_assert([1], [4912])
	CALL eosio_assert([1], [4208])
	$7 = CALL db_next_i64(*($5 + [16]), ($8 + [24]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$8 }
	CALL $355($6, $7)
	
.LABEL $label$8
	CALL $563($6, $5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $561 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [3712])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [3776])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [1632])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($2 & [-8]) != (int_32)[8]), [1632])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
}

void .FUNC $560 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [12]) == (int_32)$0), [5024])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [5072])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [5136])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $956($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $956($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [16]))
}

void .FUNC $567 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*($5 + [24]) = $1
	CALL require_auth(*($0))
	$2 = ($0 + [8])
	$3 = ($0 + [16])
	$4 = CALL db_lowerbound_i64(*($0 + [8]), *($3), (int_64)3631284361385115648, (int_64)0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $375($2, $4)
	$4 = [0]
	$3 = CALL db_lowerbound_i64(*($2), *($3), (int_64)3631284361385115648, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $375($2, $3)
	
.LABEL $label$3
	$1 = *($0)
	*($5 + [8]) = ($5 + [24])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [1696])
	CALL $569($2, $4, $1, ($5 + [8]))
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	*($5 + [16]) = ($5 + [24])
	CALL $568(($5 + [8]), $2, $1, ($5 + [16]))
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $566 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($0 + [12]) = $1
	$1 = *($2)
	$4 = *($2 + [4])
	*($0) = *(*($4))
	*($0 + [8]) = *(*($4 + [4]))
	CALL eosio_assert([1], [1920])
	CALL memcpy($5, $0, [8])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($5 | [8]), ($0 + [8]), [2])
	$3 = *($0)
	*($0 + [16]) = CALL db_store_i64(*($1 + [8]), (int_64)-4149917288674710016, *(*($2 + [8])), $3, $5, [10])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
	return $0
}

void .FUNC $565 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $955([24])
	CALL $566($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [16])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $532(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $956($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $564 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*(($1 + [12])) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	CALL eosio_assert([1], [1920])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($5 | [8]), ($1 + [8]), [2])
	CALL db_update_i64(*($1 + [16]), $2, $5, [10])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $569 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [192])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [184]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [128]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [184]) = ($5 + [169])
	*($5 + [180]) = $5
	*($5 + [176]) = $5
	CALL $463(($5 + [176]), $1)
	CALL db_update_i64(*($1 + [188]), $2, $5, [169])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [192])
}

void .FUNC $568 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [208])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	$4 = CALL $955([200])
	$6 = CALL $393($4)
	*($4 + [184]) = $1
	*($4) = (int_64)0
	*($4 + [8]) = [0]
	*($4 + [128]) = *(*($3))
	*($8 + [200]) = (($8 + [16]) + [169])
	*($8 + [196]) = ($8 + [16])
	*($8 + [192]) = ($8 + [16])
	CALL $463(($8 + [192]), $6)
	$5 = *($4)
	*($4 + [188]) = CALL db_store_i64(*($1 + [8]), (int_64)3631284361385115648, $2, $5, ($8 + [16]), [169])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [192]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [188])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [192]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $395(($1 + [24]), ($8 + [192]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [192])
	*($8 + [192]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $956($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [208])
}

void .FUNC $398 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [40]) = ($5 + [21])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $212(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [28]), $2, $5, [21])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC $399 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $955([104])
	$4 = CALL $409($6)
	*($6 + [92]) = $0
	CALL $413(($8 + [32]), $4)
	*($6 + [96]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [96])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $411(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [84])) = $7
	CALL $956($7)
	
.LABEL $label$10
	$7 = *($4 + [68])
	if ( ($7 == 0) ){ goto $label$11 }
	*(($4 + [72])) = $7
	CALL $956($7)
	
.LABEL $label$11
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $648 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = *($2 + [32])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [36])) = $3
	CALL $956($3)
	
.LABEL $label$6
	$3 = *($2 + [20])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($2 + [24])) = $3
	CALL $956($3)
	
.LABEL $label$7
	$3 = *($2 + [8])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($2 + [12])) = $3
	CALL $956($3)
	
.LABEL $label$8
	CALL $956($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $956($2)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $649 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($2)), [1648])
	$4 = *($3)
	$7 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$4 = *($1 + [4])
	$3 = ((int_32)($4 - $7) / (int_32)[40])
	$6 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$4 }
	CALL $652($1, ($6 - $3))
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$6 >= (uint_32)$3) ){ goto $label$5 }
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	*(($1 + [4])) = $4
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($8 + [36])
	$3 = ($8 + [44])
	$2 = ($8 + [52])
	$1 = ($8 + [60])
	
.LOOP $label$6:
	*($8 + [8]) = $0
	*($8 + [16]) = $7
	*((($8 + [16]) + [8])) = ($7 + [4])
	*((($8 + [16]) + [12])) = ($7 + [6])
	*((($8 + [16]) + [16])) = ($7 + [8])
	*($6) = ($7 + [10])
	*((($8 + [16]) + [24])) = ($7 + [12])
	*($8 + [20]) = ($7 + [2])
	*($3) = ($7 + [14])
	*((($8 + [16]) + [32])) = ($7 + [16])
	*($2) = ($7 + [18])
	*((($8 + [16]) + [40])) = ($7 + [24])
	*($1) = ($7 + [32])
	CALL $653(($8 + [16]), ($8 + [8]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [64])
	return $0
}

int_32 .FUNC $390 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $391($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $643 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([40]))) = (int_64)0
	*($3 + [12 align=4]) = (int_64)0
	*($3 + [20]) = [0]
	*($3 + [24]) = $1
	CALL $645(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $220(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [12])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [16])) = $1
	CALL $956($1)
	
.LABEL $label$4
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $392 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)((int_32)($7 - $6) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$8 = *($0)
	$2 = ((int_32)($6 - $8) / (int_32)[24])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$3 }
	$6 = [178956970]
	$7 = ((int_32)($7 - $8) / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$6 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$7 = CALL $955(((int_32)$6 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*($6 + [8]) = (int_64)0
	*($6) = (int_64)0
	*(($6 = ($6 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [3776])
	$6 = (*($8) + [24])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	$3 = ($7 + ((int_32)$6 * (int_32)[24]))
	$2 = ($7 + ((int_32)$2 * (int_32)[24]))
	$8 = $2
	
.LOOP $label$13:
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	*(($6 = ($8 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$7 = [0]
	
.LABEL $label$14
	CALL eosio_assert($7, [3776])
	$8 = ($8 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$13 }
	$6 = *($0)
	$4 = ($0 + [4])
	$7 = (*($4) - $6)
	$1 = ($2 + ((int_32)((int_32)$7 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$19 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$19
	*($0) = $1
	*($4) = $8
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $956($6)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $393 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	$2 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($3 = ($0 + [24]))) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [40]))) = (int_64)1397703940
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [56]))) = (int_64)1397703940
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [72]))) = (int_64)1397703940
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [88]))) = (int_64)1397703940
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$3 = [0]
	
.LABEL $label$21
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [104]))) = (int_64)1397703940
	*($0 + [96]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$29 }
	
.LOOP $label$30:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$27 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$30 }
	
.LABEL $label$29
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$3 = [0]
	
.LABEL $label$26
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [120]))) = (int_64)1397703940
	*($0 + [112]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$34 }
	
.LOOP $label$35:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$35 }
	
.LABEL $label$34
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$3 = [0]
	
.LABEL $label$31
	CALL eosio_assert($3, [3776])
	*($0 + [136]) = [0]
	*($0 + [128]) = (int_64)0
	*($0 + [144]) = (int_64)0
	*($0 + [152]) = [0]
	*($0 + [160]) = (int_64)0
	*($0 + [168]) = (int_64)0
	*($0 + [176]) = (int_64)0
	return $0
}

int_32 .FUNC $394 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [136]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [144]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [152]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [160]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [168]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [176]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $395 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $396 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	$10 = $11
	*([0] + [4]) = $11
	$3 = *($0 + [24])
	$8 = *(($0 + [28]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$7 = ($8 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($7 + [16])) == (int_32)$1) ){ goto $label$1 }
	$8 = $7
	$5 = ($7 + [-24])
	$7 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	$5 = *(($8 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$8 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($8 >> [31]) ^ (int_32)[1]), [1600])
	if ( ((uint_32)$8 <= (uint_32)[512]) ){ goto $label$6 }
	$3 = CALL malloc($8)
	CALL db_get_i64($1, $3, $8)
	CALL free($3)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($11 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $3
	CALL db_get_i64($1, $3, $8)
	
.LABEL $label$5
	$2 = ($0 + [24])
	*(($5 = CALL $955([40])) + [16]) = (int_64)1397703940
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$11 = ($5 + [16])
	$6 = ($5 + [8])
	$9 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$4 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [3776])
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$8 > (uint_32)[7]), [1632])
	CALL memcpy($5, $3, [8])
	$7 = ($8 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [1632])
	CALL memcpy($6, ($3 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [1632])
	CALL memcpy($11, ($3 + [16]), [8])
	*($5 + [28]) = $1
	*($10 + [24]) = $5
	$9 = *($5)
	*($10 + [16]) = $9
	$8 = *($5 + [28])
	*($10 + [12]) = $8
	$1 = ($0 + [28])
	$7 = *($1)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($7 + [8]) = $9
	*($7 + [16]) = $8
	*($10 + [24]) = [0]
	*($7) = $5
	*($1) = ($7 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $420($2, ($10 + [24]), ($10 + [16]), ($10 + [12]))
	
.LABEL $label$12
	$7 = *($10 + [24])
	*($10 + [24]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $956($7)
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [32])
	return $5
}

void .FUNC $397 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	*($8 + [24]) = $2
	$3 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$7 }
	$5 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [92]) == (int_32)$6), [1536])
	$2 = *($0)
	if ( $5 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$5 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4992616317627400192, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = CALL $399($6, $5)
	CALL eosio_assert(((int_32)*($5 + [92]) == (int_32)$6), [1536])
	$2 = *($0)
	
.LABEL $label$6
	*($8 + [16]) = $1
	CALL eosio_assert([1], [1696])
	CALL $401($6, $5, $2, ($8 + [16]))
	goto $label$3 
	
.LABEL $label$5
	$2 = *($0)
	
.LABEL $label$4
	*($8 + [20]) = $1
	*($8 + [16]) = ($8 + [24])
	CALL $400(($8 + [8]), $6, $2, ($8 + [16]))
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
}

int_32 .FUNC __lctrans (int_32 $0, int_32 $1)
{
	return CALL __lctrans_impl($0, $1)
}

int_32 .FUNC __lctrans_impl (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	$1 = CALL __mo_lookup(*($1), *($1 + [4]), $0)
	return ( $1 ? $0 : $1 )
	
.LABEL $label$1
	return ( [0] ? $0 : [0] )
}

int_32 .FUNC wcrtomb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL __errno_location()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL __errno_location()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC __fpclassifyl (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [3] ? [2] : ((int_64)((int_64)$2 | (int_64)$0) != (int_64)0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

void .FUNC $653 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $859 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	*($6 + [104]) = $2
	CALL require_auth($1)
	*((($6 + [64]) + [32])) = [0]
	*($6 + [80]) = (int_64)-1
	*($6 + [88]) = (int_64)0
	$1 = *($0)
	*($6 + [64]) = $1
	*($6 + [72]) = $1
	$5 = [0]
	$3 = CALL db_find_i64($1, $1, (int_64)4982429584524836864, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $860(($6 + [64]), $3)
	CALL eosio_assert(((int_32)*($5 + [56]) == (int_32)($6 + [64])), [1536])
	$2 = *($6 + [104])
	
.LABEL $label$1
	$3 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($3, [9344])
	$1 = *($0)
	CALL eosio_assert($3, [1696])
	CALL $861(($6 + [64]), $5, $1, ($6 + [24]))
	*((($6 + [24]) + [32])) = [0]
	*($6 + [40]) = (int_64)-1
	*($6 + [48]) = (int_64)0
	$1 = *($0)
	*($6 + [24]) = $1
	*($6 + [32]) = $1
	$5 = CALL db_find_i64($1, $1, (int_64)-5032445846214410240, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$4 }
	$5 = CALL $863(($6 + [24]), $5)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($6 + [24])), [1536])
	$2 = *($0)
	CALL eosio_assert([1], [1696])
	CALL $864(($6 + [24]), $5, $2, ($6 + [8]))
	$3 = *($6 + [48])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = *($0)
	*($6 + [16]) = ($6 + [104])
	CALL $862(($6 + [8]), ($6 + [24]), $2, ($6 + [16]))
	$3 = *($6 + [48])
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($6 + [52])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$8 }
	CALL $956($5)
	
.LABEL $label$8
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($6 + [48]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $3
	
.LABEL $label$5
	*($4) = $3
	CALL $956($0)
	
.LABEL $label$2
	$3 = *($6 + [88])
	if ( ($3 == 0) ){ goto $label$9 }
	$4 = (($6 + [64]) + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$13 }
	if ( ((*($0 + [20]) & [1]) == 0) ){ goto $label$14 }
	CALL $956(*(($0 + [28])))
	
.LABEL $label$14
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL $956(*(($0 + [16])))
	
.LABEL $label$15
	CALL $956($0)
	
.LABEL $label$13
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$12 }
	$0 = *(($6 + [88]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $3
	
.LABEL $label$10
	*($4) = $3
	CALL $956($0)
	
.LABEL $label$9
	*([0] + [4]) = ($6 + [112])
}

void .FUNC $858 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	$11 = $12
	*([0] + [4]) = $12
	$6 = *($0 + [4])
	*($1) = *(*($6))
	$2 = *($0)
	$9 = ($1 + [104])
	$6 = *($6 + [4])
	if ( ((int_32)$6 == (int_32)CALL memcpy(($1 + [8]), $6, [96])) ){ goto $label$1 }
	CALL $855($9, *($6 + [96]), *(($6 + [100])))
	
.LABEL $label$1
	$7 = *($9)
	$3 = *(($1 + [108]))
	$10 = (CASTING uint_64)(uint_32 ((int_32)($3 - $7) / (int_32)[24]))
	$6 = [90]
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$9 = *($7)
	$4 = ( *($7 + [4]) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($4 + $6)
	$10 = (CASTING uint_64)(uint_32 $4)
	$8 = [0]
	
.LOOP $label$5:
	$5 = $8
	$8 = ($5 + [1])
	$9 = ($9 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	$9 = *($7 + [12])
	$9 = ( *(($7 + [16])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$6 = (($5 + (($4 + $9) + $6)) + [1])
	$10 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$6 }
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$4 }
	
.LABEL $label$3
	$8 = *(($1 + [168]))
	$9 = *(($1 + [172]))
	$5 = ($9 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($5 >> [5]))
	$6 = ($6 + [44])
	
.LOOP $label$7:
	$6 = ($6 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$6 = ((((int_32)uint_32(($5 + [-32]) >> [5]) * (int_32)[21]) + $6) + [21])
	
.LABEL $label$8
	$9 = ($6 + [16])
	if ( ($9 <= [513]) ){ goto $label$10 }
	$6 = CALL malloc($9)
	goto $label$9 
	
.LABEL $label$10
	$6 = ($12 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$9
	*($11 + [4]) = $6
	*($11) = $6
	*($11 + [8]) = ($6 + $9)
	CALL $470($11, $1)
	$10 = *($1)
	*($1 + [204]) = CALL db_store_i64(*($2 + [8]), (int_64)-4427730799613181952, *(*($0 + [8])), $10, $6, $9)
	if ( ($9 <= [513]) ){ goto $label$11 }
	CALL free($6)
	
.LABEL $label$11
	if ( (uint_64)($10 <= *($2 + [16])) ){ goto $label$12 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*([0] + [4]) = ($11 + [16])
}

int_32 .FUNC $857 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0) = (int_64)0
	CALL $481(($0 + [8]))
	*(($0 + [128])) = (int_64)0
	$4 = [0]
	*($0 + [120]) = [0]
	*(($0 + [136])) = (int_64)0
	*(($5 = ($0 + [144]))) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$3 = (uint_64)*($5) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [3776])
	*(($0 + [160])) = (int_64)0
	*(($0 + [152])) = (int_64)0
	*(($0 + [168])) = (int_64)0
	*(($0 + [176])) = [0]
	*($0 + [184]) = (int_64)0
	*($0 + [192]) = (int_64)0
	*($0 + [200]) = $1
	CALL $858($2, $0)
	return $0
}

void .FUNC $856 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = *([0] + [4])
	$10 = $11
	$3 = *($0 + [4])
	$2 = *($0)
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [9312]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$6 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	*($1) = $8
	*($1 + [8]) = *(*($3 + [4]))
	$4 = $11
	$5 = ($4 + [-16])
	*([0] + [4]) = $5
	CALL eosio_assert([1], [1920])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($4 + [-8]), ($1 + [8]), [2])
	$7 = *($1)
	*($1 + [16]) = CALL db_store_i64(*($2 + [8]), (int_64)-4695710445447675904, *(*($0 + [8])), $7, $5, [10])
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = $10
}

void .FUNC $855 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$7 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[24])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($7 - $6) / (int_32)[24])) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	$5 = ([0] - $6)
	$7 = ($7 + [-24])
	
.LOOP $label$7:
	if ( ((*(($7 + [12])) & [1]) == 0) ){ goto $label$8 }
	CALL $956(*(($7 + [20])))
	
.LABEL $label$8
	if ( ((*($7) & [1]) == 0) ){ goto $label$9 }
	CALL $956(*(($7 + [8])))
	
.LABEL $label$9
	$7 = ($7 + [-24])
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$7 }
	$7 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$7 = ($1 + ((int_32)$4 * (int_32)[24]))
	$5 = ( $7 ? $2 : ((uint_32)$3 > (uint_32)$4) )
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$10 }
	
.LOOP $label$11:
	CALL $958($6, $1)
	CALL $958(($6 + [12]), ($1 + [12]))
	$6 = ($6 + [24])
	$1 = ($1 + [24])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$12 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	$6 = ($0 + [4])
	$1 = *($6)
	
.LOOP $label$13:
	CALL $972($1, $7)
	CALL $972(($1 + [12]), ($7 + [12]))
	$1 = (*($6) + [24])
	*($6) = $1
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$13 }
	goto $label$2 
	
.LABEL $label$12
	$2 = ($0 + [4])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$14 }
	$7 = ([0] - $6)
	$1 = ($1 + [-24])
	
.LOOP $label$15:
	if ( ((*(($1 + [12])) & [1]) == 0) ){ goto $label$16 }
	CALL $956(*(($1 + [20])))
	
.LABEL $label$16
	if ( ((*($1) & [1]) == 0) ){ goto $label$17 }
	CALL $956(*(($1 + [8])))
	
.LABEL $label$17
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $7) != (int_32)[-24]) ){ goto $label$15 }
	
.LABEL $label$14
	*($2) = $6
	return 
	
.LABEL $label$5
	$7 = $6
	
.LABEL $label$4
	*(($0 + [4])) = $6
	CALL $956($7)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$1 }
	$6 = [178956970]
	$7 = ((int_32)$7 / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$18 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	
.LABEL $label$18
	$7 = ((int_32)$6 * (int_32)[24])
	$6 = CALL $955($7)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $7)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$19:
	CALL $972($6, $1)
	CALL $972(($6 + [12]), ($1 + [12]))
	$6 = (*($7) + [24])
	*($7) = $6
	$1 = ($1 + [24])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$19 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $971($0)
}

void .FUNC $652 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$4 = *($0 + [8])
	if ( ((uint_32)((int_32)($4 - $7) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$2 = ((int_32)($7 - $5) / (int_32)[40])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[107374183]) ){ goto $label$3 }
	$7 = [107374182]
	$4 = ((int_32)($4 - $5) / (int_32)[40])
	if ( ((uint_32)$4 > (uint_32)[53687090]) ){ goto $label$6 }
	$7 = ($4 << [1])
	$7 = ( $3 ? $7 : ($7 <= $3) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$4 = CALL $955(((int_32)$7 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	
.LOOP $label$7:
	*($7) = (int_64)0
	*(($4 = ($7 + [8]))) = (int_64)0
	*(($5 = ($7 + [16]))) = (int_64)0
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($7 + [6]) = [0]
	*($4) = [0]
	*($7 + [10]) = [0]
	*(($7 + [12])) = [0]
	*($7 + [14]) = [0]
	*($5) = [0]
	*($7 + [18]) = [0]
	*($7 + [24]) = (int_64)0
	*($7 + [32]) = (int_64)0
	$7 = (*($7) + [40])
	*(($7 = ($0 + [4]))) = $7
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$4 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	$3 = ($4 + ((int_32)$7 * (int_32)[40]))
	$2 = ($4 + ((int_32)$2 * (int_32)[40]))
	$7 = $2
	
.LOOP $label$8:
	*($7) = (int_64)0
	*(($4 = ($7 + [8]))) = (int_64)0
	*(($5 = ($7 + [16]))) = (int_64)0
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($7 + [6]) = [0]
	*($4) = [0]
	*($7 + [10]) = [0]
	*(($7 + [12])) = [0]
	*($7 + [14]) = [0]
	*($5) = [0]
	*($7 + [18]) = [0]
	*($7 + [24]) = (int_64)0
	*($7 + [32]) = (int_64)0
	$7 = ($7 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$6 = ($0 + [4])
	$4 = (*($6) - $1)
	$5 = ($2 + ((int_32)((int_32)$4 / (int_32)[-40]) * (int_32)[40]))
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $4)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($6) = $7
	*(($0 + [8])) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $956($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $853 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*(($1 + [12])) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	CALL eosio_assert([1], [1920])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($5 | [8]), ($1 + [8]), [2])
	CALL db_update_i64(*($1 + [16]), $2, $5, [10])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $852 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([24])) + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [12]) = $1
	CALL $856(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [16])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $545(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $851 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $955([216])
	CALL $857($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [204])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $479(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$0 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	$1 = *(($0 + [168]))
	if ( ($1 == 0) ){ goto $label$4 }
	*(($0 + [172])) = $1
	CALL $956($1)
	
.LABEL $label$4
	$5 = *(($0 + [104]))
	if ( ($5 == 0) ){ goto $label$5 }
	$4 = ($0 + [108])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$7 }
	$3 = ([0] - $5)
	$1 = ($1 + [-24])
	
.LOOP $label$8:
	if ( ((*(($1 + [12])) & [1]) == 0) ){ goto $label$9 }
	CALL $956(*(($1 + [20])))
	
.LABEL $label$9
	if ( ((*($1) & [1]) == 0) ){ goto $label$10 }
	CALL $956(*(($1 + [8])))
	
.LABEL $label$10
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $3) != (int_32)[-24]) ){ goto $label$8 }
	$1 = *(($0 + [104]))
	goto $label$6 
	
.LABEL $label$7
	$1 = $5
	
.LABEL $label$6
	*($4) = $5
	CALL $956($1)
	
.LABEL $label$5
	CALL $956($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $850 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [128])
	*([0] + [4]) = $9
	CALL $767(*($0 + [8]))
	*(($9 + [120])) = [0]
	*($9 + [104]) = (int_64)-1
	$8 = (int_64)0
	*($9 + [112]) = (int_64)0
	$6 = *($0)
	*($9 + [88]) = $6
	*($9 + [96]) = $6
	if ( ($1 == 0) ){ goto $label$4 }
	$1 = CALL db_lowerbound_i64($6, $6, (int_64)-4427730799613181952, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$5 }
	CALL $477(($9 + [88]), $1)
	*($9 + [28]) = [0]
	*($9 + [24]) = ($9 + [88])
	$6 = *(*(CALL $365(($9 + [24])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*(($1 = (($9 + [88]) + [16]))) = $8
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [3920])
	$6 = *($1)
	*($9 + [80]) = ((int_64)(CASTING uint_64)(uint_32 (int_64)($6 == 0)) + (int_64)$6)
	$6 = (int_64)0
	$1 = CALL db_lowerbound_i64(*($9 + [88]), *(($9 + [96])), (int_64)-4427730799613181952, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$6 }
	CALL $477(($9 + [88]), $1)
	$8 = CALL publication_time()
	*($9 + [76]) = [0]
	*($9 + [72]) = ($9 + [88])
	$1 = *(CALL $365(($9 + [72])) + [4])
	CALL eosio_assert((uint_64)(((int_64)*(($1 + [16])) + (int_64)*($1 + [8])) <= ((uint_64)$8 / (uint_64)(int_64)1000000)), [9280])
	
.LABEL $label$6
	$8 = *($0)
	*($9 + [28]) = $2
	*($9 + [24]) = ($9 + [80])
	CALL $851(($9 + [64]), ($9 + [88]), $8, ($9 + [24]))
	*(($9 + [56])) = [0]
	*($9 + [40]) = (int_64)-1
	*($9 + [48]) = (int_64)0
	$3 = *($0)
	*($9 + [24]) = $3
	*($9 + [32]) = $3
	$5 = (int_64)59
	$1 = [9312]
	$7 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$12 }
	$2 = *($1)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$2 = ($2 + [165])
	goto $label$10 
	
.LABEL $label$12
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$1 = ($1 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$7 }
	$1 = CALL db_find_i64($3, $3, (int_64)-4695710445447675904, $7)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL $540(($9 + [24]), $1)
	CALL eosio_assert(((int_32)*($1 + [12]) == (int_32)($9 + [24])), [1536])
	$6 = *($0)
	*($9 + [64]) = ($9 + [80])
	CALL eosio_assert([1], [1696])
	CALL $853(($9 + [24]), $1, $6, ($9 + [64]))
	$0 = *($9 + [48])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	*($9 + [12]) = [0]
	*($9 + [8]) = ($9 + [88])
	$1 = *(CALL $365(($9 + [8])) + [4])
	$6 = CALL publication_time()
	if ( ((int_32)*(($1 + [172])) == (int_32)*(($1 + [168]))) ){ goto $label$13 }
	CALL eosio_assert((uint_64)(((uint_64)$6 / (uint_64)(int_64)1000000) <= ((int_64)*(($1 + [16])) + (int_64)*($1 + [8]))), [9328])
	
.LABEL $label$13
	$6 = *($0)
	*($9 + [24]) = $2
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [1696])
	CALL $854(($9 + [88]), $1, $6, ($9 + [24]))
	goto $label$1 
	
.LABEL $label$3
	$6 = *($0)
	*($9 + [64]) = $0
	*($9 + [68]) = ($9 + [80])
	CALL $852(($9 + [16]), ($9 + [24]), $6, ($9 + [64]))
	$0 = *($9 + [48])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($9 + [52])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$15 }
	
.LOOP $label$16:
	$1 = ($1 + [-24])
	$2 = *($1)
	*($1) = [0]
	if ( ($2 == 0) ){ goto $label$17 }
	CALL $956($2)
	
.LABEL $label$17
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$16 }
	$1 = *(($9 + [48]))
	goto $label$14 
	
.LABEL $label$15
	$1 = $0
	
.LABEL $label$14
	*($4) = $0
	CALL $956($1)
	
.LABEL $label$1
	CALL $367(($9 + [112]))
	*([0] + [4]) = ($9 + [128])
}

int_32 .FUNC $365 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [204]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [3264])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-4427730799613181952)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [3200])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [3200])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $477(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $364 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [176])
	*([0] + [4]) = $13
	CALL require_auth($1)
	*((($13 + [128]) + [32])) = [0]
	*($13 + [144]) = (int_64)-1
	*($13 + [152]) = (int_64)0
	$12 = *($0)
	*($13 + [128]) = $12
	*($13 + [136]) = $12
	$11 = [0]
	$2 = CALL db_find_i64($12, $12, (int_64)-4851843198357602304, (CASTING uint_64)(uint_32 $2))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $492(($13 + [128]), $2)
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)($13 + [128])), [1536])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [5536])
	$4 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	$2 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$1) ){ goto $label$2 }
	$7 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $5) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$8 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$5 }
	$2 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$8), [1536])
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4223691270582697984, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $274($8, $7)
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$8), [1536])
	
.LABEL $label$4
	$7 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($7, [2368])
	CALL eosio_assert(((int_64)*($3) == (int_64)*($11 + [16])), [5568])
	*($13 + [120]) = *($11 + [8])
	$12 = *($0)
	*($13 + [168]) = ($13 + [120])
	CALL eosio_assert($7, [1696])
	CALL $493($8, $2, $12, ($13 + [168]))
	$6 = *($0)
	CALL eosio_assert([1], [3712])
	$12 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$8 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	
.LABEL $label$6
	CALL eosio_assert($8, [3776])
	$12 = CALL publication_time()
	$9 = *(($11 + [16]))
	$10 = *($11)
	*($13 + [64]) = (int_64))(((uint_64)$12 / (uint_64)(int_64)1000000) - *([0] + [12]))
	*($13 + [72]) = $6
	$12 = *(($11 + [24]))
	$2 = *($0 + [48])
	*($13 + [80]) = *($0 + [52])
	*(($13 + [83])) = *(($13 + [170]))
	*($13 + [81 align=1]) = *($13 + [168 align=1])
	*($13 + [84]) = $10
	*($13 + [88]) = [0]
	*($13 + [92]) = [0]
	*($13 + [96]) = [0]
	*($13 + [97]) = [0]
	*(($13 + [102])) = *(($13 + [124]))
	*($13 + [98 align=2]) = *($13 + [120 align=2])
	*($13 + [104]) = $9
	*(($13 + [112])) = $12
	CALL memcpy(($13 + [8]), ($13 + [64]), [56])
	CALL $397($2, ($13 + [8]), $1)
	$7 = *($13 + [152])
	if ( ($7 == 0) ){ goto $label$11 }
	$5 = ($13 + [156])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$8 = *($2)
	*($2) = [0]
	if ( ($8 == 0) ){ goto $label$15 }
	CALL $956($8)
	
.LABEL $label$15
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($13 + [152]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $7
	
.LABEL $label$12
	*($5) = $7
	CALL $956($2)
	
.LABEL $label$11
	*([0] + [4]) = ($13 + [176])
}

int_32 .FUNC $367 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = *(($2 + [168]))
	if ( ($8 == 0) ){ goto $label$6 }
	*(($2 + [172])) = $8
	CALL $956($8)
	
.LABEL $label$6
	$5 = ($2 + [104])
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$7 }
	$6 = ($2 + [108])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$9 }
	$4 = ([0] - $3)
	$8 = ($8 + [-24])
	
.LOOP $label$10:
	if ( ((*(($8 + [12])) & [1]) == 0) ){ goto $label$11 }
	CALL $956(*(($8 + [20])))
	
.LABEL $label$11
	if ( ((*($8) & [1]) == 0) ){ goto $label$12 }
	CALL $956(*(($8 + [8])))
	
.LABEL $label$12
	$8 = ($8 + [-24])
	if ( ((int_32)($8 + $4) != (int_32)[-24]) ){ goto $label$10 }
	$8 = *($5)
	goto $label$8 
	
.LABEL $label$9
	$8 = $3
	
.LABEL $label$8
	*($6) = $3
	CALL $956($8)
	
.LABEL $label$7
	CALL $956($2)
	
.LABEL $label$5
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	$8 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$8 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $956($8)
	
.LABEL $label$1
	return $0
}

void .FUNC $366 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	$12 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [200]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	$10 = *($3)
	CALL eosio_assert(((int_64)*($10 + [8]) == (int_64)*(($1 + [144]))), [4096])
	$11 = ((int_64)*($3) + (int_64)*($10))
	*(($3 = ($1 + [136]))) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($3) < (int_64)4611686018427387904), [4176])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$8 = *(($1 + [104]))
	$5 = *(($1 + [108]))
	$11 = (CASTING uint_64)(uint_32 ((int_32)($5 - $8) / (int_32)[24]))
	$3 = [90]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	$10 = *($8)
	$6 = ( *($8 + [4]) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($6 + $3)
	$11 = (CASTING uint_64)(uint_32 $6)
	$9 = [0]
	
.LOOP $label$4:
	$7 = $9
	$9 = ($7 + [1])
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$4 }
	$10 = *($8 + [12])
	$10 = ( *(($8 + [16])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$3 = (($7 + (($6 + $10) + $3)) + [1])
	$11 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$5 }
	$8 = ($8 + [24])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$9 = *(($1 + [168]))
	$10 = *(($1 + [172]))
	$7 = ($10 - $9)
	$11 = (CASTING uint_64)(uint_32 int_32($7 >> [5]))
	$3 = ($3 + [44])
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$7 }
	$3 = ((((int_32)uint_32(($7 + [-32]) >> [5]) * (int_32)[21]) + $3) + [21])
	
.LABEL $label$7
	$10 = ($3 + [16])
	if ( ($10 <= [513]) ){ goto $label$9 }
	$3 = CALL malloc($10)
	goto $label$8 
	
.LABEL $label$9
	$3 = ($13 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$8
	*($12 + [4]) = $3
	*($12) = $3
	*($12 + [8]) = ($3 + $10)
	CALL $470($12, $1)
	CALL db_update_i64(*($1 + [204]), $2, $3, $10)
	if ( ($10 <= [513]) ){ goto $label$10 }
	CALL free($3)
	
.LABEL $label$10
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $361 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$10 = (*([0] + [4]) - [176])
	*([0] + [4]) = $10
	CALL require_auth($1)
	CALL eosio_assert(((($2 + [-1]) & [255]) <= [3]), [2176])
	$7 = CALL $497($0, $1, $2)
	$12 = [0]
	*(($10 + [168])) = [0]
	*($10 + [152]) = (int_64)-1
	*($10 + [160]) = (int_64)0
	$11 = *($0 + [8])
	*($10 + [136]) = $11
	*($10 + [144]) = $11
	$9 = [0]
	$7 = CALL db_find_i64($11, $11, (int_64)-4888768593148248064, (CASTING int_64)(int_32 $7))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $498(($10 + [136]), $7)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)($10 + [136])), [1536])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [5648])
	$5 = *(($9 + [16]))
	$4 = *($9 + [8])
	CALL eosio_assert(((int_64)*($3) == (int_64)$4), [5680])
	$6 = *(($0 + [8]))
	CALL eosio_assert([1], [3712])
	$11 = (int_64)5459781
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$9 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$9 = [0]
	
.LABEL $label$2
	CALL eosio_assert($9, [3776])
	*($10 + [64]) = (int_64))(((uint_64)CALL publication_time() / (uint_64)(int_64)1000000) - *([0] + [12]))
	*(($10 + [83])) = *(($10 + [135]))
	*($10 + [72]) = $6
	*($10 + [80]) = [1]
	$12 = *($0 + [140])
	*($10 + [81 align=1]) = *($10 + [133 align=1])
	*($10 + [84]) = [0]
	*($10 + [88]) = $2
	*($10 + [92]) = [0]
	*($10 + [96]) = [0]
	*($10 + [97]) = [0]
	*(($10 + [102])) = *(($10 + [130]))
	*($10 + [98 align=2]) = *($10 + [126 align=2])
	*($10 + [104]) = $4
	*(($10 + [112])) = $5
	$3 = CALL memcpy($10, ($10 + [64]), [56])
	CALL $397($12, $3, $1)
	$8 = *(($7 + [32]))
	$7 = *($0 + [60])
	$9 = *(($7 + [36]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$7 }
	$12 = ($9 + [-24])
	$2 = ([0] - $8)
	
.LOOP $label$8:
	if ( ((int_64)*(*($12)) == (int_64)$1) ){ goto $label$7 }
	$9 = $12
	$10 = ($12 + [-24])
	$12 = $10
	if ( ((int_32)($10 + $2) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	$10 = ($7 + [8])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$10 }
	$12 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [24]) == (int_32)$10), [1536])
	goto $label$9 
	
.LABEL $label$10
	$12 = [0]
	$9 = CALL db_find_i64(*(($7 + [8])), *(($7 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$9 }
	$12 = CALL $186($10, $9)
	CALL eosio_assert(((int_32)*($12 + [24]) == (int_32)$10), [1536])
	
.LABEL $label$9
	$9 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($9, [2368])
	*($3 + [60]) = (int_64))(((uint_64)CALL publication_time() / (uint_64)(int_64)1000000) - *([0] + [12]))
	$11 = *(($0 + [8]))
	*($3 + [56]) = ($3 + [60])
	CALL eosio_assert($9, [1696])
	CALL $499($10, $12, $11, ($3 + [56]))
	$9 = *($3 + [160])
	if ( ($9 == 0) ){ goto $label$11 }
	$2 = ($3 + [164])
	$12 = *($2)
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$13 }
	
.LOOP $label$14:
	$12 = ($12 + [-24])
	$10 = *($12)
	*($12) = [0]
	if ( ($10 == 0) ){ goto $label$15 }
	CALL $956($10)
	
.LABEL $label$15
	if ( ((int_32)$9 != (int_32)$12) ){ goto $label$14 }
	$12 = *(($3 + [160]))
	goto $label$12 
	
.LABEL $label$13
	$12 = $9
	
.LABEL $label$12
	*($2) = $9
	CALL $956($12)
	
.LABEL $label$11
	*([0] + [4]) = ($3 + [176])
}

void .FUNC $360 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [208])
	*([0] + [4]) = $9
	$2 = *($1 + [8])
	$7 = ($1 + [12])
	if ( (( *($7) ? uint_32($2 >> [1]) : ($2 & [1]) ) == 0) ){ goto $label$1 }
	$0 = ($1 + [8])
	$7 = *($0)
	$2 = *($0)
	$3 = *($2 + [1248])
	$4 = CALL strlen($3)
	if ( ((int_32)$4 != (int_32)( *($7) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$20 }
	if ( (CALL $964($0, [0], [-1], $3, $4) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$4 = ($1 + [8])
	$7 = *($4)
	$3 = ($1 + [12])
	$5 = *($2 + [1252])
	$6 = CALL strlen($5)
	if ( ((int_32)$6 != (int_32)( *($3) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$21 }
	if ( (CALL $964($0, [0], [-1], $5, $6) == 0) ){ goto $label$18 }
	
.LABEL $label$21
	$7 = *($4)
	$5 = *($2 + [1256])
	$6 = CALL strlen($5)
	if ( ((int_32)$6 != (int_32)( *($3) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$22 }
	if ( (CALL $964($0, [0], [-1], $5, $6) == 0) ){ goto $label$17 }
	
.LABEL $label$22
	$4 = ($1 + [8])
	$7 = *($4)
	$3 = ($1 + [12])
	$5 = *($2 + [1260])
	$6 = CALL strlen($5)
	if ( ((int_32)$6 != (int_32)( *($3) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$23 }
	if ( (CALL $964($0, [0], [-1], $5, $6) == 0) ){ goto $label$16 }
	
.LABEL $label$23
	$7 = *($4)
	$5 = *($2 + [1264])
	$6 = CALL strlen($5)
	if ( ((int_32)$6 != (int_32)( *($3) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$24 }
	if ( (CALL $964($0, [0], [-1], $5, $6) == 0) ){ goto $label$15 }
	
.LABEL $label$24
	$4 = ($1 + [8])
	$7 = *($4)
	$3 = ($1 + [12])
	$5 = *($2 + [1268])
	$6 = CALL strlen($5)
	if ( ((int_32)$6 != (int_32)( *($3) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$25 }
	if ( (CALL $964($0, [0], [-1], $5, $6) == 0) ){ goto $label$14 }
	
.LABEL $label$25
	$7 = *($4)
	$5 = *($2 + [1272])
	$6 = CALL strlen($5)
	if ( ((int_32)$6 != (int_32)( *($3) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$26 }
	if ( (CALL $964($0, [0], [-1], $5, $6) == 0) ){ goto $label$13 }
	
.LABEL $label$26
	$4 = ($1 + [8])
	$7 = *($4)
	$3 = ($1 + [12])
	$5 = *($2 + [1276])
	$6 = CALL strlen($5)
	if ( ((int_32)$6 != (int_32)( *($3) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$27 }
	if ( (CALL $964($0, [0], [-1], $5, $6) == 0) ){ goto $label$12 }
	
.LABEL $label$27
	$7 = *($4)
	$5 = *($2 + [1280])
	$6 = CALL strlen($5)
	if ( ((int_32)$6 != (int_32)( *($3) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$28 }
	if ( (CALL $964($0, [0], [-1], $5, $6) == 0) ){ goto $label$11 }
	
.LABEL $label$28
	CALL eosio_assert([0], [3872])
	goto $label$2 
	
.LABEL $label$19
	$0 = ($1 + [48])
	CALL $361(($2 + [328]), *($1), (CALL $1001(( *(($1 + [28])) ? ($1 + [21]) : (*($1 + [20]) & [1]) )) & [255]), $0)
	CALL $359(($2 + [880]), *($1), $0, [0])
	goto $label$2 
	
.LABEL $label$18
	$0 = ($1 + [48])
	CALL $362(($2 + [160]), *($1), (CALL $1001(( *(($1 + [28])) ? ($1 + [21]) : (*($1 + [20]) & [1]) )) & [255]), $0)
	CALL $359(($2 + [880]), *($1), $0, [3])
	goto $label$2 
	
.LABEL $label$17
	CALL $363(($9 + [24]), $2)
	CALL eosio_assert(((int_32)*($9 + [95]) ^ (int_32)[1]), [3808])
	$0 = ($1 + [48])
	CALL $364(($2 + [216]), *($1), (CALL $1001(( *(($1 + [28])) ? ($1 + [21]) : (*($1 + [20]) & [1]) )) & [255]), $0)
	CALL $359(($2 + [880]), *($1), $0, [8])
	*(($0 = (($9 + [8]) + [8]))) = *(($1 + [56]))
	*($9 + [8]) = *($1 + [48])
	*((($9 + [136]) + [8])) = *($0)
	*($9 + [136]) = *($9 + [8])
	*(($9 + [200])) = [0]
	$8 = *($2 + [1128])
	*($9 + [168]) = $8
	*($9 + [164]) = [0]
	*($9 + [184]) = (int_64)-1
	*($9 + [192]) = (int_64)0
	*($9 + [176]) = $8
	*($9 + [160]) = ($9 + [168])
	$1 = *(CALL $365(($9 + [160])) + [4])
	$8 = *($2 + [1128])
	*($9 + [152]) = ($9 + [136])
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [1696])
	CALL $366(($9 + [168]), $1, $8, ($9 + [152]))
	CALL $367(($9 + [192]))
	$7 = *($9 + [120])
	if ( ($7 == 0) ){ goto $label$2 }
	$3 = ($9 + [124])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$10 }
	$0 = ([0] - $7)
	$1 = ($1 + [-24])
	
.LOOP $label$29:
	if ( ((*(($1 + [12])) & [1]) == 0) ){ goto $label$30 }
	CALL $956(*(($1 + [20])))
	
.LABEL $label$30
	if ( ((*($1) & [1]) == 0) ){ goto $label$31 }
	CALL $956(*(($1 + [8])))
	
.LABEL $label$31
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $0) != (int_32)[-24]) ){ goto $label$29 }
	$1 = *(($9 + [120]))
	goto $label$9 
	
.LABEL $label$16
	CALL $368(($9 + [24]), ($2 + [768]), *($1), $1, ($2 + [560]), [7])
	$0 = ($2 + [880])
	CALL $359($0, *($1), ($9 + [24]), [2])
	CALL $369($0, ($1 + [48]))
	goto $label$2 
	
.LABEL $label$15
	CALL $363(($9 + [24]), $2)
	CALL $368(($9 + [168]), ($2 + [768]), *($1), $1, ($2 + [664]), *($9 + [98]))
	$0 = ($2 + [880])
	CALL $359($0, *($1), ($9 + [168]), [2])
	CALL $369($0, ($1 + [48]))
	$7 = *($9 + [120])
	if ( ($7 == 0) ){ goto $label$2 }
	$3 = ($9 + [124])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$8 }
	$0 = ([0] - $7)
	$1 = ($1 + [-24])
	
.LOOP $label$32:
	if ( ((*(($1 + [12])) & [1]) == 0) ){ goto $label$33 }
	CALL $956(*(($1 + [20])))
	
.LABEL $label$33
	if ( ((*($1) & [1]) == 0) ){ goto $label$34 }
	CALL $956(*(($1 + [8])))
	
.LABEL $label$34
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $0) != (int_32)[-24]) ){ goto $label$32 }
	$1 = *(($9 + [120]))
	goto $label$7 
	
.LABEL $label$14
	CALL $370(($9 + [24]), ($2 + [768]), *($1), $1, ($2 + [272]), [7])
	$0 = ($2 + [880])
	CALL $359($0, *($1), ($9 + [24]), [1])
	CALL $369($0, ($1 + [48]))
	goto $label$2 
	
.LABEL $label$13
	CALL $363(($9 + [24]), $2)
	CALL $370(($9 + [168]), ($2 + [768]), *($1), $1, ($2 + [1152]), *($9 + [97]))
	$0 = ($2 + [880])
	CALL $359($0, *($1), ($9 + [168]), [1])
	CALL $369($0, ($1 + [48]))
	$7 = *($9 + [120])
	if ( ($7 == 0) ){ goto $label$2 }
	$3 = ($9 + [124])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$6 }
	$0 = ([0] - $7)
	$1 = ($1 + [-24])
	
.LOOP $label$35:
	if ( ((*(($1 + [12])) & [1]) == 0) ){ goto $label$36 }
	CALL $956(*(($1 + [20])))
	
.LABEL $label$36
	if ( ((*($1) & [1]) == 0) ){ goto $label$37 }
	CALL $956(*(($1 + [8])))
	
.LABEL $label$37
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $0) != (int_32)[-24]) ){ goto $label$35 }
	$1 = *(($9 + [120]))
	goto $label$5 
	
.LABEL $label$12
	CALL $371(($9 + [24]), ($2 + [1232]), *($1), $1)
	$0 = ($2 + [880])
	CALL $359($0, *($1), ($9 + [24]), [6])
	CALL $369($0, ($1 + [48]))
	goto $label$2 
	
.LABEL $label$11
	$0 = ($1 + [20])
	$7 = *($1 + [20])
	$3 = ($1 + [24])
	$4 = *($2 + [1284])
	$5 = CALL strlen($4)
	if ( ((int_32)$5 != (int_32)( *($3) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$38 }
	if ( (CALL $964($0, [0], [-1], $4, $5) == 0) ){ goto $label$4 }
	
.LABEL $label$38
	$7 = *($0)
	$4 = *($2 + [1288])
	$5 = CALL strlen($4)
	if ( ((int_32)$5 != (int_32)( *($3) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$39 }
	if ( (CALL $964($0, [0], [-1], $4, $5) == 0) ){ goto $label$3 }
	
.LABEL $label$39
	CALL eosio_assert([0], [3840])
	goto $label$2 
	
.LABEL $label$10
	$1 = $7
	
.LABEL $label$9
	*($3) = $7
	CALL $956($1)
	goto $label$2 
	
.LABEL $label$8
	$1 = $7
	
.LABEL $label$7
	*($3) = $7
	CALL $956($1)
	goto $label$2 
	
.LABEL $label$6
	$1 = $7
	
.LABEL $label$5
	*($3) = $7
	CALL $956($1)
	goto $label$2 
	
.LABEL $label$4
	$0 = ($1 + [48])
	CALL $372(($2 + [8]), *($1), $0)
	CALL $359(($2 + [880]), *($1), $0, [5])
	goto $label$2 
	
.LABEL $label$3
	$0 = ($1 + [48])
	CALL $373(($2 + [8]), *($1), $0)
	CALL $359(($2 + [880]), *($1), $0, [4])
	
.LABEL $label$2
	CALL $374(($2 + [880]))
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [208])
}

void .FUNC $363 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	$6 = [0]
	*(($7 + [40])) = [0]
	*($7 + [24]) = (int_64)-1
	$5 = *($1)
	*($7 + [8]) = $5
	*($7 + [16]) = $5
	*($7 + [32]) = (int_64)0
	$1 = [0]
	$4 = CALL db_lowerbound_i64($5, $5, (int_64)-4427730799613181952, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	CALL $477(($7 + [8]), $4)
	$1 = [1]
	
.LABEL $label$1
	CALL eosio_assert($1, [5600])
	*($7 + [4]) = [0]
	*($7) = ($7 + [8])
	$4 = *(CALL $365($7) + [4])
	$1 = ($4 + [8])
	$5 = CALL publication_time()
	$5 = ((uint_64)$5 / (uint_64)(int_64)1000000)
	$2 = *($4 + [8])
	if ( ((uint_64)$2 > (uint_64)$5) ){ goto $label$2 }
	$6 = ((uint_64)((int_64)*(($4 + [16])) + (int_64)$2) > (uint_64)$5)
	
.LABEL $label$2
	CALL eosio_assert($6, [5616])
	*(($1 = CALL memcpy($0, $1, [96])) + [96 align=4]) = (int_64)0
	*(($1 + [104])) = [0]
	$6 = (*(($4 + [108])) - *(($4 + [104])))
	$3 = ((int_32)$6 / (int_32)[24])
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$3 }
	$6 = CALL $955($6)
	*(($0 = ($1 + [100]))) = $6
	*(($1 + [104])) = ($6 + ((int_32)$3 * (int_32)[24]))
	*(($1 + [96])) = $6
	$4 = *(($4 + [108]))
	$1 = *(($4 + [104]))
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	CALL $972($6, $1)
	CALL $972(($6 + [12]), ($1 + [12]))
	$6 = (*($0) + [24])
	*($0) = $6
	$1 = ($1 + [24])
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$4
	CALL $367((($7 + [8]) + [24]))
	*([0] + [4]) = ($7 + [48])
	return (unreachable)
	
.LABEL $label$3
	CALL $971(($1 + [96]))
}

void .FUNC $362 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [176])
	*([0] + [4]) = $13
	CALL require_auth($1)
	*((($13 + [128]) + [32])) = [0]
	*($13 + [144]) = (int_64)-1
	*($13 + [152]) = (int_64)0
	$12 = *($0)
	*($13 + [128]) = $12
	*($13 + [136]) = $12
	$11 = [0]
	$2 = CALL db_find_i64($12, $12, (int_64)-4851843198357602304, (CASTING uint_64)(uint_32 $2))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $492(($13 + [128]), $2)
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)($13 + [128])), [1536])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [5536])
	$4 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	$2 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$1) ){ goto $label$2 }
	$7 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $5) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$8 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$5 }
	$2 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$8), [1536])
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $186($8, $7)
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$8), [1536])
	
.LABEL $label$4
	$7 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($7, [2368])
	CALL eosio_assert(((int_64)*($3) == (int_64)*($11 + [16])), [5568])
	*($13 + [120]) = *($11 + [8])
	$12 = *($0)
	*($13 + [168]) = ($13 + [120])
	CALL eosio_assert($7, [1696])
	CALL $496($8, $2, $12, ($13 + [168]))
	$6 = *($0)
	CALL eosio_assert([1], [3712])
	$12 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$8 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	
.LABEL $label$6
	CALL eosio_assert($8, [3776])
	$12 = CALL publication_time()
	$9 = *(($11 + [16]))
	$10 = *($11)
	*($13 + [64]) = (int_64))(((uint_64)$12 / (uint_64)(int_64)1000000) - *([0] + [12]))
	*($13 + [72]) = $6
	$12 = *(($11 + [24]))
	$2 = *($0 + [48])
	*($13 + [80]) = *($0 + [52])
	*(($13 + [83])) = *(($13 + [170]))
	*($13 + [81 align=1]) = *($13 + [168 align=1])
	*($13 + [84]) = $10
	*($13 + [88]) = [0]
	*($13 + [92]) = [0]
	*($13 + [96]) = [0]
	*($13 + [97]) = [0]
	*(($13 + [102])) = *(($13 + [124]))
	*($13 + [98 align=2]) = *($13 + [120 align=2])
	*($13 + [104]) = $9
	*(($13 + [112])) = $12
	CALL memcpy(($13 + [8]), ($13 + [64]), [56])
	CALL $397($2, ($13 + [8]), $1)
	$7 = *($13 + [152])
	if ( ($7 == 0) ){ goto $label$11 }
	$5 = ($13 + [156])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$8 = *($2)
	*($2) = [0]
	if ( ($8 == 0) ){ goto $label$15 }
	CALL $956($8)
	
.LABEL $label$15
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($13 + [152]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $7
	
.LABEL $label$12
	*($5) = $7
	CALL $956($2)
	
.LABEL $label$11
	*([0] + [4]) = ($13 + [176])
}

int_32 .FUNC $246 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [9]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [10]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [12]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [20]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	return $0
}

void .FUNC $247 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $244 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($1 + [24])
	$7 = *(($1 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$3 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [60]) == (int_32)$1), [1536])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-6030912128150405120, $2)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL $156($1, $6)
	CALL eosio_assert(((int_32)*($6 + [60]) == (int_32)$1), [1536])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$4
	*($0 + [4]) = [0]
	*($0) = $1
}

int_32 .FUNC $245 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	*($0) = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0 + [16]) = (int_64)512
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = [0]
	*($0 + [36]) = [0]
	*($0 + [38]) = [0]
	*($0 + [40]) = [0]
	*($0 + [44]) = [0]
	*($0 + [45]) = [0]
	*($0 + [46]) = [0]
	*($0 + [48]) = [0]
	*($0 + [50]) = [0]
	*($0 + [52]) = [0]
	*($0 + [54]) = [0]
	*($0 + [56]) = [0]
	*($0 + [58]) = [0]
	*($0 + [60]) = $1
	$1 = *($2)
	$4 = *($2 + [4])
	*($0) = *(*($4))
	*($0 + [16]) = *(*($4 + [4]))
	*($0 + [18]) = *(*($4 + [8]))
	*($5 + [72]) = ($5 + [60])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $224(($5 + [64]), $0)
	$3 = *($0)
	*($0 + [64]) = CALL db_store_i64(*($1 + [8]), (int_64)-6030912128150405120, *(*($2 + [8])), $3, $5, [60])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
	return $0
}

void .FUNC $242 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [12]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [72]) = ($5 + [60])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $224(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [64]), $2, $5, [60])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $243 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $955([72])
	CALL $245($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [64])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $158(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $956($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $240 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $7) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$6 = *($0)
	$3 = int_32(($7 - $6) >> [4])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$3 }
	$5 = [268435455]
	$2 = ($2 - $6)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$5 = int_32($2 >> [3])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL $955(($5 << [4]))
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$1 
	
.LABEL $label$5
	*(($0 + [4])) = ($7 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$7 = ($7 - $6)
	$3 = ($2 + ($3 << [4]))
	$4 = ($3 - $7)
	$1 = ($3 + ($1 << [4]))
	$5 = ($2 + ($5 << [4]))
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($4, $6, $7)
	$6 = *($0)
	
.LABEL $label$7
	*($0) = $4
	*(($0 + [4])) = $1
	*(($0 + [8])) = $5
	if ( ($6 == 0) ){ goto $label$8 }
	CALL $956($6)
	
.LABEL $label$8
	(unreachable)
}

void .FUNC $241 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	$5 = *($1 + [17])
	if ( ((int_32)$5 == (int_32)[1]) ){ goto $label$2 }
	if ( $5 ){ goto $label$1 }
	*($1 + [12]) = [0]
	*($1 + [26]) = [0]
	*($1 + [58]) = [0]
	*($1 + [32]) = [0]
	*($1 + [36]) = [0]
	*($1 + [38]) = [0]
	*($1 + [44]) = [0]
	*($1 + [46]) = [0]
	*($1 + [45]) = [0]
	*($1 + [48]) = [0]
	*($1 + [50]) = [0]
	*($1 + [52]) = [0]
	*($1 + [54]) = [0]
	*($1 + [56]) = [0]
	*(($1 + [17])) = [2]
	goto $label$1 
	
.LABEL $label$2
	*($1 + [27]) = [0]
	*($1 + [26]) = [0]
	*($1 + [58]) = [0]
	*($1 + [45]) = [0]
	*(($1 + [17])) = [2]
	
.LABEL $label$1
	*($1 + [12]) = *(*($3))
	CALL eosio_assert([1], [1856])
	$3 = $6
	$6 = ($3 + [-64])
	*([0] + [4]) = $6
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($3 + [-4])
	CALL $224($7, $1)
	CALL db_update_i64(*($1 + [64]), $2, $6, [60])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $227 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$4 = *($1)
	*($1 + [16]) = (*($1 + [16]) + *(*($3 + [4])))
	CALL eosio_assert([1], [1856])
	*($5 + [72]) = ($5 + [60])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $228(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $5, [60])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $789 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($5) = (int_64)0
	*($5 + [8]) = [0]
	$4 = (*(($1 + [8])) - *($1 + [4]))
	$3 = ((int_32)$4 / (int_32)[48])
	$2 = *($1)
	if ( ($4 == 0) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[89478486]) ){ goto $label$1 }
	$4 = CALL $955($4)
	*(($5 + [8])) = ($4 + ((int_32)$3 * (int_32)[48]))
	*($5) = $4
	*($5 + [4]) = $4
	$3 = *(($1 + [4]))
	$1 = (*(($1 + [8])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($4, $3, $1)
	*($5 + [4]) = ($4 + ((int_32)((uint_32)$1 / (uint_32)[48]) * (int_32)[48]))
	
.LABEL $label$2
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($0) + $1))
	
.LABEL $label$3
	CALL void $0((int_32 $2), (int_32 $5), (int_32 $1))
	$1 = *($5)
	if ( ($1 == 0) ){ goto $label$4 }
	*($5 + [4]) = $1
	CALL $956($1)
	
.LABEL $label$4
	*([0] + [4]) = ($5 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $971($5)
}

int_32 .FUNC $788 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($2)), [1648])
	$4 = *($3)
	$7 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$4 = *($1 + [4])
	$3 = ((int_32)($4 - $7) / (int_32)[48])
	$6 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$4 }
	CALL $790($1, ($6 - $3))
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$6 >= (uint_32)$3) ){ goto $label$5 }
	$4 = ($7 + ((int_32)$6 * (int_32)[48]))
	*(($1 + [4])) = $4
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($8 + [28])
	$3 = ($8 + [36])
	$2 = ($8 + [40])
	$1 = ($8 + [44])
	
.LOOP $label$6:
	*($8 + [8]) = $0
	*($8 + [16]) = $7
	*((($8 + [16]) + [8])) = ($7 + [4])
	*($6) = ($7 + [6])
	*((($8 + [16]) + [16])) = ($7 + [7])
	*($3) = ($7 + [8])
	*($2) = ($7 + [16])
	*($8 + [20]) = ($7 + [2])
	*($1) = ($7 + [32])
	CALL $778(($8 + [16]), ($8 + [8]))
	$7 = ($7 + [48])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [48])
	return $0
}

void .FUNC $787 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $955(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $956($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $552 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $955([24])
	CALL $559($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [16])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $545(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $956($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $785 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$5 = [0]
	*(($8 + [40])) = [0]
	*($8 + [24]) = (int_64)-1
	*($8 + [32]) = (int_64)0
	$6 = *($0 + [8])
	*($8 + [8]) = $6
	*($8 + [16]) = $6
	$0 = [0]
	$1 = CALL db_find_i64($6, $6, (int_64)-4921685625297436672, (CASTING uint_64)(uint_32 $1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $167(($8 + [8]), $1)
	CALL eosio_assert(((int_32)*($0 + [52]) == (int_32)($8 + [8])), [1536])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [2016])
	$3 = *($0 + [24])
	$1 = ($2 & [255])
	$4 = ((uint_32)(((int_32)( $1 ? [100] : ($1 <= [100]) ) * (int_32)$3) << [1]) / (uint_32)[100])
	$1 = uint_32($2 >> [24])
	$7 = ($1 & [4])
	if ( (($1 & [2]) == 0) ){ goto $label$2 }
	$1 = (uint_32($2 >> [8]) & [255])
	$5 = *($0 + [26])
	$5 = ((*($0 + [20]) - $5) + ((uint_32)(((int_32)( $1 ? [100] : ($1 <= [100]) ) * (int_32)$5) << [1]) / (uint_32)[100]))
	
.LABEL $label$2
	$1 = *($0 + [22])
	if ( $7 ){ goto $label$4 }
	$7 = *($0 + [28])
	$2 = [0]
	goto $label$3 
	
.LABEL $label$4
	$2 = (uint_32($2 >> [16]) & [255])
	$7 = *($0 + [28])
	$2 = (($1 - $7) + ((uint_32)(((int_32)( $2 ? [100] : ($2 <= [100]) ) * (int_32)$7) << [1]) / (uint_32)[100]))
	
.LABEL $label$3
	$1 = ((int_32)((int_32)(($5 + $4) + $2) * (int_32)[100]) / (int_32)((((($3 << [1]) + *($0 + [20])) + *($0 + [26])) + $1) + ($7 & [65535])))
	$5 = *($8 + [32])
	if ( ($5 == 0) ){ goto $label$5 }
	$7 = ($8 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	CALL $956($2)
	
.LABEL $label$9
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($8 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $5
	
.LABEL $label$6
	*($7) = $5
	CALL $956($0)
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [48])
	return $1
}

int_32 .FUNC $784 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [36]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [3264])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)5022829029921652736)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [3200])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [3200])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $768(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $783 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [96])
	*([0] + [4]) = $15
	*($15 + [88]) = $1
	*($15 + [87]) = $3
	*($15 + [80]) = $4
	CALL require_auth($1)
	$3 = [0]
	*(($15 + [72])) = [0]
	*($15 + [56]) = (int_64)-1
	$1 = *($0)
	*($15 + [40]) = $1
	*($15 + [48]) = $1
	*($15 + [64]) = (int_64)0
	$4 = [0]
	$14 = CALL db_lowerbound_i64($1, $1, (int_64)5022829029921652736, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$1 }
	CALL $768(($15 + [40]), $14)
	$4 = [1]
	
.LABEL $label$1
	CALL eosio_assert($4, [8352])
	*($15 + [36]) = [0]
	*($15 + [32]) = ($15 + [40])
	$5 = *(CALL $784(($15 + [32])) + [4])
	$1 = CALL publication_time()
	$12 = *([0] + [12])
	CALL eosio_assert(((int_64)*($5) == (int_64)(CASTING uint_64)(uint_32 $2)), [8576])
	$2 = (CASTING uint_32)(uint_64 (int_64))(((uint_64)$1 / (uint_64)(int_64)1000000) - $12)
	$4 = *($5 + [12])
	if ( ((uint_32)$4 > (uint_32)$2)) ){ goto $label$2 }
	$3 = ((uint_32)(*($5 + [16]) + $4) > (uint_32)$2)
	
.LABEL $label$2
	CALL eosio_assert($3, [8608])
	$6 = *($15 + [87])
	CALL eosio_assert(($6 <= int_32((*(($5 + [24])) - *($5 + [20])) >> [6])), [8400])
	$7 = *($5 + [20])
	$4 = ($7 + ($6 << [6]))
	CALL eosio_assert((*($4 + [48]) <= *($4 + [2])), [8640])
	$1 = *($15 + [88])
	$4 = *($0 + [8])
	$4 = CALL int_32 $4((int_32 $1), (int_64 *(*($4) + [20])))
	$8 = *($0 + [8])
	$13 = *($4)
	$3 = (*($4 + [4]) - $13)
	if ( ((int_32)$3 < (int_32)[20]) ){ goto $label$4 }
	$4 = *($15 + [80])
	$14 = (((uint_32)$3 / (uint_32)[20]) + [-1])
	$2 = [0]
	
.LOOP $label$5:
	$11 = ($14 - $2)
	$10 = (((int_32)$11 / (int_32)[2]) + $2)
	$9 = ($13 + ((int_32)$10 * (int_32)[20]))
	$3 = *($9)
	if ( ($3 <= $4) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$3 }
	$14 = ($10 + [-1])
	if ( ((int_32)$11 > (int_32)[1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$2 = ($10 + [1])
	if ( ((int_32)$14 > (int_32)$10) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert([0], [2112])
	$9 = ($8 + [80])
	$3 = *($8 + [80])
	$1 = *($15 + [88])
	$4 = *($15 + [80])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$3 == (int_32)$4), [2112])
	$4 = ($7 + ($6 << [6]))
	CALL eosio_assert(((int_32)*($4) == (int_32)*($9 + [4])), [8656])
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)*($9 + [7])), [8688])
	$2 = ($0 + [8])
	$3 = CALL $785(*($2), *($9 + [4]), *($9 + [12]))
	CALL eosio_assert(((int_32)*($4 + [6]) <= (int_32)$3), [8720])
	CALL eosio_assert(((int_32)*($4 + [7]) >= (int_32)$3), [8720])
	*($15 + [16]) = (int_64)0
	*($15 + [24]) = [0]
	CALL $647(($15 + [16]), ($15 + [80]))
	CALL $315(*($2), $1, ($15 + [16]))
	$1 = *($0)
	*($15 + [8]) = $0
	*($15 + [4]) = ($15 + [88])
	*($15) = ($15 + [87])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [1696])
	CALL $786(($15 + [40]), $5, $1, $15)
	$4 = *($15 + [16])
	if ( ($4 == 0) ){ goto $label$7 }
	*($15 + [20]) = $4
	CALL $956($4)
	
.LABEL $label$7
	$9 = *($15 + [64])
	if ( ($9 == 0) ){ goto $label$8 }
	$5 = ($15 + [68])
	$14 = *($5)
	if ( ((int_32)$14 == (int_32)$9) ){ goto $label$10 }
	
.LOOP $label$11:
	$14 = ($14 + [-24])
	$10 = *($14)
	*($14) = [0]
	if ( ($10 == 0) ){ goto $label$12 }
	$11 = *($10 + [20])
	if ( ($11 == 0) ){ goto $label$13 }
	$13 = ($10 + [24])
	$4 = *($13)
	if ( ((int_32)$4 == (int_32)$11) ){ goto $label$15 }
	$2 = ([0] - $11)
	$4 = ($4 + [-12])
	
.LOOP $label$16:
	$3 = *($4)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($4 + [4])) = $3
	CALL $956($3)
	
.LABEL $label$17
	$4 = ($4 + [-64])
	if ( ((int_32)($4 + $2) != (int_32)[-12]) ){ goto $label$16 }
	$4 = *(($10 + [20]))
	goto $label$14 
	
.LABEL $label$15
	$4 = $11
	
.LABEL $label$14
	*($13) = $11
	CALL $956($4)
	
.LABEL $label$13
	CALL $956($10)
	
.LABEL $label$12
	if ( ((int_32)$14 != (int_32)$9) ){ goto $label$11 }
	$4 = *(($15 + [64]))
	goto $label$9 
	
.LABEL $label$10
	$4 = $9
	
.LABEL $label$9
	*($5) = $9
	CALL $956($4)
	
.LABEL $label$8
	*([0] + [4]) = ($15 + [96])
}

void .FUNC $782 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($3 + [8]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [1632])
	CALL memcpy(($3 + [12]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($3 + [16]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($3 + [20]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($3 + [24]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

int_32 .FUNC $781 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	$2 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($3 = ($0 + [24]))) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [40]))) = (int_64)1397703940
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [3776])
	return $0
}

int_32 .FUNC $658 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $955([56]))) = (int_64)0
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [32 align=4]) = (int_64)0
	*($6 + [40]) = [0]
	*($6 + [44]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [1632])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $629(CALL $629(CALL $629(($8 + [32]), ($6 + [8])), ($6 + [20])), ($6 + [32]))
	*($6 + [48]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [48])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $661(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [36])) = $7
	CALL $956($7)
	
.LABEL $label$10
	$7 = *($4 + [20])
	if ( ($7 == 0) ){ goto $label$11 }
	*(($4 + [24])) = $7
	CALL $956($7)
	
.LABEL $label$11
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$12 }
	*(($4 + [12])) = $7
	CALL $956($7)
	
.LABEL $label$12
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $149 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	*(($7 + [72])) = [0]
	*($7 + [56]) = (int_64)-1
	*($7 + [64]) = (int_64)0
	$4 = *($1 + [8])
	*($7 + [40]) = $4
	*($7 + [48]) = $4
	$6 = [0]
	$5 = CALL db_find_i64($4, $4, (int_64)-4888780540812984320, *($3))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $153(($7 + [40]), $5)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($7 + [40])), [1536])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [1936])
	$5 = (*($3 + [1]) + [-1])
	*($0) = (((int_32)$5 * (int_32)*($6 + [16])) + *($6 + [8]))
	*($0 + [4]) = (((int_32)$5 * (int_32)*($6 + [20])) + *($6 + [12]))
	*($0 + [8]) = (((int_32)$5 * (int_32)*($6 + [18])) + *($6 + [10]))
	*($0 + [12]) = *($6 + [14])
	CALL $154(*($1 + [68]), $0, $2, *($3))
	CALL $155(*($1 + [72]), $0, $2, *($3))
	if ( *($1 + [4]) ){ goto $label$2 }
	*(($7 + [32])) = [0]
	*($7 + [16]) = (int_64)-1
	*($7 + [24]) = (int_64)0
	$4 = *(($1 + [8]))
	*($7) = $4
	*($7 + [8]) = $4
	$6 = CALL db_find_i64($4, $4, (int_64)-6030912128150405120, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$1 = CALL $156($7, $6)
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$7), [1536])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)[3]) ){ goto $label$6 }
	if ( ((int_32)$6 == (int_32)[2]) ){ goto $label$5 }
	if ( ((int_32)$6 != (int_32)[1]) ){ goto $label$4 }
	*($0) = (*($0) + *($1 + [20]))
	$1 = *($7 + [24])
	if ( $1 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0) = (*($0) + *($1 + [24]))
	$1 = *($7 + [24])
	if ( $1 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0) = (*($0) + *($1 + [22]))
	
.LABEL $label$4
	$1 = *($7 + [24])
	if ( ($1 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = ($7 + [28])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	CALL $956($0)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$9 }
	$6 = *(($7 + [24]))
	goto $label$7 
	
.LABEL $label$8
	$6 = $1
	
.LABEL $label$7
	*($3) = $1
	CALL $956($6)
	
.LABEL $label$2
	$1 = *($7 + [64])
	if ( ($1 == 0) ){ goto $label$11 }
	$3 = ($7 + [68])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$15 }
	CALL $956($0)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$14 }
	$6 = *(($7 + [64]))
	goto $label$12 
	
.LABEL $label$13
	$6 = $1
	
.LABEL $label$12
	*($3) = $1
	CALL $956($6)
	
.LABEL $label$11
	*([0] + [4]) = ($7 + [80])
}

void .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($2, *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
}

void .FUNC $419 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [1632])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [1632])
	CALL memcpy($2, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $418 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)int_32(($8 - $7) >> [6]) >= (uint_32)$1) ){ goto $label$6 }
	$2 = *($0)
	$3 = int_32(($7 - $2) >> [6])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[67108864]) ){ goto $label$4 }
	$7 = [67108863]
	$8 = ($8 - $2)
	if ( ((uint_32)int_32($8 >> [6]) > (uint_32)[33554430]) ){ goto $label$7 }
	$7 = int_32($8 >> [5])
	$7 = ( $4 ? $7 : ($7 <= $4) )
	if ( ($7 == 0) ){ goto $label$5 }
	if ( ((uint_32)$7 >= (uint_32)[67108864]) ){ goto $label$3 }
	
.LABEL $label$7
	$8 = CALL $955(($7 << [6]))
	goto $label$2 
	
.LABEL $label$6
	$2 = ($0 + [4])
	
.LOOP $label$8:
	*(($7 = CALL memset($7, [0], [64])) + [40]) = (int_64)0
	*($7 + [8]) = (int_64)0
	*(($7 = ($7 + [48]))) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$6 = (uint_64)*($7) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$8 = [0]
	
.LABEL $label$9
	CALL eosio_assert($8, [3776])
	$7 = (*($2) + [64])
	*($2) = $7
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$7 = [0]
	$8 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $971($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($8 + ($7 << [6]))
	$3 = ($8 + ($3 << [6]))
	$7 = $3
	
.LOOP $label$14:
	*(($2 = CALL memset($7, [0], [64])) + [40]) = (int_64)0
	*($2 + [8]) = (int_64)0
	*(($7 = ($2 + [48]))) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$6 = (uint_64)*($7) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$8 = [0]
	
.LABEL $label$15
	CALL eosio_assert($8, [3776])
	$7 = ($2 + [64])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$14 }
	$8 = *($0)
	$5 = ($0 + [4])
	$1 = (*($5) - $8)
	$2 = ($3 - $1)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$20 }
	CALL memcpy($2, $8, $1)
	$8 = *($0)
	
.LABEL $label$20
	*($0) = $2
	*($5) = $7
	*(($0 + [8])) = $4
	if ( ($8 == 0) ){ goto $label$1 }
	CALL $956($8)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($2)), [1648])
	$4 = *($3)
	$7 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$4 = *($1 + [4])
	$3 = int_32(($4 - $7) >> [4])
	$6 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$4 }
	CALL $147($1, ($6 - $3))
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$6 >= (uint_32)$3) ){ goto $label$5 }
	$4 = ($7 + ($6 << [4]))
	*(($1 + [4])) = $4
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($8 + [36])
	$3 = ($8 + [40])
	
.LOOP $label$6:
	*($8 + [8]) = $0
	*($8 + [16]) = $7
	*((($8 + [16]) + [8])) = ($7 + [4])
	*((($8 + [16]) + [12])) = ($7 + [8])
	*((($8 + [16]) + [16])) = ($7 + [10])
	*($6) = ($7 + [12])
	*($3) = ($7 + [14])
	*($8 + [20]) = ($7 + [1])
	CALL $148(($8 + [16]), ($8 + [8]))
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [48])
	return $0
}

void .FUNC $416 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $7) / (int_32)[56]) >= (uint_32)$1) ){ goto $label$5 }
	$8 = *($0)
	$3 = ((int_32)($7 - $8) / (int_32)[56])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[76695845]) ){ goto $label$3 }
	$7 = [76695844]
	$2 = ((int_32)($2 - $8) / (int_32)[56])
	if ( ((uint_32)$2 > (uint_32)[38347921]) ){ goto $label$6 }
	$7 = ($2 << [1])
	$7 = ( $4 ? $7 : ($7 <= $4) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $955(((int_32)$7 * (int_32)[56]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*(($7 = CALL memset($7, [0], [40])) + [8]) = (int_64)0
	*($7) = [0]
	*($7 + [16]) = [0]
	*($7 + [20]) = [0]
	*($7 + [24]) = [0]
	*($7 + [28]) = [0]
	*($7 + [32]) = [0]
	*($7 + [33]) = [0]
	*($7 + [40]) = (int_64)0
	*(($7 = ($7 + [48]))) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$6 = (uint_64)*($7) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$2 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$2 = [0]
	
.LABEL $label$8
	CALL eosio_assert($2, [3776])
	$7 = (*($8) + [56])
	*($8) = $7
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$7 * (int_32)[56]))
	$3 = ($2 + ((int_32)$3 * (int_32)[56]))
	$7 = $3
	
.LOOP $label$13:
	*(($2 = CALL memset($7, [0], [40])) + [8]) = (int_64)0
	*($2) = [0]
	*($2 + [16]) = [0]
	*($2 + [20]) = [0]
	*($2 + [24]) = [0]
	*($2 + [28]) = [0]
	*($2 + [32]) = [0]
	*($2 + [33]) = [0]
	*($2 + [40]) = (int_64)0
	*(($7 = ($2 + [48]))) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$6 = (uint_64)*($7) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$8 = [0]
	
.LABEL $label$14
	CALL eosio_assert($8, [3776])
	$7 = ($2 + [56])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$13 }
	$2 = *($0)
	$5 = ($0 + [4])
	$8 = (*($5) - $2)
	$1 = ($3 + ((int_32)((int_32)$8 / (int_32)[-56]) * (int_32)[56]))
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$19 }
	CALL memcpy($1, $2, $8)
	$2 = *($0)
	
.LABEL $label$19
	*($0) = $1
	*($5) = $7
	*(($0 + [8])) = $4
	if ( ($2 == 0) ){ goto $label$1 }
	CALL $956($2)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$3 = int_32(($6 - $5) >> [4])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$2 = ($2 - $5)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($2 >> [3])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $955(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*($6) = [0]
	$6 = (*($0) + [16])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $971($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($6 << [4]))
	$5 = ($2 + ($3 << [4]))
	$6 = $5
	
.LOOP $label$9:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*($6) = [0]
	$6 = ($6 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $956($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $146 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $956($6)
	
.LABEL $label$11
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $956($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $141 (int_32 $0, int_32 $1, int_32 $2)
{
}

int_32 .FUNC $140 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = *($1)
	*($5 + [8]) = $4
	$1 = *($3 + [38])
	*($5) = $4
	$0 = CALL $142($0, $5, $2, $1)
	*($3 + [38]) = $0
	*([0] + [4]) = ($5 + [16])
	return ($0 & [65535])
}

void .FUNC $143 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($1 + [24])
	$7 = *(($1 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$3 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$1), [1536])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-8872998483271876608, $2)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL $144($1, $6)
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$1), [1536])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$4
	*($0 + [4]) = [0]
	*($0) = $1
}

int_32 .FUNC $142 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	float_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	$6 = CALL publication_time()
	$10 = [0]
	$7 = *([0] + [12])
	$11 = ((float_64)(CASTING float_64)(int_32 $3) / (float_64)(float_64)100)
	*($12 + [8]) = $11
	*($12) = (int_64)4607182418800017408
	$8 = *(( ($12 + [8]) ? $12 : ((float_64)$11 > (float_64)(float_64)1) ))
	*($12 + [8]) = $8
	*($12) = (int_64)4624633867356078080
	$8 = *(( ($12 + [8]) ? $12 : ((float_64)(CASTING float_64)(int_64 $8) < (float_64)(float_64)15) ))
	*($12 + [8]) = $8
	$4 = (CASTING uint_32)(uint_64 (int_64))(((uint_64)$6 / (uint_64)(int_64)1000000) - $7))
	$11 = (CASTING float_64)(int_64 $8)
	$5 = *($2 + [4])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$2 }
	$10 = [0]
	
.LOOP $label$3:
	$9 = *(($3 + [10]))
	$9 = (CASTING int_32)(float_64 ((float_64)(CASTING float_64)(int_32 ((int_32)*(($3 + [12])) * (int_32)[60])) / (float_64)(float_64))((float_64)25 - ((float_64)((float_64)(CASTING float_64)(uint_32 $9) * (float_64)(float_64)25) / (float_64)(CASTING float_64)(int_32 ($9 + [1000])))))
	$10 = ( $9) ? $10 : ((int_32)$10 < (int_32)$9) )
	$2 = (*(($3 + [4])) + $2)
	$3 = ($3 + [16])
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$3 }
	$10 = ((int_32)$10 / (int_32)[4])
	if ( ((int_32)$2 <= (int_32)[0]) ){ goto $label$2 }
	$3 = *($1 + [4])
	CALL eosio_assert(((uint_32)$4 >= (uint_32)((CASTING int_32)(float_64 ((float_64)$11 * (float_64)(float_64)120)) + *($3 + [12]))), [1504])
	goto $label$1 
	
.LABEL $label$2
	$3 = *($1 + [4])
	
.LABEL $label$1
	$3 = ((int_32)*([0] + [24]) * (int_32)[30])
	$3 = ( $3 ? $10 : ((int_32)$3 < (int_32)$10) )
	$2 = ($4 - *($3 + [12]))
	if ( ((int_32)$2 >= (int_32)$3) ){ goto $label$5 }
	$11 = ((float_64)((float_64)((float_64)(CASTING float_64)(int_32 ($3 - $2)) / (float_64)(CASTING float_64)(int_32 $3)) + (float_64)(float_64)1) * (float_64)$11)
	goto $label$4 
	
.LABEL $label$5
	$11 = ((float_64)$11 / (float_64)((float_64)((float_64)(CASTING float_64)(int_32 ($2 - $3)) / (float_64)(CASTING float_64)(int_32 $3)) + (float_64)(float_64)1))
	
.LABEL $label$4
	*($12 + [8]) = $11
	*($12) = (int_64)4607182418800017408
	$6 = *(( ($12 + [8]) ? $12 : ((float_64)$11 > (float_64)(float_64)1) ))
	*($12 + [8]) = $6
	*([0] + [4]) = ($12 + [16])
	$11 = (CASTING float_64)(int_64 $6)
	return ( (CASTING int_32)(float_64 ((float_64)$11 * (float_64)(float_64)100)) ? [1500] : ((float_64)$11 < (float_64)(float_64)15) )
}

void .FUNC $887 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [16]) = (*($1 + [16]) + [1000])
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [40]) = ($5 + [21])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $212(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [28]), $2, $5, [21])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $702 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($0 + [8]), *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy(($0 + [12]), *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$1 = *($1)
	CALL eosio_assert(((int_32)*($1 + [8]) != (int_32)*($1 + [4])), [1632])
	CALL memcpy(($0 + [14]), *($1 + [4]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
}

int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$6 = *($1)
	$5 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	*($7 + [8]) = [0]
	*($7) = (int_64)0
	*($7 + [12]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1632])
	CALL memcpy($7, $5, [8])
	CALL eosio_assert(((int_32)($1 & [-2]) != (int_32)[8]), [1632])
	$8 = ($7 + [8])
	CALL memcpy($8, ($5 + [8]), [2])
	CALL eosio_assert(((uint_32)($1 + [-10]) > (uint_32)[3]), [1632])
	$4 = ($7 + [12])
	CALL memcpy($4, ($5 + [10]), [4])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($5)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($4)
	$8 = *($8)
	$3 = *($7)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($1) + $6))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 ($8 & [65535])), (int_32 $5), (int_32 $6))
	*([0] + [4]) = ($7 + [16])
	return [1]
}

void .FUNC $99 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	CALL $446(($0 + [8]), $1, $3, $4)
	CALL $680(($0 + [296]), $1, $2, $4, [1])
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	*($6 + [12]) = [0]
	*($6 + [14]) = [0]
	*($6 + [20]) = $1
	*($6 + [16]) = $1
	*($6 + [24]) = ($1 + $3)
	*($6 + [32]) = ($6 + [16])
	*($6 + [40]) = $6
	CALL $702(($6 + [40]), ($6 + [32]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($6 + [14]))
	$7 = *(($6 + [12]))
	$0 = *(($6 + [8]))
	$4 = *($6)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $4), (int_64 $0), (int_32 ($7 & [65535])), (int_32 ($3 & [255])), (int_32 $5))
	*([0] + [4]) = ($6 + [48])
	return [1]
}

void .FUNC $95 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = *(($0 + [368]))
	$8 = *(($0 + [372]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$1 }
	$9 = ($8 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$1 }
	$8 = $9
	$7 = ($9 + [-24])
	$9 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$9 = ($0 + [344])
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)$9), [1536])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [344])), *(($0 + [352])), (int_64)-8872998483271876608, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $144($9, $8)
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)$9), [1536])
	
.LABEL $label$3
	$9 = [0]
	$8 = *($7)
	$7 = ( ($7 + [8]) ? ($0 + [404]) : $7 )
	$6 = *($7 + [4])
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$5 }
	$7 = ($8 + [1])
	$5 = int_32(($6 - $8) >> [4])
	$8 = [0]
	$9 = [0]
	
.LOOP $label$6:
	$6 = *($7)
	$9 = ( $6 ? $9 : ((int_32)$6 > (int_32)$9) )
	$7 = ($7 + [16])
	$8 = ($8 + [1])
	if ( ($8 <= $5) ){ goto $label$6 }
	
.LABEL $label$5
	CALL $696(($0 + [296]), $1, $2, $9)
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($6 + [16]) = [0]
	*($6 + [8]) = (int_64)0
	*($6 + [20 align=4]) = (int_64)0
	*($6 + [36]) = $1
	*($6 + [32]) = $1
	*($6 + [40]) = ($1 + $3)
	*($6 + [48]) = ($6 + [32])
	*($6 + [56]) = ($6 + [8])
	CALL $695(($6 + [56]), ($6 + [48]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($6 + [24]))
	$7 = *(($6 + [20]))
	$0 = *(($6 + [16]))
	$4 = *($6 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $4), (int_64 ($0 & [65535])), (int_32 $7), (int_32 $3), (int_32 $5))
	*([0] + [4]) = ($6 + [64])
	return [1]
}

void .FUNC $97 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*(($0 + [148])) = $3
	CALL $187(($5 + [24]), *(($0 + [312])), $1, [0])
	CALL require_auth(*(($0 + [304])))
	$4 = *($5 + [24])
	*($5 + [16]) = $4
	*($5 + [8 align=4]) = $4
	CALL $681(($0 + [296]), $1, $2, [0], ($5 + [8]))
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($7 + [16]) = [0]
	*($7 + [8]) = (int_64)0
	*($7 + [20]) = [0]
	*($7 + [22]) = [0]
	*($7 + [24]) = [0]
	*($7 + [36]) = $1
	*($7 + [32]) = $1
	*($7 + [40]) = ($1 + $3)
	*($7 + [48]) = ($7 + [32])
	*($7 + [56]) = ($7 + [8])
	CALL $705(($7 + [56]), ($7 + [48]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($7 + [24]))
	$8 = *(($7 + [22]))
	$0 = *(($7 + [20]))
	$5 = *(($7 + [16]))
	$4 = *($7 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($1) + $6))
	
.LABEL $label$5
	CALL void $1((int_32 $4), (int_64 $5), (int_32 ($0 & [65535])), (int_32 ($8 & [255])), (int_32 $3), (int_32 $6))
	*([0] + [4]) = ($7 + [64])
	return [1]
}

void .FUNC $91 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	*([0] + [4]) = $7
	$5 = CALL $703($0, $2)
	$5 = CALL int_32 $5((int_32 $1), (int_64 $3), (int_32 *(*($5) + [4])))
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$1 }
	if ( ($2 == 0) ){ goto $label$6 }
	CALL $704($7, $0, $2)
	$4 = *($7 + [96])
	if ( ($4 == 0) ){ goto $label$3 }
	$6 = ($7 + [100])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	$3 = ([0] - $4)
	$2 = ($2 + [-24])
	
.LOOP $label$7:
	if ( ((*(($2 + [12])) & [1]) == 0) ){ goto $label$8 }
	CALL $956(*(($2 + [20])))
	
.LABEL $label$8
	if ( ((*($2) & [1]) == 0) ){ goto $label$9 }
	CALL $956(*(($2 + [8])))
	
.LABEL $label$9
	$2 = ($2 + [-24])
	if ( ((int_32)($2 + $3) != (int_32)[-24]) ){ goto $label$7 }
	$2 = *(($7 + [96]))
	goto $label$4 
	
.LABEL $label$6
	$2 = ($0 + [328])
	goto $label$2 
	
.LABEL $label$5
	$2 = $4
	
.LABEL $label$4
	*($6) = $4
	CALL $956($2)
	
.LABEL $label$3
	$2 = ($0 + [472])
	
.LABEL $label$2
	CALL void $2((int_32 $1), (int_64 ($5 & [255])), (int_32 *(*($2) + [16])))
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [112])
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$6 = *($1)
	$5 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	*($7 + [8]) = [0]
	*($7) = (int_64)0
	*($7 + [12]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1632])
	CALL memcpy($7, $5, [8])
	CALL eosio_assert(((int_32)($1 & [-4]) != (int_32)[8]), [1632])
	$8 = ($7 + [8])
	CALL memcpy($8, ($5 + [8]), [4])
	CALL eosio_assert(((int_32)($1 & [-2]) != (int_32)[12]), [1632])
	$4 = ($7 + [12])
	CALL memcpy($4, ($5 + [12]), [2])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($5)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($4)
	$8 = *($8)
	$3 = *($7)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($1) + $6))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 $8), (int_32 ($5 & [65535])), (int_32 $6))
	*([0] + [4]) = ($7 + [16])
	return [1]
}

void .FUNC $93 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	*([0] + [4]) = $7
	$5 = CALL $703($0, $2)
	CALL void $5((int_32 $1), (int_64 $3), (int_32 $4), (int_32 *(*($5) + [8])))
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $704($7, $0, $2)
	$5 = *($7 + [96])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($7 + [100])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$4 }
	$3 = ([0] - $5)
	$2 = ($2 + [-24])
	
.LOOP $label$6:
	if ( ((*(($2 + [12])) & [1]) == 0) ){ goto $label$7 }
	CALL $956(*(($2 + [20])))
	
.LABEL $label$7
	if ( ((*($2) & [1]) == 0) ){ goto $label$8 }
	CALL $956(*(($2 + [8])))
	
.LABEL $label$8
	$2 = ($2 + [-24])
	if ( ((int_32)($2 + $3) != (int_32)[-24]) ){ goto $label$6 }
	$2 = *(($7 + [96]))
	goto $label$3 
	
.LABEL $label$5
	$2 = ($0 + [328])
	goto $label$1 
	
.LABEL $label$4
	$2 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL $956($2)
	
.LABEL $label$2
	$2 = ($0 + [472])
	
.LABEL $label$1
	CALL void $2((int_32 $1), (int_64 $4), (int_32 *(*($2) + [16])))
	*([0] + [4]) = ($7 + [112])
}

void .FUNC $732 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($9 + [24]) = $2
	*($9 + [16]) = $3
	$4 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$6), [1536])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)8526756653867991040, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $178($6, $8)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$6), [1536])
	
.LABEL $label$3
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [5424])
	*($9 + [15]) = [0]
	$1 = *($0 + [8])
	*($9 + [4]) = ($9 + [16])
	*($9) = ($9 + [24])
	*($9 + [8]) = ($9 + [15])
	CALL eosio_assert($8, [1696])
	CALL $733($6, $7, $1, $9)
	CALL eosio_assert(*($9 + [15]), [2144])
	*([0] + [4]) = ($9 + [32])
}

void .FUNC $733 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$5 = ($1 + [12])
	$4 = *($1)
	$9 = *($1 + [12])
	$7 = ($1 + [16])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$1 }
	$6 = ((int_32)($8 - $9) / (int_32)[20])
	$10 = *(*($3))
	$8 = [0]
	
.LOOP $label$3:
	if ( ((int_64)*($9) != (int_64)$10) ){ goto $label$4 }
	if ( (*(($9 + [6])) == 0) ){ goto $label$2 }
	
.LABEL $label$4
	$9 = ($9 + [20])
	$8 = ($8 + [1])
	if ( ($8 <= $6) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*(($9 + [16])) = *(*($3 + [4]))
	*(*($3 + [8])) = [1]
	
.LABEL $label$1
	CALL eosio_assert([1], [1856])
	$6 = *($5)
	$8 = *($7)
	$7 = ($8 - $6)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[20]))
	$9 = [29]
	
.LOOP $label$5:
	$9 = ($9 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$7 }
	$8 = (((int_32)((uint_32)($7 + [-20]) / (uint_32)[20]) * (int_32)[17]) + $9)
	goto $label$6 
	
.LABEL $label$7
	$8 = ($9 + [-17])
	
.LABEL $label$6
	if ( ($8 <= [513]) ){ goto $label$9 }
	$9 = CALL malloc($8)
	goto $label$8 
	
.LABEL $label$9
	$9 = ($12 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$8
	*($11) = $9
	$6 = ($9 + $8)
	*($11 + [8]) = $6
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [1920])
	CALL memcpy($9, $1, [8])
	$12 = ($9 + [8])
	CALL eosio_assert(((int_32)($6 - $12) > (int_32)[3]), [1920])
	CALL memcpy($12, ($1 + [8]), [4])
	*($11 + [4]) = ($9 + [12])
	CALL $180($11, $5)
	CALL db_update_i64(*($1 + [28]), $2, $9, $8)
	if ( ($8 <= [513]) ){ goto $label$10 }
	CALL free($9)
	
.LABEL $label$10
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $730 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [112])
	*([0] + [4]) = $15
	*($15 + [104]) = $1
	CALL require_auth($1)
	CALL _ZN14system_control15check_blacklistEN5eosio4nameE(*($0 + [88]), $1)
	$12 = [0]
	CALL $187(($15 + [64]), *($0 + [88]), $1, [0])
	$13 = *($15 + [68])
	$14 = *($13 + [36])
	$13 = *($13 + [32])
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 (int_64))(((uint_64)CALL $fimport$29() / (uint_64)(int_64)1000000) - *([0] + [12]))) >= (uint_32)($13 + (CASTING int_32)(float_64 ((float_64)((float_64)(CASTING float_64)(uint_32 $14) / (float_64)(float_64)100) * (float_64)(float_64)10)))), [7616])
	$13 = *($0 + [96])
	$4 = CALL int_32 $13((int_32 $1), (int_64 *(*($13) + [20])))
	$5 = *($0 + [96])
	$6 = *($4)
	$14 = (*($4 + [4]) - $6)
	if ( ((int_32)$14 < (int_32)[20]) ){ goto $label$2 }
	$13 = (CASTING uint_32)(uint_64 $2)
	$14 = (((uint_32)$14 / (uint_32)[20]) + [-1])
	
.LOOP $label$3:
	$7 = ($14 - $12)
	$9 = (((int_32)$7 / (int_32)[2]) + $12)
	$11 = ($6 + ((int_32)$9 * (int_32)[20]))
	$8 = *($11)
	if ( ($8 <= $13) ){ goto $label$4 }
	if ( ((uint_32)$8 <= (uint_32)$13) ){ goto $label$1 }
	$14 = ($9 + [-1])
	if ( ((int_32)$7 > (int_32)[1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$12 = ($9 + [1])
	if ( ((int_32)$14 > (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$2
	CALL eosio_assert([0], [2112])
	$11 = ($5 + [80])
	
.LABEL $label$1
	CALL eosio_assert((*($11 + [16]) == 0), [6288])
	CALL eosio_assert((*($11 + [6]) == 0), [7696])
	$13 = [0]
	*(($15 + [96])) = [0]
	*($15 + [88]) = (int_64)0
	*($15 + [80]) = (int_64)-1
	$1 = *($0)
	*($15 + [64]) = $1
	*($15 + [72]) = $1
	$12 = [0]
	$14 = CALL db_find_i64($1, $1, (int_64)-4921685625297436672, *($11 + [4]))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$5 }
	$12 = CALL $167(($15 + [64]), $14)
	CALL eosio_assert(((int_32)*($12 + [52]) == (int_32)($15 + [64])), [1536])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [7728])
	$10 = *(($3 + [8]))
	*((($15 + [48]) + [8])) = $10
	$12 = *($12 + [10])
	$1 = *($3)
	*(($15 + [8])) = $10
	*($15 + [48]) = $1
	*($15) = $1
	CALL $577($0, $15, $12)
	$14 = *($4)
	$9 = *(($4 + [4]))
	if ( ((int_32)$9 == (int_32)$14) ){ goto $label$6 }
	$12 = ($14 + [16])
	$9 = ((int_32)($9 - $14) / (int_32)[20])
	$13 = [0]
	$14 = [0]
	
.LOOP $label$7:
	$13 = (((int_32)*($12) != (int_32)[0]) + $13)
	$12 = ($12 + [20])
	$14 = ($14 + [1])
	if ( ($14 <= $9) ){ goto $label$7 }
	
.LABEL $label$6
	$1 = *($15 + [104])
	$6 = *(($7 + [40]))
	$7 = *($0 + [108])
	$9 = *(($7 + [44]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$8 }
	$12 = ($9 + [-24])
	$8 = ([0] - $6)
	
.LOOP $label$9:
	if ( ((int_64)*(*($12)) == (int_64)$1) ){ goto $label$8 }
	$9 = $12
	$14 = ($12 + [-24])
	$12 = $14
	if ( ((int_32)($14 + $8) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	$14 = ($7 + [16])
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$11 }
	$12 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [20]) == (int_32)$14), [1536])
	goto $label$10 
	
.LABEL $label$11
	$12 = [0]
	$9 = CALL db_find_i64(*(($7 + [16])), *(($7 + [24])), (int_64)-8872998483271876608, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$10 }
	$12 = CALL $144($14, $9)
	CALL eosio_assert(((int_32)*($12 + [20]) == (int_32)$14), [1536])
	
.LABEL $label$10
	$12 = ( ($12 + [8]) ? ($7 + [76]) : $12 )
	CALL eosio_assert(((int_32)*($12 + [4]) != (int_32)*($12)), [4736])
	CALL eosio_assert(((int_32)$13 < (int_32)CALL $712($0, *($15 + [104]))), [7680])
	$1 = CALL $716($0, [2])
	*($15 + [40]) = ( (int_64)1 ? $1 : (int_64)($1 == 0) )
	$1 = *($0)
	*($15 + [28]) = $3
	*($15 + [32]) = $11
	*($15 + [24]) = ($15 + [40])
	*($15 + [36]) = ($15 + [104])
	CALL $731(($15 + [16]), ($0 + [8]), $1, ($15 + [24]))
	CALL $732(*(($0 + [96])), *($15 + [104]), $2, *($15 + [40]))
	$14 = *($15 + [88])
	if ( ($14 == 0) ){ goto $label$12 }
	$9 = ($15 + [92])
	$12 = *($9)
	if ( ((int_32)$12 == (int_32)$14) ){ goto $label$14 }
	
.LOOP $label$15:
	$12 = ($12 + [-24])
	$13 = *($12)
	*($12) = [0]
	if ( ($13 == 0) ){ goto $label$16 }
	CALL $956($13)
	
.LABEL $label$16
	if ( ((int_32)$14 != (int_32)$12) ){ goto $label$15 }
	$12 = *(($15 + [88]))
	goto $label$13 
	
.LABEL $label$14
	$12 = $14
	
.LABEL $label$13
	*($9) = $14
	CALL $956($12)
	
.LABEL $label$12
	*([0] + [4]) = ($15 + [112])
}

void .FUNC $731 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*(($4 = CALL $955([56])) + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$5 = ($4 + [16])
	$6 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [3776])
	*($4 + [36]) = [0]
	*($4 + [32]) = [0]
	*($4 + [40]) = [0]
	*($4 + [44]) = $1
	*($4) = *(*($3))
	$7 = *($3 + [4])
	*(($5 + [12])) = *(($7 + [12]))
	*(($5 + [8])) = *(($7 + [8]))
	*(($5 + [4])) = *(($7 + [4]))
	*($5) = *($7)
	$7 = *($3 + [8])
	*($4 + [32]) = *($7 + [4])
	*($4 + [36]) = *($7 + [12])
	*($4 + [40]) = *($7 + [7])
	*($4 + [41]) = *($7 + [8])
	*(($4 + [8])) = *(*($3 + [12]))
	*($9 + [72]) = (($9 + [16]) + [40])
	*($9 + [68]) = ($9 + [16])
	*($9 + [64]) = ($9 + [16])
	CALL $734(($9 + [64]), $4)
	$6 = *($4)
	*($4 + [48]) = CALL db_store_i64(*($1 + [8]), (int_64)8526759268719788032, $2, $6, ($9 + [16]), [40])
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$6 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($9 + [64]) = $4
	$6 = *($4)
	*($9 + [16]) = $6
	$8 = *($4 + [48])
	*($9 + [12]) = $8
	$3 = ($1 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = $6
	*($7 + [16]) = $8
	*($9 + [64]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $469(($1 + [24]), ($9 + [64]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$7
	*($0 + [4]) = $4
	*($0) = $1
	$7 = *($9 + [64])
	*($9 + [64]) = [0]
	if ( ($7 == 0) ){ goto $label$9 }
	CALL $956($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [80])
}

void .FUNC $736 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy(($0 + [8]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($0 + [12]), *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($0 + [16]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $737 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*($7) = (int_64)0
	*($7 + [8]) = [0]
	$4 = *($1 + [12])
	$3 = *($1 + [8])
	$2 = *($1)
	$6 = (*(($1 + [20])) - *($1 + [16]))
	$5 = int_32($6 >> [2])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$6 = CALL $955($6)
	*(($7 + [8])) = ($6 + ($5 << [2]))
	*($7) = $6
	*($7 + [4]) = $6
	$5 = *(($1 + [16]))
	$1 = (*(($1 + [20])) - $5)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($6, $5, $1)
	*($7 + [4]) = ($6 + $1)
	
.LABEL $label$2
	$1 = *($0 + [4])
	$6 = *($1 + [4])
	$0 = (*(*($0)) + int_32($6 >> [1]))
	$1 = *($1)
	if ( (($6 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($0) + $1))
	
.LABEL $label$3
	CALL void $0((int_32 $2), (int_64 $3), (int_32 $4), (int_32 $7), (int_32 $1))
	$1 = *($7)
	if ( ($1 == 0) ){ goto $label$4 }
	*($7 + [4]) = $1
	CALL $956($1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $971($7)
}

int_32 .FUNC $734 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [36]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [41]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC $735 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($5) = (int_64)0
	*($5 + [8]) = [0]
	$2 = *($1)
	$4 = (*(($1 + [12])) - *($1 + [8]))
	$3 = int_32($4 >> [2])
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$4 = CALL $955($4)
	*(($5 + [8])) = ($4 + ($3 << [2]))
	*($5) = $4
	*($5 + [4]) = $4
	$3 = *(($1 + [8]))
	$1 = (*(($1 + [12])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($4, $3, $1)
	*($5 + [4]) = ($4 + $1)
	
.LABEL $label$2
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($0) + $1))
	
.LABEL $label$3
	CALL void $0((int_32 $2), (int_64 $5), (int_32 $1))
	$1 = *($5)
	if ( ($1 == 0) ){ goto $label$4 }
	*($5 + [4]) = $1
	CALL $956($1)
	
.LABEL $label$4
	*([0] + [4]) = ($5 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $971($5)
}

void .FUNC $738 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*($6) = (int_64)0
	*($6 + [8]) = [0]
	$3 = *($1 + [8])
	$2 = *($1)
	$5 = (*(($1 + [16])) - *($1 + [12]))
	$4 = int_32($5 >> [2])
	if ( ($4 == 0) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$5 = CALL $955($5)
	*(($6 + [8])) = ($5 + ($4 << [2]))
	*($6) = $5
	*($6 + [4]) = $5
	$4 = *(($1 + [12]))
	$1 = (*(($1 + [16])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $4, $1)
	*($6 + [4]) = ($5 + $1)
	
.LABEL $label$2
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*(*($0)) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($0) + $1))
	
.LABEL $label$3
	CALL void $0((int_32 $2), (int_64 $3), (int_32 $6), (int_32 $1))
	$1 = *($6)
	if ( ($1 == 0) ){ goto $label$4 }
	*($6 + [4]) = $1
	CALL $956($1)
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $971($6)
}

void .FUNC $739 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($2 + [8]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($2 + [12]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($2 + [16]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($2 + [20]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $872 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [32]) = [1]
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	$7 = *($1 + [8])
	$5 = ( *(($1 + [12])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($5 + [25])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$5 = *($1 + [20])
	$5 = ( *(($1 + [24])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$7 = ($5 + $7)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($7 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($7)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($8 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $7)
	CALL $868($9, $1)
	CALL db_update_i64(*($1 + [60]), $2, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $260 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = *($1)
	*($5 + [8]) = $4
	$1 = *($3 + [38])
	*($5) = $4
	$0 = CALL $262($0, $5, $2, $1)
	*($3 + [38]) = $0
	*([0] + [4]) = ($5 + [16])
	return ($0 & [65535])
}

void .FUNC $261 (int_32 $0, int_32 $1, int_32 $2)
{
}

int_32 .FUNC __mo_lookup (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0)
	$10 = ((int_32)$3 == (int_32)[-1794895138])
	$9 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($0 + [8])
	$5 = ( $4 ? $9 : $10 )
	if ( ((uint_32)$5 >= (uint_32)uint_32($1 >> [2])) ){ goto $label$4 }
	$12 = ($1 - ($5 << [2]))
	$11 = *($0 + [12])
	$6 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$3 }
	$11 = *($0 + [16])
	$10 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$10 >= (uint_32)$12) ){ goto $label$2 }
	if ( ((($10 | $6) & [3]) == 0) ){ goto $label$1 }
	return [0]
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$12 = uint_32($6 >> [2])
	if ( ((int_32)$3 != (int_32)[-1794895138]) ){ goto $label$16 }
	$5 = uint_32($5 >> [1])
	$6 = ($5 << [1])
	$9 = ($0 + (($6 + $12) << [2]))
	$11 = *(($9 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$15 }
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)($1 - $11)) ){ goto $label$14 }
	$9 = $5
	$7 = [0]
	
.LOOP $label$17:
	if ( *(($0 + ($11 + $8))) ){ goto $label$9 }
	$11 = CALL strcmp($2, ($0 + $11))
	if ( ($11 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$7 }
	$13 = [0]
	$4 = ( $9 ? ($4 - $9) : $11 )
	$9 = uint_32($4 >> [1])
	$11 = ((int_32)$11 < (int_32)[0])
	$7 = ( $7 ? $5 : $11 )
	$5 = ($7 + $9)
	$6 = ($5 << [1])
	$8 = ($0 + (($6 + $12) << [2]))
	$11 = *(($8 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$10 }
	$8 = *($8)
	if ( ($8 <= ($1 - $11)) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	$8 = uint_32($9 >> [1])
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$13 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ((uint_32)$11 >= (uint_32)($1 - $4)) ){ goto $label$12 }
	$5 = $8
	$7 = [0]
	
.LOOP $label$18:
	if ( *(($0 + ($4 + $11))) ){ goto $label$8 }
	$4 = CALL strcmp($2, ($0 + $4))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$6 }
	$13 = [0]
	$9 = ( $5 ? ($9 - $5) : $4 )
	$5 = uint_32($9 >> [1])
	$4 = ((int_32)$4 < (int_32)[0])
	$7 = ( $7 ? $8 : $4 )
	$8 = ($7 + $5)
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$10 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ($11 <= ($1 - $4)) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$15
	return [0]
	
.LABEL $label$14
	return [0]
	
.LABEL $label$13
	return [0]
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	$9 = ((int_32)$3 == (int_32)[-1794895138])
	$10 = ($0 + (($6 + uint_32($10 >> [2])) << [2]))
	$4 = *(($10 + [4]))
	$11 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$5 }
	$13 = [0]
	$4 = *($10)
	$4 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$4 >= (uint_32)($1 - $11)) ){ goto $label$10 }
	return ( [0] ? ($0 + $11) : *(($0 + ($11 + $4))) )
	
.LABEL $label$10
	return $13
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	return [0]
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [0]
}

void .FUNC $354 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $533($0, $2, $1)
	*([0] + [4]) = $3
}

int_32 .FUNC $355 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [1600])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $955([24])) + [8]) = [0]
	*($6) = (int_64)0
	*($6 + [12]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [1632])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-2]) != (int_32)[8]), [1632])
	CALL memcpy(($6 + [8]), ($7 + [8]), [2])
	*($6 + [16]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [16])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $532(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $356 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$2 = ($0 + [8])
	$7 = [0]
	$6 = [0]
	$4 = ($0 + [16])
	$3 = CALL db_lowerbound_i64(*($0 + [8]), *($4), (int_64)3631284361385115648, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	CALL $375($2, $3)
	$6 = [1]
	
.LABEL $label$1
	CALL eosio_assert($6, [5888])
	CALL eosio_assert(((int_64)*(CALL $375($2, CALL $fimport$18(*($2), *($4), (int_64)3631284361385115648, (int_64)0)) + [16]) >= (int_64)*($1)), [5920])
	$4 = CALL db_lowerbound_i64(*($2), *($4), (int_64)3631284361385115648, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $375($2, $4)
	
.LABEL $label$2
	$5 = *($0)
	*($8 + [8]) = $1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1696])
	CALL $531($2, $7, $5, ($8 + [8]))
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $72 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $704($8, $0, $2)
	$5 = *($8 + [96])
	if ( ($5 == 0) ){ goto $label$2 }
	$7 = ($8 + [100])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$4 }
	$6 = ([0] - $5)
	$2 = ($2 + [-24])
	
.LOOP $label$6:
	if ( ((*(($2 + [12])) & [1]) == 0) ){ goto $label$7 }
	CALL $956(*(($2 + [20])))
	
.LABEL $label$7
	if ( ((*($2) & [1]) == 0) ){ goto $label$8 }
	CALL $956(*(($2 + [8])))
	
.LABEL $label$8
	$2 = ($2 + [-24])
	if ( ((int_32)($2 + $6) != (int_32)[-24]) ){ goto $label$6 }
	$2 = *(($8 + [96]))
	goto $label$3 
	
.LABEL $label$5
	$2 = ($0 + [560])
	goto $label$1 
	
.LABEL $label$4
	$2 = $5
	
.LABEL $label$3
	*($7) = $5
	CALL $956($2)
	
.LABEL $label$2
	$2 = ($0 + [664])
	
.LABEL $label$1
	CALL void $2((int_32 $1), (int_64 $3), (int_32 $4), (int_32 *(*($2) + [8])))
	*([0] + [4]) = ($8 + [112])
}

void .FUNC $357 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*($9 + [40]) = $2
	$4 = ($0 + [8])
	$8 = [0]
	$7 = [0]
	$6 = ($0 + [16])
	$5 = CALL db_lowerbound_i64(*($0 + [8]), *($6), (int_64)3631284361385115648, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	CALL $375($4, $5)
	$7 = [1]
	
.LABEL $label$1
	CALL eosio_assert($7, [5888])
	$7 = CALL db_lowerbound_i64(*($4), *($6), (int_64)3631284361385115648, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $375($4, $7)
	
.LABEL $label$2
	$2 = *($0)
	*($9 + [8]) = $1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [1696])
	CALL $523($4, $8, $2, ($9 + [8]))
	$4 = ($0 + [128])
	$8 = ($0 + [144])
	$2 = *($8)
	if ( ((int_64)$2 != (int_64)-1) ){ goto $label$3 }
	$2 = (int_64)0
	$7 = CALL db_lowerbound_i64(*($4), *(($0 + [136])), (int_64)6299033814149437440, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	CALL $524($4, $7)
	*($9 + [12]) = [0]
	*($9 + [8]) = $4
	$2 = *(*(CALL $525(($9 + [8])) + [4]))
	$2 = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*(($0 + [144])) = $2
	
.LABEL $label$3
	CALL eosio_assert((uint_64)($2 <= (int_64)-2), [3920])
	*($9 + [32]) = *($8)
	*($9 + [28]) = (int_64))(((uint_64)CALL publication_time() / (uint_64)(int_64)1000000) - *([0] + [12]))
	$2 = *($0)
	*($9 + [16]) = $1
	*($9 + [24]) = $3
	*($9 + [12]) = ($9 + [28])
	*($9 + [8]) = ($9 + [32])
	*($9 + [20]) = ($9 + [40])
	CALL $526($9, $4, $2, ($9 + [8]))
	*([0] + [4]) = ($9 + [48])
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = (*([0] + [4]) - [64])
	*([0] + [4]) = $2
	*(($4 = $2) + [44]) = $0
	*($4 + [32]) = *($1)
	*($4 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($4 + [24])) = [0]
	*($4) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [48]) = $1
	$2 = ($1 + $0)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [1632])
	CALL memcpy($4, $1, [8])
	$3 = ($1 + [8])
	CALL eosio_assert(((uint_32)($2 - $3) > (uint_32)[3]), [1632])
	CALL memcpy(($4 + [8]), $3, [4])
	$3 = ($1 + [12])
	CALL eosio_assert(((uint_32)($2 - $3) > (uint_32)[3]), [1632])
	CALL memcpy(($4 + [12]), $3, [4])
	*($4 + [52]) = ($1 + [16])
	$2 = ($4 + [16])
	CALL $633(($4 + [48]), $2)
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($4 + [52]) = ($4 + [32])
	*($4 + [48]) = ($4 + [44])
	CALL $737(($4 + [48]), $4)
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$5 }
	*(($4 + [20])) = $1
	CALL $956($1)
	
.LABEL $label$5
	*([0] + [4]) = ($4 + [64])
	return [1]
}

int_32 .FUNC $350 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [128])
	*([0] + [4]) = $8
	*($8 + [127]) = $3
	*((($8 + [80]) + [32])) = [0]
	*($8 + [96]) = (int_64)-1
	*($8 + [104]) = (int_64)0
	$6 = *($0 + [8])
	*($8 + [80]) = $6
	*($8 + [88]) = $6
	$3 = [0]
	$5 = CALL db_find_i64($6, $6, (int_64)-4283603440564174848, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $285(($8 + [80]), $5)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)($8 + [80])), [1536])
	
.LABEL $label$1
	$5 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($5, [3568])
	*((($8 + [40]) + [32])) = [0]
	*($8 + [56]) = (int_64)-1
	*($8 + [64]) = (int_64)0
	$6 = *(($0 + [8]))
	*($8 + [40]) = $6
	*($8 + [48]) = $6
	*($8 + [36]) = [0]
	*($8 + [32]) = [0]
	*($8 + [8]) = $2
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [40])
	*($8 + [20]) = ($8 + [36])
	*($8 + [24]) = ($8 + [127])
	CALL eosio_assert($5, [1696])
	CALL $351(($8 + [80]), $3, $6, ($8 + [8]))
	CALL eosio_assert(((int_32)*($8 + [32]) != (int_32)[0]), [3568])
	$4 = *($8 + [36])
	$2 = *($8 + [64])
	if ( ($2 == 0) ){ goto $label$2 }
	$5 = ($8 + [68])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL $956($0)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$5 }
	$3 = *(($8 + [64]))
	goto $label$3 
	
.LABEL $label$4
	$3 = $2
	
.LABEL $label$3
	*($5) = $2
	CALL $956($3)
	
.LABEL $label$2
	$5 = *($8 + [104])
	if ( ($5 == 0) ){ goto $label$7 }
	$7 = ($8 + [108])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	$2 = *($0 + [12])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($0 + [16])) = $2
	CALL $956($2)
	
.LABEL $label$12
	CALL $956($0)
	
.LABEL $label$11
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$10 }
	$3 = *(($8 + [104]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $5
	
.LABEL $label$8
	*($7) = $5
	CALL $956($3)
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [128])
	return $4
}

int_32 .FUNC $212 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [9]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [10]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [12]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [20]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	return $0
}

void .FUNC $70 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	*([0] + [4]) = $7
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $704($7, $0, $2)
	$4 = *($7 + [96])
	if ( ($4 == 0) ){ goto $label$2 }
	$6 = ($7 + [100])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$4 }
	$5 = ([0] - $4)
	$2 = ($2 + [-24])
	
.LOOP $label$6:
	if ( ((*(($2 + [12])) & [1]) == 0) ){ goto $label$7 }
	CALL $956(*(($2 + [20])))
	
.LABEL $label$7
	if ( ((*($2) & [1]) == 0) ){ goto $label$8 }
	CALL $956(*(($2 + [8])))
	
.LABEL $label$8
	$2 = ($2 + [-24])
	if ( ((int_32)($2 + $5) != (int_32)[-24]) ){ goto $label$6 }
	$2 = *(($7 + [96]))
	goto $label$3 
	
.LABEL $label$5
	$2 = ($0 + [560])
	goto $label$1 
	
.LABEL $label$4
	$2 = $4
	
.LABEL $label$3
	*($6) = $4
	CALL $956($2)
	
.LABEL $label$2
	$2 = ($0 + [664])
	
.LABEL $label$1
	CALL void $2((int_32 $1), (int_64 $3), (int_32 *(*($2) + [4])))
	*([0] + [4]) = ($7 + [112])
}

void .FUNC $351 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	$11 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	CALL $352($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$3 = [12]
	$5 = ($1 + [12])
	$7 = *($1 + [12])
	$6 = *(($1 + [16]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$8 / (int_32)[12]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	$3 = ((((int_32)((uint_32)($8 + [-12]) / (uint_32)[12]) * (int_32)[10]) + $3) + [10])
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$10 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$10 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$3
	*($11) = $10
	$6 = ($10 + $3)
	*($11 + [8]) = $6
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [1920])
	CALL memcpy($10, $1, [8])
	$7 = ($10 + [8])
	CALL eosio_assert(((int_32)($6 - $7) > (int_32)[3]), [1920])
	CALL memcpy($7, ($1 + [8]), [4])
	*($11 + [4]) = ($10 + [12])
	CALL $217($11, $5)
	CALL db_update_i64(*($1 + [28]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($10)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $181 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [1920])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), $2, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $494 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $352 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$15 = *($0)
	if ( ((int_32)*($15 + [4]) == (int_32)*($15)) ){ goto $label$1 }
	$15 = *($0 + [4])
	$9 = ($1 + [16])
	$13 = ($0 + [4])
	$12 = ($0 + [8])
	$14 = [0]
	
.LOOP $label$2:
	*($15) = [0]
	$8 = ($1 + [12])
	$3 = *($8)
	$15 = (*($9) - $3)
	if ( ((int_32)$15 < (int_32)[12]) ){ goto $label$3 }
	$2 = *((*(*($0)) + ($14 << [2])))
	$16 = (((uint_32)$15 / (uint_32)[12]) + [-1])
	$15 = [0]
	
.LOOP $label$5:
	$4 = ($16 - $15)
	$5 = (((int_32)$4 / (int_32)[2]) + $15)
	$10 = ((int_32)$5 * (int_32)[12])
	$11 = ($3 + $10)
	$6 = *($11)
	if ( ($6 <= $2) ){ goto $label$6 }
	if ( ((uint_32)$2 >= (uint_32)$6) ){ goto $label$4 }
	$16 = ($5 + [-1])
	if ( ((int_32)$4 >= (int_32)[2]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$15 = ($5 + [1])
	if ( ((int_32)$16 > (int_32)$5) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( *($11 + [8]) ){ goto $label$3 }
	$7 = *($11 + [4])
	$4 = *($6 + [24])
	$6 = *($12)
	$2 = *(($6 + [28]))
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$7 }
	$15 = ($2 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$8:
	if ( ((int_64)*(*($15)) == (int_64)$7) ){ goto $label$7 }
	$2 = $15
	$16 = ($15 + [-24])
	$15 = $16
	if ( ((int_32)($16 + $5) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$10 }
	$15 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*(($15 + [20])) == (int_32)$6), [1536])
	if ( $15 ){ goto $label$9 }
	goto $label$3 
	
.LABEL $label$10
	$15 = CALL db_find_i64(*($6), *($6 + [8]), (int_64)-4860064192867598336, $7)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$3 }
	$15 = CALL $327($6, $15)
	CALL eosio_assert(((int_32)*($15 + [20]) == (int_32)$6), [1536])
	
.LABEL $label$9
	*(($16 = *(($0 + [12])))) = (*($16) + *($15 + [16]))
	if ( *(*(($0 + [16]))) ){ goto $label$11 }
	$15 = (*($8) + $10)
	$5 = ($15 + [12])
	$16 = (*($9) - $5)
	$2 = ((int_32)$16 / (int_32)[12])
	if ( ($16 == 0) ){ goto $label$12 }
	CALL memmove($15, $5, $16)
	
.LABEL $label$12
	*($9) = ($15 + ((int_32)$2 * (int_32)[12]))
	
.LABEL $label$11
	*(*($13)) = [1]
	
.LABEL $label$3
	$15 = *($13)
	if ( (*($15) == 0) ){ goto $label$1 }
	$16 = *($0)
	$14 = ($14 + [1])
	if ( ($14 <= int_32((*($16 + [4]) - *($16)) >> [2])) ){ goto $label$2 }
	
.LABEL $label$1
}

int_32 .FUNC $269 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $955([32]))) = (int_64)0
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [16]) = [0]
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [1632])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $163(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $270(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $956($7)
	
.LABEL $label$10
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $76 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [7760]
	$11 = (int_64)0
	
.LOOP $label$1:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$2 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$6 = ($6 + [165])
	goto $label$3 
	
.LABEL $label$4
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($11)
	CALL $187(($13 + [64]), ($0 + [8]), $1, [1])
	$5 = CALL memcpy($13, *($13 + [68]), [64])
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$8 }
	if ( ((int_32)$2 == (int_32)[2]) ){ goto $label$7 }
	if ( ((int_32)$2 != (int_32)[1]) ){ goto $label$6 }
	if ( ((uint_32)*($5 + [20]) >= (uint_32)$4) ){ goto $label$5 }
	*(($5 + [20])) = $4
	goto $label$5 
	
.LABEL $label$8
	if ( ((uint_32)*($5 + [24]) >= (uint_32)$4) ){ goto $label$5 }
	*(($5 + [24])) = $4
	goto $label$5 
	
.LABEL $label$7
	if ( ((uint_32)*($5 + [22]) >= (uint_32)$4) ){ goto $label$5 }
	*(($5 + [22])) = $4
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert([0], [7776])
	
.LABEL $label$5
	$10 = *(($0 + [8]))
	$8 = *($5 + [68])
	*($5 + [72]) = $5
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [1696])
	CALL $209(($0 + [96]), $8, $10, ($5 + [72]))
	$7 = *(($0 + [368]))
	$13 = *(($0 + [372]))
	if ( ((int_32)$13 == (int_32)$7) ){ goto $label$9 }
	$8 = ($13 + [-24])
	$4 = ([0] - $7)
	
.LOOP $label$10:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$9 }
	$13 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$10 }
	
.LABEL $label$9
	$6 = ($0 + [344])
	if ( ((int_32)$13 == (int_32)$7) ){ goto $label$12 }
	$8 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)$6), [1536])
	goto $label$11 
	
.LABEL $label$12
	$8 = CALL $144($6, CALL $fimport$16(*(($0 + [344])), *(($0 + [352])), (int_64)-8872998483271876608, $1))
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)$6), [1536])
	
.LABEL $label$11
	$8 = *($8 + [8])
	$6 = *(($8 + [12]))
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$13 }
	$4 = ($0 + [328])
	$13 = int_32(($6 - $8) >> [4])
	$6 = [0]
	
.LOOP $label$15:
	if ( ((int_32)*($8) == (int_32)$2) ){ goto $label$14 }
	$8 = ($8 + [16])
	$6 = ($6 + [1])
	if ( ($6 <= $13) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	CALL $136($4, $1, $2)
	
.LABEL $label$13
	*([0] + [4]) = ($5 + [80])
}

int_32 .FUNC $601 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$6 = (*([0] + [4]) - [48])
	$12 = $6
	*([0] + [4]) = $6
	$11 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$1 }
	$2 = ([0] - $11)
	$10 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($10 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $10
	$8 = ($10 + [-24])
	$10 = $8
	if ( ((int_32)($8 + $2) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$4 }
	$11 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$10 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($10 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($10 <= [513]) ){ goto $label$6 }
	$8 = CALL malloc($10)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($6 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$5
	CALL db_get_i64($1, $8, $10)
	*($12 + [36]) = $8
	*($12 + [32]) = $8
	*($12 + [40]) = ($8 + $10)
	if ( ($10 <= [513]) ){ goto $label$7 }
	CALL free($8)
	
.LABEL $label$7
	*(($11 = CALL $955([80]))) = (int_64)0
	*($11 + [8 align=4]) = (int_64)0
	*($11 + [16 align=4]) = (int_64)0
	*($11 + [24 align=4]) = (int_64)0
	*($11 + [32 align=4]) = (int_64)0
	*($11 + [40]) = [0]
	*($11 + [48]) = (int_64)0
	*($11 + [56]) = (int_64)0
	*($11 + [64]) = $0
	CALL $618(($12 + [32]), $11)
	*($11 + [68]) = $1
	*($12 + [24]) = $11
	$3 = *($11)
	*($12 + [16]) = $3
	$8 = *($11 + [68])
	*($12 + [12]) = $8
	$7 = ($0 + [28])
	$10 = *($7)
	if ( ((uint_32)$10 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($10 + [8]) = $3
	*($10 + [16]) = $8
	*($12 + [24]) = [0]
	*($10) = $11
	*($7) = ($10 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $619(($0 + [24]), ($12 + [24]), ($12 + [16]), ($12 + [12]))
	
.LABEL $label$8
	$4 = *($12 + [24])
	*($12 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$10 = *($4 + [32])
	if ( ($10 == 0) ){ goto $label$10 }
	*(($4 + [36])) = $10
	CALL $956($10)
	
.LABEL $label$10
	$5 = *($4 + [20])
	if ( ($5 == 0) ){ goto $label$11 }
	$9 = ($4 + [24])
	$10 = *($9)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($10 + [-32])
	$0 = ($10 + [-16])
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$15 }
	$8 = $1
	$6 = ($10 + [-12])
	$10 = *($6)
	if ( ((int_32)$10 == (int_32)$1) ){ goto $label$16 }
	$7 = ([0] - $1)
	$10 = ($10 + [-12])
	
.LOOP $label$17:
	$8 = *($10)
	if ( ($8 == 0) ){ goto $label$18 }
	*(($10 + [4])) = $8
	CALL $956($8)
	
.LABEL $label$18
	$10 = ($10 + [-28])
	if ( ((int_32)($10 + $7) != (int_32)[-12]) ){ goto $label$17 }
	$8 = *($0)
	
.LABEL $label$16
	*($6) = $1
	CALL $956($8)
	
.LABEL $label$15
	$10 = $2
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$14 }
	$10 = *(($4 + [20]))
	goto $label$12 
	
.LABEL $label$13
	$10 = $5
	
.LABEL $label$12
	*($9) = $5
	CALL $956($10)
	
.LABEL $label$11
	$10 = *($4 + [8])
	if ( ($10 == 0) ){ goto $label$19 }
	*(($4 + [12])) = $10
	CALL $956($10)
	
.LABEL $label$19
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($12 + [48])
	return $11
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($6 + [16]) = [0]
	*($6 + [8]) = (int_64)0
	*($6 + [20 align=4]) = (int_64)0
	*($6 + [36]) = $1
	*($6 + [32]) = $1
	*($6 + [40]) = ($1 + $3)
	*($6 + [48]) = ($6 + [32])
	*($6 + [56]) = ($6 + [8])
	CALL $736(($6 + [56]), ($6 + [48]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($6 + [24]))
	$7 = *(($6 + [20]))
	$0 = *(($6 + [16]))
	$4 = *($6 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $4), (int_64 ($0 & [255])), (int_32 $7), (int_32 $3), (int_32 $5))
	*([0] + [4]) = ($6 + [64])
	return [1]
}

void .FUNC $74 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [7760]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($9)
	$4 = *(($0 + [192]))
	$11 = *(($0 + [196]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$5 }
	$6 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$5 }
	$11 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$3 = ($0 + [168])
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$8 }
	$6 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$3), [1536])
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	$11 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $186($3, $11)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$3), [1536])
	
.LABEL $label$7
	*($12 + [12]) = $2
	$8 = *($0 + [160])
	*($12 + [8]) = ($12 + [12])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [1696])
	CALL $496($3, $6, $8, ($12 + [8]))
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $759 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($8) = (int_64)0
	*($8 + [8]) = [0]
	$3 = *($1 + [8])
	$2 = *($1)
	$5 = (*(($1 + [16])) - *($1 + [12]))
	$4 = int_32($5 >> [2])
	if ( ($4 == 0) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$5 = CALL $955($5)
	*(($8 + [8])) = ($5 + ($4 << [2]))
	*($8) = $5
	*($8 + [4]) = $5
	$7 = *(($1 + [12]))
	$4 = (*(($1 + [16])) - $7)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $7, $4)
	*($8 + [4]) = ($5 + $4)
	
.LABEL $label$2
	$5 = *($0 + [4])
	$4 = *($5 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$7 = *($1 + [28])
	$6 = *($1 + [24])
	$1 = *($5)
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($0) + $1))
	
.LABEL $label$3
	CALL void $0((int_32 $2), (int_64 $3), (int_32 $8), (int_32 $6), (int_32 $7), (int_32 $1))
	$1 = *($8)
	if ( ($1 == 0) ){ goto $label$4 }
	*($8 + [4]) = $1
	CALL $956($1)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $971($8)
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$4 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1632])
	CALL memcpy($6, $4, [8])
	CALL eosio_assert(((int_32)($1 & [-4]) != (int_32)[8]), [1632])
	$7 = ($6 + [8])
	CALL memcpy($7, ($4 + [8]), [4])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($4)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($7)
	$3 = *($6)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 $4), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC strnlen (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL memchr($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

int_32 .FUNC strerror (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL __lctrans($3, *([0] + [20]))
	$2 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($2 + [19440])) == (int_32)$0) ){ goto $label$4 }
	$1 = [87]
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[87]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = [19536]
	
.LOOP $label$6:
	$0 = *($2)
	$3 = ($2 + [1])
	$2 = $3
	if ( $0 ){ goto $label$6 }
	$2 = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [19536]
	return .LABEL $label$1
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $761 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	$11 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $11) / (int_32)[40])
	$9 = ($5 + [1])
	if ( ((uint_32)$9 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$11 = ((int_32)(*($0 + [8]) - $11) / (int_32)[40])
	if ( ((uint_32)$11 > (uint_32)[53687090]) ){ goto $label$4 }
	$11 = ($11 << [1])
	$7 = ( $9 ? $11 : ($11 <= $9) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$9 = CALL $955(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$9 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	*(($11 = ($9 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($11 + [8]) = *($3)
	*($11 + [16 align=4]) = (int_64)0
	*(($2 = ($11 + [24]))) = [0]
	$3 = CALL $955([16])
	*($11 + [16]) = $3
	$5 = ($3 + [16])
	*($2) = $5
	$2 = [12]
	*(($3 + [12])) = *(($1 + [12]))
	*(($3 + [8])) = *(($1 + [8]))
	*(($3 + [4])) = *(($1 + [4]))
	*($3) = *($1)
	*(($11 + [20])) = $5
	*($11 + [28]) = [0]
	*(($6 = ($11 + [32]))) = [0]
	*(($11 + [36])) = [0]
	$5 = ($4 + [12])
	$9 = ($9 + ((int_32)$7 * (int_32)[40]))
	$1 = ($11 + [28])
	$7 = *($4 + [12])
	$3 = *(($4 + [16]))
	$8 = ($3 - $7)
	$10 = (CASTING uint_64)(uint_32 int_32($8 >> [2]))
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	$2 = (($8 & [-4]) + $2)
	
.LABEL $label$6
	$2 = ($2 + [4])
	if ( ($2 == 0) ){ goto $label$8 }
	CALL $194($1, $2)
	$3 = *($6)
	$2 = *($1)
	goto $label$7 
	
.LABEL $label$8
	$3 = [0]
	$2 = [0]
	
.LABEL $label$7
	*($12) = $2
	*($12 + [8]) = $3
	CALL eosio_assert(((int_32)($3 - $2) > (int_32)[7]), [1920])
	CALL memcpy($2, $4, [8])
	$1 = ($2 + [8])
	CALL eosio_assert(((int_32)($3 - $1) > (int_32)[3]), [1920])
	CALL memcpy($1, ($4 + [8]), [4])
	*($12 + [4]) = ($2 + [12])
	CALL $323($12, $5)
	CALL eosio_assert(((int_32)(*($12 + [8]) - *($12 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($12 + [4]), ($4 + [24]), [4])
	$5 = ($11 + [40])
	$2 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$10 }
	$7 = ([0] - $2)
	$2 = ($4 + [-20])
	
.LOOP $label$11:
	*(($11 + [-32])) = *(($2 + [-12]))
	*(($11 + [-40])) = *(($2 + [-20]))
	*(($4 = ($11 + [-24]))) = (int_64)0
	*(($3 = ($11 + [-16]))) = [0]
	$1 = ($2 + [-4])
	*($4) = *($1)
	*(($11 + [-20])) = *($2)
	$4 = ($2 + [4])
	*($3) = *($4)
	*($4) = [0]
	*(($4 = ($11 + [-12]))) = (int_64)0
	*($1) = (int_64)0
	*(($3 = ($11 + [-4]))) = [0]
	$1 = ($2 + [8])
	*($4) = *($1)
	*(($11 + [-8])) = *(($2 + [12]))
	$4 = ($2 + [16])
	*($3) = *($4)
	*($4) = [0]
	*($1) = (int_64)0
	$11 = ($11 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $7) != (int_32)[-20]) ){ goto $label$11 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$3 = $2
	
.LABEL $label$9
	*($0) = $11
	*(($0 + [4])) = $5
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$12 }
	$4 = ([0] - $3)
	$11 = ($2 + [-24])
	
.LOOP $label$13:
	$2 = *(($11 + [12]))
	if ( ($2 == 0) ){ goto $label$14 }
	*(($11 + [16])) = $2
	CALL $956($2)
	
.LABEL $label$14
	$2 = *($11)
	if ( ($2 == 0) ){ goto $label$15 }
	*(($11 + [4])) = $2
	CALL $956($2)
	
.LABEL $label$15
	$11 = ($11 + [-40])
	if ( ((int_32)($11 + $4) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($3 == 0) ){ goto $label$16 }
	CALL $956($3)
	
.LABEL $label$16
	*([0] + [4]) = ($12 + [16])
	(unreachable)
}

int_32 .FUNC $358 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [5760]
	$6 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$5 > (uint_64)(int_64)9) ){ goto $label$6 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$7 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$8 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [5776]
	$6 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$5 > (uint_64)(int_64)9) ){ goto $label$14 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$2 = ($2 + [165])
	goto $label$12 
	
.LABEL $label$14
	$7 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$10
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$9 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$8 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [5792]
	$6 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$20 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$2 = ($2 + [165])
	goto $label$18 
	
.LABEL $label$20
	$7 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$16
	$3 = ($3 + [1])
	$4 = ((int_64)$4 + (int_64)-5)
	$6 = ((int_64)$7 | (int_64)$6)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$15 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$8 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [5808]
	$6 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$5 > (uint_64)(int_64)8) ){ goto $label$26 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$2 = ($2 + [165])
	goto $label$24 
	
.LABEL $label$26
	$7 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$22
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$21 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$8 }
	$5 = (int_64)0
	$7 = (int_64)59
	$3 = [5824]
	$6 = (int_64)0
	
.LOOP $label$27:
	$4 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$28 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$2 = ($2 + [165])
	goto $label$29 
	
.LABEL $label$30
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$28
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$4 | (int_64)$6)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$27 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$8 }
	$5 = (int_64)0
	$7 = (int_64)59
	$3 = [5840]
	$6 = (int_64)0
	
.LOOP $label$31:
	$4 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$32 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$2 = ($2 + [165])
	goto $label$33 
	
.LABEL $label$34
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$32
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$4 | (int_64)$6)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$31 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$8 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [5856]
	$6 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$40 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$2 = ($2 + [165])
	goto $label$38 
	
.LABEL $label$40
	$7 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$36
	$3 = ($3 + [1])
	$4 = ((int_64)$4 + (int_64)-5)
	$6 = ((int_64)$7 | (int_64)$6)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$35 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$8 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [1312]
	$6 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$46 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$2 = ($2 + [165])
	goto $label$44 
	
.LABEL $label$46
	$7 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$42
	$3 = ($3 + [1])
	$4 = ((int_64)$4 + (int_64)-5)
	$6 = ((int_64)$7 | (int_64)$6)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$41 }
	if ( ((int_64)$6 != (int_64)$1) ){ goto $label$7 }
	
.LABEL $label$8
	return [1]
	
.LABEL $label$7
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [5872]
	$6 = (int_64)0
	
.LOOP $label$47:
	if ( ((uint_64)$5 > (uint_64)(int_64)9) ){ goto $label$52 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$51 }
	$2 = ($2 + [165])
	goto $label$50 
	
.LABEL $label$52
	$7 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$51
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$50
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$49
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$48
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$47 }
	return ((int_64)$6 == (int_64)$1)
}

void .FUNC $359 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	*($9 + [60]) = $3
	if ( (int_64)(*($2) == 0) ){ goto $label$1 }
	$3 = ($0 + [8])
	$8 = [0]
	$7 = [0]
	$5 = ($0 + [16])
	$4 = CALL db_lowerbound_i64(*($0 + [8]), *($5), (int_64)3631284361385115648, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $375($3, $4)
	$7 = [1]
	
.LABEL $label$2
	CALL eosio_assert($7, [5392])
	$7 = CALL db_lowerbound_i64(*($3), *($5), (int_64)3631284361385115648, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $375($3, $7)
	
.LABEL $label$3
	$6 = *($0)
	*($9 + [16]) = $2
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [1696])
	CALL $506($3, $8, $6, ($9 + [16]))
	*(($9 + [48])) = [0]
	*($9 + [32]) = (int_64)-1
	$6 = *($0)
	*($9 + [16]) = $6
	*($9 + [24]) = $6
	*($9 + [40]) = (int_64)0
	$3 = CALL db_lowerbound_i64($6, $6, (int_64)-4992616317463265280, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	CALL $507(($9 + [16]), $3)
	goto $label$4 
	
.LABEL $label$5
	CALL $508($9, ($9 + [16]), *($0), ($9 + [8]))
	
.LABEL $label$4
	$3 = [0]
	$8 = CALL db_lowerbound_i64(*($9 + [16]), *(($9 + [24])), (int_64)-4992616317463265280, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$3 = CALL $507(($9 + [16]), $8)
	
.LABEL $label$6
	$6 = *($0)
	*($9 + [4]) = $2
	*($9) = ($9 + [60])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [1696])
	CALL $509(($9 + [16]), $3, $6, $9)
	CALL $510($0, $1, $2)
	$3 = *($9 + [40])
	if ( ($3 == 0) ){ goto $label$1 }
	$8 = ($9 + [44])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $956($2)
	
.LABEL $label$10
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($9 + [40]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $3
	
.LABEL $label$7
	*($8) = $3
	CALL $956($0)
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [64])
}

int_32 .FUNC $608 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [16]) = (($2) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $4) > (int_32)[0]), [1920])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($7 + [16]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $2 ){ goto $label$1 }
	$4 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$2 }
	$2 = ($7 + [36])
	$3 = ($7 + [40])
	
.LOOP $label$3:
	*($7 + [8]) = $0
	*($7 + [16]) = $6
	*((($7 + [16]) + [8])) = ($6 + [4])
	*((($7 + [16]) + [12])) = ($6 + [8])
	*((($7 + [16]) + [16])) = ($6 + [9])
	*($2) = ($6 + [10])
	*($3) = ($6 + [12])
	*($7 + [20]) = ($6 + [2])
	CALL $615(($7 + [16]), ($7 + [8]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [48])
	return $0
}

int_32 .FUNC $609 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [5]))
	$5 = *($0 + [4])
	$4 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $5) > (int_32)[0]), [1920])
	CALL memcpy(*($7), ($8 + [15]), [1])
	$5 = (*($7) + [1])
	*($7) = $5
	if ( $3 ){ goto $label$1 }
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[1]), [1920])
	$5 = ($0 + [4])
	CALL memcpy(*($5), $7, [2])
	$3 = (*($5) + [2])
	*($5) = $3
	CALL eosio_assert(((int_32)(*($2) - $3) > (int_32)[3]), [1920])
	CALL memcpy(*($5), ($7 + [4]), [4])
	$3 = (*($5) + [4])
	*($5) = $3
	CALL eosio_assert(((int_32)(*($2) - $3) > (int_32)[7]), [1920])
	CALL memcpy(*($5), ($7 + [8]), [8])
	*($5) = (*($5) + [8])
	CALL $612($0, ($7 + [16]))
	$7 = ($7 + [32])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	$5 = *($5)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $606 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$8 = (*($0) + [8])
	*($0) = $8
	$4 = *($1 + [8])
	$9 = *(($1 + [12]))
	$5 = ($9 - $4)
	$10 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$2 }
	$8 = (($5 & [-16]) + $8)
	
.LABEL $label$2
	*($0) = $8
	$7 = *($1 + [20])
	$2 = *(($1 + [24]))
	$10 = (CASTING uint_64)(uint_32 int_32(($2 - $7) >> [5]))
	
.LOOP $label$3:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$3 }
	*($0) = $8
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$8 = ($8 + [14])
	$9 = *($7 + [16])
	$3 = *(($7 + [20]))
	$10 = (CASTING uint_64)(uint_32 ((int_32)($3 - $9) / (int_32)[28]))
	
.LOOP $label$6:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$8 = ($8 + [13])
	$5 = *($9 + [16])
	$4 = *($9 + [20])
	$6 = ($4 - $5)
	$10 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$9:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$9 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	$8 = ((((int_32)uint_32(($6 + [-8]) >> [3]) * (int_32)[7]) + $8) + [7])
	
.LABEL $label$10
	$9 = ($9 + [28])
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$8 }
	
.LABEL $label$7
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $8
	
.LABEL $label$4
	$4 = *($1 + [32])
	$9 = *(($1 + [36]))
	$5 = ($9 - $4)
	$10 = (CASTING uint_64)(uint_32 int_32($5 >> [5]))
	
.LOOP $label$11:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$12 }
	$8 = ((((int_32)uint_32(($5 + [-32]) >> [5]) * (int_32)[26]) + $8) + [26])
	
.LABEL $label$12
	*($0) = ($8 + [16])
	return $0
}

int_32 .FUNC $607 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), $1, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $610(CALL $609(CALL $608($0, ($1 + [8])), ($1 + [20])), ($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $604 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	$10 = *($1 + [32])
	if ( ($10 == 0) ){ goto $label$2 }
	*(($1 + [36])) = $10
	CALL $956($10)
	
.LABEL $label$2
	$2 = *($1 + [20])
	if ( ($2 == 0) ){ goto $label$3 }
	$9 = ($1 + [24])
	$10 = *($9)
	if ( ((int_32)$10 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = ($10 + [-32])
	$4 = ($10 + [-16])
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$7 }
	$8 = $5
	$6 = ($10 + [-12])
	$10 = *($6)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$8 }
	$7 = ([0] - $5)
	$10 = ($10 + [-12])
	
.LOOP $label$9:
	$8 = *($10)
	if ( ($8 == 0) ){ goto $label$10 }
	*(($10 + [4])) = $8
	CALL $956($8)
	
.LABEL $label$10
	$10 = ($10 + [-28])
	if ( ((int_32)($10 + $7) != (int_32)[-12]) ){ goto $label$9 }
	$8 = *($4)
	
.LABEL $label$8
	*($6) = $5
	CALL $956($8)
	
.LABEL $label$7
	$10 = $3
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$10 = *(($1 + [20]))
	goto $label$4 
	
.LABEL $label$5
	$10 = $2
	
.LABEL $label$4
	*($9) = $2
	CALL $956($10)
	
.LABEL $label$3
	$10 = *($1 + [8])
	if ( ($10 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $10
	CALL $956($10)
	
.LABEL $label$11
	CALL $956($1)
	
.LABEL $label$1
	return $0
}

void .FUNC $605 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *(*($0))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	*((($5 = *($1 + [32])) + ($6 << [5])) + [8]) = *(*($0 + [4]))
	*(($6 = ($5 + (*(*($0)) << [5]))) + [16]) = (*($6 + [16]) + [1])
	
.LABEL $label$1
	$3 = *(($1 + [24]))
	$7 = (*($1 + [20]) + (*(*($0 + [8])) << [5]))
	$8 = ($7 + [32])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	*($7) = *($8)
	*(($7 + [8])) = *(($8 + [8]))
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$6 }
	$0 = $4
	$2 = ($7 + [20])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$7 }
	$5 = ([0] - $4)
	$0 = ($6 + [-12])
	
.LOOP $label$8:
	$6 = *($0)
	if ( ($6 == 0) ){ goto $label$9 }
	*(($0 + [4])) = $6
	CALL $956($6)
	
.LABEL $label$9
	$0 = ($0 + [-28])
	if ( ((int_32)($0 + $5) != (int_32)[-12]) ){ goto $label$8 }
	$0 = *(($7 + [16]))
	
.LABEL $label$7
	*($2) = $4
	CALL $956($0)
	*(($5 = ($7 + [24]))) = [0]
	*(($7 + [16])) = (int_64)0
	goto $label$5 
	
.LABEL $label$6
	$5 = ($7 + [24])
	
.LABEL $label$5
	$0 = ($8 + [16])
	*(($7 + [16])) = *($0)
	$6 = ($8 + [24])
	*($5) = *($6)
	*($6) = [0]
	*($0) = [0]
	*(($8 + [20])) = [0]
	$7 = ($7 + [32])
	$8 = ($8 + [32])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$4 }
	$8 = *(($1 + [24]))
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$10:
	$2 = ($8 + [-32])
	$3 = ($8 + [-16])
	$4 = *($3)
	if ( ($4 == 0) ){ goto $label$11 }
	$0 = $4
	$8 = ($8 + [-12])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$12 }
	$5 = ([0] - $4)
	$0 = ($6 + [-12])
	
.LOOP $label$13:
	$6 = *($0)
	if ( ($6 == 0) ){ goto $label$14 }
	*(($0 + [4])) = $6
	CALL $956($6)
	
.LABEL $label$14
	$0 = ($0 + [-28])
	if ( ((int_32)($0 + $5) != (int_32)[-12]) ){ goto $label$13 }
	$0 = *($3)
	
.LABEL $label$12
	*($8) = $4
	CALL $956($0)
	
.LABEL $label$11
	$8 = $2
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$10 }
	
.LABEL $label$2
	*(($1 + [24])) = $7
}

int_32 .FUNC $602 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $955([72]))) = (int_64)0
	*($6 + [8]) = [0]
	*($6 + [10]) = [0]
	*($6 + [12]) = [0]
	*($6 + [14]) = [0]
	*($6 + [16]) = [0]
	*($6 + [18]) = [0]
	*($6 + [19]) = [0]
	*($6 + [20]) = [0]
	*($6 + [22]) = [0]
	*($6 + [24]) = [0]
	*($6 + [26]) = [0]
	*($6 + [28]) = [0]
	*($6 + [30]) = [0]
	*($6 + [32]) = [0]
	*($6 + [34]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = (int_64)0
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = $0
	CALL $616(($8 + [32]), $6)
	*($6 + [60]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [60])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $617(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $603 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	CALL $605($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	*(($3 = $6)) = [0]
	CALL $606($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	CALL $607($3, $1)
	CALL db_update_i64(*($1 + [68]), $2, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $600 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [128])
	*([0] + [4]) = $13
	CALL require_auth($1)
	$11 = *(($3 + [32]))
	$3 = *($0 + [16])
	$10 = *(($3 + [36]))
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$1 }
	$12 = ($10 + [-24])
	$4 = ([0] - $11)
	
.LOOP $label$2:
	if ( ((int_64)*(*($12)) == (int_64)$1) ){ goto $label$1 }
	$10 = $12
	$8 = ($12 + [-24])
	$12 = $8
	if ( ((int_32)($8 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$12 = ($3 + [8])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$4 }
	$11 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)$12), [1536])
	goto $label$3 
	
.LABEL $label$4
	$11 = [0]
	$8 = CALL db_find_i64(*(($3 + [8])), *(($3 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $186($12, $8)
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)$12), [1536])
	
.LABEL $label$3
	$5 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($5, [2368])
	*($13 + [116]) = (int_64))(((uint_64)CALL publication_time() / (uint_64)(int_64)1000000) - *([0] + [12]))
	*(($13 + [104])) = [0]
	*($13 + [88]) = (int_64)-1
	*($13 + [96]) = (int_64)0
	$9 = *($0)
	*($13 + [72]) = $9
	*($13 + [80]) = $9
	$4 = [0]
	$12 = CALL db_find_i64($9, $9, (int_64)5667434139083603968, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $601(($13 + [72]), $12)
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)($13 + [72])), [1536])
	
.LABEL $label$5
	$6 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($6, [6416])
	$3 = [-1]
	$8 = [-1]
	$10 = *($4 + [32])
	$7 = *(($4 + [36]))
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$6 }
	$12 = ($10 + [4])
	$10 = int_32(($7 - $10) >> [5])
	$8 = [0]
	
.LOOP $label$7:
	if ( ((int_32)*($12) == (int_32)$2) ){ goto $label$6 }
	$12 = ($12 + [32])
	$8 = ($8 + [1])
	if ( ($8 <= $10) ){ goto $label$7 }
	$8 = [-1]
	
.LABEL $label$6
	*($13 + [68]) = $8
	$12 = *($4 + [20])
	$8 = *(($4 + [24]))
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$8 }
	$10 = int_32(($8 - $12) >> [5])
	$8 = [0]
	
.LOOP $label$10:
	if ( ((int_32)*($12) == (int_32)$2) ){ goto $label$9 }
	$12 = ($12 + [32])
	$8 = ($8 + [1])
	if ( ($8 <= $10) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$3 = $8
	
.LABEL $label$8
	*($13 + [64]) = $3
	CALL eosio_assert(((int_32)uint_32($3 >> [31]) ^ (int_32)[1]), [6432])
	*(($13 + [56])) = [0]
	*($13 + [40]) = (int_64)-1
	*($13 + [48]) = (int_64)0
	$1 = *($0)
	*($13 + [24]) = $1
	*($13 + [32]) = $1
	$12 = [0]
	$8 = CALL db_find_i64($1, $1, (int_64)-5011039453897031680, (CASTING uint_64)(uint_32 $2))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$11 }
	$12 = CALL $602(($13 + [24]), $8)
	CALL eosio_assert(((int_32)*($12 + [56]) == (int_32)($13 + [24])), [1536])
	
.LABEL $label$11
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [6464])
	$1 = *($0)
	*($13 + [12]) = ($13 + [116])
	*($13 + [8]) = ($13 + [68])
	*($13 + [16]) = ($13 + [64])
	CALL eosio_assert($6, [1696])
	CALL $603(($13 + [72]), $4, $1, ($13 + [8]))
	$8 = *(($0 + [16]))
	*($13 + [8]) = *($12 + [36])
	$1 = *($8)
	*($13 + [120]) = ($13 + [8])
	CALL eosio_assert($5, [1696])
	CALL $496(($8 + [8]), $11, $1, ($13 + [120]))
	$2 = *($13 + [48])
	if ( ($2 == 0) ){ goto $label$12 }
	$10 = ($13 + [52])
	$12 = *($10)
	if ( ((int_32)$12 == (int_32)$2) ){ goto $label$14 }
	
.LOOP $label$15:
	$12 = ($12 + [-24])
	$8 = *($12)
	*($12) = [0]
	if ( ($8 == 0) ){ goto $label$16 }
	CALL $956($8)
	
.LABEL $label$16
	if ( ((int_32)$2 != (int_32)$12) ){ goto $label$15 }
	$12 = *(($13 + [48]))
	goto $label$13 
	
.LABEL $label$14
	$12 = $2
	
.LABEL $label$13
	*($10) = $2
	CALL $956($12)
	
.LABEL $label$12
	$2 = *($13 + [96])
	if ( ($2 == 0) ){ goto $label$17 }
	$10 = ($13 + [100])
	$12 = *($10)
	if ( ((int_32)$12 == (int_32)$2) ){ goto $label$19 }
	$12 = ($12 + [-24])
	
.LOOP $label$20:
	$8 = CALL $604($12)
	$12 = ($12 + [-24])
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$20 }
	$12 = *(($13 + [96]))
	goto $label$18 
	
.LABEL $label$19
	$12 = $2
	
.LABEL $label$18
	*($10) = $2
	CALL $956($12)
	
.LABEL $label$17
	*([0] + [4]) = ($13 + [128])
}

void .FUNC $353 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [144])
	*([0] + [4]) = $16
	*($16 + [136]) = $3
	CALL $354(($16 + [88]))
	$3 = (($16 + [88]) + [24])
	CALL eosio_assert(((int_64)*($3) == (int_64)1397703940), [3600])
	$4 = ($16 + [104])
	$8 = [0]
	if ( ((uint_64)((int_64)*($16 + [104]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$13 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [3632])
	CALL eosio_assert(((int_64)*($4) > (int_64)0), [3664])
	$13 = *($16 + [96])
	$6 = *($0)
	$5 = *($16 + [88])
	if ( ((int_64)$5 != (int_64)$6) ){ goto $label$16 }
	$9 = *(($0 + [32]))
	$14 = *(($0 + [36]))
	if ( ((int_32)$14 == (int_32)$9) ){ goto $label$17 }
	$3 = ($14 + [-24])
	$7 = ([0] - $9)
	
.LOOP $label$18:
	if ( ((int_64)*(*($3)) == (int_64)$13) ){ goto $label$17 }
	$14 = $3
	$8 = ($3 + [-24])
	$3 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$18 }
	
.LABEL $label$17
	$3 = ($0 + [8])
	if ( ((int_32)$14 == (int_32)$9) ){ goto $label$15 }
	$15 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [24]) == (int_32)$3), [1536])
	goto $label$14 
	
.LABEL $label$16
	if ( ((int_64)$13 != (int_64)$6) ){ goto $label$6 }
	$9 = *(($0 + [32]))
	$14 = *(($0 + [36]))
	if ( ((int_32)$14 == (int_32)$9) ){ goto $label$19 }
	$3 = ($14 + [-24])
	$7 = ([0] - $9)
	
.LOOP $label$20:
	if ( ((int_64)*(*($3)) == (int_64)$5) ){ goto $label$19 }
	$14 = $3
	$8 = ($3 + [-24])
	$3 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = ($0 + [8])
	if ( ((int_32)$14 == (int_32)$9) ){ goto $label$13 }
	$8 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$3), [1536])
	CALL _ZN14system_control15check_blacklistEN5eosio4nameE($0, $5)
	if ( ($8 == 0) ){ goto $label$10 }
	$8 = ($16 + [120])
	goto $label$12 
	
.LABEL $label$15
	$15 = [0]
	$8 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-6030912142679474176, $13)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$14 }
	$15 = CALL $186($3, $8)
	CALL eosio_assert(((int_32)*($15 + [24]) == (int_32)$3), [1536])
	
.LABEL $label$14
	CALL _ZN14system_control15check_blacklistEN5eosio4nameE($0, _ZN14system_control15check_blacklistEN5eosio4nameE)
	$10 = *(($9 + [72]))
	$9 = *($0 + [136])
	$14 = *(($9 + [76]))
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$21 }
	$3 = ($14 + [-24])
	$7 = ([0] - $10)
	
.LOOP $label$22:
	if ( ((int_64)*(*($3)) == (int_64)$13) ){ goto $label$21 }
	$14 = $3
	$8 = ($3 + [-24])
	$3 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$22 }
	
.LABEL $label$21
	$3 = ($9 + [48])
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$26 }
	$8 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*(($8 + [12])) == (int_32)$3), [1536])
	if ( $8 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$8 = CALL db_find_i64(*(($9 + [48])), *(($9 + [56])), (int_64)-4149917288674710016, $13)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$24 }
	CALL eosio_assert(((int_32)*(CALL $355($3, $8) + [12]) == (int_32)$3), [1536])
	
.LABEL $label$25
	$3 = ($0 + [136])
	if ( (CALL $965(($16 + [120]), *(*($3) + [168])) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	if ( $15 ){ goto $label$6 }
	CALL $357(*(($0 + [136])), $4, $13, ($16 + [120]))
	goto $label$6 
	
.LABEL $label$23
	CALL $356(*($3), $4)
	goto $label$6 
	
.LABEL $label$13
	$8 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-6030912142679474176, $5)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*(CALL $186($3, $8) + [24]) == (int_32)$3), [1536])
	CALL _ZN14system_control15check_blacklistEN5eosio4nameE($0, $5)
	$8 = ($16 + [120])
	
.LABEL $label$12
	*(($16 + [32])) = (int_64)0
	*((($16 + [16]) + [24])) = (int_64)0
	*($16 + [16]) = (int_64)0
	*($16 + [24]) = (int_64)0
	*($16 + [56]) = (int_64)0
	*($16 + [64]) = (int_64)0
	*(($3 = ($16 + [72]))) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$13 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$30 }
	
.LOOP $label$31:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$31 }
	
.LABEL $label$30
	$0 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	$0 = [0]
	
.LABEL $label$27
	CALL eosio_assert($0, [3776])
	$3 = CALL $963($8, [58], [0])
	$14 = ($3 + [1])
	$0 = CALL $963($8, [58], $14)
	*($16 + [16]) = $5
	CALL $973($16, $8, [0], $3, $8)
	$3 = ($16 + [24])
	if ( (*($16 + [24]) & [1]) ){ goto $label$33 }
	*($3) = [0]
	goto $label$32 
	
.LABEL $label$33
	*(*(($16 + [32]))) = [0]
	*(($16 + [28])) = [0]
	
.LABEL $label$32
	CALL $960($3, [0])
	*(($3 + [8])) = *(($16 + [8]))
	*($3) = *($16)
	if ( ((int_32)$0 == (int_32)[-1]) ){ goto $label$36 }
	$7 = ($0 + [1])
	$11 = CALL $963($8, [58], $7)
	$9 = ($11 + [1])
	$12 = CALL $963($8, [58], $9)
	$10 = ($12 + [1])
	$15 = CALL $963($8, [58], $10)
	CALL $973($16, $8, $14, ($0 - $14), $8)
	$3 = ($16 + [36])
	if ( (*($16 + [36]) & [1]) ){ goto $label$35 }
	*($3) = [0]
	goto $label$34 
	
.LABEL $label$36
	CALL $973($16, $8, $14, [-1], $8)
	$3 = ($16 + [36])
	if ( (*($16 + [36]) & [1]) ){ goto $label$9 }
	*($3) = [0]
	goto $label$8 
	
.LABEL $label$35
	*(*(($16 + [44]))) = [0]
	*(($16 + [40])) = [0]
	
.LABEL $label$34
	CALL $960($3, [0])
	$0 = ($16 + [8])
	*(($3 + [8])) = *($0)
	*($3) = *($16)
	CALL $973($16, $8, $7, ($11 - $7), $8)
	$3 = ($16 | [1])
	*($16 + [48]) = CALL atoi(( *($16 + [8]) ? $3 : (*($16) & [1]) ))
	if ( ((*($16) & [1]) == 0) ){ goto $label$37 }
	CALL $956(*($0))
	
.LABEL $label$37
	CALL $973($16, $8, $9, ($12 - $9), $8)
	*(($16 + [56])) = CALL atoll(( *($16 + [8]) ? $3 : (*($16) & [1]) ))
	if ( ((*($16) & [1]) == 0) ){ goto $label$38 }
	CALL $956(*(($16 + [8])))
	
.LABEL $label$38
	CALL $973($16, $8, $10, ($15 - $10), $8)
	$3 = ($16 | [1])
	*($16 + [80]) = CALL atoll(( *($16 + [8]) ? $3 : (*($16) & [1]) ))
	if ( ((*($16) & [1]) == 0) ){ goto $label$39 }
	CALL $956(*(($16 + [8])))
	
.LABEL $label$39
	CALL $973($16, $8, ($15 + [1]), [-1], $8)
	*($16 + [84]) = CALL atoll(( *($16 + [8]) ? $3 : (*($16) & [1]) ))
	if ( ((*($16) & [1]) == 0) ){ goto $label$7 }
	CALL $956(*(($16 + [8])))
	goto $label$7 
	
.LABEL $label$11
	CALL _ZN14system_control15check_blacklistEN5eosio4nameE($0, $5)
	
.LABEL $label$10
	if ( (CALL $358($0, *($16 + [88])) == 0) ){ goto $label$40 }
	CALL $359(*($0 + [136]), *($0), $4, [7])
	goto $label$6 
	
.LABEL $label$40
	CALL eosio_assert([0], [3696])
	goto $label$6 
	
.LABEL $label$9
	*(*(($16 + [44]))) = [0]
	*(($16 + [40])) = [0]
	
.LABEL $label$8
	CALL $960($3, [0])
	*(($3 + [8])) = *(($16 + [8]))
	*($3) = *($16)
	
.LABEL $label$7
	*(($16 + [72])) = *(($4 + [8]))
	*($16 + [64]) = *($4)
	CALL $360(($16 + [136]), ($16 + [16]))
	if ( ((*(($16 + [36])) & [1]) == 0) ){ goto $label$41 }
	CALL $956(*(($16 + [44])))
	
.LABEL $label$41
	if ( ((*((($16 + [16]) + [8])) & [1]) == 0) ){ goto $label$6 }
	CALL $956(*(($16 + [32])))
	
.LABEL $label$6
	if ( ((*($16 + [120]) & [1]) == 0) ){ goto $label$42 }
	CALL $956(*(($16 + [128])))
	
.LABEL $label$42
	*([0] + [4]) = ($16 + [144])
}

void .FUNC $813 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [2])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$4 = [1073741823]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$4 = int_32($2 >> [1])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $955(($4 << [2]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [2])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [2]))
	$7 = ($3 + [4])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $956($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $812 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	*($13 + [72]) = $1
	CALL require_auth($1)
	$6 = [0]
	*(($13 + [64])) = [0]
	$10 = *($0)
	*($13 + [32]) = $10
	*($13 + [28]) = [0]
	*($13 + [48]) = (int_64)-1
	*($13 + [56]) = (int_64)0
	*($13 + [40]) = $10
	*($13 + [24]) = ($13 + [32])
	$3 = *(CALL $365(($13 + [24])) + [4])
	CALL eosio_assert((int_64)(*(($3 + [128])) == 0), [8896])
	$11 = *($0 + [20])
	$11 = CALL int_32 $11((int_32 $1), (int_64 *(*($11) + [20])))
	$4 = *($0 + [20])
	$5 = *($11)
	$11 = (*($11 + [4]) - $5)
	if ( ((int_32)$11 < (int_32)[20]) ){ goto $label$2 }
	$11 = (((uint_32)$11 / (uint_32)[20]) + [-1])
	
.LOOP $label$3:
	$7 = ($11 - $6)
	$8 = (((int_32)$7 / (int_32)[2]) + $6)
	$12 = ($5 + ((int_32)$8 * (int_32)[20]))
	$9 = *($12)
	if ( ($9 <= $2) ){ goto $label$4 }
	if ( ((uint_32)$9 <= (uint_32)$2) ){ goto $label$1 }
	$11 = ($8 + [-1])
	if ( ((int_32)$7 > (int_32)[1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = ($8 + [1])
	if ( ((int_32)$11 > (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$2
	CALL eosio_assert([0], [2112])
	$12 = ($4 + [80])
	$1 = *($13 + [72])
	
.LABEL $label$1
	$6 = *($12 + [6])
	$11 = *($12 + [7])
	CALL eosio_assert(((int_32)*($12 + [4]) == (int_32)*(($3 + [32]))), [8928])
	CALL eosio_assert(((int_32)$11 == (int_32)*(($3 + [34]))), [8928])
	*($13 + [8]) = (int_64)0
	*($13 + [16]) = [0]
	*($13) = $2
	CALL $813(($13 + [8]), $13)
	CALL $344(*(($0 + [20])), $1, ($13 + [8]))
	$1 = *($0)
	*($13) = ($13 + [72])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [1696])
	CALL $814(($13 + [32]), $3, $1, $13)
	$2 = *($13 + [8])
	if ( ($2 == 0) ){ goto $label$5 }
	*($13 + [12]) = $2
	CALL $956($2)
	
.LABEL $label$5
	CALL $367(($13 + [56]))
	*([0] + [4]) = ($13 + [80])
	return ($6 & [255])
}

void .FUNC $811 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($2 + [8]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($2 + [12]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($2 + [16]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($2 + [20]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $810 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $817 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [30]) = *(*(*($3) + [4]))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [72]) = ($5 + [60])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $224(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [64]), $2, $5, [60])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $816 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [320])
	*([0] + [4]) = $14
	CALL require_auth($1)
	$8 = [0]
	*(($14 + [296])) = [0]
	*($14 + [280]) = (int_64)-1
	*($14 + [288]) = (int_64)0
	$10 = *($0)
	*($14 + [264]) = $10
	*($14 + [272]) = $10
	$2 = CALL db_find_i64($10, $10, (int_64)-4427730799613181952, (CASTING int_64)(int_32 $2))
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$2 }
	$8 = CALL $477(($14 + [264]), $2)
	CALL eosio_assert(((int_32)*($8 + [200]) == (int_32)($14 + [264])), [1536])
	*($14 + [260]) = $8
	*($14 + [256]) = ($14 + [264])
	goto $label$1 
	
.LABEL $label$2
	*($14 + [260]) = [0]
	*($14 + [256]) = ($14 + [264])
	
.LABEL $label$1
	$6 = [0]
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8960])
	$3 = *($14 + [260])
	$10 = CALL publication_time()
	CALL eosio_assert((uint_64)(((int_64)*(($3 + [16])) + (int_64)*($3 + [8])) <= ((uint_64)$10 / (uint_64)(int_64)1000000)), [8992])
	*((($14 + [216]) + [32])) = [0]
	*($14 + [232]) = (int_64)-1
	*($14 + [240]) = (int_64)0
	$10 = *($0)
	*($14 + [216]) = $10
	*($14 + [224]) = $10
	$8 = [0]
	$2 = CALL db_find_i64($10, $10, (int_64)-6030912128150405120, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $156(($14 + [216]), $2)
	CALL eosio_assert(((int_32)*($8 + [60]) == (int_32)($14 + [216])), [1536])
	
.LABEL $label$3
	$2 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($2, [9024])
	CALL eosio_assert(((int_64)*($8 + [28]) == (int_64)*(*($14 + [260]))), [9056])
	CALL eosio_assert(((int_64)*($8 + [30]) != (int_64)*(*($14 + [260]))), [9072])
	$10 = *($0)
	*($14 + [24]) = ($14 + [256])
	CALL eosio_assert($2, [1696])
	CALL $817(($14 + [216]), $8, $10, ($14 + [24]))
	*((($14 + [176]) + [32])) = [0]
	*($14 + [192]) = (int_64)-1
	*($14 + [200]) = (int_64)0
	$10 = *($0)
	*($14 + [176]) = $10
	*($14 + [184]) = $10
	$8 = CALL db_find_i64($10, $10, (int_64)-4223691270582697984, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $274(($14 + [176]), $8)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)($14 + [176])), [1536])
	
.LABEL $label$4
	$4 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($4, [9024])
	$2 = *(($3 + [168]))
	$7 = int_32((*(($3 + [172])) - $2) >> [5])
	$5 = *($6 + [20])
	$8 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)$8 >= (uint_32)$7) ){ goto $label$6 }
	$8 = ($8 + [1])
	$10 = *($2)
	$2 = ($2 + [32])
	if ( ((int_64)$10 != (int_64)$1) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$8 = [0]
	
.LABEL $label$5
	CALL eosio_assert($4, [4912])
	CALL eosio_assert($4, [4208])
	$2 = CALL db_next_i64(*($6 + [44]), ($14 + [24]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$8 }
	CALL $274(($14 + [176]), $2)
	
.LABEL $label$8
	CALL $818(($14 + [176]), $6)
	CALL $819($0, $1)
	CALL $820($0, $1)
	CALL $821($0, $1)
	CALL $822($0, $1)
	*($14 + [174]) = $5
	$2 = *(($3 + [74]))
	if ( ((uint_32)$5 >= (uint_32)$2) ){ goto $label$9 }
	*($14 + [174]) = $2
	$5 = $2
	
.LABEL $label$9
	$2 = *(($3 + [76]))
	if ( ((uint_32)$5 <= (uint_32)$2) ){ goto $label$10 }
	*($14 + [174]) = $2
	
.LABEL $label$10
	*(($14 + [160])) = [0]
	*($14 + [144]) = (int_64)-1
	*($14 + [152]) = (int_64)0
	$10 = *($0)
	*($14 + [128]) = $10
	*($14 + [136]) = $10
	$2 = [0]
	$7 = CALL db_find_i64($10, $10, (int_64)-6030912142679474176, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	$2 = CALL $186(($14 + [128]), $7)
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)($14 + [128])), [1536])
	
.LABEL $label$11
	$7 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($7, [3312])
	$10 = *($0)
	*($14 + [24]) = ($14 + [174])
	CALL eosio_assert($7, [1696])
	CALL $823(($14 + [128]), $2, $10, ($14 + [24]))
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$12 }
	if ( ((int_32)$8 <= (int_32)*(($3 + [72]))) ){ goto $label$13 }
	CALL $824($0, $1, [5])
	goto $label$12 
	
.LABEL $label$13
	$13 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$2 = [2400]
	$11 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$19 }
	$7 = *($2)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$7 = ($7 + [165])
	goto $label$17 
	
.LABEL $label$19
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$15
	$2 = ($2 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$14 }
	*($14 + [80]) = $11
	*($14 + [72]) = $13
	$13 = (int_64)0
	$10 = *(($3 + [64]))
	if ( ((int_64)$10 > (int_64)76151268725763) ){ goto $label$24 }
	if ( ((int_64)$10 == (int_64)1397703940) ){ goto $label$23 }
	$2 = [8480]
	if ( ((int_64)$10 == (int_64)280318001668) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$24
	if ( ((int_64)$10 == (int_64)76151268725764) ){ goto $label$22 }
	if ( ((int_64)$10 != (int_64)4994016260158475524) ){ goto $label$20 }
	$2 = [8448]
	goto $label$21 
	
.LABEL $label$23
	$2 = [1312]
	goto $label$21 
	
.LABEL $label$22
	$2 = [8464]
	
.LABEL $label$21
	$7 = [-1]
	
.LOOP $label$25:
	$6 = ($2 + $7)
	$5 = ($7 + [1])
	$7 = $5
	if ( *(($6 + [1])) ){ goto $label$25 }
	$11 = (CASTING uint_64)(uint_32 $5)
	$10 = (int_64)0
	$12 = (int_64)59
	$13 = (int_64)0
	
.LOOP $label$26:
	$9 = (int_64)0
	if ( ((uint_64)$10 >= (uint_64)$11) ){ goto $label$27 }
	$7 = *($2)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$7 = ($7 + [165])
	goto $label$28 
	
.LABEL $label$29
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$31 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	goto $label$30 
	
.LABEL $label$31
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$30
	$2 = ($2 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$13 = ((int_64)$9 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$26 }
	
.LABEL $label$20
	$10 = (int_64)0
	$9 = (int_64)59
	$2 = [1296]
	$11 = (int_64)0
	
.LOOP $label$32:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$37 }
	$7 = *($2)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$7 = ($7 + [165])
	goto $label$35 
	
.LABEL $label$37
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$34
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$33
	$2 = ($2 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$32 }
	*(($14 + [16])) = [0]
	*($14 + [8]) = (int_64)0
	$7 = CALL strlen([9104])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$39 }
	$2 = ($3 + [56])
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$42 }
	*($14 + [8]) = ($7 << [1])
	$6 = (($14 + [8]) | [1])
	if ( $7 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$5 = (($7 + [16]) & [-16])
	$6 = CALL $955($5)
	*($14 + [8]) = ($5 | [1])
	*($14 + [16]) = $6
	*($14 + [12]) = $7
	
.LABEL $label$41
	CALL memcpy($6, [9104], $7)
	
.LABEL $label$40
	*(($6 + $7)) = [0]
	*(($14 + [52])) = *(($2 + [12]))
	*(($14 + [48])) = *(($2 + [8]))
	*(($14 + [44])) = *(($2 + [4]))
	*($14 + [32]) = $1
	*($14 + [24]) = *($0)
	*($14 + [40]) = *($2)
	$7 = (($14 + [8]) + [8])
	*(($14 + [64])) = *($7)
	*($14 + [56]) = *($14 + [8])
	*($14 + [8]) = [0]
	*($14 + [12]) = [0]
	*($7) = [0]
	$7 = CALL $380(($14 + [88]), ($14 + [72]), $13, $11, ($14 + [24]))
	CALL $381(($14 + [304]), $7)
	$6 = *($14 + [304])
	CALL send_inline($6, (*($14 + [308]) - $6))
	$6 = *($14 + [304])
	if ( ($6 == 0) ){ goto $label$43 }
	*($14 + [308]) = $6
	CALL $956($6)
	
.LABEL $label$43
	$6 = *($7 + [28])
	if ( ($6 == 0) ){ goto $label$44 }
	*(($7 + [32])) = $6
	CALL $956($6)
	
.LABEL $label$44
	$6 = *($7 + [16])
	if ( ($6 == 0) ){ goto $label$45 }
	*(($7 + [20])) = $6
	CALL $956($6)
	
.LABEL $label$45
	if ( ((*(($14 + [56])) & [1]) == 0) ){ goto $label$46 }
	CALL $956(*(($14 + [64])))
	
.LABEL $label$46
	if ( ((*($14 + [8]) & [1]) == 0) ){ goto $label$47 }
	CALL $956(*(($14 + [16])))
	
.LABEL $label$47
	$10 = *($0)
	$5 = *($0 + [12])
	*(($14 + [32])) = [0]
	*($14 + [24]) = (int_64)0
	$7 = CALL strlen([9104])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$38 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$50 }
	*($14 + [24]) = ($7 << [1])
	$6 = (($14 + [24]) | [1])
	if ( $7 ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	$4 = (($7 + [16]) & [-16])
	$6 = CALL $955($4)
	*($14 + [24]) = ($4 | [1])
	*($14 + [32]) = $6
	*($14 + [28]) = $7
	
.LABEL $label$49
	CALL memcpy($6, [9104], $7)
	
.LABEL $label$48
	*(($6 + $7)) = [0]
	CALL $357($5, $2, $10, ($14 + [24]))
	if ( ((*($14 + [24]) & [1]) == 0) ){ goto $label$51 }
	CALL $956(*($14 + [32]))
	
.LABEL $label$51
	if ( ((int_32)$8 == (int_32)[3]) ){ goto $label$53 }
	if ( ((int_32)$8 == (int_32)[2]) ){ goto $label$54 }
	if ( ((int_32)$8 != (int_32)[1]) ){ goto $label$52 }
	CALL $824($0, $1, [1])
	goto $label$12 
	
.LABEL $label$54
	CALL $824($0, $1, [2])
	goto $label$12 
	
.LABEL $label$53
	CALL $824($0, $1, [3])
	goto $label$12 
	
.LABEL $label$52
	CALL $824($0, $1, [4])
	goto $label$12 
	
.LABEL $label$39
	CALL $957(($14 + [8]))
	
.LABEL $label$38
	CALL $957(($14 + [24]))
	
.LABEL $label$12
	if ( ((int_64)*(($3 + [128])) != (int_64)$1) ){ goto $label$57 }
	CALL $824($0, $1, [99])
	$13 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [2400]
	$11 = (int_64)0
	
.LOOP $label$58:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$63 }
	$2 = *($8)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$62 }
	$2 = ($2 + [165])
	goto $label$61 
	
.LABEL $label$63
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$62
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$61
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$60
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$59
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$58 }
	*($14 + [80]) = $11
	*($14 + [72]) = $13
	$13 = (int_64)0
	$10 = *(($3 + [48]))
	if ( ((int_64)$10 > (int_64)76151268725763) ){ goto $label$68 }
	if ( ((int_64)$10 == (int_64)1397703940) ){ goto $label$67 }
	$8 = [8480]
	if ( ((int_64)$10 == (int_64)280318001668) ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$68
	if ( ((int_64)$10 == (int_64)76151268725764) ){ goto $label$66 }
	if ( ((int_64)$10 != (int_64)4994016260158475524) ){ goto $label$64 }
	$8 = [8448]
	goto $label$65 
	
.LABEL $label$67
	$8 = [1312]
	goto $label$65 
	
.LABEL $label$66
	$8 = [8464]
	
.LABEL $label$65
	$2 = [-1]
	
.LOOP $label$69:
	$7 = ($8 + $2)
	$6 = ($2 + [1])
	$2 = $6
	if ( *(($7 + [1])) ){ goto $label$69 }
	$11 = (CASTING uint_64)(uint_32 $6)
	$10 = (int_64)0
	$12 = (int_64)59
	$13 = (int_64)0
	
.LOOP $label$70:
	$9 = (int_64)0
	if ( ((uint_64)$10 >= (uint_64)$11) ){ goto $label$71 }
	$2 = *($8)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$73 }
	$2 = ($2 + [165])
	goto $label$72 
	
.LABEL $label$73
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$72
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$71
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$75 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	goto $label$74 
	
.LABEL $label$75
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$74
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$13 = ((int_64)$9 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$70 }
	
.LABEL $label$64
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1296]
	$11 = (int_64)0
	
.LOOP $label$76:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$81 }
	$2 = *($8)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$80 }
	$2 = ($2 + [165])
	goto $label$79 
	
.LABEL $label$81
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$78 }
	goto $label$77 
	
.LABEL $label$80
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$79
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$78
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$77
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$76 }
	*(($14 + [16])) = [0]
	*($14 + [8]) = (int_64)0
	$2 = CALL strlen([9104])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$56 }
	$8 = ($3 + [40])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$84 }
	*($14 + [8]) = ($2 << [1])
	$7 = (($14 + [8]) | [1])
	if ( $2 ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$84
	$6 = (($2 + [16]) & [-16])
	$7 = CALL $955($6)
	*($14 + [8]) = ($6 | [1])
	*($14 + [16]) = $7
	*($14 + [12]) = $2
	
.LABEL $label$83
	CALL memcpy($7, [9104], $2)
	
.LABEL $label$82
	*(($7 + $2)) = [0]
	*(($14 + [52])) = *(($8 + [12]))
	*(($14 + [48])) = *(($8 + [8]))
	*(($14 + [44])) = *(($8 + [4]))
	*($14 + [32]) = $1
	*($14 + [24]) = *($0)
	*($14 + [40]) = *($8)
	$2 = (($14 + [8]) + [8])
	*(($14 + [64])) = *($2)
	*($14 + [56]) = *($14 + [8])
	*($14 + [8]) = [0]
	*($14 + [12]) = [0]
	*($2) = [0]
	$2 = CALL $380(($14 + [88]), ($14 + [72]), $13, $11, ($14 + [24]))
	CALL $381(($14 + [304]), $2)
	$7 = *($14 + [304])
	CALL send_inline($7, (*($14 + [308]) - $7))
	$7 = *($14 + [304])
	if ( ($7 == 0) ){ goto $label$85 }
	*($14 + [308]) = $7
	CALL $956($7)
	
.LABEL $label$85
	$7 = *($2 + [28])
	if ( ($7 == 0) ){ goto $label$86 }
	*(($2 + [32])) = $7
	CALL $956($7)
	
.LABEL $label$86
	$7 = *($2 + [16])
	if ( ($7 == 0) ){ goto $label$87 }
	*(($2 + [20])) = $7
	CALL $956($7)
	
.LABEL $label$87
	if ( ((*(($14 + [56])) & [1]) == 0) ){ goto $label$88 }
	CALL $956(*(($14 + [64])))
	
.LABEL $label$88
	if ( ((*($14 + [8]) & [1]) == 0) ){ goto $label$89 }
	CALL $956(*(($14 + [16])))
	
.LABEL $label$89
	$10 = *($0)
	$6 = *($0 + [12])
	*(($14 + [32])) = [0]
	*($14 + [24]) = (int_64)0
	$2 = CALL strlen([9104])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$55 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$92 }
	*($14 + [24]) = ($2 << [1])
	$7 = (($14 + [24]) | [1])
	if ( $2 ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$92
	$0 = (($2 + [16]) & [-16])
	$7 = CALL $955($0)
	*($14 + [24]) = ($0 | [1])
	*($14 + [32]) = $7
	*($14 + [28]) = $2
	
.LABEL $label$91
	CALL memcpy($7, [9104], $2)
	
.LABEL $label$90
	*(($7 + $2)) = [0]
	CALL $357($6, $8, $10, ($14 + [24]))
	if ( ((*($14 + [24]) & [1]) == 0) ){ goto $label$57 }
	CALL $956(*($14 + [32]))
	
.LABEL $label$57
	$7 = *($14 + [152])
	if ( ($7 == 0) ){ goto $label$93 }
	$6 = ($14 + [156])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$95 }
	
.LOOP $label$96:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$97 }
	CALL $956($2)
	
.LABEL $label$97
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$96 }
	$8 = *(($14 + [152]))
	goto $label$94 
	
.LABEL $label$95
	$8 = $7
	
.LABEL $label$94
	*($6) = $7
	CALL $956($8)
	
.LABEL $label$93
	$7 = *($14 + [200])
	if ( ($7 == 0) ){ goto $label$98 }
	$6 = ($14 + [204])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$100 }
	
.LOOP $label$101:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$102 }
	CALL $956($2)
	
.LABEL $label$102
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$101 }
	$8 = *(($14 + [200]))
	goto $label$99 
	
.LABEL $label$100
	$8 = $7
	
.LABEL $label$99
	*($6) = $7
	CALL $956($8)
	
.LABEL $label$98
	$7 = *($14 + [240])
	if ( ($7 == 0) ){ goto $label$103 }
	$6 = ($14 + [244])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$105 }
	
.LOOP $label$106:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$107 }
	CALL $956($2)
	
.LABEL $label$107
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$106 }
	$8 = *(($14 + [240]))
	goto $label$104 
	
.LABEL $label$105
	$8 = $7
	
.LABEL $label$104
	*($6) = $7
	CALL $956($8)
	
.LABEL $label$103
	CALL $367(($14 + [288]))
	*([0] + [4]) = ($14 + [320])
	return (unreachable)
	
.LABEL $label$56
	CALL $957(($14 + [8]))
	
.LABEL $label$55
	CALL $957(($14 + [24]))
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $815 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($0 + [8]), *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($0 + [12]), *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($0 + [16]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $814 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	$12 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [200]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*(($1 + [128])) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	$8 = *(($1 + [104]))
	$5 = *(($1 + [108]))
	$11 = (CASTING uint_64)(uint_32 ((int_32)($5 - $8) / (int_32)[24]))
	$3 = [90]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	$10 = *($8)
	$6 = ( *($8 + [4]) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($6 + $3)
	$11 = (CASTING uint_64)(uint_32 $6)
	$9 = [0]
	
.LOOP $label$4:
	$7 = $9
	$9 = ($7 + [1])
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$4 }
	$10 = *($8 + [12])
	$10 = ( *(($8 + [16])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$3 = (($7 + (($6 + $10) + $3)) + [1])
	$11 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$5 }
	$8 = ($8 + [24])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$9 = *(($1 + [168]))
	$10 = *(($1 + [172]))
	$7 = ($10 - $9)
	$11 = (CASTING uint_64)(uint_32 int_32($7 >> [5]))
	$3 = ($3 + [44])
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$7 }
	$3 = ((((int_32)uint_32(($7 + [-32]) >> [5]) * (int_32)[21]) + $3) + [21])
	
.LABEL $label$7
	$10 = ($3 + [16])
	if ( ($10 <= [513]) ){ goto $label$9 }
	$3 = CALL malloc($10)
	goto $label$8 
	
.LABEL $label$9
	$3 = ($13 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$8
	*($12 + [4]) = $3
	*($12) = $3
	*($12 + [8]) = ($3 + $10)
	CALL $470($12, $1)
	CALL db_update_i64(*($1 + [204]), $2, $3, $10)
	if ( ($10 <= [513]) ){ goto $label$10 }
	CALL free($3)
	
.LABEL $label$10
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $819 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*(($7 + [32])) = [0]
	*($7 + [16]) = (int_64)-1
	*($7 + [24]) = (int_64)0
	$5 = *($0)
	*($7) = $5
	*($7 + [8]) = $5
	$0 = CALL db_find_i64($5, $5, (int_64)-4312506468726210560, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $263($7, $0)
	CALL eosio_assert(((int_32)*($0 + [20]) == (int_32)$7), [1536])
	CALL eosio_assert([1], [4912])
	CALL eosio_assert([1], [4208])
	$3 = CALL db_next_i64(*($0 + [24]), ($7 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $263($7, $3)
	
.LABEL $label$2
	CALL $837($7, $0)
	
.LABEL $label$1
	$2 = *($7 + [24])
	if ( ($2 == 0) ){ goto $label$3 }
	$6 = ($7 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	$4 = *($3 + [8])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($3 + [12])) = $4
	CALL $956($4)
	
.LABEL $label$8
	CALL $956($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($7 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($6) = $2
	CALL $956($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $818 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [5024])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [5072])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [5136])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $956($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $956($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $764 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [10]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [40]) = ($5 + [21])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $212(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [28]), $2, $5, [21])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $259 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
}

int_32 .FUNC $958 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $959($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $959 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $955($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $956($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $258 (int_32 $0, int_32 $1)
{
	return $1
}

int_32 .FUNC $952 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $953($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [18624])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $953 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [18710]) == 0) ){ goto $label$2 }
	$7 = *([0] + [18712])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [18710]) = [1]
	$7 = ($7 << [16])
	*([0] + [18712]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [18712])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [18712]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [18710]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [18710]) = [1]
	$3 = ($3 << [16])
	*([0] + [18712]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [18712])
	
.LABEL $label$8
	*([0] + [18712]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $950 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [16]) = (*($1 + [16]) + *(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [40]) = ($5 + [21])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $212(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [28]), $2, $5, [21])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $952([10228], $0)
}

void .FUNC $956 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $957 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [18612])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [18420]
	$1 = (((int_32)$2 * (int_32)[12]) + [18420])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $755 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*($7) = (int_64)0
	*($7 + [8]) = [0]
	$3 = *($1 + [8])
	$2 = *($1)
	$5 = (*(($1 + [16])) - *($1 + [12]))
	$4 = int_32($5 >> [2])
	if ( ($4 == 0) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$5 = CALL $955($5)
	*(($7 + [8])) = ($5 + ($4 << [2]))
	*($7) = $5
	*($7 + [4]) = $5
	$6 = *(($1 + [12]))
	$4 = (*(($1 + [16])) - $6)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $6, $4)
	*($7 + [4]) = ($5 + $4)
	
.LABEL $label$2
	$5 = *($0 + [4])
	$4 = *($5 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$6 = *($1 + [24])
	$1 = *($5)
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($0) + $1))
	
.LABEL $label$3
	CALL void $0((int_32 $2), (int_64 $3), (int_32 $7), (int_32 $6), (int_32 $1))
	$1 = *($7)
	if ( ($1 == 0) ){ goto $label$4 }
	*($7 + [4]) = $1
	CALL $956($1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $971($7)
}

void .FUNC $329 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $328 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [9]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [12]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	return $0
}

void .FUNC $321 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($2 + [12]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	CALL $323(*($1), ($2 + [16]))
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($1 + [4]), ($2 + [28]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

int_32 .FUNC $320 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_64 $24
	int_64 $25
	int_64 $26
	int_64 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	$38 = (*([0] + [4]) - [176])
	*([0] + [4]) = $38
	$32 = *($1 + [4])
	$6 = *($32)
	CALL $200(*($0 + [56]), [1])
	$29 = [0]
	*(($38 + [160])) = [0]
	*($38 + [144]) = (int_64)-1
	*($38 + [152]) = (int_64)0
	$16 = *($0 + [8])
	*($38 + [128]) = $16
	*($38 + [136]) = $16
	$28 = [0]
	$11 = CALL db_find_i64($16, $16, (int_64)-4921685625297436672, (CASTING uint_64)(uint_32 $2))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$1 }
	$28 = CALL $167(($38 + [128]), $11)
	CALL eosio_assert(((int_32)*($28 + [52]) == (int_32)($38 + [128])), [1536])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$28 != (int_32)[0]), [3408])
	if ( ($4 == 0) ){ goto $label$2 }
	$29 = ((uint_32)*($28 + [10]) > (uint_32)[2])
	
.LABEL $label$2
	$4 = CALL int_32 $0((int_32 *($32 + [9])), (int_32 *(*($0) + [16])))
	$32 = CALL int_32 $0((int_32 $6), (int_64 *(*($0) + [20])))
	CALL eosio_assert((((int_32)(*($32 + [4]) - *($32)) / (int_32)[20]) <= $4), [3440])
	$10 = *($28 + [39])
	$9 = *($28 + [38])
	$8 = *($28 + [37])
	$7 = *($28 + [36])
	*(($38 + [120])) = [0]
	*($38 + [104]) = (int_64)-1
	*($38 + [112]) = (int_64)0
	$16 = *(($0 + [8]))
	*($38 + [88]) = $16
	*($38 + [96]) = $16
	$30 = [0]
	$4 = CALL db_find_i64($16, $16, (int_64)-7948101582086733824, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$30 = CALL $214(($38 + [88]), $4)
	CALL eosio_assert(((int_32)*($30 + [24]) == (int_32)($38 + [88])), [1536])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$30 != (int_32)[0]), [3456])
	$34 = $10
	$35 = $9
	$36 = $8
	$37 = $7
	$4 = *($3)
	if ( ((int_32)*($3 + [4]) == (int_32)$4) ){ goto $label$4 }
	$18 = ($30 + [16])
	$19 = ($28 + [32])
	$23 = ($3 + [4])
	$20 = ($28 + [33])
	$21 = ($28 + [34])
	$22 = ($28 + [35])
	$37 = $7
	$36 = $8
	$35 = $9
	$34 = $10
	$31 = [0]
	
.LOOP $label$5:
	$17 = ($30 + [12])
	$12 = *($17)
	$32 = (*($18) - $12)
	if ( ((int_32)$32 < (int_32)[12]) ){ goto $label$7 }
	$11 = *(($4 + ($31 << [2])))
	$32 = (((uint_32)$32 / (uint_32)[12]) + [-1])
	$4 = [0]
	
.LOOP $label$8:
	$13 = ($32 - $4)
	$14 = (((int_32)$13 / (int_32)[2]) + $4)
	$33 = ($12 + ((int_32)$14 * (int_32)[12]))
	$15 = *($33)
	if ( ($15 <= $11) ){ goto $label$9 }
	if ( ((uint_32)$15 <= (uint_32)$11) ){ goto $label$6 }
	$32 = ($14 + [-1])
	if ( ((int_32)$13 > (int_32)[1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$4 = ($14 + [1])
	if ( ((int_32)$32 > (int_32)$14) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert([0], [3472])
	$33 = *($17)
	
.LABEL $label$6
	CALL eosio_assert((*($33 + [8]) == 0), [3504])
	$4 = *($33 + [4])
	if ( ((int_32)$4 != (int_32)*($19)) ){ goto $label$11 }
	$37 = ($37 + [-1])
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$4 != (int_32)*($20)) ){ goto $label$12 }
	$36 = ($36 + [-1])
	goto $label$10 
	
.LABEL $label$12
	if ( ((int_32)$4 != (int_32)*($21)) ){ goto $label$13 }
	$35 = ($35 + [-1])
	goto $label$10 
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)*($22)) ){ goto $label$14 }
	$34 = ($34 + [-1])
	goto $label$10 
	
.LABEL $label$14
	CALL eosio_assert([0], [3536])
	
.LABEL $label$10
	$4 = *($3)
	$31 = ($31 + [1])
	if ( ($31 <= int_32((*($23) - $4) >> [2])) ){ goto $label$5 }
	
.LABEL $label$4
	$15 = [1]
	CALL eosio_assert(((int_32)uint_32(((($35 | $34) | $36) | $37) >> [31]) ^ (int_32)[1]), [2912])
	$4 = ((($35 + $34) + $36) + $37)
	CALL eosio_assert(((int_32)$4 < (int_32)[2]), [2912])
	if ( ((int_32)$4 != (int_32)[1]) ){ goto $label$15 }
	$4 = [0]
	if ( ((int_32)$37 != (int_32)[1]) ){ goto $label$16 }
	$4 = *($28 + [32])
	
.LABEL $label$16
	$32 = ($8 + $7)
	if ( ((int_32)$36 != (int_32)[1]) ){ goto $label$17 }
	$4 = *($28 + [33])
	
.LABEL $label$17
	$32 = ($32 + $9)
	if ( ((int_32)$35 != (int_32)[1]) ){ goto $label$18 }
	$4 = *($28 + [34])
	
.LABEL $label$18
	$32 = ($32 + $10)
	if ( ((int_32)$34 != (int_32)[1]) ){ goto $label$19 }
	$4 = *($28 + [35])
	
.LABEL $label$19
	$16 = *($1)
	*($38 + [80]) = $16
	$11 = *(*($0) + [28])
	*($38 + [8 align=4]) = $16
	CALL void $0((int_32 ($38 + [8])), (int_32 $32), (int_32 $4), (int_32 $29), (int_32 $11))
	
.LABEL $label$15
	CALL $324(*($0 + [64]), $6, $3, $29)
	if ( $29 ){ goto $label$20 }
	CALL memcpy(($38 + [16]), *($5 + [4]), [64])
	$4 = ($0 + [56])
	CALL $205(($38 + [168]), *($4), ($38 + [16]))
	$16 = ((uint_64)((int_64)((int_64)*($38 + [168]) * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	$24 = ((uint_64)((int_64)((int_64)$16 * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	$25 = ((uint_64)((int_64)((int_64)$24 * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	$26 = ((uint_64)((int_64)((int_64)$25 * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	$27 = ((uint_64)((int_64)((int_64)$26 * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	$16 = *($38 + [16])
	*($38 + [24]) = ((int_64)((int_64)(uint_64)$16 >> (uint_64)(int_64)32) ^ (int_64)$16) ^ (int_64)$27)
	$15 = [0]
	CALL $305($0, $6, $2, ((((CASTING uint_32)(uint_64 ((int_64)((int_64)((int_64)(uint_64)((int_64)$24 * (int_64)101) >> (uint_64)(int_64)23) & (int_64)32512) | (int_64)(uint_64)((int_64)$16 * (int_64)101) >> (uint_64)(int_64)31)) | (int_64)((int_64)(uint_64)((int_64)$25 * (int_64)101) >> (uint_64)(int_64)15) & (int_64)8323072))) | (((CASTING uint_32)(uint_64 (uint_64)((int_64)$26 * (int_64)100) >> (uint_64)(int_64)31)) <= *($28 + [30])) << [25])) | (((CASTING uint_32)(uint_64 (uint_64)((int_64)$27 * (int_64)100) >> (uint_64)(int_64)31)) <= *($28 + [31])) << [26])) | [16777216]), [1], [0])
	*($38 + [28]) = [0]
	$32 = *($4)
	$6 = *($32)
	$4 = *($5 + [4])
	*($38 + [168]) = ($38 + [16])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [1696])
	CALL $209(($32 + [88]), $4, $6, ($38 + [168]))
	
.LABEL $label$20
	$14 = *($38 + [112])
	if ( ($14 == 0) ){ goto $label$21 }
	$13 = ($38 + [116])
	$4 = *($13)
	if ( ((int_32)$4 == (int_32)$14) ){ goto $label$23 }
	
.LOOP $label$24:
	$4 = ($4 + [-24])
	$32 = *($4)
	*($4) = [0]
	if ( ($32 == 0) ){ goto $label$25 }
	$11 = *($32 + [12])
	if ( ($11 == 0) ){ goto $label$26 }
	*(($32 + [16])) = $11
	CALL $956($11)
	
.LABEL $label$26
	CALL $956($32)
	
.LABEL $label$25
	if ( ((int_32)$14 != (int_32)$4) ){ goto $label$24 }
	$4 = *(($38 + [112]))
	goto $label$22 
	
.LABEL $label$23
	$4 = $14
	
.LABEL $label$22
	*($13) = $14
	CALL $956($4)
	
.LABEL $label$21
	$11 = *($38 + [152])
	if ( ($11 == 0) ){ goto $label$27 }
	$14 = ($38 + [156])
	$4 = *($14)
	if ( ((int_32)$4 == (int_32)$11) ){ goto $label$29 }
	
.LOOP $label$30:
	$4 = ($4 + [-24])
	$32 = *($4)
	*($4) = [0]
	if ( ($32 == 0) ){ goto $label$31 }
	CALL $956($32)
	
.LABEL $label$31
	if ( ((int_32)$11 != (int_32)$4) ){ goto $label$30 }
	$4 = *(($38 + [152]))
	goto $label$28 
	
.LABEL $label$29
	$4 = $11
	
.LABEL $label$28
	*($14) = $11
	CALL $956($4)
	
.LABEL $label$27
	*([0] + [4]) = ($38 + [176])
	return $15
}

int_32 .FUNC $323 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [2]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [1920])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[3]), [1920])
	$2 = ($0 + [4])
	CALL memcpy(*($2), $5, [4])
	$7 = (*($2) + [4])
	*($2) = $7
	$5 = ($5 + [4])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $322 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	*([0] + [4]) = $11
	$10 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $10) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$10 = ((int_32)(*($0 + [8]) - $10) / (int_32)[40])
	if ( ((uint_32)$10 > (uint_32)[53687090]) ){ goto $label$4 }
	$10 = ($10 << [1])
	$8 = ( $6 ? $10 : ($10 <= $6) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	*(($10 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($10 + [8]) = *($3)
	*($10 + [16 align=4]) = (int_64)0
	*(($3 = ($10 + [24]))) = [0]
	$2 = CALL $955([16])
	*($10 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($10 + [20])) = $5
	*($10 + [28]) = [0]
	*(($5 = ($10 + [32]))) = [0]
	*(($10 + [36])) = [0]
	$3 = ($6 + ((int_32)$8 * (int_32)[40]))
	$1 = ($10 + [28])
	$6 = *($4 + [16])
	$8 = *(($4 + [20]))
	$7 = ($8 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($7 >> [2]))
	$2 = [14]
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$6 }
	$2 = (($7 & [-4]) + $2)
	
.LABEL $label$6
	$2 = ($2 + [4])
	if ( ($2 == 0) ){ goto $label$8 }
	CALL $194($1, $2)
	$8 = *($5)
	$2 = *($1)
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	$2 = [0]
	
.LABEL $label$7
	*($11 + [4]) = $2
	*($11) = $2
	*($11 + [8]) = $8
	*($11 + [16]) = $11
	*($11 + [24]) = $4
	$5 = ($10 + [40])
	CALL $321(($11 + [24]), ($11 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$10 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$11:
	*(($10 + [-32])) = *(($2 + [-12]))
	*(($10 + [-40])) = *(($2 + [-20]))
	*(($1 = ($10 + [-24]))) = (int_64)0
	*(($4 = ($10 + [-16]))) = [0]
	$8 = ($2 + [-4])
	*($1) = *($8)
	*(($10 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($10 + [-12]))) = (int_64)0
	*($8) = (int_64)0
	*(($4 = ($10 + [-4]))) = [0]
	$8 = ($2 + [8])
	*($1) = *($8)
	*(($10 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($8) = (int_64)0
	$10 = ($10 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$11 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$4 = $2
	
.LABEL $label$9
	*($0) = $10
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$12 }
	$1 = ([0] - $4)
	$10 = ($2 + [-24])
	
.LOOP $label$13:
	$2 = *(($10 + [12]))
	if ( ($2 == 0) ){ goto $label$14 }
	*(($10 + [16])) = $2
	CALL $956($2)
	
.LABEL $label$14
	$2 = *($10)
	if ( ($2 == 0) ){ goto $label$15 }
	*(($10 + [4])) = $2
	CALL $956($2)
	
.LABEL $label$15
	$10 = ($10 + [-40])
	if ( ((int_32)($10 + $1) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($4 == 0) ){ goto $label$16 }
	CALL $956($4)
	
.LABEL $label$16
	*([0] + [4]) = ($11 + [32])
	(unreachable)
}

void .FUNC $325 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	$11 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	CALL $326($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$3 = [12]
	$5 = ($1 + [12])
	$7 = *($1 + [12])
	$6 = *(($1 + [16]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$8 / (int_32)[12]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	$3 = ((((int_32)((uint_32)($8 + [-12]) / (uint_32)[12]) * (int_32)[10]) + $3) + [10])
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$10 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$10 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$3
	*($11) = $10
	$6 = ($10 + $3)
	*($11 + [8]) = $6
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [1920])
	CALL memcpy($10, $1, [8])
	$7 = ($10 + [8])
	CALL eosio_assert(((int_32)($6 - $7) > (int_32)[3]), [1920])
	CALL memcpy($7, ($1 + [8]), [4])
	*($11 + [4]) = ($10 + [12])
	CALL $217($11, $5)
	CALL db_update_i64(*($1 + [28]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($10)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($11 + [16])
}

int_32 .FUNC $324 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [128])
	*([0] + [4]) = $8
	*($8 + [127]) = $3
	*((($8 + [80]) + [32])) = [0]
	*($8 + [96]) = (int_64)-1
	*($8 + [104]) = (int_64)0
	$6 = *($0 + [8])
	*($8 + [80]) = $6
	*($8 + [88]) = $6
	$3 = [0]
	$5 = CALL db_find_i64($6, $6, (int_64)-7948101582086733824, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $214(($8 + [80]), $5)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)($8 + [80])), [1536])
	
.LABEL $label$1
	$5 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($5, [3568])
	*((($8 + [40]) + [32])) = [0]
	*($8 + [56]) = (int_64)-1
	*($8 + [64]) = (int_64)0
	$6 = *(($0 + [8]))
	*($8 + [40]) = $6
	*($8 + [48]) = $6
	*($8 + [36]) = [0]
	*($8 + [32]) = [0]
	*($8 + [8]) = $2
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [40])
	*($8 + [20]) = ($8 + [36])
	*($8 + [24]) = ($8 + [127])
	CALL eosio_assert($5, [1696])
	CALL $325(($8 + [80]), $3, $6, ($8 + [8]))
	CALL eosio_assert(((int_32)*($8 + [32]) != (int_32)[0]), [3568])
	$4 = *($8 + [36])
	$2 = *($8 + [64])
	if ( ($2 == 0) ){ goto $label$2 }
	$5 = ($8 + [68])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL $956($0)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$5 }
	$3 = *(($8 + [64]))
	goto $label$3 
	
.LABEL $label$4
	$3 = $2
	
.LABEL $label$3
	*($5) = $2
	CALL $956($3)
	
.LABEL $label$2
	$5 = *($8 + [104])
	if ( ($5 == 0) ){ goto $label$7 }
	$7 = ($8 + [108])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	$2 = *($0 + [12])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($0 + [16])) = $2
	CALL $956($2)
	
.LABEL $label$12
	CALL $956($0)
	
.LABEL $label$11
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$10 }
	$3 = *(($8 + [104]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $5
	
.LABEL $label$8
	*($7) = $5
	CALL $956($3)
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [128])
	return $4
}

int_32 .FUNC $327 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $955([32]))) = (int_64)0
	*($6 + [8]) = [0]
	*($6 + [12]) = [0]
	*($6 + [16]) = [0]
	*($6 + [20]) = $0
	CALL $328(($8 + [32]), $6)
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $329(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $326 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$15 = *($0)
	if ( ((int_32)*($15 + [4]) == (int_32)*($15)) ){ goto $label$1 }
	$15 = *($0 + [4])
	$9 = ($1 + [16])
	$13 = ($0 + [4])
	$12 = ($0 + [8])
	$14 = [0]
	
.LOOP $label$2:
	*($15) = [0]
	$8 = ($1 + [12])
	$3 = *($8)
	$15 = (*($9) - $3)
	if ( ((int_32)$15 < (int_32)[12]) ){ goto $label$3 }
	$2 = *((*(*($0)) + ($14 << [2])))
	$16 = (((uint_32)$15 / (uint_32)[12]) + [-1])
	$15 = [0]
	
.LOOP $label$5:
	$4 = ($16 - $15)
	$5 = (((int_32)$4 / (int_32)[2]) + $15)
	$10 = ((int_32)$5 * (int_32)[12])
	$11 = ($3 + $10)
	$6 = *($11)
	if ( ($6 <= $2) ){ goto $label$6 }
	if ( ((uint_32)$2 >= (uint_32)$6) ){ goto $label$4 }
	$16 = ($5 + [-1])
	if ( ((int_32)$4 >= (int_32)[2]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$15 = ($5 + [1])
	if ( ((int_32)$16 > (int_32)$5) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( *($11 + [8]) ){ goto $label$3 }
	$7 = *($11 + [4])
	$4 = *($6 + [24])
	$6 = *($12)
	$2 = *(($6 + [28]))
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$7 }
	$15 = ($2 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$8:
	if ( ((int_64)*(*($15)) == (int_64)$7) ){ goto $label$7 }
	$2 = $15
	$16 = ($15 + [-24])
	$15 = $16
	if ( ((int_32)($16 + $5) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$10 }
	$15 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*(($15 + [20])) == (int_32)$6), [1536])
	if ( $15 ){ goto $label$9 }
	goto $label$3 
	
.LABEL $label$10
	$15 = CALL db_find_i64(*($6), *($6 + [8]), (int_64)-4860064192867598336, $7)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$3 }
	$15 = CALL $327($6, $15)
	CALL eosio_assert(((int_32)*($15 + [20]) == (int_32)$6), [1536])
	
.LABEL $label$9
	*(($16 = *(($0 + [12])))) = (*($16) + *($15 + [16]))
	if ( *(*(($0 + [16]))) ){ goto $label$11 }
	$15 = (*($8) + $10)
	$5 = ($15 + [12])
	$16 = (*($9) - $5)
	$2 = ((int_32)$16 / (int_32)[12])
	if ( ($16 == 0) ){ goto $label$12 }
	CALL memmove($15, $5, $16)
	
.LABEL $label$12
	*($9) = ($15 + ((int_32)$2 * (int_32)[12]))
	
.LABEL $label$11
	*(*($13)) = [1]
	
.LABEL $label$3
	$15 = *($13)
	if ( (*($15) == 0) ){ goto $label$1 }
	$16 = *($0)
	$14 = ($14 + [1])
	if ( ($14 <= int_32((*($16 + [4]) - *($16)) >> [2])) ){ goto $label$2 }
	
.LABEL $label$1
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [20])) = (int_64)0
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	*($2 + [12 align=4]) = (int_64)0
	*($2 + [28]) = [0]
	*($2 + [52]) = $1
	*($2 + [48]) = $1
	*($2 + [56]) = ($1 + $0)
	*($2 + [64]) = ($2 + [48])
	*($2 + [72]) = $2
	CALL $654(($2 + [72]), ($2 + [64]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $672(($2 + [48]), $2)
	$1 = *(($2 + [12]))
	if ( ($1 == 0) ){ goto $label$5 }
	*(($2 + [16])) = $1
	CALL $956($1)
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [80])
	return [1]
}

void .FUNC $100 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	CALL $446(($0 + [8]), $1, $4, $5)
	CALL $673(($0 + [1208]), $1, $2, $3)
}

void .FUNC $103 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	CALL $446(($0 + [8]), $1, $3, $4)
	CALL $656(($0 + [1208]), $1, $2)
}

void .FUNC $450 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	$6 = *($1 + [12])
	$5 = *(($1 + [16]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$1 }
	$9 = ($6 + [8])
	$7 = ((int_32)($5 - $6) / (int_32)[12])
	$10 = *(*($3))
	$8 = [0]
	
.LOOP $label$3:
	if ( ((int_64)*($9) == (int_64)$10) ){ goto $label$2 }
	$9 = ($9 + [12])
	$8 = ($8 + [1])
	if ( ($8 <= $7) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*(*($3 + [4])) = $8
	
.LABEL $label$1
	$10 = $4
	$9 = *(*($3 + [4]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$4 }
	$9 = ($6 + ((int_32)$9 * (int_32)[12]))
	$3 = ($9 + [12])
	$8 = ($5 - $3)
	$7 = ((int_32)$8 / (int_32)[12])
	$10 = $4
	if ( ($8 == 0) ){ goto $label$5 }
	CALL memmove($9, $3, $8)
	$10 = *($1)
	
.LABEL $label$5
	*(($1 + [16])) = ($9 + ((int_32)$7 * (int_32)[12]))
	
.LABEL $label$4
	$7 = ($1 + [12])
	CALL eosio_assert(((int_64)$4 == (int_64)$10), [1856])
	$9 = [12]
	$3 = *(($1 + [12]))
	$8 = *(($1 + [16]))
	$6 = ($8 - $3)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[12]))
	
.LOOP $label$6:
	$9 = ($9 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$7 }
	$9 = ((((int_32)((uint_32)($6 + [-12]) / (uint_32)[12]) * (int_32)[10]) + $9) + [10])
	
.LABEL $label$7
	if ( ($9 <= [513]) ){ goto $label$9 }
	$8 = CALL malloc($9)
	goto $label$8 
	
.LABEL $label$9
	$8 = ($12 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$8
	*($11) = $8
	$3 = ($8 + $9)
	*($11 + [8]) = $3
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [1920])
	CALL memcpy($8, $1, [8])
	$6 = ($8 + [8])
	CALL eosio_assert(((int_32)($3 - $6) > (int_32)[3]), [1920])
	CALL memcpy($6, ($1 + [8]), [4])
	*($11 + [4]) = ($8 + [12])
	CALL $217($11, $7)
	CALL db_update_i64(*($1 + [28]), $2, $8, $9)
	if ( ($9 <= [513]) ){ goto $label$10 }
	CALL free($8)
	
.LABEL $label$10
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $457 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $955([72])
	CALL $459($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [64])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $158(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $956($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $456 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $955([56]))) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [16]) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = (int_64)0
	*($6 + [40]) = $0
	CALL $460(($8 + [32]), $6)
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [44])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $461(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($3 = $4) + [44]) = $0
	*($3 + [32]) = *($1)
	*($3 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [20])) = (int_64)0
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [12 align=4]) = (int_64)0
	*($3 + [48]) = $1
	$4 = ($1 + $0)
	*($3 + [56]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [1632])
	CALL memcpy($3, $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($3 + [8]), $2, [2])
	*($3 + [52]) = ($1 + [10])
	$4 = ($3 + [12])
	CALL $633(($3 + [48]), $4)
	CALL eosio_assert(((uint_32)(*($3 + [56]) - *($3 + [52])) > (uint_32)[3]), [1632])
	CALL memcpy(($3 + [24]), *($3 + [52]), [4])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $634(($3 + [48]), $3)
	$1 = *($4)
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [16])) = $1
	CALL $956($1)
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [64])
	return [1]
}

void .FUNC $454 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	*([0] + [4]) = $11
	$4 = *(($1 + [72]))
	$9 = *(($1 + [76]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$9 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($1 + [48])
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$4 }
	$10 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)$3), [1536])
	goto $label$3 
	
.LABEL $label$4
	$8 = CALL db_find_i64(*(($1 + [48])), *(($1 + [56])), (int_64)-6030912128183959552, $2)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$5 }
	$10 = CALL $456($3, $8)
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)$3), [1536])
	goto $label$3 
	
.LABEL $label$5
	$10 = [0]
	
.LABEL $label$3
	*($11 + [20]) = $10
	*($11 + [16]) = $3
	$4 = *(($1 + [112]))
	$9 = *(($1 + [116]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$6 }
	$8 = ($9 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$6 }
	$9 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$8 = ($1 + [88])
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$10 }
	$6 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [60]) == (int_32)$8), [1536])
	if ( (($6 == 0) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$6 = CALL db_find_i64(*(($1 + [88])), *(($1 + [96])), (int_64)-6030912128150405120, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*(CALL $156($8, $6) + [60]) == (int_32)$8), [1536])
	goto $label$8 
	
.LABEL $label$11
	if ( ([1] == 0) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ($10 == 0) ){ goto $label$8 }
	$7 = *($1)
	*($11 + [24]) = ($11 + [16])
	CALL $457(($11 + [8]), $8, $7, ($11 + [24]))
	$7 = *($11 + [16])
	$6 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32)
	$9 = ((int_32)$6) != (int_32)[0]
	CALL eosio_assert($9), [4912])
	CALL eosio_assert($9, [4208])
	$9 = CALL db_next_i64(*($6 + [44]), ($11 + [24]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$12 }
	CALL $456((CASTING uint_32)(uint_64 $7), $9)
	
.LABEL $label$12
	CALL $458($3, $6)
	
.LABEL $label$8
	CALL $244($0, $8, $2)
	*([0] + [4]) = ($11 + [32])
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = *(($3 + [8]))
	*((($6 + [16]) + [8])) = $4
	$5 = *($3)
	*(($6 + [8])) = $4
	*($6 + [16]) = $5
	*($6 + [4]) = *($6 + [20])
	*($6) = *($6 + [16])
	CALL $585(($0 + [1232]), $1, $2, $6)
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $108 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	CALL $446(($0 + [8]), $1, $3, $4)
	CALL $600(($0 + [1208]), $1, $2)
}

int_32 .FUNC $459 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	*($0) = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0 + [16]) = (int_64)512
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = [0]
	*($0 + [36]) = [0]
	*($0 + [38]) = [0]
	*($0 + [40]) = [0]
	*($0 + [44]) = [0]
	*($0 + [45]) = [0]
	*($0 + [46]) = [0]
	*($0 + [48]) = [0]
	*($0 + [50]) = [0]
	*($0 + [52]) = [0]
	*($0 + [54]) = [0]
	*($0 + [56]) = [0]
	*($0 + [58]) = [0]
	*($0 + [60]) = $1
	$3 = *($2)
	$1 = *($2 + [4])
	*($0) = *(*(*($1) + [4]))
	*($0 + [8]) = *(*(*($1) + [4]) + [8])
	*($0 + [16]) = *(*(*($1) + [4]) + [16])
	*($0 + [18]) = *(*(*($1) + [4]) + [18])
	*($0 + [17]) = [2]
	*($5 + [72]) = ($5 + [60])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $224(($5 + [64]), $0)
	$4 = *($0)
	*($0 + [64]) = CALL db_store_i64(*($3 + [8]), (int_64)-6030912128150405120, *(*($2 + [8])), $4, $5, [60])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
	return $0
}

void .FUNC $458 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [5024])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [5072])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [5136])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $956($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $956($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $691 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [16])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [20])) = $6
	CALL $956($6)
	
.LABEL $label$11
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $956($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $251 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $518 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = *(*($0))
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$1 }
	goto $label$10 
	
.LABEL $label$10
	$0 = *($0 + [4])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*(($1 + [16]))), [4096])
	$3 = ((int_64)*($1 + [8]) + (int_64)*($0))
	*($1 + [8]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [4176])
	return 
	
.LABEL $label$9
	$0 = *($0 + [4])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*(($1 + [32]))), [4096])
	$3 = ((int_64)*($1 + [24]) + (int_64)*($0))
	*($1 + [24]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [4176])
	return 
	
.LABEL $label$8
	$0 = *($0 + [4])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*(($1 + [48]))), [4096])
	$3 = ((int_64)*($1 + [40]) + (int_64)*($0))
	*($1 + [40]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [4176])
	return 
	
.LABEL $label$7
	$0 = *($0 + [4])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*(($1 + [64]))), [4096])
	$3 = ((int_64)*($1 + [56]) + (int_64)*($0))
	*($1 + [56]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($1 + [56]) < (int_64)4611686018427387904), [4176])
	return 
	
.LABEL $label$6
	$0 = *($0 + [4])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*(($1 + [80]))), [4096])
	$3 = ((int_64)*($1 + [72]) + (int_64)*($0))
	*($1 + [72]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($1 + [72]) < (int_64)4611686018427387904), [4176])
	return 
	
.LABEL $label$5
	$0 = *($0 + [4])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*(($1 + [96]))), [4096])
	$3 = ((int_64)*($1 + [88]) + (int_64)*($0))
	*($1 + [88]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($1 + [88]) < (int_64)4611686018427387904), [4176])
	return 
	
.LABEL $label$4
	$0 = *($0 + [4])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*(($1 + [112]))), [4096])
	$3 = ((int_64)*($1 + [104]) + (int_64)*($0))
	*($1 + [104]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($1 + [104]) < (int_64)4611686018427387904), [4176])
	return 
	
.LABEL $label$3
	$0 = *($0 + [4])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*(($1 + [128]))), [4096])
	$3 = ((int_64)*($1 + [120]) + (int_64)*($0))
	*($1 + [120]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($1 + [120]) < (int_64)4611686018427387904), [4176])
	return 
	
.LABEL $label$2
	$0 = *($0 + [4])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*(($1 + [144]))), [4096])
	$3 = ((int_64)*($1 + [136]) + (int_64)*($0))
	*($1 + [136]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($1 + [136]) < (int_64)4611686018427387904), [4176])
	
.LABEL $label$1
	$2
}

int_32 .FUNC $519 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [136]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [144]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [152]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [160]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [168]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [176]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [184]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [192]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [200]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [208]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $695 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy(($0 + [8]), *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($0 + [12]), *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($0 + [16]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $694 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [1632])
	CALL memcpy(($4 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($2) = ((int_32)*($4 + [15]) != (int_32)[0])
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $697 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([40]))) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24]) = [0]
	*($3 + [28]) = $1
	CALL $701(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [32])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $691(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [16])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [20])) = $1
	CALL $956($1)
	
.LABEL $label$4
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $250 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [48])
	$15 = $16
	*([0] + [4]) = $16
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$6 = ($1 + [8])
	$4 = *($1)
	$14 = $4
	$7 = *($1 + [8])
	$9 = ($1 + [12])
	$13 = *($9)
	if ( ((int_32)$13 == (int_32)$7) ){ goto $label$1 }
	$5 = *($3)
	$8 = int_32(($13 - $7) >> [4])
	$12 = [0]
	$13 = [14]
	$10 = (*(*($3 + [4])) & [255])
	
.LOOP $label$3:
	$11 = ($7 + $13)
	if ( ((int_32)*(($11 + [-14])) == (int_32)$10) ){ goto $label$2 }
	$13 = ($13 + [16])
	$12 = ($12 + [1])
	if ( ($12 <= $8) ){ goto $label$3 }
	$14 = $4
	goto $label$1 
	
.LABEL $label$2
	*(($11 + [-13])) = *(*($3 + [8]))
	CALL $149(($15 + [8]), $5, *(*($3 + [12])), *($3 + [16]))
	*((($13 = (*(($1 + [8])) + $13)) + [-6])) = *($15 + [8])
	*(($13 + [-4])) = *($15 + [12])
	*(($13 + [-2])) = *($15 + [16])
	*($13) = *($15 + [20])
	$14 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$14), [1856])
	$7 = *($6)
	$12 = *($9)
	$10 = ($12 - $7)
	$14 = (CASTING uint_64)(uint_32 int_32($10 >> [4]))
	$13 = [22]
	
.LOOP $label$4:
	$13 = ($13 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$6 }
	$13 = (((int_32)uint_32(($10 + [-16]) >> [4]) * (int_32)[14]) + $13)
	goto $label$5 
	
.LABEL $label$6
	$13 = ($13 + [-14])
	
.LABEL $label$5
	if ( ($13 <= [513]) ){ goto $label$8 }
	$12 = CALL malloc($13)
	goto $label$7 
	
.LABEL $label$8
	$12 = ($16 - (($13 + [15]) & [-16]))
	*([0] + [4]) = $12
	
.LABEL $label$7
	*($15 + [8]) = $12
	*($15 + [16]) = ($12 + $13)
	CALL eosio_assert(((int_32)$13 > (int_32)[7]), [1920])
	CALL memcpy($12, $1, [8])
	*($15 + [12]) = ($12 + [8])
	CALL $151(($15 + [8]), $6)
	CALL db_update_i64(*($1 + [24]), $2, $12, $13)
	if ( ($13 <= [513]) ){ goto $label$9 }
	CALL free($12)
	
.LABEL $label$9
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($15 + [48])
}

void .FUNC $512 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$5 = *($3)
	*($1 + [32]) = *($5)
	*(($1 + [44])) = *(($5 + [12]))
	*(($1 + [40])) = *(($5 + [8]))
	*(($1 + [36])) = *(($5 + [4]))
	$4 = *($1)
	$5 = *($3)
	*($1 + [64]) = *($5)
	*(($1 + [72])) = *(($5 + [8]))
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [56]))), [4096])
	$6 = ((int_64)*($1 + [48]) + (int_64)*($3))
	*($1 + [48]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [4176])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	*($7 + [88]) = ($7 + [76])
	*($7 + [84]) = $7
	*($7 + [80]) = $7
	CALL $514(($7 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $7, [76])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [96])
}

void .FUNC $513 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$3 = *($3)
	*($1 + [32]) = *($3)
	*(($1 + [44])) = *(($3 + [12]))
	*(($1 + [40])) = *(($3 + [8]))
	*(($1 + [36])) = *(($3 + [4]))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [88]) = ($5 + [76])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	CALL $514(($5 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $5, [76])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $510 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [256])
	*([0] + [4]) = $10
	$7 = *($0)
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$2 }
	*((($10 + [200]) + [32])) = [0]
	*($10 + [208]) = $7
	*($10 + [200]) = $7
	*($10 + [216]) = (int_64)-1
	*($10 + [224]) = (int_64)0
	$4 = CALL db_find_i64($7, $7, (int_64)-6030912128150405120, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $156(($10 + [200]), $4)
	CALL eosio_assert(((int_32)*($4 + [60]) == (int_32)($10 + [200])), [1536])
	$1 = *($4 + [26])
	*((($10 + [160]) + [32])) = [0]
	*($10 + [176]) = (int_64)-1
	*($10 + [184]) = (int_64)0
	$7 = *($0)
	*($10 + [160]) = $7
	*($10 + [168]) = $7
	$4 = CALL db_find_i64($7, $7, (int_64)-4992616317144530944, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	$3 = CALL $511(($10 + [160]), $4)
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)($10 + [160])), [1536])
	if ( (int_64)(*($3 + [24]) == 0) ){ goto $label$5 }
	$1 = *(($3 + [40]))
	*(($10 + [152])) = $1
	*($10 + [144]) = *($3 + [32])
	CALL eosio_assert(((int_64)$1 == (int_64)*($2 + [8])), [4096])
	$7 = ((int_64)*($10 + [144]) + (int_64)*($2))
	*($10 + [144]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [4176])
	CALL eosio_assert(((int_64)$1 == (int_64)*(($3 + [72]))), [4496])
	$7 = (int_64)
	$2 = ((int_64)$7($7 - *($3 + [64]))) > (int_64)-4611686018427387904
	CALL eosio_assert($2), [4544])
	$4 = ((int_64)$7 < (int_64)4611686018427387904)
	CALL eosio_assert($4, [4576])
	if ( ((int_64)$7 < (int_64)100001) ){ goto $label$9 }
	CALL eosio_assert([1], [3984])
	CALL eosio_assert($2, [4032])
	CALL eosio_assert($4, [4064])
	*($10 + [128]) = ((int_64)((int_64)$7 * (int_64)40) / (int_64)100)
	*($10 + [136]) = $1
	$9 = *($0)
	$7 = (int_64)0
	$6 = (int_64)59
	$2 = [2400]
	$8 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$15 }
	$4 = *($2)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$4 = ($4 + [165])
	goto $label$13 
	
.LABEL $label$15
	$1 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$11
	$2 = ($2 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$1 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$10 }
	*($10 + [80]) = $8
	*($10 + [72]) = $9
	$7 = (int_64)0
	$6 = (int_64)59
	$2 = [1312]
	$8 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$21 }
	$4 = *($2)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$4 = ($4 + [165])
	goto $label$19 
	
.LABEL $label$21
	$1 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$17
	$2 = ($2 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$8 = ((int_64)$1 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$16 }
	$7 = (int_64)0
	$6 = (int_64)59
	$2 = [1296]
	$9 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$27 }
	$4 = *($2)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$4 = ($4 + [165])
	goto $label$25 
	
.LABEL $label$27
	$1 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$23
	$2 = ($2 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$9 = ((int_64)$1 | (int_64)$9)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$22 }
	*(($10 + [16])) = [0]
	*($10 + [8]) = (int_64)0
	$2 = CALL strlen([5744])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$8 }
	*($10 + [8]) = ($2 << [1])
	$4 = (($10 + [8]) | [1])
	if ( $2 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$7 = *($0)
	*($10 + [24]) = ($10 + [144])
	CALL eosio_assert([1], [1696])
	CALL $513(($10 + [160]), $3, $7, ($10 + [24]))
	$4 = *($10 + [184])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$8
	$5 = (($2 + [16]) & [-16])
	$4 = CALL $955($5)
	*($10 + [8]) = ($5 | [1])
	*($10 + [16]) = $4
	*($10 + [12]) = $2
	
.LABEL $label$7
	CALL memcpy($4, [5744], $2)
	
.LABEL $label$6
	*(($4 + $2)) = [0]
	$7 = *(($3 + [24]))
	*(($10 + [44])) = *($10 + [132])
	*($10 + [32]) = $7
	*((($10 + [24]) + [24])) = *((($10 + [128]) + [8]))
	*(($10 + [52])) = *(($10 + [140]))
	*($10 + [24]) = *($0)
	*($10 + [40]) = *($10 + [128])
	$2 = (($10 + [8]) + [8])
	*(($10 + [64])) = *($2)
	*($10 + [56]) = *($10 + [8])
	*($10 + [8]) = [0]
	*($10 + [12]) = [0]
	*($2) = [0]
	$2 = CALL $380(($10 + [88]), ($10 + [72]), $8, $9, ($10 + [24]))
	CALL $381(($10 + [240]), $2)
	$4 = *($10 + [240])
	CALL send_inline($4, (*($10 + [244]) - $4))
	$4 = *($10 + [240])
	if ( ($4 == 0) ){ goto $label$28 }
	*($10 + [244]) = $4
	CALL $956($4)
	
.LABEL $label$28
	$4 = *($2 + [28])
	if ( ($4 == 0) ){ goto $label$29 }
	*(($2 + [32])) = $4
	CALL $956($4)
	
.LABEL $label$29
	$4 = *($2 + [16])
	if ( ($4 == 0) ){ goto $label$30 }
	*(($2 + [20])) = $4
	CALL $956($4)
	
.LABEL $label$30
	if ( ((*(($10 + [56])) & [1]) == 0) ){ goto $label$31 }
	CALL $956(*(($10 + [64])))
	
.LABEL $label$31
	if ( ((*($10 + [8]) & [1]) == 0) ){ goto $label$32 }
	CALL $956(*(($10 + [16])))
	
.LABEL $label$32
	$7 = *($0)
	*($10 + [28]) = ($10 + [128])
	*($10 + [24]) = ($10 + [144])
	CALL eosio_assert([1], [1696])
	CALL $512(($10 + [160]), $3, $7, ($10 + [24]))
	
.LABEL $label$5
	$4 = *($10 + [184])
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$3 = ($10 + [188])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$34 }
	
.LOOP $label$35:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$36 }
	CALL $956($0)
	
.LABEL $label$36
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$35 }
	$2 = *(($10 + [184]))
	goto $label$33 
	
.LABEL $label$34
	$2 = $4
	
.LABEL $label$33
	*($3) = $4
	CALL $956($2)
	
.LABEL $label$3
	$4 = *($10 + [224])
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ($10 + [228])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$38 }
	
.LOOP $label$39:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$40 }
	CALL $956($0)
	
.LABEL $label$40
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$39 }
	$2 = *(($10 + [224]))
	goto $label$37 
	
.LABEL $label$38
	$2 = $4
	
.LABEL $label$37
	*($3) = $4
	CALL $956($2)
	
.LABEL $label$2
	*([0] + [4]) = ($10 + [256])
	return (unreachable)
	
.LABEL $label$1
	CALL $957(($10 + [8]))
}

int_32 .FUNC $511 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $955([96])
	$4 = CALL $515($6)
	*($6 + [80]) = $0
	CALL $516(($8 + [32]), $4)
	*($6 + [84]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [84])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $517(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $516 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $517 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $514 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $515 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	$2 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*(($3 = ($0 + [40]))) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [56]))) = (int_64)1397703940
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [72]))) = (int_64)1397703940
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [3776])
	return $0
}

void .FUNC $921 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL $922($0, $1, $2)
}

void .FUNC $215 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	$11 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	CALL $216($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$3 = [12]
	$5 = ($1 + [12])
	$7 = *($1 + [12])
	$6 = *(($1 + [16]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$8 / (int_32)[12]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	$3 = ((((int_32)((uint_32)($8 + [-12]) / (uint_32)[12]) * (int_32)[10]) + $3) + [10])
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$10 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$10 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$3
	*($11) = $10
	$6 = ($10 + $3)
	*($11 + [8]) = $6
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [1920])
	CALL memcpy($10, $1, [8])
	$7 = ($10 + [8])
	CALL eosio_assert(((int_32)($6 - $7) > (int_32)[3]), [1920])
	CALL memcpy($7, ($1 + [8]), [4])
	*($11 + [4]) = ($10 + [12])
	CALL $217($11, $5)
	CALL db_update_i64(*($1 + [28]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($10)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($11 + [16])
}

int_32 .FUNC $214 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $955([40]))) = (int_64)0
	*($6 + [12 align=4]) = (int_64)0
	*($6 + [20]) = [0]
	*($6 + [24]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [1632])
	CALL memcpy($6, $4, [8])
	$3 = ($4 + [8])
	CALL eosio_assert(((uint_32)($7 - $3) > (uint_32)[3]), [1632])
	CALL memcpy(($6 + [8]), $3, [4])
	*($8 + [36]) = ($4 + [12])
	CALL $219(($8 + [32]), ($6 + [12]))
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $220(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [12])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [16])) = $7
	CALL $956($7)
	
.LABEL $label$10
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $217 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[12]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1920])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[3]), [1920])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, [4])
	$6 = (*($4) + [4])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[1]), [1920])
	CALL memcpy(*($4), ($7 + [4]), [2])
	$6 = (*($4) + [2])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[3]), [1920])
	CALL memcpy(*($4), ($7 + [8]), [4])
	$6 = (*($4) + [4])
	*($4) = $6
	$7 = ($7 + [12])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $216 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = ($1 + [12])
	$6 = *($1 + [8])
	$5 = *(*($0))
	$3 = *($5 + [2])
	if ( ($3 == 0) ){ goto $label$1 }
	*(($4 = ($7 + [8]))) = [0]
	*($7 + [4]) = $3
	$6 = ($6 + [1])
	*($7) = $6
	$5 = ($1 + [16])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)*(($1 + [20]))) ){ goto $label$3 }
	*($3) = *($7)
	*(($3 + [8])) = *($4)
	*($5) = (*($5) + [12])
	goto $label$2 
	
.LABEL $label$3
	CALL $218($2, $7)
	
.LABEL $label$2
	$5 = *(*($0))
	
.LABEL $label$1
	$3 = *($5 + [4])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($4 = ($7 + [8]))) = [0]
	*($7 + [4]) = $3
	$6 = ($6 + [1])
	*($7) = $6
	$5 = ($1 + [16])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)*(($1 + [20]))) ){ goto $label$6 }
	*($3) = *($7)
	*(($3 + [8])) = *($4)
	*($5) = (*($5) + [12])
	goto $label$5 
	
.LABEL $label$6
	CALL $218($2, $7)
	
.LABEL $label$5
	$5 = *(*($0))
	
.LABEL $label$4
	$5 = *($5 + [6])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($4 = ($7 + [8]))) = [0]
	*($7 + [4]) = $5
	$6 = ($6 + [1])
	*($7) = $6
	$5 = ($1 + [16])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)*(($1 + [20]))) ){ goto $label$8 }
	*($3) = *($7)
	*(($3 + [8])) = *($4)
	*($5) = (*($5) + [12])
	goto $label$7 
	
.LABEL $label$8
	CALL $218($2, $7)
	
.LABEL $label$7
	*(($1 + [8])) = $6
	*($1) = *(*($0 + [4]))
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $211 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [12]) = *(*($3))
	$4 = *($1)
	*($1 + [16]) = (CASTING uint_32)(float_64 ((float_64)*(*($3 + [4])) + (float_64)(CASTING float_64)(uint_32 *($1 + [16]))))
	$3 = *(*($3 + [8]))
	if ( ((int_32)*($1 + [20]) >= (int_32)$3) ){ goto $label$1 }
	*(($1 + [20])) = $3
	
.LABEL $label$1
	CALL eosio_assert([1], [1856])
	$6 = $6
	$3 = ($6 + [-32])
	*([0] + [4]) = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($6 + [-11])
	CALL $212($5, $1)
	CALL db_update_i64(*($1 + [28]), $2, $3, [21])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $210 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	*($7 + [72]) = $1
	*($7 + [68]) = $2
	*(($7 + [56])) = [0]
	*($7 + [40]) = (int_64)-1
	*($7 + [48]) = (int_64)0
	$5 = *($0 + [8])
	*($7 + [24]) = $5
	*($7 + [32]) = $5
	$2 = CALL db_find_i64($5, $5, (int_64)-7948101582086733824, $1)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$3 }
	$2 = CALL $214(($7 + [24]), $2)
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)($7 + [24])), [1536])
	$5 = *(($0 + [8]))
	*($7 + [20]) = ($7 + [72])
	*($7 + [16]) = ($7 + [68])
	CALL eosio_assert([1], [1696])
	CALL $215(($7 + [24]), $2, $5, ($7 + [16]))
	$3 = *($7 + [48])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *(($0 + [8]))
	*($7 + [20]) = ($7 + [72])
	*($7 + [16]) = ($7 + [68])
	CALL $213(($7 + [8]), ($7 + [24]), $5, ($7 + [16]))
	$3 = *($7 + [48])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($7 + [52])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	$4 = *($2 + [12])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [16])) = $4
	CALL $956($4)
	
.LABEL $label$8
	CALL $956($2)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($7 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $3
	
.LABEL $label$4
	*($6) = $3
	CALL $956($0)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [80])
}

void .FUNC $213 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([40]))) = (int_64)0
	*($3 + [12 align=4]) = (int_64)0
	*($3 + [20]) = [0]
	*($3 + [24]) = $1
	CALL $222(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $220(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [12])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [16])) = $1
	CALL $956($1)
	
.LABEL $label$4
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $199 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [1920])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1920])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1920])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $196 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1920])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1920])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1920])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $198(CALL $199($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $197 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1920])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [1920])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $198($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $194 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $955($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $956($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $195 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [1920])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [1920])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [1920])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $192 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $956($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $956($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $956($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $956($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $956($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $956($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $956($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $956($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $193 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

void .FUNC $190 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $955([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $194(($8 + [28]), [16])
	$2 = *($8 + [28])
	$1 = (*($2) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [1920])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[3]), [1920])
	CALL memcpy(($2 + [8]), ($4 + [8]), [4])
	CALL eosio_assert(((int_32)($1 + [-12]) > (int_32)[3]), [1920])
	CALL memcpy(($2 + [12]), ($4 + [12]), [4])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($4 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$1 = ([0] - $4)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $956($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $956($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $956($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $191 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $193($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $194($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $195($4, $1)
	CALL $197(CALL $196(CALL $196($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $776 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1648])
	$5 = *($3)
	$8 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($8 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$7 = *($1 + [4])
	$5 = int_32(($7 - $3) >> [6])
	$8 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$8 <= (uint_32)$5) ){ goto $label$3 }
	CALL $777($1, ($8 - $5))
	$7 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$8 >= (uint_32)$5) ){ goto $label$2 }
	$8 = ($8 << [6])
	$2 = ($3 + $8)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$3 = (([0] - $3) - $8)
	$8 = ($7 + [-12])
	
.LOOP $label$5:
	$5 = *($8)
	if ( ($5 == 0) ){ goto $label$6 }
	*(($8 + [4])) = $5
	CALL $956($5)
	
.LABEL $label$6
	$8 = ($8 + [-64])
	if ( ((int_32)($8 + $3) != (int_32)[-12]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$7 = $2
	
.LABEL $label$2
	$8 = *($1)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$7 }
	$3 = ($9 + [28])
	$2 = ($9 + [36])
	$1 = ($9 + [40])
	$4 = ($9 + [44])
	
.LOOP $label$8:
	*($9 + [8]) = $0
	*($9 + [16]) = $8
	*((($9 + [16]) + [8])) = ($8 + [4])
	*($3) = ($8 + [6])
	*((($9 + [16]) + [16])) = ($8 + [7])
	*($2) = ($8 + [8])
	*($1) = ($8 + [16])
	*($9 + [20]) = ($8 + [2])
	*($4) = ($8 + [32])
	CALL $778(($9 + [16]), ($9 + [8]))
	$5 = ($0 + [4])
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - *($5)) > (uint_32)[1]), [1632])
	CALL memcpy(($8 + [48]), *($5), [2])
	*($5) = (*($5) + [2])
	CALL $779($0, ($8 + [52]))
	$8 = ($8 + [64])
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [48])
	return $0
}

void .FUNC $777 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)int_32(($8 - $2) >> [6]) >= (uint_32)$1) ){ goto $label$6 }
	$7 = *($0)
	$6 = int_32(($2 - $7) >> [6])
	$5 = ($6 + $1)
	if ( ((uint_32)$5 >= (uint_32)[67108864]) ){ goto $label$4 }
	$2 = [67108863]
	$8 = ($8 - $7)
	if ( ((uint_32)int_32($8 >> [6]) > (uint_32)[33554430]) ){ goto $label$7 }
	$2 = int_32($8 >> [5])
	$2 = ( $5 ? $2 : ($2 <= $5) )
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((uint_32)$2 >= (uint_32)[67108864]) ){ goto $label$3 }
	
.LABEL $label$7
	$8 = CALL $955(($2 << [6]))
	goto $label$2 
	
.LABEL $label$6
	$8 = ($0 + [4])
	
.LOOP $label$8:
	$2 = CALL memset($2, [0], [64])
	CALL $781($2)
	*($2 + [48]) = [0]
	*($2 + [52 align=4]) = (int_64)0
	*(($2 + [60])) = [0]
	$2 = (*($8) + [64])
	*($8) = $2
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$2 = [0]
	$8 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $971($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$3 = ($8 + ($2 << [6]))
	$8 = ($8 + ($6 << [6]))
	$7 = $8
	
.LOOP $label$9:
	$2 = CALL memset($7, [0], [64])
	CALL $781($2)
	*($2 + [48]) = [0]
	*($2 + [52 align=4]) = (int_64)0
	*(($2 + [60])) = [0]
	$7 = ($2 + [64])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$11 }
	$4 = ([0] - $2)
	$2 = ($1 + [-64])
	
.LOOP $label$12:
	CALL memcpy(($8 + [-64]), $2, [50])
	*(($1 = ($8 + [-12]))) = (int_64)0
	*(($5 = ($8 + [-4]))) = [0]
	$6 = ($2 + [52])
	*($1) = *($6)
	*(($8 + [-8])) = *(($2 + [56]))
	$1 = ($2 + [60])
	*($5) = *($1)
	*($1) = [0]
	*($6) = (int_64)0
	$8 = ($8 + [-64])
	$2 = ($2 + [-64])
	if ( ((int_32)($2 + $4) != (int_32)[-64]) ){ goto $label$12 }
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$5 = $2
	
.LABEL $label$10
	*($0) = $8
	*(($0 + [4])) = $7
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$13 }
	$8 = ([0] - $5)
	$2 = ($2 + [-12])
	
.LOOP $label$14:
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$15 }
	*(($2 + [4])) = $1
	CALL $956($1)
	
.LABEL $label$15
	$2 = ($2 + [-64])
	if ( ((int_32)($2 + $8) != (int_32)[-12]) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $956($5)
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $774 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $776($0, ($1 + [20]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [12]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $775 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($8 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($5 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL $955(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*(($1 = ($5 + ((int_32)$8 * (int_32)[24])))) = $7
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$7 = ($5 + ((int_32)$6 * (int_32)[24]))
	$4 = ($1 + [24])
	$2 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($6 + [-24])
	$3 = *($5)
	*($5) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$8 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$8 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $4
	*(($0 + [8])) = $7
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	$0 = *($3 + [20])
	if ( ($0 == 0) ){ goto $label$11 }
	$7 = ($3 + [24])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$13 }
	$5 = ([0] - $0)
	$1 = ($1 + [-12])
	
.LOOP $label$14:
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$15 }
	*(($1 + [4])) = $6
	CALL $956($6)
	
.LABEL $label$15
	$1 = ($1 + [-64])
	if ( ((int_32)($1 + $5) != (int_32)[-12]) ){ goto $label$14 }
	$1 = *(($3 + [20]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $0
	
.LABEL $label$12
	*($7) = $0
	CALL $956($1)
	
.LABEL $label$11
	CALL $956($3)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($8 == 0) ){ goto $label$16 }
	CALL $956($8)
	
.LABEL $label$16
	(unreachable)
}

void .FUNC $772 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [1920])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [1920])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [1920])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [1920])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), $2, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $773 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [1920])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1920])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [1920])
	CALL memcpy(*($3), ($6 + [8]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	*($7 + [14]) = *(($6 + [9]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [1920])
	CALL memcpy(*($3), ($7 + [14]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $770 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $771($0, ($1 + [20]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [12]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $771 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$7 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [6]))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$8 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($9 + [16]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1920])
	CALL memcpy(*($8), ($9 + [16]), [1])
	$6 = (*($8) + [1])
	*($8) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$8 = *($1)
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$2 }
	$3 = ($9 + [28])
	$4 = ($9 + [36])
	$1 = ($9 + [40])
	$5 = ($9 + [44])
	
.LOOP $label$3:
	*($9 + [8]) = $0
	*($9 + [16]) = $8
	*((($9 + [16]) + [8])) = ($8 + [4])
	*($3) = ($8 + [6])
	*((($9 + [16]) + [16])) = ($8 + [7])
	*($4) = ($8 + [8])
	*($1) = ($8 + [16])
	*($9 + [20]) = ($8 + [2])
	*($5) = ($8 + [32])
	CALL $772(($9 + [16]), ($9 + [8]))
	$6 = ($0 + [4])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - *($6)) > (int_32)[1]), [1920])
	CALL memcpy(*($6), ($8 + [48]), [2])
	*($6) = (*($6) + [2])
	CALL $773($0, ($8 + [52]))
	$8 = ($8 + [64])
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [48])
	return $0
}

void .FUNC $523 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [192])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [184]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	$5 = *($3)
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)*(($1 + [24]))), [4496])
	$6 = (int_64)
	*($1 + [16]) = $6(*($1 + [16]) - *($5)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [4544])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [4576])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [56]))), [4096])
	$6 = ((int_64)*($1 + [48]) + (int_64)*($3))
	*($1 + [48]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [4176])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	*($7 + [184]) = ($7 + [169])
	*($7 + [180]) = $7
	*($7 + [176]) = $7
	CALL $463(($7 + [176]), $1)
	CALL db_update_i64(*($1 + [188]), $2, $7, [169])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [192])
}

void .FUNC $778 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [1632])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($2, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [1632])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $779 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1648])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $780($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$3 = *($4)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [1632])
	CALL memcpy($7, *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((int_32)*($6) != (int_32)$3), [1632])
	CALL memcpy(($7 + [8]), *($4), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	CALL eosio_assert(((int_32)*($6) != (int_32)$3), [1632])
	CALL memcpy(($8 + [15]), *($4), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	*(($7 + [9])) = ((int_32)*($8 + [15]) != (int_32)[0])
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $174 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [9]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [10]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [11]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [12]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [14]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [15]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [18]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [20]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [22]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [24]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [26]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [28]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [30]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [31]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [32]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [33]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [34]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [35]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [36]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [37]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [38]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [39]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [44]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [45]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [46]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [47]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [48]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $175 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [10]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [12]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [14]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [18]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [20]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	return $0
}

void .FUNC $177 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $170 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [10]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [12]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [14]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [18]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [20]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [22]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [24]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [26]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [28]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [30]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [32]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [34]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [36]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	return $0
}

void .FUNC $171 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $172 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [10]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [12]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [20]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [28]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [36]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $173 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $955 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [18716])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $178 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $955([40]))) = (int_64)0
	*($6 + [12 align=4]) = (int_64)0
	*($6 + [20]) = [0]
	*($6 + [24]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [1632])
	CALL memcpy($6, $4, [8])
	$3 = ($4 + [8])
	CALL eosio_assert(((uint_32)($7 - $3) > (uint_32)[3]), [1632])
	CALL memcpy(($6 + [8]), $3, [4])
	*($8 + [36]) = ($4 + [12])
	CALL $182(($8 + [32]), ($6 + [12]))
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $183(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [12])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [16])) = $7
	CALL $956($7)
	
.LABEL $label$10
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $179 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	$12 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$5 = ($1 + [12])
	$4 = *($1)
	$10 = *($1 + [12])
	$8 = ($1 + [16])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$1 }
	$7 = ((int_32)($9 - $10) / (int_32)[20])
	$6 = *(*($3))
	$9 = [0]
	
.LOOP $label$3:
	if ( ((int_32)*($10) == (int_32)$6) ){ goto $label$2 }
	$10 = ($10 + [20])
	$9 = ($9 + [1])
	if ( ($9 <= $7) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*(($10 + [6])) = *(*($3 + [4]))
	*(*($3 + [8])) = [1]
	
.LABEL $label$1
	CALL eosio_assert([1], [1856])
	$6 = *($5)
	$9 = *($8)
	$7 = ($9 - $6)
	$11 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[20]))
	$10 = [29]
	
.LOOP $label$4:
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$6 }
	$9 = (((int_32)((uint_32)($7 + [-20]) / (uint_32)[20]) * (int_32)[17]) + $10)
	goto $label$5 
	
.LABEL $label$6
	$9 = ($10 + [-17])
	
.LABEL $label$5
	if ( ($9 <= [513]) ){ goto $label$8 }
	$10 = CALL malloc($9)
	goto $label$7 
	
.LABEL $label$8
	$10 = ($13 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$7
	*($12) = $10
	$6 = ($10 + $9)
	*($12 + [8]) = $6
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [1920])
	CALL memcpy($10, $1, [8])
	$7 = ($10 + [8])
	CALL eosio_assert(((int_32)($6 - $7) > (int_32)[3]), [1920])
	CALL memcpy($7, ($1 + [8]), [4])
	*($12 + [4]) = ($10 + [12])
	CALL $180($12, $5)
	CALL db_update_i64(*($1 + [28]), $2, $10, $9)
	if ( ($9 <= [513]) ){ goto $label$9 }
	CALL free($10)
	
.LABEL $label$9
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $589 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([32]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16]) = [0]
	*($3 + [20]) = $1
	CALL $596(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [24])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $438(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [12])) = $1
	CALL $956($1)
	
.LABEL $label$4
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $588 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([48])) + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = $1
	CALL $597(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [36])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $598(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $585 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [176])
	*([0] + [4]) = $6
	*($6 + [174]) = $1
	*($6 + [168]) = $2
	CALL require_auth(*($0))
	$2 = (((int_32)$1 * (int_32)[10000]) | [1])
	*($6 + [164]) = $2
	*(($6 + [152])) = [0]
	*($6 + [136]) = (int_64)-1
	*($6 + [144]) = (int_64)0
	$4 = *($0)
	*($6 + [120]) = $4
	*($6 + [128]) = $4
	$1 = CALL db_find_i64($4, $4, (int_64)-4315232062152900608, (CASTING uint_64)(uint_32 $1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$1 = CALL $586(($6 + [120]), $1)
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)($6 + [120])), [1536])
	*($6 + [164]) = ($2 + *($1 + [8]))
	$4 = *($0)
	*($6 + [80]) = ($6 + [168])
	CALL eosio_assert([1], [1696])
	CALL $587(($6 + [120]), $1, $4, ($6 + [80]))
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	*($6 + [84]) = ($6 + [168])
	*($6 + [80]) = ($6 + [174])
	CALL $588(($6 + [40]), ($6 + [120]), $4, ($6 + [80]))
	
.LABEL $label$1
	*(($6 + [112])) = [0]
	*($6 + [96]) = (int_64)-1
	*($6 + [104]) = (int_64)0
	$4 = *($0)
	*($6 + [80]) = $4
	*($6 + [88]) = $4
	$1 = CALL db_find_i64($4, $4, (int_64)-4315240091392933888, $4)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$4 }
	$1 = CALL $423(($6 + [80]), $1)
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)($6 + [80])), [1536])
	$4 = *($0)
	*($6 + [44]) = ($6 + [164])
	*($6 + [40]) = ($6 + [168])
	*($6 + [48]) = ($6 + [174])
	CALL eosio_assert([1], [1696])
	CALL $590(($6 + [80]), $1, $4, ($6 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$4 = *($0)
	*($6 + [52]) = $0
	*($6 + [44]) = ($6 + [164])
	*($6 + [40]) = ($6 + [168])
	*($6 + [48]) = ($6 + [174])
	CALL $589(($6 + [16]), ($6 + [80]), $4, ($6 + [40]))
	
.LABEL $label$3
	*(($6 + [72])) = [0]
	$4 = *($0)
	*($6 + [40]) = $4
	*($6 + [56]) = (int_64)-1
	*($6 + [64]) = (int_64)0
	*($6 + [48]) = $4
	$1 = CALL db_find_i64($4, $4, (int_64)-4315237476541136896, *($6 + [174]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$7 }
	$1 = CALL $422(($6 + [40]), $1)
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)($6 + [40])), [1536])
	$4 = *($0)
	*($6 + [28]) = $0
	*($6 + [32]) = $3
	*($6 + [20]) = ($6 + [164])
	*($6 + [16]) = ($6 + [168])
	*($6 + [24]) = ($6 + [174])
	CALL eosio_assert([1], [1696])
	CALL $592(($6 + [40]), $1, $4, ($6 + [16]))
	$3 = *($6 + [64])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$4 = *($0)
	*($6 + [28]) = $0
	*($6 + [32]) = $3
	*($6 + [20]) = ($6 + [168])
	*($6 + [16]) = ($6 + [174])
	*($6 + [24]) = ($6 + [164])
	CALL $591(($6 + [8]), ($6 + [40]), $4, ($6 + [16]))
	$3 = *($6 + [64])
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$5 = ($6 + [68])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = *($1 + [16])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($1 + [20])) = $2
	CALL $956($2)
	
.LABEL $label$12
	CALL $956($1)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($6 + [64]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $3
	
.LABEL $label$8
	*($5) = $3
	CALL $956($0)
	
.LABEL $label$5
	$3 = *($6 + [104])
	if ( ($3 == 0) ){ goto $label$13 }
	$5 = ($6 + [108])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$17 }
	$2 = *($1 + [8])
	if ( ($2 == 0) ){ goto $label$18 }
	*(($1 + [12])) = $2
	CALL $956($2)
	
.LABEL $label$18
	CALL $956($1)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$16 }
	$0 = *(($6 + [104]))
	goto $label$14 
	
.LABEL $label$15
	$0 = $3
	
.LABEL $label$14
	*($5) = $3
	CALL $956($0)
	
.LABEL $label$13
	$2 = *($6 + [144])
	if ( ($2 == 0) ){ goto $label$19 }
	$3 = ($6 + [148])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$21 }
	
.LOOP $label$22:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$23 }
	CALL $956($1)
	
.LABEL $label$23
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$22 }
	$0 = *(($6 + [144]))
	goto $label$20 
	
.LABEL $label$21
	$0 = $2
	
.LABEL $label$20
	*($3) = $2
	CALL $956($0)
	
.LABEL $label$19
	*([0] + [4]) = ($6 + [176])
}

void .FUNC $584 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($0 + [4]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [1632])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $587 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [8]) = (*($1 + [8]) + *(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	CALL eosio_assert([1], [1920])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($5 | [8]), ($1 + [8]), [2])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($5 | [10]), ($1 + [16]), [8])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($5 + [18]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $5, [26])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $586 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $955([48])) + [8]) = [0]
	*($6) = (int_64)0
	*($6 + [16]) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = $0
	CALL $599(($8 + [32]), $6)
	*($6 + [36]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [36])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $598(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $581 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$4 = (*([0] + [4]) - [48])
	$10 = $4
	*([0] + [4]) = $4
	$2 = *($0)
	CALL $582(*($0 + [4]), $1)
	$3 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $3)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[40]))
	$9 = [54]
	
.LOOP $label$1:
	$9 = ($9 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$3 }
	$6 = (((int_32)((uint_32)($7 + [-40]) / (uint_32)[40]) * (int_32)[38]) + $9)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($9 + [-38])
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL malloc($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($4 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$4
	*($10) = $7
	$3 = ($7 + $6)
	*($10 + [8]) = $3
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [1920])
	CALL memcpy($7, $1, [8])
	$9 = ($7 + [8])
	CALL eosio_assert(((int_32)($3 - $9) > (int_32)[7]), [1920])
	CALL memcpy($9, ($1 + [8]), [8])
	$9 = ($7 + [16])
	*($10 + [4]) = $9
	$8 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [20])) - *(($1 + [16]))) / (int_32)[40]))
	
.LOOP $label$6:
	$4 = (CASTING uint_32)(uint_64 $8)
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	$5 = ((int_64)$8) != (int_64)0
	*($10 + [24]) = (($5) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)($3 - $9) > (int_32)[0]), [1920])
	CALL memcpy($9, ($10 + [24]), [1])
	$9 = ($9 + [1])
	*($10 + [4]) = $9
	if ( $5 ){ goto $label$6 }
	$4 = *(($1 + [20]))
	$9 = *(($1 + [16]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$7 }
	
.LOOP $label$8:
	*($10 + [16]) = $10
	*($10 + [24]) = $9
	*((($10 + [24]) + [8])) = ($9 + [12])
	*((($10 + [24]) + [12])) = ($9 + [16])
	*((($10 + [24]) + [16])) = ($9 + [24])
	*($10 + [28]) = ($9 + [8])
	CALL $430(($10 + [24]), ($10 + [16]))
	$9 = ($9 + [40])
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	$8 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($2 + [8]), (int_64)-4315237476541136896, *(*($0 + [8])), $8, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$9 }
	CALL free($7)
	
.LABEL $label$9
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$10 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $580 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([40])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24]) = [0]
	*($3 + [28]) = $1
	CALL $581(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [32])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $443(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [16])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [20])) = $1
	CALL $956($1)
	
.LABEL $label$4
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $583 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$2 = ((int_32)($5 - $4) / (int_32)[40])
	$7 = ($2 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[40])
	if ( ((uint_32)$3 > (uint_32)[53687090]) ){ goto $label$4 }
	$6 = ($3 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $955(((int_32)$6 * (int_32)[40]))
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = ($5 - $4)
	$2 = CALL memcpy(($7 + ((int_32)$2 * (int_32)[40])), $1, [40])
	$1 = ($2 + ((int_32)((int_32)$5 / (int_32)[-40]) * (int_32)[40]))
	$6 = ($7 + ((int_32)$6 * (int_32)[40]))
	$7 = ($2 + [40])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $4, $5)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $956($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $582 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	*(($5 + [40])) = (int_64)1397703940
	$3 = [0]
	*($5 + [16]) = [0]
	*($5 + [8]) = (int_64)0
	*($5 + [20]) = [0]
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$2 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [3776])
	$2 = ((int_64)*($1 + [8]) + (int_64)1)
	*($1 + [8]) = $2
	*((($5 + [8]) + [8])) = *(*($0))
	*($5 + [8]) = $2
	$3 = *($0 + [4])
	*(($5 + [20])) = *($3)
	*((($5 + [8]) + [16])) = *(*($0 + [8]))
	$4 = *($0 + [12])
	*(($5 + [40])) = *(($4 + [8]))
	*($5 + [32]) = *($4)
	*($1) = *($3)
	$3 = ($1 + [20])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)*(($1 + [24]))) ){ goto $label$7 }
	CALL memcpy($4, ($5 + [8]), [40])
	*($3) = (*($3) + [40])
	goto $label$6 
	
.LABEL $label$7
	CALL $583(($1 + [16]), ($5 + [8]))
	
.LABEL $label$6
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC $629 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1648])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [3])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $630($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [3]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$3 = *($4)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[1]), [1632])
	CALL memcpy($7, *($4), [2])
	$3 = (*($4) + [2])
	*($4) = $3
	CALL eosio_assert(((int_32)*($6) != (int_32)$3), [1632])
	CALL memcpy(($7 + [2]), *($4), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[3]), [1632])
	CALL memcpy(($7 + [4]), *($4), [4])
	$3 = (*($4) + [4])
	*($4) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $116 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [5968]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1024]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)2) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [5984]
	$7 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$19 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$14 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [6000]
	$7 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$25 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$3 = ($3 + [165])
	goto $label$23 
	
.LABEL $label$25
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$21
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$20 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [6016]
	$7 = (int_64)0
	
.LOOP $label$26:
	if ( ((uint_64)$6 > (uint_64)(int_64)8) ){ goto $label$31 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$3 = ($3 + [165])
	goto $label$29 
	
.LABEL $label$31
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$28
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$27
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$26 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [6032]
	$7 = (int_64)0
	
.LOOP $label$32:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$37 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$3 = ($3 + [165])
	goto $label$35 
	
.LABEL $label$37
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$34
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$33
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$32 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [5952]
	$7 = (int_64)0
	
.LOOP $label$38:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$43 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$42 }
	$3 = ($3 + [165])
	goto $label$41 
	
.LABEL $label$43
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$42
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$41
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$40
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$39
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$38 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1072]
	$7 = (int_64)0
	
.LOOP $label$44:
	if ( ((uint_64)$6 > (uint_64)(int_64)3) ){ goto $label$49 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$48 }
	$3 = ($3 + [165])
	goto $label$47 
	
.LABEL $label$49
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$48
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$47
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$46
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$45
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$44 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [6048]
	$7 = (int_64)0
	
.LOOP $label$50:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$55 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$3 = ($3 + [165])
	goto $label$53 
	
.LABEL $label$55
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$54
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$52
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$51
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$50 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [6064]
	$7 = (int_64)0
	
.LOOP $label$56:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$61 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$60 }
	$3 = ($3 + [165])
	goto $label$59 
	
.LABEL $label$61
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$60
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$59
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$58
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$57
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$56 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [6080]
	$7 = (int_64)0
	
.LOOP $label$62:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$67 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$66 }
	$3 = ($3 + [165])
	goto $label$65 
	
.LABEL $label$67
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$66
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$65
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$64
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$63
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$62 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [6096]
	$7 = (int_64)0
	
.LOOP $label$68:
	if ( ((uint_64)$6 > (uint_64)(int_64)2) ){ goto $label$73 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$72 }
	$3 = ($3 + [165])
	goto $label$71 
	
.LABEL $label$73
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$72
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$71
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$70
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$69
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$68 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [6112]
	$7 = (int_64)0
	
.LOOP $label$74:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$79 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$78 }
	$3 = ($3 + [165])
	goto $label$77 
	
.LABEL $label$79
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$78
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$77
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$76
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$75
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$74 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [6128]
	$7 = (int_64)0
	
.LOOP $label$80:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$85 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$84 }
	$3 = ($3 + [165])
	goto $label$83 
	
.LABEL $label$85
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$84
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$83
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$82
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$81
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$80 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [6144]
	$7 = (int_64)0
	
.LOOP $label$86:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$91 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$90 }
	$3 = ($3 + [165])
	goto $label$89 
	
.LABEL $label$91
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$88 }
	goto $label$87 
	
.LABEL $label$90
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$89
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$88
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$87
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$86 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [6160]
	$7 = (int_64)0
	
.LOOP $label$92:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$97 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$96 }
	$3 = ($3 + [165])
	goto $label$95 
	
.LABEL $label$97
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$94 }
	goto $label$93 
	
.LABEL $label$96
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$95
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$94
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$93
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$92 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [6176]
	$7 = (int_64)0
	
.LOOP $label$98:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$103 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$102 }
	$3 = ($3 + [165])
	goto $label$101 
	
.LABEL $label$103
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$100 }
	goto $label$99 
	
.LABEL $label$102
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$101
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$100
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$99
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$98 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [6192]
	$7 = (int_64)0
	
.LOOP $label$104:
	if ( ((uint_64)$6 > (uint_64)(int_64)3) ){ goto $label$109 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$108 }
	$3 = ($3 + [165])
	goto $label$107 
	
.LABEL $label$109
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$106 }
	goto $label$105 
	
.LABEL $label$108
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$107
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$106
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$105
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$104 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [6208]
	$7 = (int_64)0
	
.LOOP $label$110:
	if ( ((uint_64)$6 > (uint_64)(int_64)8) ){ goto $label$115 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$114 }
	$3 = ($3 + [165])
	goto $label$113 
	
.LABEL $label$115
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$112 }
	goto $label$111 
	
.LABEL $label$114
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$113
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$112
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$111
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$110 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$7 }
	CALL eosio_assert([0], [6224])
	
.LABEL $label$7
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$4 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1632])
	CALL memcpy($6, $4, [8])
	CALL eosio_assert(((int_32)($1 & [-2]) != (int_32)[8]), [1632])
	$7 = ($6 + [8])
	CALL memcpy($7, ($4 + [8]), [2])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($4)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($7)
	$3 = *($6)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 ($4 & [65535])), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC strcmp (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)($3 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)($3 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($2 - ($3 & [255]))
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($3 = $4) + [44]) = $0
	*($3 + [32]) = *($1)
	*($3 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [16])) = (int_64)0
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = [0]
	*($3 + [48]) = $1
	$4 = ($1 + $0)
	*($3 + [56]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [1632])
	CALL memcpy($3, $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($3 + [8]), $2, [4])
	*($3 + [52]) = ($1 + [12])
	$4 = ($3 + [12])
	CALL $633(($3 + [48]), $4)
	CALL eosio_assert(((uint_32)(*($3 + [56]) - *($3 + [52])) > (uint_32)[3]), [1632])
	CALL memcpy(($3 + [24]), *($3 + [52]), [4])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $755(($3 + [48]), $3)
	$1 = *($4)
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [16])) = $1
	CALL $956($1)
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [64])
	return [1]
}

void .FUNC $59 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	*([0] + [4]) = $7
	CALL $446(($0 + [8]), $1, $4, $5)
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $704($7, $0, $2)
	$5 = *($7 + [96])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($7 + [100])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$4 }
	$4 = ([0] - $5)
	$2 = ($2 + [-24])
	
.LOOP $label$6:
	if ( ((*(($2 + [12])) & [1]) == 0) ){ goto $label$7 }
	CALL $956(*(($2 + [20])))
	
.LABEL $label$7
	if ( ((*($2) & [1]) == 0) ){ goto $label$8 }
	CALL $956(*(($2 + [8])))
	
.LABEL $label$8
	$2 = ($2 + [-24])
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$6 }
	$2 = *(($7 + [96]))
	goto $label$3 
	
.LABEL $label$5
	$2 = ($0 + [272])
	goto $label$1 
	
.LABEL $label$4
	$2 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL $956($2)
	
.LABEL $label$2
	$2 = ($0 + [1152])
	
.LABEL $label$1
	CALL void $2((int_32 $1), (int_64 $3), (int_32 *(*($2))))
	*([0] + [4]) = ($7 + [112])
}

int_32 .FUNC $983 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$39 = (*([0] + [4]) - [8128])
	*([0] + [4]) = $39
	$12 = (($39 + [692]) + [11])
	$11 = (($39 + [704]) | [8])
	$10 = (($39 + [704]) | [9])
	$9 = ($39 + [7664])
	$8 = ([-2] - ($39 + [704]))
	$7 = (($39 + [692]) + [12])
	$6 = (($39 + [352]) + [54])
	$5 = (($39 + [352]) + [55])
	$30 = [0]
	$38 = [0]
	$32 = [0]
	
.LOOP $label$17:
	$38 = ($30 + $38)
	$37 = $1
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$16 }
	$1 = $37
	$30 = ($30 & [255])
	if ( ($30 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	if ( ((int_32)$30 == (int_32)[37]) ){ goto $label$19 }
	$1 = ($1 + [1])
	$30 = (*($1) & [255])
	if ( $30 ){ goto $label$21 }
	
.LABEL $label$20
	$30 = $1
	goto $label$18 
	
.LABEL $label$19
	$30 = $1
	
.LOOP $label$22:
	if ( ((int_32)*(($1 + [1])) != (int_32)[37]) ){ goto $label$18 }
	$30 = ($30 + [1])
	$1 = ($1 + [2])
	if ( ((int_32)*($1) == (int_32)[37]) ){ goto $label$22 }
	
.LABEL $label$18
	$13 = ([2147483647] - $38)
	$30 = ($30 - $37)
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	if ( ($0 == 0) ){ goto $label$23 }
	if ( (*($0) & [32]) ){ goto $label$23 }
	CALL __fwritex($37, $30, $0)
	
.LABEL $label$23
	if ( $30 ){ goto $label$24 }
	$36 = ($1 + [1])
	$27 = [-1]
	$30 = *($1 + [1])
	$17 = ($30 + [-48])
	if ( ((uint_32)$17 > (uint_32)[9]) ){ goto $label$25 }
	$1 = ((int_32)*($1 + [2]) == (int_32)[36])
	$36 = ( ($1 + [3]) ? $36 : $1 )
	$30 = *($36)
	$27 = ( $17 ? [-1] : $1 )
	$32 = ( [1] ? $32 : $1 )
	
.LABEL $label$25
	$14 = [0]
	$1 = (int_32(($30 << [24]) >> [24]) + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$26 }
	$14 = [0]
	
.LOOP $label$27:
	if ( ((([1] << $1) & [75913]) == 0) ){ goto $label$26 }
	$14 = (([1] << (int_32(($30 << [24]) >> [24]) + [-32])) | $14)
	$36 = ($36 + [1])
	$30 = *($36)
	$1 = ($30 + [-32])
	if ( ($1 <= [32]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)($30 & [255]) != (int_32)[42]) ){ goto $label$33 }
	$1 = (*($36 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$32 }
	if ( ((int_32)*($36 + [2]) != (int_32)[36]) ){ goto $label$32 }
	*(($4 + ($1 << [2]))) = [10]
	$17 = ($36 + [3])
	$32 = [1]
	$15 = *((($3 + (*(($36 + [1])) << [4])) + [-768]))
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	goto $label$31 
	
.LABEL $label$33
	$15 = [0]
	$30 = (int_32(($30 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$30 > (uint_32)[9]) ){ goto $label$30 }
	$1 = [0]
	$17 = $36
	
.LOOP $label$34:
	$15 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$35 }
	$1 = ((int_32)$1 * (int_32)[10])
	$15 = ( [-1] ? ($1 + $30) : ((int_32)$30 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$35
	$1 = $15
	$17 = ($17 + [1])
	$30 = (*($17) + [-48])
	if ( ($30 <= [10]) ){ goto $label$34 }
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$28 }
	goto $label$15 
	
.LABEL $label$32
	if ( $32 ){ goto $label$3 }
	$17 = ($36 + [1])
	if ( ($0 == 0) ){ goto $label$29 }
	$1 = *($2)
	*($2) = ($1 + [4])
	$32 = [0]
	$15 = *($1)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	
.LABEL $label$31
	$15 = ([0] - $15)
	$14 = ($14 | [8192])
	goto $label$28 
	
.LABEL $label$30
	$17 = $36
	goto $label$28 
	
.LABEL $label$29
	$32 = [0]
	$15 = [0]
	
.LABEL $label$28
	$30 = [0]
	$36 = [-1]
	if ( ((int_32)*($17) != (int_32)[46]) ){ goto $label$42 }
	$36 = *($17 + [1])
	if ( ((int_32)$36 != (int_32)[42]) ){ goto $label$41 }
	$1 = (*($17 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$40 }
	if ( ((int_32)*($17 + [3]) != (int_32)[36]) ){ goto $label$40 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($17 + [4])
	$36 = *((($3 + (*(($17 + [2])) << [4])) + [-768]))
	goto $label$37 
	
.LABEL $label$42
	$1 = $17
	$16 = [0]
	goto $label$36 
	
.LABEL $label$41
	$1 = ($17 + [1])
	$31 = ($36 + [-48])
	if ( ((uint_32)$31 > (uint_32)[9]) ){ goto $label$39 }
	$17 = [0]
	
.LOOP $label$43:
	$36 = [-1]
	if ( ((uint_32)$17 > (uint_32)[214748364]) ){ goto $label$44 }
	$17 = ((int_32)$17 * (int_32)[10])
	$36 = ( [-1] ? ($17 + $31) : ((int_32)$31 > (int_32)([2147483647] - $17)) )
	
.LABEL $label$44
	$16 = [1]
	$17 = $36
	$1 = ($1 + [1])
	$31 = (*($1) + [-48])
	if ( ($31 <= [10]) ){ goto $label$43 }
	goto $label$36 
	
.LABEL $label$40
	if ( $32 ){ goto $label$3 }
	$1 = ($17 + [2])
	if ( ($0 == 0) ){ goto $label$38 }
	$17 = *($2)
	*($2) = ($17 + [4])
	$36 = *($17)
	goto $label$37 
	
.LABEL $label$39
	$16 = [1]
	$36 = [0]
	goto $label$36 
	
.LABEL $label$38
	$36 = [0]
	
.LABEL $label$37
	$16 = ((int_32)uint_32($36 >> [31]) ^ (int_32)[1])
	
.LABEL $label$36
	
.LOOP $label$45:
	$17 = $30
	$30 = (*($1) + [-65])
	if ( ((uint_32)$30 > (uint_32)[57]) ){ goto $label$3 }
	$1 = ($1 + [1])
	$30 = *(((((int_32)$17 * (int_32)[58]) + $30) + [18816]))
	if ( (($30 + [-1]) <= [8]) ){ goto $label$45 }
	if ( ($30 == 0) ){ goto $label$3 }
	if ( ((int_32)$30 != (int_32)[27]) ){ goto $label$49 }
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$48 }
	goto $label$3 
	
.LABEL $label$49
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$47 }
	*(($4 + ($27 << [2]))) = $30
	$30 = ($3 + ($27 << [4]))
	*($39 + [428]) = *(($30 + [12]))
	*($39 + [424]) = *(($30 + [8]))
	*($39 + [420]) = *(($30 + [4]))
	*($39 + [416]) = *($30)
	
.LABEL $label$48
	if ( $0 ){ goto $label$46 }
	$30 = [0]
	goto $label$24 
	
.LABEL $label$47
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $987(($39 + [416]), $30, $2)
	
.LABEL $label$46
	$31 = ($14 & [-65537])
	$18 = ( $31 ? $14 : ($14 & [8192]) )
	$26 = [0]
	$24 = [19296]
	$30 = *(($1 + [-1]))
	$29 = ( ( ($30 & [-33]) ? $30 : ((int_32)($30 & [15]) == (int_32)[3]) ) ? $30 : $17 )
	$30 = ($29 + [-65])
	if ( ((uint_32)$30 > (uint_32)[55]) ){ goto $label$80 }
	$14 = $5
	goto $label$111 
	
.LABEL $label$111
	if ( ((int_32)$36 > (int_32)[-1]) ){ goto $label$112 }
	if ( $16 ){ goto $label$15 }
	
.LABEL $label$112
	$35 = *($39 + [424])
	$23 = *($39 + [416])
	*($39 + [748]) = [0]
	if ( (CALL __signbitl($23, $35) == 0) ){ goto $label$113 }
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	$20 = [1]
	$19 = [19328]
	goto $label$108 
	
.LABEL $label$113
	if ( ($18 & [2048]) ){ goto $label$109 }
	$20 = ($18 & [1])
	$19 = ( [19334] ? [19329] : $20 )
	goto $label$108 
	
.LABEL $label$110
	$35 = *($39 + [416])
	if ( ((int_64)$35 <= (int_64)-1) ){ goto $label$92 }
	if ( ($18 & [2048]) ){ goto $label$88 }
	$26 = ($18 & [1])
	$24 = ( [19298] ? [19296] : $26 )
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$109
	$20 = [1]
	$19 = [19331]
	
.LABEL $label$108
	if ( ((int_32)CALL __fpclassifyl($23, $35) <= (int_32)[1]) ){ goto $label$115 }
	CALL frexpl(($39 + [320]), $23, $35, ($39 + [748]))
	$23 = *($39 + [328])
	$35 = *($39 + [320])
	CALL __addtf3(($39 + [304]), $35, $23, $35, $23)
	$23 = *((($39 + [304]) + [8]))
	$35 = *($39 + [304])
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$116 }
	*($39 + [748]) = (*($39 + [748]) + [-1])
	
.LABEL $label$116
	$21 = ($29 | [32])
	if ( ((int_32)$21 != (int_32)[97]) ){ goto $label$114 }
	$37 = ($29 & [32])
	$24 = ( ($19 + [9]) ? $19 : $37 )
	if ( ((uint_32)$36 > (uint_32)[26]) ){ goto $label$77 }
	if ( (([27] - $36) == 0) ){ goto $label$77 }
	$30 = ($36 + [-27])
	$34 = (int_64)4612248968380809216
	$33 = (int_64)0
	
.LOOP $label$117:
	CALL __multf3(($39 + [208]), $33, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($39 + [208]) + [8]))
	$33 = *($39 + [208])
	$30 = ($30 + [1])
	if ( $30 ){ goto $label$117 }
	if ( ((int_32)*($24) != (int_32)[45]) ){ goto $label$78 }
	CALL __subtf3(($39 + [160]), $35, ((int_64)$23 ^ (int_64)-9223372036854775808), $33, $34)
	CALL __addtf3(($39 + [144]), $33, $34, *($39 + [160]), *((($39 + [160]) + [8])))
	$23 = ((int_64)*((($39 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$35 = *($39 + [144])
	goto $label$77 
	
.LABEL $label$115
	$16 = CALL __unordtf2($23, $35, $23, $35)
	$37 = ($20 + [3])
	if ( ($18 & [8192]) ){ goto $label$93 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$93 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$95 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$118:
	if ( (($30 & [1]) == 0) ){ goto $label$119 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$119
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$118 }
	if ( $14 ){ goto $label$93 }
	$31 = ($31 & [255])
	goto $label$94 
	
.LABEL $label$114
	$30 = ((int_32)$36 < (int_32)[0])
	if ( (CALL __netf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$90 }
	CALL __multf3(($39 + [288]), $35, $23, (int_64)0, (int_64)4619285842798575616)
	$31 = (*($39 + [748]) + [-28])
	*($39 + [748]) = $31
	$23 = *((($39 + [288]) + [8]))
	$35 = *($39 + [288])
	goto $label$89 
	
.LABEL $label$107
	$35 = *($39 + [416])
	*((($39 + [344]) + [4])) = [0]
	*($39 + [344]) = $35
	*($39 + [416]) = ($39 + [344])
	$36 = [-1]
	$37 = ($39 + [344])
	goto $label$105 
	
.LABEL $label$106
	$37 = *($39 + [416])
	if ( ($36 == 0) ){ goto $label$74 }
	
.LABEL $label$105
	$30 = [0]
	$14 = $37
	$17 = [0]
	
.LOOP $label$121:
	$31 = *($14)
	if ( ($31 == 0) ){ goto $label$120 }
	$17 = CALL wctomb(($39 + [340]), $31)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$120 }
	if ( ((uint_32)$17 > (uint_32)($36 - $30)) ){ goto $label$120 }
	$14 = ($14 + [4])
	$30 = ($17 + $30)
	if ( ((uint_32)$36 > (uint_32)$30) ){ goto $label$121 }
	
.LABEL $label$120
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$104
	*((($39 + [352]) + [54])) = *($39 + [416])
	$36 = [1]
	$37 = $6
	$14 = $5
	$18 = $31
	goto $label$79 
	
.LABEL $label$103
	$37 = CALL strerror(*(CALL $981()))
	goto $label$97 
	
.LABEL $label$102
	$30 = ($17 & [255])
	if ( ((uint_32)$30 > (uint_32)[7]) ){ goto $label$56 }
	goto $label$122 
	
.LABEL $label$122
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$101
	$37 = $5
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$123 }
	$37 = $5
	
.LOOP $label$124:
	*(($37 = ($37 + [-1]))) = ((int_64)((int_64)$35 & (int_64)7) | (int_64)48)
	$35 = (uint_64)$35 >> (uint_64)(int_64)3
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$124 }
	
.LABEL $label$123
	if ( ($18 & [8]) ){ goto $label$84 }
	$26 = [0]
	$24 = [19296]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$100
	$36 = ( $36 ? [8] : ((uint_32)$36 > (uint_32)[8]) )
	$18 = ($18 | [8])
	$29 = [120]
	
.LABEL $label$99
	$26 = [0]
	$24 = [19296]
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$125 }
	$30 = ($29 & [32])
	$37 = $5
	
.LOOP $label$126:
	*(($37 = ($37 + [-1]))) = (*((((CASTING uint_32)(uint_64 $35) & [15]) + [19280])) | $30)
	$35 = (uint_64)$35 >> (uint_64)(int_64)4
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$126 }
	if ( (($18 & [8]) == 0) ){ goto $label$83 }
	if ( (int_64)(*($39 + [416]) == 0) ){ goto $label$83 }
	$24 = (int_32($29 >> [4]) + [19296])
	$26 = [2]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$125
	$37 = $5
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$98
	$30 = *($39 + [416])
	$37 = ( $30 ? [19312] : $30 )
	
.LABEL $label$97
	$26 = [0]
	$30 = CALL strnlen($37, ( [2147483647] ? $36 : ((int_32)$36 < (int_32)[0]) ))
	$14 = ($37 + $30)
	if ( ((int_32)$36 <= (int_32)[-1]) ){ goto $label$91 }
	$18 = $31
	$36 = $30
	goto $label$79 
	
.LABEL $label$96
	$26 = [0]
	$24 = [19296]
	$35 = *($39 + [416])
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$95
	if ( $17 ){ goto $label$93 }
	
.LABEL $label$94
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$93
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$127 }
	CALL __fwritex($19, $20, $0)
	$30 = *($0)
	
.LABEL $label$127
	if ( ($30 & [32]) ){ goto $label$128 }
	$30 = uint_32(($29 & [32]) >> [5])
	CALL __fwritex(( ( [19392] ? [19408] : $30 ) ? ( [19360] ? [19376] : $30 ) : $16 ), [3], $0)
	
.LABEL $label$128
	if ( ((int_32)($18 & [73728]) != (int_32)[8192]) ){ goto $label$129 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$129 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$131 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$132:
	if ( (($30 & [1]) == 0) ){ goto $label$133 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$133
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$132 }
	if ( $14 ){ goto $label$129 }
	$31 = ($31 & [255])
	goto $label$130 
	
.LABEL $label$131
	if ( $17 ){ goto $label$129 }
	
.LABEL $label$130
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$129
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$92
	$35 = (int_64)
	*($39 + [416]) = $35((int_64)0 - $35))
	$26 = [1]
	$24 = [19296]
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$91
	$18 = $31
	$36 = $30
	if ( (*($14) == 0) ){ goto $label$79 }
	goto $label$15 
	
.LABEL $label$90
	$31 = *($39 + [748])
	
.LABEL $label$89
	$28 = ( [6] ? $36 : $30 )
	$22 = ( ($39 + [752]) ? $9 : ((int_32)$31 < (int_32)[0]) )
	$36 = $22
	
.LOOP $label$134:
	$30 = CALL __fixunstfsi($35, $23)
	CALL __floatunsitf(($39 + [272]), $30)
	CALL __subtf3(($39 + [256]), $35, $23, *($39 + [272]), *((($39 + [272]) + [8])))
	CALL __multf3(($39 + [240]), *($39 + [256]), *((($39 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($36) = $30
	$36 = ($36 + [4])
	$23 = *((($39 + [240]) + [8]))
	$35 = *($39 + [240])
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$134 }
	if ( ((int_32)$31 < (int_32)[1]) ){ goto $label$137 }
	$17 = $22
	
.LOOP $label$138:
	$14 = ( $31 ? [29] : ((int_32)$31 < (int_32)[29]) )
	$30 = ($36 + [-4])
	if ( ($30 <= $17) ){ goto $label$139 }
	$23 = (CASTING uint_64)(uint_32 $14)
	$35 = (int_64)0
	
.LOOP $label$140:
	$35 = ((int_64)((int_64)*($30) << (int_64)$23) + (int_64)((int_64)$35 & (int_64)4294967295))
	*($30) = ((uint_64)$35 % (uint_64)(int_64)1000000000)
	$35 = ((uint_64)$35 / (uint_64)(int_64)1000000000)
	$30 = ($30 + [-4])
	if ( ((uint_32)$30 >= (uint_32)$17) ){ goto $label$140 }
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( ($30 == 0) ){ goto $label$139 }
	*(($17 = ($17 + [-4]))) = $30
	
.LABEL $label$139
	
.LOOP $label$142:
	$30 = $36
	if ( ((uint_32)$30 <= (uint_32)$17) ){ goto $label$141 }
	$36 = ($30 + [-4])
	if ( (*($36) == 0) ){ goto $label$142 }
	
.LABEL $label$141
	$36 = $30
	$31 = ($31 - $14)
	if ( ((int_32)$31 > (int_32)[0]) ){ goto $label$138 }
	*($39 + [748]) = $31
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	goto $label$136 
	
.LABEL $label$137
	$30 = $36
	$17 = $22
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	
.LABEL $label$136
	$24 = (((uint_32)($28 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$21 != (int_32)[102]) ){ goto $label$144 }
	$25 = ($22 + ($24 << [2]))
	
.LOOP $label$145:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$147 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$148:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$148 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$146 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$146 
	
.LABEL $label$147
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$146
	$30 = ( $25 ? $30 : ((int_32)int_32(($30 - $22) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$144
	
.LOOP $label$149:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$151 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$152:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$152 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$150 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$150 
	
.LABEL $label$151
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$150
	$30 = ( ($17 + ($24 << [2])) ? $30 : ((int_32)int_32(($30 - $17) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$149 }
	
.LABEL $label$143
	*($39 + [748]) = $31
	
.LABEL $label$135
	$36 = [0]
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$153 }
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$153 }
	$14 = [10]
	
.LOOP $label$154:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$154 }
	
.LABEL $label$153
	$16 = ((int_32)$21 == (int_32)[103])
	$14 = (($28 - ( $36 ? [0] : ((int_32)$21 != (int_32)[102]) )) - (((int_32)$28 != (int_32)[0]) & $16))
	if ( ((int_32)$14 >= (int_32)(((int_32)int_32(($30 - $22) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$155 }
	$37 = ($14 + [147456])
	$24 = ($22 + (((int_32)$37 / (int_32)[9]) << [2]))
	$31 = ($24 + [-65532])
	$14 = [10]
	$37 = ((int_32)$37 % (int_32)[9])
	if ( ((int_32)($37 + [1]) > (int_32)[8]) ){ goto $label$156 }
	$37 = ([8] - $37)
	$14 = [10]
	
.LOOP $label$157:
	$14 = ((int_32)$14 * (int_32)[10])
	$37 = ($37 + [-1])
	if ( $37 ){ goto $label$157 }
	
.LABEL $label$156
	$27 = *($31)
	$37 = ((uint_32)$27 % (uint_32)$14)
	$26 = ($31 + [4])
	if ( ((int_32)$26 != (int_32)$30) ){ goto $label$159 }
	if ( ($37 == 0) ){ goto $label$158 }
	
.LABEL $label$159
	if ( (((uint_32)$27 / (uint_32)$14) & [1]) ){ goto $label$161 }
	$35 = (int_64)4643211215818981376
	$23 = (int_64)0
	if ( ((uint_32)$31 <= (uint_32)$17) ){ goto $label$160 }
	if ( ((int_32)$14 != (int_32)[1000000000]) ){ goto $label$160 }
	if ( ((*(($31 + [-4])) & [1]) == 0) ){ goto $label$160 }
	
.LABEL $label$161
	$35 = (int_64)4643211215818981376
	$23 = (int_64)1
	
.LABEL $label$160
	$34 = (int_64)4611123068473966592
	$25 = ((int_32)$14 / (int_32)[2])
	if ( ($37 <= $25) ){ goto $label$162 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$37 == (int_32)$25) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$30) )
	
.LABEL $label$162
	if ( ($20 == 0) ){ goto $label$163 }
	if ( ((int_32)*($19) != (int_32)[45]) ){ goto $label$163 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	
.LABEL $label$163
	CALL __addtf3(($39 + [224]), $23, $35, (int_64)0, $34)
	$37 = ($27 - $37)
	*($31) = $37
	if ( (CALL __eqtf2(*($39 + [224]), *((($39 + [224]) + [8])), $23, $35) == 0) ){ goto $label$158 }
	$36 = ($37 + $14)
	*($31) = $36
	if ( ($36 <= [1000000000]) ){ goto $label$164 }
	$36 = ($24 + [-65536])
	
.LOOP $label$165:
	*(($36 + [4])) = [0]
	if ( ((uint_32)$36 >= (uint_32)$17) ){ goto $label$166 }
	*(($17 = ($17 + [-4]))) = [0]
	
.LABEL $label$166
	$14 = (*($36) + [1])
	*($36) = $14
	$36 = ($36 + [-4])
	if ( ((uint_32)$14 > (uint_32)[999999999]) ){ goto $label$165 }
	$31 = ($36 + [4])
	
.LABEL $label$164
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$158 }
	$14 = [10]
	
.LOOP $label$167:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$167 }
	
.LABEL $label$158
	$14 = ($31 + [4])
	$30 = ( $14 ? $30 : ((uint_32)$30 > (uint_32)$14) )
	
.LABEL $label$155
	$31 = ([0] - $36)
	
.LOOP $label$171:
	$14 = $30
	if ( ((uint_32)$14 <= (uint_32)$17) ){ goto $label$170 }
	$30 = ($14 + [-4])
	if ( (*($30) == 0) ){ goto $label$171 }
	$27 = [1]
	if ( $16 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$27 = [0]
	if ( ($16 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$30 = (($28 == 0) + $28)
	if ( ((int_32)$30 <= (int_32)$36) ){ goto $label$76 }
	if ( ((int_32)$36 < (int_32)[-4]) ){ goto $label$76 }
	$29 = ($29 + [-1])
	$28 = (($30 + [-1]) - $36)
	$16 = ($18 & [8])
	if ( ($16 == 0) ){ goto $label$75 }
	goto $label$68 
	
.LABEL $label$168
	$16 = ($18 & [8])
	goto $label$68 
	
.LABEL $label$88
	$26 = [1]
	$24 = [19297]
	if ( (uint_64)($35 <= (int_64)4294967296) ){ goto $label$86 }
	
.LABEL $label$87
	$37 = $5
	
.LOOP $label$172:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$172 }
	goto $label$85 
	
.LABEL $label$86
	$23 = $35
	$37 = $5
	
.LABEL $label$85
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$83 }
	
.LOOP $label$173:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $17 ){ goto $label$173 }
	goto $label$83 
	
.LABEL $label$84
	$30 = ($5 - $37)
	$24 = ( [19296] ? [19301] : ((int_32)$36 > (int_32)$30) )
	$26 = ((int_32)$36 <= (int_32)$30)
	
.LABEL $label$83
	if ( ($16 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	if ( ((int_32)$36 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$81
	$18 = ( ($18 & [-65537]) ? $18 : ((int_32)$36 > (int_32)[-1]) )
	$35 = *($39 + [416])
	if ( $36 ){ goto $label$174 }
	if ( ((int_64)($35 == 0) == 0) ){ goto $label$174 }
	$37 = $5
	$14 = $5
	$36 = [0]
	goto $label$79 
	
.LABEL $label$174
	$30 = ((int_64)($35 == 0) + ($5 - $37))
	$36 = ( $36 ? $30 : ((int_32)$36 > (int_32)$30) )
	
.LABEL $label$80
	$14 = $5
	
.LABEL $label$79
	$29 = ($14 - $37)
	$28 = ( $29 ? $36 : ((int_32)$36 < (int_32)$29) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$15 }
	$27 = ($26 + $28)
	$30 = ( $27 ? $15 : ((int_32)$15 < (int_32)$27) )
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$175 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$175 }
	$17 = ($22 <= [256])
	$22 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $22 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$177 }
	$17 = ($14 == 0)
	$14 = $22
	
.LOOP $label$178:
	if ( (($17 & [1]) == 0) ){ goto $label$179 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$179
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$178 }
	if ( $16 ){ goto $label$175 }
	$22 = ($22 & [255])
	goto $label$176 
	
.LABEL $label$177
	if ( $14 ){ goto $label$175 }
	
.LABEL $label$176
	CALL __fwritex(($39 + [432]), $22, $0)
	
.LABEL $label$175
	if ( (*($0) & [32]) ){ goto $label$180 }
	CALL __fwritex($24, $26, $0)
	
.LABEL $label$180
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$181 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$181 }
	$17 = ($26 <= [256])
	$26 = ($30 - $27)
	CALL memset(($39 + [432]), [48], ( $26 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$183 }
	$17 = ($14 == 0)
	$14 = $26
	
.LOOP $label$184:
	if ( (($17 & [1]) == 0) ){ goto $label$185 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$185
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$184 }
	if ( $16 ){ goto $label$181 }
	$26 = ($26 & [255])
	goto $label$182 
	
.LABEL $label$183
	if ( $14 ){ goto $label$181 }
	
.LABEL $label$182
	CALL __fwritex(($39 + [432]), $26, $0)
	
.LABEL $label$181
	if ( ((int_32)$29 >= (int_32)$36) ){ goto $label$186 }
	$17 = ($16 <= [256])
	$16 = ($28 - $29)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$188 }
	$17 = ($36 == 0)
	$36 = $16
	
.LOOP $label$189:
	if ( (($17 & [1]) == 0) ){ goto $label$190 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$190
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$189 }
	if ( $31 ){ goto $label$186 }
	$16 = ($16 & [255])
	goto $label$187 
	
.LABEL $label$188
	if ( $36 ){ goto $label$186 }
	
.LABEL $label$187
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$186
	if ( (*($0) & [32]) ){ goto $label$191 }
	CALL __fwritex($37, $29, $0)
	
.LABEL $label$191
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$24 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$24 }
	$17 = ($37 <= [256])
	$37 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $17 ))
	$36 = *($0)
	$15 = ($36 & [32])
	if ( $17 ){ goto $label$193 }
	$17 = ($15 == 0)
	$15 = $37
	
.LOOP $label$194:
	if ( (($17 & [1]) == 0) ){ goto $label$195 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$195
	$14 = ($36 & [32])
	$17 = ($14 == 0)
	$15 = ($15 + [-256])
	if ( ((uint_32)$15 > (uint_32)[255]) ){ goto $label$194 }
	if ( $14 ){ goto $label$24 }
	$37 = ($37 & [255])
	goto $label$192 
	
.LABEL $label$193
	if ( $15 ){ goto $label$24 }
	
.LABEL $label$192
	CALL __fwritex(($39 + [432]), $37, $0)
	goto $label$24 
	
.LABEL $label$78
	CALL __addtf3(($39 + [192]), $35, $23, $33, $34)
	CALL __subtf3(($39 + [176]), *($39 + [192]), *((($39 + [192]) + [8])), $33, $34)
	$23 = *((($39 + [176]) + [8]))
	$35 = *($39 + [176])
	
.LABEL $label$77
	$30 = int_32($31 >> [31])
	$31 = *($39 + [748])
	$17 = ((int_32)($31 + $30) ^ (int_32)$30)
	$34 = (CASTING int_64)(int_32 $17)
	$30 = [0]
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$198 }
	$17 = (CASTING uint_32)(uint_64 $34)
	if ( $17 ){ goto $label$197 }
	goto $label$196 
	
.LABEL $label$198
	$30 = [0]
	
.LOOP $label$199:
	*(($12 + $30)) = ((int_64)((uint_64)$34 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ($30 + [-1])
	$17 = ((uint_64)$34 > (uint_64)(int_64)42949672959)
	$33 = ((uint_64)$34 / (uint_64)(int_64)10)
	$34 = $33
	if ( $17 ){ goto $label$199 }
	$17 = (CASTING uint_32)(uint_64 $33)
	if ( ($17 == 0) ){ goto $label$196 }
	
.LABEL $label$197
	
.LOOP $label$200:
	*(((($39 + [692]) + $30) + [11])) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$30 = ($30 + [-1])
	$14 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $14 ){ goto $label$200 }
	
.LABEL $label$196
	$17 = ($7 + $30)
	if ( $30 ){ goto $label$201 }
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$201
	$16 = ($20 | [2])
	*(($27 = ($17 + [-2]))) = ($29 + [15])
	*(($17 + [-1])) = ((uint_32($31 >> [30]) & [2]) + [43])
	if ( ($18 & [8]) ){ goto $label$202 }
	if ( ((int_32)$36 < (int_32)[1]) ){ goto $label$71 }
	$30 = ($39 + [704])
	
.LOOP $label$203:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [80]), $17)
	CALL __subtf3(($39 + [64]), $35, $23, *($39 + [80]), *((($39 + [80]) + [8])))
	CALL __multf3(($39 + [48]), *($39 + [64]), *((($39 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [19280])) | $37)
	$23 = *((($39 + [48]) + [8]))
	$35 = *($39 + [48])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$204 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$204
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$203 }
	goto $label$70 
	
.LABEL $label$202
	$30 = ($39 + [704])
	
.LOOP $label$205:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [128]), $17)
	CALL __subtf3(($39 + [112]), $35, $23, *($39 + [128]), *((($39 + [128]) + [8])))
	CALL __multf3(($39 + [96]), *($39 + [112]), *((($39 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [19280])) | $37)
	$23 = *((($39 + [96]) + [8]))
	$35 = *($39 + [96])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$206 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$206
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$205 }
	goto $label$70 
	
.LABEL $label$76
	$28 = ($30 + [-1])
	$29 = ($29 + [-2])
	$16 = ($18 & [8])
	if ( $16 ){ goto $label$68 }
	
.LABEL $label$75
	$30 = [9]
	if ( ($27 == 0) ){ goto $label$207 }
	$16 = *(($14 + [-4]))
	if ( ($16 == 0) ){ goto $label$207 }
	$30 = [0]
	if ( ((uint_32)$16 % (uint_32)[10]) ){ goto $label$207 }
	$37 = [10]
	$30 = [0]
	
.LOOP $label$208:
	$30 = ($30 + [1])
	$37 = ((int_32)$37 * (int_32)[10])
	if ( (((uint_32)$16 % (uint_32)$37) == 0) ){ goto $label$208 }
	
.LABEL $label$207
	$37 = (((int_32)int_32(($14 - $22) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($29 | [32]) != (int_32)[102]) ){ goto $label$69 }
	$16 = [0]
	$30 = ($37 - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	goto $label$68 
	
.LABEL $label$74
	$30 = [0]
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	
.LABEL $label$73
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$72 }
	$17 = ($27 <= [256])
	$27 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $27 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$210 }
	$17 = ($36 == 0)
	$36 = $27
	
.LOOP $label$211:
	if ( (($17 & [1]) == 0) ){ goto $label$212 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$212
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$211 }
	if ( $31 ){ goto $label$72 }
	$27 = ($27 & [255])
	goto $label$209 
	
.LABEL $label$210
	if ( $36 ){ goto $label$72 }
	
.LABEL $label$209
	CALL __fwritex(($39 + [432]), $27, $0)
	
.LABEL $label$72
	if ( ($30 == 0) ){ goto $label$213 }
	$17 = [0]
	
.LOOP $label$214:
	$36 = *($37)
	if ( ($36 == 0) ){ goto $label$213 }
	$36 = CALL wctomb(($39 + [340]), $36)
	$17 = ($36 + $17)
	if ( ((uint_32)$17 > (uint_32)$30) ){ goto $label$213 }
	if ( (*($0) & [32]) ){ goto $label$215 }
	CALL __fwritex(($39 + [340]), $36, $0)
	
.LABEL $label$215
	$37 = ($37 + [4])
	if ( ($17 <= $30) ){ goto $label$214 }
	
.LABEL $label$213
	if ( ((int_32)$16 != (int_32)[8192]) ){ goto $label$216 }
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$216 }
	$17 = ($31 <= [256])
	$31 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$218 }
	$17 = ($36 == 0)
	$36 = $31
	
.LOOP $label$219:
	if ( (($17 & [1]) == 0) ){ goto $label$220 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$220
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$219 }
	if ( $37 ){ goto $label$216 }
	$31 = ($31 & [255])
	goto $label$217 
	
.LABEL $label$218
	if ( $36 ){ goto $label$216 }
	
.LABEL $label$217
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$216
	$30 = ( $15 ? $30 : ((int_32)$15 > (int_32)$30) )
	goto $label$24 
	
.LABEL $label$71
	$17 = ($39 + [704])
	
.LOOP $label$221:
	$14 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [32]), $14)
	CALL __subtf3(($39 + [16]), $35, $23, *($39 + [32]), *((($39 + [32]) + [8])))
	CALL __multf3($39, *($39 + [16]), *((($39 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($30 = $17)) = (*(($14 + [19280])) | $37)
	$23 = *(($39 + [8]))
	$35 = *($39)
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$222 }
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$222 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$222
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$221 }
	
.LABEL $label$70
	$30 = [-1]
	$31 = ($7 - $27)
	if ( ((int_32)(([2147483645] - $16) - $31) < (int_32)$36) ){ goto $label$50 }
	$26 = ($17 - ($39 + [704]))
	$29 = ( ( ($36 + [2]) ? $26 : ((int_32)($8 + $17) < (int_32)$36) ) ? $26 : $36 )
	$37 = (($31 + $16) + $29)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$65 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$65 }
	$30 = ($28 <= [256])
	$28 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$67 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$223:
	if ( (($30 & [1]) == 0) ){ goto $label$224 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$224
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$223 }
	if ( $14 ){ goto $label$65 }
	$28 = ($28 & [255])
	goto $label$66 
	
.LABEL $label$69
	$16 = [0]
	$30 = (($37 + $36) - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	
.LABEL $label$68
	$30 = [-1]
	$24 = ($28 | $16)
	$37 = ((int_32)$24 != (int_32)[0])
	if ( ((int_32)$28 > (int_32)([2147483646] - $37)) ){ goto $label$50 }
	$26 = (($28 + $37) + [1])
	$21 = ((int_32)($29 | [32]) != (int_32)[102])
	if ( $21 ){ goto $label$225 }
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	$36 = ( $36 ? [0] : ((int_32)$36 > (int_32)[0]) )
	goto $label$61 
	
.LABEL $label$225
	$30 = ( $31 ? $36 : ((int_32)$36 < (int_32)[0]) )
	$35 = (CASTING int_64)(int_32 $30)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$64 }
	$37 = $7
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( $30 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$67
	if ( $17 ){ goto $label$65 }
	
.LABEL $label$66
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$65
	if ( (*($0) & [32]) ){ goto $label$226 }
	CALL __fwritex($24, $16, $0)
	
.LABEL $label$226
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$227 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$227 }
	$30 = ($16 <= [256])
	$16 = ($15 - $37)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$229 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$230:
	if ( (($30 & [1]) == 0) ){ goto $label$231 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$231
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$230 }
	if ( $14 ){ goto $label$227 }
	$16 = ($16 & [255])
	goto $label$228 
	
.LABEL $label$229
	if ( $17 ){ goto $label$227 }
	
.LABEL $label$228
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$227
	if ( (*($0) & [32]) ){ goto $label$232 }
	CALL __fwritex(($39 + [704]), $26, $0)
	
.LABEL $label$232
	$16 = ($29 - $26)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$233 }
	$30 = ($16 <= [256])
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$235 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$236:
	if ( (($30 & [1]) == 0) ){ goto $label$237 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$237
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$236 }
	if ( $14 ){ goto $label$233 }
	$16 = ($16 & [255])
	goto $label$234 
	
.LABEL $label$235
	if ( $17 ){ goto $label$233 }
	
.LABEL $label$234
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$233
	if ( (*($0) & [32]) ){ goto $label$238 }
	CALL __fwritex($27, $31, $0)
	
.LABEL $label$238
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$239 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$239 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$241 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$242:
	if ( (($30 & [1]) == 0) ){ goto $label$243 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$243
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$242 }
	if ( $14 ){ goto $label$239 }
	$31 = ($31 & [255])
	goto $label$240 
	
.LABEL $label$241
	if ( $17 ){ goto $label$239 }
	
.LABEL $label$240
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$239
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$64
	$37 = $7
	
.LOOP $label$244:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$244 }
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	
.LOOP $label$245:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$31 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $31 ){ goto $label$245 }
	
.LABEL $label$62
	if ( ((int_32)($7 - $37) > (int_32)[1]) ){ goto $label$246 }
	$30 = ($37 + [-1])
	
.LOOP $label$247:
	*($30) = [48]
	$37 = ($7 - $30)
	$31 = ($30 + [-1])
	$30 = $31
	if ( ((int_32)$37 < (int_32)[2]) ){ goto $label$247 }
	$37 = ($31 + [1])
	
.LABEL $label$246
	*(($25 = ($37 + [-2]))) = $29
	$30 = [-1]
	*(($37 + [-1])) = ((uint_32($36 >> [30]) & [2]) + [43])
	$36 = ($7 - $25)
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	
.LABEL $label$61
	$30 = [-1]
	$36 = ($36 + $26)
	if ( ((int_32)$36 > (int_32)((int_32)$20 ^ (int_32)[2147483647])) ){ goto $label$50 }
	$26 = ($36 + $20)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$51 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$51 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$53 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$248:
	if ( (($30 & [1]) == 0) ){ goto $label$249 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$249
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$248 }
	if ( $31 ){ goto $label$51 }
	$29 = ($29 & [255])
	goto $label$52 
	
.LABEL $label$60
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$59
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$58
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$57
	*(*($39 + [416])) = $38
	
.LABEL $label$56
	$30 = [0]
	goto $label$24 
	
.LABEL $label$55
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$54
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$53
	if ( $36 ){ goto $label$51 }
	
.LABEL $label$52
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$51
	if ( (*($0) & [32]) ){ goto $label$250 }
	CALL __fwritex($19, $20, $0)
	
.LABEL $label$250
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$251 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$251 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [48], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$253 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$254:
	if ( (($30 & [1]) == 0) ){ goto $label$255 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$255
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$254 }
	if ( $31 ){ goto $label$251 }
	$29 = ($29 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $36 ){ goto $label$251 }
	
.LABEL $label$252
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$251
	if ( $21 ){ goto $label$266 }
	$31 = ( $22 ? $17 : ((uint_32)$17 > (uint_32)$22) )
	$37 = $31
	
.LOOP $label$267:
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$269 }
	$17 = [0]
	
.LOOP $label$270:
	*(($11 + $17)) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ($17 + [-1])
	$36 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $36 ){ goto $label$270 }
	goto $label$268 
	
.LABEL $label$269
	$17 = [0]
	
.LABEL $label$268
	$30 = ($10 + $17)
	if ( ((int_32)$37 == (int_32)$31) ){ goto $label$272 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$271 }
	
.LOOP $label$273:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$273 }
	$30 = ($39 + [704])
	goto $label$271 
	
.LABEL $label$272
	if ( $17 ){ goto $label$271 }
	*(($30 = ($30 + [-1]))) = [48]
	
.LABEL $label$271
	if ( (*($0) & [32]) ){ goto $label$274 }
	CALL __fwritex($30, ($10 - $30), $0)
	
.LABEL $label$274
	$37 = ($37 + [4])
	if ( ((uint_32)$37 <= (uint_32)$22) ){ goto $label$267 }
	if ( ($24 == 0) ){ goto $label$275 }
	if ( (*($0) & [32]) ){ goto $label$275 }
	CALL __fwritex([19424], [1], $0)
	
.LABEL $label$275
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$265 }
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$264 }
	
.LOOP $label$276:
	$30 = $10
	$17 = *($37)
	if ( ($17 == 0) ){ goto $label$278 }
	$30 = $10
	
.LOOP $label$279:
	*(($30 = ($30 + [-1]))) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$36 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $36 ){ goto $label$279 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$277 }
	
.LABEL $label$278
	
.LOOP $label$280:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$280 }
	
.LABEL $label$277
	if ( (*($0) & [32]) ){ goto $label$281 }
	CALL __fwritex($30, ( $28 ? [9] : ((int_32)$28 < (int_32)[9]) ), $0)
	
.LABEL $label$281
	$30 = ($28 + [-9])
	if ( ((int_32)$28 < (int_32)[10]) ){ goto $label$263 }
	$28 = $30
	$37 = ($37 + [4])
	if ( ($37 <= $14) ){ goto $label$276 }
	goto $label$263 
	
.LABEL $label$266
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$259 }
	$31 = ( $14 ? ($17 + [4]) : $27 )
	if ( ($16 == 0) ){ goto $label$261 }
	$37 = $17
	
.LOOP $label$282:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$284 }
	$36 = [0]
	
.LOOP $label$285:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$285 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$283 }
	
.LABEL $label$284
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$283
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$287 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$286 }
	
.LOOP $label$288:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$288 }
	goto $label$286 
	
.LABEL $label$287
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$289 }
	CALL __fwritex($14, [1], $0)
	$30 = *($0)
	
.LABEL $label$289
	$14 = ($14 + [1])
	if ( ($30 & [32]) ){ goto $label$286 }
	CALL __fwritex([19424], [1], $0)
	
.LABEL $label$286
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$290 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$290
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$282 }
	goto $label$260 
	
.LABEL $label$265
	$30 = $28
	if ( ((int_32)$30 >= (int_32)[1]) ){ goto $label$262 }
	goto $label$258 
	
.LABEL $label$264
	$30 = $28
	
.LABEL $label$263
	if ( ((int_32)$30 < (int_32)[1]) ){ goto $label$258 }
	
.LABEL $label$262
	$17 = ($30 <= [256])
	CALL memset(($39 + [432]), [48], ( $30 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$292 }
	$17 = ($36 == 0)
	$36 = $30
	
.LOOP $label$293:
	if ( (($17 & [1]) == 0) ){ goto $label$294 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$294
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$293 }
	if ( $37 ){ goto $label$258 }
	$30 = ($30 & [255])
	goto $label$291 
	
.LABEL $label$292
	if ( $36 ){ goto $label$258 }
	
.LABEL $label$291
	CALL __fwritex(($39 + [432]), $30, $0)
	if ( ((int_32)$18 == (int_32)[8192]) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$261
	$37 = $17
	
.LOOP $label$295:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$297 }
	$36 = [0]
	
.LOOP $label$298:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$298 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$296 }
	
.LABEL $label$297
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$296
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$300 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$299 }
	
.LOOP $label$301:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$301 }
	goto $label$299 
	
.LABEL $label$300
	if ( (*($0) & [32]) ){ goto $label$302 }
	CALL __fwritex($14, [1], $0)
	
.LABEL $label$302
	$14 = ($14 + [1])
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$299 }
	if ( (*($0) & [32]) ){ goto $label$299 }
	CALL __fwritex([19424], [1], $0)
	
.LABEL $label$299
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$303 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$303
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$295 }
	
.LABEL $label$260
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$259 }
	$30 = ($28 <= [256])
	CALL memset(($39 + [432]), [48], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$305 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$306:
	if ( (($30 & [1]) == 0) ){ goto $label$307 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$307
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$306 }
	if ( $14 ){ goto $label$259 }
	$28 = ($28 & [255])
	goto $label$304 
	
.LABEL $label$305
	if ( $17 ){ goto $label$259 }
	
.LABEL $label$304
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$259
	if ( (*($0) & [32]) ){ goto $label$258 }
	CALL __fwritex($25, ($7 - $25), $0)
	
.LABEL $label$258
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$256 }
	
.LABEL $label$257
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$256 }
	$30 = ($37 <= [256])
	$37 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$309 }
	$30 = ($17 == 0)
	$17 = $37
	
.LOOP $label$310:
	if ( (($30 & [1]) == 0) ){ goto $label$311 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$311
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$310 }
	if ( $14 ){ goto $label$256 }
	$37 = ($37 & [255])
	goto $label$308 
	
.LABEL $label$309
	if ( $17 ){ goto $label$256 }
	
.LABEL $label$308
	CALL __fwritex(($39 + [432]), $37, $0)
	
.LABEL $label$256
	$30 = ( $15 ? $26 : ((int_32)$15 > (int_32)$26) )
	
.LABEL $label$50
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$24
	if ( ((int_32)$30 <= (int_32)$13) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( $0 ){ goto $label$1 }
	if ( ($32 == 0) ){ goto $label$14 }
	$30 = [1]
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $987(($3 + [16]), $1, $2)
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $987(($3 + [32]), $1, $2)
	$1 = *($4 + [12])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $987(($3 + [48]), $1, $2)
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $987(($3 + [64]), $1, $2)
	$1 = *($4 + [20])
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $987(($3 + [80]), $1, $2)
	$1 = *($4 + [24])
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $987(($3 + [96]), $1, $2)
	$1 = *($4 + [28])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $987(($3 + [112]), $1, $2)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $987(($3 + [128]), $1, $2)
	$1 = *($4 + [36])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $987(($3 + [144]), $1, $2)
	$38 = [1]
	goto $label$1 
	
.LABEL $label$15
	*(CALL __errno_location()) = [75]
	goto $label$2 
	
.LABEL $label$14
	$38 = [0]
	goto $label$1 
	
.LABEL $label$13
	$30 = [2]
	goto $label$4 
	
.LABEL $label$12
	$30 = [3]
	goto $label$4 
	
.LABEL $label$11
	$38 = [0]
	goto $label$1 
	
.LABEL $label$10
	$30 = [4]
	goto $label$4 
	
.LABEL $label$9
	$30 = [5]
	goto $label$4 
	
.LABEL $label$8
	$30 = [6]
	goto $label$4 
	
.LABEL $label$7
	$30 = [7]
	goto $label$4 
	
.LABEL $label$6
	$30 = [8]
	goto $label$4 
	
.LABEL $label$5
	$30 = [9]
	
.LABEL $label$4
	$1 = ($4 + ($30 << [2]))
	
.LOOP $label$312:
	if ( *($1) ){ goto $label$3 }
	$1 = ($1 + [4])
	$38 = [1]
	$30 = ($30 + [1])
	if ( ((uint_32)$30 <= (uint_32)[9]) ){ goto $label$312 }
	goto $label$1 
	
.LABEL $label$3
	*(CALL __errno_location()) = [22]
	
.LABEL $label$2
	$38 = [-1]
	
.LABEL $label$1
	*([0] + [4]) = ($39 + [8128])
	$30
	$30
	return $38
}

void .FUNC $50 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	*(($0 + [148])) = $3
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $704($8, $0, $2)
	$4 = *($8 + [96])
	if ( ($4 == 0) ){ goto $label$2 }
	$6 = ($8 + [100])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$5 = ([0] - $4)
	$7 = ($7 + [-24])
	
.LOOP $label$6:
	if ( ((*(($7 + [12])) & [1]) == 0) ){ goto $label$7 }
	CALL $956(*(($7 + [20])))
	
.LABEL $label$7
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $956(*(($7 + [8])))
	
.LABEL $label$8
	$7 = ($7 + [-24])
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$6 }
	$7 = *(($8 + [96]))
	goto $label$3 
	
.LABEL $label$5
	$7 = ($0 + [328])
	goto $label$1 
	
.LABEL $label$4
	$7 = $4
	
.LABEL $label$3
	*($6) = $4
	CALL $956($7)
	
.LABEL $label$2
	$7 = ($0 + [472])
	
.LABEL $label$1
	CALL void $7((int_32 $1), (int_64 $2), (int_32 $3), (int_32 [0]), (int_32 *(*($7) + [4])))
	*([0] + [4]) = ($8 + [112])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8) = (int_64)0
	*($8 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1632])
	CALL memcpy($8, $6, [8])
	$4 = ($1 & [-4])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [1632])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [4])
	CALL eosio_assert(((int_32)$4 != (int_32)[12]), [1632])
	$4 = ($8 + [12])
	CALL memcpy($4, ($6 + [12]), [4])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$6 = *($4)
	$0 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $0), (int_32 $6), (int_32 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $52 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $704($8, $0, $2)
	$5 = *($8 + [96])
	if ( ($5 == 0) ){ goto $label$2 }
	$7 = ($8 + [100])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$4 }
	$6 = ([0] - $5)
	$2 = ($2 + [-24])
	
.LOOP $label$6:
	if ( ((*(($2 + [12])) & [1]) == 0) ){ goto $label$7 }
	CALL $956(*(($2 + [20])))
	
.LABEL $label$7
	if ( ((*($2) & [1]) == 0) ){ goto $label$8 }
	CALL $956(*(($2 + [8])))
	
.LABEL $label$8
	$2 = ($2 + [-24])
	if ( ((int_32)($2 + $6) != (int_32)[-24]) ){ goto $label$6 }
	$2 = *(($8 + [96]))
	goto $label$3 
	
.LABEL $label$5
	$2 = ($0 + [328])
	goto $label$1 
	
.LABEL $label$4
	$2 = $5
	
.LABEL $label$3
	*($7) = $5
	CALL $956($2)
	
.LABEL $label$2
	$2 = ($0 + [472])
	
.LABEL $label$1
	CALL void $2((int_32 $1), (int_64 $3), (int_32 $4), (int_32 *(*($2) + [8])))
	*([0] + [4]) = ($8 + [112])
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($6 + [16]) = [0]
	*($6 + [8]) = (int_64)0
	*($6 + [20]) = [0]
	*($6 + [24]) = [0]
	*($6 + [36]) = $1
	*($6 + [32]) = $1
	*($6 + [40]) = ($1 + $3)
	*($6 + [48]) = ($6 + [32])
	*($6 + [56]) = ($6 + [8])
	CALL $762(($6 + [56]), ($6 + [48]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($6 + [24]))
	$7 = *(($6 + [20]))
	$0 = *(($6 + [16]))
	$4 = *($6 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $4), (int_64 $0), (int_32 ($7 & [255])), (int_32 $3), (int_32 $5))
	*([0] + [4]) = ($6 + [64])
	return [1]
}

void .FUNC $54 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	*([0] + [4]) = $7
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $704($7, $0, $2)
	$4 = *($7 + [96])
	if ( ($4 == 0) ){ goto $label$2 }
	$6 = ($7 + [100])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$4 }
	$5 = ([0] - $4)
	$2 = ($2 + [-24])
	
.LOOP $label$6:
	if ( ((*(($2 + [12])) & [1]) == 0) ){ goto $label$7 }
	CALL $956(*(($2 + [20])))
	
.LABEL $label$7
	if ( ((*($2) & [1]) == 0) ){ goto $label$8 }
	CALL $956(*(($2 + [8])))
	
.LABEL $label$8
	$2 = ($2 + [-24])
	if ( ((int_32)($2 + $5) != (int_32)[-24]) ){ goto $label$6 }
	$2 = *(($7 + [96]))
	goto $label$3 
	
.LABEL $label$5
	$2 = ($0 + [328])
	goto $label$1 
	
.LABEL $label$4
	$2 = $4
	
.LABEL $label$3
	*($6) = $4
	CALL $956($2)
	
.LABEL $label$2
	$2 = ($0 + [472])
	
.LABEL $label$1
	CALL void $2((int_32 $1), (int_64 $3), (int_32 *(*($2) + [12])))
	*([0] + [4]) = ($7 + [112])
}

void .FUNC $55 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	CALL $446(($0 + [8]), $1, $4, $5)
	CALL $760(($0 + [272]), $1, $2, $3, $5, [1])
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [16])) = (int_64)0
	*($2) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [52]) = $1
	*($2 + [48]) = $1
	*($2 + [56]) = ($1 + $0)
	*($2 + [64]) = ($2 + [48])
	*($2 + [72]) = $2
	CALL $758(($2 + [72]), ($2 + [64]))
	if ( ($0 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $759(($2 + [48]), $2)
	$1 = *(($2 + [12]))
	if ( ($1 == 0) ){ goto $label$6 }
	*(($2 + [16])) = $1
	CALL $956($1)
	
.LABEL $label$6
	*([0] + [4]) = ($2 + [80])
	return [1]
}

void .FUNC $57 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*(($0 + [148])) = $4
	CALL $187(($6 + [24]), *(($0 + [288])), $1, [0])
	CALL require_auth(*(($0 + [280])))
	$5 = *($6 + [24])
	*($6 + [16]) = $5
	*($6 + [8 align=4]) = $5
	CALL $756(($0 + [272]), $1, $2, $3, [0], ($6 + [8]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $453 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	*($11 + [12]) = $2
	$5 = *(($0 + [112]))
	$10 = *(($0 + [116]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$1 }
	$2 = ($10 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($2)) == (int_64)$1) ){ goto $label$1 }
	$10 = $2
	$7 = ($2 + [-24])
	$2 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = ($0 + [88])
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$5 }
	$2 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [60]) == (int_32)$7), [1536])
	if ( $2 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-6030912128150405120, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $156($7, $2)
	CALL eosio_assert(((int_32)*($2 + [60]) == (int_32)$7), [1536])
	goto $label$3 
	
.LABEL $label$4
	CALL $454(($11 + [24]), $0, $1)
	$2 = *($11 + [28])
	if ( $2 ){ goto $label$3 }
	*($11 + [40]) = $1
	*($11 + [39]) = [0]
	*($11 + [36]) = [0]
	$9 = *($0)
	*($11 + [28]) = ($11 + [39])
	*($11 + [24]) = ($11 + [40])
	*($11 + [32]) = ($11 + [36])
	CALL $243(($11 + [16]), $7, $9, ($11 + [24]))
	$8 = *(($0 + [112]))
	$6 = *(($0 + [116]))
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$6 }
	$2 = ($6 + [-24])
	$5 = ([0] - $8)
	
.LOOP $label$7:
	if ( ((int_64)*(*($2)) == (int_64)$1) ){ goto $label$6 }
	$6 = $2
	$10 = ($2 + [-24])
	$2 = $10
	if ( ((int_32)($10 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$8 }
	$2 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [60]) == (int_32)$7), [1536])
	goto $label$3 
	
.LABEL $label$8
	$2 = [0]
	$10 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-6030912128150405120, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $156($7, $10)
	CALL eosio_assert(((int_32)*($2 + [60]) == (int_32)$7), [1536])
	
.LABEL $label$3
	$10 = [0]
	$6 = *($2 + [40])
	if ( ($6 == 0) ){ goto $label$9 }
	$10 = ((int_32)((int_32)(CASTING uint_32)(uint_64 $1) ^ (int_32)$6) ^ (int_32)[-1431655766])
	
.LABEL $label$9
	CALL eosio_assert(($10 <= $4), [5360])
	$1 = *($0)
	*($11 + [24]) = ($11 + [12])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [1696])
	CALL $455($7, $2, $1, ($11 + [24]))
	*($0 + [140]) = $3
	*([0] + [4]) = ($11 + [48])
}

void .FUNC $452 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $451 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [32]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	return $0
}

int_32 .FUNC $130 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = *($2 + [32])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [36])) = $3
	CALL $956($3)
	
.LABEL $label$6
	$3 = *($2 + [20])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($2 + [24])) = $3
	CALL $956($3)
	
.LABEL $label$7
	$3 = *($2 + [8])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($2 + [12])) = $3
	CALL $956($3)
	
.LABEL $label$8
	CALL $956($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $956($2)
	
.LABEL $label$1
	return $0
}

void .FUNC $102 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	CALL $446(($0 + [8]), $1, $3, $4)
	CALL $666(($0 + [1208]), $1, $2)
}

void .FUNC $918 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$5 = (*([0] + [4]) - [48])
	$10 = $5
	*([0] + [4]) = $5
	$2 = *($0)
	$8 = *($0 + [4])
	*($1) = *(*($8))
	$8 = *($8 + [4])
	$6 = ($1 + [12])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($4) = *($8)
	*(($4 + [8])) = *(($8 + [8]))
	$8 = (*($6) + [12])
	*($6) = $8
	$4 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$4 = ($1 + [8])
	CALL $917($4, $8)
	$8 = *($6)
	
.LABEL $label$1
	$3 = *($4)
	$7 = ($8 - $3)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[12]))
	$6 = [8]
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$4 }
	$6 = ((((int_32)((uint_32)($7 + [-12]) / (uint_32)[12]) * (int_32)[7]) + $6) + [7])
	
.LABEL $label$4
	if ( ($6 <= [513]) ){ goto $label$6 }
	$7 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($5 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$5
	*($10 + [8]) = $7
	$3 = ($7 + $6)
	*($10 + [16]) = $3
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [1920])
	CALL memcpy($7, $1, [8])
	$8 = ($7 + [8])
	*($10 + [12]) = $8
	$9 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [12])) - *($4)) / (int_32)[12]))
	
.LOOP $label$7:
	$4 = (CASTING uint_32)(uint_64 $9)
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	$5 = ((int_64)$9) != (int_64)0
	*($10 + [32]) = (($5) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)($3 - $8) > (int_32)[0]), [1920])
	CALL memcpy($8, ($10 + [32]), [1])
	$8 = ($8 + [1])
	*($10 + [12]) = $8
	if ( $5 ){ goto $label$7 }
	$4 = *(($1 + [12]))
	$8 = *($1 + [8])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	*($10 + [24]) = ($10 + [8])
	*($10 + [32]) = $8
	*((($10 + [32]) + [8])) = ($8 + [8])
	*((($10 + [32]) + [12])) = ($8 + [9])
	*($10 + [36]) = ($8 + [4])
	CALL $906(($10 + [32]), ($10 + [24]))
	$8 = ($8 + [12])
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$9 }
	
.LABEL $label$8
	$9 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-4227314345542942720, *(*($0 + [8])), $9, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$10 }
	CALL free($7)
	
.LABEL $label$10
	if ( (uint_64)($9 <= *($2 + [16])) ){ goto $label$11 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC $131 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [116])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $956($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($0 + [112]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $956($4)
	
.LABEL $label$1
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$6 }
	$3 = ($0 + [76])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $956($2)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($0 + [72]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $1
	
.LABEL $label$7
	*($3) = $1
	CALL $956($4)
	
.LABEL $label$6
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$11 }
	$3 = ($0 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	CALL $956($2)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($0 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $1
	
.LABEL $label$12
	*($3) = $1
	CALL $956($4)
	
.LABEL $label$11
	return $0
}

void .FUNC $916 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$9 = (*([0] + [4]) - [48])
	$12 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	$10 = *($1 + [8])
	$5 = *(($1 + [12]))
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$4 }
	$7 = ((int_32)($5 - $10) / (int_32)[12])
	$6 = *(*($3))
	$8 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*($10) == (int_32)$6) ){ goto $label$3 }
	$10 = ($10 + [12])
	$8 = ($8 + [1])
	if ( ($8 <= $7) ){ goto $label$5 }
	
.LABEL $label$4
	$10 = *($3 + [4])
	if ( ((int_32)$5 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($5) = *($10)
	*(($5 + [8])) = *(($10 + [8]))
	*(($10 = ($1 + [12]))) = (*($10) + [12])
	goto $label$1 
	
.LABEL $label$3
	*(($10 = ($10 + [4]))) = (*($10) + [1])
	goto $label$1 
	
.LABEL $label$2
	CALL $917(($1 + [8]), $10)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$8 = [8]
	$6 = *(($1 + [8]))
	$10 = *(($1 + [12]))
	$7 = ($10 - $6)
	$11 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[12]))
	
.LOOP $label$6:
	$8 = ($8 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$7 }
	$8 = ((((int_32)((uint_32)($7 + [-12]) / (uint_32)[12]) * (int_32)[7]) + $8) + [7])
	
.LABEL $label$7
	if ( ($8 <= [513]) ){ goto $label$9 }
	$9 = CALL malloc($8)
	goto $label$8 
	
.LABEL $label$9
	$9 = ($9 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$8
	*($12 + [8]) = $9
	$5 = ($9 + $8)
	*($12 + [16]) = $5
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [1920])
	CALL memcpy($9, $1, [8])
	$10 = ($9 + [8])
	*($12 + [12]) = $10
	$11 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [12])) - *(($1 + [8]))) / (int_32)[12]))
	
.LOOP $label$10:
	$6 = (CASTING uint_32)(uint_64 $11)
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	$7 = ((int_64)$11) != (int_64)0
	*($12 + [32]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)($5 - $10) > (int_32)[0]), [1920])
	CALL memcpy($10, ($12 + [32]), [1])
	$10 = ($10 + [1])
	*($12 + [12]) = $10
	if ( $7 ){ goto $label$10 }
	$6 = *(($1 + [12]))
	$10 = *(($1 + [8]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	*($12 + [24]) = ($12 + [8])
	*($12 + [32]) = $10
	*((($12 + [32]) + [8])) = ($10 + [8])
	*((($12 + [32]) + [12])) = ($10 + [9])
	*($12 + [36]) = ($10 + [4])
	CALL $906(($12 + [32]), ($12 + [24]))
	$10 = ($10 + [12])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	CALL db_update_i64(*($1 + [24]), $2, $9, $8)
	if ( ($8 <= [513]) ){ goto $label$13 }
	CALL free($9)
	
.LABEL $label$13
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$14 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*([0] + [4]) = ($12 + [48])
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [20])) = (int_64)0
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	*($2 + [12 align=4]) = (int_64)0
	*($2 + [28]) = [0]
	*($2 + [52]) = $1
	*($2 + [48]) = $1
	*($2 + [56]) = ($1 + $0)
	*($2 + [64]) = ($2 + [48])
	*($2 + [72]) = $2
	CALL $654(($2 + [72]), ($2 + [64]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $655(($2 + [48]), $2)
	$1 = *(($2 + [12]))
	if ( ($1 == 0) ){ goto $label$5 }
	*(($2 + [16])) = $1
	CALL $956($1)
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [80])
	return [1]
}

void .FUNC $914 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	*($7 + [72]) = $1
	*($7 + [68]) = $2
	*($7 + [56]) = $2
	*($7 + [65]) = [0]
	*($7 + [64]) = [1]
	*($7 + [60]) = [1]
	*(($7 + [48])) = [0]
	*($7 + [32]) = (int_64)-1
	*($7 + [40]) = (int_64)0
	$5 = *($0 + [8])
	*($7 + [16]) = $5
	*($7 + [24]) = $5
	$2 = CALL db_find_i64($5, $5, (int_64)-4227314345542942720, $1)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$3 }
	$2 = CALL $269(($7 + [16]), $2)
	CALL eosio_assert(((int_32)*($2 + [20]) == (int_32)($7 + [16])), [1536])
	$5 = *(($0 + [8]))
	*($7 + [12]) = ($7 + [56])
	*($7 + [8]) = ($7 + [68])
	CALL eosio_assert([1], [1696])
	CALL $916(($7 + [16]), $2, $5, ($7 + [8]))
	$3 = *($7 + [40])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *(($0 + [8]))
	*($7 + [12]) = ($7 + [56])
	*($7 + [8]) = ($7 + [72])
	CALL $915($7, ($7 + [16]), $5, ($7 + [8]))
	$3 = *($7 + [40])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($7 + [44])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	$4 = *($0 + [8])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($0 + [12])) = $4
	CALL $956($4)
	
.LABEL $label$8
	CALL $956($0)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($7 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $3
	
.LABEL $label$4
	*($6) = $3
	CALL $956($2)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [80])
}

void .FUNC $915 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([32]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16]) = [0]
	*($3 + [20]) = $1
	CALL $918(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [24])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $270(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [12])) = $1
	CALL $956($1)
	
.LABEL $label$4
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $912 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $955(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $955([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $194(($8 + [28]), [19])
	$2 = *($2)
	$1 = *($8 + [28])
	*($9 + [4]) = $1
	*($9) = $1
	*($9 + [8]) = $2
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	CALL $913(($9 + [24]), ($9 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $956($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $956($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $956($6)
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [32])
	(unreachable)
}

void .FUNC $132 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [96])
	*([0] + [4]) = $13
	*($13 + [80]) = $1
	*($13 + [79]) = $2
	CALL require_auth($1)
	CALL eosio_assert(((($2 + [-1]) & [255]) <= [3]), [2176])
	$11 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$1 }
	$12 = ($8 + [-24])
	$4 = ([0] - $11)
	
.LOOP $label$2:
	if ( ((int_64)*(*($12)) == (int_64)$1) ){ goto $label$1 }
	$8 = $12
	$9 = ($12 + [-24])
	$12 = $9
	if ( ((int_32)($9 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$4 }
	$11 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [20]) == (int_32)$3), [1536])
	goto $label$3 
	
.LABEL $label$4
	$11 = [0]
	$12 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-8872998483271876608, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $144($3, $12)
	CALL eosio_assert(((int_32)*($11 + [20]) == (int_32)$3), [1536])
	
.LABEL $label$3
	$12 = [0]
	$5 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($5, [2256])
	$9 = *($11 + [8])
	$8 = *(($11 + [12]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$6 }
	$8 = int_32(($8 - $9) >> [4])
	
.LOOP $label$7:
	if ( ((int_32)*($9) == (int_32)$2) ){ goto $label$5 }
	$9 = ($9 + [16])
	$12 = ($12 + [1])
	if ( ($12 <= $8) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert([0], [1664])
	$9 = *($11 + [8])
	
.LABEL $label$5
	$7 = *(($6 + [32]))
	$6 = *($0 + [60])
	$2 = *(($6 + [36]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$8 }
	$12 = ($2 + [-24])
	$4 = ([0] - $7)
	
.LOOP $label$9:
	if ( ((int_64)*(*($12)) == (int_64)$1) ){ goto $label$8 }
	$2 = $12
	$8 = ($12 + [-24])
	$12 = $8
	if ( ((int_32)($8 + $4) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	$12 = ($6 + [8])
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$11 }
	$8 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$12), [1536])
	goto $label$10 
	
.LABEL $label$11
	$8 = [0]
	$2 = CALL db_find_i64(*(($6 + [8])), *(($6 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$10 }
	$8 = CALL $186($12, $2)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$12), [1536])
	
.LABEL $label$10
	$4 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($4, [2368])
	$10 = ((int_64)*($9 + [1]) + (int_64)1)
	*($13 + [64]) = $10
	CALL eosio_assert((uint_64)($10 <= (int_64)19), [2752])
	*(($13 + [56])) = [0]
	*($13 + [40]) = (int_64)-1
	*($13 + [48]) = (int_64)0
	$1 = *($0 + [8])
	*($13 + [24]) = $1
	*($13 + [32]) = $1
	$12 = [0]
	$2 = CALL db_find_i64($1, $1, (int_64)-4888770731107680256, $10)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$12 }
	$12 = CALL $248(($13 + [24]), $2)
	CALL eosio_assert(((int_32)*($12 + [16]) == (int_32)($13 + [24])), [1536])
	
.LABEL $label$12
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [2784])
	$2 = *($12 + [12])
	CALL eosio_assert(((uint_32)*($9 + [4]) >= (uint_32)*($12 + [8])), [2816])
	CALL eosio_assert(((uint_32)$2 <= (uint_32)*($8 + [16])), [2848])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$13 }
	$12 = *(($0 + [60]))
	*($13) = $2
	CALL eosio_assert(((uint_32)*(($8 + [16])) >= (uint_32)$2), [2880])
	$1 = *($12)
	*($13 + [88]) = $13
	CALL eosio_assert($4, [1696])
	CALL $249(($12 + [8]), $8, $1, ($13 + [88]))
	
.LABEL $label$13
	$1 = *(($0 + [8]))
	*($13) = $0
	*($13 + [16]) = $9
	*($13 + [4]) = ($13 + [79])
	*($13 + [8]) = ($13 + [64])
	*($13 + [12]) = ($13 + [80])
	CALL eosio_assert($5, [1696])
	CALL $250($3, $11, $1, $13)
	$8 = *($13 + [48])
	if ( ($8 == 0) ){ goto $label$14 }
	$2 = ($13 + [52])
	$12 = *($2)
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$12 = ($12 + [-24])
	$9 = *($12)
	*($12) = [0]
	if ( ($9 == 0) ){ goto $label$18 }
	CALL $956($9)
	
.LABEL $label$18
	if ( ((int_32)$8 != (int_32)$12) ){ goto $label$17 }
	$12 = *(($13 + [48]))
	goto $label$15 
	
.LABEL $label$16
	$12 = $8
	
.LABEL $label$15
	*($2) = $8
	CALL $956($12)
	
.LABEL $label$14
	*([0] + [4]) = ($13 + [96])
}

void .FUNC $910 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $104 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL $446(($0 + [8]), $1, $4, $5)
	*($7 + [8]) = [0]
	*($7) = (int_64)0
	$4 = (*($3 + [4]) - *($3))
	$6 = int_32($4 >> [2])
	if ( ($6 == 0) ){ goto $label$2 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$4 = CALL $955($4)
	*(($7 + [8])) = ($4 + ($6 << [2]))
	*($7) = $4
	*($7 + [4]) = $4
	$6 = *($3)
	$3 = (*(($3 + [4])) - $6)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($4, $6, $3)
	*($7 + [4]) = ($4 + $3)
	
.LABEL $label$2
	CALL $636(($0 + [1208]), $1, $2, $7, $5, [1], [0])
	$3 = *($7)
	if ( ($3 == 0) ){ goto $label$3 }
	*($7 + [4]) = $3
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $971($7)
}

void .FUNC $133 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [192])
	*([0] + [4]) = $16
	$6 = *(($5 + [32]))
	$5 = *($0 + [60])
	$11 = *(($5 + [36]))
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$1 }
	$10 = ($11 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$1 }
	$11 = $10
	$8 = ($10 + [-24])
	$10 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = ($5 + [8])
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$4 }
	$10 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$8), [1536])
	goto $label$3 
	
.LABEL $label$4
	$10 = [0]
	$11 = CALL db_find_i64(*(($5 + [8])), *(($5 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $186($8, $11)
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$8), [1536])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [2368])
	CALL $187(($16 + [184]), *($0 + [56]), $1, [0])
	if ( ($4 == 0) ){ goto $label$6 }
	CALL require_auth($1)
	*($16 + [176]) = *($16 + [184])
	$11 = *(($0 + [56]))
	*($16 + [16 align=4]) = *($16 + [176])
	$11 = CALL $188($11, ($16 + [16]))
	*($16 + [168]) = $8
	*($16 + [172]) = $10
	*($16 + [160]) = *($16 + [184])
	*($16 + [8 align=4]) = *($16 + [168])
	*(($16 + [4])) = *($16 + [164])
	*($16) = *($16 + [160])
	if ( (CALL $189($0, $1, ($16 + [8]), $11, $16) == 0) ){ goto $label$5 }
	$13 = CALL current_time()
	*(($16 + [124])) = [0]
	*(($16 + [128])) = [0]
	*($16 + [108]) = [0]
	*($16 + [112]) = [0]
	*($16 + [116]) = [0]
	*($16 + [120]) = [0]
	*($16 + [96]) = ((CASTING uint_32)(uint_64 ((uint_64)$13 / (uint_64)(int_64)1000000)) + [60])
	*($16 + [132]) = [0]
	*(($16 + [136])) = [0]
	*(($16 + [140])) = [0]
	*($16 + [144]) = [0]
	*(($16 + [148])) = [0]
	*((($16 + [96]) + [56])) = [0]
	$11 = ($0 + [8])
	$7 = ($16 + [132])
	$9 = *($0 + [8])
	$13 = (int_64)0
	$12 = (int_64)59
	$10 = [2400]
	$14 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$12 }
	$8 = *($10)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$8 = ($8 + [165])
	goto $label$10 
	
.LABEL $label$12
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$8
	$10 = ($10 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$7 }
	*($16 + [88]) = $14
	*($16 + [80]) = $9
	$13 = (int_64)0
	$12 = (int_64)59
	$10 = [2416]
	$14 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$13 > (uint_64)(int_64)8) ){ goto $label$18 }
	$8 = *($10)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$8 = ($8 + [165])
	goto $label$16 
	
.LABEL $label$18
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$14
	$10 = ($10 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$13 }
	*($16 + [72]) = $14
	*($16 + [64]) = $2
	*($16 + [56]) = $1
	*($16 + [68]) = $3
	CALL $190($7, ($16 + [80]), $11, ($16 + [72]), ($16 + [56]))
	$13 = *(($0 + [8]))
	$15 = *(*(($0 + [56])) + [144])
	*(($16 + [116])) = [1]
	*($16 + [88]) = (int_64)0
	*($16 + [80]) = $15
	CALL $191(($16 + [56]), ($16 + [96]))
	$10 = *($16 + [56])
	CALL send_deferred(($16 + [80]), $13, $10, (*($16 + [60]) - $10), [0])
	$10 = *($16 + [56])
	if ( ($10 == 0) ){ goto $label$19 }
	*($16 + [60]) = $10
	CALL $956($10)
	
.LABEL $label$19
	CALL $192(($16 + [96]))
	goto $label$5 
	
.LABEL $label$6
	CALL require_auth(*($0 + [8]))
	*($16 + [48]) = $8
	*($16 + [52]) = $10
	*($16 + [40]) = *($16 + [184])
	*($16 + [32 align=4]) = *($16 + [48])
	*(($16 + [28])) = *($16 + [44])
	*($16 + [24]) = *($16 + [40])
	CALL $189($0, $1, ($16 + [32]), [0], ($16 + [24]))
	
.LABEL $label$5
	*([0] + [4]) = ($16 + [192])
}

void .FUNC $723 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $455 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [40]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [72]) = ($5 + [60])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $224(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [64]), $2, $5, [60])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $134 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$18 = (*([0] + [4]) - [64])
	*([0] + [4]) = $18
	CALL require_auth($1)
	CALL eosio_assert(((($2 + [-1]) & [255]) <= [3]), [2176])
	$6 = *(($15 + [40]))
	$15 = *($0 + [68])
	$17 = *(($15 + [44]))
	if ( ((int_32)$17 == (int_32)$6) ){ goto $label$1 }
	$16 = ($17 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($16)) == (int_64)$1) ){ goto $label$1 }
	$17 = $16
	$8 = ($16 + [-24])
	$16 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$16 = ($15 + [16])
	if ( ((int_32)$17 == (int_32)$6) ){ goto $label$4 }
	$13 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$16), [1536])
	goto $label$3 
	
.LABEL $label$4
	$13 = [0]
	$8 = CALL db_find_i64(*(($15 + [16])), *(($15 + [24])), (int_64)8526756653867991040, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$13 = CALL $178($16, $8)
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$16), [1536])
	
.LABEL $label$3
	$14 = *($4)
	$9 = *(($0 + [68]))
	$4 = ( ($13 + [12]) ? ($9 + [68]) : $13 )
	$16 = (*($4 + [4]) - $14)
	if ( ((int_32)$16 < (int_32)[20]) ){ goto $label$6 }
	$8 = (((uint_32)$16 / (uint_32)[20]) + [-1])
	$16 = [0]
	
.LOOP $label$7:
	$15 = ($8 - $16)
	$17 = (((int_32)$15 / (int_32)[2]) + $16)
	$6 = ($14 + ((int_32)$17 * (int_32)[20]))
	$7 = *($6)
	if ( ($7 <= $3) ){ goto $label$8 }
	if ( ((uint_32)$7 <= (uint_32)$3) ){ goto $label$5 }
	$8 = ($17 + [-1])
	if ( ((int_32)$15 > (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$16 = ($17 + [1])
	if ( ((int_32)$8 > (int_32)$17) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert([0], [2112])
	$6 = ($9 + [80])
	
.LABEL $label$5
	CALL eosio_assert((*($6 + [16]) == 0), [2208])
	$8 = [0]
	*(($18 + [32])) = [0]
	*($18 + [24]) = (int_64)0
	*($18 + [16]) = (int_64)-1
	$5 = *($0 + [8])
	*($18) = $5
	*($18 + [8]) = $5
	$14 = [0]
	$16 = CALL db_find_i64($5, $5, (int_64)-4921685625297436672, *($6 + [4]))
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$9 }
	$14 = CALL $167($18, $16)
	CALL eosio_assert(((int_32)*($14 + [52]) == (int_32)$18), [1536])
	
.LABEL $label$9
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [2016])
	$16 = *($14 + [9])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$11 }
	if ( ((int_32)($16 & [255]) == (int_32)[2]) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$2 == (int_32)[2]) ){ goto $label$12 }
	if ( ((int_32)($16 & [255]) == (int_32)[3]) ){ goto $label$10 }
	
.LABEL $label$12
	$8 = (((int_32)$2 == (int_32)[3]) | ((int_32)($16 & [255]) != (int_32)[4]))
	
.LABEL $label$10
	CALL eosio_assert($8, [2224])
	$15 = *(($0 + [40]))
	$17 = *(($0 + [44]))
	if ( ((int_32)$17 == (int_32)$15) ){ goto $label$13 }
	$16 = ($17 + [-24])
	$7 = ([0] - $15)
	
.LOOP $label$14:
	if ( ((int_64)*(*($16)) == (int_64)$1) ){ goto $label$13 }
	$17 = $16
	$8 = ($16 + [-24])
	$16 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	$16 = ($0 + [16])
	if ( ((int_32)$17 == (int_32)$15) ){ goto $label$16 }
	$7 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)$16), [1536])
	goto $label$15 
	
.LABEL $label$16
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-8872998483271876608, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$15 }
	$7 = CALL $144($16, $8)
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)$16), [1536])
	
.LABEL $label$15
	$8 = [0]
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [2256])
	$16 = *($7 + [8])
	$17 = *(($7 + [12]))
	if ( ((int_32)$17 == (int_32)$16) ){ goto $label$18 }
	$17 = int_32(($17 - $16) >> [4])
	
.LOOP $label$19:
	if ( ((int_32)*($16) == (int_32)$2) ){ goto $label$17 }
	$16 = ($16 + [16])
	$8 = ($8 + [1])
	if ( ($8 <= $17) ){ goto $label$19 }
	
.LABEL $label$18
	CALL eosio_assert([0], [1664])
	$16 = *($7 + [8])
	
.LABEL $label$17
	CALL eosio_assert(((uint_32)*($14 + [11]) <= (uint_32)*($16 + [1])), [2288])
	$16 = *($4)
	$9 = ($4 + [4])
	$8 = *($9)
	if ( ((int_32)$8 == (int_32)$16) ){ goto $label$20 }
	$10 = ($18 + [24])
	$11 = ($18 + [28])
	$12 = ($18 + [8])
	$15 = [0]
	
.LOOP $label$22:
	$17 = ($16 + ((int_32)$15 * (int_32)[20]))
	if ( ((int_32)*($17 + [6]) != (int_32)$2) ){ goto $label$23 }
	$5 = *($17 + [4])
	$6 = *($10)
	$17 = *($11)
	if ( ((int_32)$17 == (int_32)$6) ){ goto $label$24 }
	$16 = ($17 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$25:
	if ( ((int_64)*(*($16)) == (int_64)$5) ){ goto $label$24 }
	$17 = $16
	$8 = ($16 + [-24])
	$16 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$25 }
	
.LABEL $label$24
	if ( ((int_32)$17 == (int_32)$6) ){ goto $label$27 }
	$16 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [52]) == (int_32)$18), [1536])
	goto $label$26 
	
.LABEL $label$27
	$16 = [0]
	$8 = CALL db_find_i64(*($18), *($12), (int_64)-4921685625297436672, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$26 }
	$16 = CALL $167($18, $8)
	CALL eosio_assert(((int_32)*($16 + [52]) == (int_32)$18), [1536])
	
.LABEL $label$26
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [2336])
	if ( ((int_32)*($16 + [8]) == (int_32)*(($14 + [8]))) ){ goto $label$21 }
	$8 = *($9)
	$16 = *($4)
	
.LABEL $label$23
	$15 = ($15 + [1])
	if ( ($15 <= ((int_32)($8 - $16) / (int_32)[20])) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$16 = *(($0 + [68]))
	*($18 + [60]) = *((*($4) + ((int_32)$15 * (int_32)[20])))
	*($18 + [59]) = [0]
	*($18 + [58]) = [0]
	$5 = *($16 + [8])
	*($18 + [44]) = ($18 + [59])
	*($18 + [40]) = ($18 + [60])
	*($18 + [48]) = ($18 + [58])
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [1696])
	CALL $179(($16 + [16]), $13, $5, ($18 + [40]))
	CALL eosio_assert(*($18 + [58]), [2144])
	
.LABEL $label$20
	$16 = *(($0 + [68]))
	*($18 + [60]) = $3
	*($18 + [59]) = $2
	$5 = *($16 + [8])
	*($18 + [58]) = [0]
	*($18 + [44]) = ($18 + [59])
	*($18 + [40]) = ($18 + [60])
	*($18 + [48]) = ($18 + [58])
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [1696])
	CALL $179(($16 + [16]), $13, $5, ($18 + [40]))
	CALL eosio_assert(*($18 + [58]), [2144])
	CALL void $0((int_32 $1), (int_64 $2), (int_32 *(*($0) + [16])))
	$17 = *($18 + [24])
	if ( ($17 == 0) ){ goto $label$28 }
	$7 = ($18 + [28])
	$16 = *($7)
	if ( ((int_32)$16 == (int_32)$17) ){ goto $label$30 }
	
.LOOP $label$31:
	$16 = ($16 + [-24])
	$8 = *($16)
	*($16) = [0]
	if ( ($8 == 0) ){ goto $label$32 }
	CALL $956($8)
	
.LABEL $label$32
	if ( ((int_32)$17 != (int_32)$16) ){ goto $label$31 }
	$16 = *(($18 + [24]))
	goto $label$29 
	
.LABEL $label$30
	$16 = $17
	
.LABEL $label$29
	*($7) = $17
	CALL $956($16)
	
.LABEL $label$28
	*([0] + [4]) = ($18 + [64])
}

int_32 .FUNC $678 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [10]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [12]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [14]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [18]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC $106 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*(($0 + [148])) = $4
	*($7) = (int_64)0
	*($7 + [8]) = [0]
	$6 = (*($3 + [4]) - *($3))
	$5 = int_32($6 >> [2])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$6 = CALL $955($6)
	*(($7 + [8])) = ($6 + ($5 << [2]))
	*($7) = $6
	*($7 + [4]) = $6
	$5 = *($3)
	$3 = (*(($3 + [4])) - $5)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($6, $5, $3)
	*($7 + [4]) = ($6 + $3)
	
.LABEL $label$2
	CALL $636(($0 + [1208]), $1, $2, $7, $4, [0], [0])
	$3 = *($7)
	if ( ($3 == 0) ){ goto $label$3 }
	*($7 + [4]) = $3
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $971($7)
}

void .FUNC $135 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [32])
	*([0] + [4]) = $14
	CALL require_auth($1)
	$13 = *(($5 + [40]))
	$5 = *($0 + [68])
	$6 = *(($5 + [44]))
	if ( ((int_32)$6 == (int_32)$13) ){ goto $label$1 }
	$10 = ($6 + [-24])
	$7 = ([0] - $13)
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$1 }
	$6 = $10
	$3 = ($10 + [-24])
	$10 = $3
	if ( ((int_32)($3 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$10 = ($5 + [16])
	if ( ((int_32)$6 == (int_32)$13) ){ goto $label$4 }
	$11 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)$10), [1536])
	goto $label$3 
	
.LABEL $label$4
	$11 = [0]
	$3 = CALL db_find_i64(*(($5 + [16])), *(($5 + [24])), (int_64)8526756653867991040, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $178($10, $3)
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)$10), [1536])
	
.LABEL $label$3
	$4 = *($10)
	$8 = ($0 + [68])
	$12 = *($8)
	$10 = ( ($11 + [12]) ? ($12 + [68]) : $11 )
	$10 = (*($10 + [4]) - $4)
	if ( ((int_32)$10 < (int_32)[20]) ){ goto $label$6 }
	$3 = (((uint_32)$10 / (uint_32)[20]) + [-1])
	$10 = [0]
	
.LOOP $label$7:
	$5 = ($3 - $10)
	$6 = (((int_32)$5 / (int_32)[2]) + $10)
	$13 = ($4 + ((int_32)$6 * (int_32)[20]))
	$7 = *($13)
	if ( ($7 <= $2) ){ goto $label$8 }
	if ( ((uint_32)$7 <= (uint_32)$2) ){ goto $label$5 }
	$3 = ($6 + [-1])
	if ( ((int_32)$5 > (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$10 = ($6 + [1])
	if ( ((int_32)$3 > (int_32)$6) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert([0], [2112])
	$13 = ($12 + [80])
	$12 = *($8)
	
.LABEL $label$5
	$10 = *($13 + [6])
	*($14 + [28]) = $2
	*($14 + [27]) = [0]
	*($14 + [26]) = [0]
	$9 = *($12 + [8])
	*($14 + [12]) = ($14 + [27])
	*($14 + [8]) = ($14 + [28])
	*($14 + [16]) = ($14 + [26])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [1696])
	CALL $179(($12 + [16]), $11, $9, ($14 + [8]))
	CALL eosio_assert(*($14 + [26]), [2144])
	CALL void $0((int_32 $1), (int_64 $10), (int_32 *(*($0) + [16])))
	*([0] + [4]) = ($14 + [32])
}

void .FUNC $136 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	*($9 + [63]) = $2
	$4 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$5 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)$3), [1536])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$7 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-8872998483271876608, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $144($3, $7)
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)$3), [1536])
	
.LABEL $label$3
	$6 = [0]
	$4 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($4, [1664])
	$7 = *($5 + [8])
	$8 = *(($5 + [12]))
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$6 }
	$8 = int_32(($8 - $7) >> [4])
	
.LOOP $label$7:
	if ( ((int_32)*($7) == (int_32)$2) ){ goto $label$5 }
	$7 = ($7 + [16])
	$6 = ($6 + [1])
	if ( ($6 <= $8) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert([0], [1664])
	$7 = *($5 + [8])
	
.LABEL $label$5
	CALL $149(($9 + [16]), $0, $1, $7)
	$1 = *($0 + [8])
	*($9 + [12]) = ($9 + [16])
	*($9 + [8]) = ($9 + [63])
	CALL eosio_assert($4, [1696])
	CALL $150($3, $5, $1, ($9 + [8]))
	*([0] + [4]) = ($9 + [64])
}

int_32 .FUNC $137 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL $143(($6 + [8]), ($0 + [16]), $1)
	$5 = [0]
	$0 = *($0 + [8])
	$0 = *($6 + [12])
	$4 = *(($0 + [12]))
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$1 }
	$3 = int_32(($4 - $0) >> [4])
	$4 = [0]
	
.LOOP $label$2:
	$5 = [1]
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [16])
	$4 = ($4 + [1])
	if ( ($4 <= $3) ){ goto $label$2 }
	$5 = [0]
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [16])
	return $5
}

void .FUNC $536 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $6) / (int_32)[56]) >= (uint_32)$1) ){ goto $label$4 }
	$5 = *($0)
	$3 = ((int_32)($6 - $5) / (int_32)[56])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[76695845]) ){ goto $label$2 }
	$7 = [76695844]
	$2 = ((int_32)($2 - $5) / (int_32)[56])
	if ( ((uint_32)$2 > (uint_32)[38347921]) ){ goto $label$5 }
	$7 = ($2 << [1])
	$7 = ( $4 ? $7 : ($7 <= $4) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL $955(((int_32)$7 * (int_32)[56]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	*(($0 + [4])) = ($6 + ((int_32)$1 * (int_32)[56]))
	return (unreachable)
	
.LABEL $label$3
	$7 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$3 = ($2 + ((int_32)$3 * (int_32)[56]))
	$4 = ($3 + ((int_32)$1 * (int_32)[56]))
	$1 = ($6 - $5)
	$6 = ($3 + ((int_32)((int_32)$1 / (int_32)[-56]) * (int_32)[56]))
	$7 = ($2 + ((int_32)$7 * (int_32)[56]))
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $4
	*(($0 + [8])) = $7
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $956($5)
	
.LABEL $label$7
}

void .FUNC $655 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	*([0] + [4]) = $11
	*($11) = (int_64)0
	$8 = [0]
	*($11 + [8]) = [0]
	$3 = *($1 + [8])
	$2 = *($1)
	$9 = (*(($1 + [16])) - *($1 + [12]))
	$6 = int_32($9 >> [2])
	if ( ($6 == 0) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	$9 = CALL $955($9)
	*(($11 + [8])) = ($9 + ($6 << [2]))
	*($11) = $9
	*($11 + [4]) = $9
	$6 = *(($1 + [12]))
	$8 = (*(($1 + [16])) - $6)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($9, $6, $8)
	$8 = ($9 + $8)
	*($11 + [4]) = $8
	goto $label$4 
	
.LABEL $label$6
	$9 = [0]
	$10 = [0]
	$7 = [0]
	goto $label$3 
	
.LABEL $label$5
	$8 = $9
	
.LABEL $label$4
	$10 = $9
	$7 = $9
	
.LABEL $label$3
	$5 = *($1 + [28])
	$4 = *($1 + [24])
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$6 = (*(*($0)) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($6) + $1))
	
.LABEL $label$7
	*($11 + [24]) = [0]
	*($11 + [16]) = (int_64)0
	$0 = ($8 - $7)
	$7 = int_32($0 >> [2])
	if ( ($7 == 0) ){ goto $label$8 }
	if ( ((uint_32)$7 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$0 = CALL $955($0)
	*(($11 + [24])) = ($0 + ($7 << [2]))
	*($11 + [16]) = $0
	*($11 + [20]) = $0
	$8 = ($8 - $10)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($0, $9, $8)
	*($11 + [20]) = ($0 + $8)
	
.LABEL $label$8
	CALL void $6((int_32 $2), (int_64 ($3 & [65535])), (int_32 ($11 + [16])), (int_32 $4), (int_32 $5), (int_32 $1))
	$1 = *($11 + [16])
	if ( ($1 == 0) ){ goto $label$9 }
	*($11 + [20]) = $1
	CALL $956($1)
	
.LABEL $label$9
	$1 = *($11)
	if ( ($1 == 0) ){ goto $label$10 }
	*($11 + [4]) = $1
	CALL $956($1)
	
.LABEL $label$10
	*([0] + [4]) = ($11 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $971($11)
	
.LABEL $label$1
	CALL $971(($11 + [16]))
	(unreachable)
}

void .FUNC $654 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy(($2 + [8]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	CALL $633(*($1), ($2 + [12]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($2 + [24]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($2 + [28]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $657 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	CALL $663($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	*(($3 = $6)) = [0]
	CALL $606($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	CALL $607($3, $1)
	CALL db_update_i64(*($1 + [68]), $2, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $656 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$20 = (*([0] + [4]) - [176])
	*([0] + [4]) = $20
	*($20 + [168]) = $1
	*($20 + [166]) = $2
	CALL require_auth($1)
	$8 = *(($19 + [32]))
	$19 = *($0 + [16])
	$16 = *(($19 + [36]))
	if ( ((int_32)$16 == (int_32)$8) ){ goto $label$1 }
	$17 = ($16 + [-24])
	$18 = ([0] - $8)
	
.LOOP $label$2:
	if ( ((int_64)*(*($17)) == (int_64)$1) ){ goto $label$1 }
	$16 = $17
	$14 = ($17 + [-24])
	$17 = $14
	if ( ((int_32)($14 + $18) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$14 = ($19 + [8])
	if ( ((int_32)$16 == (int_32)$8) ){ goto $label$4 }
	$17 = *(($16 + [-24]))
	CALL eosio_assert(((int_32)*($17 + [24]) == (int_32)$14), [1536])
	goto $label$3 
	
.LABEL $label$4
	$17 = [0]
	$16 = CALL db_find_i64(*(($19 + [8])), *(($19 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$3 }
	$17 = CALL $186($14, $16)
	CALL eosio_assert(((int_32)*($17 + [24]) == (int_32)$14), [1536])
	
.LABEL $label$3
	$19 = [0]
	CALL eosio_assert(((int_32)$17 != (int_32)[0]), [2368])
	*($20 + [160]) = (int_64))(((uint_64)CALL publication_time() / (uint_64)(int_64)1000000) - *([0] + [12]))
	*(($20 + [152])) = [0]
	*($20 + [136]) = (int_64)-1
	*($20 + [144]) = (int_64)0
	$10 = *($0)
	*($20 + [120]) = $10
	*($20 + [128]) = $10
	$14 = CALL db_find_i64($10, $10, (int_64)-5011039453897031680, (CASTING uint_64)(uint_32 $2))
	if ( ((int_32)$14 <= (int_32)[-1]) ){ goto $label$6 }
	$19 = CALL $602(($20 + [120]), $14)
	CALL eosio_assert(((int_32)*($19 + [56]) == (int_32)($20 + [120])), [1536])
	*($20 + [116]) = $19
	*($20 + [112]) = ($20 + [120])
	$1 = *($20 + [168])
	goto $label$5 
	
.LABEL $label$6
	*($20 + [116]) = [0]
	*($20 + [112]) = ($20 + [120])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$19 != (int_32)[0]), [6464])
	CALL eosio_assert(((uint_32)*($19 + [12]) <= (uint_32)*($17 + [20])), [6896])
	*(($20 + [104])) = [0]
	*($20 + [88]) = (int_64)-1
	*($20 + [96]) = (int_64)0
	$10 = *($0)
	*($20 + [72]) = $10
	*($20 + [80]) = $10
	$3 = [0]
	$17 = CALL db_find_i64($10, $10, (int_64)5667434139083603968, $1)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$7 }
	$3 = CALL $601(($20 + [72]), $17)
	CALL eosio_assert(((int_32)*($3 + [64]) == (int_32)($20 + [72])), [1536])
	$19 = *($20 + [116])
	
.LABEL $label$7
	$4 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($4, [6416])
	$2 = [-1]
	$14 = [-1]
	$17 = *($3 + [8])
	$18 = *(($3 + [12]))
	if ( ((int_32)$18 == (int_32)$17) ){ goto $label$8 }
	$16 = *($19 + [9])
	$18 = int_32(($18 - $17) >> [4])
	$14 = [0]
	
.LOOP $label$9:
	if ( ((int_32)*($17) == (int_32)$16) ){ goto $label$8 }
	$17 = ($17 + [16])
	$14 = ($14 + [1])
	if ( ($14 <= $18) ){ goto $label$9 }
	$14 = [-1]
	
.LABEL $label$8
	*($20 + [68]) = $14
	CALL eosio_assert(((int_32)uint_32($14 >> [31]) ^ (int_32)[1]), [6928])
	$17 = (*(($3 + [8])) + ($14 << [4]))
	CALL eosio_assert(((uint_32)(*($17 + [8]) + *($17 + [2])) >= (uint_32)*($19 + [10])), [6928])
	$8 = *($20 + [166])
	$14 = *($3 + [32])
	$16 = *(($3 + [36]))
	if ( ((int_32)$16 == (int_32)$14) ){ goto $label$10 }
	$17 = ($14 + [4])
	$18 = int_32(($16 - $14) >> [5])
	$14 = [0]
	$16 = ($8 & [65535])
	
.LOOP $label$12:
	if ( ((int_32)*($17) == (int_32)$16) ){ goto $label$11 }
	$17 = ($17 + [32])
	$14 = ($14 + [1])
	if ( ($14 <= $18) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$2 = $14
	
.LABEL $label$10
	*($20 + [64]) = $2
	$19 = [-1]
	$17 = *($3 + [20])
	$14 = *(($3 + [24]))
	if ( ((int_32)$14 == (int_32)$17) ){ goto $label$13 }
	$18 = int_32(($14 - $17) >> [5])
	$14 = [0]
	$16 = ($8 & [65535])
	
.LOOP $label$15:
	if ( ((int_32)*($17) == (int_32)$16) ){ goto $label$14 }
	$17 = ($17 + [32])
	$14 = ($14 + [1])
	if ( ($14 <= $18) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$19 = $14
	
.LABEL $label$13
	CALL eosio_assert(uint_32($19 >> [31]), [6960])
	$1 = *($20 + [168])
	$2 = *(($19 + [40]))
	$19 = *($0 + [20])
	$16 = *(($19 + [44]))
	if ( ((int_32)$16 == (int_32)$2) ){ goto $label$16 }
	$17 = ($16 + [-24])
	$18 = ([0] - $2)
	
.LOOP $label$17:
	if ( ((int_64)*(*($17)) == (int_64)$1) ){ goto $label$16 }
	$16 = $17
	$14 = ($17 + [-24])
	$17 = $14
	if ( ((int_32)($14 + $18) != (int_32)[-24]) ){ goto $label$17 }
	
.LABEL $label$16
	$14 = ($19 + [16])
	if ( ((int_32)$16 == (int_32)$2) ){ goto $label$19 }
	$17 = *(($16 + [-24]))
	CALL eosio_assert(((int_32)*($17 + [20]) == (int_32)$14), [1536])
	goto $label$18 
	
.LABEL $label$19
	$17 = [0]
	$16 = CALL db_find_i64(*(($19 + [16])), *(($19 + [24])), (int_64)-8872998483271876608, $1)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$18 }
	$17 = CALL $144($14, $16)
	CALL eosio_assert(((int_32)*($17 + [20]) == (int_32)$14), [1536])
	
.LABEL $label$18
	$5 = ( ($17 + [8]) ? ($19 + [76]) : $17 )
	CALL eosio_assert(((int_32)(*($5 + [4]) - *($5)) == (int_32)[48]), [6992])
	*(($11 = (($20 + [32]) + [20]))) = [0]
	*(($12 = (($20 + [32]) + [24]))) = [0]
	*($20 + [40]) = (int_64)0
	*($20 + [36]) = [0]
	*($20 + [48]) = [0]
	*($20 + [32]) = *($20 + [166])
	$7 = ($20 + [16])
	$6 = (($20 + [32]) + [16])
	$13 = ($20 + [12])
	$15 = ($5 + [4])
	$8 = [1]
	
.LOOP $label$21:
	*($13) = (int_64)0
	*(($14 = ($20 + [20]))) = (int_64)0
	*($20 + [4 align=4]) = (int_64)0
	*($20) = [0]
	$16 = [0]
	$17 = *($5)
	$18 = *($15)
	if ( ((int_32)$18 == (int_32)$17) ){ goto $label$22 }
	$19 = int_32(($18 - $17) >> [4])
	$16 = [0]
	
.LOOP $label$24:
	$18 = *($17)
	if ( ((int_32)$18 == (int_32)$8) ){ goto $label$23 }
	$17 = ($17 + [16])
	$16 = ($16 + [1])
	if ( ($16 <= $19) ){ goto $label$24 }
	$16 = [0]
	goto $label$22 
	
.LABEL $label$23
	*(($20 + [8])) = *(($17 + [10]))
	*($13) = *(($17 + [12]))
	*($20) = $18
	*($20 + [4]) = *(($17 + [8]))
	$16 = [1]
	
.LABEL $label$22
	CALL eosio_assert($16, [1664])
	$1 = *($20 + [168])
	$9 = *(($2 + [112]))
	$2 = *(($0 + [20]))
	$18 = *(($2 + [116]))
	if ( ((int_32)$18 == (int_32)$9) ){ goto $label$25 }
	$17 = ($18 + [-24])
	$19 = ([0] - $9)
	
.LOOP $label$26:
	if ( ((int_64)*(*($17)) == (int_64)$1) ){ goto $label$25 }
	$18 = $17
	$16 = ($17 + [-24])
	$17 = $16
	if ( ((int_32)($16 + $19) != (int_32)[-24]) ){ goto $label$26 }
	
.LABEL $label$25
	$17 = ($2 + [88])
	if ( ((int_32)$18 == (int_32)$9) ){ goto $label$32 }
	$16 = *(($18 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [44]) == (int_32)$17), [1536])
	if ( $16 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$16 = CALL db_find_i64(*($17), *(($2 + [96])), (int_64)-8866593457838227456, $1)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$30 }
	$16 = CALL $658($17, $16)
	CALL eosio_assert(((int_32)*($16 + [44]) == (int_32)$17), [1536])
	
.LABEL $label$31
	if ( ((int_32)$8 == (int_32)[3]) ){ goto $label$29 }
	if ( ((int_32)$8 == (int_32)[2]) ){ goto $label$28 }
	((int_32)$8 != (int_32)[1])
	$16 = ($16 + [8])
	goto $label$27 
	
.LABEL $label$30
	$16 = ($2 + [128])
	goto $label$27 
	
.LABEL $label$29
	$16 = ($16 + [32])
	goto $label$27 
	
.LABEL $label$28
	$16 = ($16 + [20])
	
.LABEL $label$27
	CALL eosio_assert(((uint_32)int_32((*($16 + [4]) - *($16)) >> [3]) > (uint_32)[4]), [7024])
	$18 = *($16)
	if ( ((int_32)*($16 + [4]) == (int_32)$18) ){ goto $label$33 }
	$17 = [0]
	$19 = [0]
	
.LOOP $label$34:
	$18 = ($18 + $17)
	$2 = *($14)
	if ( ((int_32)$2 == (int_32)*(($20 + [24]))) ){ goto $label$36 }
	*($2) = *($18)
	*($14) = (*($14) + [8])
	goto $label$35 
	
.LABEL $label$36
	CALL $660($7, $18)
	
.LABEL $label$35
	$17 = ($17 + [8])
	$18 = *($16)
	$19 = ($19 + [1])
	if ( ($19 <= int_32((*(($16 + [4])) - $18) >> [3])) ){ goto $label$34 }
	
.LABEL $label$33
	$17 = *($11)
	if ( ((int_32)$17 == (int_32)*($12)) ){ goto $label$39 }
	*($17) = *($20)
	*($17 + [16 align=4]) = (int_64)0
	*(($17 + [8])) = *(($20 + [8]))
	*(($19 = ($17 + [24]))) = [0]
	$16 = (*($14) - *($7))
	$18 = int_32($16 >> [3])
	if ( ($18 == 0) ){ goto $label$40 }
	$2 = ($17 + [16])
	if ( ((uint_32)$18 >= (uint_32)[536870912]) ){ goto $label$20 }
	$16 = CALL $955($16)
	*($2) = $16
	*($19) = ($16 + ($18 << [3]))
	*(($17 = ($17 + [20]))) = $16
	$19 = *($7)
	$18 = (*($14) - $19)
	if ( ((int_32)$18 < (int_32)[1]) ){ goto $label$40 }
	CALL memcpy($16, $19, $18)
	*($17) = (*($17) + $18)
	
.LABEL $label$40
	*($11) = (*($11) + [28])
	$17 = *($7)
	if ( $17 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	CALL $659($6, $20)
	$17 = *($7)
	if ( ($17 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	*($14) = $17
	CALL $956($17)
	
.LABEL $label$37
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[4]) ){ goto $label$21 }
	$1 = *($0)
	*($20 + [20]) = $0
	*($20 + [4]) = ($20 + [160])
	*($20) = ($20 + [64])
	*($20 + [8]) = ($20 + [166])
	*($20 + [12]) = ($20 + [68])
	*($20 + [16]) = ($20 + [112])
	*($20 + [24]) = ($20 + [168])
	*($20 + [28]) = ($20 + [32])
	CALL eosio_assert($4, [1696])
	CALL $657(($20 + [72]), $3, $1, $20)
	$18 = *(($20 + [48]))
	if ( ($18 == 0) ){ goto $label$41 }
	$17 = $18
	$19 = ($20 + [52])
	$14 = *($19)
	if ( ((int_32)$14 == (int_32)$18) ){ goto $label$42 }
	$16 = ([0] - $18)
	$17 = ($14 + [-12])
	
.LOOP $label$43:
	$14 = *($17)
	if ( ($14 == 0) ){ goto $label$44 }
	*(($17 + [4])) = $14
	CALL $956($14)
	
.LABEL $label$44
	$17 = ($17 + [-28])
	if ( ((int_32)($17 + $16) != (int_32)[-12]) ){ goto $label$43 }
	$17 = *(($20 + [48]))
	
.LABEL $label$42
	*($19) = $18
	CALL $956($17)
	
.LABEL $label$41
	$16 = *($20 + [96])
	if ( ($16 == 0) ){ goto $label$45 }
	$18 = ($20 + [100])
	$17 = *($18)
	if ( ((int_32)$17 == (int_32)$16) ){ goto $label$47 }
	$17 = ($17 + [-24])
	
.LOOP $label$48:
	$14 = CALL $604($17)
	$17 = ($17 + [-24])
	if ( ((int_32)$14 != (int_32)$16) ){ goto $label$48 }
	$17 = *(($20 + [96]))
	goto $label$46 
	
.LABEL $label$47
	$17 = $16
	
.LABEL $label$46
	*($18) = $16
	CALL $956($17)
	
.LABEL $label$45
	$16 = *($20 + [144])
	if ( ($16 == 0) ){ goto $label$49 }
	$18 = ($20 + [148])
	$17 = *($18)
	if ( ((int_32)$17 == (int_32)$16) ){ goto $label$51 }
	
.LOOP $label$52:
	$17 = ($17 + [-24])
	$14 = *($17)
	*($17) = [0]
	if ( ($14 == 0) ){ goto $label$53 }
	CALL $956($14)
	
.LABEL $label$53
	if ( ((int_32)$16 != (int_32)$17) ){ goto $label$52 }
	$17 = *(($20 + [144]))
	goto $label$50 
	
.LABEL $label$51
	$17 = $16
	
.LABEL $label$50
	*($18) = $16
	CALL $956($17)
	
.LABEL $label$49
	*([0] + [4]) = ($20 + [176])
	return (unreachable)
	
.LABEL $label$20
	CALL $971($2)
}

int_32 .FUNC $651 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($2 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = *($2 + [32])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($2 + [36])) = $3
	CALL $956($3)
	
.LABEL $label$4
	$3 = *($2 + [20])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($2 + [24])) = $3
	CALL $956($3)
	
.LABEL $label$5
	$3 = *($2 + [8])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [12])) = $3
	CALL $956($3)
	
.LABEL $label$6
	CALL $956($2)
	
.LABEL $label$3
	$2 = *($4)
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $956($2)
	
.LABEL $label$7
	return $0
}

int_32 .FUNC $229 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $558 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $559 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($0 + [12]) = $1
	$3 = *(*(*($2 + [4])) + [48])
	*($0 + [8]) = [1]
	$1 = *($2)
	*($0) = $3
	CALL eosio_assert([1], [1920])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($4 | [8]), ($0 + [8]), [2])
	$3 = *($0)
	*($0 + [16]) = CALL db_store_i64(*($1 + [8]), (int_64)-4695710445447675904, *(*($2 + [8])), $3, $4, [10])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

int_32 .FUNC $224 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [12]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [17]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [18]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [20]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [22]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [26]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [27]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [28]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [30]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [36]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [38]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [44]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [45]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [46]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [50]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [52]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [54]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [58]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	return $0
}

void .FUNC $225 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*(($4 = CALL $955([80])) + [32]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56]) = (int_64)0
	*($4 + [64]) = $1
	*($4) = (int_64)0
	*($4 + [8]) = *(*($3))
	*($4 + [16]) = *(*($3 + [4]))
	*($8 + [88]) = (($8 + [16]) + [60])
	*($8 + [84]) = ($8 + [16])
	*($8 + [80]) = ($8 + [16])
	CALL $228(($8 + [80]), $4)
	$5 = *($4)
	*($4 + [68]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551873908736, $2, $5, ($8 + [16]), [60])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [80]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [68])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [80]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $230(($1 + [24]), ($8 + [80]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [80])
	*($8 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $956($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [96])
}

int_32 .FUNC $226 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $955([80])) + [8]) = (int_64)0
	*($6) = (int_64)0
	*($6 + [16]) = [0]
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = (int_64)0
	*($6 + [40]) = (int_64)0
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = (int_64)0
	*($6 + [64]) = $0
	CALL $229(($8 + [32]), $6)
	*($6 + [68]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [68])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $230(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $555 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [12]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	$3 = *(*($3))
	*($1) = *($3)
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	CALL eosio_assert([1], [1920])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($6 | [8]), $5, [4])
	CALL db_update_i64(*($1 + [16]), $2, $6, [12])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $659 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $8) / (int_32)[28])
	$6 = ($7 + [1])
	if ( ((uint_32)$6 >= (uint_32)[153391690]) ){ goto $label$2 }
	$5 = [153391689]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[28])
	if ( ((uint_32)$8 > (uint_32)[76695843]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$5 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$5 * (int_32)[28]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$7 * (int_32)[28])))) = *($1)
	*($8 + [16 align=4]) = (int_64)0
	*(($8 + [8])) = *(($1 + [8]))
	*(($2 = ($8 + [24]))) = [0]
	$7 = (*(($1 + [20])) - *($1 + [16]))
	$4 = int_32($7 >> [3])
	if ( ($4 == 0) ){ goto $label$6 }
	$3 = ($8 + [16])
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$5 }
	$7 = CALL $955($7)
	*($3) = $7
	*(($3 = ($8 + [20]))) = $7
	*($2) = ($7 + ($4 << [3]))
	$4 = *(($1 + [16]))
	$1 = (*(($1 + [20])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($7, $4, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$6
	$2 = ($6 + ((int_32)$5 * (int_32)[28]))
	$3 = ($8 + [28])
	$1 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$4 = ([0] - $1)
	$1 = ($5 + [-28])
	
.LOOP $label$9:
	*(($8 + [-28])) = *($1)
	*(($8 + [-20])) = *(($1 + [8]))
	*(($5 = ($8 + [-12]))) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($1 + [16])
	*($5) = *($7)
	*(($8 + [-8])) = *(($1 + [20]))
	$5 = ($1 + [24])
	*($6) = *($5)
	*($5) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-28])
	$1 = ($1 + [-28])
	if ( ((int_32)($1 + $4) != (int_32)[-28]) ){ goto $label$9 }
	$1 = *(($0 + [4]))
	$6 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$6 = $1
	
.LABEL $label$7
	*($0) = $8
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$10 }
	$5 = ([0] - $6)
	$8 = ($1 + [-12])
	
.LOOP $label$11:
	$1 = *($8)
	if ( ($1 == 0) ){ goto $label$12 }
	*(($8 + [4])) = $1
	CALL $956($1)
	
.LABEL $label$12
	$8 = ($8 + [-28])
	if ( ((int_32)($8 + $5) != (int_32)[-12]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $956($6)
	
.LABEL $label$13
	return (unreachable)
	
.LABEL $label$5
	CALL $971($3)
	(unreachable)
}

void .FUNC $553 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*(($1 + [12])) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [8]) = (*($1 + [8]) + [1])
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	CALL eosio_assert([1], [1920])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($5 | [8]), ($1 + [8]), [2])
	CALL db_update_i64(*($1 + [16]), $2, $5, [10])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $550 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [64])
	*([0] + [4]) = $12
	CALL require_auth(*($0 + [40]))
	if ( ($2 == 0) ){ goto $label$1 }
	CALL $551($0, [9999])
	
.LABEL $label$1
	$2 = *($1)
	*($12 + [8]) = $2
	if ( ((int_32)$2 == (int_32)*($1 + [4])) ){ goto $label$2 }
	$6 = ($0 + [24])
	$7 = ($0 + [28])
	$8 = ($0 + [8])
	$9 = ($0 + [40])
	$10 = ($1 + [4])
	
.LOOP $label$3:
	$3 = *($2)
	$4 = *($6)
	$11 = *($7)
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$4 }
	$2 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$5:
	if ( ((int_64)*(*($2)) == (int_64)$3) ){ goto $label$4 }
	$11 = $2
	$1 = ($2 + [-24])
	$2 = $1
	if ( ((int_32)($1 + $5) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$10 }
	$2 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [12]) == (int_32)$0), [1536])
	$3 = *($9)
	if ( $2 ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$2 = CALL db_find_i64(*($0), *($8), (int_64)-4697967887266086912, $3)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$8 }
	$2 = CALL $554($0, $2)
	CALL eosio_assert(((int_32)*($2 + [12]) == (int_32)$0), [1536])
	$3 = *($9)
	
.LABEL $label$9
	*($12 + [16]) = ($12 + [8])
	CALL eosio_assert([1], [1696])
	CALL $555($0, $2, $3, ($12 + [16]))
	goto $label$6 
	
.LABEL $label$8
	$3 = *($9)
	
.LABEL $label$7
	*($12 + [56]) = ($12 + [8])
	CALL $556(($12 + [16]), $0, $3, ($12 + [56]))
	
.LABEL $label$6
	$2 = (*($12 + [8]) + [16])
	*($12 + [8]) = $2
	if ( ((int_32)$2 != (int_32)*($10)) ){ goto $label$3 }
	
.LABEL $label$2
	*(($12 + [48])) = [0]
	*($12 + [32]) = (int_64)-1
	*($12 + [40]) = (int_64)0
	$2 = ($0 + [40])
	$3 = *($2)
	*($12 + [16]) = $3
	*($12 + [24]) = $3
	$1 = CALL db_find_i64($3, $3, (int_64)-4695710445447675904, *($0 + [48]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$13 }
	$1 = CALL $540(($12 + [16]), $1)
	CALL eosio_assert(((int_32)*($1 + [12]) == (int_32)($12 + [16])), [1536])
	$3 = *($2)
	CALL eosio_assert([1], [1696])
	CALL $553(($12 + [16]), $1, $3, ($12 + [8]))
	$11 = *($12 + [40])
	if ( $11 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$3 = *($2)
	*($12 + [56]) = $0
	CALL $552(($12 + [8]), ($12 + [16]), $3, ($12 + [56]))
	$11 = *($12 + [40])
	if ( ($11 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$5 = ($12 + [44])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$11) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$1 = *($2)
	*($2) = [0]
	if ( ($1 == 0) ){ goto $label$17 }
	CALL $956($1)
	
.LABEL $label$17
	if ( ((int_32)$11 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($12 + [40]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $11
	
.LABEL $label$14
	*($5) = $11
	CALL $956($2)
	
.LABEL $label$11
	*([0] + [4]) = ($12 + [64])
}

void .FUNC $223 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = ($1 + [12])
	$5 = *(*($0))
	$6 = *($5 + [2])
	if ( ($6 == 0) ){ goto $label$5 }
	*(($3 = ($7 + [8]))) = [0]
	*($7 + [4]) = $6
	*($7) = [1]
	$6 = ($1 + [16])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)*(($1 + [20]))) ){ goto $label$4 }
	*($5) = *($7)
	*(($5 + [8])) = *($3)
	*($6) = (*($6) + [12])
	goto $label$3 
	
.LABEL $label$5
	$6 = [0]
	$3 = *($5 + [4])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL $218($2, $7)
	
.LABEL $label$3
	$6 = [1]
	$5 = *(*($0))
	$3 = *($5 + [4])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*(($4 = ($7 + [8]))) = [0]
	*($7 + [4]) = $3
	$6 = ($6 + [1])
	*($7) = $6
	$5 = ($1 + [16])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)*(($1 + [20]))) ){ goto $label$7 }
	*($3) = *($7)
	*(($3 + [8])) = *($4)
	*($5) = (*($5) + [12])
	goto $label$6 
	
.LABEL $label$7
	CALL $218($2, $7)
	
.LABEL $label$6
	$5 = *(*($0))
	
.LABEL $label$1
	$5 = *($5 + [6])
	if ( ($5 == 0) ){ goto $label$8 }
	*(($4 = ($7 + [8]))) = [0]
	*($7 + [4]) = $5
	$6 = ($6 + [1])
	*($7) = $6
	$5 = ($1 + [16])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)*(($1 + [20]))) ){ goto $label$9 }
	*($3) = *($7)
	*(($3 + [8])) = *($4)
	*($5) = (*($5) + [12])
	goto $label$8 
	
.LABEL $label$9
	CALL $218($2, $7)
	
.LABEL $label$8
	*($1 + [8]) = $6
	*($1) = *(*($0 + [4]))
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $389 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1920])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1920])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1920])
	CALL memcpy(*($4), ($7 + [8]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [1920])
	CALL memcpy(*($4), ($7 + [16]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $388 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $389($0, ($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $383 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $384(*($1), ($0 + [32]))
}

void .FUNC $382 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ((int_32)($5 - $4) / (int_32)[24])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$2 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $955(((int_32)$6 * (int_32)[24]))
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$3 * (int_32)[24])))) = *($1)
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($5 - $4)
	$5 = ($3 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	$6 = ($7 + ((int_32)$6 * (int_32)[24]))
	$3 = ($3 + [24])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $4, $1)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $3
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $956($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $381 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $194($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [1920])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [1920])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $198(CALL $199($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $380 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $955([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $194($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $383(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

int_32 .FUNC $387 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = ($3 - $2)
	$4 = ((int_32)$10 / (int_32)[24])
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$2 }
	$5 = *($0 + [4])
	$10 = *($0 + [8])
	if ( ((int_32)$4 <= (int_32)((int_32)($10 - $5) / (int_32)[24])) ){ goto $label$6 }
	$8 = *($0)
	$7 = (((int_32)($5 - $8) / (int_32)[24]) + $4)
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$5 = ((int_32)($10 - $8) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	$10 = ((int_32)($1 - $8) / (int_32)[24])
	$8 = ($5 << [1])
	$5 = ( $7 ? $8 : ($8 <= $7) )
	if ( $5 ){ goto $label$4 }
	$5 = [0]
	$7 = [0]
	goto $label$3 
	
.LABEL $label$6
	$6 = ($5 - $1)
	$10 = ((int_32)$6 / (int_32)[24])
	if ( ((int_32)$4 <= (int_32)$10) ){ goto $label$8 }
	$8 = $5
	$9 = ($2 + ((int_32)$10 * (int_32)[24]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$9 }
	$7 = ($0 + [4])
	$8 = $5
	$10 = $9
	
.LOOP $label$10:
	*($8) = *($10)
	*(($8 + [16])) = *(($10 + [16]))
	*(($8 + [8])) = *(($10 + [8]))
	$8 = (*($7) + [24])
	*($7) = $8
	$10 = ($10 + [24])
	if ( ((int_32)$3 != (int_32)$10) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$6 >= (int_32)[1]) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$8
	$8 = $5
	$9 = $3
	
.LABEL $label$7
	$4 = ($8 - ($1 + ((int_32)$4 * (int_32)[24])))
	$10 = ($1 + ((int_32)((int_32)$4 / (int_32)[24]) * (int_32)[24]))
	if ( ((uint_32)$10 >= (uint_32)$5) ){ goto $label$11 }
	$7 = ($0 + [4])
	$3 = $8
	
.LOOP $label$12:
	*($3) = *($10)
	*(($3 + [16])) = *(($10 + [16]))
	*(($3 + [8])) = *(($10 + [8]))
	$3 = (*($7) + [24])
	*($7) = $3
	$10 = ($10 + [24])
	if ( ($10 <= $5) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($4 == 0) ){ goto $label$13 }
	CALL memmove(($8 + ((int_32)((int_32)$4 / (int_32)[-24]) * (int_32)[24])), $1, $4)
	
.LABEL $label$13
	$10 = ($9 - $2)
	if ( ($10 == 0) ){ goto $label$2 }
	CALL memmove($1, $2, $10)
	return $1
	
.LABEL $label$5
	$10 = ((int_32)($1 - $8) / (int_32)[24])
	$5 = [178956970]
	
.LABEL $label$4
	$7 = CALL $955(((int_32)$5 * (int_32)[24]))
	
.LABEL $label$3
	$8 = ($7 + ((int_32)$10 * (int_32)[24]))
	$10 = $8
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$14 }
	$10 = $8
	
.LOOP $label$15:
	*($10) = *($2)
	*(($10 + [16])) = *(($2 + [16]))
	*(($10 + [8])) = *(($2 + [8]))
	$10 = ($10 + [24])
	$2 = ($2 + [24])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$15 }
	
.LABEL $label$14
	$5 = ((int_32)$5 * (int_32)[24])
	$4 = *($0)
	$3 = ($1 - $4)
	$2 = ($8 + ((int_32)((int_32)$3 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$16 }
	CALL memcpy($2, $4, $3)
	
.LABEL $label$16
	$7 = ($7 + $5)
	$5 = ($0 + [4])
	$3 = (*($5) - $1)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$17 }
	CALL memcpy($10, $1, $3)
	$10 = ($10 + ((int_32)((uint_32)$3 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$17
	*($5) = $10
	$10 = *($0)
	*($0) = $2
	*(($0 + [8])) = $7
	if ( ($10 == 0) ){ goto $label$18 }
	CALL $956($10)
	
.LABEL $label$18
	$1 = $8
	
.LABEL $label$2
	return $1
	
.LABEL $label$1
	CALL $971($0)
	return (unreachable)
}

void .FUNC $386 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [32])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [36])) = $6
	CALL $956($6)
	
.LABEL $label$11
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $956($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $385 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	$6 = *($0 + [4])
	*($1) = *(*($6))
	*($1 + [8]) = *(*($6 + [4]))
	$2 = *($0)
	$4 = *($6 + [8])
	*($1 + [16]) = *($4)
	*(($1 + [24])) = *(($4 + [8]))
	$6 = *($6 + [12])
	$4 = ($1 + [36])
	CALL $387(($1 + [32]), *($4), *($6), *($6 + [4]))
	$3 = *($1 + [32])
	$4 = *($4)
	$5 = ($4 - $3)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[24]))
	$6 = [28]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$4 = ($5 + [-24])
	$6 = ((($4 - ((uint_32)$4 % (uint_32)[24])) + $6) + [24])
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($6)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($8 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL $388($9, $1)
	$7 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($2 + [8]), (int_64)5455799419172362240, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $384 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1920])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1920])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC __errno_location ()
{
	return [21340]
}

int_32 .FUNC $980 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0 + [28])
	$6 = (*($0 + [20]) - $4)
	$3 = *($0 + [84])
	$5 = *($3 + [4])
	$6 = ( $5 ? $6 : ($5 <= $6) )
	if ( ($6 == 0) ){ goto $label$1 }
	CALL memcpy(*($3), $4, $6)
	*($3) = (*($3) + $6)
	$5 = (*($5) - $6)
	*(($5 = ($3 + [4]))) = $5
	
.LABEL $label$1
	$6 = *($3)
	$5 = ( $5 ? $2 : ($5 <= $2) )
	if ( ($5 == 0) ){ goto $label$2 }
	CALL memcpy($6, $1, $5)
	$6 = (*($3) + $5)
	*($3) = $6
	*(($3 = ($3 + [4]))) = (*($3) - $5)
	
.LABEL $label$2
	*($6) = [0]
	$3 = *($0 + [44])
	*(($0 + [28])) = $3
	*(($0 + [20])) = $3
	return $2
}

int_32 .FUNC $868 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), $1, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $384(CALL $384($0, ($1 + [8])), ($1 + [20]))
	*($3 + [15]) = *($1 + [32])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($3 + [15]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [36]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $869 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $491(CALL $491($0, ($1 + [8])), ($1 + [20]))
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [1632])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [32]) = ((int_32)*($3 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [36]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $689 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [1920])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$1 = *($1)
	*($4 + [15]) = *(*($0 + [12]))
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($1 + [4]), ($4 + [15]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC __lockfile (int_32 $0)
{
	int_32 $1
	return $1
}

void .FUNC $987 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$18
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$16
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$15
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$9
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$8
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$7
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$5
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$3
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($4, *($1))
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	goto $label$1 
	
.LABEL $label$2
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$3 = *($1)
	*(($0 + [8])) = *($1 + [8])
	*($0) = $3
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	$1
}

int_32 .FUNC $690 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*($0) = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0 + [16 align=4]) = (int_64)0
	*($0 + [28]) = $1
	*(($0 + [24])) = [0]
	$1 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($0, *($1 + [4]), [8])
	$3 = (*($1 + [4]) + [8])
	*($1 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $3) > (uint_32)[3]), [1632])
	CALL memcpy(($0 + [8]), *($1 + [4]), [4])
	$3 = (*($1 + [4]) + [4])
	*($1 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $3) > (uint_32)[3]), [1632])
	CALL memcpy(($0 + [12]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
	CALL $692($1, ($0 + [16]))
	*($0 + [32]) = *(*($2 + [8]))
	return $0
}

void .FUNC $862 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([40])) + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [12]) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = $1
	CALL $867(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $866(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $863 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $955([40])) + [8]) = [0]
	*($6) = (int_64)0
	*($6 + [12]) = [0]
	*($6 + [16]) = (int_64)0
	*($6 + [24]) = $0
	CALL $865(($8 + [32]), $6)
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $866(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $860 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $955([72]))) = (int_64)0
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = $0
	CALL $869(($8 + [32]), $6)
	*($6 + [60]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [60])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $870(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL $956(*(($4 + [28])))
	
.LABEL $label$10
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $956(*(($4 + [16])))
	
.LABEL $label$11
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $861 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [36]) = (*($1 + [36]) + [1])
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	$7 = *($1 + [8])
	$5 = ( *(($1 + [12])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($5 + [25])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$5 = *($1 + [20])
	$5 = ( *(($1 + [24])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$7 = ($5 + $7)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($7 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($7)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($8 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $7)
	CALL $868($9, $1)
	CALL db_update_i64(*($1 + [60]), $2, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $866 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $693 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$3 = int_32(($6 - $5) >> [4])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$2 = ($2 - $5)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($2 >> [3])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $955(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*($6) = [0]
	*(($6 + [12])) = [0]
	$6 = (*($0) + [16])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $971($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($6 << [4]))
	$5 = ($2 + ($3 << [4]))
	$6 = $5
	
.LOOP $label$9:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*($6) = [0]
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $956($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $864 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [8]) = (*($1 + [8]) + [1])
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	CALL eosio_assert([1], [1920])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($5 | [8]), ($1 + [8]), [4])
	*($5 + [31]) = *($1 + [12])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($5 | [12]), ($5 + [31]), [1])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($5 | [13]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $5, [21])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $865 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [12]) = ((int_32)*($3 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $310 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [192])
	*([0] + [4]) = $17
	*($17 + [180]) = $2
	CALL $200(*($0 + [56]), [1])
	$8 = *(($0 + [40]))
	$9 = *(($0 + [44]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$1 }
	$16 = ($9 + [-24])
	$10 = ([0] - $8)
	
.LOOP $label$2:
	if ( ((int_64)*(*($16)) == (int_64)$1) ){ goto $label$1 }
	$9 = $16
	$13 = ($16 + [-24])
	$16 = $13
	if ( ((int_32)($13 + $10) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [16])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$4 }
	$14 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$6), [1536])
	goto $label$3 
	
.LABEL $label$4
	$14 = [0]
	$16 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)8526756653867991040, $1)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$3 }
	$14 = CALL $178($6, $16)
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$6), [1536])
	
.LABEL $label$3
	$7 = *($16)
	$16 = ( ($14 + [12]) ? ($0 + [68]) : $14 )
	$16 = (*($16 + [4]) - $7)
	if ( ((int_32)$16 < (int_32)[20]) ){ goto $label$6 }
	$13 = (((uint_32)$16 / (uint_32)[20]) + [-1])
	$16 = [0]
	
.LOOP $label$7:
	$8 = ($13 - $16)
	$9 = (((int_32)$8 / (int_32)[2]) + $16)
	$15 = ($7 + ((int_32)$9 * (int_32)[20]))
	$10 = *($15)
	if ( ($10 <= $2) ){ goto $label$8 }
	if ( ((uint_32)$10 <= (uint_32)$2) ){ goto $label$5 }
	$13 = ($9 + [-1])
	if ( ((int_32)$8 > (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$16 = ($9 + [1])
	if ( ((int_32)$13 > (int_32)$9) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert([0], [2112])
	$15 = ($0 + [80])
	
.LABEL $label$5
	CALL eosio_assert((*($15 + [16]) == 0), [2208])
	$11 = *($15 + [6])
	$10 = [0]
	*(($17 + [168])) = [0]
	*($17 + [160]) = (int_64)0
	*($17 + [152]) = (int_64)-1
	$12 = *($0 + [8])
	*($17 + [136]) = $12
	*($17 + [144]) = $12
	$16 = CALL db_find_i64($12, $12, (int_64)-4921685318744145920, *($15 + [7]))
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$10 }
	$8 = CALL $168(($17 + [136]), $16)
	CALL eosio_assert(((int_32)*($8 + [44]) == (int_32)($17 + [136])), [1536])
	$10 = *(($17 + [160]))
	$2 = *(($17 + [164]))
	goto $label$9 
	
.LABEL $label$10
	$2 = [0]
	$8 = [0]
	
.LABEL $label$9
	$12 = ((int_64)*(($15 + [7])) + (int_64)1)
	if ( ((int_32)$2 == (int_32)$10) ){ goto $label$11 }
	$16 = ($2 + [-24])
	$9 = ([0] - $10)
	
.LOOP $label$12:
	if ( ((int_64)*(*($16)) == (int_64)$12) ){ goto $label$11 }
	$2 = $16
	$13 = ($16 + [-24])
	$16 = $13
	if ( ((int_32)($13 + $9) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_32)$2 == (int_32)$10) ){ goto $label$14 }
	$10 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [44]) == (int_32)($17 + [136])), [1536])
	goto $label$13 
	
.LABEL $label$14
	$10 = [0]
	$16 = CALL db_find_i64(*($17 + [136]), *(($17 + [144])), (int_64)-4921685318744145920, $12)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$13 }
	$10 = CALL $168(($17 + [136]), $16)
	CALL eosio_assert(((int_32)*($10 + [44]) == (int_32)($17 + [136])), [1536])
	
.LABEL $label$13
	$7 = [0]
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [2960])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [2960])
	CALL eosio_assert(((uint_32)*($15 + [8]) >= (uint_32)*($10 + [8])), [2992])
	*($17 + [132]) = (*($10 + [8]) - *($8 + [8]))
	*(($17 + [120])) = [0]
	*($17 + [112]) = (int_64)0
	*($17 + [104]) = (int_64)-1
	$12 = *(($0 + [8]))
	*($17 + [88]) = $12
	*($17 + [96]) = $12
	$16 = [0]
	$13 = CALL db_find_i64($12, $12, (int_64)-4921685625297436672, *($15 + [4]))
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$15 }
	$16 = CALL $167(($17 + [88]), $13)
	CALL eosio_assert(((int_32)*($16 + [52]) == (int_32)($17 + [88])), [1536])
	
.LABEL $label$15
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [3024])
	$16 = (*($16 + [10]) + [-1])
	if ( ((uint_32)$16 > (uint_32)[5]) ){ goto $label$16 }
	goto $label$22 
	
.LABEL $label$22
	$7 = *($10 + [12])
	goto $label$16 
	
.LABEL $label$21
	$7 = *($10 + [16])
	goto $label$16 
	
.LABEL $label$20
	$7 = *($10 + [20])
	goto $label$16 
	
.LABEL $label$19
	$7 = *($10 + [24])
	goto $label$16 
	
.LABEL $label$18
	$7 = *($10 + [28])
	goto $label$16 
	
.LABEL $label$17
	$7 = *($10 + [32])
	
.LABEL $label$16
	$15 = *(($8 + [32]))
	$8 = *($0 + [60])
	$2 = *(($8 + [36]))
	if ( ((int_32)$2 == (int_32)$15) ){ goto $label$23 }
	$16 = ($2 + [-24])
	$9 = ([0] - $15)
	
.LOOP $label$24:
	if ( ((int_64)*(*($16)) == (int_64)$1) ){ goto $label$23 }
	$2 = $16
	$13 = ($16 + [-24])
	$16 = $13
	if ( ((int_32)($13 + $9) != (int_32)[-24]) ){ goto $label$24 }
	
.LABEL $label$23
	$13 = ($8 + [8])
	if ( ((int_32)$2 == (int_32)$15) ){ goto $label$26 }
	$16 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [24]) == (int_32)$13), [1536])
	goto $label$25 
	
.LABEL $label$26
	$16 = [0]
	$2 = CALL db_find_i64(*(($8 + [8])), *(($8 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$25 }
	$16 = CALL $186($13, $2)
	CALL eosio_assert(((int_32)*($16 + [24]) == (int_32)$13), [1536])
	
.LABEL $label$25
	CALL eosio_assert(((uint_32)$7 <= (uint_32)*($16 + [16])), [2880])
	$9 = [1]
	*($17 + [87]) = [1]
	CALL memcpy(($17 + [16]), *($5 + [4]), [64])
	$2 = [0]
	if ( ((uint_32)*($10 + [36]) > (uint_32)[9999]) ){ goto $label$28 }
	if ( $3 ){ goto $label$27 }
	CALL $205($17, *(($0 + [56])), ($17 + [16]))
	$2 = *(($10 + [36]))
	$1 = ((uint_64)((int_64)((int_64)*($17) * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	$13 = (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 * (int_64)10000) >> (uint_64)(int_64)31)
	*($17 + [87]) = ($13) <= $2)
	$12 = *($17 + [16])
	*($17 + [24]) = ((int_64)((int_64)(uint_64)$12 >> (uint_64)(int_64)32) ^ (int_64)$12) ^ (int_64)$1)
	$2 = ((uint_32)$13 >= (uint_32)$2)
	
.LABEL $label$28
	$13 = *(($0 + [60]))
	$2 = uint_32($7 >> $2)
	*($17) = $2
	CALL eosio_assert(((uint_32)*(($16 + [16])) >= (uint_32)$2), [2880])
	$1 = *($13)
	*($17 + [184]) = $17
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [1696])
	CALL $249(($13 + [8]), $16, $1, ($17 + [184]))
	$1 = *(($0 + [8]))
	*($17 + [4]) = ($17 + [87])
	*($17) = ($17 + [180])
	*($17 + [8]) = ($17 + [132])
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [1696])
	CALL $313($6, $14, $1, $17)
	*($4) = $11
	*($17 + [28]) = [0]
	$13 = *(($0 + [56]))
	$1 = *($13)
	$16 = *($5 + [4])
	*($17) = ($17 + [16])
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [1696])
	CALL $209(($13 + [88]), $16, $1, $17)
	$9 = [0]
	
.LABEL $label$27
	$2 = *($17 + [112])
	if ( ($2 == 0) ){ goto $label$29 }
	$10 = ($17 + [116])
	$16 = *($10)
	if ( ((int_32)$16 == (int_32)$2) ){ goto $label$31 }
	
.LOOP $label$32:
	$16 = ($16 + [-24])
	$13 = *($16)
	*($16) = [0]
	if ( ($13 == 0) ){ goto $label$33 }
	CALL $956($13)
	
.LABEL $label$33
	if ( ((int_32)$2 != (int_32)$16) ){ goto $label$32 }
	$16 = *(($17 + [112]))
	goto $label$30 
	
.LABEL $label$31
	$16 = $2
	
.LABEL $label$30
	*($10) = $2
	CALL $956($16)
	
.LABEL $label$29
	$2 = *($17 + [160])
	if ( ($2 == 0) ){ goto $label$34 }
	$10 = ($17 + [164])
	$16 = *($10)
	if ( ((int_32)$16 == (int_32)$2) ){ goto $label$36 }
	
.LOOP $label$37:
	$16 = ($16 + [-24])
	$13 = *($16)
	*($16) = [0]
	if ( ($13 == 0) ){ goto $label$38 }
	CALL $956($13)
	
.LABEL $label$38
	if ( ((int_32)$2 != (int_32)$16) ){ goto $label$37 }
	$16 = *(($17 + [160]))
	goto $label$35 
	
.LABEL $label$36
	$16 = $2
	
.LABEL $label$35
	*($10) = $2
	CALL $956($16)
	
.LABEL $label$34
	*([0] + [4]) = ($17 + [192])
	$16
	return $9
}

void .FUNC $311 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $955(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $955([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $194(($8 + [28]), [20])
	$2 = *($2)
	$1 = *($8 + [28])
	*($9 + [4]) = $1
	*($9) = $1
	*($9 + [8]) = $2
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	CALL $312(($9 + [24]), ($9 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $956($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $956($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $956($6)
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [32])
	(unreachable)
}

void .FUNC $312 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), ($0 + [8]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), ($0 + [12]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($1 + [4]), ($0 + [16]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $313 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	$12 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$5 = ($1 + [12])
	$4 = *($1)
	$10 = *($1 + [12])
	$8 = ($1 + [16])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$1 }
	$7 = ((int_32)($9 - $10) / (int_32)[20])
	$6 = *(*($3))
	$9 = [0]
	
.LOOP $label$3:
	if ( ((int_32)*($10) == (int_32)$6) ){ goto $label$2 }
	$10 = ($10 + [20])
	$9 = ($9 + [1])
	if ( ($9 <= $7) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( (*(*($3 + [4])) == 0) ){ goto $label$4 }
	*(($10 = ($10 + [7]))) = (*($10) + [1])
	goto $label$1 
	
.LABEL $label$4
	*(($10 = ($10 + [8]))) = (*($10) - *(*($3 + [8])))
	
.LABEL $label$1
	CALL eosio_assert([1], [1856])
	$6 = *($5)
	$9 = *($8)
	$7 = ($9 - $6)
	$11 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[20]))
	$10 = [29]
	
.LOOP $label$5:
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$7 }
	$9 = (((int_32)((uint_32)($7 + [-20]) / (uint_32)[20]) * (int_32)[17]) + $10)
	goto $label$6 
	
.LABEL $label$7
	$9 = ($10 + [-17])
	
.LABEL $label$6
	if ( ($9 <= [513]) ){ goto $label$9 }
	$10 = CALL malloc($9)
	goto $label$8 
	
.LABEL $label$9
	$10 = ($13 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$8
	*($12) = $10
	$6 = ($10 + $9)
	*($12 + [8]) = $6
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [1920])
	CALL memcpy($10, $1, [8])
	$7 = ($10 + [8])
	CALL eosio_assert(((int_32)($6 - $7) > (int_32)[3]), [1920])
	CALL memcpy($7, ($1 + [8]), [4])
	*($12 + [4]) = ($10 + [12])
	CALL $180($12, $5)
	CALL db_update_i64(*($1 + [28]), $2, $10, $9)
	if ( ($9 <= [513]) ){ goto $label$10 }
	CALL free($10)
	
.LABEL $label$10
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($12 + [16])
}

int_32 .FUNC $314 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [48]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [3264])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-4921685318744145920)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [3200])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [3200])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $168(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $315 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	*(($9 + [72])) = [0]
	*($9 + [56]) = (int_64)-1
	*($9 + [64]) = (int_64)0
	$7 = *($0 + [8])
	*($9 + [40]) = $7
	*($9 + [48]) = $7
	$3 = *(($0 + [40]))
	$5 = *(($0 + [44]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$1 }
	$8 = ($5 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$1 }
	$5 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [16])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$4 }
	$8 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [1536])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$5 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)8526756653867991040, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $178($6, $5)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [1536])
	
.LABEL $label$3
	$5 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($5, [2144])
	*($9 + [36]) = [0]
	*($9 + [32]) = [0]
	$1 = *(($0 + [8]))
	*($9 + [12]) = $2
	*($9 + [8]) = $0
	*($9 + [16]) = ($9 + [32])
	*($9 + [20]) = ($9 + [40])
	*($9 + [24]) = ($9 + [36])
	CALL eosio_assert($5, [1696])
	CALL $317($6, $8, $1, ($9 + [8]))
	CALL eosio_assert(((int_32)*($9 + [32]) != (int_32)[0]), [2144])
	$4 = *($9 + [36])
	$5 = *($9 + [64])
	if ( ($5 == 0) ){ goto $label$5 }
	$0 = ($9 + [68])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$9 }
	CALL $956($6)
	
.LABEL $label$9
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$8 }
	$8 = *(($9 + [64]))
	goto $label$6 
	
.LABEL $label$7
	$8 = $5
	
.LABEL $label$6
	*($0) = $5
	CALL $956($8)
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [80])
	return $4
}

void .FUNC $316 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	$12 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$5 = ($1 + [12])
	$4 = *($1)
	$10 = *($1 + [12])
	$8 = ($1 + [16])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$1 }
	$7 = ((int_32)($9 - $10) / (int_32)[20])
	$6 = *(*($3))
	$9 = [0]
	
.LOOP $label$3:
	if ( ((int_32)*($10) == (int_32)$6) ){ goto $label$2 }
	$10 = ($10 + [20])
	$9 = ($9 + [1])
	if ( ($9 <= $7) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = (*($10) + *(*($3 + [4])))
	*(($10 = ($10 + [8]))) = ( $10 ? [127] : ((int_32)$10 < (int_32)[128]) )
	
.LABEL $label$1
	CALL eosio_assert([1], [1856])
	$6 = *($5)
	$9 = *($8)
	$7 = ($9 - $6)
	$11 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[20]))
	$10 = [29]
	
.LOOP $label$4:
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$6 }
	$9 = (((int_32)((uint_32)($7 + [-20]) / (uint_32)[20]) * (int_32)[17]) + $10)
	goto $label$5 
	
.LABEL $label$6
	$9 = ($10 + [-17])
	
.LABEL $label$5
	if ( ($9 <= [513]) ){ goto $label$8 }
	$10 = CALL malloc($9)
	goto $label$7 
	
.LABEL $label$8
	$10 = ($13 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$7
	*($12) = $10
	$6 = ($10 + $9)
	*($12 + [8]) = $6
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [1920])
	CALL memcpy($10, $1, [8])
	$7 = ($10 + [8])
	CALL eosio_assert(((int_32)($6 - $7) > (int_32)[3]), [1920])
	CALL memcpy($7, ($1 + [8]), [4])
	*($12 + [4]) = ($10 + [12])
	CALL $180($12, $5)
	CALL db_update_i64(*($1 + [28]), $2, $10, $9)
	if ( ($9 <= [513]) ){ goto $label$9 }
	CALL free($10)
	
.LABEL $label$9
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $317 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	CALL $318($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$5 = ($1 + [12])
	$6 = *($1 + [12])
	$9 = *(($1 + [16]))
	$7 = ($9 - $6)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[20]))
	$3 = [29]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$3 }
	$9 = (((int_32)((uint_32)($7 + [-20]) / (uint_32)[20]) * (int_32)[17]) + $3)
	goto $label$2 
	
.LABEL $label$3
	$9 = ($3 + [-17])
	
.LABEL $label$2
	if ( ($9 <= [513]) ){ goto $label$5 }
	$3 = CALL malloc($9)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($11 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$4
	*($10) = $3
	$11 = ($3 + $9)
	*($10 + [8]) = $11
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [1920])
	CALL memcpy($3, $1, [8])
	$6 = ($3 + [8])
	CALL eosio_assert(((int_32)($11 - $6) > (int_32)[3]), [1920])
	CALL memcpy($6, ($1 + [8]), [4])
	*($10 + [4]) = ($3 + [12])
	CALL $180($10, $5)
	CALL db_update_i64(*($1 + [28]), $2, $3, $9)
	if ( ($9 <= [513]) ){ goto $label$6 }
	CALL free($3)
	
.LABEL $label$6
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $318 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$15 = *($0 + [4])
	if ( ((int_32)*($15 + [4]) == (int_32)*($15)) ){ goto $label$1 }
	$8 = ($1 + [16])
	$16 = *($8)
	$15 = *($0 + [8])
	$9 = ($0 + [4])
	$10 = ($1 + [12])
	$13 = ($0 + [8])
	$14 = [0]
	
.LOOP $label$2:
	*($15) = [0]
	$3 = *($10)
	$15 = ($16 - $3)
	if ( ((int_32)$15 < (int_32)[20]) ){ goto $label$3 }
	$2 = *((*(*($9)) + ($14 << [2])))
	$15 = ((uint_32)$15 / (uint_32)[20])
	$1 = [0]
	
.LOOP $label$4:
	$4 = ($15 + [-1])
	
.LOOP $label$6:
	$5 = ($4 - $1)
	$15 = (((int_32)$5 / (int_32)[2]) + $1)
	$11 = ((int_32)$15 * (int_32)[20])
	$12 = ($3 + $11)
	$6 = *($12)
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	$1 = ($15 + [1])
	if ( ((int_32)$4 > (int_32)$15) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$2 >= (uint_32)$6) ){ goto $label$7 }
	if ( ((int_32)$5 >= (int_32)[2]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$7
	CALL eosio_assert((*($12 + [16]) == 0), [3104])
	CALL eosio_assert((*($12 + [6]) == 0), [3136])
	$7 = *($12 + [4])
	$6 = *($2 + [24])
	$2 = *(($0 + [12]))
	$4 = *(($2 + [28]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$8 }
	$15 = ($4 + [-24])
	$3 = ([0] - $6)
	
.LOOP $label$9:
	if ( ((int_64)*(*($15)) == (int_64)$7) ){ goto $label$8 }
	$4 = $15
	$1 = ($15 + [-24])
	$15 = $1
	if ( ((int_32)($1 + $3) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$11 }
	$15 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [52]) == (int_32)$2), [1536])
	goto $label$10 
	
.LABEL $label$11
	$15 = [0]
	$1 = CALL db_find_i64(*($2), *($2 + [8]), (int_64)-4921685625297436672, $7)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$10 }
	$15 = CALL $167($2, $1)
	CALL eosio_assert(((int_32)*($15 + [52]) == (int_32)$2), [1536])
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [3168])
	$4 = (*($12 + [8]) + [1])
	*(($1 = *(($0 + [16])))) = (((int_32)( $4 ? [16] : ($4 <= [16]) ) * (int_32)*($15 + [12])) + *($1))
	$15 = (*($10) + $11)
	$3 = ($15 + [20])
	$1 = (*($8) - $3)
	$4 = ((int_32)$1 / (int_32)[20])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL memmove($15, $3, $1)
	
.LABEL $label$12
	$16 = ($15 + ((int_32)$4 * (int_32)[20]))
	*($8) = $16
	*(*($13)) = [1]
	
.LABEL $label$3
	$15 = *($13)
	if ( (*($15) == 0) ){ goto $label$1 }
	$1 = *($9)
	$14 = ($14 + [1])
	if ( ($14 <= int_32((*($1 + [4]) - *($1)) >> [2])) ){ goto $label$2 }
	
.LABEL $label$1
}

void .FUNC $319 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [16]) = (*($1 + [16]) + *(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [40]) = ($5 + [21])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $212(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [28]), $2, $5, [21])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $253 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [192])
	*([0] + [4]) = $16
	$6 = *(($5 + [32]))
	$5 = *($0 + [60])
	$11 = *(($5 + [36]))
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$1 }
	$10 = ($11 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$1 }
	$11 = $10
	$8 = ($10 + [-24])
	$10 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = ($5 + [8])
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$4 }
	$10 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)$8), [1536])
	goto $label$3 
	
.LABEL $label$4
	$10 = [0]
	$11 = CALL db_find_i64(*(($5 + [8])), *(($5 + [16])), (int_64)-4223691270582697984, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $274($8, $11)
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)$8), [1536])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [2368])
	CALL $187(($16 + [184]), *($0 + [56]), $1, [0])
	if ( ($4 == 0) ){ goto $label$6 }
	CALL require_auth($1)
	*($16 + [176]) = *($16 + [184])
	$11 = *(($0 + [56]))
	*($16 + [16 align=4]) = *($16 + [176])
	$11 = CALL $188($11, ($16 + [16]))
	*($16 + [168]) = $8
	*($16 + [172]) = $10
	*($16 + [160]) = *($16 + [184])
	*($16 + [8 align=4]) = *($16 + [168])
	*(($16 + [4])) = *($16 + [164])
	*($16) = *($16 + [160])
	if ( (CALL $275($0, $1, ($16 + [8]), $11, $16) == 0) ){ goto $label$5 }
	$13 = CALL current_time()
	*(($16 + [124])) = [0]
	*(($16 + [128])) = [0]
	*($16 + [108]) = [0]
	*($16 + [112]) = [0]
	*($16 + [116]) = [0]
	*($16 + [120]) = [0]
	*($16 + [96]) = ((CASTING uint_32)(uint_64 ((uint_64)$13 / (uint_64)(int_64)1000000)) + [60])
	*($16 + [132]) = [0]
	*(($16 + [136])) = [0]
	*(($16 + [140])) = [0]
	*($16 + [144]) = [0]
	*(($16 + [148])) = [0]
	*((($16 + [96]) + [56])) = [0]
	$11 = ($0 + [8])
	$7 = ($16 + [132])
	$9 = *($0 + [8])
	$13 = (int_64)0
	$12 = (int_64)59
	$10 = [2400]
	$14 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$12 }
	$8 = *($10)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$8 = ($8 + [165])
	goto $label$10 
	
.LABEL $label$12
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$8
	$10 = ($10 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$7 }
	*($16 + [88]) = $14
	*($16 + [80]) = $9
	$13 = (int_64)0
	$12 = (int_64)59
	$10 = [2416]
	$14 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$13 > (uint_64)(int_64)8) ){ goto $label$18 }
	$8 = *($10)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$8 = ($8 + [165])
	goto $label$16 
	
.LABEL $label$18
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$14
	$10 = ($10 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$13 }
	*($16 + [72]) = $14
	*($16 + [64]) = $2
	*($16 + [56]) = $1
	*($16 + [68]) = $3
	CALL $190($7, ($16 + [80]), $11, ($16 + [72]), ($16 + [56]))
	$13 = *(($0 + [8]))
	$15 = *(*(($0 + [56])) + [144])
	*(($16 + [116])) = [1]
	*($16 + [88]) = (int_64)0
	*($16 + [80]) = $15
	CALL $191(($16 + [56]), ($16 + [96]))
	$10 = *($16 + [56])
	CALL send_deferred(($16 + [80]), $13, $10, (*($16 + [60]) - $10), [0])
	$10 = *($16 + [56])
	if ( ($10 == 0) ){ goto $label$19 }
	*($16 + [60]) = $10
	CALL $956($10)
	
.LABEL $label$19
	CALL $192(($16 + [96]))
	goto $label$5 
	
.LABEL $label$6
	CALL require_auth(*($0 + [8]))
	*($16 + [48]) = $8
	*($16 + [52]) = $10
	*($16 + [40]) = *($16 + [184])
	*($16 + [32 align=4]) = *($16 + [48])
	*(($16 + [28])) = *($16 + [44])
	*($16 + [24]) = *($16 + [40])
	CALL $275($0, $1, ($16 + [32]), [0], ($16 + [24]))
	
.LABEL $label$5
	*([0] + [4]) = ($16 + [192])
}

void .FUNC $252 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [96])
	*([0] + [4]) = $13
	*($13 + [80]) = $1
	*($13 + [79]) = $2
	CALL require_auth($1)
	CALL eosio_assert(((($2 + [-1]) & [255]) <= [3]), [2176])
	$11 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$1 }
	$12 = ($8 + [-24])
	$4 = ([0] - $11)
	
.LOOP $label$2:
	if ( ((int_64)*(*($12)) == (int_64)$1) ){ goto $label$1 }
	$8 = $12
	$9 = ($12 + [-24])
	$12 = $9
	if ( ((int_32)($9 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$4 }
	$11 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [20]) == (int_32)$3), [1536])
	goto $label$3 
	
.LABEL $label$4
	$11 = [0]
	$12 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-4312506468726210560, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $263($3, $12)
	CALL eosio_assert(((int_32)*($11 + [20]) == (int_32)$3), [1536])
	
.LABEL $label$3
	$12 = [0]
	$5 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($5, [2256])
	$9 = *($11 + [8])
	$8 = *(($11 + [12]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$6 }
	$8 = int_32(($8 - $9) >> [4])
	
.LOOP $label$7:
	if ( ((int_32)*($9) == (int_32)$2) ){ goto $label$5 }
	$9 = ($9 + [16])
	$12 = ($12 + [1])
	if ( ($12 <= $8) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert([0], [1664])
	$9 = *($11 + [8])
	
.LABEL $label$5
	$7 = *(($6 + [32]))
	$6 = *($0 + [60])
	$2 = *(($6 + [36]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$8 }
	$12 = ($2 + [-24])
	$4 = ([0] - $7)
	
.LOOP $label$9:
	if ( ((int_64)*(*($12)) == (int_64)$1) ){ goto $label$8 }
	$2 = $12
	$8 = ($12 + [-24])
	$12 = $8
	if ( ((int_32)($8 + $4) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	$12 = ($6 + [8])
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$11 }
	$8 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$12), [1536])
	goto $label$10 
	
.LABEL $label$11
	$8 = [0]
	$2 = CALL db_find_i64(*(($6 + [8])), *(($6 + [16])), (int_64)-4223691270582697984, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$10 }
	$8 = CALL $274($12, $2)
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$12), [1536])
	
.LABEL $label$10
	$4 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($4, [2368])
	$10 = ((int_64)*($9 + [1]) + (int_64)1)
	*($13 + [64]) = $10
	CALL eosio_assert((uint_64)($10 <= (int_64)19), [2752])
	*(($13 + [56])) = [0]
	*($13 + [40]) = (int_64)-1
	*($13 + [48]) = (int_64)0
	$1 = *($0 + [8])
	*($13 + [24]) = $1
	*($13 + [32]) = $1
	$12 = [0]
	$2 = CALL db_find_i64($1, $1, (int_64)-4888770731107680256, $10)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$12 }
	$12 = CALL $248(($13 + [24]), $2)
	CALL eosio_assert(((int_32)*($12 + [16]) == (int_32)($13 + [24])), [1536])
	
.LABEL $label$12
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [2784])
	$2 = *($12 + [12])
	CALL eosio_assert(((uint_32)*($9 + [4]) >= (uint_32)*($12 + [8])), [2816])
	CALL eosio_assert(((uint_32)$2 <= (uint_32)*($8 + [16])), [2848])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$13 }
	$12 = *(($0 + [60]))
	*($13) = $2
	CALL eosio_assert(((uint_32)*(($8 + [16])) >= (uint_32)$2), [2880])
	$1 = *($12)
	*($13 + [88]) = $13
	CALL eosio_assert($4, [1696])
	CALL $295(($12 + [8]), $8, $1, ($13 + [88]))
	
.LABEL $label$13
	$1 = *(($0 + [8]))
	*($13) = $0
	*($13 + [16]) = $9
	*($13 + [4]) = ($13 + [79])
	*($13 + [8]) = ($13 + [64])
	*($13 + [12]) = ($13 + [80])
	CALL eosio_assert($5, [1696])
	CALL $296($3, $11, $1, $13)
	$8 = *($13 + [48])
	if ( ($8 == 0) ){ goto $label$14 }
	$2 = ($13 + [52])
	$12 = *($2)
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$12 = ($12 + [-24])
	$9 = *($12)
	*($12) = [0]
	if ( ($9 == 0) ){ goto $label$18 }
	CALL $956($9)
	
.LABEL $label$18
	if ( ((int_32)$8 != (int_32)$12) ){ goto $label$17 }
	$12 = *(($13 + [48]))
	goto $label$15 
	
.LABEL $label$16
	$12 = $8
	
.LABEL $label$15
	*($2) = $8
	CALL $956($12)
	
.LABEL $label$14
	*([0] + [4]) = ($13 + [96])
}

void .FUNC $255 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [32])
	*([0] + [4]) = $14
	CALL require_auth($1)
	$13 = *(($5 + [40]))
	$5 = *($0 + [68])
	$6 = *(($5 + [44]))
	if ( ((int_32)$6 == (int_32)$13) ){ goto $label$1 }
	$10 = ($6 + [-24])
	$7 = ([0] - $13)
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$1 }
	$6 = $10
	$3 = ($10 + [-24])
	$10 = $3
	if ( ((int_32)($3 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$10 = ($5 + [16])
	if ( ((int_32)$6 == (int_32)$13) ){ goto $label$4 }
	$11 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)$10), [1536])
	goto $label$3 
	
.LABEL $label$4
	$11 = [0]
	$3 = CALL db_find_i64(*(($5 + [16])), *(($5 + [24])), (int_64)-4345224872994013184, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $271($10, $3)
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)$10), [1536])
	
.LABEL $label$3
	$4 = *($10)
	$8 = ($0 + [68])
	$12 = *($8)
	$10 = ( ($11 + [12]) ? ($12 + [68]) : $11 )
	$10 = (*($10 + [4]) - $4)
	if ( ((int_32)$10 < (int_32)[20]) ){ goto $label$6 }
	$3 = (((uint_32)$10 / (uint_32)[20]) + [-1])
	$10 = [0]
	
.LOOP $label$7:
	$5 = ($3 - $10)
	$6 = (((int_32)$5 / (int_32)[2]) + $10)
	$13 = ($4 + ((int_32)$6 * (int_32)[20]))
	$7 = *($13)
	if ( ($7 <= $2) ){ goto $label$8 }
	if ( ((uint_32)$7 <= (uint_32)$2) ){ goto $label$5 }
	$3 = ($6 + [-1])
	if ( ((int_32)$5 > (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$10 = ($6 + [1])
	if ( ((int_32)$3 > (int_32)$6) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert([0], [2112])
	$13 = ($12 + [80])
	$12 = *($8)
	
.LABEL $label$5
	$10 = *($13 + [6])
	*($14 + [28]) = $2
	*($14 + [27]) = [0]
	*($14 + [26]) = [0]
	$9 = *($12 + [8])
	*($14 + [12]) = ($14 + [27])
	*($14 + [8]) = ($14 + [28])
	*($14 + [16]) = ($14 + [26])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [1696])
	CALL $272(($12 + [16]), $11, $9, ($14 + [8]))
	CALL eosio_assert(*($14 + [26]), [2144])
	CALL void $0((int_32 $1), (int_64 $10), (int_32 *(*($0) + [16])))
	*([0] + [4]) = ($14 + [32])
}

void .FUNC $254 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$18 = (*([0] + [4]) - [64])
	*([0] + [4]) = $18
	CALL require_auth($1)
	CALL eosio_assert(((($2 + [-1]) & [255]) <= [3]), [2176])
	$6 = *(($15 + [40]))
	$15 = *($0 + [68])
	$17 = *(($15 + [44]))
	if ( ((int_32)$17 == (int_32)$6) ){ goto $label$1 }
	$16 = ($17 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($16)) == (int_64)$1) ){ goto $label$1 }
	$17 = $16
	$8 = ($16 + [-24])
	$16 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$16 = ($15 + [16])
	if ( ((int_32)$17 == (int_32)$6) ){ goto $label$4 }
	$13 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$16), [1536])
	goto $label$3 
	
.LABEL $label$4
	$13 = [0]
	$8 = CALL db_find_i64(*(($15 + [16])), *(($15 + [24])), (int_64)-4345224872994013184, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$13 = CALL $271($16, $8)
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$16), [1536])
	
.LABEL $label$3
	$14 = *($4)
	$9 = *(($0 + [68]))
	$4 = ( ($13 + [12]) ? ($9 + [68]) : $13 )
	$16 = (*($4 + [4]) - $14)
	if ( ((int_32)$16 < (int_32)[20]) ){ goto $label$6 }
	$8 = (((uint_32)$16 / (uint_32)[20]) + [-1])
	$16 = [0]
	
.LOOP $label$7:
	$15 = ($8 - $16)
	$17 = (((int_32)$15 / (int_32)[2]) + $16)
	$6 = ($14 + ((int_32)$17 * (int_32)[20]))
	$7 = *($6)
	if ( ($7 <= $3) ){ goto $label$8 }
	if ( ((uint_32)$7 <= (uint_32)$3) ){ goto $label$5 }
	$8 = ($17 + [-1])
	if ( ((int_32)$15 > (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$16 = ($17 + [1])
	if ( ((int_32)$8 > (int_32)$17) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert([0], [2112])
	$6 = ($9 + [80])
	
.LABEL $label$5
	CALL eosio_assert((*($6 + [16]) == 0), [2208])
	$8 = [0]
	*(($18 + [32])) = [0]
	*($18 + [24]) = (int_64)0
	*($18 + [16]) = (int_64)-1
	$5 = *($0 + [8])
	*($18) = $5
	*($18 + [8]) = $5
	$14 = [0]
	$16 = CALL db_find_i64($5, $5, (int_64)-4921685625297436672, *($6 + [4]))
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$9 }
	$14 = CALL $167($18, $16)
	CALL eosio_assert(((int_32)*($14 + [52]) == (int_32)$18), [1536])
	
.LABEL $label$9
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [2016])
	$16 = *($14 + [9])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$11 }
	if ( ((int_32)($16 & [255]) == (int_32)[2]) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$2 == (int_32)[2]) ){ goto $label$12 }
	if ( ((int_32)($16 & [255]) == (int_32)[3]) ){ goto $label$10 }
	
.LABEL $label$12
	$8 = (((int_32)$2 == (int_32)[3]) | ((int_32)($16 & [255]) != (int_32)[4]))
	
.LABEL $label$10
	CALL eosio_assert($8, [2224])
	$15 = *(($0 + [40]))
	$17 = *(($0 + [44]))
	if ( ((int_32)$17 == (int_32)$15) ){ goto $label$13 }
	$16 = ($17 + [-24])
	$7 = ([0] - $15)
	
.LOOP $label$14:
	if ( ((int_64)*(*($16)) == (int_64)$1) ){ goto $label$13 }
	$17 = $16
	$8 = ($16 + [-24])
	$16 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	$16 = ($0 + [16])
	if ( ((int_32)$17 == (int_32)$15) ){ goto $label$16 }
	$7 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)$16), [1536])
	goto $label$15 
	
.LABEL $label$16
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-4312506468726210560, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$15 }
	$7 = CALL $263($16, $8)
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)$16), [1536])
	
.LABEL $label$15
	$8 = [0]
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [2256])
	$16 = *($7 + [8])
	$17 = *(($7 + [12]))
	if ( ((int_32)$17 == (int_32)$16) ){ goto $label$18 }
	$17 = int_32(($17 - $16) >> [4])
	
.LOOP $label$19:
	if ( ((int_32)*($16) == (int_32)$2) ){ goto $label$17 }
	$16 = ($16 + [16])
	$8 = ($8 + [1])
	if ( ($8 <= $17) ){ goto $label$19 }
	
.LABEL $label$18
	CALL eosio_assert([0], [1664])
	$16 = *($7 + [8])
	
.LABEL $label$17
	CALL eosio_assert(((uint_32)*($14 + [11]) <= (uint_32)*($16 + [1])), [2288])
	$16 = *($4)
	$9 = ($4 + [4])
	$8 = *($9)
	if ( ((int_32)$8 == (int_32)$16) ){ goto $label$20 }
	$10 = ($18 + [24])
	$11 = ($18 + [28])
	$12 = ($18 + [8])
	$15 = [0]
	
.LOOP $label$22:
	$17 = ($16 + ((int_32)$15 * (int_32)[20]))
	if ( ((int_32)*($17 + [6]) != (int_32)$2) ){ goto $label$23 }
	$5 = *($17 + [4])
	$6 = *($10)
	$17 = *($11)
	if ( ((int_32)$17 == (int_32)$6) ){ goto $label$24 }
	$16 = ($17 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$25:
	if ( ((int_64)*(*($16)) == (int_64)$5) ){ goto $label$24 }
	$17 = $16
	$8 = ($16 + [-24])
	$16 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$25 }
	
.LABEL $label$24
	if ( ((int_32)$17 == (int_32)$6) ){ goto $label$27 }
	$16 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [52]) == (int_32)$18), [1536])
	goto $label$26 
	
.LABEL $label$27
	$16 = [0]
	$8 = CALL db_find_i64(*($18), *($12), (int_64)-4921685625297436672, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$26 }
	$16 = CALL $167($18, $8)
	CALL eosio_assert(((int_32)*($16 + [52]) == (int_32)$18), [1536])
	
.LABEL $label$26
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [2336])
	if ( ((int_32)*($16 + [8]) == (int_32)*(($14 + [8]))) ){ goto $label$21 }
	$8 = *($9)
	$16 = *($4)
	
.LABEL $label$23
	$15 = ($15 + [1])
	if ( ($15 <= ((int_32)($8 - $16) / (int_32)[20])) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$16 = *(($0 + [68]))
	*($18 + [60]) = *((*($4) + ((int_32)$15 * (int_32)[20])))
	*($18 + [59]) = [0]
	*($18 + [58]) = [0]
	$5 = *($16 + [8])
	*($18 + [44]) = ($18 + [59])
	*($18 + [40]) = ($18 + [60])
	*($18 + [48]) = ($18 + [58])
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [1696])
	CALL $272(($16 + [16]), $13, $5, ($18 + [40]))
	CALL eosio_assert(*($18 + [58]), [2144])
	
.LABEL $label$20
	$16 = *(($0 + [68]))
	*($18 + [60]) = $3
	*($18 + [59]) = $2
	$5 = *($16 + [8])
	*($18 + [58]) = [0]
	*($18 + [44]) = ($18 + [59])
	*($18 + [40]) = ($18 + [60])
	*($18 + [48]) = ($18 + [58])
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [1696])
	CALL $272(($16 + [16]), $13, $5, ($18 + [40]))
	CALL eosio_assert(*($18 + [58]), [2144])
	CALL void $0((int_32 $1), (int_64 $2), (int_32 *(*($0) + [16])))
	$17 = *($18 + [24])
	if ( ($17 == 0) ){ goto $label$28 }
	$7 = ($18 + [28])
	$16 = *($7)
	if ( ((int_32)$16 == (int_32)$17) ){ goto $label$30 }
	
.LOOP $label$31:
	$16 = ($16 + [-24])
	$8 = *($16)
	*($16) = [0]
	if ( ($8 == 0) ){ goto $label$32 }
	CALL $956($8)
	
.LABEL $label$32
	if ( ((int_32)$17 != (int_32)$16) ){ goto $label$31 }
	$16 = *(($18 + [24]))
	goto $label$29 
	
.LABEL $label$30
	$16 = $17
	
.LABEL $label$29
	*($7) = $17
	CALL $956($16)
	
.LABEL $label$28
	*([0] + [4]) = ($18 + [64])
}

int_32 .FUNC $257 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *(($0 + [40]))
	$7 = *(($0 + [44]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [16])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$5), [1536])
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL $263($5, CALL $fimport$16(*(($0 + [16])), *(($0 + [24])), (int_64)-4312506468726210560, $1))
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$5), [1536])
	
.LABEL $label$3
	$7 = [0]
	$6 = *($6 + [8])
	$5 = *(($6 + [12]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$5 }
	$4 = int_32(($5 - $6) >> [4])
	$5 = [0]
	
.LOOP $label$6:
	$7 = [1]
	if ( ((int_32)*($6) == (int_32)$2) ){ goto $label$5 }
	$6 = ($6 + [16])
	$5 = ($5 + [1])
	if ( ($5 <= $4) ){ goto $label$6 }
	$7 = [0]
	
.LABEL $label$5
	return $7
}

void .FUNC $256 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	*($9 + [63]) = $2
	$4 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$5 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)$3), [1536])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$7 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-4312506468726210560, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $263($3, $7)
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)$3), [1536])
	
.LABEL $label$3
	$6 = [0]
	$4 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($4, [1664])
	$7 = *($5 + [8])
	$8 = *(($5 + [12]))
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$6 }
	$8 = int_32(($8 - $7) >> [4])
	
.LOOP $label$7:
	if ( ((int_32)*($7) == (int_32)$2) ){ goto $label$5 }
	$7 = ($7 + [16])
	$6 = ($6 + [1])
	if ( ($6 <= $8) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert([0], [1664])
	$7 = *($5 + [8])
	
.LABEL $label$5
	CALL $265(($9 + [16]), $0, $1, $7)
	$1 = *($0 + [8])
	*($9 + [12]) = ($9 + [16])
	*($9 + [8]) = ($9 + [63])
	CALL eosio_assert($4, [1696])
	CALL $266($3, $5, $1, ($9 + [8]))
	*([0] + [4]) = ($9 + [64])
}

void .FUNC $406 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [1920])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), $2, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $696 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [176])
	*([0] + [4]) = $17
	*($17 + [168]) = $1
	CALL require_auth($1)
	$14 = [0]
	*((($17 + [128]) + [32])) = [0]
	*($17 + [144]) = (int_64)-1
	*($17 + [152]) = (int_64)0
	$7 = *($0 + [8])
	*($17 + [128]) = $7
	*($17 + [136]) = $7
	*((($17 + [88]) + [32])) = [0]
	*($17 + [96]) = $7
	*($17 + [88]) = $7
	*($17 + [104]) = (int_64)-1
	*($17 + [112]) = (int_64)0
	$16 = CALL db_find_i64($7, $7, (int_64)-6146658315851005952, $1)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $683(($17 + [88]), $16)
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)($17 + [88])), [1536])
	$1 = *($17 + [168])
	$14 = *(($17 + [152]))
	$13 = *(($17 + [156]))
	if ( ((int_32)$13 != (int_32)$14) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$13 = [0]
	$4 = [0]
	if ( ((int_32)[0] == (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	$16 = ($13 + [-24])
	$15 = ([0] - $14)
	
.LOOP $label$4:
	if ( ((int_64)*(*($16)) == (int_64)$1) ){ goto $label$1 }
	$13 = $16
	$6 = ($16 + [-24])
	$16 = $6
	if ( ((int_32)($6 + $15) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$1
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$6 }
	$16 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [20]) == (int_32)($17 + [128])), [1536])
	goto $label$5 
	
.LABEL $label$6
	$16 = [0]
	$6 = CALL db_find_i64(*($17 + [128]), *(($17 + [136])), (int_64)-6146850541407305728, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$16 = CALL $159(($17 + [128]), $6)
	CALL eosio_assert(((int_32)*($16 + [20]) == (int_32)($17 + [128])), [1536])
	
.LABEL $label$5
	$15 = [0]
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [7392])
	$6 = [0]
	$16 = *($16 + [8])
	$13 = *(($16 + [12]))
	if ( ((int_32)$13 == (int_32)$16) ){ goto $label$7 }
	$13 = ((int_32)($13 - $16) / (int_32)[12])
	$6 = [0]
	
.LOOP $label$9:
	if ( ((int_32)*($16) == (int_32)$2) ){ goto $label$8 }
	$16 = ($16 + [12])
	$6 = ($6 + [1])
	if ( ($6 <= $13) ){ goto $label$9 }
	$6 = [0]
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert((*(($16 + [9])) == 0), [7408])
	$6 = [1]
	
.LABEL $label$7
	CALL eosio_assert($6, [7440])
	*(($17 + [80])) = [0]
	*($17 + [64]) = (int_64)-1
	*($17 + [72]) = (int_64)0
	$1 = *(($0 + [8]))
	*($17 + [48]) = $1
	*($17 + [56]) = $1
	$16 = CALL db_find_i64($1, $1, (int_64)-4803775097846366208, (CASTING uint_64)(uint_32 $2))
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$10 }
	$15 = CALL $160(($17 + [48]), $16)
	CALL eosio_assert(((int_32)*($15 + [28]) == (int_32)($17 + [48])), [1536])
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [1952])
	$16 = ((int_32)((int_32)*([0] + [20]) * (int_32)(uint_32([545842] >> ((*($15 + [8]) << [2]) + [-4])) & [15])) * (int_32)[6])
	$5 = (CASTING uint_32)(uint_64 (int_64))(((uint_64)CALL publication_time() / (uint_64)(int_64)1000000) - *([0] + [12])))
	$11 = [1]
	if ( ((int_32)$3 < (int_32)[3]) ){ goto $label$11 }
	$11 = [2]
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$11 }
	$11 = ( [3] ? [4] : ((int_32)$3 < (int_32)[10]) )
	
.LABEL $label$11
	*($17 + [32]) = $2
	*($17 + [44]) = [0]
	*($17 + [36]) = $5
	*($17 + [40]) = ($16 + $5)
	if ( ($4 == 0) ){ goto $label$16 }
	$12 = [0]
	*($17 + [16]) = [0]
	*($17 + [8]) = (int_64)0
	$13 = *($4 + [16])
	$8 = ($4 + [20])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)$13) ){ goto $label$17 }
	$6 = [0]
	$10 = ($4 + [16])
	$14 = [0]
	$12 = [0]
	
.LOOP $label$18:
	$16 = ($13 + $6)
	$15 = *(($16 + [12]))
	$9 = ($16 + [8])
	if ( ($5 <= *($9)) ){ goto $label$20 }
	if ( ($15 & [255]) ){ goto $label$19 }
	$15 = [0]
	
.LABEL $label$20
	$15 = (((int_32)$15 ^ (int_32)[1]) & [255])
	$13 = *($17 + [12])
	if ( ((int_32)$13 == (int_32)*((($17 + [8]) + [8]))) ){ goto $label$22 }
	*($13) = *($16)
	*(($13 + [8])) = *($9)
	*($17 + [12]) = ($13 + [16])
	goto $label$21 
	
.LABEL $label$22
	CALL $698(($17 + [8]), $16)
	
.LABEL $label$21
	$12 = ($15 + $12)
	CALL eosio_assert(((int_32)*($16) != (int_32)$2), [7504])
	$13 = *($10)
	$3 = *($8)
	
.LABEL $label$19
	$6 = ($6 + [16])
	$14 = ($14 + [1])
	if ( ($14 <= int_32(($3 - $13) >> [4])) ){ goto $label$18 }
	
.LABEL $label$17
	CALL eosio_assert(((int_32)$12 < (int_32)$11), [7472])
	$16 = *($17 + [12])
	if ( ((int_32)$16 == (int_32)*((($17 + [8]) + [8]))) ){ goto $label$15 }
	*($16) = *($17 + [32])
	*(($16 + [8])) = *((($17 + [32]) + [8]))
	*($17 + [12]) = ($16 + [16])
	goto $label$14 
	
.LABEL $label$16
	$1 = *(($0 + [8]))
	*($17 + [12]) = ($17 + [32])
	*($17 + [8]) = ($17 + [168])
	CALL $697(($17 + [24]), ($17 + [88]), $1, ($17 + [8]))
	$13 = *($17 + [72])
	if ( $13 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	CALL $698(($17 + [8]), ($17 + [32]))
	
.LABEL $label$14
	$1 = *(($0 + [8]))
	*($17 + [28]) = ($17 + [8])
	*($17 + [24]) = ($17 + [168])
	CALL eosio_assert([1], [1696])
	CALL $699(($17 + [88]), $4, $1, ($17 + [24]))
	$16 = *($17 + [8])
	if ( ($16 == 0) ){ goto $label$23 }
	*($17 + [12]) = $16
	CALL $956($16)
	
.LABEL $label$23
	$13 = *($17 + [72])
	if ( ($13 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$15 = ($17 + [76])
	$16 = *($15)
	if ( ((int_32)$16 == (int_32)$13) ){ goto $label$25 }
	
.LOOP $label$26:
	$16 = ($16 + [-24])
	$6 = *($16)
	*($16) = [0]
	if ( ($6 == 0) ){ goto $label$27 }
	CALL $956($6)
	
.LABEL $label$27
	if ( ((int_32)$13 != (int_32)$16) ){ goto $label$26 }
	$16 = *(($17 + [72]))
	goto $label$24 
	
.LABEL $label$25
	$16 = $13
	
.LABEL $label$24
	*($15) = $13
	CALL $956($16)
	
.LABEL $label$12
	$15 = *($17 + [112])
	if ( ($15 == 0) ){ goto $label$28 }
	$14 = ($17 + [116])
	$16 = *($14)
	if ( ((int_32)$16 == (int_32)$15) ){ goto $label$30 }
	
.LOOP $label$31:
	$16 = ($16 + [-24])
	$6 = *($16)
	*($16) = [0]
	if ( ($6 == 0) ){ goto $label$32 }
	$13 = *($6 + [16])
	if ( ($13 == 0) ){ goto $label$33 }
	*(($6 + [20])) = $13
	CALL $956($13)
	
.LABEL $label$33
	CALL $956($6)
	
.LABEL $label$32
	if ( ((int_32)$15 != (int_32)$16) ){ goto $label$31 }
	$16 = *(($17 + [112]))
	goto $label$29 
	
.LABEL $label$30
	$16 = $15
	
.LABEL $label$29
	*($14) = $15
	CALL $956($16)
	
.LABEL $label$28
	$15 = *($17 + [152])
	if ( ($15 == 0) ){ goto $label$34 }
	$14 = ($17 + [156])
	$16 = *($14)
	if ( ((int_32)$16 == (int_32)$15) ){ goto $label$36 }
	
.LOOP $label$37:
	$16 = ($16 + [-24])
	$6 = *($16)
	*($16) = [0]
	if ( ($6 == 0) ){ goto $label$38 }
	$13 = *($6 + [8])
	if ( ($13 == 0) ){ goto $label$39 }
	*(($6 + [12])) = $13
	CALL $956($13)
	
.LABEL $label$39
	CALL $956($6)
	
.LABEL $label$38
	if ( ((int_32)$15 != (int_32)$16) ){ goto $label$37 }
	$16 = *(($17 + [152]))
	goto $label$35 
	
.LABEL $label$36
	$16 = $15
	
.LABEL $label$35
	*($14) = $15
	CALL $956($16)
	
.LABEL $label$34
	*([0] + [4]) = ($17 + [176])
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	return $1
}

void .FUNC $139 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
}

void .FUNC $428 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	*($8 + [24]) = $2
	$3 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$7 }
	$5 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [92]) == (int_32)$6), [1536])
	$2 = *($0)
	if ( $5 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$5 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-4992616317627400192, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = CALL $399($6, $5)
	CALL eosio_assert(((int_32)*($5 + [92]) == (int_32)$6), [1536])
	$2 = *($0)
	
.LABEL $label$6
	*($8 + [16]) = $1
	CALL eosio_assert([1], [1696])
	CALL $432($6, $5, $2, ($8 + [16]))
	goto $label$3 
	
.LABEL $label$5
	$2 = *($0)
	
.LABEL $label$4
	*($8 + [20]) = $1
	*($8 + [16]) = ($8 + [24])
	CALL $431(($8 + [8]), $6, $2, ($8 + [16]))
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $429 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$5 = (*([0] + [4]) - [48])
	$11 = $5
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$3 = (*(*(*($3) + [4]) + [16]) + ((int_32)*(*($3 + [4])) * (int_32)[40]))
	$8 = ($3 + [40])
	$6 = ($1 + [20])
	$7 = (*($6) - $8)
	$9 = ((int_32)$7 / (int_32)[40])
	$4 = *($1)
	$10 = $4
	if ( ($7 == 0) ){ goto $label$1 }
	CALL memmove($3, $8, $7)
	$10 = *($1)
	
.LABEL $label$1
	*($6) = ($3 + ((int_32)$9 * (int_32)[40]))
	CALL eosio_assert(((int_64)$4 == (int_64)$10), [1856])
	$7 = *($1 + [16])
	$6 = *($6)
	$9 = ($6 - $7)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[40]))
	$3 = [54]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	$8 = (((int_32)((uint_32)($9 + [-40]) / (uint_32)[40]) * (int_32)[38]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($3 + [-38])
	
.LABEL $label$3
	if ( ($8 <= [513]) ){ goto $label$6 }
	$9 = CALL malloc($8)
	goto $label$5 
	
.LABEL $label$6
	$9 = ($5 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$5
	*($11) = $9
	$5 = ($9 + $8)
	*($11 + [8]) = $5
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [1920])
	CALL memcpy($9, $1, [8])
	$3 = ($9 + [8])
	CALL eosio_assert(((int_32)($5 - $3) > (int_32)[7]), [1920])
	CALL memcpy($3, ($1 + [8]), [8])
	$3 = ($9 + [16])
	*($11 + [4]) = $3
	$10 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [20])) - *(($1 + [16]))) / (int_32)[40]))
	
.LOOP $label$7:
	$6 = (CASTING uint_32)(uint_64 $10)
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	$7 = ((int_64)$10) != (int_64)0
	*($11 + [24]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)($5 - $3) > (int_32)[0]), [1920])
	CALL memcpy($3, ($11 + [24]), [1])
	$3 = ($3 + [1])
	*($11 + [4]) = $3
	if ( $7 ){ goto $label$7 }
	$6 = *(($1 + [20]))
	$3 = *(($1 + [16]))
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	*($11 + [16]) = $11
	*($11 + [24]) = $3
	*((($11 + [24]) + [8])) = ($3 + [12])
	*((($11 + [24]) + [12])) = ($3 + [16])
	*((($11 + [24]) + [16])) = ($3 + [24])
	*($11 + [28]) = ($3 + [8])
	CALL $430(($11 + [24]), ($11 + [16]))
	$3 = ($3 + [40])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$9 }
	
.LABEL $label$8
	CALL db_update_i64(*($1 + [32]), $2, $9, $8)
	if ( ($8 <= [513]) ){ goto $label$10 }
	CALL free($9)
	
.LABEL $label$10
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($11 + [48])
}

void .FUNC $698 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $955(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $956($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $422 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $955([40])) + [8]) = (int_64)0
	*($6) = (int_64)0
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [24]) = [0]
	*($6 + [28]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [1632])
	CALL memcpy($6, $4, [8])
	$3 = ($4 + [8])
	CALL eosio_assert(((uint_32)($7 - $3) > (uint_32)[7]), [1632])
	CALL memcpy(($6 + [8]), $3, [8])
	*($8 + [36]) = ($4 + [16])
	CALL $442(($8 + [32]), ($6 + [16]))
	*($6 + [32]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [32])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $443(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [16])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [20])) = $7
	CALL $956($7)
	
.LABEL $label$10
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $423 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $955([32]))) = (int_64)0
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [16]) = [0]
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [1632])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $440(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $438(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $956($7)
	
.LABEL $label$10
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $420 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $421 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [9]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [40]) = ($5 + [21])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $212(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [28]), $2, $5, [21])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $426 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$8 = [8]
	$4 = *($1)
	$9 = $4
	$3 = (*($1 + [8]) + (*(*($3)) << [3]))
	$5 = ($3 + [8])
	$10 = ($1 + [12])
	$6 = (*($10) - $5)
	$7 = int_32($6 >> [3])
	if ( ($7 == 0) ){ goto $label$1 }
	CALL memmove($3, $5, $6)
	$9 = *($1)
	
.LABEL $label$1
	*($10) = ($3 + ($7 << [3]))
	CALL eosio_assert(((int_64)$4 == (int_64)$9), [1856])
	$3 = ($1 + [8])
	$7 = *($1 + [8])
	$10 = *($10)
	$5 = ($10 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$2:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$3 }
	$8 = ((((int_32)uint_32(($5 + [-8]) >> [3]) * (int_32)[7]) + $8) + [7])
	
.LABEL $label$3
	if ( ($8 <= [513]) ){ goto $label$5 }
	$10 = CALL malloc($8)
	goto $label$4 
	
.LABEL $label$5
	$10 = ($12 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$4
	*($11) = $10
	*($11 + [8]) = ($10 + $8)
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [1920])
	CALL memcpy($10, $1, [8])
	*($11 + [4]) = ($10 + [8])
	CALL $436($11, $3)
	CALL db_update_i64(*($1 + [24]), $2, $10, $8)
	if ( ($8 <= [513]) ){ goto $label$6 }
	CALL free($10)
	
.LABEL $label$6
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $427 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $955([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [4644]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $973($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $960($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $424 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	*(($11 = $10) + [6]) = [0]
	$3 = *($3)
	*($11) = *($3 + [8])
	*($11 + [4]) = *($3 + [12])
	$3 = ($1 + [12])
	$8 = *($3)
	if ( ((int_32)$8 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($8) = *($11)
	*($3) = (*($3) + [8])
	$8 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [8])
	CALL $439($8, $11)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$6 = *($8)
	$5 = *(($1 + [12]))
	$7 = ($5 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	$3 = [8]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$3 = ((((int_32)uint_32(($7 + [-8]) >> [3]) * (int_32)[7]) + $3) + [7])
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$10 = CALL malloc($3)
	goto $label$5 
	
.LABEL $label$6
	$10 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$5
	*($11) = $10
	*($11 + [8]) = ($10 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [1920])
	CALL memcpy($10, $1, [8])
	*($11 + [4]) = ($10 + [8])
	CALL $436($11, $8)
	CALL db_update_i64(*($1 + [24]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL free($10)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $425 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([32]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16]) = [0]
	*($3 + [20]) = $1
	CALL $437(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [24])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $438(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [12])) = $1
	CALL $956($1)
	
.LABEL $label$4
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC vsnprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	$5 = [-1]
	*($4 + [148]) = ( ($1 + [-1]) ? [0] : $1 )
	$0 = ( $0 ? ($4 + [158]) : $1 )
	*($4 + [144]) = $0
	*(($4 = CALL memset($4, [0], [144])) + [36]) = [67]
	*($4 + [75]) = [255]
	*($4 + [76]) = [-1]
	*($4 + [44]) = ($4 + [159])
	*($4 + [84]) = ($4 + [144])
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	*($0) = [0]
	$5 = CALL vfprintf($4, $2, $3)
	goto $label$1 
	
.LABEL $label$2
	*(CALL __errno_location()) = [75]
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [160])
	return $5
}

void .FUNC $917 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ((int_32)($5 - $4) / (int_32)[12])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $955(((int_32)$6 * (int_32)[12]))
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$3 * (int_32)[12])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($5 - $4)
	$5 = ($3 + ((int_32)((int_32)$1 / (int_32)[-12]) * (int_32)[12]))
	$6 = ($7 + ((int_32)$6 * (int_32)[12]))
	$3 = ($3 + [12])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $4, $1)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $3
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $956($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $729 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($0 + [32]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($0 + [36]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
}

void .FUNC $728 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$5 = ($1 + [12])
	$4 = *($1)
	$8 = *($1 + [12])
	$7 = ($1 + [16])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$1 }
	$9 = ($8 + [16])
	$6 = ((int_32)($6 - $8) / (int_32)[20])
	$10 = *(*($3))
	$8 = [0]
	
.LOOP $label$3:
	if ( ((int_64)*($9) == (int_64)$10) ){ goto $label$2 }
	$9 = ($9 + [20])
	$8 = ($8 + [1])
	if ( ($8 <= $6) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($9) = [0]
	*(*($3 + [4])) = [1]
	
.LABEL $label$1
	CALL eosio_assert([1], [1856])
	$6 = *($5)
	$8 = *($7)
	$7 = ($8 - $6)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[20]))
	$9 = [29]
	
.LOOP $label$4:
	$9 = ($9 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$6 }
	$8 = (((int_32)((uint_32)($7 + [-20]) / (uint_32)[20]) * (int_32)[17]) + $9)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($9 + [-17])
	
.LABEL $label$5
	if ( ($8 <= [513]) ){ goto $label$8 }
	$9 = CALL malloc($8)
	goto $label$7 
	
.LABEL $label$8
	$9 = ($12 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$7
	*($11) = $9
	$6 = ($9 + $8)
	*($11 + [8]) = $6
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [1920])
	CALL memcpy($9, $1, [8])
	$12 = ($9 + [8])
	CALL eosio_assert(((int_32)($6 - $12) > (int_32)[3]), [1920])
	CALL memcpy($12, ($1 + [8]), [4])
	*($11 + [4]) = ($9 + [12])
	CALL $180($11, $5)
	CALL db_update_i64(*($1 + [28]), $2, $9, $8)
	if ( ($8 <= [513]) ){ goto $label$9 }
	CALL free($9)
	
.LABEL $label$9
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($11 + [16])
}

int_32 .FUNC _ZN14system_control8get_key2EN5eosio4nameE (int_32 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 ((int_64)(uint_64)$1 >> (uint_64)(int_64)32) ^ (int_64)$1))
}

int_32 .FUNC _ZN14system_control16get_checksum_keyEN5eosio4nameE (int_32 $0, int_64 $1)
{
	return ((int_32)(CASTING uint_32)(uint_64 $1) ^ (int_32)[-1431655766])
}

int_32 .FUNC _ZN14system_control13seed_identityEN5eosio4nameE (int_32 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 CALL tapos_block_prefix()) ^ (int_64)$1) + (int_64)(uint_64)$1 >> (uint_64)(int_64)32)))
}

int_32 .FUNC _ZN14system_control7get_keyEN5eosio4nameE (int_32 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 ((int_64)(uint_64)$1 >> (uint_64)(int_64)8) + (int_64)127))
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_32 .FUNC _ZN14system_control11shuffle_bitEmm (int_32 $0, int_32 $1, int_32 $2)
{
	(rotl((int_32) $1))
	return $2
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [2384])
	*([0] + [4]) = $17
	*(($17 + [1096])) = $0
	*(($17 + [1104])) = $0
	*(($17 + [1112])) = (int_64)-1
	$14 = (int_64)0
	*(($17 + [1120])) = (int_64)0
	*($17 + [1088]) = $0
	*($17 + [1080]) = $0
	*(($17 + [1128])) = [0]
	*(($17 + [1136])) = $0
	*(($17 + [1144])) = $0
	*(($17 + [1152])) = (int_64)-1
	*(($17 + [1160])) = [0]
	*(($17 + [1164])) = [0]
	*(($17 + [1168])) = [0]
	*(($17 + [1176])) = $0
	*(($17 + [1184])) = $0
	*(($17 + [1192])) = (int_64)-1
	*(($17 + [1200])) = [0]
	*(($17 + [1204])) = [0]
	*(($17 + [1208])) = [0]
	$3 = ($17 + [1240])
	*(($17 + [1216])) = $3
	$4 = ($17 + [2136])
	*(($17 + [1220])) = $4
	$5 = ($17 + [1960])
	*(($17 + [1224])) = $5
	*(($17 + [1228])) = [0]
	*(($17 + [1232])) = [0]
	*($17 + [1240]) = $0
	*(($17 + [1248])) = $0
	*(($17 + [1256])) = $0
	*(($17 + [1264])) = (int_64)-1
	*(($17 + [1272])) = [0]
	*(($17 + [1276])) = [0]
	*(($17 + [1280])) = [0]
	*((($17 + [1080]) + [208])) = $4
	*(($17 + [1292])) = [4]
	*($17 + [1296]) = $0
	*(($17 + [1304])) = $0
	*(($17 + [1312])) = $0
	*(($17 + [1320])) = (int_64)-1
	*(($17 + [1328])) = [0]
	*(($17 + [1332])) = [0]
	*(($17 + [1336])) = [0]
	*(($17 + [1344])) = $4
	*(($17 + [1348])) = [9]
	*(($17 + [1360])) = $0
	$12 = ($17 + [1088])
	*(($17 + [1368])) = $12
	*(($17 + [1372])) = $3
	*($17 + [1352]) = [748]
	$16 = *($17 + [1080])
	*(($17 + [1384])) = $16
	*(($17 + [1392])) = $12
	*(($17 + [1396])) = $3
	$6 = ($17 + [1352])
	*(($17 + [1400])) = $6
	*($17 + [1376]) = [768]
	*(($17 + [1416])) = $16
	*(($17 + [1424])) = $16
	*(($17 + [1432])) = $16
	*(($17 + [1440])) = (int_64)-1
	*(($17 + [1448])) = [0]
	*(($17 + [1452])) = [0]
	*(($17 + [1456])) = [0]
	*(($17 + [1464])) = $12
	*(($17 + [1468])) = $3
	*(($17 + [1472])) = $6
	$7 = ($17 + [1640])
	*(($17 + [1476])) = $7
	*(($17 + [1480])) = ($17 + [1376])
	*(($17 + [1484])) = [0]
	*(($17 + [1488])) = [0]
	*(($17 + [1492])) = [0]
	*($17 + [1408]) = [792]
	*(($17 + [1496])) = $16
	*(($17 + [1504])) = $16
	*(($17 + [1512])) = (int_64)-1
	*(($17 + [1520])) = [0]
	*(($17 + [1524])) = [0]
	*(($17 + [1528])) = [0]
	*(($17 + [1536])) = [0]
	*(($17 + [1540])) = [0]
	*(($17 + [1544])) = [0]
	*(($17 + [1548])) = $4
	*(($17 + [1412])) = [0]
	*(($17 + [1560])) = $16
	*(($17 + [1568])) = $16
	*(($17 + [1576])) = $16
	*(($17 + [1584])) = (int_64)-1
	*(($17 + [1592])) = [0]
	*(($17 + [1596])) = [0]
	*(($17 + [1600])) = [0]
	*(($17 + [1608])) = $12
	$8 = ($17 + [1296])
	*(($17 + [1612])) = $8
	$9 = ($17 + [2232])
	*(($17 + [1616])) = $9
	$10 = ($17 + [1744])
	*(($17 + [1620])) = $10
	*(($17 + [1624])) = ($17 + [2256])
	*(($17 + [1628])) = [0]
	*(($17 + [1632])) = [0]
	*(($17 + [1636])) = [0]
	*($17 + [1552]) = [840]
	*(($17 + [1556])) = [1]
	$16 = *($17 + [1080])
	*(($17 + [1648])) = $16
	*(($17 + [1656])) = $16
	*(($17 + [1664])) = $16
	*(($17 + [1672])) = (int_64)-1
	*(($17 + [1680])) = [0]
	*(($17 + [1684])) = [0]
	*(($17 + [1688])) = [0]
	*(($17 + [1696])) = $12
	*(($17 + [1700])) = $3
	*(($17 + [1704])) = $6
	*(($17 + [1708])) = [0]
	*(($17 + [1712])) = [0]
	*(($17 + [1716])) = [0]
	*(($17 + [1720])) = [0]
	*(($17 + [1724])) = [0]
	*(($17 + [1726])) = [0]
	*(($17 + [1727])) = [0]
	*(($17 + [1728])) = [0]
	*(($17 + [1732])) = [0]
	*(($17 + [1736])) = [0]
	*($17 + [1640]) = [888]
	*(($17 + [1752])) = $16
	*(($17 + [1760])) = $16
	*(($17 + [1768])) = $16
	*(($17 + [1776])) = (int_64)-1
	*(($17 + [1784])) = [0]
	*(($17 + [1788])) = [0]
	*(($17 + [1792])) = [0]
	*(($17 + [1800])) = $12
	*(($17 + [1804])) = $8
	*(($17 + [1808])) = $9
	*(($17 + [1812])) = [0]
	*(($17 + [1816])) = [0]
	*(($17 + [1820])) = [0]
	*(($17 + [1824])) = [0]
	*(($17 + [1828])) = [0]
	*(($17 + [1830])) = [0]
	*(($17 + [1831])) = [0]
	*(($17 + [1832])) = [0]
	*(($17 + [1836])) = [0]
	*(($17 + [1840])) = [0]
	*($17 + [1744]) = [928]
	*($17 + [1848]) = $16
	*(($17 + [1856])) = $16
	*(($17 + [1864])) = $16
	*(($17 + [1872])) = (int_64)-1
	*(($17 + [1880])) = [0]
	*(($17 + [1884])) = [0]
	*(($17 + [1888])) = [0]
	*(($17 + [1896])) = $16
	*(($17 + [1904])) = $16
	*(($17 + [1912])) = (int_64)-1
	*(($17 + [1920])) = [0]
	*(($17 + [1924])) = [0]
	*(($17 + [1928])) = [0]
	*(($17 + [1936])) = $12
	*(($17 + [1940])) = $3
	*(($17 + [1944])) = $7
	*(($17 + [1948])) = $6
	*(($17 + [1952])) = $4
	$11 = ($17 + [1408])
	*(($17 + [1956])) = $11
	*($17 + [1960]) = $0
	*(($17 + [1968])) = $0
	*(($17 + [1976])) = $0
	*(($17 + [1984])) = (int_64)-1
	*(($17 + [1992])) = [0]
	*(($17 + [1996])) = [0]
	*(($17 + [2000])) = [0]
	*(($17 + [2008])) = $0
	*(($17 + [2016])) = $0
	*(($17 + [2024])) = (int_64)-1
	*(($17 + [2032])) = [0]
	*(($17 + [2036])) = [0]
	*(($17 + [2040])) = [0]
	*(($17 + [2048])) = $0
	*(($17 + [2056])) = $0
	*(($17 + [2064])) = (int_64)-1
	*(($17 + [2072])) = [0]
	*(($17 + [2076])) = [0]
	*(($17 + [2080])) = [0]
	*(($17 + [2088])) = $0
	*(($17 + [2096])) = $0
	*(($17 + [2104])) = (int_64)-1
	*(($17 + [2112])) = [0]
	*(($17 + [2116])) = [0]
	*(($17 + [2120])) = [0]
	*(($17 + [2128])) = [960]
	$16 = *($17 + [1080])
	*($17 + [2136]) = $16
	*(($17 + [2144])) = $16
	*(($17 + [2152])) = $16
	*(($17 + [2160])) = (int_64)-1
	*(($17 + [2168])) = [0]
	*(($17 + [2172])) = [0]
	*(($17 + [2176])) = [0]
	*($17 + [2184]) = $16
	*(($17 + [2192])) = $7
	*(($17 + [2196])) = $5
	*(($17 + [2200])) = $12
	*($17 + [2208]) = $16
	*(($17 + [2216])) = $12
	*(($17 + [2220])) = $5
	*(($17 + [2224])) = ($17 + [1552])
	*(($17 + [2228])) = $10
	*(($17 + [2240])) = $16
	*(($17 + [2248])) = $12
	*(($17 + [2252])) = $8
	*($17 + [2232]) = [980]
	*(($17 + [2264])) = $16
	*(($17 + [2272])) = $12
	*(($17 + [2276])) = $8
	*(($17 + [2280])) = $9
	*($17 + [2256]) = [1000]
	*($17 + [2288]) = $16
	*(($17 + [2296])) = $6
	*(($17 + [2300])) = $12
	*(($17 + [2304])) = $3
	*(($17 + [2308])) = $11
	*($17 + [2312]) = $16
	*(($17 + [2320])) = $12
	*(($17 + [2324])) = $4
	*($17 + [2328]) = [1024]
	*($17 + [2332]) = [1040]
	*($17 + [2336]) = [1056]
	*($17 + [2340]) = [1072]
	*($17 + [2344]) = [1088]
	*($17 + [2348]) = [1104]
	*($17 + [2352]) = [1120]
	*($17 + [2356]) = [1136]
	*($17 + [2360]) = [1152]
	*($17 + [2364]) = [1072]
	*($17 + [2368]) = [1104]
	*($17 + [2372]) = [1168]
	*($17 + [2376]) = [1184]
	$13 = (int_64)59
	$12 = [1200]
	$15 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$14 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($12)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$2
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$15 != (int_64)$2) ){ goto $label$7 }
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [1216]
	$15 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$14 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($12)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$9
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$15 == (int_64)$1), [1232])
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$80 }
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [1296]
	$15 = (int_64)0
	
.LOOP $label$81:
	if ( ((uint_64)$14 > (uint_64)(int_64)7) ){ goto $label$86 }
	$3 = *($12)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$85 }
	$3 = ($3 + [165])
	goto $label$84 
	
.LABEL $label$86
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$85
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$84
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$83
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$82
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$81 }
	if ( ((int_64)$15 == (int_64)$2) ){ goto $label$14 }
	if ( ((int_64)$2 > (int_64)-3075276113405181953) ){ goto $label$79 }
	if ( ((int_64)$2 <= (int_64)-4421664685211779073) ){ goto $label$78 }
	if ( ((int_64)$2 <= (int_64)-4315265529002180609) ){ goto $label$76 }
	if ( ((int_64)$2 <= (int_64)-4307513428047560705) ){ goto $label$72 }
	if ( ((int_64)$2 <= (int_64)-4139046208825982977) ){ goto $label$64 }
	if ( ((int_64)$2 == (int_64)-4139046208825982976) ){ goto $label$48 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$47 }
	if ( ((int_64)$2 != (int_64)-3605952836896030720) ){ goto $label$14 }
	*($17 + [604]) = [0]
	*($17 + [600]) = [1]
	*($17 + [480 align=4]) = *($17 + [600])
	CALL $117(($17 + [1080]), ($17 + [480]))
	goto $label$14 
	
.LABEL $label$80
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [1312]
	$15 = (int_64)0
	
.LOOP $label$87:
	if ( ((uint_64)$14 > (uint_64)(int_64)10) ){ goto $label$92 }
	$3 = *($12)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$91 }
	$3 = ($3 + [165])
	goto $label$90 
	
.LABEL $label$92
	$16 = (int_64)0
	if ( ((int_64)$14 == (int_64)11) ){ goto $label$89 }
	goto $label$88 
	
.LABEL $label$91
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$90
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$89
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$88
	$12 = ($12 + [1])
	$13 = ((int_64)$13 + (int_64)-5)
	$15 = ((int_64)$16 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)1)
	if ( ((int_64)$14 != (int_64)13) ){ goto $label$87 }
	if ( ((int_64)$15 != (int_64)$1) ){ goto $label$14 }
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [1296]
	$15 = (int_64)0
	
.LOOP $label$93:
	if ( ((uint_64)$14 > (uint_64)(int_64)7) ){ goto $label$98 }
	$3 = *($12)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$97 }
	$3 = ($3 + [165])
	goto $label$96 
	
.LABEL $label$98
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$95 }
	goto $label$94 
	
.LABEL $label$97
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$96
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$95
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$94
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$93 }
	if ( ((int_64)$15 != (int_64)$2) ){ goto $label$14 }
	*($17 + [548]) = [0]
	*($17 + [544]) = [2]
	*($17 + [536 align=4]) = *($17 + [544])
	CALL $127(($17 + [1080]), ($17 + [536]))
	goto $label$14 
	
.LABEL $label$79
	if ( ((int_64)$2 <= (int_64)5029602200863637503) ){ goto $label$77 }
	if ( ((int_64)$2 <= (int_64)5418546792956428287) ){ goto $label$75 }
	if ( ((int_64)$2 <= (int_64)7111965766785695743) ){ goto $label$71 }
	if ( ((int_64)$2 <= (int_64)8526766477886062591) ){ goto $label$63 }
	if ( ((int_64)$2 == (int_64)8526766477886062592) ){ goto $label$46 }
	if ( ((int_64)$2 == (int_64)8526766733825982464) ){ goto $label$45 }
	if ( ((int_64)$2 != (int_64)9015428175196635136) ){ goto $label$14 }
	*($17 + [1004]) = [0]
	*($17 + [1000]) = [3]
	*($17 + [80 align=4]) = *($17 + [1000])
	CALL $16(($17 + [1080]), ($17 + [80]))
	goto $label$14 
	
.LABEL $label$78
	if ( ((int_64)$2 > (int_64)-5003802764447318017) ){ goto $label$74 }
	if ( ((int_64)$2 > (int_64)-6146536172836356097) ){ goto $label$70 }
	if ( ((int_64)$2 > (int_64)-6146635992119377921) ){ goto $label$62 }
	if ( ((int_64)$2 == (int_64)-8145507259864168960) ){ goto $label$44 }
	if ( ((int_64)$2 != (int_64)-6218464887790632960) ){ goto $label$14 }
	*($17 + [716]) = [0]
	*($17 + [712]) = [4]
	*($17 + [368 align=4]) = *($17 + [712])
	CALL $94(($17 + [1080]), ($17 + [368]))
	goto $label$14 
	
.LABEL $label$77
	if ( ((int_64)$2 > (int_64)3626179655200931839) ){ goto $label$73 }
	if ( ((int_64)$2 > (int_64)-2435765151442403329) ){ goto $label$69 }
	if ( ((int_64)$2 > (int_64)-2457579280675110913) ){ goto $label$61 }
	if ( ((int_64)$2 == (int_64)-3075276113405181952) ){ goto $label$43 }
	if ( ((int_64)$2 != (int_64)-2542281989650644992) ){ goto $label$14 }
	*($17 + [804]) = [0]
	*($17 + [800]) = [5]
	*($17 + [280 align=4]) = *($17 + [800])
	CALL $75(($17 + [1080]), ($17 + [280]))
	goto $label$14 
	
.LABEL $label$76
	if ( ((int_64)$2 > (int_64)-4416967806990417921) ){ goto $label$68 }
	if ( ((int_64)$2 > (int_64)-4417316208295018497) ){ goto $label$60 }
	if ( ((int_64)$2 == (int_64)-4421664685211779072) ){ goto $label$42 }
	if ( ((int_64)$2 != (int_64)-4421662804822458368) ){ goto $label$14 }
	*($17 + [756]) = [0]
	*($17 + [752]) = [6]
	*($17 + [328 align=4]) = *($17 + [752])
	CALL $82(($17 + [1080]), ($17 + [328]))
	goto $label$14 
	
.LABEL $label$75
	if ( ((int_64)$2 > (int_64)5409127832854986751) ){ goto $label$67 }
	if ( ((int_64)$2 > (int_64)5382474680772853759) ){ goto $label$59 }
	if ( ((int_64)$2 == (int_64)5029602200863637504) ){ goto $label$41 }
	if ( ((int_64)$2 != (int_64)5101864901892112384) ){ goto $label$14 }
	*($17 + [572]) = [0]
	*($17 + [568]) = [7]
	*($17 + [512 align=4]) = *($17 + [568])
	CALL $123(($17 + [1080]), ($17 + [512]))
	goto $label$14 
	
.LABEL $label$74
	if ( ((int_64)$2 > (int_64)-4997502819606690305) ){ goto $label$66 }
	if ( ((int_64)$2 > (int_64)-5001621371260764161) ){ goto $label$58 }
	if ( ((int_64)$2 == (int_64)-5003802764447318016) ){ goto $label$40 }
	if ( ((int_64)$2 != (int_64)-5003802764439977984) ){ goto $label$14 }
	*($17 + [916]) = [0]
	*($17 + [912]) = [8]
	*($17 + [168 align=4]) = *($17 + [912])
	CALL $51(($17 + [1080]), ($17 + [168]))
	goto $label$14 
	
.LABEL $label$73
	if ( ((int_64)$2 > (int_64)4769497573093573631) ){ goto $label$65 }
	if ( ((int_64)$2 > (int_64)3769747401255419903) ){ goto $label$57 }
	if ( ((int_64)$2 == (int_64)3626179655200931840) ){ goto $label$39 }
	if ( ((int_64)$2 != (int_64)3626388476319498240) ){ goto $label$14 }
	*($17 + [1012]) = [0]
	*($17 + [1008]) = [9]
	*($17 + [72 align=4]) = *($17 + [1008])
	CALL $30(($17 + [1080]), ($17 + [72]))
	goto $label$14 
	
.LABEL $label$72
	if ( ((int_64)$2 > (int_64)-4315138484277870593) ){ goto $label$56 }
	if ( ((int_64)$2 == (int_64)-4315265529002180608) ){ goto $label$38 }
	if ( ((int_64)$2 != (int_64)-4315265471965298688) ){ goto $label$14 }
	*($17 + [868]) = [0]
	*($17 + [864]) = [10]
	*($17 + [216 align=4]) = *($17 + [864])
	CALL $61(($17 + [1080]), ($17 + [216]))
	goto $label$14 
	
.LABEL $label$71
	if ( ((int_64)$2 > (int_64)5455799419163115519) ){ goto $label$55 }
	if ( ((int_64)$2 == (int_64)5418546792956428288) ){ goto $label$37 }
	if ( ((int_64)$2 != (int_64)5455701283183263744) ){ goto $label$14 }
	*($17 + [948]) = [0]
	*($17 + [944]) = [11]
	*($17 + [136 align=4]) = *($17 + [944])
	CALL $45(($17 + [1080]), ($17 + [136]))
	goto $label$14 
	
.LABEL $label$70
	if ( ((int_64)$2 > (int_64)-6144216475633924897) ){ goto $label$54 }
	if ( ((int_64)$2 == (int_64)-6146536172836356096) ){ goto $label$36 }
	if ( ((int_64)$2 != (int_64)-6144216475633925120) ){ goto $label$14 }
	*($17 + [692]) = [0]
	*($17 + [688]) = [12]
	*($17 + [392 align=4]) = *($17 + [688])
	CALL $96(($17 + [1080]), ($17 + [392]))
	goto $label$14 
	
.LABEL $label$69
	if ( ((int_64)$2 > (int_64)3626112701670768639) ){ goto $label$53 }
	if ( ((int_64)$2 == (int_64)-2435765151442403328) ){ goto $label$35 }
	if ( ((int_64)$2 != (int_64)3626093248784937472) ){ goto $label$14 }
	*($17 + [1028]) = [0]
	*($17 + [1024]) = [13]
	*($17 + [56 align=4]) = *($17 + [1024])
	CALL $16(($17 + [1080]), ($17 + [56]))
	goto $label$14 
	
.LABEL $label$68
	if ( ((int_64)$2 > (int_64)-4352380118857940993) ){ goto $label$52 }
	if ( ((int_64)$2 == (int_64)-4416967806990417920) ){ goto $label$34 }
	if ( ((int_64)$2 != (int_64)-4352380133890326528) ){ goto $label$14 }
	*($17 + [1076]) = [0]
	*($17 + [1072]) = [14]
	*($17 + [8 align=4]) = *($17 + [1072])
	CALL $16(($17 + [1080]), ($17 + [8]))
	goto $label$14 
	
.LABEL $label$67
	if ( ((int_64)$2 > (int_64)5410922305659338751) ){ goto $label$51 }
	if ( ((int_64)$2 == (int_64)5409127832854986752) ){ goto $label$33 }
	if ( ((int_64)$2 != (int_64)5410297231955722240) ){ goto $label$14 }
	*($17 + [668]) = [0]
	*($17 + [664]) = [15]
	*($17 + [416 align=4]) = *($17 + [664])
	CALL $96(($17 + [1080]), ($17 + [416]))
	goto $label$14 
	
.LABEL $label$66
	if ( ((int_64)$2 > (int_64)-4995815908078256129) ){ goto $label$50 }
	if ( ((int_64)$2 == (int_64)-4997502819606690304) ){ goto $label$32 }
	if ( ((int_64)$2 != (int_64)-4997502817770356736) ){ goto $label$14 }
	*($17 + [876]) = [0]
	*($17 + [872]) = [16]
	*($17 + [208 align=4]) = *($17 + [872])
	CALL $56(($17 + [1080]), ($17 + [208]))
	goto $label$14 
	
.LABEL $label$65
	if ( ((int_64)$2 > (int_64)4878147163860762623) ){ goto $label$49 }
	if ( ((int_64)$2 == (int_64)4769497573093573632) ){ goto $label$31 }
	if ( ((int_64)$2 != (int_64)4769497574929891328) ){ goto $label$14 }
	*($17 + [748]) = [0]
	*($17 + [744]) = [17]
	*($17 + [336 align=4]) = *($17 + [744])
	CALL $84(($17 + [1080]), ($17 + [336]))
	goto $label$14 
	
.LABEL $label$64
	if ( ((int_64)$2 == (int_64)-4307513428047560704) ){ goto $label$30 }
	if ( ((int_64)$2 != (int_64)-4139046217402109552) ){ goto $label$14 }
	*($17 + [956]) = [0]
	*($17 + [952]) = [18]
	*($17 + [128 align=4]) = *($17 + [952])
	CALL $43(($17 + [1080]), ($17 + [128]))
	goto $label$14 
	
.LABEL $label$63
	if ( ((int_64)$2 == (int_64)7111965766785695744) ){ goto $label$29 }
	if ( ((int_64)$2 != (int_64)8526766477885833216) ){ goto $label$14 }
	*($17 + [836]) = [0]
	*($17 + [832]) = [19]
	*($17 + [248 align=4]) = *($17 + [832])
	CALL $68(($17 + [1080]), ($17 + [248]))
	goto $label$14 
	
.LABEL $label$62
	if ( ((int_64)$2 == (int_64)-6146635992119377920) ){ goto $label$28 }
	if ( ((int_64)$2 != (int_64)-6146635992119148544) ){ goto $label$14 }
	*($17 + [732]) = [0]
	*($17 + [728]) = [20]
	*($17 + [352 align=4]) = *($17 + [728])
	CALL $90(($17 + [1080]), ($17 + [352]))
	goto $label$14 
	
.LABEL $label$61
	if ( ((int_64)$2 == (int_64)-2457579280675110912) ){ goto $label$27 }
	if ( ((int_64)$2 != (int_64)-2457519109257035776) ){ goto $label$14 }
	*($17 + [780]) = [0]
	*($17 + [776]) = [21]
	*($17 + [304 align=4]) = *($17 + [776])
	CALL $79(($17 + [1080]), ($17 + [304]))
	goto $label$14 
	
.LABEL $label$60
	if ( ((int_64)$2 == (int_64)-4417316208295018496) ){ goto $label$26 }
	if ( ((int_64)$2 != (int_64)-4417175921355451392) ){ goto $label$14 }
	*($17 + [940]) = [0]
	*($17 + [936]) = [22]
	*($17 + [144 align=4]) = *($17 + [936])
	CALL $18(($17 + [1080]), ($17 + [144]))
	goto $label$14 
	
.LABEL $label$59
	if ( ((int_64)$2 == (int_64)5382474680772853760) ){ goto $label$25 }
	if ( ((int_64)$2 != (int_64)5409127832620105728) ){ goto $label$14 }
	*($17 + [660]) = [0]
	*($17 + [656]) = [23]
	*($17 + [424 align=4]) = *($17 + [656])
	CALL $105(($17 + [1080]), ($17 + [424]))
	goto $label$14 
	
.LABEL $label$58
	if ( ((int_64)$2 == (int_64)-5001621371260764160) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)-5000817674023485440) ){ goto $label$14 }
	*($17 + [588]) = [0]
	*($17 + [584]) = [24]
	*($17 + [496 align=4]) = *($17 + [584])
	CALL $117(($17 + [1080]), ($17 + [496]))
	goto $label$14 
	
.LABEL $label$57
	if ( ((int_64)$2 == (int_64)3769747401255419904) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)3769747401255649280) ){ goto $label$14 }
	*($17 + [884]) = [0]
	*($17 + [880]) = [25]
	*($17 + [200 align=4]) = *($17 + [880])
	CALL $58(($17 + [1080]), ($17 + [200]))
	goto $label$14 
	
.LABEL $label$56
	if ( ((int_64)$2 == (int_64)-4315138484277870592) ){ goto $label$22 }
	if ( ((int_64)$2 != (int_64)-4309759283626508288) ){ goto $label$14 }
	*($17 + [628]) = [0]
	*($17 + [624]) = [26]
	*($17 + [456 align=4]) = *($17 + [624])
	CALL $112(($17 + [1080]), ($17 + [456]))
	goto $label$14 
	
.LABEL $label$55
	if ( ((int_64)$2 == (int_64)5455799419163115520) ){ goto $label$21 }
	if ( ((int_64)$2 != (int_64)6175818876048113664) ){ goto $label$14 }
	*($17 + [908]) = [0]
	*($17 + [904]) = [27]
	*($17 + [176 align=4]) = *($17 + [904])
	CALL $53(($17 + [1080]), ($17 + [176]))
	goto $label$14 
	
.LABEL $label$54
	if ( ((int_64)$2 == (int_64)-6144216475633924896) ){ goto $label$20 }
	if ( ((int_64)$2 != (int_64)-6144215678430183424) ){ goto $label$14 }
	*($17 + [708]) = [0]
	*($17 + [704]) = [28]
	*($17 + [376 align=4]) = *($17 + [704])
	CALL $96(($17 + [1080]), ($17 + [376]))
	goto $label$14 
	
.LABEL $label$53
	if ( ((int_64)$2 == (int_64)3626112701670768640) ){ goto $label$19 }
	if ( ((int_64)$2 != (int_64)3626113934563999744) ){ goto $label$14 }
	*($17 + [972]) = [0]
	*($17 + [968]) = [29]
	*($17 + [112 align=4]) = *($17 + [968])
	CALL $39(($17 + [1080]), ($17 + [112]))
	goto $label$14 
	
.LABEL $label$52
	if ( ((int_64)$2 == (int_64)-4352380118857940992) ){ goto $label$18 }
	if ( ((int_64)$2 != (int_64)-4318524031440519168) ){ goto $label$14 }
	*($17 + [620]) = [0]
	*($17 + [616]) = [30]
	*($17 + [464 align=4]) = *($17 + [616])
	CALL $114(($17 + [1080]), ($17 + [464]))
	goto $label$14 
	
.LABEL $label$51
	if ( ((int_64)$2 == (int_64)5410922305659338752) ){ goto $label$17 }
	if ( ((int_64)$2 != (int_64)5414069391673262080) ){ goto $label$14 }
	*($17 + [644]) = [0]
	*($17 + [640]) = [31]
	*($17 + [440 align=4]) = *($17 + [640])
	CALL $96(($17 + [1080]), ($17 + [440]))
	goto $label$14 
	
.LABEL $label$50
	if ( ((int_64)$2 == (int_64)-4995815908078256128) ){ goto $label$16 }
	if ( ((int_64)$2 != (int_64)-4427730787082588528) ){ goto $label$14 }
	*($17 + [996]) = [0]
	*($17 + [992]) = [32]
	*($17 + [88 align=4]) = *($17 + [992])
	CALL $33(($17 + [1080]), ($17 + [88]))
	goto $label$14 
	
.LABEL $label$49
	if ( ((int_64)$2 == (int_64)4878147163860762624) ){ goto $label$15 }
	if ( ((int_64)$2 != (int_64)5029602193347444736) ){ goto $label$14 }
	*($17 + [852]) = [0]
	*($17 + [848]) = [33]
	*($17 + [232 align=4]) = *($17 + [848])
	CALL $64(($17 + [1080]), ($17 + [232]))
	goto $label$14 
	
.LABEL $label$48
	*($17 + [988]) = [0]
	*($17 + [984]) = [34]
	*($17 + [96 align=4]) = *($17 + [984])
	CALL $35(($17 + [1080]), ($17 + [96]))
	goto $label$14 
	
.LABEL $label$47
	*($17 + [556]) = [0]
	*($17 + [552]) = [2]
	*($17 + [528 align=4]) = *($17 + [552])
	CALL $127(($17 + [1080]), ($17 + [528]))
	goto $label$14 
	
.LABEL $label$46
	*($17 + [828]) = [0]
	*($17 + [824]) = [35]
	*($17 + [256 align=4]) = *($17 + [824])
	CALL $33(($17 + [1080]), ($17 + [256]))
	goto $label$14 
	
.LABEL $label$45
	*($17 + [812]) = [0]
	*($17 + [808]) = [36]
	*($17 + [272 align=4]) = *($17 + [808])
	CALL $73(($17 + [1080]), ($17 + [272]))
	goto $label$14 
	
.LABEL $label$44
	*($17 + [932]) = [0]
	*($17 + [928]) = [37]
	*($17 + [152 align=4]) = *($17 + [928])
	CALL $48(($17 + [1080]), ($17 + [152]))
	goto $label$14 
	
.LABEL $label$43
	*($17 + [964]) = [0]
	*($17 + [960]) = [38]
	*($17 + [120 align=4]) = *($17 + [960])
	CALL $41(($17 + [1080]), ($17 + [120]))
	goto $label$14 
	
.LABEL $label$42
	*($17 + [772]) = [0]
	*($17 + [768]) = [39]
	*($17 + [312 align=4]) = *($17 + [768])
	CALL $82(($17 + [1080]), ($17 + [312]))
	goto $label$14 
	
.LABEL $label$41
	*($17 + [844]) = [0]
	*($17 + [840]) = [40]
	*($17 + [240 align=4]) = *($17 + [840])
	CALL $66(($17 + [1080]), ($17 + [240]))
	goto $label$14 
	
.LABEL $label$40
	*($17 + [924]) = [0]
	*($17 + [920]) = [41]
	*($17 + [160 align=4]) = *($17 + [920])
	CALL $33(($17 + [1080]), ($17 + [160]))
	goto $label$14 
	
.LABEL $label$39
	*($17 + [980]) = [0]
	*($17 + [976]) = [42]
	*($17 + [104 align=4]) = *($17 + [976])
	CALL $37(($17 + [1080]), ($17 + [104]))
	goto $label$14 
	
.LABEL $label$38
	*($17 + [860]) = [0]
	*($17 + [856]) = [43]
	*($17 + [224 align=4]) = *($17 + [856])
	CALL $18(($17 + [1080]), ($17 + [224]))
	goto $label$14 
	
.LABEL $label$37
	*($17 + [684]) = [0]
	*($17 + [680]) = [44]
	*($17 + [400 align=4]) = *($17 + [680])
	CALL $101(($17 + [1080]), ($17 + [400]))
	goto $label$14 
	
.LABEL $label$36
	*($17 + [724]) = [0]
	*($17 + [720]) = [45]
	*($17 + [360 align=4]) = *($17 + [720])
	CALL $92(($17 + [1080]), ($17 + [360]))
	goto $label$14 
	
.LABEL $label$35
	*($17 + [796]) = [0]
	*($17 + [792]) = [46]
	*($17 + [288 align=4]) = *($17 + [792])
	CALL $77(($17 + [1080]), ($17 + [288]))
	goto $label$14 
	
.LABEL $label$34
	*($17 + [1060]) = [0]
	*($17 + [1056]) = [47]
	*($17 + [24 align=4]) = *($17 + [1056])
	CALL $20(($17 + [1080]), ($17 + [24]))
	goto $label$14 
	
.LABEL $label$33
	*($17 + [652]) = [0]
	*($17 + [648]) = [48]
	*($17 + [432 align=4]) = *($17 + [648])
	CALL $107(($17 + [1080]), ($17 + [432]))
	goto $label$14 
	
.LABEL $label$32
	*($17 + [820]) = [0]
	*($17 + [816]) = [49]
	*($17 + [264 align=4]) = *($17 + [816])
	CALL $71(($17 + [1080]), ($17 + [264]))
	goto $label$14 
	
.LABEL $label$31
	*($17 + [764]) = [0]
	*($17 + [760]) = [50]
	*($17 + [320 align=4]) = *($17 + [760])
	CALL $84(($17 + [1080]), ($17 + [320]))
	goto $label$14 
	
.LABEL $label$30
	*($17 + [612]) = [0]
	*($17 + [608]) = [51]
	*($17 + [472 align=4]) = *($17 + [608])
	CALL $51(($17 + [1080]), ($17 + [472]))
	goto $label$14 
	
.LABEL $label$29
	*($17 + [1044]) = [0]
	*($17 + [1040]) = [52]
	*($17 + [40 align=4]) = *($17 + [1040])
	CALL $24(($17 + [1080]), ($17 + [40]))
	goto $label$14 
	
.LABEL $label$28
	*($17 + [740]) = [0]
	*($17 + [736]) = [53]
	*($17 + [344 align=4]) = *($17 + [736])
	CALL $88(($17 + [1080]), ($17 + [344]))
	goto $label$14 
	
.LABEL $label$27
	*($17 + [788]) = [0]
	*($17 + [784]) = [54]
	*($17 + [296 align=4]) = *($17 + [784])
	CALL $79(($17 + [1080]), ($17 + [296]))
	goto $label$14 
	
.LABEL $label$26
	*($17 + [596]) = [0]
	*($17 + [592]) = [55]
	*($17 + [488 align=4]) = *($17 + [592])
	CALL $16(($17 + [1080]), ($17 + [488]))
	goto $label$14 
	
.LABEL $label$25
	*($17 + [900]) = [0]
	*($17 + [896]) = [56]
	*($17 + [184 align=4]) = *($17 + [896])
	CALL $51(($17 + [1080]), ($17 + [184]))
	goto $label$14 
	
.LABEL $label$24
	*($17 + [1052]) = [0]
	*($17 + [1048]) = [57]
	*($17 + [32 align=4]) = *($17 + [1048])
	CALL $22(($17 + [1080]), ($17 + [32]))
	goto $label$14 
	
.LABEL $label$23
	*($17 + [892]) = [0]
	*($17 + [888]) = [58]
	*($17 + [192 align=4]) = *($17 + [888])
	CALL $56(($17 + [1080]), ($17 + [192]))
	goto $label$14 
	
.LABEL $label$22
	*($17 + [636]) = [0]
	*($17 + [632]) = [59]
	*($17 + [448 align=4]) = *($17 + [632])
	CALL $110(($17 + [1080]), ($17 + [448]))
	goto $label$14 
	
.LABEL $label$21
	*($17 + [580]) = [0]
	*($17 + [576]) = [60]
	*($17 + [504 align=4]) = *($17 + [576])
	CALL $121(($17 + [1080]), ($17 + [504]))
	goto $label$14 
	
.LABEL $label$20
	*($17 + [700]) = [0]
	*($17 + [696]) = [61]
	*($17 + [384 align=4]) = *($17 + [696])
	CALL $98(($17 + [1080]), ($17 + [384]))
	goto $label$14 
	
.LABEL $label$19
	*($17 + [1036]) = [0]
	*($17 + [1032]) = [62]
	*($17 + [48 align=4]) = *($17 + [1032])
	CALL $26(($17 + [1080]), ($17 + [48]))
	goto $label$14 
	
.LABEL $label$18
	*($17 + [1068]) = [0]
	*($17 + [1064]) = [63]
	*($17 + [16 align=4]) = *($17 + [1064])
	CALL $18(($17 + [1080]), ($17 + [16]))
	goto $label$14 
	
.LABEL $label$17
	*($17 + [676]) = [0]
	*($17 + [672]) = [64]
	*($17 + [408 align=4]) = *($17 + [672])
	CALL $96(($17 + [1080]), ($17 + [408]))
	goto $label$14 
	
.LABEL $label$16
	*($17 + [1020]) = [0]
	*($17 + [1016]) = [65]
	*($17 + [64 align=4]) = *($17 + [1016])
	CALL $22(($17 + [1080]), ($17 + [64]))
	goto $label$14 
	
.LABEL $label$15
	*($17 + [564]) = [0]
	*($17 + [560]) = [66]
	*($17 + [520 align=4]) = *($17 + [560])
	CALL $125(($17 + [1080]), ($17 + [520]))
	
.LABEL $label$14
	CALL $128(($17 + [1080]))
	*([0] + [4]) = ($17 + [2384])
}

void .FUNC $15 (int_32 $0, int_64 $1)
{
	CALL require_auth($1)
	CALL $892(($0 + [8]), $1)
	CALL $497(($0 + [328]), $1, [1])
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1632])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $17 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($0 + [8])
	CALL $892($3, $1)
	$3 = CALL $893($3, $1, int_32(($2 << [24]) >> [24]))
	$0 = ($0 + [328])
	CALL $497($0, $1, [1])
	if ( ((int_32)$2 == (int_32)[6]) ){ goto $label$2 }
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $497($0, $1, [2])
	CALL $497($0, $1, [3])
	
.LABEL $label$1
}

int_32 .FUNC _ZN14system_control18calculate_trx_hashEPci (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$18 = (*([0] + [4]) - [64])
	$17 = [0]
	
.LOOP $label$1:
	$3 = ($1 + $17)
	*(($18 + $17)) = ((((*(($3 + [1])) << [8]) | *($3)) | (*(($3 + [2])) << [16])) | (*(($3 + [3])) << [24]))
	$17 = ($17 + [4])
	if ( ((int_32)$17 != (int_32)[64]) ){ goto $label$1 }
	$15 = *($18 + [56])
	$17 = ((rotl((int_32) ((($15 + $17) + (($8 & $1) | ($3 & ((int_32)$8 ^ (int_32)[-1])))) + [-1452850290]))) + [17])
	$16 = *($18 + [60])
	$3 = ((rotl((int_32) ((($16 + $3) + (($17 & $8) | $8)) + ($1 & ((int_32)$17 ^ (int_32)[-1]))))) + [1236535329])
	$12 = *($18 + [40])
	$17 = ((rotl((int_32) ((($12 + $3) + (($8 & $1) | ($17 & ((int_32)$8 ^ (int_32)[-1])))) + [-42063]))) + [17])
	$13 = *($18 + [44])
	$3 = ((rotl((int_32) ((($13 + $17) + (($17 & $8) | $8)) + ($1 & ((int_32)$17 ^ (int_32)[-1]))))) + [-1990404162])
	$1 = ((rotl((int_32) ((($13 + $1) + (($3 & [22]) | $17)) + $17))) + ($8 & ((int_32)$3 ^ (int_32)[-1])))
	$9 = *($18 + [24])
	$3 = ((rotl((int_32) ((($9 + $3) + (($8 & $17) | ($1 & ((int_32)$8 ^ (int_32)[-1])))) + [-1473231341]))) + [17])
	$10 = *($18 + [28])
	$17 = ((rotl((int_32) ((($10 + $1) + (($3 & $8) | $8)) + ($17 & ((int_32)$3 ^ (int_32)[-1]))))) + [-45705983])
	$1 = ((rotl((int_32) ((($10 + $17) + (($17 & [22]) | $3)) + $3))) + ($8 & ((int_32)$17 ^ (int_32)[-1])))
	$5 = *($18 + [8])
	$3 = ((rotl((int_32) (($5 + ((((int_32)$17 ^ (int_32)[-1]) & [-271733879]) | ($17 & $1))) + [-1127338535]))) + [17])
	$6 = *($18 + [12])
	$1 = ((rotl((int_32) (($6 + (($3 & $17) | $17)) + ($1 & ((int_32)$3 ^ (int_32)[-1]))))) + [-1142322569])
	$17 = ((rotl((int_32) ((($3 + $1) + (($1 & [22]) | $3)) + $3))) + ($17 & ((int_32)$1 ^ (int_32)[-1])))
	$17 = (rotl((int_32) ($17 + [-683891593])))
	$1 = ($17 + [7])
	$4 = *($18 + [4])
	$17 = ((rotl((int_32) (($4 + (($1 & [-271733879]) | [-271733879])) + (([271733878] - $17) & [-1733444354])))) + [-116728628])
	$7 = *($18 + [20])
	$8 = ((rotl((int_32) ((($7 + $17) + [12]) + $1))) + (($17 & [-176418897]) | [7]))
	$11 = *($18 + [36])
	$8 = ((rotl((int_32) ((($11 + $8) + $1) + $1))) + ($3 & ((int_32)$17 ^ (int_32)[-1])))
	$14 = *($18 + [52])
	$8 = ((rotl((int_32) ((($14 + $8) + [1199343146]) + [12]))) + $17)
	$10 = *($18 + [32])
	$1 = ((rotl((int_32) ((($10 + $8) + (($1 & [1770035416]) | [7])) + $17))) + $17)
	$3 = *($18 + [16])
	$1 = ((rotl((int_32) ((($3 + $1) + ($3 & ((int_32)$1 ^ (int_32)[-1]))) + [-1958414417]))) + [12])
	$17 = *($18)
	$1 = ((rotl((int_32) ((($17 + $1) + $1) + (($1 & [1795234082]) | [7])))) + $3)
	$13 = *($18 + [48])
	$1 = ((rotl((int_32) ((($13 + $1) + $3) + ($17 & ((int_32)$1 ^ (int_32)[-1]))))) + [-40341101])
	((int_32)((int_32)((int_32)($1 + [12]) ^ (int_32)$1) ^ (int_32)((int_32)((int_32)$3 ^ (int_32)[22]) ^ (int_32)$17)) ^ (int_32)$17)
	($18 = ((rotl((int_32) ((($7 + $1) + ((int_32)((int_32)$17 ^ (int_32)$8) ^ (int_32)$3)) + [-378558]))) + [4]))
	$3
	[-2027985023]
	[11]
	$18
	$17 = ((rotl((int_32) ((($13 + $17) + ((int_32)((int_32)$18 ^ (int_32)$3) ^ (int_32)$1)) + [1839030562]))) + [16])
	$3 = ((rotl((int_32) ((($15 + $3) + ((int_32)((int_32)$1 ^ (int_32)$18) ^ (int_32)$17)) + $1))) + [-169986036])
	((int_32)((int_32)$3 ^ (int_32)[23]) ^ (int_32)$17)
	$17
	($18 = ((rotl((int_32) ((($4 + $18) + ((int_32)((int_32)$17 ^ (int_32)$1) ^ (int_32)$3)) + [-1530992060]))) + [4]))
	$3
	[1272638713]
	[11]
	$18
	$17 = ((rotl((int_32) ((($10 + $17) + ((int_32)((int_32)$18 ^ (int_32)$3) ^ (int_32)$1)) + [-155497632]))) + [16])
	$3 = ((rotl((int_32) ((($12 + $3) + ((int_32)((int_32)$1 ^ (int_32)$18) ^ (int_32)$17)) + $1))) + [-1093928080])
	((int_32)((int_32)$3 ^ (int_32)[23]) ^ (int_32)$17)
	$17
	($18 = ((rotl((int_32) ((($14 + $18) + ((int_32)((int_32)$17 ^ (int_32)$1) ^ (int_32)$3)) + [681279174]))) + [4]))
	$3
	[-358537222]
	[11]
	$18
	$17 = ((rotl((int_32) ((($6 + $17) + ((int_32)((int_32)$18 ^ (int_32)$3) ^ (int_32)$1)) + [-722268539]))) + [16])
	$3 = ((rotl((int_32) ((($9 + $3) + ((int_32)((int_32)$1 ^ (int_32)$18) ^ (int_32)$17)) + $1))) + [76029189])
	((int_32)((int_32)$3 ^ (int_32)[23]) ^ (int_32)$17)
	$17
	($18 = ((rotl((int_32) ((($11 + $18) + ((int_32)((int_32)$17 ^ (int_32)$1) ^ (int_32)$3)) + [-640364487]))) + [4]))
	$3
	[-425870875]
	[11]
	$18
	[272835958]
	($18 + [1732399873])
	$17 = ((rotl((int_32) ((($16 + $17) + ((int_32)((int_32)$18 ^ (int_32)$3) ^ (int_32)$1)) + [522701560]))) + [16])
	($17 + $1)
	[-1733444354]
	(($17 + (rotl((int_32) ((($5 + $3) + ((int_32)$17 ^ (int_32)((int_32)$1 ^ (int_32)$18))) + [-999635611])))) + [23])
	return [-271733879]
}

int_32 .FUNC _ZN14system_control19calculate_trx_hash2Ev (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = (*([0] + [4]) - [64])
	*([0] + [4]) = $2
	$3 = CALL current_time()
	$5 = [0]
	$1 = CALL memset($2, [0], [64])
	$2 = (CASTING uint_32)(uint_64 $3)
	
.LOOP $label$1:
	$4 = ((int_32)$5 % (int_32)[8])
	*(($1 + $5)) = (uint_32($2 >> ([8] - $4)) | ($2 << $4))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[64]) ){ goto $label$1 }
	$5 = CALL _ZN14system_control18calculate_trx_hashEPci($5, $1, [64])
	*([0] + [4]) = ($1 + [64])
	return $5
}

int_32 .FUNC _ZN14system_control19calculate_trx_hash3Em (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [128])
	*([0] + [4]) = $17
	$16 = [0]
	CALL memset(($17 + [64]), [0], [64])
	
.LOOP $label$1:
	$2 = ((int_32)$16 % (int_32)[8])
	*((($17 + [64]) + $16)) = (uint_32($1 >> ([8] - $2)) | ($1 << $2))
	$16 = ($16 + [1])
	if ( ((int_32)$16 != (int_32)[64]) ){ goto $label$1 }
	$16 = [0]
	
.LOOP $label$2:
	$1 = (($17 + [64]) + $16)
	*(($17 + $16)) = ((((*(($1 + [1])) << [8]) | *($1)) | (*(($1 + [2])) << [16])) | (*(($1 + [3])) << [24]))
	$16 = ($16 + [4])
	if ( ((int_32)$16 != (int_32)[64]) ){ goto $label$2 }
	$16 = *($17)
	$1 = *($17 + [16])
	$2 = *($17 + [8])
	$3 = *($17 + [32])
	$4 = *($17 + [24])
	$5 = *($17 + [48])
	$6 = *($17 + [40])
	$7 = *($17 + [20])
	$8 = *($17 + [56])
	$9 = *($17 + [4])
	$10 = *($17 + [44])
	$11 = *($17 + [52])
	$12 = *($17 + [28])
	$13 = *($17 + [36])
	$14 = *($17 + [12])
	$15 = *($17 + [60])
	*([0] + [4]) = ($17 + [128])
	$16 = ((rotl((int_32) ((($10 + $16) + ((int_32)$1 ^ (int_32)[-7434497])) + [606105819]))) + [16])
	$16 = ((rotl((int_32) ((($8 + $16) + (($1 & [272835958]) | [-276002167])) + [-1486404722]))) + [17])
	$16 = ((rotl((int_32) ((($6 + $16) + (($1 & [272835958]) | [-276002167])) + [-42063]))) + [17])
	$16 = ((rotl((int_32) ((($4 + $16) + (($1 & [272835958]) | [-276002167])) + [-1473231341]))) + [17])
	$16 = ((rotl((int_32) (($2 + (($16 & [272835958]) | [-276002167])) + [105586208]))) + [17])
	$16 = ((rotl((int_32) ($16 + [676167365]))) + [7])
	$1 = ((rotl((int_32) ((($1 + $16) + [-271733879]) + (($16 & [272835958]) | [-271733879])))) + [268567670])
	$1 = ((rotl((int_32) ((($3 + $1) + [-176414801]) + [7]))) + [-271733879])
	$1 = ((rotl((int_32) ((($5 + $1) + (($16 & [272835958]) | [-271733879])) + [268567670]))) + [523748856])
	$1 = ((rotl((int_32) ((($7 + $1) + [7]) + [-271733879]))) + (($16 & [272835958]) | [-271733879]))
	$1 = ((rotl((int_32) ((($9 + $1) + [268567670]) + [-722269563]))) + [7])
	$1 = ((rotl((int_32) ((($11 + $1) + [-271733879]) + ((int_32)$16 ^ (int_32)[272835958])))) + [-7434497])
	$1 = (rotl((int_32) ((($13 + $1) + [-14010046]) + [4])))
	((int_32)((int_32)($1 + [-271733879]) ^ (int_32)((int_32)$16 ^ (int_32)[272835958])) ^ (int_32)[-7434497])
	[-1531188668]
	[4]
	[-271733879]
	$16 = ((rotl((int_32) ((($12 + $16) + ((int_32)$1 ^ (int_32)[-7434497])) + [-155501728]))) + [16])
	((int_32)$16 ^ (int_32)[272835958])
	[-7434497]
	[-680876936]
	[4]
	[-271733879]
	$16 = ((rotl((int_32) ((($14 + $16) + ((int_32)$1 ^ (int_32)[-7434497])) + [1795266850]))) + [16])
	((int_32)$16 ^ (int_32)[272835958])
	[-7434497]
	[-643510215]
	[4]
	[1460665994]
	((rotl((int_32) ((($15 + $16) + ((int_32)($1 + [-271733879]) ^ (int_32)[-7434497])) + [1770625240]))) + [16])
	[-1460608396]
	return [-14868994]
}

void .FUNC _ZN14system_control15check_blacklistEN5eosio4nameE (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [32]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [48]
	$6 = (int_64)0
	
.LOOP $label$7:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$8 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$2 = ($2 + [165])
	goto $label$9 
	
.LABEL $label$10
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$8
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$7 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [64]
	$6 = (int_64)0
	
.LOOP $label$11:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$12 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$2 = ($2 + [165])
	goto $label$13 
	
.LABEL $label$14
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$12
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$11 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [80]
	$6 = (int_64)0
	
.LOOP $label$15:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$16 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$2 = ($2 + [165])
	goto $label$17 
	
.LABEL $label$18
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$16
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$15 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [96]
	$6 = (int_64)0
	
.LOOP $label$19:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$20 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$2 = ($2 + [165])
	goto $label$21 
	
.LABEL $label$22
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$20
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$19 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [112]
	$6 = (int_64)0
	
.LOOP $label$23:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$24 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$2 = ($2 + [165])
	goto $label$25 
	
.LABEL $label$26
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$24
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [128]
	$6 = (int_64)0
	
.LOOP $label$27:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$28 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$2 = ($2 + [165])
	goto $label$29 
	
.LABEL $label$30
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$28
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$27 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [144]
	$6 = (int_64)0
	
.LOOP $label$31:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$32 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$2 = ($2 + [165])
	goto $label$33 
	
.LABEL $label$34
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$32
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$31 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [160]
	$6 = (int_64)0
	
.LOOP $label$35:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$36 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$2 = ($2 + [165])
	goto $label$37 
	
.LABEL $label$38
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$36
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$35 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [176]
	$6 = (int_64)0
	
.LOOP $label$39:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$40 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$42 }
	$2 = ($2 + [165])
	goto $label$41 
	
.LABEL $label$42
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$41
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$40
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$39 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [192]
	$6 = (int_64)0
	
.LOOP $label$43:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$44 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$2 = ($2 + [165])
	goto $label$45 
	
.LABEL $label$46
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$44
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$43 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [208]
	$6 = (int_64)0
	
.LOOP $label$47:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$48 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$50 }
	$2 = ($2 + [165])
	goto $label$49 
	
.LABEL $label$50
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$49
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$48
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$47 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [224]
	$6 = (int_64)0
	
.LOOP $label$51:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$52 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$2 = ($2 + [165])
	goto $label$53 
	
.LABEL $label$54
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$52
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$51 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [240]
	$6 = (int_64)0
	
.LOOP $label$55:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$56 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$58 }
	$2 = ($2 + [165])
	goto $label$57 
	
.LABEL $label$58
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$57
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$56
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$55 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [256]
	$6 = (int_64)0
	
.LOOP $label$59:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$60 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$62 }
	$2 = ($2 + [165])
	goto $label$61 
	
.LABEL $label$62
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$61
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$60
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$59 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [272]
	$6 = (int_64)0
	
.LOOP $label$63:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$64 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$66 }
	$2 = ($2 + [165])
	goto $label$65 
	
.LABEL $label$66
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$65
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$64
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$63 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [288]
	$6 = (int_64)0
	
.LOOP $label$67:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$68 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$70 }
	$2 = ($2 + [165])
	goto $label$69 
	
.LABEL $label$70
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$69
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$68
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$67 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [304]
	$6 = (int_64)0
	
.LOOP $label$71:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$72 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$74 }
	$2 = ($2 + [165])
	goto $label$73 
	
.LABEL $label$74
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$73
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$72
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$71 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [320]
	$6 = (int_64)0
	
.LOOP $label$75:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$76 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$78 }
	$2 = ($2 + [165])
	goto $label$77 
	
.LABEL $label$78
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$77
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$76
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$75 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [336]
	$6 = (int_64)0
	
.LOOP $label$79:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$80 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$82 }
	$2 = ($2 + [165])
	goto $label$81 
	
.LABEL $label$82
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$81
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$80
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$79 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [352]
	$6 = (int_64)0
	
.LOOP $label$83:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$84 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$86 }
	$2 = ($2 + [165])
	goto $label$85 
	
.LABEL $label$86
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$85
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$84
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$83 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [368]
	$6 = (int_64)0
	
.LOOP $label$87:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$88 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$90 }
	$2 = ($2 + [165])
	goto $label$89 
	
.LABEL $label$90
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$89
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$88
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$87 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [384]
	$6 = (int_64)0
	
.LOOP $label$91:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$92 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$94 }
	$2 = ($2 + [165])
	goto $label$93 
	
.LABEL $label$94
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$93
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$92
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$91 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [400]
	$6 = (int_64)0
	
.LOOP $label$95:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$96 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$98 }
	$2 = ($2 + [165])
	goto $label$97 
	
.LABEL $label$98
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$97
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$96
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$95 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [416]
	$6 = (int_64)0
	
.LOOP $label$99:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$100 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$102 }
	$2 = ($2 + [165])
	goto $label$101 
	
.LABEL $label$102
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$101
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$100
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$99 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [432]
	$6 = (int_64)0
	
.LOOP $label$103:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$104 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$106 }
	$2 = ($2 + [165])
	goto $label$105 
	
.LABEL $label$106
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$105
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$104
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$103 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [448]
	$6 = (int_64)0
	
.LOOP $label$107:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$108 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$110 }
	$2 = ($2 + [165])
	goto $label$109 
	
.LABEL $label$110
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$109
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$108
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$107 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [464]
	$6 = (int_64)0
	
.LOOP $label$111:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$112 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$114 }
	$2 = ($2 + [165])
	goto $label$113 
	
.LABEL $label$114
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$113
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$112
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$111 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [480]
	$6 = (int_64)0
	
.LOOP $label$115:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$116 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$118 }
	$2 = ($2 + [165])
	goto $label$117 
	
.LABEL $label$118
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$117
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$116
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$115 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [496]
	$6 = (int_64)0
	
.LOOP $label$119:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$120 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$122 }
	$2 = ($2 + [165])
	goto $label$121 
	
.LABEL $label$122
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$121
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$120
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$119 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [512]
	$6 = (int_64)0
	
.LOOP $label$123:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$124 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$126 }
	$2 = ($2 + [165])
	goto $label$125 
	
.LABEL $label$126
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$125
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$124
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$123 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [528]
	$6 = (int_64)0
	
.LOOP $label$127:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$128 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$130 }
	$2 = ($2 + [165])
	goto $label$129 
	
.LABEL $label$130
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$129
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$128
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$127 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$7 = (int_64)59
	$3 = [544]
	$6 = (int_64)0
	
.LOOP $label$131:
	if ( ((uint_64)$5 > (uint_64)(int_64)3) ){ goto $label$136 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$135 }
	$2 = ($2 + [165])
	goto $label$134 
	
.LABEL $label$136
	$4 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$133 }
	goto $label$132 
	
.LABEL $label$135
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$134
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$133
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$132
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$4 | (int_64)$6)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$131 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [560]
	$6 = (int_64)0
	
.LOOP $label$137:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$138 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$140 }
	$2 = ($2 + [165])
	goto $label$139 
	
.LABEL $label$140
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$139
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$138
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$137 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [576]
	$6 = (int_64)0
	
.LOOP $label$141:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$142 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$144 }
	$2 = ($2 + [165])
	goto $label$143 
	
.LABEL $label$144
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$143
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$142
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$141 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [592]
	$6 = (int_64)0
	
.LOOP $label$145:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$146 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$148 }
	$2 = ($2 + [165])
	goto $label$147 
	
.LABEL $label$148
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$147
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$146
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$145 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [608]
	$6 = (int_64)0
	
.LOOP $label$149:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$150 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$152 }
	$2 = ($2 + [165])
	goto $label$151 
	
.LABEL $label$152
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$151
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$150
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$149 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [624]
	$6 = (int_64)0
	
.LOOP $label$153:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$154 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$156 }
	$2 = ($2 + [165])
	goto $label$155 
	
.LABEL $label$156
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$155
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$154
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$153 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$7 = (int_64)59
	$3 = [640]
	$6 = (int_64)0
	
.LOOP $label$157:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$162 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$161 }
	$2 = ($2 + [165])
	goto $label$160 
	
.LABEL $label$162
	$4 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$159 }
	goto $label$158 
	
.LABEL $label$161
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$160
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$159
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$158
	$3 = ($3 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$6 = ((int_64)$4 | (int_64)$6)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$157 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$7 = (int_64)59
	$3 = [656]
	$6 = (int_64)0
	
.LOOP $label$163:
	if ( ((uint_64)$5 > (uint_64)(int_64)6) ){ goto $label$168 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$167 }
	$2 = ($2 + [165])
	goto $label$166 
	
.LABEL $label$168
	$4 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$165 }
	goto $label$164 
	
.LABEL $label$167
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$166
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$165
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$164
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$4 | (int_64)$6)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$163 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$7 = (int_64)59
	$3 = [672]
	$6 = (int_64)0
	
.LOOP $label$169:
	if ( ((uint_64)$5 > (uint_64)(int_64)4) ){ goto $label$174 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$173 }
	$2 = ($2 + [165])
	goto $label$172 
	
.LABEL $label$174
	$4 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$171 }
	goto $label$170 
	
.LABEL $label$173
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$172
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$171
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$170
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$4 | (int_64)$6)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$169 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [688]
	$6 = (int_64)0
	
.LOOP $label$175:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$176 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$178 }
	$2 = ($2 + [165])
	goto $label$177 
	
.LABEL $label$178
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$177
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$176
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$175 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$6 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [704]
	$6 = (int_64)0
	
.LOOP $label$179:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$180 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$182 }
	$2 = ($2 + [165])
	goto $label$181 
	
.LABEL $label$182
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$181
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$180
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$179 }
	if ( ((int_64)$6 != (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert([0], [720])
	
.LABEL $label$5
}

int_32 .FUNC $554 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [1600])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $955([24])) + [12]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [1632])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [1632])
	CALL memcpy(($6 + [8]), ($7 + [8]), [4])
	*($6 + [16]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [16])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $558(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$4 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1632])
	CALL memcpy($6, $4, [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [1632])
	$7 = ($6 + [8])
	CALL memcpy($7, ($4 + [8]), [1])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($4)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($7)
	$3 = *($6)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 ($4 & [255])), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	CALL $889(($0 + [880]), $1, $2, $3)
}

void .FUNC $579 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	*((($12 = $5) + [48])) = (int_64)1397703940
	$11 = [0]
	*($12 + [24]) = [0]
	*($12 + [16]) = (int_64)0
	*($12 + [28]) = [0]
	*($12 + [32]) = (int_64)0
	*($12 + [40]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$10 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [3776])
	$10 = ((int_64)*($1 + [8]) + (int_64)1)
	*($1 + [8]) = $10
	*((($12 + [16]) + [8])) = *(*($3))
	*($12 + [16]) = $10
	*(($12 + [28])) = *(*($3 + [4]))
	*((($12 + [16]) + [16])) = *(*($3 + [8]))
	$11 = *($3 + [12])
	*(($12 + [48])) = *(($11 + [8]))
	*($12 + [40]) = *($11)
	$11 = ($1 + [20])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)*(($1 + [24]))) ){ goto $label$7 }
	CALL memcpy($7, ($12 + [16]), [40])
	*($11) = (*($11) + [40])
	$7 = ($1 + [16])
	goto $label$6 
	
.LABEL $label$7
	$7 = ($1 + [16])
	CALL $583($7, ($12 + [16]))
	
.LABEL $label$6
	$3 = ($1 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$8 = *($7)
	$9 = *(($1 + [20]))
	$6 = ($9 - $8)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[40]))
	$11 = [54]
	
.LOOP $label$8:
	$11 = ($11 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$8 }
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$10 }
	$8 = (((int_32)((uint_32)($6 + [-40]) / (uint_32)[40]) * (int_32)[38]) + $11)
	goto $label$9 
	
.LABEL $label$10
	$8 = ($11 + [-38])
	
.LABEL $label$9
	if ( ($8 <= [513]) ){ goto $label$12 }
	$9 = CALL malloc($8)
	goto $label$11 
	
.LABEL $label$12
	$9 = ($5 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$11
	*($12) = $9
	$5 = ($9 + $8)
	*($12 + [8]) = $5
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [1920])
	CALL memcpy($9, $1, [8])
	$11 = ($9 + [8])
	CALL eosio_assert(((int_32)($5 - $11) > (int_32)[7]), [1920])
	CALL memcpy($11, $3, [8])
	$11 = ($9 + [16])
	*($12 + [4]) = $11
	$10 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [20])) - *($7)) / (int_32)[40]))
	
.LOOP $label$13:
	$7 = (CASTING uint_32)(uint_64 $10)
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	$3 = ((int_64)$10) != (int_64)0
	*($12 + [16]) = (($3) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)($5 - $11) > (int_32)[0]), [1920])
	CALL memcpy($11, ($12 + [16]), [1])
	$11 = ($11 + [1])
	*($12 + [4]) = $11
	if ( $3 ){ goto $label$13 }
	$7 = *(($1 + [20]))
	$11 = *($1 + [16])
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$14 }
	
.LOOP $label$15:
	*($12 + [56]) = $12
	*($12 + [16]) = $11
	*((($12 + [16]) + [8])) = ($11 + [12])
	*((($12 + [16]) + [12])) = ($11 + [16])
	*((($12 + [16]) + [16])) = ($11 + [24])
	*($12 + [20]) = ($11 + [8])
	CALL $430(($12 + [16]), ($12 + [56]))
	$11 = ($11 + [40])
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$15 }
	
.LABEL $label$14
	CALL db_update_i64(*($1 + [32]), $2, $9, $8)
	if ( ($8 <= [513]) ){ goto $label$16 }
	CALL free($9)
	
.LABEL $label$16
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$17 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	*([0] + [4]) = ($12 + [64])
}

int_32 .FUNC $902 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [144])
	*([0] + [4]) = $14
	CALL require_auth($1)
	$13 = [0]
	*(($14 + [120])) = [0]
	*($14 + [104]) = (int_64)-1
	*($14 + [112]) = (int_64)0
	$10 = *($0 + [8])
	*($14 + [88]) = $10
	*($14 + [96]) = $10
	$11 = [0]
	$9 = CALL db_find_i64($10, $10, (int_64)-4227314345542942720, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $269(($14 + [88]), $9)
	CALL eosio_assert(((int_32)*($11 + [20]) == (int_32)($14 + [88])), [1536])
	
.LABEL $label$1
	$3 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($3, [9856])
	*($14 + [84]) = [0]
	$12 = *($11 + [8])
	$5 = *(($11 + [12]))
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$2 }
	$8 = ((int_32)($5 - $12) / (int_32)[12])
	$13 = [0]
	$9 = $12
	
.LOOP $label$3:
	if ( ((int_32)*($9) == (int_32)$2) ){ goto $label$2 }
	$9 = ($9 + [12])
	$13 = ($13 + [1])
	*($14 + [84]) = $13
	if ( ($13 <= $8) ){ goto $label$3 }
	
.LABEL $label$2
	CALL eosio_assert(($13 <= ((int_32)($5 - $12) / (int_32)[12])), [9856])
	$8 = *(($11 + [8]))
	$9 = ($8 + ((int_32)$13 * (int_32)[12]))
	$4 = *($9 + [9])
	$12 = [0]
	*((($14 + [40]) + [32])) = [0]
	*($14 + [64]) = (int_64)0
	*($14 + [56]) = (int_64)-1
	$6 = ($0 + [8])
	$10 = *($6)
	*($14 + [40]) = $10
	*($14 + [48]) = $10
	$5 = [0]
	$7 = CALL db_find_i64($10, $10, (int_64)-4803765288141062144, ((int_64)*($9 + [8]) + (int_64)1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $907(($14 + [40]), $7)
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)($14 + [40])), [1536])
	
.LABEL $label$4
	$9 = ($9 + [8])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9888])
	CALL eosio_assert(((uint_32)*(($8 + ((int_32)$13 * (int_32)[12])) + [4]) >= (uint_32)*($5 + [8])), [9920])
	*(($14 + [32])) = [0]
	*($14 + [16]) = (int_64)-1
	*($14 + [24]) = (int_64)0
	$10 = *($6)
	*($14) = $10
	*($14 + [8]) = $10
	$13 = CALL db_find_i64($10, $10, (int_64)-4803775097846366208, (CASTING uint_64)(uint_32 $2))
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$5 }
	$12 = CALL $160($14, $13)
	CALL eosio_assert(((int_32)*($12 + [28]) == (int_32)$14), [1536])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [1952])
	CALL eosio_assert((*($9) <= (uint_32([219017] >> ((*($12 + [8]) << [2]) + [-4])) & [15])), [9952])
	$7 = *(($6 + [32]))
	$6 = *($0 + [20])
	$2 = *(($6 + [36]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$13 = ($2 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$7:
	if ( ((int_64)*(*($13)) == (int_64)$1) ){ goto $label$6 }
	$2 = $13
	$9 = ($13 + [-24])
	$13 = $9
	if ( ((int_32)($9 + $8) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$9 = ($6 + [8])
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$9 }
	$13 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [40]) == (int_32)$9), [1536])
	goto $label$8 
	
.LABEL $label$9
	$13 = [0]
	$2 = CALL db_find_i64(*(($6 + [8])), *(($6 + [16])), (int_64)-4223691270582697984, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$8 }
	$13 = CALL $274($9, $2)
	CALL eosio_assert(((int_32)*($13 + [40]) == (int_32)$9), [1536])
	
.LABEL $label$8
	$9 = [0]
	$8 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($8, [2368])
	$2 = (*(($12 + [8])) + [-1])
	if ( ((uint_32)$2 > (uint_32)[4]) ){ goto $label$10 }
	goto $label$15 
	
.LABEL $label$15
	$9 = *($5 + [10])
	goto $label$10 
	
.LABEL $label$14
	$9 = *($5 + [12])
	goto $label$10 
	
.LABEL $label$13
	$9 = *($5 + [14])
	goto $label$10 
	
.LABEL $label$12
	$9 = *($5 + [16])
	goto $label$10 
	
.LABEL $label$11
	$9 = *($5 + [18])
	
.LABEL $label$10
	$9 = ($9 & [65535])
	CALL eosio_assert(((uint_32)$9 <= (uint_32)*($13 + [16])), [2880])
	if ( ($9 == 0) ){ goto $label$16 }
	$2 = *(($0 + [20]))
	*($14 + [136]) = $9
	CALL eosio_assert(((uint_32)*(($13 + [16])) >= (uint_32)$9), [2880])
	$1 = *($2)
	*($14 + [128]) = ($14 + [136])
	CALL eosio_assert($8, [1696])
	CALL $295(($2 + [8]), $13, $1, ($14 + [128]))
	
.LABEL $label$16
	$1 = *(($0 + [8]))
	*($14 + [136]) = ($14 + [84])
	CALL eosio_assert($3, [1696])
	CALL $908(($14 + [88]), $11, $1, ($14 + [136]))
	$2 = *($14 + [24])
	if ( ($2 == 0) ){ goto $label$17 }
	$8 = ($14 + [28])
	$13 = *($8)
	if ( ((int_32)$13 == (int_32)$2) ){ goto $label$19 }
	
.LOOP $label$20:
	$13 = ($13 + [-24])
	$9 = *($13)
	*($13) = [0]
	if ( ($9 == 0) ){ goto $label$21 }
	CALL $956($9)
	
.LABEL $label$21
	if ( ((int_32)$2 != (int_32)$13) ){ goto $label$20 }
	$13 = *(($14 + [24]))
	goto $label$18 
	
.LABEL $label$19
	$13 = $2
	
.LABEL $label$18
	*($8) = $2
	CALL $956($13)
	
.LABEL $label$17
	$2 = *($14 + [64])
	if ( ($2 == 0) ){ goto $label$22 }
	$8 = ($14 + [68])
	$13 = *($8)
	if ( ((int_32)$13 == (int_32)$2) ){ goto $label$24 }
	
.LOOP $label$25:
	$13 = ($13 + [-24])
	$9 = *($13)
	*($13) = [0]
	if ( ($9 == 0) ){ goto $label$26 }
	CALL $956($9)
	
.LABEL $label$26
	if ( ((int_32)$2 != (int_32)$13) ){ goto $label$25 }
	$13 = *(($14 + [64]))
	goto $label$23 
	
.LABEL $label$24
	$13 = $2
	
.LABEL $label$23
	*($8) = $2
	CALL $956($13)
	
.LABEL $label$22
	$8 = *($14 + [112])
	if ( ($8 == 0) ){ goto $label$27 }
	$11 = ($14 + [116])
	$13 = *($11)
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$29 }
	
.LOOP $label$30:
	$13 = ($13 + [-24])
	$9 = *($13)
	*($13) = [0]
	if ( ($9 == 0) ){ goto $label$31 }
	$2 = *($9 + [8])
	if ( ($2 == 0) ){ goto $label$32 }
	*(($9 + [12])) = $2
	CALL $956($2)
	
.LABEL $label$32
	CALL $956($9)
	
.LABEL $label$31
	if ( ((int_32)$8 != (int_32)$13) ){ goto $label$30 }
	$13 = *(($14 + [112]))
	goto $label$28 
	
.LABEL $label$29
	$13 = $8
	
.LABEL $label$28
	*($11) = $8
	CALL $956($13)
	
.LABEL $label$27
	*([0] + [4]) = ($14 + [144])
	$2
	return int_32(($4 << [24]) >> [24])
}

void .FUNC $556 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $955([24])
	CALL $557($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [16])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $558(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $956($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $631 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [4])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($7 >> [3])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $955(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [4]))
	$2 = ($7 + ($4 << [4]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [4]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $956($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $642 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = [-1]
	$4 = *($1 + [32])
	$6 = *(($1 + [36]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$1 }
	$8 = ($4 + [4])
	$7 = int_32(($6 - $4) >> [5])
	$6 = [0]
	$5 = (*(*($0)) & [65535])
	
.LOOP $label$3:
	if ( ((int_32)*($8) == (int_32)$5) ){ goto $label$2 }
	$8 = ($8 + [32])
	$6 = ($6 + [1])
	if ( ($6 <= $7) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = $6
	
.LABEL $label$1
	*(($4 + ($2 << [5])) + [8]) = *(*($0 + [4]))
	$3 = *(($1 + [24]))
	$0 = (*($1 + [20]) + (*(*($0 + [8])) << [5]))
	$7 = ($0 + [32])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	*($0) = *($7)
	*(($0 + [8])) = *(($7 + [8]))
	$4 = *($0 + [16])
	if ( ($4 == 0) ){ goto $label$8 }
	$8 = $4
	$2 = ($0 + [20])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$9 }
	$5 = ([0] - $4)
	$8 = ($6 + [-12])
	
.LOOP $label$10:
	$6 = *($8)
	if ( ($6 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $6
	CALL $956($6)
	
.LABEL $label$11
	$8 = ($8 + [-28])
	if ( ((int_32)($8 + $5) != (int_32)[-12]) ){ goto $label$10 }
	$8 = *(($0 + [16]))
	
.LABEL $label$9
	*($2) = $4
	CALL $956($8)
	*(($5 = ($0 + [24]))) = [0]
	*(($0 + [16])) = (int_64)0
	goto $label$7 
	
.LABEL $label$8
	$5 = ($0 + [24])
	
.LABEL $label$7
	$8 = ($7 + [16])
	*(($0 + [16])) = *($8)
	$6 = ($7 + [24])
	*($5) = *($6)
	*($6) = [0]
	*($8) = [0]
	*(($7 + [20])) = [0]
	$0 = ($0 + [32])
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	$7 = *(($1 + [24]))
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$5
	
.LOOP $label$12:
	$2 = ($7 + [-32])
	$3 = ($7 + [-16])
	$4 = *($3)
	if ( ($4 == 0) ){ goto $label$13 }
	$8 = $4
	$7 = ($7 + [-12])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$14 }
	$5 = ([0] - $4)
	$8 = ($6 + [-12])
	
.LOOP $label$15:
	$6 = *($8)
	if ( ($6 == 0) ){ goto $label$16 }
	*(($8 + [4])) = $6
	CALL $956($6)
	
.LABEL $label$16
	$8 = ($8 + [-28])
	if ( ((int_32)($8 + $5) != (int_32)[-12]) ){ goto $label$15 }
	$8 = *($3)
	
.LABEL $label$14
	*($7) = $4
	CALL $956($8)
	
.LABEL $label$13
	$7 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$12 }
	
.LABEL $label$4
	*(($1 + [24])) = $0
}

void .FUNC $630 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $6) >> [3]) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$3 = int_32(($6 - $5) >> [3])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$4 }
	$6 = [536870911]
	$2 = ($2 - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$7 }
	$6 = int_32($2 >> [2])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $955(($6 << [3]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($6) = (int_64)0
	*($6 + [2]) = [0]
	*($6) = [0]
	*($6 + [4]) = [0]
	$6 = (*($0) + [8])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $971($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($6 << [3]))
	$5 = ($2 + ($3 << [3]))
	$6 = $5
	
.LOOP $label$9:
	*($6) = (int_64)0
	*($6 + [2]) = [0]
	*($6) = [0]
	*($6 + [4]) = [0]
	$6 = ($6 + [8])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $956($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $391 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1648])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = ((int_32)($2 - $7) / (int_32)[24])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $392($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ((int_32)$4 * (int_32)[24]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$3 = *($4)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [1632])
	CALL memcpy($7, *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [1632])
	CALL memcpy(($7 + [8]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [1632])
	CALL memcpy(($7 + [16]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $640 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	*($7 + [72]) = $1
	*($7 + [60]) = $2
	*($7 + [56]) = [0]
	*($7 + [64]) = [0]
	*(($7 + [48])) = [0]
	*($7 + [32]) = (int_64)-1
	*($7 + [40]) = (int_64)0
	$5 = *($0 + [8])
	*($7 + [16]) = $5
	*($7 + [24]) = $5
	$2 = CALL db_find_i64($5, $5, (int_64)-7948101582086733824, $1)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$3 }
	$2 = CALL $214(($7 + [16]), $2)
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)($7 + [16])), [1536])
	$5 = *(($0 + [8]))
	*($7 + [12]) = ($7 + [72])
	*($7 + [8]) = ($7 + [56])
	CALL eosio_assert([1], [1696])
	CALL $644(($7 + [16]), $2, $5, ($7 + [8]))
	$3 = *($7 + [40])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *(($0 + [8]))
	*($7 + [12]) = ($7 + [72])
	*($7 + [8]) = ($7 + [56])
	CALL $643($7, ($7 + [16]), $5, ($7 + [8]))
	$3 = *($7 + [40])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($7 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	$4 = *($2 + [12])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [16])) = $4
	CALL $956($4)
	
.LABEL $label$8
	CALL $956($2)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($7 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $3
	
.LABEL $label$4
	*($6) = $3
	CALL $956($0)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [80])
}

void .FUNC $641 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	CALL $642($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	*(($3 = $6)) = [0]
	CALL $606($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	CALL $607($3, $1)
	CALL db_update_i64(*($1 + [68]), $2, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [16])
}

int_32 .FUNC $646 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $955([56]))) = (int_64)0
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [32 align=4]) = (int_64)0
	*($6 + [40]) = [0]
	*($6 + [44]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [1632])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $649(CALL $649(CALL $649(($8 + [32]), ($6 + [8])), ($6 + [20])), ($6 + [32]))
	*($6 + [48]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [48])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $650(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [36])) = $7
	CALL $956($7)
	
.LABEL $label$10
	$7 = *($4 + [20])
	if ( ($7 == 0) ){ goto $label$11 }
	*(($4 + [24])) = $7
	CALL $956($7)
	
.LABEL $label$11
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$12 }
	*(($4 + [12])) = $7
	CALL $956($7)
	
.LABEL $label$12
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $557 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*($0 + [12]) = $1
	$1 = *($2)
	$4 = *(*(*($2 + [4])))
	*($0) = *($4)
	*(($5 = ($0 + [8]))) = *(($4 + [8]))
	CALL eosio_assert([1], [1920])
	CALL memcpy($6, $0, [8])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($6 | [8]), $5, [4])
	$3 = *($0)
	*($0 + [16]) = CALL db_store_i64(*($1 + [8]), (int_64)-4697967887266086912, *(*($2 + [8])), $3, $6, [12])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [16])
	return $0
}

void .FUNC $647 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [2])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$4 = [1073741823]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$4 = int_32($2 >> [1])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $955(($4 << [2]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [2])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [2]))
	$7 = ($3 + [4])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $956($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $650 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $955(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $651(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

void .FUNC $644 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$11 = (*([0] + [4]) - [16])
	$12 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*(*($3)) = (*($1 + [8]) + [1])
	$4 = *($1)
	*($1) = *(*($3 + [4]))
	*($1 + [8]) = *(*($3))
	$3 = *($3)
	$9 = ($1 + [16])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)*(($1 + [20]))) ){ goto $label$2 }
	*($5) = *($3)
	*(($5 + [8])) = *(($3 + [8]))
	*($9) = (*($9) + [12])
	$9 = ($1 + [12])
	goto $label$1 
	
.LABEL $label$2
	$9 = ($1 + [12])
	CALL $218($9, $3)
	
.LABEL $label$1
	$5 = ($1 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$3 = [12]
	$7 = *($9)
	$6 = *(($1 + [16]))
	$8 = ($6 - $7)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$8 / (int_32)[12]))
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	$3 = ((((int_32)((uint_32)($8 + [-12]) / (uint_32)[12]) * (int_32)[10]) + $3) + [10])
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$11 = CALL malloc($3)
	goto $label$5 
	
.LABEL $label$6
	$11 = ($11 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $11
	
.LABEL $label$5
	*($12) = $11
	$6 = ($11 + $3)
	*($12 + [8]) = $6
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [1920])
	CALL memcpy($11, $1, [8])
	$7 = ($11 + [8])
	CALL eosio_assert(((int_32)($6 - $7) > (int_32)[3]), [1920])
	CALL memcpy($7, $5, [4])
	*($12 + [4]) = ($11 + [12])
	CALL $217($12, $9)
	CALL db_update_i64(*($1 + [28]), $2, $11, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL free($11)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $645 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	*(*(($7 = *($0 + [4])))) = [1]
	*($1 + [8]) = *(*($7))
	$2 = *($0)
	*($1) = *(*($7 + [4]))
	$7 = *($7)
	$4 = ($1 + [16])
	$9 = *($4)
	if ( ((int_32)$9 == (int_32)*(($1 + [20]))) ){ goto $label$2 }
	*($9) = *($7)
	*(($9 + [8])) = *(($7 + [8]))
	$9 = (*($4) + [12])
	*($4) = $9
	$6 = ($1 + [12])
	goto $label$1 
	
.LABEL $label$2
	$6 = ($1 + [12])
	CALL $218($6, $7)
	$9 = *($4)
	
.LABEL $label$1
	$4 = ($1 + [8])
	$7 = [12]
	$3 = *($6)
	$5 = ($9 - $3)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[12]))
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$4 }
	$7 = ((((int_32)((uint_32)($5 + [-12]) / (uint_32)[12]) * (int_32)[10]) + $7) + [10])
	
.LABEL $label$4
	if ( ($7 <= [513]) ){ goto $label$6 }
	$9 = CALL malloc($7)
	goto $label$5 
	
.LABEL $label$6
	$9 = ($11 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$5
	*($10) = $9
	$11 = ($9 + $7)
	*($10 + [8]) = $11
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [1920])
	CALL memcpy($9, $1, [8])
	$3 = ($9 + [8])
	CALL eosio_assert(((int_32)($11 - $3) > (int_32)[3]), [1920])
	CALL memcpy($3, $4, [4])
	*($10 + [4]) = ($9 + [12])
	CALL $217($10, $6)
	$8 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)-7948101582086733824, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL free($9)
	
.LABEL $label$7
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $639 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [112])
	*([0] + [4]) = $17
	$4 = *($2)
	$11 = int_32((*($3 + [4]) - *($3)) >> [2])
	CALL eosio_assert(((uint_32)$11 > (uint_32)[4]), [6640])
	$12 = [0]
	*((($17 + [72]) + [32])) = [0]
	*($17 + [88]) = (int_64)-1
	*($17 + [96]) = (int_64)0
	$13 = *($0)
	*($17 + [72]) = $13
	*($17 + [80]) = $13
	$14 = [0]
	$9 = CALL db_find_i64($13, $13, (int_64)-5011039453897031680, $4)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$14 = CALL $602(($17 + [72]), $9)
	CALL eosio_assert(((int_32)*($14 + [56]) == (int_32)($17 + [72])), [1536])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [6672])
	*((($17 + [32]) + [32])) = [0]
	*($17 + [48]) = (int_64)-1
	*($17 + [56]) = (int_64)0
	$13 = *($0)
	*($17 + [32]) = $13
	*($17 + [40]) = $13
	$0 = CALL db_find_i64($13, $13, (int_64)-4852492259049865216, $4)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$12 = CALL $646(($17 + [32]), $0)
	CALL eosio_assert(((int_32)*($12 + [44]) == (int_32)($17 + [32])), [1536])
	
.LABEL $label$2
	$16 = [0]
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [6672])
	$0 = *($2 + [4])
	*($17 + [24]) = [0]
	*($17 + [16]) = (int_64)0
	CALL $647(($17 + [16]), *($3))
	$5 = (CASTING uint_32)(uint_64 ((int_64)(uint_64)$1 >> (uint_64)(int_64)8) + (int_64)127))
	if ( ($11 <= [2]) ){ goto $label$3 }
	$6 = ((int_32)$0 ^ (int_32)$5)
	$15 = ($11 + [-1])
	$10 = ($17 + [24])
	$0 = [4]
	
.LOOP $label$4:
	$8 = ((int_32)$6 ^ (int_32)*((*($3) + $0)))
	*($17 + [12]) = $8
	$9 = *($17 + [20])
	if ( ((int_32)$9 == (int_32)*($10)) ){ goto $label$6 }
	*($9) = $8
	*($17 + [20]) = ($9 + [4])
	goto $label$5 
	
.LABEL $label$6
	CALL $647(($17 + [16]), ($17 + [12]))
	
.LABEL $label$5
	$0 = ($0 + [4])
	$15 = ($15 + [-1])
	if ( $15 ){ goto $label$4 }
	
.LABEL $label$3
	$9 = ($11 + [-1])
	$0 = *($17 + [16])
	$7 = *(($0 + ($9 << [2])))
	$0 = *(($2 + [4]))
	CALL eosio_assert(((int_32)*($0) == (int_32)$0), [6704])
	$2 = [0]
	if ( ($9 <= [2]) ){ goto $label$7 }
	$8 = ($11 + [-2])
	$3 = ((int_32)$0 ^ (int_32)$5)
	$6 = ($14 + [18])
	$11 = ($12 + [8])
	$12 = ($12 + [12])
	$15 = [4]
	$0 = [0]
	$2 = [0]
	$16 = [0]
	
.LOOP $label$8:
	$16 = ( $16 ? [0] : $0 )
	$9 = *((*($17 + [16]) + $15))
	$0 = ($0 + [1])
	if ( ((int_32)$0 <= (int_32)*($6)) ){ goto $label$10 }
	if ( ($9 == 0) ){ goto $label$9 }
	CALL eosio_assert((($9 + [-65536]) <= [196608]), [6832])
	CALL eosio_assert((($9 & [65024]) <= [2560]), [6864])
	$2 = ($2 + [1])
	goto $label$9 
	
.LABEL $label$10
	$13 = ((uint_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $3) * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	$10 = *($11)
	CALL eosio_assert(((int_32)$9 == (int_32)*(($10 + ((int_32)(CASTING uint_32)(uint_64 (uint_64)((int_64)(CASTING uint_64)(uint_32 ((int_32)(*($12) - $10) / (int_32)[40])) * (int_64)$13) >> (uint_64)(int_64)31)) * (int_32)[40])))), [6800])
	$3 = (CASTING uint_32)(uint_64 $13)
	
.LABEL $label$9
	$16 = ((int_32)$9 ^ (int_32)$16)
	$15 = ($15 + [4])
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert(((uint_32)$2 > (uint_32)[2]), [6736])
	CALL eosio_assert(((int_32)$16 == (int_32)$7), [6768])
	$0 = *($17 + [16])
	if ( ($0 == 0) ){ goto $label$11 }
	*($17 + [20]) = $0
	CALL $956($0)
	
.LABEL $label$11
	CALL $648(($17 + [56]))
	$15 = *($17 + [96])
	if ( ($15 == 0) ){ goto $label$12 }
	$16 = ($17 + [100])
	$0 = *($16)
	if ( ((int_32)$0 == (int_32)$15) ){ goto $label$14 }
	
.LOOP $label$15:
	$0 = ($0 + [-24])
	$9 = *($0)
	*($0) = [0]
	if ( ($9 == 0) ){ goto $label$16 }
	CALL $956($9)
	
.LABEL $label$16
	if ( ((int_32)$15 != (int_32)$0) ){ goto $label$15 }
	$0 = *(($17 + [96]))
	goto $label$13 
	
.LABEL $label$14
	$0 = $15
	
.LABEL $label$13
	*($16) = $15
	CALL $956($0)
	
.LABEL $label$12
	*([0] + [4]) = ($17 + [112])
}

void .FUNC $619 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$3 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = ($7 + [-24])
	$2 = *($6)
	*($6) = [0]
	*(($1 + [-24])) = $2
	*(($1 + [-8])) = *(($7 + [-8]))
	*(($1 + [-12])) = *(($7 + [-12]))
	*(($1 + [-16])) = *(($7 + [-16]))
	$1 = ($1 + [-24])
	$7 = $6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$7 }
	$3 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $3
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$8 }
	$1 = ($3 + [-24])
	
.LOOP $label$9:
	$7 = CALL $604($1)
	$1 = ($1 + [-24])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $956($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $618 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $622(CALL $621(CALL $620($0, ($1 + [8])), ($1 + [20])), ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $638 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	$11 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $11) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$11 = ((int_32)(*($0 + [8]) - $11) / (int_32)[40])
	if ( ((uint_32)$11 > (uint_32)[53687090]) ){ goto $label$4 }
	$11 = ($11 << [1])
	$9 = ( $7 ? $11 : ($11 <= $7) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $955(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	*(($11 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($11 + [8]) = *($3)
	*($11 + [16 align=4]) = (int_64)0
	*(($3 = ($11 + [24]))) = [0]
	$2 = CALL $955([16])
	*($11 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($11 + [20])) = $5
	*($11 + [28]) = [0]
	*(($6 = ($11 + [32]))) = [0]
	*(($11 + [36])) = [0]
	$3 = ($4 + [12])
	$5 = ($7 + ((int_32)$9 * (int_32)[40]))
	$9 = ($11 + [28])
	$7 = *($4 + [12])
	$1 = *(($4 + [16]))
	$8 = ($1 - $7)
	$10 = (CASTING uint_64)(uint_32 int_32($8 >> [2]))
	$2 = [10]
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$6 }
	$2 = (($8 & [-4]) + $2)
	
.LABEL $label$6
	$2 = ($2 + [4])
	if ( ($2 == 0) ){ goto $label$8 }
	CALL $194($9, $2)
	$1 = *($6)
	$2 = *($9)
	goto $label$7 
	
.LABEL $label$8
	$1 = [0]
	$2 = [0]
	
.LABEL $label$7
	*($12) = $2
	*($12 + [8]) = $1
	CALL eosio_assert(((int_32)($1 - $2) > (int_32)[7]), [1920])
	CALL memcpy($2, $4, [8])
	$9 = ($2 + [8])
	CALL eosio_assert(((int_32)($1 - $9) > (int_32)[1]), [1920])
	CALL memcpy($9, ($4 + [8]), [2])
	*($12 + [4]) = ($2 + [10])
	CALL $323($12, $3)
	CALL eosio_assert(((int_32)(*($12 + [8]) - *($12 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($12 + [4]), ($4 + [24]), [4])
	$3 = ($11 + [40])
	$2 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$10 }
	$7 = ([0] - $2)
	$2 = ($4 + [-20])
	
.LOOP $label$11:
	*(($11 + [-32])) = *(($2 + [-12]))
	*(($11 + [-40])) = *(($2 + [-20]))
	*(($4 = ($11 + [-24]))) = (int_64)0
	*(($1 = ($11 + [-16]))) = [0]
	$9 = ($2 + [-4])
	*($4) = *($9)
	*(($11 + [-20])) = *($2)
	$4 = ($2 + [4])
	*($1) = *($4)
	*($4) = [0]
	*(($4 = ($11 + [-12]))) = (int_64)0
	*($9) = (int_64)0
	*(($1 = ($11 + [-4]))) = [0]
	$9 = ($2 + [8])
	*($4) = *($9)
	*(($11 + [-8])) = *(($2 + [12]))
	$4 = ($2 + [16])
	*($1) = *($4)
	*($4) = [0]
	*($9) = (int_64)0
	$11 = ($11 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $7) != (int_32)[-20]) ){ goto $label$11 }
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$1 = $2
	
.LABEL $label$9
	*($0) = $11
	*(($0 + [4])) = $3
	*(($0 + [8])) = $5
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$12 }
	$4 = ([0] - $1)
	$11 = ($2 + [-24])
	
.LOOP $label$13:
	$2 = *(($11 + [12]))
	if ( ($2 == 0) ){ goto $label$14 }
	*(($11 + [16])) = $2
	CALL $956($2)
	
.LABEL $label$14
	$2 = *($11)
	if ( ($2 == 0) ){ goto $label$15 }
	*(($11 + [4])) = $2
	CALL $956($2)
	
.LABEL $label$15
	$11 = ($11 + [-40])
	if ( ((int_32)($11 + $4) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$16 }
	CALL $956($1)
	
.LABEL $label$16
	*([0] + [4]) = ($12 + [16])
	(unreachable)
}

int_32 .FUNC $198 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1920])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1920])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $349 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_64 $24
	int_64 $25
	int_64 $26
	int_64 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	$38 = (*([0] + [4]) - [176])
	*([0] + [4]) = $38
	$32 = *($1 + [4])
	$6 = *($32)
	CALL $200(*($0 + [56]), [1])
	$29 = [0]
	*(($38 + [160])) = [0]
	*($38 + [144]) = (int_64)-1
	*($38 + [152]) = (int_64)0
	$16 = *($0 + [8])
	*($38 + [128]) = $16
	*($38 + [136]) = $16
	$28 = [0]
	$11 = CALL db_find_i64($16, $16, (int_64)-4921685625297436672, (CASTING uint_64)(uint_32 $2))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$1 }
	$28 = CALL $167(($38 + [128]), $11)
	CALL eosio_assert(((int_32)*($28 + [52]) == (int_32)($38 + [128])), [1536])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$28 != (int_32)[0]), [3408])
	if ( ($4 == 0) ){ goto $label$2 }
	$29 = ((uint_32)*($28 + [10]) > (uint_32)[2])
	
.LABEL $label$2
	$4 = CALL int_32 $0((int_32 *($32 + [9])), (int_32 *(*($0) + [16])))
	$32 = CALL int_32 $0((int_32 $6), (int_64 *(*($0) + [20])))
	CALL eosio_assert((((int_32)(*($32 + [4]) - *($32)) / (int_32)[20]) <= $4), [3440])
	$10 = *($28 + [39])
	$9 = *($28 + [38])
	$8 = *($28 + [37])
	$7 = *($28 + [36])
	*(($38 + [120])) = [0]
	*($38 + [104]) = (int_64)-1
	*($38 + [112]) = (int_64)0
	$16 = *(($0 + [8]))
	*($38 + [88]) = $16
	*($38 + [96]) = $16
	$30 = [0]
	$4 = CALL db_find_i64($16, $16, (int_64)-4283603440564174848, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$30 = CALL $285(($38 + [88]), $4)
	CALL eosio_assert(((int_32)*($30 + [24]) == (int_32)($38 + [88])), [1536])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$30 != (int_32)[0]), [3456])
	$34 = $10
	$35 = $9
	$36 = $8
	$37 = $7
	$4 = *($3)
	if ( ((int_32)*($3 + [4]) == (int_32)$4) ){ goto $label$4 }
	$18 = ($30 + [16])
	$19 = ($28 + [32])
	$23 = ($3 + [4])
	$20 = ($28 + [33])
	$21 = ($28 + [34])
	$22 = ($28 + [35])
	$37 = $7
	$36 = $8
	$35 = $9
	$34 = $10
	$31 = [0]
	
.LOOP $label$5:
	$17 = ($30 + [12])
	$12 = *($17)
	$32 = (*($18) - $12)
	if ( ((int_32)$32 < (int_32)[12]) ){ goto $label$7 }
	$11 = *(($4 + ($31 << [2])))
	$32 = (((uint_32)$32 / (uint_32)[12]) + [-1])
	$4 = [0]
	
.LOOP $label$8:
	$13 = ($32 - $4)
	$14 = (((int_32)$13 / (int_32)[2]) + $4)
	$33 = ($12 + ((int_32)$14 * (int_32)[12]))
	$15 = *($33)
	if ( ($15 <= $11) ){ goto $label$9 }
	if ( ((uint_32)$15 <= (uint_32)$11) ){ goto $label$6 }
	$32 = ($14 + [-1])
	if ( ((int_32)$13 > (int_32)[1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$4 = ($14 + [1])
	if ( ((int_32)$32 > (int_32)$14) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert([0], [3472])
	$33 = *($17)
	
.LABEL $label$6
	CALL eosio_assert((*($33 + [8]) == 0), [3504])
	$4 = *($33 + [4])
	if ( ((int_32)$4 != (int_32)*($19)) ){ goto $label$11 }
	$37 = ($37 + [-1])
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$4 != (int_32)*($20)) ){ goto $label$12 }
	$36 = ($36 + [-1])
	goto $label$10 
	
.LABEL $label$12
	if ( ((int_32)$4 != (int_32)*($21)) ){ goto $label$13 }
	$35 = ($35 + [-1])
	goto $label$10 
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)*($22)) ){ goto $label$14 }
	$34 = ($34 + [-1])
	goto $label$10 
	
.LABEL $label$14
	CALL eosio_assert([0], [3536])
	
.LABEL $label$10
	$4 = *($3)
	$31 = ($31 + [1])
	if ( ($31 <= int_32((*($23) - $4) >> [2])) ){ goto $label$5 }
	
.LABEL $label$4
	$15 = [1]
	CALL eosio_assert(((int_32)uint_32(((($35 | $34) | $36) | $37) >> [31]) ^ (int_32)[1]), [2912])
	$4 = ((($35 + $34) + $36) + $37)
	CALL eosio_assert(((int_32)$4 < (int_32)[2]), [2912])
	if ( ((int_32)$4 != (int_32)[1]) ){ goto $label$15 }
	$4 = [0]
	if ( ((int_32)$37 != (int_32)[1]) ){ goto $label$16 }
	$4 = *($28 + [32])
	
.LABEL $label$16
	$32 = ($8 + $7)
	if ( ((int_32)$36 != (int_32)[1]) ){ goto $label$17 }
	$4 = *($28 + [33])
	
.LABEL $label$17
	$32 = ($32 + $9)
	if ( ((int_32)$35 != (int_32)[1]) ){ goto $label$18 }
	$4 = *($28 + [34])
	
.LABEL $label$18
	$32 = ($32 + $10)
	if ( ((int_32)$34 != (int_32)[1]) ){ goto $label$19 }
	$4 = *($28 + [35])
	
.LABEL $label$19
	$16 = *($1)
	*($38 + [80]) = $16
	$11 = *(*($0) + [28])
	*($38 + [8 align=4]) = $16
	CALL void $0((int_32 ($38 + [8])), (int_32 $32), (int_32 $4), (int_32 $29), (int_32 $11))
	
.LABEL $label$15
	CALL $350(*($0 + [64]), $6, $3, $29)
	if ( $29 ){ goto $label$20 }
	CALL memcpy(($38 + [16]), *($5 + [4]), [64])
	$4 = ($0 + [56])
	CALL $205(($38 + [168]), *($4), ($38 + [16]))
	$16 = ((uint_64)((int_64)((int_64)*($38 + [168]) * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	$24 = ((uint_64)((int_64)((int_64)$16 * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	$25 = ((uint_64)((int_64)((int_64)$24 * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	$26 = ((uint_64)((int_64)((int_64)$25 * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	$27 = ((uint_64)((int_64)((int_64)$26 * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	$16 = *($38 + [16])
	*($38 + [24]) = ((int_64)((int_64)(uint_64)$16 >> (uint_64)(int_64)32) ^ (int_64)$16) ^ (int_64)$27)
	$15 = [0]
	CALL $338($0, $6, $2, ((((CASTING uint_32)(uint_64 ((int_64)((int_64)((int_64)(uint_64)((int_64)$24 * (int_64)101) >> (uint_64)(int_64)23) & (int_64)32512) | (int_64)(uint_64)((int_64)$16 * (int_64)101) >> (uint_64)(int_64)31)) | (int_64)((int_64)(uint_64)((int_64)$25 * (int_64)101) >> (uint_64)(int_64)15) & (int_64)8323072))) | (((CASTING uint_32)(uint_64 (uint_64)((int_64)$26 * (int_64)100) >> (uint_64)(int_64)31)) <= *($28 + [30])) << [25])) | (((CASTING uint_32)(uint_64 (uint_64)((int_64)$27 * (int_64)100) >> (uint_64)(int_64)31)) <= *($28 + [31])) << [26])) | [16777216]), [1], [0])
	*($38 + [28]) = [0]
	$32 = *($4)
	$6 = *($32)
	$4 = *($5 + [4])
	*($38 + [168]) = ($38 + [16])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [1696])
	CALL $209(($32 + [88]), $4, $6, ($38 + [168]))
	
.LABEL $label$20
	$14 = *($38 + [112])
	if ( ($14 == 0) ){ goto $label$21 }
	$13 = ($38 + [116])
	$4 = *($13)
	if ( ((int_32)$4 == (int_32)$14) ){ goto $label$23 }
	
.LOOP $label$24:
	$4 = ($4 + [-24])
	$32 = *($4)
	*($4) = [0]
	if ( ($32 == 0) ){ goto $label$25 }
	$11 = *($32 + [12])
	if ( ($11 == 0) ){ goto $label$26 }
	*(($32 + [16])) = $11
	CALL $956($11)
	
.LABEL $label$26
	CALL $956($32)
	
.LABEL $label$25
	if ( ((int_32)$14 != (int_32)$4) ){ goto $label$24 }
	$4 = *(($38 + [112]))
	goto $label$22 
	
.LABEL $label$23
	$4 = $14
	
.LABEL $label$22
	*($13) = $14
	CALL $956($4)
	
.LABEL $label$21
	$11 = *($38 + [152])
	if ( ($11 == 0) ){ goto $label$27 }
	$14 = ($38 + [156])
	$4 = *($14)
	if ( ((int_32)$4 == (int_32)$11) ){ goto $label$29 }
	
.LOOP $label$30:
	$4 = ($4 + [-24])
	$32 = *($4)
	*($4) = [0]
	if ( ($32 == 0) ){ goto $label$31 }
	CALL $956($32)
	
.LABEL $label$31
	if ( ((int_32)$11 != (int_32)$4) ){ goto $label$30 }
	$4 = *(($38 + [152]))
	goto $label$28 
	
.LABEL $label$29
	$4 = $11
	
.LABEL $label$28
	*($14) = $11
	CALL $956($4)
	
.LABEL $label$27
	*([0] + [4]) = ($38 + [176])
	return $15
}

void .FUNC $348 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [16]) = (*($1 + [16]) + *(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [56]) = ($5 + [39])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $283(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $5, [39])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $611 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [1920])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $610 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [5]))
	$5 = *($0 + [4])
	$4 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [8]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $5) > (int_32)[0]), [1920])
	CALL memcpy(*($7), ($8 + [8]), [1])
	$5 = (*($7) + [1])
	*($7) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$2 = ($8 + [28])
	
.LOOP $label$3:
	*($8) = $0
	*($8 + [8]) = $7
	*((($8 + [8]) + [8])) = ($7 + [8])
	*((($8 + [8]) + [12])) = ($7 + [12])
	*((($8 + [8]) + [16])) = ($7 + [16])
	*($2) = ($7 + [24])
	*($8 + [12]) = ($7 + [4])
	CALL $611(($8 + [8]), $8)
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [32])
	return $0
}

void .FUNC $613 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	CALL $614(*($1), *($0 + [16]))
}

int_32 .FUNC $612 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[28]))
	$5 = *($0 + [4])
	$4 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [8]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $5) > (int_32)[0]), [1920])
	CALL memcpy(*($7), ($8 + [8]), [1])
	$5 = (*($7) + [1])
	*($7) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	*($8) = $0
	*($8 + [8]) = $7
	*((($8 + [8]) + [8])) = ($7 + [8])
	*((($8 + [8]) + [12])) = ($7 + [12])
	*((($8 + [8]) + [16])) = ($7 + [16])
	*($8 + [12]) = ($7 + [4])
	CALL $613(($8 + [8]), $8)
	$7 = ($7 + [28])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [32])
	return $0
}

void .FUNC $615 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [1920])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [1920])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [1920])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), $2, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $614 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1920])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[1]), [1920])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, [2])
	$6 = (*($4) + [2])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[0]), [1920])
	CALL memcpy(*($4), ($7 + [2]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[3]), [1920])
	CALL memcpy(*($4), ($7 + [4]), [4])
	$6 = (*($4) + [4])
	*($4) = $6
	$7 = ($7 + [8])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $617 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $616 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [9]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [10]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [12]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [14]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [18]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [19]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [20]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [22]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [24]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [26]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [28]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [30]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [32]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [34]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [36]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $945 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$9 = (*([0] + [4]) - [48])
	$12 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	$10 = *($1 + [8])
	$5 = *(($1 + [12]))
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$4 }
	$7 = ((int_32)($5 - $10) / (int_32)[12])
	$6 = *(*($3))
	$8 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*($10) == (int_32)$6) ){ goto $label$3 }
	$10 = ($10 + [12])
	$8 = ($8 + [1])
	if ( ($8 <= $7) ){ goto $label$5 }
	
.LABEL $label$4
	$10 = *($3 + [4])
	if ( ((int_32)$5 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($5) = *($10)
	*(($5 + [8])) = *(($10 + [8]))
	*(($10 = ($1 + [12]))) = (*($10) + [12])
	goto $label$1 
	
.LABEL $label$3
	*(($10 = ($10 + [4]))) = (*($10) + [1])
	goto $label$1 
	
.LABEL $label$2
	CALL $917(($1 + [8]), $10)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$8 = [8]
	$6 = *(($1 + [8]))
	$10 = *(($1 + [12]))
	$7 = ($10 - $6)
	$11 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[12]))
	
.LOOP $label$6:
	$8 = ($8 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$7 }
	$8 = ((((int_32)((uint_32)($7 + [-12]) / (uint_32)[12]) * (int_32)[7]) + $8) + [7])
	
.LABEL $label$7
	if ( ($8 <= [513]) ){ goto $label$9 }
	$9 = CALL malloc($8)
	goto $label$8 
	
.LABEL $label$9
	$9 = ($9 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$8
	*($12 + [8]) = $9
	$5 = ($9 + $8)
	*($12 + [16]) = $5
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [1920])
	CALL memcpy($9, $1, [8])
	$10 = ($9 + [8])
	*($12 + [12]) = $10
	$11 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [12])) - *(($1 + [8]))) / (int_32)[12]))
	
.LOOP $label$10:
	$6 = (CASTING uint_32)(uint_64 $11)
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	$7 = ((int_64)$11) != (int_64)0
	*($12 + [32]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)($5 - $10) > (int_32)[0]), [1920])
	CALL memcpy($10, ($12 + [32]), [1])
	$10 = ($10 + [1])
	*($12 + [12]) = $10
	if ( $7 ){ goto $label$10 }
	$6 = *(($1 + [12]))
	$10 = *(($1 + [8]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	*($12 + [24]) = ($12 + [8])
	*($12 + [32]) = $10
	*((($12 + [32]) + [8])) = ($10 + [8])
	*((($12 + [32]) + [12])) = ($10 + [9])
	*($12 + [36]) = ($10 + [4])
	CALL $906(($12 + [32]), ($12 + [24]))
	$10 = ($10 + [12])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	CALL db_update_i64(*($1 + [24]), $2, $9, $8)
	if ( ($8 <= [513]) ){ goto $label$13 }
	CALL free($9)
	
.LABEL $label$13
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$14 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*([0] + [4]) = ($12 + [48])
}

void .FUNC $944 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([32]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16]) = [0]
	*($3 + [20]) = $1
	CALL $946(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [24])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $164(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [12])) = $1
	CALL $956($1)
	
.LABEL $label$4
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $947 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL require_auth($1)
	$4 = *(($3 + [32]))
	$3 = *($0 + [20])
	$8 = *(($3 + [36]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($3 + [8])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$6), [1536])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($3 + [8])), *(($3 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $186($6, $8)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$6), [1536])
	
.LABEL $label$3
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [3312])
	*($9 + [12]) = CALL $324($0, $1, $2, [0])
	$1 = *($0 + [8])
	*($9 + [8]) = ($9 + [12])
	CALL eosio_assert($8, [1696])
	CALL $950($6, $7, $1, ($9 + [8]))
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $946 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$5 = (*([0] + [4]) - [48])
	$10 = $5
	*([0] + [4]) = $5
	$2 = *($0)
	$8 = *($0 + [4])
	*($1) = *(*($8))
	$8 = *($8 + [4])
	$6 = ($1 + [12])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($4) = *($8)
	*(($4 + [8])) = *(($8 + [8]))
	$8 = (*($6) + [12])
	*($6) = $8
	$4 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$4 = ($1 + [8])
	CALL $917($4, $8)
	$8 = *($6)
	
.LABEL $label$1
	$3 = *($4)
	$7 = ($8 - $3)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[12]))
	$6 = [8]
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$4 }
	$6 = ((((int_32)((uint_32)($7 + [-12]) / (uint_32)[12]) * (int_32)[7]) + $6) + [7])
	
.LABEL $label$4
	if ( ($6 <= [513]) ){ goto $label$6 }
	$7 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($5 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$5
	*($10 + [8]) = $7
	$3 = ($7 + $6)
	*($10 + [16]) = $3
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [1920])
	CALL memcpy($7, $1, [8])
	$8 = ($7 + [8])
	*($10 + [12]) = $8
	$9 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [12])) - *($4)) / (int_32)[12]))
	
.LOOP $label$7:
	$4 = (CASTING uint_32)(uint_64 $9)
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	$5 = ((int_64)$9) != (int_64)0
	*($10 + [32]) = (($5) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)($3 - $8) > (int_32)[0]), [1920])
	CALL memcpy($8, ($10 + [32]), [1])
	$8 = ($8 + [1])
	*($10 + [12]) = $8
	if ( $5 ){ goto $label$7 }
	$4 = *(($1 + [12]))
	$8 = *($1 + [8])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	*($10 + [24]) = ($10 + [8])
	*($10 + [32]) = $8
	*((($10 + [32]) + [8])) = ($8 + [8])
	*((($10 + [32]) + [12])) = ($8 + [9])
	*($10 + [36]) = ($8 + [4])
	CALL $906(($10 + [32]), ($10 + [24]))
	$8 = ($8 + [12])
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$9 }
	
.LABEL $label$8
	$9 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-6146850541407305728, *(*($0 + [8])), $9, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$10 }
	CALL free($7)
	
.LABEL $label$10
	if ( (uint_64)($9 <= *($2 + [16])) ){ goto $label$11 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $941 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$9 = (*([0] + [4]) - [48])
	$11 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*(($3 = (*($1 + [8]) + ((int_32)*(*($3)) * (int_32)[12]))) + [8]) = (*($3 + [8]) + [1])
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	$7 = *($1 + [8])
	$6 = *(($1 + [12]))
	$5 = ($6 - $7)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[12]))
	$3 = [8]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	$3 = ((((int_32)((uint_32)($5 + [-12]) / (uint_32)[12]) * (int_32)[7]) + $3) + [7])
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($11 + [8]) = $8
	$5 = ($8 + $3)
	*($11 + [16]) = $5
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [1920])
	CALL memcpy($8, $1, [8])
	$9 = ($8 + [8])
	*($11 + [12]) = $9
	$10 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [12])) - *(($1 + [8]))) / (int_32)[12]))
	
.LOOP $label$5:
	$6 = (CASTING uint_32)(uint_64 $10)
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	$7 = ((int_64)$10) != (int_64)0
	*($11 + [32]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)($5 - $9) > (int_32)[0]), [1920])
	CALL memcpy($9, ($11 + [32]), [1])
	$9 = ($9 + [1])
	*($11 + [12]) = $9
	if ( $7 ){ goto $label$5 }
	$6 = *(($1 + [12]))
	$9 = *(($1 + [8]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	*($11 + [24]) = ($11 + [8])
	*($11 + [32]) = $9
	*((($11 + [32]) + [8])) = ($9 + [8])
	*((($11 + [32]) + [12])) = ($9 + [9])
	*($11 + [36]) = ($9 + [4])
	CALL $906(($11 + [32]), ($11 + [24]))
	$9 = ($9 + [12])
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$7 }
	
.LABEL $label$6
	CALL db_update_i64(*($1 + [24]), $2, $8, $3)
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($8)
	
.LABEL $label$8
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [48])
}

void .FUNC $940 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [48])
	$13 = $14
	*([0] + [4]) = $14
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	$10 = [0]
	$11 = *($1 + [8])
	$6 = ($1 + [12])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$1 }
	$5 = ((int_32)($8 - $11) / (int_32)[12])
	$9 = ($3 + [4])
	$7 = ($3 + [8])
	$3 = [0]
	$10 = [0]
	
.LOOP $label$2:
	$8 = ($11 + [9])
	if ( ((int_32)*($8) != (int_32)*(*($9))) ){ goto $label$3 }
	*($8) = [0]
	
.LABEL $label$3
	if ( ((int_32)*($11) != (int_32)*(*($7))) ){ goto $label$4 }
	*($8) = *(*($9))
	$10 = [1]
	
.LABEL $label$4
	$11 = ($11 + [12])
	$3 = ($3 + [1])
	if ( ($3 <= $5) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(($10 & [1]), [7440])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$3 = [8]
	$8 = *(($1 + [8]))
	$11 = *($6)
	$9 = ($11 - $8)
	$12 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[12]))
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$6 }
	$3 = ((((int_32)((uint_32)($9 + [-12]) / (uint_32)[12]) * (int_32)[7]) + $3) + [7])
	
.LABEL $label$6
	if ( ($3 <= [513]) ){ goto $label$8 }
	$7 = CALL malloc($3)
	goto $label$7 
	
.LABEL $label$8
	$7 = ($14 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$7
	*($13 + [8]) = $7
	$5 = ($7 + $3)
	*($13 + [16]) = $5
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [1920])
	CALL memcpy($7, $1, [8])
	$11 = ($7 + [8])
	*($13 + [12]) = $11
	$12 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [12])) - *(($1 + [8]))) / (int_32)[12]))
	
.LOOP $label$9:
	$8 = (CASTING uint_32)(uint_64 $12)
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	$9 = ((int_64)$12) != (int_64)0
	*($13 + [32]) = (($9) << [7]) | ($8 & [127]))
	CALL eosio_assert(((int_32)($5 - $11) > (int_32)[0]), [1920])
	CALL memcpy($11, ($13 + [32]), [1])
	$11 = ($11 + [1])
	*($13 + [12]) = $11
	if ( $9 ){ goto $label$9 }
	$8 = *(($1 + [12]))
	$11 = *(($1 + [8]))
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$10 }
	
.LOOP $label$11:
	*($13 + [24]) = ($13 + [8])
	*($13 + [32]) = $11
	*((($13 + [32]) + [8])) = ($11 + [8])
	*((($13 + [32]) + [12])) = ($11 + [9])
	*($13 + [36]) = ($11 + [4])
	CALL $906(($13 + [32]), ($13 + [24]))
	$11 = ($11 + [12])
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$11 }
	
.LABEL $label$10
	CALL db_update_i64(*($1 + [24]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$12 }
	CALL free($7)
	
.LABEL $label$12
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*([0] + [4]) = ($13 + [48])
}

void .FUNC $828 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [2])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$4 = [1073741823]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$4 = int_32($2 >> [1])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $955(($4 << [2]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [2])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [2]))
	$7 = ($3 + [4])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $956($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $829 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [2]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1920])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$2 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[0]), [1920])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, [1])
	$6 = (*($4) + [1])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[1]), [1920])
	CALL memcpy(*($4), ($7 + [2]), [2])
	$6 = (*($4) + [2])
	*($4) = $6
	$7 = ($7 + [4])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $826 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $955([32]))) = (int_64)0
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [16]) = [0]
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [1632])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $830(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $831(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $956($7)
	
.LABEL $label$10
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $827 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [16])
	$13 = $14
	*([0] + [4]) = $14
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$5 = ($1 + [8])
	$4 = *($1)
	$11 = *($1 + [8])
	$6 = *(($1 + [12]))
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$2 }
	$7 = int_32(($6 - $11) >> [2])
	$10 = [0]
	$9 = [0]
	
.LOOP $label$3:
	if ( ((int_32)*($11) != (int_32)*(*($3))) ){ goto $label$4 }
	$10 = [1]
	*(($8 = ($11 + [2]))) = (*($8) + [1])
	
.LABEL $label$4
	$11 = ($11 + [4])
	$9 = ($9 + [1])
	if ( ($9 <= $7) ){ goto $label$3 }
	$12 = $4
	if ( ($10 & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$11 = *(*($3))
	*($1) = *(*($3 + [4]))
	*($13) = $11
	*($13 + [2]) = [1]
	if ( ((int_32)$6 == (int_32)*(($1 + [16]))) ){ goto $label$6 }
	*($6) = *($13)
	*(($11 = ($1 + [12]))) = (*($11) + [4])
	goto $label$5 
	
.LABEL $label$6
	CALL $828($5, $13)
	
.LABEL $label$5
	$12 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$12), [1856])
	$11 = [8]
	$3 = *(($1 + [8]))
	$9 = *(($1 + [12]))
	$7 = ($9 - $3)
	$12 = (CASTING uint_64)(uint_32 int_32($7 >> [2]))
	
.LOOP $label$7:
	$11 = ($11 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$8 }
	$11 = ((((int_32)uint_32(($7 + [-4]) >> [2]) * (int_32)[3]) + $11) + [3])
	
.LABEL $label$8
	if ( ($11 <= [513]) ){ goto $label$10 }
	$9 = CALL malloc($11)
	goto $label$9 
	
.LABEL $label$10
	$9 = ($14 - (($11 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$9
	*($13) = $9
	*($13 + [8]) = ($9 + $11)
	CALL eosio_assert(((int_32)$11 > (int_32)[7]), [1920])
	CALL memcpy($9, $1, [8])
	*($13 + [4]) = ($9 + [8])
	CALL $829($13, $5)
	CALL db_update_i64(*($1 + [24]), $2, $9, $11)
	if ( ($11 <= [513]) ){ goto $label$11 }
	CALL free($9)
	
.LABEL $label$11
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$12 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*([0] + [4]) = ($13 + [16])
}

void .FUNC $824 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	*($7 + [72]) = $1
	*($7 + [71]) = $2
	*(($7 + [56])) = [0]
	*($7 + [40]) = (int_64)-1
	*($7 + [48]) = (int_64)0
	$5 = *($0)
	*($7 + [24]) = $5
	*($7 + [32]) = $5
	$2 = CALL db_find_i64($5, $5, (int_64)-7885125098607214592, $1)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$3 }
	$2 = CALL $826(($7 + [24]), $2)
	CALL eosio_assert(((int_32)*($2 + [20]) == (int_32)($7 + [24])), [1536])
	$5 = *($0)
	*($7 + [20]) = ($7 + [72])
	*($7 + [16]) = ($7 + [71])
	CALL eosio_assert([1], [1696])
	CALL $827(($7 + [24]), $2, $5, ($7 + [16]))
	$3 = *($7 + [48])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0)
	*($7 + [20]) = ($7 + [72])
	*($7 + [16]) = ($7 + [71])
	CALL $825(($7 + [8]), ($7 + [24]), $5, ($7 + [16]))
	$3 = *($7 + [48])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($7 + [52])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	$4 = *($2 + [8])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [12])) = $4
	CALL $956($4)
	
.LABEL $label$8
	CALL $956($2)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($7 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $3
	
.LABEL $label$4
	*($6) = $3
	CALL $956($0)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [80])
}

void .FUNC $825 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([32]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16]) = [0]
	*($3 + [20]) = $1
	CALL $833(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [24])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $831(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [12])) = $1
	CALL $956($1)
	
.LABEL $label$4
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $822 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*(($7 + [32])) = [0]
	*($7 + [16]) = (int_64)-1
	*($7 + [24]) = (int_64)0
	$5 = *($0)
	*($7) = $5
	*($7 + [8]) = $5
	$0 = CALL db_find_i64($5, $5, (int_64)-4227314345542942720, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $269($7, $0)
	CALL eosio_assert(((int_32)*($0 + [20]) == (int_32)$7), [1536])
	CALL eosio_assert([1], [4912])
	CALL eosio_assert([1], [4208])
	$3 = CALL db_next_i64(*($0 + [24]), ($7 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $269($7, $3)
	
.LABEL $label$2
	CALL $834($7, $0)
	
.LABEL $label$1
	$2 = *($7 + [24])
	if ( ($2 == 0) ){ goto $label$3 }
	$6 = ($7 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	$4 = *($3 + [8])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($3 + [12])) = $4
	CALL $956($4)
	
.LABEL $label$8
	CALL $956($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($7 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($6) = $2
	CALL $956($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $823 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [16]) = (*($1 + [16]) + *(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [40]) = ($5 + [21])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $212(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [28]), $2, $5, [21])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $820 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*(($7 + [32])) = [0]
	*($7 + [16]) = (int_64)-1
	*($7 + [24]) = (int_64)0
	$5 = *($0)
	*($7) = $5
	*($7 + [8]) = $5
	$0 = CALL db_find_i64($5, $5, (int_64)-4345224872994013184, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $271($7, $0)
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)$7), [1536])
	CALL eosio_assert([1], [4912])
	CALL eosio_assert([1], [4208])
	$3 = CALL db_next_i64(*($0 + [28]), ($7 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $271($7, $3)
	
.LABEL $label$2
	CALL $836($7, $0)
	
.LABEL $label$1
	$2 = *($7 + [24])
	if ( ($2 == 0) ){ goto $label$3 }
	$6 = ($7 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	$4 = *($3 + [12])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($3 + [16])) = $4
	CALL $956($4)
	
.LABEL $label$8
	CALL $956($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($7 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($6) = $2
	CALL $956($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $821 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*(($7 + [32])) = [0]
	*($7 + [16]) = (int_64)-1
	*($7 + [24]) = (int_64)0
	$5 = *($0)
	*($7) = $5
	*($7 + [8]) = $5
	$0 = CALL db_find_i64($5, $5, (int_64)-4283603440564174848, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $285($7, $0)
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)$7), [1536])
	CALL eosio_assert([1], [4912])
	CALL eosio_assert([1], [4208])
	$3 = CALL db_next_i64(*($0 + [28]), ($7 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $285($7, $3)
	
.LABEL $label$2
	CALL $835($7, $0)
	
.LABEL $label$1
	$2 = *($7 + [24])
	if ( ($2 == 0) ){ goto $label$3 }
	$6 = ($7 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	$4 = *($3 + [12])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($3 + [16])) = $4
	CALL $956($4)
	
.LABEL $label$8
	CALL $956($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($7 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($6) = $2
	CALL $956($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC wctomb (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL wcrtomb($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $219 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1648])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = ((int_32)($2 - $7) / (int_32)[12])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $221($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ((int_32)$4 * (int_32)[12]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$3 = *($4)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[3]), [1632])
	CALL memcpy($7, *($4), [4])
	$3 = (*($4) + [4])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[1]), [1632])
	CALL memcpy(($7 + [4]), *($4), [2])
	$3 = (*($4) + [2])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[3]), [1632])
	CALL memcpy(($7 + [8]), *($4), [4])
	$3 = (*($4) + [4])
	*($4) = $3
	$7 = ($7 + [12])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC __signbitl (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

void .FUNC $218 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ((int_32)($5 - $4) / (int_32)[12])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $955(((int_32)$6 * (int_32)[12]))
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$3 * (int_32)[12])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($5 - $4)
	$5 = ($3 + ((int_32)((int_32)$1 / (int_32)[-12]) * (int_32)[12]))
	$6 = ($7 + ((int_32)$6 * (int_32)[12]))
	$3 = ($3 + [12])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $4, $1)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $3
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $956($4)
	
.LABEL $label$6
	(unreachable)
}

int_32 .FUNC $911 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [80])
	*([0] + [4]) = $17
	$9 = *($1 + [4])
	$6 = *($9)
	$11 = [1]
	CALL $200(*($0 + [16]), [1])
	CALL eosio_assert(((($2 + [-1]) & [65535]) <= [2]), [9984])
	CALL eosio_assert(((($3 + [-1]) & [255]) <= [9]), [10016])
	$16 = ((int_32)( [100] ? [1000] : ((int_32)$2 == (int_32)[1]) ) * (int_32)$3)
	CALL eosio_assert(((uint_32)$16 <= (uint_32)*($9 + [16])), [2880])
	$4 = (((int_32)$2 != (int_32)[1]) & $4)
	if ( ($16 == 0) ){ goto $label$1 }
	$9 = *($0 + [20])
	$1 = *($1 + [4])
	*($17 + [8]) = $16
	CALL eosio_assert(((uint_32)*($1 + [16]) >= (uint_32)$16), [2880])
	if ( $4 ){ goto $label$1 }
	$13 = *($9)
	*($17) = ($17 + [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [1696])
	CALL $295(($9 + [8]), $1, $13, $17)
	
.LABEL $label$1
	if ( $4 ){ goto $label$2 }
	CALL memcpy(($17 + [8]), *($5 + [4]), [64])
	$12 = ($0 + [16])
	CALL $205($17, *($12), ($17 + [8]))
	$14 = *($17)
	if ( ($3 == 0) ){ goto $label$3 }
	$2 = ((int_32)$2 == (int_32)[1])
	$9 = ( [20] ? [26] : $2 )
	$7 = ( (int_64)233600 ? (int_64)28968 : $2 )
	$15 = [0]
	$8 = ( [0] ? [8] : $2 )
	$10 = (($8 << [2]) + [10032])
	
.LOOP $label$4:
	$13 = ((uint_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $14) * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	$14 = (CASTING uint_32)(uint_64 $13)
	*($17) = $14
	$11 = (CASTING uint_32)(uint_64 (uint_64)((int_64)$13 * (int_64)$7) >> (uint_64)(int_64)31)
	*($17 + [4]) = $11)
	$16 = $10
	$1 = [0]
	$2 = $8
	
.LOOP $label$6:
	if ( ((int_32)$2 >= (int_32)$9) ){ goto $label$5 }
	$2 = ($2 + [1])
	$4 = *($16)
	$16 = ($16 + [4])
	$1 = ($4 + $1)
	if ( ((int_32)$11 >= (int_32)$1) ){ goto $label$6 }
	CALL $914($0, $6, $2)
	$14 = *($17)
	
.LABEL $label$5
	$15 = ($15 + [1])
	if ( ((int_32)$15 != (int_32)$3) ){ goto $label$4 }
	
.LABEL $label$3
	$11 = [0]
	*($17 + [20]) = [0]
	$13 = *($17 + [8])
	*($17 + [16]) = ((int_32)(CASTING uint_32)(uint_64 ((int_64)(uint_64)$13 >> (uint_64)(int_64)32) ^ (int_64)$13)) ^ (int_32)$14)
	$16 = *($12)
	$13 = *($16)
	$2 = *($5 + [4])
	*($17 + [72]) = ($17 + [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [1696])
	CALL $209(($16 + [88]), $2, $13, ($17 + [72]))
	
.LABEL $label$2
	*([0] + [4]) = ($17 + [80])
	return $11
}

void .FUNC $505 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$6 = *($0 + [4])
	*($1) = *(*($6))
	$6 = *($6 + [4])
	$3 = ($1 + [12])
	$8 = *($3)
	if ( ((int_32)$8 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($8) = *($6)
	*(($8 + [8])) = *(($6 + [8]))
	$8 = (*($3) + [16])
	*($3) = $8
	$5 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$5 = ($1 + [8])
	CALL $504($5, $6)
	$8 = *($3)
	
.LABEL $label$1
	$3 = *($5)
	$4 = ($8 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [22]
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$5 }
	$6 = (((int_32)uint_32(($4 + [-16]) >> [4]) * (int_32)[14]) + $6)
	goto $label$4 
	
.LABEL $label$5
	$6 = ($6 + [-14])
	
.LABEL $label$4
	if ( ($6 <= [513]) ){ goto $label$7 }
	$8 = CALL malloc($6)
	goto $label$6 
	
.LABEL $label$7
	$8 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$6
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [1920])
	CALL memcpy($8, $1, [8])
	*($9 + [4]) = ($8 + [8])
	CALL $151($9, $5)
	$7 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-8872998483271876608, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$8 }
	CALL free($8)
	
.LABEL $label$8
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$9 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $504 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $955(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $956($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $507 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $955([232])
	$4 = CALL $520($6)
	*($6 + [216]) = $0
	CALL $522(($8 + [32]), $4)
	*($6 + [220]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [220])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $521(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $506 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [192])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [184]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [24]))), [4096])
	$5 = ((int_64)*($1 + [16]) + (int_64)*($3))
	*($1 + [16]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [4176])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	*($6 + [184]) = ($6 + [169])
	*($6 + [180]) = $6
	*($6 + [176]) = $6
	CALL $463(($6 + [176]), $1)
	CALL db_update_i64(*($1 + [188]), $2, $6, [169])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [192])
}

void .FUNC $501 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$4 = *($1 + [8])
	*($5 + [8]) = $4
	*($5 + [16]) = $4
	$1 = [0]
	$3 = CALL db_find_i64($4, $4, (int_64)-4888780540812984320, (CASTING uint_64)(uint_32 $2))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $153(($5 + [8]), $3)
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)($5 + [8])), [1536])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [1936])
	*($0) = $2
	*($0 + [4]) = [0]
	*($0 + [1]) = [1]
	*($0 + [8]) = *($1 + [8])
	*($0 + [10]) = *($1 + [12])
	*($0 + [12]) = *($1 + [10])
	*($0 + [14]) = *($1 + [14])
	$2 = *($5 + [32])
	if ( ($2 == 0) ){ goto $label$2 }
	$3 = ($5 + [36])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $956($1)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($5 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $2
	
.LABEL $label$3
	*($3) = $2
	CALL $956($0)
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $500 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $468 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [32]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [36]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [40]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [41]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC $469 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $466 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [44])) == (int_32)$0), [5024])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [5072])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [5136])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $956($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $956($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [48]))
}

void .FUNC $467 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	$6 = *($1 + [12])
	$5 = *(($1 + [16]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$1 }
	$9 = ($6 + [16])
	$7 = ((int_32)($5 - $6) / (int_32)[20])
	$10 = *(*($3))
	$8 = [0]
	
.LOOP $label$3:
	if ( ((int_64)*($9) == (int_64)$10) ){ goto $label$2 }
	$9 = ($9 + [20])
	$8 = ($8 + [1])
	if ( ($8 <= $7) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*(*($3 + [4])) = $8
	
.LABEL $label$1
	$10 = $4
	$9 = *(*($3 + [4]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$4 }
	$9 = ($6 + ((int_32)$9 * (int_32)[20]))
	$3 = ($9 + [20])
	$8 = ($5 - $3)
	$7 = ((int_32)$8 / (int_32)[20])
	$10 = $4
	if ( ($8 == 0) ){ goto $label$5 }
	CALL memmove($9, $3, $8)
	$10 = *($1)
	
.LABEL $label$5
	*(($1 + [16])) = ($9 + ((int_32)$7 * (int_32)[20]))
	
.LABEL $label$4
	$7 = ($1 + [12])
	CALL eosio_assert(((int_64)$4 == (int_64)$10), [1856])
	$3 = *(($1 + [12]))
	$8 = *(($1 + [16]))
	$6 = ($8 - $3)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[20]))
	$9 = [29]
	
.LOOP $label$6:
	$9 = ($9 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$8 }
	$8 = (((int_32)((uint_32)($6 + [-20]) / (uint_32)[20]) * (int_32)[17]) + $9)
	goto $label$7 
	
.LABEL $label$8
	$8 = ($9 + [-17])
	
.LABEL $label$7
	if ( ($8 <= [513]) ){ goto $label$10 }
	$9 = CALL malloc($8)
	goto $label$9 
	
.LABEL $label$10
	$9 = ($12 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$9
	*($11) = $9
	$3 = ($9 + $8)
	*($11 + [8]) = $3
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [1920])
	CALL memcpy($9, $1, [8])
	$6 = ($9 + [8])
	CALL eosio_assert(((int_32)($3 - $6) > (int_32)[3]), [1920])
	CALL memcpy($6, ($1 + [8]), [4])
	*($11 + [4]) = ($9 + [12])
	CALL $180($11, $7)
	CALL db_update_i64(*($1 + [28]), $2, $9, $8)
	if ( ($8 <= [513]) ){ goto $label$11 }
	CALL free($9)
	
.LABEL $label$11
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$12 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*([0] + [4]) = ($11 + [16])
}

int_32 .FUNC $464 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $955([56])) + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$7 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [3776])
	*($4 + [36]) = [0]
	*($4 + [32]) = [0]
	*($4 + [40]) = [0]
	*($4 + [44]) = $0
	CALL $468(($8 + [32]), $4)
	*($4 + [48]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [48])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $469($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $956($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $465 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	*($8 + [24]) = $2
	$3 = *(($0 + [40]))
	$7 = *(($0 + [44]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [16])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$5), [1536])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)8526756653867991040, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $178($5, $7)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$5), [1536])
	
.LABEL $label$3
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [5424])
	*($8 + [20]) = [-1]
	$1 = *($0 + [8])
	*($8 + [12]) = ($8 + [20])
	*($8 + [8]) = ($8 + [24])
	CALL eosio_assert($7, [1696])
	CALL $467($5, $6, $1, ($8 + [8]))
	CALL eosio_assert(((int_32)uint_32(*($8 + [20]) >> [31]) ^ (int_32)[1]), [2144])
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $462 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [192])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [184]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [88]))), [4096])
	$5 = ((int_64)*($1 + [80]) + (int_64)*($3))
	*($1 + [80]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($1 + [80]) < (int_64)4611686018427387904), [4176])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	*($6 + [184]) = ($6 + [169])
	*($6 + [180]) = $6
	*($6 + [176]) = $6
	CALL $463(($6 + [176]), $1)
	CALL db_update_i64(*($1 + [188]), $2, $6, [169])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [192])
}

int_32 .FUNC $463 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [136]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [144]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [152]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [160]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [168]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [176]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $460 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [12]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [17]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [18]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [20]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [28]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [36]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $461 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $725 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($0 + [16]), *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($0 + [20]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $668 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	CALL $669($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	*(($3 = $6)) = [0]
	CALL $606($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	CALL $607($3, $1)
	CALL db_update_i64(*($1 + [68]), $2, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $669 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$2 = *($0)
	$7 = *($1 + [8])
	$4 = *(($1 + [12]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$2 }
	$5 = int_32(($4 - $7) >> [4])
	$8 = [0]
	$3 = *($2)
	$6 = ($3 & [65535])
	
.LOOP $label$4:
	if ( ((int_32)*($7) == (int_32)$6) ){ goto $label$3 }
	$7 = ($7 + [16])
	$8 = ($8 + [1])
	if ( ($8 <= $5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$8 = ($7 + [4])
	$6 = *($8)
	$5 = *(*($0 + [4]))
	$1 = *([0] + [20])
	$4 = *(*($0 + [8]))
	$7 = ($7 + [8])
	CALL eosio_assert(((int_32)*($7) < (int_32)*(*($0 + [16]))), [7072])
	$6 = ((int_32)$4 * (int_32)$1)
	CALL eosio_assert(((uint_32)($5 - $6) > (uint_32)(((int_32)(((uint_32)($3 & [65535]) % (uint_32)[10]) + [-1]) * (int_32)((uint_32)$6 / (uint_32)[3])) + $6)), [7104])
	*($8) = *(*($0 + [4]))
	*($7) = (*($7) + [1])
	goto $label$1 
	
.LABEL $label$2
	*($9) = (int_64)0
	*($9 + [10]) = [0]
	*($9 + [9]) = [0]
	*($9 + [12]) = [0]
	*($9) = *($2)
	*($9 + [4]) = *(*($0 + [4]))
	*($9 + [8]) = [1]
	if ( ((int_32)$4 == (int_32)*(($1 + [16]))) ){ goto $label$5 }
	*($4) = *($9)
	*(($4 + [8])) = *(($9 + [8]))
	*(($7 = ($1 + [12]))) = (*($7) + [16])
	goto $label$1 
	
.LABEL $label$5
	CALL $670(($1 + [8]), $9)
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $724 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL eosio_assert([1], [1920])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-7949128878716878848, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $664 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [5])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$3 }
	$4 = [134217727]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$4 = int_32($7 >> [4])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $955(($4 << [5]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [5])))) = *($1)
	*(($3 + [24])) = *(($1 + [24]))
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [5]))
	$3 = ($3 + [32])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $956($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $665 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = *($0)
	$9 = int_32((*($0 + [4]) - $13) >> [5])
	$10 = ($9 + [1])
	if ( ((uint_32)$10 >= (uint_32)[134217728]) ){ goto $label$3 }
	$2 = [134217727]
	$13 = (*($0 + [8]) - $13)
	if ( ((uint_32)int_32($13 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$13 = int_32($13 >> [4])
	$2 = ( $10 ? $13 : ($13 <= $10) )
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$3 = CALL $955(($2 << [5]))
	goto $label$1 
	
.LABEL $label$4
	$2 = [0]
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($13 = ($3 + ($9 << [5])))) = *($1)
	*($13 + [16 align=4]) = (int_64)0
	*(($13 + [8])) = *(($1 + [8]))
	*(($6 = ($13 + [24]))) = [0]
	$10 = (*(($1 + [20])) - *($1 + [16]))
	$9 = ((int_32)$10 / (int_32)[28])
	if ( ($10 == 0) ){ goto $label$8 }
	$7 = ($13 + [16])
	if ( ((uint_32)$9 >= (uint_32)[153391690]) ){ goto $label$6 }
	$10 = CALL $955($10)
	*($7) = $10
	*(($7 = ($13 + [20]))) = $10
	*($6) = ($10 + ((int_32)$9 * (int_32)[28]))
	$4 = *(($1 + [20]))
	$9 = *(($1 + [16]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	*($10) = *($9)
	*(($10 + [8])) = *(($9 + [8]))
	*($10 + [16 align=4]) = (int_64)0
	*(($8 = ($10 + [24]))) = [0]
	$11 = ($9 + [16])
	$12 = ($9 + [20])
	$1 = (*($12) - *($11))
	$6 = int_32($1 >> [3])
	if ( ($6 == 0) ){ goto $label$10 }
	$5 = ($10 + [16])
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$7 }
	$1 = CALL $955($1)
	*($5) = $1
	*($8) = ($1 + ($6 << [3]))
	*(($10 = ($10 + [20]))) = $1
	$8 = *($11)
	$6 = (*($12) - $8)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($1, $8, $6)
	*($10) = (*($10) + $6)
	
.LABEL $label$10
	$10 = (*($7) + [28])
	*($7) = $10
	$9 = ($9 + [28])
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	$8 = ($3 + ($2 << [5]))
	$11 = ($13 + [32])
	$10 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$12 }
	$7 = ([0] - $10)
	$10 = ($9 + [-32])
	
.LOOP $label$13:
	*(($13 + [-32])) = *($10)
	*(($13 + [-24])) = *(($10 + [8]))
	*(($9 = ($13 + [-16]))) = (int_64)0
	*(($1 = ($13 + [-8]))) = [0]
	$6 = ($10 + [16])
	*($9) = *($6)
	*(($13 + [-12])) = *(($10 + [20]))
	$9 = ($10 + [24])
	*($1) = *($9)
	*($9) = [0]
	*($6) = (int_64)0
	$13 = ($13 + [-32])
	$10 = ($10 + [-32])
	if ( ((int_32)($10 + $7) != (int_32)[-32]) ){ goto $label$13 }
	$10 = *(($0 + [4]))
	$12 = *($0)
	goto $label$11 
	
.LABEL $label$12
	$12 = $10
	
.LABEL $label$11
	*($0) = $13
	*(($0 + [4])) = $11
	*(($0 + [8])) = $8
	if ( ((int_32)$10 == (int_32)$12) ){ goto $label$14 }
	
.LOOP $label$15:
	$6 = ($10 + [-32])
	$7 = ($10 + [-16])
	$1 = *($7)
	if ( ($1 == 0) ){ goto $label$16 }
	$13 = $1
	$8 = ($10 + [-12])
	$10 = *($8)
	if ( ((int_32)$10 == (int_32)$1) ){ goto $label$17 }
	$9 = ([0] - $1)
	$13 = ($10 + [-12])
	
.LOOP $label$18:
	$10 = *($13)
	if ( ($10 == 0) ){ goto $label$19 }
	*(($13 + [4])) = $10
	CALL $956($10)
	
.LABEL $label$19
	$13 = ($13 + [-28])
	if ( ((int_32)($13 + $9) != (int_32)[-12]) ){ goto $label$18 }
	$13 = *($7)
	
.LABEL $label$17
	*($8) = $1
	CALL $956($13)
	
.LABEL $label$16
	$10 = $6
	if ( ((int_32)$6 != (int_32)$12) ){ goto $label$15 }
	
.LABEL $label$14
	if ( ($12 == 0) ){ goto $label$20 }
	CALL $956($12)
	
.LABEL $label$20
	return (unreachable)
	
.LABEL $label$7
	CALL $971($5)
	
.LABEL $label$6
	CALL $971($7)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $666 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [88]) = $1
	*($9 + [86]) = $2
	CALL require_auth($1)
	$4 = *(($3 + [32]))
	$3 = *($0 + [16])
	$6 = *(($3 + [36]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$1 }
	$2 = ($6 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($2)) == (int_64)$1) ){ goto $label$1 }
	$6 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = ($3 + [8])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	$2 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$8), [1536])
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	$6 = CALL db_find_i64(*(($3 + [8])), *(($3 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $186($8, $6)
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$8), [1536])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [2368])
	*($9 + [80]) = (int_64))(((uint_64)CALL publication_time() / (uint_64)(int_64)1000000) - *([0] + [12]))
	*($9 + [76]) = [24]
	*($9 + [72]) = [8]
	*(($9 + [64])) = [0]
	*($9 + [48]) = (int_64)-1
	*($9 + [56]) = (int_64)0
	$7 = *($0)
	*($9 + [32]) = $7
	*($9 + [40]) = $7
	$2 = CALL db_find_i64($7, $7, (int_64)5667434139083603968, $1)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$7 }
	$2 = CALL $601(($9 + [32]), $2)
	CALL eosio_assert(((int_32)*($2 + [64]) == (int_32)($9 + [32])), [1536])
	$1 = *($0)
	*($9 + [12]) = $0
	*($9 + [4]) = ($9 + [80])
	*($9) = ($9 + [86])
	*($9 + [8]) = ($9 + [76])
	*($9 + [16]) = ($9 + [72])
	CALL eosio_assert([1], [1696])
	CALL $668(($9 + [32]), $2, $1, $9)
	$6 = *($9 + [56])
	if ( $6 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = *($0)
	*($9 + [4]) = ($9 + [80])
	*($9) = ($9 + [86])
	*($9 + [8]) = ($9 + [88])
	CALL $667(($9 + [24]), ($9 + [32]), $1, $9)
	$6 = *($9 + [56])
	if ( ($6 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$5 = ($9 + [60])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$9 }
	$2 = ($2 + [-24])
	
.LOOP $label$10:
	$8 = CALL $604($2)
	$2 = ($2 + [-24])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$10 }
	$2 = *(($9 + [56]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $6
	
.LABEL $label$8
	*($5) = $6
	CALL $956($2)
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [96])
}

void .FUNC $667 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	*($11 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($11 + [20]) = $3
	*($11 + [16]) = $1
	*($11 + [24]) = ($11 + [40])
	*(($3 = CALL $955([80]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40]) = [0]
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [64]) = $1
	CALL $671(($11 + [16]), $3)
	*($11 + [32]) = $3
	$2 = *($3)
	*($11 + [16]) = $2
	$6 = *($3 + [68])
	*($11 + [12]) = $6
	$7 = ($1 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($8 + [8]) = $2
	*($8 + [16]) = $6
	*($11 + [32]) = [0]
	*($8) = $3
	*($7) = ($8 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $619(($1 + [24]), ($11 + [32]), ($11 + [16]), ($11 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$4 = *($11 + [32])
	*($11 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$3 = *($4 + [32])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($4 + [36])) = $3
	CALL $956($3)
	
.LABEL $label$4
	$5 = *($4 + [20])
	if ( ($5 == 0) ){ goto $label$5 }
	$10 = ($4 + [24])
	$3 = *($10)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = ($3 + [-32])
	$7 = ($3 + [-16])
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$9 }
	$1 = $8
	$9 = ($3 + [-12])
	$3 = *($9)
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$10 }
	$0 = ([0] - $8)
	$3 = ($3 + [-12])
	
.LOOP $label$11:
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$12 }
	*(($3 + [4])) = $1
	CALL $956($1)
	
.LABEL $label$12
	$3 = ($3 + [-28])
	if ( ((int_32)($3 + $0) != (int_32)[-12]) ){ goto $label$11 }
	$1 = *($7)
	
.LABEL $label$10
	*($9) = $8
	CALL $956($1)
	
.LABEL $label$9
	$3 = $6
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$8 }
	$3 = *(($4 + [20]))
	goto $label$6 
	
.LABEL $label$7
	$3 = $5
	
.LABEL $label$6
	*($10) = $5
	CALL $956($3)
	
.LABEL $label$5
	$3 = *($4 + [8])
	if ( ($3 == 0) ){ goto $label$13 }
	*(($4 + [12])) = $3
	CALL $956($3)
	
.LABEL $label$13
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($11 + [48])
}

void .FUNC $660 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $955(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $956($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $661 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $955(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $662(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

int_32 .FUNC $662 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($2 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = *($2 + [32])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($2 + [36])) = $3
	CALL $956($3)
	
.LABEL $label$4
	$3 = *($2 + [20])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($2 + [24])) = $3
	CALL $956($3)
	
.LABEL $label$5
	$3 = *($2 + [8])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [12])) = $3
	CALL $956($3)
	
.LABEL $label$6
	CALL $956($2)
	
.LABEL $label$3
	$2 = *($4)
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $956($2)
	
.LABEL $label$7
	return $0
}

void .FUNC $663 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	*([0] + [4]) = $12
	$11 = *(*($0))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$2 }
	*(($11 = (($5 = *($1 + [32])) + ($11 << [5])))) = (*($11) + [1])
	*(($5 + (*(*($0)) << [5])) + [8]) = *(*($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	*($12 + [4]) = [0]
	*($12 + [8]) = [0]
	*($12 + [12]) = [0]
	*($12 + [16]) = [0]
	*($12 + [24]) = (int_64)0
	*($12) = [1]
	*($12 + [4]) = *(*($0 + [8]))
	*($12 + [8]) = *(*($0 + [4]))
	$5 = ($1 + [36])
	$11 = *($5)
	if ( ((int_32)$11 == (int_32)*(($1 + [40]))) ){ goto $label$3 }
	*($11) = *($12)
	*(($11 + [24])) = *(($12 + [24]))
	*(($11 + [16])) = *(($12 + [16]))
	*(($11 + [8])) = *(($12 + [8]))
	*($5) = (*($5) + [32])
	goto $label$1 
	
.LABEL $label$3
	CALL $664(($1 + [32]), $12)
	
.LABEL $label$1
	$11 = (*($1 + [8]) + (*(*($0 + [12])) << [4]))
	$5 = ($11 + [8])
	$7 = *(*(*($0 + [16]) + [4]) + [10])
	$4 = *($11 + [8])
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$6 }
	*($5) = [0]
	$5 = ($11 + [2])
	$4 = ($7 - $4)
	$11 = *($11 + [2])
	if ( ((uint_32)$11 >= (uint_32)$4) ){ goto $label$5 }
	*($5) = [0]
	goto $label$4 
	
.LABEL $label$6
	*($5) = ($4 - $7)
	goto $label$4 
	
.LABEL $label$5
	*($5) = ($11 - $4)
	
.LABEL $label$4
	$6 = *(*($0 + [24]))
	*(*($0 + [28]) + [4]) = ((int_64)((int_64)$6 ^ (int_64)((int_64)$6 + (int_64)*(*($0 + [4])))) ^ (int_64)2863311530)
	*(($11 = *($0 + [28])) + [4]) = ((int_32)(CASTING uint_32)(uint_64 ((int_64)(uint_64)*(*($0 + [24])) >> (uint_64)(int_64)8) + (int_64)127)) ^ (int_32)*($11 + [4]))
	$5 = *($0 + [28])
	$11 = *(($1 + [24]))
	if ( ((int_32)$11 == (int_32)*(($1 + [28]))) ){ goto $label$10 }
	*($11) = *($5)
	*(($11 + [8])) = *(($5 + [8]))
	*($11 + [16 align=4]) = (int_64)0
	*(($11 + [24])) = [0]
	$0 = (*(($5 + [20])) - *($5 + [16]))
	$4 = ((int_32)$0 / (int_32)[28])
	if ( ($0 == 0) ){ goto $label$11 }
	if ( ((uint_32)$4 >= (uint_32)[153391690]) ){ goto $label$7 }
	$0 = CALL $955($0)
	*(($7 = ($11 + [20]))) = $0
	*(($11 + [24])) = ($0 + ((int_32)$4 * (int_32)[28]))
	*(($11 + [16])) = $0
	$2 = *(($5 + [20]))
	$11 = *(($5 + [16]))
	if ( ((int_32)$11 == (int_32)$2) ){ goto $label$11 }
	
.LOOP $label$12:
	*($0) = *($11)
	*(($0 + [8])) = *(($11 + [8]))
	*($0 + [16 align=4]) = (int_64)0
	*(($8 = ($0 + [24]))) = [0]
	$9 = ($11 + [16])
	$10 = ($11 + [20])
	$5 = (*($10) - *($9))
	$4 = int_32($5 >> [3])
	if ( ($4 == 0) ){ goto $label$13 }
	$3 = ($0 + [16])
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$8 }
	$5 = CALL $955($5)
	*($3) = $5
	*($8) = ($5 + ($4 << [3]))
	*(($0 = ($0 + [20]))) = $5
	$8 = *($9)
	$4 = (*($10) - $8)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$13 }
	CALL memcpy($5, $8, $4)
	*($0) = (*($0) + $4)
	
.LABEL $label$13
	$0 = (*($7) + [28])
	*($7) = $0
	$11 = ($11 + [28])
	if ( ((int_32)$2 != (int_32)$11) ){ goto $label$12 }
	
.LABEL $label$11
	*(($0 = ($1 + [24]))) = (*($0) + [32])
	goto $label$9 
	
.LABEL $label$10
	CALL $665(($1 + [20]), $5)
	
.LABEL $label$9
	*([0] + [4]) = ($12 + [32])
	return (unreachable)
	
.LABEL $label$8
	CALL $971($3)
	
.LABEL $label$7
	CALL $971(($11 + [16]))
	(unreachable)
}

void .FUNC $726 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	CALL require_auth($1)
	$3 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*(($6 + [44])) == (int_32)$5), [1536])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)8526759268719788032, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $464($5, $7)
	CALL eosio_assert(((int_32)*($6 + [44]) == (int_32)$5), [1536])
	
.LABEL $label$3
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [5424])
	CALL $727(*($0 + [96]), $1, $2)
	CALL eosio_assert($7, [4912])
	CALL eosio_assert($7, [4208])
	$7 = CALL db_next_i64(*($6 + [48]), ($8 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	CALL $464($5, $7)
	
.LABEL $label$5
	CALL $466($5, $6)
	CALL $709($0, $1)
	*([0] + [4]) = ($8 + [16])
}

int_64 .FUNC atoll (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	
.LOOP $label$1:
	$3 = *($0)
	$1 = int_32(($3 << [24]) >> [24])
	$2 = ($1 + [-9])
	$4 = ($0 + [1])
	$0 = $4
	if ( ((int_32)$3 == (int_32)[32]) ){ goto $label$1 }
	$0 = $4
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$2 = [1]
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	$3 = *($4)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 + [-1])
	$2 = [0]
	
.LABEL $label$2
	$5 = (int_64)0
	$3 = (int_32(($3 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($4 + [1])
	$5 = (int_64)0
	
.LOOP $label$7:
	$5 = (int_64))(((int_64)$5 * (int_64)10) - (CASTING int_64)(int_32 $3))
	$3 = *($0)
	$0 = ($0 + [1])
	$3 = ($3 + [-48])
	if ( ($3 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $5 ? (int_64))((int_64)0 - $5) : $2 )
}

int_32 .FUNC $721 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [1600])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $955([32])) + [8]) = (int_64)0
	*($6) = (int_64)0
	*($6 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [1632])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [1632])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $723(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $720 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $955([32])
	CALL $724($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $723(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $956($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $189 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	float_64 $16
	int_32 $17
	int_64 $18
	int_32 $19
	int_32 $20
	int_32 $21
	float_64 $22
	float_64 $23
	int_32 $24
	$24 = (*([0] + [4]) - [240])
	*([0] + [4]) = $24
	CALL _ZN14system_control15check_blacklistEN5eosio4nameE(*($0 + [56]), $1)
	CALL $200(*($0 + [56]), [1])
	CALL memcpy(($24 + [176]), *($4 + [4]), [64])
	$14 = *(($0 + [40]))
	$11 = *(($0 + [44]))
	if ( ((int_32)$11 == (int_32)$14) ){ goto $label$1 }
	$20 = ($11 + [-24])
	$17 = ([0] - $14)
	
.LOOP $label$2:
	if ( ((int_64)*(*($20)) == (int_64)$1) ){ goto $label$1 }
	$11 = $20
	$21 = ($20 + [-24])
	$20 = $21
	if ( ((int_32)($21 + $17) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [16])
	if ( ((int_32)$11 == (int_32)$14) ){ goto $label$4 }
	$19 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($19 + [20]) == (int_32)$5), [1536])
	goto $label$3 
	
.LABEL $label$4
	$19 = [0]
	$20 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-8872998483271876608, $1)
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$3 }
	$19 = CALL $144($5, $20)
	CALL eosio_assert(((int_32)*($19 + [20]) == (int_32)$5), [1536])
	
.LABEL $label$3
	$6 = ((int_32)$19 != (int_32)[0])
	CALL eosio_assert($6, [1664])
	$8 = *($2 + [4])
	$9 = *($8 + [20])
	$20 = *($0 + [64])
	$21 = ($19 + [12])
	CALL eosio_assert(((int_32)(CALL $201(*($0 + [64]), $1) + int_32((*($21) - *($19 + [8])) >> [4])) <= (int_32)CALL int_32 $20((int_32 *($8 + [8])), (int_32 *(*($20) + [4])))), [2432])
	*(($24 + [168])) = [0]
	*($24 + [160]) = (int_64)0
	*($24 + [152]) = (int_64)-1
	$12 = *($0 + [8])
	*($24 + [136]) = $12
	*($24 + [144]) = $12
	$7 = ($19 + [8])
	$10 = [0]
	$20 = CALL db_find_i64($12, $12, (int_64)-4741615135682985984, *($8 + [10]))
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$5 }
	$10 = CALL $202(($24 + [136]), $20)
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)($24 + [136])), [1536])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [2464])
	$11 = (CASTING uint_32)(uint_64 (int_64))(((uint_64)CALL publication_time() / (uint_64)(int_64)1000000) - *([0] + [12]))
	*($24 + [132]) = $11)
	$12 = *($2)
	*($24 + [120]) = $12
	$17 = *($8 + [12])
	$20 = *(*($0) + [32])
	*($24 + [16 align=4]) = $12
	$13 = CALL int_32 $0((int_32 ($24 + [16])), (int_32 $7), (int_32 ($24 + [176])), (int_32 $20))
	*($24 + [104]) = (int_64)0
	*($24 + [96]) = (int_64)0
	*($24 + [88]) = (int_64)0
	*($24 + [80]) = (int_64)0
	$14 = CALL int_32 $0((int_32 [200]), (int_32 *(*($0) + [24])))
	$15 = *($21)
	$20 = *($7)
	if ( ((int_32)$20 == (int_32)$15) ){ goto $label$8 }
	$11 = ($11 - $17)
	$21 = [0]
	
.LOOP $label$9:
	$2 = *(($20 + [10]))
	$2 = (CASTING int_32)(float_64 ((float_64)(CASTING float_64)(int_32 ((int_32)*(($20 + [12])) * (int_32)[60])) / (float_64)(float_64))((float_64)25 - ((float_64)((float_64)(CASTING float_64)(uint_32 $2) * (float_64)(float_64)25) / (float_64)(CASTING float_64)(int_32 ($2 + [1000])))))
	$2 = ((int_32)((int_32)((int_32)( $2) ? $11 : ((int_32)$11 > (int_32)$2) ) * (int_32)*(($20 + [8]))) / (int_32)[60]) / (int_32)$14
	$2 = ( $2) ? [1] : $2 
	*((($24 + [96]) + ($17 = (*($20) << [2])))) = $2)
	*((($24 + [80]) + $17)) = *(($20 + [14]))
	$21 = ($2 + $21)
	$20 = ($20 + [16])
	if ( ((int_32)$15 != (int_32)$20) ){ goto $label$9 }
	$17 = [1]
	$20 = (((int_32)$21 / (int_32)[10]) + [1])
	*($24 + [76]) = $20
	if ( ((int_32)$20 < (int_32)[100]) ){ goto $label$7 }
	if ( (((int_32)$3 ^ (int_32)[1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	*($24 + [76]) = [1]
	
.LABEL $label$7
	*($24 + [64]) = $12
	$20 = *(*($0) + [36])
	*($24 + [8 align=4]) = $12
	CALL void $0((int_32 ($24 + [8])), (int_32 $13), (int_32 $20))
	$18 = *(($0 + [8]))
	*($24 + [24]) = ($24 + [96])
	CALL eosio_assert($6, [1696])
	CALL $203($5, $19, $18, ($24 + [24]))
	$16 = (float_64)5e3
	if ( *($0 + [4]) ){ goto $label$10 }
	$23 = (CASTING float_64)(int_32 (CASTING int_32)(float_64 CALL $204(*(($0 + [56])))))
	CALL pow((float_64)2, ((float_64)max ( (float_64)((float_64)$23 / (float_64)(float_64)1e3) , (float_64)(float_64)1 ) + (float_64)(float_64)-1))
	$16 = ((float_64)$23 * (float_64)(float_64)5)
	CALL publication_time()
	
.LABEL $label$10
	*($24 + [56]) = (int_64)0
	$20 = *($24 + [100])
	if ( ($20 == 0) ){ goto $label$13 }
	$23 = ((float_64)((float_64)((float_64)(CASTING float_64)(int_32 $20) / (float_64)(float_64)50) * (float_64)min ( (float_64)((float_64)((float_64)(CASTING float_64)(int_32 *($24 + [84])) / (float_64)(float_64)1e3) + (float_64)(float_64)1) , (float_64)(float_64)8 )) + (float_64)(float_64)0)
	*($24 + [56]) = $23
	$20 = *($24 + [104])
	if ( $20 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$23 = (float_64)0
	$20 = *($24 + [104])
	if ( ($20 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$23 = ((float_64)$23 + (float_64)((float_64)((float_64)(CASTING float_64)(int_32 $20) / (float_64)(float_64)50) * (float_64)min ( (float_64)((float_64)((float_64)(CASTING float_64)(int_32 *($24 + [88])) / (float_64)(float_64)1e3) + (float_64)(float_64)1) , (float_64)(float_64)8 )))
	*($24 + [56]) = $23
	
.LABEL $label$11
	$20 = *($24 + [108])
	if ( ($20 == 0) ){ goto $label$14 }
	$23 = ((float_64)$23 + (float_64)((float_64)((float_64)(CASTING float_64)(int_32 $20) / (float_64)(float_64)50) * (float_64)min ( (float_64)((float_64)((float_64)(CASTING float_64)(int_32 *($24 + [92])) / (float_64)(float_64)1e3) + (float_64)(float_64)1) , (float_64)(float_64)8 )))
	*($24 + [56]) = $23
	
.LABEL $label$14
	$21 = (CASTING int_32)(float_64 $16)
	$20 = *($24 + [76])
	$22 = ((float_64)(CASTING float_64)(int_32 ( $20 ? [1000] : ((int_32)$20 < (int_32)[1000]) )) / (float_64)(float_64)500)
	$11 = (CASTING uint_32)(uint_64 (int_64))(((uint_64)CALL publication_time() / (uint_64)(int_64)1000000) - *([0] + [12]))
	if ( ($11) <= [48892800]) ){ goto $label$15 }
	$16 = ((float_64)(CASTING float_64)(int_32 ( $20 ? $21 : ((int_32)$21 > (int_32)$20) )) / (float_64)((float_64)$16 * (float_64)(float_64)0.5))
	$11 = ((int_32)*([0] + [16]) * (int_32)[7])
	$21 = ($11 + [-48892800])
	if ( ((uint_32)$21 <= (uint_32)$11) ){ goto $label$16 }
	$22 = $16
	goto $label$15 
	
.LABEL $label$16
	$22 = ((float_64)$22 + (float_64)((float_64)(float_64))($16 - $22) * (float_64)((float_64)(CASTING float_64)(uint_32 $21) / (float_64)(CASTING float_64)(uint_32 $11))))
	
.LABEL $label$15
	$21 = (CASTING int_32)(float_64 ((float_64)$23 * (float_64)((float_64)$22 + (float_64)(float_64)1)))
	*($24 + [56]) = (CASTING float_64)(int_32 ( $21 ? [1] : ((int_32)$21 > (int_32)[1]) ))
	CALL $205(($24 + [48]), *(($0 + [56])), ($24 + [176]))
	*($24 + [40]) = (int_64)0
	$21 = CALL $206(*($0 + [72]), $1, [1])
	$11 = *($24 + [100])
	if ( ((int_32)$11 <= (int_32)[0]) ){ goto $label$17 }
	*($24 + [42]) = CALL $207($0, $8, $20, *($24 + [84]), $11, $10, ($24 + [48]), $21, (float_64)1)
	
.LABEL $label$17
	$20 = ($0 + [72])
	$21 = CALL $206(*($20), $1, [2])
	$11 = *($24 + [104])
	if ( ((int_32)$11 <= (int_32)[0]) ){ goto $label$18 }
	*($24 + [44]) = CALL $207($0, $8, *($24 + [76]), *($24 + [88]), $11, $10, ($24 + [48]), $21, (float_64)1)
	
.LABEL $label$18
	$20 = CALL $206(*($20), $1, [3])
	$21 = *($24 + [108])
	if ( ((int_32)$21 < (int_32)[1]) ){ goto $label$19 }
	*($24 + [46]) = CALL $207($0, $8, *($24 + [76]), *($24 + [92]), $21, $10, ($24 + [48]), $20, (float_64)1)
	
.LABEL $label$19
	CALL $210(*(($0 + [64])), $1, ($24 + [40]))
	$18 = *(($0 + [8]))
	$17 = [0]
	$20 = *($0 + [60])
	*($24 + [28]) = ($24 + [56])
	*($24 + [24]) = ($24 + [132])
	*($24 + [32]) = ($24 + [76])
	$21 = (CASTING uint_32)(uint_64 (uint_64)$12 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$21) != (int_32)[0]), [1696])
	CALL $211(($20 + [8]), $21, $18, ($24 + [24]))
	*($24 + [188]) = [0]
	if ( *(($0 + [4])) ){ goto $label$20 }
	if ( ((int_32)(*(($19 + [12])) - *(($19 + [8]))) != (int_32)[48]) ){ goto $label$20 }
	$20 = *($24 + [76])
	if ( ((int_32)$20 < (int_32)[11]) ){ goto $label$20 }
	CALL $208($0, ($24 + [176]), $9, $20)
	
.LABEL $label$20
	$12 = *($24 + [176])
	*($24 + [184]) = ((int_32)(CASTING uint_32)(uint_64 ((int_64)(uint_64)$12 >> (uint_64)(int_64)32) ^ (int_64)$12)) ^ (int_32)*($24 + [48]))
	$21 = *(($0 + [56]))
	$12 = *($21)
	$20 = *($4 + [4])
	*($24 + [24]) = ($24 + [176])
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [1696])
	CALL $209(($21 + [88]), $20, $12, ($24 + [24]))
	CALL void $0((int_32 $1), (int_64 $9), (int_32 *($24 + [76])), (int_32 $7), (int_32 *(*($0) + [28])))
	
.LABEL $label$6
	$11 = *($24 + [160])
	if ( ($11 == 0) ){ goto $label$21 }
	$2 = ($24 + [164])
	$20 = *($2)
	if ( ((int_32)$20 == (int_32)$11) ){ goto $label$23 }
	
.LOOP $label$24:
	$20 = ($20 + [-24])
	$21 = *($20)
	*($20) = [0]
	if ( ($21 == 0) ){ goto $label$25 }
	CALL $956($21)
	
.LABEL $label$25
	if ( ((int_32)$11 != (int_32)$20) ){ goto $label$24 }
	$20 = *(($24 + [160]))
	goto $label$22 
	
.LABEL $label$23
	$20 = $11
	
.LABEL $label$22
	*($2) = $11
	CALL $956($20)
	
.LABEL $label$21
	*([0] + [4]) = ($24 + [240])
	return $17
}

int_32 .FUNC $188 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($1 + [4])
	$2 = *($3 + [12])
	*($5 + [12]) = ((CASTING uint_32)(uint_64 (int_64))(((uint_64)CALL publication_time() / (uint_64)(int_64)1000000) - *([0] + [12]))) + [5])
	if ( ((int_32)*($3 + [17]) != (int_32)[2]) ){ goto $label$4 }
	if ( ($2 == 0) ){ goto $label$3 }
	$1 = [0]
	CALL eosio_assert(((uint_32)$2 <= (uint_32)(CASTING uint_32)(uint_64 (int_64))(((uint_64)CALL $fimport$29() / (uint_64)(int_64)1000000) - *([0] + [12])))), [2720])
	goto $label$1 
	
.LABEL $label$4
	$1 = *($1 + [4])
	$4 = *($0)
	*($5 + [8]) = ($5 + [12])
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [1696])
	CALL $241(($0 + [88]), $1, $4, ($5 + [8]))
	goto $label$2 
	
.LABEL $label$3
	$1 = *($1 + [4])
	$4 = *($0)
	*($5) = ($5 + [12])
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [1696])
	CALL $242(($0 + [88]), $1, $4, $5)
	
.LABEL $label$2
	$1 = [1]
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
	return $1
}

int_32 .FUNC $262 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	float_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	$6 = CALL publication_time()
	$10 = [0]
	$7 = *([0] + [12])
	$11 = ((float_64)(CASTING float_64)(int_32 $3) / (float_64)(float_64)100)
	*($12 + [8]) = $11
	*($12) = (int_64)4607182418800017408
	$8 = *(( ($12 + [8]) ? $12 : ((float_64)$11 > (float_64)(float_64)1) ))
	*($12 + [8]) = $8
	*($12) = (int_64)4624633867356078080
	$8 = *(( ($12 + [8]) ? $12 : ((float_64)(CASTING float_64)(int_64 $8) < (float_64)(float_64)15) ))
	*($12 + [8]) = $8
	$4 = (CASTING uint_32)(uint_64 (int_64))(((uint_64)$6 / (uint_64)(int_64)1000000) - $7))
	$11 = (CASTING float_64)(int_64 $8)
	$5 = *($2 + [4])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$2 }
	$10 = [0]
	
.LOOP $label$3:
	$9 = *(($3 + [10]))
	$9 = (CASTING int_32)(float_64 ((float_64)(CASTING float_64)(int_32 ((int_32)*(($3 + [12])) * (int_32)[60])) / (float_64)(float_64))((float_64)25 - ((float_64)((float_64)(CASTING float_64)(uint_32 $9) * (float_64)(float_64)25) / (float_64)(CASTING float_64)(int_32 ($9 + [1000])))))
	$10 = ( $9) ? $10 : ((int_32)$10 < (int_32)$9) )
	$2 = (*(($3 + [4])) + $2)
	$3 = ($3 + [16])
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$3 }
	$10 = ((int_32)$10 / (int_32)[4])
	if ( ((int_32)$2 <= (int_32)[0]) ){ goto $label$2 }
	$3 = *($1 + [4])
	CALL eosio_assert(((uint_32)$4 >= (uint_32)((CASTING int_32)(float_64 ((float_64)$11 * (float_64)(float_64)120)) + *($3 + [12]))), [1504])
	goto $label$1 
	
.LABEL $label$2
	$3 = *($1 + [4])
	
.LABEL $label$1
	$3 = ((int_32)*([0] + [24]) * (int_32)[30])
	$3 = ( $3 ? $10 : ((int_32)$3 < (int_32)$10) )
	$2 = ($4 - *($3 + [12]))
	if ( ((int_32)$2 >= (int_32)$3) ){ goto $label$5 }
	$11 = ((float_64)((float_64)((float_64)(CASTING float_64)(int_32 ($3 - $2)) / (float_64)(CASTING float_64)(int_32 $3)) + (float_64)(float_64)1) * (float_64)$11)
	goto $label$4 
	
.LABEL $label$5
	$11 = ((float_64)$11 / (float_64)((float_64)((float_64)(CASTING float_64)(int_32 ($2 - $3)) / (float_64)(CASTING float_64)(int_32 $3)) + (float_64)(float_64)1))
	
.LABEL $label$4
	*($12 + [8]) = $11
	*($12) = (int_64)4607182418800017408
	$6 = *(( ($12 + [8]) ? $12 : ((float_64)$11 > (float_64)(float_64)1) ))
	*($12 + [8]) = $6
	*([0] + [4]) = ($12 + [16])
	$11 = (CASTING float_64)(int_64 $6)
	return ( (CASTING int_32)(float_64 ((float_64)$11 * (float_64)(float_64)100)) ? [1500] : ((float_64)$11 < (float_64)(float_64)15) )
}

int_32 .FUNC $263 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $955([32]))) = (int_64)0
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [16]) = [0]
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [1632])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $145(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $264(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $956($7)
	
.LABEL $label$10
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $264 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $956($6)
	
.LABEL $label$11
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $956($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $265 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	*(($7 + [72])) = [0]
	*($7 + [56]) = (int_64)-1
	*($7 + [64]) = (int_64)0
	$4 = *($1 + [8])
	*($7 + [40]) = $4
	*($7 + [48]) = $4
	$6 = [0]
	$5 = CALL db_find_i64($4, $4, (int_64)-4888780540812984320, *($3))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $153(($7 + [40]), $5)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($7 + [40])), [1536])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [1936])
	$5 = (*($3 + [1]) + [-1])
	*($0) = (((int_32)$5 * (int_32)*($6 + [16])) + *($6 + [8]))
	*($0 + [4]) = (((int_32)$5 * (int_32)*($6 + [20])) + *($6 + [12]))
	*($0 + [8]) = (((int_32)$5 * (int_32)*($6 + [18])) + *($6 + [10]))
	*($0 + [12]) = *($6 + [14])
	CALL $267(*($1 + [68]), $0, $2, *($3))
	CALL $268(*($1 + [72]), $0, $2, *($3))
	if ( *($1 + [4]) ){ goto $label$2 }
	*(($7 + [32])) = [0]
	*($7 + [16]) = (int_64)-1
	*($7 + [24]) = (int_64)0
	$4 = *(($1 + [8]))
	*($7) = $4
	*($7 + [8]) = $4
	$6 = CALL db_find_i64($4, $4, (int_64)-6030912128150405120, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$1 = CALL $156($7, $6)
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$7), [1536])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)[3]) ){ goto $label$6 }
	if ( ((int_32)$6 == (int_32)[2]) ){ goto $label$5 }
	if ( ((int_32)$6 != (int_32)[1]) ){ goto $label$4 }
	*($0) = (*($0) + *($1 + [20]))
	$1 = *($7 + [24])
	if ( $1 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0) = (*($0) + *($1 + [24]))
	$1 = *($7 + [24])
	if ( $1 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0) = (*($0) + *($1 + [22]))
	
.LABEL $label$4
	$1 = *($7 + [24])
	if ( ($1 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = ($7 + [28])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	CALL $956($0)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$9 }
	$6 = *(($7 + [24]))
	goto $label$7 
	
.LABEL $label$8
	$6 = $1
	
.LABEL $label$7
	*($3) = $1
	CALL $956($6)
	
.LABEL $label$2
	$1 = *($7 + [64])
	if ( ($1 == 0) ){ goto $label$11 }
	$3 = ($7 + [68])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$15 }
	CALL $956($0)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$14 }
	$6 = *(($7 + [64]))
	goto $label$12 
	
.LABEL $label$13
	$6 = $1
	
.LABEL $label$12
	*($3) = $1
	CALL $956($6)
	
.LABEL $label$11
	*([0] + [4]) = ($7 + [80])
}

void .FUNC $266 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	$12 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$5 = ($1 + [8])
	$4 = *($1)
	$10 = *($1 + [8])
	$7 = ($1 + [12])
	$9 = *($7)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$1 }
	$6 = int_32(($9 - $10) >> [4])
	$9 = [0]
	$8 = (*(*($3)) & [255])
	
.LOOP $label$3:
	if ( ((int_32)*($10) == (int_32)$8) ){ goto $label$2 }
	$10 = ($10 + [16])
	$9 = ($9 + [1])
	if ( ($9 <= $6) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*(($10 + [8])) = *(*($3 + [4]))
	*(($10 + [10])) = *(*($3 + [4]) + [4])
	*(($10 + [12])) = *(*($3 + [4]) + [8])
	*(($10 + [14])) = *(*($3 + [4]) + [12])
	
.LABEL $label$1
	CALL eosio_assert([1], [1856])
	$8 = *($5)
	$9 = *($7)
	$6 = ($9 - $8)
	$11 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	$10 = [22]
	
.LOOP $label$4:
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$6 }
	$10 = (((int_32)uint_32(($6 + [-16]) >> [4]) * (int_32)[14]) + $10)
	goto $label$5 
	
.LABEL $label$6
	$10 = ($10 + [-14])
	
.LABEL $label$5
	if ( ($10 <= [513]) ){ goto $label$8 }
	$9 = CALL malloc($10)
	goto $label$7 
	
.LABEL $label$8
	$9 = ($13 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$7
	*($12) = $9
	*($12 + [8]) = ($9 + $10)
	CALL eosio_assert(((int_32)$10 > (int_32)[7]), [1920])
	CALL memcpy($9, $1, [8])
	*($12 + [4]) = ($9 + [8])
	CALL $151($12, $5)
	CALL db_update_i64(*($1 + [24]), $2, $9, $10)
	if ( ($10 <= [513]) ){ goto $label$9 }
	CALL free($9)
	
.LABEL $label$9
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $267 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	$26 = (*([0] + [4]) - [144])
	*([0] + [4]) = $26
	*((($26 + [104]) + [32])) = [0]
	*($26 + [120]) = (int_64)-1
	*($26 + [128]) = (int_64)0
	$5 = *($0 + [8])
	*($26 + [104]) = $5
	*($26 + [112]) = $5
	*((($26 + [64]) + [32])) = [0]
	*($26 + [80]) = (int_64)-1
	*($26 + [88]) = (int_64)0
	*($26 + [72]) = $5
	*($26 + [64]) = $5
	$4 = CALL int_32 $0((int_32 $2), (int_64 *(*($0) + [20])))
	*((($26 + [56]) + [4])) = [0]
	*($26 + [56]) = [0]
	*((($26 + [44]) + [8])) = [0]
	*($26 + [44 align=4]) = (int_64)0
	$21 = *($4)
	$7 = *($4 + [4])
	if ( ((int_32)$7 == (int_32)$21) ){ goto $label$3 }
	$12 = (($26 + [104]) + [24])
	$13 = (($26 + [104]) + [28])
	$14 = (($26 + [104]) + [8])
	$17 = ($1 + [12])
	$24 = [0]
	$25 = [0]
	$19 = [0]
	$20 = [0]
	
.LOOP $label$4:
	$11 = ($21 + ((int_32)$20 * (int_32)[20]))
	if ( ((int_64)*($11 + [6]) != (int_64)$3) ){ goto $label$5 }
	$5 = *($11 + [4])
	$23 = *($12)
	$22 = *($13)
	if ( ((int_32)$22 == (int_32)$23) ){ goto $label$6 }
	$21 = ($22 + [-24])
	$6 = ([0] - $23)
	
.LOOP $label$7:
	if ( ((int_64)*(*($21)) == (int_64)$5) ){ goto $label$6 }
	$22 = $21
	$7 = ($21 + [-24])
	$21 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$22 == (int_32)$23) ){ goto $label$9 }
	$23 = *(($22 + [-24]))
	CALL eosio_assert(((int_32)*($23 + [52]) == (int_32)($26 + [104])), [1536])
	goto $label$8 
	
.LABEL $label$9
	$23 = [0]
	$21 = CALL db_find_i64(*($26 + [104]), *($14), (int_64)-4921685625297436672, $5)
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$8 }
	$23 = CALL $167(($26 + [104]), $21)
	CALL eosio_assert(((int_32)*($23 + [52]) == (int_32)($26 + [104])), [1536])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$23 != (int_32)[0]), [2016])
	$21 = *($23 + [44])
	if ( $24 ){ goto $label$12 }
	$24 = $21
	if ( ($21 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$25 = (((int_32)$24 == (int_32)$21) + $25)
	goto $label$10 
	
.LABEL $label$11
	$24 = [0]
	
.LABEL $label$10
	$8 = *($11 + [12])
	$5 = *($11 + [7])
	$15 = (($26 + [64]) + [24])
	$9 = *($15)
	$16 = (($26 + [64]) + [28])
	$22 = *($16)
	if ( ((int_32)$22 == (int_32)$9) ){ goto $label$13 }
	$21 = ($22 + [-24])
	$6 = ([0] - $9)
	
.LOOP $label$14:
	if ( ((int_64)*(*($21)) == (int_64)$5) ){ goto $label$13 }
	$22 = $21
	$7 = ($21 + [-24])
	$21 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	$7 = ($11 + [7])
	if ( ((int_32)$22 == (int_32)$9) ){ goto $label$16 }
	$21 = *(($22 + [-24]))
	CALL eosio_assert(((int_32)*($21 + [44]) == (int_32)($26 + [64])), [1536])
	goto $label$15 
	
.LABEL $label$16
	$21 = [0]
	$22 = CALL db_find_i64(*($26 + [64]), *((($26 + [64]) + [8])), (int_64)-4921685318744145920, $5)
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$15 }
	$21 = CALL $168(($26 + [64]), $22)
	CALL eosio_assert(((int_32)*($21 + [44]) == (int_32)($26 + [64])), [1536])
	
.LABEL $label$15
	CALL eosio_assert(((int_32)$21 != (int_32)[0]), [2048])
	$5 = *($7)
	$9 = *($15)
	$22 = *($16)
	if ( ((int_32)$22 == (int_32)$9) ){ goto $label$17 }
	$21 = ($22 + [-24])
	$6 = ([0] - $9)
	
.LOOP $label$18:
	if ( ((int_64)*(*($21)) == (int_64)$5) ){ goto $label$17 }
	$22 = $21
	$7 = ($21 + [-24])
	$21 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$18 }
	
.LABEL $label$17
	$7 = uint_32($8 >> [24])
	$6 = ($11 + [4])
	$21 = ($8 & [255])
	if ( ((int_32)$22 == (int_32)$9) ){ goto $label$20 }
	$22 = *(($22 + [-24]))
	CALL eosio_assert(((int_32)*($22 + [44]) == (int_32)($26 + [64])), [1536])
	goto $label$19 
	
.LABEL $label$20
	$22 = CALL $168(($26 + [64]), CALL $fimport$16(*($26 + [64]), *((($26 + [64]) + [8])), (int_64)-4921685318744145920, $5))
	CALL eosio_assert(((int_32)*($22 + [44]) == (int_32)($26 + [64])), [1536])
	
.LABEL $label$19
	$11 = ($7 & [2])
	$22 = *($22 + [10])
	*((($26 + [44]) + ($19 << [2]))) = $22
	*((($26 + [56]) + ($19 << [1]))) = *($6)
	$21 = ($22 + [100])
	$6 = *($23 + [24])
	$6 = ((uint_32)((int_32)((*($23 + [18]) - $6) + ((uint_32)(((int_32)( $21 ? [100] : ($21 <= [100]) ) * (int_32)$6) << [1]) / (uint_32)[100])) * (int_32)$21) / (uint_32)[100])
	$22 = (*($23 + [14]) + [-1])
	if ( ((uint_32)$22 > (uint_32)[3]) ){ goto $label$28 }
	goto $label$29 
	
.LABEL $label$29
	*($1) = (*($1) + $6)
	$7 = ($7 & [4])
	if ( $11 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$28
	CALL eosio_assert([0], [1984])
	$7 = ($7 & [4])
	if ( $11 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$27
	*(($22 = ($1 + [4]))) = (*($22) + $6)
	$7 = ($7 & [4])
	if ( $11 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	*(($22 = ($1 + [8]))) = (*($22) + $6)
	$7 = ($7 & [4])
	if ( $11 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	*($17) = (*($17) + $6)
	$7 = ($7 & [4])
	if ( ($11 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$6 = (uint_32($8 >> [8]) & [255])
	$22 = *($23 + [26])
	$6 = ((uint_32)((int_32)((*($23 + [20]) - $22) + ((uint_32)(((int_32)( $6 ? [100] : ($6 <= [100]) ) * (int_32)$22) << [1]) / (uint_32)[100])) * (int_32)$21) / (uint_32)[100])
	$22 = (*($23 + [15]) + [-1])
	if ( ((uint_32)$22 > (uint_32)[3]) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$34
	*($1) = (*($1) + $6)
	if ( $7 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$33
	CALL eosio_assert([0], [1984])
	if ( $7 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$32
	*(($22 = ($1 + [4]))) = (*($22) + $6)
	if ( $7 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$31
	*(($22 = ($1 + [8]))) = (*($22) + $6)
	if ( $7 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$30
	*($17) = (*($17) + $6)
	
.LABEL $label$23
	if ( ($7 == 0) ){ goto $label$21 }
	
.LABEL $label$22
	$22 = (uint_32($8 >> [16]) & [255])
	$7 = *($23 + [28])
	$7 = ((uint_32)((int_32)((*($23 + [22]) - $7) + ((uint_32)(((int_32)( $22 ? [100] : ($22 <= [100]) ) * (int_32)$7) << [1]) / (uint_32)[100])) * (int_32)$21) / (uint_32)[100])
	$21 = (*($23 + [16]) + [-1])
	if ( ((uint_32)$21 > (uint_32)[3]) ){ goto $label$38 }
	goto $label$39 
	
.LABEL $label$39
	*($1) = (*($1) + $7)
	goto $label$21 
	
.LABEL $label$38
	CALL eosio_assert([0], [1984])
	goto $label$21 
	
.LABEL $label$37
	*(($21 = ($1 + [4]))) = (*($21) + $7)
	goto $label$21 
	
.LABEL $label$36
	*(($21 = ($1 + [8]))) = (*($21) + $7)
	goto $label$21 
	
.LABEL $label$35
	*($17) = (*($17) + $7)
	
.LABEL $label$21
	$19 = ($19 + [1])
	$7 = *(($4 + [4]))
	$21 = *($4)
	
.LABEL $label$5
	$20 = ($20 + [1])
	if ( ($20 <= ((int_32)($7 - $21) / (int_32)[20])) ){ goto $label$4 }
	if ( ((int_32)$25 != (int_32)[3]) ){ goto $label$3 }
	if ( ((int_32)$24 <= (int_32)[0]) ){ goto $label$3 }
	*(($26 + [32])) = [0]
	*($26 + [16]) = (int_64)-1
	*($26 + [24]) = (int_64)0
	$5 = *(($0 + [8]))
	*($26) = $5
	*($26 + [8]) = $5
	$21 = CALL db_find_i64($5, $5, (int_64)-4921685207192436736, (CASTING int_64)(int_32 $24))
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$44 }
	$7 = CALL $169($26, $21)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$26), [1536])
	$14 = ($7 + [36])
	$10 = ($7 + [34])
	$13 = ($7 + [30])
	$17 = ($7 + [28])
	$15 = ($7 + [24])
	$25 = ($7 + [22])
	$24 = ($7 + [18])
	$4 = ($7 + [16])
	$19 = ($7 + [12])
	$8 = ($7 + [10])
	$21 = ($26 + [44])
	$9 = ($7 + [8])
	$16 = ($7 + [14])
	$12 = ($7 + [20])
	$0 = ($7 + [26])
	$18 = ($7 + [32])
	$7 = [0]
	
.LOOP $label$45:
	$22 = $8
	$6 = $19
	$20 = *((($26 + [56]) + $7))
	if ( ((int_32)*($9) == (int_32)$20) ){ goto $label$47 }
	$22 = $4
	$6 = $24
	if ( ((int_32)*($16) == (int_32)$20) ){ goto $label$47 }
	$22 = $25
	$6 = $15
	if ( ((int_32)*($12) == (int_32)$20) ){ goto $label$47 }
	$22 = $17
	$6 = $13
	if ( ((int_32)*($0) == (int_32)$20) ){ goto $label$47 }
	$22 = $10
	$6 = $14
	if ( ((int_32)*($18) != (int_32)$20) ){ goto $label$46 }
	
.LABEL $label$47
	$11 = *($6)
	$23 = *($22)
	
.LABEL $label$46
	$22 = ($23 & [255])
	CALL eosio_assert(((int_32)$22 != (int_32)[0]), [2080])
	$6 = ((uint_32)((int_32)(*($21) + [100]) * (int_32)($11 & [65535])) / (uint_32)[100])
	$22 = ($22 + [-1])
	if ( ((uint_32)$22 > (uint_32)[3]) ){ goto $label$52 }
	goto $label$53 
	
.LABEL $label$53
	*($1) = (*($1) + $6)
	goto $label$48 
	
.LABEL $label$52
	CALL eosio_assert([0], [1984])
	goto $label$48 
	
.LABEL $label$51
	*(($22 = ($1 + [4]))) = (*($22) + $6)
	goto $label$48 
	
.LABEL $label$50
	*(($22 = ($1 + [8]))) = (*($22) + $6)
	goto $label$48 
	
.LABEL $label$49
	*(($22 = ($1 + [12]))) = (*($22) + $6)
	
.LABEL $label$48
	$21 = ($21 + [4])
	$7 = ($7 + [2])
	if ( ((int_32)$7 != (int_32)[6]) ){ goto $label$45 }
	$22 = *($26 + [24])
	if ( ($22 == 0) ){ goto $label$3 }
	$6 = ($26 + [28])
	$21 = *($6)
	if ( ((int_32)$21 == (int_32)$22) ){ goto $label$43 }
	
.LOOP $label$54:
	$21 = ($21 + [-24])
	$7 = *($21)
	*($21) = [0]
	if ( ($7 == 0) ){ goto $label$55 }
	CALL $956($7)
	
.LABEL $label$55
	if ( ((int_32)$22 != (int_32)$21) ){ goto $label$54 }
	$21 = *(($26 + [24]))
	goto $label$42 
	
.LABEL $label$44
	$22 = *($26 + [24])
	if ( ($22 == 0) ){ goto $label$3 }
	$6 = ($26 + [28])
	$21 = *($6)
	if ( ((int_32)$21 == (int_32)$22) ){ goto $label$41 }
	
.LOOP $label$56:
	$21 = ($21 + [-24])
	$7 = *($21)
	*($21) = [0]
	if ( ($7 == 0) ){ goto $label$57 }
	CALL $956($7)
	
.LABEL $label$57
	if ( ((int_32)$22 != (int_32)$21) ){ goto $label$56 }
	$21 = *(($26 + [24]))
	goto $label$40 
	
.LABEL $label$43
	$21 = $22
	
.LABEL $label$42
	*($6) = $22
	CALL $956($21)
	$22 = *($26 + [88])
	if ( $22 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$41
	$21 = $22
	
.LABEL $label$40
	*($6) = $22
	CALL $956($21)
	$22 = *($26 + [88])
	if ( $22 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$22 = *($26 + [88])
	if ( ($22 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($26 + [92])
	$21 = *($6)
	if ( ((int_32)$21 == (int_32)$22) ){ goto $label$59 }
	
.LOOP $label$60:
	$21 = ($21 + [-24])
	$7 = *($21)
	*($21) = [0]
	if ( ($7 == 0) ){ goto $label$61 }
	CALL $956($7)
	
.LABEL $label$61
	if ( ((int_32)$22 != (int_32)$21) ){ goto $label$60 }
	$21 = *(($26 + [88]))
	goto $label$58 
	
.LABEL $label$59
	$21 = $22
	
.LABEL $label$58
	*($6) = $22
	CALL $956($21)
	
.LABEL $label$1
	$22 = *($26 + [128])
	if ( ($22 == 0) ){ goto $label$62 }
	$6 = ($26 + [132])
	$21 = *($6)
	if ( ((int_32)$21 == (int_32)$22) ){ goto $label$64 }
	
.LOOP $label$65:
	$21 = ($21 + [-24])
	$7 = *($21)
	*($21) = [0]
	if ( ($7 == 0) ){ goto $label$66 }
	CALL $956($7)
	
.LABEL $label$66
	if ( ((int_32)$22 != (int_32)$21) ){ goto $label$65 }
	$21 = *(($26 + [128]))
	goto $label$63 
	
.LABEL $label$64
	$21 = $22
	
.LABEL $label$63
	*($6) = $22
	CALL $956($21)
	
.LABEL $label$62
	*([0] + [4]) = ($26 + [144])
	$22
	$22
	$21
	$22
}

void .FUNC $268 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [80])
	*([0] + [4]) = $17
	*((($17 + [40]) + [32])) = [0]
	*($17 + [56]) = (int_64)-1
	*($17 + [64]) = (int_64)0
	$5 = *($0 + [8])
	*($17 + [40]) = $5
	*($17 + [48]) = $5
	*(($17 + [32])) = [0]
	*($17 + [8]) = $5
	*($17) = $5
	*($17 + [16]) = (int_64)-1
	*($17 + [24]) = (int_64)0
	$0 = CALL db_find_i64($5, $5, (int_64)-4227314345542942720, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $269($17, $0)
	CALL eosio_assert(((int_32)*($4 + [20]) == (int_32)$17), [1536])
	$0 = *($4 + [8])
	$9 = ($4 + [12])
	if ( ((int_32)*($9) == (int_32)$0) ){ goto $label$1 }
	$11 = ($17 + [64])
	$12 = ($17 + [68])
	$13 = (($17 + [40]) + [8])
	$14 = ($1 + [4])
	$15 = [0]
	
.LOOP $label$2:
	$10 = ($0 + ((int_32)$15 * (int_32)[12]))
	if ( ((int_64)*($10 + [9]) != (int_64)$3) ){ goto $label$3 }
	$5 = *($10)
	$6 = *($11)
	$16 = *($12)
	if ( ((int_32)$16 == (int_32)$6) ){ goto $label$4 }
	$0 = ($16 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$5:
	if ( ((int_64)*(*($0)) == (int_64)$5) ){ goto $label$4 }
	$16 = $0
	$8 = ($0 + [-24])
	$0 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ((int_32)$16 == (int_32)$6) ){ goto $label$7 }
	$0 = *(($16 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [28]) == (int_32)($17 + [40])), [1536])
	goto $label$6 
	
.LABEL $label$7
	$0 = [0]
	$8 = CALL db_find_i64(*($17 + [40]), *($13), (int_64)-4803775097846366208, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$0 = CALL $160(($17 + [40]), $8)
	CALL eosio_assert(((int_32)*($0 + [28]) == (int_32)($17 + [40])), [1536])
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [1952])
	$8 = (*($10 + [8]) + [-1])
	$16 = (*($0 + [9]) + [-1])
	if ( ((uint_32)$16 > (uint_32)[3]) ){ goto $label$14 }
	$7 = (((int_32)*($0 + [18]) * (int_32)$8) + *($0 + [12]))
	goto $label$15 
	
.LABEL $label$15
	*($1) = (*($1) + $7)
	$16 = *($0 + [10])
	if ( $16 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$14
	CALL eosio_assert([0], [1984])
	$16 = *($0 + [10])
	if ( $16 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$13
	*($14) = (*($14) + $7)
	$16 = *($0 + [10])
	if ( $16 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	*(($16 = ($1 + [8]))) = (*($16) + $7)
	$16 = *($0 + [10])
	if ( $16 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	*(($16 = ($1 + [12]))) = (*($16) + $7)
	$16 = *($0 + [10])
	if ( ($16 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$16 = ($16 + [-1])
	if ( ((uint_32)$16 > (uint_32)[3]) ){ goto $label$19 }
	$7 = (((int_32)*($0 + [20]) * (int_32)$8) + *($0 + [14]))
	goto $label$20 
	
.LABEL $label$20
	*($1) = (*($1) + $7)
	$16 = *($0 + [11])
	if ( $16 ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$19
	CALL eosio_assert([0], [1984])
	$16 = *($0 + [11])
	if ( $16 ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$18
	*($14) = (*($14) + $7)
	$16 = *($0 + [11])
	if ( $16 ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$17
	*(($16 = ($1 + [8]))) = (*($16) + $7)
	$16 = *($0 + [11])
	if ( $16 ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$16
	*(($16 = ($1 + [12]))) = (*($16) + $7)
	
.LABEL $label$9
	$16 = *($0 + [11])
	if ( ($16 == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$16 = ($16 + [-1])
	if ( ((uint_32)$16 > (uint_32)[3]) ){ goto $label$24 }
	$0 = (((int_32)*($0 + [22]) * (int_32)$8) + *($0 + [16]))
	goto $label$25 
	
.LABEL $label$25
	*($1) = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$24
	CALL eosio_assert([0], [1984])
	goto $label$3 
	
.LABEL $label$23
	*($14) = (*($14) + $0)
	goto $label$3 
	
.LABEL $label$22
	*(($8 = ($1 + [8]))) = (*($8) + $0)
	goto $label$3 
	
.LABEL $label$21
	*(($8 = ($1 + [12]))) = (*($8) + $0)
	
.LABEL $label$3
	$0 = *(($4 + [8]))
	$15 = ($15 + [1])
	if ( ($15 <= ((int_32)(*($9) - $0) / (int_32)[12])) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = *($17 + [24])
	if ( ($7 == 0) ){ goto $label$26 }
	$15 = ($17 + [28])
	$0 = *($15)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$28 }
	
.LOOP $label$29:
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$30 }
	$16 = *($8 + [8])
	if ( ($16 == 0) ){ goto $label$31 }
	*(($8 + [12])) = $16
	CALL $956($16)
	
.LABEL $label$31
	CALL $956($8)
	
.LABEL $label$30
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$29 }
	$0 = *(($17 + [24]))
	goto $label$27 
	
.LABEL $label$28
	$0 = $7
	
.LABEL $label$27
	*($15) = $7
	CALL $956($0)
	
.LABEL $label$26
	$16 = *($17 + [64])
	if ( ($16 == 0) ){ goto $label$32 }
	$7 = ($17 + [68])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$16) ){ goto $label$34 }
	
.LOOP $label$35:
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$36 }
	CALL $956($8)
	
.LABEL $label$36
	if ( ((int_32)$16 != (int_32)$0) ){ goto $label$35 }
	$0 = *(($17 + [64]))
	goto $label$33 
	
.LABEL $label$34
	$0 = $16
	
.LABEL $label$33
	*($7) = $16
	CALL $956($0)
	
.LABEL $label$32
	*([0] + [4]) = ($17 + [80])
	$16
	$16
	$16
}

int_32 .FUNC $180 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[20]))
	$5 = *($0 + [4])
	$4 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [16]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $5) > (int_32)[0]), [1920])
	CALL memcpy(*($7), ($8 + [16]), [1])
	$5 = (*($7) + [1])
	*($7) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$2 = ($8 + [40])
	
.LOOP $label$3:
	*($8 + [8]) = $0
	*($8 + [16]) = $7
	*((($8 + [16]) + [8])) = ($7 + [6])
	*((($8 + [16]) + [12])) = ($7 + [7])
	*((($8 + [16]) + [16])) = ($7 + [8])
	*((($8 + [16]) + [20])) = ($7 + [12])
	*($2) = ($7 + [16])
	*($8 + [20]) = ($7 + [4])
	CALL $181(($8 + [16]), ($8 + [8]))
	$7 = ($7 + [20])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [48])
	return $0
}

void .FUNC $183 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [12])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [16])) = $6
	CALL $956($6)
	
.LABEL $label$11
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $956($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $182 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($2)), [1648])
	$4 = *($3)
	$7 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$4 = *($1 + [4])
	$3 = ((int_32)($4 - $7) / (int_32)[20])
	$6 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$4 }
	CALL $184($1, ($6 - $3))
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$6 >= (uint_32)$3) ){ goto $label$5 }
	$4 = ($7 + ((int_32)$6 * (int_32)[20]))
	*(($1 + [4])) = $4
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($8 + [40])
	
.LOOP $label$6:
	*($8 + [8]) = $0
	*($8 + [16]) = $7
	*((($8 + [16]) + [8])) = ($7 + [6])
	*((($8 + [16]) + [12])) = ($7 + [7])
	*((($8 + [16]) + [16])) = ($7 + [8])
	*((($8 + [16]) + [20])) = ($7 + [12])
	*($6) = ($7 + [16])
	*($8 + [20]) = ($7 + [4])
	CALL $185(($8 + [16]), ($8 + [8]))
	$7 = ($7 + [20])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [48])
	return $0
}

void .FUNC $185 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $184 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$5 = *($0 + [8])
	if ( ((uint_32)((int_32)($5 - $6) / (int_32)[20]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$2 = ((int_32)($6 - $4) / (int_32)[20])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[214748365]) ){ goto $label$3 }
	$6 = [214748364]
	$5 = ((int_32)($5 - $4) / (int_32)[20])
	if ( ((uint_32)$5 > (uint_32)[107374181]) ){ goto $label$6 }
	$6 = ($5 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$5 = CALL $955(((int_32)$6 * (int_32)[20]))
	goto $label$2 
	
.LABEL $label$5
	$5 = ($0 + [4])
	
.LOOP $label$7:
	*(($0 = ($6 + [8]))) = (int_64)0
	*($6) = (int_64)0
	*($6 + [16]) = [0]
	*($0) = [0]
	$6 = (*($5) + [20])
	*($5) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	$3 = ($5 + ((int_32)$6 * (int_32)[20]))
	$4 = ($5 + ((int_32)$2 * (int_32)[20]))
	$6 = $4
	
.LOOP $label$8:
	*(($5 = ($6 + [8]))) = (int_64)0
	*($6) = (int_64)0
	*($6 + [16]) = [0]
	*($5) = [0]
	$6 = ($6 + [20])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$2 = ($0 + [4])
	$5 = (*($2) - $1)
	$4 = ($4 + ((int_32)((int_32)$5 / (int_32)[-20]) * (int_32)[20]))
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($4, $1, $5)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $4
	*($2) = $6
	*(($0 + [8])) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $956($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $187 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$4 = *(($1 + [112]))
	$9 = *(($1 + [116]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$9 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = ($1 + [88])
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$6 }
	$6 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [60]) == (int_32)$8), [1536])
	goto $label$5 
	
.LABEL $label$6
	$6 = [0]
	$9 = CALL db_find_i64(*(($1 + [88])), *(($1 + [96])), (int_64)-6030912128150405120, $2)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $156($8, $9)
	CALL eosio_assert(((int_32)*($6 + [60]) == (int_32)$8), [1536])
	goto $label$4 
	
.LABEL $label$5
	if ( $6 ){ goto $label$4 }
	if ( ((int_32)$3 ^ (int_32)[1]) ){ goto $label$4 }
	*($10 + [24]) = $2
	*($10 + [23]) = [0]
	*($10 + [20]) = [0]
	$7 = *($1)
	*($10 + [12]) = ($10 + [23])
	*($10 + [8]) = ($10 + [24])
	*($10 + [16]) = ($10 + [20])
	CALL $243($10, $8, $7, ($10 + [8]))
	CALL $244($0, $8, $2)
	goto $label$3 
	
.LABEL $label$4
	*($0 + [4]) = $6
	*($0) = $8
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [32])
}

int_32 .FUNC $186 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $955([40]))) = (int_64)0
	*($6 + [8]) = [0]
	*($6 + [10]) = [0]
	*($6 + [12 align=4]) = (int_64)0
	*($6 + [20]) = [0]
	*($6 + [24]) = $0
	CALL $246(($8 + [32]), $6)
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $247(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$4 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1632])
	CALL memcpy($6, $4, [8])
	CALL eosio_assert(((int_32)($1 & [-4]) != (int_32)[8]), [1632])
	$7 = ($6 + [8])
	CALL memcpy($7, ($4 + [8]), [4])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($4)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($7)
	$3 = *($6)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 $4), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $760 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [192])
	*([0] + [4]) = $16
	CALL $187(($16 + [168]), *($0 + [16]), $1, [0])
	if ( ($5 == 0) ){ goto $label$8 }
	CALL require_auth($1)
	*($16 + [160]) = *($16 + [168])
	$5 = *(($0 + [16]))
	*($16 + [8 align=4]) = *($16 + [160])
	$5 = CALL $188($5, ($16 + [8]))
	$13 = *($16 + [168])
	*($16 + [152]) = $13
	*($16) = $13
	if ( (CALL $756($0, $1, $2, $3, $5, $16) == 0) ){ goto $label$2 }
	$13 = CALL current_time()
	*(($16 + [116])) = [0]
	*(($16 + [120])) = [0]
	*($16 + [100]) = [0]
	*($16 + [104]) = [0]
	*($16 + [108]) = [0]
	*($16 + [112]) = [0]
	*($16 + [88]) = ((CASTING uint_32)(uint_64 ((uint_64)$13 / (uint_64)(int_64)1000000)) + [60])
	*($16 + [124]) = [0]
	*(($16 + [128])) = [0]
	*(($16 + [132])) = [0]
	*($16 + [136]) = [0]
	*(($16 + [140])) = [0]
	*(($16 + [144])) = [0]
	$6 = ($0 + [8])
	$8 = ($16 + [124])
	$7 = *($0 + [8])
	$13 = (int_64)0
	$12 = (int_64)59
	$5 = [2400]
	$14 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$14 }
	$9 = *($5)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$9 = ($9 + [165])
	goto $label$12 
	
.LABEL $label$14
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$10
	$5 = ($5 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$9 }
	*($16 + [80]) = $14
	*($16 + [72]) = $7
	$13 = (int_64)0
	$12 = (int_64)59
	$5 = [8288]
	$14 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$13 > (uint_64)(int_64)9) ){ goto $label$20 }
	$9 = *($5)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$9 = ($9 + [165])
	goto $label$18 
	
.LABEL $label$20
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$16
	$5 = ($5 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$15 }
	*($16 + [64]) = $14
	*(($16 + [48])) = [0]
	*(($16 + [52])) = [0]
	*($16 + [40]) = $2
	*($16 + [32]) = $1
	*($16 + [44]) = [0]
	$5 = (*($3 + [4]) - *($3))
	$9 = int_32($5 >> [2])
	if ( ($9 == 0) ){ goto $label$21 }
	if ( ((uint_32)$9 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$5 = CALL $955($5)
	*(($16 + [44])) = $5
	*(($2 = ($16 + [48]))) = $5
	*(($16 + [52])) = ($5 + ($9 << [2]))
	$3 = *($3)
	$9 = (*(($3 + [4])) - $3)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$21 }
	CALL memcpy($5, $3, $9)
	*($2) = (*($2) + $9)
	
.LABEL $label$21
	*($16 + [56]) = $4
	$9 = *(($16 + [128]))
	if ( ((uint_32)$9 >= (uint_32)*(($16 + [132]))) ){ goto $label$7 }
	$2 = ($16 + [40])
	$4 = (($16 + [32]) + [24])
	*($9 + [16 align=4]) = (int_64)0
	$13 = *($6)
	*($9 + [8]) = *($16 + [64])
	*($9) = $13
	*(($3 = ($9 + [24]))) = [0]
	$5 = CALL $955([16])
	*($9 + [16]) = $5
	$6 = ($5 + [16])
	*($3) = $6
	*(($5 + [8])) = *((($16 + [72]) + [8]))
	*($5) = *($16 + [72])
	*(($9 + [20])) = $6
	*($9 + [28]) = [0]
	*(($9 + [32])) = [0]
	*(($9 + [36])) = [0]
	$10 = ($9 + [28])
	$6 = *($16 + [44])
	$3 = *((($16 + [32]) + [16]))
	$11 = ($3 - $6)
	$13 = (CASTING uint_64)(uint_32 int_32($11 >> [2]))
	$5 = [12]
	$8 = (($16 + [32]) + [12])
	
.LOOP $label$22:
	$5 = ($5 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$22 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$23 }
	$5 = (($11 & [-4]) + $5)
	
.LABEL $label$23
	$5 = ($5 + [4])
	if ( ($5 == 0) ){ goto $label$6 }
	CALL $194($10, $5)
	$3 = *(($9 + [32]))
	$5 = *(($9 + [28]))
	goto $label$5 
	
.LABEL $label$8
	CALL require_auth(*($0 + [8]))
	$13 = *($16 + [168])
	*($16 + [24]) = $13
	*($16 + [16 align=4]) = $13
	CALL $756($0, $1, $2, $3, [0], ($16 + [16]))
	goto $label$2 
	
.LABEL $label$7
	CALL $761($8, ($16 + [72]), $6, ($16 + [64]), ($16 + [32]))
	$5 = *($16 + [44])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$3 = [0]
	$5 = [0]
	
.LABEL $label$5
	*($16 + [176]) = $5
	*($16 + [184]) = $3
	CALL eosio_assert(((int_32)($3 - $5) > (int_32)[7]), [1920])
	CALL memcpy($5, ($16 + [32]), [8])
	$9 = ($5 + [8])
	CALL eosio_assert(((int_32)($3 - $9) > (int_32)[3]), [1920])
	CALL memcpy($9, $2, [4])
	*($16 + [180]) = ($5 + [12])
	CALL $323(($16 + [176]), $8)
	CALL eosio_assert(((int_32)(*($16 + [184]) - *($16 + [180])) > (int_32)[3]), [1920])
	CALL memcpy(*($16 + [180]), $4, [4])
	*(($5 = (($16 + [88]) + [40]))) = (*($5) + [40])
	$5 = *($16 + [44])
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	*(($16 + [48])) = $5
	CALL $956($5)
	
.LABEL $label$3
	*(($16 + [108])) = [1]
	*($16 + [40]) = (int_64)0
	*($16 + [32]) = *(*(($0 + [16])) + [144])
	$13 = *(($0 + [8]))
	CALL $191(($16 + [72]), ($16 + [88]))
	$5 = *($16 + [72])
	CALL send_deferred(($16 + [32]), $13, $5, (*($16 + [76]) - $5), [0])
	$5 = *($16 + [72])
	if ( ($5 == 0) ){ goto $label$24 }
	*($16 + [76]) = $5
	CALL $956($5)
	
.LABEL $label$24
	CALL $192(($16 + [88]))
	
.LABEL $label$2
	*([0] + [4]) = ($16 + [192])
	return (unreachable)
	
.LABEL $label$1
	CALL $971(($16 + [44]))
}

void .FUNC $763 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	*($9 + [63]) = $2
	CALL require_auth($1)
	*(($9 + [48])) = [0]
	*($9 + [32]) = (int_64)-1
	*($9 + [40]) = (int_64)0
	$5 = *($0 + [8])
	*($9 + [16]) = $5
	*($9 + [24]) = $5
	$8 = [0]
	$2 = CALL db_find_i64($5, $5, (int_64)-4741615135682985984, (CASTING uint_64)(uint_32 $2))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $202(($9 + [16]), $2)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($9 + [16])), [1536])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [2464])
	$4 = *($8 + [8])
	$6 = *(($0 + [40]))
	$7 = *(($0 + [44]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	$8 = ($7 + [-24])
	$3 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$2 }
	$7 = $8
	$2 = ($8 + [-24])
	$8 = $2
	if ( ((int_32)($2 + $3) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$8 = ($0 + [16])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)$8), [1536])
	goto $label$4 
	
.LABEL $label$5
	$7 = [0]
	$2 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-8872998483271876608, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$7 = CALL $144($8, $2)
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)$8), [1536])
	
.LABEL $label$4
	$2 = [0]
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [2256])
	$3 = *(($7 + [12]))
	$8 = *($7 + [8])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$6 }
	$2 = [0]
	$6 = ($4 & [255])
	
.LOOP $label$7:
	$7 = ((uint_32)*(($8 + [1])) >= (uint_32)$6)
	$2 = ($2 | $7)
	if ( $7 ){ goto $label$6 }
	$8 = ($8 + [16])
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert(($2 & [1]), [8304])
	$4 = *(($6 + [32]))
	$6 = *($0 + [60])
	$7 = *(($6 + [36]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ($7 + [-24])
	$3 = ([0] - $4)
	
.LOOP $label$9:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$8 }
	$7 = $8
	$2 = ($8 + [-24])
	$8 = $2
	if ( ((int_32)($2 + $3) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($6 + [8])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$11 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$2), [1536])
	goto $label$10 
	
.LABEL $label$11
	$8 = [0]
	$7 = CALL db_find_i64(*(($6 + [8])), *(($6 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$10 }
	$8 = CALL $186($2, $7)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$2), [1536])
	
.LABEL $label$10
	$1 = *(($0 + [8]))
	*($9 + [8]) = ($9 + [63])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [1696])
	CALL $764($2, $8, $1, ($9 + [8]))
	$7 = *($9 + [40])
	if ( ($7 == 0) ){ goto $label$12 }
	$3 = ($9 + [44])
	$8 = *($3)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$14 }
	
.LOOP $label$15:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$16 }
	CALL $956($2)
	
.LABEL $label$16
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$15 }
	$8 = *(($9 + [40]))
	goto $label$13 
	
.LABEL $label$14
	$8 = $7
	
.LABEL $label$13
	*($3) = $7
	CALL $956($8)
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [64])
}

void .FUNC $762 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($0 + [8]), *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy(($0 + [12]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($0 + [16]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $765 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy(($0 + [4]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy(($0 + [6]), *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy(($0 + [8]), *($1 + [4]), [2])
	*($1 + [4]) = (*($1 + [4]) + [2])
}

int_32 .FUNC $248 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [1600])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $955([32]))) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [1632])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-4])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [1632])
	CALL memcpy(($6 + [8]), ($7 + [8]), [4])
	CALL eosio_assert(((int_32)$4 != (int_32)[12]), [1632])
	CALL memcpy(($6 + [12]), ($7 + [12]), [4])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $251(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $767 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( CALL has_auth(*($0)) ){ goto $label$1 }
	$1 = *($0 + [136])
	$0 = ($1 + [8])
	$3 = [0]
	$1 = ($1 + [16])
	$2 = CALL db_lowerbound_i64(*($1 + [8]), *($1), (int_64)3631284361385115648, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	CALL $375($0, $2)
	$3 = [1]
	
.LABEL $label$2
	CALL eosio_assert($3, [8544])
	CALL require_auth(*(CALL $375($0, CALL $fimport$18(*($0), *($1), (int_64)3631284361385115648, (int_64)0)) + [128]))
	
.LABEL $label$1
}

void .FUNC $766 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_64 $40
	int_64 $41
	int_64 $42
	int_64 $43
	int_64 $44
	int_32 $45
	$45 = (*([0] + [4]) - [288])
	*([0] + [4]) = $45
	*($45 + [271]) = $2
	*($45 + [268]) = $3
	*($45 + [266]) = $4
	CALL $767(*($0 + [16]))
	$4 = [0]
	*(($45 + [256])) = [0]
	*($45 + [240]) = (int_64)-1
	*($45 + [248]) = (int_64)0
	$41 = *($0)
	*($45 + [224]) = $41
	*($45 + [232]) = $41
	$5 = [0]
	$3 = CALL db_find_i64($41, $41, (int_64)5022829029921652736, (CASTING uint_64)(uint_32 $1))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $768(($45 + [224]), $3)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)($45 + [224])), [1536])
	$2 = *($45 + [271])
	
.LABEL $label$1
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [8352])
	$41 = CALL publication_time()
	CALL eosio_assert(((*($5 + [16]) + *($5 + [12])) <= (CASTING uint_32)(uint_64 (int_64))(((uint_64)$41 / (uint_64)(int_64)1000000) - *([0] + [12])))), [8368])
	$26 = ($2 & [255])
	CALL eosio_assert(($26 <= int_32((*(($5 + [24])) - *($5 + [20])) >> [6])), [8400])
	$20 = *($5 + [20])
	$2 = ($20 + ($26 << [6]))
	$8 = *($2 + [48])
	*($45 + [208]) = (int_64)0
	$9 = ($2 + [24])
	$41 = *($9)
	*($45 + [216]) = $41
	CALL eosio_assert([1], [3712])
	$41 = (uint_64)$41 >> (uint_64)(int_64)8)
	$7 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$4:
	$2 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $41) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$41 = (uint_64)$41 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$41) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$41 = (uint_64)$41 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$41) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$3 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	
.LABEL $label$2
	CALL eosio_assert($3, [3776])
	*($45 + [192]) = (int_64)0
	$10 = (($20 + ($26 << [6])) + [40])
	$41 = *($10)
	*($45 + [200]) = $41
	CALL eosio_assert([1], [3712])
	$41 = (uint_64)$41 >> (uint_64)(int_64)8)
	
.LOOP $label$8:
	$4 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $41) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$41 = (uint_64)$41 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$41) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$41 = (uint_64)$41 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$41) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$4 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert($4, [3776])
	$2 = *($3 + [52])
	$3 = ($20 + ($26 << [6]))
	$12 = ($3 + [56])
	$4 = *($12)
	$28 = *($45 + [268])
	if ( ((uint_32)$28 >= (uint_32)int_32(($4 - $2) >> [4])) ){ goto $label$14 }
	$11 = ($3 + [52])
	$14 = ($3 + [32])
	$13 = ($3 + [16])
	$19 = (($45 + [8]) + [32])
	$18 = (($45 + [112]) | [1])
	$17 = (($45 + [128]) | [1])
	$16 = (($45 + [144]) | [1])
	$15 = (($45 + [160]) | [1])
	$36 = ($45 + [32])
	$37 = ($45 + [100])
	$39 = ($45 + [48])
	$38 = ($45 + [92])
	$27 = [0]
	
.LOOP $label$16:
	$20 = ($2 + ($28 << [4]))
	if ( *($20 + [9]) ){ goto $label$17 }
	$43 = *($20 + [8])
	$21 = *($9)
	$41 = *($13)
	CALL eosio_assert([1], [3984])
	CALL eosio_assert(((int_64)$41 > (int_64)-4611686018427387904), [4032])
	CALL eosio_assert(((int_64)$41 < (int_64)4611686018427387904), [4064])
	CALL eosio_assert(((int_64)$21 == (int_64)*((($45 + [208]) + [8]))), [4096])
	$22 = ((int_64)((int_64)$43 * (int_64)$41) / (int_64)$7)
	$41 = ((int_64)*($45 + [208]) + (int_64)$22)
	*($45 + [208]) = $41
	CALL eosio_assert(((int_64)$41 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($45 + [208]) < (int_64)4611686018427387904), [4176])
	$43 = *($20 + [8])
	$23 = *($10)
	$41 = *($14)
	CALL eosio_assert([1], [3984])
	CALL eosio_assert(((int_64)$41 > (int_64)-4611686018427387904), [4032])
	CALL eosio_assert(((int_64)$41 < (int_64)4611686018427387904), [4064])
	CALL eosio_assert(((int_64)$23 == (int_64)*((($45 + [192]) + [8]))), [4096])
	$24 = ((int_64)((int_64)$43 * (int_64)$41) / (int_64)$7)
	$41 = ((int_64)*($45 + [192]) + (int_64)$24)
	*($45 + [192]) = $41
	CALL eosio_assert(((int_64)$41 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($45 + [192]) < (int_64)4611686018427387904), [4176])
	*(($3 = (($45 + [160]) + [8]))) = [0]
	*($45 + [160]) = (int_64)0
	$2 = CALL strlen([8416])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$13 }
	$26 = ($20 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$20 }
	*($45 + [160]) = ($2 << [1])
	$4 = $15
	if ( $2 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$31 = (($2 + [16]) & [-16])
	$4 = CALL $955($31)
	*($3) = $4
	*($45 + [160]) = ($31 | [1])
	*($45 + [164]) = $2
	
.LABEL $label$19
	CALL memcpy($4, [8416], $2)
	
.LABEL $label$18
	*(($4 + $2)) = [0]
	CALL _ZNSt3__19to_stringEm(($45 + [144]), $1)
	$2 = *($45 + [144])
	$4 = ($2 & [1])
	$29 = (($45 + [144]) + [8])
	$2 = CALL $961(($45 + [160]), ( *($29) ? $16 : $4 ), ( *($45 + [148]) ? uint_32($2 >> [1]) : $4 ))
	$4 = ($2 + [8])
	*(($30 = (($45 + [272]) + [8]))) = *($4)
	*($45 + [272]) = *($2)
	*($2) = [0]
	*(($2 + [4])) = [0]
	*($4) = [0]
	$2 = CALL $962(($45 + [272]), [4640])
	$4 = ($2 + [8])
	*(($31 = (($45 + [56]) + [8]))) = *($4)
	*($45 + [56]) = *($2)
	*($2) = [0]
	*(($2 + [4])) = [0]
	*($4) = [0]
	CALL _ZNSt3__19to_stringEi(($45 + [128]), $8)
	$2 = *($45 + [128])
	$4 = ($2 & [1])
	$32 = (($45 + [128]) + [8])
	$2 = CALL $961(($45 + [56]), ( *($32) ? $17 : $4 ), ( *($45 + [132]) ? uint_32($2 >> [1]) : $4 ))
	$4 = ($2 + [8])
	*(($33 = (($45 + [72]) + [8]))) = *($4)
	*($45 + [72]) = *($2)
	*($2) = [0]
	*(($2 + [4])) = [0]
	*($4) = [0]
	$2 = CALL $962(($45 + [72]), [4640])
	$4 = ($2 + [8])
	*(($34 = (($45 + [8]) + [8]))) = *($4)
	*($45 + [8]) = *($2)
	*($2) = [0]
	*(($2 + [4])) = [0]
	*($4) = [0]
	CALL _ZNSt3__19to_stringEi(($45 + [112]), *($26))
	$2 = *($45 + [112])
	$4 = ($2 & [1])
	$26 = (($45 + [112]) + [8])
	$2 = CALL $961(($45 + [8]), ( *($26) ? $18 : $4 ), ( *($45 + [116]) ? uint_32($2 >> [1]) : $4 ))
	$4 = ($2 + [8])
	*(($35 = (($45 + [176]) + [8]))) = *($4)
	*($45 + [176]) = *($2)
	*($2) = [0]
	*(($2 + [4])) = [0]
	*($4) = [0]
	if ( ((*($45 + [112]) & [1]) == 0) ){ goto $label$21 }
	CALL $956(*($26))
	
.LABEL $label$21
	if ( ((*($45 + [8]) & [1]) == 0) ){ goto $label$22 }
	CALL $956(*($34))
	
.LABEL $label$22
	if ( ((*($45 + [72]) & [1]) == 0) ){ goto $label$23 }
	CALL $956(*($33))
	
.LABEL $label$23
	if ( ((*($45 + [128]) & [1]) == 0) ){ goto $label$24 }
	CALL $956(*($32))
	
.LABEL $label$24
	if ( ((*($45 + [56]) & [1]) == 0) ){ goto $label$25 }
	CALL $956(*($31))
	
.LABEL $label$25
	if ( ((*($45 + [272]) & [1]) == 0) ){ goto $label$26 }
	CALL $956(*($30))
	
.LABEL $label$26
	if ( ((*($45 + [144]) & [1]) == 0) ){ goto $label$27 }
	CALL $956(*($29))
	
.LABEL $label$27
	if ( ((*($45 + [160]) & [1]) == 0) ){ goto $label$28 }
	CALL $956(*($3))
	
.LABEL $label$28
	if ( ((int_64)$22 < (int_64)1) ){ goto $label$29 }
	$25 = *($0)
	$41 = (int_64)0
	$40 = (int_64)59
	$2 = [2400]
	$42 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$41 > (uint_64)(int_64)5) ){ goto $label$35 }
	$4 = *($2)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$4 = ($4 + [165])
	goto $label$33 
	
.LABEL $label$35
	$43 = (int_64)0
	if ( ((uint_64)$41 <= (uint_64)(int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$43 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$43 = ((int_64)((int_64)$43 & (int_64)31) << (int_64)((int_64)$40 & (int_64)4294967295))
	
.LABEL $label$31
	$2 = ($2 + [1])
	$41 = ((int_64)$41 + (int_64)1)
	$42 = ((int_64)$43 | (int_64)$42)
	$40 = ((int_64)$40 + (int_64)-5)
	if ( ((int_64)$40 != (int_64)-6) ){ goto $label$30 }
	*($31) = $42
	*($45 + [56]) = $25
	$44 = (int_64)0
	if ( ((int_64)$21 > (int_64)76151268725763) ){ goto $label$40 }
	if ( ((int_64)$21 == (int_64)1397703940) ){ goto $label$39 }
	$2 = [8480]
	if ( ((int_64)$21 == (int_64)280318001668) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$40
	if ( ((int_64)$21 == (int_64)76151268725764) ){ goto $label$38 }
	if ( ((int_64)$21 != (int_64)4994016260158475524) ){ goto $label$36 }
	$2 = [8448]
	goto $label$37 
	
.LABEL $label$39
	$2 = [1312]
	goto $label$37 
	
.LABEL $label$38
	$2 = [8464]
	
.LABEL $label$37
	$4 = [-1]
	
.LOOP $label$41:
	$3 = ($2 + $4)
	$26 = ($4 + [1])
	$4 = $26
	if ( *(($3 + [1])) ){ goto $label$41 }
	$42 = (CASTING uint_64)(uint_32 $26)
	$41 = (int_64)0
	$43 = (int_64)59
	$44 = (int_64)0
	
.LOOP $label$42:
	$40 = (int_64)0
	if ( ((uint_64)$41 >= (uint_64)$42) ){ goto $label$43 }
	$4 = *($2)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$4 = ($4 + [165])
	goto $label$44 
	
.LABEL $label$45
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$40 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	if ( ((uint_64)$41 > (uint_64)(int_64)11) ){ goto $label$47 }
	$40 = ((int_64)((int_64)$40 & (int_64)31) << (int_64)((int_64)$43 & (int_64)4294967295))
	goto $label$46 
	
.LABEL $label$47
	$40 = ((int_64)$40 & (int_64)15)
	
.LABEL $label$46
	$2 = ($2 + [1])
	$41 = ((int_64)$41 + (int_64)1)
	$44 = ((int_64)$40 | (int_64)$44)
	$43 = ((int_64)$43 + (int_64)-5)
	if ( ((int_64)$43 != (int_64)-6) ){ goto $label$42 }
	
.LABEL $label$36
	$41 = (int_64)0
	$40 = (int_64)59
	$2 = [1296]
	$42 = (int_64)0
	
.LOOP $label$48:
	if ( ((uint_64)$41 > (uint_64)(int_64)7) ){ goto $label$53 }
	$4 = *($2)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$52 }
	$4 = ($4 + [165])
	goto $label$51 
	
.LABEL $label$53
	$43 = (int_64)0
	if ( ((uint_64)$41 <= (uint_64)(int_64)11) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$52
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$51
	$43 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$50
	$43 = ((int_64)((int_64)$43 & (int_64)31) << (int_64)((int_64)$40 & (int_64)4294967295))
	
.LABEL $label$49
	$2 = ($2 + [1])
	$41 = ((int_64)$41 + (int_64)1)
	$42 = ((int_64)$43 | (int_64)$42)
	$40 = ((int_64)$40 + (int_64)-5)
	if ( ((int_64)$40 != (int_64)-6) ){ goto $label$48 }
	$41 = *($20)
	*((($45 + [8]) + [16])) = $22
	*($36) = $21
	*($34) = $41
	*($45 + [8]) = $25
	CALL $972($19, ($45 + [176]))
	CALL $381(($45 + [272]), CALL $380(($45 + [72]), ($45 + [56]), $44, $42, ($45 + [8])))
	$2 = *($45 + [272])
	CALL send_inline($2, (*($45 + [276]) - $2))
	$2 = *($45 + [272])
	if ( ($2 == 0) ){ goto $label$54 }
	*($45 + [276]) = $2
	CALL $956($2)
	
.LABEL $label$54
	$2 = *($37)
	if ( ($2 == 0) ){ goto $label$55 }
	*((($45 + [72]) + [32])) = $2
	CALL $956($2)
	
.LABEL $label$55
	$2 = *((($45 + [72]) + [16]))
	if ( ($2 == 0) ){ goto $label$56 }
	*($38) = $2
	CALL $956($2)
	
.LABEL $label$56
	if ( ((*($19) & [1]) == 0) ){ goto $label$29 }
	CALL $956(*($39))
	
.LABEL $label$29
	if ( ((int_64)$24 < (int_64)1) ){ goto $label$57 }
	$21 = *($0)
	$41 = (int_64)0
	$40 = (int_64)59
	$2 = [2400]
	$42 = (int_64)0
	
.LOOP $label$58:
	if ( ((uint_64)$41 > (uint_64)(int_64)5) ){ goto $label$63 }
	$4 = *($2)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$62 }
	$4 = ($4 + [165])
	goto $label$61 
	
.LABEL $label$63
	$43 = (int_64)0
	if ( ((uint_64)$41 <= (uint_64)(int_64)11) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$62
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$61
	$43 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$60
	$43 = ((int_64)((int_64)$43 & (int_64)31) << (int_64)((int_64)$40 & (int_64)4294967295))
	
.LABEL $label$59
	$2 = ($2 + [1])
	$41 = ((int_64)$41 + (int_64)1)
	$42 = ((int_64)$43 | (int_64)$42)
	$40 = ((int_64)$40 + (int_64)-5)
	if ( ((int_64)$40 != (int_64)-6) ){ goto $label$58 }
	*($31) = $42
	*($45 + [56]) = $21
	$44 = (int_64)0
	if ( ((int_64)$23 > (int_64)76151268725763) ){ goto $label$68 }
	if ( ((int_64)$23 == (int_64)1397703940) ){ goto $label$67 }
	$2 = [8480]
	if ( ((int_64)$23 == (int_64)280318001668) ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$68
	if ( ((int_64)$23 == (int_64)76151268725764) ){ goto $label$66 }
	if ( ((int_64)$23 != (int_64)4994016260158475524) ){ goto $label$64 }
	$2 = [8448]
	goto $label$65 
	
.LABEL $label$67
	$2 = [1312]
	goto $label$65 
	
.LABEL $label$66
	$2 = [8464]
	
.LABEL $label$65
	$4 = [-1]
	
.LOOP $label$69:
	$3 = ($2 + $4)
	$26 = ($4 + [1])
	$4 = $26
	if ( *(($3 + [1])) ){ goto $label$69 }
	$42 = (CASTING uint_64)(uint_32 $26)
	$41 = (int_64)0
	$43 = (int_64)59
	$44 = (int_64)0
	
.LOOP $label$70:
	$40 = (int_64)0
	if ( ((uint_64)$41 >= (uint_64)$42) ){ goto $label$71 }
	$4 = *($2)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$73 }
	$4 = ($4 + [165])
	goto $label$72 
	
.LABEL $label$73
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$72
	$40 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$71
	if ( ((uint_64)$41 > (uint_64)(int_64)11) ){ goto $label$75 }
	$40 = ((int_64)((int_64)$40 & (int_64)31) << (int_64)((int_64)$43 & (int_64)4294967295))
	goto $label$74 
	
.LABEL $label$75
	$40 = ((int_64)$40 & (int_64)15)
	
.LABEL $label$74
	$2 = ($2 + [1])
	$41 = ((int_64)$41 + (int_64)1)
	$44 = ((int_64)$40 | (int_64)$44)
	$43 = ((int_64)$43 + (int_64)-5)
	if ( ((int_64)$43 != (int_64)-6) ){ goto $label$70 }
	
.LABEL $label$64
	$41 = (int_64)0
	$40 = (int_64)59
	$2 = [1296]
	$42 = (int_64)0
	
.LOOP $label$76:
	if ( ((uint_64)$41 > (uint_64)(int_64)7) ){ goto $label$81 }
	$4 = *($2)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$80 }
	$4 = ($4 + [165])
	goto $label$79 
	
.LABEL $label$81
	$43 = (int_64)0
	if ( ((uint_64)$41 <= (uint_64)(int_64)11) ){ goto $label$78 }
	goto $label$77 
	
.LABEL $label$80
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$79
	$43 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$78
	$43 = ((int_64)((int_64)$43 & (int_64)31) << (int_64)((int_64)$40 & (int_64)4294967295))
	
.LABEL $label$77
	$2 = ($2 + [1])
	$41 = ((int_64)$41 + (int_64)1)
	$42 = ((int_64)$43 | (int_64)$42)
	$40 = ((int_64)$40 + (int_64)-5)
	if ( ((int_64)$40 != (int_64)-6) ){ goto $label$76 }
	$41 = *($20)
	*((($45 + [8]) + [16])) = $24
	*($36) = $23
	*($34) = $41
	*($45 + [8]) = $21
	CALL $972($19, ($45 + [176]))
	CALL $381(($45 + [272]), CALL $380(($45 + [72]), ($45 + [56]), $44, $42, ($45 + [8])))
	$2 = *($45 + [272])
	CALL send_inline($2, (*($45 + [276]) - $2))
	$2 = *($45 + [272])
	if ( ($2 == 0) ){ goto $label$82 }
	*($45 + [276]) = $2
	CALL $956($2)
	
.LABEL $label$82
	$2 = *($37)
	if ( ($2 == 0) ){ goto $label$83 }
	*((($45 + [72]) + [32])) = $2
	CALL $956($2)
	
.LABEL $label$83
	$2 = *((($45 + [72]) + [16]))
	if ( ($2 == 0) ){ goto $label$84 }
	*($38) = $2
	CALL $956($2)
	
.LABEL $label$84
	if ( ((*($19) & [1]) == 0) ){ goto $label$57 }
	CALL $956(*($39))
	
.LABEL $label$57
	$27 = ($27 + [1])
	$2 = *($45 + [266])
	if ( ((*($45 + [176]) & [1]) == 0) ){ goto $label$85 }
	CALL $956(*($35))
	
.LABEL $label$85
	if ( ((int_32)$27 == (int_32)$2) ){ goto $label$15 }
	$2 = *($11)
	$4 = *($12)
	
.LABEL $label$17
	$28 = ($28 + [1])
	if ( ($28 <= int_32(($4 - $2) >> [4])) ){ goto $label$16 }
	
.LABEL $label$15
	if ( ((int_64)*(($45 + [216])) != (int_64)1397703940) ){ goto $label$14 }
	if ( ((int_64)*($45 + [208]) < (int_64)1) ){ goto $label$14 }
	$41 = *($0)
	$3 = *($0 + [12])
	*(($45 + [16])) = [0]
	*($45 + [8]) = (int_64)0
	$2 = CALL strlen([8496])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$88 }
	*($45 + [8]) = ($2 << [1])
	$4 = (($45 + [8]) | [1])
	if ( $2 ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$88
	$26 = (($2 + [16]) & [-16])
	$4 = CALL $955($26)
	*($45 + [8]) = ($26 | [1])
	*($45 + [16]) = $4
	*($45 + [12]) = $2
	
.LABEL $label$87
	CALL memcpy($4, [8496], $2)
	
.LABEL $label$86
	*(($4 + $2)) = [0]
	CALL $357($3, ($45 + [208]), $41, ($45 + [8]))
	if ( ((*($45 + [8]) & [1]) == 0) ){ goto $label$14 }
	CALL $956(*($45 + [16]))
	
.LABEL $label$14
	if ( ((int_64)*(($45 + [200])) != (int_64)1397703940) ){ goto $label$89 }
	if ( ((int_64)*($45 + [192]) < (int_64)1) ){ goto $label$89 }
	$41 = *($0)
	$3 = *($0 + [12])
	*(($45 + [16])) = [0]
	*($45 + [8]) = (int_64)0
	$2 = CALL strlen([8496])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$92 }
	*($45 + [8]) = ($2 << [1])
	$4 = (($45 + [8]) | [1])
	if ( $2 ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$92
	$26 = (($2 + [16]) & [-16])
	$4 = CALL $955($26)
	*($45 + [8]) = ($26 | [1])
	*($45 + [16]) = $4
	*($45 + [12]) = $2
	
.LABEL $label$91
	CALL memcpy($4, [8496], $2)
	
.LABEL $label$90
	*(($4 + $2)) = [0]
	CALL $357($3, ($45 + [192]), $41, ($45 + [8]))
	if ( ((*($45 + [8]) & [1]) == 0) ){ goto $label$89 }
	CALL $956(*($45 + [16]))
	
.LABEL $label$89
	$41 = *($0)
	*($45 + [12]) = ($45 + [268])
	*($45 + [8]) = ($45 + [271])
	*($45 + [16]) = ($45 + [266])
	CALL eosio_assert($6, [1696])
	CALL $769(($45 + [224]), $5, $41, ($45 + [8]))
	$27 = *($45 + [248])
	if ( ($27 == 0) ){ goto $label$93 }
	$34 = ($45 + [252])
	$26 = *($34)
	if ( ((int_32)$26 == (int_32)$27) ){ goto $label$95 }
	
.LOOP $label$96:
	$26 = ($26 + [-24])
	$28 = *($26)
	*($26) = [0]
	if ( ($28 == 0) ){ goto $label$97 }
	$20 = *($28 + [20])
	if ( ($20 == 0) ){ goto $label$98 }
	$31 = ($28 + [24])
	$2 = *($31)
	if ( ((int_32)$2 == (int_32)$20) ){ goto $label$100 }
	$3 = ([0] - $20)
	$2 = ($2 + [-12])
	
.LOOP $label$101:
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$102 }
	*(($2 + [4])) = $4
	CALL $956($4)
	
.LABEL $label$102
	$2 = ($2 + [-64])
	if ( ((int_32)($2 + $3) != (int_32)[-12]) ){ goto $label$101 }
	$2 = *(($28 + [20]))
	goto $label$99 
	
.LABEL $label$100
	$2 = $20
	
.LABEL $label$99
	*($31) = $20
	CALL $956($2)
	
.LABEL $label$98
	CALL $956($28)
	
.LABEL $label$97
	if ( ((int_32)$26 != (int_32)$27) ){ goto $label$96 }
	$2 = *(($45 + [248]))
	goto $label$94 
	
.LABEL $label$95
	$2 = $27
	
.LABEL $label$94
	*($34) = $27
	CALL $956($2)
	
.LABEL $label$93
	*([0] + [4]) = ($45 + [288])
	return (unreachable)
	
.LABEL $label$13
	CALL $957(($45 + [160]))
	
.LABEL $label$12
	CALL $957(($45 + [8]))
	
.LABEL $label$11
	CALL $957(($45 + [8]))
	(unreachable)
	(unreachable)
}

void .FUNC $769 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	$9 = *($9 + [52])
	$9 = (*($1 + [20]) + (*(*($3)) << [6]))
	$8 = int_32((*(($9 + [56])) - $9) >> [4])
	$7 = *(*($3 + [4]))
	if ( ((uint_32)$7 >= (uint_32)$8) ){ goto $label$1 }
	$9 = (($9 + ($7 << [4])) + [9])
	$5 = ($3 + [8])
	$3 = [1]
	
.LOOP $label$2:
	*($9) = [1]
	if ( ((uint_32)($7 + $3) >= (uint_32)$8) ){ goto $label$1 }
	$9 = ($9 + [16])
	$6 = ((int_32)$3 != (int_32)*(*($5)))
	$3 = ($3 + [1])
	if ( $6 ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert([1], [1856])
	$9 = *($1 + [20])
	$5 = *(($1 + [24]))
	$10 = (CASTING uint_64)(uint_32 int_32(($5 - $9) >> [6]))
	$3 = [18]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = ($3 + [43])
	$7 = *($9 + [52])
	$6 = *(($9 + [56]))
	$8 = ($6 - $7)
	$10 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$3 = ((((int_32)uint_32(($8 + [-16]) >> [4]) * (int_32)[10]) + $3) + [10])
	
.LABEL $label$7
	$9 = ($9 + [64])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$9 }
	$9 = CALL malloc($3)
	goto $label$8 
	
.LABEL $label$9
	$9 = ($12 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$8
	*($11 + [4]) = $9
	*($11) = $9
	*($11 + [8]) = ($9 + $3)
	CALL $770($11, $1)
	CALL db_update_i64(*($1 + [36]), $2, $9, $3)
	if ( ($3 <= [513]) ){ goto $label$10 }
	CALL free($9)
	
.LABEL $label$10
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($11 + [16])
}

int_32 .FUNC $768 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$7 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($7 = CALL $955([48])) + [8]) = [0]
	*($7) = (int_64)0
	*($7 + [12 align=4]) = (int_64)0
	*($7 + [20 align=4]) = (int_64)0
	*($7 + [28]) = [0]
	*($7 + [32]) = $0
	CALL $774(($8 + [32]), $7)
	*($7 + [36]) = $1
	*($8 + [24]) = $7
	$5 = *($7)
	*($8 + [16]) = $5
	$4 = *($7 + [36])
	*($8 + [12]) = $4
	$1 = ($0 + [28])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($6 + [8]) = $5
	*($6 + [16]) = $4
	*($8 + [24]) = [0]
	*($6) = $7
	*($1) = ($6 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $775(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$3 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$0 = *($3 + [20])
	if ( ($0 == 0) ){ goto $label$10 }
	$2 = ($3 + [24])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$12 }
	$1 = ([0] - $0)
	$6 = ($6 + [-12])
	
.LOOP $label$13:
	$4 = *($6)
	if ( ($4 == 0) ){ goto $label$14 }
	*(($6 + [4])) = $4
	CALL $956($4)
	
.LABEL $label$14
	$6 = ($6 + [-64])
	if ( ((int_32)($6 + $1) != (int_32)[-12]) ){ goto $label$13 }
	$6 = *(($3 + [20]))
	goto $label$11 
	
.LABEL $label$12
	$6 = $0
	
.LABEL $label$11
	*($2) = $0
	CALL $956($6)
	
.LABEL $label$10
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $7
}

void .FUNC $249 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [16]) = (*($1 + [16]) - *(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [40]) = ($5 + [21])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $212(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [28]), $2, $5, [21])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC $167 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $955([64])) + [52]) = $0
	CALL $174(($8 + [32]), $6)
	*($6 + [56]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [56])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $175(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $166 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [1632])
	CALL memcpy($2, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $165 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$5 = *($0 + [8])
	if ( ((uint_32)((int_32)($5 - $6) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$2 = ((int_32)($6 - $4) / (int_32)[12])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$3 }
	$6 = [357913941]
	$5 = ((int_32)($5 - $4) / (int_32)[12])
	if ( ((uint_32)$5 > (uint_32)[178956969]) ){ goto $label$6 }
	$6 = ($5 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$5 = CALL $955(((int_32)$6 * (int_32)[12]))
	goto $label$2 
	
.LABEL $label$5
	$5 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($0 = ($6 + [8]))) = [0]
	*($6) = [0]
	*($0) = [0]
	$6 = (*($5) + [12])
	*($5) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	$3 = ($5 + ((int_32)$6 * (int_32)[12]))
	$4 = ($5 + ((int_32)$2 * (int_32)[12]))
	$6 = $4
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($5 = ($6 + [8]))) = [0]
	*($6) = [0]
	*($5) = [0]
	$6 = ($6 + [12])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$2 = ($0 + [4])
	$5 = (*($2) - $1)
	$4 = ($4 + ((int_32)((int_32)$5 / (int_32)[-12]) * (int_32)[12]))
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($4, $1, $5)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $4
	*($2) = $6
	*(($0 + [8])) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $956($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $164 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $956($6)
	
.LABEL $label$11
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $956($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($2)), [1648])
	$4 = *($3)
	$7 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$4 = *($1 + [4])
	$3 = ((int_32)($4 - $7) / (int_32)[12])
	$6 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$4 }
	CALL $165($1, ($6 - $3))
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$6 >= (uint_32)$3) ){ goto $label$5 }
	$4 = ($7 + ((int_32)$6 * (int_32)[12]))
	*(($1 + [4])) = $4
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	*($8 + [8]) = $0
	*($8 + [16]) = $7
	*((($8 + [16]) + [8])) = ($7 + [8])
	*((($8 + [16]) + [12])) = ($7 + [9])
	*($8 + [20]) = ($7 + [4])
	CALL $166(($8 + [16]), ($8 + [8]))
	$7 = ($7 + [12])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [32])
	return $0
}

void .FUNC $162 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $161 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [9]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [10]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [11]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [12]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [14]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [18]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [20]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [22]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $955([40]))) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [16]) = (int_64)0
	*($6 + [24]) = [0]
	*($6 + [28]) = $0
	CALL $161(($8 + [32]), $6)
	*($6 + [32]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [32])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $162(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC __towrite (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $169 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $955([56])) + [40]) = $0
	CALL $170(($8 + [32]), $6)
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [44])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $171(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $955([56]))) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [16]) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [44]) = $0
	CALL $172(($8 + [32]), $6)
	*($6 + [48]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [48])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $173(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $930 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = *($1)
	*($5 + [8]) = $4
	$1 = *(*($1 + [4]) + [22])
	*($5) = $4
	$1 = CALL $262($0, $5, $2, $1)
	*([0] + [4]) = ($5 + [16])
	return ($1 & [65535])
}

int_32 .FUNC atoi (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$3 = *($0)
	$1 = int_32(($3 << [24]) >> [24])
	$2 = ($1 + [-9])
	$4 = ($0 + [1])
	$0 = $4
	if ( ((int_32)$3 == (int_32)[32]) ){ goto $label$1 }
	$0 = $4
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$1 = [1]
	goto $label$4 
	
.LABEL $label$5
	$1 = [0]
	
.LABEL $label$4
	$3 = *($4)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 + [-1])
	$1 = [0]
	
.LABEL $label$2
	$2 = [0]
	$3 = (int_32(($3 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($4 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $3)
	$3 = *($0)
	$0 = ($0 + [1])
	$3 = ($3 + [-48])
	if ( ($3 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $1 )
}

void .FUNC $931 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [14]) = $2
	$1 = *($1 + [4])
	$3 = *($0 + [8])
	$0 = *($0 + [60])
	*($4 + [8]) = ($4 + [14])
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [1696])
	CALL $932(($0 + [8]), $1, $3, ($4 + [8]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $369 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$2 = ($0 + [8])
	$7 = [0]
	$6 = [0]
	$4 = ($0 + [16])
	$3 = CALL db_lowerbound_i64(*($0 + [8]), *($4), (int_64)3631284361385115648, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	CALL $375($2, $3)
	$6 = [1]
	
.LABEL $label$1
	CALL eosio_assert($6, [5392])
	$6 = CALL db_lowerbound_i64(*($2), *($4), (int_64)3631284361385115648, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $375($2, $6)
	
.LABEL $label$2
	$5 = *($0)
	*($8 + [8]) = $1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1696])
	CALL $462($2, $7, $5, ($8 + [8]))
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $368 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	$22 = (*([0] + [4]) - [496])
	*([0] + [4]) = $22
	*($22 + [472]) = $2
	CALL require_auth($2)
	CALL $446(*($1 + [88]), $2, *($3 + [64]), *($3 + [68]))
	$20 = CALL atoll(( *(($3 + [28])) ? ($3 + [21]) : (*($3 + [20]) & [1]) ))
	$8 = *(($1 + [32]))
	$12 = *(($1 + [36]))
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$1 }
	$17 = ($12 + [-24])
	$13 = ([0] - $8)
	
.LOOP $label$2:
	if ( ((int_64)*(*($17)) == (int_64)$20) ){ goto $label$1 }
	$12 = $17
	$15 = ($17 + [-24])
	$17 = $15
	if ( ((int_32)($15 + $13) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($1 + [8])
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$4 }
	$12 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*(($12 + [44])) == (int_32)$6), [1536])
	goto $label$3 
	
.LABEL $label$4
	$12 = [0]
	$17 = CALL db_find_i64(*(($1 + [8])), *(($1 + [16])), (int_64)8526759268719788032, $20)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$3 }
	$12 = CALL $464($6, $17)
	CALL eosio_assert(((int_32)*($12 + [44]) == (int_32)$6), [1536])
	
.LABEL $label$3
	$17 = [0]
	$7 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($7, [5424])
	CALL eosio_assert(((int_64)*($12 + [8]) != (int_64)$2), [5456])
	CALL eosio_assert(((int_32)$5 > (int_32)[0]), [4816])
	if ( ((int_32)$5 == (int_32)[7]) ){ goto $label$5 }
	*(($22 + [160])) = [0]
	*($22 + [144]) = (int_64)-1
	*($22 + [152]) = (int_64)0
	$2 = *($1)
	*($22 + [128]) = $2
	*($22 + [136]) = $2
	$15 = CALL db_find_i64($2, $2, (int_64)-4921685625297436672, *($12 + [32]))
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$6 }
	$17 = CALL $167(($22 + [128]), $15)
	CALL eosio_assert(((int_32)*($17 + [52]) == (int_32)($22 + [128])), [1536])
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$17 != (int_32)[0]), [4848])
	CALL eosio_assert(((int_32)*($17 + [10]) <= (int_32)$5), [4880])
	$13 = *($22 + [152])
	if ( ($13 == 0) ){ goto $label$7 }
	$5 = ($22 + [156])
	$17 = *($5)
	if ( ((int_32)$17 == (int_32)$13) ){ goto $label$9 }
	
.LOOP $label$10:
	$17 = ($17 + [-24])
	$15 = *($17)
	*($17) = [0]
	if ( ($15 == 0) ){ goto $label$11 }
	CALL $956($15)
	
.LABEL $label$11
	if ( ((int_32)$13 != (int_32)$17) ){ goto $label$10 }
	$17 = *(($22 + [152]))
	goto $label$8 
	
.LABEL $label$9
	$17 = $13
	
.LABEL $label$8
	*($5) = $13
	CALL $956($17)
	
.LABEL $label$7
	$2 = *($22 + [472])
	
.LABEL $label$5
	$14 = *(($8 + [32]))
	$8 = *($1 + [92])
	$13 = *(($8 + [36]))
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$12 }
	$17 = ($13 + [-24])
	$5 = ([0] - $14)
	
.LOOP $label$13:
	if ( ((int_64)*(*($17)) == (int_64)$2) ){ goto $label$12 }
	$13 = $17
	$15 = ($17 + [-24])
	$17 = $15
	if ( ((int_32)($15 + $5) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	$17 = ($8 + [8])
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$15 }
	$14 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$17), [1536])
	goto $label$14 
	
.LABEL $label$15
	$14 = [0]
	$15 = CALL db_find_i64(*(($8 + [8])), *(($8 + [16])), (int_64)-6030912142679474176, $2)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$14 }
	$14 = CALL $186($17, $15)
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$17), [1536])
	
.LABEL $label$14
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [4704])
	$2 = *($22 + [472])
	$9 = *(($8 + [40]))
	$8 = *($1 + [108])
	$13 = *(($8 + [44]))
	if ( ((int_32)$13 == (int_32)$9) ){ goto $label$16 }
	$17 = ($13 + [-24])
	$5 = ([0] - $9)
	
.LOOP $label$17:
	if ( ((int_64)*(*($17)) == (int_64)$2) ){ goto $label$16 }
	$13 = $17
	$15 = ($17 + [-24])
	$17 = $15
	if ( ((int_32)($15 + $5) != (int_32)[-24]) ){ goto $label$17 }
	
.LABEL $label$16
	$15 = ($8 + [16])
	if ( ((int_32)$13 == (int_32)$9) ){ goto $label$19 }
	$17 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($17 + [20]) == (int_32)$15), [1536])
	goto $label$18 
	
.LABEL $label$19
	$17 = [0]
	$13 = CALL db_find_i64(*(($8 + [16])), *(($8 + [24])), (int_64)-8872998483271876608, $2)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$18 }
	$17 = CALL $144($15, $13)
	CALL eosio_assert(((int_32)*($17 + [20]) == (int_32)$15), [1536])
	
.LABEL $label$18
	$17 = ( ($17 + [8]) ? ($8 + [76]) : $17 )
	CALL eosio_assert(((int_32)*($17 + [4]) != (int_32)*($17)), [4736])
	$17 = CALL int_32 $4((int_32 *($14 + [9])), (int_32 *(*($4) + [16])))
	$15 = CALL int_32 $4((int_32 *($22 + [472])), (int_64 *(*($4) + [20])))
	CALL eosio_assert(((int_32)((int_32)(*($15 + [4]) - *($15)) / (int_32)[20]) < (int_32)$17), [3440])
	$2 = *(($12 + [8]))
	if ( ((int_64)$2 == (int_64)*($1)) ){ goto $label$20 }
	CALL $465(*($1 + [96]), $2, *($12))
	
.LABEL $label$20
	CALL void $4((int_32 *($22 + [472])), (int_64 *($12 + [32])), (int_32 *($12 + [36])), (int_32 *($12 + [40])), (int_32 *($12 + [41])), (int_32 *(*($4) + [24])))
	CALL eosio_assert($7, [4912])
	CALL eosio_assert($7, [4208])
	$15 = [0]
	$17 = CALL db_next_i64(*($12 + [48]), ($22 + [128]))
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$21 }
	CALL $464($6, $17)
	
.LABEL $label$21
	CALL $466($6, $12)
	$10 = *(($12 + [24]))
	$2 = *(($12 + [8]))
	$20 = *($1)
	$16 = *($12 + [16])
	CALL eosio_assert(((int_64)*($3 + [48]) == (int_64)$16), [5472])
	$18 = CALL publication_time()
	$19 = *([0] + [12])
	CALL eosio_assert([1], [3712])
	$3 = ((int_64)$2 == (int_64)$20)
	$4 = ( [0] ? [5] : $3 )
	$5 = (CASTING uint_32)(uint_64 (int_64))(((uint_64)$18 / (uint_64)(int_64)1000000) - $19))
	$2 = (int_64)5459781
	
.LOOP $label$24:
	$17 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$25 }
	
.LOOP $label$26:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$23 }
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$26 }
	
.LABEL $label$25
	$13 = [1]
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$13 = [0]
	
.LABEL $label$22
	CALL eosio_assert($13, [3776])
	$2 = *(($12 + [24]))
	$20 = *(($12 + [16]))
	$15 = *(($12 + [41]))
	$13 = *(($12 + [40]))
	$8 = *(($12 + [36]))
	$6 = *(($12 + [32]))
	$18 = *($12)
	$19 = *($22 + [472])
	*($22 + [384]) = $5
	*($22 + [392]) = $19
	*($22 + [400]) = [3]
	$14 = *($1 + [104])
	*(($22 + [403])) = *(($22 + [471]))
	*($22 + [401 align=1]) = *($22 + [469 align=1])
	*($22 + [404]) = $18
	*($22 + [408]) = $6
	*($22 + [412]) = $8
	*($22 + [416]) = $13
	*($22 + [417]) = $15
	*(($22 + [422])) = *((($22 + [462]) + [4]))
	*($22 + [418 align=2]) = *($22 + [462 align=2])
	*($22 + [424]) = $20
	*(($22 + [432])) = $2
	*($22 + [440]) = $4
	*(($22 + [447])) = *(($22 + [461]))
	*(($22 + [445])) = *((($22 + [455]) + [4]))
	*($22 + [441 align=1]) = *($22 + [455 align=1])
	$2 = *(($12 + [8]))
	CALL memcpy(($22 + [64]), ($22 + [384]), [64])
	CALL $428($14, ($22 + [64]), $2)
	CALL eosio_assert([1], [3712])
	$2 = (int_64)5459781
	
.LOOP $label$29:
	$15 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$30 }
	
.LOOP $label$31:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$31 }
	
.LABEL $label$30
	$13 = [1]
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	$13 = [0]
	
.LABEL $label$27
	CALL eosio_assert($13, [3776])
	$2 = *(($12 + [24]))
	$20 = *(($12 + [16]))
	$17 = *(($12 + [41]))
	$13 = *(($12 + [40]))
	$8 = *(($12 + [36]))
	$6 = *(($12 + [32]))
	$18 = *(($12 + [8]))
	$19 = *($12)
	*($22 + [312]) = $5
	*($22 + [320]) = $18
	*($22 + [328]) = [3]
	$5 = *(($1 + [104]))
	*(($22 + [331])) = *(($22 + [383]))
	*($22 + [329 align=1]) = *($22 + [381 align=1])
	*($22 + [332]) = $19
	*($22 + [336]) = $6
	*($22 + [340]) = $8
	*($22 + [344]) = $13
	*($22 + [345]) = $17
	*(($22 + [350])) = *(($22 + [378]))
	*($22 + [346 align=2]) = *($22 + [374 align=2])
	*($22 + [352]) = $20
	*(($22 + [360])) = $2
	$2 = *($22 + [472])
	CALL memcpy(($22 + [8]), ($22 + [312]), [56])
	CALL $397($5, ($22 + [8]), $2)
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [3712])
	$2 = (int_64)5459781
	
.LOOP $label$33:
	$17 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$34 }
	
.LOOP $label$35:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$35 }
	
.LABEL $label$34
	$17 = [1]
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$33 }
	
.LABEL $label$32
	CALL eosio_assert($17, [3776])
	if ( $3 ){ goto $label$36 }
	CALL eosio_assert([1], [3984])
	CALL eosio_assert(((int_64)$16 > (int_64)-4611686018427387904), [4032])
	CALL eosio_assert(((int_64)$16 < (int_64)4611686018427387904), [4064])
	*(($0 + [8])) = $10
	$20 = ((int_64)(CASTING uint_64)(uint_32 $4) * (int_64)$16)
	$2 = ((int_64)$20 / (int_64)100)
	*($0) = $2
	if ( ((uint_64)((int_64)$20 + (int_64)99) > (uint_64)(int_64)198) ){ goto $label$37 }
	$2 = (int_64)1
	*($0) = (int_64)1
	
.LABEL $label$37
	CALL eosio_assert([1], [4496])
	$16 = (int_64)
	CALL eosio_assert(((int_64)$16($16 - $2)) > (int_64)-4611686018427387904), [4544])
	CALL eosio_assert(((int_64)$16 < (int_64)4611686018427387904), [4576])
	
.LABEL $label$36
	*(($22 + [288])) = [0]
	*($22 + [280]) = (int_64)0
	$17 = CALL strlen([5504])
	if ( ((uint_32)$17 >= (uint_32)[-16]) ){ goto $label$38 }
	if ( ((uint_32)$17 >= (uint_32)[11]) ){ goto $label$41 }
	*($22 + [280]) = ($17 << [1])
	$15 = (($22 + [280]) | [1])
	if ( $17 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$13 = (($17 + [16]) & [-16])
	$15 = CALL $955($13)
	*($22 + [280]) = ($13 | [1])
	*($22 + [288]) = $15
	*($22 + [284]) = $17
	
.LABEL $label$40
	CALL memcpy($15, [5504], $17)
	
.LABEL $label$39
	*(($15 + $17)) = [0]
	CALL _ZNSt3__19to_stringEi(($22 + [264]), *(($12 + [32])))
	$17 = *($22 + [264])
	$15 = ($17 & [1])
	$17 = CALL $961(($22 + [280]), ( *($22 + [272]) ? (($22 + [264]) | [1]) : $15 ), ( *($22 + [268]) ? uint_32($17 >> [1]) : $15 ))
	$15 = ($17 + [8])
	*((($22 + [480]) + [8])) = *($15)
	*($22 + [480]) = *($17)
	*($17) = [0]
	*(($17 + [4])) = [0]
	*($15) = [0]
	$17 = CALL $962(($22 + [480]), [4640])
	$15 = ($17 + [8])
	*((($22 + [176]) + [8])) = *($15)
	*($22 + [176]) = *($17)
	*($17) = [0]
	*(($17 + [4])) = [0]
	*($15) = [0]
	CALL _ZNSt3__19to_stringEy(($22 + [248]), *($12))
	$17 = *($22 + [248])
	$15 = ($17 & [1])
	$17 = CALL $961(($22 + [176]), ( *($22 + [256]) ? (($22 + [248]) | [1]) : $15 ), ( *($22 + [252]) ? uint_32($17 >> [1]) : $15 ))
	$15 = ($17 + [8])
	*((($22 + [192]) + [8])) = *($15)
	*($22 + [192]) = *($17)
	*($17) = [0]
	*(($17 + [4])) = [0]
	*($15) = [0]
	$17 = CALL $962(($22 + [192]), [4640])
	$15 = ($17 + [8])
	*((($22 + [128]) + [8])) = *($15)
	*($22 + [128]) = *($17)
	*($17) = [0]
	*(($17 + [4])) = [0]
	*($15) = [0]
	CALL $427(($22 + [232]), ($22 + [472]))
	$17 = *($22 + [232])
	$15 = ($17 & [1])
	$17 = CALL $961(($22 + [128]), ( *($22 + [240]) ? (($22 + [232]) | [1]) : $15 ), ( *($22 + [236]) ? uint_32($17 >> [1]) : $15 ))
	$15 = ($17 + [8])
	*((($22 + [296]) + [8])) = *($15)
	*($22 + [296]) = *($17)
	*($17) = [0]
	*(($17 + [4])) = [0]
	*($15) = [0]
	if ( ((*($22 + [232]) & [1]) == 0) ){ goto $label$42 }
	CALL $956(*((($22 + [232]) + [8])))
	
.LABEL $label$42
	if ( ((*($22 + [128]) & [1]) == 0) ){ goto $label$43 }
	CALL $956(*($22 + [136]))
	
.LABEL $label$43
	if ( ((*($22 + [192]) & [1]) == 0) ){ goto $label$44 }
	CALL $956(*($22 + [200]))
	
.LABEL $label$44
	if ( ((*($22 + [248]) & [1]) == 0) ){ goto $label$45 }
	CALL $956(*(($22 + [256])))
	
.LABEL $label$45
	if ( ((*($22 + [176]) & [1]) == 0) ){ goto $label$46 }
	CALL $956(*($22 + [184]))
	
.LABEL $label$46
	if ( ((*($22 + [480]) & [1]) == 0) ){ goto $label$47 }
	CALL $956(*($22 + [488]))
	
.LABEL $label$47
	if ( ((*($22 + [264]) & [1]) == 0) ){ goto $label$48 }
	CALL $956(*(($22 + [272])))
	
.LABEL $label$48
	if ( ((*($22 + [280]) & [1]) == 0) ){ goto $label$49 }
	CALL $956(*($22 + [288]))
	
.LABEL $label$49
	$11 = *($1)
	$2 = (int_64)0
	$18 = (int_64)59
	$17 = [2400]
	$19 = (int_64)0
	
.LOOP $label$50:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$55 }
	$15 = *($17)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$15 = ($15 + [165])
	goto $label$53 
	
.LABEL $label$55
	$20 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$54
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$52
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$51
	$17 = ($17 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$50 }
	*($22 + [184]) = $19
	*($22 + [176]) = $11
	$2 = (int_64)0
	$18 = (int_64)59
	$17 = [1312]
	$19 = (int_64)0
	
.LOOP $label$56:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$61 }
	$15 = *($17)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$60 }
	$15 = ($15 + [165])
	goto $label$59 
	
.LABEL $label$61
	$20 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$60
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$59
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$58
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$57
	$17 = ($17 + [1])
	$18 = ((int_64)$18 + (int_64)-5)
	$19 = ((int_64)$20 | (int_64)$19)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$56 }
	$2 = (int_64)0
	$18 = (int_64)59
	$17 = [1296]
	$21 = (int_64)0
	
.LOOP $label$62:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$67 }
	$15 = *($17)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$66 }
	$15 = ($15 + [165])
	goto $label$65 
	
.LABEL $label$67
	$20 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$66
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$65
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$64
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$63
	$17 = ($17 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$21 = ((int_64)$20 | (int_64)$21)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$62 }
	$2 = *(($12 + [8]))
	*(($22 + [152])) = $10
	*($22 + [128]) = $11
	*($22 + [144]) = $16
	*($22 + [136]) = $2
	CALL $972(($22 + [160]), ($22 + [296]))
	$17 = CALL $380(($22 + [192]), ($22 + [176]), $19, $21, ($22 + [128]))
	CALL $381(($22 + [480]), $17)
	$15 = *($22 + [480])
	CALL send_inline($15, (*($22 + [484]) - $15))
	$15 = *($22 + [480])
	if ( ($15 == 0) ){ goto $label$68 }
	*($22 + [484]) = $15
	CALL $956($15)
	
.LABEL $label$68
	$15 = *($17 + [28])
	if ( ($15 == 0) ){ goto $label$69 }
	*(($17 + [32])) = $15
	CALL $956($15)
	
.LABEL $label$69
	$15 = *($17 + [16])
	if ( ($15 == 0) ){ goto $label$70 }
	*(($17 + [20])) = $15
	CALL $956($15)
	
.LABEL $label$70
	if ( ((*($22 + [160]) & [1]) == 0) ){ goto $label$71 }
	CALL $956(*(($22 + [168])))
	
.LABEL $label$71
	if ( ((*($22 + [296]) & [1]) == 0) ){ goto $label$72 }
	CALL $956(*($22 + [304]))
	
.LABEL $label$72
	*([0] + [4]) = ($22 + [496])
	return (unreachable)
	
.LABEL $label$38
	CALL $957(($22 + [280]))
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $1005 ()
{
	(unreachable)
}

int_32 .FUNC $964 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $688 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $715 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	$12 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$10 = [12]
	$5 = ($1 + [12])
	$4 = *($1)
	$8 = *($1 + [12])
	$7 = ($1 + [16])
	$9 = *($7)
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$1 }
	$6 = ((int_32)($9 - $8) / (int_32)[12])
	$11 = *(*($3))
	$9 = [0]
	
.LOOP $label$3:
	if ( ((int_64)*($8) == (int_64)$11) ){ goto $label$2 }
	$8 = ($8 + [12])
	$9 = ($9 + [1])
	if ( ($9 <= $6) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*(($8 + [8])) = *(*($3 + [4]))
	*(*($3 + [8])) = [1]
	
.LABEL $label$1
	CALL eosio_assert([1], [1856])
	$9 = *($5)
	$8 = *($7)
	$6 = ($8 - $9)
	$11 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[12]))
	
.LOOP $label$4:
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$5 }
	$10 = ((((int_32)((uint_32)($6 + [-12]) / (uint_32)[12]) * (int_32)[10]) + $10) + [10])
	
.LABEL $label$5
	if ( ($10 <= [513]) ){ goto $label$7 }
	$8 = CALL malloc($10)
	goto $label$6 
	
.LABEL $label$7
	$8 = ($13 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$6
	*($12) = $8
	$9 = ($8 + $10)
	*($12 + [8]) = $9
	CALL eosio_assert(((int_32)$10 > (int_32)[7]), [1920])
	CALL memcpy($8, $1, [8])
	$6 = ($8 + [8])
	CALL eosio_assert(((int_32)($9 - $6) > (int_32)[3]), [1920])
	CALL memcpy($6, ($1 + [8]), [4])
	*($12 + [4]) = ($8 + [12])
	CALL $217($12, $5)
	CALL db_update_i64(*($1 + [28]), $2, $8, $10)
	if ( ($10 <= [513]) ){ goto $label$8 }
	CALL free($8)
	
.LABEL $label$8
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($12 + [16])
}

int_64 .FUNC $716 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	*($5 + [76]) = $1
	*(($5 + [64])) = [0]
	*($5 + [48]) = (int_64)-1
	*($5 + [56]) = (int_64)0
	$3 = *($0)
	*($5 + [32]) = $3
	*($5 + [40]) = $3
	$1 = CALL db_find_i64($3, $3, (int_64)-7949128878716878848, (CASTING uint_64)(uint_32 $1))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	$1 = CALL $721(($5 + [32]), $1)
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)($5 + [32])), [1536])
	*($5 + [24]) = (int_64)1
	*($5 + [24]) = ((int_64)*($1 + [8]) + (int_64)1)
	$3 = *($0)
	*($5 + [16]) = ($5 + [24])
	CALL eosio_assert([1], [1696])
	CALL $722(($5 + [32]), $1, $3, ($5 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*($5 + [24]) = (int_64)1
	$3 = *($0)
	*($5 + [20]) = ($5 + [24])
	*($5 + [16]) = ($5 + [76])
	CALL $720(($5 + [8]), ($5 + [32]), $3, ($5 + [16]))
	
.LABEL $label$1
	$3 = *($5 + [24])
	$2 = *($5 + [56])
	if ( ($2 == 0) ){ goto $label$3 }
	$4 = ($5 + [60])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL $956($0)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$6 }
	$1 = *(($5 + [56]))
	goto $label$4 
	
.LABEL $label$5
	$1 = $2
	
.LABEL $label$4
	*($4) = $2
	CALL $956($1)
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [80])
	return $3
}

void .FUNC $717 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $955([48])
	CALL $718($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [40])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $452(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $956($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $710 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	$12 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$10 = [12]
	$5 = ($1 + [12])
	$4 = *($1)
	$9 = *($1 + [12])
	$7 = ($1 + [16])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$1 }
	$8 = ($9 + [8])
	$6 = ((int_32)($6 - $9) / (int_32)[12])
	$11 = *(*($3))
	$9 = [0]
	
.LOOP $label$3:
	if ( ((int_64)*($8) == (int_64)$11) ){ goto $label$2 }
	$8 = ($8 + [12])
	$9 = ($9 + [1])
	if ( ($9 <= $6) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($8) = [0]
	*(*($3 + [4])) = [1]
	
.LABEL $label$1
	CALL eosio_assert([1], [1856])
	$9 = *($5)
	$8 = *($7)
	$6 = ($8 - $9)
	$11 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[12]))
	
.LOOP $label$4:
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$5 }
	$10 = ((((int_32)((uint_32)($6 + [-12]) / (uint_32)[12]) * (int_32)[10]) + $10) + [10])
	
.LABEL $label$5
	if ( ($10 <= [513]) ){ goto $label$7 }
	$8 = CALL malloc($10)
	goto $label$6 
	
.LABEL $label$7
	$8 = ($13 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$6
	*($12) = $8
	$9 = ($8 + $10)
	*($12 + [8]) = $9
	CALL eosio_assert(((int_32)$10 > (int_32)[7]), [1920])
	CALL memcpy($8, $1, [8])
	$6 = ($8 + [8])
	CALL eosio_assert(((int_32)($9 - $6) > (int_32)[3]), [1920])
	CALL memcpy($6, ($1 + [8]), [4])
	*($12 + [4]) = ($8 + [12])
	CALL $217($12, $5)
	CALL db_update_i64(*($1 + [28]), $2, $8, $10)
	if ( ($10 <= [513]) ){ goto $label$8 }
	CALL free($8)
	
.LABEL $label$8
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $711 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [144])
	*([0] + [4]) = $15
	CALL require_auth($1)
	CALL _ZN14system_control15check_blacklistEN5eosio4nameE(*($0 + [88]), $1)
	CALL $187(($15 + [104]), *($0 + [88]), $1, [0])
	$13 = *($15 + [108])
	$8 = *($13 + [36])
	$13 = *($13 + [32])
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 (int_64))(((uint_64)CALL $fimport$29() / (uint_64)(int_64)1000000) - *([0] + [12]))) >= (uint_32)($13 + (CASTING int_32)(float_64 ((float_64)((float_64)(CASTING float_64)(uint_32 $8) / (float_64)(float_64)100) * (float_64)(float_64)10)))), [7616])
	*(($15 + [136])) = [0]
	*($15 + [120]) = (int_64)-1
	*($15 + [128]) = (int_64)0
	$9 = *($0)
	*($15 + [104]) = $9
	*($15 + [112]) = $9
	$11 = [0]
	$13 = CALL db_find_i64($9, $9, (int_64)-7948101582086733824, $1)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $214(($15 + [104]), $13)
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)($15 + [104])), [1536])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [3456])
	$4 = *($11 + [12])
	$13 = (*(($11 + [16])) - $4)
	if ( ((int_32)$13 <= (int_32)[11]) ){ goto $label$3 }
	$8 = (CASTING uint_32)(uint_64 $2)
	$14 = (((uint_32)$13 / (uint_32)[12]) + [-1])
	$13 = [0]
	
.LOOP $label$4:
	$5 = ($14 - $13)
	$7 = (((int_32)$5 / (int_32)[2]) + $13)
	$12 = ($4 + ((int_32)$7 * (int_32)[12]))
	$6 = *($12)
	if ( ($6 <= $8) ){ goto $label$5 }
	if ( ((uint_32)$6 <= (uint_32)$8) ){ goto $label$2 }
	$14 = ($7 + [-1])
	if ( ((int_32)$5 > (int_32)[1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$13 = ($7 + [1])
	if ( ((int_32)$14 > (int_32)$7) ){ goto $label$4 }
	
.LABEL $label$3
	CALL eosio_assert([0], [3472])
	$12 = *(($11 + [12]))
	
.LABEL $label$2
	CALL eosio_assert((*($12 + [8]) == 0), [6288])
	$8 = [0]
	*(($15 + [96])) = [0]
	*($15 + [88]) = (int_64)0
	*($15 + [80]) = (int_64)-1
	$9 = *($0)
	*($15 + [64]) = $9
	*($15 + [72]) = $9
	$13 = [0]
	$14 = CALL db_find_i64($9, $9, (int_64)-4860064192867598336, *($12 + [4]))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$6 }
	$13 = CALL $327(($15 + [64]), $14)
	CALL eosio_assert(((int_32)*($13 + [20]) == (int_32)($15 + [64])), [1536])
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [7648])
	$10 = *(($3 + [8]))
	*((($15 + [48]) + [8])) = $10
	$13 = *($13 + [9])
	$9 = *($3)
	*((($15 + [16]) + [8])) = $10
	*($15 + [48]) = $9
	*($15 + [16]) = $9
	CALL $577($0, ($15 + [16]), $13)
	$14 = *(($11 + [12]))
	$7 = *(($11 + [16]))
	if ( ((int_32)$7 == (int_32)$14) ){ goto $label$7 }
	$13 = ($14 + [8])
	$7 = ((int_32)($7 - $14) / (int_32)[12])
	$8 = [0]
	$14 = [0]
	
.LOOP $label$8:
	$8 = (((int_32)*($13) != (int_32)[0]) + $8)
	$13 = ($13 + [12])
	$14 = ($14 + [1])
	if ( ($14 <= $7) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = *(($5 + [40]))
	$5 = *($0 + [108])
	$7 = *(($5 + [44]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$9 }
	$13 = ($7 + [-24])
	$6 = ([0] - $4)
	
.LOOP $label$10:
	if ( ((int_64)*(*($13)) == (int_64)$1) ){ goto $label$9 }
	$7 = $13
	$14 = ($13 + [-24])
	$13 = $14
	if ( ((int_32)($14 + $6) != (int_32)[-24]) ){ goto $label$10 }
	
.LABEL $label$9
	$14 = ($5 + [16])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$12 }
	$13 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [20]) == (int_32)$14), [1536])
	goto $label$11 
	
.LABEL $label$12
	$13 = [0]
	$7 = CALL db_find_i64(*(($5 + [16])), *(($5 + [24])), (int_64)-8872998483271876608, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	$13 = CALL $144($14, $7)
	CALL eosio_assert(((int_32)*($13 + [20]) == (int_32)$14), [1536])
	
.LABEL $label$11
	$13 = ( ($13 + [8]) ? ($5 + [76]) : $13 )
	CALL eosio_assert(((int_32)*($13 + [4]) != (int_32)*($13)), [4736])
	CALL eosio_assert(((int_32)$8 < (int_32)CALL $712($0, $1)), [7680])
	$13 = *(($12 + [4]))
	*(($8 = (($15 + [32]) + [8]))) = *(($3 + [8]))
	*($15 + [32]) = *($3)
	*(($15 + [8])) = *($8)
	*($15) = *($15 + [32])
	*($15 + [4]) = *($15 + [36])
	$9 = CALL $713($0, $13, $15, $1)
	CALL $714(*($0 + [100]), $1, $2, $9)
	$14 = *($15 + [88])
	if ( ($14 == 0) ){ goto $label$13 }
	$7 = ($15 + [92])
	$13 = *($7)
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$15 }
	
.LOOP $label$16:
	$13 = ($13 + [-24])
	$8 = *($13)
	*($13) = [0]
	if ( ($8 == 0) ){ goto $label$17 }
	CALL $956($8)
	
.LABEL $label$17
	if ( ((int_32)$14 != (int_32)$13) ){ goto $label$16 }
	$13 = *(($15 + [88]))
	goto $label$14 
	
.LABEL $label$15
	$13 = $14
	
.LABEL $label$14
	*($7) = $14
	CALL $956($13)
	
.LABEL $label$13
	$7 = *($15 + [128])
	if ( ($7 == 0) ){ goto $label$18 }
	$6 = ($15 + [132])
	$13 = *($6)
	if ( ((int_32)$13 == (int_32)$7) ){ goto $label$20 }
	
.LOOP $label$21:
	$13 = ($13 + [-24])
	$8 = *($13)
	*($13) = [0]
	if ( ($8 == 0) ){ goto $label$22 }
	$14 = *($8 + [12])
	if ( ($14 == 0) ){ goto $label$23 }
	*(($8 + [16])) = $14
	CALL $956($14)
	
.LABEL $label$23
	CALL $956($8)
	
.LABEL $label$22
	if ( ((int_32)$7 != (int_32)$13) ){ goto $label$21 }
	$13 = *(($15 + [128]))
	goto $label$19 
	
.LABEL $label$20
	$13 = $7
	
.LABEL $label$19
	*($6) = $7
	CALL $956($13)
	
.LABEL $label$18
	*([0] + [4]) = ($15 + [144])
}

int_32 .FUNC $712 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *(($2 + [40]))
	$2 = *($0 + [108])
	$7 = *(($2 + [44]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($2 + [16])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$5), [1536])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($2 + [16])), *(($2 + [24])), (int_64)-8872998483271876608, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $144($5, $7)
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$5), [1536])
	
.LABEL $label$3
	$6 = ( ($6 + [8]) ? ($2 + [76]) : $6 )
	$3 = (*($6 + [4]) - *($6))
	$0 = *(($2 + [32]))
	$2 = *($0 + [92])
	$7 = *(($2 + [36]))
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$5 }
	$6 = ($7 + [-24])
	$4 = ([0] - $0)
	
.LOOP $label$6:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$5 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = int_32($3 >> [4])
	$6 = ($2 + [8])
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$8 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$6), [1536])
	goto $label$7 
	
.LABEL $label$8
	$7 = CALL $186($6, CALL $fimport$16(*(($2 + [8])), *(($2 + [16])), (int_64)-6030912142679474176, $1))
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$6), [1536])
	
.LABEL $label$7
	$6 = *($7 + [20])
	return ((((uint_32)$6 > (uint_32)[699]) + $5) + ((uint_32)$6 > (uint_32)[1499]))
}

int_64 .FUNC $713 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*($5 + [88]) = $3
	*($5 + [86]) = $1
	$3 = CALL $716($0, [1])
	*($5 + [72]) = ( (int_64)1 ? $3 : (int_64)($3 == 0) )
	$4 = [0]
	*(($5 + [64])) = [0]
	*($5 + [48]) = (int_64)-1
	*($5 + [56]) = (int_64)0
	$3 = *($0)
	*($5 + [32]) = $3
	*($5 + [40]) = $3
	$1 = CALL db_find_i64($3, $3, (int_64)-4860064192867598336, (CASTING uint_64)(uint_32 $1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $327(($5 + [32]), $1) + [20]) == (int_32)($5 + [32])), [1536])
	$4 = [1]
	
.LABEL $label$1
	CALL eosio_assert($4, [4848])
	$3 = *($0)
	*($5 + [20]) = $2
	*($5 + [16]) = ($5 + [72])
	*($5 + [24]) = ($5 + [86])
	*($5 + [28]) = ($5 + [88])
	CALL $717(($5 + [8]), ($0 + [48]), $3, ($5 + [16]))
	$3 = *($5 + [72])
	$4 = *($5 + [56])
	if ( ($4 == 0) ){ goto $label$2 }
	$2 = ($5 + [60])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $956($1)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($5 + [56]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $4
	
.LABEL $label$3
	*($2) = $4
	CALL $956($0)
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [96])
	return $3
}

int_32 .FUNC $718 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($4 = ($0 + [24]))) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [3776])
	*($0 + [36]) = $1
	*($0 + [32]) = [0]
	$4 = *($2 + [4])
	*($0) = *(*($4))
	$5 = *($2)
	$1 = *($4 + [4])
	*($0 + [16]) = *($1)
	*(($0 + [24])) = *(($1 + [8]))
	*($0 + [32]) = *(*($4 + [8]))
	*(($0 + [8])) = *(*($4 + [12]))
	*($6 + [56]) = ($6 + [34])
	*($6 + [52]) = $6
	*($6 + [48]) = $6
	CALL $719(($6 + [48]), $0)
	$3 = *($0)
	*($0 + [40]) = CALL db_store_i64(*($5 + [8]), (int_64)-7948206717098000384, *(*($2 + [8])), $3, $6, [34])
	if ( (uint_64)($3 <= *($5 + [16])) ){ goto $label$6 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [64])
	return $0
}

int_32 .FUNC $719 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	return $0
}

void .FUNC $484 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [1632])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $485(*($1), *($0 + [20]))
}

int_32 .FUNC $485 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($2)), [1648])
	$4 = *($3)
	$7 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$4 = *($1 + [4])
	$3 = int_32(($4 - $7) >> [5])
	$6 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$4 }
	CALL $486($1, ($6 - $3))
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$6 >= (uint_32)$3) ){ goto $label$5 }
	$4 = ($7 + ($6 << [5]))
	*(($1 + [4])) = $4
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($8 + [28])
	
.LOOP $label$6:
	*($8 + [8]) = $0
	*($8 + [16]) = $7
	*((($8 + [16]) + [8])) = ($7 + [16])
	*($6) = ($7 + [24])
	*($8 + [20]) = ($7 + [8])
	CALL $487(($8 + [16]), ($8 + [8]))
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [32])
	return $0
}

void .FUNC $486 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $6) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$3 = int_32(($6 - $5) >> [5])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$4 }
	$6 = [134217727]
	$2 = ($2 - $5)
	if ( ((uint_32)int_32($2 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$6 = int_32($2 >> [4])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $955(($6 << [5]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($6 + [24]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*($6) = (int_64)0
	*($6 + [24]) = [0]
	$6 = (*($0) + [32])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $971($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($6 << [5]))
	$5 = ($2 + ($3 << [5]))
	$6 = $5
	
.LOOP $label$9:
	*($6 + [24]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*($6 + [24]) = [0]
	$6 = ($6 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $956($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $487 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [1632])
	CALL memcpy(($4 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($2) = ((int_32)*($4 + [15]) != (int_32)[0])
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $480 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$1 }
	$5 = ($0 + [8])
	
.LOOP $label$2:
	$8 = ($8 + [-24])
	*($5) = $8
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	$8 = *(($2 + [168]))
	if ( ($8 == 0) ){ goto $label$4 }
	*(($2 + [172])) = $8
	CALL $956($8)
	
.LABEL $label$4
	$6 = ($2 + [104])
	$3 = *($6)
	if ( ($3 == 0) ){ goto $label$5 }
	$7 = ($2 + [108])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$7 }
	$4 = ([0] - $3)
	$8 = ($8 + [-24])
	
.LOOP $label$8:
	if ( ((*(($8 + [12])) & [1]) == 0) ){ goto $label$9 }
	CALL $956(*(($8 + [20])))
	
.LABEL $label$9
	if ( ((*($8) & [1]) == 0) ){ goto $label$10 }
	CALL $956(*(($8 + [8])))
	
.LABEL $label$10
	$8 = ($8 + [-24])
	if ( ((int_32)($8 + $4) != (int_32)[-24]) ){ goto $label$8 }
	$8 = *($6)
	goto $label$6 
	
.LABEL $label$7
	$8 = $3
	
.LABEL $label$6
	*($7) = $3
	CALL $956($8)
	
.LABEL $label$5
	CALL $956($2)
	
.LABEL $label$3
	$8 = *($5)
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = *($0)
	if ( ($8 == 0) ){ goto $label$11 }
	CALL $956($8)
	
.LABEL $label$11
	return $0
}

int_32 .FUNC $481 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0) = (int_64)0
	*($0 + [8]) = (int_64)0
	$2 = [0]
	*($0 + [16]) = [0]
	*($0 + [20]) = [0]
	*($0 + [24]) = [0]
	*(($0 + [26])) = [1]
	*(($0 + [32])) = (int_64)0
	*(($3 = ($0 + [40]))) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [56]))) = (int_64)1397703940
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [3776])
	*($0 + [66]) = [0]
	*($0 + [64]) = [0]
	*($0 + [68]) = [0]
	*($0 + [70]) = [0]
	*($0 + [71]) = [0]
	*($0 + [72]) = [0]
	*($0 + [73]) = [0]
	*($0 + [74]) = [0]
	*($0 + [75]) = [0]
	*($0 + [76]) = [0]
	*($0 + [80]) = [0]
	*($0 + [88]) = (int_64)0
	*($0 + [96]) = [0]
	*(($0 + [100])) = [0]
	*(($0 + [104])) = [0]
	return $0
}

int_32 .FUNC $482 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [96])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($3 + [88]) = $0
	*($3 + [4]) = ($1 + [16])
	*($3) = ($1 + [8])
	*($3 + [8]) = ($1 + [20])
	*($3 + [12]) = ($1 + [24])
	*($3 + [16]) = ($1 + [28])
	*($3 + [20]) = ($1 + [29])
	*($3 + [24]) = ($1 + [32])
	*($3 + [28]) = ($1 + [56])
	*($3 + [32]) = ($1 + [72])
	*($3 + [36]) = ($1 + [73])
	*($3 + [40]) = ($1 + [74])
	*($3 + [44]) = ($1 + [76])
	*($3 + [48]) = ($1 + [78])
	*($3 + [52]) = ($1 + [79])
	*($3 + [56]) = ($1 + [80])
	*($3 + [60]) = ($1 + [81])
	*($3 + [64]) = ($1 + [82])
	*($3 + [68]) = ($1 + [83])
	*($3 + [72]) = ($1 + [84])
	*($3 + [76]) = ($1 + [88])
	*($3 + [80]) = ($1 + [96])
	*($3 + [84]) = ($1 + [104])
	CALL $483($3, ($3 + [88]))
	*($3 + [88]) = $0
	*($3 + [4]) = ($1 + [128])
	*($3) = ($1 + [120])
	*($3 + [8]) = ($1 + [136])
	*($3 + [12]) = ($1 + [152])
	*($3 + [16]) = ($1 + [160])
	*($3 + [20]) = ($1 + [168])
	CALL $484($3, ($3 + [88]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [184]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [192]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [96])
	return $0
}

void .FUNC $483 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [24])
	*($5 + [8]) = *($1)
	*($5 + [20]) = ($2 + [2])
	*($5 + [16]) = $2
	*($5 + [24]) = ($2 + [8])
	CALL $488(($5 + [16]), ($5 + [8]))
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [1632])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy(($5 + [16]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($3) = ((int_32)*($5 + [16]) != (int_32)[0])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy(($5 + [16]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($3) = ((int_32)*($5 + [16]) != (int_32)[0])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $489(*($1), *($0 + [84]))
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $488 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [1632])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($0, *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [1632])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $489 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1648])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$5 = *($1 + [4])
	$7 = ((int_32)($5 - $3) / (int_32)[24])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $490($1, ($4 - $7))
	$5 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[24])
	$2 = ($3 + $4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$4 }
	$7 = (([0] - $3) - $4)
	$4 = ($5 + [-24])
	
.LOOP $label$5:
	if ( ((*(($4 + [12])) & [1]) == 0) ){ goto $label$6 }
	CALL $956(*(($4 + [20])))
	
.LABEL $label$6
	if ( ((*($4) & [1]) == 0) ){ goto $label$7 }
	CALL $956(*(($4 + [8])))
	
.LABEL $label$7
	$4 = ($4 + [-24])
	if ( ((int_32)($4 + $7) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$5 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	CALL $491($0, $4)
	CALL $491($0, ($4 + [12]))
	$4 = ($4 + [24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	return $0
}

void .FUNC $69 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	*(($0 + [148])) = $4
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $704($9, $0, $2)
	$5 = *($9 + [96])
	if ( ($5 == 0) ){ goto $label$2 }
	$7 = ($9 + [100])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$4 }
	$6 = ([0] - $5)
	$8 = ($8 + [-24])
	
.LOOP $label$6:
	if ( ((*(($8 + [12])) & [1]) == 0) ){ goto $label$7 }
	CALL $956(*(($8 + [20])))
	
.LABEL $label$7
	if ( ((*($8) & [1]) == 0) ){ goto $label$8 }
	CALL $956(*(($8 + [8])))
	
.LABEL $label$8
	$8 = ($8 + [-24])
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$6 }
	$8 = *(($9 + [96]))
	goto $label$3 
	
.LABEL $label$5
	$8 = ($0 + [560])
	goto $label$1 
	
.LABEL $label$4
	$8 = $5
	
.LABEL $label$3
	*($7) = $5
	CALL $956($8)
	
.LABEL $label$2
	$8 = ($0 + [664])
	
.LABEL $label$1
	$4 = CALL int_32 $8((int_32 $1), (int_64 $2), (int_32 $3), (int_32 $4), (int_32 [0]), (int_32 *(*($8) + [12])))
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$9 }
	if ( ($2 == 0) ){ goto $label$14 }
	CALL $704($9, $0, $2)
	$2 = *($9 + [96])
	if ( ($2 == 0) ){ goto $label$11 }
	$3 = ($9 + [100])
	$8 = *($3)
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$13 }
	$6 = ([0] - $2)
	$8 = ($8 + [-24])
	
.LOOP $label$15:
	if ( ((*(($8 + [12])) & [1]) == 0) ){ goto $label$16 }
	CALL $956(*(($8 + [20])))
	
.LABEL $label$16
	if ( ((*($8) & [1]) == 0) ){ goto $label$17 }
	CALL $956(*(($8 + [8])))
	
.LABEL $label$17
	$8 = ($8 + [-24])
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$15 }
	$8 = *(($9 + [96]))
	goto $label$12 
	
.LABEL $label$14
	$8 = ($0 + [328])
	goto $label$10 
	
.LABEL $label$13
	$8 = $2
	
.LABEL $label$12
	*($3) = $2
	CALL $956($8)
	
.LABEL $label$11
	$8 = ($0 + [472])
	
.LABEL $label$10
	CALL void $8((int_32 $1), (int_64 ($4 & [255])), (int_32 *(*($8) + [16])))
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [112])
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$6 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($7 + [8]) = (int_64)0
	*($7 + [16]) = (int_64)0
	*($7 + [24]) = (int_64)0
	*($7 + [36]) = $1
	*($7 + [32]) = $1
	*($7 + [40]) = ($1 + $3)
	*($7 + [48]) = ($7 + [32])
	*($7 + [56]) = ($7 + [8])
	CALL $739(($7 + [56]), ($7 + [48]))
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($7 + [28]))
	$8 = *(($7 + [24]))
	$0 = *(($7 + [20]))
	$5 = *(($7 + [16]))
	$4 = *($7 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	CALL void $1((int_32 $4), (int_64 $5), (int_32 $0), (int_32 $8), (int_32 $3), (int_32 $6))
	*([0] + [4]) = ($7 + [64])
	return [1]
}

void .FUNC $786 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [16])
	$14 = $15
	*([0] + [4]) = $15
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	$12 = *($9 + [52])
	$6 = *(*($3))
	$10 = *($1 + [20])
	$9 = ($10 + ($6 << [6]))
	$5 = ($9 + [56])
	$8 = *($5)
	if ( ((int_32)$8 != (int_32)$12) ){ goto $label$5 }
	$11 = *(($3 + [4]))
	goto $label$4 
	
.LABEL $label$5
	$7 = int_32(($8 - $12) >> [4])
	$11 = *(($3 + [4]))
	$13 = *($11)
	$3 = [0]
	
.LOOP $label$6:
	if ( ((int_64)*($12) == (int_64)$13) ){ goto $label$3 }
	$12 = ($12 + [16])
	$3 = ($3 + [1])
	if ( ($3 <= $7) ){ goto $label$6 }
	
.LABEL $label$4
	*($14) = (int_64)0
	*($14 + [8]) = [0]
	*($14) = *($11)
	*($14 + [8]) = [1]
	if ( ((int_32)$8 == (int_32)*((($10 + ($6 << [6])) + [60]))) ){ goto $label$2 }
	*($8) = *($14)
	*(($8 + [8])) = *(($14 + [8]))
	*($5) = (*($5) + [16])
	goto $label$1 
	
.LABEL $label$3
	$12 = ($12 + [8])
	CALL eosio_assert((*($12) <= *(($10 + ($6 << [6])) + [4])), [8752])
	*($12) = (*($12) + [1])
	goto $label$1 
	
.LABEL $label$2
	CALL $787(($9 + [52]), $14)
	
.LABEL $label$1
	*(($12 = ($10 + ($6 << [6]))) + [48]) = (*($12 + [48]) + [1])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$3 = *($1 + [20])
	$6 = *(($1 + [24]))
	$13 = (CASTING uint_64)(uint_32 int_32(($6 - $3) >> [6]))
	$12 = [18]
	
.LOOP $label$7:
	$12 = ($12 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$12 = ($12 + [43])
	$8 = *($3 + [52])
	$7 = *(($3 + [56]))
	$10 = ($7 - $8)
	$13 = (CASTING uint_64)(uint_32 int_32($10 >> [4]))
	
.LOOP $label$10:
	$12 = ($12 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$10 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$11 }
	$12 = ((((int_32)uint_32(($10 + [-16]) >> [4]) * (int_32)[10]) + $12) + [10])
	
.LABEL $label$11
	$3 = ($3 + [64])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($12 <= [513]) ){ goto $label$13 }
	$3 = CALL malloc($12)
	goto $label$12 
	
.LABEL $label$13
	$3 = ($15 - (($12 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$12
	*($14 + [4]) = $3
	*($14) = $3
	*($14 + [8]) = ($3 + $12)
	CALL $770($14, $1)
	CALL db_update_i64(*($1 + [36]), $2, $3, $12)
	if ( ($12 <= [513]) ){ goto $label$14 }
	CALL free($3)
	
.LABEL $label$14
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$15 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	*([0] + [4]) = ($14 + [16])
}

void .FUNC $65 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	*([0] + [4]) = $10
	*(($0 + [148])) = $5
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $704($10, $0, $2)
	$6 = *($10 + [96])
	if ( ($6 == 0) ){ goto $label$2 }
	$8 = ($10 + [100])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$4 }
	$7 = ([0] - $6)
	$9 = ($9 + [-24])
	
.LOOP $label$6:
	if ( ((*(($9 + [12])) & [1]) == 0) ){ goto $label$7 }
	CALL $956(*(($9 + [20])))
	
.LABEL $label$7
	if ( ((*($9) & [1]) == 0) ){ goto $label$8 }
	CALL $956(*(($9 + [8])))
	
.LABEL $label$8
	$9 = ($9 + [-24])
	if ( ((int_32)($9 + $7) != (int_32)[-24]) ){ goto $label$6 }
	$9 = *(($10 + [96]))
	goto $label$3 
	
.LABEL $label$5
	$9 = ($0 + [560])
	goto $label$1 
	
.LABEL $label$4
	$9 = $6
	
.LABEL $label$3
	*($8) = $6
	CALL $956($9)
	
.LABEL $label$2
	$9 = ($0 + [664])
	
.LABEL $label$1
	CALL void $9((int_32 $1), (int_64 $2), (int_32 $3), (int_32 $4), (int_32 $5), (int_32 [0]), (int_32 *(*($9))))
	*([0] + [4]) = ($10 + [112])
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [96])
	*([0] + [4]) = $3
	*(($2 = $3) + [60]) = $0
	*($2 + [48]) = *($1)
	*($2 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [28])) = [0]
	*(($2 + [32])) = [0]
	*($2 + [16]) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [20]) = [0]
	*($2 + [24]) = [0]
	*($2 + [36]) = [0]
	*($2 + [40]) = [0]
	*($2 + [68]) = $1
	*($2 + [64]) = $1
	*($2 + [72]) = ($1 + $0)
	*($2 + [80]) = ($2 + [64])
	*($2 + [88]) = ($2 + [8])
	CALL $742(($2 + [88]), ($2 + [80]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [68]) = ($2 + [48])
	*($2 + [64]) = ($2 + [60])
	CALL $743(($2 + [64]), ($2 + [8]))
	$1 = *(($2 + [24]))
	if ( ($1 == 0) ){ goto $label$5 }
	*(($2 + [28])) = $1
	CALL $956($1)
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [96])
	return [1]
}

void .FUNC $67 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	CALL $446(($0 + [8]), $1, $4, $5)
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $704($9, $0, $2)
	$6 = *($9 + [96])
	if ( ($6 == 0) ){ goto $label$2 }
	$8 = ($9 + [100])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$4 }
	$7 = ([0] - $6)
	$4 = ($4 + [-24])
	
.LOOP $label$6:
	if ( ((*(($4 + [12])) & [1]) == 0) ){ goto $label$7 }
	CALL $956(*(($4 + [20])))
	
.LABEL $label$7
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	CALL $956(*(($4 + [8])))
	
.LABEL $label$8
	$4 = ($4 + [-24])
	if ( ((int_32)($4 + $7) != (int_32)[-24]) ){ goto $label$6 }
	$4 = *(($9 + [96]))
	goto $label$3 
	
.LABEL $label$5
	$4 = ($0 + [560])
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LABEL $label$3
	*($8) = $6
	CALL $956($4)
	
.LABEL $label$2
	$4 = ($0 + [664])
	
.LABEL $label$1
	$5 = CALL int_32 $4((int_32 $1), (int_64 $2), (int_32 $3), (int_32 $5), (int_32 [1]), (int_32 *(*($4) + [12])))
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$9 }
	if ( ($2 == 0) ){ goto $label$14 }
	CALL $704($9, $0, $2)
	$2 = *($9 + [96])
	if ( ($2 == 0) ){ goto $label$11 }
	$3 = ($9 + [100])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$13 }
	$7 = ([0] - $2)
	$4 = ($4 + [-24])
	
.LOOP $label$15:
	if ( ((*(($4 + [12])) & [1]) == 0) ){ goto $label$16 }
	CALL $956(*(($4 + [20])))
	
.LABEL $label$16
	if ( ((*($4) & [1]) == 0) ){ goto $label$17 }
	CALL $956(*(($4 + [8])))
	
.LABEL $label$17
	$4 = ($4 + [-24])
	if ( ((int_32)($4 + $7) != (int_32)[-24]) ){ goto $label$15 }
	$4 = *(($9 + [96]))
	goto $label$12 
	
.LABEL $label$14
	$4 = ($0 + [328])
	goto $label$10 
	
.LABEL $label$13
	$4 = $2
	
.LABEL $label$12
	*($3) = $2
	CALL $956($4)
	
.LABEL $label$11
	$4 = ($0 + [472])
	
.LABEL $label$10
	CALL void $4((int_32 $1), (int_64 ($5 & [255])), (int_32 *(*($4) + [16])))
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [112])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [20])) = [0]
	*(($2 + [24])) = [0]
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	*($2 + [12]) = [0]
	*($2 + [16]) = [0]
	*($2 + [28]) = [0]
	*($2 + [52]) = $1
	*($2 + [48]) = $1
	*($2 + [56]) = ($1 + $0)
	*($2 + [64]) = ($2 + [48])
	*($2 + [72]) = $2
	CALL $740(($2 + [72]), ($2 + [64]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $741(($2 + [48]), $2)
	$1 = *(($2 + [16]))
	if ( ($1 == 0) ){ goto $label$5 }
	*(($2 + [20])) = $1
	CALL $956($1)
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [80])
	return [1]
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$6 = *($1)
	$5 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	*($7 + [8]) = [0]
	*($7) = (int_64)0
	*($7 + [10]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1632])
	CALL memcpy($7, $5, [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [1632])
	$8 = ($7 + [8])
	CALL memcpy($8, ($5 + [8]), [1])
	CALL eosio_assert(((uint_32)($1 + [-9]) > (uint_32)[1]), [1632])
	$4 = ($7 + [10])
	CALL memcpy($4, ($5 + [9]), [2])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($5)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($4)
	$8 = *($8)
	$3 = *($7)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($1) + $6))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 ($8 & [255])), (int_32 ($5 & [65535])), (int_32 $6))
	*([0] + [4]) = ($7 + [16])
	return [1]
}

void .FUNC $60 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	CALL $746(($0 + [328]), $1, $2, $3)
}

void .FUNC $63 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	*([0] + [4]) = $10
	CALL $446(($0 + [8]), $1, $5, $6)
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $704($10, $0, $2)
	$7 = *($10 + [96])
	if ( ($7 == 0) ){ goto $label$2 }
	$9 = ($10 + [100])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$4 }
	$8 = ([0] - $7)
	$5 = ($5 + [-24])
	
.LOOP $label$6:
	if ( ((*(($5 + [12])) & [1]) == 0) ){ goto $label$7 }
	CALL $956(*(($5 + [20])))
	
.LABEL $label$7
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $956(*(($5 + [8])))
	
.LABEL $label$8
	$5 = ($5 + [-24])
	if ( ((int_32)($5 + $8) != (int_32)[-24]) ){ goto $label$6 }
	$5 = *(($10 + [96]))
	goto $label$3 
	
.LABEL $label$5
	$5 = ($0 + [560])
	goto $label$1 
	
.LABEL $label$4
	$5 = $7
	
.LABEL $label$3
	*($9) = $7
	CALL $956($5)
	
.LABEL $label$2
	$5 = ($0 + [664])
	
.LABEL $label$1
	CALL void $5((int_32 $1), (int_64 $2), (int_32 $3), (int_32 $4), (int_32 $6), (int_32 [1]), (int_32 *(*($5))))
	*([0] + [4]) = ($10 + [112])
}

void .FUNC $62 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL $744(($0 + [328]), $1, $2)
}

int_32 .FUNC $909 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [10]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [12]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [14]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [18]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	return $0
}

void .FUNC $908 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$9 = (*([0] + [4]) - [48])
	$11 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*(($3 = (*($1 + [8]) + ((int_32)*(*($3)) * (int_32)[12]))) + [8]) = (*($3 + [8]) + [1])
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	$7 = *($1 + [8])
	$6 = *(($1 + [12]))
	$5 = ($6 - $7)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[12]))
	$3 = [8]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	$3 = ((((int_32)((uint_32)($5 + [-12]) / (uint_32)[12]) * (int_32)[7]) + $3) + [7])
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($11 + [8]) = $8
	$5 = ($8 + $3)
	*($11 + [16]) = $5
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [1920])
	CALL memcpy($8, $1, [8])
	$9 = ($8 + [8])
	*($11 + [12]) = $9
	$10 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [12])) - *(($1 + [8]))) / (int_32)[12]))
	
.LOOP $label$5:
	$6 = (CASTING uint_32)(uint_64 $10)
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	$7 = ((int_64)$10) != (int_64)0
	*($11 + [32]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)($5 - $9) > (int_32)[0]), [1920])
	CALL memcpy($9, ($11 + [32]), [1])
	$9 = ($9 + [1])
	*($11 + [12]) = $9
	if ( $7 ){ goto $label$5 }
	$6 = *(($1 + [12]))
	$9 = *(($1 + [8]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	*($11 + [24]) = ($11 + [8])
	*($11 + [32]) = $9
	*((($11 + [32]) + [8])) = ($9 + [8])
	*((($11 + [32]) + [12])) = ($9 + [9])
	*($11 + [36]) = ($9 + [4])
	CALL $906(($11 + [32]), ($11 + [24]))
	$9 = ($9 + [12])
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$7 }
	
.LABEL $label$6
	CALL db_update_i64(*($1 + [24]), $2, $8, $3)
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($8)
	
.LABEL $label$8
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [48])
}

void .FUNC $337 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	CALL eosio_assert([0], [2912])
}

void .FUNC $901 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [208])
	*([0] + [4]) = $18
	$8 = *(($7 + [32]))
	$7 = *($0 + [20])
	$13 = *(($7 + [36]))
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$1 }
	$12 = ($13 + [-24])
	$9 = ([0] - $8)
	
.LOOP $label$2:
	if ( ((int_64)*(*($12)) == (int_64)$1) ){ goto $label$1 }
	$13 = $12
	$10 = ($12 + [-24])
	$12 = $10
	if ( ((int_32)($10 + $9) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$10 = ($7 + [8])
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$4 }
	$12 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [40]) == (int_32)$10), [1536])
	goto $label$3 
	
.LABEL $label$4
	$12 = [0]
	$13 = CALL db_find_i64(*(($7 + [8])), *(($7 + [16])), (int_64)-4223691270582697984, $1)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$3 }
	$12 = CALL $274($10, $13)
	CALL eosio_assert(((int_32)*($12 + [40]) == (int_32)$10), [1536])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [2368])
	CALL $187(($18 + [200]), *($0 + [16]), $1, [0])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL require_auth($1)
	*($18 + [192]) = *($18 + [200])
	$13 = *(($0 + [16]))
	*($18 + [24 align=4]) = *($18 + [192])
	$13 = CALL $188($13, ($18 + [24]))
	*($18 + [184]) = $10
	*($18 + [188]) = $12
	*($18 + [176]) = *($18 + [200])
	*($18 + [16 align=4]) = *($18 + [184])
	*(($18 + [12])) = *($18 + [180])
	*($18 + [8]) = *($18 + [176])
	if ( (CALL $911($0, ($18 + [16]), $3, $4, $13, ($18 + [8])) == 0) ){ goto $label$5 }
	$15 = CALL current_time()
	*(($18 + [140])) = [0]
	*(($18 + [144])) = [0]
	*($18 + [124]) = [0]
	*($18 + [128]) = [0]
	*($18 + [132]) = [0]
	*($18 + [136]) = [0]
	*($18 + [112]) = ((CASTING uint_32)(uint_64 ((uint_64)$15 / (uint_64)(int_64)1000000)) + [60])
	*($18 + [148]) = [0]
	*(($18 + [152])) = [0]
	*(($18 + [156])) = [0]
	*($18 + [160]) = [0]
	*(($18 + [164])) = [0]
	*(($18 + [168])) = [0]
	$13 = ($0 + [8])
	$9 = ($18 + [148])
	$11 = *($0 + [8])
	$15 = (int_64)0
	$14 = (int_64)59
	$12 = [2400]
	$16 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$12 }
	$10 = *($12)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$10 = ($10 + [165])
	goto $label$10 
	
.LABEL $label$12
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$8
	$12 = ($12 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$7 }
	*($18 + [104]) = $16
	*($18 + [96]) = $11
	$15 = (int_64)0
	$14 = (int_64)59
	$12 = [9968]
	$16 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$15 > (uint_64)(int_64)9) ){ goto $label$18 }
	$10 = *($12)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$10 = ($10 + [165])
	goto $label$16 
	
.LABEL $label$18
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$14
	$12 = ($12 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$13 }
	*($18 + [88]) = $16
	*($18 + [72]) = $2
	*($18 + [64]) = $1
	*($18 + [76]) = $3
	*($18 + [78]) = $4
	*($18 + [80]) = $5
	CALL $912($9, ($18 + [96]), $13, ($18 + [88]), ($18 + [64]))
	$15 = *(($0 + [8]))
	$17 = *(*(($0 + [16])) + [144])
	*(($18 + [132])) = [1]
	*($18 + [72]) = (int_64)0
	*($18 + [64]) = $17
	CALL $191(($18 + [96]), ($18 + [112]))
	$12 = *($18 + [96])
	CALL send_deferred(($18 + [64]), $15, $12, (*($18 + [100]) - $12), [0])
	$12 = *($18 + [96])
	if ( ($12 == 0) ){ goto $label$19 }
	*($18 + [100]) = $12
	CALL $956($12)
	
.LABEL $label$19
	CALL $192(($18 + [112]))
	goto $label$5 
	
.LABEL $label$6
	CALL require_auth(*($0 + [8]))
	*($18 + [56]) = $10
	*($18 + [60]) = $12
	*($18 + [48]) = *($18 + [200])
	*($18 + [40 align=4]) = *($18 + [56])
	*(($18 + [36])) = *($18 + [52])
	*($18 + [32]) = *($18 + [48])
	CALL $911($0, ($18 + [40]), $3, $4, [0], ($18 + [32]))
	
.LABEL $label$5
	*([0] + [4]) = ($18 + [208])
}

void .FUNC $900 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [192])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [184]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [136]) = (*($1 + [136]) + [1])
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [184]) = ($5 + [169])
	*($5 + [180]) = $5
	*($5 + [176]) = $5
	CALL $463(($5 + [176]), $1)
	CALL db_update_i64(*($1 + [188]), $2, $5, [169])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [192])
}

void .FUNC $903 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	*($7 + [62]) = $2
	*($7 + [61]) = $3
	CALL require_auth($1)
	CALL void $0((int_32 $1), (int_64 $2), (int_32 $3), (int_32 *(*($0) + [12])))
	*(($7 + [48])) = [0]
	*($7 + [32]) = (int_64)-1
	*($7 + [40]) = (int_64)0
	$5 = *($0 + [8])
	*($7 + [16]) = $5
	*($7 + [24]) = $5
	$3 = [0]
	$2 = CALL db_find_i64($5, $5, (int_64)-4227314345542942720, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $269(($7 + [16]), $2)
	CALL eosio_assert(((int_32)*($3 + [20]) == (int_32)($7 + [16])), [1536])
	
.LABEL $label$1
	$2 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($2, [7440])
	$1 = *(($0 + [8]))
	*($7) = $0
	*($7 + [4]) = ($7 + [61])
	*($7 + [8]) = ($7 + [62])
	CALL eosio_assert($2, [1696])
	CALL $905(($7 + [16]), $3, $1, $7)
	$4 = *($7 + [40])
	if ( ($4 == 0) ){ goto $label$2 }
	$6 = ($7 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	$2 = *($3 + [8])
	if ( ($2 == 0) ){ goto $label$7 }
	*(($3 + [12])) = $2
	CALL $956($2)
	
.LABEL $label$7
	CALL $956($3)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($7 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $4
	
.LABEL $label$3
	*($6) = $4
	CALL $956($0)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [64])
}

void .FUNC $780 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$5 = *($0 + [8])
	if ( ((uint_32)int_32(($5 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$2 = int_32(($6 - $4) >> [4])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$5 = ($5 - $4)
	if ( ((uint_32)int_32($5 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($5 >> [3])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$5 = CALL $955(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$5 = ($0 + [4])
	
.LOOP $label$8:
	*(($0 = ($6 + [8]))) = (int_64)0
	*($6) = (int_64)0
	*($0) = [0]
	$6 = (*($5) + [16])
	*($5) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$5 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $971($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$3 = ($5 + ($6 << [4]))
	$4 = ($5 + ($2 << [4]))
	$6 = $4
	
.LOOP $label$9:
	*(($5 = ($6 + [8]))) = (int_64)0
	*($6) = (int_64)0
	*($5) = [0]
	$6 = ($6 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$2 = ($0 + [4])
	$5 = (*($2) - $1)
	$4 = ($4 - $5)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($4, $1, $5)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $4
	*($2) = $6
	*(($0 + [8])) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $956($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $905 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [48])
	$13 = $14
	*([0] + [4]) = $14
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	$10 = [0]
	$11 = *($1 + [8])
	$6 = ($1 + [12])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$1 }
	$5 = ((int_32)($8 - $11) / (int_32)[12])
	$9 = ($3 + [4])
	$7 = ($3 + [8])
	$3 = [0]
	$10 = [0]
	
.LOOP $label$2:
	$8 = ($11 + [9])
	if ( ((int_32)*($8) != (int_32)*(*($9))) ){ goto $label$3 }
	*($8) = [0]
	
.LABEL $label$3
	if ( ((int_32)*($11) != (int_32)*(*($7))) ){ goto $label$4 }
	*($8) = *(*($9))
	$10 = [1]
	
.LABEL $label$4
	$11 = ($11 + [12])
	$3 = ($3 + [1])
	if ( ($3 <= $5) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(($10 & [1]), [7440])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$3 = [8]
	$8 = *(($1 + [8]))
	$11 = *($6)
	$9 = ($11 - $8)
	$12 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[12]))
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$6 }
	$3 = ((((int_32)((uint_32)($9 + [-12]) / (uint_32)[12]) * (int_32)[7]) + $3) + [7])
	
.LABEL $label$6
	if ( ($3 <= [513]) ){ goto $label$8 }
	$7 = CALL malloc($3)
	goto $label$7 
	
.LABEL $label$8
	$7 = ($14 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$7
	*($13 + [8]) = $7
	$5 = ($7 + $3)
	*($13 + [16]) = $5
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [1920])
	CALL memcpy($7, $1, [8])
	$11 = ($7 + [8])
	*($13 + [12]) = $11
	$12 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [12])) - *(($1 + [8]))) / (int_32)[12]))
	
.LOOP $label$9:
	$8 = (CASTING uint_32)(uint_64 $12)
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	$9 = ((int_64)$12) != (int_64)0
	*($13 + [32]) = (($9) << [7]) | ($8 & [127]))
	CALL eosio_assert(((int_32)($5 - $11) > (int_32)[0]), [1920])
	CALL memcpy($11, ($13 + [32]), [1])
	$11 = ($11 + [1])
	*($13 + [12]) = $11
	if ( $9 ){ goto $label$9 }
	$8 = *(($1 + [12]))
	$11 = *(($1 + [8]))
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$10 }
	
.LOOP $label$11:
	*($13 + [24]) = ($13 + [8])
	*($13 + [32]) = $11
	*((($13 + [32]) + [8])) = ($11 + [8])
	*((($13 + [32]) + [12])) = ($11 + [9])
	*($13 + [36]) = ($11 + [4])
	CALL $906(($13 + [32]), ($13 + [24]))
	$11 = ($11 + [12])
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$11 }
	
.LABEL $label$10
	CALL db_update_i64(*($1 + [24]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$12 }
	CALL free($7)
	
.LABEL $label$12
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*([0] + [4]) = ($13 + [48])
}

void .FUNC $904 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $907 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $955([32]))) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [16]) = [0]
	*($6 + [20]) = $0
	CALL $909(($8 + [32]), $6)
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $910(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $906 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), $2, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $331 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	CALL require_auth($1)
	*($8 + [12]) = CALL $344($0, $1, $2)
	$4 = *(($3 + [32]))
	$3 = *($0 + [60])
	$7 = *(($3 + [36]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	$2 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($2)) == (int_64)$1) ){ goto $label$1 }
	$7 = $2
	$6 = ($2 + [-24])
	$2 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($3 + [8])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$2 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$6), [1536])
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	$7 = CALL db_find_i64(*(($3 + [8])), *(($3 + [16])), (int_64)-4223691270582697984, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $274($6, $7)
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$6), [1536])
	
.LABEL $label$3
	$7 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($7, [3312])
	$1 = *($0 + [8])
	*($8 + [8]) = ($8 + [12])
	CALL eosio_assert($7, [1696])
	CALL $348($6, $2, $1, ($8 + [8]))
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $549 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $7) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$6 = *($0)
	$3 = int_32(($7 - $6) >> [4])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$3 }
	$5 = [268435455]
	$2 = ($2 - $6)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$5 = int_32($2 >> [3])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL $955(($5 << [4]))
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$1 
	
.LABEL $label$5
	*(($0 + [4])) = ($7 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$7 = ($7 - $6)
	$3 = ($2 + ($3 << [4]))
	$4 = ($3 - $7)
	$1 = ($3 + ($1 << [4]))
	$5 = ($2 + ($5 << [4]))
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($4, $6, $7)
	$6 = *($0)
	
.LABEL $label$7
	*($0) = $4
	*(($0 + [4])) = $1
	*(($0 + [8])) = $5
	if ( ($6 == 0) ){ goto $label$8 }
	CALL $956($6)
	
.LABEL $label$8
	(unreachable)
}

int_32 .FUNC $621 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$5 = *($0 + [4])
	$9 = [0]
	$8 = (int_64)0
	$7 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($7)), [1648])
	$5 = *($6)
	$10 = *($5)
	$5 = ($5 + [1])
	*($6) = $5
	$9 = ($9 & [255])
	$8 = ((int_64)(CASTING uint_64)(uint_32 (($10 & [127]) << $9)) | (int_64)$8)
	$9 = ($9 + [7])
	if ( uint_32($10 >> [7]) ){ goto $label$1 }
	$9 = *($1)
	$6 = *($1 + [4])
	$5 = int_32(($6 - $9) >> [5])
	$10 = (CASTING uint_32)(uint_64 $8)
	if ( ((uint_32)$10 <= (uint_32)$5) ){ goto $label$3 }
	CALL $625($1, ($10 - $5))
	$6 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$10 >= (uint_32)$5) ){ goto $label$2 }
	$2 = ($9 + ($10 << [5]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = ($6 + [-32])
	$4 = ($6 + [-16])
	$7 = *($4)
	if ( ($7 == 0) ){ goto $label$6 }
	$10 = $7
	$6 = ($6 + [-12])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$7 }
	$9 = ([0] - $7)
	$10 = ($5 + [-12])
	
.LOOP $label$8:
	$5 = *($10)
	if ( ($5 == 0) ){ goto $label$9 }
	*(($10 + [4])) = $5
	CALL $956($5)
	
.LABEL $label$9
	$10 = ($10 + [-28])
	if ( ((int_32)($10 + $9) != (int_32)[-12]) ){ goto $label$8 }
	$10 = *($4)
	
.LABEL $label$7
	*($6) = $7
	CALL $956($10)
	
.LABEL $label$6
	$6 = $3
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$6 = $2
	
.LABEL $label$2
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$10 }
	
.LOOP $label$11:
	$10 = ($0 + [4])
	$9 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($9) - *($10)) > (uint_32)[1]), [1632])
	CALL memcpy($5, *($10), [2])
	$7 = (*($10) + [2])
	*($10) = $7
	CALL eosio_assert(((uint_32)(*($9) - $7) > (uint_32)[3]), [1632])
	CALL memcpy(($5 + [4]), *($10), [4])
	$7 = (*($10) + [4])
	*($10) = $7
	CALL eosio_assert(((uint_32)(*($9) - $7) > (uint_32)[7]), [1632])
	CALL memcpy(($5 + [8]), *($10), [8])
	*($10) = (*($10) + [8])
	CALL $626($0, ($5 + [16]))
	$5 = ($5 + [32])
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$11 }
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $622 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($2)), [1648])
	$4 = *($3)
	$7 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$4 = *($1 + [4])
	$3 = int_32(($4 - $7) >> [5])
	$6 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$4 }
	CALL $623($1, ($6 - $3))
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$6 >= (uint_32)$3) ){ goto $label$5 }
	$4 = ($7 + ($6 << [5]))
	*(($1 + [4])) = $4
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($8 + [28])
	
.LOOP $label$6:
	*($8) = $0
	*($8 + [8]) = $7
	*((($8 + [8]) + [8])) = ($7 + [8])
	*((($8 + [8]) + [12])) = ($7 + [12])
	*((($8 + [8]) + [16])) = ($7 + [16])
	*($6) = ($7 + [24])
	*($8 + [12]) = ($7 + [4])
	CALL $624(($8 + [8]), $8)
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [32])
	return $0
}

void .FUNC $623 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$5 = *($0 + [8])
	if ( ((uint_32)int_32(($5 - $6) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$2 = int_32(($6 - $4) >> [5])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$4 }
	$6 = [134217727]
	$5 = ($5 - $4)
	if ( ((uint_32)int_32($5 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$6 = int_32($5 >> [4])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$5 = CALL $955(($6 << [5]))
	goto $label$2 
	
.LABEL $label$6
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($5 = ($6 + [16]))) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*($6 + [24]) = (int_64)0
	*(($6 + [4])) = [0]
	*($5) = [0]
	$6 = (*($6) + [32])
	*(($6 = ($0 + [4]))) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$5 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $971($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$3 = ($5 + ($6 << [5]))
	$4 = ($5 + ($2 << [5]))
	$6 = $4
	
.LOOP $label$9:
	*($6) = (int_64)0
	*(($5 = ($6 + [16]))) = (int_64)0
	*($6 + [24]) = (int_64)0
	*(($6 + [4])) = [0]
	*(($6 + [8])) = (int_64)0
	*($5) = [0]
	$6 = ($6 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$2 = ($0 + [4])
	$5 = (*($2) - $1)
	$4 = ($4 - $5)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($4, $1, $5)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $4
	*($2) = $6
	*(($0 + [8])) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $956($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $624 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $625 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0 + [4])
	$4 = *($0 + [8])
	if ( ((uint_32)int_32(($4 - $8) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$3 = *($0)
	$6 = int_32(($8 - $3) >> [5])
	$5 = ($6 + $1)
	if ( ((uint_32)$5 >= (uint_32)[134217728]) ){ goto $label$4 }
	$8 = [134217727]
	$4 = ($4 - $3)
	if ( ((uint_32)int_32($4 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$8 = int_32($4 >> [4])
	$8 = ( $5 ? $8 : ($8 <= $5) )
	if ( ($8 == 0) ){ goto $label$5 }
	if ( ((uint_32)$8 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$4 = CALL $955(($8 << [5]))
	goto $label$2 
	
.LABEL $label$6
	
.LOOP $label$8:
	*($8) = (int_64)0
	*(($4 = ($8 + [16]))) = (int_64)0
	*(($3 = ($8 + [24]))) = (int_64)0
	*($8) = [0]
	*(($8 + [4])) = [0]
	*(($8 + [8])) = (int_64)0
	*($4) = [0]
	*(($8 + [20])) = [0]
	*($3) = [0]
	$8 = (*($8) + [32])
	*(($8 = ($0 + [4]))) = $8
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$8 = [0]
	$4 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $971($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$2 = ($4 + ($8 << [5]))
	$4 = ($4 + ($6 << [5]))
	$8 = $4
	
.LOOP $label$9:
	*($8) = (int_64)0
	*(($3 = ($8 + [16]))) = (int_64)0
	*(($5 = ($8 + [24]))) = (int_64)0
	*($8) = [0]
	*(($8 + [4])) = [0]
	*(($8 + [8])) = (int_64)0
	*($3) = [0]
	*(($8 + [20])) = [0]
	*($5) = [0]
	$8 = ($8 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$3 = *(($0 + [4]))
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$11 }
	$7 = ([0] - $1)
	$1 = ($3 + [-32])
	
.LOOP $label$12:
	*(($4 + [-32])) = *($1)
	*(($4 + [-24])) = *(($1 + [8]))
	*(($3 = ($4 + [-16]))) = (int_64)0
	*(($5 = ($4 + [-8]))) = [0]
	$6 = ($1 + [16])
	*($3) = *($6)
	*(($4 + [-12])) = *(($1 + [20]))
	$3 = ($1 + [24])
	*($5) = *($3)
	*($3) = [0]
	*($6) = (int_64)0
	$4 = ($4 + [-32])
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $7) != (int_32)[-32]) ){ goto $label$12 }
	$1 = *(($0 + [4]))
	$7 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$7 = $1
	
.LABEL $label$10
	*($0) = $4
	*(($0 + [4])) = $8
	*(($0 + [8])) = $2
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$13 }
	
.LOOP $label$14:
	$5 = ($1 + [-32])
	$0 = ($1 + [-16])
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$15 }
	$8 = $3
	$6 = ($1 + [-12])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$16 }
	$1 = ([0] - $3)
	$8 = ($4 + [-12])
	
.LOOP $label$17:
	$4 = *($8)
	if ( ($4 == 0) ){ goto $label$18 }
	*(($8 + [4])) = $4
	CALL $956($4)
	
.LABEL $label$18
	$8 = ($8 + [-28])
	if ( ((int_32)($8 + $1) != (int_32)[-12]) ){ goto $label$17 }
	$8 = *($0)
	
.LABEL $label$16
	*($6) = $3
	CALL $956($8)
	
.LABEL $label$15
	$1 = $5
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$1 }
	CALL $956($7)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $239 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1648])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $240($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [1632])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [1632])
	CALL memcpy(($7 + [8]), *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $238 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)((int_32)($8 - $7) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($7 - $4) / (int_32)[40])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$3 }
	$7 = [107374182]
	$8 = ((int_32)($8 - $4) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$6 }
	$7 = ($8 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$8 = CALL $955(((int_32)$7 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*($7) = (int_64)0
	*($7 + [16 align=4]) = (int_64)0
	*(($7 + [8])) = (int_64)0
	*(($7 + [24])) = (int_64)0
	*(($7 + [32])) = (int_64)0
	$7 = (*($8) + [40])
	*($8) = $7
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$8 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	$2 = ($8 + ((int_32)$7 * (int_32)[40]))
	$8 = ($8 + ((int_32)$5 * (int_32)[40]))
	$7 = $8
	
.LOOP $label$8:
	*($7) = (int_64)0
	*($7 + [16 align=4]) = (int_64)0
	*(($7 + [8])) = (int_64)0
	*(($7 + [24])) = (int_64)0
	*(($7 + [32])) = (int_64)0
	$7 = ($7 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$10 }
	$3 = ([0] - $4)
	$1 = ($1 + [-20])
	
.LOOP $label$11:
	*(($8 + [-32])) = *(($1 + [-12]))
	*(($8 + [-40])) = *(($1 + [-20]))
	*(($4 = ($8 + [-24]))) = (int_64)0
	*(($5 = ($8 + [-16]))) = [0]
	$6 = ($1 + [-4])
	*($4) = *($6)
	*(($8 + [-20])) = *($1)
	$4 = ($1 + [4])
	*($5) = *($4)
	*($4) = [0]
	*(($4 = ($8 + [-12]))) = (int_64)0
	*($6) = (int_64)0
	*(($5 = ($8 + [-4]))) = [0]
	$6 = ($1 + [8])
	*($4) = *($6)
	*(($8 + [-8])) = *(($1 + [12]))
	$4 = ($1 + [16])
	*($5) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$8 = ($8 + [-40])
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $3) != (int_32)[-20]) ){ goto $label$11 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$5 = $4
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $7
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$12 }
	$1 = ([0] - $5)
	$7 = ($4 + [-24])
	
.LOOP $label$13:
	$8 = *(($7 + [12]))
	if ( ($8 == 0) ){ goto $label$14 }
	*(($7 + [16])) = $8
	CALL $956($8)
	
.LABEL $label$14
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$15 }
	*(($7 + [4])) = $8
	CALL $956($8)
	
.LABEL $label$15
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $1) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $956($5)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $541 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*(($1 + [12])) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [8]) = (*($1 + [8]) + [1])
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	CALL eosio_assert([1], [1920])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($5 | [8]), ($1 + [8]), [2])
	CALL db_update_i64(*($1 + [16]), $2, $5, [10])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $236 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)int_32(($8 - $7) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$4 = int_32(($7 - $5) >> [4])
	$7 = ($4 + $1)
	if ( ((uint_32)$7 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$8 = ($8 - $5)
	if ( ((uint_32)int_32($8 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($8 >> [3])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$8 = CALL $955(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $7
	$8 = $1
	
.LOOP $label$7:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$7 }
	*(($0 + [4])) = ($7 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$2 = ($8 + ($6 << [4]))
	$8 = ($8 + ($4 << [4]))
	$6 = $8
	$7 = $1
	
.LOOP $label$8:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$3 = ($8 + ($1 << [4]))
	$6 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$10 }
	$4 = ([0] - $6)
	$6 = ($7 + [-16])
	
.LOOP $label$11:
	*(($8 + [-16])) = *($6)
	*(($7 = ($8 + [-12]))) = (int_64)0
	*(($1 = ($8 + [-4]))) = [0]
	$5 = ($6 + [4])
	*($7) = *($5)
	*(($8 + [-8])) = *(($6 + [8]))
	$7 = ($6 + [12])
	*($1) = *($7)
	*($7) = [0]
	*($5) = (int_64)0
	$8 = ($8 + [-16])
	$6 = ($6 + [-16])
	if ( ((int_32)($6 + $4) != (int_32)[-16]) ){ goto $label$11 }
	$6 = *(($0 + [4]))
	$1 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$1 = $6
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$12 }
	$7 = ([0] - $1)
	$6 = ($6 + [-12])
	
.LOOP $label$13:
	$8 = *($6)
	if ( ($8 == 0) ){ goto $label$14 }
	*(($6 + [4])) = $8
	CALL $956($8)
	
.LABEL $label$14
	$6 = ($6 + [-16])
	if ( ((int_32)($6 + $7) != (int_32)[-12]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$15 }
	CALL $956($1)
	
.LABEL $label$15
	(unreachable)
}

int_32 .FUNC $235 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1648])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$7 = *($1 + [4])
	$5 = int_32(($7 - $3) >> [4])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$3 }
	CALL $236($1, ($4 - $5))
	$7 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$5) ){ goto $label$2 }
	$4 = ($4 << [4])
	$2 = ($3 + $4)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$3 = (([0] - $3) - $4)
	$4 = ($7 + [-12])
	
.LOOP $label$5:
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$6 }
	*(($4 + [4])) = $5
	CALL $956($5)
	
.LABEL $label$6
	$4 = ($4 + [-16])
	if ( ((int_32)($4 + $3) != (int_32)[-12]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$7 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$7 }
	$3 = ($0 + [8])
	
.LOOP $label$8:
	$5 = ($0 + [4])
	CALL eosio_assert(((uint_32)(*($3) - *($5)) > (uint_32)[1]), [1632])
	CALL memcpy($4, *($5), [2])
	*($5) = (*($5) + [2])
	CALL $237($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

int_32 .FUNC $234 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1648])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$6 = *($1)
	$2 = *($1 + [4])
	$7 = ((int_32)($2 - $6) / (int_32)[40])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $238($1, ($4 - $7))
	$2 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[40])
	$3 = ($6 + $4)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$4 }
	$6 = (([0] - $6) - $4)
	$4 = ($2 + [-24])
	
.LOOP $label$5:
	$7 = *(($4 + [12]))
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [16])) = $7
	CALL $956($7)
	
.LABEL $label$6
	$7 = *($4)
	if ( ($7 == 0) ){ goto $label$7 }
	*(($4 + [4])) = $7
	CALL $956($7)
	
.LABEL $label$7
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$2
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	$4 = ($0 + [4])
	
.LOOP $label$9:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - *($4)) > (uint_32)[7]), [1632])
	CALL memcpy($7, *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [1632])
	CALL memcpy(($7 + [8]), *($4), [8])
	*($4) = (*($4) + [8])
	CALL $237(CALL $239($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	return $0
}

int_32 .FUNC $233 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [4]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$6 = [0]
	$5 = (int_64)0
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *(($0 + [8]))), [1648])
	$7 = ($0 + [4])
	$4 = *($7)
	$2 = *($4)
	$4 = ($4 + [1])
	*($7) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($2 >> [7]) ){ goto $label$1 }
	*($1 + [12]) = $5
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)*($3) != (int_32)$4), [1632])
	$4 = ($0 + [4])
	CALL memcpy(($1 + [16]), *($4), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	$7 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	CALL eosio_assert(($6 <= *($3)), [1648])
	$6 = *($4)
	$2 = *($6)
	$6 = ($6 + [1])
	*($4) = $6
	$7 = ($7 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $7)) | (int_64)$5)
	$7 = ($7 + [7])
	if ( uint_32($2 >> [7]) ){ goto $label$2 }
	*($1 + [20]) = $5
	return $0
}

int_32 .FUNC $544 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [9]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [10]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [11]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [12]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [14]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [15]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [18]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [20]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [22]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [26]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [28]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [30]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [31]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [33]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [34]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [35]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [36]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [37]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [38]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [39]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [44]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [45]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [46]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [47]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $547 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [5024])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [5072])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [5136])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $956($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $956($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [56]))
}

void .FUNC $230 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $875 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$3 = *(*(*($0 + [4])))
	*($1 + [8]) = [1]
	$2 = *($0)
	*($1) = $3
	*($1 + [12]) = [1]
	CALL eosio_assert([1], [1920])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($4 | [8]), ($1 + [8]), [4])
	*($4 + [31]) = *($1 + [12])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($4 | [12]), ($4 + [31]), [1])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($4 | [13]), ($1 + [16]), [8])
	$3 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)-5032445846214410240, *(*($0 + [8])), $3, $4, [21])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $417 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($2, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [1632])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $877 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [112])
	*([0] + [4]) = $11
	*($11 + [96]) = $1
	CALL require_auth($1)
	$8 = *($2)
	CALL eosio_assert((( *($2 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) ) <= [101]), [9376])
	$8 = *($3)
	CALL eosio_assert((( *($3 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) ) <= [65]), [9408])
	$5 = *(($4 + [32]))
	$4 = *($0 + [128])
	$7 = *(($4 + [36]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$1 }
	$8 = ($7 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$1 }
	$7 = $8
	$10 = ($8 + [-24])
	$8 = $10
	if ( ((int_32)($10 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$10 = ($4 + [8])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$4 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$10), [1536])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$7 = CALL db_find_i64(*(($4 + [8])), *(($4 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $186($10, $7)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$10), [1536])
	
.LABEL $label$3
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [3696])
	*(($11 + [88])) = [0]
	*($11 + [72]) = (int_64)-1
	*($11 + [80]) = (int_64)0
	$9 = *($0)
	*($11 + [56]) = $9
	*($11 + [64]) = $9
	$10 = CALL db_find_i64($9, $9, (int_64)4982429584524836864, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$10 }
	$6 = CALL $860(($11 + [56]), $10)
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)($11 + [56])), [1536])
	$10 = *($6 + [32])
	*($11 + [55]) = $10
	if ( ($10 == 0) ){ goto $label$7 }
	$10 = *(($0 + [128]))
	*($11 + [8]) = [5000]
	CALL eosio_assert(((uint_32)*($8 + [16]) > (uint_32)[4999]), [2880])
	$1 = *($10)
	*($11 + [104]) = ($11 + [8])
	CALL eosio_assert($7, [1696])
	CALL $249(($10 + [8]), $8, $1, ($11 + [104]))
	*(($11 + [40])) = [0]
	$1 = *($0)
	*($11 + [8]) = $1
	*($11 + [24]) = (int_64)-1
	*($11 + [32]) = (int_64)0
	*($11 + [16]) = $1
	$8 = CALL db_find_i64($1, $1, (int_64)-5032445846214410240, *($11 + [96]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$11 }
	$8 = CALL $863(($11 + [8]), $8)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($11 + [8])), [1536])
	CALL eosio_assert([1], [4912])
	CALL eosio_assert([1], [4208])
	$10 = CALL db_next_i64(*($8 + [28]), ($11 + [104]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	CALL $863(($11 + [8]), $10)
	
.LABEL $label$12
	CALL $879(($11 + [8]), $8)
	
.LABEL $label$11
	$7 = *($11 + [32])
	if ( ($7 == 0) ){ goto $label$7 }
	$4 = ($11 + [36])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$9 }
	
.LOOP $label$13:
	$8 = ($8 + [-24])
	$10 = *($8)
	*($8) = [0]
	if ( ($10 == 0) ){ goto $label$14 }
	CALL $956($10)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$13 }
	$8 = *(($11 + [32]))
	goto $label$8 
	
.LABEL $label$10
	$1 = *($0)
	*($11 + [12]) = $2
	*($11 + [16]) = $3
	*($11 + [8]) = ($11 + [96])
	CALL $878(($11 + [104]), ($11 + [56]), $1, ($11 + [8]))
	$7 = *($11 + [80])
	if ( $7 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$9
	$8 = $7
	
.LABEL $label$8
	*($4) = $7
	CALL $956($8)
	
.LABEL $label$7
	$1 = *($0)
	*($11 + [12]) = $3
	*($11 + [8]) = $2
	*($11 + [16]) = ($11 + [55])
	CALL eosio_assert([1], [1696])
	CALL $880(($11 + [56]), $6, $1, ($11 + [8]))
	$7 = *($11 + [80])
	if ( ($7 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$6 = (($11 + [56]) + [28])
	$10 = *($6)
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$16 }
	
.LOOP $label$17:
	$10 = ($10 + [-24])
	$8 = *($10)
	*($10) = [0]
	if ( ($8 == 0) ){ goto $label$18 }
	if ( ((*($8 + [20]) & [1]) == 0) ){ goto $label$19 }
	CALL $956(*(($8 + [28])))
	
.LABEL $label$19
	if ( ((*($8 + [8]) & [1]) == 0) ){ goto $label$20 }
	CALL $956(*(($8 + [16])))
	
.LABEL $label$20
	CALL $956($8)
	
.LABEL $label$18
	if ( ((int_32)$7 != (int_32)$10) ){ goto $label$17 }
	$8 = *(($11 + [80]))
	goto $label$15 
	
.LABEL $label$16
	$8 = $7
	
.LABEL $label$15
	*($6) = $7
	CALL $956($8)
	
.LABEL $label$5
	*([0] + [4]) = ($11 + [112])
}

void .FUNC $115 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	CALL $570(($0 + [1232]), $1, $2, $3)
}

void .FUNC $871 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	*($6 + [104]) = $1
	CALL $767($0)
	*((($6 + [64]) + [32])) = [0]
	*($6 + [80]) = (int_64)-1
	*($6 + [88]) = (int_64)0
	$3 = *($0)
	*($6 + [64]) = $3
	*($6 + [72]) = $3
	$5 = [0]
	$2 = CALL db_find_i64($3, $3, (int_64)4982429584524836864, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $860(($6 + [64]), $2)
	CALL eosio_assert(((int_32)*($5 + [56]) == (int_32)($6 + [64])), [1536])
	$1 = *($6 + [104])
	
.LABEL $label$1
	$2 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($2, [9344])
	$3 = *($0)
	CALL eosio_assert($2, [1696])
	CALL $872(($6 + [64]), $5, $3, ($6 + [24]))
	*((($6 + [24]) + [32])) = [0]
	*($6 + [40]) = (int_64)-1
	*($6 + [48]) = (int_64)0
	$3 = *($0)
	*($6 + [24]) = $3
	*($6 + [32]) = $3
	$5 = CALL db_find_i64($3, $3, (int_64)-5032445846214410240, $1)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$4 }
	$5 = CALL $863(($6 + [24]), $5)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($6 + [24])), [1536])
	$1 = *($0)
	CALL eosio_assert([1], [1696])
	CALL $874(($6 + [24]), $5, $1, ($6 + [8]))
	$2 = *($6 + [48])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$1 = *($0)
	*($6 + [16]) = ($6 + [104])
	CALL $873(($6 + [8]), ($6 + [24]), $1, ($6 + [16]))
	$2 = *($6 + [48])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($6 + [52])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$8 }
	CALL $956($5)
	
.LABEL $label$8
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($6 + [48]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $2
	
.LABEL $label$5
	*($4) = $2
	CALL $956($0)
	
.LABEL $label$2
	$2 = *($6 + [88])
	if ( ($2 == 0) ){ goto $label$9 }
	$4 = (($6 + [64]) + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$13 }
	if ( ((*($0 + [20]) & [1]) == 0) ){ goto $label$14 }
	CALL $956(*(($0 + [28])))
	
.LABEL $label$14
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL $956(*(($0 + [16])))
	
.LABEL $label$15
	CALL $956($0)
	
.LABEL $label$13
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$12 }
	$0 = *(($6 + [88]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $2
	
.LABEL $label$10
	*($4) = $2
	CALL $956($0)
	
.LABEL $label$9
	*([0] + [4]) = ($6 + [112])
}

void .FUNC $870 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL $956(*(($1 + [28])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL $956(*(($1 + [16])))
	
.LABEL $label$12
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $956($6)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $873 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([40])) + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [12]) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = $1
	CALL $875(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $866(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $955([32]))) = (int_64)0
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [16]) = [0]
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [1632])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $145(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $146(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $956($7)
	
.LABEL $label$10
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*((($9 + [16]) + [24])) = (int_64)1397703940
	*($9 + [24]) = [0]
	*($9 + [16]) = (int_64)0
	*($9 + [32]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$6 = (int_64)5459781
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [3776])
	*($9 + [84]) = $5
	*($9 + [80]) = $5
	*($9 + [88]) = ($5 + $3)
	*($9 + [48]) = ($9 + [80])
	*($9 + [64]) = ($9 + [16])
	CALL $575(($9 + [64]), ($9 + [48]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($9 + [60])) = *(($9 + [44]))
	$7 = *((($9 + [16]) + [8]))
	*(($1 = (($9 + [48]) + [8]))) = *(($9 + [40]))
	$6 = *($9 + [16])
	*($9 + [48]) = *($9 + [32])
	*($9 + [52]) = *(($9 + [36]))
	*((($9 + [64]) + [8])) = *($1)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*(($9 + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9) = $4
	CALL void $1((int_32 $6), (int_64 $7), (int_32 $9), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC $879 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [5024])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [5072])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [5136])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $956($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $956($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

int_32 .FUNC $415 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($2)), [1648])
	$4 = *($3)
	$7 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$4 = *($1 + [4])
	$3 = ((int_32)($4 - $7) / (int_32)[56])
	$6 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$4 }
	CALL $416($1, ($6 - $3))
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$6 >= (uint_32)$3) ){ goto $label$5 }
	$4 = ($7 + ((int_32)$6 * (int_32)[56]))
	*(($1 + [4])) = $4
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($8 + [20])
	
.LOOP $label$6:
	*($8) = $0
	*($8 + [8]) = $7
	*((($8 + [8]) + [8])) = ($7 + [16])
	*($6) = ($7 + [20])
	*((($8 + [8]) + [16])) = ($7 + [24])
	*((($8 + [8]) + [20])) = ($7 + [28])
	*((($8 + [8]) + [24])) = ($7 + [32])
	*($8 + [12]) = ($7 + [8])
	*((($8 + [8]) + [28])) = ($7 + [33])
	*((($8 + [8]) + [32])) = ($7 + [40])
	CALL $417(($8 + [8]), $8)
	$7 = ($7 + [56])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [48])
	return $0
}

int_32 .FUNC $237 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1648])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $194($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [1632])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $113 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL $572(($0 + [1232]), $1, $2)
}

int_32 .FUNC $414 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($2)), [1648])
	$4 = *($3)
	$7 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$4 = *($1 + [4])
	$3 = int_32(($4 - $7) >> [6])
	$6 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$4 }
	CALL $418($1, ($6 - $3))
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$6 >= (uint_32)$3) ){ goto $label$5 }
	$4 = ($7 + ($6 << [6]))
	*(($1 + [4])) = $4
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($8 + [20])
	$3 = ($8 + [44])
	
.LOOP $label$6:
	*($8) = $0
	*($8 + [8]) = $7
	*((($8 + [8]) + [8])) = ($7 + [16])
	*($6) = ($7 + [20])
	*((($8 + [8]) + [16])) = ($7 + [24])
	*((($8 + [8]) + [20])) = ($7 + [28])
	*((($8 + [8]) + [24])) = ($7 + [32])
	*($8 + [12]) = ($7 + [8])
	*((($8 + [8]) + [28])) = ($7 + [33])
	*((($8 + [8]) + [32])) = ($7 + [40])
	*($3) = ($7 + [56])
	CALL $419(($8 + [8]), $8)
	$7 = ($7 + [64])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [48])
	return $0
}

int_32 .FUNC snprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $3
	$3 = CALL vsnprintf($0, $1, $2, $3)
	*([0] + [4]) = ($4 + [16])
	return $3
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [96])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = [0]
	$4 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $3)
	
.LABEL $label$1
	*(($8 + [40])) = (int_64)1397703940
	*($8 + [28]) = [0]
	*($8 + [24]) = [0]
	*($8 + [32]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$5 = (int_64)5459781
	
.LOOP $label$5:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$6 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($6, [3776])
	*($8 + [84]) = $4
	*($8 + [80]) = $4
	*($8 + [88]) = ($4 + $3)
	*($8 + [48]) = ($8 + [80])
	*($8 + [64]) = ($8 + [24])
	CALL $584(($8 + [64]), ($8 + [48]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($4)
	
.LABEL $label$8
	*((($8 + [48]) + [12])) = *(($8 + [44]))
	*(($1 = (($8 + [48]) + [8]))) = *(($8 + [40]))
	$6 = *($8 + [24])
	*($8 + [48]) = *($8 + [32])
	*($8 + [52]) = *((($8 + [24]) + [12]))
	$4 = *($8 + [28])
	*((($8 + [64]) + [8])) = *($1)
	*($8 + [64]) = *($8 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$7 = *((*($1) + $7))
	
.LABEL $label$9
	$5 = *((($8 + [64]) + [8]))
	*((($8 + [80]) + [8])) = $5
	*((($8 + [8]) + [8])) = $5
	$5 = *($8 + [64])
	*($8 + [80]) = $5
	*($8 + [8]) = $5
	CALL void $1((int_32 ($6 & [65535])), (int_32 $4), (int_32 ($8 + [8])), (int_32 $7))
	*([0] + [4]) = ($8 + [96])
	return [1]
}

int_64 .FUNC pow (float_64 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	int_32 $19
	float_64 $20
	float_64 $21
	$21 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (CASTING int_64)(float_64 $1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$8 = ($5) & [2147483647]
	if ( (($8) | $6) == 0) ){ goto $label$1 }
	$11 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$3 = (CASTING uint_32)(uint_64 $11)
	if ( $3 ){ goto $label$2 }
	if ( ((int_32)$2 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 & [2147483647])
	if ( ((uint_32)$7 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$3 != (int_32)[0]) & ((int_32)$7 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$19 = [0]
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$19 = [2]
	if ( ((uint_32)$8 > (uint_32)[1128267775]) ){ goto $label$8 }
	$19 = [0]
	if ( ($8 <= [1072693248]) ){ goto $label$8 }
	$9 = uint_32($8 >> [20])
	if ( ((int_32)($9 + [-1023]) < (int_32)[21]) ){ goto $label$7 }
	$19 = ([1075] - $9)
	$9 = uint_32($6 >> $19)
	$19 = ( ([2] - ($9 & [1])) ? [0] : ((int_32)($9 << $19) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$19 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $9)
	$19 = uint_32($8 >> $6)
	$19 = ( ([2] - ($19 & [1])) ? [0] : ((int_32)($19 << $6) == (int_32)$8) )
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($7 + [-1072693248]) | $3) == 0) ){ goto $label$1 }
	if ( ($7 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$5 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL sqrt($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$21 = CALL fabs($0)
	if ( $3 ){ goto $label$18 }
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((int_32)($7 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = (float_64)1
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$16 }
	if ( $19 ){ goto $label$14 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$17
	$21 = ( ((float_64)(float_64)1 / (float_64)$21) ? $21 : ((int_32)$5 < (int_32)[0]) )
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($19 | ($7 + [-1072693248])) == 0) ){ goto $label$15 }
	return ( !(float_64)$21 ? $21 : ((int_32)$19 == (int_32)[1]) )
	
.LABEL $label$16
	$10 = (float_64)-1
	goto $label$14 
	
.LABEL $label$15
	$1 = (float_64)
	return ((float_64)$1($21 - $21)) / (float_64)$1)
	
.LABEL $label$14
	if ( ($8 <= [1105199105]) ){ goto $label$28 }
	if ( ($8 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$7 > (uint_32)[1072693247]) ){ goto $label$24 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 < (int_32)[0]) )
	
.LABEL $label$28
	$8 = [0]
	if ( ((uint_32)$7 > (uint_32)[1048575]) ){ goto $label$26 }
	$21 = ((float_64)$21 * (float_64)(float_64)9007199254740992)
	$7 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $21) >> (uint_64)(int_64)32))
	$5 = [-53]
	goto $label$25 
	
.LABEL $label$27
	if ( ((uint_32)$7 > (uint_32)[1072693246]) ){ goto $label$23 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 < (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	$6 = ($7 & [1048575])
	$2 = ($6 | [1072693248])
	$5 = ((int_32($7 >> [20]) + $5) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$22 }
	$8 = [1]
	goto $label$21 
	
.LABEL $label$24
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 > (int_32)[0]) )
	
.LABEL $label$23
	if ( ($7 <= [1072693249]) ){ goto $label$20 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 > (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$22
	$2 = ($2 + [-1048576])
	$5 = ($5 + [1])
	
.LABEL $label$21
	$13 = ((float_64)*(($6 + [18784])) + (float_64)((float_64)((float_64)(float_64))($21 - (float_64))($0 - $14)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$21 = ((float_64)((float_64)$12 * (float_64)$0) + (float_64)((float_64)$21 * (float_64)(float_64))($13 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $17))
	$0 = ((float_64)$21 * (float_64)$21)
	$16 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($2 >> [1]) | [536870912]) + ($8 << [18])) + [524288])) << (int_64)32))
	$12 = ((float_64)$15 * (float_64)(float_64))((float_64))($14 - ((float_64)$0 * (float_64)$16)) - ((float_64)$0 * (float_64)(float_64))($12 - (float_64))($16 - $13)
	$13 = ((float_64)((float_64)((float_64)$21 + (float_64)$0) * (float_64)$12))
	$17 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$17 + (float_64)(float_64)3) + (float_64)$13)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$15 = ((float_64)(float_64)1 / (float_64)((float_64)$13 + (float_64)$12))
	$13 = *(($6 + [18768]))
	$12 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $21) & (int_64)4294967295)))
	$14 = (float_64)
	$21 = ((float_64)$14($12 - $13)) * (float_64)$15
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $21)) & (int_64)-4294967296)
	$14 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$14 & (int_64)-4294967296))))
	$12 = ((float_64)$0 + (float_64)$21)
	$6 = ($8 << [3])
	$18 = *(($6 + [18800]))
	$20 = (CASTING float_64)(int_32 $5)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$20 + (float_64)((float_64)$18 + (float_64)((float_64)$12)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$20 = (float_64))((float_64))((float_64))($0 + (float_64)$13)))))) & (int_64)-4294967296))) - $20) - $18) - $12)
	goto $label$19 
	
.LABEL $label$20
	$13 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$21 + (float_64)(float_64)-1)
	$21 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$21 + (float_64)$13))) & (int_64)-4294967296)
	$20 = (float_64))($0) - $21)
	
.LABEL $label$19
	$1 = ((float_64)((float_64)(float_64))($1 - $12) * (float_64)$0) + (float_64)((float_64)(float_64))($13 - $20) * (float_64)$1
	$12 = (CASTING float_64)(int_64 ((int_64)$4 & (int_64)-4294967296))
	$21 = ((float_64)$12 * (float_64)$0)
	$0 = ((float_64)$21 + (float_64)$1)
	$4 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 $4)))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$2) < (int_32)[1083179008]) ){ goto $label$33 }
	if ( ((($2 + [-1083179008]) | $8) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$33
	if ( (($2 & [2147482624]) <= [1083231232]) ){ goto $label$30 }
	if ( ((($2 + [1064252416]) | $8) == 0) ){ goto $label$31 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$32
	$0 = (float_64)
	$12 = ((float_64)$1 + (float_64)(float_64)8.008566259537294e-17)
	if ( (((float_64)$12 <= (float_64)$0($0 - $21))) | (((float_64)$12 != (float_64)$12) | ((float_64)$0 != (float_64)$0))) ){ goto $label$30 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$31
	$0 = (float_64)
	if ( ((((float_64)$1 > (float_64)$0($0 - $21))) | (((float_64)$1 != (float_64)$1) | ((float_64)$0 != (float_64)$0))) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$8 = ($2 & [2147483647])
	if ( ($8 <= [1071644673]) ){ goto $label$35 }
	$6 = (uint_32($8 >> [20]) & [2047])
	$8 = (uint_32([1048576] >> (uint_32($8 >> [20]) + [-1022])) + $2)
	$5 = uint_32((($8 & [1048575]) | [1048576]) >> ([1043] - $6))
	$2 = ( ([0] - $5) ? $5 : ((int_32)$2 < (int_32)[0]) )
	$21 = (float_64))($21 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($8 & ((int_32)uint_32([1048575] >> ($6 + [-1023])) ^ (int_32)[-1]))) << (int_64)32)))
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	
.LABEL $label$34
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$21 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $21)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$1 + (float_64)$21)) & (int_64)-4294967296))
	$12 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$12 + (float_64)$21 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = (float_64)
	$4 = (CASTING int_64)(float_64 $1((float_64)1 - (float_64))((float_64))(((float_64)((float_64)$1)) * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)
	$8 = ((CASTING uint_32)(uint_64 (uint_64)$4 - ((float_64)$0($21 - (float_64))($1 - $12))) + (float_64)((float_64)$1 * (float_64)$0))
	if ( ((int_32)int_32($8 - $1))))) >> (uint_64)(int_64)32)) + ($2 << [20]))) >> [20]) <= (int_32)[0]) ){ goto $label$36 }
	return ((float_64)$10 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))))
	
.LABEL $label$36
	return ((float_64)$10 * (float_64)CALL scalbn($1, $2))
	
.LABEL $label$29
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $21
}

int_32 .FUNC $413 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $415(CALL $414($0, ($1 + [68])), ($1 + [80]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [56]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [60]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [64]), *($0 + [4]), [2])
	return *($0 + [4]) = (*($0 + [4]) + [2])
}

int_64 .FUNC fabs (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

void .FUNC $111 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = *(($3 + [8]))
	*((($6 + [16]) + [8])) = $4
	$5 = *($3)
	*(($6 + [8])) = $4
	*($6 + [16]) = $5
	*($6 + [4]) = *($6 + [20])
	*($6) = *($6 + [16])
	CALL $576(($0 + [1232]), $1, $2, $6)
	*([0] + [4]) = ($6 + [32])
}

void .FUNC _ZNSt3__19to_stringEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [18752], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $967(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $967(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $971 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $972 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $955($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $412 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	*($1) = *(*($0))
	$2 = *($0 + [4])
	$3 = *(($2 + [48]))
	if ( ((int_32)(*($2 + [16]) & [254]) != (int_32)[2]) ){ goto $label$2 }
	CALL eosio_assert(((int_64)$3 == (int_64)*(($1 + [48]))), [4096])
	$3 = ((int_64)*($1 + [40]) + (int_64)*(($2 + [40])))
	*($1 + [40]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [4176])
	*($1 + [64]) = [1]
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert(((int_64)$3 == (int_64)*(($1 + [32]))), [4096])
	$3 = ((int_64)*($1 + [24]) + (int_64)*(($2 + [40])))
	*($1 + [24]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [4176])
	*($1 + [60]) = [1]
	
.LABEL $label$1
	$2 = *(($0 + [4]))
	$0 = ($1 + [84])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)*(($1 + [88]))) ){ goto $label$3 }
	CALL memcpy($4, $2, [56])
	*($0) = (*($0) + [56])
	return 
	
.LABEL $label$3
	CALL $408(($1 + [80]), $2)
}

void .FUNC $303 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	CALL $305($0, $1, $2, $3, $4, $5)
}

int_32 .FUNC $302 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *(($0 + [40]))
	$6 = *(($0 + [44]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [16])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$4), [1536])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)8526756653867991040, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $178($4, $6)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$4), [1536])
	
.LABEL $label$3
	return ( ($5 + [12]) ? ($0 + [68]) : $5 )
}

int_32 .FUNC $301 (int_32 $0, int_32 $1)
{
	return ((( $1 ? [5] : ((int_32)$1 < (int_32)[5]) ) << [2]) + [12])
}

int_32 .FUNC $300 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [176])
	*([0] + [4]) = $14
	CALL $187(($14 + [168]), *($0 + [56]), $1, [0])
	*($14 + [167]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL require_auth($1)
	*($14 + [152]) = *($14 + [168])
	$5 = *(($0 + [56]))
	*($14 + [8 align=4]) = *($14 + [152])
	$5 = CALL $188($5, ($14 + [8]))
	$11 = *($14 + [168])
	*($14 + [144]) = $11
	*($14) = $11
	if ( (CALL $310($0, $1, $3, $5, ($14 + [167]), $14) == 0) ){ goto $label$2 }
	$11 = CALL current_time()
	*(($14 + [108])) = [0]
	*(($14 + [112])) = [0]
	*($14 + [92]) = [0]
	*($14 + [96]) = [0]
	*($14 + [100]) = [0]
	*($14 + [104]) = [0]
	*($14 + [80]) = ((CASTING uint_32)(uint_64 ((uint_64)$11 / (uint_64)(int_64)1000000)) + [60])
	*($14 + [116]) = [0]
	*(($14 + [120])) = [0]
	*(($14 + [124])) = [0]
	*($14 + [128]) = [0]
	*(($14 + [132])) = [0]
	*((($14 + [80]) + [56])) = [0]
	$6 = ($0 + [8])
	$8 = ($14 + [116])
	$7 = *($0 + [8])
	$11 = (int_64)0
	$10 = (int_64)59
	$5 = [2400]
	$12 = (int_64)0
	
.LOOP $label$4:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$9 }
	$9 = *($5)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$9 = ($9 + [165])
	goto $label$7 
	
.LABEL $label$9
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$5
	$5 = ($5 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$4 }
	*($14 + [72]) = $12
	*($14 + [64]) = $7
	$11 = (int_64)0
	$10 = (int_64)59
	$5 = [2944]
	$12 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$11 > (uint_64)(int_64)9) ){ goto $label$15 }
	$9 = *($5)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$9 = ($9 + [165])
	goto $label$13 
	
.LABEL $label$15
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$11
	$5 = ($5 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$10 }
	*($14 + [56]) = $12
	*($14 + [40]) = $2
	*($14 + [32]) = $1
	*($14 + [44]) = $3
	*($14 + [48]) = $4
	CALL $311($8, ($14 + [64]), $6, ($14 + [56]), ($14 + [32]))
	$11 = *(($0 + [8]))
	$13 = *(*(($0 + [56])) + [144])
	*(($14 + [100])) = [1]
	*($14 + [40]) = (int_64)0
	*($14 + [32]) = $13
	CALL $191(($14 + [64]), ($14 + [80]))
	$5 = [0]
	$9 = *($14 + [64])
	CALL send_deferred(($14 + [32]), $11, $9, (*($14 + [68]) - $9), [0])
	$9 = *($14 + [64])
	if ( ($9 == 0) ){ goto $label$16 }
	*($14 + [68]) = $9
	CALL $956($9)
	
.LABEL $label$16
	CALL $192(($14 + [80]))
	goto $label$1 
	
.LABEL $label$3
	CALL require_auth(*($0 + [8]))
	$11 = *($14 + [168])
	*($14 + [24]) = $11
	*($14 + [16 align=4]) = $11
	CALL $310($0, $1, $3, [0], ($14 + [167]), ($14 + [16]))
	
.LABEL $label$2
	$5 = *($14 + [167])
	
.LABEL $label$1
	*([0] + [4]) = ($14 + [176])
	return int_32(($5 << [24]) >> [24])
}

void .FUNC $307 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*(*($3)) = (*($1 + [8]) + [1])
	$4 = *($1)
	*($1) = *(*($3 + [4]))
	*($1 + [8]) = *(*($3))
	$3 = *($3)
	$8 = ($1 + [16])
	$10 = *($8)
	if ( ((int_32)$10 == (int_32)*(($1 + [20]))) ){ goto $label$2 }
	*($10) = *($3)
	*(($10 + [16])) = *(($3 + [16]))
	*(($10 + [8])) = *(($3 + [8]))
	*($8) = (*($8) + [20])
	$8 = ($1 + [12])
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [12])
	CALL $308($8, $3)
	
.LABEL $label$1
	$5 = ($1 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$6 = *($8)
	$10 = *(($1 + [16]))
	$7 = ($10 - $6)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[20]))
	$3 = [29]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$5 }
	$10 = (((int_32)((uint_32)($7 + [-20]) / (uint_32)[20]) * (int_32)[17]) + $3)
	goto $label$4 
	
.LABEL $label$5
	$10 = ($3 + [-17])
	
.LABEL $label$4
	if ( ($10 <= [513]) ){ goto $label$7 }
	$3 = CALL malloc($10)
	goto $label$6 
	
.LABEL $label$7
	$3 = ($12 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$6
	*($11) = $3
	$12 = ($3 + $10)
	*($11 + [8]) = $12
	CALL eosio_assert(((int_32)$10 > (int_32)[7]), [1920])
	CALL memcpy($3, $1, [8])
	$6 = ($3 + [8])
	CALL eosio_assert(((int_32)($12 - $6) > (int_32)[3]), [1920])
	CALL memcpy($6, $5, [4])
	*($11 + [4]) = ($3 + [12])
	CALL $180($11, $8)
	CALL db_update_i64(*($1 + [28]), $2, $3, $10)
	if ( ($10 <= [513]) ){ goto $label$8 }
	CALL free($3)
	
.LABEL $label$8
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $411 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [80])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [84])) = $6
	CALL $956($6)
	
.LABEL $label$11
	$6 = *($1 + [68])
	if ( ($6 == 0) ){ goto $label$12 }
	*(($1 + [72])) = $6
	CALL $956($6)
	
.LABEL $label$12
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL $956($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $305 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $1
	*($7 + [22]) = [0]
	*($7 + [16]) = [0]
	*($7 + [32]) = [0]
	*($7 + [28]) = $3
	*($7 + [20]) = $2
	*($7 + [23]) = $4
	*($7 + [24]) = $5
	$6 = *(($0 + [40]))
	$2 = *(($0 + [44]))
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$3 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$2 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [16])
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$7 }
	$4 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$5), [1536])
	$1 = *($0 + [8])
	if ( $4 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$4 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)8526756653867991040, $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$4 = CALL $178($5, $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$5), [1536])
	$1 = *($0 + [8])
	
.LABEL $label$6
	*($7 + [12]) = ($7 + [40])
	*($7 + [8]) = ($7 + [16])
	CALL eosio_assert([1], [1696])
	CALL $307($5, $4, $1, ($7 + [8]))
	goto $label$3 
	
.LABEL $label$5
	$1 = *($0 + [8])
	
.LABEL $label$4
	*($7 + [12]) = ($7 + [40])
	*($7 + [8]) = ($7 + [16])
	CALL $306($7, $5, $1, ($7 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $304 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	CALL eosio_assert([0], [2912])
}

void .FUNC $309 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	*(*(($7 = *($0 + [4])))) = [1]
	$2 = *($0)
	*($1) = *(*($7 + [4]))
	*($1 + [8]) = *(*($7))
	$7 = *($7)
	$4 = ($1 + [16])
	$9 = *($4)
	if ( ((int_32)$9 == (int_32)*(($1 + [20]))) ){ goto $label$2 }
	*($9) = *($7)
	*(($9 + [16])) = *(($7 + [16]))
	*(($9 + [8])) = *(($7 + [8]))
	$9 = (*($4) + [20])
	*($4) = $9
	$6 = ($1 + [12])
	goto $label$1 
	
.LABEL $label$2
	$6 = ($1 + [12])
	CALL $308($6, $7)
	$9 = *($4)
	
.LABEL $label$1
	$4 = ($1 + [8])
	$3 = *($6)
	$5 = ($9 - $3)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[20]))
	$7 = [29]
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$5 }
	$9 = (((int_32)((uint_32)($5 + [-20]) / (uint_32)[20]) * (int_32)[17]) + $7)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($7 + [-17])
	
.LABEL $label$4
	if ( ($9 <= [513]) ){ goto $label$7 }
	$7 = CALL malloc($9)
	goto $label$6 
	
.LABEL $label$7
	$7 = ($11 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$6
	*($10) = $7
	$11 = ($7 + $9)
	*($10 + [8]) = $11
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [1920])
	CALL memcpy($7, $1, [8])
	$3 = ($7 + [8])
	CALL eosio_assert(((int_32)($11 - $3) > (int_32)[3]), [1920])
	CALL memcpy($3, $4, [4])
	*($10 + [4]) = ($7 + [12])
	CALL $180($10, $6)
	$8 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)8526756653867991040, *(*($0 + [8])), $8, $7, $9)
	if ( ($9 <= [513]) ){ goto $label$8 }
	CALL free($7)
	
.LABEL $label$8
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$9 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $410 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	CALL $412(*($0 + [4]), $1)
	$4 = *($1 + [68])
	$3 = *(($1 + [72]))
	$5 = ($3 - $4)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [6]))
	$7 = [66]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	$7 = ((((int_32)uint_32(($5 + [-64]) >> [6]) * (int_32)[42]) + $7) + [42])
	
.LABEL $label$2
	$4 = *($1 + [80])
	$3 = *(($1 + [84]))
	$5 = ($3 - $4)
	$6 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[56]))
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$4 }
	$7 = ((((int_32)((uint_32)($5 + [-56]) / (uint_32)[56]) * (int_32)[41]) + $7) + [41])
	
.LABEL $label$4
	if ( ($7 <= [513]) ){ goto $label$6 }
	$8 = CALL malloc($7)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($8 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$5
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $7)
	CALL $403($9, $1)
	$6 = *($1)
	*($1 + [96]) = CALL db_store_i64(*($2 + [8]), (int_64)-4992616317627400192, *(*($0 + [8])), $6, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL free($8)
	
.LABEL $label$7
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $926 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [16]) = (*($1 + [16]) + *(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [56]) = ($5 + [39])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $283(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $5, [39])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $435 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	$6 = *($0 + [4])
	*($1) = *(*($6))
	$7 = *($6 + [4])
	CALL eosio_assert(((int_64)*(($7 + [48])) == (int_64)*(($1 + [16]))), [4096])
	$5 = ((int_64)*($1 + [8]) + (int_64)*($7 + [40]))
	*($1 + [8]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [4176])
	*($1 + [56]) = [1]
	$7 = *($6 + [4])
	$6 = ($1 + [72])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)*(($1 + [76]))) ){ goto $label$2 }
	CALL memcpy($4, $7, [64])
	$7 = (*($6) + [64])
	*($6) = $7
	$4 = ($1 + [68])
	goto $label$1 
	
.LABEL $label$2
	$4 = ($1 + [68])
	CALL $434($4, $7)
	$7 = *($6)
	
.LABEL $label$1
	$4 = *($4)
	$3 = ($7 - $4)
	$5 = (CASTING uint_64)(uint_32 int_32($3 >> [6]))
	$6 = [66]
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$4 }
	$6 = ((((int_32)uint_32(($3 + [-64]) >> [6]) * (int_32)[42]) + $6) + [42])
	
.LABEL $label$4
	$4 = *($1 + [80])
	$7 = *(($1 + [84]))
	$3 = ($7 - $4)
	$5 = (CASTING uint_64)(uint_32 ((int_32)$3 / (int_32)[56]))
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$6 }
	$6 = ((((int_32)((uint_32)($3 + [-56]) / (uint_32)[56]) * (int_32)[41]) + $6) + [41])
	
.LABEL $label$6
	if ( ($6 <= [513]) ){ goto $label$8 }
	$7 = CALL malloc($6)
	goto $label$7 
	
.LABEL $label$8
	$7 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$7
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $6)
	CALL $403($8, $1)
	$5 = *($1)
	*($1 + [96]) = CALL db_store_i64(*($2 + [8]), (int_64)-4992616317627400192, *(*($0 + [8])), $5, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$9 }
	CALL free($7)
	
.LABEL $label$9
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$10 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $434 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [6])
	$7 = ($2 + [1])
	if ( ((uint_32)$7 >= (uint_32)[67108864]) ){ goto $label$3 }
	$4 = [67108863]
	$3 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($3 >> [6]) > (uint_32)[33554430]) ){ goto $label$5 }
	$4 = int_32($3 >> [5])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[67108864]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $955(($4 << [6]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$6 = ($6 - $5)
	$2 = CALL memcpy(($7 + ($2 << [6])), $1, [64])
	$1 = ($2 - $6)
	$4 = ($7 + ($4 << [6]))
	$7 = ($2 + [64])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $956($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $437 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	$2 = *($0)
	$8 = *($0 + [4])
	$6 = *($8)
	*(($9 = $10) + [6]) = [0]
	*($9 + [4]) = *($6 + [12])
	*($9) = *($6 + [8])
	*($1) = *(*($8 + [4]))
	$6 = ($1 + [12])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($8) = *($9)
	$8 = (*($6) + [8])
	*($6) = $8
	$5 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$5 = ($1 + [8])
	CALL $439($5, $9)
	$8 = *($6)
	
.LABEL $label$1
	$3 = *($5)
	$4 = ($8 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($4 >> [3]))
	$6 = [8]
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$4 }
	$6 = ((((int_32)uint_32(($4 + [-8]) >> [3]) * (int_32)[7]) + $6) + [7])
	
.LABEL $label$4
	if ( ($6 <= [513]) ){ goto $label$6 }
	$8 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$5
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [1920])
	CALL memcpy($8, $1, [8])
	*($9 + [4]) = ($8 + [8])
	CALL $436($9, $5)
	$7 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-4315240091392933888, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($8)
	
.LABEL $label$7
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $436 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [1920])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[3]), [1920])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, [4])
	$6 = (*($4) + [4])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[1]), [1920])
	CALL memcpy(*($4), ($7 + [4]), [2])
	$6 = (*($4) + [2])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[0]), [1920])
	CALL memcpy(*($4), ($7 + [6]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	$7 = ($7 + [8])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $431 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $955([104])
	CALL $409($3)
	*($3 + [92]) = $1
	CALL $435(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [96])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $411(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [80])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($1 + [84])) = $3
	CALL $956($3)
	
.LABEL $label$4
	$3 = *($1 + [68])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($1 + [72])) = $3
	CALL $956($3)
	
.LABEL $label$5
	CALL $956($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $430 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [1920])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), $2, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $433 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = *($1 + [68])
	$6 = ($1 + [72])
	$2 = *($6)
	if ( (int_32(($2 - $3) >> [6]) <= [5]) ){ goto $label$1 }
	$4 = ($3 + [64])
	$5 = ($2 - $4)
	$2 = int_32($5 >> [6])
	if ( ($2 == 0) ){ goto $label$2 }
	CALL memmove($3, $4, $5)
	
.LABEL $label$2
	*(($1 + [72])) = ($3 + ($2 << [6]))
	
.LABEL $label$1
	$3 = *($0)
	CALL eosio_assert(((int_64)*(($3 + [48])) == (int_64)*(($1 + [16]))), [4096])
	$7 = ((int_64)*($1 + [8]) + (int_64)*($3 + [40]))
	*($1 + [8]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [4176])
	*($1 + [56]) = (*($1 + [56]) + [1])
	$0 = *($0)
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)*(($1 + [76]))) ){ goto $label$3 }
	CALL memcpy($3, $0, [64])
	*(($1 = ($1 + [72]))) = (*($1) + [64])
	return 
	
.LABEL $label$3
	CALL $434(($1 + [68]), $0)
}

void .FUNC $432 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [92]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	CALL $433($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$6 = *($1 + [68])
	$5 = *(($1 + [72]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [6]))
	$3 = [66]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = ((((int_32)uint_32(($7 + [-64]) >> [6]) * (int_32)[42]) + $3) + [42])
	
.LABEL $label$2
	$6 = *($1 + [80])
	$5 = *(($1 + [84]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[56]))
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$3 = ((((int_32)((uint_32)($7 + [-56]) / (uint_32)[56]) * (int_32)[41]) + $3) + [41])
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$9 = CALL malloc($3)
	goto $label$5 
	
.LABEL $label$6
	$9 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$5
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $3)
	CALL $403($10, $1)
	CALL db_update_i64(*($1 + [96]), $2, $9, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL free($9)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $439 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $955(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $956($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $438 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $956($6)
	
.LABEL $label$11
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $956($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $282 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [12]) = *(*($3))
	$4 = *($1)
	*($1 + [16]) = (CASTING uint_32)(float_64 ((float_64)*(*($3 + [4])) + (float_64)(CASTING float_64)(uint_32 *($1 + [16]))))
	$3 = *(*($3 + [8]))
	if ( ((int_32)*($1 + [20]) >= (int_32)$3) ){ goto $label$1 }
	*(($1 + [20])) = $3
	
.LABEL $label$1
	CALL eosio_assert([1], [1856])
	$6 = $6
	$3 = ($6 + [-48])
	*([0] + [4]) = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($6 + [-9])
	CALL $283($5, $1)
	CALL db_update_i64(*($1 + [44]), $2, $3, [39])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $283 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [9]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [10]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [12]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [20]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [22]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $129 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *(($0 + [152]))
	if ( ($3 == 0) ){ goto $label$1 }
	$1 = ($0 + [156])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$6 }
	CALL $956(*(($2 + [48])))
	
.LABEL $label$6
	CALL $956($2)
	
.LABEL $label$5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	$5 = *(($0 + [152]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $3
	
.LABEL $label$2
	*($1) = $3
	CALL $956($5)
	
.LABEL $label$1
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$7 }
	$4 = ($0 + [116])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	$3 = *($2 + [32])
	if ( ($3 == 0) ){ goto $label$12 }
	*(($2 + [36])) = $3
	CALL $956($3)
	
.LABEL $label$12
	CALL $956($2)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$10 }
	$5 = *(($0 + [112]))
	goto $label$8 
	
.LABEL $label$9
	$5 = $1
	
.LABEL $label$8
	*($4) = $1
	CALL $956($5)
	
.LABEL $label$7
	$3 = *(($0 + [72]))
	if ( ($3 == 0) ){ goto $label$13 }
	$1 = ($0 + [76])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$17 }
	CALL $956($2)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$16 }
	$5 = *(($0 + [72]))
	goto $label$14 
	
.LABEL $label$15
	$5 = $3
	
.LABEL $label$14
	*($1) = $3
	CALL $956($5)
	
.LABEL $label$13
	$3 = *(($0 + [32]))
	if ( ($3 == 0) ){ goto $label$18 }
	$1 = ($0 + [36])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$20 }
	
.LOOP $label$21:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$22 }
	CALL $956($2)
	
.LABEL $label$22
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$21 }
	$5 = *(($0 + [32]))
	goto $label$19 
	
.LABEL $label$20
	$5 = $3
	
.LABEL $label$19
	*($1) = $3
	CALL $956($5)
	
.LABEL $label$18
	return $0
}

int_32 .FUNC $128 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [1088]))
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [1092])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = *($2 + [80])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [84])) = $3
	CALL $956($3)
	
.LABEL $label$6
	$3 = *($2 + [68])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($2 + [72])) = $3
	CALL $956($3)
	
.LABEL $label$7
	CALL $956($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$4 }
	$2 = *(($0 + [1088]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $956($2)
	
.LABEL $label$1
	CALL $129(($0 + [880]))
	$3 = *(($0 + [840]))
	if ( ($3 == 0) ){ goto $label$8 }
	$1 = ($0 + [844])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $956($5)
	
.LABEL $label$12
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($0 + [840]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LABEL $label$9
	*($1) = $3
	CALL $956($2)
	
.LABEL $label$8
	$3 = *(($0 + [800]))
	if ( ($3 == 0) ){ goto $label$13 }
	$1 = ($0 + [804])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$17 }
	CALL $956($5)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($0 + [800]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $3
	
.LABEL $label$14
	*($1) = $3
	CALL $956($2)
	
.LABEL $label$13
	*($0 + [664]) = [1332]
	$2 = *(($0 + [732]))
	if ( ($2 == 0) ){ goto $label$18 }
	*(($0 + [736])) = $2
	CALL $956($2)
	
.LABEL $label$18
	$1 = *(($0 + [704]))
	if ( ($1 == 0) ){ goto $label$19 }
	$4 = ($0 + [708])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$21 }
	
.LOOP $label$22:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$23 }
	$3 = *($5 + [12])
	if ( ($3 == 0) ){ goto $label$24 }
	*(($5 + [16])) = $3
	CALL $956($3)
	
.LABEL $label$24
	CALL $956($5)
	
.LABEL $label$23
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$22 }
	$2 = *(($0 + [704]))
	goto $label$20 
	
.LABEL $label$21
	$2 = $1
	
.LABEL $label$20
	*($4) = $1
	CALL $956($2)
	
.LABEL $label$19
	*($0 + [560]) = [1372]
	$2 = *(($0 + [628]))
	if ( ($2 == 0) ){ goto $label$25 }
	*(($0 + [632])) = $2
	CALL $956($2)
	
.LABEL $label$25
	$1 = *(($0 + [600]))
	if ( ($1 == 0) ){ goto $label$26 }
	$4 = ($0 + [604])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$28 }
	
.LOOP $label$29:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$30 }
	$3 = *($5 + [12])
	if ( ($3 == 0) ){ goto $label$31 }
	*(($5 + [16])) = $3
	CALL $956($3)
	
.LABEL $label$31
	CALL $956($5)
	
.LABEL $label$30
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$29 }
	$2 = *(($0 + [600]))
	goto $label$27 
	
.LABEL $label$28
	$2 = $1
	
.LABEL $label$27
	*($4) = $1
	CALL $956($2)
	
.LABEL $label$26
	*($0 + [472]) = [1412]
	$2 = *(($0 + [548]))
	if ( ($2 == 0) ){ goto $label$32 }
	*(($0 + [552])) = $2
	CALL $956($2)
	
.LABEL $label$32
	$1 = *(($0 + [512]))
	if ( ($1 == 0) ){ goto $label$33 }
	$4 = ($0 + [516])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$35 }
	
.LOOP $label$36:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$37 }
	$3 = *($5 + [8])
	if ( ($3 == 0) ){ goto $label$38 }
	*(($5 + [12])) = $3
	CALL $956($3)
	
.LABEL $label$38
	CALL $956($5)
	
.LABEL $label$37
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$36 }
	$2 = *(($0 + [512]))
	goto $label$34 
	
.LABEL $label$35
	$2 = $1
	
.LABEL $label$34
	*($4) = $1
	CALL $956($2)
	
.LABEL $label$33
	*($0 + [328]) = [792]
	$2 = *(($0 + [456]))
	if ( ($2 == 0) ){ goto $label$39 }
	*(($0 + [460])) = $2
	CALL $956($2)
	
.LABEL $label$39
	CALL $130(($0 + [440]))
	*(($0 + [328])) = [1460]
	$2 = *(($0 + [404]))
	if ( ($2 == 0) ){ goto $label$40 }
	*(($0 + [408])) = $2
	CALL $956($2)
	
.LABEL $label$40
	$1 = *(($0 + [368]))
	if ( ($1 == 0) ){ goto $label$41 }
	$4 = ($0 + [372])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$43 }
	
.LOOP $label$44:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$45 }
	$3 = *($5 + [8])
	if ( ($3 == 0) ){ goto $label$46 }
	*(($5 + [12])) = $3
	CALL $956($3)
	
.LABEL $label$46
	CALL $956($5)
	
.LABEL $label$45
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$44 }
	$2 = *(($0 + [368]))
	goto $label$42 
	
.LABEL $label$43
	$2 = $1
	
.LABEL $label$42
	*($4) = $1
	CALL $956($2)
	
.LABEL $label$41
	$3 = *(($0 + [248]))
	if ( ($3 == 0) ){ goto $label$47 }
	$1 = ($0 + [252])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$49 }
	
.LOOP $label$50:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$51 }
	CALL $956($5)
	
.LABEL $label$51
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$50 }
	$2 = *(($0 + [248]))
	goto $label$48 
	
.LABEL $label$49
	$2 = $3
	
.LABEL $label$48
	*($1) = $3
	CALL $956($2)
	
.LABEL $label$47
	$3 = *(($0 + [192]))
	if ( ($3 == 0) ){ goto $label$52 }
	$1 = ($0 + [196])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$54 }
	
.LOOP $label$55:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$56 }
	CALL $956($5)
	
.LABEL $label$56
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$55 }
	$2 = *(($0 + [192]))
	goto $label$53 
	
.LABEL $label$54
	$2 = $3
	
.LABEL $label$53
	*($1) = $3
	CALL $956($2)
	
.LABEL $label$52
	CALL $131(($0 + [8]))
	return $0
}

void .FUNC $286 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	$11 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	CALL $287($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$3 = [12]
	$5 = ($1 + [12])
	$7 = *($1 + [12])
	$6 = *(($1 + [16]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$8 / (int_32)[12]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	$3 = ((((int_32)((uint_32)($8 + [-12]) / (uint_32)[12]) * (int_32)[10]) + $3) + [10])
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$10 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$10 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$3
	*($11) = $10
	$6 = ($10 + $3)
	*($11 + [8]) = $6
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [1920])
	CALL memcpy($10, $1, [8])
	$7 = ($10 + [8])
	CALL eosio_assert(((int_32)($6 - $7) > (int_32)[3]), [1920])
	CALL memcpy($7, ($1 + [8]), [4])
	*($11 + [4]) = ($10 + [12])
	CALL $217($11, $5)
	CALL db_update_i64(*($1 + [28]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($10)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $287 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = ($1 + [12])
	$6 = *($1 + [8])
	$5 = *(*($0))
	$3 = *($5 + [2])
	if ( ($3 == 0) ){ goto $label$1 }
	*(($4 = ($7 + [8]))) = [0]
	*($7 + [4]) = $3
	$6 = ($6 + [1])
	*($7) = $6
	$5 = ($1 + [16])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)*(($1 + [20]))) ){ goto $label$3 }
	*($3) = *($7)
	*(($3 + [8])) = *($4)
	*($5) = (*($5) + [12])
	goto $label$2 
	
.LABEL $label$3
	CALL $218($2, $7)
	
.LABEL $label$2
	$5 = *(*($0))
	
.LABEL $label$1
	$3 = *($5 + [4])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($4 = ($7 + [8]))) = [0]
	*($7 + [4]) = $3
	$6 = ($6 + [1])
	*($7) = $6
	$5 = ($1 + [16])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)*(($1 + [20]))) ){ goto $label$6 }
	*($3) = *($7)
	*(($3 + [8])) = *($4)
	*($5) = (*($5) + [12])
	goto $label$5 
	
.LABEL $label$6
	CALL $218($2, $7)
	
.LABEL $label$5
	$5 = *(*($0))
	
.LABEL $label$4
	$5 = *($5 + [6])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($4 = ($7 + [8]))) = [0]
	*($7 + [4]) = $5
	$6 = ($6 + [1])
	*($7) = $6
	$5 = ($1 + [16])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)*(($1 + [20]))) ){ goto $label$8 }
	*($3) = *($7)
	*(($3 + [8])) = *($4)
	*($5) = (*($5) + [12])
	goto $label$7 
	
.LABEL $label$8
	CALL $218($2, $7)
	
.LABEL $label$7
	*(($1 + [8])) = $6
	*($1) = *(*($0 + [4]))
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $284 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([40]))) = (int_64)0
	*($3 + [12 align=4]) = (int_64)0
	*($3 + [20]) = [0]
	*($3 + [24]) = $1
	CALL $289(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $288(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [12])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [16])) = $1
	CALL $956($1)
	
.LABEL $label$4
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $285 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $955([40]))) = (int_64)0
	*($6 + [12 align=4]) = (int_64)0
	*($6 + [20]) = [0]
	*($6 + [24]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [1632])
	CALL memcpy($6, $4, [8])
	$3 = ($4 + [8])
	CALL eosio_assert(((uint_32)($7 - $3) > (uint_32)[3]), [1632])
	CALL memcpy(($6 + [8]), $3, [4])
	*($8 + [36]) = ($4 + [12])
	CALL $219(($8 + [32]), ($6 + [12]))
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $288(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [12])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [16])) = $7
	CALL $956($7)
	
.LABEL $label$10
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $534 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [1632])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $491(*($1), *($0 + [12]))
}

int_32 .FUNC $535 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1648])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$5 = *($1 + [4])
	$3 = ((int_32)($5 - $4) / (int_32)[56])
	$7 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$7 <= (uint_32)$3) ){ goto $label$4 }
	CALL $536($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$5 }
	$5 = ($4 + ((int_32)$7 * (int_32)[56]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	CALL $174($0, $4)
	$4 = ($4 + [56])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [80])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	CALL $561(($6 + [16]), $4, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	*(($1 = (($6 + [32]) + [8]))) = *((($6 + [16]) + [8]))
	*($6 + [32]) = *($6 + [16])
	*((($6 + [48]) + [8])) = *($1)
	*($6 + [48]) = *($6 + [32])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$3 = *((($6 + [48]) + [8]))
	*((($6 + [64]) + [8])) = $3
	*(($6 + [8])) = $3
	$3 = *($6 + [48])
	*($6 + [64]) = $3
	*($6) = $3
	CALL void $1((int_32 $6), (int_32 $5))
	*([0] + [4]) = ($6 + [80])
	return [1]
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	CALL require_auth(*($0))
	*(($2 = (($4 + [16]) + [8]))) = *(($1 + [8]))
	$3 = *($1)
	*(($4 + [12])) = *((($4 + [16]) + [12]))
	*(($4 + [8])) = *($2)
	*($4 + [16]) = $3
	*($4 + [4]) = *($4 + [20])
	*($4) = *($4 + [16])
	CALL $376(($0 + [880]), $4)
	*([0] + [4]) = ($4 + [32])
}

int_32 .FUNC $530 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $491($0, ($1 + [40]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $126 (int_32 $0, int_64 $1, int_64 $2)
{
	CALL $353(($0 + [8]), $1, $2, $0)
}

void .FUNC $532 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $533 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [3776])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $534(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $722 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	CALL eosio_assert([1], [1920])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $888 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [16]) = (*($1 + [16]) + [1000])
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [40]) = ($5 + [21])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $212(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [28]), $2, $5, [21])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $889 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	*($6 + [88]) = $2
	*($6 + [80]) = $3
	*($6 + [79]) = $1
	CALL require_auth(*($0))
	*(($6 + [64])) = [0]
	*($6 + [48]) = (int_64)-1
	*($6 + [56]) = (int_64)0
	$3 = *($0)
	*($6 + [32]) = $3
	*($6 + [40]) = $3
	$1 = CALL db_find_i64($3, $3, (int_64)-4992616317144530944, (CASTING uint_64)(uint_32 $1))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL $511(($6 + [32]), $1)
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)($6 + [32])), [1536])
	$3 = *($0)
	*($6 + [20]) = ($6 + [80])
	*($6 + [16]) = ($6 + [88])
	CALL eosio_assert([1], [1696])
	CALL $891(($6 + [32]), $1, $3, ($6 + [16]))
	$4 = *($6 + [56])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$3 = *($0)
	*($6 + [20]) = ($6 + [88])
	*($6 + [16]) = ($6 + [79])
	*($6 + [24]) = ($6 + [80])
	CALL $890(($6 + [8]), ($6 + [32]), $3, ($6 + [16]))
	$4 = *($6 + [56])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($6 + [60])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $956($1)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [56]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$4
	*($5) = $4
	CALL $956($0)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [96])
}

int_32 .FUNC vfprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [288])
	*([0] + [4]) = $7
	*($7 + [284]) = $2
	$6 = [0]
	CALL memset(($7 + [240]), [0], [40])
	*($7 + [280]) = *($7 + [284])
	$2 = [-1]
	if ( ((int_32)CALL $983([0], $1, ($7 + [280]), ($7 + [80]), ($7 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL __lockfile($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) > (int_32)[0]) ){ goto $label$3 }
	*($0) = ($2 & [-33])
	
.LABEL $label$3
	$3 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	$2 = CALL $983($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	goto $label$4 
	
.LABEL $label$5
	*(($5 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($7 + [80])
	*($0 + [28]) = $7
	*($0 + [20]) = $7
	$4 = *($0 + [44])
	*($0 + [44]) = $7
	$2 = CALL $983($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	if ( ($4 == 0) ){ goto $label$4 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $4
	*($5) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$4 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $4 )
	
.LABEL $label$4
	$1 = *($0)
	*($0) = ($1 | $3)
	$1 = ($1 & [32])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL __unlockfile($0)
	
.LABEL $label$6
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [288])
	return $2
}

void .FUNC $880 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	$5 = ($1 + [8])
	CALL $958($5, *($3))
	CALL $958(($1 + [20]), *($3 + [4]))
	*($1 + [40]) = (*($1 + [40]) + [1])
	if ( (*(*($3 + [8])) == 0) ){ goto $label$1 }
	*($1 + [32]) = [0]
	*($1 + [36]) = [0]
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$3 = *($5)
	$5 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [25])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	$5 = *(($1 + [20]))
	$5 = ( *(($1 + [24])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = ($5 + $3)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	if ( ($3 <= [513]) ){ goto $label$5 }
	$7 = CALL malloc($3)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$4
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $3)
	CALL $868($8, $1)
	CALL db_update_i64(*($1 + [60]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$6 }
	CALL free($7)
	
.LABEL $label$6
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $682 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $955([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $194(($8 + [28]), [14])
	$2 = *($8 + [28])
	$1 = (*($2) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [1920])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[1]), [1920])
	CALL memcpy(($2 + [8]), ($4 + [8]), [2])
	CALL eosio_assert(((int_32)($1 + [-10]) > (int_32)[3]), [1920])
	CALL memcpy(($2 + [10]), ($4 + [12]), [4])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($4 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$1 = ([0] - $4)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $956($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $956($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $956($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $882 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [80])
	*([0] + [4]) = $12
	*($12 + [46]) = $2
	CALL require_auth($1)
	$9 = CALL publication_time()
	$8 = [0]
	$10 = *([0] + [12])
	*(($12 + [32])) = [0]
	*($12 + [16]) = (int_64)-1
	$11 = *($0)
	*($12) = $11
	*($12 + [8]) = $11
	*($12 + [24]) = (int_64)0
	$7 = (CASTING uint_32)(uint_64 (int_64))(((uint_64)$9 / (uint_64)(int_64)1000000) - $10))
	$3 = CALL db_lowerbound_i64($11, $11, (int_64)7176362860912574464, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	CALL $806($12, $3)
	$8 = [1]
	$2 = *($12 + [46])
	
.LABEL $label$1
	CALL eosio_assert($8, [9440])
	$8 = ($12 + [8])
	CALL eosio_assert(((int_32)*(CALL $806($12, CALL $fimport$18(*($12), *($8), (int_64)7176362860912574464, (int_64)0)) + [8]) == (int_32)int_32(($2 << [16]) >> [16])), [9440])
	CALL eosio_assert(((uint_32)*(CALL $806($12, CALL $fimport$18(*($12), *($8), (int_64)7176362860912574464, (int_64)0)) + [16]) >= (uint_32)$7), [9456])
	$5 = *(($0 + [112]))
	$7 = *(($0 + [116]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$2 = ($7 + [-24])
	$3 = ([0] - $5)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$1) ){ goto $label$2 }
	$7 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$8 = ($0 + [88])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$8 }
	$2 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [60]) == (int_32)$8), [1536])
	if ( $2 ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$2 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-6030912128150405120, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	$2 = CALL $156($8, $2)
	CALL eosio_assert(((int_32)*($2 + [60]) == (int_32)$8), [1536])
	goto $label$6 
	
.LABEL $label$7
	CALL $454(($12 + [56]), $0, $1)
	$2 = *($12 + [60])
	if ( ($2 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert(((int_32)*($2 + [18]) < (int_32)*($12 + [46])), [9488])
	$11 = *($0)
	*($12 + [56]) = ($12 + [46])
	CALL eosio_assert([1], [1696])
	CALL $883($8, $2, $11, ($12 + [56]))
	goto $label$4 
	
.LABEL $label$5
	$2 = *($12 + [46])
	*($12 + [72]) = $1
	*($12 + [71]) = [0]
	*($12 + [68]) = $2
	$11 = *($0)
	*($12 + [60]) = ($12 + [71])
	*($12 + [56]) = ($12 + [72])
	*($12 + [64]) = ($12 + [68])
	CALL $243(($12 + [48]), $8, $11, ($12 + [56]))
	
.LABEL $label$4
	$4 = *(CALL $806($12, CALL $fimport$18(*($12), *(($12 + [8])), (int_64)7176362860912574464, (int_64)0)) + [12])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9520])
	$6 = *(($5 + [32]))
	$5 = *($0 + [128])
	$7 = *(($5 + [36]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$9 }
	$2 = ($7 + [-24])
	$3 = ([0] - $6)
	
.LOOP $label$10:
	if ( ((int_64)*(*($2)) == (int_64)$1) ){ goto $label$9 }
	$7 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$10 }
	
.LABEL $label$9
	$8 = ($5 + [8])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$12 }
	$2 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$8), [1536])
	goto $label$11 
	
.LABEL $label$12
	$2 = [0]
	$7 = CALL db_find_i64(*(($5 + [8])), *(($5 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	$2 = CALL $186($8, $7)
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$8), [1536])
	
.LABEL $label$11
	$8 = *(($0 + [128]))
	*($12 + [56]) = $4
	$1 = *($8)
	*($12 + [72]) = ($12 + [56])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [1696])
	CALL $496(($8 + [8]), $2, $1, ($12 + [72]))
	$7 = *($12 + [24])
	if ( ($7 == 0) ){ goto $label$13 }
	$3 = ($12 + [28])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$8 = *($2)
	*($2) = [0]
	if ( ($8 == 0) ){ goto $label$17 }
	CALL $956($8)
	
.LABEL $label$17
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($12 + [24]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $7
	
.LABEL $label$14
	*($3) = $7
	CALL $956($2)
	
.LABEL $label$13
	*([0] + [4]) = ($12 + [80])
}

void .FUNC $883 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [18]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [72]) = ($5 + [60])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $224(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [64]), $2, $5, [60])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $884 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [32])
	*([0] + [4]) = $15
	CALL require_auth($1)
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [9536])
	$8 = *(($0 + [32]))
	$11 = *(($0 + [36]))
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$1 }
	$10 = ($11 + [-24])
	$4 = ([0] - $8)
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$1 }
	$11 = $10
	$5 = ($10 + [-24])
	$10 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [8])
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$4 }
	$12 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [24]) == (int_32)$3), [1536])
	goto $label$3 
	
.LABEL $label$4
	$12 = [0]
	$10 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	$12 = CALL $186($3, $10)
	CALL eosio_assert(((int_32)*($12 + [24]) == (int_32)$3), [1536])
	
.LABEL $label$3
	$8 = *(($0 + [32]))
	$11 = *(($0 + [36]))
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$5 }
	$10 = ($11 + [-24])
	$4 = ([0] - $8)
	
.LOOP $label$6:
	if ( ((int_64)*(*($10)) == (int_64)$2) ){ goto $label$5 }
	$11 = $10
	$5 = ($10 + [-24])
	$10 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$8 }
	$13 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$3), [1536])
	goto $label$7 
	
.LABEL $label$8
	$13 = [0]
	$10 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-6030912142679474176, $2)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$7 }
	$13 = CALL $186($3, $10)
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$3), [1536])
	
.LABEL $label$7
	$6 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($6, [2368])
	$7 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($7, [2368])
	CALL eosio_assert(((int_32)*($12 + [12]) != (int_32)[0]), [9552])
	CALL eosio_assert(((int_32)*($13 + [12]) != (int_32)[0]), [9584])
	$14 = *(($0 + [112]))
	$11 = *(($0 + [116]))
	if ( ((int_32)$11 == (int_32)$14) ){ goto $label$9 }
	$10 = ($11 + [-24])
	$4 = ([0] - $14)
	
.LOOP $label$10:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$9 }
	$11 = $10
	$5 = ($10 + [-24])
	$10 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$10 }
	
.LABEL $label$9
	$8 = ($0 + [88])
	if ( ((int_32)$11 == (int_32)$14) ){ goto $label$12 }
	$14 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [60]) == (int_32)$8), [1536])
	goto $label$11 
	
.LABEL $label$12
	$14 = [0]
	$10 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-6030912128150405120, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$11 }
	$14 = CALL $156($8, $10)
	CALL eosio_assert(((int_32)*($14 + [60]) == (int_32)$8), [1536])
	
.LABEL $label$11
	$9 = *(($0 + [112]))
	$11 = *(($0 + [116]))
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$13 }
	$10 = ($11 + [-24])
	$4 = ([0] - $9)
	
.LOOP $label$14:
	if ( ((int_64)*(*($10)) == (int_64)$2) ){ goto $label$13 }
	$11 = $10
	$5 = ($10 + [-24])
	$10 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$17 }
	$10 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [60]) == (int_32)$8), [1536])
	if ( $14 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$17
	$10 = [0]
	$5 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-6030912128150405120, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$18 }
	$10 = CALL $156($8, $5)
	CALL eosio_assert(((int_32)*($10 + [60]) == (int_32)$8), [1536])
	
.LABEL $label$18
	if ( $14 ){ goto $label$15 }
	
.LABEL $label$16
	CALL $454(($15 + [8]), $0, $1)
	$14 = *($15 + [12])
	
.LABEL $label$15
	if ( $10 ){ goto $label$19 }
	CALL $454(($15 + [8]), $0, $2)
	$10 = *($15 + [12])
	
.LABEL $label$19
	if ( ($14 == 0) ){ goto $label$23 }
	$5 = *($14 + [16])
	CALL eosio_assert(((int_32)uint_32($5 >> [7]) ^ (int_32)[1]), [9632])
	CALL eosio_assert((($5 & [124]) <= [100]), [9680])
	$1 = *($0)
	CALL eosio_assert([1], [1696])
	CALL $885($8, $14, $1, ($15 + [8]))
	if ( $10 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	*($15 + [24]) = $1
	*($15 + [23]) = [129]
	*($15 + [20]) = [0]
	$1 = *($0)
	*($15 + [12]) = ($15 + [23])
	*($15 + [8]) = ($15 + [24])
	*($15 + [16]) = ($15 + [20])
	CALL $243($15, $8, $1, ($15 + [8]))
	if ( ($10 == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL eosio_assert(((*($10 + [16]) & [124]) <= [100]), [9728])
	$1 = *($0)
	CALL eosio_assert([1], [1696])
	CALL $886($8, $10, $1, ($15 + [8]))
	goto $label$20 
	
.LABEL $label$21
	*($15 + [24]) = $2
	*($15 + [23]) = [1]
	*($15 + [20]) = [0]
	$1 = *($0)
	*($15 + [12]) = ($15 + [23])
	*($15 + [8]) = ($15 + [24])
	*($15 + [16]) = ($15 + [20])
	CALL $243($15, $8, $1, ($15 + [8]))
	
.LABEL $label$20
	$1 = *($0)
	CALL eosio_assert($6, [1696])
	CALL $887($3, $12, $1, ($15 + [8]))
	$1 = *($0)
	CALL eosio_assert($7, [1696])
	CALL $888($3, $13, $1, ($15 + [8]))
	*([0] + [4]) = ($15 + [32])
}

void .FUNC $885 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [16]) = ((*($1 + [16]) | [128]) + [1])
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [72]) = ($5 + [60])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $224(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [64]), $2, $5, [60])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $886 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [16]) = (*($1 + [16]) + [1])
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [72]) = ($5 + [60])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $224(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [64]), $2, $5, [60])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

int_32 .FUNC $683 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $955([40])
	$6 = CALL $690($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [32])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $691(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [16])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [20])) = $7
	CALL $956($7)
	
.LABEL $label$10
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $479 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $955(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $480(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

int_32 .FUNC $529 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $384($0, ($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $478 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0) = (int_64)0
	CALL $481(($0 + [8]))
	*(($0 + [128])) = (int_64)0
	$4 = [0]
	*($0 + [120]) = [0]
	*(($0 + [136])) = (int_64)0
	*(($5 = ($0 + [144]))) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$3 = (uint_64)*($5) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [3776])
	*(($0 + [160])) = (int_64)0
	*(($0 + [152])) = (int_64)0
	*(($0 + [168])) = (int_64)0
	*(($0 + [176])) = [0]
	*($0 + [184]) = (int_64)0
	*($0 + [192]) = (int_64)0
	*($0 + [200]) = $1
	CALL $482(*($2 + [4]), $0)
	*($0 + [204]) = *(*($2 + [8]))
	return $0
}

void .FUNC $528 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL $956(*(($1 + [48])))
	
.LABEL $label$11
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $956($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $876 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$2 = *($1)
	CALL $972(($4 + [16]), ($1 + [8]))
	CALL $972($4, ($1 + [20]))
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*(*($0)) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL void $0((int_32 $2), (int_64 ($4 + [16])), (int_32 $4), (int_32 $1))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	CALL $956(*($4 + [8]))
	
.LABEL $label$2
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $956(*($4 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $758 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($2 + [8]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $633(*($1), ($2 + [12]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($2 + [24]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($2 + [28]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $295 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [16]) = (*($1 + [16]) - *(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [56]) = ($5 + [39])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $283(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $5, [39])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $573 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	$11 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*((*($1 + [8]) + (*(*($3)) << [3])) + [6]) = [0]
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	$3 = [8]
	$5 = ($1 + [8])
	$7 = *($1 + [8])
	$6 = *(($1 + [12]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	$3 = ((((int_32)uint_32(($8 + [-8]) >> [3]) * (int_32)[7]) + $3) + [7])
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$10 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$10 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$3
	*($11) = $10
	*($11 + [8]) = ($10 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [1920])
	CALL memcpy($10, $1, [8])
	*($11 + [4]) = ($10 + [8])
	CALL $436($11, $5)
	CALL db_update_i64(*($1 + [24]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($10)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($11 + [16])
}

void .FUNC __unlockfile (int_32 $0)
{
}

void .FUNC $294 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $750 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$11 = (*([0] + [4]) - [16])
	*([0] + [4]) = $11
	$2 = *($0)
	$10 = *($0 + [4])
	*(($12 = $11)) = [0]
	$7 = *($10)
	*($12 + [2]) = [1]
	*($12 + [4]) = [0]
	*($12) = *($7)
	*($1) = *(*($10 + [4]))
	$10 = *(*($10 + [8]))
	if ( ((int_32)$10 == (int_32)[3]) ){ goto $label$4 }
	if ( ((int_32)$10 == (int_32)[2]) ){ goto $label$3 }
	if ( ((int_32)$10 != (int_32)[1]) ){ goto $label$2 }
	$10 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$4
	$10 = ($1 + [32])
	goto $label$1 
	
.LABEL $label$3
	$10 = ($1 + [20])
	goto $label$1 
	
.LABEL $label$2
	$10 = ($1 + [8])
	
.LABEL $label$1
	$7 = *($10 + [4])
	if ( ((int_32)$7 == (int_32)*($10 + [8])) ){ goto $label$6 }
	*($7) = *($12)
	*(($10 = ($10 + [4]))) = (*($10) + [8])
	goto $label$5 
	
.LABEL $label$6
	CALL $660($10, $12)
	
.LABEL $label$5
	$10 = [8]
	$7 = ($1 + [8])
	$4 = *($1 + [8])
	$3 = *(($1 + [12]))
	$5 = ($3 - $4)
	$9 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$7:
	$10 = ($10 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$8 }
	$10 = ((((int_32)uint_32(($5 + [-8]) >> [3]) * (int_32)[7]) + $10) + [7])
	
.LABEL $label$8
	$3 = ($1 + [20])
	$5 = *($1 + [20])
	$4 = *(($1 + [24]))
	$6 = ($4 - $5)
	$9 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$9:
	$10 = ($10 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$9 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	$10 = ((((int_32)uint_32(($6 + [-8]) >> [3]) * (int_32)[7]) + $10) + [7])
	
.LABEL $label$10
	$4 = ($1 + [32])
	$6 = *($1 + [32])
	$5 = *(($1 + [36]))
	$8 = ($5 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	
.LOOP $label$11:
	$10 = ($10 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$12 }
	$10 = ((((int_32)uint_32(($8 + [-8]) >> [3]) * (int_32)[7]) + $10) + [7])
	
.LABEL $label$12
	if ( ($10 <= [513]) ){ goto $label$14 }
	$11 = CALL malloc($10)
	goto $label$13 
	
.LABEL $label$14
	$11 = ($11 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $11
	
.LABEL $label$13
	*($12) = $11
	*($12 + [8]) = ($11 + $10)
	CALL eosio_assert(((int_32)$10 > (int_32)[7]), [1920])
	CALL memcpy($11, $1, [8])
	*($12 + [4]) = ($11 + [8])
	CALL $614(CALL $614(CALL $614($12, $7), $3), $4)
	$9 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($2 + [8]), (int_64)-8866593457838227456, *(*($0 + [8])), $9, $11, $10)
	if ( ($10 <= [513]) ){ goto $label$15 }
	CALL free($11)
	
.LABEL $label$15
	if ( (uint_64)($9 <= *($2 + [16])) ){ goto $label$16 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*([0] + [4]) = ($12 + [16])
}

int_32 .FUNC $751 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [96])
	*([0] + [4]) = $16
	$12 = *($0 + [4])
	$14 = [0]
	$13 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($12 <= *($2)), [1648])
	$12 = *($3)
	$15 = *($12)
	$12 = ($12 + [1])
	*($3) = $12
	$14 = ($14 & [255])
	$13 = ((int_64)(CASTING uint_64)(uint_32 (($15 & [127]) << $14)) | (int_64)$13)
	$14 = ($14 + [7])
	if ( uint_32($15 >> [7]) ){ goto $label$1 }
	$15 = *($1)
	$12 = *($1 + [4])
	$3 = ((int_32)($12 - $15) / (int_32)[28])
	$14 = (CASTING uint_32)(uint_64 $13)
	if ( ((uint_32)$14 <= (uint_32)$3) ){ goto $label$4 }
	CALL $753($1, ($14 - $3))
	$12 = *(($1 + [4]))
	$15 = *($1)
	if ( ((int_32)$15 != (int_32)$12) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$14 >= (uint_32)$3) ){ goto $label$5 }
	$12 = ($15 + ((int_32)$14 * (int_32)[28]))
	*(($1 + [4])) = $12
	
.LABEL $label$5
	if ( ((int_32)$15 == (int_32)$12) ){ goto $label$2 }
	
.LABEL $label$3
	$14 = ($16 + [48])
	$3 = ($16 + [52])
	$2 = ($16 + [56])
	$1 = ($16 + [60])
	$4 = ($16 + [64])
	$5 = ($16 + [68])
	$6 = ($16 + [72])
	$7 = ($16 + [76])
	$8 = ($16 + [80])
	$9 = ($16 + [84])
	$10 = ($16 + [88])
	$11 = ($16 + [92])
	
.LOOP $label$6:
	*($16 + [8]) = $0
	*($16 + [16]) = $15
	*((($16 + [16]) + [8])) = ($15 + [3])
	*((($16 + [16]) + [12])) = ($15 + [4])
	*((($16 + [16]) + [16])) = ($15 + [5])
	*((($16 + [16]) + [20])) = ($15 + [6])
	*((($16 + [16]) + [24])) = ($15 + [7])
	*($16 + [20]) = ($15 + [2])
	*((($16 + [16]) + [28])) = ($15 + [8])
	*($14) = ($15 + [9])
	*($3) = ($15 + [10])
	*($2) = ($15 + [12])
	*($1) = ($15 + [14])
	*($4) = ($15 + [16])
	*($5) = ($15 + [17])
	*($6) = ($15 + [18])
	*($7) = ($15 + [20])
	*($8) = ($15 + [22])
	*($9) = ($15 + [23])
	*($10) = ($15 + [24])
	*($11) = ($15 + [26])
	CALL $754(($16 + [16]), ($16 + [8]))
	$15 = ($15 + [28])
	if ( ((int_32)$15 != (int_32)$12) ){ goto $label$6 }
	
.LABEL $label$2
	*([0] + [4]) = ($16 + [96])
	return $0
}

void .FUNC $752 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $956($6)
	
.LABEL $label$11
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $956($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $753 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $6) / (int_32)[28]) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ((int_32)($6 - $5) / (int_32)[28])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[153391690]) ){ goto $label$3 }
	$6 = [153391689]
	$2 = ((int_32)($2 - $5) / (int_32)[28])
	if ( ((uint_32)$2 > (uint_32)[76695843]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $955(((int_32)$6 * (int_32)[28]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [24])) = [0]
	*(($6 + [16])) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = (*($0) + [28])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$6 * (int_32)[28]))
	$5 = ($2 + ((int_32)$3 * (int_32)[28]))
	$6 = $5
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [24])) = [0]
	*(($6 + [16])) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [28])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 + ((int_32)((int_32)$2 / (int_32)[-28]) * (int_32)[28]))
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $956($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $754 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($0 + [76])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($2, *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
}

void .FUNC $297 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [256])
	*([0] + [4]) = $18
	CALL eosio_assert(((int_32)*($4 + [4]) != (int_32)*($4)), [3344])
	$8 = *(($7 + [32]))
	$7 = *($0 + [60])
	$13 = *(($7 + [36]))
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$1 }
	$12 = ($13 + [-24])
	$9 = ([0] - $8)
	
.LOOP $label$2:
	if ( ((int_64)*(*($12)) == (int_64)$1) ){ goto $label$1 }
	$13 = $12
	$10 = ($12 + [-24])
	$12 = $10
	if ( ((int_32)($10 + $9) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$10 = ($7 + [8])
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$4 }
	$12 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [24]) == (int_32)$10), [1536])
	goto $label$3 
	
.LABEL $label$4
	$12 = [0]
	$13 = CALL db_find_i64(*(($7 + [8])), *(($7 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$3 }
	$12 = CALL $186($10, $13)
	CALL eosio_assert(((int_32)*($12 + [24]) == (int_32)$10), [1536])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [2368])
	CALL $187(($18 + [216]), *($0 + [56]), $1, [0])
	if ( ($6 == 0) ){ goto $label$12 }
	CALL require_auth($1)
	*($18 + [208]) = *($18 + [216])
	$13 = *(($0 + [56]))
	*($18 + [24 align=4]) = *($18 + [208])
	$13 = CALL $188($13, ($18 + [24]))
	*($18 + [200]) = $10
	*($18 + [204]) = $12
	*($18 + [192]) = *($18 + [216])
	*($18 + [16 align=4]) = *($18 + [200])
	*(($18 + [12])) = *($18 + [196])
	*($18 + [8]) = *($18 + [192])
	if ( (CALL $320($0, ($18 + [16]), $3, $4, $13, ($18 + [8])) == 0) ){ goto $label$6 }
	$15 = CALL current_time()
	*(($18 + [156])) = [0]
	*(($18 + [160])) = [0]
	*($18 + [140]) = [0]
	*($18 + [144]) = [0]
	*($18 + [148]) = [0]
	*($18 + [152]) = [0]
	*($18 + [128]) = ((CASTING uint_32)(uint_64 ((uint_64)$15 / (uint_64)(int_64)1000000)) + [60])
	*($18 + [164]) = [0]
	*(($18 + [168])) = [0]
	*(($18 + [172])) = [0]
	*($18 + [176]) = [0]
	*(($18 + [180])) = [0]
	*((($18 + [128]) + [56])) = [0]
	$13 = ($0 + [8])
	$9 = ($18 + [164])
	$11 = *($0 + [8])
	$15 = (int_64)0
	$14 = (int_64)59
	$12 = [2400]
	$16 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$18 }
	$10 = *($12)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$10 = ($10 + [165])
	goto $label$16 
	
.LABEL $label$18
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$14
	$12 = ($12 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$13 }
	*($18 + [120]) = $16
	*($18 + [112]) = $11
	$15 = (int_64)0
	$14 = (int_64)59
	$12 = [3392]
	$16 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$15 > (uint_64)(int_64)6) ){ goto $label$24 }
	$10 = *($12)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$10 = ($10 + [165])
	goto $label$22 
	
.LABEL $label$24
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$20
	$12 = ($12 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$19 }
	*($18 + [104]) = $16
	*(($18 + [84])) = [0]
	*(($18 + [88])) = [0]
	*($18 + [72]) = $2
	*($18 + [64]) = $1
	*($18 + [76]) = $3
	*($18 + [80]) = [0]
	$12 = (*(($4 + [4])) - *($4))
	$10 = int_32($12 >> [2])
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((uint_32)$10 >= (uint_32)[1073741824]) ){ goto $label$5 }
	$12 = CALL $955($12)
	*(($18 + [80])) = $12
	*(($7 = ($18 + [84]))) = $12
	*(($18 + [88])) = ($12 + ($10 << [2]))
	$4 = *($4)
	$10 = (*(($4 + [4])) - $4)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$25 }
	CALL memcpy($12, $4, $10)
	*($7) = (*($7) + $10)
	
.LABEL $label$25
	*($18 + [92]) = $5
	$10 = *(($18 + [168]))
	if ( ((uint_32)$10 >= (uint_32)*(($18 + [172]))) ){ goto $label$11 }
	*($10 + [16 align=4]) = (int_64)0
	$15 = *($13)
	*($10 + [8]) = *($18 + [104])
	*($10) = $15
	*(($13 = ($10 + [24]))) = [0]
	$12 = CALL $955([16])
	*($10 + [16]) = $12
	$9 = ($12 + [16])
	*($13) = $9
	*(($12 + [8])) = *((($18 + [112]) + [8]))
	*($12) = *($18 + [112])
	*(($10 + [20])) = $9
	*($10 + [28]) = [0]
	*(($10 + [32])) = [0]
	*(($10 + [36])) = [0]
	$4 = ($10 + [28])
	$9 = *($18 + [80])
	$13 = *((($18 + [64]) + [20]))
	$7 = ($13 - $9)
	$15 = (CASTING uint_64)(uint_32 int_32($7 >> [2]))
	$12 = [14]
	
.LOOP $label$26:
	$12 = ($12 + [1])
	$15 = (uint_64)$15 >> (uint_64)(int_64)7
	if ( ((int_64)$15) != (int_64)0) ){ goto $label$26 }
	if ( ((int_32)$9 == (int_32)$13) ){ goto $label$27 }
	$12 = (($7 & [-4]) + $12)
	
.LABEL $label$27
	$12 = ($12 + [4])
	if ( ($12 == 0) ){ goto $label$10 }
	CALL $194($4, $12)
	$13 = *(($10 + [32]))
	$12 = *(($10 + [28]))
	goto $label$9 
	
.LABEL $label$12
	CALL require_auth(*($0 + [8]))
	*($18 + [56]) = $10
	*($18 + [60]) = $12
	*($18 + [48]) = *($18 + [216])
	*($18 + [40 align=4]) = *($18 + [56])
	*(($18 + [36])) = *($18 + [52])
	*($18 + [32]) = *($18 + [48])
	CALL $320($0, ($18 + [40]), $3, $4, [0], ($18 + [32]))
	goto $label$6 
	
.LABEL $label$11
	CALL $322($9, ($18 + [112]), $13, ($18 + [104]), ($18 + [64]))
	$12 = *($18 + [80])
	if ( $12 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$13 = [0]
	$12 = [0]
	
.LABEL $label$9
	*($18 + [228]) = $12
	*($18 + [224]) = $12
	*($18 + [232]) = $13
	*($18 + [240]) = ($18 + [224])
	*($18 + [248]) = ($18 + [64])
	CALL $321(($18 + [248]), ($18 + [240]))
	*(($12 = (($18 + [128]) + [40]))) = (*($12) + [40])
	$12 = *($18 + [80])
	if ( ($12 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	*(($18 + [84])) = $12
	CALL $956($12)
	
.LABEL $label$7
	*(($18 + [148])) = [1]
	*($18 + [72]) = (int_64)0
	*($18 + [64]) = *(*(($0 + [56])) + [144])
	$15 = *(($0 + [8]))
	CALL $191(($18 + [112]), ($18 + [128]))
	$12 = *($18 + [112])
	CALL send_deferred(($18 + [64]), $15, $12, (*($18 + [116]) - $12), [0])
	$12 = *($18 + [112])
	if ( ($12 == 0) ){ goto $label$28 }
	*($18 + [116]) = $12
	CALL $956($12)
	
.LABEL $label$28
	CALL $192(($18 + [128]))
	
.LABEL $label$6
	*([0] + [4]) = ($18 + [256])
	return (unreachable)
	
.LABEL $label$5
	CALL $971(($18 + [80]))
}

int_32 .FUNC $756 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	float_64 $10
	int_32 $11
	int_32 $12
	float_64 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [192])
	*([0] + [4]) = $15
	CALL $200(*($0 + [16]), [1])
	CALL memcpy(($15 + [48]), *($5 + [4]), [64])
	$7 = *(($6 + [32]))
	$6 = *($0 + [20])
	$11 = *(($6 + [36]))
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$1 }
	$14 = ($11 + [-24])
	$12 = ([0] - $7)
	
.LOOP $label$2:
	if ( ((int_64)*(*($14)) == (int_64)$1) ){ goto $label$1 }
	$11 = $14
	$8 = ($14 + [-24])
	$14 = $8
	if ( ((int_32)($8 + $12) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = ($6 + [8])
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$4 }
	$14 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$8), [1536])
	goto $label$3 
	
.LABEL $label$4
	$14 = [0]
	$11 = CALL db_find_i64(*(($6 + [8])), *(($6 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$3 }
	$14 = CALL $186($8, $11)
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$8), [1536])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [3312])
	CALL eosio_assert(((uint_32)int_32((*($3 + [4]) - *($3)) >> [2]) > (uint_32)[3]), [8016])
	CALL eosio_assert((int_32((*($3 + [4]) - *($3)) >> [2]) <= [9]), [8016])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[1]), [8048])
	CALL eosio_assert(($2 <= [5]), [8048])
	*(($15 + [40])) = [0]
	*($15 + [24]) = (int_64)-1
	*($15 + [32]) = (int_64)0
	$9 = *($0 + [8])
	*($15 + [8]) = $9
	*($15 + [16]) = $9
	$14 = [0]
	$8 = CALL db_find_i64($9, $9, (int_64)-7948101582086733824, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$14 = CALL $214(($15 + [8]), $8)
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)($15 + [8])), [1536])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [3472])
	$13 = CALL $757($0, $2, $14, $3)
	if ( $4 ){ goto $label$6 }
	CALL $205($15, *(($0 + [16])), ($15 + [48]))
	$9 = ((uint_64)((int_64)((int_64)*($15) * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	*($15) = $9
	$14 = (CASTING uint_32)(uint_64 (uint_64)((int_64)$9 * (int_64)10000) >> (uint_64)(int_64)31)
	*($15 + [4]) = $14)
	$8 = [0]
	CALL $324($0, $1, $3, [0])
	CALL memset(($15 + [112]), [0], [80])
	$12 = [1]
	$13 = ((float_64)$13 * (float_64)(float_64)1e4)
	$10 = (CASTING float_64)(uint_32 $14)
	$14 = (($2 + ( [-1] ? [0] : (((float_64)$10 >= (float_64)$13) | (((float_64)$10 != (float_64)$10) | ((float_64)$13 != (float_64)$13))) )) + [-1])
	if ( ((uint_32)$14 > (uint_32)[4]) ){ goto $label$7 }
	$8 = ($14 << [2])
	$3 = *(($8 + [6608]))
	$14 = (($3 << [3]) + [2544])
	$13 = (float_64)0
	$11 = ($15 + [112])
	$8 = *(($8 + [6576]))
	$12 = $8
	
.LOOP $label$8:
	$10 = *($14)
	*($11) = $10
	$11 = ($11 + [8])
	$14 = ($14 + [8])
	$13 = ((float_64)$13 + (float_64)$10)
	$12 = ($12 + [-1])
	if ( $12 ){ goto $label$8 }
	$14 = ($15 + [112])
	$11 = $8
	
.LOOP $label$9:
	*($14) = ((float_64)*($14) / (float_64)$13)
	$14 = ($14 + [8])
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$9 }
	$12 = ($3 + [1])
	
.LABEL $label$7
	$9 = ((uint_64)((int_64)((int_64)*($15) * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	*($15) = $9
	$11 = (CASTING uint_32)(uint_64 (uint_64)((int_64)$9 * (int_64)1000000000) >> (uint_64)(int_64)31)
	*($15 + [4]) = $11)
	$14 = ((($15 + [112]) + ($8 << [3])) + [-8])
	
.LOOP $label$12:
	if ( ((int_32)$8 < (int_32)[2]) ){ goto $label$11 }
	$8 = ($8 + [-1])
	$13 = *($14)
	$14 = ($14 + [-8])
	if ( ((int_32)$11 >= (int_32)(CASTING int_32)(float_64 ((float_64)$13 * (float_64)(float_64)1e9))) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$8 = [0]
	
.LABEL $label$10
	$9 = ((uint_64)((int_64)((int_64)$9 * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	*($15) = $9
	$14 = (CASTING uint_32)(uint_64 (uint_64)((int_64)$9 * (int_64)5) >> (uint_64)(int_64)31)
	*($15 + [4]) = $14)
	CALL $640($0, $1, ((($12 + ((int_32)$14 * (int_32)[20])) + $8) & [65535]))
	$1 = *($15 + [48])
	*($15 + [56]) = ((int_32)(CASTING uint_32)(uint_64 ((int_64)(uint_64)$1 >> (uint_64)(int_64)32) ^ (int_64)$1)) ^ (int_32)*($15))
	$8 = *(($0 + [16]))
	$1 = *($8)
	*($15 + [60]) = [0]
	$14 = *($5 + [4])
	*($15 + [112]) = ($15 + [48])
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [1696])
	CALL $209(($8 + [88]), $14, $1, ($15 + [112]))
	
.LABEL $label$6
	$12 = *($15 + [32])
	if ( ($12 == 0) ){ goto $label$13 }
	$0 = ($15 + [36])
	$14 = *($0)
	if ( ((int_32)$14 == (int_32)$12) ){ goto $label$15 }
	
.LOOP $label$16:
	$14 = ($14 + [-24])
	$8 = *($14)
	*($14) = [0]
	if ( ($8 == 0) ){ goto $label$17 }
	$11 = *($8 + [12])
	if ( ($11 == 0) ){ goto $label$18 }
	*(($8 + [16])) = $11
	CALL $956($11)
	
.LABEL $label$18
	CALL $956($8)
	
.LABEL $label$17
	if ( ((int_32)$12 != (int_32)$14) ){ goto $label$16 }
	$14 = *(($15 + [32]))
	goto $label$14 
	
.LABEL $label$15
	$14 = $12
	
.LABEL $label$14
	*($0) = $12
	CALL $956($14)
	
.LABEL $label$13
	*([0] + [4]) = ($15 + [192])
	return $4
}

int_64 .FUNC $757 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	float_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$16 = [0]
	$4 = ($1 + [-1])
	if ( ((uint_32)$4 > (uint_32)[4]) ){ goto $label$1 }
	$16 = *((($4 << [2]) + [8064]))
	
.LABEL $label$1
	$13 = (float_64)1
	$15 = *($3)
	if ( ((int_32)*($3 + [4]) == (int_32)$15) ){ goto $label$2 }
	$5 = (CASTING float_64)(int_32 ((int_32)[67108864] / (int_32)$16))
	$12 = ($2 + [16])
	$13 = (float_64)1
	$14 = [0]
	
.LOOP $label$3:
	$11 = ($2 + [12])
	$7 = *($11)
	$16 = (*($12) - $7)
	if ( ((int_32)$16 < (int_32)[12]) ){ goto $label$5 }
	$6 = *(($15 + ($14 << [2])))
	$16 = (((uint_32)$16 / (uint_32)[12]) + [-1])
	$15 = [0]
	
.LOOP $label$6:
	$8 = ($16 - $15)
	$9 = (((int_32)$8 / (int_32)[2]) + $15)
	$17 = ($7 + ((int_32)$9 * (int_32)[12]))
	$10 = *($17)
	if ( ($10 <= $6) ){ goto $label$7 }
	if ( ((uint_32)$10 <= (uint_32)$6) ){ goto $label$4 }
	$16 = ($9 + [-1])
	if ( ((int_32)$8 > (int_32)[1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$15 = ($9 + [1])
	if ( ((int_32)$16 > (int_32)$9) ){ goto $label$6 }
	
.LABEL $label$5
	CALL eosio_assert([0], [3472])
	$17 = *($11)
	
.LABEL $label$4
	$15 = [0]
	$16 = *($17 + [4])
	if ( ((uint_32)$16 > (uint_32)[200]) ){ goto $label$8 }
	$15 = [1]
	$16 = ((uint_32)$16 % (uint_32)[20])
	if ( ($16 <= [5]) ){ goto $label$8 }
	$15 = [2]
	$6 = ($16 & [65535])
	if ( ($6 <= [8]) ){ goto $label$8 }
	$15 = [3]
	if ( ($6 <= [10]) ){ goto $label$8 }
	$15 = [4]
	if ( ((int_32)$16 == (int_32)[10]) ){ goto $label$8 }
	$15 = ( [5] ? [0] : ($6 <= [12]) )
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$15 == (int_32)$4), [8096])
	CALL eosio_assert((*($17 + [8]) == 0), [8128])
	$15 = ($17 + [4])
	CALL eosio_assert(((int_32)*($15) != (int_32)[0]), [8160])
	$13 = ((float_64)$13 * (float_64)(float_64))((float_64)1 - ((float_64)(CASTING float_64)(int_32 (CASTING int_32)(float_64 ((float_64)(float_64)67108864 / (float_64)*(((((uint_32)*($15) % (uint_32)[20]) << [3]) + [8184]))))) / (float_64)$5)))
	$15 = *($3)
	$14 = ($14 + [1])
	if ( ($14 <= int_32((*(($3 + [4])) - $15) >> [2])) ){ goto $label$3 }
	
.LABEL $label$2
	return ((float_64)( (float_64)0.75 ? ( (float_64)0.38 ? (float_64)0.8 : ((int_32)$1 == (int_32)[4]) ) : ((int_32)$1 == (int_32)[3]) ) * (float_64)(float_64))((float_64)1 - $13))
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $850(($0 + [1128]), $1, $2)
}

void .FUNC $28 (int_32 $0, int_64 $1, int_64 $2)
{
	CALL $859(($0 + [8]), $1, $2)
}

void .FUNC $296 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [48])
	$15 = $16
	*([0] + [4]) = $16
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$6 = ($1 + [8])
	$4 = *($1)
	$14 = $4
	$7 = *($1 + [8])
	$9 = ($1 + [12])
	$13 = *($9)
	if ( ((int_32)$13 == (int_32)$7) ){ goto $label$1 }
	$5 = *($3)
	$8 = int_32(($13 - $7) >> [4])
	$12 = [0]
	$13 = [14]
	$10 = (*(*($3 + [4])) & [255])
	
.LOOP $label$3:
	$11 = ($7 + $13)
	if ( ((int_32)*(($11 + [-14])) == (int_32)$10) ){ goto $label$2 }
	$13 = ($13 + [16])
	$12 = ($12 + [1])
	if ( ($12 <= $8) ){ goto $label$3 }
	$14 = $4
	goto $label$1 
	
.LABEL $label$2
	*(($11 + [-13])) = *(*($3 + [8]))
	CALL $265(($15 + [8]), $5, *(*($3 + [12])), *($3 + [16]))
	*((($13 = (*(($1 + [8])) + $13)) + [-6])) = *($15 + [8])
	*(($13 + [-4])) = *($15 + [12])
	*(($13 + [-2])) = *($15 + [16])
	*($13) = *($15 + [20])
	$14 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$14), [1856])
	$7 = *($6)
	$12 = *($9)
	$10 = ($12 - $7)
	$14 = (CASTING uint_64)(uint_32 int_32($10 >> [4]))
	$13 = [22]
	
.LOOP $label$4:
	$13 = ($13 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$6 }
	$13 = (((int_32)uint_32(($10 + [-16]) >> [4]) * (int_32)[14]) + $13)
	goto $label$5 
	
.LABEL $label$6
	$13 = ($13 + [-14])
	
.LABEL $label$5
	if ( ($13 <= [513]) ){ goto $label$8 }
	$12 = CALL malloc($13)
	goto $label$7 
	
.LABEL $label$8
	$12 = ($16 - (($13 + [15]) & [-16]))
	*([0] + [4]) = $12
	
.LABEL $label$7
	*($15 + [8]) = $12
	*($15 + [16]) = ($12 + $13)
	CALL eosio_assert(((int_32)$13 > (int_32)[7]), [1920])
	CALL memcpy($12, $1, [8])
	*($15 + [12]) = ($12 + [8])
	CALL $151(($15 + [8]), $6)
	CALL db_update_i64(*($1 + [24]), $2, $12, $13)
	if ( ($13 <= [513]) ){ goto $label$9 }
	CALL free($12)
	
.LABEL $label$9
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($15 + [48])
}

void .FUNC $21 (int_32 $0, int_64 $1, int_64 $2)
{
	CALL $884(($0 + [8]), $1, $2)
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$7 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($9 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [16]) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [8]) = [0]
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [1632])
	CALL memcpy(($8 + [8]), $6, [1])
	CALL eosio_assert(((uint_32)($1 + [-1]) > (uint_32)[7]), [1632])
	$9 = (($8 + [8]) + [8])
	CALL memcpy($9, ($6 + [1]), [8])
	CALL eosio_assert(((uint_32)($1 + [-9]) > (uint_32)[7]), [1632])
	$5 = ($8 + [24])
	CALL memcpy($5, ($6 + [9]), [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($9)
	$6 = *($8 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$7 = *((*($1) + $7))
	
.LABEL $label$5
	CALL void $1((int_32 ($6 & [255])), (int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [32])
	return [1]
}

void .FUNC $23 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL $882(($0 + [8]), $1, $2)
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1632])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [1632])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $25 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	CALL $877(($0 + [8]), $1, $2, $3)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$4 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1632])
	CALL memcpy($6, $4, [8])
	CALL eosio_assert(((int_32)($1 & [-2]) != (int_32)[8]), [1632])
	$7 = ($6 + [8])
	CALL memcpy($7, ($4 + [8]), [2])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($4)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($7)
	$3 = *($6)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 int_32(($4 << [16]) >> [16])), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $27 (int_32 $0, int_64 $1)
{
	CALL $871(($0 + [8]), $1)
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [16])) = (int_64)0
	*(($2 + [24])) = (int_64)0
	*($2) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [1632])
	CALL memcpy($2, $1, [8])
	*($2 + [52]) = ($1 + [8])
	CALL $491(($2 + [48]), ($2 + [8]))
	CALL $491(($2 + [48]), ($2 + [20]))
	if ( ($0 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $876(($2 + [48]), $2)
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$6 }
	CALL $956(*(($2 + [28])))
	
.LABEL $label$6
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $956(*(($2 + [16])))
	
.LABEL $label$7
	*([0] + [4]) = ($2 + [64])
	return [1]
}

void .FUNC $471 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [24])
	*($5 + [8]) = *($1)
	*($5 + [20]) = ($2 + [2])
	*($5 + [16]) = $2
	*($5 + [24]) = ($2 + [8])
	CALL $475(($5 + [16]), ($5 + [8]))
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [1920])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [1920])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($1)
	*($5 + [16]) = *(*($0 + [52]))
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), ($5 + [16]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($1)
	*($5 + [16]) = *(*($0 + [56]))
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), ($5 + [16]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [1920])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $476(*($1), *($0 + [84]))
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $232 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $293 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [9]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [10]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [12]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [20]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [22]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $470 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [96])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), $1, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($3 + [88]) = $0
	*($3 + [4]) = ($1 + [16])
	*($3) = ($1 + [8])
	*($3 + [8]) = ($1 + [20])
	*($3 + [12]) = ($1 + [24])
	*($3 + [16]) = ($1 + [28])
	*($3 + [20]) = ($1 + [29])
	*($3 + [24]) = ($1 + [32])
	*($3 + [28]) = ($1 + [56])
	*($3 + [32]) = ($1 + [72])
	*($3 + [36]) = ($1 + [73])
	*($3 + [40]) = ($1 + [74])
	*($3 + [44]) = ($1 + [76])
	*($3 + [48]) = ($1 + [78])
	*($3 + [52]) = ($1 + [79])
	*($3 + [56]) = ($1 + [80])
	*($3 + [60]) = ($1 + [81])
	*($3 + [64]) = ($1 + [82])
	*($3 + [68]) = ($1 + [83])
	*($3 + [72]) = ($1 + [84])
	*($3 + [76]) = ($1 + [88])
	*($3 + [80]) = ($1 + [96])
	*($3 + [84]) = ($1 + [104])
	CALL $471($3, ($3 + [88]))
	*($3 + [88]) = $0
	*($3 + [4]) = ($1 + [128])
	*($3) = ($1 + [120])
	*($3 + [8]) = ($1 + [136])
	*($3 + [12]) = ($1 + [152])
	*($3 + [16]) = ($1 + [160])
	*($3 + [20]) = ($1 + [168])
	CALL $472($3, ($3 + [88]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [184]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [192]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [96])
	return $0
}

void .FUNC $292 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$4 = *($1)
	*($1 + [16]) = (*($1 + [16]) + *(*($3 + [4])))
	CALL eosio_assert([1], [1856])
	*($5 + [72]) = ($5 + [60])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $228(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $5, [60])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $727 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	*($8 + [24]) = $2
	$3 = *(($0 + [40]))
	$7 = *(($0 + [44]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [16])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$5), [1536])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)8526756653867991040, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $178($5, $7)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$5), [1536])
	
.LABEL $label$3
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [5424])
	*($8 + [23]) = [0]
	$1 = *($0 + [8])
	*($8 + [12]) = ($8 + [23])
	*($8 + [8]) = ($8 + [24])
	CALL eosio_assert($7, [1696])
	CALL $728($5, $6, $1, ($8 + [8]))
	CALL eosio_assert(*($8 + [23]), [2144])
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $929 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	*($11 + [88]) = $1
	*($11 + [84]) = $3
	if ( ((int_32)$3 <= (int_32)$2) ){ goto $label$1 }
	*(($11 + [72])) = [0]
	*($11 + [56]) = (int_64)-1
	$7 = *($0 + [8])
	*($11 + [40]) = $7
	*($11 + [48]) = $7
	*($11 + [64]) = (int_64)0
	$2 = CALL db_lowerbound_i64($7, $7, (int_64)-4427730799613181952, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	CALL $477(($11 + [40]), $2)
	*($11 + [36]) = [0]
	*($11 + [32]) = ($11 + [40])
	$5 = *(CALL $365(($11 + [32])) + [4])
	$2 = *(($5 + [73]))
	*($11 + [31]) = $2
	$8 = *(($5 + [168]))
	$6 = int_32((*(($5 + [172])) - $8) >> [5])
	if ( ($6 <= $2) ){ goto $label$3 }
	if ( ((uint_32)*((($8 + ($6 << [5])) + [-24])) >= (uint_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$10 = [-1]
	*($11 + [24]) = [-1]
	*($11 + [20]) = $6
	if ( ($6 == 0) ){ goto $label$4 }
	$2 = [0]
	$9 = $6
	
.LOOP $label$5:
	if ( ((uint_32)*(($8 + [8])) >= (uint_32)$3) ){ goto $label$6 }
	if ( ((int_32)$2 >= (int_32)$9) ){ goto $label$6 }
	*($11 + [20]) = $2
	$9 = $2
	
.LABEL $label$6
	if ( ((int_64)*($8) != (int_64)$1) ){ goto $label$7 }
	*($11 + [24]) = $2
	$10 = $2
	
.LABEL $label$7
	$8 = ($8 + [32])
	$2 = ($2 + [1])
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$5 }
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$4 }
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$4 }
	*($11 + [20]) = ($9 + [-1])
	
.LABEL $label$4
	$1 = *(($0 + [8]))
	*($11 + [4]) = ($11 + [88])
	*($11) = ($11 + [24])
	*($11 + [8]) = ($11 + [84])
	*($11 + [12]) = ($11 + [20])
	*($11 + [16]) = ($11 + [31])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [1696])
	CALL $933(($11 + [40]), $5, $1, $11)
	
.LABEL $label$2
	CALL $367(($11 + [64]))
	
.LABEL $label$1
	*([0] + [4]) = ($11 + [96])
}

int_32 .FUNC __fwritex (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($2 + [16])
	if ( $6 ){ goto $label$2 }
	$6 = [0]
	if ( CALL __towrite($2) ){ goto $label$1 }
	$6 = *(($2 + [16]))
	
.LABEL $label$2
	$7 = *($2 + [20])
	if ( ((uint_32)($6 - $7) >= (uint_32)$1) ){ goto $label$3 }
	return CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	
.LABEL $label$3
	$8 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + $1)
	$8 = [0]
	$6 = [0]
	
.LOOP $label$5:
	if ( (($1 + $6) == 0) ){ goto $label$4 }
	$5 = ($3 + $6)
	$4 = ($6 + [-1])
	$6 = $4
	if ( ((int_32)*(($5 + [-1])) != (int_32)[10]) ){ goto $label$5 }
	$8 = (($1 + $4) + [1])
	$6 = CALL int_32 $2((int_32 $0), (int_32 $8), (int_32 *($2 + [36])))
	if ( ($6 <= $8) ){ goto $label$1 }
	$1 = ((int_32)$4 ^ (int_32)[-1])
	$0 = (($3 + $4) + [1])
	$7 = *(($2 + [20]))
	
.LABEL $label$4
	CALL memcpy($7, $0, $1)
	*(($6 = ($2 + [20]))) = (*($6) + $1)
	return ($8 + $1)
	
.LABEL $label$1
	return $6
}

void .FUNC $881 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	$2 = *($0)
	$5 = *($0 + [4])
	*($1) = *(*($5))
	CALL $958(($1 + [8]), *($5 + [4]))
	*($1 + [40]) = [1]
	CALL $958(($1 + [20]), *($5 + [8]))
	$5 = *($1 + [8])
	$3 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($3 + [25])
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$3 = *(($1 + [20]))
	$3 = ( *(($1 + [24])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $5)
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $5)
	CALL $868($7, $1)
	$4 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)4982429584524836864, *(*($0 + [8])), $4, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $620 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($2)), [1648])
	$4 = *($3)
	$7 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$4 = *($1 + [4])
	$3 = int_32(($4 - $7) >> [4])
	$6 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$4 }
	CALL $631($1, ($6 - $3))
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$6 >= (uint_32)$3) ){ goto $label$5 }
	$4 = ($7 + ($6 << [4]))
	*(($1 + [4])) = $4
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($8 + [36])
	$3 = ($8 + [40])
	
.LOOP $label$6:
	*($8 + [8]) = $0
	*($8 + [16]) = $7
	*((($8 + [16]) + [8])) = ($7 + [4])
	*((($8 + [16]) + [12])) = ($7 + [8])
	*((($8 + [16]) + [16])) = ($7 + [9])
	*($6) = ($7 + [10])
	*($3) = ($7 + [12])
	*($8 + [20]) = ($7 + [2])
	CALL $632(($8 + [16]), ($8 + [8]))
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [48])
	return $0
}

int_32 .FUNC $378 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [48]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [3264])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)5455799419172362240)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [3200])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [3200])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $377(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $379 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $955([56])) + [24]) = (int_64)1397703940
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$2 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [3776])
	*($4 + [40]) = [0]
	*($4 + [32 align=4]) = (int_64)0
	*($4 + [44]) = $1
	CALL $385(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [48])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $386(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	$4 = *($3 + [32])
	if ( ($4 == 0) ){ goto $label$9 }
	*(($3 + [36])) = $4
	CALL $956($4)
	
.LABEL $label$9
	CALL $956($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $548 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1648])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $549($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [1632])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[3]), [1632])
	CALL memcpy(($7 + [8]), *($4), [4])
	$6 = (*($4) + [4])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $372 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [192])
	*([0] + [4]) = $12
	CALL require_auth($1)
	$4 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	$11 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($11)) == (int_64)$1) ){ goto $label$1 }
	$7 = $11
	$8 = ($11 + [-24])
	$11 = $8
	if ( ((int_32)($8 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$5 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$3), [1536])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$11 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $186($3, $11)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$3), [1536])
	
.LABEL $label$3
	$11 = [0]
	$4 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($4, [2368])
	$7 = (*($5 + [9]) + [1])
	*($12 + [191]) = $7
	CALL eosio_assert((($7 & [254]) <= [6]), [4240])
	*(($12 + [176])) = [0]
	*($12 + [160]) = (int_64)-1
	*($12 + [168]) = (int_64)0
	$10 = *($0)
	*($12 + [144]) = $10
	*($12 + [152]) = $10
	$8 = [0]
	$7 = CALL db_find_i64($10, $10, (int_64)-4920399343656108032, (CASTING uint_64)(uint_32 ($7 & [255])))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $396(($12 + [144]), $7)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($12 + [144])), [1536])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [4272])
	CALL eosio_assert(((int_64)*($2) == (int_64)*($8 + [8])), [4288])
	$6 = *($0)
	CALL eosio_assert([1], [3712])
	$10 = (int_64)5459781
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$7 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [3776])
	$10 = CALL publication_time()
	$9 = *(($8 + [8]))
	$11 = *($12 + [191])
	*($12 + [72]) = (int_64))(((uint_64)$10 / (uint_64)(int_64)1000000) - *([0] + [12]))
	*($12 + [80]) = $6
	$10 = *(($8 + [16]))
	*($12 + [88]) = [6]
	$8 = *($0 + [132])
	*(($12 + [91])) = *(($12 + [143]))
	*($12 + [89 align=1]) = *($12 + [141 align=1])
	*($12 + [92]) = $11
	*($12 + [96]) = [0]
	*($12 + [100]) = [0]
	*($12 + [104]) = [0]
	*($12 + [105]) = [0]
	*(($12 + [110])) = *(($12 + [138]))
	*($12 + [106 align=2]) = *($12 + [134 align=2])
	*($12 + [112]) = $9
	*(($12 + [120])) = $10
	CALL memcpy(($12 + [8]), ($12 + [72]), [56])
	CALL $397($8, ($12 + [8]), $1)
	$10 = *($0)
	*($12 + [64]) = ($12 + [191])
	CALL eosio_assert($4, [1696])
	CALL $421($3, $5, $10, ($12 + [64]))
	$7 = *($12 + [168])
	if ( ($7 == 0) ){ goto $label$11 }
	$5 = ($12 + [172])
	$11 = *($5)
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$13 }
	
.LOOP $label$14:
	$11 = ($11 + [-24])
	$8 = *($11)
	*($11) = [0]
	if ( ($8 == 0) ){ goto $label$15 }
	CALL $956($8)
	
.LABEL $label$15
	if ( ((int_32)$7 != (int_32)$11) ){ goto $label$14 }
	$11 = *(($12 + [168]))
	goto $label$12 
	
.LABEL $label$13
	$11 = $7
	
.LABEL $label$12
	*($5) = $7
	CALL $956($11)
	
.LABEL $label$11
	*([0] + [4]) = ($12 + [192])
}

void .FUNC $373 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [192])
	*([0] + [4]) = $12
	CALL require_auth($1)
	$4 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	$11 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($11)) == (int_64)$1) ){ goto $label$1 }
	$7 = $11
	$8 = ($11 + [-24])
	$11 = $8
	if ( ((int_32)($8 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$5 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$3), [1536])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$11 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $186($3, $11)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$3), [1536])
	
.LABEL $label$3
	$11 = [0]
	$4 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($4, [2368])
	$7 = (*($5 + [8]) + [1])
	*($12 + [191]) = $7
	CALL eosio_assert((($7 & [254]) <= [6]), [4240])
	*(($12 + [176])) = [0]
	*($12 + [160]) = (int_64)-1
	*($12 + [168]) = (int_64)0
	$10 = *($0)
	*($12 + [144]) = $10
	*($12 + [152]) = $10
	$8 = [0]
	$7 = CALL db_find_i64($10, $10, (int_64)-4920399343656108032, (CASTING uint_64)(uint_32 ($7 & [255])))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $396(($12 + [144]), $7)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($12 + [144])), [1536])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [4272])
	CALL eosio_assert(((int_64)*($2) == (int_64)*($8 + [8])), [4288])
	$6 = *($0)
	CALL eosio_assert([1], [3712])
	$10 = (int_64)5459781
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$7 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [3776])
	$10 = CALL publication_time()
	$9 = *(($8 + [8]))
	$11 = *($12 + [191])
	*($12 + [72]) = (int_64))(((uint_64)$10 / (uint_64)(int_64)1000000) - *([0] + [12]))
	*($12 + [80]) = $6
	$10 = *(($8 + [16]))
	*($12 + [88]) = [5]
	$8 = *($0 + [132])
	*(($12 + [91])) = *(($12 + [143]))
	*($12 + [89 align=1]) = *($12 + [141 align=1])
	*($12 + [92]) = $11
	*($12 + [96]) = [0]
	*($12 + [100]) = [0]
	*($12 + [104]) = [0]
	*($12 + [105]) = [0]
	*(($12 + [110])) = *(($12 + [138]))
	*($12 + [106 align=2]) = *($12 + [134 align=2])
	*($12 + [112]) = $9
	*(($12 + [120])) = $10
	CALL memcpy(($12 + [8]), ($12 + [72]), [56])
	CALL $397($8, ($12 + [8]), $1)
	$10 = *($0)
	*($12 + [64]) = ($12 + [191])
	CALL eosio_assert($4, [1696])
	CALL $398($3, $5, $10, ($12 + [64]))
	$7 = *($12 + [168])
	if ( ($7 == 0) ){ goto $label$11 }
	$5 = ($12 + [172])
	$11 = *($5)
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$13 }
	
.LOOP $label$14:
	$11 = ($11 + [-24])
	$8 = *($11)
	*($11) = [0]
	if ( ($8 == 0) ){ goto $label$15 }
	CALL $956($8)
	
.LABEL $label$15
	if ( ((int_32)$7 != (int_32)$11) ){ goto $label$14 }
	$11 = *(($12 + [168]))
	goto $label$12 
	
.LABEL $label$13
	$11 = $7
	
.LABEL $label$12
	*($5) = $7
	CALL $956($11)
	
.LABEL $label$11
	*([0] + [4]) = ($12 + [192])
}

void .FUNC $370 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	$16 = (*([0] + [4]) - [528])
	*([0] + [4]) = $16
	*($16 + [504]) = $2
	CALL require_auth($2)
	CALL $446(*($1 + [88]), $2, *($3 + [64]), *($3 + [68]))
	$19 = CALL atoll(( *(($3 + [28])) ? ($3 + [21]) : (*($3 + [20]) & [1]) ))
	$12 = *(($8 + [32]))
	$8 = *($1 + [92])
	$13 = *(($8 + [36]))
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$1 }
	$6 = ($13 + [-24])
	$7 = ([0] - $12)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$13 = $6
	$14 = ($6 + [-24])
	$6 = $14
	if ( ((int_32)($14 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($8 + [8])
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$4 }
	$12 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [24]) == (int_32)$6), [1536])
	goto $label$3 
	
.LABEL $label$4
	$12 = [0]
	$14 = CALL db_find_i64(*(($8 + [8])), *(($8 + [16])), (int_64)-6030912142679474176, $2)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$3 }
	$12 = CALL $186($6, $14)
	CALL eosio_assert(((int_32)*($12 + [24]) == (int_32)$6), [1536])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [4704])
	$9 = *(($8 + [40]))
	$8 = *($1 + [108])
	$13 = *(($8 + [44]))
	if ( ((int_32)$13 == (int_32)$9) ){ goto $label$5 }
	$6 = ($13 + [-24])
	$7 = ([0] - $9)
	
.LOOP $label$6:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$5 }
	$13 = $6
	$14 = ($6 + [-24])
	$6 = $14
	if ( ((int_32)($14 + $7) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$14 = ($8 + [16])
	if ( ((int_32)$13 == (int_32)$9) ){ goto $label$8 }
	$6 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$14), [1536])
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	$13 = CALL db_find_i64(*(($8 + [16])), *(($8 + [24])), (int_64)-8872998483271876608, $2)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $144($14, $13)
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$14), [1536])
	
.LABEL $label$7
	$6 = ( ($6 + [8]) ? ($8 + [76]) : $6 )
	CALL eosio_assert(((int_32)*($6 + [4]) != (int_32)*($6)), [4736])
	$6 = [0]
	*(($16 + [496])) = [0]
	*($16 + [480]) = (int_64)-1
	*($16 + [488]) = (int_64)0
	$17 = *($1)
	*($16 + [464]) = $17
	*($16 + [472]) = $17
	$14 = CALL db_find_i64($17, $17, (int_64)-7948101582086733824, $2)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $214(($16 + [464]), $14)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($16 + [464])), [1536])
	$6 = ((int_32)(*(($6 + [16])) - *($6 + [12])) / (int_32)[12])
	
.LABEL $label$9
	CALL eosio_assert(((int_32)$6 < (int_32)CALL int_32 $4((int_32 *($12 + [8])), (int_32 *(*($4) + [4])))), [3440])
	$12 = *(($1 + [72]))
	$13 = *(($1 + [76]))
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$10 }
	$6 = ($13 + [-24])
	$7 = ([0] - $12)
	
.LOOP $label$11:
	if ( ((int_64)*(*($6)) == (int_64)$19) ){ goto $label$10 }
	$13 = $6
	$14 = ($6 + [-24])
	$6 = $14
	if ( ((int_32)($14 + $7) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$8 = ($1 + [48])
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$13 }
	$13 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*(($13 + [36])) == (int_32)$8), [1536])
	goto $label$12 
	
.LABEL $label$13
	$13 = [0]
	$6 = CALL db_find_i64(*(($1 + [48])), *(($1 + [56])), (int_64)-7948206717098000384, $19)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	$13 = CALL $447($8, $6)
	CALL eosio_assert(((int_32)*($13 + [36]) == (int_32)$8), [1536])
	
.LABEL $label$12
	$6 = [0]
	$12 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($12, [4768])
	CALL eosio_assert(((int_64)*($13 + [8]) != (int_64)*($16 + [504])), [4800])
	CALL eosio_assert(((int_32)$5 > (int_32)[0]), [4816])
	if ( ((int_32)$5 == (int_32)[7]) ){ goto $label$14 }
	*(($16 + [152])) = [0]
	*($16 + [136]) = (int_64)-1
	*($16 + [144]) = (int_64)0
	$2 = *($1)
	*($16 + [120]) = $2
	*($16 + [128]) = $2
	$14 = CALL db_find_i64($2, $2, (int_64)-4860064192867598336, *($13 + [32]))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$15 }
	$6 = CALL $327(($16 + [120]), $14)
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)($16 + [120])), [1536])
	
.LABEL $label$15
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [4848])
	CALL eosio_assert(((int_32)*($6 + [9]) <= (int_32)$5), [4880])
	$7 = *($16 + [144])
	if ( ($7 == 0) ){ goto $label$14 }
	$5 = ($16 + [148])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$17 }
	
.LOOP $label$18:
	$6 = ($6 + [-24])
	$14 = *($6)
	*($6) = [0]
	if ( ($14 == 0) ){ goto $label$19 }
	CALL $956($14)
	
.LABEL $label$19
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$18 }
	$6 = *(($16 + [144]))
	goto $label$16 
	
.LABEL $label$17
	$6 = $7
	
.LABEL $label$16
	*($5) = $7
	CALL $956($6)
	
.LABEL $label$14
	$6 = ($13 + [8])
	CALL $448(*($1 + [100]), *($6), *($13))
	CALL void $4((int_32 *($16 + [504])), (int_64 *(($13 + [32]))), (int_32 *(*($4) + [8])))
	CALL eosio_assert($12, [4912])
	CALL eosio_assert($12, [4208])
	$14 = [0]
	$7 = CALL db_next_i64(*($13 + [40]), ($16 + [120]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$20 }
	CALL $447($8, $7)
	
.LABEL $label$20
	CALL $449($8, $13)
	$10 = *(($13 + [24]))
	$2 = *($6)
	$19 = *($1)
	$15 = *($13 + [16])
	CALL eosio_assert(((int_64)*($3 + [48]) == (int_64)$15), [4960])
	$17 = CALL publication_time()
	$18 = *([0] + [12])
	CALL eosio_assert([1], [3712])
	$8 = ((int_64)$2 == (int_64)$19)
	$4 = ( [0] ? [5] : $8 )
	$3 = (CASTING uint_32)(uint_64 (int_64))(((uint_64)$17 / (uint_64)(int_64)1000000) - $18))
	$2 = (int_64)5459781
	
.LOOP $label$23:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$7 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$7 = [0]
	
.LABEL $label$21
	CALL eosio_assert($7, [3776])
	$2 = *(($13 + [24]))
	$19 = *(($13 + [16]))
	$14 = *(($13 + [32]))
	$17 = *($13)
	$18 = *($16 + [504])
	*($16 + [376]) = $3
	*($16 + [384]) = $18
	$7 = *($1 + [104])
	*($16 + [392]) = [2]
	*(($16 + [395])) = *((($16 + [461]) + [2]))
	*($16 + [393 align=1]) = *($16 + [461 align=1])
	*($16 + [396]) = $17
	*($16 + [400]) = $14
	*($16 + [404]) = [0]
	*($16 + [408]) = [0]
	*($16 + [409]) = [0]
	*(($16 + [414])) = *((($16 + [454]) + [4]))
	*($16 + [410 align=2]) = *($16 + [454 align=2])
	*($16 + [416]) = $19
	*(($16 + [424])) = $2
	*($16 + [432]) = $4
	*(($16 + [439])) = *(($16 + [453]))
	*(($16 + [437])) = *((($16 + [447]) + [4]))
	*($16 + [433 align=1]) = *($16 + [447 align=1])
	$2 = *(($13 + [8]))
	CALL memcpy(($16 + [56]), ($16 + [376]), [64])
	CALL $428($7, ($16 + [56]), $2)
	CALL eosio_assert([1], [3712])
	$2 = (int_64)5459781
	
.LOOP $label$28:
	$14 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$29 }
	
.LOOP $label$30:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$27 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$30 }
	
.LABEL $label$29
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$7 = [0]
	
.LABEL $label$26
	CALL eosio_assert($7, [3776])
	$2 = *(($13 + [24]))
	$19 = *(($13 + [16]))
	$6 = *(($13 + [32]))
	$17 = *(($13 + [8]))
	$18 = *($13)
	*($16 + [304]) = $3
	*($16 + [312]) = $17
	$7 = *(($1 + [104]))
	*($16 + [320]) = [2]
	*(($16 + [323])) = *((($16 + [373]) + [2]))
	*($16 + [321 align=1]) = *($16 + [373 align=1])
	*($16 + [324]) = $18
	*($16 + [328]) = $6
	*($16 + [332]) = [0]
	*($16 + [336]) = [0]
	*($16 + [337]) = [0]
	*(($16 + [342])) = *(($16 + [370]))
	*($16 + [338 align=2]) = *($16 + [366 align=2])
	*($16 + [344]) = $19
	*(($16 + [352])) = $2
	$2 = *($16 + [504])
	$6 = CALL memcpy($16, ($16 + [304]), [56])
	CALL $397($7, $6, $2)
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [3712])
	$2 = (int_64)5459781
	
.LOOP $label$32:
	$16 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$33 }
	
.LOOP $label$34:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$31 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$34 }
	
.LABEL $label$33
	$16 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$32 }
	
.LABEL $label$31
	CALL eosio_assert($16, [3776])
	if ( $8 ){ goto $label$35 }
	CALL eosio_assert([1], [3984])
	CALL eosio_assert(((int_64)$15 > (int_64)-4611686018427387904), [4032])
	CALL eosio_assert(((int_64)$15 < (int_64)4611686018427387904), [4064])
	*(($0 + [8])) = $10
	$19 = ((int_64)(CASTING uint_64)(uint_32 $4) * (int_64)$15)
	$2 = ((int_64)$19 / (int_64)100)
	*($0) = $2
	if ( ((uint_64)((int_64)$19 + (int_64)99) > (uint_64)(int_64)198) ){ goto $label$36 }
	$2 = (int_64)1
	*($0) = (int_64)1
	
.LABEL $label$36
	CALL eosio_assert([1], [4496])
	$15 = (int_64)
	CALL eosio_assert(((int_64)$15($15 - $2)) > (int_64)-4611686018427387904), [4544])
	CALL eosio_assert(((int_64)$15 < (int_64)4611686018427387904), [4576])
	
.LABEL $label$35
	*(($6 + [280])) = [0]
	*($6 + [272]) = (int_64)0
	$16 = CALL strlen([4992])
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$37 }
	if ( ((uint_32)$16 >= (uint_32)[11]) ){ goto $label$40 }
	*($6 + [272]) = ($16 << [1])
	$14 = (($6 + [272]) | [1])
	if ( $16 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	$7 = (($16 + [16]) & [-16])
	$14 = CALL $955($7)
	*($6 + [272]) = ($7 | [1])
	*($6 + [280]) = $14
	*($6 + [276]) = $16
	
.LABEL $label$39
	CALL memcpy($14, [4992], $16)
	
.LABEL $label$38
	*(($14 + $16)) = [0]
	CALL _ZNSt3__19to_stringEi(($6 + [256]), *(($13 + [32])))
	$16 = *($6 + [256])
	$14 = ($16 & [1])
	$16 = CALL $961(($6 + [272]), ( *($6 + [264]) ? (($6 + [256]) | [1]) : $14 ), ( *($6 + [260]) ? uint_32($16 >> [1]) : $14 ))
	$14 = ($16 + [8])
	*((($6 + [512]) + [8])) = *($14)
	*($6 + [512]) = *($16)
	*($16) = [0]
	*(($16 + [4])) = [0]
	*($14) = [0]
	$16 = CALL $962(($6 + [512]), [4640])
	$14 = ($16 + [8])
	*((($6 + [168]) + [8])) = *($14)
	*($6 + [168]) = *($16)
	*($16) = [0]
	*(($16 + [4])) = [0]
	*($14) = [0]
	CALL _ZNSt3__19to_stringEy(($6 + [240]), *($13))
	$16 = *($6 + [240])
	$14 = ($16 & [1])
	$16 = CALL $961(($6 + [168]), ( *($6 + [248]) ? (($6 + [240]) | [1]) : $14 ), ( *($6 + [244]) ? uint_32($16 >> [1]) : $14 ))
	$14 = ($16 + [8])
	*((($6 + [184]) + [8])) = *($14)
	*($6 + [184]) = *($16)
	*($16) = [0]
	*(($16 + [4])) = [0]
	*($14) = [0]
	$16 = CALL $962(($6 + [184]), [4640])
	$14 = ($16 + [8])
	*((($6 + [120]) + [8])) = *($14)
	*($6 + [120]) = *($16)
	*($16) = [0]
	*(($16 + [4])) = [0]
	*($14) = [0]
	CALL $427(($6 + [224]), ($6 + [504]))
	$16 = *($6 + [224])
	$14 = ($16 & [1])
	$16 = CALL $961(($6 + [120]), ( *($6 + [232]) ? (($6 + [224]) | [1]) : $14 ), ( *($6 + [228]) ? uint_32($16 >> [1]) : $14 ))
	$14 = ($16 + [8])
	*((($6 + [288]) + [8])) = *($14)
	*($6 + [288]) = *($16)
	*($16) = [0]
	*(($16 + [4])) = [0]
	*($14) = [0]
	if ( ((*($6 + [224]) & [1]) == 0) ){ goto $label$41 }
	CALL $956(*((($6 + [224]) + [8])))
	
.LABEL $label$41
	if ( ((*($6 + [120]) & [1]) == 0) ){ goto $label$42 }
	CALL $956(*($6 + [128]))
	
.LABEL $label$42
	if ( ((*($6 + [184]) & [1]) == 0) ){ goto $label$43 }
	CALL $956(*($6 + [192]))
	
.LABEL $label$43
	if ( ((*($6 + [240]) & [1]) == 0) ){ goto $label$44 }
	CALL $956(*(($6 + [248])))
	
.LABEL $label$44
	if ( ((*($6 + [168]) & [1]) == 0) ){ goto $label$45 }
	CALL $956(*($6 + [176]))
	
.LABEL $label$45
	if ( ((*($6 + [512]) & [1]) == 0) ){ goto $label$46 }
	CALL $956(*($6 + [520]))
	
.LABEL $label$46
	if ( ((*($6 + [256]) & [1]) == 0) ){ goto $label$47 }
	CALL $956(*(($6 + [264])))
	
.LABEL $label$47
	if ( ((*($6 + [272]) & [1]) == 0) ){ goto $label$48 }
	CALL $956(*($6 + [280]))
	
.LABEL $label$48
	$11 = *($1)
	$2 = (int_64)0
	$17 = (int_64)59
	$16 = [2400]
	$18 = (int_64)0
	
.LOOP $label$49:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$54 }
	$14 = *($16)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$53 }
	$14 = ($14 + [165])
	goto $label$52 
	
.LABEL $label$54
	$19 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$53
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$52
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$51
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$50
	$16 = ($16 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$18 = ((int_64)$19 | (int_64)$18)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$49 }
	*($6 + [176]) = $18
	*($6 + [168]) = $11
	$2 = (int_64)0
	$17 = (int_64)59
	$16 = [1312]
	$18 = (int_64)0
	
.LOOP $label$55:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$60 }
	$14 = *($16)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$59 }
	$14 = ($14 + [165])
	goto $label$58 
	
.LABEL $label$60
	$19 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$59
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$58
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$57
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$56
	$16 = ($16 + [1])
	$17 = ((int_64)$17 + (int_64)-5)
	$18 = ((int_64)$19 | (int_64)$18)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$55 }
	$2 = (int_64)0
	$17 = (int_64)59
	$16 = [1296]
	$20 = (int_64)0
	
.LOOP $label$61:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$66 }
	$14 = *($16)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$65 }
	$14 = ($14 + [165])
	goto $label$64 
	
.LABEL $label$66
	$19 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$65
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$64
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$63
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$62
	$16 = ($16 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$20 = ((int_64)$19 | (int_64)$20)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$61 }
	$2 = *(($13 + [8]))
	*(($6 + [144])) = $10
	*($6 + [120]) = $11
	*($6 + [136]) = $15
	*($6 + [128]) = $2
	CALL $972(($6 + [152]), ($6 + [288]))
	$16 = CALL $380(($6 + [184]), ($6 + [168]), $18, $20, ($6 + [120]))
	CALL $381(($6 + [512]), $16)
	$14 = *($6 + [512])
	CALL send_inline($14, (*($6 + [516]) - $14))
	$14 = *($6 + [512])
	if ( ($14 == 0) ){ goto $label$67 }
	*($6 + [516]) = $14
	CALL $956($14)
	
.LABEL $label$67
	$14 = *($16 + [28])
	if ( ($14 == 0) ){ goto $label$68 }
	*(($16 + [32])) = $14
	CALL $956($14)
	
.LABEL $label$68
	$14 = *($16 + [16])
	if ( ($14 == 0) ){ goto $label$69 }
	*(($16 + [20])) = $14
	CALL $956($14)
	
.LABEL $label$69
	if ( ((*($6 + [152]) & [1]) == 0) ){ goto $label$70 }
	CALL $956(*(($6 + [160])))
	
.LABEL $label$70
	if ( ((*($6 + [288]) & [1]) == 0) ){ goto $label$71 }
	CALL $956(*($6 + [296]))
	
.LABEL $label$71
	$1 = *($6 + [488])
	if ( ($1 == 0) ){ goto $label$72 }
	$7 = ($6 + [492])
	$16 = *($7)
	if ( ((int_32)$16 == (int_32)$1) ){ goto $label$74 }
	
.LOOP $label$75:
	$16 = ($16 + [-24])
	$14 = *($16)
	*($16) = [0]
	if ( ($14 == 0) ){ goto $label$76 }
	$13 = *($14 + [12])
	if ( ($13 == 0) ){ goto $label$77 }
	*(($14 + [16])) = $13
	CALL $956($13)
	
.LABEL $label$77
	CALL $956($14)
	
.LABEL $label$76
	if ( ((int_32)$1 != (int_32)$16) ){ goto $label$75 }
	$16 = *(($6 + [488]))
	goto $label$73 
	
.LABEL $label$74
	$16 = $1
	
.LABEL $label$73
	*($7) = $1
	CALL $956($16)
	
.LABEL $label$72
	*([0] + [4]) = ($6 + [528])
	return (unreachable)
	
.LABEL $label$37
	CALL $957(($6 + [272]))
}

void .FUNC $371 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_64 $26
	int_32 $27
	$27 = (*([0] + [4]) - [544])
	*([0] + [4]) = $27
	*($27 + [520]) = $2
	CALL require_auth($2)
	$4 = [0]
	*(($27 + [512])) = [0]
	*($27 + [496]) = (int_64)-1
	*($27 + [504]) = (int_64)0
	$2 = *($1)
	*($27 + [480]) = $2
	*($27 + [488]) = $2
	$21 = CALL db_find_i64($2, $2, (int_64)-4315237476541136896, *($3 + [32]))
	if ( ((int_32)$21 <= (int_32)[-1]) ){ goto $label$2 }
	$4 = CALL $422(($27 + [480]), $21)
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)($27 + [480])), [1536])
	*($27 + [476]) = $4
	*($27 + [472]) = ($27 + [480])
	goto $label$1 
	
.LABEL $label$2
	*($27 + [476]) = [0]
	*($27 + [472]) = ($27 + [480])
	
.LABEL $label$1
	$15 = [0]
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [4320])
	$2 = CALL atoll(( *(($3 + [28])) ? ($3 + [21]) : (*($3 + [20]) & [1]) ))
	$18 = [-1]
	$21 = *($4 + [16])
	$16 = *(($4 + [20]))
	if ( ((int_32)$16 == (int_32)$21) ){ goto $label$3 }
	$16 = ((int_32)($16 - $21) / (int_32)[40])
	
.LOOP $label$5:
	if ( ((int_64)*($21) == (int_64)$2) ){ goto $label$4 }
	$21 = ($21 + [40])
	$15 = ($15 + [1])
	if ( ($15 <= $16) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$18 = $15
	
.LABEL $label$3
	*($27 + [468]) = $18
	CALL eosio_assert(((int_32)uint_32($18 >> [31]) ^ (int_32)[1]), [4320])
	$5 = *($4 + [16])
	$6 = ($5 + ((int_32)$18 * (int_32)[40]))
	$8 = ($6 + [32])
	CALL eosio_assert(((int_64)*(($3 + [56])) == (int_64)*($8)), [4352])
	CALL eosio_assert(((int_64)*($3 + [48]) == (int_64)*($6 + [24])), [4416])
	*((($27 + [424]) + [32])) = [0]
	$2 = *($1)
	*($27 + [424]) = $2
	*($27 + [440]) = (int_64)-1
	*($27 + [448]) = (int_64)0
	*($27 + [432]) = $2
	$21 = CALL db_find_i64($2, $2, (int_64)-4315240091392933888, *($27 + [520]))
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$9 }
	$9 = CALL $423(($27 + [424]), $21)
	CALL eosio_assert(((int_32)*($9 + [20]) == (int_32)($27 + [424])), [1536])
	$19 = [-1]
	$15 = *($9 + [8])
	$16 = *(($9 + [12]))
	if ( ((int_32)$16 == (int_32)$15) ){ goto $label$7 }
	$21 = ($15 + [4])
	$4 = int_32(($16 - $15) >> [3])
	$15 = [0]
	$16 = (*($6 + [12]) & [65535])
	
.LOOP $label$10:
	if ( ((int_32)*($21) == (int_32)$16) ){ goto $label$8 }
	$21 = ($21 + [8])
	$15 = ($15 + [1])
	if ( ($15 <= $4) ){ goto $label$10 }
	goto $label$7 
	
.LABEL $label$9
	$2 = *($1)
	*($27 + [240]) = $6
	*($27 + [244]) = ($27 + [520])
	CALL $425(($27 + [304]), ($27 + [424]), $2, ($27 + [240]))
	goto $label$6 
	
.LABEL $label$8
	$19 = $15
	
.LABEL $label$7
	CALL eosio_assert(uint_32($19 >> [31]), [4448])
	$2 = *($1)
	*($27 + [240]) = $6
	CALL eosio_assert([1], [1696])
	CALL $424(($27 + [424]), $9, $2, ($27 + [240]))
	
.LABEL $label$6
	$20 = ($5 + ((int_32)$18 * (int_32)[40]))
	$2 = *($20 + [16])
	$9 = *(($27 + [448]))
	$16 = *(($27 + [452]))
	if ( ((int_32)$16 == (int_32)$9) ){ goto $label$11 }
	$21 = ($16 + [-24])
	$4 = ([0] - $9)
	
.LOOP $label$12:
	if ( ((int_64)*(*($21)) == (int_64)$2) ){ goto $label$11 }
	$16 = $21
	$15 = ($21 + [-24])
	$21 = $15
	if ( ((int_32)($15 + $4) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_32)$16 == (int_32)$9) ){ goto $label$14 }
	$19 = *(($16 + [-24]))
	CALL eosio_assert(((int_32)*($19 + [20]) == (int_32)($27 + [424])), [1536])
	goto $label$13 
	
.LABEL $label$14
	$19 = [0]
	$21 = CALL db_find_i64(*($27 + [424]), *(($27 + [432])), (int_64)-4315240091392933888, $2)
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$13 }
	$19 = CALL $423(($27 + [424]), $21)
	CALL eosio_assert(((int_32)*($19 + [20]) == (int_32)($27 + [424])), [1536])
	
.LABEL $label$13
	$9 = ($20 + [16])
	$15 = [0]
	$10 = ((int_32)$19 != (int_32)[0])
	CALL eosio_assert($10, [4320])
	$17 = ($5 + ((int_32)$18 * (int_32)[40]))
	$20 = [-1]
	$21 = *($19 + [8])
	$4 = *(($19 + [12]))
	if ( ((int_32)$4 == (int_32)$21) ){ goto $label$15 }
	$16 = *($17 + [8])
	$4 = int_32(($4 - $21) >> [3])
	
.LOOP $label$17:
	if ( ((int_32)*($21) == (int_32)$16) ){ goto $label$16 }
	$21 = ($21 + [8])
	$15 = ($15 + [1])
	if ( ($15 <= $4) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$20 = $15
	
.LABEL $label$15
	$7 = ($3 + [48])
	$4 = ($6 + [24])
	$16 = ($17 + [8])
	*($27 + [420]) = $20
	CALL eosio_assert(((int_32)uint_32($20 >> [31]) ^ (int_32)[1]), [4320])
	CALL eosio_assert(((int_32)*((*(($19 + [8])) + (*($27 + [420]) << [3])) + [6]) == (int_32)[2]), [4480])
	$2 = *($1)
	*($27 + [240]) = ($27 + [420])
	CALL eosio_assert($10, [1696])
	CALL $426(($27 + [424]), $19, $2, ($27 + [240]))
	$2 = *($1)
	$25 = *($9)
	CALL eosio_assert([1], [3712])
	$19 = ((int_64)$25 == (int_64)$2)
	$6 = ( [0] ? [5] : $19 )
	$2 = (int_64)5459781
	$21 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$21 }
	
.LOOP $label$22:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$22 }
	
.LABEL $label$21
	$15 = [1]
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$15 = [0]
	
.LABEL $label$18
	CALL eosio_assert($15, [3776])
	$11 = *(($3 + [56]))
	$22 = *($3 + [48])
	if ( ($19 == 0) ){ goto $label$24 }
	$13 = (int_64)1397703940
	$12 = (int_64)0
	goto $label$23 
	
.LABEL $label$24
	CALL eosio_assert([1], [3984])
	CALL eosio_assert(((int_64)$22 > (int_64)-4611686018427387904), [4032])
	CALL eosio_assert(((int_64)$22 < (int_64)4611686018427387904), [4064])
	CALL eosio_assert([1], [4496])
	$2 = ((int_64)$22 * (int_64)(CASTING uint_64)(uint_32 $6))
	$12 = ( (int_64)1 ? ((int_64)$2 / (int_64)100) : (uint_64)(((int_64)$2 + (int_64)99) <= (int_64)199) )
	$22 = (int_64)
	CALL eosio_assert(((int_64)$22($22 - $12)) > (int_64)-4611686018427387904), [4544])
	CALL eosio_assert(((int_64)$22 < (int_64)4611686018427387904), [4576])
	$13 = $11
	
.LABEL $label$23
	if ( ((int_64)*($9) == (int_64)*($1)) ){ goto $label$26 }
	*(($27 + [400])) = [0]
	*($27 + [392]) = (int_64)0
	$21 = CALL strlen([4608])
	if ( ((uint_32)$21 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$21 >= (uint_32)[11]) ){ goto $label$29 }
	*($27 + [392]) = ($21 << [1])
	$15 = (($27 + [392]) | [1])
	if ( $21 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$3 = (($21 + [16]) & [-16])
	$15 = CALL $955($3)
	*($27 + [392]) = ($3 | [1])
	*($27 + [400]) = $15
	*($27 + [396]) = $21
	
.LABEL $label$28
	CALL memcpy($15, [4608], $21)
	
.LABEL $label$27
	*(($15 + $21)) = [0]
	CALL _ZNSt3__19to_stringEi(($27 + [376]), *(($5 + ((int_32)$18 * (int_32)[40])) + [12]))
	$21 = *($27 + [376])
	$15 = ($21 & [1])
	$21 = CALL $961(($27 + [392]), ( *($27 + [384]) ? (($27 + [376]) | [1]) : $15 ), ( *($27 + [380]) ? uint_32($21 >> [1]) : $15 ))
	$15 = ($21 + [8])
	*((($27 + [528]) + [8])) = *($15)
	*($27 + [528]) = *($21)
	*($21) = [0]
	*(($21 + [4])) = [0]
	*($15) = [0]
	$21 = CALL $962(($27 + [528]), [4640])
	$15 = ($21 + [8])
	*((($27 + [288]) + [8])) = *($15)
	*($27 + [288]) = *($21)
	*($21) = [0]
	*(($21 + [4])) = [0]
	*($15) = [0]
	CALL _ZNSt3__19to_stringEm(($27 + [360]), *($16))
	$21 = *($27 + [360])
	$15 = ($21 & [1])
	$21 = CALL $961(($27 + [288]), ( *($27 + [368]) ? (($27 + [360]) | [1]) : $15 ), ( *($27 + [364]) ? uint_32($21 >> [1]) : $15 ))
	$15 = ($21 + [8])
	*((($27 + [304]) + [8])) = *($15)
	*($27 + [304]) = *($21)
	*($21) = [0]
	*(($21 + [4])) = [0]
	*($15) = [0]
	$21 = CALL $962(($27 + [304]), [4640])
	$15 = ($21 + [8])
	*((($27 + [240]) + [8])) = *($15)
	*($27 + [240]) = *($21)
	*($21) = [0]
	*(($21 + [4])) = [0]
	*($15) = [0]
	CALL $427(($27 + [344]), ($27 + [520]))
	$21 = *($27 + [344])
	$15 = ($21 & [1])
	$21 = CALL $961(($27 + [240]), ( *($27 + [352]) ? (($27 + [344]) | [1]) : $15 ), ( *($27 + [348]) ? uint_32($21 >> [1]) : $15 ))
	$15 = ($21 + [8])
	*((($27 + [408]) + [8])) = *($15)
	*($27 + [408]) = *($21)
	*($21) = [0]
	*(($21 + [4])) = [0]
	*($15) = [0]
	if ( ((*($27 + [344]) & [1]) == 0) ){ goto $label$30 }
	CALL $956(*((($27 + [344]) + [8])))
	
.LABEL $label$30
	if ( ((*($27 + [240]) & [1]) == 0) ){ goto $label$31 }
	CALL $956(*($27 + [248]))
	
.LABEL $label$31
	if ( ((*($27 + [304]) & [1]) == 0) ){ goto $label$32 }
	CALL $956(*($27 + [312]))
	
.LABEL $label$32
	if ( ((*($27 + [360]) & [1]) == 0) ){ goto $label$33 }
	CALL $956(*(($27 + [368])))
	
.LABEL $label$33
	if ( ((*($27 + [288]) & [1]) == 0) ){ goto $label$34 }
	CALL $956(*($27 + [296]))
	
.LABEL $label$34
	if ( ((*($27 + [528]) & [1]) == 0) ){ goto $label$35 }
	CALL $956(*($27 + [536]))
	
.LABEL $label$35
	if ( ((*($27 + [376]) & [1]) == 0) ){ goto $label$36 }
	CALL $956(*(($27 + [384])))
	
.LABEL $label$36
	if ( ((*($27 + [392]) & [1]) == 0) ){ goto $label$37 }
	CALL $956(*($27 + [400]))
	
.LABEL $label$37
	$14 = *($1)
	$2 = (int_64)0
	$23 = (int_64)59
	$21 = [2400]
	$24 = (int_64)0
	
.LOOP $label$38:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$43 }
	$15 = *($21)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$42 }
	$15 = ($15 + [165])
	goto $label$41 
	
.LABEL $label$43
	$25 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$42
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$41
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$40
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$39
	$21 = ($21 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$24 = ((int_64)$25 | (int_64)$24)
	$23 = ((int_64)$23 + (int_64)-5)
	if ( ((int_64)$23 != (int_64)-6) ){ goto $label$38 }
	*($27 + [296]) = $24
	*($27 + [288]) = $14
	$2 = (int_64)0
	$23 = (int_64)59
	$21 = [1312]
	$24 = (int_64)0
	
.LOOP $label$44:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$49 }
	$15 = *($21)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$48 }
	$15 = ($15 + [165])
	goto $label$47 
	
.LABEL $label$49
	$25 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$48
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$47
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$46
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$45
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)-5)
	$24 = ((int_64)$25 | (int_64)$24)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$44 }
	$2 = (int_64)0
	$23 = (int_64)59
	$21 = [1296]
	$26 = (int_64)0
	
.LOOP $label$50:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$55 }
	$15 = *($21)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$15 = ($15 + [165])
	goto $label$53 
	
.LABEL $label$55
	$25 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$54
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$52
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$51
	$21 = ($21 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$26 = ((int_64)$25 | (int_64)$26)
	$23 = ((int_64)$23 + (int_64)-5)
	if ( ((int_64)$23 != (int_64)-6) ){ goto $label$50 }
	$2 = *($9)
	*(($27 + [264])) = $11
	*($27 + [240]) = $14
	*($27 + [256]) = $22
	*($27 + [248]) = $2
	CALL $972(($27 + [272]), ($27 + [408]))
	$21 = CALL $380(($27 + [304]), ($27 + [288]), $24, $26, ($27 + [240]))
	CALL $381(($27 + [528]), $21)
	$15 = *($27 + [528])
	CALL send_inline($15, (*($27 + [532]) - $15))
	$15 = *($27 + [528])
	if ( ($15 == 0) ){ goto $label$56 }
	*($27 + [532]) = $15
	CALL $956($15)
	
.LABEL $label$56
	$15 = *($21 + [28])
	if ( ($15 == 0) ){ goto $label$57 }
	*(($21 + [32])) = $15
	CALL $956($15)
	
.LABEL $label$57
	$15 = *($21 + [16])
	if ( ($15 == 0) ){ goto $label$58 }
	*(($21 + [20])) = $15
	CALL $956($15)
	
.LABEL $label$58
	if ( ((*($27 + [272]) & [1]) == 0) ){ goto $label$59 }
	CALL $956(*(($27 + [280])))
	
.LABEL $label$59
	if ( ((*($27 + [408]) & [1]) == 0) ){ goto $label$26 }
	CALL $956(*($27 + [416]))
	
.LABEL $label$26
	$21 = [0]
	$3 = (CASTING uint_32)(uint_64 (int_64))(((uint_64)CALL publication_time() / (uint_64)(int_64)1000000) - *([0] + [12])))
	if ( ((int_64)*($9) == (int_64)*($1)) ){ goto $label$60 }
	CALL eosio_assert([1], [3712])
	$2 = (int_64)5459781
	
.LOOP $label$63:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$62 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$64 }
	
.LOOP $label$65:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$62 }
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$65 }
	
.LABEL $label$64
	$15 = [1]
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$63 }
	goto $label$61 
	
.LABEL $label$62
	$15 = [0]
	
.LABEL $label$61
	CALL eosio_assert($15, [3776])
	$2 = *($27 + [520])
	*($27 + [176]) = $3
	$21 = *(($5 + ((int_32)$18 * (int_32)[40])) + [12])
	$15 = *($16)
	*($27 + [184]) = $2
	$19 = *($1 + [12])
	$2 = *($8)
	$25 = *($4)
	*($27 + [192]) = [8]
	*(($27 + [195])) = *(($27 + [290]))
	*($27 + [193 align=1]) = *($27 + [288 align=1])
	*($27 + [196]) = $15
	*($27 + [200]) = $21
	*($27 + [204]) = [0]
	*($27 + [208]) = [0]
	*($27 + [209]) = [0]
	*(($27 + [214])) = *((($27 + [304]) + [4]))
	*($27 + [210 align=2]) = *($27 + [304 align=2])
	*($27 + [216]) = $25
	*(($27 + [224])) = $2
	*($27 + [232]) = $6
	*(($27 + [239])) = *(($27 + [246]))
	*(($27 + [237])) = *((($27 + [240]) + [4]))
	*($27 + [233 align=1]) = *($27 + [240 align=1])
	$2 = *($9)
	CALL memcpy(($27 + [56]), ($27 + [176]), [64])
	CALL $428($19, ($27 + [56]), $2)
	
.LABEL $label$60
	CALL eosio_assert([1], [3712])
	$2 = (int_64)5459781
	$21 = [0]
	
.LOOP $label$68:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$67 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$69 }
	
.LOOP $label$70:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$67 }
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$70 }
	
.LABEL $label$69
	$15 = [1]
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$68 }
	goto $label$66 
	
.LABEL $label$67
	$15 = [0]
	
.LABEL $label$66
	CALL eosio_assert($15, [3776])
	$21 = *(($5 + ((int_32)$18 * (int_32)[40])) + [12])
	$15 = *($16)
	*($27 + [128]) = *($9)
	$16 = *($1 + [12])
	$2 = *($8)
	$25 = *($4)
	*($27 + [120]) = $3
	*($27 + [136]) = [8]
	*(($27 + [139])) = *(($27 + [290]))
	*($27 + [137 align=1]) = *($27 + [288 align=1])
	*($27 + [140]) = $15
	*($27 + [144]) = $21
	*($27 + [148]) = [0]
	*($27 + [152]) = [0]
	*($27 + [153]) = [0]
	*(($27 + [158])) = *(($27 + [308]))
	*($27 + [154 align=2]) = *($27 + [304 align=2])
	*($27 + [160]) = $25
	*(($27 + [168])) = $2
	$2 = *($27 + [520])
	$4 = CALL memcpy($27, ($27 + [120]), [56])
	CALL $397($16, $4, $2)
	$27 = *($4 + [476])
	$2 = *($1)
	*($4 + [244]) = ($4 + [468])
	*($4 + [240]) = ($4 + [472])
	CALL eosio_assert(((int_32)$27 != (int_32)[0]), [1696])
	CALL $429(($4 + [480]), $27, $2, ($4 + [240]))
	if ( ((int_64)*($9) != (int_64)*($1)) ){ goto $label$73 }
	*($0) = *($7)
	*(($0 + [8])) = *(($7 + [8]))
	$16 = *($4 + [448])
	if ( $16 ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$73
	*($0 + [8]) = $13
	*($0) = $12
	$16 = *($4 + [448])
	if ( ($16 == 0) ){ goto $label$71 }
	
.LABEL $label$72
	$1 = ($4 + [452])
	$27 = *($1)
	if ( ((int_32)$27 == (int_32)$16) ){ goto $label$75 }
	
.LOOP $label$76:
	$27 = ($27 + [-24])
	$21 = *($27)
	*($27) = [0]
	if ( ($21 == 0) ){ goto $label$77 }
	$15 = *($21 + [8])
	if ( ($15 == 0) ){ goto $label$78 }
	*(($21 + [12])) = $15
	CALL $956($15)
	
.LABEL $label$78
	CALL $956($21)
	
.LABEL $label$77
	if ( ((int_32)$16 != (int_32)$27) ){ goto $label$76 }
	$27 = *(($4 + [448]))
	goto $label$74 
	
.LABEL $label$75
	$27 = $16
	
.LABEL $label$74
	*($1) = $16
	CALL $956($27)
	
.LABEL $label$71
	$16 = *($4 + [504])
	if ( ($16 == 0) ){ goto $label$79 }
	$1 = ($4 + [508])
	$27 = *($1)
	if ( ((int_32)$27 == (int_32)$16) ){ goto $label$81 }
	
.LOOP $label$82:
	$27 = ($27 + [-24])
	$21 = *($27)
	*($27) = [0]
	if ( ($21 == 0) ){ goto $label$83 }
	$15 = *($21 + [16])
	if ( ($15 == 0) ){ goto $label$84 }
	*(($21 + [20])) = $15
	CALL $956($15)
	
.LABEL $label$84
	CALL $956($21)
	
.LABEL $label$83
	if ( ((int_32)$16 != (int_32)$27) ){ goto $label$82 }
	$27 = *(($4 + [504]))
	goto $label$80 
	
.LABEL $label$81
	$27 = $16
	
.LABEL $label$80
	*($1) = $16
	CALL $956($27)
	
.LABEL $label$79
	*([0] + [4]) = ($4 + [544])
	return (unreachable)
	
.LABEL $label$25
	CALL $957(($27 + [392]))
}

void .FUNC $376 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_32 $24
	$24 = (*([0] + [4]) - [176])
	*([0] + [4]) = $24
	$18 = [0]
	$7 = [0]
	$17 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)3631284361385115648, (int_64)0)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$1 }
	CALL $375(($0 + [8]), $17)
	$7 = [1]
	
.LABEL $label$1
	CALL eosio_assert($7, [3904])
	*($24 + [152]) = [0]
	*($24 + [144]) = (int_64)0
	*($24 + [136]) = (int_64)1397703940
	*($24 + [128]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$20 = (int_64)5459781
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$7 = [1]
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	
.LABEL $label$2
	CALL eosio_assert($7, [3776])
	$18 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)-4149917288674710016, (int_64)0)
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$7 }
	$2 = ($0 + [48])
	$17 = CALL $355($2, $18)
	$3 = (($24 + [8]) | [1])
	$8 = ($0 + [168])
	$11 = (($24 + [24]) + [24])
	$12 = (($24 + [24]) + [16])
	$4 = (($24 + [24]) + [32])
	$13 = ($4 + [4])
	$14 = ($24 + [116])
	$16 = ($24 + [64])
	$15 = ($24 + [108])
	
.LOOP $label$8:
	$5 = *(($1 + [8]))
	$22 = *($17 + [8])
	$20 = *($1)
	CALL eosio_assert([1], [3984])
	CALL eosio_assert(((int_64)$20 > (int_64)-4611686018427387904), [4032])
	CALL eosio_assert(((int_64)$20 < (int_64)4611686018427387904), [4064])
	CALL eosio_assert(((int_64)$5 == (int_64)*((($24 + [128]) + [8]))), [4096])
	$6 = ((int_64)((int_64)$20 * (int_64)$22) / (int_64)1000)
	$20 = ((int_64)*($24 + [128]) + (int_64)$6)
	*($24 + [128]) = $20
	CALL eosio_assert(((int_64)$20 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($24 + [128]) < (int_64)4611686018427387904), [4176])
	$23 = *($0)
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [2400]
	$21 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$20 > (uint_64)(int_64)5) ){ goto $label$14 }
	$7 = *($18)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$7 = ($7 + [165])
	goto $label$12 
	
.LABEL $label$14
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$10
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$9 }
	*((($24 + [72]) + [8])) = $21
	*($24 + [72]) = $23
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [1312]
	$21 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$20 > (uint_64)(int_64)10) ){ goto $label$20 }
	$7 = *($18)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$7 = ($7 + [165])
	goto $label$18 
	
.LABEL $label$20
	$22 = (int_64)0
	if ( ((int_64)$20 == (int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$16
	$18 = ($18 + [1])
	$19 = ((int_64)$19 + (int_64)-5)
	$21 = ((int_64)$22 | (int_64)$21)
	$20 = ((int_64)$20 + (int_64)1)
	if ( ((int_64)$20 != (int_64)13) ){ goto $label$15 }
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [1296]
	$23 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$20 > (uint_64)(int_64)7) ){ goto $label$26 }
	$7 = *($18)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$7 = ($7 + [165])
	goto $label$24 
	
.LABEL $label$26
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$22
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$23 = ((int_64)$22 | (int_64)$23)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$21 }
	*($24 + [12 align=4]) = (int_64)0
	*($24 + [8]) = [0]
	$10 = *($8)
	$18 = CALL strlen($10)
	if ( ((uint_32)$18 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$18 >= (uint_32)[11]) ){ goto $label$32 }
	*($24 + [8]) = ($18 << [1])
	$7 = $3
	if ( $18 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$9 = (($18 + [16]) & [-16])
	$7 = CALL $955($9)
	*((($24 + [8]) + [8])) = $7
	*($24 + [8]) = ($9 | [1])
	*($24 + [12]) = $18
	
.LABEL $label$31
	CALL memcpy($7, $10, $18)
	
.LABEL $label$30
	*(($7 + $18)) = [0]
	*(($10 = (($24 + [24]) + [8]))) = *($17)
	*($11) = $5
	*($12) = $6
	*($13) = *($24 + [12 align=4])
	*($24 + [24]) = *($0)
	*($4) = *($24 + [8])
	*($24 + [8]) = [0]
	*($24 + [12]) = [0]
	*(($7 = (($24 + [8]) + [8]))) = [0]
	CALL $381(($24 + [160]), CALL $380(($24 + [88]), ($24 + [72]), $21, $23, ($24 + [24])))
	$18 = *($24 + [160])
	CALL send_inline($18, (*($24 + [164]) - $18))
	$18 = *($24 + [160])
	if ( ($18 == 0) ){ goto $label$33 }
	*($24 + [164]) = $18
	CALL $956($18)
	
.LABEL $label$33
	$18 = *($14)
	if ( ($18 == 0) ){ goto $label$34 }
	*((($24 + [88]) + [32])) = $18
	CALL $956($18)
	
.LABEL $label$34
	$18 = *((($24 + [88]) + [16]))
	if ( ($18 == 0) ){ goto $label$35 }
	*($15) = $18
	CALL $956($18)
	
.LABEL $label$35
	if ( ((*($4) & [1]) == 0) ){ goto $label$36 }
	CALL $956(*($16))
	
.LABEL $label$36
	if ( ((*($24 + [8]) & [1]) == 0) ){ goto $label$37 }
	CALL $956(*($7))
	
.LABEL $label$37
	*($10) = (int_64)0
	*($12) = (int_64)1397703940
	*($24 + [24]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$20 = (uint_64)*($12) >> (uint_64)(int_64)8)
	$18 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$39 }
	
.LOOP $label$40:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$40 }
	
.LABEL $label$39
	$7 = [1]
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$38 }
	goto $label$27 
	
.LABEL $label$29
	CALL $957(($24 + [8]))
	
.LABEL $label$28
	$7 = [0]
	
.LABEL $label$27
	CALL eosio_assert($7, [3776])
	$20 = *($17)
	*($10) = $6
	*($12) = $5
	*($24 + [24]) = $20
	$18 = *($24 + [148])
	if ( ((int_32)$18 == (int_32)*((($24 + [144]) + [8]))) ){ goto $label$42 }
	*($18) = *($24 + [24])
	*(($18 + [16])) = *($12)
	*(($18 + [8])) = *($10)
	*($24 + [148]) = ($18 + [24])
	goto $label$41 
	
.LABEL $label$42
	CALL $382(($24 + [144]), ($24 + [24]))
	
.LABEL $label$41
	CALL eosio_assert([1], [4208])
	$18 = CALL db_next_i64(*($17 + [16]), ($24 + [24]))
	if ( ((int_32)$18 <= (int_32)[-1]) ){ goto $label$7 }
	$17 = CALL $355($2, $18)
	goto $label$8 
	
.LABEL $label$7
	$18 = ($0 + [88])
	$7 = ($0 + [104])
	$20 = *($7)
	if ( ((int_64)$20 != (int_64)-1) ){ goto $label$43 }
	$20 = (int_64)0
	$17 = CALL db_lowerbound_i64(*($18), *(($0 + [96])), (int_64)5455799419172362240, (int_64)0)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$44 }
	CALL $377($18, $17)
	*($24 + [28]) = [0]
	*($24 + [24]) = $18
	$20 = *(*(CALL $378(($24 + [24])) + [4]))
	$20 = ( (int_64)-2 ? ((int_64)$20 + (int_64)1) : ((uint_64)$20 > (uint_64)(int_64)-3) )
	
.LABEL $label$44
	*(($0 + [104])) = $20
	
.LABEL $label$43
	CALL eosio_assert((uint_64)($20 <= (int_64)-2), [3920])
	*($24 + [88]) = *($7)
	*($24 + [160]) = (int_64))(((uint_64)CALL publication_time() / (uint_64)(int_64)1000000) - *([0] + [12]))
	$20 = *($0)
	*($24 + [28]) = ($24 + [160])
	*($24 + [24]) = ($24 + [88])
	*($24 + [32]) = ($24 + [128])
	*($24 + [36]) = ($24 + [144])
	CALL $379(($24 + [72]), $18, $20, ($24 + [24]))
	$18 = *($24 + [144])
	if ( ($18 == 0) ){ goto $label$45 }
	*($24 + [148]) = $18
	CALL $956($18)
	
.LABEL $label$45
	*([0] + [4]) = ($24 + [176])
	(unreachable)
}

int_32 .FUNC $377 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $955([56])) + [24]) = (int_64)1397703940
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$7 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [3776])
	*($4 + [40]) = [0]
	*($4 + [32 align=4]) = (int_64)0
	*($4 + [44]) = $0
	CALL $390(($8 + [32]), $4)
	*($4 + [48]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [48])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $386($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = *($5 + [32])
	if ( ($6 == 0) ){ goto $label$15 }
	*(($5 + [36])) = $6
	CALL $956($6)
	
.LABEL $label$15
	CALL $956($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $374 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$2 = ($0 + [16])
	$1 = CALL db_lowerbound_i64(*($0 + [8]), *($2), (int_64)3631284361385115648, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$4 = ($0 + [8])
	CALL $375($4, $1)
	if ( ((int_64)*(CALL $375($4, CALL $fimport$18(*($4), *($2), (int_64)3631284361385115648, (int_64)0)) + [16]) < (int_64)11000001) ){ goto $label$1 }
	CALL eosio_assert([1], [3712])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$2 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$2 = [0]
	
.LABEL $label$2
	CALL eosio_assert($2, [3776])
	*($5 + [24]) = (int_64)1397703940
	*(($5 + [8])) = (int_64)1397703940
	*($5 + [16]) = (int_64)1000000
	*($5) = (int_64)1000000
	CALL $376($0, $5)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $375 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $955([200])
	$4 = CALL $393($6)
	*($6 + [184]) = $0
	CALL $394(($8 + [32]), $4)
	*($6 + [188]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [188])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $395(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $839 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [28]) = *(*(*($3) + [4]))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [72]) = ($5 + [60])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $224(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [64]), $2, $5, [60])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $838 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [208])
	*([0] + [4]) = $9
	CALL require_auth($1)
	$4 = [0]
	*(($9 + [128])) = [0]
	*($9 + [112]) = (int_64)-1
	$6 = *($0)
	*($9 + [96]) = $6
	*($9 + [104]) = $6
	*($9 + [120]) = (int_64)0
	$8 = [0]
	$5 = CALL db_lowerbound_i64($6, $6, (int_64)-4427730799613181952, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $477(($9 + [96]), $5)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [5600])
	$6 = CALL publication_time()
	*($9 + [84]) = [0]
	*($9 + [80]) = ($9 + [96])
	$7 = *(CALL $365(($9 + [80])))
	*($9 + [88]) = $7
	$6 = ((uint_64)$6 / (uint_64)(int_64)1000000)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32)
	$7 = *($8) + [8]
	if ( ((uint_64)$7) > (uint_64)$6) ){ goto $label$2 }
	$4 = ((uint_64)((int_64)*(($8 + [16])) + (int_64)$7) > (uint_64)$6)
	
.LABEL $label$2
	CALL eosio_assert($4, [9120])
	*((($9 + [40]) + [32])) = [0]
	*($9 + [56]) = (int_64)-1
	*($9 + [64]) = (int_64)0
	$6 = *($0)
	*($9 + [40]) = $6
	*($9 + [48]) = $6
	$8 = [0]
	$4 = CALL db_find_i64($6, $6, (int_64)-8872998483271876608, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $144(($9 + [40]), $4)
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)($9 + [40])), [1536])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9152])
	CALL eosio_assert(((int_32)(*(($8 + [12])) - *($8 + [8])) == (int_32)[48]), [9168])
	*(($9 + [32])) = [0]
	*($9 + [16]) = (int_64)-1
	*($9 + [24]) = (int_64)0
	$6 = *($0)
	*($9) = $6
	*($9 + [8]) = $6
	$8 = CALL db_find_i64($6, $6, (int_64)-6030912128150405120, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $156($9, $8)
	CALL eosio_assert(((int_32)*($8 + [60]) == (int_32)$9), [1536])
	goto $label$4 
	
.LABEL $label$5
	$8 = *($0 + [8])
	*($9 + [200]) = $1
	*($9 + [199]) = [0]
	*($9 + [136]) = [0]
	$6 = *($8)
	*($9 + [148]) = ($9 + [199])
	*($9 + [144]) = ($9 + [200])
	*($9 + [152]) = ($9 + [136])
	CALL $243(($9 + [184]), ($8 + [88]), $6, ($9 + [144]))
	$2 = *(($9 + [24]))
	$5 = *(($9 + [28]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	$8 = ($5 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$7:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$6 }
	$5 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$8 }
	$8 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [60]) == (int_32)$9), [1536])
	goto $label$4 
	
.LABEL $label$8
	$8 = [0]
	$4 = CALL db_find_i64(*($9), *(($9 + [8])), (int_64)-6030912128150405120, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$8 = CALL $156($9, $4)
	CALL eosio_assert(((int_32)*($8 + [60]) == (int_32)$9), [1536])
	
.LABEL $label$4
	CALL eosio_assert(((int_64)*($8 + [28]) != (int_64)*(*($9 + [92]))), [9200])
	$4 = *($8 + [28])
	if ( ($4 == 0) ){ goto $label$9 }
	CALL eosio_assert(((int_32)$4 == (int_32)*($8 + [30])), [9232])
	
.LABEL $label$9
	$6 = *($0)
	*($9 + [144]) = ($9 + [88])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [1696])
	CALL $839($9, $8, $6, ($9 + [144]))
	CALL $840($0, $1)
	CALL $819($0, $1)
	CALL $820($0, $1)
	CALL $821($0, $1)
	CALL $822($0, $1)
	$8 = *($9 + [92])
	*($9 + [200]) = $1
	*(($9 + [176])) = [0]
	*($9 + [160]) = (int_64)-1
	*($9 + [168]) = (int_64)0
	$6 = *($0)
	*($9 + [144]) = $6
	*($9 + [152]) = $6
	*($9 + [188]) = ($8 + [8])
	*($9 + [184]) = ($9 + [200])
	CALL $841(($9 + [136]), ($9 + [144]), $6, ($9 + [184]))
	$5 = *($9 + [168])
	if ( ($5 == 0) ){ goto $label$10 }
	$3 = ($9 + [172])
	$8 = *($3)
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	CALL $956($4)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$13 }
	$8 = *(($9 + [168]))
	goto $label$11 
	
.LABEL $label$12
	$8 = $5
	
.LABEL $label$11
	*($3) = $5
	CALL $956($8)
	
.LABEL $label$10
	CALL $842($0, $1, *(*($9 + [92])))
	$5 = *($9 + [24])
	if ( ($5 == 0) ){ goto $label$15 }
	$0 = ($9 + [28])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$18:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	CALL $956($4)
	
.LABEL $label$19
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$18 }
	$8 = *(($9 + [24]))
	goto $label$16 
	
.LABEL $label$17
	$8 = $5
	
.LABEL $label$16
	*($0) = $5
	CALL $956($8)
	
.LABEL $label$15
	$0 = *($9 + [64])
	if ( ($0 == 0) ){ goto $label$20 }
	$3 = ($9 + [68])
	$8 = *($3)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$22 }
	
.LOOP $label$23:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$24 }
	$5 = *($4 + [8])
	if ( ($5 == 0) ){ goto $label$25 }
	*(($4 + [12])) = $5
	CALL $956($5)
	
.LABEL $label$25
	CALL $956($4)
	
.LABEL $label$24
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$23 }
	$8 = *(($9 + [64]))
	goto $label$21 
	
.LABEL $label$22
	$8 = $0
	
.LABEL $label$21
	*($3) = $0
	CALL $956($8)
	
.LABEL $label$20
	CALL $367(($9 + [120]))
	*([0] + [4]) = ($9 + [208])
}

void .FUNC $932 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [22]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [56]) = ($5 + [39])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $283(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $5, [39])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $933 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [32])
	$12 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [200]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$10 = ($1 + [168])
	$4 = *($1)
	$7 = *(*($3))
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$7 = (*($10) + ($7 << [5]))
	$6 = ($7 + [32])
	$9 = ($1 + [172])
	$5 = (*($9) - $6)
	$8 = int_32($5 >> [5])
	if ( ($8 == 0) ){ goto $label$3 }
	CALL memmove($7, $6, $5)
	
.LABEL $label$3
	*($9) = ($7 + ($8 << [5]))
	goto $label$1 
	
.LABEL $label$2
	$9 = ($1 + [172])
	
.LABEL $label$1
	*($12 + [24]) = [0]
	*($12) = (int_64)0
	*($12) = *(*($3 + [4]))
	*($12 + [8]) = *(*($3 + [8]))
	*($12 + [24]) = [0]
	CALL $934($10, (*($10) + (*(*($3 + [12])) << [5])), $12)
	$7 = *($9)
	if ( ((uint_32)int_32(($7 - *($10)) >> [5]) <= (uint_32)*(*($3 + [16]))) ){ goto $label$4 }
	*($9) = ($7 + [-32])
	
.LABEL $label$4
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$8 = *(($1 + [104]))
	$5 = *(($1 + [108]))
	$11 = (CASTING uint_64)(uint_32 ((int_32)($5 - $8) / (int_32)[24]))
	$3 = [90]
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$10 = *($8)
	$6 = ( *($8 + [4]) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($6 + $3)
	$11 = (CASTING uint_64)(uint_32 $6)
	$9 = [0]
	
.LOOP $label$8:
	$7 = $9
	$9 = ($7 + [1])
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$8 }
	$10 = *($8 + [12])
	$10 = ( *(($8 + [16])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$3 = (($7 + (($6 + $10) + $3)) + [1])
	$11 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$9:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$9 }
	$8 = ($8 + [24])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$7 }
	
.LABEL $label$6
	$9 = *(($1 + [168]))
	$10 = *(($1 + [172]))
	$7 = ($10 - $9)
	$11 = (CASTING uint_64)(uint_32 int_32($7 >> [5]))
	$3 = ($3 + [44])
	
.LOOP $label$10:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$10 }
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$11 }
	$3 = ((((int_32)uint_32(($7 + [-32]) >> [5]) * (int_32)[21]) + $3) + [21])
	
.LABEL $label$11
	$10 = ($3 + [16])
	if ( ($10 <= [513]) ){ goto $label$13 }
	$3 = CALL malloc($10)
	goto $label$12 
	
.LABEL $label$13
	$3 = ($13 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$12
	*($12 + [4]) = $3
	*($12) = $3
	*($12 + [8]) = ($3 + $10)
	CALL $470($12, $1)
	CALL db_update_i64(*($1 + [204]), $2, $3, $10)
	if ( ($10 <= [513]) ){ goto $label$14 }
	CALL free($3)
	
.LABEL $label$14
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$15 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	*([0] + [4]) = ($12 + [32])
}

int_32 .FUNC $934 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = *($0 + [8])
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$6 }
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$5 }
	$4 = ($3 - ($1 + [32]))
	$8 = int_32($4 >> [5])
	$7 = ($3 + [-32])
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$7 }
	$5 = ($0 + [4])
	$6 = $3
	
.LOOP $label$8:
	*($6) = *($7)
	*(($6 + [24])) = *(($7 + [24]))
	*(($6 + [16])) = *(($7 + [16]))
	*(($6 + [8])) = *(($7 + [8]))
	$6 = (*($5) + [32])
	*($5) = $6
	$7 = ($7 + [32])
	if ( ($7 <= $3) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($8 == 0) ){ goto $label$9 }
	CALL memmove(($3 - ($8 << [5])), $1, $4)
	
.LABEL $label$9
	if ( ((uint_32)$1 > (uint_32)$2) ){ goto $label$10 }
	$2 = ( ($2 + [32]) ? $2 : ((uint_32)*(($0 + [4])) > (uint_32)$2) )
	
.LABEL $label$10
	*($1) = *($2)
	*(($1 + [24])) = *(($2 + [24]))
	*(($1 + [16])) = *(($2 + [16]))
	*(($1 + [8])) = *(($2 + [8]))
	return $1
	
.LABEL $label$6
	$6 = *($0)
	$3 = (int_32(($3 - $6) >> [5]) + [1])
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$3 }
	$7 = ($7 - $6)
	if ( ((uint_32)int_32($7 >> [5]) >= (uint_32)[67108863]) ){ goto $label$12 }
	$5 = int_32(($1 - $6) >> [5])
	$7 = int_32($7 >> [4])
	$6 = ( $3 ? $7 : ($7 <= $3) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ($6 <= [134217728]) ){ goto $label$11 }
	goto $label$1 
	
.LABEL $label$12
	$5 = int_32(($1 - $6) >> [5])
	$6 = [134217727]
	
.LABEL $label$11
	$3 = CALL $955(($6 << [5]))
	goto $label$2 
	
.LABEL $label$5
	*($1) = *($2)
	*(($1 + [24])) = *(($2 + [24]))
	*(($1 + [16])) = *(($2 + [16]))
	*(($1 + [8])) = *(($2 + [8]))
	*(($7 = ($0 + [4]))) = (*($7) + [32])
	return $1
	
.LABEL $label$4
	$6 = [0]
	$3 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	$7 = ($3 + ($5 << [5]))
	$8 = ($3 + ($6 << [5]))
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$13 }
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$14 }
	$7 = ($7 + (((int_32)($5 + [1]) / (int_32)[-2]) << [5]))
	goto $label$13 
	
.LABEL $label$14
	$7 = ( ($5 << [1]) ? [1] : $5 )
	if ( ((uint_32)$7 >= (uint_32)[134217728]) ){ goto $label$1 }
	$6 = ($7 << [5])
	$5 = CALL $955($6)
	$7 = ($5 + (($7 << [3]) & [-32]))
	$8 = ($5 + $6)
	if ( ($3 == 0) ){ goto $label$13 }
	CALL $956($3)
	
.LABEL $label$13
	*($7) = *($2)
	*(($7 + [24])) = *(($2 + [24]))
	*(($7 + [16])) = *(($2 + [16]))
	*(($7 + [8])) = *(($2 + [8]))
	$3 = *($0)
	$6 = ($1 - $3)
	$5 = ($7 - $6)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$15 }
	CALL memcpy($5, $3, $6)
	
.LABEL $label$15
	$6 = ($7 + [32])
	$2 = ($0 + [4])
	$3 = (*($2) - $1)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$16 }
	CALL memcpy($6, $1, $3)
	$6 = ($6 + $3)
	
.LABEL $label$16
	*($2) = $6
	$6 = *($0)
	*($0) = $5
	*(($0 + [8])) = $8
	if ( ($6 == 0) ){ goto $label$17 }
	CALL $956($6)
	
.LABEL $label$17
	return $7
	
.LABEL $label$1
	CALL abort()
	(unreachable)
	return (unreachable)
}

void .FUNC $935 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [208])
	*([0] + [4]) = $18
	$8 = *(($7 + [32]))
	$7 = *($0 + [20])
	$13 = *(($7 + [36]))
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$1 }
	$12 = ($13 + [-24])
	$9 = ([0] - $8)
	
.LOOP $label$2:
	if ( ((int_64)*(*($12)) == (int_64)$1) ){ goto $label$1 }
	$13 = $12
	$10 = ($12 + [-24])
	$12 = $10
	if ( ((int_32)($10 + $9) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$10 = ($7 + [8])
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$4 }
	$12 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [24]) == (int_32)$10), [1536])
	goto $label$3 
	
.LABEL $label$4
	$12 = [0]
	$13 = CALL db_find_i64(*(($7 + [8])), *(($7 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$3 }
	$12 = CALL $186($10, $13)
	CALL eosio_assert(((int_32)*($12 + [24]) == (int_32)$10), [1536])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [2368])
	CALL $187(($18 + [200]), *($0 + [16]), $1, [0])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL require_auth($1)
	*($18 + [192]) = *($18 + [200])
	$13 = *(($0 + [16]))
	*($18 + [24 align=4]) = *($18 + [192])
	$13 = CALL $188($13, ($18 + [24]))
	*($18 + [184]) = $10
	*($18 + [188]) = $12
	*($18 + [176]) = *($18 + [200])
	*($18 + [16 align=4]) = *($18 + [184])
	*(($18 + [12])) = *($18 + [180])
	*($18 + [8]) = *($18 + [176])
	if ( (CALL $942($0, ($18 + [16]), $3, $4, $13, ($18 + [8])) == 0) ){ goto $label$5 }
	$15 = CALL current_time()
	*(($18 + [140])) = [0]
	*(($18 + [144])) = [0]
	*($18 + [124]) = [0]
	*($18 + [128]) = [0]
	*($18 + [132]) = [0]
	*($18 + [136]) = [0]
	*($18 + [112]) = ((CASTING uint_32)(uint_64 ((uint_64)$15 / (uint_64)(int_64)1000000)) + [60])
	*($18 + [148]) = [0]
	*(($18 + [152])) = [0]
	*(($18 + [156])) = [0]
	*($18 + [160]) = [0]
	*(($18 + [164])) = [0]
	*(($18 + [168])) = [0]
	$13 = ($0 + [8])
	$9 = ($18 + [148])
	$11 = *($0 + [8])
	$15 = (int_64)0
	$14 = (int_64)59
	$12 = [2400]
	$16 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$12 }
	$10 = *($12)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$10 = ($10 + [165])
	goto $label$10 
	
.LABEL $label$12
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$8
	$12 = ($12 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$7 }
	*($18 + [104]) = $16
	*($18 + [96]) = $11
	$15 = (int_64)0
	$14 = (int_64)59
	$12 = [9968]
	$16 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$15 > (uint_64)(int_64)9) ){ goto $label$18 }
	$10 = *($12)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$10 = ($10 + [165])
	goto $label$16 
	
.LABEL $label$18
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$14
	$12 = ($12 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$13 }
	*($18 + [88]) = $16
	*($18 + [72]) = $2
	*($18 + [64]) = $1
	*($18 + [76]) = $3
	*($18 + [78]) = $4
	*($18 + [80]) = $5
	CALL $912($9, ($18 + [96]), $13, ($18 + [88]), ($18 + [64]))
	$15 = *(($0 + [8]))
	$17 = *(*(($0 + [16])) + [144])
	*(($18 + [132])) = [1]
	*($18 + [72]) = (int_64)0
	*($18 + [64]) = $17
	CALL $191(($18 + [96]), ($18 + [112]))
	$12 = *($18 + [96])
	CALL send_deferred(($18 + [64]), $15, $12, (*($18 + [100]) - $12), [0])
	$12 = *($18 + [96])
	if ( ($12 == 0) ){ goto $label$19 }
	*($18 + [100]) = $12
	CALL $956($12)
	
.LABEL $label$19
	CALL $192(($18 + [112]))
	goto $label$5 
	
.LABEL $label$6
	CALL require_auth(*($0 + [8]))
	*($18 + [56]) = $10
	*($18 + [60]) = $12
	*($18 + [48]) = *($18 + [200])
	*($18 + [40 align=4]) = *($18 + [56])
	*(($18 + [36])) = *($18 + [52])
	*($18 + [32]) = *($18 + [48])
	CALL $942($0, ($18 + [40]), $3, $4, [0], ($18 + [32]))
	
.LABEL $label$5
	*([0] + [4]) = ($18 + [208])
}

int_32 .FUNC $936 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [144])
	*([0] + [4]) = $14
	CALL require_auth($1)
	$13 = [0]
	*(($14 + [120])) = [0]
	*($14 + [104]) = (int_64)-1
	*($14 + [112]) = (int_64)0
	$10 = *($0 + [8])
	*($14 + [88]) = $10
	*($14 + [96]) = $10
	$11 = [0]
	$9 = CALL db_find_i64($10, $10, (int_64)-6146850541407305728, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $159(($14 + [88]), $9)
	CALL eosio_assert(((int_32)*($11 + [20]) == (int_32)($14 + [88])), [1536])
	
.LABEL $label$1
	$3 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($3, [9856])
	*($14 + [84]) = [0]
	$12 = *($11 + [8])
	$5 = *(($11 + [12]))
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$2 }
	$8 = ((int_32)($5 - $12) / (int_32)[12])
	$13 = [0]
	$9 = $12
	
.LOOP $label$3:
	if ( ((int_32)*($9) == (int_32)$2) ){ goto $label$2 }
	$9 = ($9 + [12])
	$13 = ($13 + [1])
	*($14 + [84]) = $13
	if ( ($13 <= $8) ){ goto $label$3 }
	
.LABEL $label$2
	CALL eosio_assert(($13 <= ((int_32)($5 - $12) / (int_32)[12])), [9856])
	$8 = *(($11 + [8]))
	$9 = ($8 + ((int_32)$13 * (int_32)[12]))
	$4 = *($9 + [9])
	$12 = [0]
	*((($14 + [40]) + [32])) = [0]
	*($14 + [64]) = (int_64)0
	*($14 + [56]) = (int_64)-1
	$6 = ($0 + [8])
	$10 = *($6)
	*($14 + [40]) = $10
	*($14 + [48]) = $10
	$5 = [0]
	$7 = CALL db_find_i64($10, $10, (int_64)-4803765288141062144, ((int_64)*($9 + [8]) + (int_64)1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $907(($14 + [40]), $7)
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)($14 + [40])), [1536])
	
.LABEL $label$4
	$9 = ($9 + [8])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9888])
	CALL eosio_assert(((uint_32)*(($8 + ((int_32)$13 * (int_32)[12])) + [4]) >= (uint_32)*($5 + [8])), [9920])
	*(($14 + [32])) = [0]
	*($14 + [16]) = (int_64)-1
	*($14 + [24]) = (int_64)0
	$10 = *($6)
	*($14) = $10
	*($14 + [8]) = $10
	$13 = CALL db_find_i64($10, $10, (int_64)-4803775097846366208, (CASTING uint_64)(uint_32 $2))
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$5 }
	$12 = CALL $160($14, $13)
	CALL eosio_assert(((int_32)*($12 + [28]) == (int_32)$14), [1536])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [1952])
	CALL eosio_assert((*($9) <= (uint_32([219017] >> ((*($12 + [8]) << [2]) + [-4])) & [15])), [9952])
	$7 = *(($6 + [32]))
	$6 = *($0 + [20])
	$2 = *(($6 + [36]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$13 = ($2 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$7:
	if ( ((int_64)*(*($13)) == (int_64)$1) ){ goto $label$6 }
	$2 = $13
	$9 = ($13 + [-24])
	$13 = $9
	if ( ((int_32)($9 + $8) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$9 = ($6 + [8])
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$9 }
	$13 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$9), [1536])
	goto $label$8 
	
.LABEL $label$9
	$13 = [0]
	$2 = CALL db_find_i64(*(($6 + [8])), *(($6 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$8 }
	$13 = CALL $186($9, $2)
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$9), [1536])
	
.LABEL $label$8
	$9 = [0]
	$8 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($8, [2368])
	$2 = (*(($12 + [8])) + [-1])
	if ( ((uint_32)$2 > (uint_32)[4]) ){ goto $label$10 }
	goto $label$15 
	
.LABEL $label$15
	$9 = *($5 + [10])
	goto $label$10 
	
.LABEL $label$14
	$9 = *($5 + [12])
	goto $label$10 
	
.LABEL $label$13
	$9 = *($5 + [14])
	goto $label$10 
	
.LABEL $label$12
	$9 = *($5 + [16])
	goto $label$10 
	
.LABEL $label$11
	$9 = *($5 + [18])
	
.LABEL $label$10
	$9 = ($9 & [65535])
	CALL eosio_assert(((uint_32)$9 <= (uint_32)*($13 + [16])), [2880])
	if ( ($9 == 0) ){ goto $label$16 }
	$2 = *(($0 + [20]))
	*($14 + [136]) = $9
	CALL eosio_assert(((uint_32)*(($13 + [16])) >= (uint_32)$9), [2880])
	$1 = *($2)
	*($14 + [128]) = ($14 + [136])
	CALL eosio_assert($8, [1696])
	CALL $249(($2 + [8]), $13, $1, ($14 + [128]))
	
.LABEL $label$16
	$1 = *(($0 + [8]))
	*($14 + [136]) = ($14 + [84])
	CALL eosio_assert($3, [1696])
	CALL $941(($14 + [88]), $11, $1, ($14 + [136]))
	$2 = *($14 + [24])
	if ( ($2 == 0) ){ goto $label$17 }
	$8 = ($14 + [28])
	$13 = *($8)
	if ( ((int_32)$13 == (int_32)$2) ){ goto $label$19 }
	
.LOOP $label$20:
	$13 = ($13 + [-24])
	$9 = *($13)
	*($13) = [0]
	if ( ($9 == 0) ){ goto $label$21 }
	CALL $956($9)
	
.LABEL $label$21
	if ( ((int_32)$2 != (int_32)$13) ){ goto $label$20 }
	$13 = *(($14 + [24]))
	goto $label$18 
	
.LABEL $label$19
	$13 = $2
	
.LABEL $label$18
	*($8) = $2
	CALL $956($13)
	
.LABEL $label$17
	$2 = *($14 + [64])
	if ( ($2 == 0) ){ goto $label$22 }
	$8 = ($14 + [68])
	$13 = *($8)
	if ( ((int_32)$13 == (int_32)$2) ){ goto $label$24 }
	
.LOOP $label$25:
	$13 = ($13 + [-24])
	$9 = *($13)
	*($13) = [0]
	if ( ($9 == 0) ){ goto $label$26 }
	CALL $956($9)
	
.LABEL $label$26
	if ( ((int_32)$2 != (int_32)$13) ){ goto $label$25 }
	$13 = *(($14 + [64]))
	goto $label$23 
	
.LABEL $label$24
	$13 = $2
	
.LABEL $label$23
	*($8) = $2
	CALL $956($13)
	
.LABEL $label$22
	$8 = *($14 + [112])
	if ( ($8 == 0) ){ goto $label$27 }
	$11 = ($14 + [116])
	$13 = *($11)
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$29 }
	
.LOOP $label$30:
	$13 = ($13 + [-24])
	$9 = *($13)
	*($13) = [0]
	if ( ($9 == 0) ){ goto $label$31 }
	$2 = *($9 + [8])
	if ( ($2 == 0) ){ goto $label$32 }
	*(($9 + [12])) = $2
	CALL $956($2)
	
.LABEL $label$32
	CALL $956($9)
	
.LABEL $label$31
	if ( ((int_32)$8 != (int_32)$13) ){ goto $label$30 }
	$13 = *(($14 + [112]))
	goto $label$28 
	
.LABEL $label$29
	$13 = $8
	
.LABEL $label$28
	*($11) = $8
	CALL $956($13)
	
.LABEL $label$27
	*([0] + [4]) = ($14 + [144])
	$2
	return int_32(($4 << [24]) >> [24])
}

void .FUNC $937 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	*($7 + [62]) = $2
	*($7 + [61]) = $3
	CALL require_auth($1)
	CALL void $0((int_32 $1), (int_64 $2), (int_32 $3), (int_32 *(*($0) + [12])))
	*(($7 + [48])) = [0]
	*($7 + [32]) = (int_64)-1
	*($7 + [40]) = (int_64)0
	$5 = *($0 + [8])
	*($7 + [16]) = $5
	*($7 + [24]) = $5
	$3 = [0]
	$2 = CALL db_find_i64($5, $5, (int_64)-6146850541407305728, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $159(($7 + [16]), $2)
	CALL eosio_assert(((int_32)*($3 + [20]) == (int_32)($7 + [16])), [1536])
	
.LABEL $label$1
	$2 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($2, [7440])
	$1 = *(($0 + [8]))
	*($7) = $0
	*($7 + [4]) = ($7 + [61])
	*($7 + [8]) = ($7 + [62])
	CALL eosio_assert($2, [1696])
	CALL $940(($7 + [16]), $3, $1, $7)
	$4 = *($7 + [40])
	if ( ($4 == 0) ){ goto $label$2 }
	$6 = ($7 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	$2 = *($3 + [8])
	if ( ($2 == 0) ){ goto $label$7 }
	*(($3 + [12])) = $2
	CALL $956($2)
	
.LABEL $label$7
	CALL $956($3)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($7 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $4
	
.LABEL $label$3
	*($6) = $4
	CALL $956($0)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [64])
}

void .FUNC $831 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $956($6)
	
.LABEL $label$11
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $956($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $830 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1648])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [2])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $832($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [2]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	$3 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((int_32)*($3) != (int_32)$6), [1632])
	CALL memcpy($7, *($4), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[1]), [1632])
	CALL memcpy(($7 + [2]), *($4), [2])
	$6 = (*($4) + [2])
	*($4) = $6
	$7 = ($7 + [4])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $833 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	$2 = *($0)
	$6 = *($0 + [4])
	$8 = *(*($6))
	*($1) = *(*($6 + [4]))
	*(($9 = $10) + [2]) = [1]
	*($9) = $8
	$6 = ($1 + [12])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($8) = *($9)
	$8 = (*($6) + [4])
	*($6) = $8
	$5 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$5 = ($1 + [8])
	CALL $828($5, $9)
	$8 = *($6)
	
.LABEL $label$1
	$3 = *($5)
	$4 = ($8 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($4 >> [2]))
	$6 = [8]
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$4 }
	$6 = ((((int_32)uint_32(($4 + [-4]) >> [2]) * (int_32)[3]) + $6) + [3])
	
.LABEL $label$4
	if ( ($6 <= [513]) ){ goto $label$6 }
	$8 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$5
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [1920])
	CALL memcpy($8, $1, [8])
	*($9 + [4]) = ($8 + [8])
	CALL $829($9, $5)
	$7 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-7885125098607214592, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($8)
	
.LABEL $label$7
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $832 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $6) >> [2]) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$3 = int_32(($6 - $5) >> [2])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$4 }
	$6 = [1073741823]
	$2 = ($2 - $5)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$7 }
	$6 = int_32($2 >> [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $955(($6 << [2]))
	goto $label$2 
	
.LABEL $label$6
	
.LOOP $label$8:
	*($6) = [0]
	$6 = (*($6) + [4])
	*(($6 = ($0 + [4]))) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $971($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($6 << [2]))
	$5 = ($2 + ($3 << [2]))
	$6 = $5
	
.LOOP $label$9:
	*($6) = [0]
	$6 = ($6 + [4])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $956($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $835 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [5024])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [5072])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [5136])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [12])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [16])) = $6
	CALL $956($6)
	
.LABEL $label$7
	CALL $956($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [12])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [16])) = $6
	CALL $956($6)
	
.LABEL $label$10
	CALL $956($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $834 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [5024])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [5072])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [5136])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [8])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [12])) = $6
	CALL $956($6)
	
.LABEL $label$7
	CALL $956($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [8])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $6
	CALL $956($6)
	
.LABEL $label$10
	CALL $956($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC $837 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [5024])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [5072])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [5136])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [8])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [12])) = $6
	CALL $956($6)
	
.LABEL $label$7
	CALL $956($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [8])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $6
	CALL $956($6)
	
.LABEL $label$10
	CALL $956($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC $836 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [5024])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [5072])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [5136])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [12])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [16])) = $6
	CALL $956($6)
	
.LABEL $label$7
	CALL $956($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [12])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [16])) = $6
	CALL $956($6)
	
.LABEL $label$10
	CALL $956($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $867 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$3 = *(*(*($0 + [4])))
	*($1 + [8]) = [1]
	$2 = *($0)
	*($1) = $3
	CALL eosio_assert([1], [1920])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($4 | [8]), ($1 + [8]), [4])
	*($4 + [31]) = *($1 + [12])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($4 | [12]), ($4 + [31]), [1])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($4 | [13]), ($1 + [16]), [8])
	$3 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)-5032445846214410240, *(*($0 + [8])), $3, $4, [21])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [32])
}

int_32 .FUNC $626 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($2)), [1648])
	$4 = *($3)
	$7 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$4 = *($1 + [4])
	$6 = ((int_32)($4 - $3) / (int_32)[28])
	$7 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$7 <= (uint_32)$6) ){ goto $label$3 }
	CALL $627($1, ($7 - $6))
	$4 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$7 >= (uint_32)$6) ){ goto $label$2 }
	$7 = ((int_32)$7 * (int_32)[28])
	$2 = ($3 + $7)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$4 }
	$6 = (([0] - $3) - $7)
	$7 = ($4 + [-12])
	
.LOOP $label$5:
	$4 = *($7)
	if ( ($4 == 0) ){ goto $label$6 }
	*(($7 + [4])) = $4
	CALL $956($4)
	
.LABEL $label$6
	$7 = ($7 + [-28])
	if ( ((int_32)($7 + $6) != (int_32)[-12]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$4 = $2
	
.LABEL $label$2
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$7 }
	
.LOOP $label$8:
	*($8) = $0
	*($8 + [8]) = $7
	*((($8 + [8]) + [8])) = ($7 + [8])
	*((($8 + [8]) + [12])) = ($7 + [12])
	*((($8 + [8]) + [16])) = ($7 + [16])
	*($8 + [12]) = ($7 + [4])
	CALL $628(($8 + [8]), $8)
	$7 = ($7 + [28])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [32])
	return $0
}

void .FUNC $290 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = ($1 + [12])
	$5 = *(*($0))
	$6 = *($5 + [2])
	if ( ($6 == 0) ){ goto $label$5 }
	*(($3 = ($7 + [8]))) = [0]
	*($7 + [4]) = $6
	*($7) = [1]
	$6 = ($1 + [16])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)*(($1 + [20]))) ){ goto $label$4 }
	*($5) = *($7)
	*(($5 + [8])) = *($3)
	*($6) = (*($6) + [12])
	goto $label$3 
	
.LABEL $label$5
	$6 = [0]
	$3 = *($5 + [4])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL $218($2, $7)
	
.LABEL $label$3
	$6 = [1]
	$5 = *(*($0))
	$3 = *($5 + [4])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*(($4 = ($7 + [8]))) = [0]
	*($7 + [4]) = $3
	$6 = ($6 + [1])
	*($7) = $6
	$5 = ($1 + [16])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)*(($1 + [20]))) ){ goto $label$7 }
	*($3) = *($7)
	*(($3 + [8])) = *($4)
	*($5) = (*($5) + [12])
	goto $label$6 
	
.LABEL $label$7
	CALL $218($2, $7)
	
.LABEL $label$6
	$5 = *(*($0))
	
.LABEL $label$1
	$5 = *($5 + [6])
	if ( ($5 == 0) ){ goto $label$8 }
	*(($4 = ($7 + [8]))) = [0]
	*($7 + [4]) = $5
	$6 = ($6 + [1])
	*($7) = $6
	$5 = ($1 + [16])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)*(($1 + [20]))) ){ goto $label$9 }
	*($3) = *($7)
	*(($3 + [8])) = *($4)
	*($5) = (*($5) + [12])
	goto $label$8 
	
.LABEL $label$9
	CALL $218($2, $7)
	
.LABEL $label$8
	*($1 + [8]) = $6
	*($1) = *(*($0 + [4]))
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $627 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)((int_32)($8 - $7) / (int_32)[28]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($7 - $4) / (int_32)[28])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[153391690]) ){ goto $label$3 }
	$7 = [153391689]
	$8 = ((int_32)($8 - $4) / (int_32)[28])
	if ( ((uint_32)$8 > (uint_32)[76695843]) ){ goto $label$6 }
	$7 = ($8 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$8 = CALL $955(((int_32)$7 * (int_32)[28]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*($7) = (int_64)0
	*($7 + [8 align=4]) = (int_64)0
	*($7 + [16 align=4]) = (int_64)0
	*($7) = [0]
	*(($7 + [24])) = [0]
	$7 = (*($8) + [28])
	*($8) = $7
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$8 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	$2 = ($8 + ((int_32)$7 * (int_32)[28]))
	$8 = ($8 + ((int_32)$5 * (int_32)[28]))
	$7 = $8
	
.LOOP $label$8:
	*($7) = (int_64)0
	*($7 + [8 align=4]) = (int_64)0
	*($7 + [16 align=4]) = (int_64)0
	*($7) = [0]
	*(($7 + [24])) = [0]
	$7 = ($7 + [28])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$10 }
	$3 = ([0] - $4)
	$1 = ($1 + [-28])
	
.LOOP $label$11:
	*(($8 + [-28])) = *($1)
	*(($8 + [-20])) = *(($1 + [8]))
	*(($4 = ($8 + [-12]))) = (int_64)0
	*(($5 = ($8 + [-4]))) = [0]
	$6 = ($1 + [16])
	*($4) = *($6)
	*(($8 + [-8])) = *(($1 + [20]))
	$4 = ($1 + [24])
	*($5) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$8 = ($8 + [-28])
	$1 = ($1 + [-28])
	if ( ((int_32)($1 + $3) != (int_32)[-28]) ){ goto $label$11 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$5 = $4
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $7
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$12 }
	$1 = ([0] - $5)
	$7 = ($4 + [-12])
	
.LOOP $label$13:
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$14 }
	*(($7 + [4])) = $8
	CALL $956($8)
	
.LABEL $label$14
	$7 = ($7 + [-28])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $956($5)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $628 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	CALL $629(*($1), *($0 + [16]))
}

int_32 .FUNC $540 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [1600])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $955([24])) + [8]) = [0]
	*($6) = (int_64)0
	*($6 + [12]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [1632])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-2]) != (int_32)[8]), [1632])
	CALL memcpy(($6 + [8]), ($7 + [8]), [2])
	*($6 + [16]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [16])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $545(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $543 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*(($6 = CALL $955([64])) + [52]) = $1
	$3 = CALL memcpy($6, *(*($3)), [52])
	*($8 + [88]) = (($8 + [16]) + [51])
	*($8 + [84]) = ($8 + [16])
	*($8 + [80]) = ($8 + [16])
	CALL $544(($8 + [80]), $3)
	$4 = *($3)
	*($3 + [56]) = CALL db_store_i64(*($1 + [8]), (int_64)-4921685625297436672, $2, $4, ($8 + [16]), [51])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [80]) = $3
	$4 = *($3)
	*($8 + [16]) = $4
	$5 = *($3 + [56])
	*($8 + [12]) = $5
	$7 = ($1 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($6 + [8]) = $4
	*($6 + [16]) = $5
	*($8 + [80]) = [0]
	*($6) = $3
	*($7) = ($6 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $175(($1 + [24]), ($8 + [80]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($8 + [80])
	*($8 + [80]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $956($1)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [96])
}

void .FUNC $570 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	*($10 + [60]) = $2
	*($10 + [56]) = $3
	*(($10 + [48])) = [0]
	*($10 + [32]) = (int_64)-1
	*($10 + [40]) = (int_64)0
	$8 = *($0)
	*($10 + [16]) = $8
	*($10 + [24]) = $8
	$6 = [0]
	$2 = CALL db_find_i64($8, $8, (int_64)-4315240091392933888, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $423(($10 + [16]), $2)
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)($10 + [16])), [1536])
	$3 = *($10 + [56])
	
.LABEL $label$1
	$4 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($4, [4320])
	$9 = [-1]
	*($10 + [12]) = [-1]
	if ( ($3 == 0) ){ goto $label$2 }
	$2 = *($6 + [8])
	$7 = *(($6 + [12]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	$5 = int_32(($7 - $2) >> [3])
	$7 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*($2) == (int_32)$3) ){ goto $label$4 }
	$2 = ($2 + [8])
	$7 = ($7 + [1])
	if ( ($7 <= $5) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$9 = $7
	
.LABEL $label$3
	*($10 + [12]) = $9
	CALL eosio_assert(((int_32)uint_32($9 >> [31]) ^ (int_32)[1]), [4320])
	CALL eosio_assert((*((*(($6 + [8])) + (*($10 + [12]) << [3])) + [6]) == 0), [6256])
	
.LABEL $label$2
	$8 = *($0)
	*($10 + [4]) = ($10 + [56])
	*($10) = ($10 + [60])
	*($10 + [8]) = ($10 + [12])
	CALL eosio_assert($4, [1696])
	CALL $571(($10 + [16]), $6, $8, $10)
	$6 = *($10 + [40])
	if ( ($6 == 0) ){ goto $label$6 }
	$5 = ($10 + [44])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	$3 = *($7 + [8])
	if ( ($3 == 0) ){ goto $label$11 }
	*(($7 + [12])) = $3
	CALL $956($3)
	
.LABEL $label$11
	CALL $956($7)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($10 + [40]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $6
	
.LABEL $label$7
	*($5) = $6
	CALL $956($2)
	
.LABEL $label$6
	*([0] + [4]) = ($10 + [64])
}

void .FUNC $571 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	$5 = *($1 + [8])
	$7 = *(($1 + [12]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$1 }
	$8 = ($5 + [6])
	$6 = int_32(($7 - $5) >> [3])
	$7 = [0]
	
.LOOP $label$2:
	if ( ((int_32)((uint_32)*(($8 + [-2])) / (uint_32)[10]) != (int_32)*(*($3))) ){ goto $label$3 }
	if ( ((int_32)*($8) != (int_32)[1]) ){ goto $label$3 }
	*($8) = [0]
	
.LABEL $label$3
	$8 = ($8 + [8])
	$7 = ($7 + [1])
	if ( ($7 <= $6) ){ goto $label$2 }
	
.LABEL $label$1
	if ( (*(*($3 + [4])) == 0) ){ goto $label$4 }
	*(($5 + (*(*($3 + [8])) << [3])) + [6]) = [1]
	
.LABEL $label$4
	$3 = ($1 + [8])
	CALL eosio_assert([1], [1856])
	$8 = [8]
	$6 = *(($1 + [8]))
	$7 = *(($1 + [12]))
	$5 = ($7 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$5:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	$8 = ((((int_32)uint_32(($5 + [-8]) >> [3]) * (int_32)[7]) + $8) + [7])
	
.LABEL $label$6
	if ( ($8 <= [513]) ){ goto $label$8 }
	$7 = CALL malloc($8)
	goto $label$7 
	
.LABEL $label$8
	$7 = ($11 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$7
	*($10) = $7
	*($10 + [8]) = ($7 + $8)
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [1920])
	CALL memcpy($7, $1, [8])
	*($10 + [4]) = ($7 + [8])
	CALL $436($10, $3)
	CALL db_update_i64(*($1 + [24]), $2, $7, $8)
	if ( ($8 <= [513]) ){ goto $label$9 }
	CALL free($7)
	
.LABEL $label$9
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $572 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	$6 = [0]
	*(($8 + [104])) = [0]
	*($8 + [88]) = (int_64)-1
	*($8 + [96]) = (int_64)0
	$5 = *($0)
	*($8 + [72]) = $5
	*($8 + [80]) = $5
	$7 = CALL db_find_i64($5, $5, (int_64)-4315240091392933888, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $423(($8 + [72]), $7)
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)($8 + [72])), [1536])
	
.LABEL $label$1
	$4 = [-1]
	$7 = *($6 + [8])
	$3 = *(($6 + [12]))
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$3 = int_32(($3 - $7) >> [3])
	$4 = [0]
	
.LOOP $label$3:
	if ( ((int_32)*($7) == (int_32)$2) ){ goto $label$2 }
	$7 = ($7 + [8])
	$4 = ($4 + [1])
	if ( ($4 <= $3) ){ goto $label$3 }
	$4 = [-1]
	
.LABEL $label$2
	*($8 + [68]) = $4
	$3 = [1]
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [4320])
	$4 = (*(($6 + [8])) + (*($8 + [68]) << [3]))
	CALL eosio_assert(((int_32)*($4 + [6]) == (int_32)[2]), [4480])
	$7 = [0]
	$5 = *($0)
	*($8 + [24]) = ($8 + [68])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [1696])
	CALL $573(($8 + [72]), $6, $5, ($8 + [24]))
	*(($8 + [56])) = [0]
	*($8 + [40]) = (int_64)-1
	*($8 + [48]) = (int_64)0
	$5 = *($0)
	*($8 + [24]) = $5
	*($8 + [32]) = $5
	$4 = CALL db_find_i64($5, $5, (int_64)-4315237476541136896, *($4 + [4]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$7 = CALL $422(($8 + [24]), $4)
	CALL eosio_assert(((int_32)*($7 + [28]) == (int_32)($8 + [24])), [1536])
	*($8 + [20]) = $7
	*($8 + [16]) = ($8 + [24])
	goto $label$4 
	
.LABEL $label$5
	*($8 + [20]) = [0]
	*($8 + [16]) = ($8 + [24])
	$3 = [0]
	
.LABEL $label$4
	CALL eosio_assert($3, [4320])
	$6 = [-1]
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$6 }
	$7 = ($4 + [8])
	$3 = ((int_32)($3 - $4) / (int_32)[40])
	$4 = [0]
	
.LOOP $label$8:
	if ( ((int_32)*($7) == (int_32)$2) ){ goto $label$7 }
	$7 = ($7 + [40])
	$4 = ($4 + [1])
	if ( ($4 <= $3) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = $4
	
.LABEL $label$6
	*($8 + [12]) = $6
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [4320])
	$7 = *($8 + [20])
	$5 = *($0)
	*($8 + [4]) = ($8 + [12])
	*($8) = ($8 + [16])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1696])
	CALL $574(($8 + [24]), $7, $5, $8)
	$3 = *($8 + [48])
	if ( ($3 == 0) ){ goto $label$9 }
	$6 = ($8 + [52])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	$2 = *($4 + [16])
	if ( ($2 == 0) ){ goto $label$14 }
	*(($4 + [20])) = $2
	CALL $956($2)
	
.LABEL $label$14
	CALL $956($4)
	
.LABEL $label$13
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$12 }
	$7 = *(($8 + [48]))
	goto $label$10 
	
.LABEL $label$11
	$7 = $3
	
.LABEL $label$10
	*($6) = $3
	CALL $956($7)
	
.LABEL $label$9
	$3 = *($8 + [96])
	if ( ($3 == 0) ){ goto $label$15 }
	$6 = ($8 + [100])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$17 }
	
.LOOP $label$18:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	$2 = *($4 + [8])
	if ( ($2 == 0) ){ goto $label$20 }
	*(($4 + [12])) = $2
	CALL $956($2)
	
.LABEL $label$20
	CALL $956($4)
	
.LABEL $label$19
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$18 }
	$7 = *(($8 + [96]))
	goto $label$16 
	
.LABEL $label$17
	$7 = $3
	
.LABEL $label$16
	*($6) = $3
	CALL $956($7)
	
.LABEL $label$15
	*([0] + [4]) = ($8 + [112])
}

void .FUNC $542 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$1 = CALL memcpy($1, *(*($3)), [52])
	$4 = *($1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	*($5 + [72]) = ($5 + [51])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $544(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [56]), $2, $5, [51])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $574 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$5 = (*([0] + [4]) - [48])
	$11 = $5
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$3 = (*(*(*($3) + [4]) + [16]) + ((int_32)*(*($3 + [4])) * (int_32)[40]))
	$8 = ($3 + [40])
	$6 = ($1 + [20])
	$7 = (*($6) - $8)
	$9 = ((int_32)$7 / (int_32)[40])
	$4 = *($1)
	$10 = $4
	if ( ($7 == 0) ){ goto $label$1 }
	CALL memmove($3, $8, $7)
	$10 = *($1)
	
.LABEL $label$1
	*($6) = ($3 + ((int_32)$9 * (int_32)[40]))
	CALL eosio_assert(((int_64)$4 == (int_64)$10), [1856])
	$7 = *($1 + [16])
	$6 = *($6)
	$9 = ($6 - $7)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[40]))
	$3 = [54]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	$8 = (((int_32)((uint_32)($9 + [-40]) / (uint_32)[40]) * (int_32)[38]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($3 + [-38])
	
.LABEL $label$3
	if ( ($8 <= [513]) ){ goto $label$6 }
	$9 = CALL malloc($8)
	goto $label$5 
	
.LABEL $label$6
	$9 = ($5 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$5
	*($11) = $9
	$5 = ($9 + $8)
	*($11 + [8]) = $5
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [1920])
	CALL memcpy($9, $1, [8])
	$3 = ($9 + [8])
	CALL eosio_assert(((int_32)($5 - $3) > (int_32)[7]), [1920])
	CALL memcpy($3, ($1 + [8]), [8])
	$3 = ($9 + [16])
	*($11 + [4]) = $3
	$10 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [20])) - *(($1 + [16]))) / (int_32)[40]))
	
.LOOP $label$7:
	$6 = (CASTING uint_32)(uint_64 $10)
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	$7 = ((int_64)$10) != (int_64)0
	*($11 + [24]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)($5 - $3) > (int_32)[0]), [1920])
	CALL memcpy($3, ($11 + [24]), [1])
	$3 = ($3 + [1])
	*($11 + [4]) = $3
	if ( $7 ){ goto $label$7 }
	$6 = *(($1 + [20]))
	$3 = *(($1 + [16]))
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	*($11 + [16]) = $11
	*($11 + [24]) = $3
	*((($11 + [24]) + [8])) = ($3 + [12])
	*((($11 + [24]) + [12])) = ($3 + [16])
	*((($11 + [24]) + [16])) = ($3 + [24])
	*($11 + [28]) = ($3 + [8])
	CALL $430(($11 + [24]), ($11 + [16]))
	$3 = ($3 + [40])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$9 }
	
.LABEL $label$8
	CALL db_update_i64(*($1 + [32]), $2, $9, $8)
	if ( ($8 <= [513]) ){ goto $label$10 }
	CALL free($9)
	
.LABEL $label$10
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($11 + [48])
}

void .FUNC $575 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($0 + [8]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [1632])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $576 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [176])
	*([0] + [4]) = $10
	*($10 + [168]) = $1
	*($10 + [164]) = $2
	$7 = [0]
	*(($10 + [152])) = [0]
	*($10 + [136]) = (int_64)-1
	*($10 + [144]) = (int_64)0
	$6 = *($0)
	*($10 + [120]) = $6
	*($10 + [128]) = $6
	$9 = CALL db_find_i64($6, $6, (int_64)-4315240091392933888, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $423(($10 + [120]), $9)
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)($10 + [120])), [1536])
	$2 = *($10 + [164])
	
.LABEL $label$1
	$8 = [-1]
	$9 = *($7 + [8])
	$4 = *(($7 + [12]))
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$2 }
	$5 = int_32(($4 - $9) >> [3])
	$4 = [0]
	
.LOOP $label$4:
	if ( ((int_32)*($9) == (int_32)$2) ){ goto $label$3 }
	$9 = ($9 + [8])
	$4 = ($4 + [1])
	if ( ($4 <= $5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$8 = $4
	
.LABEL $label$2
	*($10 + [116]) = $8
	CALL eosio_assert(((int_32)uint_32($8 >> [31]) ^ (int_32)[1]), [4320])
	*(($9 = (($10 + [96]) + [8]))) = *(($3 + [8]))
	$6 = *($3)
	*((($10 + [8]) + [12])) = *((($10 + [96]) + [12]))
	*((($10 + [8]) + [8])) = *($9)
	*($10 + [96]) = $6
	*($10 + [12]) = *($10 + [100])
	*($10 + [8]) = *($10 + [96])
	CALL $577($0, ($10 + [8]), [5])
	$9 = (*(($7 + [8])) + (*($10 + [116]) << [3]))
	CALL eosio_assert(((int_32)*($9 + [6]) != (int_32)[2]), [6288])
	$6 = *($0)
	*($10 + [48]) = ($10 + [116])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1696])
	CALL $578(($10 + [120]), $7, $6, ($10 + [48]))
	$9 = *($9 + [4])
	*($10 + [94]) = $9
	*(($10 + [80])) = [0]
	*($10 + [64]) = (int_64)-1
	*($10 + [72]) = (int_64)0
	$6 = *($0)
	*($10 + [48]) = $6
	*($10 + [56]) = $6
	$9 = CALL db_find_i64($6, $6, (int_64)-4315237476541136896, ((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)65535))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $422(($10 + [48]), $9)
	CALL eosio_assert(((int_32)*($7 + [28]) == (int_32)($10 + [48])), [1536])
	$4 = [-1]
	$5 = *($7 + [16])
	$8 = *(($7 + [20]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$8 }
	$2 = *($10 + [164])
	$9 = ($5 + [8])
	$5 = ((int_32)($8 - $5) / (int_32)[40])
	$4 = [0]
	
.LOOP $label$9:
	if ( ((int_32)*($9) == (int_32)$2) ){ goto $label$8 }
	$9 = ($9 + [40])
	$4 = ($4 + [1])
	if ( ($4 <= $5) ){ goto $label$9 }
	$4 = [-1]
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$4 == (int_32)[-1]), [6288])
	$6 = *($0)
	*($10 + [44]) = $3
	*($10 + [36]) = ($10 + [94])
	*($10 + [32]) = ($10 + [164])
	*($10 + [40]) = ($10 + [168])
	CALL eosio_assert([1], [1696])
	CALL $579(($10 + [48]), $7, $6, ($10 + [32]))
	$5 = *($10 + [72])
	if ( $5 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = *($0)
	*($10 + [44]) = $3
	*($10 + [36]) = ($10 + [94])
	*($10 + [32]) = ($10 + [164])
	*($10 + [40]) = ($10 + [168])
	CALL $580(($10 + [24]), ($10 + [48]), $6, ($10 + [32]))
	$5 = *($10 + [72])
	if ( ($5 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($10 + [76])
	$9 = *($7)
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$11 }
	
.LOOP $label$12:
	$9 = ($9 + [-24])
	$4 = *($9)
	*($9) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	$2 = *($4 + [16])
	if ( ($2 == 0) ){ goto $label$14 }
	*(($4 + [20])) = $2
	CALL $956($2)
	
.LABEL $label$14
	CALL $956($4)
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$12 }
	$9 = *(($10 + [72]))
	goto $label$10 
	
.LABEL $label$11
	$9 = $5
	
.LABEL $label$10
	*($7) = $5
	CALL $956($9)
	
.LABEL $label$5
	$5 = *($10 + [144])
	if ( ($5 == 0) ){ goto $label$15 }
	$7 = ($10 + [148])
	$9 = *($7)
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$18:
	$9 = ($9 + [-24])
	$4 = *($9)
	*($9) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	$2 = *($4 + [8])
	if ( ($2 == 0) ){ goto $label$20 }
	*(($4 + [12])) = $2
	CALL $956($2)
	
.LABEL $label$20
	CALL $956($4)
	
.LABEL $label$19
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$18 }
	$9 = *(($10 + [144]))
	goto $label$16 
	
.LABEL $label$17
	$9 = $5
	
.LABEL $label$16
	*($7) = $5
	CALL $956($9)
	
.LABEL $label$15
	*([0] + [4]) = ($10 + [176])
}

void .FUNC $577 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	$4 = *($1 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)1397703940), [6304])
	$5 = [0]
	$3 = *($1)
	if ( ((uint_64)((int_64)$3 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [6336])
	CALL eosio_assert(((int_64)$3 > (int_64)0), [6352])
	$1 = (( [50] ? [10] : ((int_32)$2 > (int_32)[1]) ) << ((int_32)$2 > (int_32)[2]))
	CALL eosio_assert(((int_64)$3 >= (int_64)(CASTING uint_64)(uint_32 (( ((int_32)$1 * (int_32)[5]) ? $1 : ((int_32)$2 > (int_32)[3]) ) << ((int_32)$2 > (int_32)[4])))), [6384])
	CALL eosio_assert(((int_64)$3 < (int_64)10000001), [6400])
}

void .FUNC $578 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	$11 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*((*($1 + [8]) + (*(*($3)) << [3])) + [6]) = [2]
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	$3 = [8]
	$5 = ($1 + [8])
	$7 = *($1 + [8])
	$6 = *(($1 + [12]))
	$8 = ($6 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	$3 = ((((int_32)uint_32(($8 + [-8]) >> [3]) * (int_32)[7]) + $3) + [7])
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$10 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$10 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$3
	*($11) = $10
	*($11 + [8]) = ($10 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [1920])
	CALL memcpy($10, $1, [8])
	*($11 + [4]) = ($10 + [8])
	CALL $436($11, $5)
	CALL db_update_i64(*($1 + [24]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($10)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $545 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $473 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [5]))
	$5 = *($0 + [4])
	$4 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [16]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $5) > (int_32)[0]), [1920])
	CALL memcpy(*($7), ($8 + [16]), [1])
	$5 = (*($7) + [1])
	*($7) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$2 = ($8 + [28])
	
.LOOP $label$3:
	*($8 + [8]) = $0
	*($8 + [16]) = $7
	*((($8 + [16]) + [8])) = ($7 + [16])
	*($2) = ($7 + [24])
	*($8 + [20]) = ($7 + [8])
	CALL $474(($8 + [16]), ($8 + [8]))
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [32])
	return $0
}

void .FUNC $472 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [1920])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $473(*($1), *($0 + [20]))
}

void .FUNC $475 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [1920])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($3 + [4]), $0, [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [1920])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $474 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$1 = *($1)
	*($4 + [15]) = *(*($0 + [12]))
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($1 + [4]), ($4 + [15]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $477 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$7 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$6 = CALL $955([216])
	$7 = CALL $478($6, $0, ($8 + [8]))
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [8]) = $5
	$1 = *($6 + [204])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $1
	*($8 + [24]) = [0]
	*($4) = $6
	*($3) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $479(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$1 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$6 = *(($1 + [168]))
	if ( ($6 == 0) ){ goto $label$10 }
	*(($1 + [172])) = $6
	CALL $956($6)
	
.LABEL $label$10
	$3 = *(($1 + [104]))
	if ( ($3 == 0) ){ goto $label$11 }
	$0 = ($1 + [108])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$13 }
	$4 = ([0] - $3)
	$6 = ($6 + [-24])
	
.LOOP $label$14:
	if ( ((*(($6 + [12])) & [1]) == 0) ){ goto $label$15 }
	CALL $956(*(($6 + [20])))
	
.LABEL $label$15
	if ( ((*($6) & [1]) == 0) ){ goto $label$16 }
	CALL $956(*(($6 + [8])))
	
.LABEL $label$16
	$6 = ($6 + [-24])
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$14 }
	$6 = *(($1 + [104]))
	goto $label$12 
	
.LABEL $label$13
	$6 = $3
	
.LABEL $label$12
	*($0) = $3
	CALL $956($6)
	
.LABEL $label$11
	CALL $956($1)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $7
}

int_32 .FUNC $476 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1920])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$6 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $384($0, $5)
	CALL $384($0, ($5 + [12]))
	$5 = ($5 + [24])
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $231 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [9]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [10]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [11]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [12]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [13]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [14]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC $679 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $551 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL require_auth(*($0 + [40]))
	$4 = [0]
	$3 = [0]
	$5 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)-4697967887266086912, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $554($0, $5)
	
.LABEL $label$1
	
.LOOP $label$3:
	if ( ($3 == 0) ){ goto $label$2 }
	CALL eosio_assert([1], [4912])
	CALL eosio_assert([1], [4208])
	$5 = [0]
	$2 = CALL db_next_i64(*($3 + [16]), ($6 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $554($0, $2)
	
.LABEL $label$4
	CALL $560($0, $3)
	$3 = $5
	$4 = ($4 + [1])
	if ( ((int_32)($4 & [65535]) != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $677 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *($0)
	$5 = *($0 + [4])
	*(($6 = $7)) = (int_64)0
	*($6 + [8]) = (int_64)0
	$3 = *(*($5))
	*($6 + [2]) = [1]
	*($6) = $3
	*($1) = *(*($5 + [4]))
	$5 = ($1 + [12])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($3) = *($6)
	*(($3 + [8])) = *(($6 + [8]))
	*($5) = (*($5) + [16])
	goto $label$1 
	
.LABEL $label$2
	CALL $670(($1 + [8]), $6)
	
.LABEL $label$1
	*($6) = [0]
	CALL $606($6, $1)
	$3 = *($6)
	if ( ($3 <= [513]) ){ goto $label$4 }
	$5 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$3
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($5 + $3)
	CALL $607($6, $1)
	$4 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($2 + [8]), (int_64)5667434139083603968, *(*($0 + [8])), $4, $5, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $676 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [16])
	$13 = $14
	*([0] + [4]) = $14
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$6 = ($1 + [8])
	$4 = *($1)
	$5 = *($3)
	$8 = *($1 + [8])
	$7 = *(($1 + [12]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	$9 = int_32(($7 - $8) >> [4])
	$12 = [0]
	$3 = [2]
	$10 = (*($5) & [65535])
	
.LOOP $label$4:
	$11 = ($8 + $3)
	if ( ((int_32)*(($11 + [-2])) == (int_32)$10) ){ goto $label$3 }
	$3 = ($3 + [16])
	$12 = ($12 + [1])
	if ( ($12 <= $9) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert((*($11) <= [8]), [7168])
	*(($3 = (*($6) + $3))) = (*($3) + [1])
	goto $label$1 
	
.LABEL $label$2
	*($13) = (int_64)0
	*($13 + [8]) = (int_64)0
	$3 = *($5)
	*($13 + [2]) = [1]
	*($13) = $3
	if ( ((int_32)$7 == (int_32)*(($1 + [16]))) ){ goto $label$5 }
	*($7) = *($13)
	*(($7 + [8])) = *(($13 + [8]))
	*(($3 = ($1 + [12]))) = (*($3) + [16])
	goto $label$1 
	
.LABEL $label$5
	CALL $670($6, $13)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	*($13) = [0]
	CALL $606($13, $1)
	$12 = *($13)
	if ( ($12 <= [513]) ){ goto $label$7 }
	$3 = CALL malloc($12)
	goto $label$6 
	
.LABEL $label$7
	$3 = ($14 - (($12 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$6
	*($13 + [4]) = $3
	*($13) = $3
	*($13 + [8]) = ($3 + $12)
	CALL $607($13, $1)
	CALL db_update_i64(*($1 + [68]), $2, $3, $12)
	if ( ($12 <= [513]) ){ goto $label$8 }
	CALL free($3)
	
.LABEL $label$8
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($13 + [16])
}

void .FUNC $675 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	*($11 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($11 + [20]) = $3
	*($11 + [16]) = $1
	*($11 + [24]) = ($11 + [40])
	*(($3 = CALL $955([80]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40]) = [0]
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [64]) = $1
	CALL $677(($11 + [16]), $3)
	*($11 + [32]) = $3
	$2 = *($3)
	*($11 + [16]) = $2
	$6 = *($3 + [68])
	*($11 + [12]) = $6
	$7 = ($1 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($8 + [8]) = $2
	*($8 + [16]) = $6
	*($11 + [32]) = [0]
	*($8) = $3
	*($7) = ($8 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $619(($1 + [24]), ($11 + [32]), ($11 + [16]), ($11 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$4 = *($11 + [32])
	*($11 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$3 = *($4 + [32])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($4 + [36])) = $3
	CALL $956($3)
	
.LABEL $label$4
	$5 = *($4 + [20])
	if ( ($5 == 0) ){ goto $label$5 }
	$10 = ($4 + [24])
	$3 = *($10)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = ($3 + [-32])
	$7 = ($3 + [-16])
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$9 }
	$1 = $8
	$9 = ($3 + [-12])
	$3 = *($9)
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$10 }
	$0 = ([0] - $8)
	$3 = ($3 + [-12])
	
.LOOP $label$11:
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$12 }
	*(($3 + [4])) = $1
	CALL $956($1)
	
.LABEL $label$12
	$3 = ($3 + [-28])
	if ( ((int_32)($3 + $0) != (int_32)[-12]) ){ goto $label$11 }
	$1 = *($7)
	
.LABEL $label$10
	*($9) = $8
	CALL $956($1)
	
.LABEL $label$9
	$3 = $6
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$8 }
	$3 = *(($4 + [20]))
	goto $label$6 
	
.LABEL $label$7
	$3 = $5
	
.LABEL $label$6
	*($10) = $5
	CALL $956($3)
	
.LABEL $label$5
	$3 = *($4 + [8])
	if ( ($3 == 0) ){ goto $label$13 }
	*(($4 + [12])) = $3
	CALL $956($3)
	
.LABEL $label$13
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($11 + [48])
}

int_32 .FUNC $674 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $955([32])) + [8]) = [0]
	*($6) = (int_64)0
	*($6 + [10]) = [0]
	*($6 + [12]) = [0]
	*($6 + [14]) = [0]
	*($6 + [16]) = [0]
	*($6 + [18]) = [0]
	*($6 + [20]) = $0
	CALL $678(($8 + [32]), $6)
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $679(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $673 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [160])
	*([0] + [4]) = $22
	*($22 + [152]) = $1
	*($22 + [150]) = $2
	CALL require_auth($1)
	$5 = [0]
	*((($22 + [104]) + [32])) = [0]
	*($22 + [120]) = (int_64)-1
	*($22 + [128]) = (int_64)0
	$11 = *($0)
	*($22 + [104]) = $11
	*($22 + [112]) = $11
	$4 = [0]
	$2 = CALL db_find_i64($11, $11, (int_64)-5018814137262145536, (CASTING uint_64)(uint_32 $2))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $674(($22 + [104]), $2)
	CALL eosio_assert(((int_32)*($4 + [20]) == (int_32)($22 + [104])), [1536])
	$1 = *($22 + [152])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [6464])
	$19 = *($4 + [18])
	$20 = *($4 + [14])
	$21 = *($4 + [10])
	*((($22 + [64]) + [32])) = [0]
	*($22 + [80]) = (int_64)-1
	*($22 + [88]) = (int_64)0
	$11 = *($0)
	*($22 + [64]) = $11
	*($22 + [72]) = $11
	$2 = CALL db_find_i64($11, $11, (int_64)-7948101582086733824, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $214(($22 + [64]), $2)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($22 + [64])), [1536])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [3456])
	$2 = *($3)
	if ( ((int_32)*($3 + [4]) == (int_32)$2) ){ goto $label$3 }
	$13 = ($5 + [16])
	$14 = ($4 + [8])
	$15 = ($3 + [4])
	$16 = [0]
	
.LOOP $label$4:
	$12 = ($5 + [12])
	$7 = *($12)
	$17 = (*($13) - $7)
	if ( ((int_32)$17 < (int_32)[12]) ){ goto $label$6 }
	$6 = *(($2 + ($16 << [2])))
	$17 = (((uint_32)$17 / (uint_32)[12]) + [-1])
	$2 = [0]
	
.LOOP $label$7:
	$8 = ($17 - $2)
	$9 = (((int_32)$8 / (int_32)[2]) + $2)
	$18 = ($7 + ((int_32)$9 * (int_32)[12]))
	$10 = *($18)
	if ( ($10 <= $6) ){ goto $label$8 }
	if ( ((uint_32)$10 <= (uint_32)$6) ){ goto $label$5 }
	$17 = ($9 + [-1])
	if ( ((int_32)$8 > (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$2 = ($9 + [1])
	if ( ((int_32)$17 > (int_32)$9) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert([0], [3472])
	$18 = *($12)
	
.LABEL $label$5
	$2 = *($18 + [4])
	if ( ((int_32)$2 != (int_32)*($14)) ){ goto $label$10 }
	$21 = ($21 + [-1])
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)*(($4 + [12]))) ){ goto $label$11 }
	$20 = ($20 + [-1])
	goto $label$9 
	
.LABEL $label$11
	if ( ((int_32)$2 != (int_32)*(($4 + [16]))) ){ goto $label$12 }
	$19 = ($19 + [-1])
	goto $label$9 
	
.LABEL $label$12
	CALL eosio_assert([0], [7136])
	
.LABEL $label$9
	$2 = *($3)
	$16 = ($16 + [1])
	if ( ($16 <= int_32((*($15) - $2) >> [2])) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((($20 | $19) | $21) == 0) ){ goto $label$13 }
	CALL eosio_assert([0], [7136])
	
.LABEL $label$13
	$11 = *($22 + [152])
	CALL $324(*($0 + [8]), $11, $3, [0])
	*(($22 + [56])) = [0]
	*($22 + [40]) = (int_64)-1
	*($22 + [48]) = (int_64)0
	$1 = *($0)
	*($22 + [24]) = $1
	*($22 + [32]) = $1
	$2 = CALL db_find_i64($1, $1, (int_64)5667434139083603968, $11)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$16 }
	$2 = CALL $601(($22 + [24]), $2)
	CALL eosio_assert(((int_32)*($2 + [64]) == (int_32)($22 + [24])), [1536])
	$1 = *($0)
	*($22 + [20]) = $0
	*($22 + [16]) = ($22 + [150])
	CALL eosio_assert([1], [1696])
	CALL $676(($22 + [24]), $2, $1, ($22 + [16]))
	$6 = *($22 + [48])
	if ( $6 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$1 = *($0)
	*($22 + [20]) = ($22 + [152])
	*($22 + [16]) = ($22 + [150])
	CALL $675(($22 + [8]), ($22 + [24]), $1, ($22 + [16]))
	$6 = *($22 + [48])
	if ( ($6 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$9 = ($22 + [52])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$18 }
	$2 = ($2 + [-24])
	
.LOOP $label$19:
	$17 = CALL $604($2)
	$2 = ($2 + [-24])
	if ( ((int_32)$17 != (int_32)$6) ){ goto $label$19 }
	$2 = *(($22 + [48]))
	goto $label$17 
	
.LABEL $label$18
	$2 = $6
	
.LABEL $label$17
	*($9) = $6
	CALL $956($2)
	
.LABEL $label$14
	$9 = *($22 + [88])
	if ( ($9 == 0) ){ goto $label$20 }
	$10 = ($22 + [92])
	$2 = *($10)
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$22 }
	
.LOOP $label$23:
	$2 = ($2 + [-24])
	$17 = *($2)
	*($2) = [0]
	if ( ($17 == 0) ){ goto $label$24 }
	$6 = *($17 + [12])
	if ( ($6 == 0) ){ goto $label$25 }
	*(($17 + [16])) = $6
	CALL $956($6)
	
.LABEL $label$25
	CALL $956($17)
	
.LABEL $label$24
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$23 }
	$2 = *(($22 + [88]))
	goto $label$21 
	
.LABEL $label$22
	$2 = $9
	
.LABEL $label$21
	*($10) = $9
	CALL $956($2)
	
.LABEL $label$20
	$6 = *($22 + [128])
	if ( ($6 == 0) ){ goto $label$26 }
	$9 = ($22 + [132])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$28 }
	
.LOOP $label$29:
	$2 = ($2 + [-24])
	$17 = *($2)
	*($2) = [0]
	if ( ($17 == 0) ){ goto $label$30 }
	CALL $956($17)
	
.LABEL $label$30
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$29 }
	$2 = *(($22 + [128]))
	goto $label$27 
	
.LABEL $label$28
	$2 = $6
	
.LABEL $label$27
	*($9) = $6
	CALL $956($2)
	
.LABEL $label$26
	*([0] + [4]) = ($22 + [160])
}

void .FUNC $672 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($8) = (int_64)0
	*($8 + [8]) = [0]
	$3 = *($1 + [8])
	$2 = *($1)
	$5 = (*(($1 + [16])) - *($1 + [12]))
	$4 = int_32($5 >> [2])
	if ( ($4 == 0) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$5 = CALL $955($5)
	*(($8 + [8])) = ($5 + ($4 << [2]))
	*($8) = $5
	*($8 + [4]) = $5
	$7 = *(($1 + [12]))
	$4 = (*(($1 + [16])) - $7)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $7, $4)
	*($8 + [4]) = ($5 + $4)
	
.LABEL $label$2
	$5 = *($0 + [4])
	$4 = *($5 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$7 = *($1 + [28])
	$6 = *($1 + [24])
	$1 = *($5)
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($0) + $1))
	
.LABEL $label$3
	CALL void $0((int_32 $2), (int_64 ($3 & [65535])), (int_32 $8), (int_32 $6), (int_32 $7), (int_32 $1))
	$1 = *($8)
	if ( ($1 == 0) ){ goto $label$4 }
	*($8 + [4]) = $1
	CALL $956($1)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $971($8)
}

void .FUNC $671 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *($0)
	$5 = *($0 + [4])
	*(($6 = $7) + [12]) = [0]
	*($6 + [9]) = [0]
	*($6) = (int_64)0
	*($6 + [10]) = [0]
	$3 = *(*($5))
	*($6 + [2]) = [0]
	*($6) = $3
	*($6 + [4]) = *(*($5 + [4]))
	*($6 + [8]) = [1]
	*($1) = *(*($5 + [8]))
	$5 = ($1 + [12])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($3) = *($6)
	*(($3 + [8])) = *(($6 + [8]))
	*($5) = (*($5) + [16])
	goto $label$1 
	
.LABEL $label$2
	CALL $670(($1 + [8]), $6)
	
.LABEL $label$1
	*($6) = [0]
	CALL $606($6, $1)
	$3 = *($6)
	if ( ($3 <= [513]) ){ goto $label$4 }
	$5 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$3
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($5 + $3)
	CALL $607($6, $1)
	$4 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($2 + [8]), (int_64)5667434139083603968, *(*($0 + [8])), $4, $5, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $670 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $955(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $956($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $848 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($0 + [10]) = [0]
	*($0 + [12 align=4]) = (int_64)0
	*($0 + [20]) = [0]
	*($0 + [22]) = [0]
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [40]) = $1
	$1 = *($2)
	$4 = *($2 + [4])
	*($0) = *(*($4))
	*($0 + [16]) = *(*($4 + [4]) + [16])
	*($0 + [10]) = *(*($4 + [4]) + [20])
	*($0 + [12]) = ((CASTING uint_32)(uint_64 (int_64))(((uint_64)CALL publication_time() / (uint_64)(int_64)1000000) - *([0] + [12]))) + [-120])
	*($5 + [56]) = ($5 + [39])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $283(($5 + [48]), $0)
	$3 = *($0)
	*($0 + [44]) = CALL db_store_i64(*($1 + [8]), (int_64)-4223691270582697984, *(*($2 + [8])), $3, $5, [39])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
	return $0
}

void .FUNC $849 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	$3 = *($1)
	*((($2 = CALL memcpy($5, ($1 + [8]), [96])) + [104])) = [0]
	*($2 + [96]) = (int_64)0
	$5 = (*($1 + [108]) - *($1 + [104]))
	$4 = ((int_32)$5 / (int_32)[24])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$1 }
	$5 = CALL $955($5)
	*(($2 + [96])) = $5
	*(($2 + [100])) = $5
	*(($2 + [104])) = ($5 + ((int_32)$4 * (int_32)[24]))
	$1 = *(($1 + [108]))
	$4 = *(($1 + [104]))
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $972($5, $4)
	CALL $972(($5 + [12]), ($4 + [12]))
	$5 = ($5 + [24])
	$4 = ($4 + [24])
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$3 }
	*(($2 + [100])) = $5
	
.LABEL $label$2
	$5 = *($0 + [4])
	$1 = *($5 + [4])
	$4 = (*(*($0)) + int_32($1 >> [1]))
	$5 = *($5)
	if ( (($1 & [1]) == 0) ){ goto $label$4 }
	$5 = *((*($4) + $5))
	
.LABEL $label$4
	CALL void $4((int_32 ((int_32)($3 & [255]) != (int_32)[0])), (int_32 $2), (int_32 $5))
	$1 = *($2 + [96])
	if ( ($1 == 0) ){ goto $label$5 }
	$0 = ($2 + [100])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$7 }
	$4 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$8:
	if ( ((*(($5 + [12])) & [1]) == 0) ){ goto $label$9 }
	CALL $956(*(($5 + [20])))
	
.LABEL $label$9
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $956(*(($5 + [8])))
	
.LABEL $label$10
	$5 = ($5 + [-24])
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$8 }
	$5 = *(($2 + [96]))
	goto $label$6 
	
.LABEL $label$7
	$5 = $1
	
.LABEL $label$6
	*($0) = $1
	CALL $956($5)
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [112])
	return (unreachable)
	
.LABEL $label$1
	CALL $971(($2 + [96]))
}

void .FUNC $874 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [12]) = [1]
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	CALL eosio_assert([1], [1920])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($5 | [8]), ($1 + [8]), [4])
	*($5 + [31]) = *($1 + [12])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($5 | [12]), ($5 + [31]), [1])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($5 | [13]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $5, [21])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $844 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	CALL $845(*($0 + [4]), $1)
	$3 = ($1 + [8])
	$5 = *($1 + [8])
	$4 = *(($1 + [12]))
	$6 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	$7 = [22]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$3 }
	$7 = (((int_32)uint_32(($6 + [-16]) >> [4]) * (int_32)[14]) + $7)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 + [-14])
	
.LABEL $label$2
	if ( ($7 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($7)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [1920])
	CALL memcpy($9, $1, [8])
	*($10 + [4]) = ($9 + [8])
	CALL $151($10, $3)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-4312506468726210560, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $845 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$2 = *($0 + [4])
	*($1) = *(*($0))
	CALL $846($5, *($2 + [16]), [1])
	$0 = ($1 + [8])
	$4 = ($1 + [12])
	$3 = *($4)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [16]))) ){ goto $label$2 }
	*($3) = *($5)
	*(($3 + [8])) = *(($5 + [8]))
	*($4) = (*($4) + [16])
	goto $label$1 
	
.LABEL $label$2
	CALL $847($0, $5)
	
.LABEL $label$1
	CALL $846($5, *(($2 + [16])), [2])
	$4 = ($1 + [12])
	$3 = *($4)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [16]))) ){ goto $label$4 }
	*($3) = *($5)
	*(($3 + [8])) = *(($5 + [8]))
	*($4) = (*($4) + [16])
	goto $label$3 
	
.LABEL $label$4
	CALL $847($0, $5)
	
.LABEL $label$3
	CALL $846($5, *(($2 + [16])), [3])
	$2 = ($1 + [12])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($1 + [16]))) ){ goto $label$6 }
	*($4) = *($5)
	*(($4 + [8])) = *(($5 + [8]))
	*($2) = (*($2) + [16])
	goto $label$5 
	
.LABEL $label$6
	CALL $847($0, $5)
	
.LABEL $label$5
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $846 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$4 = *($1 + [8])
	*($5 + [8]) = $4
	*($5 + [16]) = $4
	$1 = [0]
	$3 = CALL db_find_i64($4, $4, (int_64)-4888780540812984320, (CASTING uint_64)(uint_32 $2))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $153(($5 + [8]), $3)
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)($5 + [8])), [1536])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [1936])
	*($0) = $2
	*($0 + [4]) = [0]
	*($0 + [1]) = [1]
	*($0 + [8]) = *($1 + [8])
	*($0 + [10]) = *($1 + [12])
	*($0 + [12]) = *($1 + [10])
	*($0 + [14]) = *($1 + [14])
	$2 = *($5 + [32])
	if ( ($2 == 0) ){ goto $label$2 }
	$3 = ($5 + [36])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $956($1)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($5 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $2
	
.LABEL $label$3
	*($3) = $2
	CALL $956($0)
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $847 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $955(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $956($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $840 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	*($6 + [24]) = (int_64)0
	$4 = *($0)
	*($6) = $4
	*($6 + [8]) = $4
	$0 = CALL db_find_i64($4, $4, (int_64)-4223691270582697984, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $274($6, $0)
	CALL eosio_assert(((int_32)*($0 + [40]) == (int_32)$6), [1536])
	CALL eosio_assert([1], [4912])
	CALL eosio_assert([1], [4208])
	$3 = CALL db_next_i64(*($0 + [44]), ($6 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $274($6, $3)
	
.LABEL $label$2
	CALL $818($6, $0)
	
.LABEL $label$1
	$2 = *($6 + [24])
	if ( ($2 == 0) ){ goto $label$3 }
	$5 = ($6 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $956($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($5) = $2
	CALL $956($0)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $841 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $955([56])
	CALL $848($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [44])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $294(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $956($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $842 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	*($7 + [56]) = $1
	*(($7 + [48])) = [0]
	*($7 + [32]) = (int_64)-1
	*($7 + [40]) = (int_64)0
	$1 = *($0)
	*($7 + [16]) = $1
	*($7 + [24]) = $1
	*($7 + [12]) = $0
	*($7 + [8]) = ($7 + [56])
	CALL $843($7, ($7 + [16]), $1, ($7 + [8]))
	$3 = *($7 + [40])
	if ( ($3 == 0) ){ goto $label$1 }
	$6 = ($7 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	$5 = *($4 + [8])
	if ( ($5 == 0) ){ goto $label$6 }
	*(($4 + [12])) = $5
	CALL $956($5)
	
.LABEL $label$6
	CALL $956($4)
	
.LABEL $label$5
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($7 + [40]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $3
	
.LABEL $label$2
	*($6) = $3
	CALL $956($0)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [64])
}

void .FUNC $843 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([32]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16]) = [0]
	*($3 + [20]) = $1
	CALL $844(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [24])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $264(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [12])) = $1
	CALL $956($1)
	
.LABEL $label$4
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $273 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [12])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [16])) = $6
	CALL $956($6)
	
.LABEL $label$11
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $956($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $272 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	$12 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$5 = ($1 + [12])
	$4 = *($1)
	$10 = *($1 + [12])
	$8 = ($1 + [16])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$1 }
	$7 = ((int_32)($9 - $10) / (int_32)[20])
	$6 = *(*($3))
	$9 = [0]
	
.LOOP $label$3:
	if ( ((int_32)*($10) == (int_32)$6) ){ goto $label$2 }
	$10 = ($10 + [20])
	$9 = ($9 + [1])
	if ( ($9 <= $7) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*(($10 + [6])) = *(*($3 + [4]))
	*(*($3 + [8])) = [1]
	
.LABEL $label$1
	CALL eosio_assert([1], [1856])
	$6 = *($5)
	$9 = *($8)
	$7 = ($9 - $6)
	$11 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[20]))
	$10 = [29]
	
.LOOP $label$4:
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$6 }
	$9 = (((int_32)((uint_32)($7 + [-20]) / (uint_32)[20]) * (int_32)[17]) + $10)
	goto $label$5 
	
.LABEL $label$6
	$9 = ($10 + [-17])
	
.LABEL $label$5
	if ( ($9 <= [513]) ){ goto $label$8 }
	$10 = CALL malloc($9)
	goto $label$7 
	
.LABEL $label$8
	$10 = ($13 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$7
	*($12) = $10
	$6 = ($10 + $9)
	*($12 + [8]) = $6
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [1920])
	CALL memcpy($10, $1, [8])
	$7 = ($10 + [8])
	CALL eosio_assert(((int_32)($6 - $7) > (int_32)[3]), [1920])
	CALL memcpy($7, ($1 + [8]), [4])
	*($12 + [4]) = ($10 + [12])
	CALL $180($12, $5)
	CALL db_update_i64(*($1 + [28]), $2, $10, $9)
	if ( ($9 <= [513]) ){ goto $label$9 }
	CALL free($10)
	
.LABEL $label$9
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($12 + [16])
}

int_32 .FUNC $271 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $955([40]))) = (int_64)0
	*($6 + [12 align=4]) = (int_64)0
	*($6 + [20]) = [0]
	*($6 + [24]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [1632])
	CALL memcpy($6, $4, [8])
	$3 = ($4 + [8])
	CALL eosio_assert(((uint_32)($7 - $3) > (uint_32)[3]), [1632])
	CALL memcpy(($6 + [8]), $3, [4])
	*($8 + [36]) = ($4 + [12])
	CALL $182(($8 + [32]), ($6 + [12]))
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $273(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [12])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [16])) = $7
	CALL $956($7)
	
.LABEL $label$10
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $270 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $956($6)
	
.LABEL $label$11
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $956($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $277 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	$12 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$5 = ($1 + [8])
	$4 = *($1)
	$10 = *($1 + [8])
	$7 = ($1 + [12])
	$9 = *($7)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$1 }
	$6 = int_32(($9 - $10) >> [4])
	$9 = [0]
	
.LOOP $label$2:
	*(($8 = ($10 + [4]))) = (*($8) + *((*($3) + (*($10) << [2]))))
	$10 = ($10 + [16])
	$9 = ($9 + [1])
	if ( ($9 <= $6) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert([1], [1856])
	$8 = *($5)
	$9 = *($7)
	$3 = ($9 - $8)
	$11 = (CASTING uint_64)(uint_32 int_32($3 >> [4]))
	$10 = [22]
	
.LOOP $label$3:
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$5 }
	$10 = (((int_32)uint_32(($3 + [-16]) >> [4]) * (int_32)[14]) + $10)
	goto $label$4 
	
.LABEL $label$5
	$10 = ($10 + [-14])
	
.LABEL $label$4
	if ( ($10 <= [513]) ){ goto $label$7 }
	$9 = CALL malloc($10)
	goto $label$6 
	
.LABEL $label$7
	$9 = ($13 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$6
	*($12) = $9
	*($12 + [8]) = ($9 + $10)
	CALL eosio_assert(((int_32)$10 > (int_32)[7]), [1920])
	CALL memcpy($9, $1, [8])
	*($12 + [4]) = ($9 + [8])
	CALL $151($12, $5)
	CALL db_update_i64(*($1 + [24]), $2, $9, $10)
	if ( ($10 <= [513]) ){ goto $label$8 }
	CALL free($9)
	
.LABEL $label$8
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($12 + [16])
}

int_32 .FUNC $276 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$7 = [0]
	*(($8 + [40])) = [0]
	*($8 + [24]) = (int_64)-1
	*($8 + [32]) = (int_64)0
	$5 = *($0 + [8])
	*($8 + [8]) = $5
	*($8 + [16]) = $5
	$0 = CALL db_find_i64($5, $5, (int_64)-4283603440564174848, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $285(($8 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)($8 + [8])), [1536])
	$7 = ((int_32)(*(($0 + [16])) - *($0 + [12])) / (int_32)[12])
	$2 = *($8 + [32])
	if ( ($2 == 0) ){ goto $label$1 }
	$6 = ($8 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = *($3 + [12])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($3 + [16])) = $4
	CALL $956($4)
	
.LABEL $label$6
	CALL $956($3)
	
.LABEL $label$5
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($8 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $2
	
.LABEL $label$2
	*($6) = $2
	CALL $956($0)
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [48])
	return $7
}

int_32 .FUNC $275 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	float_64 $16
	int_32 $17
	int_64 $18
	int_32 $19
	int_32 $20
	int_32 $21
	float_64 $22
	float_64 $23
	int_32 $24
	$24 = (*([0] + [4]) - [240])
	*([0] + [4]) = $24
	CALL _ZN14system_control15check_blacklistEN5eosio4nameE(*($0 + [56]), $1)
	CALL $200(*($0 + [56]), [1])
	CALL memcpy(($24 + [176]), *($4 + [4]), [64])
	$14 = *(($0 + [40]))
	$11 = *(($0 + [44]))
	if ( ((int_32)$11 == (int_32)$14) ){ goto $label$1 }
	$20 = ($11 + [-24])
	$17 = ([0] - $14)
	
.LOOP $label$2:
	if ( ((int_64)*(*($20)) == (int_64)$1) ){ goto $label$1 }
	$11 = $20
	$21 = ($20 + [-24])
	$20 = $21
	if ( ((int_32)($21 + $17) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [16])
	if ( ((int_32)$11 == (int_32)$14) ){ goto $label$4 }
	$19 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($19 + [20]) == (int_32)$5), [1536])
	goto $label$3 
	
.LABEL $label$4
	$19 = [0]
	$20 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-4312506468726210560, $1)
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$3 }
	$19 = CALL $263($5, $20)
	CALL eosio_assert(((int_32)*($19 + [20]) == (int_32)$5), [1536])
	
.LABEL $label$3
	$6 = ((int_32)$19 != (int_32)[0])
	CALL eosio_assert($6, [1664])
	$8 = *($2 + [4])
	$9 = *($8 + [20])
	$20 = *($0 + [64])
	$21 = ($19 + [12])
	CALL eosio_assert(((int_32)(CALL $276(*($0 + [64]), $1) + int_32((*($21) - *($19 + [8])) >> [4])) <= (int_32)CALL int_32 $20((int_32 *($8 + [8])), (int_32 *(*($20) + [4])))), [2432])
	*(($24 + [168])) = [0]
	*($24 + [160]) = (int_64)0
	*($24 + [152]) = (int_64)-1
	$12 = *($0 + [8])
	*($24 + [136]) = $12
	*($24 + [144]) = $12
	$7 = ($19 + [8])
	$10 = [0]
	$20 = CALL db_find_i64($12, $12, (int_64)-4741615135682985984, *($8 + [10]))
	if ( ((int_32)$20 < (int_32)[0]) ){ goto $label$5 }
	$10 = CALL $202(($24 + [136]), $20)
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)($24 + [136])), [1536])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [2464])
	$11 = (CASTING uint_32)(uint_64 (int_64))(((uint_64)CALL publication_time() / (uint_64)(int_64)1000000) - *([0] + [12]))
	*($24 + [132]) = $11)
	$12 = *($2)
	*($24 + [120]) = $12
	$17 = *($8 + [12])
	$20 = *(*($0) + [32])
	*($24 + [16 align=4]) = $12
	$13 = CALL int_32 $0((int_32 ($24 + [16])), (int_32 $7), (int_32 ($24 + [176])), (int_32 $20))
	*($24 + [104]) = (int_64)0
	*($24 + [96]) = (int_64)0
	*($24 + [88]) = (int_64)0
	*($24 + [80]) = (int_64)0
	$14 = CALL int_32 $0((int_32 [200]), (int_32 *(*($0) + [24])))
	$15 = *($21)
	$20 = *($7)
	if ( ((int_32)$20 == (int_32)$15) ){ goto $label$8 }
	$11 = ($11 - $17)
	$21 = [0]
	
.LOOP $label$9:
	$2 = *(($20 + [10]))
	$2 = (CASTING int_32)(float_64 ((float_64)(CASTING float_64)(int_32 ((int_32)*(($20 + [12])) * (int_32)[60])) / (float_64)(float_64))((float_64)25 - ((float_64)((float_64)(CASTING float_64)(uint_32 $2) * (float_64)(float_64)25) / (float_64)(CASTING float_64)(int_32 ($2 + [1000])))))
	$2 = ((int_32)((int_32)((int_32)( $2) ? $11 : ((int_32)$11 > (int_32)$2) ) * (int_32)*(($20 + [8]))) / (int_32)[60]) / (int_32)$14
	$2 = ( $2) ? [1] : $2 
	*((($24 + [96]) + ($17 = (*($20) << [2])))) = $2)
	*((($24 + [80]) + $17)) = *(($20 + [14]))
	$21 = ($2 + $21)
	$20 = ($20 + [16])
	if ( ((int_32)$15 != (int_32)$20) ){ goto $label$9 }
	$17 = [1]
	$20 = (((int_32)$21 / (int_32)[10]) + [1])
	*($24 + [76]) = $20
	if ( ((int_32)$20 < (int_32)[100]) ){ goto $label$7 }
	if ( (((int_32)$3 ^ (int_32)[1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	*($24 + [76]) = [1]
	
.LABEL $label$7
	*($24 + [64]) = $12
	$20 = *(*($0) + [36])
	*($24 + [8 align=4]) = $12
	CALL void $0((int_32 ($24 + [8])), (int_32 $13), (int_32 $20))
	$18 = *(($0 + [8]))
	*($24 + [24]) = ($24 + [96])
	CALL eosio_assert($6, [1696])
	CALL $277($5, $19, $18, ($24 + [24]))
	$16 = (float_64)5e3
	if ( *($0 + [4]) ){ goto $label$10 }
	$23 = (CASTING float_64)(int_32 (CASTING int_32)(float_64 CALL $204(*(($0 + [56])))))
	CALL pow((float_64)2, ((float_64)max ( (float_64)((float_64)$23 / (float_64)(float_64)1e3) , (float_64)(float_64)1 ) + (float_64)(float_64)-1))
	$16 = ((float_64)$23 * (float_64)(float_64)5)
	CALL publication_time()
	
.LABEL $label$10
	*($24 + [56]) = (int_64)0
	$20 = *($24 + [100])
	if ( ($20 == 0) ){ goto $label$13 }
	$23 = ((float_64)((float_64)((float_64)(CASTING float_64)(int_32 $20) / (float_64)(float_64)50) * (float_64)min ( (float_64)((float_64)((float_64)(CASTING float_64)(int_32 *($24 + [84])) / (float_64)(float_64)1e3) + (float_64)(float_64)1) , (float_64)(float_64)8 )) + (float_64)(float_64)0)
	*($24 + [56]) = $23
	$20 = *($24 + [104])
	if ( $20 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$23 = (float_64)0
	$20 = *($24 + [104])
	if ( ($20 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$23 = ((float_64)$23 + (float_64)((float_64)((float_64)(CASTING float_64)(int_32 $20) / (float_64)(float_64)50) * (float_64)min ( (float_64)((float_64)((float_64)(CASTING float_64)(int_32 *($24 + [88])) / (float_64)(float_64)1e3) + (float_64)(float_64)1) , (float_64)(float_64)8 )))
	*($24 + [56]) = $23
	
.LABEL $label$11
	$20 = *($24 + [108])
	if ( ($20 == 0) ){ goto $label$14 }
	$23 = ((float_64)$23 + (float_64)((float_64)((float_64)(CASTING float_64)(int_32 $20) / (float_64)(float_64)50) * (float_64)min ( (float_64)((float_64)((float_64)(CASTING float_64)(int_32 *($24 + [92])) / (float_64)(float_64)1e3) + (float_64)(float_64)1) , (float_64)(float_64)8 )))
	*($24 + [56]) = $23
	
.LABEL $label$14
	$21 = (CASTING int_32)(float_64 $16)
	$20 = *($24 + [76])
	$22 = ((float_64)(CASTING float_64)(int_32 ( $20 ? [1000] : ((int_32)$20 < (int_32)[1000]) )) / (float_64)(float_64)500)
	$11 = (CASTING uint_32)(uint_64 (int_64))(((uint_64)CALL publication_time() / (uint_64)(int_64)1000000) - *([0] + [12]))
	if ( ($11) <= [48892800]) ){ goto $label$15 }
	$16 = ((float_64)(CASTING float_64)(int_32 ( $20 ? $21 : ((int_32)$21 > (int_32)$20) )) / (float_64)((float_64)$16 * (float_64)(float_64)0.5))
	$11 = ((int_32)*([0] + [16]) * (int_32)[7])
	$21 = ($11 + [-48892800])
	if ( ((uint_32)$21 <= (uint_32)$11) ){ goto $label$16 }
	$22 = $16
	goto $label$15 
	
.LABEL $label$16
	$22 = ((float_64)$22 + (float_64)((float_64)(float_64))($16 - $22) * (float_64)((float_64)(CASTING float_64)(uint_32 $21) / (float_64)(CASTING float_64)(uint_32 $11))))
	
.LABEL $label$15
	$21 = (CASTING int_32)(float_64 ((float_64)$23 * (float_64)((float_64)$22 + (float_64)(float_64)1)))
	*($24 + [56]) = (CASTING float_64)(int_32 ( $21 ? [1] : ((int_32)$21 > (int_32)[1]) ))
	CALL $205(($24 + [48]), *(($0 + [56])), ($24 + [176]))
	*($24 + [40]) = (int_64)0
	$21 = CALL $278(*($0 + [72]), $1, [1])
	$11 = *($24 + [100])
	if ( ((int_32)$11 <= (int_32)[0]) ){ goto $label$17 }
	*($24 + [42]) = CALL $279($0, $8, $20, *($24 + [84]), $11, $10, ($24 + [48]), $21, (float_64)1)
	
.LABEL $label$17
	$20 = ($0 + [72])
	$21 = CALL $278(*($20), $1, [2])
	$11 = *($24 + [104])
	if ( ((int_32)$11 <= (int_32)[0]) ){ goto $label$18 }
	*($24 + [44]) = CALL $279($0, $8, *($24 + [76]), *($24 + [88]), $11, $10, ($24 + [48]), $21, (float_64)1)
	
.LABEL $label$18
	$20 = CALL $278(*($20), $1, [3])
	$21 = *($24 + [108])
	if ( ((int_32)$21 < (int_32)[1]) ){ goto $label$19 }
	*($24 + [46]) = CALL $279($0, $8, *($24 + [76]), *($24 + [92]), $21, $10, ($24 + [48]), $20, (float_64)1)
	
.LABEL $label$19
	CALL $281(*(($0 + [64])), $1, ($24 + [40]))
	$18 = *(($0 + [8]))
	$17 = [0]
	$20 = *($0 + [60])
	*($24 + [28]) = ($24 + [56])
	*($24 + [24]) = ($24 + [132])
	*($24 + [32]) = ($24 + [76])
	$21 = (CASTING uint_32)(uint_64 (uint_64)$12 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$21) != (int_32)[0]), [1696])
	CALL $282(($20 + [8]), $21, $18, ($24 + [24]))
	*($24 + [188]) = [0]
	if ( *(($0 + [4])) ){ goto $label$20 }
	if ( ((int_32)(*(($19 + [12])) - *(($19 + [8]))) != (int_32)[48]) ){ goto $label$20 }
	$20 = *($24 + [76])
	if ( ((int_32)$20 < (int_32)[11]) ){ goto $label$20 }
	CALL $280($0, ($24 + [176]), $9, $20)
	
.LABEL $label$20
	$12 = *($24 + [176])
	*($24 + [184]) = ((int_32)(CASTING uint_32)(uint_64 ((int_64)(uint_64)$12 >> (uint_64)(int_64)32) ^ (int_64)$12)) ^ (int_32)*($24 + [48]))
	$21 = *(($0 + [56]))
	$12 = *($21)
	$20 = *($4 + [4])
	*($24 + [24]) = ($24 + [176])
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [1696])
	CALL $209(($21 + [88]), $20, $12, ($24 + [24]))
	CALL void $0((int_32 $1), (int_64 $9), (int_32 *($24 + [76])), (int_32 $7), (int_32 *(*($0) + [28])))
	
.LABEL $label$6
	$11 = *($24 + [160])
	if ( ($11 == 0) ){ goto $label$21 }
	$2 = ($24 + [164])
	$20 = *($2)
	if ( ((int_32)$20 == (int_32)$11) ){ goto $label$23 }
	
.LOOP $label$24:
	$20 = ($20 + [-24])
	$21 = *($20)
	*($20) = [0]
	if ( ($21 == 0) ){ goto $label$25 }
	CALL $956($21)
	
.LABEL $label$25
	if ( ((int_32)$11 != (int_32)$20) ){ goto $label$24 }
	$20 = *(($24 + [160]))
	goto $label$22 
	
.LABEL $label$23
	$20 = $11
	
.LABEL $label$22
	*($2) = $11
	CALL $956($20)
	
.LABEL $label$21
	*([0] + [4]) = ($24 + [240])
	return $17
}

int_32 .FUNC $274 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $955([56]))) = (int_64)0
	*($6 + [8]) = [0]
	*($6 + [10]) = [0]
	*($6 + [12 align=4]) = (int_64)0
	*($6 + [20]) = [0]
	*($6 + [22]) = [0]
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = (int_64)0
	*($6 + [40]) = $0
	CALL $293(($8 + [32]), $6)
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [44])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $294(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $279 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, float_64 $8)
{
	int_32 $9
	float_64 $10
	float_64 $11
	float_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$12 = (CASTING float_64)(uint_32 *($5 + [9]))
	$12 = ((float_64)$12 + (float_64)((float_64)$12 * (float_64)((float_64)(CASTING float_64)(int_32 $3) / (float_64)(CASTING float_64)(int_32 ($3 + [777])))))
	$14 = [1]
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$2 }
	if ( ((int_32)$7 < (int_32)[9]) ){ goto $label$1 }
	$14 = [2]
	if ( ((int_32)$7 < (int_32)[17]) ){ goto $label$1 }
	$14 = [3]
	if ( ((int_32)$7 < (int_32)[21]) ){ goto $label$1 }
	$14 = [4]
	if ( ((int_32)$7 < (int_32)[25]) ){ goto $label$1 }
	$14 = ( [5] ? [0] : ((int_32)$7 < (int_32)[27]) )
	goto $label$1 
	
.LABEL $label$2
	$14 = [0]
	
.LABEL $label$1
	$13 = ((uint_64)((int_64)((int_64)*($6) * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	*($6) = $13
	$9 = (CASTING uint_32)(uint_64 (uint_64)((int_64)$13 * (int_64)1000000000) >> (uint_64)(int_64)31)
	*($6 + [4]) = $9)
	$12 = min ( (float_64)((float_64)((float_64)((float_64)(CASTING float_64)(int_32 $2) / (float_64)(float_64)1e3) * (float_64)(float_64)20) + (float_64)$12) , (float_64)(float_64)100 )
	$7 = [6]
	if ( ((int_32)$2 < (int_32)[100]) ){ goto $label$3 }
	$7 = [8]
	if ( ((int_32)$2 < (int_32)[200]) ){ goto $label$3 }
	$7 = ( [9] ? [10] : ((int_32)$2 < (int_32)[500]) )
	
.LABEL $label$3
	$15 = ($7 + [-19])
	$10 = ((float_64)$12 / (float_64)(float_64)100)
	$7 = (($7 << [3]) + [2544])
	$11 = (CASTING float_64)(int_32 $4)
	
.LOOP $label$4:
	$12 = ((float_64)((float_64)$10 * (float_64)*($7)) * (float_64)$8)
	$3 = [1]
	$2 = $15
	$15 = ((int_32)($2 + [20]) % (int_32)[20])
	if ( ((int_32)$15 < (int_32)[5]) ){ goto $label$5 }
	$3 = [2]
	if ( ((int_32)$15 < (int_32)[8]) ){ goto $label$5 }
	$3 = [3]
	if ( ((int_32)$15 < (int_32)[10]) ){ goto $label$5 }
	$3 = [4]
	if ( ((int_32)$15 == (int_32)[10]) ){ goto $label$5 }
	$3 = ( [5] ? [0] : ((int_32)$15 < (int_32)[12]) )
	
.LABEL $label$5
	$3 = (CASTING int_32)(float_64 ((float_64)(float_64))((float_64)1 - CALL pow((float_64))((float_64)1 - ( ((float_64)$12 * (float_64)(float_64)1.2) ? $12 : ((int_32)$14 == (int_32)$3) )), $11)) * (float_64)(float_64)1e9
	if ( ((int_32)$9 < (int_32)$3))) ){ goto $label$6 }
	$7 = ($7 + [-8])
	$15 = ($2 + [-1])
	if ( ((int_32)($2 + [19]) >= (int_32)[2]) ){ goto $label$4 }
	
.LABEL $label$6
	$13 = ((uint_64)((int_64)((int_64)*($6) * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	*($6) = $13
	$7 = (CASTING uint_32)(uint_64 (uint_64)((int_64)$13 * (int_64)100) >> (uint_64)(int_64)31)
	*(($6 + [4])) = $7)
	$15 = [20]
	$14 = *($5 + [10])
	if ( ((uint_32)$14 > (uint_32)$7) ){ goto $label$7 }
	$15 = [40]
	$14 = (*($5 + [11]) + $14)
	if ( ((uint_32)$14 > (uint_32)$7) ){ goto $label$7 }
	$15 = [60]
	$14 = (*($5 + [12]) + $14)
	if ( ((uint_32)$14 > (uint_32)$7) ){ goto $label$7 }
	$15 = ( [80] ? [100] : ((uint_32)(*($5 + [13]) + $14) > (uint_32)$7) )
	
.LABEL $label$7
	return (( $2 ? [-19] : ((int_32)$9 < (int_32)$3) ) + $15)
}

int_32 .FUNC $278 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$7 = [0]
	*(($8 + [40])) = [0]
	*($8 + [24]) = (int_64)-1
	*($8 + [32]) = (int_64)0
	$5 = *($0 + [8])
	*($8 + [8]) = $5
	*($8 + [16]) = $5
	$0 = CALL db_find_i64($5, $5, (int_64)-4227314345542942720, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $269(($8 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [20]) == (int_32)($8 + [8])), [1536])
	$0 = *($0 + [8])
	$4 = *(($0 + [12]))
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$3 }
	$3 = ((int_32)($4 - $0) / (int_32)[12])
	$4 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($0 + [9])) == (int_32)$2) ){ goto $label$4 }
	$0 = ($0 + [12])
	$4 = ($4 + [1])
	if ( ($4 <= $3) ){ goto $label$5 }
	$7 = [0]
	$3 = *($8 + [32])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$7 = *($0)
	
.LABEL $label$3
	$3 = *($8 + [32])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($8 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$2 = *($4 + [8])
	if ( ($2 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $2
	CALL $956($2)
	
.LABEL $label$10
	CALL $956($4)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($8 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL $956($0)
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [48])
	return $7
}

void .FUNC $798 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([48])) + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [12 align=4]) = (int_64)0
	*($3 + [20 align=4]) = (int_64)0
	*($3 + [28]) = [0]
	*($3 + [32]) = $1
	CALL $802(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$5 = *($3 + [36])
	*($7 + [12]) = $5
	$6 = ($1 + [28])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($4 + [8]) = $2
	*($4 + [16]) = $5
	*($7 + [32]) = [0]
	*($4) = $3
	*($6) = ($4 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $775(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$4 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$5 = *($4 + [20])
	if ( ($5 == 0) ){ goto $label$4 }
	$6 = ($4 + [24])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	$0 = ([0] - $5)
	$3 = ($3 + [-12])
	
.LOOP $label$7:
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$8 }
	*(($3 + [4])) = $1
	CALL $956($1)
	
.LABEL $label$8
	$3 = ($3 + [-64])
	if ( ((int_32)($3 + $0) != (int_32)[-12]) ){ goto $label$7 }
	$3 = *(($4 + [20]))
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($6) = $5
	CALL $956($3)
	
.LABEL $label$4
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $799 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([24])) + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [12]) = $1
	CALL $801(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [16])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $545(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $794 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = *($0)
	$5 = int_32((*($0 + [4]) - $9) >> [6])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[67108864]) ){ goto $label$3 }
	$7 = [67108863]
	$9 = (*($0 + [8]) - $9)
	if ( ((uint_32)int_32($9 >> [6]) > (uint_32)[33554430]) ){ goto $label$5 }
	$9 = int_32($9 >> [5])
	$7 = ( $6 ? $9 : ($9 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ((uint_32)$7 >= (uint_32)[67108864]) ){ goto $label$2 }
	
.LABEL $label$5
	$8 = CALL $955(($7 << [6]))
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = (($6 = CALL memcpy(($9 = ($8 + ($5 << [6]))), $1, [50])) + [60]))) = [0]
	*($6 + [52 align=4]) = (int_64)0
	$5 = (*(($1 + [56])) - *($1 + [52]))
	$3 = int_32($5 >> [4])
	if ( ($3 == 0) ){ goto $label$7 }
	$2 = ($6 + [52])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$6 }
	$5 = CALL $955($5)
	*($2) = $5
	*(($2 = ($6 + [56]))) = $5
	*($4) = ($5 + ($3 << [4]))
	$3 = *(($1 + [52]))
	$1 = (*(($1 + [56])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($5, $3, $1)
	*($2) = (*($2) + $1)
	
.LABEL $label$7
	$3 = ($8 + ($7 << [6]))
	$4 = ($6 + [64])
	$1 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$9 }
	$5 = ([0] - $1)
	$1 = ($6 + [-64])
	
.LOOP $label$10:
	CALL memcpy(($9 + [-64]), $1, [50])
	*(($6 = ($9 + [-12]))) = (int_64)0
	*(($7 = ($9 + [-4]))) = [0]
	$8 = ($1 + [52])
	*($6) = *($8)
	*(($9 + [-8])) = *(($1 + [56]))
	$6 = ($1 + [60])
	*($7) = *($6)
	*($6) = [0]
	*($8) = (int_64)0
	$9 = ($9 + [-64])
	$1 = ($1 + [-64])
	if ( ((int_32)($1 + $5) != (int_32)[-64]) ){ goto $label$10 }
	$1 = *(($0 + [4]))
	$7 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$7 = $1
	
.LABEL $label$8
	*($0) = $9
	*(($0 + [4])) = $4
	*(($0 + [8])) = $3
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$11 }
	$6 = ([0] - $7)
	$9 = ($1 + [-12])
	
.LOOP $label$12:
	$1 = *($9)
	if ( ($1 == 0) ){ goto $label$13 }
	*(($9 + [4])) = $1
	CALL $956($1)
	
.LABEL $label$13
	$9 = ($9 + [-64])
	if ( ((int_32)($9 + $6) != (int_32)[-12]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($7 == 0) ){ goto $label$14 }
	CALL $956($7)
	
.LABEL $label$14
	return (unreachable)
	
.LABEL $label$6
	CALL $971($2)
	(unreachable)
	(unreachable)
}

void .FUNC $795 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy(($0 + [4]), *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($0 + [8]), *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($0 + [12]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $796 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [128])
	*([0] + [4]) = $14
	*($14 + [126]) = $2
	*($14 + [120]) = $3
	*($14 + [116]) = $4
	CALL $767(*($0 + [16]))
	*(($14 + [104])) = [0]
	*($14 + [88]) = (int_64)-1
	*($14 + [96]) = (int_64)0
	$11 = *($0)
	*($14 + [72]) = $11
	*($14 + [80]) = $11
	$1 = CALL db_find_i64($11, $11, (int_64)5022829029921652736, (CASTING uint_64)(uint_32 $1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $768(($14 + [72]), $1)
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)($14 + [72])), [1536])
	$11 = *($0)
	*($14 + [12]) = ($14 + [120])
	*($14 + [8]) = ($14 + [126])
	*($14 + [16]) = ($14 + [116])
	CALL eosio_assert([1], [1696])
	CALL $797(($14 + [72]), $1, $11, ($14 + [8]))
	$6 = *($14 + [96])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$1 = ($14 + [88])
	$11 = *($1)
	if ( ((int_64)$11 != (int_64)-1) ){ goto $label$4 }
	$11 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($14 + [72]), *(($14 + [80])), (int_64)5022829029921652736, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	CALL $768(($14 + [72]), $4)
	*($14 + [12]) = [0]
	*($14 + [8]) = ($14 + [72])
	$11 = *(*(CALL $784(($14 + [8])) + [4]))
	$11 = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*(($14 + [88])) = $11
	
.LABEL $label$4
	CALL eosio_assert((uint_64)($11 <= (int_64)-2), [3920])
	$11 = *($1)
	*($14 + [64]) = ((int_64)(CASTING uint_64)(uint_32 (int_64)($11 == 0)) + (int_64)$11)
	$11 = (int_64)0
	$1 = CALL db_lowerbound_i64(*($14 + [72]), *(($14 + [80])), (int_64)5022829029921652736, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$6 }
	CALL $768(($14 + [72]), $1)
	$13 = CALL publication_time()
	*($14 + [56]) = ($14 + [72])
	*($14 + [60]) = [0]
	$10 = *([0] + [12])
	$1 = *(CALL $784(($14 + [56])) + [4])
	CALL eosio_assert(((*($1 + [16]) + *($1 + [12])) <= (CASTING uint_32)(uint_64 (int_64))(((uint_64)$13 / (uint_64)(int_64)1000000) - $10))), [8848])
	
.LABEL $label$6
	$13 = *($0)
	*($14 + [12]) = ($14 + [126])
	*($14 + [8]) = ($14 + [64])
	*($14 + [16]) = ($14 + [120])
	*($14 + [20]) = ($14 + [116])
	CALL $798(($14 + [48]), ($14 + [72]), $13, ($14 + [8]))
	*(($14 + [40])) = [0]
	*($14 + [24]) = (int_64)-1
	*($14 + [32]) = (int_64)0
	$5 = *($0)
	*($14 + [8]) = $5
	*($14 + [16]) = $5
	$10 = (int_64)59
	$1 = [8880]
	$12 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$12 }
	$4 = *($1)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$4 = ($4 + [165])
	goto $label$10 
	
.LABEL $label$12
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$8
	$1 = ($1 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$7 }
	$1 = CALL db_find_i64($5, $5, (int_64)-4695710445447675904, $12)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$15 }
	$1 = CALL $540(($14 + [8]), $1)
	CALL eosio_assert(((int_32)*($1 + [12]) == (int_32)($14 + [8])), [1536])
	$11 = *($0)
	*($14 + [48]) = ($14 + [64])
	CALL eosio_assert([1], [1696])
	CALL $800(($14 + [8]), $1, $11, ($14 + [48]))
	$0 = *($14 + [32])
	if ( $0 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$11 = *($0)
	*($14 + [48]) = $0
	*($14 + [52]) = ($14 + [64])
	CALL $799($14, ($14 + [8]), $11, ($14 + [48]))
	$0 = *($14 + [32])
	if ( ($0 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$3 = ($14 + [36])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$17 }
	
.LOOP $label$18:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	CALL $956($4)
	
.LABEL $label$19
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$18 }
	$1 = *(($14 + [32]))
	goto $label$16 
	
.LABEL $label$17
	$1 = $0
	
.LABEL $label$16
	*($3) = $0
	CALL $956($1)
	
.LABEL $label$13
	$6 = *($14 + [96])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($14 + [100])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$21 }
	
.LOOP $label$22:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$23 }
	$7 = *($2 + [20])
	if ( ($7 == 0) ){ goto $label$24 }
	$9 = ($2 + [24])
	$1 = *($9)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$26 }
	$0 = ([0] - $7)
	$1 = ($1 + [-12])
	
.LOOP $label$27:
	$4 = *($1)
	if ( ($4 == 0) ){ goto $label$28 }
	*(($1 + [4])) = $4
	CALL $956($4)
	
.LABEL $label$28
	$1 = ($1 + [-64])
	if ( ((int_32)($1 + $0) != (int_32)[-12]) ){ goto $label$27 }
	$1 = *(($2 + [20]))
	goto $label$25 
	
.LABEL $label$26
	$1 = $7
	
.LABEL $label$25
	*($9) = $7
	CALL $956($1)
	
.LABEL $label$24
	CALL $956($2)
	
.LABEL $label$23
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$22 }
	$1 = *(($14 + [96]))
	goto $label$20 
	
.LABEL $label$21
	$1 = $6
	
.LABEL $label$20
	*($8) = $6
	CALL $956($1)
	
.LABEL $label$1
	*([0] + [4]) = ($14 + [128])
}

void .FUNC $797 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [8]) = *(*($3))
	*($1 + [12]) = *(*($3 + [4]))
	$4 = *($1)
	*($1 + [16]) = *(*($3 + [8]))
	CALL eosio_assert([1], [1856])
	$9 = *($1 + [20])
	$5 = *(($1 + [24]))
	$10 = (CASTING uint_64)(uint_32 int_32(($5 - $9) >> [6]))
	$3 = [18]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	$3 = ($3 + [43])
	$7 = *($9 + [52])
	$6 = *(($9 + [56]))
	$8 = ($6 - $7)
	$10 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	$3 = ((((int_32)uint_32(($8 + [-16]) >> [4]) * (int_32)[10]) + $3) + [10])
	
.LABEL $label$5
	$9 = ($9 + [64])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$7 }
	$9 = CALL malloc($3)
	goto $label$6 
	
.LABEL $label$7
	$9 = ($12 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$6
	*($11 + [4]) = $9
	*($11) = $9
	*($11 + [8]) = ($9 + $3)
	CALL $770($11, $1)
	CALL db_update_i64(*($1 + [36]), $2, $9, $3)
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($9)
	
.LABEL $label$8
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $790 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $6) / (int_32)[48]) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ((int_32)($6 - $5) / (int_32)[48])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[89478486]) ){ goto $label$3 }
	$6 = [89478485]
	$2 = ((int_32)($2 - $5) / (int_32)[48])
	if ( ((uint_32)$2 > (uint_32)[44739241]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $955(((int_32)$6 * (int_32)[48]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	CALL $781(CALL $fimport$28($6, [0], [48]))
	$6 = (*($0) + [48])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$6 * (int_32)[48]))
	$5 = ($2 + ((int_32)$3 * (int_32)[48]))
	$6 = $5
	
.LOOP $label$8:
	$6 = CALL memset($6, [0], [48])
	CALL $781($6)
	$6 = ($6 + [48])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 + ((int_32)((int_32)$2 / (int_32)[-48]) * (int_32)[48]))
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $956($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $791 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	CALL $767(*($0 + [16]))
	*(($10 + [40])) = [0]
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	$7 = *($0)
	*($10 + [8]) = $7
	*($10 + [16]) = $7
	$6 = [0]
	$1 = CALL db_find_i64($7, $7, (int_64)5022829029921652736, (CASTING uint_64)(uint_32 $1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $768(($10 + [8]), $1)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)($10 + [8])), [1536])
	
.LABEL $label$1
	$1 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($1, [8784])
	$7 = *($0)
	*($10 + [4]) = $0
	*($10) = $2
	CALL eosio_assert($1, [1696])
	CALL $792(($10 + [8]), $6, $7, $10)
	$3 = *($10 + [32])
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = ($10 + [36])
	$1 = *($8)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	$5 = *($4 + [20])
	if ( ($5 == 0) ){ goto $label$7 }
	$9 = ($4 + [24])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$9 }
	$2 = ([0] - $5)
	$0 = ($0 + [-12])
	
.LOOP $label$10:
	$6 = *($0)
	if ( ($6 == 0) ){ goto $label$11 }
	*(($0 + [4])) = $6
	CALL $956($6)
	
.LABEL $label$11
	$0 = ($0 + [-64])
	if ( ((int_32)($0 + $2) != (int_32)[-12]) ){ goto $label$10 }
	$0 = *(($4 + [20]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $5
	
.LABEL $label$8
	*($9) = $5
	CALL $956($0)
	
.LABEL $label$7
	CALL $956($4)
	
.LABEL $label$6
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$5 }
	$0 = *(($10 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $3
	
.LABEL $label$3
	*($8) = $3
	CALL $956($0)
	
.LABEL $label$2
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $792 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	CALL $793($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$9 = *($1 + [20])
	$5 = *(($1 + [24]))
	$10 = (CASTING uint_64)(uint_32 int_32(($5 - $9) >> [6]))
	$3 = [18]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	$3 = ($3 + [43])
	$7 = *($9 + [52])
	$6 = *(($9 + [56]))
	$8 = ($6 - $7)
	$10 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	$3 = ((((int_32)uint_32(($8 + [-16]) >> [4]) * (int_32)[10]) + $3) + [10])
	
.LABEL $label$5
	$9 = ($9 + [64])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$7 }
	$9 = CALL malloc($3)
	goto $label$6 
	
.LABEL $label$7
	$9 = ($12 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$6
	*($11 + [4]) = $9
	*($11) = $9
	*($11 + [8]) = ($9 + $3)
	CALL $770($11, $1)
	CALL db_update_i64(*($1 + [36]), $2, $9, $3)
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($9)
	
.LABEL $label$8
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $793 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [64])
	*([0] + [4]) = $14
	$3 = ($1 + [20])
	$11 = *($0)
	$11 = (*($11 + [4]) - *($11))
	$12 = ($1 + [24])
	$13 = int_32((*($12) - *($1 + [20])) >> [6])
	if ( ($13 == 0) ){ goto $label$3 }
	CALL eosio_assert(((int_32)$13 == (int_32)((int_32)$11 / (int_32)[48])), [8816])
	$12 = *($3)
	if ( ((int_32)*($12) == (int_32)$12) ){ goto $label$2 }
	$11 = [0]
	$10 = ($1 + [20])
	$2 = ($1 + [24])
	$1 = [0]
	$13 = [0]
	
.LOOP $label$4:
	CALL memcpy(($12 + $1), (*(*($0)) + $11), [48])
	$11 = ($11 + [48])
	$1 = ($1 + [64])
	$12 = *($10)
	$13 = ($13 + [1])
	if ( ($13 <= int_32((*($2) - $12) >> [6])) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ($11 == 0) ){ goto $label$2 }
	$11 = ($14 + [52])
	$6 = ($14 + [60])
	$7 = ($1 + [28])
	$12 = ($1 + [24])
	$9 = ($14 + [56])
	$1 = [0]
	$10 = [0]
	
.LOOP $label$5:
	CALL $781($14)
	*(($13 = ($14 + [48]))) = [0]
	*($11) = (int_64)0
	*($6) = [0]
	$2 = CALL memcpy($14, (*(*($0)) + $1), [48])
	*($13) = [0]
	$13 = *($12)
	if ( ((int_32)$13 == (int_32)*($7)) ){ goto $label$8 }
	*(($13 = CALL memcpy($13, $2, [50])) + [52 align=4]) = (int_64)0
	*(($8 = ($13 + [60]))) = [0]
	$2 = (*($9) - *($11))
	$5 = int_32($2 >> [4])
	if ( ($5 == 0) ){ goto $label$9 }
	$4 = ($13 + [52])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$2 = CALL $955($2)
	*($4) = $2
	*($8) = ($2 + ($5 << [4]))
	*(($13 = ($13 + [56]))) = $2
	$8 = *($11)
	$5 = (*($9) - $8)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $8, $5)
	*($13) = (*($13) + $5)
	
.LABEL $label$9
	*($12) = (*($12) + [64])
	$13 = *($11)
	if ( $13 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $794($3, $2)
	$13 = *($11)
	if ( ($13 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	*($9) = $13
	CALL $956($13)
	
.LABEL $label$6
	$1 = ($1 + [48])
	$13 = *($0)
	$10 = ($10 + [1])
	if ( ($10 <= ((int_32)(*($13 + [4]) - *($13)) / (int_32)[48])) ){ goto $label$5 }
	
.LABEL $label$2
	*([0] + [4]) = ($14 + [64])
	return (unreachable)
	
.LABEL $label$1
	CALL $971($4)
}

void .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [1920])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [1920])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [1920])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), $2, [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
}

int_32 .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $955([40]))) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [16]) = [0]
	*($6 + [20]) = [0]
	*($6 + [24]) = $0
	CALL $176(($8 + [32]), $6)
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $177(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $150 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	$12 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$5 = ($1 + [8])
	$4 = *($1)
	$10 = *($1 + [8])
	$7 = ($1 + [12])
	$9 = *($7)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$1 }
	$6 = int_32(($9 - $10) >> [4])
	$9 = [0]
	$8 = (*(*($3)) & [255])
	
.LOOP $label$3:
	if ( ((int_32)*($10) == (int_32)$8) ){ goto $label$2 }
	$10 = ($10 + [16])
	$9 = ($9 + [1])
	if ( ($9 <= $6) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*(($10 + [8])) = *(*($3 + [4]))
	*(($10 + [10])) = *(*($3 + [4]) + [4])
	*(($10 + [12])) = *(*($3 + [4]) + [8])
	*(($10 + [14])) = *(*($3 + [4]) + [12])
	
.LABEL $label$1
	CALL eosio_assert([1], [1856])
	$8 = *($5)
	$9 = *($7)
	$6 = ($9 - $8)
	$11 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	$10 = [22]
	
.LOOP $label$4:
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$6 }
	$10 = (((int_32)uint_32(($6 + [-16]) >> [4]) * (int_32)[14]) + $10)
	goto $label$5 
	
.LABEL $label$6
	$10 = ($10 + [-14])
	
.LABEL $label$5
	if ( ($10 <= [513]) ){ goto $label$8 }
	$9 = CALL malloc($10)
	goto $label$7 
	
.LABEL $label$8
	$9 = ($13 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$7
	*($12) = $9
	*($12 + [8]) = ($9 + $10)
	CALL eosio_assert(((int_32)$10 > (int_32)[7]), [1920])
	CALL memcpy($9, $1, [8])
	*($12 + [4]) = ($9 + [8])
	CALL $151($12, $5)
	CALL db_update_i64(*($1 + [24]), $2, $9, $10)
	if ( ($10 <= [513]) ){ goto $label$9 }
	CALL free($9)
	
.LABEL $label$9
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($12 + [16])
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [16]) = (($2) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $4) > (int_32)[0]), [1920])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($7 + [16]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $2 ){ goto $label$1 }
	$4 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$2 }
	$2 = ($7 + [36])
	$3 = ($7 + [40])
	
.LOOP $label$3:
	*($7 + [8]) = $0
	*($7 + [16]) = $6
	*((($7 + [16]) + [8])) = ($6 + [4])
	*((($7 + [16]) + [12])) = ($6 + [8])
	*((($7 + [16]) + [16])) = ($6 + [10])
	*($2) = ($6 + [12])
	*($3) = ($6 + [14])
	*($7 + [20]) = ($6 + [1])
	CALL $152(($7 + [16]), ($7 + [8]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [48])
	return $0
}

void .FUNC $408 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$2 = ((int_32)($5 - $4) / (int_32)[56])
	$7 = ($2 + [1])
	if ( ((uint_32)$7 >= (uint_32)[76695845]) ){ goto $label$2 }
	$6 = [76695844]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[56])
	if ( ((uint_32)$3 > (uint_32)[38347921]) ){ goto $label$4 }
	$6 = ($3 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $955(((int_32)$6 * (int_32)[56]))
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = ($5 - $4)
	$2 = CALL memcpy(($7 + ((int_32)$2 * (int_32)[56])), $1, [56])
	$1 = ($2 + ((int_32)((int_32)$5 / (int_32)[-56]) * (int_32)[56]))
	$6 = ($7 + ((int_32)$6 * (int_32)[56]))
	$7 = ($2 + [56])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $4, $5)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $956($4)
	
.LABEL $label$6
	(unreachable)
}

int_32 .FUNC $409 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [32]))) = (int_64)1397703940
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [48]))) = (int_64)1397703940
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [3776])
	*($0 + [68 align=4]) = (int_64)0
	*(($0 + [76])) = (int_64)0
	*(($0 + [84])) = (int_64)0
	return $0
}

void .FUNC $154 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	$26 = (*([0] + [4]) - [144])
	*([0] + [4]) = $26
	*((($26 + [104]) + [32])) = [0]
	*($26 + [120]) = (int_64)-1
	*($26 + [128]) = (int_64)0
	$5 = *($0 + [8])
	*($26 + [104]) = $5
	*($26 + [112]) = $5
	*((($26 + [64]) + [32])) = [0]
	*($26 + [80]) = (int_64)-1
	*($26 + [88]) = (int_64)0
	*($26 + [72]) = $5
	*($26 + [64]) = $5
	$4 = CALL int_32 $0((int_32 $2), (int_64 *(*($0) + [20])))
	*((($26 + [56]) + [4])) = [0]
	*($26 + [56]) = [0]
	*((($26 + [44]) + [8])) = [0]
	*($26 + [44 align=4]) = (int_64)0
	$21 = *($4)
	$7 = *($4 + [4])
	if ( ((int_32)$7 == (int_32)$21) ){ goto $label$3 }
	$12 = (($26 + [104]) + [24])
	$13 = (($26 + [104]) + [28])
	$14 = (($26 + [104]) + [8])
	$17 = ($1 + [12])
	$24 = [0]
	$25 = [0]
	$19 = [0]
	$20 = [0]
	
.LOOP $label$4:
	$11 = ($21 + ((int_32)$20 * (int_32)[20]))
	if ( ((int_64)*($11 + [6]) != (int_64)$3) ){ goto $label$5 }
	$5 = *($11 + [4])
	$23 = *($12)
	$22 = *($13)
	if ( ((int_32)$22 == (int_32)$23) ){ goto $label$6 }
	$21 = ($22 + [-24])
	$6 = ([0] - $23)
	
.LOOP $label$7:
	if ( ((int_64)*(*($21)) == (int_64)$5) ){ goto $label$6 }
	$22 = $21
	$7 = ($21 + [-24])
	$21 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$22 == (int_32)$23) ){ goto $label$9 }
	$23 = *(($22 + [-24]))
	CALL eosio_assert(((int_32)*($23 + [52]) == (int_32)($26 + [104])), [1536])
	goto $label$8 
	
.LABEL $label$9
	$23 = [0]
	$21 = CALL db_find_i64(*($26 + [104]), *($14), (int_64)-4921685625297436672, $5)
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$8 }
	$23 = CALL $167(($26 + [104]), $21)
	CALL eosio_assert(((int_32)*($23 + [52]) == (int_32)($26 + [104])), [1536])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$23 != (int_32)[0]), [2016])
	$21 = *($23 + [44])
	if ( $24 ){ goto $label$12 }
	$24 = $21
	if ( ($21 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$25 = (((int_32)$24 == (int_32)$21) + $25)
	goto $label$10 
	
.LABEL $label$11
	$24 = [0]
	
.LABEL $label$10
	$8 = *($11 + [12])
	$5 = *($11 + [7])
	$15 = (($26 + [64]) + [24])
	$9 = *($15)
	$16 = (($26 + [64]) + [28])
	$22 = *($16)
	if ( ((int_32)$22 == (int_32)$9) ){ goto $label$13 }
	$21 = ($22 + [-24])
	$6 = ([0] - $9)
	
.LOOP $label$14:
	if ( ((int_64)*(*($21)) == (int_64)$5) ){ goto $label$13 }
	$22 = $21
	$7 = ($21 + [-24])
	$21 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	$7 = ($11 + [7])
	if ( ((int_32)$22 == (int_32)$9) ){ goto $label$16 }
	$21 = *(($22 + [-24]))
	CALL eosio_assert(((int_32)*($21 + [44]) == (int_32)($26 + [64])), [1536])
	goto $label$15 
	
.LABEL $label$16
	$21 = [0]
	$22 = CALL db_find_i64(*($26 + [64]), *((($26 + [64]) + [8])), (int_64)-4921685318744145920, $5)
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$15 }
	$21 = CALL $168(($26 + [64]), $22)
	CALL eosio_assert(((int_32)*($21 + [44]) == (int_32)($26 + [64])), [1536])
	
.LABEL $label$15
	CALL eosio_assert(((int_32)$21 != (int_32)[0]), [2048])
	$5 = *($7)
	$9 = *($15)
	$22 = *($16)
	if ( ((int_32)$22 == (int_32)$9) ){ goto $label$17 }
	$21 = ($22 + [-24])
	$6 = ([0] - $9)
	
.LOOP $label$18:
	if ( ((int_64)*(*($21)) == (int_64)$5) ){ goto $label$17 }
	$22 = $21
	$7 = ($21 + [-24])
	$21 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$18 }
	
.LABEL $label$17
	$7 = uint_32($8 >> [24])
	$6 = ($11 + [4])
	$21 = ($8 & [255])
	if ( ((int_32)$22 == (int_32)$9) ){ goto $label$20 }
	$22 = *(($22 + [-24]))
	CALL eosio_assert(((int_32)*($22 + [44]) == (int_32)($26 + [64])), [1536])
	goto $label$19 
	
.LABEL $label$20
	$22 = CALL $168(($26 + [64]), CALL $fimport$16(*($26 + [64]), *((($26 + [64]) + [8])), (int_64)-4921685318744145920, $5))
	CALL eosio_assert(((int_32)*($22 + [44]) == (int_32)($26 + [64])), [1536])
	
.LABEL $label$19
	$11 = ($7 & [2])
	$22 = *($22 + [10])
	*((($26 + [44]) + ($19 << [2]))) = $22
	*((($26 + [56]) + ($19 << [1]))) = *($6)
	$21 = ($22 + [100])
	$6 = *($23 + [24])
	$6 = ((uint_32)((int_32)((*($23 + [18]) - $6) + ((uint_32)(((int_32)( $21 ? [100] : ($21 <= [100]) ) * (int_32)$6) << [1]) / (uint_32)[100])) * (int_32)$21) / (uint_32)[100])
	$22 = (*($23 + [14]) + [-1])
	if ( ((uint_32)$22 > (uint_32)[3]) ){ goto $label$28 }
	goto $label$29 
	
.LABEL $label$29
	*($1) = (*($1) + $6)
	$7 = ($7 & [4])
	if ( $11 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$28
	CALL eosio_assert([0], [1984])
	$7 = ($7 & [4])
	if ( $11 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$27
	*(($22 = ($1 + [4]))) = (*($22) + $6)
	$7 = ($7 & [4])
	if ( $11 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	*(($22 = ($1 + [8]))) = (*($22) + $6)
	$7 = ($7 & [4])
	if ( $11 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	*($17) = (*($17) + $6)
	$7 = ($7 & [4])
	if ( ($11 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$6 = (uint_32($8 >> [8]) & [255])
	$22 = *($23 + [26])
	$6 = ((uint_32)((int_32)((*($23 + [20]) - $22) + ((uint_32)(((int_32)( $6 ? [100] : ($6 <= [100]) ) * (int_32)$22) << [1]) / (uint_32)[100])) * (int_32)$21) / (uint_32)[100])
	$22 = (*($23 + [15]) + [-1])
	if ( ((uint_32)$22 > (uint_32)[3]) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$34
	*($1) = (*($1) + $6)
	if ( $7 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$33
	CALL eosio_assert([0], [1984])
	if ( $7 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$32
	*(($22 = ($1 + [4]))) = (*($22) + $6)
	if ( $7 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$31
	*(($22 = ($1 + [8]))) = (*($22) + $6)
	if ( $7 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$30
	*($17) = (*($17) + $6)
	
.LABEL $label$23
	if ( ($7 == 0) ){ goto $label$21 }
	
.LABEL $label$22
	$22 = (uint_32($8 >> [16]) & [255])
	$7 = *($23 + [28])
	$7 = ((uint_32)((int_32)((*($23 + [22]) - $7) + ((uint_32)(((int_32)( $22 ? [100] : ($22 <= [100]) ) * (int_32)$7) << [1]) / (uint_32)[100])) * (int_32)$21) / (uint_32)[100])
	$21 = (*($23 + [16]) + [-1])
	if ( ((uint_32)$21 > (uint_32)[3]) ){ goto $label$38 }
	goto $label$39 
	
.LABEL $label$39
	*($1) = (*($1) + $7)
	goto $label$21 
	
.LABEL $label$38
	CALL eosio_assert([0], [1984])
	goto $label$21 
	
.LABEL $label$37
	*(($21 = ($1 + [4]))) = (*($21) + $7)
	goto $label$21 
	
.LABEL $label$36
	*(($21 = ($1 + [8]))) = (*($21) + $7)
	goto $label$21 
	
.LABEL $label$35
	*($17) = (*($17) + $7)
	
.LABEL $label$21
	$19 = ($19 + [1])
	$7 = *(($4 + [4]))
	$21 = *($4)
	
.LABEL $label$5
	$20 = ($20 + [1])
	if ( ($20 <= ((int_32)($7 - $21) / (int_32)[20])) ){ goto $label$4 }
	if ( ((int_32)$25 != (int_32)[3]) ){ goto $label$3 }
	if ( ((int_32)$24 <= (int_32)[0]) ){ goto $label$3 }
	*(($26 + [32])) = [0]
	*($26 + [16]) = (int_64)-1
	*($26 + [24]) = (int_64)0
	$5 = *(($0 + [8]))
	*($26) = $5
	*($26 + [8]) = $5
	$21 = CALL db_find_i64($5, $5, (int_64)-4921685207192436736, (CASTING int_64)(int_32 $24))
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$44 }
	$7 = CALL $169($26, $21)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$26), [1536])
	$14 = ($7 + [36])
	$10 = ($7 + [34])
	$13 = ($7 + [30])
	$17 = ($7 + [28])
	$15 = ($7 + [24])
	$25 = ($7 + [22])
	$24 = ($7 + [18])
	$4 = ($7 + [16])
	$19 = ($7 + [12])
	$8 = ($7 + [10])
	$21 = ($26 + [44])
	$9 = ($7 + [8])
	$16 = ($7 + [14])
	$12 = ($7 + [20])
	$0 = ($7 + [26])
	$18 = ($7 + [32])
	$7 = [0]
	
.LOOP $label$45:
	$22 = $8
	$6 = $19
	$20 = *((($26 + [56]) + $7))
	if ( ((int_32)*($9) == (int_32)$20) ){ goto $label$47 }
	$22 = $4
	$6 = $24
	if ( ((int_32)*($16) == (int_32)$20) ){ goto $label$47 }
	$22 = $25
	$6 = $15
	if ( ((int_32)*($12) == (int_32)$20) ){ goto $label$47 }
	$22 = $17
	$6 = $13
	if ( ((int_32)*($0) == (int_32)$20) ){ goto $label$47 }
	$22 = $10
	$6 = $14
	if ( ((int_32)*($18) != (int_32)$20) ){ goto $label$46 }
	
.LABEL $label$47
	$11 = *($6)
	$23 = *($22)
	
.LABEL $label$46
	$22 = ($23 & [255])
	CALL eosio_assert(((int_32)$22 != (int_32)[0]), [2080])
	$6 = ((uint_32)((int_32)(*($21) + [100]) * (int_32)($11 & [65535])) / (uint_32)[100])
	$22 = ($22 + [-1])
	if ( ((uint_32)$22 > (uint_32)[3]) ){ goto $label$52 }
	goto $label$53 
	
.LABEL $label$53
	*($1) = (*($1) + $6)
	goto $label$48 
	
.LABEL $label$52
	CALL eosio_assert([0], [1984])
	goto $label$48 
	
.LABEL $label$51
	*(($22 = ($1 + [4]))) = (*($22) + $6)
	goto $label$48 
	
.LABEL $label$50
	*(($22 = ($1 + [8]))) = (*($22) + $6)
	goto $label$48 
	
.LABEL $label$49
	*(($22 = ($1 + [12]))) = (*($22) + $6)
	
.LABEL $label$48
	$21 = ($21 + [4])
	$7 = ($7 + [2])
	if ( ((int_32)$7 != (int_32)[6]) ){ goto $label$45 }
	$22 = *($26 + [24])
	if ( ($22 == 0) ){ goto $label$3 }
	$6 = ($26 + [28])
	$21 = *($6)
	if ( ((int_32)$21 == (int_32)$22) ){ goto $label$43 }
	
.LOOP $label$54:
	$21 = ($21 + [-24])
	$7 = *($21)
	*($21) = [0]
	if ( ($7 == 0) ){ goto $label$55 }
	CALL $956($7)
	
.LABEL $label$55
	if ( ((int_32)$22 != (int_32)$21) ){ goto $label$54 }
	$21 = *(($26 + [24]))
	goto $label$42 
	
.LABEL $label$44
	$22 = *($26 + [24])
	if ( ($22 == 0) ){ goto $label$3 }
	$6 = ($26 + [28])
	$21 = *($6)
	if ( ((int_32)$21 == (int_32)$22) ){ goto $label$41 }
	
.LOOP $label$56:
	$21 = ($21 + [-24])
	$7 = *($21)
	*($21) = [0]
	if ( ($7 == 0) ){ goto $label$57 }
	CALL $956($7)
	
.LABEL $label$57
	if ( ((int_32)$22 != (int_32)$21) ){ goto $label$56 }
	$21 = *(($26 + [24]))
	goto $label$40 
	
.LABEL $label$43
	$21 = $22
	
.LABEL $label$42
	*($6) = $22
	CALL $956($21)
	$22 = *($26 + [88])
	if ( $22 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$41
	$21 = $22
	
.LABEL $label$40
	*($6) = $22
	CALL $956($21)
	$22 = *($26 + [88])
	if ( $22 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$22 = *($26 + [88])
	if ( ($22 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($26 + [92])
	$21 = *($6)
	if ( ((int_32)$21 == (int_32)$22) ){ goto $label$59 }
	
.LOOP $label$60:
	$21 = ($21 + [-24])
	$7 = *($21)
	*($21) = [0]
	if ( ($7 == 0) ){ goto $label$61 }
	CALL $956($7)
	
.LABEL $label$61
	if ( ((int_32)$22 != (int_32)$21) ){ goto $label$60 }
	$21 = *(($26 + [88]))
	goto $label$58 
	
.LABEL $label$59
	$21 = $22
	
.LABEL $label$58
	*($6) = $22
	CALL $956($21)
	
.LABEL $label$1
	$22 = *($26 + [128])
	if ( ($22 == 0) ){ goto $label$62 }
	$6 = ($26 + [132])
	$21 = *($6)
	if ( ((int_32)$21 == (int_32)$22) ){ goto $label$64 }
	
.LOOP $label$65:
	$21 = ($21 + [-24])
	$7 = *($21)
	*($21) = [0]
	if ( ($7 == 0) ){ goto $label$66 }
	CALL $956($7)
	
.LABEL $label$66
	if ( ((int_32)$22 != (int_32)$21) ){ goto $label$65 }
	$21 = *(($26 + [128]))
	goto $label$63 
	
.LABEL $label$64
	$21 = $22
	
.LABEL $label$63
	*($6) = $22
	CALL $956($21)
	
.LABEL $label$62
	*([0] + [4]) = ($26 + [144])
	$22
	$22
	$21
	$22
}

void .FUNC $155 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [80])
	*([0] + [4]) = $17
	*((($17 + [40]) + [32])) = [0]
	*($17 + [56]) = (int_64)-1
	*($17 + [64]) = (int_64)0
	$5 = *($0 + [8])
	*($17 + [40]) = $5
	*($17 + [48]) = $5
	*(($17 + [32])) = [0]
	*($17 + [8]) = $5
	*($17) = $5
	*($17 + [16]) = (int_64)-1
	*($17 + [24]) = (int_64)0
	$0 = CALL db_find_i64($5, $5, (int_64)-6146850541407305728, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $159($17, $0)
	CALL eosio_assert(((int_32)*($4 + [20]) == (int_32)$17), [1536])
	$0 = *($4 + [8])
	$9 = ($4 + [12])
	if ( ((int_32)*($9) == (int_32)$0) ){ goto $label$1 }
	$11 = ($17 + [64])
	$12 = ($17 + [68])
	$13 = (($17 + [40]) + [8])
	$14 = ($1 + [4])
	$15 = [0]
	
.LOOP $label$2:
	$10 = ($0 + ((int_32)$15 * (int_32)[12]))
	if ( ((int_64)*($10 + [9]) != (int_64)$3) ){ goto $label$3 }
	$5 = *($10)
	$6 = *($11)
	$16 = *($12)
	if ( ((int_32)$16 == (int_32)$6) ){ goto $label$4 }
	$0 = ($16 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$5:
	if ( ((int_64)*(*($0)) == (int_64)$5) ){ goto $label$4 }
	$16 = $0
	$8 = ($0 + [-24])
	$0 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ((int_32)$16 == (int_32)$6) ){ goto $label$7 }
	$0 = *(($16 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [28]) == (int_32)($17 + [40])), [1536])
	goto $label$6 
	
.LABEL $label$7
	$0 = [0]
	$8 = CALL db_find_i64(*($17 + [40]), *($13), (int_64)-4803775097846366208, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$0 = CALL $160(($17 + [40]), $8)
	CALL eosio_assert(((int_32)*($0 + [28]) == (int_32)($17 + [40])), [1536])
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [1952])
	$8 = (*($10 + [8]) + [-1])
	$16 = (*($0 + [9]) + [-1])
	if ( ((uint_32)$16 > (uint_32)[3]) ){ goto $label$14 }
	$7 = (((int_32)*($0 + [18]) * (int_32)$8) + *($0 + [12]))
	goto $label$15 
	
.LABEL $label$15
	*($1) = (*($1) + $7)
	$16 = *($0 + [10])
	if ( $16 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$14
	CALL eosio_assert([0], [1984])
	$16 = *($0 + [10])
	if ( $16 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$13
	*($14) = (*($14) + $7)
	$16 = *($0 + [10])
	if ( $16 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	*(($16 = ($1 + [8]))) = (*($16) + $7)
	$16 = *($0 + [10])
	if ( $16 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	*(($16 = ($1 + [12]))) = (*($16) + $7)
	$16 = *($0 + [10])
	if ( ($16 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$16 = ($16 + [-1])
	if ( ((uint_32)$16 > (uint_32)[3]) ){ goto $label$19 }
	$7 = (((int_32)*($0 + [20]) * (int_32)$8) + *($0 + [14]))
	goto $label$20 
	
.LABEL $label$20
	*($1) = (*($1) + $7)
	$16 = *($0 + [11])
	if ( $16 ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$19
	CALL eosio_assert([0], [1984])
	$16 = *($0 + [11])
	if ( $16 ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$18
	*($14) = (*($14) + $7)
	$16 = *($0 + [11])
	if ( $16 ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$17
	*(($16 = ($1 + [8]))) = (*($16) + $7)
	$16 = *($0 + [11])
	if ( $16 ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$16
	*(($16 = ($1 + [12]))) = (*($16) + $7)
	
.LABEL $label$9
	$16 = *($0 + [11])
	if ( ($16 == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$16 = ($16 + [-1])
	if ( ((uint_32)$16 > (uint_32)[3]) ){ goto $label$24 }
	$0 = (((int_32)*($0 + [22]) * (int_32)$8) + *($0 + [16]))
	goto $label$25 
	
.LABEL $label$25
	*($1) = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$24
	CALL eosio_assert([0], [1984])
	goto $label$3 
	
.LABEL $label$23
	*($14) = (*($14) + $0)
	goto $label$3 
	
.LABEL $label$22
	*(($8 = ($1 + [8]))) = (*($8) + $0)
	goto $label$3 
	
.LABEL $label$21
	*(($8 = ($1 + [12]))) = (*($8) + $0)
	
.LABEL $label$3
	$0 = *(($4 + [8]))
	$15 = ($15 + [1])
	if ( ($15 <= ((int_32)(*($9) - $0) / (int_32)[12])) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = *($17 + [24])
	if ( ($7 == 0) ){ goto $label$26 }
	$15 = ($17 + [28])
	$0 = *($15)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$28 }
	
.LOOP $label$29:
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$30 }
	$16 = *($8 + [8])
	if ( ($16 == 0) ){ goto $label$31 }
	*(($8 + [12])) = $16
	CALL $956($16)
	
.LABEL $label$31
	CALL $956($8)
	
.LABEL $label$30
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$29 }
	$0 = *(($17 + [24]))
	goto $label$27 
	
.LABEL $label$28
	$0 = $7
	
.LABEL $label$27
	*($15) = $7
	CALL $956($0)
	
.LABEL $label$26
	$16 = *($17 + [64])
	if ( ($16 == 0) ){ goto $label$32 }
	$7 = ($17 + [68])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$16) ){ goto $label$34 }
	
.LOOP $label$35:
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$36 }
	CALL $956($8)
	
.LABEL $label$36
	if ( ((int_32)$16 != (int_32)$0) ){ goto $label$35 }
	$0 = *(($17 + [64]))
	goto $label$33 
	
.LABEL $label$34
	$0 = $16
	
.LABEL $label$33
	*($7) = $16
	CALL $956($0)
	
.LABEL $label$32
	*([0] + [4]) = ($17 + [80])
	$16
	$16
	$16
}

int_32 .FUNC $404 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [6]))
	$5 = *($0 + [4])
	$4 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [8]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $5) > (int_32)[0]), [1920])
	CALL memcpy(*($7), ($8 + [8]), [1])
	$5 = (*($7) + [1])
	*($7) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$2 = ($8 + [20])
	$3 = ($8 + [44])
	
.LOOP $label$3:
	*($8) = $0
	*($8 + [8]) = $7
	*((($8 + [8]) + [8])) = ($7 + [16])
	*($2) = ($7 + [20])
	*((($8 + [8]) + [16])) = ($7 + [24])
	*((($8 + [8]) + [20])) = ($7 + [28])
	*((($8 + [8]) + [24])) = ($7 + [32])
	*($8 + [12]) = ($7 + [8])
	*((($8 + [8]) + [28])) = ($7 + [33])
	*((($8 + [8]) + [32])) = ($7 + [40])
	*($3) = ($7 + [56])
	CALL $407(($8 + [8]), $8)
	$7 = ($7 + [64])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [48])
	return $0
}

int_32 .FUNC $405 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[56]))
	$5 = *($0 + [4])
	$4 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [8]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $5) > (int_32)[0]), [1920])
	CALL memcpy(*($7), ($8 + [8]), [1])
	$5 = (*($7) + [1])
	*($7) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$2 = ($8 + [20])
	
.LOOP $label$3:
	*($8) = $0
	*($8 + [8]) = $7
	*((($8 + [8]) + [8])) = ($7 + [16])
	*($2) = ($7 + [20])
	*((($8 + [8]) + [16])) = ($7 + [24])
	*((($8 + [8]) + [20])) = ($7 + [28])
	*((($8 + [8]) + [24])) = ($7 + [32])
	*($8 + [12]) = ($7 + [8])
	*((($8 + [8]) + [28])) = ($7 + [33])
	*((($8 + [8]) + [32])) = ($7 + [40])
	CALL $406(($8 + [8]), $8)
	$7 = ($7 + [56])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [48])
	return $0
}

void .FUNC $158 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $159 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $955([32]))) = (int_64)0
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [16]) = [0]
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [1632])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $163(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $164(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $956($7)
	
.LABEL $label$10
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $400 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $955([104])
	CALL $409($3)
	*($3 + [92]) = $1
	CALL $410(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [96])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $411(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [80])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($1 + [84])) = $3
	CALL $956($3)
	
.LABEL $label$4
	$3 = *($1 + [68])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($1 + [72])) = $3
	CALL $956($3)
	
.LABEL $label$5
	CALL $956($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $401 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [92]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	CALL $402($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$6 = *($1 + [68])
	$5 = *(($1 + [72]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [6]))
	$3 = [66]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = ((((int_32)uint_32(($7 + [-64]) >> [6]) * (int_32)[42]) + $3) + [42])
	
.LABEL $label$2
	$6 = *($1 + [80])
	$5 = *(($1 + [84]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[56]))
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$3 = ((((int_32)((uint_32)($7 + [-56]) / (uint_32)[56]) * (int_32)[41]) + $3) + [41])
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$9 = CALL malloc($3)
	goto $label$5 
	
.LABEL $label$6
	$9 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$5
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $3)
	CALL $403($10, $1)
	CALL db_update_i64(*($1 + [96]), $2, $9, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL free($9)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $402 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = *($1 + [80])
	$6 = *(($1 + [84]))
	if ( (((int_32)($6 - $4) / (int_32)[56]) <= [5]) ){ goto $label$1 }
	$2 = ($4 + [56])
	$6 = ($6 - $2)
	$3 = ((int_32)$6 / (int_32)[56])
	if ( ($6 == 0) ){ goto $label$2 }
	CALL memmove($4, $2, $6)
	
.LABEL $label$2
	*(($1 + [84])) = ($4 + ((int_32)$3 * (int_32)[56]))
	
.LABEL $label$1
	$4 = *($0)
	$5 = *(($4 + [48]))
	if ( ((int_32)(*($4 + [16]) & [254]) != (int_32)[2]) ){ goto $label$4 }
	CALL eosio_assert(((int_64)$5 == (int_64)*(($1 + [48]))), [4096])
	$5 = ((int_64)*($1 + [40]) + (int_64)*(($4 + [40])))
	*($1 + [40]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [4176])
	*($1 + [64]) = (*($1 + [64]) + [1])
	goto $label$3 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)$5 == (int_64)*(($1 + [32]))), [4096])
	$5 = ((int_64)*($1 + [24]) + (int_64)*(($4 + [40])))
	*($1 + [24]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [4144])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [4176])
	*($1 + [60]) = (*($1 + [60]) + [1])
	
.LABEL $label$3
	$4 = *($0)
	$0 = ($1 + [84])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)*(($1 + [88]))) ){ goto $label$5 }
	CALL memcpy($6, $4, [56])
	*($0) = (*($0) + [56])
	return 
	
.LABEL $label$5
	CALL $408(($1 + [80]), $4)
}

int_32 .FUNC $403 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $405(CALL $404($0, ($1 + [68])), ($1 + [80]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [60]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [2])
	return *($0 + [4]) = (*($0 + [4]) + [2])
}

void .FUNC $343 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	$12 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$5 = ($1 + [12])
	$4 = *($1)
	$10 = *($1 + [12])
	$8 = ($1 + [16])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$1 }
	$7 = ((int_32)($9 - $10) / (int_32)[20])
	$6 = *(*($3))
	$9 = [0]
	
.LOOP $label$3:
	if ( ((int_32)*($10) == (int_32)$6) ){ goto $label$2 }
	$10 = ($10 + [20])
	$9 = ($9 + [1])
	if ( ($9 <= $7) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( (*(*($3 + [4])) == 0) ){ goto $label$4 }
	*(($10 = ($10 + [7]))) = (*($10) + [1])
	goto $label$1 
	
.LABEL $label$4
	*(($10 = ($10 + [8]))) = (*($10) - *(*($3 + [8])))
	
.LABEL $label$1
	CALL eosio_assert([1], [1856])
	$6 = *($5)
	$9 = *($8)
	$7 = ($9 - $6)
	$11 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[20]))
	$10 = [29]
	
.LOOP $label$5:
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$7 }
	$9 = (((int_32)((uint_32)($7 + [-20]) / (uint_32)[20]) * (int_32)[17]) + $10)
	goto $label$6 
	
.LABEL $label$7
	$9 = ($10 + [-17])
	
.LABEL $label$6
	if ( ($9 <= [513]) ){ goto $label$9 }
	$10 = CALL malloc($9)
	goto $label$8 
	
.LABEL $label$9
	$10 = ($13 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$8
	*($12) = $10
	$6 = ($10 + $9)
	*($12 + [8]) = $6
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [1920])
	CALL memcpy($10, $1, [8])
	$7 = ($10 + [8])
	CALL eosio_assert(((int_32)($6 - $7) > (int_32)[3]), [1920])
	CALL memcpy($7, ($1 + [8]), [4])
	*($12 + [4]) = ($10 + [12])
	CALL $180($12, $5)
	CALL db_update_i64(*($1 + [28]), $2, $10, $9)
	if ( ($9 <= [513]) ){ goto $label$10 }
	CALL free($10)
	
.LABEL $label$10
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $878 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([72]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32]) = [0]
	*($3 + [36]) = [0]
	*($3 + [40]) = [0]
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = $1
	CALL $881(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [60])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $870(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$4 }
	CALL $956(*(($3 + [28])))
	
.LABEL $label$4
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL $956(*(($3 + [16])))
	
.LABEL $label$5
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $347 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$15 = *($0 + [4])
	if ( ((int_32)*($15 + [4]) == (int_32)*($15)) ){ goto $label$1 }
	$8 = ($1 + [16])
	$16 = *($8)
	$15 = *($0 + [8])
	$9 = ($0 + [4])
	$10 = ($1 + [12])
	$13 = ($0 + [8])
	$14 = [0]
	
.LOOP $label$2:
	*($15) = [0]
	$3 = *($10)
	$15 = ($16 - $3)
	if ( ((int_32)$15 < (int_32)[20]) ){ goto $label$3 }
	$2 = *((*(*($9)) + ($14 << [2])))
	$15 = ((uint_32)$15 / (uint_32)[20])
	$1 = [0]
	
.LOOP $label$4:
	$4 = ($15 + [-1])
	
.LOOP $label$6:
	$5 = ($4 - $1)
	$15 = (((int_32)$5 / (int_32)[2]) + $1)
	$11 = ((int_32)$15 * (int_32)[20])
	$12 = ($3 + $11)
	$6 = *($12)
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	$1 = ($15 + [1])
	if ( ((int_32)$4 > (int_32)$15) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$2 >= (uint_32)$6) ){ goto $label$7 }
	if ( ((int_32)$5 >= (int_32)[2]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$7
	CALL eosio_assert((*($12 + [16]) == 0), [3104])
	CALL eosio_assert((*($12 + [6]) == 0), [3136])
	$7 = *($12 + [4])
	$6 = *($2 + [24])
	$2 = *(($0 + [12]))
	$4 = *(($2 + [28]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$8 }
	$15 = ($4 + [-24])
	$3 = ([0] - $6)
	
.LOOP $label$9:
	if ( ((int_64)*(*($15)) == (int_64)$7) ){ goto $label$8 }
	$4 = $15
	$1 = ($15 + [-24])
	$15 = $1
	if ( ((int_32)($1 + $3) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$11 }
	$15 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [52]) == (int_32)$2), [1536])
	goto $label$10 
	
.LABEL $label$11
	$15 = [0]
	$1 = CALL db_find_i64(*($2), *($2 + [8]), (int_64)-4921685625297436672, $7)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$10 }
	$15 = CALL $167($2, $1)
	CALL eosio_assert(((int_32)*($15 + [52]) == (int_32)$2), [1536])
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [3168])
	$4 = (*($12 + [8]) + [1])
	*(($1 = *(($0 + [16])))) = (((int_32)( $4 ? [16] : ($4 <= [16]) ) * (int_32)*($15 + [12])) + *($1))
	$15 = (*($10) + $11)
	$3 = ($15 + [20])
	$1 = (*($8) - $3)
	$4 = ((int_32)$1 / (int_32)[20])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL memmove($15, $3, $1)
	
.LABEL $label$12
	$16 = ($15 + ((int_32)$4 * (int_32)[20]))
	*($8) = $16
	*(*($13)) = [1]
	
.LABEL $label$3
	$15 = *($13)
	if ( (*($15) == 0) ){ goto $label$1 }
	$1 = *($9)
	$14 = ($14 + [1])
	if ( ($14 <= int_32((*($1 + [4]) - *($1)) >> [2])) ){ goto $label$2 }
	
.LABEL $label$1
}

void .FUNC $346 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	CALL $347($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$5 = ($1 + [12])
	$6 = *($1 + [12])
	$9 = *(($1 + [16]))
	$7 = ($9 - $6)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[20]))
	$3 = [29]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$3 }
	$9 = (((int_32)((uint_32)($7 + [-20]) / (uint_32)[20]) * (int_32)[17]) + $3)
	goto $label$2 
	
.LABEL $label$3
	$9 = ($3 + [-17])
	
.LABEL $label$2
	if ( ($9 <= [513]) ){ goto $label$5 }
	$3 = CALL malloc($9)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($11 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$4
	*($10) = $3
	$11 = ($3 + $9)
	*($10 + [8]) = $11
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [1920])
	CALL memcpy($3, $1, [8])
	$6 = ($3 + [8])
	CALL eosio_assert(((int_32)($11 - $6) > (int_32)[3]), [1920])
	CALL memcpy($6, ($1 + [8]), [4])
	*($10 + [4]) = ($3 + [12])
	CALL $180($10, $5)
	CALL db_update_i64(*($1 + [28]), $2, $3, $9)
	if ( ($9 <= [513]) ){ goto $label$6 }
	CALL free($3)
	
.LABEL $label$6
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $345 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	$12 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$5 = ($1 + [12])
	$4 = *($1)
	$10 = *($1 + [12])
	$8 = ($1 + [16])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$1 }
	$7 = ((int_32)($9 - $10) / (int_32)[20])
	$6 = *(*($3))
	$9 = [0]
	
.LOOP $label$3:
	if ( ((int_32)*($10) == (int_32)$6) ){ goto $label$2 }
	$10 = ($10 + [20])
	$9 = ($9 + [1])
	if ( ($9 <= $7) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = (*($10) + *(*($3 + [4])))
	*(($10 = ($10 + [8]))) = ( $10 ? [127] : ((int_32)$10 < (int_32)[128]) )
	
.LABEL $label$1
	CALL eosio_assert([1], [1856])
	$6 = *($5)
	$9 = *($8)
	$7 = ($9 - $6)
	$11 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[20]))
	$10 = [29]
	
.LOOP $label$4:
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$6 }
	$9 = (((int_32)((uint_32)($7 + [-20]) / (uint_32)[20]) * (int_32)[17]) + $10)
	goto $label$5 
	
.LABEL $label$6
	$9 = ($10 + [-17])
	
.LABEL $label$5
	if ( ($9 <= [513]) ){ goto $label$8 }
	$10 = CALL malloc($9)
	goto $label$7 
	
.LABEL $label$8
	$10 = ($13 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$7
	*($12) = $10
	$6 = ($10 + $9)
	*($12 + [8]) = $6
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [1920])
	CALL memcpy($10, $1, [8])
	$7 = ($10 + [8])
	CALL eosio_assert(((int_32)($6 - $7) > (int_32)[3]), [1920])
	CALL memcpy($7, ($1 + [8]), [4])
	*($12 + [4]) = ($10 + [12])
	CALL $180($12, $5)
	CALL db_update_i64(*($1 + [28]), $2, $10, $9)
	if ( ($9 <= [513]) ){ goto $label$9 }
	CALL free($10)
	
.LABEL $label$9
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($12 + [16])
}

int_32 .FUNC $344 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	*(($9 + [72])) = [0]
	*($9 + [56]) = (int_64)-1
	*($9 + [64]) = (int_64)0
	$7 = *($0 + [8])
	*($9 + [40]) = $7
	*($9 + [48]) = $7
	$3 = *(($0 + [40]))
	$5 = *(($0 + [44]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$1 }
	$8 = ($5 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$1 }
	$5 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [16])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$4 }
	$8 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [1536])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$5 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-4345224872994013184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $271($6, $5)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [1536])
	
.LABEL $label$3
	$5 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($5, [2144])
	*($9 + [36]) = [0]
	*($9 + [32]) = [0]
	$1 = *(($0 + [8]))
	*($9 + [12]) = $2
	*($9 + [8]) = $0
	*($9 + [16]) = ($9 + [32])
	*($9 + [20]) = ($9 + [40])
	*($9 + [24]) = ($9 + [36])
	CALL eosio_assert($5, [1696])
	CALL $346($6, $8, $1, ($9 + [8]))
	CALL eosio_assert(((int_32)*($9 + [32]) != (int_32)[0]), [2144])
	$4 = *($9 + [36])
	$5 = *($9 + [64])
	if ( ($5 == 0) ){ goto $label$5 }
	$0 = ($9 + [68])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$9 }
	CALL $956($6)
	
.LABEL $label$9
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$8 }
	$8 = *(($9 + [64]))
	goto $label$6 
	
.LABEL $label$7
	$8 = $5
	
.LABEL $label$6
	*($0) = $5
	CALL $956($8)
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [80])
	return $4
}

void .FUNC $89 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	*(($0 + [148])) = $5
	$0 = CALL $703($0, $2)
	CALL void $0((int_32 $1), (int_64 $2), (int_32 $3), (int_32 $4), (int_32 $5), (int_32 [0]), (int_32 *(*($0))))
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($8 + [16]) = [0]
	*($8 + [8]) = (int_64)0
	*($8 + [20]) = [0]
	*($8 + [22]) = [0]
	*($8 + [24]) = [0]
	*($8 + [28]) = [0]
	*($8 + [36]) = $1
	*($8 + [32]) = $1
	*($8 + [40]) = ($1 + $3)
	*($8 + [48]) = ($8 + [32])
	*($8 + [56]) = ($8 + [8])
	CALL $706(($8 + [56]), ($8 + [48]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($8 + [28]))
	$9 = *(($8 + [24]))
	$0 = *(($8 + [22]))
	$6 = *(($8 + [20]))
	$5 = *(($8 + [16]))
	$4 = *($8 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$7 = *((*($1) + $7))
	
.LABEL $label$5
	CALL void $1((int_32 $4), (int_64 $5), (int_32 ($6 & [65535])), (int_32 ($0 & [255])), (int_32 $9), (int_32 $3), (int_32 $7))
	*([0] + [4]) = ($8 + [64])
	return [1]
}

void .FUNC $87 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	CALL $446(($0 + [8]), $1, $5, $6)
	$7 = *(($0 + [368]))
	$10 = *(($0 + [372]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$1 }
	$5 = ($10 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$10 = $5
	$9 = ($5 + [-24])
	$5 = $9
	if ( ((int_32)($9 + $8) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$9 = ($0 + [344])
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$4 }
	$5 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)$9), [1536])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$10 = CALL db_find_i64(*(($0 + [344])), *(($0 + [352])), (int_64)-8872998483271876608, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $144($9, $10)
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)$9), [1536])
	
.LABEL $label$3
	$5 = ( ($5 + [8]) ? ($0 + [404]) : $5 )
	CALL eosio_assert(((int_32)*($5 + [4]) != (int_32)*($5)), [7584])
	$5 = CALL $703($0, $2)
	CALL void $5((int_32 $1), (int_64 $2), (int_32 $3), (int_32 $4), (int_32 $6), (int_32 [1]), (int_32 *(*($5))))
}

void .FUNC $86 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	CALL $446(($0 + [8]), $1, $3, $4)
	CALL $707(($0 + [768]), $1, $2)
}

void .FUNC $85 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL $446(($0 + [8]), $1, $4, $5)
	*(($4 = (($7 + [16]) + [8]))) = *(($3 + [8]))
	$6 = *($3)
	*(($7 + [12])) = *((($7 + [16]) + [12]))
	*(($7 + [8])) = *($4)
	*($7 + [16]) = $6
	*($7 + [4]) = *($7 + [20])
	*($7) = *($7 + [16])
	CALL $711(($0 + [768]), $1, $2, $7)
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$6 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($7 + [16]) = (int_64)0
	*($7 + [8]) = (int_64)0
	*($7 + [24]) = (int_64)0
	*($7 + [36]) = $1
	*($7 + [32]) = $1
	*($7 + [40]) = ($1 + $3)
	*($7 + [48]) = ($7 + [32])
	*($7 + [56]) = ($7 + [8])
	CALL $725(($7 + [56]), ($7 + [48]))
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($7 + [28]))
	$8 = *(($7 + [24]))
	$5 = *(($7 + [16]))
	$4 = *($7 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	CALL void $1((int_32 $4), (int_64 $5), (int_64 $8), (int_32 $3), (int_32 $6))
	*([0] + [4]) = ($7 + [64])
	return [1]
}

void .FUNC $83 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	CALL $446(($0 + [8]), $1, $3, $4)
	CALL $726(($0 + [768]), $1, $2)
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [112])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = [0]
	$6 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $3)
	
.LABEL $label$1
	*((($10 + [24]) + [24])) = (int_64)1397703940
	*($10 + [32]) = (int_64)0
	*($10 + [24]) = (int_64)0
	*($10 + [40]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$7 = (int_64)5459781
	
.LOOP $label$5:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($8, [3776])
	*($10 + [56]) = (int_64)0
	*($10 + [100]) = $6
	*($10 + [96]) = $6
	*($10 + [104]) = ($6 + $3)
	*($10 + [64]) = ($10 + [96])
	*($10 + [80]) = ($10 + [24])
	CALL $729(($10 + [80]), ($10 + [64]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($6)
	
.LABEL $label$8
	$7 = *((($10 + [24]) + [8]))
	*(($10 + [76])) = *(($10 + [52]))
	*(($1 = (($10 + [64]) + [8]))) = *(($10 + [48]))
	$4 = *($10 + [24])
	*($10 + [64]) = *($10 + [40])
	*($10 + [68]) = *(($10 + [44]))
	$8 = *(($10 + [60]))
	$6 = *(($10 + [56]))
	*((($10 + [80]) + [8])) = *($1)
	*($10 + [80]) = *($10 + [64])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$9 = *((*($1) + $9))
	
.LABEL $label$9
	$5 = *((($10 + [80]) + [8]))
	*((($10 + [96]) + [8])) = $5
	*((($10 + [8]) + [8])) = $5
	$5 = *($10 + [80])
	*($10 + [96]) = $5
	*($10 + [8]) = $5
	CALL void $1((int_32 $4), (int_64 $7), (int_64 ($10 + [8])), (int_32 $6), (int_32 $8), (int_32 $9))
	*([0] + [4]) = ($10 + [112])
	return [1]
}

void .FUNC $81 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL $446(($0 + [8]), $1, $4, $5)
	*(($4 = (($7 + [16]) + [8]))) = *(($3 + [8]))
	$6 = *($3)
	*(($7 + [12])) = *((($7 + [16]) + [12]))
	*(($7 + [8])) = *($4)
	*($7 + [16]) = $6
	*($7 + [4]) = *($7 + [20])
	*($7) = *($7 + [16])
	CALL $730(($0 + [768]), $1, $2, $7)
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $80 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [7760]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	CALL $324(($0 + [272]), $1, $2, [0])
}

void .FUNC $707 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	CALL require_auth($1)
	$3 = *(($0 + [72]))
	$7 = *(($0 + [76]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [48])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*(($6 + [36])) == (int_32)$5), [1536])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-7948206717098000384, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $447($5, $7)
	CALL eosio_assert(((int_32)*($6 + [36]) == (int_32)$5), [1536])
	
.LABEL $label$3
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [4768])
	CALL $708(*($0 + [100]), $1, $2)
	CALL eosio_assert($7, [4912])
	CALL eosio_assert($7, [4208])
	$7 = CALL db_next_i64(*($6 + [40]), ($8 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	CALL $447($5, $7)
	
.LABEL $label$5
	CALL $449($5, $6)
	CALL $709($0, $1)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $706 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($3 + [8]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy(($3 + [12]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [1632])
	CALL memcpy(($3 + [14]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($3 + [16]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($3 + [20]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $705 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($2 + [8]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy(($2 + [12]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [1632])
	CALL memcpy(($2 + [14]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($2 + [16]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $704 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	$6 = [0]
	*(($7 + [40])) = [0]
	*($7 + [24]) = (int_64)-1
	$5 = *($1)
	*($7 + [8]) = $5
	*($7 + [16]) = $5
	*($7 + [32]) = (int_64)0
	$1 = [0]
	$4 = CALL db_lowerbound_i64($5, $5, (int_64)-4427730799613181952, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	CALL $477(($7 + [8]), $4)
	$1 = [1]
	
.LABEL $label$1
	CALL eosio_assert($1, [5600])
	*($7 + [4]) = [0]
	*($7) = ($7 + [8])
	$4 = *(CALL $365($7) + [4])
	CALL eosio_assert(((int_64)*($4) == (int_64)(CASTING uint_64)(uint_32 $2)), [7536])
	$1 = ($4 + [8])
	$5 = CALL publication_time()
	$5 = ((uint_64)$5 / (uint_64)(int_64)1000000)
	$3 = *($4 + [8])
	if ( ((uint_64)$3 > (uint_64)$5) ){ goto $label$2 }
	$6 = ((uint_64)((int_64)*(($4 + [16])) + (int_64)$3) > (uint_64)$5)
	
.LABEL $label$2
	CALL eosio_assert($6, [5616])
	*(($1 = CALL memcpy($0, $1, [96])) + [96 align=4]) = (int_64)0
	*(($1 + [104])) = [0]
	$6 = (*(($4 + [108])) - *(($4 + [104])))
	$2 = ((int_32)$6 / (int_32)[24])
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[178956971]) ){ goto $label$3 }
	$6 = CALL $955($6)
	*(($0 = ($1 + [100]))) = $6
	*(($1 + [104])) = ($6 + ((int_32)$2 * (int_32)[24]))
	*(($1 + [96])) = $6
	$4 = *(($4 + [108]))
	$1 = *(($4 + [104]))
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	CALL $972($6, $1)
	CALL $972(($6 + [12]), ($1 + [12]))
	$6 = (*($0) + [24])
	*($0) = $6
	$1 = ($1 + [24])
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$4
	CALL $367((($7 + [8]) + [24]))
	*([0] + [4]) = ($7 + [48])
	return (unreachable)
	
.LABEL $label$3
	CALL $971(($1 + [96]))
}

int_32 .FUNC $703 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $704($5, $0, $1)
	CALL eosio_assert(((int_32)*($5 + [72]) ^ (int_32)[1]), [7552])
	$2 = *($5 + [96])
	if ( ($2 == 0) ){ goto $label$2 }
	$4 = ($5 + [100])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	$3 = ([0] - $2)
	$1 = ($1 + [-24])
	
.LOOP $label$6:
	if ( ((*(($1 + [12])) & [1]) == 0) ){ goto $label$7 }
	CALL $956(*(($1 + [20])))
	
.LABEL $label$7
	if ( ((*($1) & [1]) == 0) ){ goto $label$8 }
	CALL $956(*(($1 + [8])))
	
.LABEL $label$8
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $3) != (int_32)[-24]) ){ goto $label$6 }
	$1 = *(($5 + [96]))
	goto $label$3 
	
.LABEL $label$5
	$1 = ($0 + [296])
	goto $label$1 
	
.LABEL $label$4
	$1 = $2
	
.LABEL $label$3
	*($4) = $2
	CALL $956($1)
	
.LABEL $label$2
	$1 = ($0 + [1176])
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
	return $1
}

void .FUNC $341 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	*(*(($7 = *($0 + [4])))) = [1]
	$2 = *($0)
	*($1) = *(*($7 + [4]))
	*($1 + [8]) = *(*($7))
	$7 = *($7)
	$4 = ($1 + [16])
	$9 = *($4)
	if ( ((int_32)$9 == (int_32)*(($1 + [20]))) ){ goto $label$2 }
	*($9) = *($7)
	*(($9 + [16])) = *(($7 + [16]))
	*(($9 + [8])) = *(($7 + [8]))
	$9 = (*($4) + [20])
	*($4) = $9
	$6 = ($1 + [12])
	goto $label$1 
	
.LABEL $label$2
	$6 = ($1 + [12])
	CALL $308($6, $7)
	$9 = *($4)
	
.LABEL $label$1
	$4 = ($1 + [8])
	$3 = *($6)
	$5 = ($9 - $3)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[20]))
	$7 = [29]
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$5 }
	$9 = (((int_32)((uint_32)($5 + [-20]) / (uint_32)[20]) * (int_32)[17]) + $7)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($7 + [-17])
	
.LABEL $label$4
	if ( ($9 <= [513]) ){ goto $label$7 }
	$7 = CALL malloc($9)
	goto $label$6 
	
.LABEL $label$7
	$7 = ($11 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$6
	*($10) = $7
	$11 = ($7 + $9)
	*($10 + [8]) = $11
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [1920])
	CALL memcpy($7, $1, [8])
	$3 = ($7 + [8])
	CALL eosio_assert(((int_32)($11 - $3) > (int_32)[3]), [1920])
	CALL memcpy($3, $4, [4])
	*($10 + [4]) = ($7 + [12])
	CALL $180($10, $6)
	$8 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)-4345224872994013184, *(*($0 + [8])), $8, $7, $9)
	if ( ($9 <= [513]) ){ goto $label$8 }
	CALL free($7)
	
.LABEL $label$8
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$9 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $701 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$5 = (*([0] + [4]) - [48])
	$10 = $5
	*([0] + [4]) = $5
	$2 = *($0)
	$8 = *($0 + [4])
	*($1) = *(*($8))
	$8 = *($8 + [4])
	$6 = ($1 + [20])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)*(($1 + [24]))) ){ goto $label$2 }
	*($4) = *($8)
	*(($4 + [8])) = *(($8 + [8]))
	$8 = (*($6) + [16])
	*($6) = $8
	$4 = ($1 + [16])
	goto $label$1 
	
.LABEL $label$2
	$4 = ($1 + [16])
	CALL $698($4, $8)
	$8 = *($6)
	
.LABEL $label$1
	$3 = *($4)
	$7 = ($8 - $3)
	$9 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	$6 = [16]
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$4 }
	$6 = ((((int_32)uint_32(($7 + [-16]) >> [4]) * (int_32)[11]) + $6) + [11])
	
.LABEL $label$4
	if ( ($6 <= [513]) ){ goto $label$6 }
	$7 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($5 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$5
	*($10 + [8]) = $7
	$3 = ($7 + $6)
	*($10 + [16]) = $3
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [1920])
	CALL memcpy($7, $1, [8])
	$8 = ($7 + [8])
	CALL eosio_assert(((int_32)($3 - $8) > (int_32)[3]), [1920])
	CALL memcpy($8, ($1 + [8]), [4])
	$8 = ($7 + [12])
	CALL eosio_assert(((int_32)($3 - $8) > (int_32)[3]), [1920])
	CALL memcpy($8, ($1 + [12]), [4])
	$8 = ($7 + [16])
	*($10 + [12]) = $8
	$9 = (CASTING uint_64)(uint_32 int_32((*(($1 + [20])) - *($4)) >> [4]))
	
.LOOP $label$7:
	$4 = (CASTING uint_32)(uint_64 $9)
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	$5 = ((int_64)$9) != (int_64)0
	*($10 + [32]) = (($5) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)($3 - $8) > (int_32)[0]), [1920])
	CALL memcpy($8, ($10 + [32]), [1])
	$8 = ($8 + [1])
	*($10 + [12]) = $8
	if ( $5 ){ goto $label$7 }
	$4 = *(($1 + [20]))
	$8 = *($1 + [16])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	*($10 + [24]) = ($10 + [8])
	*($10 + [32]) = $8
	*((($10 + [32]) + [8])) = ($8 + [8])
	*((($10 + [32]) + [12])) = ($8 + [12])
	*($10 + [36]) = ($8 + [4])
	CALL $689(($10 + [32]), ($10 + [24]))
	$8 = ($8 + [16])
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$9 }
	
.LABEL $label$8
	$9 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($2 + [8]), (int_64)-6146658315851005952, *(*($0 + [8])), $9, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$10 }
	CALL free($7)
	
.LABEL $label$10
	if ( (uint_64)($9 <= *($2 + [16])) ){ goto $label$11 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $700 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [4])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $956($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$1 }
	$5 = [268435455]
	if ( ((uint_32)int_32($8 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [3])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[268435456]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [4])
	$5 = CALL $955($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [4])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [4])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [4]))
	return (unreachable)
	
.LABEL $label$1
	CALL $971($0)
}

void .FUNC $340 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*(*($3)) = (*($1 + [8]) + [1])
	$4 = *($1)
	*($1) = *(*($3 + [4]))
	*($1 + [8]) = *(*($3))
	$3 = *($3)
	$8 = ($1 + [16])
	$10 = *($8)
	if ( ((int_32)$10 == (int_32)*(($1 + [20]))) ){ goto $label$2 }
	*($10) = *($3)
	*(($10 + [16])) = *(($3 + [16]))
	*(($10 + [8])) = *(($3 + [8]))
	*($8) = (*($8) + [20])
	$8 = ($1 + [12])
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [12])
	CALL $308($8, $3)
	
.LABEL $label$1
	$5 = ($1 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$6 = *($8)
	$10 = *(($1 + [16]))
	$7 = ($10 - $6)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[20]))
	$3 = [29]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$5 }
	$10 = (((int_32)((uint_32)($7 + [-20]) / (uint_32)[20]) * (int_32)[17]) + $3)
	goto $label$4 
	
.LABEL $label$5
	$10 = ($3 + [-17])
	
.LABEL $label$4
	if ( ($10 <= [513]) ){ goto $label$7 }
	$3 = CALL malloc($10)
	goto $label$6 
	
.LABEL $label$7
	$3 = ($12 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$6
	*($11) = $3
	$12 = ($3 + $10)
	*($11 + [8]) = $12
	CALL eosio_assert(((int_32)$10 > (int_32)[7]), [1920])
	CALL memcpy($3, $1, [8])
	$6 = ($3 + [8])
	CALL eosio_assert(((int_32)($12 - $6) > (int_32)[3]), [1920])
	CALL memcpy($6, $5, [4])
	*($11 + [4]) = ($3 + [12])
	CALL $180($11, $8)
	CALL db_update_i64(*($1 + [28]), $2, $3, $10)
	if ( ($10 <= [513]) ){ goto $label$8 }
	CALL free($3)
	
.LABEL $label$8
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $709 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	float_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	CALL $187(($8 + [88]), *($0 + [88]), $1, [0])
	CALL memcpy(($8 + [24]), *($8 + [92]), [64])
	$1 = CALL publication_time()
	$5 = *([0] + [12])
	$3 = *($8 + [56])
	$7 = ((float_64)(CASTING float_64)(uint_32 *($8 + [60])) / (float_64)(float_64)100)
	*($8 + [16]) = $7
	*($8 + [8]) = (int_64)4607182418800017408
	$6 = *(( ($8 + [16]) ? ($8 + [8]) : ((float_64)$7 > (float_64)(float_64)1) ))
	*($8 + [16]) = $6
	*($8 + [8]) = (int_64)4618441417868443648
	$6 = *(( ($8 + [16]) ? ($8 + [8]) : ((float_64)(CASTING float_64)(int_64 $6) < (float_64)(float_64)6) ))
	*($8 + [16]) = $6
	$7 = (CASTING float_64)(int_64 $6)
	$3 = *([0] + [24])
	$2 = (CASTING uint_32)(uint_64 (int_64))(((uint_64)$1 / (uint_64)(int_64)1000000) - $5)
	$4 = ($2) - $3
	if ( ((uint_32)$4) >= (uint_32)$3) ){ goto $label$2 }
	$7 = ((float_64)((float_64)((float_64)(CASTING float_64)(uint_32 ($3 - $4)) / (float_64)(CASTING float_64)(int_32 $3)) + (float_64)(float_64)1) * (float_64)$7)
	goto $label$1 
	
.LABEL $label$2
	$7 = ((float_64)$7 / (float_64)((float_64)((float_64)(CASTING float_64)(uint_32 ($4 - $3)) / (float_64)(CASTING float_64)(int_32 $3)) + (float_64)(float_64)1))
	
.LABEL $label$1
	*($8 + [16]) = $7
	*($8 + [8]) = (int_64)4607182418800017408
	$1 = *(( ($8 + [16]) ? ($8 + [8]) : ((float_64)$7 > (float_64)(float_64)1) ))
	*($8 + [16]) = $1
	*(($8 + [56])) = $2
	$7 = (CASTING float_64)(int_64 $1)
	*(($8 + [60])) = ( (CASTING int_32)(float_64 ((float_64)$7 * (float_64)(float_64)100)) ? [600] : ((float_64)$7 < (float_64)(float_64)6) )
	$3 = *(($0 + [88]))
	$1 = *($3)
	$0 = *($8 + [92])
	*($8 + [8]) = ($8 + [24])
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [1696])
	CALL $209(($3 + [88]), $0, $1, ($8 + [8]))
	*([0] + [4]) = ($8 + [96])
}

void .FUNC $708 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	*($7 + [56]) = $2
	*(($7 + [48])) = [0]
	*($7 + [32]) = (int_64)-1
	*($7 + [40]) = (int_64)0
	$2 = *($0 + [8])
	*($7 + [16]) = $2
	*($7 + [24]) = $2
	$6 = [0]
	$4 = CALL db_find_i64($2, $2, (int_64)-7948101582086733824, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $214(($7 + [16]), $4)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($7 + [16])), [1536])
	
.LABEL $label$1
	$4 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($4, [3568])
	*($7 + [15]) = [0]
	$2 = *(($0 + [8]))
	*($7 + [4]) = ($7 + [15])
	*($7) = ($7 + [56])
	CALL eosio_assert($4, [1696])
	CALL $710(($7 + [16]), $6, $2, $7)
	CALL eosio_assert(*($7 + [15]), [3568])
	$3 = *($7 + [40])
	if ( ($3 == 0) ){ goto $label$2 }
	$5 = ($7 + [44])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	$4 = *($0 + [12])
	if ( ($4 == 0) ){ goto $label$7 }
	*(($0 + [16])) = $4
	CALL $956($4)
	
.LABEL $label$7
	CALL $956($0)
	
.LABEL $label$6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$5 }
	$6 = *(($7 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$6 = $3
	
.LABEL $label$3
	*($5) = $3
	CALL $956($6)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [64])
}

int_32 .FUNC $497 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	*($7 + [56]) = $1
	*($7 + [55]) = $2
	CALL eosio_assert(((($2 + [-1]) & [255]) <= [3]), [2176])
	CALL $501(($7 + [32]), $0, $2)
	*($7 + [28]) = [0]
	$3 = *(($0 + [40]))
	$6 = *(($0 + [44]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$1 }
	$2 = ($6 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($2)) == (int_64)$1) ){ goto $label$1 }
	$6 = $2
	$5 = ($2 + [-24])
	$2 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = ($0 + [16])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$7 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)$2), [1536])
	$1 = *($0 + [8])
	if ( $5 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$5 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-8872998483271876608, $1)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = CALL $144($2, $5)
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)$2), [1536])
	$1 = *($0 + [8])
	
.LABEL $label$6
	*($7 + [16]) = [0]
	*($7 + [4]) = ($7 + [16])
	*($7) = ($7 + [55])
	*($7 + [8]) = ($7 + [32])
	*($7 + [12]) = ($7 + [28])
	CALL eosio_assert([1], [1696])
	CALL $503($2, $5, $1, $7)
	CALL eosio_assert(((int_32)*($7 + [16]) ^ (int_32)[1]), [5712])
	goto $label$3 
	
.LABEL $label$5
	$1 = *($0 + [8])
	
.LABEL $label$4
	*($7 + [4]) = ($7 + [32])
	*($7) = ($7 + [56])
	CALL $502(($7 + [16]), $2, $1, $7)
	
.LABEL $label$3
	CALL void $0((int_32 *($7 + [56])), (int_64 *($7 + [55])), (int_32 *(*($0) + [16])))
	$2 = *($7 + [28])
	*([0] + [4]) = ($7 + [64])
	return $2
}

void .FUNC $496 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [16]) = (*($1 + [16]) + *(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [40]) = ($5 + [21])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $212(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [28]), $2, $5, [21])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $495 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($3 = $4) + [44]) = $0
	*($3 + [32]) = *($1)
	*($3 + [36]) = *($1 + [4])
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [48]) = $1
	$4 = ($1 + $0)
	*($3 + [56]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [1632])
	CALL memcpy(($3 + [8]), $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[3]), [1632])
	CALL memcpy((($3 + [8]) + [8]), $2, [4])
	*($3 + [52]) = ($1 + [12])
	$4 = (($3 + [8]) + [12])
	CALL $633(($3 + [48]), $4)
	if ( ($0 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $738(($3 + [48]), ($3 + [8]))
	$1 = *($4)
	if ( ($1 == 0) ){ goto $label$6 }
	*(($3 + [24])) = $1
	CALL $956($1)
	
.LABEL $label$6
	*([0] + [4]) = ($3 + [64])
	return [1]
}

void .FUNC $493 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [16]) = (*($1 + [16]) + *(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [56]) = ($5 + [39])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $283(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $5, [39])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $492 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $955([48])) + [24]) = (int_64)1397703940
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$7 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [3776])
	*($4 + [32]) = $0
	CALL $494(($8 + [32]), $4)
	*($4 + [36]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [36])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $495($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $956($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $491 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $237($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $960($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $955($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $960($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $956($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $957($7)
	return (unreachable)
}

void .FUNC $490 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)((int_32)($7 - $5) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$5 = ((int_32)($5 - $4) / (int_32)[24])
	$2 = ($5 + $1)
	if ( ((uint_32)$2 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$7 = ((int_32)($7 - $4) / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$5 }
	$6 = ($7 << [1])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$7 = CALL $955(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $5
	$7 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	$6 = ($6 + [24])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$6 }
	*(($0 + [4])) = ($5 + ((int_32)$1 * (int_32)[24]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$2 = ($7 + ((int_32)$6 * (int_32)[24]))
	$7 = ($7 + ((int_32)$5 * (int_32)[24]))
	$6 = $7
	$5 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	$6 = ($6 + [24])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$7 }
	$3 = ($7 + ((int_32)$1 * (int_32)[24]))
	$6 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$9 }
	$4 = ([0] - $6)
	$6 = ($5 + [-24])
	
.LOOP $label$10:
	*(($7 + [-24])) = *($6)
	$5 = ($6 + [8])
	*(($7 + [-16])) = *($5)
	*($6) = [0]
	*(($6 + [4])) = [0]
	*($5) = [0]
	$5 = ($6 + [20])
	*(($7 + [-4])) = *($5)
	$1 = ($6 + [12])
	*(($7 + [-12])) = *($1)
	*($1) = [0]
	*(($6 + [16])) = [0]
	*($5) = [0]
	$7 = ($7 + [-24])
	$6 = ($6 + [-24])
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$10 }
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$5 = $6
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$11 }
	$7 = ([0] - $5)
	$6 = ($6 + [-24])
	
.LOOP $label$12:
	if ( ((*(($6 + [12])) & [1]) == 0) ){ goto $label$13 }
	CALL $956(*(($6 + [20])))
	
.LABEL $label$13
	if ( ((*($6) & [1]) == 0) ){ goto $label$14 }
	CALL $956(*(($6 + [8])))
	
.LABEL $label$14
	$6 = ($6 + [-24])
	if ( ((int_32)($6 + $7) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($5 == 0) ){ goto $label$15 }
	CALL $956($5)
	
.LABEL $label$15
}

void .FUNC $78 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [7760]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	CALL $315(($0 + [560]), $1, $2)
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [1632])
	CALL memcpy(($2 + [8]), $1, [8])
	*($2 + [52]) = ($1 + [8])
	$3 = (($2 + [8]) + [8])
	CALL $633(($2 + [48]), $3)
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $735(($2 + [48]), ($2 + [8]))
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$5 }
	*(($2 + [20])) = $1
	CALL $956($1)
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

void .FUNC $499 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [12]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [40]) = ($5 + [21])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $212(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [28]), $2, $5, [21])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC $498 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	$10 = $11
	*([0] + [4]) = $11
	$3 = *($0 + [24])
	$8 = *(($0 + [28]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$7 = ($8 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($7 + [16])) == (int_32)$1) ){ goto $label$1 }
	$8 = $7
	$5 = ($7 + [-24])
	$7 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	$5 = *(($8 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$8 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($8 >> [31]) ^ (int_32)[1]), [1600])
	if ( ((uint_32)$8 <= (uint_32)[512]) ){ goto $label$6 }
	$3 = CALL malloc($8)
	CALL db_get_i64($1, $3, $8)
	CALL free($3)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($11 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $3
	CALL db_get_i64($1, $3, $8)
	
.LABEL $label$5
	$2 = ($0 + [24])
	*(($5 = CALL $955([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$11 = ($5 + [16])
	$6 = ($5 + [8])
	$9 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$4 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [3776])
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$8 > (uint_32)[7]), [1632])
	CALL memcpy($5, $3, [8])
	$7 = ($8 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [1632])
	CALL memcpy($6, ($3 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [1632])
	CALL memcpy($11, ($3 + [16]), [8])
	*($5 + [28]) = $1
	*($10 + [24]) = $5
	$9 = *($5)
	*($10 + [16]) = $9
	$8 = *($5 + [28])
	*($10 + [12]) = $8
	$1 = ($0 + [28])
	$7 = *($1)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($7 + [8]) = $9
	*($7 + [16]) = $8
	*($10 + [24]) = [0]
	*($7) = $5
	*($1) = ($7 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $500($2, ($10 + [24]), ($10 + [16]), ($10 + [12]))
	
.LABEL $label$12
	$7 = *($10 + [24])
	*($10 + [24]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $956($7)
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [32])
	return $5
}

void .FUNC $34 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	CALL $704($9, $0, $2)
	$6 = *($9 + [96])
	if ( ($6 == 0) ){ goto $label$1 }
	$8 = ($9 + [100])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$3 }
	$7 = ([0] - $6)
	$2 = ($2 + [-24])
	
.LOOP $label$4:
	if ( ((*(($2 + [12])) & [1]) == 0) ){ goto $label$5 }
	CALL $956(*(($2 + [20])))
	
.LABEL $label$5
	if ( ((*($2) & [1]) == 0) ){ goto $label$6 }
	CALL $956(*(($2 + [8])))
	
.LABEL $label$6
	$2 = ($2 + [-24])
	if ( ((int_32)($2 + $7) != (int_32)[-24]) ){ goto $label$4 }
	$2 = *(($9 + [96]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $6
	
.LABEL $label$2
	*($8) = $6
	CALL $956($2)
	
.LABEL $label$1
	$2 = CALL $812(($0 + [1128]), $1, $3)
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $256(($0 + [472]), $1, $2)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [112])
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

int_64 .FUNC scalbn (float_64 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	$2 = ($1 + [-1023])
	if ( ((int_32)$2 < (int_32)[1024]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	$2 = ($1 + [969])
	if ( ((int_32)$2 > (int_32)[-1023]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = $2
	goto $label$1 
	
.LABEL $label$2
	$1 = $2
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

void .FUNC $943 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	*($7 + [72]) = $1
	*($7 + [68]) = $2
	*($7 + [56]) = $2
	*($7 + [65]) = [0]
	*($7 + [64]) = [1]
	*($7 + [60]) = [1]
	*(($7 + [48])) = [0]
	*($7 + [32]) = (int_64)-1
	*($7 + [40]) = (int_64)0
	$5 = *($0 + [8])
	*($7 + [16]) = $5
	*($7 + [24]) = $5
	$2 = CALL db_find_i64($5, $5, (int_64)-6146850541407305728, $1)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$3 }
	$2 = CALL $159(($7 + [16]), $2)
	CALL eosio_assert(((int_32)*($2 + [20]) == (int_32)($7 + [16])), [1536])
	$5 = *(($0 + [8]))
	*($7 + [12]) = ($7 + [56])
	*($7 + [8]) = ($7 + [68])
	CALL eosio_assert([1], [1696])
	CALL $945(($7 + [16]), $2, $5, ($7 + [8]))
	$3 = *($7 + [40])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *(($0 + [8]))
	*($7 + [12]) = ($7 + [56])
	*($7 + [8]) = ($7 + [72])
	CALL $944($7, ($7 + [16]), $5, ($7 + [8]))
	$3 = *($7 + [40])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($7 + [44])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	$4 = *($0 + [8])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($0 + [12])) = $4
	CALL $956($4)
	
.LABEL $label$8
	CALL $956($0)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($7 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $3
	
.LABEL $label$4
	*($6) = $3
	CALL $956($2)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [80])
}

int_32 .FUNC $942 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [80])
	*([0] + [4]) = $17
	$9 = *($1 + [4])
	$6 = *($9)
	$11 = [1]
	CALL $200(*($0 + [16]), [1])
	CALL eosio_assert(((($2 + [-1]) & [65535]) <= [2]), [9984])
	CALL eosio_assert(((($3 + [-1]) & [255]) <= [9]), [10016])
	$16 = ((int_32)( [100] ? [1000] : ((int_32)$2 == (int_32)[1]) ) * (int_32)$3)
	CALL eosio_assert(((uint_32)$16 <= (uint_32)*($9 + [16])), [2880])
	$4 = (((int_32)$2 != (int_32)[1]) & $4)
	if ( ($16 == 0) ){ goto $label$1 }
	$9 = *($0 + [20])
	$1 = *($1 + [4])
	*($17 + [8]) = $16
	CALL eosio_assert(((uint_32)*($1 + [16]) >= (uint_32)$16), [2880])
	if ( $4 ){ goto $label$1 }
	$13 = *($9)
	*($17) = ($17 + [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [1696])
	CALL $249(($9 + [8]), $1, $13, $17)
	
.LABEL $label$1
	if ( $4 ){ goto $label$2 }
	CALL memcpy(($17 + [8]), *($5 + [4]), [64])
	$12 = ($0 + [16])
	CALL $205($17, *($12), ($17 + [8]))
	$14 = *($17)
	if ( ($3 == 0) ){ goto $label$3 }
	$2 = ((int_32)$2 == (int_32)[1])
	$9 = ( [20] ? [26] : $2 )
	$7 = ( (int_64)233600 ? (int_64)28968 : $2 )
	$15 = [0]
	$8 = ( [0] ? [8] : $2 )
	$10 = (($8 << [2]) + [10032])
	
.LOOP $label$4:
	$13 = ((uint_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $14) * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	$14 = (CASTING uint_32)(uint_64 $13)
	*($17) = $14
	$11 = (CASTING uint_32)(uint_64 (uint_64)((int_64)$13 * (int_64)$7) >> (uint_64)(int_64)31)
	*($17 + [4]) = $11)
	$16 = $10
	$1 = [0]
	$2 = $8
	
.LOOP $label$6:
	if ( ((int_32)$2 >= (int_32)$9) ){ goto $label$5 }
	$2 = ($2 + [1])
	$4 = *($16)
	$16 = ($16 + [4])
	$1 = ($4 + $1)
	if ( ((int_32)$11 >= (int_32)$1) ){ goto $label$6 }
	CALL $943($0, $6, $2)
	$14 = *($17)
	
.LABEL $label$5
	$15 = ($15 + [1])
	if ( ((int_32)$15 != (int_32)$3) ){ goto $label$4 }
	
.LABEL $label$3
	$11 = [0]
	*($17 + [20]) = [0]
	$13 = *($17 + [8])
	*($17 + [16]) = ((int_32)(CASTING uint_32)(uint_64 ((int_64)(uint_64)$13 >> (uint_64)(int_64)32) ^ (int_64)$13)) ^ (int_32)$14)
	$16 = *($12)
	$13 = *($16)
	$2 = *($5 + [4])
	*($17 + [72]) = ($17 + [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [1696])
	CALL $209(($16 + [88]), $2, $13, ($17 + [72]))
	
.LABEL $label$2
	*([0] + [4]) = ($17 + [80])
	return $11
}

void .FUNC $280 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	*($5 + [60]) = [0]
	*($5 + [56]) = [0]
	if ( (*($1 + [44]) == 0) ){ goto $label$3 }
	if ( ((int_32)$3 <= (int_32)$2) ){ goto $label$1 }
	$2 = ($3 - $2)
	goto $label$2 
	
.LABEL $label$3
	*(($1 + [44])) = [1]
	*($5 + [60]) = [1]
	$2 = ( $3 ? $2 : ((int_32)$3 > (int_32)$2) )
	
.LABEL $label$2
	*($5 + [56]) = $2
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$1 }
	$2 = [0]
	*(($5 + [48])) = [0]
	*($5 + [32]) = (int_64)-1
	$4 = *($0 + [8])
	*($5 + [16]) = $4
	*($5 + [24]) = $4
	*($5 + [40]) = (int_64)0
	$3 = CALL db_lowerbound_i64($4, $4, (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$5 }
	CALL $226(($5 + [16]), $3)
	$3 = CALL db_lowerbound_i64(*($5 + [16]), *((($5 + [16]) + [8])), (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$2 = CALL $226(($5 + [16]), $3)
	
.LABEL $label$6
	$4 = *(($0 + [8]))
	*($5 + [12]) = ($5 + [60])
	*($5 + [8]) = ($5 + [56])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [1696])
	CALL $292(($5 + [16]), $2, $4, ($5 + [8]))
	$1 = *($5 + [40])
	if ( $1 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$5
	$4 = *(($0 + [8]))
	*($5 + [12]) = ($5 + [60])
	*($5 + [8]) = ($5 + [56])
	CALL $291($5, ($5 + [16]), $4, ($5 + [8]))
	$1 = *($5 + [40])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$4
	$0 = ($5 + [44])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	CALL $956($3)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($5 + [40]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $1
	
.LABEL $label$7
	*($0) = $1
	CALL $956($2)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $692 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($2)), [1648])
	$4 = *($3)
	$7 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$4 = *($1 + [4])
	$3 = int_32(($4 - $7) >> [4])
	$6 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$4 }
	CALL $693($1, ($6 - $3))
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$6 >= (uint_32)$3) ){ goto $label$5 }
	$4 = ($7 + ($6 << [4]))
	*(($1 + [4])) = $4
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	*($8 + [8]) = $0
	*($8 + [16]) = $7
	*((($8 + [16]) + [8])) = ($7 + [8])
	*((($8 + [16]) + [12])) = ($7 + [12])
	*($8 + [20]) = ($7 + [4])
	CALL $694(($8 + [16]), ($8 + [8]))
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [32])
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$6 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($7 + [8]) = (int_64)0
	*($7 + [16]) = (int_64)0
	*($7 + [24]) = (int_64)0
	*($7 + [36]) = $1
	*($7 + [32]) = $1
	*($7 + [40]) = ($1 + $3)
	*($7 + [48]) = ($7 + [32])
	*($7 + [56]) = ($7 + [8])
	CALL $811(($7 + [56]), ($7 + [48]))
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($7 + [28]))
	$8 = *(($7 + [24]))
	$0 = *(($7 + [20]))
	$5 = *(($7 + [16]))
	$4 = *($7 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	CALL void $1((int_32 $4), (int_64 $5), (int_32 $0), (int_32 $8), (int_32 $3), (int_32 $6))
	*([0] + [4]) = ($7 + [64])
	return [1]
}

int_32 .FUNC $228 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $973 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $955($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $949 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL $640($0, $1, $2)
}

int_32 .FUNC $948 (int_32 $0, int_32 $1)
{
	return ((( $1 ? [5] : ((int_32)$1 < (int_32)[5]) ) << [2]) + [28])
}

int_32 .FUNC $342 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [192])
	*([0] + [4]) = $17
	*($17 + [180]) = $2
	CALL $200(*($0 + [56]), [1])
	$8 = *(($0 + [40]))
	$9 = *(($0 + [44]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$1 }
	$16 = ($9 + [-24])
	$10 = ([0] - $8)
	
.LOOP $label$2:
	if ( ((int_64)*(*($16)) == (int_64)$1) ){ goto $label$1 }
	$9 = $16
	$13 = ($16 + [-24])
	$16 = $13
	if ( ((int_32)($13 + $10) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [16])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$4 }
	$14 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$6), [1536])
	goto $label$3 
	
.LABEL $label$4
	$14 = [0]
	$16 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-4345224872994013184, $1)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$3 }
	$14 = CALL $271($6, $16)
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$6), [1536])
	
.LABEL $label$3
	$7 = *($16)
	$16 = ( ($14 + [12]) ? ($0 + [68]) : $14 )
	$16 = (*($16 + [4]) - $7)
	if ( ((int_32)$16 < (int_32)[20]) ){ goto $label$6 }
	$13 = (((uint_32)$16 / (uint_32)[20]) + [-1])
	$16 = [0]
	
.LOOP $label$7:
	$8 = ($13 - $16)
	$9 = (((int_32)$8 / (int_32)[2]) + $16)
	$15 = ($7 + ((int_32)$9 * (int_32)[20]))
	$10 = *($15)
	if ( ($10 <= $2) ){ goto $label$8 }
	if ( ((uint_32)$10 <= (uint_32)$2) ){ goto $label$5 }
	$13 = ($9 + [-1])
	if ( ((int_32)$8 > (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$16 = ($9 + [1])
	if ( ((int_32)$13 > (int_32)$9) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert([0], [2112])
	$15 = ($0 + [80])
	
.LABEL $label$5
	CALL eosio_assert((*($15 + [16]) == 0), [2208])
	$11 = *($15 + [6])
	$10 = [0]
	*(($17 + [168])) = [0]
	*($17 + [160]) = (int_64)0
	*($17 + [152]) = (int_64)-1
	$12 = *($0 + [8])
	*($17 + [136]) = $12
	*($17 + [144]) = $12
	$16 = CALL db_find_i64($12, $12, (int_64)-4921685318744145920, *($15 + [7]))
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$10 }
	$8 = CALL $168(($17 + [136]), $16)
	CALL eosio_assert(((int_32)*($8 + [44]) == (int_32)($17 + [136])), [1536])
	$10 = *(($17 + [160]))
	$2 = *(($17 + [164]))
	goto $label$9 
	
.LABEL $label$10
	$2 = [0]
	$8 = [0]
	
.LABEL $label$9
	$12 = ((int_64)*(($15 + [7])) + (int_64)1)
	if ( ((int_32)$2 == (int_32)$10) ){ goto $label$11 }
	$16 = ($2 + [-24])
	$9 = ([0] - $10)
	
.LOOP $label$12:
	if ( ((int_64)*(*($16)) == (int_64)$12) ){ goto $label$11 }
	$2 = $16
	$13 = ($16 + [-24])
	$16 = $13
	if ( ((int_32)($13 + $9) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_32)$2 == (int_32)$10) ){ goto $label$14 }
	$10 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [44]) == (int_32)($17 + [136])), [1536])
	goto $label$13 
	
.LABEL $label$14
	$10 = [0]
	$16 = CALL db_find_i64(*($17 + [136]), *(($17 + [144])), (int_64)-4921685318744145920, $12)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$13 }
	$10 = CALL $168(($17 + [136]), $16)
	CALL eosio_assert(((int_32)*($10 + [44]) == (int_32)($17 + [136])), [1536])
	
.LABEL $label$13
	$7 = [0]
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [2960])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [2960])
	CALL eosio_assert(((uint_32)*($15 + [8]) >= (uint_32)*($10 + [8])), [2992])
	*($17 + [132]) = (*($10 + [8]) - *($8 + [8]))
	*(($17 + [120])) = [0]
	*($17 + [112]) = (int_64)0
	*($17 + [104]) = (int_64)-1
	$12 = *(($0 + [8]))
	*($17 + [88]) = $12
	*($17 + [96]) = $12
	$16 = [0]
	$13 = CALL db_find_i64($12, $12, (int_64)-4921685625297436672, *($15 + [4]))
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$15 }
	$16 = CALL $167(($17 + [88]), $13)
	CALL eosio_assert(((int_32)*($16 + [52]) == (int_32)($17 + [88])), [1536])
	
.LABEL $label$15
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [3024])
	$16 = (*($16 + [10]) + [-1])
	if ( ((uint_32)$16 > (uint_32)[5]) ){ goto $label$16 }
	goto $label$22 
	
.LABEL $label$22
	$7 = *($10 + [12])
	goto $label$16 
	
.LABEL $label$21
	$7 = *($10 + [16])
	goto $label$16 
	
.LABEL $label$20
	$7 = *($10 + [20])
	goto $label$16 
	
.LABEL $label$19
	$7 = *($10 + [24])
	goto $label$16 
	
.LABEL $label$18
	$7 = *($10 + [28])
	goto $label$16 
	
.LABEL $label$17
	$7 = *($10 + [32])
	
.LABEL $label$16
	$15 = *(($8 + [32]))
	$8 = *($0 + [60])
	$2 = *(($8 + [36]))
	if ( ((int_32)$2 == (int_32)$15) ){ goto $label$23 }
	$16 = ($2 + [-24])
	$9 = ([0] - $15)
	
.LOOP $label$24:
	if ( ((int_64)*(*($16)) == (int_64)$1) ){ goto $label$23 }
	$2 = $16
	$13 = ($16 + [-24])
	$16 = $13
	if ( ((int_32)($13 + $9) != (int_32)[-24]) ){ goto $label$24 }
	
.LABEL $label$23
	$13 = ($8 + [8])
	if ( ((int_32)$2 == (int_32)$15) ){ goto $label$26 }
	$16 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [40]) == (int_32)$13), [1536])
	goto $label$25 
	
.LABEL $label$26
	$16 = [0]
	$2 = CALL db_find_i64(*(($8 + [8])), *(($8 + [16])), (int_64)-4223691270582697984, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$25 }
	$16 = CALL $274($13, $2)
	CALL eosio_assert(((int_32)*($16 + [40]) == (int_32)$13), [1536])
	
.LABEL $label$25
	CALL eosio_assert(((uint_32)$7 <= (uint_32)*($16 + [16])), [2880])
	$9 = [1]
	*($17 + [87]) = [1]
	CALL memcpy(($17 + [16]), *($5 + [4]), [64])
	$2 = [0]
	if ( ((uint_32)*($10 + [36]) > (uint_32)[9999]) ){ goto $label$28 }
	if ( $3 ){ goto $label$27 }
	CALL $205($17, *(($0 + [56])), ($17 + [16]))
	$2 = *(($10 + [36]))
	$1 = ((uint_64)((int_64)((int_64)*($17) * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	$13 = (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 * (int_64)10000) >> (uint_64)(int_64)31)
	*($17 + [87]) = ($13) <= $2)
	$12 = *($17 + [16])
	*($17 + [24]) = ((int_64)((int_64)(uint_64)$12 >> (uint_64)(int_64)32) ^ (int_64)$12) ^ (int_64)$1)
	$2 = ((uint_32)$13 >= (uint_32)$2)
	
.LABEL $label$28
	$13 = *(($0 + [60]))
	$2 = uint_32($7 >> $2)
	*($17) = $2
	CALL eosio_assert(((uint_32)*(($16 + [16])) >= (uint_32)$2), [2880])
	$1 = *($13)
	*($17 + [184]) = $17
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [1696])
	CALL $295(($13 + [8]), $16, $1, ($17 + [184]))
	$1 = *(($0 + [8]))
	*($17 + [4]) = ($17 + [87])
	*($17) = ($17 + [180])
	*($17 + [8]) = ($17 + [132])
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [1696])
	CALL $343($6, $14, $1, $17)
	*($4) = $11
	*($17 + [28]) = [0]
	$13 = *(($0 + [56]))
	$1 = *($13)
	$16 = *($5 + [4])
	*($17) = ($17 + [16])
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [1696])
	CALL $209(($13 + [88]), $16, $1, $17)
	$9 = [0]
	
.LABEL $label$27
	$2 = *($17 + [112])
	if ( ($2 == 0) ){ goto $label$29 }
	$10 = ($17 + [116])
	$16 = *($10)
	if ( ((int_32)$16 == (int_32)$2) ){ goto $label$31 }
	
.LOOP $label$32:
	$16 = ($16 + [-24])
	$13 = *($16)
	*($16) = [0]
	if ( ($13 == 0) ){ goto $label$33 }
	CALL $956($13)
	
.LABEL $label$33
	if ( ((int_32)$2 != (int_32)$16) ){ goto $label$32 }
	$16 = *(($17 + [112]))
	goto $label$30 
	
.LABEL $label$31
	$16 = $2
	
.LABEL $label$30
	*($10) = $2
	CALL $956($16)
	
.LABEL $label$29
	$2 = *($17 + [160])
	if ( ($2 == 0) ){ goto $label$34 }
	$10 = ($17 + [164])
	$16 = *($10)
	if ( ((int_32)$16 == (int_32)$2) ){ goto $label$36 }
	
.LOOP $label$37:
	$16 = ($16 + [-24])
	$13 = *($16)
	*($16) = [0]
	if ( ($13 == 0) ){ goto $label$38 }
	CALL $956($13)
	
.LABEL $label$38
	if ( ((int_32)$2 != (int_32)$16) ){ goto $label$37 }
	$16 = *(($17 + [160]))
	goto $label$35 
	
.LABEL $label$36
	$16 = $2
	
.LABEL $label$35
	*($10) = $2
	CALL $956($16)
	
.LABEL $label$34
	*([0] + [4]) = ($17 + [192])
	$16
	return $9
}

void .FUNC $306 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([40]))) = (int_64)0
	*($3 + [12 align=4]) = (int_64)0
	*($3 + [20]) = [0]
	*($3 + [24]) = $1
	CALL $309(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $183(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [12])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [16])) = $1
	CALL $956($1)
	
.LABEL $label$4
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $633 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1648])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [2])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $635($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [2]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	$2 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*($2) - $7) > (uint_32)[3]), [1632])
	CALL memcpy($4, *($5), [4])
	$7 = (*($5) + [4])
	*($5) = $7
	$4 = ($4 + [4])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $632 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $208 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	*($5 + [60]) = [0]
	*($5 + [56]) = [0]
	if ( (*($1 + [44]) == 0) ){ goto $label$3 }
	if ( ((int_32)$3 <= (int_32)$2) ){ goto $label$1 }
	$2 = ($3 - $2)
	goto $label$2 
	
.LABEL $label$3
	*(($1 + [44])) = [1]
	*($5 + [60]) = [1]
	$2 = ( $3 ? $2 : ((int_32)$3 > (int_32)$2) )
	
.LABEL $label$2
	*($5 + [56]) = $2
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$1 }
	$2 = [0]
	*(($5 + [48])) = [0]
	*($5 + [32]) = (int_64)-1
	$4 = *($0 + [8])
	*($5 + [16]) = $4
	*($5 + [24]) = $4
	*($5 + [40]) = (int_64)0
	$3 = CALL db_lowerbound_i64($4, $4, (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$5 }
	CALL $226(($5 + [16]), $3)
	$3 = CALL db_lowerbound_i64(*($5 + [16]), *((($5 + [16]) + [8])), (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$2 = CALL $226(($5 + [16]), $3)
	
.LABEL $label$6
	$4 = *(($0 + [8]))
	*($5 + [12]) = ($5 + [60])
	*($5 + [8]) = ($5 + [56])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [1696])
	CALL $227(($5 + [16]), $2, $4, ($5 + [8]))
	$1 = *($5 + [40])
	if ( $1 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$5
	$4 = *(($0 + [8]))
	*($5 + [12]) = ($5 + [60])
	*($5 + [8]) = ($5 + [56])
	CALL $225($5, ($5 + [16]), $4, ($5 + [8]))
	$1 = *($5 + [40])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$4
	$0 = ($5 + [44])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	CALL $956($3)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($5 + [40]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $1
	
.LABEL $label$7
	*($0) = $1
	CALL $956($2)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $209 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$1 = CALL memcpy($1, *($3), [60])
	$4 = *($1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	*($5 + [72]) = ($5 + [60])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $224(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [64]), $2, $5, [60])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

int_32 .FUNC $637 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	float_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	float_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [304])
	*([0] + [4]) = $17
	*($17 + [214]) = $2
	CALL $200(*($0 + [12]), [1])
	$15 = *(($14 + [32]))
	$14 = *($0 + [16])
	$10 = *(($14 + [36]))
	if ( ((int_32)$10 == (int_32)$15) ){ goto $label$1 }
	$2 = ($10 + [-24])
	$6 = ([0] - $15)
	
.LOOP $label$2:
	if ( ((int_64)*(*($2)) == (int_64)$1) ){ goto $label$1 }
	$10 = $2
	$9 = ($2 + [-24])
	$2 = $9
	if ( ((int_32)($9 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = ($14 + [8])
	if ( ((int_32)$10 == (int_32)$15) ){ goto $label$4 }
	$13 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$2), [1536])
	goto $label$3 
	
.LABEL $label$4
	$13 = [0]
	$9 = CALL db_find_i64(*(($14 + [8])), *(($14 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$13 = CALL $186($2, $9)
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$2), [1536])
	
.LABEL $label$3
	$14 = [0]
	$7 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($7, [2368])
	*($17 + [208]) = (int_64))(((uint_64)CALL publication_time() / (uint_64)(int_64)1000000) - *([0] + [12]))
	*((($17 + [168]) + [32])) = [0]
	*($17 + [184]) = (int_64)-1
	*($17 + [192]) = (int_64)0
	$11 = *($0)
	*($17 + [168]) = $11
	*($17 + [176]) = $11
	$2 = [0]
	$9 = CALL db_find_i64($11, $11, (int_64)-7948101582086733824, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$5 }
	$2 = CALL $214(($17 + [168]), $9)
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)($17 + [168])), [1536])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [3456])
	$2 = *($0 + [8])
	CALL eosio_assert(((int_32)((int_32)(*(($2 + [16])) - *($2 + [12])) / (int_32)[12]) < (int_32)CALL int_32 $2((int_32 *($13 + [8])), (int_32 *(*($2) + [4])))), [2432])
	*((($17 + [128]) + [32])) = [0]
	*($17 + [144]) = (int_64)-1
	*($17 + [152]) = (int_64)0
	$11 = *($0)
	*($17 + [128]) = $11
	*($17 + [136]) = $11
	$2 = CALL db_find_i64($11, $11, (int_64)5667434139083603968, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	$14 = CALL $601(($17 + [128]), $2)
	CALL eosio_assert(((int_32)*($14 + [64]) == (int_32)($17 + [128])), [1536])
	
.LABEL $label$6
	$9 = [0]
	$8 = ((int_32)$14 != (int_32)[0])
	CALL eosio_assert($8, [6416])
	$15 = [-1]
	$2 = *($14 + [20])
	$10 = *(($14 + [24]))
	if ( ((int_32)$10 == (int_32)$2) ){ goto $label$7 }
	$6 = int_32(($10 - $2) >> [5])
	$10 = (*($17 + [214]) & [65535])
	
.LOOP $label$9:
	if ( ((int_32)*($2) == (int_32)$10) ){ goto $label$8 }
	$2 = ($2 + [32])
	$9 = ($9 + [1])
	if ( ($9 <= $6) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$15 = $9
	
.LABEL $label$7
	*($17 + [124]) = $15
	CALL eosio_assert(((int_32)uint_32($15 >> [31]) ^ (int_32)[1]), [6512])
	*($17 + [112]) = (int_64)0
	*($17 + [120]) = [0]
	$10 = *(($14 + [20]))
	$2 = (*($3 + [4]) - *($3))
	$9 = int_32($2 >> [2])
	if ( ($9 == 0) ){ goto $label$11 }
	if ( ((uint_32)$9 >= (uint_32)[1073741824]) ){ goto $label$10 }
	$2 = CALL $955($2)
	*(($17 + [120])) = ($2 + ($9 << [2]))
	*($17 + [112]) = $2
	*($17 + [116]) = $2
	$6 = *($3)
	$9 = (*(($3 + [4])) - $6)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($2, $6, $9)
	*($17 + [116]) = (*($17 + [116]) + $9)
	
.LABEL $label$11
	CALL $639($0, $1, ($10 + ($15 << [5])), ($17 + [112]))
	$2 = *($17 + [112])
	if ( ($2 == 0) ){ goto $label$12 }
	*($17 + [116]) = $2
	CALL $956($2)
	
.LABEL $label$12
	*(($17 + [104])) = [0]
	$11 = *($0)
	*($17 + [72]) = $11
	*($17 + [88]) = (int_64)-1
	*($17 + [96]) = (int_64)0
	*($17 + [80]) = $11
	$10 = [0]
	$2 = CALL db_find_i64($11, $11, (int_64)-5011039453897031680, *($17 + [214]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$13 }
	$10 = CALL $602(($17 + [72]), $2)
	CALL eosio_assert(((int_32)*($10 + [56]) == (int_32)($17 + [72])), [1536])
	
.LABEL $label$13
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [6544])
	$6 = [1]
	if ( $4 ){ goto $label$14 }
	$16 = (float_64)1
	$2 = ($0 + [12])
	$12 = CALL pow((float_64)2, ((float_64)max ( (float_64)((float_64)CALL $204(*($2)) / (float_64)(float_64)1e3) , (float_64)(float_64)1 ) + (float_64)(float_64)-1))
	$9 = (CASTING uint_32)(uint_64 (int_64))(((uint_64)CALL publication_time() / (uint_64)(int_64)1000000) - *([0] + [12]))
	if ( ($9) <= [48892800]) ){ goto $label$15 }
	$16 = ((float_64)(float_64)1 / (float_64)$12)
	$6 = ((int_32)*([0] + [16]) * (int_32)[7])
	$9 = ($9 + [-48892800])
	if ( ((uint_32)$9 > (uint_32)$6) ){ goto $label$15 }
	$16 = ((float_64)((float_64)((float_64)$16 + (float_64)(float_64)-1) * (float_64)((float_64)(CASTING float_64)(uint_32 $9) / (float_64)(CASTING float_64)(uint_32 $6))) + (float_64)(float_64)1)
	
.LABEL $label$15
	CALL memcpy(($17 + [8]), *($5 + [4]), [64])
	CALL $205($17, *($2), ($17 + [8]))
	$11 = ((uint_64)((int_64)((int_64)*($17) * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	*($17) = $11
	$2 = (CASTING uint_32)(uint_64 (uint_64)((int_64)$11 * (int_64)10000) >> (uint_64)(int_64)31)
	*($17 + [4]) = $2)
	if ( ((uint_32)$2 >= (uint_32)(CASTING int_32)(float_64 ((float_64)$16 * (float_64)(CASTING float_64)(uint_32 *($10 + [32]))))) ){ goto $label$17 }
	$2 = *($10 + [26])
	goto $label$16 
	
.LABEL $label$17
	if ( ((uint_32)$2 >= (uint_32)(CASTING int_32)(float_64 ((float_64)$16 * (float_64)(CASTING float_64)(uint_32 *($10 + [30]))))) ){ goto $label$18 }
	$2 = *($10 + [24])
	goto $label$16 
	
.LABEL $label$18
	if ( ((uint_32)$2 >= (uint_32)(CASTING int_32)(float_64 ((float_64)$16 * (float_64)(CASTING float_64)(uint_32 *($10 + [28]))))) ){ goto $label$19 }
	$2 = *($10 + [22])
	goto $label$16 
	
.LABEL $label$19
	$11 = ((uint_64)((int_64)((int_64)$11 * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	*($17) = $11
	$2 = (CASTING uint_32)(uint_64 (uint_64)((int_64)$11 * (int_64)10000) >> (uint_64)(int_64)31)
	*($17 + [4]) = $2)
	if ( ((uint_32)$2 >= (uint_32)(CASTING int_32)(float_64 ((float_64)$16 * (float_64)(CASTING float_64)(uint_32 *($10 + [16]))))) ){ goto $label$21 }
	CALL memset(($17 + [224]), [0], [80])
	$2 = [3]
	goto $label$20 
	
.LABEL $label$21
	$9 = *($10 + [14])
	CALL memset(($17 + [224]), [0], [80])
	$2 = ( [2] ? [1] : ($2 <= (CASTING int_32)(float_64 ((float_64)$16 * (float_64)(CASTING float_64)(uint_32 $9)))) )
	
.LABEL $label$20
	$6 = ($2 << [2])
	$3 = *(($6 + [6608]))
	$2 = (($3 << [3]) + [2544])
	$16 = (float_64)0
	$9 = ($17 + [224])
	$15 = *(($6 + [6576]))
	$6 = $15
	
.LOOP $label$22:
	$12 = *($2)
	*($9) = $12
	$9 = ($9 + [8])
	$2 = ($2 + [8])
	$16 = ((float_64)$16 + (float_64)$12)
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$22 }
	$2 = ($17 + [224])
	$9 = $15
	
.LOOP $label$23:
	*($2) = ((float_64)*($2) / (float_64)$16)
	$2 = ($2 + [8])
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$23 }
	$11 = ((uint_64)((int_64)((int_64)$11 * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	*($17) = $11
	$9 = (CASTING uint_32)(uint_64 (uint_64)((int_64)$11 * (int_64)1000000000) >> (uint_64)(int_64)31)
	*($17 + [4]) = $9)
	$2 = ((($17 + [224]) + ($15 << [3])) + [-8])
	
.LOOP $label$26:
	if ( ((int_32)$15 < (int_32)[2]) ){ goto $label$25 }
	$15 = ($15 + [-1])
	$16 = *($2)
	$2 = ($2 + [-8])
	if ( ((int_32)$9 >= (int_32)(CASTING int_32)(float_64 ((float_64)$16 * (float_64)(float_64)1e9))) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$15 = [0]
	
.LABEL $label$24
	$11 = ((uint_64)((int_64)((int_64)$11 * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	*($17) = $11
	$2 = (CASTING uint_32)(uint_64 (uint_64)((int_64)$11 * (int_64)5) >> (uint_64)(int_64)31)
	*($17 + [4]) = $2)
	$2 = ((($3 + ((int_32)$2 * (int_32)[20])) + $15) + [1])
	
.LABEL $label$16
	CALL $640(*(($0 + [8])), $1, ($2 & [65535]))
	$2 = *(($0 + [16]))
	*($17 + [224]) = *($10 + [34])
	$1 = *($2)
	*($17 + [216]) = ($17 + [224])
	CALL eosio_assert($7, [1696])
	CALL $496(($2 + [8]), $13, $1, ($17 + [216]))
	$1 = *($0)
	*($17 + [228]) = ($17 + [208])
	*($17 + [224]) = ($17 + [214])
	*($17 + [232]) = ($17 + [124])
	CALL eosio_assert($8, [1696])
	CALL $641(($17 + [128]), $14, $1, ($17 + [224]))
	$6 = [0]
	*($17 + [20]) = [0]
	$1 = *($17 + [8])
	*($17 + [16]) = ((int_32)(CASTING uint_32)(uint_64 ((int_64)(uint_64)$1 >> (uint_64)(int_64)32) ^ (int_64)$1)) ^ (int_32)*($17))
	$9 = *(($0 + [12]))
	$1 = *($9)
	$2 = *($5 + [4])
	*($17 + [224]) = ($17 + [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [1696])
	CALL $209(($9 + [88]), $2, $1, ($17 + [224]))
	
.LABEL $label$14
	$10 = *($17 + [96])
	if ( ($10 == 0) ){ goto $label$27 }
	$0 = ($17 + [100])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$10) ){ goto $label$29 }
	
.LOOP $label$30:
	$2 = ($2 + [-24])
	$9 = *($2)
	*($2) = [0]
	if ( ($9 == 0) ){ goto $label$31 }
	CALL $956($9)
	
.LABEL $label$31
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$30 }
	$2 = *(($17 + [96]))
	goto $label$28 
	
.LABEL $label$29
	$2 = $10
	
.LABEL $label$28
	*($0) = $10
	CALL $956($2)
	
.LABEL $label$27
	$10 = *($17 + [152])
	if ( ($10 == 0) ){ goto $label$32 }
	$0 = ($17 + [156])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$10) ){ goto $label$34 }
	$2 = ($2 + [-24])
	
.LOOP $label$35:
	$9 = CALL $604($2)
	$2 = ($2 + [-24])
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$35 }
	$2 = *(($17 + [152]))
	goto $label$33 
	
.LABEL $label$34
	$2 = $10
	
.LABEL $label$33
	*($0) = $10
	CALL $956($2)
	
.LABEL $label$32
	$0 = *($17 + [192])
	if ( ($0 == 0) ){ goto $label$36 }
	$14 = ($17 + [196])
	$2 = *($14)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$38 }
	
.LOOP $label$39:
	$2 = ($2 + [-24])
	$9 = *($2)
	*($2) = [0]
	if ( ($9 == 0) ){ goto $label$40 }
	$10 = *($9 + [12])
	if ( ($10 == 0) ){ goto $label$41 }
	*(($9 + [16])) = $10
	CALL $956($10)
	
.LABEL $label$41
	CALL $956($9)
	
.LABEL $label$40
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$39 }
	$2 = *(($17 + [192]))
	goto $label$37 
	
.LABEL $label$38
	$2 = $0
	
.LABEL $label$37
	*($14) = $0
	CALL $956($2)
	
.LABEL $label$36
	*([0] + [4]) = ($17 + [304])
	return $6
	
.LABEL $label$10
	CALL $971(($17 + [112]))
	return (unreachable)
}

void .FUNC $636 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [224])
	*([0] + [4]) = $16
	CALL _ZN14system_control15check_blacklistEN5eosio4nameE(*($0 + [12]), $1)
	CALL $187(($16 + [208]), *($0 + [12]), $1, [0])
	if ( ($5 == 0) ){ goto $label$10 }
	CALL require_auth($1)
	*($16 + [200]) = *($16 + [208])
	$5 = *(($0 + [12]))
	*($16 + [8 align=4]) = *($16 + [200])
	$7 = CALL $188($5, ($16 + [8]))
	*($16 + [192]) = [0]
	*($16 + [184]) = (int_64)0
	$5 = (*($3 + [4]) - *($3))
	$10 = int_32($5 >> [2])
	if ( ($10 == 0) ){ goto $label$11 }
	if ( ((uint_32)$10 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$5 = CALL $955($5)
	*(($16 + [192])) = ($5 + ($10 << [2]))
	*($16 + [184]) = $5
	*($16 + [188]) = $5
	$8 = *($3)
	$10 = (*(($3 + [4])) - $8)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($5, $8, $10)
	*($16 + [188]) = (*($16 + [188]) + $10)
	
.LABEL $label$11
	$13 = *($16 + [208])
	*($16 + [176]) = $13
	*($16) = $13
	$10 = CALL $637($0, $1, $2, ($16 + [184]), $7, $16)
	$5 = *($16 + [184])
	if ( ($5 == 0) ){ goto $label$12 }
	*($16 + [188]) = $5
	CALL $956($5)
	
.LABEL $label$12
	if ( ($10 == 0) ){ goto $label$4 }
	$13 = CALL current_time()
	*(($16 + [140])) = [0]
	*(($16 + [144])) = [0]
	*($16 + [124]) = [0]
	*($16 + [128]) = [0]
	*($16 + [132]) = [0]
	*($16 + [136]) = [0]
	*($16 + [112]) = ((CASTING uint_32)(uint_64 ((uint_64)$13 / (uint_64)(int_64)1000000)) + [60])
	*($16 + [148]) = [0]
	*(($16 + [152])) = [0]
	*(($16 + [156])) = [0]
	*($16 + [160]) = [0]
	*(($16 + [164])) = [0]
	*(($16 + [168])) = [0]
	$7 = ($16 + [148])
	$9 = *($0)
	$13 = (int_64)0
	$12 = (int_64)59
	$5 = [2400]
	$14 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$18 }
	$10 = *($5)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$10 = ($10 + [165])
	goto $label$16 
	
.LABEL $label$18
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$14
	$5 = ($5 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$13 }
	*($16 + [104]) = $14
	*($16 + [96]) = $9
	$13 = (int_64)0
	$12 = (int_64)59
	$5 = [6496]
	$14 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$13 > (uint_64)(int_64)7) ){ goto $label$24 }
	$10 = *($5)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$10 = ($10 + [165])
	goto $label$22 
	
.LABEL $label$24
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$20
	$5 = ($5 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$19 }
	*($16 + [88]) = $14
	*(($16 + [68])) = [0]
	*($16 + [56]) = $2
	*($16 + [48]) = $1
	*($16 + [60 align=4]) = (int_64)0
	$5 = (*(($3 + [4])) - *($3))
	$10 = int_32($5 >> [2])
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((uint_32)$10 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$5 = CALL $955($5)
	*(($16 + [60])) = $5
	*(($2 = ($16 + [64]))) = $5
	*(($16 + [68])) = ($5 + ($10 << [2]))
	$3 = *($3)
	$10 = (*(($3 + [4])) - $3)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$25 }
	CALL memcpy($5, $3, $10)
	*($2) = (*($2) + $10)
	
.LABEL $label$25
	*($16 + [72]) = $4
	$10 = *(($16 + [152]))
	if ( ((uint_32)$10 >= (uint_32)*(($16 + [156]))) ){ goto $label$9 }
	$3 = ($16 + [56])
	$4 = (($16 + [48]) + [24])
	*($10 + [16 align=4]) = (int_64)0
	$13 = *($0)
	*($10 + [8]) = *($16 + [88])
	*($10) = $13
	*(($2 = ($10 + [24]))) = [0]
	$5 = CALL $955([16])
	*($10 + [16]) = $5
	$7 = ($5 + [16])
	*($2) = $7
	*(($5 + [8])) = *((($16 + [96]) + [8]))
	*($5) = *($16 + [96])
	*(($10 + [20])) = $7
	*($10 + [28]) = [0]
	*(($10 + [32])) = [0]
	*(($10 + [36])) = [0]
	$8 = ($10 + [28])
	$7 = *($16 + [60])
	$2 = *((($16 + [48]) + [16]))
	$11 = ($2 - $7)
	$13 = (CASTING uint_64)(uint_32 int_32($11 >> [2]))
	$5 = [10]
	
.LOOP $label$26:
	$5 = ($5 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$26 }
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$27 }
	$5 = (($11 & [-4]) + $5)
	
.LABEL $label$27
	$5 = ($5 + [4])
	if ( ($5 == 0) ){ goto $label$8 }
	CALL $194($8, $5)
	$2 = *(($10 + [32]))
	$5 = *(($10 + [28]))
	goto $label$7 
	
.LABEL $label$10
	CALL require_auth(*($0))
	*($16 + [40]) = [0]
	*($16 + [32]) = (int_64)0
	$5 = (*($3 + [4]) - *($3))
	$10 = int_32($5 >> [2])
	if ( ($10 == 0) ){ goto $label$28 }
	if ( ((uint_32)$10 >= (uint_32)[1073741824]) ){ goto $label$2 }
	$5 = CALL $955($5)
	*(($16 + [40])) = ($5 + ($10 << [2]))
	*($16 + [32]) = $5
	*($16 + [36]) = $5
	$3 = *($3)
	$10 = (*(($3 + [4])) - $3)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$28 }
	CALL memcpy($5, $3, $10)
	*($16 + [36]) = (*($16 + [36]) + $10)
	
.LABEL $label$28
	$13 = *($16 + [208])
	*($16 + [24]) = $13
	*($16 + [16 align=4]) = $13
	CALL $637($0, $1, $2, ($16 + [32]), [0], ($16 + [16]))
	$5 = *($16 + [32])
	if ( ($5 == 0) ){ goto $label$4 }
	*($16 + [36]) = $5
	CALL $956($5)
	goto $label$4 
	
.LABEL $label$9
	CALL $638($7, ($16 + [96]), $0, ($16 + [88]), ($16 + [48]))
	$5 = *($16 + [60])
	if ( $5 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$2 = [0]
	$5 = [0]
	
.LABEL $label$7
	$10 = ($2 - $5)
	CALL eosio_assert(((int_32)$10 > (int_32)[7]), [1920])
	CALL memcpy($5, ($16 + [48]), [8])
	CALL eosio_assert(((int_32)($10 + [-8]) > (int_32)[1]), [1920])
	CALL memcpy(($5 + [8]), $3, [2])
	$5 = ($5 + [10])
	$13 = (CASTING uint_64)(uint_32 int_32((*(($16 + [64])) - *(($16 + [60]))) >> [2]))
	
.LOOP $label$29:
	$10 = (CASTING uint_32)(uint_64 $13)
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	$3 = ((int_64)$13) != (int_64)0
	*($16 + [223]) = (($3) << [7]) | ($10 & [127]))
	CALL eosio_assert(((int_32)($2 - $5) > (int_32)[0]), [1920])
	CALL memcpy($5, ($16 + [223]), [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$29 }
	$3 = *(($16 + [64]))
	$10 = *(($16 + [60]))
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$30 }
	
.LOOP $label$31:
	CALL eosio_assert(((int_32)($2 - $5) > (int_32)[3]), [1920])
	CALL memcpy($5, $10, [4])
	$5 = ($5 + [4])
	$10 = ($10 + [4])
	if ( ((int_32)$3 != (int_32)$10) ){ goto $label$31 }
	
.LABEL $label$30
	CALL eosio_assert(((int_32)($2 - $5) > (int_32)[3]), [1920])
	CALL memcpy($5, $4, [4])
	*(($5 = (($16 + [112]) + [40]))) = (*($5) + [40])
	$5 = *($16 + [60])
	if ( ($5 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	*(($16 + [64])) = $5
	CALL $956($5)
	
.LABEL $label$5
	*(($16 + [132])) = [1]
	*($16 + [56]) = (int_64)0
	*($16 + [48]) = *(*(($0 + [12])) + [144])
	$13 = *($0)
	CALL $191(($16 + [96]), ($16 + [112]))
	$5 = *($16 + [96])
	CALL send_deferred(($16 + [48]), $13, $5, (*($16 + [100]) - $5), [0])
	$5 = *($16 + [96])
	if ( ($5 == 0) ){ goto $label$32 }
	*($16 + [100]) = $5
	CALL $956($5)
	
.LABEL $label$32
	CALL $192(($16 + [112]))
	
.LABEL $label$4
	*([0] + [4]) = ($16 + [224])
	return (unreachable)
	
.LABEL $label$3
	CALL $971(($16 + [184]))
	
.LABEL $label$2
	CALL $971(($16 + [32]))
	
.LABEL $label$1
	CALL $971(($16 + [60]))
	(unreachable)
	(unreachable)
}

void .FUNC $635 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [2]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [2])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$6 = int_32($7 >> [1])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $955(($6 << [2]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = [0]
	$6 = ($6 + [4])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [2]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [2]))
	$2 = ($7 + ($4 << [2]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [4])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [2]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $956($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $634 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	*($10) = (int_64)0
	$7 = [0]
	*($10 + [8]) = [0]
	$3 = *($1 + [8])
	$2 = *($1)
	$8 = (*(($1 + [16])) - *($1 + [12]))
	$5 = int_32($8 >> [2])
	if ( ($5 == 0) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$2 }
	$8 = CALL $955($8)
	*(($10 + [8])) = ($8 + ($5 << [2]))
	*($10) = $8
	*($10 + [4]) = $8
	$5 = *(($1 + [12]))
	$7 = (*(($1 + [16])) - $5)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($8, $5, $7)
	$7 = ($8 + $7)
	*($10 + [4]) = $7
	goto $label$4 
	
.LABEL $label$6
	$8 = [0]
	$9 = [0]
	$6 = [0]
	goto $label$3 
	
.LABEL $label$5
	$7 = $8
	
.LABEL $label$4
	$9 = $8
	$6 = $8
	
.LABEL $label$3
	$4 = *($1 + [24])
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$5 = (*(*($0)) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($5) + $1))
	
.LABEL $label$7
	*($10 + [24]) = [0]
	*($10 + [16]) = (int_64)0
	$0 = ($7 - $6)
	$6 = int_32($0 >> [2])
	if ( ($6 == 0) ){ goto $label$8 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$0 = CALL $955($0)
	*(($10 + [24])) = ($0 + ($6 << [2]))
	*($10 + [16]) = $0
	*($10 + [20]) = $0
	$7 = ($7 - $9)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($0, $8, $7)
	*($10 + [20]) = ($0 + $7)
	
.LABEL $label$8
	CALL void $5((int_32 $2), (int_64 ($3 & [65535])), (int_32 ($10 + [16])), (int_32 $4), (int_32 $1))
	$1 = *($10 + [16])
	if ( ($1 == 0) ){ goto $label$9 }
	*($10 + [20]) = $1
	CALL $956($1)
	
.LABEL $label$9
	$1 = *($10)
	if ( ($1 == 0) ){ goto $label$10 }
	*($10 + [4]) = $1
	CALL $956($1)
	
.LABEL $label$10
	*([0] + [4]) = ($10 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $971($10)
	
.LABEL $label$1
	CALL $971(($10 + [16]))
	(unreachable)
}

int_32 .FUNC $202 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $955([32]))) = (int_64)0
	*($6 + [8]) = [0]
	*($6 + [12]) = [0]
	*($6 + [14]) = [0]
	*($6 + [16]) = $0
	CALL $231(($8 + [32]), $6)
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $232(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $203 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	$12 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$5 = ($1 + [8])
	$4 = *($1)
	$10 = *($1 + [8])
	$7 = ($1 + [12])
	$9 = *($7)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$1 }
	$6 = int_32(($9 - $10) >> [4])
	$9 = [0]
	
.LOOP $label$2:
	*(($8 = ($10 + [4]))) = (*($8) + *((*($3) + (*($10) << [2]))))
	$10 = ($10 + [16])
	$9 = ($9 + [1])
	if ( ($9 <= $6) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert([1], [1856])
	$8 = *($5)
	$9 = *($7)
	$3 = ($9 - $8)
	$11 = (CASTING uint_64)(uint_32 int_32($3 >> [4]))
	$10 = [22]
	
.LOOP $label$3:
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$5 }
	$10 = (((int_32)uint_32(($3 + [-16]) >> [4]) * (int_32)[14]) + $10)
	goto $label$4 
	
.LABEL $label$5
	$10 = ($10 + [-14])
	
.LABEL $label$4
	if ( ($10 <= [513]) ){ goto $label$7 }
	$9 = CALL malloc($10)
	goto $label$6 
	
.LABEL $label$7
	$9 = ($13 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$6
	*($12) = $9
	*($12 + [8]) = ($9 + $10)
	CALL eosio_assert(((int_32)$10 > (int_32)[7]), [1920])
	CALL memcpy($9, $1, [8])
	*($12 + [4]) = ($9 + [8])
	CALL $151($12, $5)
	CALL db_update_i64(*($1 + [24]), $2, $9, $10)
	if ( ($10 <= [513]) ){ goto $label$8 }
	CALL free($9)
	
.LABEL $label$8
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $200 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [592])
	*([0] + [4]) = $5
	$2 = CALL read_transaction(($5 + [80]), [512])
	*($5 + [72]) = (($5 + [80]) + $2)
	*($5 + [68]) = ($5 + [80])
	*($5 + [64]) = ($5 + [80])
	$3 = CALL current_time()
	*(($5 + [28])) = [0]
	*(($5 + [32])) = [0]
	*($5 + [12]) = [0]
	*($5 + [16]) = [0]
	*($5 + [20]) = [0]
	*($5 + [24]) = [0]
	*($5) = ((CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000)) + [60])
	*($5 + [36]) = [0]
	*(($4 = ($5 + [40]))) = [0]
	*(($5 + [44])) = [0]
	*($5 + [48]) = [0]
	*(($5 + [52])) = [0]
	*(($5 + [56])) = [0]
	CALL $233(($5 + [64]), $5)
	CALL $235(CALL $234(CALL $234(($5 + [64]), ($5 + [24])), ($5 + [36])), ($5 + [48]))
	CALL eosio_assert(((int_32)((int_32)(*($4) - *($5 + [36])) / (int_32)[40]) == (int_32)$1), [2640])
	CALL eosio_assert(((int_64)*(((*($5 + [36]) + ((int_32)$1 * (int_32)[40])) + [-40])) == (int_64)*($0)), [2688])
	*($0 + [144]) = CALL _ZN14system_control18calculate_trx_hashEPci($5, ($5 + [80]), $2)
	CALL $192($5)
	*([0] + [4]) = ($5 + [592])
}

int_32 .FUNC $201 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$7 = [0]
	*(($8 + [40])) = [0]
	*($8 + [24]) = (int_64)-1
	*($8 + [32]) = (int_64)0
	$5 = *($0 + [8])
	*($8 + [8]) = $5
	*($8 + [16]) = $5
	$0 = CALL db_find_i64($5, $5, (int_64)-7948101582086733824, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $214(($8 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)($8 + [8])), [1536])
	$7 = ((int_32)(*(($0 + [16])) - *($0 + [12])) / (int_32)[12])
	$2 = *($8 + [32])
	if ( ($2 == 0) ){ goto $label$1 }
	$6 = ($8 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = *($3 + [12])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($3 + [16])) = $4
	CALL $956($4)
	
.LABEL $label$6
	CALL $956($3)
	
.LABEL $label$5
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($8 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $2
	
.LABEL $label$2
	*($6) = $2
	CALL $956($0)
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [48])
	return $7
}

int_32 .FUNC $206 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$7 = [0]
	*(($8 + [40])) = [0]
	*($8 + [24]) = (int_64)-1
	*($8 + [32]) = (int_64)0
	$5 = *($0 + [8])
	*($8 + [8]) = $5
	*($8 + [16]) = $5
	$0 = CALL db_find_i64($5, $5, (int_64)-6146850541407305728, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $159(($8 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [20]) == (int_32)($8 + [8])), [1536])
	$0 = *($0 + [8])
	$4 = *(($0 + [12]))
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$3 }
	$3 = ((int_32)($4 - $0) / (int_32)[12])
	$4 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($0 + [9])) == (int_32)$2) ){ goto $label$4 }
	$0 = ($0 + [12])
	$4 = ($4 + [1])
	if ( ($4 <= $3) ){ goto $label$5 }
	$7 = [0]
	$3 = *($8 + [32])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$7 = *($0)
	
.LABEL $label$3
	$3 = *($8 + [32])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($8 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$2 = *($4 + [8])
	if ( ($2 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $2
	CALL $956($2)
	
.LABEL $label$10
	CALL $956($4)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($8 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL $956($0)
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [48])
	return $7
}

int_32 .FUNC $207 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, float_64 $8)
{
	int_32 $9
	float_64 $10
	float_64 $11
	float_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$12 = (CASTING float_64)(uint_32 *($5 + [9]))
	$12 = ((float_64)$12 + (float_64)((float_64)$12 * (float_64)((float_64)(CASTING float_64)(int_32 $3) / (float_64)(CASTING float_64)(int_32 ($3 + [777])))))
	$14 = [1]
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$2 }
	if ( ((int_32)$7 < (int_32)[9]) ){ goto $label$1 }
	$14 = [2]
	if ( ((int_32)$7 < (int_32)[17]) ){ goto $label$1 }
	$14 = [3]
	if ( ((int_32)$7 < (int_32)[21]) ){ goto $label$1 }
	$14 = [4]
	if ( ((int_32)$7 < (int_32)[25]) ){ goto $label$1 }
	$14 = ( [5] ? [0] : ((int_32)$7 < (int_32)[27]) )
	goto $label$1 
	
.LABEL $label$2
	$14 = [0]
	
.LABEL $label$1
	$13 = ((uint_64)((int_64)((int_64)*($6) * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	*($6) = $13
	$9 = (CASTING uint_32)(uint_64 (uint_64)((int_64)$13 * (int_64)1000000000) >> (uint_64)(int_64)31)
	*($6 + [4]) = $9)
	$12 = min ( (float_64)((float_64)((float_64)((float_64)(CASTING float_64)(int_32 $2) / (float_64)(float_64)1e3) * (float_64)(float_64)20) + (float_64)$12) , (float_64)(float_64)100 )
	$7 = [6]
	if ( ((int_32)$2 < (int_32)[100]) ){ goto $label$3 }
	$7 = [8]
	if ( ((int_32)$2 < (int_32)[200]) ){ goto $label$3 }
	$7 = ( [9] ? [10] : ((int_32)$2 < (int_32)[500]) )
	
.LABEL $label$3
	$15 = ($7 + [-19])
	$10 = ((float_64)$12 / (float_64)(float_64)100)
	$7 = (($7 << [3]) + [2544])
	$11 = (CASTING float_64)(int_32 $4)
	
.LOOP $label$4:
	$12 = ((float_64)((float_64)$10 * (float_64)*($7)) * (float_64)$8)
	$3 = [1]
	$2 = $15
	$15 = ((int_32)($2 + [20]) % (int_32)[20])
	if ( ((int_32)$15 < (int_32)[5]) ){ goto $label$5 }
	$3 = [2]
	if ( ((int_32)$15 < (int_32)[8]) ){ goto $label$5 }
	$3 = [3]
	if ( ((int_32)$15 < (int_32)[10]) ){ goto $label$5 }
	$3 = [4]
	if ( ((int_32)$15 == (int_32)[10]) ){ goto $label$5 }
	$3 = ( [5] ? [0] : ((int_32)$15 < (int_32)[12]) )
	
.LABEL $label$5
	$3 = (CASTING int_32)(float_64 ((float_64)(float_64))((float_64)1 - CALL pow((float_64))((float_64)1 - ( ((float_64)$12 * (float_64)(float_64)1.2) ? $12 : ((int_32)$14 == (int_32)$3) )), $11)) * (float_64)(float_64)1e9
	if ( ((int_32)$9 < (int_32)$3))) ){ goto $label$6 }
	$7 = ($7 + [-8])
	$15 = ($2 + [-1])
	if ( ((int_32)($2 + [19]) >= (int_32)[2]) ){ goto $label$4 }
	
.LABEL $label$6
	$13 = ((uint_64)((int_64)((int_64)*($6) * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	*($6) = $13
	$7 = (CASTING uint_32)(uint_64 (uint_64)((int_64)$13 * (int_64)100) >> (uint_64)(int_64)31)
	*(($6 + [4])) = $7)
	$15 = [20]
	$14 = *($5 + [10])
	if ( ((uint_32)$14 > (uint_32)$7) ){ goto $label$7 }
	$15 = [40]
	$14 = (*($5 + [11]) + $14)
	if ( ((uint_32)$14 > (uint_32)$7) ){ goto $label$7 }
	$15 = [60]
	$14 = (*($5 + [12]) + $14)
	if ( ((uint_32)$14 > (uint_32)$7) ){ goto $label$7 }
	$15 = ( [80] ? [100] : ((uint_32)(*($5 + [13]) + $14) > (uint_32)$7) )
	
.LABEL $label$7
	return (( $2 ? [-19] : ((int_32)$9 < (int_32)$3) ) + $15)
}

int_64 .FUNC $204 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	float_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*(($6 + [40])) = [0]
	*($6 + [24]) = (int_64)-1
	$3 = *($0)
	*($6 + [8]) = $3
	*($6 + [16]) = $3
	*($6 + [32]) = (int_64)0
	$0 = CALL db_lowerbound_i64($3, $3, (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$4 }
	CALL $226(($6 + [8]), $0)
	$0 = CALL $226(($6 + [8]), CALL $fimport$18(*($6 + [8]), *(($6 + [16])), (int_64)7235159551873908736, (int_64)0))
	$5 = ((float_64)(CASTING float_64)(uint_64 *($0 + [8])) / (float_64)(CASTING float_64)(uint_32 *($0 + [16])))
	$1 = *($6 + [32])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($6 + [36])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL $956($2)
	
.LABEL $label$6
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($6 + [32]))
	goto $label$2 
	
.LABEL $label$4
	$5 = (float_64)1e3
	goto $label$1 
	
.LABEL $label$3
	$0 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $956($0)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [48])
	return $5
}

void .FUNC $205 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	$9 = *($2 + [8])
	if ( $9 ){ goto $label$1 }
	$6 = *($2)
	$9 = (CASTING uint_32)(uint_64 ((int_64)((int_64)$6 ^ (int_64)(CASTING uint_64)(uint_32 CALL tapos_block_prefix())) + (int_64)(uint_64)$6 >> (uint_64)(int_64)32)))
	
.LABEL $label$1
	$6 = *($2)
	$7 = CALL current_time()
	$2 = [0]
	$3 = CALL memset($5, [0], [64])
	$4 = (CASTING uint_32)(uint_64 ((int_64)$6 ^ (int_64)(uint_64)$6 >> (uint_64)(int_64)32)))
	$5 = (CASTING uint_32)(uint_64 $7)
	
.LOOP $label$2:
	$8 = ((int_32)$2 % (int_32)[8])
	*(($3 + $2)) = (uint_32($5 >> ([8] - $8)) | ($5 << $8))
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[64]) ){ goto $label$2 }
	$2 = CALL _ZN14system_control18calculate_trx_hashEPci($2, $3, [64])
	$5 = *($1 + [144])
	$8 = *($1 + [140])
	$1 = CALL tapos_block_prefix()
	*($0 + [4]) = [0]
	*($0) = ((int_32)((int_32)((int_32)$1 ^ (int_32)$2) ^ (int_32)(rotl((int_32) $5))) ^ (int_32)((((uint_32)$8 % (uint_32)[11]) + ((uint_32)$2 % (uint_32)[7])) + ((uint_32)$5 % (uint_32)[13])))
	*([0] + [4]) = ($3 + [64])
	(rotl((int_32) ((int_32)$4 ^ (int_32)$9)))
	((((uint_32)$8 % (uint_32)[7]) + ((uint_32)$2 % (uint_32)[13])) + ((uint_32)$5 % (uint_32)[11]))
}

void .FUNC $800 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*(($1 + [12])) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	CALL eosio_assert([1], [1920])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($5 | [8]), ($1 + [8]), [2])
	CALL db_update_i64(*($1 + [16]), $2, $5, [10])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $801 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = *([0] + [4])
	$10 = $11
	$3 = *($0 + [4])
	$2 = *($0)
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [8880]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$6 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	*($1) = $8
	*($1 + [8]) = *(*($3 + [4]))
	$4 = $11
	$5 = ($4 + [-16])
	*([0] + [4]) = $5
	CALL eosio_assert([1], [1920])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($4 + [-8]), ($1 + [8]), [2])
	$7 = *($1)
	*($1 + [16]) = CALL db_store_i64(*($2 + [8]), (int_64)-4695710445447675904, *(*($0 + [8])), $7, $5, [10])
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = $10
}

void .FUNC $802 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	$7 = *($0 + [4])
	*($1) = *(*($7))
	*($1 + [8]) = *(*($7 + [4]))
	$2 = *($0)
	*($1 + [12]) = *(*($7 + [8]))
	*($1 + [16]) = *(*($7 + [12]))
	$8 = *($1 + [20])
	$3 = *(($1 + [24]))
	$9 = (CASTING uint_64)(uint_32 int_32(($3 - $8) >> [6]))
	$7 = [18]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	$7 = ($7 + [43])
	$5 = *($8 + [52])
	$4 = *(($8 + [56]))
	$6 = ($4 - $5)
	$9 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$5 }
	$7 = ((((int_32)uint_32(($6 + [-16]) >> [4]) * (int_32)[10]) + $7) + [10])
	
.LABEL $label$5
	$8 = ($8 + [64])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ($7 <= [513]) ){ goto $label$7 }
	$8 = CALL malloc($7)
	goto $label$6 
	
.LABEL $label$7
	$8 = ($11 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$6
	*($10 + [4]) = $8
	*($10) = $8
	*($10 + [8]) = ($8 + $7)
	CALL $770($10, $1)
	$9 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)5022829029921652736, *(*($0 + [8])), $9, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL free($8)
	
.LABEL $label$8
	if ( (uint_64)($9 <= *($2 + [16])) ){ goto $label$9 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $803 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1632])
	CALL memcpy(($0 + [2]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy(($0 + [4]), *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($0 + [8]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $804 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	*($6 + [78]) = $1
	*($6 + [77]) = $2
	*($6 + [74]) = $3
	*($6 + [68]) = $4
	CALL require_auth(*($0))
	$4 = [0]
	*(($6 + [56])) = [0]
	*($6 + [40]) = (int_64)-1
	$5 = *($0)
	*($6 + [24]) = $5
	*($6 + [32]) = $5
	*($6 + [48]) = (int_64)0
	$3 = CALL db_lowerbound_i64($5, $5, (int_64)7176362860912574464, (int_64)0)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $806(($6 + [24]), $3)
	$3 = CALL db_lowerbound_i64(*($6 + [24]), *(($6 + [32])), (int_64)7176362860912574464, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $806(($6 + [24]), $3)
	
.LABEL $label$4
	$5 = *($0)
	*($6 + [12]) = ($6 + [77])
	*($6 + [8]) = ($6 + [78])
	*($6 + [16]) = ($6 + [74])
	*($6 + [20]) = ($6 + [68])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [1696])
	CALL $807(($6 + [24]), $4, $5, ($6 + [8]))
	$3 = *($6 + [48])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0)
	*($6 + [12]) = ($6 + [77])
	*($6 + [8]) = ($6 + [78])
	*($6 + [16]) = ($6 + [74])
	*($6 + [20]) = ($6 + [68])
	CALL $805($6, ($6 + [24]), $5, ($6 + [8]))
	$3 = *($6 + [48])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = ($6 + [52])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $956($4)
	
.LABEL $label$8
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($6 + [48]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $3
	
.LABEL $label$5
	*($2) = $3
	CALL $956($0)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [80])
}

void .FUNC $805 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*(($4 = CALL $955([32])) + [10]) = [0]
	*($4 + [8]) = [0]
	*($4 + [12]) = [0]
	*($4 + [16]) = [0]
	*($4 + [20]) = $1
	*($4) = (int_64)1
	*($4 + [8]) = *(*($3))
	*($4 + [10]) = *(*($3 + [4]))
	*($4 + [12]) = *(*($3 + [8]))
	*($4 + [16]) = (*(*($3 + [12])) - *([0] + [12]))
	*($8 + [56]) = (($8 + [16]) + [17])
	*($8 + [52]) = ($8 + [16])
	*($8 + [48]) = ($8 + [16])
	CALL $808(($8 + [48]), $4)
	$5 = *($4)
	*($4 + [24]) = CALL db_store_i64(*($1 + [8]), (int_64)7176362860912574464, $2, $5, ($8 + [16]), [17])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [48]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [24])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [48]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $810(($1 + [24]), ($8 + [48]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [48])
	*($8 + [48]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $956($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [64])
}

int_32 .FUNC $806 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $955([32])) + [8]) = [0]
	*($6) = (int_64)0
	*($6 + [10]) = [0]
	*($6 + [12]) = [0]
	*($6 + [16]) = [0]
	*($6 + [20]) = $0
	CALL $809(($8 + [32]), $6)
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $810(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $807 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	*($1) = (int_64)1
	*($1 + [8]) = *(*($3))
	*($1 + [10]) = *(*($3 + [4]))
	*($1 + [12]) = *(*($3 + [8]))
	*($1 + [16]) = (*(*($3 + [12])) - *([0] + [12]))
	CALL eosio_assert(((int_64)$4 == (int_64)1), [1856])
	*($5 + [40]) = ($5 + [17])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $808(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [24]), $2, $5, [17])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC $808 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [10]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [12]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $809 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [10]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [12]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $308 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ((int_32)($5 - $4) / (int_32)[20])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[214748365]) ){ goto $label$2 }
	$6 = [214748364]
	$2 = ((int_32)(*($0 + [8]) - $4) / (int_32)[20])
	if ( ((uint_32)$2 > (uint_32)[107374181]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $955(((int_32)$6 * (int_32)[20]))
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$3 * (int_32)[20])))) = *($1)
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($5 - $4)
	$5 = ($3 + ((int_32)((int_32)$1 / (int_32)[-20]) * (int_32)[20]))
	$6 = ($7 + ((int_32)$6 * (int_32)[20]))
	$3 = ($3 + [20])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $4, $1)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $3
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $956($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	CALL $796(($0 + [1104]), $1, $2, $3, $4)
}

void .FUNC _ZNSt3__19to_stringEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [18736], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $967(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $967(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $968 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $955($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $956($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $967 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$3 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$4 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($0 + [4])
	
.LABEL $label$3
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$5 }
	CALL $968($0, $3, (($1 - $3) + $4), $4, $4, [0], [0])
	$5 = *($0)
	
.LABEL $label$5
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = ($0 + [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($0 + [8])
	
.LABEL $label$6
	CALL memset(($5 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($1 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $1
	
.LABEL $label$8
	*(($5 + $1)) = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC _ZNSt3__19to_stringEi (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [18720], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $967(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $967(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $965 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = *($0)
	$3 = ($5 & [1])
	if ( $3 ){ goto $label$2 }
	$5 = uint_32($5 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$5 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	if ( $3 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$4 = ((uint_32)$5 > (uint_32)$2)
	$3 = ( $2 ? $5 : $4 )
	if ( ($3 == 0) ){ goto $label$7 }
	$0 = CALL memcmp($0, $1, $3)
	if ( $0 ){ goto $label$6 }
	
.LABEL $label$7
	$0 = ( [-1] ? $4 : ($5 <= $2) )
	
.LABEL $label$6
	return $0
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($6 + [4]) = [0]
	*($6) = [0]
	*($6 + [8]) = [0]
	*($6 + [12]) = [0]
	*($6 + [20]) = $1
	*($6 + [16]) = $1
	*($6 + [24]) = ($1 + $3)
	*($6 + [32]) = ($6 + [16])
	*($6 + [40]) = $6
	CALL $795(($6 + [40]), ($6 + [32]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($6 + [12]))
	$7 = *(($6 + [8]))
	$0 = *($6 + [4])
	$4 = *($6)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $4), (int_32 ($0 & [65535])), (int_32 $7), (int_32 $3), (int_32 $5))
	*([0] + [4]) = ($6 + [48])
	return [1]
}

int_32 .FUNC $963 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $962 (int_32 $0, int_32 $1)
{
	return CALL $961($0, $1, CALL $1004($1))
}

int_32 .FUNC $961 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $959($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $960 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $955(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $956($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $338 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $1
	*($7 + [22]) = [0]
	*($7 + [16]) = [0]
	*($7 + [32]) = [0]
	*($7 + [28]) = $3
	*($7 + [20]) = $2
	*($7 + [23]) = $4
	*($7 + [24]) = $5
	$6 = *(($0 + [40]))
	$2 = *(($0 + [44]))
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$3 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$2 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [16])
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$7 }
	$4 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$5), [1536])
	$1 = *($0 + [8])
	if ( $4 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$4 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-4345224872994013184, $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$4 = CALL $271($5, $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$5), [1536])
	$1 = *($0 + [8])
	
.LABEL $label$6
	*($7 + [12]) = ($7 + [40])
	*($7 + [8]) = ($7 + [16])
	CALL eosio_assert([1], [1696])
	CALL $340($5, $4, $1, ($7 + [8]))
	goto $label$3 
	
.LABEL $label$5
	$1 = *($0 + [8])
	
.LABEL $label$4
	*($7 + [12]) = ($7 + [40])
	*($7 + [8]) = ($7 + [16])
	CALL $339($7, $5, $1, ($7 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $339 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([40]))) = (int_64)0
	*($3 + [12 align=4]) = (int_64)0
	*($3 + [20]) = [0]
	*($3 + [24]) = $1
	CALL $341(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $273(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [12])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [16])) = $1
	CALL $956($1)
	
.LABEL $label$4
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $336 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	CALL $338($0, $1, $2, $3, $4, $5)
}

int_32 .FUNC $156 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $955([72]))) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [16]) = (int_64)512
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [38]) = [0]
	*($6 + [40]) = [0]
	*($6 + [44]) = [0]
	*($6 + [45]) = [0]
	*($6 + [46]) = [0]
	*($6 + [48]) = [0]
	*($6 + [50]) = [0]
	*($6 + [52]) = [0]
	*($6 + [54]) = [0]
	*($6 + [56]) = [0]
	*($6 + [58]) = [0]
	*($6 + [60]) = $0
	CALL $157(($8 + [32]), $6)
	*($6 + [64]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [64])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $158(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $334 (int_32 $0, int_32 $1)
{
	return ((( $1 ? [5] : ((int_32)$1 < (int_32)[5]) ) << [2]) + [12])
}

int_32 .FUNC $335 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *(($0 + [40]))
	$6 = *(($0 + [44]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [16])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$4), [1536])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-4345224872994013184, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $271($4, $6)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$4), [1536])
	
.LABEL $label$3
	return ( ($5 + [12]) ? ($0 + [68]) : $5 )
}

void .FUNC $332 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [80])
	*([0] + [4]) = $19
	*($19 + [76]) = $2
	CALL require_auth($1)
	$8 = *(($0 + [40]))
	$9 = *(($0 + [44]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$1 }
	$16 = ($9 + [-24])
	$10 = ([0] - $8)
	
.LOOP $label$2:
	if ( ((int_64)*(*($16)) == (int_64)$1) ){ goto $label$1 }
	$9 = $16
	$17 = ($16 + [-24])
	$16 = $17
	if ( ((int_32)($17 + $10) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [16])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$4 }
	$13 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$4), [1536])
	goto $label$3 
	
.LABEL $label$4
	$13 = [0]
	$16 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-4345224872994013184, $1)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$3 }
	$13 = CALL $271($4, $16)
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$4), [1536])
	
.LABEL $label$3
	$18 = *($5)
	$5 = ( ($13 + [12]) ? ($0 + [68]) : $13 )
	$16 = (*($5 + [4]) - $18)
	if ( ((int_32)$16 < (int_32)[20]) ){ goto $label$6 }
	$17 = (((uint_32)$16 / (uint_32)[20]) + [-1])
	$16 = [0]
	
.LOOP $label$7:
	$8 = ($17 - $16)
	$9 = (((int_32)$8 / (int_32)[2]) + $16)
	$14 = ($18 + ((int_32)$9 * (int_32)[20]))
	$10 = *($14)
	if ( ($10 <= $2) ){ goto $label$8 }
	if ( ((uint_32)$10 <= (uint_32)$2) ){ goto $label$5 }
	$17 = ($9 + [-1])
	if ( ((int_32)$8 > (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$16 = ($9 + [1])
	if ( ((int_32)$17 > (int_32)$9) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert([0], [2112])
	$14 = ($0 + [80])
	
.LABEL $label$5
	CALL eosio_assert((*($14 + [16]) == 0), [2208])
	*(($19 + [64])) = [0]
	$11 = *($0 + [8])
	*($19 + [32]) = $11
	*($19 + [28]) = [0]
	*($19 + [48]) = (int_64)-1
	*($19 + [56]) = (int_64)0
	*($19 + [40]) = $11
	*($19 + [24]) = ($19 + [32])
	$16 = CALL $314(($19 + [24]))
	CALL eosio_assert((*($14 + [8]) <= *(*($16 + [4]) + [8])), [3040])
	*($19 + [20]) = [0]
	$15 = *($3)
	if ( ((int_32)$15 == (int_32)*($3 + [4])) ){ goto $label$9 }
	$6 = ($0 + [80])
	$12 = ($5 + [4])
	
.LOOP $label$10:
	$7 = *($5)
	$16 = (*($12) - $7)
	if ( ((int_32)$16 < (int_32)[20]) ){ goto $label$12 }
	$2 = *($15)
	$17 = (((uint_32)$16 / (uint_32)[20]) + [-1])
	$16 = [0]
	
.LOOP $label$13:
	$8 = ($17 - $16)
	$9 = (((int_32)$8 / (int_32)[2]) + $16)
	$18 = ($7 + ((int_32)$9 * (int_32)[20]))
	$10 = *($18)
	if ( ($10 <= $2) ){ goto $label$14 }
	if ( ((uint_32)$10 <= (uint_32)$2) ){ goto $label$11 }
	$17 = ($9 + [-1])
	if ( ((int_32)$8 > (int_32)[1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$16 = ($9 + [1])
	if ( ((int_32)$17 > (int_32)$9) ){ goto $label$13 }
	
.LABEL $label$12
	CALL eosio_assert([0], [2112])
	$18 = $6
	
.LABEL $label$11
	$16 = *($18 + [8])
	CALL eosio_assert(((int_32)*($18 + [4]) == (int_32)*(($14 + [4]))), [3072])
	*($19 + [20]) = (($16 + *($19 + [20])) + [1])
	$15 = ($15 + [4])
	if ( ((int_32)$15 != (int_32)*(($3 + [4]))) ){ goto $label$10 }
	
.LABEL $label$9
	CALL $344($0, $1, $3)
	$1 = *(($0 + [8]))
	*($19 + [12]) = ($19 + [20])
	*($19 + [8]) = ($19 + [76])
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [1696])
	CALL $345($4, $13, $1, ($19 + [8]))
	$2 = *($19 + [56])
	if ( ($2 == 0) ){ goto $label$15 }
	$9 = ($19 + [60])
	$16 = *($9)
	if ( ((int_32)$16 == (int_32)$2) ){ goto $label$17 }
	
.LOOP $label$18:
	$16 = ($16 + [-24])
	$17 = *($16)
	*($16) = [0]
	if ( ($17 == 0) ){ goto $label$19 }
	CALL $956($17)
	
.LABEL $label$19
	if ( ((int_32)$2 != (int_32)$16) ){ goto $label$18 }
	$16 = *(($19 + [56]))
	goto $label$16 
	
.LABEL $label$17
	$16 = $2
	
.LABEL $label$16
	*($9) = $2
	CALL $956($16)
	
.LABEL $label$15
	*([0] + [4]) = ($19 + [80])
}

int_32 .FUNC $333 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [176])
	*([0] + [4]) = $14
	CALL $187(($14 + [168]), *($0 + [56]), $1, [0])
	*($14 + [167]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL require_auth($1)
	*($14 + [152]) = *($14 + [168])
	$5 = *(($0 + [56]))
	*($14 + [8 align=4]) = *($14 + [152])
	$5 = CALL $188($5, ($14 + [8]))
	$11 = *($14 + [168])
	*($14 + [144]) = $11
	*($14) = $11
	if ( (CALL $342($0, $1, $3, $5, ($14 + [167]), $14) == 0) ){ goto $label$2 }
	$11 = CALL current_time()
	*(($14 + [108])) = [0]
	*(($14 + [112])) = [0]
	*($14 + [92]) = [0]
	*($14 + [96]) = [0]
	*($14 + [100]) = [0]
	*($14 + [104]) = [0]
	*($14 + [80]) = ((CASTING uint_32)(uint_64 ((uint_64)$11 / (uint_64)(int_64)1000000)) + [60])
	*($14 + [116]) = [0]
	*(($14 + [120])) = [0]
	*(($14 + [124])) = [0]
	*($14 + [128]) = [0]
	*(($14 + [132])) = [0]
	*((($14 + [80]) + [56])) = [0]
	$6 = ($0 + [8])
	$8 = ($14 + [116])
	$7 = *($0 + [8])
	$11 = (int_64)0
	$10 = (int_64)59
	$5 = [2400]
	$12 = (int_64)0
	
.LOOP $label$4:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$9 }
	$9 = *($5)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$9 = ($9 + [165])
	goto $label$7 
	
.LABEL $label$9
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$5
	$5 = ($5 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$4 }
	*($14 + [72]) = $12
	*($14 + [64]) = $7
	$11 = (int_64)0
	$10 = (int_64)59
	$5 = [2944]
	$12 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$11 > (uint_64)(int_64)9) ){ goto $label$15 }
	$9 = *($5)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$9 = ($9 + [165])
	goto $label$13 
	
.LABEL $label$15
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$11
	$5 = ($5 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$10 }
	*($14 + [56]) = $12
	*($14 + [40]) = $2
	*($14 + [32]) = $1
	*($14 + [44]) = $3
	*($14 + [48]) = $4
	CALL $311($8, ($14 + [64]), $6, ($14 + [56]), ($14 + [32]))
	$11 = *(($0 + [8]))
	$13 = *(*(($0 + [56])) + [144])
	*(($14 + [100])) = [1]
	*($14 + [40]) = (int_64)0
	*($14 + [32]) = $13
	CALL $191(($14 + [64]), ($14 + [80]))
	$5 = [0]
	$9 = *($14 + [64])
	CALL send_deferred(($14 + [32]), $11, $9, (*($14 + [68]) - $9), [0])
	$9 = *($14 + [64])
	if ( ($9 == 0) ){ goto $label$16 }
	*($14 + [68]) = $9
	CALL $956($9)
	
.LABEL $label$16
	CALL $192(($14 + [80]))
	goto $label$1 
	
.LABEL $label$3
	CALL require_auth(*($0 + [8]))
	$11 = *($14 + [168])
	*($14 + [24]) = $11
	*($14 + [16 align=4]) = $11
	CALL $342($0, $1, $3, [0], ($14 + [167]), ($14 + [16]))
	
.LABEL $label$2
	$5 = *($14 + [167])
	
.LABEL $label$1
	*([0] + [4]) = ($14 + [176])
	return int_32(($5 << [24]) >> [24])
}

void .FUNC $330 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [256])
	*([0] + [4]) = $18
	CALL eosio_assert(((int_32)*($4 + [4]) != (int_32)*($4)), [3344])
	$8 = *(($7 + [32]))
	$7 = *($0 + [60])
	$13 = *(($7 + [36]))
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$1 }
	$12 = ($13 + [-24])
	$9 = ([0] - $8)
	
.LOOP $label$2:
	if ( ((int_64)*(*($12)) == (int_64)$1) ){ goto $label$1 }
	$13 = $12
	$10 = ($12 + [-24])
	$12 = $10
	if ( ((int_32)($10 + $9) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$10 = ($7 + [8])
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$4 }
	$12 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [40]) == (int_32)$10), [1536])
	goto $label$3 
	
.LABEL $label$4
	$12 = [0]
	$13 = CALL db_find_i64(*(($7 + [8])), *(($7 + [16])), (int_64)-4223691270582697984, $1)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$3 }
	$12 = CALL $274($10, $13)
	CALL eosio_assert(((int_32)*($12 + [40]) == (int_32)$10), [1536])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [2368])
	CALL $187(($18 + [216]), *($0 + [56]), $1, [0])
	if ( ($6 == 0) ){ goto $label$12 }
	CALL require_auth($1)
	*($18 + [208]) = *($18 + [216])
	$13 = *(($0 + [56]))
	*($18 + [24 align=4]) = *($18 + [208])
	$13 = CALL $188($13, ($18 + [24]))
	*($18 + [200]) = $10
	*($18 + [204]) = $12
	*($18 + [192]) = *($18 + [216])
	*($18 + [16 align=4]) = *($18 + [200])
	*(($18 + [12])) = *($18 + [196])
	*($18 + [8]) = *($18 + [192])
	if ( (CALL $349($0, ($18 + [16]), $3, $4, $13, ($18 + [8])) == 0) ){ goto $label$6 }
	$15 = CALL current_time()
	*(($18 + [156])) = [0]
	*(($18 + [160])) = [0]
	*($18 + [140]) = [0]
	*($18 + [144]) = [0]
	*($18 + [148]) = [0]
	*($18 + [152]) = [0]
	*($18 + [128]) = ((CASTING uint_32)(uint_64 ((uint_64)$15 / (uint_64)(int_64)1000000)) + [60])
	*($18 + [164]) = [0]
	*(($18 + [168])) = [0]
	*(($18 + [172])) = [0]
	*($18 + [176]) = [0]
	*(($18 + [180])) = [0]
	*((($18 + [128]) + [56])) = [0]
	$13 = ($0 + [8])
	$9 = ($18 + [164])
	$11 = *($0 + [8])
	$15 = (int_64)0
	$14 = (int_64)59
	$12 = [2400]
	$16 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$18 }
	$10 = *($12)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$10 = ($10 + [165])
	goto $label$16 
	
.LABEL $label$18
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$14
	$12 = ($12 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$13 }
	*($18 + [120]) = $16
	*($18 + [112]) = $11
	$15 = (int_64)0
	$14 = (int_64)59
	$12 = [3392]
	$16 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$15 > (uint_64)(int_64)6) ){ goto $label$24 }
	$10 = *($12)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$10 = ($10 + [165])
	goto $label$22 
	
.LABEL $label$24
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$20
	$12 = ($12 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$19 }
	*($18 + [104]) = $16
	*(($18 + [84])) = [0]
	*(($18 + [88])) = [0]
	*($18 + [72]) = $2
	*($18 + [64]) = $1
	*($18 + [76]) = $3
	*($18 + [80]) = [0]
	$12 = (*(($4 + [4])) - *($4))
	$10 = int_32($12 >> [2])
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((uint_32)$10 >= (uint_32)[1073741824]) ){ goto $label$5 }
	$12 = CALL $955($12)
	*(($18 + [80])) = $12
	*(($7 = ($18 + [84]))) = $12
	*(($18 + [88])) = ($12 + ($10 << [2]))
	$4 = *($4)
	$10 = (*(($4 + [4])) - $4)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$25 }
	CALL memcpy($12, $4, $10)
	*($7) = (*($7) + $10)
	
.LABEL $label$25
	*($18 + [92]) = $5
	$10 = *(($18 + [168]))
	if ( ((uint_32)$10 >= (uint_32)*(($18 + [172]))) ){ goto $label$11 }
	*($10 + [16 align=4]) = (int_64)0
	$15 = *($13)
	*($10 + [8]) = *($18 + [104])
	*($10) = $15
	*(($13 = ($10 + [24]))) = [0]
	$12 = CALL $955([16])
	*($10 + [16]) = $12
	$9 = ($12 + [16])
	*($13) = $9
	*(($12 + [8])) = *((($18 + [112]) + [8]))
	*($12) = *($18 + [112])
	*(($10 + [20])) = $9
	*($10 + [28]) = [0]
	*(($10 + [32])) = [0]
	*(($10 + [36])) = [0]
	$4 = ($10 + [28])
	$9 = *($18 + [80])
	$13 = *((($18 + [64]) + [20]))
	$7 = ($13 - $9)
	$15 = (CASTING uint_64)(uint_32 int_32($7 >> [2]))
	$12 = [14]
	
.LOOP $label$26:
	$12 = ($12 + [1])
	$15 = (uint_64)$15 >> (uint_64)(int_64)7
	if ( ((int_64)$15) != (int_64)0) ){ goto $label$26 }
	if ( ((int_32)$9 == (int_32)$13) ){ goto $label$27 }
	$12 = (($7 & [-4]) + $12)
	
.LABEL $label$27
	$12 = ($12 + [4])
	if ( ($12 == 0) ){ goto $label$10 }
	CALL $194($4, $12)
	$13 = *(($10 + [32]))
	$12 = *(($10 + [28]))
	goto $label$9 
	
.LABEL $label$12
	CALL require_auth(*($0 + [8]))
	*($18 + [56]) = $10
	*($18 + [60]) = $12
	*($18 + [48]) = *($18 + [216])
	*($18 + [40 align=4]) = *($18 + [56])
	*(($18 + [36])) = *($18 + [52])
	*($18 + [32]) = *($18 + [48])
	CALL $349($0, ($18 + [40]), $3, $4, [0], ($18 + [32]))
	goto $label$6 
	
.LABEL $label$11
	CALL $322($9, ($18 + [112]), $13, ($18 + [104]), ($18 + [64]))
	$12 = *($18 + [80])
	if ( $12 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$13 = [0]
	$12 = [0]
	
.LABEL $label$9
	*($18 + [228]) = $12
	*($18 + [224]) = $12
	*($18 + [232]) = $13
	*($18 + [240]) = ($18 + [224])
	*($18 + [248]) = ($18 + [64])
	CALL $321(($18 + [248]), ($18 + [240]))
	*(($12 = (($18 + [128]) + [40]))) = (*($12) + [40])
	$12 = *($18 + [80])
	if ( ($12 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	*(($18 + [84])) = $12
	CALL $956($12)
	
.LABEL $label$7
	*(($18 + [148])) = [1]
	*($18 + [72]) = (int_64)0
	*($18 + [64]) = *(*(($0 + [56])) + [144])
	$15 = *(($0 + [8]))
	CALL $191(($18 + [112]), ($18 + [128]))
	$12 = *($18 + [112])
	CALL send_deferred(($18 + [64]), $15, $12, (*($18 + [116]) - $12), [0])
	$12 = *($18 + [112])
	if ( ($12 == 0) ){ goto $label$28 }
	*($18 + [116]) = $12
	CALL $956($12)
	
.LABEL $label$28
	CALL $192(($18 + [128]))
	
.LABEL $label$6
	*([0] + [4]) = ($18 + [256])
	return (unreachable)
	
.LABEL $label$5
	CALL $971(($18 + [80]))
}

int_32 .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [12]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [17]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [18]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [20]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [22]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [24]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [26]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [27]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [28]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [30]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [36]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [38]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1632])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [44]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1632])
	CALL memcpy(($1 + [45]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [46]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [48]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [50]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [52]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [54]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [56]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [58]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	return $0
}

int_32 .FUNC $440 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1648])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [3])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $441($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [3]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$3 = *($4)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[3]), [1632])
	CALL memcpy($7, *($4), [4])
	$3 = (*($4) + [4])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[1]), [1632])
	CALL memcpy(($7 + [4]), *($4), [2])
	$3 = (*($4) + [2])
	*($4) = $3
	CALL eosio_assert(((int_32)*($6) != (int_32)$3), [1632])
	CALL memcpy(($7 + [6]), *($4), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $441 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $6) >> [3]) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$3 = int_32(($6 - $5) >> [3])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$4 }
	$6 = [536870911]
	$2 = ($2 - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$7 }
	$6 = int_32($2 >> [2])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $955(($6 << [3]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($6) = (int_64)0
	*($6 + [4]) = [0]
	*($6) = [0]
	*($6 + [6]) = [0]
	$6 = (*($0) + [8])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $971($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($6 << [3]))
	$5 = ($2 + ($3 << [3]))
	$6 = $5
	
.LOOP $label$9:
	*($6) = (int_64)0
	*($6 + [4]) = [0]
	*($6) = [0]
	*($6 + [6]) = [0]
	$6 = ($6 + [8])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $956($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $442 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($2)), [1648])
	$4 = *($3)
	$7 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$4 = *($1 + [4])
	$3 = ((int_32)($4 - $7) / (int_32)[40])
	$6 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$4 }
	CALL $444($1, ($6 - $3))
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$6 >= (uint_32)$3) ){ goto $label$5 }
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	*(($1 + [4])) = $4
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	*($8) = $0
	*($8 + [8]) = $7
	*((($8 + [8]) + [8])) = ($7 + [12])
	*((($8 + [8]) + [12])) = ($7 + [16])
	*((($8 + [8]) + [16])) = ($7 + [24])
	*($8 + [12]) = ($7 + [8])
	CALL $445(($8 + [8]), $8)
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [32])
	return $0
}

void .FUNC $443 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [16])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [20])) = $6
	CALL $956($6)
	
.LABEL $label$11
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $956($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $444 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)((int_32)($7 - $6) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$8 = *($0)
	$2 = ((int_32)($6 - $8) / (int_32)[40])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[107374183]) ){ goto $label$3 }
	$6 = [107374182]
	$7 = ((int_32)($7 - $8) / (int_32)[40])
	if ( ((uint_32)$7 > (uint_32)[53687090]) ){ goto $label$6 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$7 = CALL $955(((int_32)$6 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*(($6 + [8])) = (int_64)0
	*($6) = (int_64)0
	*($6 + [16]) = (int_64)0
	*($6 + [24]) = (int_64)0
	*(($7 = ($6 + [32]))) = (int_64)1397703940
	*(($6 + [12])) = [0]
	CALL eosio_assert([1], [3712])
	$5 = (uint_64)*($7) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [3776])
	$6 = (*($8) + [40])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $971($0)
	
.LABEL $label$2
	$3 = ($7 + ((int_32)$6 * (int_32)[40]))
	$2 = ($7 + ((int_32)$2 * (int_32)[40]))
	$7 = $2
	
.LOOP $label$13:
	*(($7 + [8])) = (int_64)0
	*($7) = (int_64)0
	*($7 + [16]) = (int_64)0
	*($7 + [24]) = (int_64)0
	*(($6 = ($7 + [32]))) = (int_64)1397703940
	*(($7 + [12])) = [0]
	CALL eosio_assert([1], [3712])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$8 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$8 = [0]
	
.LABEL $label$14
	CALL eosio_assert($8, [3776])
	$7 = ($7 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$13 }
	$6 = *($0)
	$4 = ($0 + [4])
	$8 = (*($4) - $6)
	$1 = ($2 + ((int_32)((int_32)$8 / (int_32)[-40]) * (int_32)[40]))
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$19 }
	CALL memcpy($1, $6, $8)
	$6 = *($0)
	
.LABEL $label$19
	*($0) = $1
	*($4) = $7
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $956($6)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $445 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($2, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [1632])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $446 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [140]) = $3
	$5 = ((int_32)((int_32)(CASTING uint_32)(uint_64 $1) ^ (int_32)$2) ^ (int_32)[-1431655766])
	$4 = (CASTING uint_32)(uint_64 (int_64))(((uint_64)CALL publication_time() / (uint_64)(int_64)1000000) - *([0] + [12])))
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$6 = CALL _ZN14system_control19calculate_trx_hash3Em($3, $2)
	CALL eosio_assert(((int_32)($4 + [60]) > (int_32)$5), [5200])
	CALL eosio_assert(((int_32)($4 - $5) < (int_32)[90]), [5264])
	CALL eosio_assert(((int_32)($6 & [2147483647]) == (int_32)$3), [5328])
	CALL $453($0, $1, $2, $3, $5)
	return 
	
.LABEL $label$1
	$6 = CALL _ZN14system_control19calculate_trx_hash3Em($3, $5)
	CALL eosio_assert(((int_32)($4 + [60]) > (int_32)$5), [5200])
	CALL eosio_assert(((int_32)($4 - $5) < (int_32)[90]), [5264])
	CALL eosio_assert(((int_32)($6 | [-2147483648]) == (int_32)$3), [5328])
	CALL $453($0, $1, $2, $3, $5)
}

int_32 .FUNC $447 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $955([48])) + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$7 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [3776])
	*($4 + [36]) = $0
	*($4 + [32]) = [0]
	CALL $451(($8 + [32]), $4)
	*($4 + [40]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [40])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $452($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $956($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $448 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	*($7 + [56]) = $2
	*(($7 + [48])) = [0]
	*($7 + [32]) = (int_64)-1
	*($7 + [40]) = (int_64)0
	$2 = *($0 + [8])
	*($7 + [16]) = $2
	*($7 + [24]) = $2
	$6 = [0]
	$4 = CALL db_find_i64($2, $2, (int_64)-7948101582086733824, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $214(($7 + [16]), $4)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($7 + [16])), [1536])
	
.LABEL $label$1
	$4 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($4, [3568])
	*($7 + [12]) = [-1]
	$2 = *(($0 + [8]))
	*($7 + [4]) = ($7 + [12])
	*($7) = ($7 + [56])
	CALL eosio_assert($4, [1696])
	CALL $450(($7 + [16]), $6, $2, $7)
	CALL eosio_assert(((int_32)uint_32(*($7 + [12]) >> [31]) ^ (int_32)[1]), [3568])
	$3 = *($7 + [40])
	if ( ($3 == 0) ){ goto $label$2 }
	$5 = ($7 + [44])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	$4 = *($0 + [12])
	if ( ($4 == 0) ){ goto $label$7 }
	*(($0 + [16])) = $4
	CALL $956($4)
	
.LABEL $label$7
	CALL $956($0)
	
.LABEL $label$6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$5 }
	$6 = *(($7 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$6 = $3
	
.LABEL $label$3
	*($5) = $3
	CALL $956($6)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [64])
}

void .FUNC $449 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [36])) == (int_32)$0), [5024])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [5072])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [5136])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $956($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $956($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [40]))
}

void .FUNC $919 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL require_auth($1)
	$4 = *(($3 + [32]))
	$3 = *($0 + [20])
	$8 = *(($3 + [36]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($3 + [8])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$6), [1536])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($3 + [8])), *(($3 + [16])), (int_64)-4223691270582697984, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $274($6, $8)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$6), [1536])
	
.LABEL $label$3
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [3312])
	*($9 + [12]) = CALL $350($0, $1, $2, [0])
	$1 = *($0 + [8])
	*($9 + [8]) = ($9 + [12])
	CALL eosio_assert($8, [1696])
	CALL $926($6, $7, $1, ($9 + [8]))
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $118 (int_32 $0, int_64 $1)
{
	CALL $567(($0 + [880]), $1)
}

void .FUNC $119 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL $562(($0 + [880]), $1, $2)
}

void .FUNC $686 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [16]) = (*($1 + [16]) + *(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [40]) = ($5 + [21])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $212(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [28]), $2, $5, [21])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC $687 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [10]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [12]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [14]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [18]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [20]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [22]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [24]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	return $0
}

void .FUNC $684 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$5 = (*([0] + [4]) - [48])
	$12 = $5
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	$11 = $4
	$10 = *($1 + [16])
	$6 = ($1 + [20])
	$9 = *($6)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$1 }
	$8 = int_32(($9 - $10) >> [4])
	$9 = [0]
	$7 = (*(*($3)) & [65535])
	
.LOOP $label$3:
	if ( ((int_32)*($10) == (int_32)$7) ){ goto $label$2 }
	$10 = ($10 + [16])
	$9 = ($9 + [1])
	if ( ($9 <= $8) ){ goto $label$3 }
	$11 = $4
	goto $label$1 
	
.LABEL $label$2
	$9 = ($10 + [12])
	CALL eosio_assert(((int_32)*($9) ^ (int_32)[1]), [7344])
	$10 = ($10 + [8])
	CALL eosio_assert((*($10) <= *(*($3 + [8]))), [7360])
	if ( *(*($3 + [12])) ){ goto $label$4 }
	*($9) = [1]
	*($10) = (*(*($3 + [16])) + *(*(($3 + [8]))))
	
.LABEL $label$4
	*(*($3 + [20])) = [1]
	$11 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$11), [1856])
	$9 = [16]
	$7 = *(($1 + [16]))
	$10 = *($6)
	$8 = ($10 - $7)
	$11 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$5:
	$9 = ($9 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$6 }
	$9 = ((((int_32)uint_32(($8 + [-16]) >> [4]) * (int_32)[11]) + $9) + [11])
	
.LABEL $label$6
	if ( ($9 <= [513]) ){ goto $label$8 }
	$3 = CALL malloc($9)
	goto $label$7 
	
.LABEL $label$8
	$3 = ($5 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$7
	*($12 + [8]) = $3
	$5 = ($3 + $9)
	*($12 + [16]) = $5
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [1920])
	CALL memcpy($3, $1, [8])
	$10 = ($3 + [8])
	CALL eosio_assert(((int_32)($5 - $10) > (int_32)[3]), [1920])
	CALL memcpy($10, ($1 + [8]), [4])
	$10 = ($3 + [12])
	CALL eosio_assert(((int_32)($5 - $10) > (int_32)[3]), [1920])
	CALL memcpy($10, ($1 + [12]), [4])
	$10 = ($3 + [16])
	*($12 + [12]) = $10
	$11 = (CASTING uint_64)(uint_32 int_32((*(($1 + [20])) - *(($1 + [16]))) >> [4]))
	
.LOOP $label$9:
	$7 = (CASTING uint_32)(uint_64 $11)
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	$8 = ((int_64)$11) != (int_64)0
	*($12 + [32]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)($5 - $10) > (int_32)[0]), [1920])
	CALL memcpy($10, ($12 + [32]), [1])
	$10 = ($10 + [1])
	*($12 + [12]) = $10
	if ( $8 ){ goto $label$9 }
	$7 = *(($1 + [20]))
	$10 = *(($1 + [16]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$10 }
	
.LOOP $label$11:
	*($12 + [24]) = ($12 + [8])
	*($12 + [32]) = $10
	*((($12 + [32]) + [8])) = ($10 + [8])
	*((($12 + [32]) + [12])) = ($10 + [12])
	*($12 + [36]) = ($10 + [4])
	CALL $689(($12 + [32]), ($12 + [24]))
	$10 = ($10 + [16])
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$11 }
	
.LABEL $label$10
	CALL db_update_i64(*($1 + [32]), $2, $3, $9)
	if ( ($9 <= [513]) ){ goto $label$12 }
	CALL free($3)
	
.LABEL $label$12
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*([0] + [4]) = ($12 + [48])
}

int_32 .FUNC $685 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $955([40]))) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [16]) = (int_64)0
	*($6 + [24]) = [0]
	*($6 + [28]) = $0
	CALL $687(($8 + [32]), $6)
	*($6 + [32]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [32])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $688(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $299 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [80])
	*([0] + [4]) = $19
	*($19 + [76]) = $2
	CALL require_auth($1)
	$8 = *(($0 + [40]))
	$9 = *(($0 + [44]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$1 }
	$16 = ($9 + [-24])
	$10 = ([0] - $8)
	
.LOOP $label$2:
	if ( ((int_64)*(*($16)) == (int_64)$1) ){ goto $label$1 }
	$9 = $16
	$17 = ($16 + [-24])
	$16 = $17
	if ( ((int_32)($17 + $10) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [16])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$4 }
	$13 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$4), [1536])
	goto $label$3 
	
.LABEL $label$4
	$13 = [0]
	$16 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)8526756653867991040, $1)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$3 }
	$13 = CALL $178($4, $16)
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$4), [1536])
	
.LABEL $label$3
	$18 = *($5)
	$5 = ( ($13 + [12]) ? ($0 + [68]) : $13 )
	$16 = (*($5 + [4]) - $18)
	if ( ((int_32)$16 < (int_32)[20]) ){ goto $label$6 }
	$17 = (((uint_32)$16 / (uint_32)[20]) + [-1])
	$16 = [0]
	
.LOOP $label$7:
	$8 = ($17 - $16)
	$9 = (((int_32)$8 / (int_32)[2]) + $16)
	$14 = ($18 + ((int_32)$9 * (int_32)[20]))
	$10 = *($14)
	if ( ($10 <= $2) ){ goto $label$8 }
	if ( ((uint_32)$10 <= (uint_32)$2) ){ goto $label$5 }
	$17 = ($9 + [-1])
	if ( ((int_32)$8 > (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$16 = ($9 + [1])
	if ( ((int_32)$17 > (int_32)$9) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert([0], [2112])
	$14 = ($0 + [80])
	
.LABEL $label$5
	CALL eosio_assert((*($14 + [16]) == 0), [2208])
	*(($19 + [64])) = [0]
	$11 = *($0 + [8])
	*($19 + [32]) = $11
	*($19 + [28]) = [0]
	*($19 + [48]) = (int_64)-1
	*($19 + [56]) = (int_64)0
	*($19 + [40]) = $11
	*($19 + [24]) = ($19 + [32])
	$16 = CALL $314(($19 + [24]))
	CALL eosio_assert((*($14 + [8]) <= *(*($16 + [4]) + [8])), [3040])
	*($19 + [20]) = [0]
	$15 = *($3)
	if ( ((int_32)$15 == (int_32)*($3 + [4])) ){ goto $label$9 }
	$6 = ($0 + [80])
	$12 = ($5 + [4])
	
.LOOP $label$10:
	$7 = *($5)
	$16 = (*($12) - $7)
	if ( ((int_32)$16 < (int_32)[20]) ){ goto $label$12 }
	$2 = *($15)
	$17 = (((uint_32)$16 / (uint_32)[20]) + [-1])
	$16 = [0]
	
.LOOP $label$13:
	$8 = ($17 - $16)
	$9 = (((int_32)$8 / (int_32)[2]) + $16)
	$18 = ($7 + ((int_32)$9 * (int_32)[20]))
	$10 = *($18)
	if ( ($10 <= $2) ){ goto $label$14 }
	if ( ((uint_32)$10 <= (uint_32)$2) ){ goto $label$11 }
	$17 = ($9 + [-1])
	if ( ((int_32)$8 > (int_32)[1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$16 = ($9 + [1])
	if ( ((int_32)$17 > (int_32)$9) ){ goto $label$13 }
	
.LABEL $label$12
	CALL eosio_assert([0], [2112])
	$18 = $6
	
.LABEL $label$11
	$16 = *($18 + [8])
	CALL eosio_assert(((int_32)*($18 + [4]) == (int_32)*(($14 + [4]))), [3072])
	*($19 + [20]) = (($16 + *($19 + [20])) + [1])
	$15 = ($15 + [4])
	if ( ((int_32)$15 != (int_32)*(($3 + [4]))) ){ goto $label$10 }
	
.LABEL $label$9
	CALL $315($0, $1, $3)
	$1 = *(($0 + [8]))
	*($19 + [12]) = ($19 + [20])
	*($19 + [8]) = ($19 + [76])
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [1696])
	CALL $316($4, $13, $1, ($19 + [8]))
	$2 = *($19 + [56])
	if ( ($2 == 0) ){ goto $label$15 }
	$9 = ($19 + [60])
	$16 = *($9)
	if ( ((int_32)$16 == (int_32)$2) ){ goto $label$17 }
	
.LOOP $label$18:
	$16 = ($16 + [-24])
	$17 = *($16)
	*($16) = [0]
	if ( ($17 == 0) ){ goto $label$19 }
	CALL $956($17)
	
.LABEL $label$19
	if ( ((int_32)$2 != (int_32)$16) ){ goto $label$18 }
	$16 = *(($19 + [56]))
	goto $label$16 
	
.LABEL $label$17
	$16 = $2
	
.LABEL $label$16
	*($9) = $2
	CALL $956($16)
	
.LABEL $label$15
	*([0] + [4]) = ($19 + [80])
}

void .FUNC $298 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	CALL require_auth($1)
	*($8 + [12]) = CALL $315($0, $1, $2)
	$4 = *(($3 + [32]))
	$3 = *($0 + [60])
	$7 = *(($3 + [36]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	$2 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($2)) == (int_64)$1) ){ goto $label$1 }
	$7 = $2
	$6 = ($2 + [-24])
	$2 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($3 + [8])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$2 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$6), [1536])
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	$7 = CALL db_find_i64(*(($3 + [8])), *(($3 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $186($6, $7)
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$6), [1536])
	
.LABEL $label$3
	$7 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($7, [3312])
	$1 = *($0 + [8])
	*($8 + [8]) = ($8 + [12])
	CALL eosio_assert($7, [1696])
	CALL $319($6, $2, $1, ($8 + [8]))
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $680 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [176])
	*([0] + [4]) = $13
	CALL $187(($13 + [168]), *($0 + [16]), $1, [0])
	if ( ($4 == 0) ){ goto $label$2 }
	CALL require_auth($1)
	*($13 + [160]) = *($13 + [168])
	$4 = *(($0 + [16]))
	*($13 + [16 align=4]) = *($13 + [160])
	$4 = CALL $188($4, ($13 + [16]))
	$10 = *($13 + [168])
	*($13 + [152]) = $10
	*($13 + [8 align=4]) = $10
	if ( (CALL $681($0, $1, $2, $4, ($13 + [8])) == 0) ){ goto $label$1 }
	$10 = CALL current_time()
	*(($13 + [116])) = [0]
	*(($13 + [120])) = [0]
	*($13 + [100]) = [0]
	*($13 + [104]) = [0]
	*($13 + [108]) = [0]
	*($13 + [112]) = [0]
	*($13 + [88]) = ((CASTING uint_32)(uint_64 ((uint_64)$10 / (uint_64)(int_64)1000000)) + [60])
	*($13 + [124]) = [0]
	*(($13 + [128])) = [0]
	*(($13 + [132])) = [0]
	*($13 + [136]) = [0]
	*(($13 + [140])) = [0]
	*(($13 + [144])) = [0]
	$5 = ($0 + [8])
	$7 = ($13 + [124])
	$6 = *($0 + [8])
	$10 = (int_64)0
	$9 = (int_64)59
	$4 = [2400]
	$11 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$8 }
	$8 = *($4)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$8 = ($8 + [165])
	goto $label$6 
	
.LABEL $label$8
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$4
	$4 = ($4 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$3 }
	*($13 + [72]) = $11
	*($13 + [64]) = $6
	$10 = (int_64)0
	$12 = (int_64)59
	$4 = [7184]
	$11 = (int_64)0
	
.LOOP $label$9:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$10 }
	$8 = *($4)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$8 = ($8 + [165])
	goto $label$11 
	
.LABEL $label$12
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$10
	$4 = ($4 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$9 }
	*($13 + [56]) = $11
	*($13 + [48]) = $2
	*($13 + [40]) = $1
	*($13 + [52]) = $3
	CALL $682($7, ($13 + [64]), $5, ($13 + [56]), ($13 + [40]))
	$10 = *(($0 + [8]))
	$12 = *(*(($0 + [16])) + [144])
	*(($13 + [108])) = [1]
	*($13 + [72]) = (int_64)0
	*($13 + [64]) = $12
	CALL $191(($13 + [40]), ($13 + [88]))
	$4 = *($13 + [40])
	CALL send_deferred(($13 + [64]), $10, $4, (*($13 + [44]) - $4), [0])
	$4 = *($13 + [40])
	if ( ($4 == 0) ){ goto $label$13 }
	*($13 + [44]) = $4
	CALL $956($4)
	
.LABEL $label$13
	CALL $192(($13 + [88]))
	goto $label$1 
	
.LABEL $label$2
	CALL require_auth(*($0 + [8]))
	$10 = *($13 + [168])
	*($13 + [32]) = $10
	*($13 + [24 align=4]) = $10
	CALL $681($0, $1, $2, [0], ($13 + [24]))
	
.LABEL $label$1
	*([0] + [4]) = ($13 + [176])
}

int_32 .FUNC $681 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	float_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	float_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [352])
	*([0] + [4]) = $15
	*($15 + [270]) = $2
	*($15 + [269]) = $3
	CALL $200(*($0 + [16]), [1])
	$14 = (float_64)1
	$9 = CALL pow((float_64)2, ((float_64)max ( (float_64)((float_64)CALL $204(*($0 + [16])) / (float_64)(float_64)1e3) , (float_64)(float_64)1 ) + (float_64)(float_64)-1))
	$3 = [0]
	$2 = (CASTING uint_32)(uint_64 (int_64))(((uint_64)CALL publication_time() / (uint_64)(int_64)1000000) - *([0] + [12]))
	if ( ($2) <= [48892800]) ){ goto $label$1 }
	$14 = ((float_64)(float_64)1 / (float_64)$9)
	$12 = ((int_32)*([0] + [16]) * (int_32)[7])
	$2 = ($2 + [-48892800])
	if ( ((uint_32)$2 > (uint_32)$12) ){ goto $label$1 }
	$14 = ((float_64)((float_64)((float_64)$14 + (float_64)(float_64)-1) * (float_64)((float_64)(CASTING float_64)(uint_32 $2) / (float_64)(CASTING float_64)(uint_32 $12))) + (float_64)(float_64)1)
	
.LABEL $label$1
	*((($15 + [224]) + [32])) = [0]
	*($15 + [240]) = (int_64)-1
	*($15 + [248]) = (int_64)0
	$8 = *($0 + [8])
	*($15 + [224]) = $8
	*($15 + [232]) = $8
	$2 = CALL db_find_i64($8, $8, (int_64)-6146658315851005952, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $683(($15 + [224]), $2)
	CALL eosio_assert(((int_32)*($3 + [28]) == (int_32)($15 + [224])), [1536])
	
.LABEL $label$2
	$12 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($12, [7200])
	*((($15 + [184]) + [32])) = [0]
	$8 = *(($0 + [8]))
	*($15 + [184]) = $8
	*($15 + [200]) = (int_64)-1
	*($15 + [208]) = (int_64)0
	*($15 + [192]) = $8
	$10 = [0]
	$2 = CALL db_find_i64($8, $8, (int_64)-4803775097846366208, *($15 + [270]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $160(($15 + [184]), $2)
	CALL eosio_assert(((int_32)*($10 + [28]) == (int_32)($15 + [184])), [1536])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [1952])
	*($15 + [180]) = ((int_32)((int_32)*([0] + [20]) * (int_32)(uint_32([545842] >> ((*($10 + [8]) << [2]) + [-4])) & [15])) * (int_32)[6])
	*($15 + [176]) = (int_64))(((uint_64)CALL publication_time() / (uint_64)(int_64)1000000) - *([0] + [12]))
	if ( (*($15 + [269]) == 0) ){ goto $label$4 }
	if ( ((uint_32)*(($10 + [8])) > (uint_32)[2]) ){ goto $label$4 }
	*($15 + [269]) = [0]
	
.LABEL $label$4
	$2 = [0]
	*($15 + [175]) = [0]
	$13 = ($0 + [8])
	$8 = *($13)
	*($15 + [276]) = $0
	*($15 + [272]) = ($15 + [270])
	*($15 + [280]) = ($15 + [176])
	*($15 + [284]) = ($15 + [269])
	*($15 + [288]) = ($15 + [180])
	*($15 + [292]) = ($15 + [175])
	CALL eosio_assert($12, [1696])
	CALL $684(($15 + [224]), $3, $8, ($15 + [272]))
	CALL eosio_assert(*($15 + [175]), [7248])
	*(($15 + [160])) = [0]
	*($15 + [144]) = (int_64)-1
	*($15 + [152]) = (int_64)0
	$8 = *($13)
	*($15 + [128]) = $8
	*($15 + [136]) = $8
	$3 = [0]
	$12 = CALL db_find_i64($8, $8, (int_64)-6146850541407305728, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$5 }
	$3 = CALL $159(($15 + [128]), $12)
	CALL eosio_assert(((int_32)*($3 + [20]) == (int_32)($15 + [128])), [1536])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [7280])
	*($15 + [175]) = [0]
	$11 = (int_64)1
	$3 = *($3 + [8])
	$12 = *(($3 + [12]))
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$6 }
	$13 = ((int_32)($12 - $3) / (int_32)[12])
	$2 = [0]
	$12 = *($15 + [270])
	
.LOOP $label$8:
	if ( ((int_32)*($3) == (int_32)$12) ){ goto $label$7 }
	$3 = ($3 + [12])
	$2 = ($2 + [1])
	if ( ($2 <= $13) ){ goto $label$8 }
	$2 = [0]
	goto $label$6 
	
.LABEL $label$7
	$2 = [1]
	*($15 + [175]) = [1]
	$11 = *(($3 + [8]))
	
.LABEL $label$6
	CALL eosio_assert($2, [7280])
	*((($15 + [88]) + [32])) = [0]
	*($15 + [104]) = (int_64)-1
	*($15 + [112]) = (int_64)0
	$8 = *(($0 + [8]))
	*($15 + [88]) = $8
	*($15 + [96]) = $8
	$5 = [0]
	$3 = CALL db_find_i64($8, $8, (int_64)-4803769090797731840, $11)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$9 }
	$5 = CALL $685(($15 + [88]), $3)
	CALL eosio_assert(((int_32)*($5 + [28]) == (int_32)($15 + [88])), [1536])
	
.LABEL $label$9
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [1952])
	$7 = *(($6 + [32]))
	$6 = *($0 + [20])
	$12 = *(($6 + [36]))
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$10 }
	$3 = ($12 + [-24])
	$13 = ([0] - $7)
	
.LOOP $label$11:
	if ( ((int_64)*(*($3)) == (int_64)$1) ){ goto $label$10 }
	$12 = $3
	$2 = ($3 + [-24])
	$3 = $2
	if ( ((int_32)($2 + $13) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$2 = ($6 + [8])
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$13 }
	$3 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$2), [1536])
	goto $label$12 
	
.LABEL $label$13
	$3 = [0]
	$12 = CALL db_find_i64(*(($6 + [8])), *(($6 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$12 }
	$3 = CALL $186($2, $12)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$2), [1536])
	
.LABEL $label$12
	$6 = [0]
	$7 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($7, [2368])
	$12 = *($0 + [24])
	CALL eosio_assert(((int_32)CALL $201(*($0 + [24]), $1) < (int_32)CALL int_32 $12((int_32 *($3 + [8])), (int_32 *(*($12) + [4])))), [2432])
	$13 = [1]
	if ( *($15 + [269]) ){ goto $label$14 }
	$13 = ($10 + [8])
	$12 = (*($13) + [-1])
	if ( ((uint_32)$12 > (uint_32)[4]) ){ goto $label$15 }
	goto $label$20 
	
.LABEL $label$20
	$6 = *($5 + [8])
	goto $label$15 
	
.LABEL $label$19
	$6 = *($5 + [10])
	goto $label$15 
	
.LABEL $label$18
	$6 = *($5 + [12])
	goto $label$15 
	
.LABEL $label$17
	$6 = *($5 + [14])
	goto $label$15 
	
.LABEL $label$16
	$6 = *($5 + [16])
	
.LABEL $label$15
	*($15 + [84]) = ((uint_32)((int_32)*($15 + [180]) * (int_32)($6 & [65535])) / (uint_32)*([0] + [16]))
	CALL memcpy(($15 + [16]), *($4 + [4]), [64])
	CALL $205(($15 + [8]), *(($0 + [16])), ($15 + [16]))
	$8 = ((uint_64)((int_64)((int_64)*($15 + [8]) * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	*($15 + [8]) = $8
	$10 = (CASTING uint_32)(uint_64 (uint_64)((int_64)$8 * (int_64)21) >> (uint_64)(int_64)31)
	*($15 + [12]) = $10)
	$12 = [100]
	$10 = *($15 + [84])
	$10 = (((int_32)((int_32)($10 + [-10]) * (int_32)$10) / (int_32)[100]) + $10)
	$10 = ( $10 ? [0] : ((int_32)$10 > (int_32)[0]) )
	*($15 + [84]) = ( $10 ? [10000] : ((int_32)$10 < (int_32)[10000]) )
	$8 = *(($0 + [8]))
	*($15 + [272]) = ($15 + [84])
	CALL eosio_assert($7, [1696])
	CALL $686($2, $3, $8, ($15 + [272]))
	$8 = ((uint_64)((int_64)((int_64)*($15 + [8]) * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	*($15 + [8]) = $8
	$10 = (CASTING uint_32)(uint_64 (uint_64)((int_64)$8 * (int_64)100) >> (uint_64)(int_64)31)
	*($15 + [12]) = $10)
	$6 = *($13)
	$3 = ($6 + [-1])
	$7 = ( $3 ? [1] : ((int_32)$3 > (int_32)[1]) )
	if ( ((uint_32)$3 > (uint_32)[4]) ){ goto $label$25 }
	goto $label$21 
	
.LABEL $label$26
	$12 = *($5 + [18])
	goto $label$21 
	
.LABEL $label$25
	$12 = [0]
	goto $label$21 
	
.LABEL $label$24
	$12 = *($5 + [20])
	goto $label$21 
	
.LABEL $label$23
	$12 = *($5 + [22])
	goto $label$21 
	
.LABEL $label$22
	$12 = *($5 + [24])
	
.LABEL $label$21
	$2 = [0]
	CALL memset(($15 + [272]), [0], [80])
	$13 = [1]
	$3 = ( [0] ? (($7 + ((int_32)$10 < (int_32)(CASTING int_32)(float_64 ((float_64)$14 * (float_64)(CASTING float_64)(uint_32 ($12 & [65535])))))) + [-1]) : ((int_32)$6 == (int_32)[1]) )
	if ( ((uint_32)$3 > (uint_32)[4]) ){ goto $label$27 }
	$2 = ($3 << [2])
	$10 = *(($2 + [6608]))
	$3 = (($10 << [3]) + [2544])
	$14 = (float_64)0
	$12 = ($15 + [272])
	$2 = *(($2 + [6576]))
	$13 = $2
	
.LOOP $label$28:
	$9 = *($3)
	*($12) = $9
	$12 = ($12 + [8])
	$3 = ($3 + [8])
	$14 = ((float_64)$14 + (float_64)$9)
	$13 = ($13 + [-1])
	if ( $13 ){ goto $label$28 }
	$3 = ($15 + [272])
	$12 = $2
	
.LOOP $label$29:
	*($3) = ((float_64)*($3) / (float_64)$14)
	$3 = ($3 + [8])
	$12 = ($12 + [-1])
	if ( $12 ){ goto $label$29 }
	$13 = ($10 + [1])
	
.LABEL $label$27
	$8 = ((uint_64)((int_64)((int_64)$8 * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	*($15 + [8]) = $8
	$12 = (CASTING uint_32)(uint_64 (uint_64)((int_64)$8 * (int_64)1000000000) >> (uint_64)(int_64)31)
	*($15 + [12]) = $12)
	$3 = ((($15 + [272]) + ($2 << [3])) + [-8])
	
.LOOP $label$32:
	if ( ((int_32)$2 < (int_32)[2]) ){ goto $label$31 }
	$2 = ($2 + [-1])
	$14 = *($3)
	$3 = ($3 + [-8])
	if ( ((int_32)$12 >= (int_32)(CASTING int_32)(float_64 ((float_64)$14 * (float_64)(float_64)1e9))) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$2 = [0]
	
.LABEL $label$30
	$8 = ((uint_64)((int_64)((int_64)$8 * (int_64)1103515245) + (int_64)12345) % (uint_64)(int_64)2147483647)
	*($15 + [8]) = $8
	$3 = (CASTING uint_32)(uint_64 (uint_64)((int_64)$8 * (int_64)5) >> (uint_64)(int_64)31)
	*($15 + [12]) = $3)
	$3 = ((($13 + ((int_32)$3 * (int_32)[20])) + $2) & [65535])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [7312])
	CALL $640(*(($0 + [24])), $1, $3)
	*($15 + [28]) = [0]
	$1 = *($15 + [16])
	*($15 + [24]) = ((int_32)(CASTING uint_32)(uint_64 ((int_64)(uint_64)$1 >> (uint_64)(int_64)32) ^ (int_64)$1)) ^ (int_32)*($15 + [8]))
	$2 = *(($0 + [16]))
	$1 = *($2)
	$3 = *($4 + [4])
	*($15 + [272]) = ($15 + [16])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [1696])
	CALL $209(($2 + [88]), $3, $1, ($15 + [272]))
	$13 = ((int_32)*($15 + [269]) != (int_32)[0])
	
.LABEL $label$14
	$12 = *($15 + [112])
	if ( ($12 == 0) ){ goto $label$33 }
	$0 = ($15 + [116])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$12) ){ goto $label$35 }
	
.LOOP $label$36:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$37 }
	CALL $956($2)
	
.LABEL $label$37
	if ( ((int_32)$12 != (int_32)$3) ){ goto $label$36 }
	$3 = *(($15 + [112]))
	goto $label$34 
	
.LABEL $label$35
	$3 = $12
	
.LABEL $label$34
	*($0) = $12
	CALL $956($3)
	
.LABEL $label$33
	$0 = *($15 + [152])
	if ( ($0 == 0) ){ goto $label$38 }
	$10 = ($15 + [156])
	$3 = *($10)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$40 }
	
.LOOP $label$41:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$42 }
	$12 = *($2 + [8])
	if ( ($12 == 0) ){ goto $label$43 }
	*(($2 + [12])) = $12
	CALL $956($12)
	
.LABEL $label$43
	CALL $956($2)
	
.LABEL $label$42
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$41 }
	$3 = *(($15 + [152]))
	goto $label$39 
	
.LABEL $label$40
	$3 = $0
	
.LABEL $label$39
	*($10) = $0
	CALL $956($3)
	
.LABEL $label$38
	$12 = *($15 + [208])
	if ( ($12 == 0) ){ goto $label$44 }
	$0 = ($15 + [212])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$12) ){ goto $label$46 }
	
.LOOP $label$47:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$48 }
	CALL $956($2)
	
.LABEL $label$48
	if ( ((int_32)$12 != (int_32)$3) ){ goto $label$47 }
	$3 = *(($15 + [208]))
	goto $label$45 
	
.LABEL $label$46
	$3 = $12
	
.LABEL $label$45
	*($0) = $12
	CALL $956($3)
	
.LABEL $label$44
	$0 = *($15 + [248])
	if ( ($0 == 0) ){ goto $label$49 }
	$10 = ($15 + [252])
	$3 = *($10)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$51 }
	
.LOOP $label$52:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$53 }
	$12 = *($2 + [16])
	if ( ($12 == 0) ){ goto $label$54 }
	*(($2 + [20])) = $12
	CALL $956($12)
	
.LABEL $label$54
	CALL $956($2)
	
.LABEL $label$53
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$52 }
	$3 = *(($15 + [248]))
	goto $label$50 
	
.LABEL $label$51
	$3 = $0
	
.LABEL $label$50
	*($10) = $0
	CALL $956($3)
	
.LABEL $label$49
	*([0] + [4]) = ($15 + [352])
	$12
	$3
	return $13
}

void .FUNC $527 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$2 = *($0)
	$3 = *($4 + [8])
	*($1 + [16]) = *($3)
	*(($1 + [24])) = *(($3 + [8]))
	*($1 + [32]) = *(*($4 + [12]))
	CALL $958(($1 + [40]), *($4 + [16]))
	$4 = *($1 + [40])
	$3 = ( *(($1 + [44])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($3 + [36])
	$5 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($4)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($6 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $4)
	CALL $529($7, $1)
	$5 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($2 + [8]), (int_64)6299033814149437440, *(*($0 + [8])), $5, $6, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL free($6)
	
.LABEL $label$4
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $526 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = [0]
	*(($4 = CALL $955([64])) + [8]) = [0]
	*($4) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$2 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [3776])
	*($4 + [32]) = (int_64)0
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [48]) = [0]
	*($4 + [52]) = $1
	CALL $527(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [56])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $528(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$9 }
	CALL $956(*(($3 + [48])))
	
.LABEL $label$9
	CALL $956($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $525 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [56]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [3264])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)6299033814149437440)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [3200])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [3200])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $524(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $524 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $955([64])) + [8]) = [0]
	*($4) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$7 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [3776])
	*($4 + [32]) = (int_64)0
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [48]) = [0]
	*($4 + [52]) = $0
	CALL $530(($8 + [32]), $4)
	*($4 + [56]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [56])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $528($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$15 }
	CALL $956(*(($5 + [48])))
	
.LABEL $label$15
	CALL $956($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $291 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*(($4 = CALL $955([80])) + [32]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56]) = (int_64)0
	*($4 + [64]) = $1
	*($4) = (int_64)0
	*($4 + [8]) = *(*($3))
	*($4 + [16]) = *(*($3 + [4]))
	*($8 + [88]) = (($8 + [16]) + [60])
	*($8 + [84]) = ($8 + [16])
	*($8 + [80]) = ($8 + [16])
	CALL $228(($8 + [80]), $4)
	$5 = *($4)
	*($4 + [68]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551873908736, $2, $5, ($8 + [16]), [60])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [80]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [68])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [80]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $230(($1 + [24]), ($8 + [80]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [80])
	*($8 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $956($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [96])
}

int_32 .FUNC $522 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [136]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [144]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [152]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [160]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [168]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [176]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [184]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [192]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [200]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [208]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $521 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $520 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [32]))) = (int_64)1397703940
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [48]))) = (int_64)1397703940
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [64]))) = (int_64)1397703940
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [80]))) = (int_64)1397703940
	*($0 + [72]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$3 = [0]
	
.LABEL $label$21
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [96]))) = (int_64)1397703940
	*($0 + [88]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$29 }
	
.LOOP $label$30:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$27 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$30 }
	
.LABEL $label$29
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$3 = [0]
	
.LABEL $label$26
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [112]))) = (int_64)1397703940
	*($0 + [104]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$34 }
	
.LOOP $label$35:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$35 }
	
.LABEL $label$34
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$3 = [0]
	
.LABEL $label$31
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [128]))) = (int_64)1397703940
	*($0 + [120]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$39 }
	
.LOOP $label$40:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$37 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$40 }
	
.LABEL $label$39
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$3 = [0]
	
.LABEL $label$36
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [144]))) = (int_64)1397703940
	*($0 + [136]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$44 }
	
.LOOP $label$45:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$42 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$45 }
	
.LABEL $label$44
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$3 = [0]
	
.LABEL $label$41
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [160]))) = (int_64)1397703940
	*($0 + [152]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$48:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$47 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$49 }
	
.LOOP $label$50:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$47 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$50 }
	
.LABEL $label$49
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	$3 = [0]
	
.LABEL $label$46
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [176]))) = (int_64)1397703940
	*($0 + [168]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$53:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$52 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$54 }
	
.LOOP $label$55:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$52 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$55 }
	
.LABEL $label$54
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$52
	$3 = [0]
	
.LABEL $label$51
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [192]))) = (int_64)1397703940
	*($0 + [184]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$58:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$57 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$59 }
	
.LOOP $label$60:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$57 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$60 }
	
.LABEL $label$59
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$58 }
	goto $label$56 
	
.LABEL $label$57
	$3 = [0]
	
.LABEL $label$56
	CALL eosio_assert($3, [3776])
	*(($2 = ($0 + [208]))) = (int_64)1397703940
	*($0 + [200]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$63:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$62 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$64 }
	
.LOOP $label$65:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$62 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$65 }
	
.LABEL $label$64
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$63 }
	goto $label$61 
	
.LABEL $label$62
	$3 = [0]
	
.LABEL $label$61
	CALL eosio_assert($3, [3776])
	return $0
}

void .FUNC $407 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [1920])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [1920])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), $2, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $699 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$7 = (*([0] + [4]) - [48])
	$11 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	$10 = *(*($3))
	*($1) = $10
	$8 = [16]
	$3 = *($3 + [4])
	$6 = ($1 + [16])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$1 }
	CALL $700($6, *($3), *($3 + [4]))
	$10 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$10), [1856])
	$6 = *($6)
	$3 = *(($1 + [20]))
	$5 = ($3 - $6)
	$10 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$2:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$3 }
	$8 = ((((int_32)uint_32(($5 + [-16]) >> [4]) * (int_32)[11]) + $8) + [11])
	
.LABEL $label$3
	if ( ($8 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($8)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($7 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($11 + [8]) = $9
	$5 = ($9 + $8)
	*($11 + [16]) = $5
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [1920])
	CALL memcpy($9, $1, [8])
	$3 = ($9 + [8])
	CALL eosio_assert(((int_32)($5 - $3) > (int_32)[3]), [1920])
	CALL memcpy($3, ($1 + [8]), [4])
	$3 = ($9 + [12])
	CALL eosio_assert(((int_32)($5 - $3) > (int_32)[3]), [1920])
	CALL memcpy($3, ($1 + [12]), [4])
	$3 = ($9 + [16])
	*($11 + [12]) = $3
	$10 = (CASTING uint_64)(uint_32 int_32((*(($1 + [20])) - *(($1 + [16]))) >> [4]))
	
.LOOP $label$6:
	$6 = (CASTING uint_32)(uint_64 $10)
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	$7 = ((int_64)$10) != (int_64)0
	*($11 + [32]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)($5 - $3) > (int_32)[0]), [1920])
	CALL memcpy($3, ($11 + [32]), [1])
	$3 = ($3 + [1])
	*($11 + [12]) = $3
	if ( $7 ){ goto $label$6 }
	$6 = *(($1 + [20]))
	$3 = *(($1 + [16]))
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	*($11 + [24]) = ($11 + [8])
	*($11 + [32]) = $3
	*((($11 + [32]) + [8])) = ($3 + [8])
	*((($11 + [32]) + [12])) = ($3 + [12])
	*($11 + [36]) = ($3 + [4])
	CALL $689(($11 + [32]), ($11 + [24]))
	$3 = ($3 + [16])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	
.LABEL $label$7
	CALL db_update_i64(*($1 + [32]), $2, $9, $8)
	if ( ($8 <= [513]) ){ goto $label$9 }
	CALL free($9)
	
.LABEL $label$9
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($11 + [48])
}

int_32 .FUNC $546 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($0 + [12]) = $1
	$3 = *(*(*($2 + [4])) + [48])
	*($0 + [8]) = [1]
	$1 = *($2)
	*($0) = $3
	CALL eosio_assert([1], [1920])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($4 | [8]), ($0 + [8]), [2])
	$3 = *($0)
	*($0 + [16]) = CALL db_store_i64(*($1 + [8]), (int_64)-4695710445447675904, *(*($2 + [8])), $3, $4, [10])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $913 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [1920])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[1]), [1920])
	CALL memcpy(*($0 + [4]), ($2 + [12]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [1920])
	CALL memcpy(*($0 + [4]), ($2 + [14]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[3]), [1920])
	CALL memcpy(*($1 + [4]), ($2 + [16]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $899 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$1 = ($0 + [8])
	$6 = [0]
	$5 = [0]
	$3 = ($0 + [16])
	$2 = CALL db_lowerbound_i64(*($0 + [8]), *($3), (int_64)3631284361385115648, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	CALL $375($1, $2)
	$5 = [1]
	
.LABEL $label$1
	CALL eosio_assert($5, [8544])
	$5 = CALL db_lowerbound_i64(*($1), *($3), (int_64)3631284361385115648, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $375($1, $5)
	
.LABEL $label$2
	$4 = *($0)
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [1696])
	CALL $900($1, $6, $4, ($7 + [8]))
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $898 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*(($4 = CALL $955([40]))) = (int_64)0
	*($4 + [8]) = [0]
	*($4 + [10]) = [0]
	*($4 + [12 align=4]) = (int_64)0
	*($4 + [20]) = [0]
	*($4 + [24]) = $1
	*($4) = *(*($3))
	*($4 + [16]) = *(*(*($3 + [4]) + [4]) + [8])
	*($4 + [10]) = [1]
	*($8 + [56]) = (($8 + [16]) + [21])
	*($8 + [52]) = ($8 + [16])
	*($8 + [48]) = ($8 + [16])
	CALL $212(($8 + [48]), $4)
	$5 = *($4)
	*($4 + [28]) = CALL db_store_i64(*($1 + [8]), (int_64)-6030912142679474176, $2, $5, ($8 + [16]), [21])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [48]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [28])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [48]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $247(($1 + [24]), ($8 + [48]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [48])
	*($8 + [48]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $956($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [64])
}

int_32 .FUNC $893 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	*($6 + [79]) = $2
	CALL $187(($6 + [64]), $0, $1, [1])
	$5 = [0]
	$2 = *($6 + [68])
	$1 = *($0)
	*($6 + [24]) = ($6 + [79])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [1696])
	CALL $894(($0 + [88]), $2, $1, ($6 + [24]))
	*(($6 + [56])) = [0]
	$1 = *($0)
	*($6 + [24]) = $1
	*($6 + [40]) = (int_64)-1
	*($6 + [48]) = (int_64)0
	*($6 + [32]) = $1
	$2 = CALL db_find_i64($1, $1, (int_64)-4992616317144530944, *($6 + [79]))
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$3 }
	$2 = CALL $511(($6 + [24]), $2)
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)($6 + [24])), [1536])
	$1 = *($0)
	CALL eosio_assert([1], [1696])
	CALL $896(($6 + [24]), $2, $1, ($6 + [8]))
	$5 = ((int_64)*($2 + [24]) != (int_64)0)
	$3 = *($6 + [48])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$1 = *($0)
	*($6 + [16]) = ($6 + [79])
	CALL $895(($6 + [8]), ($6 + [24]), $1, ($6 + [16]))
	$3 = *($6 + [48])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($6 + [52])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $956($2)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $3
	
.LABEL $label$4
	*($4) = $3
	CALL $956($0)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [80])
	return $5
}

void .FUNC $892 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$4), [1536])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $186($4, $6)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$4), [1536])
	
.LABEL $label$3
	CALL eosio_assert(($5 == 0), [9792])
	CALL $897($0, $1)
}

void .FUNC $891 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [16]) = *(*($3))
	*($1 + [24]) = *(*($3 + [4]))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [88]) = ($5 + [76])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	CALL $514(($5 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $5, [76])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $890 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	$4 = CALL $955([96])
	$6 = CALL $515($4)
	*($4 + [80]) = $1
	*($4) = *(*($3))
	*($4 + [16]) = *(*($3 + [4]))
	*($4 + [24]) = *(*($3 + [8]))
	*($8 + [104]) = (($8 + [16]) + [76])
	*($8 + [100]) = ($8 + [16])
	*($8 + [96]) = ($8 + [16])
	CALL $514(($8 + [96]), $6)
	$5 = *($4)
	*($4 + [84]) = CALL db_store_i64(*($1 + [8]), (int_64)-4992616317144530944, $2, $5, ($8 + [16]), [76])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [96]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [84])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [96]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $517(($1 + [24]), ($8 + [96]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [96])
	*($8 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $956($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [112])
}

void .FUNC $897 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	*($5 + [72]) = $1
	$3 = [0]
	*(($5 + [64])) = [0]
	*($5 + [48]) = (int_64)-1
	*($5 + [56]) = (int_64)0
	$1 = *($0)
	*($5 + [32]) = $1
	*($5 + [40]) = $1
	$2 = CALL db_find_i64($1, $1, (int_64)-4697967887266086912, (int_64)22)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $554(($5 + [32]), $2)
	CALL eosio_assert(((int_32)*($3 + [12]) == (int_32)($5 + [32])), [1536])
	$2 = [1]
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	*($5 + [28]) = $3
	*($5 + [24]) = ($5 + [32])
	CALL eosio_assert($2, [9824])
	$1 = *($0)
	*($5 + [12]) = ($5 + [24])
	*($5 + [8]) = ($5 + [72])
	CALL $898(($5 + [16]), ($0 + [8]), $1, ($5 + [8]))
	CALL $899(*($0 + [136]))
	$2 = *($5 + [56])
	if ( ($2 == 0) ){ goto $label$3 }
	$4 = ($5 + [60])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $956($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($5 + [56]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($4) = $2
	CALL $956($0)
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $896 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [8]) = (*($1 + [8]) + [1])
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [88]) = ($5 + [76])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	CALL $514(($5 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $5, [76])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $895 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	$4 = CALL $955([96])
	$6 = CALL $515($4)
	*($4 + [80]) = $1
	*($4) = *(*($3))
	*($4 + [8]) = [1]
	*($8 + [104]) = (($8 + [16]) + [76])
	*($8 + [100]) = ($8 + [16])
	*($8 + [96]) = ($8 + [16])
	CALL $514(($8 + [96]), $6)
	$5 = *($4)
	*($4 + [84]) = CALL db_store_i64(*($1 + [8]), (int_64)-4992616317144530944, $2, $5, ($8 + [16]), [76])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [96]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [84])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [96]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $517(($1 + [24]), ($8 + [96]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [96])
	*($8 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $956($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [112])
}

void .FUNC $894 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	*($1 + [26]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1856])
	*($5 + [72]) = ($5 + [60])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $224(($5 + [64]), $1)
	CALL db_update_i64(*($1 + [64]), $2, $5, [60])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $749 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	$12 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	$10 = *(*($3))
	if ( ((int_32)$10 == (int_32)[3]) ){ goto $label$4 }
	if ( ((int_32)$10 == (int_32)[2]) ){ goto $label$3 }
	if ( ((int_32)$10 != (int_32)[1]) ){ goto $label$2 }
	$9 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$4
	$9 = ($1 + [32])
	goto $label$1 
	
.LABEL $label$3
	$9 = ($1 + [20])
	goto $label$1 
	
.LABEL $label$2
	$9 = ($1 + [8])
	
.LABEL $label$1
	$6 = *($3 + [4])
	$3 = *($9)
	$5 = *($9 + [4])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$9 }
	$7 = int_32(($5 - $3) >> [3])
	$10 = [0]
	$8 = (*($6) & [65535])
	
.LOOP $label$10:
	if ( ((int_32)*($3) == (int_32)$8) ){ goto $label$8 }
	$3 = ($3 + [8])
	$10 = ($10 + [1])
	if ( ($10 <= $7) ){ goto $label$10 }
	
.LABEL $label$9
	*($12) = [0]
	*($12 + [2]) = [1]
	*($12 + [4]) = [0]
	*($12) = *($6)
	if ( ((int_32)$5 == (int_32)*($9 + [8])) ){ goto $label$7 }
	*($5) = *($12)
	*(($3 = ($9 + [4]))) = (*($3) + [8])
	goto $label$6 
	
.LABEL $label$8
	*(($3 = ($3 + [2]))) = (*($3) + [1])
	$11 = $4
	goto $label$5 
	
.LABEL $label$7
	CALL $660($9, $12)
	
.LABEL $label$6
	$11 = *($1)
	
.LABEL $label$5
	CALL eosio_assert(((int_64)$4 == (int_64)$11), [1856])
	$3 = [8]
	$8 = ($1 + [8])
	$7 = *($1 + [8])
	$10 = *(($1 + [12]))
	$9 = ($10 - $7)
	$11 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	
.LOOP $label$11:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$11 }
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$12 }
	$3 = ((((int_32)uint_32(($9 + [-8]) >> [3]) * (int_32)[7]) + $3) + [7])
	
.LABEL $label$12
	$7 = ($1 + [20])
	$9 = *($1 + [20])
	$10 = *(($1 + [24]))
	$5 = ($10 - $9)
	$11 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$13:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$13 }
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$14 }
	$3 = ((((int_32)uint_32(($5 + [-8]) >> [3]) * (int_32)[7]) + $3) + [7])
	
.LABEL $label$14
	$9 = ($1 + [32])
	$5 = *($1 + [32])
	$10 = *(($1 + [36]))
	$6 = ($10 - $5)
	$11 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$15:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$15 }
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$16 }
	$3 = ((((int_32)uint_32(($6 + [-8]) >> [3]) * (int_32)[7]) + $3) + [7])
	
.LABEL $label$16
	if ( ($3 <= [513]) ){ goto $label$18 }
	$10 = CALL malloc($3)
	goto $label$17 
	
.LABEL $label$18
	$10 = ($13 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$17
	*($12) = $10
	*($12 + [8]) = ($10 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [1920])
	CALL memcpy($10, $1, [8])
	*($12 + [4]) = ($10 + [8])
	CALL $614(CALL $614(CALL $614($12, $8), $7), $9)
	CALL db_update_i64(*($1 + [48]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$19 }
	CALL free($10)
	
.LABEL $label$19
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$20 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $748 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([56]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40]) = [0]
	*($3 + [44]) = $1
	CALL $750(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [48])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $661(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [32])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [36])) = $1
	CALL $956($1)
	
.LABEL $label$4
	$1 = *($3 + [20])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [24])) = $1
	CALL $956($1)
	
.LABEL $label$5
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$6 }
	*(($3 + [12])) = $1
	CALL $956($1)
	
.LABEL $label$6
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $743 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($9) = (int_64)0
	*($9 + [8]) = [0]
	$4 = *($1 + [12])
	$3 = *($1 + [8])
	$2 = *($1)
	$6 = (*(($1 + [20])) - *($1 + [16]))
	$5 = int_32($6 >> [2])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$6 = CALL $955($6)
	*(($9 + [8])) = ($6 + ($5 << [2]))
	*($9) = $6
	*($9 + [4]) = $6
	$8 = *(($1 + [16]))
	$5 = (*(($1 + [20])) - $8)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($6, $8, $5)
	*($9 + [4]) = ($6 + $5)
	
.LABEL $label$2
	$6 = *($0 + [4])
	$5 = *($6 + [4])
	$0 = (*(*($0)) + int_32($5 >> [1]))
	$8 = *($1 + [32])
	$7 = *($1 + [28])
	$1 = *($6)
	if ( (($5 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($0) + $1))
	
.LABEL $label$3
	CALL void $0((int_32 $2), (int_64 $3), (int_32 ($4 & [65535])), (int_32 $9), (int_32 $7), (int_32 $8), (int_32 $1))
	$1 = *($9)
	if ( ($1 == 0) ){ goto $label$4 }
	*($9 + [4]) = $1
	CALL $956($1)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $971($9)
}

void .FUNC $742 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($3 + [8]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy(($3 + [12]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	CALL $633(*($1), ($3 + [16]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($3 + [28]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($3 + [32]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $741 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($8) = (int_64)0
	*($8 + [8]) = [0]
	$4 = *($1 + [12])
	$3 = *($1 + [8])
	$2 = *($1)
	$6 = (*(($1 + [20])) - *($1 + [16]))
	$5 = int_32($6 >> [2])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$6 = CALL $955($6)
	*(($8 + [8])) = ($6 + ($5 << [2]))
	*($8) = $6
	*($8 + [4]) = $6
	$7 = *(($1 + [16]))
	$5 = (*(($1 + [20])) - $7)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($6, $7, $5)
	*($8 + [4]) = ($6 + $5)
	
.LABEL $label$2
	$6 = *($0 + [4])
	$5 = *($6 + [4])
	$0 = (*(*($0)) + int_32($5 >> [1]))
	$7 = *($1 + [28])
	$1 = *($6)
	if ( (($5 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($0) + $1))
	
.LABEL $label$3
	CALL void $0((int_32 $2), (int_64 $3), (int_32 ($4 & [65535])), (int_32 $8), (int_32 $7), (int_32 $1))
	$1 = *($8)
	if ( ($1 == 0) ){ goto $label$4 }
	*($8 + [4]) = $1
	CALL $956($1)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $971($8)
}

void .FUNC $740 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($2 + [8]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[1]), [1632])
	CALL memcpy(($2 + [12]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	CALL $633(*($1), ($2 + [16]))
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [1632])
	CALL memcpy(($2 + [28]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

int_32 .FUNC $747 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1600])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $955([32]))) = (int_64)0
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [16]) = [0]
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [1632])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $751(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $752(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $956($7)
	
.LABEL $label$10
	CALL $956($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $746 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [80])
	*([0] + [4]) = $14
	*($14 + [72]) = $1
	*($14 + [71]) = $2
	*($14 + [68]) = $3
	CALL require_auth($1)
	$6 = *(($0 + [40]))
	$11 = *(($0 + [44]))
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$1 }
	$13 = ($11 + [-24])
	$12 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($13)) == (int_64)$1) ){ goto $label$1 }
	$11 = $13
	$8 = ($13 + [-24])
	$13 = $8
	if ( ((int_32)($8 + $12) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$13 = ($0 + [16])
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$4 }
	$12 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [20]) == (int_32)$13), [1536])
	goto $label$3 
	
.LABEL $label$4
	$12 = [0]
	$8 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-8872998483271876608, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$12 = CALL $144($13, $8)
	CALL eosio_assert(((int_32)*($12 + [20]) == (int_32)$13), [1536])
	
.LABEL $label$3
	$8 = [0]
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [2256])
	$13 = *($12 + [8])
	$11 = *(($12 + [12]))
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$6 }
	$11 = int_32(($11 - $13) >> [4])
	
.LOOP $label$7:
	if ( ((int_32)*($13) == (int_32)$2) ){ goto $label$5 }
	$13 = ($13 + [16])
	$8 = ($8 + [1])
	if ( ($8 <= $11) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert([0], [1664])
	$13 = *($12 + [8])
	
.LABEL $label$5
	$7 = *($13 + [1])
	CALL eosio_assert(((uint_32)$7 > (uint_32)[1]), [7856])
	$11 = [0]
	*(($14 + [56])) = [0]
	*($14 + [40]) = (int_64)-1
	$9 = *($0 + [8])
	*($14 + [24]) = $9
	*($14 + [32]) = $9
	*($14 + [48]) = (int_64)0
	$4 = ((uint_32)$3 % (uint_32)[10])
	$8 = *($2 + [8])
	$2 = CALL $747(($14 + [24]), CALL $fimport$18($9, $9, (int_64)-4888767063984832512, (int_64)0))
	$12 = *(($2 + [12]))
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$9 }
	$12 = ((int_32)($12 - $8) / (int_32)[28])
	
.LOOP $label$10:
	if ( ((int_32)*($8) == (int_32)$3) ){ goto $label$8 }
	$8 = ($8 + [28])
	$11 = ($11 + [1])
	if ( ($11 <= $12) ){ goto $label$10 }
	
.LABEL $label$9
	CALL eosio_assert([0], [7888])
	$8 = *(($2 + [8]))
	$1 = *($14 + [72])
	
.LABEL $label$8
	CALL eosio_assert(((uint_32)*($8 + [5]) <= (uint_32)*(($13 + [1]))), [7920])
	$2 = *(($0 + [112]))
	$3 = *(($0 + [116]))
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$11 }
	$13 = ($3 + [-24])
	$12 = ([0] - $2)
	
.LOOP $label$12:
	if ( ((int_64)*(*($13)) == (int_64)$1) ){ goto $label$11 }
	$3 = $13
	$11 = ($13 + [-24])
	$13 = $11
	if ( ((int_32)($11 + $12) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	$5 = ($0 + [88])
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$21 }
	$10 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [44]) == (int_32)$5), [1536])
	if ( $10 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$13 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-8866593457838227456, $1)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$19 }
	$10 = CALL $658($5, $13)
	CALL eosio_assert(((int_32)*($10 + [44]) == (int_32)$5), [1536])
	
.LABEL $label$20
	$13 = *($14 + [71])
	if ( ((int_32)$13 == (int_32)[3]) ){ goto $label$18 }
	if ( ((int_32)$13 == (int_32)[2]) ){ goto $label$17 }
	if ( ((int_32)$13 != (int_32)[1]) ){ goto $label$16 }
	$6 = ($10 + [8])
	goto $label$15 
	
.LABEL $label$19
	CALL eosio_assert(((int_32)$4 == (int_32)[1]), [7952])
	$1 = *(($0 + [8]))
	*($14 + [12]) = ($14 + [72])
	*($14 + [8]) = ($14 + [68])
	*($14 + [16]) = ($14 + [71])
	CALL $748($14, $5, $1, ($14 + [8]))
	$3 = *($14 + [48])
	if ( $3 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$18
	$6 = ($10 + [32])
	goto $label$15 
	
.LABEL $label$17
	$6 = ($10 + [20])
	goto $label$15 
	
.LABEL $label$16
	$6 = ($10 + [8])
	
.LABEL $label$15
	$7 = ($7 + [-1])
	$12 = [0]
	$11 = [0]
	$3 = *($6)
	$2 = *($6 + [4])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$22 }
	$13 = ($3 + [2])
	$2 = int_32(($2 - $3) >> [3])
	$3 = [0]
	$11 = [0]
	
.LOOP $label$23:
	$11 = (*($13) + $11)
	$13 = ($13 + [8])
	$3 = ($3 + [1])
	if ( ($3 <= $2) ){ goto $label$23 }
	
.LABEL $label$22
	CALL eosio_assert(((int_32)$7 > (int_32)$11), [7856])
	$13 = *($6)
	$11 = *(($6 + [4]))
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$24 }
	$2 = *($14 + [68])
	$6 = ($2 + [-1])
	$7 = int_32(($11 - $13) >> [3])
	$3 = [0]
	$12 = [0]
	
.LOOP $label$26:
	$11 = *($13)
	$12 = ($12 | ((int_32)$11 == (int_32)$6))
	if ( ((int_32)$11 == (int_32)$2) ){ goto $label$25 }
	$13 = ($13 + [8])
	$3 = ($3 + [1])
	if ( ($3 <= $7) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	CALL eosio_assert((*(($13 + [2])) <= *($8 + [4])), [7984])
	
.LABEL $label$24
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$27 }
	if ( ($12 & [1]) ){ goto $label$27 }
	CALL eosio_assert([0], [7952])
	
.LABEL $label$27
	$1 = *(($0 + [8]))
	*($14 + [12]) = ($14 + [68])
	*($14 + [8]) = ($14 + [71])
	CALL eosio_assert([1], [1696])
	CALL $749($5, $10, $1, ($14 + [8]))
	$3 = *($14 + [48])
	if ( ($3 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$12 = ($14 + [52])
	$13 = *($12)
	if ( ((int_32)$13 == (int_32)$3) ){ goto $label$29 }
	
.LOOP $label$30:
	$13 = ($13 + [-24])
	$8 = *($13)
	*($13) = [0]
	if ( ($8 == 0) ){ goto $label$31 }
	$11 = *($8 + [8])
	if ( ($11 == 0) ){ goto $label$32 }
	*(($8 + [12])) = $11
	CALL $956($11)
	
.LABEL $label$32
	CALL $956($8)
	
.LABEL $label$31
	if ( ((int_32)$3 != (int_32)$13) ){ goto $label$30 }
	$13 = *(($14 + [48]))
	goto $label$28 
	
.LABEL $label$29
	$13 = $3
	
.LABEL $label$28
	*($12) = $3
	CALL $956($13)
	
.LABEL $label$13
	*([0] + [4]) = ($14 + [80])
}

void .FUNC $745 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$12 = (*([0] + [4]) - [16])
	$13 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	$3 = *(*($3))
	if ( ((int_32)$3 == (int_32)[3]) ){ goto $label$4 }
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$3 }
	if ( ((int_32)$3 != (int_32)[1]) ){ goto $label$2 }
	$3 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$4
	$3 = ($1 + [32])
	goto $label$1 
	
.LABEL $label$3
	$3 = ($1 + [20])
	goto $label$1 
	
.LABEL $label$2
	$3 = ($1 + [8])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)*($3 + [4]) != (int_32)*($3)), [7824])
	*($3 + [4]) = *($3)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$3 = [8]
	$5 = ($1 + [8])
	$7 = *($1 + [8])
	$6 = *(($1 + [12]))
	$8 = ($6 - $7)
	$11 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$6 }
	$3 = ((((int_32)uint_32(($8 + [-8]) >> [3]) * (int_32)[7]) + $3) + [7])
	
.LABEL $label$6
	$6 = ($1 + [20])
	$8 = *($1 + [20])
	$7 = *(($1 + [24]))
	$9 = ($7 - $8)
	$11 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	
.LOOP $label$7:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$8 }
	$3 = ((((int_32)uint_32(($9 + [-8]) >> [3]) * (int_32)[7]) + $3) + [7])
	
.LABEL $label$8
	$7 = ($1 + [32])
	$9 = *($1 + [32])
	$8 = *(($1 + [36]))
	$10 = ($8 - $9)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	
.LOOP $label$9:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$9 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$10 }
	$3 = ((((int_32)uint_32(($10 + [-8]) >> [3]) * (int_32)[7]) + $3) + [7])
	
.LABEL $label$10
	if ( ($3 <= [513]) ){ goto $label$12 }
	$12 = CALL malloc($3)
	goto $label$11 
	
.LABEL $label$12
	$12 = ($12 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $12
	
.LABEL $label$11
	*($13) = $12
	*($13 + [8]) = ($12 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [1920])
	CALL memcpy($12, $1, [8])
	*($13 + [4]) = ($12 + [8])
	CALL $614(CALL $614(CALL $614($13, $5), $6), $7)
	CALL db_update_i64(*($1 + [48]), $2, $12, $3)
	if ( ($3 <= [513]) ){ goto $label$13 }
	CALL free($12)
	
.LABEL $label$13
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$14 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*([0] + [4]) = ($13 + [16])
}

void .FUNC $744 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($9 + [23]) = $2
	$5 = *(($0 + [112]))
	$8 = *(($0 + [116]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$1 }
	$2 = ($8 + [-24])
	$3 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($2)) == (int_64)$1) ){ goto $label$1 }
	$8 = $2
	$4 = ($2 + [-24])
	$2 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [88])
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$4 }
	$2 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [44]) == (int_32)$4), [1536])
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	$8 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-8866593457838227456, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $658($4, $8)
	CALL eosio_assert(((int_32)*($2 + [44]) == (int_32)$4), [1536])
	
.LABEL $label$3
	$8 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($8, [7792])
	$7 = *($0 + [8])
	*($9 + [12]) = $0
	*($9 + [8]) = ($9 + [23])
	CALL eosio_assert($8, [1696])
	CALL $745($4, $2, $7, ($9 + [8]))
	$6 = *(($5 + [32]))
	$5 = *($0 + [60])
	$8 = *(($5 + [36]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$5 }
	$2 = ($8 + [-24])
	$3 = ([0] - $6)
	
.LOOP $label$6:
	if ( ((int_64)*(*($2)) == (int_64)$1) ){ goto $label$5 }
	$8 = $2
	$4 = ($2 + [-24])
	$2 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = ($5 + [8])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$8 }
	$2 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$4), [1536])
	goto $label$7 
	
.LABEL $label$8
	$2 = [0]
	$8 = CALL db_find_i64(*(($5 + [8])), *(($5 + [16])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$2 = CALL $186($4, $8)
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$4), [1536])
	
.LABEL $label$7
	$8 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($8, [2368])
	$4 = *(($0 + [60]))
	*($9 + [8]) = [1]
	CALL eosio_assert(((int_32)*($2 + [16]) != (int_32)[0]), [2880])
	$1 = *($4)
	*($9 + [24]) = ($9 + [8])
	CALL eosio_assert($8, [1696])
	CALL $249(($4 + [8]), $2, $1, ($9 + [24]))
	*([0] + [4]) = ($9 + [32])
}

void .FUNC $592 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$6 = (*([0] + [4]) - [48])
	$11 = $6
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	CALL $593($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1856])
	$5 = *($1 + [16])
	$7 = *(($1 + [20]))
	$9 = ($7 - $5)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[40]))
	$3 = [54]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$3 }
	$8 = (((int_32)((uint_32)($9 + [-40]) / (uint_32)[40]) * (int_32)[38]) + $3)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($3 + [-38])
	
.LABEL $label$2
	if ( ($8 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($8)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($6 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($11) = $9
	$5 = ($9 + $8)
	*($11 + [8]) = $5
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [1920])
	CALL memcpy($9, $1, [8])
	$3 = ($9 + [8])
	CALL eosio_assert(((int_32)($5 - $3) > (int_32)[7]), [1920])
	CALL memcpy($3, ($1 + [8]), [8])
	$3 = ($9 + [16])
	*($11 + [4]) = $3
	$10 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [20])) - *(($1 + [16]))) / (int_32)[40]))
	
.LOOP $label$6:
	$6 = (CASTING uint_32)(uint_64 $10)
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	$7 = ((int_64)$10) != (int_64)0
	*($11 + [24]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)($5 - $3) > (int_32)[0]), [1920])
	CALL memcpy($3, ($11 + [24]), [1])
	$3 = ($3 + [1])
	*($11 + [4]) = $3
	if ( $7 ){ goto $label$6 }
	$6 = *(($1 + [20]))
	$3 = *(($1 + [16]))
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	*($11 + [16]) = $11
	*($11 + [24]) = $3
	*((($11 + [24]) + [8])) = ($3 + [12])
	*((($11 + [24]) + [12])) = ($3 + [16])
	*((($11 + [24]) + [16])) = ($3 + [24])
	*($11 + [28]) = ($3 + [8])
	CALL $430(($11 + [24]), ($11 + [16]))
	$3 = ($3 + [40])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	
.LABEL $label$7
	CALL db_update_i64(*($1 + [32]), $2, $9, $8)
	if ( ($8 <= [513]) ){ goto $label$9 }
	CALL free($9)
	
.LABEL $label$9
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($11 + [48])
}

void .FUNC $593 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [48])
	*([0] + [4]) = $14
	if ( (*(*($0)) == 0) ){ goto $label$1 }
	$4 = ($1 + [16])
	$3 = (($14 + [8]) + [24])
	$2 = *($0 + [12])
	$5 = (($14 + [8]) + [8])
	$6 = (($14 + [8]) + [12])
	$8 = ($14 + [40])
	$9 = ($1 + [20])
	$10 = [0]
	
.LOOP $label$2:
	*($5) = [0]
	*($6) = [0]
	*(($7 = (($14 + [8]) + [16]))) = (int_64)0
	*($3) = (int_64)0
	*($8) = (int_64)1397703940
	*($14 + [8]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$11 = (uint_64)*($8) >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$4:
	$13 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$13 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$4 }
	
.LABEL $label$3
	CALL eosio_assert($13, [3776])
	$11 = ((int_64)*($12) + (int_64)1)
	*(($12 = ($1 + [8]))) = $11
	*($5) = (*(*(($0 + [4]))) + $10)
	*($14 + [8]) = $11
	*($6) = *(*(($0 + [8])))
	*($7) = *($2)
	$12 = *(($0 + [16]))
	*($3) = *($12)
	*(($3 + [12])) = *(($12 + [12]))
	*(($3 + [8])) = *(($12 + [8]))
	*(($3 + [4])) = *(($12 + [4]))
	$12 = *($9)
	if ( ((int_32)$12 == (int_32)*(($1 + [24]))) ){ goto $label$8 }
	CALL memcpy($12, ($14 + [8]), [40])
	*($9) = (*($9) + [40])
	goto $label$7 
	
.LABEL $label$8
	CALL $583($4, ($14 + [8]))
	
.LABEL $label$7
	$10 = ($10 + [1])
	if ( ($10 <= *(*($0))) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($14 + [48])
}

void .FUNC $590 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	$12 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [1744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [1792])
	$4 = *($1)
	if ( (*(*($3)) == 0) ){ goto $label$2 }
	$9 = ($1 + [8])
	$8 = ($1 + [12])
	$6 = ($3 + [4])
	$7 = ($1 + [16])
	$10 = [0]
	
.LOOP $label$3:
	*($12) = [0]
	*($12 + [4]) = [0]
	*($12) = ($10 + *(*($6)))
	*($12 + [4]) = *(*(($3 + [8])))
	*($12 + [6]) = [2]
	$5 = *(($1 + [12]))
	if ( ((int_32)$5 == (int_32)*($7)) ){ goto $label$5 }
	*($5) = *($12)
	*($8) = (*($8) + [8])
	goto $label$4 
	
.LABEL $label$5
	CALL $439($9, $12)
	
.LABEL $label$4
	$10 = ($10 + [1])
	if ( ($10 <= *(*($3))) ){ goto $label$3 }
	$11 = *($1)
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [12])
	$9 = ($1 + [8])
	$11 = $4
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$11), [1856])
	$5 = *($9)
	$3 = *($8)
	$8 = ($3 - $5)
	$11 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$10 = [8]
	
.LOOP $label$6:
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$10 = ((((int_32)uint_32(($8 + [-8]) >> [3]) * (int_32)[7]) + $10) + [7])
	
.LABEL $label$7
	if ( ($10 <= [513]) ){ goto $label$9 }
	$3 = CALL malloc($10)
	goto $label$8 
	
.LABEL $label$9
	$3 = ($13 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$8
	*($12) = $3
	*($12 + [8]) = ($3 + $10)
	CALL eosio_assert(((int_32)$10 > (int_32)[7]), [1920])
	CALL memcpy($3, $1, [8])
	*($12 + [4]) = ($3 + [8])
	CALL $436($12, $9)
	CALL db_update_i64(*($1 + [24]), $2, $3, $10)
	if ( ($10 <= [513]) ){ goto $label$10 }
	CALL free($3)
	
.LABEL $label$10
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $591 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $955([40])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24]) = [0]
	*($3 + [28]) = $1
	CALL $594(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [32])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $443(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [16])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [20])) = $1
	CALL $956($1)
	
.LABEL $label$4
	CALL $956($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $596 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	$12 = $13
	*([0] + [4]) = $13
	$2 = *($0)
	$3 = *($0 + [4])
	if ( (*(*($3)) == 0) ){ goto $label$2 }
	$9 = ($1 + [8])
	$8 = ($1 + [12])
	$4 = *($3 + [12])
	$6 = ($3 + [4])
	$7 = ($1 + [16])
	$10 = [0]
	
.LOOP $label$3:
	*($12 + [4]) = [0]
	*($12) = [0]
	*($12) = ($10 + *(*($6)))
	*($12 + [4]) = *(*(($3 + [8])))
	*($12 + [6]) = [2]
	*($1) = *($4)
	$5 = *(($1 + [12]))
	if ( ((int_32)$5 == (int_32)*($7)) ){ goto $label$5 }
	*($5) = *($12)
	*($8) = (*($8) + [8])
	goto $label$4 
	
.LABEL $label$5
	CALL $439($9, $12)
	
.LABEL $label$4
	$10 = ($10 + [1])
	if ( ($10 <= *(*($3))) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [12])
	$9 = ($1 + [8])
	
.LABEL $label$1
	$5 = *($9)
	$3 = *($8)
	$8 = ($3 - $5)
	$11 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$10 = [8]
	
.LOOP $label$6:
	$10 = ($10 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$10 = ((((int_32)uint_32(($8 + [-8]) >> [3]) * (int_32)[7]) + $10) + [7])
	
.LABEL $label$7
	if ( ($10 <= [513]) ){ goto $label$9 }
	$3 = CALL malloc($10)
	goto $label$8 
	
.LABEL $label$9
	$3 = ($13 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$8
	*($12) = $3
	*($12 + [8]) = ($3 + $10)
	CALL eosio_assert(((int_32)$10 > (int_32)[7]), [1920])
	CALL memcpy($3, $1, [8])
	*($12 + [4]) = ($3 + [8])
	CALL $436($12, $9)
	$11 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-4315240091392933888, *(*($0 + [8])), $11, $3, $10)
	if ( ($10 <= [513]) ){ goto $label$10 }
	CALL free($3)
	
.LABEL $label$10
	if ( (uint_64)($11 <= *($2 + [16])) ){ goto $label$11 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $597 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$2 = *($0 + [4])
	*($1) = *(*($2))
	*($1 + [8]) = *(*($2 + [4]))
	$2 = *($0)
	CALL eosio_assert([1], [1920])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($4 | [8]), ($1 + [8]), [2])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($4 | [10]), ($1 + [16]), [8])
	CALL eosio_assert([1], [1920])
	CALL memcpy(($4 + [18]), ($1 + [24]), [8])
	$3 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)-4315232062152900608, *(*($0 + [8])), $3, $4, [26])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $594 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$4 = (*([0] + [4]) - [48])
	$10 = $4
	*([0] + [4]) = $4
	$2 = *($0)
	CALL $595(*($0 + [4]), $1)
	$3 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $3)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[40]))
	$9 = [54]
	
.LOOP $label$1:
	$9 = ($9 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$3 }
	$6 = (((int_32)((uint_32)($7 + [-40]) / (uint_32)[40]) * (int_32)[38]) + $9)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($9 + [-38])
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL malloc($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($4 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$4
	*($10) = $7
	$3 = ($7 + $6)
	*($10 + [8]) = $3
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [1920])
	CALL memcpy($7, $1, [8])
	$9 = ($7 + [8])
	CALL eosio_assert(((int_32)($3 - $9) > (int_32)[7]), [1920])
	CALL memcpy($9, ($1 + [8]), [8])
	$9 = ($7 + [16])
	*($10 + [4]) = $9
	$8 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [20])) - *(($1 + [16]))) / (int_32)[40]))
	
.LOOP $label$6:
	$4 = (CASTING uint_32)(uint_64 $8)
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	$5 = ((int_64)$8) != (int_64)0
	*($10 + [24]) = (($5) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)($3 - $9) > (int_32)[0]), [1920])
	CALL memcpy($9, ($10 + [24]), [1])
	$9 = ($9 + [1])
	*($10 + [4]) = $9
	if ( $5 ){ goto $label$6 }
	$4 = *(($1 + [20]))
	$9 = *(($1 + [16]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$7 }
	
.LOOP $label$8:
	*($10 + [16]) = $10
	*($10 + [24]) = $9
	*((($10 + [24]) + [8])) = ($9 + [12])
	*((($10 + [24]) + [12])) = ($9 + [16])
	*((($10 + [24]) + [16])) = ($9 + [24])
	*($10 + [28]) = ($9 + [8])
	CALL $430(($10 + [24]), ($10 + [16]))
	$9 = ($9 + [40])
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	$8 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($2 + [8]), (int_64)-4315237476541136896, *(*($0 + [8])), $8, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$9 }
	CALL free($7)
	
.LABEL $label$9
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$10 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $595 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [48])
	*([0] + [4]) = $14
	$12 = *($0)
	*($1 + [8]) = (int_64)0
	*($1) = *($12)
	if ( (*(*($0 + [4])) == 0) ){ goto $label$1 }
	$2 = *($0 + [12])
	$4 = ($1 + [16])
	$3 = (($14 + [8]) + [24])
	$5 = (($14 + [8]) + [8])
	$6 = (($14 + [8]) + [12])
	$8 = ($14 + [40])
	$9 = ($1 + [20])
	$10 = [0]
	
.LOOP $label$2:
	*($5) = [0]
	*($6) = [0]
	*(($7 = (($14 + [8]) + [16]))) = (int_64)0
	*($3) = (int_64)0
	*($8) = (int_64)1397703940
	*($14 + [8]) = (int_64)0
	CALL eosio_assert([1], [3712])
	$11 = (uint_64)*($8) >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$4:
	$13 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$13 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$4 }
	
.LABEL $label$3
	CALL eosio_assert($13, [3776])
	$11 = ((int_64)*($12) + (int_64)1)
	*(($12 = ($1 + [8]))) = $11
	*($5) = (*(*(($0 + [8]))) + $10)
	*($14 + [8]) = $11
	*($6) = *(*($0))
	*($7) = *($2)
	$12 = *(($0 + [16]))
	*($3) = *($12)
	*(($3 + [12])) = *(($12 + [12]))
	*(($3 + [8])) = *(($12 + [8]))
	*(($3 + [4])) = *(($12 + [4]))
	$12 = *($9)
	if ( ((int_32)$12 == (int_32)*(($1 + [24]))) ){ goto $label$8 }
	CALL memcpy($12, ($14 + [8]), [40])
	*($9) = (*($9) + [40])
	goto $label$7 
	
.LABEL $label$8
	CALL $583($4, ($14 + [8]))
	
.LABEL $label$7
	$10 = ($10 + [1])
	if ( ($10 <= *(*(($0 + [4])))) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($14 + [48])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	CALL $804(($0 + [8]), $1, $2, $3, $4)
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($6 + [2]) = [0]
	*($6) = [0]
	*($6 + [4]) = [0]
	*($6 + [8]) = [0]
	*($6 + [20]) = $1
	*($6 + [16]) = $1
	*($6 + [24]) = ($1 + $3)
	*($6 + [32]) = ($6 + [16])
	*($6 + [40]) = $6
	CALL $803(($6 + [40]), ($6 + [32]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($6 + [8]))
	$7 = *($6 + [4])
	$0 = *($6 + [2])
	$4 = *($6)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ($4 & [65535])), (int_32 ($0 & [255])), (int_32 ($7 & [65535])), (int_32 $3), (int_32 $5))
	*([0] + [4]) = ($6 + [48])
	return [1]
}

void .FUNC $598 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $955(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $971($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $956($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $956($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $599 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1632])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1632])
	CALL memcpy(($1 + [8]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1632])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $32 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	CALL $446(($0 + [8]), $1, $3, $4)
	CALL $816(($0 + [1128]), $1, $2)
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	*($6 + [16]) = (int_64)0
	*($6 + [24]) = [0]
	*($6 + [36]) = $1
	*($6 + [32]) = $1
	*($6 + [40]) = ($1 + $3)
	*($6 + [48]) = ($6 + [32])
	*($6 + [56]) = ($6 + [8])
	CALL $815(($6 + [56]), ($6 + [48]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($6 + [24]))
	$7 = *(($6 + [20]))
	$0 = *(($6 + [16]))
	$4 = *($6 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $4), (int_64 $0), (int_32 $7), (int_32 $3), (int_32 $5))
	*([0] + [4]) = ($6 + [64])
	return [1]
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [256])
	*([0] + [4]) = $2
	*(($3 = $2) + [140]) = $0
	*($3 + [128]) = *($1)
	*($3 + [132]) = *($1 + [4])
	$0 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $1)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	$2 = CALL memset(($3 + [16]), [0], [112])
	CALL $481($2)
	*($3 + [148]) = $0
	*($3 + [144]) = $0
	*($3 + [152]) = ($0 + $1)
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [1632])
	CALL memcpy(($3 + [168]), *($3 + [148]), [1])
	*($3 + [148]) = (*($3 + [148]) + [1])
	*($3 + [8]) = ((int_32)*($3 + [168]) != (int_32)[0])
	*($3 + [160]) = ($3 + [144])
	*($3 + [172]) = ($3 + [24])
	*($3 + [168]) = $2
	*($3 + [176]) = ($3 + [28])
	*($3 + [180]) = ($3 + [32])
	*($3 + [184]) = ($3 + [36])
	*($3 + [188]) = ($3 + [37])
	*($3 + [192]) = ($3 + [40])
	*($3 + [196]) = ($3 + [64])
	*($3 + [200]) = ($3 + [80])
	*($3 + [204]) = ($3 + [81])
	*($3 + [208]) = ($3 + [82])
	*($3 + [212]) = ($3 + [84])
	*($3 + [216]) = ($3 + [86])
	*($3 + [220]) = ($3 + [87])
	*($3 + [224]) = ($3 + [88])
	*($3 + [228]) = ($3 + [89])
	*($3 + [232]) = ($3 + [90])
	*($3 + [236]) = ($3 + [91])
	*($3 + [240]) = ($3 + [92])
	*($3 + [244]) = ($3 + [96])
	*($3 + [248]) = ($3 + [104])
	$2 = ($3 + [112])
	*($3 + [252]) = $2
	CALL $483(($3 + [168]), ($3 + [160]))
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($0)
	
.LABEL $label$4
	*($3 + [172]) = ($3 + [128])
	*($3 + [168]) = ($3 + [140])
	CALL $849(($3 + [168]), ($3 + [8]))
	$2 = *($2)
	if ( ($2 == 0) ){ goto $label$5 }
	$1 = *($3 + [116])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$7 }
	$0 = ([0] - $2)
	$1 = ($1 + [-24])
	
.LOOP $label$8:
	if ( ((*(($1 + [12])) & [1]) == 0) ){ goto $label$9 }
	CALL $956(*(($1 + [20])))
	
.LABEL $label$9
	if ( ((*($1) & [1]) == 0) ){ goto $label$10 }
	CALL $956(*(($1 + [8])))
	
.LABEL $label$10
	$1 = ($1 + [-24])
	if ( ((int_32)($1 + $0) != (int_32)[-24]) ){ goto $label$8 }
	$1 = *(($3 + [112]))
	goto $label$6 
	
.LABEL $label$7
	$1 = $2
	
.LABEL $label$6
	*(($3 + [116])) = $2
	CALL $956($1)
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [256])
	return [1]
}

void .FUNC $31 (int_32 $0, int_64 $1)
{
	CALL $838(($0 + [1128]), $1)
}

void .FUNC $281 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	*($7 + [72]) = $1
	*($7 + [68]) = $2
	*(($7 + [56])) = [0]
	*($7 + [40]) = (int_64)-1
	*($7 + [48]) = (int_64)0
	$5 = *($0 + [8])
	*($7 + [24]) = $5
	*($7 + [32]) = $5
	$2 = CALL db_find_i64($5, $5, (int_64)-4283603440564174848, $1)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$3 }
	$2 = CALL $285(($7 + [24]), $2)
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)($7 + [24])), [1536])
	$5 = *(($0 + [8]))
	*($7 + [20]) = ($7 + [72])
	*($7 + [16]) = ($7 + [68])
	CALL eosio_assert([1], [1696])
	CALL $286(($7 + [24]), $2, $5, ($7 + [16]))
	$3 = *($7 + [48])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *(($0 + [8]))
	*($7 + [20]) = ($7 + [72])
	*($7 + [16]) = ($7 + [68])
	CALL $284(($7 + [8]), ($7 + [24]), $5, ($7 + [16]))
	$3 = *($7 + [48])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($7 + [52])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	$4 = *($2 + [12])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [16])) = $4
	CALL $956($4)
	
.LABEL $label$8
	CALL $956($2)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($7 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $3
	
.LABEL $label$4
	*($6) = $3
	CALL $956($0)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [80])
}

void .FUNC $538 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL require_auth(*($0 + [40]))
	$4 = [0]
	$3 = [0]
	$5 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)-4921685625297436672, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $167($0, $5)
	
.LABEL $label$1
	
.LOOP $label$3:
	if ( ($3 == 0) ){ goto $label$2 }
	CALL eosio_assert([1], [4912])
	CALL eosio_assert([1], [4208])
	$5 = [0]
	$2 = CALL db_next_i64(*($3 + [56]), ($6 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $167($0, $2)
	
.LABEL $label$4
	CALL $547($0, $3)
	$3 = $5
	$4 = ($4 + [1])
	if ( ((int_32)($4 & [65535]) != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $539 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [2480])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $955([24])
	CALL $546($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [16])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $545(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $956($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}