(data (i32.const 8192) "eosio.token\00")
(data (i32.const 8204) "EOS\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8294) "the token is not supported!\00")
(data (i32.const 8322) "memo length range 6-10!\00")
(data (i32.const 8346) "the first character cannot be 0!\00")
(data (i32.const 8379) "all characters must be numbers!\00")
(data (i32.const 8411) "invalid symbol name\00")
(data (i32.const 8431) "the same token is already added.\00")
(data (i32.const 8464) "invalid input params!\00")
(data (i32.const 8486) "the token is already removed.\00")
(data (i32.const 8516) "string is too long to be a valid name\00")
(data (i32.const 8554) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8621) "character is not in allowed character set for names\00")
(data (i32.const 8673) "string is too long to be a valid symbol_code\00")
(data (i32.const 8718) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8771) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8822) "error reading iterator\00")
(data (i32.const 8845) "read\00")
(data (i32.const 8850) "get\00")
(data (i32.const 8854) "cannot create objects in table of another contract\00")
(data (i32.const 8905) "write\00")
(data (i32.const 8911) "object passed to modify is not in multi_index\00")
(data (i32.const 8957) "cannot modify objects in table of another contract\00")
(data (i32.const 9008) "updater cannot change primary key when modifying an object\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$4 (param i32 i64 i32 i32)))
(import "env" "require_auth" (func $fimport$5 (param i64)))
(import "env" "action_data_size" (func $fimport$6 (result i32)))
(import "env" "read_action_data" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$10))
(import "env" "memset" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$13 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$16 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$17 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$18 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$20 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$21 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$22 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$23 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$24 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$25 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$28 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$30 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$31 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$32 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $17))
(export "_ZdlPv" (func $35))
(export "_Znwj" (func $33))
(export "_Znaj" (func $34))
(export "_ZdaPv" (func $36))
(export "_ZnwjSt11align_val_t" (func $37))
(export "_ZnajSt11align_val_t" (func $38))
(export "_ZdlPvSt11align_val_t" (func $39))
(export "_ZdaPvSt11align_val_t" (func $40))
(table $0 5 5 anyfunc)
(elem (i32.const 1) $5 $13 $14 $12)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17484))
(global $global$2 i32 (i32.const 17484))


int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $51($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [160]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $21(($4 + [24]), ($4 + [160]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [128]) + [8])) = $3
	*(($6 = (($4 + [144]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [144]) = $7
	*($4 + [128]) = $7
	$3 = *($6)
	*((($4 + [160]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [144])
	*($4 + [40]) = $0
	*($4 + [160]) = $0
	*($4 + [164]) = ($4 + [120])
	*($4 + [160]) = ($4 + [24])
	CALL $22(($4 + [160]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $54($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [176])
	return $2
}

int_32 .FUNC $19 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [88]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $51($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*(($4 + [80])) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [52]) = $3
	*($4 + [48]) = $3
	*($4 + [56]) = ($3 + $2)
	CALL $23(($4 + [48]), ($4 + [64]))
	$5 = ($4 + [76])
	CALL $24(($4 + [48]), $5)
	*(($6 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$6 = *($6)
	*((($4 + [96]) + [8])) = $6
	*(($7 = (($4 + [112]) + [8]))) = $6
	$8 = *($4)
	*($4 + [112]) = $8
	*($4 + [96]) = $8
	$6 = *($7)
	*((($4 + [128]) + [8])) = $6
	*(($4 + [40])) = $6
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [88])
	*($4 + [128]) = ($4 + [16])
	CALL $25(($4 + [128]), ($4 + [64]))
	if ( ($2 <= [513]) ){ goto $label$5 }
	CALL $54($3)
	
.LABEL $label$5
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$6 }
	*(($4 + [80])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$3 = *($4 + [64])
	if ( ($3 == 0) ){ goto $label$7 }
	*($4 + [68]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $54($0)
	
.LABEL $label$1
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $44($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8850])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $29($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8845])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8845])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8845])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8845])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8845])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $27(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $20 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $51($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [56]) + [16]))) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8845])
	CALL memcpy(($4 + [56]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [8845])
	CALL memcpy((($4 + [56]) + [8]), ($2 + [8]), [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [8845])
	CALL memcpy(($4 + [24]), ($2 + [16]), [8])
	*($3) = *($4 + [24])
	*(($4 + [44])) = ($2 + [24])
	*((($4 + [24]) + [24])) = ($2 + $7)
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $2
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4 + [64])
	$0 = *($4 + [56])
	*((($4 + [96]) + [8])) = *($8)
	*($4 + [96]) = *($4 + [80])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [96]) + [8]))
	*((($4 + [112]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [96])
	*($4 + [8]) = $1
	*($4 + [112]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $54($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8850])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $30($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [8845])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $42(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $42(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$3 = (*($1 + [4]) - *($1))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($2 + [24])) = ($3 + ($4 << [3]))
	*($2 + [16]) = $3
	*($2 + [20]) = $3
	$5 = *($1)
	$4 = (*(($1 + [4])) - $5)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $4)
	*($2 + [20]) = ($3 + $4)
	
.LABEL $label$3
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$3 = (*(($1 + [16])) - *($1 + [12]))
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$1 }
	$3 = CALL _Znwj($3)
	*(($2 + [8])) = ($3 + ($4 << [4]))
	*($2) = $3
	*($2 + [4]) = $3
	$4 = *(($1 + [12]))
	$1 = (*(($1 + [16])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($3, $4, $1)
	*($2 + [4]) = ($3 + $1)
	
.LABEL $label$4
	CALL $32($0, ($2 + [16]), $2)
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$5 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$6 }
	*($2 + [20]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $44(($2 + [16]))
	
.LABEL $label$1
	CALL $44($2)
	(unreachable)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [8850])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$8 = (CASTING uint_32)(uint_64 $5)
	$3 = *($1)
	$6 = *($1 + [4])
	$4 = int_32(($6 - $3) >> [4])
	if ( ((uint_32)$4 >= (uint_32)$8) ){ goto $label$4 }
	CALL $31($1, ($8 - $4))
	$6 = *(($1 + [4]))
	$3 = *($1)
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 <= (uint_32)$8) ){ goto $label$5 }
	$6 = ($3 + ($8 << [4]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ($0 + [4])
	$4 = *($8)
	
.LOOP $label$6:
	$7 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($7) - $4) > (uint_32)[7]), [8845])
	CALL memcpy($3, *($8), [8])
	$4 = (*($8) + [8])
	*($8) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($7) - $4) > (uint_32)[7]), [8845])
	CALL memcpy(($2 + [8]), *($8), [8])
	*(($3 + [8])) = *($2 + [8])
	$4 = (*($8) + [8])
	*($8) = $4
	$3 = ($3 + [16])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$6 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $28($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $43($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $43($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $41($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $4($1, *($1 + [4]))
	$3 = ($1 + [4])
	*($1) = $3
	$4 = (int_64)0
	*($1 + [4 align=4]) = (int_64)0
	$5 = *($0 + [4])
	$6 = [0]
	$7 = ($0 + [8])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($7)), [8850])
	$8 = ($0 + [4])
	$5 = *($8)
	$9 = *($5)
	$5 = ($5 + [1])
	*($8) = $5
	$6 = ($6 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($9 & [127]) << $6)))
	$6 = ($6 + [7])
	if ( ($9 & [128]) ){ goto $label$1 }
	$10 = (CASTING uint_32)(uint_64 $4)
	if ( ($10 == 0) ){ goto $label$2 }
	$11 = ($1 + [4])
	$7 = [0]
	
.LOOP $label$3:
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) > (uint_32)[7]), [8845])
	$8 = ($0 + [4])
	CALL memcpy(($2 + [8]), *($8), [8])
	*($8) = (*($8) + [8])
	$4 = *($2 + [8])
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$7 }
	$9 = $11
	$12 = *($5 + [16])
	if ( ((uint_64)$4 >= (uint_64)$12) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$5 = $3
	$9 = $3
	$13 = [3]
	goto $label$4 
	
.LABEL $label$6
	$13 = [10]
	goto $label$4 
	
.LABEL $label$5
	$13 = [2]
	
.LABEL $label$4
	
.LOOP $label$9:
	goto $label$27 
	
.LABEL $label$31
	$9 = $5
	$5 = $6
	$12 = *($5 + [16])
	if ( ((uint_64)$4 >= (uint_64)$12) ){ goto $label$20 }
	$13 = [10]
	goto $label$9 
	
.LABEL $label$30
	$6 = *($5)
	if ( $6 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$29
	if ( ((uint_64)$12 >= (uint_64)$4) ){ goto $label$15 }
	$13 = [9]
	goto $label$9 
	
.LABEL $label$28
	$9 = ($5 + [4])
	$6 = *($5 + [4])
	if ( ($6 == 0) ){ goto $label$18 }
	$13 = [0]
	goto $label$9 
	
.LABEL $label$27
	$5 = $9
	goto $label$19 
	
.LABEL $label$26
	if ( (*($9) == 0) ){ goto $label$14 }
	$13 = [4]
	goto $label$9 
	
.LABEL $label$25
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)$10) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$24
	$9 = $5
	if ( *($9) ){ goto $label$13 }
	$13 = [6]
	goto $label$9 
	
.LABEL $label$23
	*(($6 = CALL _Znwj([24]))) = (int_64)0
	*($6 + [8]) = $5
	*($9) = $6
	*($6 + [16]) = $4
	$5 = *(*($1))
	if ( ($5 == 0) ){ goto $label$10 }
	$13 = [7]
	goto $label$9 
	
.LABEL $label$22
	*($1) = $5
	$6 = *($9)
	$13 = [8]
	goto $label$9 
	
.LABEL $label$21
	CALL $10(*(($1 + [4])), $6)
	*(($5 = ($1 + [8]))) = (*($5) + [1])
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)$10) ){ goto $label$11 }
	goto $label$2 
	
.LABEL $label$20
	$13 = [2]
	goto $label$9 
	
.LABEL $label$19
	$13 = [1]
	goto $label$9 
	
.LABEL $label$18
	$13 = [3]
	goto $label$9 
	
.LABEL $label$17
	$13 = [11]
	goto $label$9 
	
.LABEL $label$16
	$13 = [1]
	goto $label$9 
	
.LABEL $label$15
	$13 = [3]
	goto $label$9 
	
.LABEL $label$14
	$13 = [6]
	goto $label$9 
	
.LABEL $label$13
	$13 = [4]
	goto $label$9 
	
.LABEL $label$12
	$13 = [5]
	goto $label$9 
	
.LABEL $label$11
	$13 = [5]
	goto $label$9 
	
.LABEL $label$10
	$13 = [8]
	goto $label$9 
	
.LABEL $label$8
	$5 = *($8)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	$13
	return $0
}

int_32 .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $46())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $50($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $48 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $41 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $47 (int_32 $0)
{
}

int_32 .FUNC $46 ()
{
	return [9072]
}

int_32 .FUNC $45 (int_32 $0)
{
	return (($0 + [-48]) <= [10])
}

void .FUNC $44 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $51 (int_32 $0)
{
	return CALL $52([9088], $0)
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($1 + [12])
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$4 }
	$9 = ($1 + [12])
	$11 = *($8 + [16])
	$10 = *($6)
	if ( ((uint_64)$10 >= (uint_64)$11) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$8 = $7
	$9 = $7
	$13 = [3]
	goto $label$1 
	
.LABEL $label$3
	$13 = [27]
	goto $label$1 
	
.LABEL $label$2
	$13 = [2]
	
.LABEL $label$1
	
.LOOP $label$5:
	goto $label$53 
	
.LABEL $label$57
	$9 = $8
	$8 = $12
	$11 = *($8 + [16])
	if ( ((uint_64)$10 >= (uint_64)$11) ){ goto $label$28 }
	$13 = [27]
	goto $label$5 
	
.LABEL $label$56
	$12 = *($8)
	if ( $12 ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$55
	if ( ((uint_64)$11 >= (uint_64)$10) ){ goto $label$23 }
	$13 = [26]
	goto $label$5 
	
.LABEL $label$54
	$9 = ($8 + [4])
	$12 = *($8 + [4])
	if ( ($12 == 0) ){ goto $label$26 }
	$13 = [0]
	goto $label$5 
	
.LABEL $label$53
	$8 = $9
	goto $label$27 
	
.LABEL $label$52
	$14 = ($1 + [8])
	if ( (*($9) == 0) ){ goto $label$22 }
	$13 = [4]
	goto $label$5 
	
.LABEL $label$51
	$8 = *(($1 + [16]))
	goto $label$20 
	
.LABEL $label$50
	$14 = ($1 + [8])
	$9 = $8
	if ( *($9) ){ goto $label$21 }
	$13 = [23]
	goto $label$5 
	
.LABEL $label$49
	*(($12 = CALL _Znwj([24]))) = (int_64)0
	*($12 + [8]) = $8
	*($9) = $12
	*($12 + [16]) = *($6)
	$8 = *(*($14))
	if ( ($8 == 0) ){ goto $label$6 }
	$13 = [24]
	goto $label$5 
	
.LABEL $label$48
	*($14) = $8
	$12 = *($9)
	$13 = [25]
	goto $label$5 
	
.LABEL $label$47
	CALL $10(*(($1 + [12])), $12)
	$8 = (*($8) + [1])
	*(($8 = ($1 + [16]))) = $8
	$13 = [5]
	goto $label$5 
	
.LABEL $label$46
	*($1) = *(*($5 + [4]))
	$10 = (CASTING uint_64)(uint_32 $8)
	$5 = [8]
	$13 = [6]
	goto $label$5 
	
.LABEL $label$45
	$5 = ($5 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$19 }
	$13 = [7]
	goto $label$5 
	
.LABEL $label$44
	$9 = *($1 + [8])
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$18 }
	$13 = [8]
	goto $label$5 
	
.LABEL $label$43
	$13 = [9]
	goto $label$5 
	
.LABEL $label$42
	$12 = $9
	$8 = *($12 + [4])
	if ( ($8 == 0) ){ goto $label$14 }
	$13 = [10]
	goto $label$5 
	
.LABEL $label$41
	$9 = $8
	$8 = *($9)
	if ( $8 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$40
	$9 = *($12 + [8])
	if ( ((int_32)*($9) == (int_32)$12) ){ goto $label$13 }
	$13 = [21]
	goto $label$5 
	
.LABEL $label$39
	$12 = ($12 + [8])
	$13 = [22]
	goto $label$5 
	
.LABEL $label$38
	$8 = *($12)
	$12 = ($8 + [8])
	$9 = *($8 + [8])
	if ( ((int_32)$8 != (int_32)*($9)) ){ goto $label$12 }
	$13 = [11]
	goto $label$5 
	
.LABEL $label$37
	$5 = ($5 + [8])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$17 }
	$13 = [12]
	goto $label$5 
	
.LABEL $label$36
	if ( ($5 <= [513]) ){ goto $label$11 }
	$13 = [19]
	goto $label$5 
	
.LABEL $label$35
	$8 = CALL $51($5)
	goto $label$10 
	
.LABEL $label$34
	$8 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $8
	$13 = [14]
	goto $label$5 
	
.LABEL $label$33
	*($3) = $8
	*($3 + [8]) = ($8 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [8905])
	CALL memcpy($8, $1, [8])
	*($3 + [4]) = ($8 + [8])
	CALL $11($3, $14)
	$10 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($4 + [8]), (int_64)-4497217159762018304, *(*($0 + [8])), $10, $8, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$9 }
	$13 = [15]
	goto $label$5 
	
.LABEL $label$32
	if ( ((uint_64)$10 >= (uint_64)*($4 + [16])) ){ goto $label$8 }
	$13 = [17]
	goto $label$5 
	
.LABEL $label$31
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$30
	CALL $54($8)
	if ( (uint_64)($10 <= *($4 + [16])) ){ goto $label$7 }
	$13 = [16]
	goto $label$5 
	
.LABEL $label$29
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$28
	$13 = [2]
	goto $label$5 
	
.LABEL $label$27
	$13 = [1]
	goto $label$5 
	
.LABEL $label$26
	$13 = [3]
	goto $label$5 
	
.LABEL $label$25
	$13 = [28]
	goto $label$5 
	
.LABEL $label$24
	$13 = [1]
	goto $label$5 
	
.LABEL $label$23
	$13 = [3]
	goto $label$5 
	
.LABEL $label$22
	$13 = [23]
	goto $label$5 
	
.LABEL $label$21
	$13 = [4]
	goto $label$5 
	
.LABEL $label$20
	$13 = [5]
	goto $label$5 
	
.LABEL $label$19
	$13 = [6]
	goto $label$5 
	
.LABEL $label$18
	$13 = [12]
	goto $label$5 
	
.LABEL $label$17
	$13 = [9]
	goto $label$5 
	
.LABEL $label$16
	$13 = [11]
	goto $label$5 
	
.LABEL $label$15
	$13 = [10]
	goto $label$5 
	
.LABEL $label$14
	$13 = [20]
	goto $label$5 
	
.LABEL $label$13
	$13 = [11]
	goto $label$5 
	
.LABEL $label$12
	$13 = [22]
	goto $label$5 
	
.LABEL $label$11
	$13 = [13]
	goto $label$5 
	
.LABEL $label$10
	$13 = [14]
	goto $label$5 
	
.LABEL $label$9
	$13 = [18]
	goto $label$5 
	
.LABEL $label$8
	$13 = [16]
	goto $label$5 
	
.LABEL $label$7
	$13 = [17]
	goto $label$5 
	
.LABEL $label$6
	$13 = [25]
	goto $label$5 
	$13
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $44($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $4(($1 + [8]), *(($1 + [12])))
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $6 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [112])
	$global$0 = $3
	*($3 + [64]) = $1
	$4 = *($2 + [8])
	*($3 + [56]) = $4
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $5
	$6 = [1]
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$7 = ($2 + [1])
	$2 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8411])
	*(($6 = (($3 + [16]) + [32]))) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$4 = *($0)
	*($3 + [16]) = $4
	*($3 + [24]) = (int_64)-2063328927043551232
	$2 = CALL db_find_i64($4, (int_64)-2063328927043551232, (int_64)-4497217159762018304, $1)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$8 }
	$8 = CALL $3(($3 + [16]), $2)
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)($3 + [16])), [8771])
	$9 = ($8 + [12])
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$10 }
	$4 = *($3 + [56])
	$6 = $9
	
.LOOP $label$11:
	$7 = (uint_64)(*($2 + [16]) <= $4)
	$6 = ( $6 ? $2 : $7 )
	$2 = *(($2 + ($7 << [2])))
	if ( $2 ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$10 }
	if ( ((uint_64)$4 >= (uint_64)*($6 + [16])) ){ goto $label$9 }
	
.LABEL $label$10
	$6 = $9
	
.LABEL $label$9
	CALL eosio_assert(((int_32)$6 == (int_32)$9), [8431])
	$4 = *($0)
	*($3 + [80]) = ($3 + [56])
	CALL $7(($3 + [16]), $8, $4, ($3 + [80]))
	$7 = *($3 + [40])
	if ( $7 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$5 = *($0)
	*($3 + [12]) = ($3 + [64])
	*($3 + [8]) = ($3 + [56])
	*($3 + [104]) = $5
	CALL eosio_assert(((int_64)$4 == (int_64)CALL $fimport$2()), [8854])
	*($3 + [84]) = ($3 + [8])
	*($3 + [80]) = ($3 + [16])
	*($3 + [88]) = ($3 + [104])
	*(($2 = CALL _Znwj([32]))) = (int_64)0
	*($2 + [12 align=4]) = (int_64)0
	*($2 + [8]) = ($2 + [12])
	*($2 + [20]) = ($3 + [16])
	CALL $8(($3 + [80]), $2)
	*($3 + [96]) = $2
	$4 = *($2)
	*($3 + [80]) = $4
	$0 = *($2 + [24])
	*($3 + [76]) = $0
	$9 = ($3 + [44])
	$7 = *($9)
	if ( ((uint_32)$7 >= (uint_32)*($6)) ){ goto $label$14 }
	*($7 + [8]) = $4
	*($7 + [16]) = $0
	*($3 + [96]) = [0]
	*($7) = $2
	*($9) = ($7 + [24])
	$2 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( $2 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $9(($3 + [40]), ($3 + [96]), ($3 + [80]), ($3 + [76]))
	$2 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( ($2 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL $4(($2 + [8]), *(($2 + [12])))
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$7 = *($3 + [40])
	if ( ($7 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$0 = ($3 + [44])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$16 }
	
.LOOP $label$17:
	$2 = ($2 + [-24])
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$18 }
	CALL $4(($6 + [8]), *(($6 + [12])))
	CALL _ZdlPv($6)
	
.LABEL $label$18
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$17 }
	$2 = *(($3 + [40]))
	goto $label$15 
	
.LABEL $label$16
	$2 = $7
	
.LABEL $label$15
	*($0) = $7
	CALL _ZdlPv($2)
	$global$0 = ($3 + [112])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [112])
}

void .FUNC $7 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [8911])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [8957])
	$6 = *($3)
	$7 = *($1)
	$8 = ($1 + [12])
	$3 = *($8)
	if ( ($3 == 0) ){ goto $label$4 }
	$9 = ($1 + [12])
	$11 = *($3 + [16])
	$10 = *($6)
	if ( ((uint_64)$10 >= (uint_64)$11) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = $8
	$9 = $8
	$13 = [3]
	goto $label$1 
	
.LABEL $label$3
	$13 = [27]
	goto $label$1 
	
.LABEL $label$2
	$13 = [2]
	
.LABEL $label$1
	
.LOOP $label$5:
	goto $label$53 
	
.LABEL $label$57
	$9 = $3
	$3 = $12
	$11 = *($3 + [16])
	if ( ((uint_64)$10 >= (uint_64)$11) ){ goto $label$28 }
	$13 = [27]
	goto $label$5 
	
.LABEL $label$56
	$12 = *($3)
	if ( $12 ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$55
	if ( ((uint_64)$11 >= (uint_64)$10) ){ goto $label$23 }
	$13 = [26]
	goto $label$5 
	
.LABEL $label$54
	$9 = ($3 + [4])
	$12 = *($3 + [4])
	if ( ($12 == 0) ){ goto $label$26 }
	$13 = [0]
	goto $label$5 
	
.LABEL $label$53
	$3 = $9
	goto $label$27 
	
.LABEL $label$52
	$14 = ($1 + [8])
	if ( (*($9) == 0) ){ goto $label$22 }
	$13 = [4]
	goto $label$5 
	
.LABEL $label$51
	$3 = ($1 + [16])
	$10 = $7
	goto $label$20 
	
.LABEL $label$50
	$14 = ($1 + [8])
	$9 = $3
	if ( *($9) ){ goto $label$21 }
	$13 = [23]
	goto $label$5 
	
.LABEL $label$49
	*(($12 = CALL _Znwj([24]))) = (int_64)0
	*($12 + [8]) = $3
	*($9) = $12
	*($12 + [16]) = *($6)
	$3 = *(*($14))
	if ( ($3 == 0) ){ goto $label$6 }
	$13 = [24]
	goto $label$5 
	
.LABEL $label$48
	*($14) = $3
	$12 = *($9)
	$13 = [25]
	goto $label$5 
	
.LABEL $label$47
	CALL $10(*(($1 + [12])), $12)
	*(($3 = ($1 + [16]))) = (*($3) + [1])
	$10 = *($1)
	$13 = [5]
	goto $label$5 
	
.LABEL $label$46
	CALL eosio_assert(((int_64)$7 == (int_64)$10), [9008])
	$10 = *($3)
	$6 = [8]
	$13 = [6]
	goto $label$5 
	
.LABEL $label$45
	$6 = ($6 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$19 }
	$13 = [7]
	goto $label$5 
	
.LABEL $label$44
	$9 = *($1 + [8])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$18 }
	$13 = [8]
	goto $label$5 
	
.LABEL $label$43
	$13 = [9]
	goto $label$5 
	
.LABEL $label$42
	$12 = $9
	$3 = *($12 + [4])
	if ( ($3 == 0) ){ goto $label$14 }
	$13 = [10]
	goto $label$5 
	
.LABEL $label$41
	$9 = $3
	$3 = *($9)
	if ( $3 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$40
	$9 = *($12 + [8])
	if ( ((int_32)*($9) == (int_32)$12) ){ goto $label$13 }
	$13 = [21]
	goto $label$5 
	
.LABEL $label$39
	$12 = ($12 + [8])
	$13 = [22]
	goto $label$5 
	
.LABEL $label$38
	$3 = *($12)
	$12 = ($3 + [8])
	$9 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($9)) ){ goto $label$12 }
	$13 = [11]
	goto $label$5 
	
.LABEL $label$37
	$6 = ($6 + [8])
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$17 }
	$13 = [12]
	goto $label$5 
	
.LABEL $label$36
	if ( ($6 <= [513]) ){ goto $label$11 }
	$13 = [19]
	goto $label$5 
	
.LABEL $label$35
	$3 = CALL $51($6)
	goto $label$10 
	
.LABEL $label$34
	$3 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $3
	$13 = [14]
	goto $label$5 
	
.LABEL $label$33
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [8905])
	CALL memcpy($3, $1, [8])
	*($5 + [4]) = ($3 + [8])
	CALL $11($5, $14)
	CALL db_update_i64(*($1 + [24]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$9 }
	$13 = [15]
	goto $label$5 
	
.LABEL $label$32
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	$13 = [17]
	goto $label$5 
	
.LABEL $label$31
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$30
	CALL $54($3)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$7 }
	$13 = [16]
	goto $label$5 
	
.LABEL $label$29
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$28
	$13 = [2]
	goto $label$5 
	
.LABEL $label$27
	$13 = [1]
	goto $label$5 
	
.LABEL $label$26
	$13 = [3]
	goto $label$5 
	
.LABEL $label$25
	$13 = [28]
	goto $label$5 
	
.LABEL $label$24
	$13 = [1]
	goto $label$5 
	
.LABEL $label$23
	$13 = [3]
	goto $label$5 
	
.LABEL $label$22
	$13 = [23]
	goto $label$5 
	
.LABEL $label$21
	$13 = [4]
	goto $label$5 
	
.LABEL $label$20
	$13 = [5]
	goto $label$5 
	
.LABEL $label$19
	$13 = [6]
	goto $label$5 
	
.LABEL $label$18
	$13 = [12]
	goto $label$5 
	
.LABEL $label$17
	$13 = [9]
	goto $label$5 
	
.LABEL $label$16
	$13 = [11]
	goto $label$5 
	
.LABEL $label$15
	$13 = [10]
	goto $label$5 
	
.LABEL $label$14
	$13 = [20]
	goto $label$5 
	
.LABEL $label$13
	$13 = [11]
	goto $label$5 
	
.LABEL $label$12
	$13 = [22]
	goto $label$5 
	
.LABEL $label$11
	$13 = [13]
	goto $label$5 
	
.LABEL $label$10
	$13 = [14]
	goto $label$5 
	
.LABEL $label$9
	$13 = [18]
	goto $label$5 
	
.LABEL $label$8
	$13 = [16]
	goto $label$5 
	
.LABEL $label$7
	$13 = [17]
	goto $label$5 
	
.LABEL $label$6
	$13 = [25]
	goto $label$5 
	$13
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $4($0, *($1))
	CALL $4($0, *($1 + [4]))
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $5 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	$5 = *($0)
	if ( ((int_64)$5 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$5 != (int_64)$2) ){ goto $label$1 }
	CALL eosio_assert(CALL $1($0, *($0 + [8]), *($3 + [8])), [8294])
	$3 = *($4)
	$6 = ($3 & [1])
	if ( $6 ){ goto $label$4 }
	$0 = [0]
	if ( (uint_32($3 >> [1]) <= [6]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$0 = [0]
	if ( (*($4 + [4]) <= [6]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( $6 ){ goto $label$6 }
	$0 = uint_32($3 >> [1])
	goto $label$5 
	
.LABEL $label$6
	$0 = *($4 + [4])
	
.LABEL $label$5
	$0 = ($0 <= [11])
	
.LABEL $label$2
	CALL eosio_assert($0, [8322])
	if ( (*($4) & [1]) ){ goto $label$8 }
	$0 = ($4 + [1])
	goto $label$7 
	
.LABEL $label$8
	$0 = *($4 + [8])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)*($0) != (int_32)[48]), [8346])
	$3 = *($4)
	if ( ($3 & [1]) ){ goto $label$10 }
	$0 = ($4 + [1])
	$4 = uint_32($3 >> [1])
	if ( $4 ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$10
	$0 = *($4 + [8])
	$4 = *($4 + [4])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	
.LOOP $label$11:
	CALL eosio_assert(((int_32)CALL $45(*($0)) != (int_32)[0]), [8379])
	$0 = ($0 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$11 }
	
.LABEL $label$1
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8516])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8621])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8554])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8621])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8822])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $51($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([32]))) = (int_64)0
	*($5 + [12 align=4]) = (int_64)0
	*($5 + [20]) = $0
	*($5 + [8]) = ($5 + [12])
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8845])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $26(($3 + [32]), ($5 + [8]))
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $9(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $54($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $4(($1 + [8]), *(($1 + [12])))
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC memory ()
{
}

int_32 .FUNC $1 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [56]) = [8192]
	*($3 + [60]) = CALL $48([8192])
	*($3 + [8]) = *($3 + [56])
	if ( ((int_64)*(CALL $2(($3 + [16]), ($3 + [8]))) != (int_64)$1) ){ goto $label$2 }
	$4 = CALL $48([8204])
	if ( ($4 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [8673])
	goto $label$4 
	
.LABEL $label$5
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = (int_64)0
	
.LOOP $label$6:
	$6 = *(($4 + [8203]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [8718])
	
.LABEL $label$7
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$6 }
	$7 = [1]
	if ( ((int_64)((int_64)((int_64)$5 << (int_64)8) | (int_64)4) != (int_64)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = [1]
	if ( ((int_64)4 == (int_64)$2) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = [0]
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$5 = *($0)
	*($3 + [16]) = $5
	*($3 + [24]) = (int_64)-2063328927043551232
	$4 = CALL db_find_i64($5, (int_64)-2063328927043551232, (int_64)-4497217159762018304, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $3(($3 + [16]), $4)
	CALL eosio_assert(((int_32)*($4 + [20]) == (int_32)($3 + [16])), [8771])
	$7 = ($4 + [12])
	$4 = *($7)
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = $7
	
.LOOP $label$10:
	$0 = (uint_64)(*($4 + [16]) <= $2)
	$6 = ( $6 ? $4 : $0 )
	$4 = *(($4 + ($0 << [2])))
	if ( $4 ){ goto $label$10 }
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$9 }
	if ( ((uint_64)*($6 + [16]) <= (uint_64)$2) ){ goto $label$8 }
	
.LABEL $label$9
	$6 = $7
	
.LABEL $label$8
	$7 = ((int_32)$6 != (int_32)$7)
	$0 = *($3 + [40])
	if ( ($0 == 0) ){ goto $label$1 }
	$8 = ($3 + [44])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $4(($6 + [8]), *(($6 + [12])))
	CALL _ZdlPv($6)
	
.LABEL $label$14
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$13 }
	$4 = *(($3 + [40]))
	goto $label$11 
	
.LABEL $label$12
	$4 = $0
	
.LABEL $label$11
	*($8) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$global$0 = ($3 + [64])
	return $7
}

void .FUNC $14 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = *($2 + [8])
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $2
	$2 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$8 = ($2 + [1])
	$2 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$2 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8411])
	*(($3 + [56])) = [0]
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	$5 = *($0)
	*($3 + [24]) = $5
	*($3 + [32]) = (int_64)-2063328927043551232
	$9 = [0]
	$2 = CALL db_find_i64($5, (int_64)-2063328927043551232, (int_64)-4497217159762018304, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	$9 = CALL $3(($3 + [24]), $2)
	CALL eosio_assert(((int_32)*($9 + [20]) == (int_32)($3 + [24])), [8771])
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8486])
	$10 = ($9 + [12])
	$2 = *($10)
	if ( ($2 == 0) ){ goto $label$8 }
	$7 = $10
	
.LOOP $label$9:
	$8 = (uint_64)(*($2 + [16]) <= $4)
	$7 = ( $7 ? $2 : $8 )
	$2 = *(($2 + ($8 << [2])))
	if ( $2 ){ goto $label$9 }
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$8 }
	if ( ((uint_64)$4 >= (uint_64)*($7 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	$7 = $10
	
.LABEL $label$7
	*($3 + [16]) = $7
	CALL eosio_assert(((int_32)$7 != (int_32)$10), [8486])
	$5 = *($0)
	*($3 + [8]) = ($3 + [16])
	CALL $15(($3 + [24]), $9, $5, ($3 + [8]))
	$8 = *($3 + [48])
	if ( ($8 == 0) ){ goto $label$10 }
	$9 = ($3 + [52])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$14 }
	CALL $4(($7 + [8]), *(($7 + [12])))
	CALL _ZdlPv($7)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($3 + [48]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $8
	
.LABEL $label$11
	*($9) = $8
	CALL _ZdlPv($2)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [8911])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [8957])
	$6 = ($1 + [8])
	$7 = *($1)
	$8 = *(*($3))
	$3 = *($8 + [4])
	if ( ($3 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$9 = $3
	$3 = *($9)
	if ( $3 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = *($8 + [8])
	if ( ((int_32)*($9) == (int_32)$8) ){ goto $label$1 }
	$10 = ($8 + [8])
	
.LOOP $label$4:
	$3 = *($10)
	$10 = ($3 + [8])
	$9 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($9)) ){ goto $label$4 }
	
.LABEL $label$1
	if ( ((int_32)*($6) != (int_32)$8) ){ goto $label$5 }
	*($6) = $9
	
.LABEL $label$5
	*(($3 = ($1 + [16]))) = (*($3) + [-1])
	CALL $16(*(($1 + [12])), $8)
	CALL _ZdlPv($8)
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [9008])
	$11 = *($3)
	$8 = [8]
	
.LOOP $label$6:
	$8 = ($8 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$6 }
	$12 = ($1 + [12])
	$9 = *($1 + [8])
	if ( ((int_32)$9 == (int_32)$12) ){ goto $label$7 }
	
.LOOP $label$8:
	$10 = $9
	$3 = *($10 + [4])
	if ( ($3 == 0) ){ goto $label$10 }
	
.LOOP $label$11:
	$9 = $3
	$3 = *($9)
	if ( $3 ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$9 = *($10 + [8])
	if ( ((int_32)*($9) == (int_32)$10) ){ goto $label$9 }
	$10 = ($10 + [8])
	
.LOOP $label$12:
	$3 = *($10)
	$10 = ($3 + [8])
	$9 = *($3 + [8])
	if ( ((int_32)$3 != (int_32)*($9)) ){ goto $label$12 }
	
.LABEL $label$9
	$8 = ($8 + [8])
	if ( ((int_32)$9 != (int_32)$12) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($8 <= [513]) ){ goto $label$14 }
	$3 = CALL $51($8)
	goto $label$13 
	
.LABEL $label$14
	$3 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$13
	*($5) = $3
	*($5 + [8]) = ($3 + $8)
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [8905])
	CALL memcpy($3, $1, [8])
	*($5 + [4]) = ($3 + [8])
	CALL $11($5, $6)
	CALL db_update_i64(*($1 + [24]), $2, $3, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$17 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL $54($3)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$15 }
	
.LABEL $label$16
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$15
	$global$0 = ($5 + [16])
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = $1
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *($1 + [4])
	if ( ($4 == 0) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = $4
	$4 = *($2)
	if ( $4 ){ goto $label$5 }
	
.LABEL $label$4
	$3 = *($2 + [4])
	if ( $3 ){ goto $label$2 }
	$5 = ($2 + [8])
	$6 = [0]
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*($3 + [8]) = *($2 + [8])
	$5 = ($2 + [8])
	$6 = [1]
	
.LABEL $label$1
	$7 = *(($2 + [8]))
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$10 }
	*($7 + [4]) = $3
	$7 = *($2 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($7) = $3
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$11 }
	$4 = *($7 + [4])
	$7 = *($2 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$4 = [0]
	$0 = $3
	$7 = *($2 + [12])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$8 }
	
.LABEL $label$9
	$8 = *($1 + [8])
	*($5) = $8
	*(($8 + ( [0] ? [4] : ((int_32)*(*($1 + [8])) == (int_32)$1) ))) = $2
	*(($5 = *($1)) + [8]) = $2
	*($2) = $5
	$5 = *($1 + [4])
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*(($2 + [12])) = *($1 + [12])
	$0 = ( $2 ? $0 : ((int_32)$0 == (int_32)$1) )
	if ( ($7 & [255]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (($7 & [255]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	if ( ($0 == 0) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$13 }
	*($3 + [12]) = [1]
	return 
	
.LABEL $label$13
	
.LOOP $label$21:
	$1 = *($4 + [12])
	$2 = *($4 + [8])
	if ( ((int_32)*($2) == (int_32)$4) ){ goto $label$33 }
	if ( (($1 & [255]) == 0) ){ goto $label$32 }
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$33
	if ( (($1 & [255]) == 0) ){ goto $label$31 }
	$1 = $4
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$32
	*(($4 + [12])) = [1]
	*($2 + [12]) = [0]
	$1 = *($2 + [4])
	$3 = *($1)
	*($2 + [4]) = $3
	if ( ($3 == 0) ){ goto $label$34 }
	*($3 + [8]) = $2
	
.LABEL $label$34
	*($1 + [8]) = *($2 + [8])
	*((($3 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($3) == (int_32)$2) ))) = $1
	*($1) = $2
	*($2 + [8]) = $1
	$2 = *($4)
	$0 = ( $4 ? $0 : ((int_32)$0 == (int_32)$2) )
	$4 = *($2 + [4])
	$2 = *($4)
	if ( $2 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$31
	*(($4 + [12])) = [1]
	$1 = *($4 + [4])
	*($2) = $1
	*($2 + [12]) = [0]
	if ( ($1 == 0) ){ goto $label$35 }
	*($1 + [8]) = $2
	
.LABEL $label$35
	*(($4 + [8])) = *($2 + [8])
	$3 = *($2 + [8])
	if ( ((int_32)*($3) == (int_32)$2) ){ goto $label$37 }
	*($3 + [4]) = $4
	goto $label$36 
	
.LABEL $label$37
	*($3) = $4
	$1 = *($2)
	
.LABEL $label$36
	*(($2 + [8])) = $4
	*(($4 + [4])) = $2
	$0 = ( $4 ? $0 : ((int_32)$0 == (int_32)$2) )
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$29 }
	
.LABEL $label$30
	if ( (*($2 + [12]) == 0) ){ goto $label$28 }
	
.LABEL $label$29
	$4 = *($1 + [4])
	if ( ($4 == 0) ){ goto $label$38 }
	if ( (*($4 + [12]) == 0) ){ goto $label$27 }
	
.LABEL $label$38
	*($1 + [12]) = [0]
	$4 = *($1 + [8])
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$39 }
	if ( (*($4 + [12]) & [255]) ){ goto $label$22 }
	
.LABEL $label$39
	*($4 + [12]) = [1]
	return 
	
.LABEL $label$28
	$3 = ($2 + [12])
	goto $label$26 
	
.LABEL $label$27
	if ( ($2 == 0) ){ goto $label$41 }
	if ( (*($2 + [12]) == 0) ){ goto $label$40 }
	$4 = *($1 + [4])
	
.LABEL $label$41
	*($4 + [12]) = [1]
	*($1 + [12]) = [0]
	$2 = *($4)
	*(($1 + [4])) = $2
	if ( ($2 == 0) ){ goto $label$42 }
	*($2 + [8]) = $1
	
.LABEL $label$42
	$3 = ($1 + [12])
	$2 = ($4 + [12])
	*($4 + [8]) = *($1 + [8])
	*((($0 = *($1 + [8])) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$1) ))) = $4
	*($1 + [8]) = $4
	*($4) = $1
	$4 = ($4 + [8])
	goto $label$25 
	
.LABEL $label$40
	$3 = ($2 + [12])
	
.LABEL $label$26
	$2 = ($1 + [12])
	$4 = ($1 + [8])
	
.LABEL $label$25
	$4 = *($4)
	*($2) = *($4 + [12])
	*($4 + [12]) = [1]
	$2 = *($4)
	$0 = *($2 + [4])
	*($4) = $0
	*($3) = [1]
	if ( ($0 == 0) ){ goto $label$43 }
	*($0 + [8]) = $4
	
.LABEL $label$43
	*($2 + [8]) = *($4 + [8])
	*((($0 = *($4 + [8])) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$4) ))) = $2
	*($4 + [8]) = $2
	*(($2 + [4])) = $4
	return 
	
.LABEL $label$24
	if ( (*($2 + [12]) == 0) ){ goto $label$18 }
	
.LABEL $label$23
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$44 }
	if ( (*($1 + [12]) == 0) ){ goto $label$17 }
	
.LABEL $label$44
	*($4 + [12]) = [0]
	$4 = *($4 + [8])
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$20 }
	if ( (*($4 + [12]) == 0) ){ goto $label$19 }
	
.LABEL $label$22
	$2 = *($4 + [8])
	$4 = *(($2 + (((int_32)*($2) == (int_32)$4) << [2])))
	goto $label$21 
	
.LABEL $label$20
	$4 = $0
	
.LABEL $label$19
	*($4 + [12]) = [1]
	return 
	
.LABEL $label$18
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	if ( (*($1 + [12]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	*($2 + [12]) = [1]
	*($4 + [12]) = [0]
	$0 = *($2 + [4])
	*($4) = $0
	if ( ($0 == 0) ){ goto $label$45 }
	*($0 + [8]) = $4
	
.LABEL $label$45
	$1 = ($4 + [12])
	$0 = ($2 + [12])
	*($2 + [8]) = *($4 + [8])
	*((($3 = *($4 + [8])) + ( [0] ? [4] : ((int_32)*($3) == (int_32)$4) ))) = $2
	*($4 + [8]) = $2
	*(($2 + [4])) = $4
	$4 = ($2 + [8])
	goto $label$14 
	
.LABEL $label$15
	$1 = ($1 + [12])
	$0 = ($4 + [12])
	$4 = ($4 + [8])
	
.LABEL $label$14
	$4 = *($4)
	*($0) = *($4 + [12])
	*($4 + [12]) = [1]
	$2 = *($4 + [4])
	$0 = *($2)
	*($4 + [4]) = $0
	*($1) = [1]
	if ( ($0 == 0) ){ goto $label$46 }
	*($0 + [8]) = $4
	
.LABEL $label$46
	*($2 + [8]) = *($4 + [8])
	*((($0 = *($4 + [8])) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$4) ))) = $2
	*($4 + [8]) = $2
	*($2) = $4
	return 
	
.LABEL $label$6
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$2 > (int_64)3625960649986670591) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-4997502827547852800) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [60]) = [0]
	*($3 + [56]) = [1]
	*($3) = *($3 + [56])
	CALL $18($0, $1, $3)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_64)$2 == (int_64)3625960649986670592) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)3626382862451736576) ){ goto $label$1 }
	*($3 + [36]) = [0]
	*($3 + [32]) = [2]
	*($3 + [24]) = *($3 + [32])
	CALL $19($0, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [44]) = [0]
	*($3 + [40]) = [3]
	*($3 + [16]) = *($3 + [40])
	CALL $20($0, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [52]) = [0]
	*($3 + [48]) = [4]
	*($3 + [8]) = *($3 + [48])
	CALL $20($0, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $47([0])
	$global$0 = ($3 + [64])
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($1 + [8])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $3) > (int_32)[0]), [8905])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$1 = ($1 + [4])
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$5 = ($0 + [4])
	
.LOOP $label$3:
	$8 = $7
	*($2) = *($8 + [16])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $3) > (int_32)[7]), [8905])
	CALL memcpy(*($5), $2, [8])
	$3 = (*($5) + [8])
	*($5) = $3
	$6 = *($8 + [4])
	if ( ($6 == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	$7 = $6
	$6 = *($7)
	if ( $6 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$7 = *($8 + [8])
	if ( ((int_32)*($7) == (int_32)$8) ){ goto $label$4 }
	$8 = ($8 + [8])
	
.LOOP $label$7:
	$6 = *($8)
	$8 = ($6 + [8])
	$7 = *($6 + [8])
	if ( ((int_32)$6 != (int_32)*($7)) ){ goto $label$7 }
	
.LABEL $label$4
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $12 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = *(($2 + [8]))
	*((($3 + [16]) + [8])) = $4
	$5 = *($2)
	*(($3 + [8])) = $4
	*($3) = $5
	*($3 + [16]) = $5
	CALL $6($0, $1, $3)
	$global$0 = ($3 + [32])
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL eosio_assert(((int_32)int_32((*($1 + [4]) - *($1)) >> [3]) == (int_32)int_32((*($2 + [4]) - *($2)) >> [4])), [8464])
	CALL require_auth(*($0))
	$4 = *($1)
	if ( ((int_32)*($1 + [4]) == (int_32)$4) ){ goto $label$1 }
	$5 = [0]
	$6 = ($1 + [4])
	$7 = [0]
	$8 = [0]
	
.LOOP $label$2:
	$9 = *(($4 + $5))
	$4 = (*($2) + $7)
	$10 = *(($4 + [8]))
	*((($3 + [16]) + [8])) = $10
	$11 = *($4)
	*(($3 + [8])) = $10
	*($3 + [16]) = $11
	*($3) = $11
	CALL $6($0, $9, $3)
	$5 = ($5 + [8])
	$7 = ($7 + [16])
	$4 = *($1)
	$8 = ($8 + [1])
	if ( ($8 <= int_32((*($6) - $4) >> [3])) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($3 + [32])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $49(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9068])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $49(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $54($0)
	
.LABEL $label$1
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*($0) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($5) + $0))
	
.LABEL $label$1
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	$4 = (*($1 + [4]) - *($1))
	if ( ($4 == 0) ){ goto $label$4 }
	$6 = int_32($4 >> [3])
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = CALL _Znwj($4)
	*(($3 + [24])) = ($4 + ($6 << [3]))
	*($3 + [16]) = $4
	*($3 + [20]) = $4
	$6 = *($1)
	$1 = (*(($1 + [4])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $6, $1)
	*($3 + [20]) = ($4 + $1)
	
.LABEL $label$4
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	$1 = (*($2 + [4]) - *($2))
	if ( ($1 == 0) ){ goto $label$5 }
	$4 = int_32($1 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	$1 = CALL _Znwj($1)
	*(($3 + [8])) = ($1 + ($4 << [4]))
	*($3) = $1
	*($3 + [4]) = $1
	$4 = *($2)
	$2 = (*(($2 + [4])) - $4)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $4, $2)
	*($3 + [4]) = ($1 + $2)
	
.LABEL $label$5
	CALL void $5((int_32 ($3 + [16])), (int_32 $3), (int_32 $0))
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$6 }
	*($3 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$1 = *($3 + [16])
	if ( ($1 == 0) ){ goto $label$7 }
	*($3 + [20]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$3
	CALL $44(($3 + [16]))
	
.LABEL $label$2
	CALL $44($3)
	(unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $51($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9068])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $51($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $44($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $44($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [4]))
	$3 = ($2 + ($3 << [4]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [4]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $51($1)
	
.LABEL $label$2
	*(CALL $46()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $51(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $54($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $53($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8208])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9080]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9084])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9080]) = [1]
	$2 = ($2 << [16])
	*([0] + [9084]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9084])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9084]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9080]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9080]) = [1]
	$3 = ($3 << [16])
	*([0] + [9084]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9084])
	
.LABEL $label$10
	*([0] + [9084]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17472])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17280]
	$3 = (((int_32)$1 * (int_32)[12]) + [17280])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}