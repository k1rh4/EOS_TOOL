(data (i32.const 4) "\80f\00\00")
(data (i32.const 16) "\"eosotcbackup\"\00")
(data (i32.const 32) "fake\00")
(data (i32.const 48) "next primary key in table is at autoincrement limit\00")
(data (i32.const 112) "cannot create objects in table of another contract\00")
(data (i32.const 176) "active\00")
(data (i32.const 192) "receipt\00")
(data (i32.const 208) "write\00")
(data (i32.const 224) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 288) "invalid symbol name\00")
(data (i32.const 320) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 384) "cannot decrement iterator at beginning of table\00")
(data (i32.const 432) "error reading iterator\00")
(data (i32.const 464) "read\00")
(data (i32.const 480) "fake currency\00")
(data (i32.const 496) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 560) "order is not exist.\00")
(data (i32.const 592) "price is too high\00")
(data (i32.const 624) "transfer\00")
(data (i32.const 640) "trade success\00")
(data (i32.const 656) "cannot pass end iterator to erase\00")
(data (i32.const 704) "cannot increment end iterator\00")
(data (i32.const 736) "cannot pass end iterator to modify\00")
(data (i32.const 784) "object passed to modify is not in multi_index\00")
(data (i32.const 832) "cannot modify objects in table of another contract\00")
(data (i32.const 896) "updater cannot change primary key when modifying an object\00")
(data (i32.const 960) "object passed to erase is not in multi_index\00")
(data (i32.const 1008) "cannot erase objects in table of another contract\00")
(data (i32.const 1072) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1136) "not the owner.\00")
(data (i32.const 1152) "order retrieve\00")
(data (i32.const 1168) "invalid token transfer\00")
(data (i32.const 1200) "must bid a positive amount\00")
(data (i32.const 1232) "ask\00")
(data (i32.const 1248) "invalid token in ask\00")
(data (i32.const 1280) "must ask a positive amount\00")
(data (i32.const 1312) "invalid token in bid\00")
(data (i32.const 1344) "take\00")
(data (i32.const 1360) "get\00")
(data (i32.const 9760) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__udivti3" (func $fimport$1 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$2))
(import "env" "action_data_size" (func $fimport$3 (result i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "current_time" (func $fimport$5 (result i64)))
(import "env" "db_end_i64" (func $fimport$6 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "db_idx_double_find_primary" (func $fimport$9 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx_double_remove" (func $fimport$10 (param i32)))
(import "env" "db_idx_double_store" (func $fimport$11 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx_double_update" (func $fimport$12 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$16 (param i32)))
(import "env" "db_store_i64" (func $fimport$17 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$18 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$19 (param i32 i32)))
(import "env" "memcpy" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$22 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$23 (param i64)))
(import "env" "require_auth2" (func $fimport$24 (param i64 i64)))
(import "env" "send_inline" (func $fimport$25 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN12eosotcbackup4initEv" (func $5))
(export "_ZN12eosotcbackup4testEv" (func $6))
(export "_Z15string_to_priceNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $7))
(export "_ZN12eosotcbackup3askEyN5eosio14extended_assetES1_" (func $8))
(export "_ZN12eosotcbackup7receiptERKNS_3recE" (func $20))
(export "_ZN12eosotcbackup4takeEyyN5eosio14extended_assetES1_" (func $21))
(export "_ZN12eosotcbackup8retrieveEyyN5eosio14extended_assetE" (func $26))
(export "_ZN12eosotcbackup8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $27))
(export "_ZN12eosotcbackup10onTransferEyyN5eosio14extended_assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $28))
(export "apply" (func $29))
(export "malloc" (func $38))
(export "free" (func $41))
(export "memchr" (func $52))
(export "memcmp" (func $53))
(export "strlen" (func $54))
(table $0 4 4 anyfunc)
(elem (i32.const 0) $55 $26 $5 $6)



int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [208])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [208])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [464])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [464])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [464])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [464])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [464])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [464])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [464])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [464])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [464])
	CALL memcpy(($1 + [64]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $40($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9760])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [208])
	*([0] + [4]) = $8
	*($8 + [184]) = $0
	$0 = (int_64)0
	$5 = (int_64)59
	$4 = [624]
	$6 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$0 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$7 = (int_64)0
	if ( ((uint_64)$0 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$0 = ((int_64)$0 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$8 }
	CALL $30(($8 + [136]))
	$0 = *($8 + [144])
	*(($8 + [108])) = *(($8 + [164]))
	*(($4 = (($8 + [96]) + [8]))) = *(($8 + [160]))
	*($8 + [100]) = *(($8 + [156]))
	$7 = *($8 + [136])
	*($8 + [96]) = *($8 + [152])
	$5 = *($4)
	*((($8 + [192]) + [8])) = $5
	*(($4 = (($8 + [112]) + [8]))) = $5
	$5 = *($8 + [96])
	*($8 + [192]) = $5
	*($8 + [112]) = $5
	*($8 + [128]) = $1
	$3 = ($8 + [168])
	CALL $50(($8 + [80]), $3)
	*(($8 + [24])) = *($8 + [128])
	*((($8 + [8]) + [8])) = *($4)
	*($8 + [8]) = *($8 + [112])
	CALL _ZN12eosotcbackup10onTransferEyyN5eosio14extended_assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(($8 + [184]), $7, $0, ($8 + [8]), ($8 + [80]))
	if ( ((*($8 + [80]) & [1]) == 0) ){ goto $label$9 }
	CALL $43(*($8 + [88]))
	
.LABEL $label$9
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	CALL $43(*(($8 + [176])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)8421045207927095296) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-3841130677495922688) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-4993516533478064128) ){ goto $label$7 }
	*($8 + [76]) = [0]
	*($8 + [72]) = [1]
	*($8 + [32 align=4]) = *($8 + [72])
	CALL $31(($8 + [184]), ($8 + [32]))
	goto $label$7 
	
.LABEL $label$11
	*($8 + [68]) = [0]
	*($8 + [64]) = [2]
	*($8 + [40 align=4]) = *($8 + [64])
	CALL $32(($8 + [184]), ($8 + [40]))
	goto $label$7 
	
.LABEL $label$10
	*($8 + [60]) = [0]
	*($8 + [56]) = [3]
	*($8 + [48 align=4]) = *($8 + [56])
	CALL $32(($8 + [184]), ($8 + [48]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [208])
}

void .FUNC _ZN12eosotcbackup10onTransferEyyN5eosio14extended_assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	$21 = (*([0] + [4]) - [256])
	*([0] + [4]) = $21
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$1 }
	CALL require_auth($1)
	$14 = [0]
	$16 = [0]
	$18 = *($3)
	$19 = ((int_64)$18 + (int_64)4611686018427387903)
	if ( ((uint_64)$19 > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$17 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$16 = [1]
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$16 = [0]
	
.LABEL $label$2
	CALL eosio_assert($16, [1168])
	$5 = ((int_64)$18 > (int_64)0)
	CALL eosio_assert($5, [1200])
	CALL $51(($21 + [240]), $4, [0], [3], $4)
	$17 = *($21 + [240])
	$16 = CALL strlen([1232])
	if ( ((int_32)$16 != (int_32)( *($21 + [244]) ? uint_32($17 >> [1]) : ($17 & [1]) )) ){ goto $label$7 }
	$14 = (CALL $48(($21 + [240]), [0], [-1], [1232], $16) == 0)
	$17 = *($21 + [240])
	
.LABEL $label$7
	if ( (($17 & [1]) == 0) ){ goto $label$8 }
	CALL $43(*($21 + [248]))
	
.LABEL $label$8
	if ( ($14 == 0) ){ goto $label$21 }
	CALL $46($4, [0], [4])
	$12 = CALL $47($4, [44], [0])
	$9 = CALL $47($4, [46], [0])
	$13 = CALL $47($4, [32], [0])
	CALL eosio_assert([1], [224])
	$2 = (int_64)5462355
	$17 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$23 }
	
.LOOP $label$24:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$24 }
	
.LABEL $label$23
	$16 = [1]
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$22 }
	goto $label$19 
	
.LABEL $label$21
	$16 = [0]
	CALL $51(($21 + [240]), $4, [0], [4], $4)
	$17 = *($21 + [240])
	$14 = CALL strlen([1344])
	if ( ((int_32)$14 != (int_32)( *($21 + [244]) ? uint_32($17 >> [1]) : ($17 & [1]) )) ){ goto $label$25 }
	$16 = (CALL $48(($21 + [240]), [0], [-1], [1344], $14) == 0)
	$17 = *($21 + [240])
	
.LABEL $label$25
	if ( (($17 & [1]) == 0) ){ goto $label$26 }
	CALL $43(*($21 + [248]))
	
.LABEL $label$26
	if ( ($16 == 0) ){ goto $label$1 }
	CALL $46($4, [0], [5])
	$5 = CALL $47($4, [44], [0])
	$9 = CALL $47($4, [46], [0])
	$13 = CALL $47($4, [32], [0])
	CALL eosio_assert([1], [224])
	$2 = (int_64)5462355
	$17 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	
.LOOP $label$29:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$29 }
	
.LABEL $label$28
	$16 = [1]
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$27 }
	goto $label$17 
	
.LABEL $label$20
	$16 = [0]
	
.LABEL $label$19
	CALL eosio_assert($16, [288])
	CALL $51(($21 + [224]), $4, [0], $13, $4)
	$17 = *($21 + [224])
	$7 = ($17 & [1])
	if ( $7 ){ goto $label$31 }
	$16 = uint_32($17 >> [1])
	if ( ($16 == 0) ){ goto $label$16 }
	$17 = (($21 + [224]) | [1])
	$15 = (int_64)0
	
.LOOP $label$32:
	$14 = *($17)
	if ( ((uint_32)(($14 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$33 }
	$15 = ((int_64)((int_64)((int_64)$15 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$33
	$17 = ($17 + [1])
	$16 = ($16 + [-1])
	if ( $16 ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$16 = *($21 + [228])
	if ( ($16 == 0) ){ goto $label$15 }
	$17 = *(($21 + [232]))
	$15 = (int_64)0
	
.LOOP $label$34:
	$14 = *($17)
	if ( ((uint_32)(($14 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$35 }
	$15 = ((int_64)((int_64)((int_64)$15 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$35
	$17 = ($17 + [1])
	$16 = ($16 + [-1])
	if ( $16 ){ goto $label$34 }
	
.LABEL $label$30
	if ( $7 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$18
	$16 = [0]
	
.LABEL $label$17
	CALL eosio_assert($16, [288])
	CALL $51(($21 + [160]), $4, [0], $13, $4)
	$17 = *($21 + [160])
	$12 = ($17 & [1])
	if ( $12 ){ goto $label$37 }
	$16 = uint_32($17 >> [1])
	if ( ($16 == 0) ){ goto $label$12 }
	$17 = (($21 + [160]) | [1])
	$15 = (int_64)0
	
.LOOP $label$38:
	$14 = *($17)
	if ( ((uint_32)(($14 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$39 }
	$15 = ((int_64)((int_64)((int_64)$15 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$39
	$17 = ($17 + [1])
	$16 = ($16 + [-1])
	if ( $16 ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$16 = *($21 + [164])
	if ( ($16 == 0) ){ goto $label$11 }
	$17 = *(($21 + [168]))
	$15 = (int_64)0
	
.LOOP $label$40:
	$14 = *($17)
	if ( ((uint_32)(($14 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$41 }
	$15 = ((int_64)((int_64)((int_64)$15 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$41
	$17 = ($17 + [1])
	$16 = ($16 + [-1])
	if ( $16 ){ goto $label$40 }
	
.LABEL $label$36
	if ( $12 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$16
	$15 = (int_64)0
	goto $label$13 
	
.LABEL $label$15
	$15 = (int_64)0
	
.LABEL $label$14
	CALL $43(*(($21 + [232])))
	
.LABEL $label$13
	$17 = [-1]
	CALL $51(($21 + [240]), $4, ($13 + [1]), ($13 + ((int_32)$12 ^ (int_32)[-1])), $4)
	$7 = (*($21 + [240]) & [1])
	$8 = *($21 + [248])
	$16 = ( $8 ? (($21 + [240]) | [1]) : $7 )
	$6 = ([255] - $9)
	
.LOOP $label$42:
	$14 = ($16 + $17)
	$9 = ($17 + [1])
	$17 = $9
	if ( *(($14 + [1])) ){ goto $label$42 }
	if ( ($9 == 0) ){ goto $label$44 }
	$18 = (CASTING uint_64)(uint_32 $9)
	$2 = (int_64)8
	$20 = (int_64)0
	
.LOOP $label$45:
	$17 = *($16)
	if ( ((uint_32)(($17 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$20 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$2 & (int_64)4294967288)) | (int_64)$20)
	
.LABEL $label$46
	$16 = ($16 + [1])
	$2 = ((int_64)$2 + (int_64)8)
	$18 = ((int_64)$18 + (int_64)-1)
	if ( ((int_64)$18 != (int_64)0) ){ goto $label$45 }
	goto $label$43 
	
.LABEL $label$44
	$20 = (int_64)0
	
.LABEL $label$43
	if ( ($7 == 0) ){ goto $label$47 }
	CALL $43($8)
	
.LABEL $label$47
	$9 = ($6 + $13)
	$16 = [0]
	$14 = [0]
	if ( ((uint_64)((int_64)$15 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$48 }
	$2 = (uint_64)$20 >> (uint_64)(int_64)8)
	$17 = [0]
	
.LOOP $label$50:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$49 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$51 }
	
.LOOP $label$52:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$49 }
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$52 }
	
.LABEL $label$51
	$14 = [1]
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$50 }
	goto $label$48 
	
.LABEL $label$49
	$14 = [0]
	
.LABEL $label$48
	$9 = ($9 & [255])
	CALL eosio_assert($14, [1248])
	CALL eosio_assert(((int_64)$15 > (int_64)0), [1280])
	if ( ((uint_64)$19 > (uint_64)(int_64)9223372036854775806) ){ goto $label$53 }
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$17 = [0]
	
.LOOP $label$55:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$54 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$56 }
	
.LOOP $label$57:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$54 }
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$57 }
	
.LABEL $label$56
	$16 = [1]
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$55 }
	goto $label$53 
	
.LABEL $label$54
	$16 = [0]
	
.LABEL $label$53
	$2 = (CASTING uint_64)(uint_32 $9)
	CALL eosio_assert($16, [1312])
	CALL eosio_assert($5, [1200])
	CALL $46($4, [0], ($12 + [1]))
	if ( (*($4) & [1]) ){ goto $label$59 }
	$17 = ($4 + [1])
	goto $label$58 
	
.LABEL $label$59
	$17 = *($4 + [8])
	
.LABEL $label$58
	$10 = ((int_64)$20 | (int_64)$2)
	$16 = [-1]
	
.LOOP $label$60:
	$14 = ($17 + $16)
	$9 = ($16 + [1])
	$16 = $9
	if ( *(($14 + [1])) ){ goto $label$60 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$2 = (int_64)0
	$18 = (int_64)59
	$19 = (int_64)0
	
.LOOP $label$61:
	$20 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$11) ){ goto $label$62 }
	$16 = *($17)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$64 }
	$16 = ($16 + [165])
	goto $label$63 
	
.LABEL $label$64
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$63
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$62
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$66 }
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	goto $label$65 
	
.LABEL $label$66
	$20 = ((int_64)$20 & (int_64)15)
	
.LABEL $label$65
	$17 = ($17 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$61 }
	*(($17 = (($21 + [200]) + [16]))) = *(($3 + [16]))
	*(($16 = (($21 + [200]) + [8]))) = *(($3 + [8]))
	*($21 + [200]) = *($3)
	*($21 + [176]) = $15
	*($21 + [184]) = $10
	*((($21 + [24]) + [8])) = *($16)
	*($21 + [192]) = $19
	*((($21 + [24]) + [16])) = *($17)
	*($21 + [24]) = *($21 + [200])
	*(($21 + [8])) = *($21 + [184])
	*(($21 + [16])) = *($21 + [192])
	*($21) = *($21 + [176])
	CALL _ZN12eosotcbackup3askEyN5eosio14extended_assetES1_($0, $1, ($21 + [24]), $21)
	goto $label$1 
	
.LABEL $label$12
	$15 = (int_64)0
	goto $label$9 
	
.LABEL $label$11
	$15 = (int_64)0
	
.LABEL $label$10
	CALL $43(*(($21 + [168])))
	
.LABEL $label$9
	$17 = [-1]
	CALL $51(($21 + [240]), $4, ($13 + [1]), (($5 + [-1]) - $13), $4)
	$12 = (*($21 + [240]) & [1])
	$6 = *($21 + [248])
	$16 = ( $6 ? (($21 + [240]) | [1]) : $12 )
	$7 = ([255] - $9)
	
.LOOP $label$67:
	$14 = ($16 + $17)
	$9 = ($17 + [1])
	$17 = $9
	if ( *(($14 + [1])) ){ goto $label$67 }
	$14 = ($7 + $13)
	if ( ($9 == 0) ){ goto $label$69 }
	$18 = (CASTING uint_64)(uint_32 $9)
	$2 = (int_64)8
	$20 = (int_64)0
	
.LOOP $label$70:
	$17 = *($16)
	if ( ((uint_32)(($17 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$71 }
	$20 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $17) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$2 & (int_64)4294967288)) | (int_64)$20)
	
.LABEL $label$71
	$16 = ($16 + [1])
	$2 = ((int_64)$2 + (int_64)8)
	$18 = ((int_64)$18 + (int_64)-1)
	if ( ((int_64)$18 != (int_64)0) ){ goto $label$70 }
	goto $label$68 
	
.LABEL $label$69
	$20 = (int_64)0
	
.LABEL $label$68
	$17 = ($14 & [255])
	if ( ($12 == 0) ){ goto $label$72 }
	CALL $43($6)
	
.LABEL $label$72
	$18 = (CASTING uint_64)(uint_32 $17)
	$16 = [0]
	if ( ((uint_64)((int_64)$15 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$73 }
	$2 = (uint_64)$20 >> (uint_64)(int_64)8)
	$17 = [0]
	
.LOOP $label$75:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$74 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$76 }
	
.LOOP $label$77:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$74 }
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$77 }
	
.LABEL $label$76
	$16 = [1]
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[7]) ){ goto $label$75 }
	goto $label$73 
	
.LABEL $label$74
	$16 = [0]
	
.LABEL $label$73
	$10 = ((int_64)$20 | (int_64)$18)
	CALL eosio_assert($16, [1168])
	CALL eosio_assert(((int_64)$15 > (int_64)0), [1280])
	CALL $46($4, [0], ($5 + [1]))
	$13 = CALL $47($4, [44], [0])
	CALL $51(($21 + [240]), $4, [0], $13, $4)
	$5 = (*($21 + [240]) & [1])
	$12 = *($21 + [248])
	$17 = ( $12 ? (($21 + [240]) | [1]) : $5 )
	$16 = [-1]
	
.LOOP $label$78:
	$14 = ($17 + $16)
	$9 = ($16 + [1])
	$16 = $9
	if ( *(($14 + [1])) ){ goto $label$78 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$2 = (int_64)0
	$18 = (int_64)59
	$19 = (int_64)0
	
.LOOP $label$79:
	$20 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$11) ){ goto $label$80 }
	$16 = *($17)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$82 }
	$16 = ($16 + [165])
	goto $label$81 
	
.LABEL $label$82
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$81
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$80
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$84 }
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	goto $label$83 
	
.LABEL $label$84
	$20 = ((int_64)$20 & (int_64)15)
	
.LABEL $label$83
	$17 = ($17 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$79 }
	if ( ($5 == 0) ){ goto $label$85 }
	CALL $43($12)
	
.LABEL $label$85
	CALL $46($4, [0], ($13 + [1]))
	CALL $50(($21 + [144]), $4)
	$17 = *($21 + [144])
	$9 = ($17 & [1])
	if ( $9 ){ goto $label$91 }
	$16 = uint_32($17 >> [1])
	if ( ($16 == 0) ){ goto $label$89 }
	$17 = (($21 + [144]) | [1])
	$2 = (int_64)0
	
.LOOP $label$92:
	$14 = *($17)
	if ( ((uint_32)(($14 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$93 }
	$2 = ((int_64)((int_64)((int_64)$2 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$93
	$17 = ($17 + [1])
	$16 = ($16 + [-1])
	if ( $16 ){ goto $label$92 }
	goto $label$90 
	
.LABEL $label$91
	$16 = *($21 + [148])
	if ( ($16 == 0) ){ goto $label$88 }
	$17 = *(($21 + [152]))
	$2 = (int_64)0
	
.LOOP $label$94:
	$14 = *($17)
	if ( ((uint_32)(($14 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$95 }
	$2 = ((int_64)((int_64)((int_64)$2 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$95
	$17 = ($17 + [1])
	$16 = ($16 + [-1])
	if ( $16 ){ goto $label$94 }
	
.LABEL $label$90
	if ( $9 ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$89
	$2 = (int_64)0
	goto $label$86 
	
.LABEL $label$88
	$2 = (int_64)0
	
.LABEL $label$87
	CALL $43(*(($21 + [152])))
	
.LABEL $label$86
	*(($17 = (($21 + [120]) + [16]))) = *(($3 + [16]))
	*(($16 = (($21 + [120]) + [8]))) = *(($3 + [8]))
	*($21 + [120]) = *($3)
	*($21 + [96]) = $15
	*($21 + [104]) = $10
	*((($21 + [72]) + [8])) = *($16)
	*($21 + [112]) = $19
	*((($21 + [72]) + [16])) = *($17)
	*($21 + [72]) = *($21 + [120])
	*((($21 + [48]) + [8])) = *($21 + [104])
	*((($21 + [48]) + [16])) = *($21 + [112])
	*($21 + [48]) = *($21 + [96])
	CALL _ZN12eosotcbackup4takeEyyN5eosio14extended_assetES1_($0, $1, $2, ($21 + [72]), ($21 + [48]))
	
.LABEL $label$1
	*([0] + [4]) = ($21 + [256])
}

void .FUNC _ZN12eosotcbackup4takeEyyN5eosio14extended_assetES1_ (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_32 $24
	$24 = (*([0] + [4]) - [384])
	*([0] + [4]) = $24
	$23 = *($3 + [16])
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [16]
	$21 = (int_64)0
	
.LOOP $label$1:
	$22 = (int_64)0
	if ( ((uint_64)$20 > (uint_64)(int_64)13) ){ goto $label$3 }
	$5 = *($18)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	if ( ((uint_64)$20 > (uint_64)(int_64)11) ){ goto $label$3 }
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	goto $label$2 
	
.LABEL $label$3
	$22 = ((int_64)$22 & (int_64)15)
	
.LABEL $label$2
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$23 != (int_64)$21), [480])
	$6 = *($4 + [16])
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [16]
	$21 = (int_64)0
	
.LOOP $label$6:
	$22 = (int_64)0
	if ( ((uint_64)$20 > (uint_64)(int_64)13) ){ goto $label$8 }
	$5 = *($18)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$5 = ($5 + [165])
	goto $label$9 
	
.LABEL $label$10
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	if ( ((uint_64)$20 > (uint_64)(int_64)11) ){ goto $label$8 }
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	goto $label$7 
	
.LABEL $label$8
	$22 = ((int_64)$22 & (int_64)15)
	
.LABEL $label$7
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$6 }
	CALL eosio_assert(((int_64)$6 != (int_64)$21), [480])
	*((($24 + [248]) + [32])) = [0]
	*($24 + [264]) = (int_64)-1
	$20 = (int_64)0
	*($24 + [272]) = (int_64)0
	$22 = *($0)
	*($24 + [248]) = $22
	*($24 + [256]) = $23
	*($24 + [284]) = [0]
	$7 = [0]
	$18 = CALL db_find_i64($22, $23, (int_64)-6497942746098040832, $2)
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$11 }
	$7 = CALL $9(($24 + [248]), $18)
	CALL eosio_assert(((int_32)*($7 + [68]) == (int_32)($24 + [248])), [496])
	
.LABEL $label$11
	$23 = *(($7 + [32]))
	$19 = (int_64)59
	$18 = [16]
	$21 = (int_64)0
	
.LOOP $label$12:
	$22 = (int_64)0
	if ( ((uint_64)$20 > (uint_64)(int_64)13) ){ goto $label$14 }
	$5 = *($18)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$5 = ($5 + [165])
	goto $label$15 
	
.LABEL $label$16
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	if ( ((uint_64)$20 > (uint_64)(int_64)11) ){ goto $label$14 }
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	goto $label$13 
	
.LABEL $label$14
	$22 = ((int_64)$22 & (int_64)15)
	
.LABEL $label$13
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$12 }
	if ( ((int_64)$23 != (int_64)$21) ){ goto $label$17 }
	CALL eosio_assert([0], [480])
	
.LABEL $label$17
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [560])
	$20 = *($7 + [40])
	$19 = (int_64)$2 >> (int_64)63
	$2 = *($4)
	CALL __multi3(($24 + [40]), $2, $19), $20, (int_64)$20 >> (int_64)63))
	$20 = *($7 + [16])
	$20 = *($3)
	CALL __multi3(($24 + [56]), $20, (int_64)$20 >> (int_64)63), $20, (int_64)$20 >> (int_64)63))
	$22 = *((($24 + [40]) + [8]))
	$20 = *((($24 + [56]) + [8]))
	CALL eosio_assert(( ((uint_64)*($24 + [56]) > (uint_64)*($24 + [40])) ? ((uint_64)$20 > (uint_64)$22) : ((int_64)$20 == (int_64)$22) ), [592])
	$18 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	$20 = *($7 + [16])
	if ( ((int_64)$20 <= (int_64)$2) ){ goto $label$37 }
	CALL __multi3(($24 + [24]), $2, $19, $20, (int_64)$20 >> (int_64)63))
	$20 = *(($7 + [40]))
	CALL __udivti3(($24 + [8]), *($24 + [24]), *((($24 + [24]) + [8])), $20, (int_64)$20 >> (int_64)63))
	$10 = *($24 + [8])
	*($3) = $10
	$9 = *($4 + [8])
	$11 = *($3 + [8])
	$20 = *($7)
	*(($24 + [180])) = *(($4 + [20]))
	*(($24 + [176])) = *(($4 + [16]))
	*(($24 + [172])) = *(($4 + [12]))
	*(($24 + [168])) = *($4 + [8])
	*((($24 + [144]) + [20])) = *(($4 + [4]))
	*($24 + [152]) = $1
	*($24 + [144]) = $20
	*($24 + [160]) = *($4)
	*(($24 + [200])) = *(($3 + [16]))
	*(($24 + [192])) = *($3 + [8])
	*($24 + [184]) = *($3)
	*($24 + [208]) = $18
	$4 = ($24 + [208])
	$14 = (($24 + [144]) + [40])
	$13 = (($24 + [144]) + [16])
	$12 = (($24 + [144]) + [8])
	$15 = *($0)
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [176]
	$21 = (int_64)0
	
.LOOP $label$38:
	if ( ((uint_64)$20 > (uint_64)(int_64)5) ){ goto $label$43 }
	$5 = *($18)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$42 }
	$5 = ($5 + [165])
	goto $label$41 
	
.LABEL $label$43
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$42
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$41
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$40
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$39
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$38 }
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [192]
	$23 = (int_64)0
	
.LOOP $label$44:
	if ( ((uint_64)$20 > (uint_64)(int_64)6) ){ goto $label$49 }
	$5 = *($18)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$48 }
	$5 = ($5 + [165])
	goto $label$47 
	
.LABEL $label$49
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$48
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$47
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$46
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$45
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$23 = ((int_64)$22 | (int_64)$23)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$44 }
	*(($5 = ($24 + [312]))) = [0]
	*($24 + [296]) = $23
	*($24 + [288]) = $15
	*($24 + [304]) = (int_64)0
	*(($18 = CALL $42([16]))) = $15
	*($18 + [8]) = $21
	*(($16 = ($24 + [320]))) = [0]
	$17 = ($18 + [16])
	*($5) = $17
	*(($24 + [308])) = $17
	*($24 + [304]) = $18
	*($24 + [316]) = [0]
	*(($24 + [324])) = [0]
	CALL $14(($24 + [316]), [68])
	$18 = *($16)
	$5 = *($24 + [316])
	*($24 + [236]) = $5
	*($24 + [232]) = $5
	*($24 + [240]) = $18
	*($24 + [216]) = ($24 + [232])
	*($24 + [108]) = $12
	*($24 + [112]) = $13
	*($24 + [116]) = $14
	*($24 + [120]) = $4
	*($24 + [104]) = ($24 + [144])
	CALL $15(($24 + [104]), ($24 + [216]))
	CALL $16(($24 + [104]), ($24 + [288]))
	$18 = *($24 + [104])
	CALL send_inline($18, (*($24 + [108]) - $18))
	$18 = *($24 + [104])
	if ( ($18 == 0) ){ goto $label$50 }
	*($24 + [108]) = $18
	CALL $43($18)
	
.LABEL $label$50
	$18 = *($24 + [316])
	if ( ($18 == 0) ){ goto $label$51 }
	*(($24 + [320])) = $18
	CALL $43($18)
	
.LABEL $label$51
	$18 = *($24 + [304])
	if ( ($18 == 0) ){ goto $label$52 }
	*(($24 + [308])) = $18
	CALL $43($18)
	
.LABEL $label$52
	$23 = *($0)
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [176]
	$21 = (int_64)0
	
.LOOP $label$53:
	if ( ((uint_64)$20 > (uint_64)(int_64)5) ){ goto $label$58 }
	$5 = *($18)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$57 }
	$5 = ($5 + [165])
	goto $label$56 
	
.LABEL $label$58
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$57
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$56
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$55
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$54
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$53 }
	*($24 + [240]) = $21
	*($24 + [232]) = $23
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [624]
	$21 = (int_64)0
	
.LOOP $label$59:
	if ( ((uint_64)$20 > (uint_64)(int_64)7) ){ goto $label$64 }
	$5 = *($18)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$63 }
	$5 = ($5 + [165])
	goto $label$62 
	
.LABEL $label$64
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$63
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$62
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$61
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$60
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$59 }
	*(($24 + [96])) = [0]
	*($24 + [88]) = (int_64)0
	$18 = CALL strlen([640])
	if ( ((uint_32)$18 >= (uint_32)[-16]) ){ goto $label$21 }
	if ( ((uint_32)$18 >= (uint_32)[11]) ){ goto $label$36 }
	*($24 + [88]) = ($18 << [1])
	$5 = (($24 + [88]) | [1])
	if ( $18 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$37
	$5 = ($7 + [24])
	*((($24 + [232]) + [8])) = *($5)
	*($24 + [232]) = *($7 + [16])
	$4 = ($7 + [48])
	*((($24 + [216]) + [8])) = *($4)
	*($24 + [216]) = *($7 + [40])
	$20 = *($7)
	*((($24 + [144]) + [36])) = *(($7 + [36]))
	*((($24 + [144]) + [32])) = *(($7 + [32]))
	*((($24 + [144]) + [28])) = *(($7 + [28]))
	*((($24 + [144]) + [24])) = *($5)
	*((($24 + [144]) + [20])) = *(($7 + [20]))
	*($24 + [152]) = $1
	*($24 + [144]) = $20
	*($24 + [160]) = *($7 + [16])
	*((($24 + [144]) + [56])) = *(($7 + [56]))
	*((($24 + [144]) + [48])) = *($4)
	*($24 + [184]) = *($7 + [40])
	*($24 + [208]) = $18
	$4 = ($24 + [208])
	$14 = ($24 + [184])
	$13 = ($24 + [160])
	$12 = (($24 + [144]) + [8])
	$2 = *($0)
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [176]
	$21 = (int_64)0
	
.LOOP $label$65:
	if ( ((uint_64)$20 > (uint_64)(int_64)5) ){ goto $label$70 }
	$5 = *($18)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$69 }
	$5 = ($5 + [165])
	goto $label$68 
	
.LABEL $label$70
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$69
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$68
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$67
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$66
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$65 }
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [192]
	$23 = (int_64)0
	
.LOOP $label$71:
	if ( ((uint_64)$20 > (uint_64)(int_64)6) ){ goto $label$76 }
	$5 = *($18)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$75 }
	$5 = ($5 + [165])
	goto $label$74 
	
.LABEL $label$76
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$75
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$74
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$73
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$72
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$23 = ((int_64)$22 | (int_64)$23)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$71 }
	*(($5 = ($24 + [312]))) = [0]
	*($24 + [296]) = $23
	*($24 + [288]) = $2
	*($24 + [304]) = (int_64)0
	*(($18 = CALL $42([16]))) = $2
	*($18 + [8]) = $21
	*(($16 = ($24 + [320]))) = [0]
	$17 = ($18 + [16])
	*($5) = $17
	*(($24 + [308])) = $17
	*($24 + [304]) = $18
	*($24 + [316]) = [0]
	*(($24 + [324])) = [0]
	CALL $14(($24 + [316]), [68])
	$18 = *($16)
	$5 = *($24 + [316])
	*($24 + [92]) = $5
	*($24 + [88]) = $5
	*($24 + [96]) = $18
	*($24 + [368]) = ($24 + [88])
	*($24 + [108]) = $12
	*($24 + [112]) = $13
	*($24 + [116]) = $14
	*($24 + [120]) = $4
	*($24 + [104]) = ($24 + [144])
	CALL $15(($24 + [104]), ($24 + [368]))
	CALL $16(($24 + [104]), ($24 + [288]))
	$18 = *($24 + [104])
	CALL send_inline($18, (*($24 + [108]) - $18))
	$18 = *($24 + [104])
	if ( ($18 == 0) ){ goto $label$77 }
	*($24 + [108]) = $18
	CALL $43($18)
	
.LABEL $label$77
	$18 = *($24 + [316])
	if ( ($18 == 0) ){ goto $label$78 }
	*(($24 + [320])) = $18
	CALL $43($18)
	
.LABEL $label$78
	$18 = *($24 + [304])
	if ( ($18 == 0) ){ goto $label$79 }
	*(($24 + [308])) = $18
	CALL $43($18)
	
.LABEL $label$79
	$23 = *($0)
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [176]
	$21 = (int_64)0
	
.LOOP $label$80:
	if ( ((uint_64)$20 > (uint_64)(int_64)5) ){ goto $label$85 }
	$5 = *($18)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$84 }
	$5 = ($5 + [165])
	goto $label$83 
	
.LABEL $label$85
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$84
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$83
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$82
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$81
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$80 }
	*($24 + [96]) = $21
	*($24 + [88]) = $23
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [624]
	$21 = (int_64)0
	
.LOOP $label$86:
	if ( ((uint_64)$20 > (uint_64)(int_64)7) ){ goto $label$91 }
	$5 = *($18)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$90 }
	$5 = ($5 + [165])
	goto $label$89 
	
.LABEL $label$91
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$88 }
	goto $label$87 
	
.LABEL $label$90
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$89
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$88
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$87
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$86 }
	*(($24 + [80])) = [0]
	*($24 + [72]) = (int_64)0
	$18 = CALL strlen([640])
	if ( ((uint_32)$18 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$18 >= (uint_32)[11]) ){ goto $label$33 }
	*($24 + [72]) = ($18 << [1])
	$5 = (($24 + [72]) | [1])
	if ( $18 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$36
	$4 = (($18 + [16]) & [-16])
	$5 = CALL $42($4)
	*($24 + [88]) = ($4 | [1])
	*($24 + [96]) = $5
	*($24 + [92]) = $18
	
.LABEL $label$35
	CALL memcpy($5, [640], $18)
	
.LABEL $label$34
	*(($5 + $18)) = [0]
	*(($24 + [312])) = $9
	*(($24 + [324])) = *($24 + [92])
	*($24 + [296]) = $1
	$18 = ($24 + [96])
	*(($24 + [328])) = *($18)
	*($24 + [288]) = *($0)
	*($24 + [304]) = $2
	*($24 + [320]) = *($24 + [88])
	*($24 + [88]) = [0]
	*($24 + [92]) = [0]
	*($18) = [0]
	$18 = CALL $22(($24 + [104]), ($24 + [232]), $6, $21, ($24 + [288]))
	CALL $16(($24 + [216]), $18)
	$5 = *($24 + [216])
	CALL send_inline($5, (*($24 + [220]) - $5))
	$5 = *($24 + [216])
	if ( ($5 == 0) ){ goto $label$92 }
	*($24 + [220]) = $5
	CALL $43($5)
	
.LABEL $label$92
	$5 = *($18 + [28])
	if ( ($5 == 0) ){ goto $label$93 }
	*(($18 + [32])) = $5
	CALL $43($5)
	
.LABEL $label$93
	$5 = *($18 + [16])
	if ( ($5 == 0) ){ goto $label$94 }
	*(($18 + [20])) = $5
	CALL $43($5)
	
.LABEL $label$94
	if ( ((*(($24 + [320])) & [1]) == 0) ){ goto $label$95 }
	CALL $43(*(($24 + [328])))
	
.LABEL $label$95
	if ( ((*($24 + [88]) & [1]) == 0) ){ goto $label$96 }
	CALL $43(*(($24 + [96])))
	
.LABEL $label$96
	$23 = *($0)
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [176]
	$21 = (int_64)0
	
.LOOP $label$97:
	if ( ((uint_64)$20 > (uint_64)(int_64)5) ){ goto $label$102 }
	$5 = *($18)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$101 }
	$5 = ($5 + [165])
	goto $label$100 
	
.LABEL $label$102
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$99 }
	goto $label$98 
	
.LABEL $label$101
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$100
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$99
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$98
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$97 }
	*($24 + [240]) = $21
	*($24 + [232]) = $23
	$23 = *(($3 + [16]))
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [624]
	$21 = (int_64)0
	
.LOOP $label$103:
	if ( ((uint_64)$20 > (uint_64)(int_64)7) ){ goto $label$108 }
	$5 = *($18)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$107 }
	$5 = ($5 + [165])
	goto $label$106 
	
.LABEL $label$108
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$105 }
	goto $label$104 
	
.LABEL $label$107
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$106
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$105
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$104
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$103 }
	*(($24 + [96])) = [0]
	*($24 + [88]) = (int_64)0
	$18 = CALL strlen([640])
	if ( ((uint_32)$18 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$18 >= (uint_32)[11]) ){ goto $label$30 }
	*($24 + [88]) = ($18 << [1])
	$5 = (($24 + [88]) | [1])
	if ( $18 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$33
	$4 = (($18 + [16]) & [-16])
	$5 = CALL $42($4)
	*($24 + [72]) = ($4 | [1])
	*($24 + [80]) = $5
	*($24 + [76]) = $18
	
.LABEL $label$32
	CALL memcpy($5, [640], $18)
	
.LABEL $label$31
	*(($5 + $18)) = [0]
	*(($24 + [308])) = *($24 + [236])
	*($24 + [296]) = $1
	*(($24 + [316])) = *(($24 + [244]))
	*(($24 + [312])) = *((($24 + [232]) + [8]))
	*($24 + [288]) = *($0)
	*($24 + [304]) = *($24 + [232])
	$18 = (($24 + [72]) + [8])
	*(($24 + [328])) = *($18)
	*($24 + [320]) = *($24 + [72])
	*($24 + [72]) = [0]
	*($24 + [76]) = [0]
	*($18) = [0]
	$18 = CALL $22(($24 + [104]), ($24 + [88]), $6, $21, ($24 + [288]))
	CALL $16(($24 + [368]), $18)
	$5 = *($24 + [368])
	CALL send_inline($5, (*($24 + [372]) - $5))
	$5 = *($24 + [368])
	if ( ($5 == 0) ){ goto $label$109 }
	*($24 + [372]) = $5
	CALL $43($5)
	
.LABEL $label$109
	$5 = *($18 + [28])
	if ( ($5 == 0) ){ goto $label$110 }
	*(($18 + [32])) = $5
	CALL $43($5)
	
.LABEL $label$110
	$5 = *($18 + [16])
	if ( ($5 == 0) ){ goto $label$111 }
	*(($18 + [20])) = $5
	CALL $43($5)
	
.LABEL $label$111
	if ( ((*(($24 + [320])) & [1]) == 0) ){ goto $label$112 }
	CALL $43(*(($24 + [328])))
	
.LABEL $label$112
	if ( ((*($24 + [72]) & [1]) == 0) ){ goto $label$113 }
	CALL $43(*(($24 + [80])))
	
.LABEL $label$113
	$23 = *($0)
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [176]
	$21 = (int_64)0
	
.LOOP $label$114:
	if ( ((uint_64)$20 > (uint_64)(int_64)5) ){ goto $label$119 }
	$5 = *($18)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$118 }
	$5 = ($5 + [165])
	goto $label$117 
	
.LABEL $label$119
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$116 }
	goto $label$115 
	
.LABEL $label$118
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$117
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$116
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$115
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$114 }
	*($24 + [96]) = $21
	*($24 + [88]) = $23
	$23 = *(($3 + [16]))
	$20 = (int_64)0
	$19 = (int_64)59
	$18 = [624]
	$21 = (int_64)0
	
.LOOP $label$120:
	if ( ((uint_64)$20 > (uint_64)(int_64)7) ){ goto $label$125 }
	$5 = *($18)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$124 }
	$5 = ($5 + [165])
	goto $label$123 
	
.LABEL $label$125
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$122 }
	goto $label$121 
	
.LABEL $label$124
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$123
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$122
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$121
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$120 }
	*(($24 + [80])) = [0]
	*($24 + [72]) = (int_64)0
	$18 = CALL strlen([640])
	if ( ((uint_32)$18 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$18 >= (uint_32)[11]) ){ goto $label$27 }
	*($24 + [72]) = ($18 << [1])
	$5 = (($24 + [72]) | [1])
	if ( $18 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$30
	$4 = (($18 + [16]) & [-16])
	$5 = CALL $42($4)
	*($24 + [88]) = ($4 | [1])
	*($24 + [96]) = $5
	*($24 + [92]) = $18
	
.LABEL $label$29
	CALL memcpy($5, [640], $18)
	
.LABEL $label$28
	*(($5 + $18)) = [0]
	$20 = *(($7 + [8]))
	*(($24 + [312])) = $11
	*(($24 + [324])) = *($24 + [92 align=4])
	*($24 + [288]) = *($0)
	*($24 + [296]) = $20
	*($24 + [304]) = $10
	*($24 + [320]) = *($24 + [88])
	*($24 + [88]) = [0]
	*($24 + [92]) = [0]
	*((($24 + [88]) + [8])) = [0]
	$18 = CALL $22(($24 + [104]), ($24 + [232]), $23, $21, ($24 + [288]))
	CALL $16(($24 + [216]), $18)
	$5 = *($24 + [216])
	CALL send_inline($5, (*($24 + [220]) - $5))
	$5 = *($24 + [216])
	if ( ($5 == 0) ){ goto $label$126 }
	*($24 + [220]) = $5
	CALL $43($5)
	
.LABEL $label$126
	$5 = *($18 + [28])
	if ( ($5 == 0) ){ goto $label$127 }
	*(($18 + [32])) = $5
	CALL $43($5)
	
.LABEL $label$127
	$5 = *($18 + [16])
	if ( ($5 == 0) ){ goto $label$128 }
	*(($18 + [20])) = $5
	CALL $43($5)
	
.LABEL $label$128
	if ( ((*(($24 + [320])) & [1]) == 0) ){ goto $label$129 }
	CALL $43(*(($24 + [328])))
	
.LABEL $label$129
	if ( ((*($24 + [88]) & [1]) == 0) ){ goto $label$130 }
	CALL $43(*(($24 + [96])))
	
.LABEL $label$130
	CALL eosio_assert($8, [736])
	CALL eosio_assert(((int_32)*($7 + [68]) == (int_32)($24 + [248])), [784])
	CALL eosio_assert(((int_64)*($24 + [248]) == (int_64)CALL $fimport$4()), [832])
	$5 = ($7 + [16])
	$22 = *($5)
	$18 = ($7 + [40])
	$20 = *($18)
	*($24 + [88]) = ((float_64)(CASTING float_64)(int_64 $20) / (float_64)(CASTING float_64)(int_64 $22))
	*($5) = (int_64))($22 - $10)
	*($18) = (int_64))($20 - $2)
	$20 = *($7)
	CALL eosio_assert([1], [896])
	*($24 + [112]) = (($24 + [288]) + [68])
	*($24 + [108]) = ($24 + [288])
	*($24 + [104]) = ($24 + [288])
	CALL $12(($24 + [104]), $7)
	CALL db_update_i64(*($7 + [72]), (int_64)0, ($24 + [288]), [68])
	$0 = (($24 + [248]) + [16])
	if ( (uint_64)($20 <= *($0)) ){ goto $label$131 }
	*($0) = ( (int_64)-2 ? ((int_64)$20 + (int_64)1) : ((uint_64)$20 > (uint_64)(int_64)-3) )
	
.LABEL $label$131
	*($24 + [232]) = ((float_64)(CASTING float_64)(int_64 *($18)) / (float_64)(CASTING float_64)(int_64 *($5)))
	if ( (CALL memcmp(($24 + [88]), ($24 + [232]), [8]) == 0) ){ goto $label$24 }
	$18 = *($7 + [76])
	if ( ((int_32)$18 > (int_32)[-1]) ){ goto $label$132 }
	$18 = CALL db_idx_double_find_primary(*($24 + [248]), *(($24 + [256])), (int_64)-6497942746098040832, ($24 + [216]), $20)
	*(($7 + [76])) = $18
	
.LABEL $label$132
	CALL db_idx_double_update($18, (int_64)0, ($24 + [232]))
	$7 = *($24 + [272])
	if ( $7 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$27
	$4 = (($18 + [16]) & [-16])
	$5 = CALL $42($4)
	*($24 + [72]) = ($4 | [1])
	*($24 + [80]) = $5
	*($24 + [76]) = $18
	
.LABEL $label$26
	CALL memcpy($5, [640], $18)
	
.LABEL $label$25
	*(($5 + $18)) = [0]
	$20 = *(($7 + [8]))
	*(($24 + [308])) = *($24 + [220])
	*($24 + [296]) = $20
	*(($24 + [312])) = *((($24 + [216]) + [8]))
	*(($24 + [316])) = *(($24 + [228]))
	*($24 + [288]) = *($0)
	*($24 + [304]) = *($24 + [216])
	$18 = (($24 + [72]) + [8])
	*(($24 + [328])) = *($18)
	*($24 + [320]) = *($24 + [72])
	*($24 + [72]) = [0]
	*($24 + [76]) = [0]
	*($18) = [0]
	$18 = CALL $22(($24 + [104]), ($24 + [88]), $23, $21, ($24 + [288]))
	CALL $16(($24 + [368]), $18)
	$5 = *($24 + [368])
	CALL send_inline($5, (*($24 + [372]) - $5))
	$5 = *($24 + [368])
	if ( ($5 == 0) ){ goto $label$133 }
	*($24 + [372]) = $5
	CALL $43($5)
	
.LABEL $label$133
	$5 = *($18 + [28])
	if ( ($5 == 0) ){ goto $label$134 }
	*(($18 + [32])) = $5
	CALL $43($5)
	
.LABEL $label$134
	$5 = *($18 + [16])
	if ( ($5 == 0) ){ goto $label$135 }
	*(($18 + [20])) = $5
	CALL $43($5)
	
.LABEL $label$135
	if ( ((*(($24 + [320])) & [1]) == 0) ){ goto $label$136 }
	CALL $43(*(($24 + [328])))
	
.LABEL $label$136
	if ( ((*($24 + [72]) & [1]) == 0) ){ goto $label$137 }
	CALL $43(*(($24 + [80])))
	
.LABEL $label$137
	CALL eosio_assert($8, [656])
	CALL eosio_assert($8, [704])
	$18 = CALL db_next_i64(*($7 + [72]), ($24 + [288]))
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$138 }
	CALL $9(($24 + [248]), $18)
	
.LABEL $label$138
	CALL $23(($24 + [248]), $7)
	
.LABEL $label$24
	$7 = *($24 + [272])
	if ( ($7 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	$0 = ($24 + [276])
	$18 = *($0)
	if ( ((int_32)$18 == (int_32)$7) ){ goto $label$140 }
	
.LOOP $label$141:
	$18 = ($18 + [-24])
	$5 = *($18)
	*($18) = [0]
	if ( ($5 == 0) ){ goto $label$142 }
	CALL $43($5)
	
.LABEL $label$142
	if ( ((int_32)$7 != (int_32)$18) ){ goto $label$141 }
	$18 = *(($24 + [272]))
	goto $label$139 
	
.LABEL $label$140
	$18 = $7
	
.LABEL $label$139
	*($0) = $7
	CALL $43($18)
	
.LABEL $label$22
	*([0] + [4]) = ($24 + [384])
	return (unreachable)
	
.LABEL $label$21
	CALL $44(($24 + [88]))
	
.LABEL $label$20
	CALL $44(($24 + [72]))
	
.LABEL $label$19
	CALL $44(($24 + [88]))
	
.LABEL $label$18
	CALL $44(($24 + [72]))
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC _ZN12eosotcbackup7receiptERKNS_3recE (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [68]) == (int_32)$0), [960])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [1008])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1072])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $43($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $43($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [72]))
	$7 = *($1 + [76])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx_double_find_primary(*($0), *($0 + [8]), (int_64)-6497942746098040832, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx_double_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $42([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $14($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $24(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [208])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [208])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [208])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [208])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [208])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [208])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $25(*($1), ($0 + [32]))
}

void .FUNC _ZN12eosotcbackup8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	CALL require_auth(*($0))
}

void .FUNC _ZN12eosotcbackup8retrieveEyyN5eosio14extended_assetE (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [272])
	*([0] + [4]) = $18
	*($18 + [232]) = (int_64)-1
	*($18 + [240]) = [0]
	$16 = *($0)
	*($18 + [216]) = $16
	$14 = *($3 + [16])
	*($18 + [224]) = $14
	*((($18 + [216]) + [28])) = [0]
	*((($18 + [216]) + [32])) = [0]
	*($18 + [252]) = [0]
	$13 = [0]
	$3 = CALL db_find_i64($16, $14, (int_64)-6497942746098040832, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$13 = CALL $9(($18 + [216]), $3)
	CALL eosio_assert(((int_32)*($13 + [68]) == (int_32)($18 + [216])), [496])
	
.LABEL $label$1
	$4 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($4, [560])
	CALL eosio_assert(((int_64)*($13 + [8]) == (int_64)$1), [1136])
	$2 = *($13 + [8])
	$16 = *($13)
	*((($18 + [144]) + [32])) = *(($13 + [32]))
	*((($18 + [144]) + [28])) = *(($13 + [28]))
	*((($18 + [144]) + [24])) = *(($13 + [24]))
	*((($18 + [144]) + [20])) = *(($13 + [20]))
	*((($18 + [144]) + [36])) = *(($13 + [36]))
	*($18 + [144]) = $16
	*($18 + [152]) = $2
	*($18 + [160]) = *($13 + [16])
	*((($18 + [144]) + [56])) = *(($13 + [56]))
	*((($18 + [144]) + [48])) = *(($13 + [48]))
	*($18 + [184]) = *($13 + [40])
	*($18 + [208]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$8 = ($18 + [208])
	$7 = ($18 + [184])
	$6 = ($18 + [160])
	$5 = ($18 + [152])
	$9 = *($0)
	$2 = (int_64)0
	$14 = (int_64)59
	$3 = [176]
	$15 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$7 }
	$10 = *($3)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$10 = ($10 + [165])
	goto $label$5 
	
.LABEL $label$7
	$16 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$3
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$2 }
	$2 = (int_64)0
	$14 = (int_64)59
	$3 = [192]
	$17 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$2 > (uint_64)(int_64)6) ){ goto $label$13 }
	$10 = *($3)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$10 = ($10 + [165])
	goto $label$11 
	
.LABEL $label$13
	$16 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$9
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$17 = ((int_64)$16 | (int_64)$17)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$8 }
	*(($10 = ($18 + [48]))) = [0]
	*($18 + [32]) = $17
	*($18 + [24]) = $9
	*($18 + [40]) = (int_64)0
	*(($3 = CALL $42([16]))) = $9
	*($3 + [8]) = $15
	*(($11 = ($18 + [56]))) = [0]
	$12 = ($3 + [16])
	*($10) = $12
	*(($18 + [44])) = $12
	*($18 + [40]) = $3
	*($18 + [52]) = [0]
	*(($18 + [60])) = [0]
	CALL $14(($18 + [52]), [68])
	$3 = *($11)
	$10 = *($18 + [52])
	*($18 + [132]) = $10
	*($18 + [128]) = $10
	*($18 + [136]) = $3
	*($18 + [72]) = ($18 + [128])
	*($18 + [92]) = $5
	*($18 + [96]) = $6
	*($18 + [100]) = $7
	*($18 + [104]) = $8
	*($18 + [88]) = ($18 + [144])
	CALL $15(($18 + [88]), ($18 + [72]))
	CALL $16(($18 + [88]), ($18 + [24]))
	$3 = *($18 + [88])
	CALL send_inline($3, (*($18 + [92]) - $3))
	$3 = *($18 + [88])
	if ( ($3 == 0) ){ goto $label$14 }
	*($18 + [92]) = $3
	CALL $43($3)
	
.LABEL $label$14
	$3 = *($18 + [52])
	if ( ($3 == 0) ){ goto $label$15 }
	*(($18 + [56])) = $3
	CALL $43($3)
	
.LABEL $label$15
	$3 = *($18 + [40])
	if ( ($3 == 0) ){ goto $label$16 }
	*(($18 + [44])) = $3
	CALL $43($3)
	
.LABEL $label$16
	*(($18 + [136])) = *(($13 + [24]))
	*($18 + [128]) = *($13 + [16])
	$17 = *($0)
	$2 = (int_64)0
	$14 = (int_64)59
	$3 = [176]
	$15 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$22 }
	$10 = *($3)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$10 = ($10 + [165])
	goto $label$20 
	
.LABEL $label$22
	$16 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$18
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$17 }
	*($18 + [80]) = $15
	*($18 + [72]) = $17
	$17 = *(($13 + [32]))
	$2 = (int_64)0
	$14 = (int_64)59
	$3 = [624]
	$15 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$28 }
	$10 = *($3)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$10 = ($10 + [165])
	goto $label$26 
	
.LABEL $label$28
	$16 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$24
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$23 }
	*(($18 + [16])) = [0]
	*($18 + [8]) = (int_64)0
	$3 = CALL strlen([1152])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$32 }
	*($18 + [8]) = ($3 << [1])
	$10 = (($18 + [8]) | [1])
	if ( $3 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$8 = (($3 + [16]) & [-16])
	$10 = CALL $42($8)
	*($18 + [8]) = ($8 | [1])
	*($18 + [16]) = $10
	*($18 + [12]) = $3
	
.LABEL $label$31
	CALL memcpy($10, [1152], $3)
	
.LABEL $label$30
	*(($10 + $3)) = [0]
	*(($18 + [44])) = *($18 + [132])
	*($18 + [32]) = $1
	*(($18 + [52])) = *(($18 + [140]))
	*(($18 + [48])) = *((($18 + [128]) + [8]))
	*($18 + [24]) = *($0)
	*($18 + [40]) = *($18 + [128])
	$3 = (($18 + [8]) + [8])
	*(($18 + [64])) = *($3)
	*($18 + [56]) = *($18 + [8])
	*($18 + [8]) = [0]
	*($18 + [12]) = [0]
	*($3) = [0]
	$3 = CALL $22(($18 + [88]), ($18 + [72]), $17, $15, ($18 + [24]))
	CALL $16(($18 + [256]), $3)
	$10 = *($18 + [256])
	CALL send_inline($10, (*($18 + [260]) - $10))
	$10 = *($18 + [256])
	if ( ($10 == 0) ){ goto $label$33 }
	*($18 + [260]) = $10
	CALL $43($10)
	
.LABEL $label$33
	$10 = *($3 + [28])
	if ( ($10 == 0) ){ goto $label$34 }
	*(($3 + [32])) = $10
	CALL $43($10)
	
.LABEL $label$34
	$10 = *($3 + [16])
	if ( ($10 == 0) ){ goto $label$35 }
	*(($3 + [20])) = $10
	CALL $43($10)
	
.LABEL $label$35
	if ( ((*(($18 + [56])) & [1]) == 0) ){ goto $label$36 }
	CALL $43(*(($18 + [64])))
	
.LABEL $label$36
	if ( ((*($18 + [8]) & [1]) == 0) ){ goto $label$37 }
	CALL $43(*(($18 + [16])))
	
.LABEL $label$37
	CALL eosio_assert($4, [656])
	CALL eosio_assert($4, [704])
	$3 = CALL db_next_i64(*($13 + [72]), ($18 + [24]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$38 }
	CALL $9(($18 + [216]), $3)
	
.LABEL $label$38
	CALL $23(($18 + [216]), $13)
	$13 = *($18 + [240])
	if ( ($13 == 0) ){ goto $label$39 }
	$0 = ($18 + [244])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$13) ){ goto $label$41 }
	
.LOOP $label$42:
	$3 = ($3 + [-24])
	$10 = *($3)
	*($3) = [0]
	if ( ($10 == 0) ){ goto $label$43 }
	CALL $43($10)
	
.LABEL $label$43
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$42 }
	$3 = *(($18 + [240]))
	goto $label$40 
	
.LABEL $label$41
	$3 = $13
	
.LABEL $label$40
	*($0) = $13
	CALL $43($3)
	
.LABEL $label$39
	*([0] + [4]) = ($18 + [272])
	return (unreachable)
	
.LABEL $label$29
	CALL $44(($18 + [8]))
}

void .FUNC $49 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $43 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $42 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9852])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9748])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9556]
	$1 = (((int_32)$2 * (int_32)[12]) + [9556])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $40 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9846]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9848])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9846]) = [1]
	$7 = ($7 << [16])
	*([0] + [9848]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9848])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9848]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9846]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9846]) = [1]
	$3 = ($3 << [16])
	*([0] + [9848]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9848])
	
.LABEL $label$8
	*([0] + [9848]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $47 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$3 = ($6 & [1])
	if ( $3 ){ goto $label$3 }
	$4 = uint_32($6 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $3 ){ goto $label$6 }
	$5 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $3 ? $2 : ($3 <= $2) )
	$3 = ($4 - $1)
	$3 = ($3 - $2)
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($5 + $1)
	CALL memmove($1, ($1 + $2), $3)
	$6 = *($0)
	
.LABEL $label$7
	$2 = ($4 - $2)
	if ( ($6 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($5 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $42(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $43($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $44 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $42($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC _ZN12eosotcbackup3askEyN5eosio14extended_assetES1_ (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [208])
	*([0] + [4]) = $13
	$12 = *($2 + [16])
	$8 = (int_64)0
	$10 = (int_64)59
	$7 = [16]
	$9 = (int_64)0
	
.LOOP $label$1:
	$11 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)13) ){ goto $label$3 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$3 }
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	goto $label$2 
	
.LABEL $label$3
	$11 = ((int_64)$11 & (int_64)15)
	
.LABEL $label$2
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$11 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$12 != (int_64)$9), [32])
	$12 = *($3 + [16])
	$8 = (int_64)0
	$10 = (int_64)59
	$7 = [16]
	$9 = (int_64)0
	
.LOOP $label$6:
	$11 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)13) ){ goto $label$8 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$4 = ($4 + [165])
	goto $label$9 
	
.LABEL $label$10
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$8 }
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	goto $label$7 
	
.LABEL $label$8
	$11 = ((int_64)$11 & (int_64)15)
	
.LABEL $label$7
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$11 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$6 }
	CALL eosio_assert(((int_64)$12 != (int_64)$9), [32])
	*((($13 + [120]) + [32])) = [0]
	*($13 + [128]) = $12
	*($13 + [136]) = (int_64)-1
	$8 = (int_64)0
	*($13 + [144]) = (int_64)0
	$11 = *($0)
	*($13 + [120]) = $11
	*($13 + [156]) = [0]
	$7 = CALL db_lowerbound_i64($11, $12, (int_64)-6497942746098040832, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	CALL $9(($13 + [120]), $7)
	*($13 + [52]) = [0]
	*($13 + [48]) = ($13 + [120])
	$8 = *(*(CALL $10(($13 + [48])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*(($4 = (($13 + [120]) + [16]))) = $8
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [48])
	$8 = *($4)
	$10 = CALL current_time()
	$11 = *($0)
	CALL eosio_assert(((int_64)*($13 + [120]) == (int_64)CALL $fimport$4()), [112])
	$7 = CALL $42([80])
	$6 = CALL $11($7)
	*($7 + [68]) = ($13 + [120])
	*($7 + [8]) = $1
	*($7) = $8
	*(($7 + [36])) = *(($2 + [20]))
	*(($7 + [32])) = *(($2 + [16]))
	*(($7 + [28])) = *(($2 + [12]))
	*(($7 + [24])) = *(($2 + [8]))
	*(($7 + [20])) = *(($2 + [4]))
	*($7 + [16]) = *($2)
	*(($7 + [56])) = *(($3 + [16]))
	*(($7 + [48])) = *(($3 + [8]))
	*($7 + [40]) = *($3)
	$5 = (CASTING uint_32)(uint_64 ((uint_64)$10 / (uint_64)(int_64)1000000))
	*($7 + [64]) = $5
	*($13 + [16]) = (($13 + [48]) + [68])
	*($13 + [12]) = ($13 + [48])
	*($13 + [8]) = ($13 + [48])
	CALL $12(($13 + [8]), $6)
	$10 = *($7)
	$6 = (($13 + [120]) + [8])
	*($7 + [72]) = CALL db_store_i64(*($6), (int_64)-6497942746098040832, $11, $10, ($13 + [48]), [68])
	if ( (uint_64)($10 <= *($4)) ){ goto $label$12 }
	*($4) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$10 = *($7)
	$9 = *($6)
	*($13 + [184]) = ((float_64)(CASTING float_64)(int_64 *(($7 + [40]))) / (float_64)(CASTING float_64)(int_64 *(($7 + [16]))))
	*($7 + [76]) = CALL db_idx_double_store($9, (int_64)-6497942746098040832, $11, $10, ($13 + [184]))
	*($13 + [8]) = $7
	$11 = *($7)
	*($13 + [48]) = $11
	$6 = *(($7 + [72]))
	*($13 + [184]) = $6
	$4 = *((($13 + [120]) + [28]))
	if ( ((uint_32)$4 >= (uint_32)*(($13 + [152]))) ){ goto $label$14 }
	*($4 + [8]) = $11
	*($4 + [16]) = $6
	*($13 + [8]) = [0]
	*($4) = $7
	*(($13 + [148])) = ($4 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $13(($13 + [144]), ($13 + [8]), ($13 + [48]), ($13 + [184]))
	
.LABEL $label$13
	$7 = *($13 + [8])
	*($13 + [8]) = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	CALL $43($7)
	
.LABEL $label$15
	*(($13 + [84])) = *(($2 + [20]))
	*(($13 + [80])) = *(($2 + [16]))
	*(($13 + [76])) = *(($2 + [12]))
	*(($13 + [72])) = *(($2 + [8]))
	*((($13 + [48]) + [20])) = *(($2 + [4]))
	*($13 + [56]) = $1
	*($13 + [48]) = $8
	*($13 + [64]) = *($2)
	*(($13 + [104])) = *(($3 + [16]))
	*(($13 + [96])) = *(($3 + [8]))
	*($13 + [88]) = *($3)
	*($13 + [112]) = $5
	$2 = ($13 + [112])
	$3 = ($13 + [88])
	$6 = (($13 + [48]) + [16])
	$5 = (($13 + [48]) + [8])
	$1 = *($0)
	$8 = (int_64)0
	$10 = (int_64)59
	$7 = [176]
	$9 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$21 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$4 = ($4 + [165])
	goto $label$19 
	
.LABEL $label$21
	$11 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$17
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$11 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$16 }
	$8 = (int_64)0
	$10 = (int_64)59
	$7 = [192]
	$12 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$27 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$4 = ($4 + [165])
	goto $label$25 
	
.LABEL $label$27
	$11 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$23
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$12 = ((int_64)$11 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$22 }
	*($13 + [16]) = $12
	*($13 + [8]) = $1
	*(($7 = CALL $42([16]))) = $1
	*($7 + [8]) = $9
	*(($4 = ($13 + [40]))) = [0]
	$0 = ($7 + [16])
	*(($13 + [32])) = $0
	*(($13 + [28])) = $0
	*($13 + [24]) = $7
	*($13 + [36]) = [0]
	*(($13 + [44])) = [0]
	CALL $14(($13 + [36]), [68])
	$7 = *($4)
	$4 = *($13 + [36])
	*($13 + [164]) = $4
	*($13 + [160]) = $4
	*($13 + [168]) = $7
	*($13 + [176]) = ($13 + [160])
	*($13 + [188]) = $5
	*($13 + [192]) = $6
	*($13 + [196]) = $3
	*($13 + [200]) = $2
	*($13 + [184]) = ($13 + [48])
	CALL $15(($13 + [184]), ($13 + [176]))
	CALL $16(($13 + [184]), ($13 + [8]))
	$7 = *($13 + [184])
	CALL send_inline($7, (*($13 + [188]) - $7))
	$7 = *($13 + [184])
	if ( ($7 == 0) ){ goto $label$28 }
	*($13 + [188]) = $7
	CALL $43($7)
	
.LABEL $label$28
	$7 = *($13 + [36])
	if ( ($7 == 0) ){ goto $label$29 }
	*(($13 + [40])) = $7
	CALL $43($7)
	
.LABEL $label$29
	$7 = *($13 + [24])
	if ( ($7 == 0) ){ goto $label$30 }
	*(($13 + [28])) = $7
	CALL $43($7)
	
.LABEL $label$30
	$2 = *($13 + [144])
	if ( ($2 == 0) ){ goto $label$31 }
	$3 = ($13 + [148])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$33 }
	
.LOOP $label$34:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$35 }
	CALL $43($4)
	
.LABEL $label$35
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$34 }
	$7 = *(($13 + [144]))
	goto $label$32 
	
.LABEL $label$33
	$7 = $2
	
.LABEL $label$32
	*($3) = $2
	CALL $43($7)
	
.LABEL $label$31
	*([0] + [4]) = ($13 + [208])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [432])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $42([80])
	$4 = CALL $11($6)
	*($6 + [68]) = $0
	CALL $19(($8 + [32]), $4)
	*($6 + [76]) = [-1]
	*($6 + [72]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [72])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $13(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $43($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC _ZN12eosotcbackup4testEv (int_32 $0)
{
	CALL require_auth(*($0))
}

int_64 .FUNC _Z15string_to_priceNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$4 }
	$3 = uint_32($3 >> [1])
	if ( ($3 == 0) ){ goto $label$2 }
	$0 = ($0 + [1])
	$4 = (int_64)0
	
.LOOP $label$5:
	$2 = *($0)
	if ( ((uint_32)(($2 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$6 }
	$4 = ((int_64)((int_64)((int_64)$4 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$6
	$0 = ($0 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	if ( ($3 == 0) ){ goto $label$1 }
	$1 = ($0 + [8])
	$2 = *($1)
	$4 = (int_64)0
	$0 = [0]
	
.LOOP $label$7:
	if ( ((int_32)*(($2 + $0)) < (int_32)[48]) ){ goto $label$8 }
	if ( ((int_32)*((*($1) + $0)) > (int_32)[57]) ){ goto $label$8 }
	$4 = ((int_64)((int_64)((int_64)$4 * (int_64)10) + (int_64)*((*($1) + $0))) + (int_64)-48)
	
.LABEL $label$8
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$7 }
	
.LABEL $label$3
	return $4
	
.LABEL $label$2
	return (int_64)0
	
.LABEL $label$1
	return (int_64)0
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN12eosotcbackup4initEv (int_32 $0)
{
	CALL require_auth(*($0))
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $42($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $49($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $43($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [208])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [208])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [208])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [208])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [208])
	CALL memcpy(*($2 + [4]), ($3 + [16]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [208])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [208])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [208])
	CALL memcpy(*($2 + [4]), ($3 + [16]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [208])
	CALL memcpy(*($2 + [4]), $0, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $14($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [208])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [208])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $18(CALL $17($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [208])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [208])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [208])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $10 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [72]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [384])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-6497942746098040832)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [320])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [320])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $9(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $11 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [16]) = (int_64)0
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	CALL eosio_assert([1], [224])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [288])
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [224])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [288])
	return $0
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [208])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [208])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [208])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [208])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [208])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [208])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [208])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [208])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [208])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $42(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $49($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $43($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $43($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $37($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $45($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $42($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $45($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $43($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $44($7)
	return (unreachable)
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1360])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $14($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [464])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [224])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [288])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $35(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [464])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [464])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [464])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [464])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $36(*($1), *($0 + [12]))
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($4 = ($0 + [32]))) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [224])
	$3 = ($0 + [8])
	$5 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [288])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [464])
	CALL memcpy($0, $1, [8])
	$6 = ($2 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [464])
	CALL memcpy($3, ($1 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [464])
	CALL memcpy(($0 + [16]), ($1 + [16]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[24]), [464])
	CALL memcpy(($0 + [24]), ($1 + [24]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[32]), [464])
	CALL memcpy($4, ($1 + [32]), [8])
}

void .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $34($0, $2, $1)
	*([0] + [4]) = $3
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [144])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	$7 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	CALL read_action_data($7, $1)
	
.LABEL $label$1
	CALL $33(($9 + [32]), $7, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	*((($9 + [72]) + [20])) = *(($9 + [68]))
	*(($1 = (($9 + [72]) + [16]))) = *(($9 + [64]))
	$4 = *($9 + [40])
	*(($9 + [84])) = *(($9 + [60]))
	*(($7 = (($9 + [72]) + [8]))) = *(($9 + [56]))
	$3 = *($9 + [32])
	*($9 + [72]) = *($9 + [48])
	*($9 + [76]) = *((($9 + [32]) + [20]))
	*((($9 + [96]) + [16])) = *($1)
	*((($9 + [96]) + [8])) = *($7)
	*($9 + [96]) = *($9 + [72])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$8 = *((*($1) + $8))
	
.LABEL $label$6
	$5 = *((($9 + [96]) + [16]))
	*((($9 + [120]) + [16])) = $5
	$6 = *((($9 + [96]) + [8]))
	*((($9 + [120]) + [8])) = $6
	*((($9 + [8]) + [16])) = $5
	*((($9 + [8]) + [8])) = $6
	$5 = *($9 + [96])
	*($9 + [120]) = $5
	*($9 + [8]) = $5
	CALL void $1((int_32 $3), (int_64 $4), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [144])
	return [1]
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $42($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $39([1364], $0)
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $55 ()
{
	(unreachable)
}