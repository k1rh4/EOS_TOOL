(data (i32.const 4) "pu\00\00")
(data (i32.const 16) "eosdice12345\00")
(data (i32.const 32) "haha\00")
(data (i32.const 48) "Game paused\00")
(data (i32.const 64) "Invalid asset\00")
(data (i32.const 80) "-\00")
(data (i32.const 96) "Illegal operation params\00")
(data (i32.const 128) "Illegal operation amount_type\00")
(data (i32.const 160) ",\00")
(data (i32.const 176) "Illegal operation amount\00")
(data (i32.const 208) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 272) "Game not started\00")
(data (i32.const 304) "The game is over\00")
(data (i32.const 336) "cannot pass end iterator to modify\00")
(data (i32.const 384) "Exceed the maximum number\00")
(data (i32.const 416) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 480) "invalid symbol name\00")
(data (i32.const 512) " It\'s already been bought\00")
(data (i32.const 560) "params[3]\00")
(data (i32.const 576) "active\00")
(data (i32.const 592) "eosio.token\00")
(data (i32.const 608) "transfer\00")
(data (i32.const 624) "hotdicegroup\00")
(data (i32.const 640) "multiplication overflow\00")
(data (i32.const 672) "multiplication underflow\00")
(data (i32.const 704) "divide by zero\00")
(data (i32.const 720) "signed division overflow\00")
(data (i32.const 752) "game:luckynum,id:\00")
(data (i32.const 784) ",name:\00")
(data (i32.const 800) ",amount:\00")
(data (i32.const 816) ",ref:\00")
(data (i32.const 832) "write\00")
(data (i32.const 840) "P\03\00\00")
(data (i32.const 848) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 896) "cannot create objects in table of another contract\00")
(data (i32.const 960) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1024) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1088) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1136) "object passed to modify is not in multi_index\00")
(data (i32.const 1184) "cannot modify objects in table of another contract\00")
(data (i32.const 1248) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1312) "error reading iterator\00")
(data (i32.const 1344) "read\00")
(data (i32.const 1360) "get\00")
(data (i32.const 1376) "luckyserver\00")
(data (i32.const 1392) "No game exists!\00")
(data (i32.const 1408) "Prizes have been drawn\00")
(data (i32.const 1440) "singleton does not exist\00")
(data (i32.const 1472) "EOS\00")
(data (i32.const 1488) "BEST\00")
(data (i32.const 1504) "0123456789abcdef\00")
(data (i32.const 1536) "0x\00")
(data (i32.const 1552) "1\00")
(data (i32.const 1568) "2\00")
(data (i32.const 1584) "3\00")
(data (i32.const 1600) "attempt to subtract asset with different symbol\00")
(data (i32.const 1648) "subtraction underflow\00")
(data (i32.const 1680) "subtraction overflow\00")
(data (i32.const 1712) "LuckyNumBer Bounds! Play: www.dice.im\00")
(data (i32.const 1760) "eosgamecoin2\00")
(data (i32.const 1776) "hotdiceburn1\00")
(data (i32.const 1792) "betresult\00")
(data (i32.const 1808) "The amount cannot be 0\00")
(data (i32.const 1840) "The maximum number cannot be less than 10\00")
(data (i32.const 1888) "cannot increment end iterator\00")
(data (i32.const 1920) "cannot pass end iterator to erase\00")
(data (i32.const 1968) "object passed to erase is not in multi_index\00")
(data (i32.const 2016) "cannot erase objects in table of another contract\00")
(data (i32.const 2080) "attempt to remove object that was not in multi_index\00")
(data (i32.const 2144) "onerror\00")
(data (i32.const 2160) "eosio\00")
(data (i32.const 2176) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 10640) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 10736) "stoul\00")
(data (i32.const 10752) ": no conversion\00")
(data (i32.const 10768) ": out of range\00")
(data (i32.const 10784) "stoull\00")
(data (i32.const 10800) "%d\00")
(data (i32.const 10816) "%lu\00")
(data (i32.const 10832) "%lld\00")
(data (i32.const 10848) "%llu\00")
(data (i32.const 10864) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 11328) "0123456789ABCDEF")
(data (i32.const 11344) "-+   0X0x\00")
(data (i32.const 11360) "(null)\00")
(data (i32.const 11376) "-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 11408) "inf\00")
(data (i32.const 11424) "INF\00")
(data (i32.const 11440) "nan\00")
(data (i32.const 11456) "NAN\00")
(data (i32.const 11472) ".\00")
(data (i32.const 11488) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 11584) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(data (i32.const 13392) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 13664) "\00\01\02\04\07\03\06\05\00")
(import "env" "__addtf3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__eqtf2" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "__extenddftf2" (func $fimport$2 (param i32 f64)))
(import "env" "__fixtfsi" (func $fimport$3 (param i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$4 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$5 (param i32 i32)))
(import "env" "__floatunsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__multi3" (func $fimport$8 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__unordtf2" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$12))
(import "env" "action_data_size" (func $fimport$13 (result i32)))
(import "env" "assert_recover_key" (func $fimport$14 (param i32 i32 i32 i32 i32)))
(import "env" "current_receiver" (func $fimport$15 (result i64)))
(import "env" "current_time" (func $fimport$16 (result i64)))
(import "env" "db_end_i64" (func $fimport$17 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$20 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$21 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$22 (param i32)))
(import "env" "db_idx64_store" (func $fimport$23 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$24 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$27 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$28 (param i32)))
(import "env" "db_store_i64" (func $fimport$29 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$30 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$31 (param i32 i32)))
(import "env" "is_account" (func $fimport$32 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$33 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$34 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$35 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$36 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$37 (param i64)))
(import "env" "require_auth2" (func $fimport$38 (param i64 i64)))
(import "env" "send_inline" (func $fimport$39 (param i32 i32)))
(import "env" "sha256" (func $fimport$40 (param i32 i32 i32)))
(export "memory" (memory $0))
(export "now" (func $0))
(export "_ZeqRK11checksum256S1_" (func $1))
(export "_ZeqRK11checksum160S1_" (func $2))
(export "_ZneRK11checksum160S1_" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN7eosgame4compERKNS_9numdetailES2_" (func $5))
(export "_ZN7eosgame8luckynumC2Ey" (func $6))
(export "_ZN7eosgame8luckynum8transferEyy" (func $7))
(export "_ZN7eosgame8luckynum13getGameStatusEv" (func $9))
(export "_ZN7eosgame8luckynum5splitERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_" (func $10))
(export "_ZN7eosgame8luckynum10createGameEy" (func $15))
(export "_ZN7eosgame8luckynum6revealEy9signature11checksum256N5eosio5assetE" (func $44))
(export "_ZN7eosgame8luckynum8addTotalEy" (func $48))
(export "_ZN7eosgame8luckynum8addToDayEy" (func $49))
(export "_ZN7eosgame8luckynum13sha256_to_hexERK11checksum256" (func $56))
(export "_ZN7eosgame8luckynum15get_contract_idEN5eosio11symbol_typeE" (func $57))
(export "_ZN7eosgame8luckynum9betresultEyN5eosio5assetEymNSt3__16vectorINS_9numdetailENS3_9allocatorIS5_EEEE" (func $58))
(export "_ZN7eosgame8luckynum12changeamountEyN5eosio5assetEh" (func $59))
(export "_ZN7eosgame8luckynum10newrandkeyE10public_key" (func $62))
(export "_ZN7eosgame8luckynum11changepauseEv" (func $66))
(export "_ZN7eosgame8luckynum5cleanEyN5eosio5assetE" (func $67))
(export "_ZN7eosgame8luckynum6to_hexEPKcm" (func $69))
(export "apply" (func $70))
(export "malloc" (func $84))
(export "free" (func $87))
(export "_ZNSt3__15stoulERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji" (func $101))
(export "_ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji" (func $104))
(export "_ZNSt3__19to_stringEi" (func $105))
(export "_ZNSt3__19to_stringEm" (func $107))
(export "_ZNSt3__19to_stringEx" (func $108))
(export "_ZNSt3__19to_stringEy" (func $109))
(export "__errno_location" (func $112))
(export "snprintf" (func $113))
(export "vsnprintf" (func $114))
(export "vfprintf" (func $116))
(export "__lockfile" (func $118))
(export "__unlockfile" (func $119))
(export "__fwritex" (func $120))
(export "strerror" (func $122))
(export "strnlen" (func $123))
(export "wctomb" (func $124))
(export "__signbitl" (func $125))
(export "__fpclassifyl" (func $126))
(export "frexpl" (func $127))
(export "wcrtomb" (func $128))
(export "memchr" (func $129))
(export "__lctrans" (func $130))
(export "__lctrans_impl" (func $131))
(export "__mo_lookup" (func $132))
(export "strcmp" (func $133))
(export "__towrite" (func $134))
(export "strtoull" (func $135))
(export "__shlim" (func $136))
(export "__intscan" (func $137))
(export "__shgetc" (func $138))
(export "__uflow" (func $139))
(export "__toread" (func $140))
(export "strtoul" (func $141))
(export "memcmp" (func $142))
(export "strlen" (func $143))
(table $0 10 10 anyfunc)
(elem (i32.const 0) $144 $5 $7 $58 $67 $62 $44 $59 $66 $115)



int_32 .FUNC $98 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $99($0, $1, $2, CALL $143($2))
}

int_32 .FUNC $99 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$3 }
	$4 = uint_32($5 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( $6 ){ goto $label$5 }
	$6 = [10]
	goto $label$4 
	
.LABEL $label$5
	$5 = *($0)
	$6 = (($5 & [-2]) + [-1])
	
.LABEL $label$4
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$6 }
	CALL $92($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	return $0
	
.LABEL $label$6
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ($5 & [1]) ){ goto $label$8 }
	$5 = ($0 + [1])
	goto $label$7 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	
.LABEL $label$7
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$10 }
	CALL memmove(($6 + $3), $6, $1)
	$2 = ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) )
	
.LABEL $label$10
	CALL memmove($6, $2, $3)
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$12 }
	*($0) = ($3 << [1])
	goto $label$11 
	
.LABEL $label$12
	*($0 + [4]) = $3
	
.LABEL $label$11
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $94 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $92($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	return CALL $94($0, $1, CALL $143($1))
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = *($0)
	$2 = ($4 & [1])
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ((*($0) & [-2]) + [-1])
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = [10]
	$4 = uint_32($4 >> [1])
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $97($0, $3, [1], $3, $3, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($4 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($4 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $4)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $97 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $88($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $89($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $90 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $92($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $92 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $88($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $89($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $88(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $89($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC __shgetc (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL __uflow($0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$1 = (int_64)
	$2 = *($0 + [4])
	$3 = *(($0 + [8]))
	if ( ((int_64)(CASTING int_64)(int_32 ($3 - $2)) < (int_64)$1($1 - *($0 + [120])))) ){ goto $label$4 }
	*($0 + [104]) = ($2 + (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294967295)))
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$5
	$3 = *(($0 + [8]))
	
.LABEL $label$4
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)) + (int_64)*($0 + [120]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)*($0) == (int_32)$4) ){ goto $label$8 }
	*($0) = $4
	
.LABEL $label$8
	return $4
}

int_32 .FUNC strnlen (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL memchr($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

int_32 .FUNC $115 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0 + [28])
	$6 = (*($0 + [20]) - $4)
	$3 = *($0 + [84])
	$5 = *($3 + [4])
	$6 = ( $5 ? $6 : ($5 <= $6) )
	if ( ($6 == 0) ){ goto $label$1 }
	CALL memcpy(*($3), $4, $6)
	*($3) = (*($3) + $6)
	$5 = (*($5) - $6)
	*(($5 = ($3 + [4]))) = $5
	
.LABEL $label$1
	$6 = *($3)
	$5 = ( $5 ? $2 : ($5 <= $2) )
	if ( ($5 == 0) ){ goto $label$2 }
	CALL memcpy($6, $1, $5)
	$6 = (*($3) + $5)
	*($3) = $6
	*(($3 = ($3 + [4]))) = (*($3) - $5)
	
.LABEL $label$2
	*($6) = [0]
	$3 = *($0 + [44])
	*(($0 + [28])) = $3
	*(($0 + [20])) = $3
	return $2
}

int_32 .FUNC strerror (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL __lctrans($3, *([0] + [20]))
	$2 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($2 + [11488])) == (int_32)$0) ){ goto $label$4 }
	$1 = [87]
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[87]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = [11584]
	
.LOOP $label$6:
	$0 = *($2)
	$3 = ($2 + [1])
	$2 = $3
	if ( $0 ){ goto $label$6 }
	$2 = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [11584]
	return .LABEL $label$1
}

int_32 .FUNC __lctrans (int_32 $0, int_32 $1)
{
	return CALL __lctrans_impl($0, $1)
}

int_32 .FUNC __lctrans_impl (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	$1 = CALL __mo_lookup(*($1), *($1 + [4]), $0)
	return ( $1 ? $0 : $1 )
	
.LABEL $label$1
	return ( [0] ? $0 : [0] )
}

int_32 .FUNC __mo_lookup (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0)
	$10 = ((int_32)$3 == (int_32)[-1794895138])
	$9 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($0 + [8])
	$5 = ( $4 ? $9 : $10 )
	if ( ((uint_32)$5 >= (uint_32)uint_32($1 >> [2])) ){ goto $label$4 }
	$12 = ($1 - ($5 << [2]))
	$11 = *($0 + [12])
	$6 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$3 }
	$11 = *($0 + [16])
	$10 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$10 >= (uint_32)$12) ){ goto $label$2 }
	if ( ((($10 | $6) & [3]) == 0) ){ goto $label$1 }
	return [0]
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$12 = uint_32($6 >> [2])
	if ( ((int_32)$3 != (int_32)[-1794895138]) ){ goto $label$16 }
	$5 = uint_32($5 >> [1])
	$6 = ($5 << [1])
	$9 = ($0 + (($6 + $12) << [2]))
	$11 = *(($9 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$15 }
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)($1 - $11)) ){ goto $label$14 }
	$9 = $5
	$7 = [0]
	
.LOOP $label$17:
	if ( *(($0 + ($11 + $8))) ){ goto $label$9 }
	$11 = CALL strcmp($2, ($0 + $11))
	if ( ($11 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$7 }
	$13 = [0]
	$4 = ( $9 ? ($4 - $9) : $11 )
	$9 = uint_32($4 >> [1])
	$11 = ((int_32)$11 < (int_32)[0])
	$7 = ( $7 ? $5 : $11 )
	$5 = ($7 + $9)
	$6 = ($5 << [1])
	$8 = ($0 + (($6 + $12) << [2]))
	$11 = *(($8 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$10 }
	$8 = *($8)
	if ( ($8 <= ($1 - $11)) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	$8 = uint_32($9 >> [1])
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$13 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ((uint_32)$11 >= (uint_32)($1 - $4)) ){ goto $label$12 }
	$5 = $8
	$7 = [0]
	
.LOOP $label$18:
	if ( *(($0 + ($4 + $11))) ){ goto $label$8 }
	$4 = CALL strcmp($2, ($0 + $4))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$6 }
	$13 = [0]
	$9 = ( $5 ? ($9 - $5) : $4 )
	$5 = uint_32($9 >> [1])
	$4 = ((int_32)$4 < (int_32)[0])
	$7 = ( $7 ? $8 : $4 )
	$8 = ($7 + $5)
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$10 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ($11 <= ($1 - $4)) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$15
	return [0]
	
.LABEL $label$14
	return [0]
	
.LABEL $label$13
	return [0]
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	$9 = ((int_32)$3 == (int_32)[-1794895138])
	$10 = ($0 + (($6 + uint_32($10 >> [2])) << [2]))
	$4 = *(($10 + [4]))
	$11 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$5 }
	$13 = [0]
	$4 = *($10)
	$4 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$4 >= (uint_32)($1 - $11)) ){ goto $label$10 }
	return ( [0] ? ($0 + $11) : *(($0 + ($11 + $4))) )
	
.LABEL $label$10
	return $13
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	return [0]
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [0]
}

int_32 .FUNC strcmp (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)($3 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)($3 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($2 - ($3 & [255]))
}

int_32 .FUNC __towrite (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $121 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$18
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$16
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$15
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$9
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$8
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$7
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$5
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$3
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($4, *($1))
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	goto $label$1 
	
.LABEL $label$2
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$3 = *($1)
	*(($0 + [8])) = *($1 + [8])
	*($0) = $3
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	$1
}

void .FUNC __shlim (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($3 - $2))
	*($0 + [120]) = $4
	*($0 + [104]) = ( ( ($2 + (CASTING uint_32)(uint_64 $1)) ? $3 : ((int_64)$4 > (int_64)$1) ) ? $3 : ((int_64)$1 != (int_64)0) )
}

int_64 .FUNC __intscan (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$5:
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$7 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL __shgetc($0)
	
.LABEL $label$6
	$10 = ($13 + [-9])
	if ( ((uint_32)$10 > (uint_32)[36]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( [-1] ? [0] : ((int_32)$13 == (int_32)[45]) )
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$2 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$1 
	
.LABEL $label$4
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL __shgetc($0)
	
.LABEL $label$1
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$20 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$20 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$19 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$18 
	
.LABEL $label$20
	$1 = ( $1 ? [10] : $1 )
	if ( (*(($13 + [13393])) <= $1) ){ goto $label$17 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$21 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$21
	CALL __shlim($0, (int_64)0)
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$19
	$13 = CALL __shgetc($0)
	
.LABEL $label$18
	if ( ((int_32)($13 | [32]) != (int_32)[120]) ){ goto $label$22 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$15 
	
.LABEL $label$22
	if ( ($1 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$13 }
	$14 = (int_64)0
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$23 }
	$10 = [0]
	$8 = ($0 + [104])
	$1 = ($0 + [4])
	
.LOOP $label$24:
	$10 = ((int_32)$10 * (int_32)[10])
	$13 = *($1)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$26 }
	*($1) = ($13 + [1])
	$13 = *($13)
	goto $label$25 
	
.LABEL $label$26
	$13 = CALL __shgetc($0)
	
.LABEL $label$25
	$10 = ($10 + $9)
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	if ( ($10 <= [429496729]) ){ goto $label$24 }
	
.LABEL $label$27
	$14 = (CASTING uint_64)(uint_32 $10)
	
.LABEL $label$23
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$11 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$28:
	$1 = [10]
	$5 = (CASTING int_64)(int_32 $10)
	$12 = ((int_64)$14 * (int_64)10)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$30 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$29 
	
.LABEL $label$30
	$13 = CALL __shgetc($0)
	
.LABEL $label$29
	$14 = ((int_64)$12 + (int_64)$5)
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$31 }
	if ( (uint_64)($14 <= (int_64)1844674407370955162) ){ goto $label$28 }
	
.LABEL $label$31
	if ( ((uint_32)$10 <= (uint_32)[9]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$13 = CALL __shgetc($0)
	
.LABEL $label$15
	$1 = [16]
	if ( (*(($13 + [13393])) <= [16]) ){ goto $label$13 }
	$13 = *(($0 + [104]))
	if ( ($13 == 0) ){ goto $label$32 }
	*(($10 = ($0 + [4]))) = (*($10) + [-1])
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$9 }
	$14 = (int_64)0
	if ( ($13 == 0) ){ goto $label$10 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	return (int_64)0
	
.LABEL $label$14
	$1 = [8]
	
.LABEL $label$13
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$37 }
	$10 = *(($13 + [13393]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$36 }
	$9 = [0]
	$2 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$38:
	$9 = ($10 + ((int_32)$9 * (int_32)$1))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($2)) ){ goto $label$40 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$39 
	
.LABEL $label$40
	$13 = CALL __shgetc($0)
	
.LABEL $label$39
	$10 = *(($13 + [13393]))
	if ( ((uint_32)$9 > (uint_32)[119304646]) ){ goto $label$41 }
	if ( ($10 <= $1) ){ goto $label$38 }
	
.LABEL $label$41
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$35 }
	goto $label$12 
	
.LABEL $label$37
	$2 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [13664]))
	$10 = *(($13 + [13393]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$34 }
	$9 = [0]
	$11 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$42:
	$9 = ($10 | ($9 << $2))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$44 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$43 
	
.LABEL $label$44
	$13 = CALL __shgetc($0)
	
.LABEL $label$43
	$10 = *(($13 + [13393]))
	if ( ((uint_32)$9 > (uint_32)[134217727]) ){ goto $label$45 }
	if ( ($10 <= $1) ){ goto $label$42 }
	
.LABEL $label$45
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$33 }
	goto $label$12 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$35
	$7 = (CASTING uint_64)(uint_32 $1)
	$6 = ((uint_64)(int_64)-1 / (uint_64)$7)
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)$6) ){ goto $label$12 }
	$5 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$12 = ((int_64)$14 * (int_64)$7)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$48 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$47 
	
.LABEL $label$48
	$13 = CALL __shgetc($0)
	
.LABEL $label$47
	$14 = ((int_64)$5 + (int_64)$12)
	$10 = *(($13 + [13393]))
	if ( ($10 <= $1) ){ goto $label$46 }
	goto $label$12 
	
.LABEL $label$34
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$33
	$5 = (CASTING uint_64)(uint_32 $2)
	$6 = (uint_64)(int_64)-1 >> (uint_64)$5
	if ( ((uint_64)$14 > (uint_64)$6)) ){ goto $label$12 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$49:
	$14 = ((int_64)$14 << (int_64)$5)
	$12 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$51 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$50 
	
.LABEL $label$51
	$13 = CALL __shgetc($0)
	
.LABEL $label$50
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = *(($13 + [13393]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	if ( ((uint_64)$14 <= (uint_64)$6) ){ goto $label$49 }
	
.LABEL $label$12
	if ( ((uint_32)*(($13 + [13393])) >= (uint_32)$1) ){ goto $label$11 }
	$9 = ($0 + [104])
	$10 = ($0 + [4])
	
.LOOP $label$52:
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($9)) ){ goto $label$54 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$53 
	
.LABEL $label$54
	$13 = CALL __shgetc($0)
	
.LABEL $label$53
	if ( (*(($13 + [13393])) <= $1) ){ goto $label$52 }
	*(CALL __errno_location()) = [34]
	$4 = ( $4 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$14 = $3
	
.LABEL $label$11
	if ( (*(($0 + [104])) == 0) ){ goto $label$55 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$55
	if ( (uint_64)($14 <= $3) ){ goto $label$56 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$57 }
	if ( $4 ){ goto $label$57 }
	*(CALL __errno_location()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$57
	if ( ((uint_64)$14 <= (uint_64)$3) ){ goto $label$56 }
	*(CALL __errno_location()) = [34]
	return $3
	
.LABEL $label$56
	$12 = (CASTING int_64)(int_32 $4)
	$14 = (int_64))(((int_64)$14 ^ (int_64)$12) - $12)
	
.LABEL $label$10
	return $14
	
.LABEL $label$9
	CALL __shlim($0, (int_64)0)
	$10
	return (int_64)0
}

int_32 .FUNC __fwritex (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($2 + [16])
	if ( $6 ){ goto $label$2 }
	$6 = [0]
	if ( CALL __towrite($2) ){ goto $label$1 }
	$6 = *(($2 + [16]))
	
.LABEL $label$2
	$7 = *($2 + [20])
	if ( ((uint_32)($6 - $7) >= (uint_32)$1) ){ goto $label$3 }
	return CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	
.LABEL $label$3
	$8 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + $1)
	$8 = [0]
	$6 = [0]
	
.LOOP $label$5:
	if ( (($1 + $6) == 0) ){ goto $label$4 }
	$5 = ($3 + $6)
	$4 = ($6 + [-1])
	$6 = $4
	if ( ((int_32)*(($5 + [-1])) != (int_32)[10]) ){ goto $label$5 }
	$8 = (($1 + $4) + [1])
	$6 = CALL int_32 $2((int_32 $0), (int_32 $8), (int_32 *($2 + [36])))
	if ( ($6 <= $8) ){ goto $label$1 }
	$1 = ((int_32)$4 ^ (int_32)[-1])
	$0 = (($3 + $4) + [1])
	$7 = *(($2 + [20]))
	
.LABEL $label$4
	CALL memcpy($7, $0, $1)
	*(($6 = ($2 + [20]))) = (*($6) + $1)
	return ($8 + $1)
	
.LABEL $label$1
	return $6
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [1312])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $88([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [1344])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [1344])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $39(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $89($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC __fpclassifyl (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [3] ? [2] : ((int_64)((int_64)$2 | (int_64)$0) != (int_64)0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

void .FUNC _ZN7eosgame8luckynum8addToDayEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	*([0] + [4]) = $12
	$3 = *($0 + [144])
	$8 = *(($0 + [72]))
	$11 = *(($0 + [76]))
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$1 }
	$10 = ($11 + [-24])
	$4 = ([0] - $8)
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$3) ){ goto $label$1 }
	$11 = $10
	$5 = ($10 + [-24])
	$10 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = ($0 + [48])
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$4 }
	$4 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$2), [208])
	goto $label$3 
	
.LABEL $label$4
	$4 = [0]
	$10 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7235159537265672192, $3)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $38($2, $10)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$2), [208])
	
.LABEL $label$3
	$10 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	$6 = (CASTING uint_64)(uint_32 (($10 + [-28800]) - ((uint_32)$10 % (uint_32)[86400])))
	if ( ($4 == 0) ){ goto $label$10 }
	$3 = *($0 + [152])
	$7 = *(($0 + [72]))
	$11 = *(($0 + [76]))
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$11 }
	$10 = ($11 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$12:
	if ( ((int_64)*(*($10)) == (int_64)$3) ){ goto $label$11 }
	$11 = $10
	$5 = ($10 + [-24])
	$10 = $5
	if ( ((int_32)($5 + $8) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$9 }
	$10 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)$2), [208])
	goto $label$8 
	
.LABEL $label$10
	$9 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$15()), [896])
	*(($10 = CALL $88([32])) + [16]) = $2
	*($10 + [8]) = $6
	*($10) = *(($0 + [144]))
	CALL eosio_assert([1], [832])
	CALL memcpy($12, $10, [8])
	CALL eosio_assert([1], [832])
	$4 = ($12 | [8])
	CALL memcpy($4, ($10 + [8]), [8])
	$3 = *($10)
	$11 = CALL db_store_i64(*(($0 + [56])), (int_64)7235159537265672192, $9, $3, $12, [16])
	*($10 + [20]) = $11
	$5 = ($0 + [64])
	if ( (uint_64)($3 <= *($5)) ){ goto $label$13 }
	*($5) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($12 + [24]) = $10
	$3 = *($10)
	*($12) = $3
	*($12 + [20]) = $11
	$8 = ($0 + [76])
	$5 = *($8)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [80]))) ){ goto $label$7 }
	*($5 + [8]) = $3
	*($5 + [16]) = $11
	*($12 + [24]) = [0]
	*($5) = $10
	*($8) = ($5 + [24])
	goto $label$6 
	
.LABEL $label$9
	$10 = [0]
	$5 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7235159537265672192, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$10 = CALL $38($2, $5)
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)$2), [208])
	
.LABEL $label$8
	$9 = *($0)
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [336])
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)$2), [1136])
	$5 = ($0 + [48])
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$15()), [1184])
	*($10 + [8]) = ((int_64)( *($10 + [8]) ? (int_64)0 : ((int_64)*($4 + [8]) == (int_64)$6) ) + (int_64)$1)
	$3 = *($10)
	CALL eosio_assert([1], [1248])
	CALL eosio_assert([1], [832])
	CALL memcpy($12, $10, [8])
	CALL eosio_assert([1], [832])
	$11 = ($12 | [8])
	CALL memcpy($11, ($10 + [8]), [8])
	CALL db_update_i64(*($10 + [20]), $9, $12, [16])
	$10 = ($0 + [64])
	if ( (uint_64)($3 <= *($10)) ){ goto $label$14 }
	*($10) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	$1 = *($0)
	CALL eosio_assert([1], [336])
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$2), [1136])
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$15()), [1184])
	*($4 + [8]) = $6
	$3 = *($4)
	CALL eosio_assert([1], [1248])
	CALL eosio_assert([1], [832])
	CALL memcpy($12, $4, [8])
	CALL eosio_assert([1], [832])
	CALL memcpy($11, ($4 + [8]), [8])
	CALL db_update_i64(*($4 + [20]), $1, $12, [16])
	if ( (uint_64)($3 <= *($10)) ){ goto $label$5 }
	*(($0 + [64])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	goto $label$5 
	
.LABEL $label$7
	CALL $39(($0 + [72]), ($12 + [24]), $12, ($12 + [20]))
	
.LABEL $label$6
	$10 = *($12 + [24])
	*($12 + [24]) = [0]
	if ( ($10 == 0) ){ goto $label$15 }
	CALL $89($10)
	
.LABEL $label$15
	$6 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$15()), [896])
	*(($10 = CALL $88([32])) + [16]) = $2
	*($10 + [8]) = $1
	*($10) = *($0 + [152])
	CALL eosio_assert([1], [832])
	CALL memcpy($12, $10, [8])
	CALL eosio_assert([1], [832])
	CALL memcpy($4, ($10 + [8]), [8])
	$3 = *($10)
	$11 = CALL db_store_i64(*(($0 + [56])), (int_64)7235159537265672192, $6, $3, $12, [16])
	*($10 + [20]) = $11
	$5 = ($0 + [64])
	if ( (uint_64)($3 <= *($5)) ){ goto $label$16 }
	*($5) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*($12 + [24]) = $10
	$3 = *($10)
	*($12) = $3
	*($12 + [20]) = $11
	$4 = ($0 + [76])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [80]))) ){ goto $label$18 }
	*($5 + [8]) = $3
	*($5 + [16]) = $11
	*($12 + [24]) = [0]
	*($5) = $10
	*($4) = ($5 + [24])
	goto $label$17 
	
.LABEL $label$18
	CALL $39(($0 + [72]), ($12 + [24]), $12, ($12 + [20]))
	
.LABEL $label$17
	$10 = *($12 + [24])
	*($12 + [24]) = [0]
	if ( ($10 == 0) ){ goto $label$5 }
	CALL $89($10)
	
.LABEL $label$5
	*([0] + [4]) = ($12 + [32])
}

void .FUNC _ZN7eosgame8luckynum8addTotalEy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$2 = *($0 + [136])
	$3 = *(($0 + [72]))
	$7 = *(($0 + [76]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [48])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$7 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$5), [208])
	$2 = *($0)
	if ( $6 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7235159537265672192, $2)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL $38($5, $6)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$5), [208])
	$2 = *($0)
	
.LABEL $label$6
	CALL eosio_assert([1], [336])
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$5), [1136])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$15()), [1184])
	*($6 + [8]) = ((int_64)*($6 + [8]) + (int_64)$1)
	$1 = *($6)
	CALL eosio_assert([1], [1248])
	CALL eosio_assert([1], [832])
	CALL memcpy(($8 + [16]), $6, [8])
	CALL eosio_assert([1], [832])
	CALL memcpy((($8 + [16]) | [8]), ($6 + [8]), [8])
	CALL db_update_i64(*($6 + [20]), $2, ($8 + [16]), [16])
	$6 = ($0 + [64])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$3 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	goto $label$3 
	
.LABEL $label$5
	$2 = *($0)
	
.LABEL $label$4
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$15()), [896])
	*(($6 = CALL $88([32])) + [16]) = $5
	*($6 + [8]) = $1
	*($6) = *(($0 + [136]))
	CALL eosio_assert([1], [832])
	CALL memcpy(($8 + [16]), $6, [8])
	CALL eosio_assert([1], [832])
	CALL memcpy((($8 + [16]) | [8]), ($6 + [8]), [8])
	$1 = *($6)
	$7 = CALL db_store_i64(*(($0 + [56])), (int_64)7235159537265672192, $2, $1, ($8 + [16]), [16])
	*($6 + [20]) = $7
	$5 = ($0 + [64])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$8 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($8 + [8]) = $6
	$2 = *($6)
	*($8 + [16]) = $2
	*($8 + [4]) = $7
	$4 = ($0 + [76])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [80]))) ){ goto $label$10 }
	*($5 + [8]) = $2
	*($5 + [16]) = $7
	*($8 + [8]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	goto $label$9 
	
.LABEL $label$10
	CALL $39(($0 + [72]), ($8 + [8]), ($8 + [16]), ($8 + [4]))
	
.LABEL $label$9
	$6 = *($8 + [8])
	*($8 + [8]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	CALL $89($6)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
}

int_32 .FUNC __signbitl (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1360])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $19($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [1344])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $43($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $93($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $88($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $93($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $89($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $90($7)
	return (unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1344])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1344])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1344])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [1344])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $42(*($1), *($0 + [12]))
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [416])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [480])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $41(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	
.LOOP $label$1:
	$4 = ($1 + [-80])
	$3 = ($1 + [-40])
	
.LOOP $label$2:
	$5 = $0
	
.LOOP $label$4:
	$9 = ($1 - $5)
	$0 = ((int_32)$9 / (int_32)[40])
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$14 }
	if ( ((int_32)$9 <= (int_32)[1239]) ){ goto $label$13 }
	$0 = ($5 + ((int_32)((uint_32)$9 / (uint_32)[80]) * (int_32)[40]))
	if ( ((int_32)$9 < (int_32)[39961]) ){ goto $label$21 }
	$9 = ($0 + $9)
	$9 = ((int_32)((uint_32)$9 / (uint_32)[160]) * (int_32)[40])
	$7 = ($5 + $9)
	$8 = CALL $52($5, $7, $0, $9, $2)
	if ( (CALL int_32 $3((int_32 $9), (int_32 *($2))) == 0) ){ goto $label$15 }
	CALL memcpy(($10 + [8]), $9, [40])
	CALL memcpy($9, $3, [40])
	CALL memcpy($3, ($10 + [8]), [40])
	if ( (CALL int_32 $9((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$20 }
	CALL memcpy(($10 + [8]), $0, [40])
	$6 = CALL memcpy($0, $9, [40])
	CALL memcpy($9, ($10 + [8]), [40])
	if ( (CALL int_32 $6((int_32 $7), (int_32 *($2))) == 0) ){ goto $label$17 }
	CALL memcpy(($10 + [8]), $7, [40])
	$9 = CALL memcpy($7, $6, [40])
	CALL memcpy($6, ($10 + [8]), [40])
	if ( (CALL int_32 $9((int_32 $5), (int_32 *($2))) == 0) ){ goto $label$16 }
	CALL memcpy(($10 + [8]), $5, [40])
	CALL memcpy($5, $9, [40])
	CALL memcpy($9, ($10 + [8]), [40])
	$8 = ($8 + [4])
	goto $label$15 
	
.LABEL $label$21
	$9 = CALL int_32 $0((int_32 $5), (int_32 *($2)))
	$7 = CALL int_32 $3((int_32 $0), (int_32 *($2)))
	if ( ($9 == 0) ){ goto $label$22 }
	if ( ($7 == 0) ){ goto $label$19 }
	CALL memcpy(($10 + [8]), $5, [40])
	CALL memcpy($5, $3, [40])
	CALL memcpy($3, ($10 + [8]), [40])
	$8 = [1]
	goto $label$15 
	
.LABEL $label$22
	$8 = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	CALL memcpy(($10 + [8]), $0, [40])
	$9 = CALL memcpy($0, $3, [40])
	CALL memcpy($3, ($10 + [8]), [40])
	$8 = [1]
	if ( (CALL int_32 $9((int_32 $5), (int_32 *($2))) == 0) ){ goto $label$15 }
	CALL memcpy(($10 + [8]), $5, [40])
	CALL memcpy($5, $9, [40])
	CALL memcpy($9, ($10 + [8]), [40])
	goto $label$18 
	
.LABEL $label$20
	$8 = ($8 + [1])
	goto $label$15 
	
.LABEL $label$19
	CALL memcpy(($10 + [8]), $5, [40])
	CALL memcpy($5, $0, [40])
	$8 = [1]
	$9 = CALL memcpy($0, ($10 + [8]), [40])
	if ( (CALL int_32 $3((int_32 $9), (int_32 *($2))) == 0) ){ goto $label$15 }
	CALL memcpy(($10 + [8]), $9, [40])
	CALL memcpy($9, $3, [40])
	CALL memcpy($3, ($10 + [8]), [40])
	
.LABEL $label$18
	$8 = [2]
	goto $label$15 
	
.LABEL $label$17
	$8 = ($8 + [2])
	goto $label$15 
	
.LABEL $label$16
	$8 = ($8 + [3])
	
.LABEL $label$15
	if ( CALL int_32 $5((int_32 $0), (int_32 *($2))) ){ goto $label$23 }
	$9 = $4
	
.LOOP $label$25:
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$24 }
	$7 = CALL int_32 $9((int_32 $0), (int_32 *($2)))
	$9 = ($9 + [-40])
	if ( ($7 == 0) ){ goto $label$25 }
	CALL memcpy(($10 + [8]), $5, [40])
	$7 = ($9 + [40])
	CALL memcpy($5, $7, [40])
	CALL memcpy($7, ($10 + [8]), [40])
	$8 = ($8 + [1])
	goto $label$7 
	
.LABEL $label$24
	$0 = ($5 + [40])
	if ( CALL int_32 $5((int_32 $3), (int_32 *($2))) ){ goto $label$26 }
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$6 }
	$0 = ($5 + [80])
	
.LOOP $label$28:
	$9 = ($0 + [-40])
	if ( CALL int_32 $5((int_32 $9), (int_32 *($2))) ){ goto $label$27 }
	$0 = ($0 + [40])
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$28 }
	goto $label$6 
	
.LABEL $label$27
	CALL memcpy(($10 + [8]), $9, [40])
	CALL memcpy($9, $3, [40])
	CALL memcpy($3, ($10 + [8]), [40])
	
.LABEL $label$26
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$6 }
	$9 = $3
	
.LOOP $label$29:
	$7 = CALL int_32 $5((int_32 $0), (int_32 *($2)))
	$0 = ($0 + [40])
	if ( ($7 == 0) ){ goto $label$29 }
	$7 = ($0 + [-40])
	
.LOOP $label$30:
	$9 = ($9 + [-40])
	if ( CALL int_32 $5((int_32 $9), (int_32 *($2))) ){ goto $label$30 }
	if ( ((uint_32)$7 >= (uint_32)$9) ){ goto $label$5 }
	$7 = ($0 + [-40])
	CALL memcpy(($10 + [8]), $7, [40])
	CALL memcpy($7, $9, [40])
	CALL memcpy($9, ($10 + [8]), [40])
	goto $label$29 
	
.LABEL $label$23
	$7 = $3
	goto $label$7 
	
.LABEL $label$14
	goto $label$6 
	
.LABEL $label$31
	if ( (CALL int_32 $3((int_32 $5), (int_32 *($2))) == 0) ){ goto $label$6 }
	CALL memcpy(($10 + [8]), $5, [40])
	CALL memcpy($5, $3, [40])
	CALL memcpy($3, ($10 + [8]), [40])
	goto $label$6 
	
.LABEL $label$13
	CALL $53($5, $1, $2)
	goto $label$6 
	
.LABEL $label$12
	$0 = ($5 + [40])
	$9 = CALL int_32 $0((int_32 $5), (int_32 *($2)))
	$7 = CALL int_32 $3((int_32 $0), (int_32 *($2)))
	if ( ($9 == 0) ){ goto $label$9 }
	if ( ($7 == 0) ){ goto $label$8 }
	CALL memcpy(($10 + [8]), $5, [40])
	CALL memcpy($5, $3, [40])
	CALL memcpy($3, ($10 + [8]), [40])
	goto $label$6 
	
.LABEL $label$11
	CALL $52($5, ($5 + [40]), ($5 + [80]), $3, $2)
	goto $label$6 
	
.LABEL $label$10
	$0 = ($5 + [120])
	$9 = ($5 + [80])
	$7 = ($5 + [40])
	CALL $52($5, $7, $9, $0, $2)
	if ( (CALL int_32 $3((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$6 }
	CALL memcpy(($10 + [8]), $0, [40])
	CALL memcpy($0, $3, [40])
	CALL memcpy($3, ($10 + [8]), [40])
	if ( (CALL int_32 $0((int_32 $9), (int_32 *($2))) == 0) ){ goto $label$6 }
	CALL memcpy(($10 + [8]), $9, [40])
	CALL memcpy($9, $0, [40])
	CALL memcpy($0, ($10 + [8]), [40])
	if ( (CALL int_32 $9((int_32 $7), (int_32 *($2))) == 0) ){ goto $label$6 }
	CALL memcpy(($10 + [8]), $7, [40])
	$0 = CALL memcpy($7, $9, [40])
	CALL memcpy($9, ($10 + [8]), [40])
	if ( (CALL int_32 $0((int_32 $5), (int_32 *($2))) == 0) ){ goto $label$6 }
	CALL memcpy(($10 + [8]), $5, [40])
	CALL memcpy($5, $0, [40])
	CALL memcpy($0, ($10 + [8]), [40])
	goto $label$6 
	
.LABEL $label$9
	if ( ($7 == 0) ){ goto $label$6 }
	CALL memcpy(($10 + [8]), $0, [40])
	CALL memcpy($0, $3, [40])
	CALL memcpy($3, ($10 + [8]), [40])
	if ( (CALL int_32 $0((int_32 $5), (int_32 *($2))) == 0) ){ goto $label$6 }
	CALL memcpy(($10 + [8]), $5, [40])
	CALL memcpy($5, $0, [40])
	CALL memcpy($0, ($10 + [8]), [40])
	goto $label$6 
	
.LABEL $label$8
	CALL memcpy(($10 + [8]), $5, [40])
	CALL memcpy($5, $0, [40])
	$0 = CALL memcpy($0, ($10 + [8]), [40])
	if ( (CALL int_32 $3((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$6 }
	CALL memcpy(($10 + [8]), $0, [40])
	CALL memcpy($0, $3, [40])
	CALL memcpy($3, ($10 + [8]), [40])
	goto $label$6 
	
.LABEL $label$7
	$6 = ($5 + [40])
	if ( ((uint_32)$6 >= (uint_32)$7) ){ goto $label$32 }
	
.LOOP $label$33:
	$9 = ($6 + [-40])
	
.LOOP $label$34:
	$9 = ($9 + [40])
	if ( CALL int_32 $9((int_32 $0), (int_32 *($2))) ){ goto $label$34 }
	$6 = ($9 + [40])
	
.LOOP $label$35:
	$7 = ($7 + [-40])
	if ( (CALL int_32 $7((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$35 }
	if ( ((uint_32)$9 > (uint_32)$7) ){ goto $label$36 }
	CALL memcpy(($10 + [8]), $9, [40])
	CALL memcpy($9, $7, [40])
	$0 = ( CALL memcpy($7, ($10 + [8]), [40]) ? $0 : ((int_32)$0 == (int_32)$9) )
	$8 = ($8 + [1])
	goto $label$33 
	
.LABEL $label$36
	$6 = $9
	
.LABEL $label$32
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$37 }
	if ( (CALL int_32 $0((int_32 $6), (int_32 *($2))) == 0) ){ goto $label$37 }
	CALL memcpy(($10 + [8]), $6, [40])
	CALL memcpy($6, $0, [40])
	CALL memcpy($0, ($10 + [8]), [40])
	$8 = ($8 + [1])
	
.LABEL $label$37
	if ( $8 ){ goto $label$39 }
	$9 = CALL $54($5, $6, $2)
	$0 = ($6 + [40])
	if ( CALL $54($0, $1, $2) ){ goto $label$38 }
	if ( $9 ){ goto $label$2 }
	
.LABEL $label$39
	if ( ((int_32)($6 - $5) >= (int_32)($1 - $6)) ){ goto $label$3 }
	CALL $47($5, $6, $2)
	$5 = ($6 + [40])
	goto $label$4 
	
.LABEL $label$38
	$1 = $6
	$0 = $5
	if ( ($9 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	*([0] + [4]) = ($10 + [48])
	return 
	
.LABEL $label$5
	$5 = $7
	goto $label$4 
	
.LABEL $label$3
	CALL $47(($6 + [40]), $1, $2)
	$1 = $6
	$0 = $5
	goto $label$1 
	$0
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL strlen($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($3 + $4)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$5 = *($1)
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $88($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : ($5 & [1]) ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $94($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $90($0)
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [1312])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $88([48])) + [36]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[33]), [1344])
	CALL memcpy($5, $6, [34])
	*($5 + [40]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)-5069197016886673408
	$6 = *($5 + [40])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)-5069197016886673408
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $55(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$7
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $89($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [32])
	return $5
}

void .FUNC _ZN7eosgame8luckynum6revealEy9signature11checksum256N5eosio5assetE (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_64 $26
	int_32 $27
	$27 = (*([0] + [4]) - [560])
	*([0] + [4]) = $27
	$23 = (int_64)0
	$20 = (int_64)59
	$22 = [16]
	$24 = (int_64)0
	
.LOOP $label$1:
	$19 = (int_64)0
	if ( ((uint_64)$23 > (uint_64)(int_64)11) ){ goto $label$2 }
	$21 = *($22)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$21 = ($21 + [165])
	goto $label$3 
	
.LABEL $label$4
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$19 = ((int_64)(CASTING uint_64)(uint_32 ($21 & [31])) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$2
	$22 = ($22 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$24 = ((int_64)$19 | (int_64)$24)
	$20 = ((int_64)$20 + (int_64)-5)
	if ( ((int_64)$20 != (int_64)-6) ){ goto $label$1 }
	$23 = (int_64)0
	$19 = (int_64)59
	$22 = [1376]
	$25 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$23 > (uint_64)(int_64)10) ){ goto $label$10 }
	$21 = *($22)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$21 = ($21 + [165])
	goto $label$8 
	
.LABEL $label$10
	$20 = (int_64)0
	if ( ((int_64)$23 == (int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $21) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$6
	$22 = ($22 + [1])
	$19 = ((int_64)$19 + (int_64)-5)
	$25 = ((int_64)$20 | (int_64)$25)
	$23 = ((int_64)$23 + (int_64)1)
	if ( ((int_64)$23 != (int_64)13) ){ goto $label$5 }
	CALL require_auth2($24, $25)
	*($27 + [512]) = (int_64)-1
	*($27 + [496]) = *($0)
	$23 = *($4 + [8])
	$20 = ((int_64)$23 + (int_64)*($4))
	*($27 + [504]) = $20
	*($27 + [520]) = [0]
	*(($13 = ($27 + [524]))) = [0]
	*(($27 + [528])) = [0]
	*($27 + [532]) = [0]
	*($27 + [488]) = ($0 + [88])
	*($27 + [96]) = $20
	CALL $11(($27 + [136]), ($27 + [488]), ($27 + [96]))
	$22 = [0]
	$21 = *($27 + [140])
	if ( ($21 == 0) ){ goto $label$11 }
	$22 = ( $21 ? [0] : ((int_64)*($27 + [96]) == (int_64)((int_64)*(($21 + [16])) + (int_64)*($21 + [8]))) )
	
.LABEL $label$11
	CALL eosio_assert(((int_32)$22 != (int_32)[0]), [128])
	$15 = *($22 + [24])
	$11 = *(($27 + [520]))
	$13 = *($13)
	if ( ((int_32)$13 == (int_32)$11) ){ goto $label$12 }
	$22 = ($13 + [-24])
	$10 = ([0] - $11)
	
.LOOP $label$13:
	if ( ((int_64)*(*($22)) == (int_64)$1) ){ goto $label$12 }
	$13 = $22
	$21 = ($22 + [-24])
	$22 = $21
	if ( ((int_32)($21 + $10) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ((int_32)$13 == (int_32)$11) ){ goto $label$15 }
	$5 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)($27 + [496])), [208])
	goto $label$14 
	
.LABEL $label$15
	$5 = [0]
	$22 = CALL db_find_i64(*($27 + [496]), *(($27 + [504])), (int_64)-8173735053029801984, $1)
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$14 }
	$5 = CALL $12(($27 + [496]), $22)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)($27 + [496])), [208])
	
.LABEL $label$14
	$22 = [0]
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [1392])
	CALL eosio_assert(((int_32)*($5 + [8]) == (int_32)[1]), [1408])
	$21 = ($0 + [8])
	$13 = *(($0 + [36]))
	if ( ((int_32)$13 == (int_32)*(($0 + [32]))) ){ goto $label$17 }
	$22 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*(($22 + [36])) == (int_32)$21), [208])
	goto $label$16 
	
.LABEL $label$17
	$13 = CALL db_find_i64(*($21), *(($0 + [16])), (int_64)-5069197016886673408, (int_64)-5069197016886673408)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$16 }
	$22 = CALL $45($21, $13)
	CALL eosio_assert(((int_32)*(($22 + [36])) == (int_32)$21), [208])
	
.LABEL $label$16
	CALL eosio_assert(((int_32)$22 != (int_32)[0]), [1440])
	CALL memcpy(($27 + [136]), $22, [34])
	CALL memcpy(($27 + [454]), ($27 + [136]), [34])
	*($27 + [448]) = [0]
	*($27 + [440]) = (int_64)0
	if ( ((int_64)$23 != (int_64)1397703940) ){ goto $label$32 }
	*(($27 + [144])) = [0]
	*($27 + [136]) = (int_64)0
	$22 = CALL strlen([1472])
	if ( ((uint_32)$22 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$22 >= (uint_32)[11]) ){ goto $label$31 }
	*($27 + [136]) = ($22 << [1])
	$21 = (($27 + [136]) | [1])
	if ( $22 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	*(($27 + [144])) = [0]
	*($27 + [136]) = (int_64)0
	$22 = CALL strlen([1488])
	if ( ((uint_32)$22 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$22 >= (uint_32)[11]) ){ goto $label$28 }
	*($27 + [136]) = ($22 << [1])
	$21 = (($27 + [136]) | [1])
	if ( $22 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$31
	$13 = (($22 + [16]) & [-16])
	$21 = CALL $88($13)
	*($27 + [136]) = ($13 | [1])
	*($27 + [144]) = $21
	*($27 + [140]) = $22
	
.LABEL $label$30
	CALL memcpy($21, [1472], $22)
	
.LABEL $label$29
	*(($21 + $22)) = [0]
	if ( (*($27 + [440]) & [1]) ){ goto $label$25 }
	*($27 + [440]) = [0]
	goto $label$24 
	
.LABEL $label$28
	$13 = (($22 + [16]) & [-16])
	$21 = CALL $88($13)
	*($27 + [136]) = ($13 | [1])
	*($27 + [144]) = $21
	*($27 + [140]) = $22
	
.LABEL $label$27
	CALL memcpy($21, [1488], $22)
	
.LABEL $label$26
	*(($21 + $22)) = [0]
	if ( (*($27 + [440]) & [1]) ){ goto $label$23 }
	*($27 + [440]) = [0]
	goto $label$22 
	
.LABEL $label$25
	*(*(($27 + [448]))) = [0]
	*($27 + [444]) = [0]
	
.LABEL $label$24
	CALL $93(($27 + [440]), [0])
	*((($27 + [440]) + [8])) = *((($27 + [136]) + [8]))
	*($27 + [440]) = *($27 + [136])
	goto $label$21 
	
.LABEL $label$23
	*(*(($27 + [448]))) = [0]
	*($27 + [444]) = [0]
	
.LABEL $label$22
	CALL $93(($27 + [440]), [0])
	*((($27 + [440]) + [8])) = *((($27 + [136]) + [8]))
	*($27 + [440]) = *($27 + [136])
	
.LABEL $label$21
	CALL _ZNSt3__19to_stringEy(($27 + [392]), $1)
	$22 = CALL $95(($27 + [392]), [80])
	$21 = ($22 + [8])
	*((($27 + [408]) + [8])) = *($21)
	*($27 + [408]) = *($22)
	*($22) = [0]
	*(($22 + [4])) = [0]
	*($21) = [0]
	*($27 + [256]) = *($5 + [24])
	CALL $16(($27 + [376]), ($27 + [256]))
	$22 = *($27 + [376])
	$21 = ($22 & [1])
	$22 = CALL $94(($27 + [408]), ( *($27 + [384]) ? (($27 + [376]) | [1]) : $21 ), ( *($27 + [380]) ? uint_32($22 >> [1]) : $21 ))
	$21 = ($22 + [8])
	*((($27 + [536]) + [8])) = *($21)
	*($27 + [536]) = *($22)
	*($22) = [0]
	*(($22 + [4])) = [0]
	*($21) = [0]
	$22 = CALL $95(($27 + [536]), [80])
	$21 = ($22 + [8])
	*((($27 + [80]) + [8])) = *($21)
	*($27 + [80]) = *($22)
	*($22) = [0]
	*(($22 + [4])) = [0]
	*($21) = [0]
	CALL _ZNSt3__19to_stringEm(($27 + [360]), *($5 + [32]))
	$22 = *($27 + [360])
	$21 = ($22 & [1])
	$22 = CALL $94(($27 + [80]), ( *($27 + [368]) ? (($27 + [360]) | [1]) : $21 ), ( *($27 + [364]) ? uint_32($22 >> [1]) : $21 ))
	$21 = ($22 + [8])
	*((($27 + [304]) + [8])) = *($21)
	*($27 + [304]) = *($22)
	*($22) = [0]
	*(($22 + [4])) = [0]
	*($21) = [0]
	$22 = CALL $95(($27 + [304]), [80])
	$21 = ($22 + [8])
	*((($27 + [96]) + [8])) = *($21)
	*($27 + [96]) = *($22)
	*($22) = [0]
	*(($22 + [4])) = [0]
	*($21) = [0]
	$20 = *($4)
	CALL _ZNSt3__19to_stringEx(($27 + [344]), $20)
	$22 = *($27 + [344])
	$21 = ($22 & [1])
	$22 = CALL $94(($27 + [96]), ( *($27 + [352]) ? (($27 + [344]) | [1]) : $21 ), ( *($27 + [348]) ? uint_32($22 >> [1]) : $21 ))
	$21 = ($22 + [8])
	*((($27 + [136]) + [8])) = *($21)
	*($27 + [136]) = *($22)
	*($22) = [0]
	*(($22 + [4])) = [0]
	*($21) = [0]
	$22 = *($27 + [440])
	$21 = ($22 & [1])
	$22 = CALL $94(($27 + [136]), ( *((($27 + [440]) + [8])) ? (($27 + [440]) | [1]) : $21 ), ( *($27 + [444]) ? uint_32($22 >> [1]) : $21 ))
	$21 = ($22 + [8])
	*((($27 + [424]) + [8])) = *($21)
	*($27 + [424]) = *($22)
	*($22) = [0]
	*(($22 + [4])) = [0]
	*($21) = [0]
	if ( ((*($27 + [136]) & [1]) == 0) ){ goto $label$33 }
	CALL $89(*($27 + [144]))
	
.LABEL $label$33
	if ( ((*($27 + [344]) & [1]) == 0) ){ goto $label$34 }
	CALL $89(*(($27 + [352])))
	
.LABEL $label$34
	if ( ((*($27 + [96]) & [1]) == 0) ){ goto $label$35 }
	CALL $89(*($27 + [104]))
	
.LABEL $label$35
	if ( ((*($27 + [304]) & [1]) == 0) ){ goto $label$36 }
	CALL $89(*($27 + [312]))
	
.LABEL $label$36
	if ( ((*($27 + [360]) & [1]) == 0) ){ goto $label$37 }
	CALL $89(*(($27 + [368])))
	
.LABEL $label$37
	if ( ((*($27 + [80]) & [1]) == 0) ){ goto $label$38 }
	CALL $89(*($27 + [88]))
	
.LABEL $label$38
	if ( ((*($27 + [536]) & [1]) == 0) ){ goto $label$39 }
	CALL $89(*($27 + [544]))
	
.LABEL $label$39
	if ( ((*($27 + [376]) & [1]) == 0) ){ goto $label$40 }
	CALL $89(*(($27 + [384])))
	
.LABEL $label$40
	if ( ((*($27 + [408]) & [1]) == 0) ){ goto $label$41 }
	CALL $89(*($27 + [416]))
	
.LABEL $label$41
	if ( ((*($27 + [392]) & [1]) == 0) ){ goto $label$42 }
	CALL $89(*($27 + [400]))
	
.LABEL $label$42
	$23 = (CASTING uint_64)(uint_32 $15)
	*(($27 + [328])) = (int_64)0
	*(($27 + [320])) = (int_64)0
	*($27 + [304]) = (int_64)0
	*($27 + [312]) = (int_64)0
	$22 = *($27 + [424])
	$21 = ($22 & [1])
	CALL sha256(( *($27 + [432]) ? (($27 + [424]) | [1]) : $21 ), ( *($27 + [428]) ? uint_32($22 >> [1]) : $21 ), ($27 + [304]))
	CALL assert_recover_key(($27 + [304]), $2, [66], ($27 + [454]), [34])
	$22 = [0]
	*($27 + [416]) = [0]
	*($27 + [408]) = (int_64)0
	
.LOOP $label$43:
	$21 = *(($3 + $22))
	CALL $96(($27 + [408]), *((uint_32($21 >> [4]) + [1504])))
	CALL $96(($27 + [408]), *((($21 & [15]) + [1504])))
	$22 = ($22 + [1])
	if ( ((int_32)$22 != (int_32)[32]) ){ goto $label$43 }
	CALL $111(($27 + [136]), ($27 + [408]), [0], [5], ($27 + [408]))
	$22 = CALL $98(($27 + [136]), [0], [1536])
	$21 = *($22)
	*($22) = [0]
	$3 = *($22 + [4])
	*($22 + [4]) = [0]
	$13 = *($22 + [8])
	*($22 + [8]) = [0]
	if ( (*($27 + [408]) & [1]) ){ goto $label$45 }
	*($27 + [408]) = [0]
	goto $label$44 
	
.LABEL $label$45
	*(*(($27 + [416]))) = [0]
	*($27 + [412]) = [0]
	
.LABEL $label$44
	$22 = [0]
	CALL $93(($27 + [408]), [0])
	*((($27 + [408]) + [8])) = $13
	*($27 + [408]) = $21
	*($27 + [412]) = $3
	if ( ((*($27 + [136]) & [1]) == 0) ){ goto $label$46 }
	CALL $89(*($27 + [144]))
	
.LABEL $label$46
	CALL $46(($27 + [392]), ($27 + [408]), [1552])
	CALL $46(($27 + [376]), ($27 + [408]), [1568])
	CALL $46(($27 + [360]), ($27 + [408]), [1584])
	$19 = CALL _ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(($27 + [392]), [0], [16])
	$24 = CALL _ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(($27 + [376]), [0], [16])
	$25 = CALL _ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(($27 + [360]), [0], [16])
	$7 = *(($4 + [8]))
	*($27 + [352]) = [0]
	*($27 + [344]) = (int_64)0
	$24 = ((uint_64)$24 % (uint_64)(CASTING int_64)(int_32 ($15 + [-1])))
	$25 = ((uint_64)$25 % (uint_64)(CASTING int_64)(int_32 ($15 + [-2])))
	$19 = ((uint_64)$19 % (uint_64)$23)
	$21 = (*(($5 + [40])) - *($5 + [36]))
	$13 = ((int_32)$21 / (int_32)[40])
	$3 = [0]
	if ( ($21 == 0) ){ goto $label$47 }
	if ( ((uint_32)$13 >= (uint_32)[107374183]) ){ goto $label$18 }
	$22 = CALL $88($21)
	*(($27 + [352])) = ($22 + ((int_32)$13 * (int_32)[40]))
	*($27 + [344]) = $22
	*($27 + [348]) = $22
	$3 = *(($5 + [36]))
	$21 = (*(($5 + [40])) - $3)
	if ( ((int_32)$21 < (int_32)[1]) ){ goto $label$48 }
	CALL memcpy($22, $3, $21)
	$22 = (*($27 + [348]) + ((int_32)((uint_32)$21 / (uint_32)[40]) * (int_32)[40]))
	*($27 + [348]) = $22
	$3 = *($27 + [344])
	goto $label$47 
	
.LABEL $label$48
	$3 = $22
	
.LABEL $label$47
	CALL __multi3(($27 + [48]), $20, (int_64)$20 >> (int_64)63), $23, (int_64)0)
	$20 = (int_64)$12 >> (int_64)63
	$12 = *($27 + [48])
	CALL __multi3(($27 + [32]), $12, $20), (int_64)50, (int_64)0)
	*($27 + [136]) = [1]
	CALL $47($3, $22, ($27 + [136]))
	$13 = ((int_32)(CASTING uint_32)(uint_64 $19) * (int_32)[40])
	$22 = (*($27 + [344]) + $13)
	$15 = *($22 + [16])
	$26 = *($22 + [8])
	$11 = *($22)
	$23 = *((($27 + [48]) + [8]))
	$21 = ( (uint_64)($12 <= (int_64)4611686018427387904) ? ((int_64)$23 < (int_64)0) : (int_64)($23 == 0) )
	CALL eosio_assert($21, [640])
	$3 = ( ((uint_64)$12 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$23 > (int_64)-1) : ((int_64)$23 == (int_64)-1) )
	CALL eosio_assert($3, [672])
	$23 = *((($27 + [32]) + [8]))
	$19 = *($27 + [32])
	CALL eosio_assert(( (uint_64)($19 <= (int_64)4611686018427387904) ? ((int_64)$23 < (int_64)0) : (int_64)($23 == 0) ), [640])
	CALL eosio_assert(( ((uint_64)$19 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$23 > (int_64)-1) : ((int_64)$23 == (int_64)-1) ), [672])
	CALL eosio_assert([1], [704])
	CALL eosio_assert([1], [720])
	$8 = ((int_64)$19 / (int_64)100)
	$22 = *($27 + [344])
	$13 = ($22 + $13)
	$17 = ($13 + [40])
	$10 = (*($27 + [348]) - $17)
	$2 = ((int_32)$10 / (int_32)[40])
	if ( ($10 == 0) ){ goto $label$49 }
	CALL memmove($13, $17, $10)
	$22 = *($27 + [344])
	
.LABEL $label$49
	CALL __multi3(($27 + [16]), $12, $20, (int_64)30, (int_64)0)
	*($27 + [348]) = ($13 + ((int_32)$2 * (int_32)[40]))
	$13 = ((int_32)(CASTING uint_32)(uint_64 $24) * (int_32)[40])
	$22 = ($22 + $13)
	$17 = *($22 + [16])
	$24 = *($22 + [8])
	$16 = *($22)
	CALL eosio_assert($21, [640])
	CALL eosio_assert($3, [672])
	$23 = *((($27 + [16]) + [8]))
	$19 = *($27 + [16])
	CALL eosio_assert(( (uint_64)($19 <= (int_64)4611686018427387904) ? ((int_64)$23 < (int_64)0) : (int_64)($23 == 0) ), [640])
	CALL eosio_assert(( ((uint_64)$19 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$23 > (int_64)-1) : ((int_64)$23 == (int_64)-1) ), [672])
	CALL eosio_assert([1], [704])
	CALL eosio_assert([1], [720])
	$19 = ((int_64)$19 / (int_64)100)
	$22 = *($27 + [344])
	$13 = ($22 + $13)
	$18 = ($13 + [40])
	$10 = (*($27 + [348]) - $18)
	$2 = ((int_32)$10 / (int_32)[40])
	if ( ($10 == 0) ){ goto $label$50 }
	CALL memmove($13, $18, $10)
	$22 = *($27 + [344])
	
.LABEL $label$50
	CALL __multi3($27, $12, $20, (int_64)15, (int_64)0)
	*($27 + [348]) = ($13 + ((int_32)$2 * (int_32)[40]))
	$13 = ((int_32)(CASTING uint_32)(uint_64 $25) * (int_32)[40])
	$22 = ($22 + $13)
	$10 = *($22 + [16])
	$25 = *($22 + [8])
	$18 = *($22)
	CALL eosio_assert($21, [640])
	CALL eosio_assert($3, [672])
	$23 = *(($27 + [8]))
	$20 = *($27)
	CALL eosio_assert(( (uint_64)($20 <= (int_64)4611686018427387904) ? ((int_64)$23 < (int_64)0) : (int_64)($23 == 0) ), [640])
	CALL eosio_assert(( ((uint_64)$20 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$23 > (int_64)-1) : ((int_64)$23 == (int_64)-1) ), [672])
	CALL eosio_assert([1], [704])
	CALL eosio_assert([1], [720])
	$23 = ((int_64)$20 / (int_64)100)
	$22 = (*($27 + [344]) + $13)
	$14 = ($22 + [40])
	$13 = (*($27 + [348]) - $14)
	$2 = ((int_32)$13 / (int_32)[40])
	if ( ($13 == 0) ){ goto $label$51 }
	CALL memmove($22, $14, $13)
	
.LABEL $label$51
	*($27 + [348]) = ($22 + ((int_32)$2 * (int_32)[40]))
	*($27 + [136]) = $11
	*($27 + [143]) = *((($27 + [297]) + [6]))
	*($27 + [141 align=1]) = *((($27 + [297]) + [4]))
	*($27 + [137 align=1]) = *($27 + [297 align=1])
	*($27 + [144]) = $26
	*($27 + [152]) = $15
	*($27 + [156]) = [1]
	*(($27 + [159])) = *((($27 + [294]) + [2]))
	*($27 + [157 align=1]) = *($27 + [294 align=1])
	*($27 + [160]) = $8
	*(($2 = (($27 + [136]) + [32]))) = $7
	*($27 + [176]) = $16
	*(($27 + [183])) = *((($27 + [287]) + [6]))
	*(($27 + [181])) = *((($27 + [287]) + [4]))
	*($27 + [177 align=1]) = *($27 + [287 align=1])
	*(($27 + [184])) = $24
	*(($27 + [192])) = $17
	*(($27 + [196])) = [2]
	*(($27 + [199])) = *((($27 + [284]) + [2]))
	*($27 + [197 align=1]) = *($27 + [284 align=1])
	*(($27 + [200])) = $19
	*(($27 + [208])) = $7
	*($27 + [216]) = $18
	*(($27 + [223])) = *((($27 + [277]) + [6]))
	*(($27 + [221])) = *((($27 + [277]) + [4]))
	*($27 + [217 align=1]) = *($27 + [277 align=1])
	*(($27 + [224])) = $25
	*(($27 + [232])) = $10
	*(($27 + [236])) = [3]
	*(($27 + [239])) = *((($27 + [274]) + [2]))
	*($27 + [237 align=1]) = *($27 + [274 align=1])
	*(($27 + [240])) = $23
	*(($27 + [248])) = $7
	$22 = CALL $88([120])
	*($27 + [256]) = $22
	$13 = ($22 + [120])
	*($27 + [264]) = $13
	$14 = (($27 + [136]) + [40])
	$10 = CALL memcpy($22, ($27 + [136]), [40])
	CALL memcpy(($10 + [40]), $14, [40])
	CALL memcpy(($10 + [80]), (($27 + [136]) + [80]), [40])
	*($27 + [260]) = $13
	CALL eosio_assert($21, [640])
	CALL eosio_assert($3, [672])
	$10 = (($27 + [136]) + [16])
	$9 = (($27 + [64]) | [1])
	$17 = ($27 + [124])
	$18 = ($27 + [116])
	$11 = [0]
	
.LOOP $label$56:
	$15 = ($22 + ((int_32)$11 * (int_32)[40]))
	CALL eosio_assert(((int_64)*(($15 + [32])) == (int_64)$7), [1600])
	$12 = (int_64)
	CALL eosio_assert(((int_64)$12($12 - *($15 + [24]))) > (int_64)-4611686018427387904), [1648])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [1680])
	$25 = *($0)
	$19 = (int_64)59
	$22 = [576]
	$23 = (int_64)0
	$24 = (int_64)0
	
.LOOP $label$57:
	if ( ((uint_64)$23 > (uint_64)(int_64)5) ){ goto $label$62 }
	$21 = *($22)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$61 }
	$21 = ($21 + [165])
	goto $label$60 
	
.LABEL $label$62
	$20 = (int_64)0
	if ( ((uint_64)$23 <= (uint_64)(int_64)11) ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$61
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$60
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $21) << (int_64)56) >> (int_64)56)
	
.LABEL $label$59
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$58
	$22 = ($22 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$24 = ((int_64)$20 | (int_64)$24)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$57 }
	*((($27 + [80]) + [8])) = $24
	*($27 + [80]) = $25
	$22 = ( [592] ? [1760] : ((int_64)*(($4 + [8])) == (int_64)1397703940) )
	$21 = [-1]
	
.LOOP $label$63:
	$3 = ($22 + $21)
	$13 = ($21 + [1])
	$21 = $13
	if ( *(($3 + [1])) ){ goto $label$63 }
	$25 = (CASTING uint_64)(uint_32 $13)
	$23 = (int_64)0
	$20 = (int_64)59
	$24 = (int_64)0
	
.LOOP $label$64:
	$19 = (int_64)0
	if ( ((uint_64)$23 >= (uint_64)$25) ){ goto $label$65 }
	$21 = *($22)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$67 }
	$21 = ($21 + [165])
	goto $label$66 
	
.LABEL $label$67
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$66
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $21) << (int_64)56) >> (int_64)56)
	
.LABEL $label$65
	if ( ((uint_64)$23 > (uint_64)(int_64)11) ){ goto $label$69 }
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$20 & (int_64)4294967295))
	goto $label$68 
	
.LABEL $label$69
	$19 = ((int_64)$19 & (int_64)15)
	
.LABEL $label$68
	$22 = ($22 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$24 = ((int_64)$19 | (int_64)$24)
	$20 = ((int_64)$20 + (int_64)-5)
	if ( ((int_64)$20 != (int_64)-6) ){ goto $label$64 }
	$23 = (int_64)0
	$19 = (int_64)59
	$22 = [608]
	$25 = (int_64)0
	
.LOOP $label$70:
	if ( ((uint_64)$23 > (uint_64)(int_64)7) ){ goto $label$75 }
	$21 = *($22)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$74 }
	$21 = ($21 + [165])
	goto $label$73 
	
.LABEL $label$75
	$20 = (int_64)0
	if ( ((uint_64)$23 <= (uint_64)(int_64)11) ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$74
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$73
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $21) << (int_64)56) >> (int_64)56)
	
.LABEL $label$72
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$71
	$22 = ($22 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$25 = ((int_64)$20 | (int_64)$25)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$70 }
	*(($3 = (($27 + [64]) + [8]))) = [0]
	*($27 + [64]) = (int_64)0
	$22 = CALL strlen([1712])
	if ( ((uint_32)$22 >= (uint_32)[-16]) ){ goto $label$55 }
	$21 = ($15 + [24])
	$15 = ($15 + [8])
	if ( ((uint_32)$22 >= (uint_32)[11]) ){ goto $label$78 }
	*($27 + [64]) = ($22 << [1])
	$13 = $9
	if ( $22 ){ goto $label$77 }
	goto $label$76 
	
.LABEL $label$78
	$16 = (($22 + [16]) & [-16])
	$13 = CALL $88($16)
	*($3) = $13
	*($27 + [64]) = ($16 | [1])
	*($27 + [68]) = $22
	
.LABEL $label$77
	CALL memcpy($13, [1712], $22)
	
.LABEL $label$76
	*(($13 + $22)) = [0]
	*((($27 + [136]) + [8])) = *($15)
	*(($10 + [8])) = *(($21 + [8]))
	*(($10 + [4])) = *(($21 + [4]))
	*($10) = *($21)
	*(($10 + [12])) = *(($21 + [12]))
	*($27 + [136]) = *($0)
	*(($2 + [4])) = *($27 + [68 align=4])
	*($2) = *($27 + [64])
	*($27 + [64]) = [0]
	*($27 + [68]) = [0]
	*($3) = [0]
	CALL $18(($27 + [536]), CALL $17(($27 + [96]), ($27 + [80]), $24, $25, ($27 + [136])))
	$22 = *($27 + [536])
	CALL send_inline($22, (*($27 + [540]) - $22))
	$22 = *($27 + [536])
	if ( ($22 == 0) ){ goto $label$79 }
	*($27 + [540]) = $22
	CALL $89($22)
	
.LABEL $label$79
	$22 = *($17)
	if ( ($22 == 0) ){ goto $label$80 }
	*((($27 + [96]) + [32])) = $22
	CALL $89($22)
	
.LABEL $label$80
	$22 = *((($27 + [96]) + [16]))
	if ( ($22 == 0) ){ goto $label$81 }
	*($18) = $22
	CALL $89($22)
	
.LABEL $label$81
	if ( ((*($2) & [1]) == 0) ){ goto $label$82 }
	CALL $89(*($14))
	
.LABEL $label$82
	if ( ((*($27 + [64]) & [1]) == 0) ){ goto $label$83 }
	CALL $89(*($3))
	
.LABEL $label$83
	$11 = ($11 + [1])
	if ( ((int_32)$11 > (int_32)[2]) ){ goto $label$84 }
	$22 = *($27 + [256])
	goto $label$56 
	
.LABEL $label$84
	if ( ((int_64)*(($4 + [8])) != (int_64)*($0 + [160])) ){ goto $label$85 }
	$25 = *($0)
	$23 = (int_64)0
	$19 = (int_64)59
	$22 = [576]
	$24 = (int_64)0
	
.LOOP $label$86:
	if ( ((uint_64)$23 > (uint_64)(int_64)5) ){ goto $label$91 }
	$21 = *($22)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$90 }
	$21 = ($21 + [165])
	goto $label$89 
	
.LABEL $label$91
	$20 = (int_64)0
	if ( ((uint_64)$23 <= (uint_64)(int_64)11) ){ goto $label$88 }
	goto $label$87 
	
.LABEL $label$90
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$89
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $21) << (int_64)56) >> (int_64)56)
	
.LABEL $label$88
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$87
	$22 = ($22 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$24 = ((int_64)$20 | (int_64)$24)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$86 }
	*($27 + [88]) = $24
	*($27 + [80]) = $25
	$23 = (int_64)0
	$20 = (int_64)59
	$22 = [1760]
	$24 = (int_64)0
	
.LOOP $label$92:
	$19 = (int_64)0
	if ( ((uint_64)$23 > (uint_64)(int_64)11) ){ goto $label$93 }
	$21 = *($22)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$95 }
	$21 = ($21 + [165])
	goto $label$94 
	
.LABEL $label$95
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$94
	$19 = ((int_64)(CASTING uint_64)(uint_32 ($21 & [31])) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$93
	$22 = ($22 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$24 = ((int_64)$19 | (int_64)$24)
	$20 = ((int_64)$20 + (int_64)-5)
	if ( ((int_64)$20 != (int_64)-6) ){ goto $label$92 }
	$23 = (int_64)0
	$19 = (int_64)59
	$22 = [608]
	$25 = (int_64)0
	
.LOOP $label$96:
	if ( ((uint_64)$23 > (uint_64)(int_64)7) ){ goto $label$101 }
	$21 = *($22)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$100 }
	$21 = ($21 + [165])
	goto $label$99 
	
.LABEL $label$101
	$20 = (int_64)0
	if ( ((uint_64)$23 <= (uint_64)(int_64)11) ){ goto $label$98 }
	goto $label$97 
	
.LABEL $label$100
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$99
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $21) << (int_64)56) >> (int_64)56)
	
.LABEL $label$98
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$97
	$22 = ($22 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$25 = ((int_64)$20 | (int_64)$25)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$96 }
	$23 = (int_64)0
	$20 = (int_64)59
	$22 = [1776]
	$26 = (int_64)0
	
.LOOP $label$102:
	$19 = (int_64)0
	if ( ((uint_64)$23 > (uint_64)(int_64)11) ){ goto $label$103 }
	$21 = *($22)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$105 }
	$21 = ($21 + [165])
	goto $label$104 
	
.LABEL $label$105
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$104
	$19 = ((int_64)(CASTING uint_64)(uint_32 ($21 & [31])) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$103
	$22 = ($22 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$26 = ((int_64)$19 | (int_64)$26)
	$20 = ((int_64)$20 + (int_64)-5)
	if ( ((int_64)$20 != (int_64)-6) ){ goto $label$102 }
	*(($27 + [72])) = [0]
	*($27 + [64]) = (int_64)0
	$22 = CALL strlen([32])
	if ( ((uint_32)$22 >= (uint_32)[-16]) ){ goto $label$52 }
	if ( ((uint_32)$22 >= (uint_32)[11]) ){ goto $label$108 }
	*($27 + [64]) = ($22 << [1])
	$21 = (($27 + [64]) | [1])
	if ( $22 ){ goto $label$107 }
	goto $label$106 
	
.LABEL $label$108
	$3 = (($22 + [16]) & [-16])
	$21 = CALL $88($3)
	*($27 + [64]) = ($3 | [1])
	*($27 + [72]) = $21
	*($27 + [68]) = $22
	
.LABEL $label$107
	CALL memcpy($21, [32], $22)
	
.LABEL $label$106
	*(($21 + $22)) = [0]
	*(($27 + [160])) = $7
	*(($27 + [172])) = *($27 + [68])
	*($27 + [144]) = $26
	$22 = ($27 + [72])
	*(($27 + [176])) = *($22)
	*($27 + [136]) = *($0)
	*($27 + [152]) = $12
	*($27 + [168]) = *($27 + [64])
	*($27 + [64]) = [0]
	*($27 + [68]) = [0]
	*($22) = [0]
	$22 = CALL $17(($27 + [96]), ($27 + [80]), $24, $25, ($27 + [136]))
	CALL $18(($27 + [536]), $22)
	$21 = *($27 + [536])
	CALL send_inline($21, (*($27 + [540]) - $21))
	$21 = *($27 + [536])
	if ( ($21 == 0) ){ goto $label$109 }
	*($27 + [540]) = $21
	CALL $89($21)
	
.LABEL $label$109
	$21 = *($22 + [28])
	if ( ($21 == 0) ){ goto $label$110 }
	*(($22 + [32])) = $21
	CALL $89($21)
	
.LABEL $label$110
	$21 = *($22 + [16])
	if ( ($21 == 0) ){ goto $label$111 }
	*(($22 + [20])) = $21
	CALL $89($21)
	
.LABEL $label$111
	if ( ((*(($27 + [168])) & [1]) == 0) ){ goto $label$112 }
	CALL $89(*(($27 + [176])))
	
.LABEL $label$112
	if ( ((*($27 + [64]) & [1]) == 0) ){ goto $label$113 }
	CALL $89(*(($27 + [72])))
	
.LABEL $label$113
	CALL _ZN7eosgame8luckynum8addTotalEy($0, $12)
	CALL _ZN7eosgame8luckynum8addToDayEy($0, $12)
	
.LABEL $label$85
	$23 = (int_64)0
	*($27 + [536]) = (int_64)0
	*($27 + [544]) = [0]
	$22 = (*(($5 + [40])) - *(($5 + [36])))
	$21 = ((int_32)$22 / (int_32)[40])
	if ( ($22 == 0) ){ goto $label$114 }
	if ( ((uint_32)$21 >= (uint_32)[107374183]) ){ goto $label$54 }
	$22 = CALL $88($22)
	*(($27 + [544])) = ($22 + ((int_32)$21 * (int_32)[40]))
	*($27 + [536]) = $22
	*($27 + [540]) = $22
	$3 = *(($5 + [36]))
	$21 = (*(($5 + [40])) - $3)
	if ( ((int_32)$21 <= (int_32)[0]) ){ goto $label$114 }
	CALL memcpy($22, $3, $21)
	$21 = (*($27 + [540]) + ((int_32)((uint_32)$21 / (uint_32)[40]) * (int_32)[40]))
	*($27 + [540]) = $21
	$22 = *($27 + [536])
	if ( ((int_32)$21 == (int_32)$22) ){ goto $label$114 }
	$13 = *($27 + [256])
	$15 = ($13 + [104])
	$11 = ($13 + [64])
	$2 = ($13 + [24])
	$17 = ((int_32)($21 - $22) / (int_32)[40])
	$10 = [0]
	$18 = ($13 + [60])
	$16 = ($13 + [80])
	$14 = ($13 + [100])
	
.LOOP $label$115:
	$21 = ($22 + [24])
	$3 = *($22)
	if ( ((int_32)*($13) != (int_32)$3) ){ goto $label$116 }
	*(($22 + [20])) = *(($13 + [20]))
	*(($21 + [8])) = *(($2 + [8]))
	*($21) = *($2)
	
.LABEL $label$116
	if ( ((int_32)*(($13 + [40])) != (int_32)$3) ){ goto $label$117 }
	*(($22 + [20])) = *($18)
	*(($21 + [8])) = *(($11 + [8]))
	*($21) = *($11)
	
.LABEL $label$117
	if ( ((int_32)*($16) != (int_32)$3) ){ goto $label$118 }
	*(($22 + [20])) = *($14)
	*(($21 + [8])) = *(($15 + [8]))
	*($21) = *($15)
	
.LABEL $label$118
	$22 = ($22 + [40])
	$10 = ($10 + [1])
	if ( ($10 <= $17) ){ goto $label$115 }
	
.LABEL $label$114
	$20 = *($0)
	*($27 + [136]) = ($27 + [536])
	CALL eosio_assert($6, [336])
	CALL $50(($27 + [496]), $5, $20, ($27 + [136]))
	$12 = *($0)
	$19 = (int_64)59
	$22 = [576]
	$24 = (int_64)0
	
.LOOP $label$119:
	if ( ((uint_64)$23 > (uint_64)(int_64)5) ){ goto $label$124 }
	$21 = *($22)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$123 }
	$21 = ($21 + [165])
	goto $label$122 
	
.LABEL $label$124
	$20 = (int_64)0
	if ( ((uint_64)$23 <= (uint_64)(int_64)11) ){ goto $label$121 }
	goto $label$120 
	
.LABEL $label$123
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$122
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $21) << (int_64)56) >> (int_64)56)
	
.LABEL $label$121
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$120
	$22 = ($22 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$24 = ((int_64)$20 | (int_64)$24)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$119 }
	$23 = (int_64)0
	$19 = (int_64)59
	$22 = [1792]
	$25 = (int_64)0
	
.LOOP $label$125:
	if ( ((uint_64)$23 > (uint_64)(int_64)8) ){ goto $label$130 }
	$21 = *($22)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$129 }
	$21 = ($21 + [165])
	goto $label$128 
	
.LABEL $label$130
	$20 = (int_64)0
	if ( ((uint_64)$23 <= (uint_64)(int_64)11) ){ goto $label$127 }
	goto $label$126 
	
.LABEL $label$129
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$128
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $21) << (int_64)56) >> (int_64)56)
	
.LABEL $label$127
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$126
	$22 = ($22 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$25 = ((int_64)$20 | (int_64)$25)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$125 }
	*((($27 + [136]) + [20])) = *(($4 + [12]))
	*((($27 + [136]) + [16])) = *(($4 + [8]))
	*((($27 + [136]) + [12])) = *(($4 + [4]))
	*($27 + [144]) = *($4)
	*($27 + [136]) = $1
	*($27 + [160]) = *(($5 + [24]))
	*($27 + [168]) = *(($5 + [32]))
	*($27 + [172]) = [0]
	*(($10 = (($27 + [136]) + [40]))) = [0]
	*(($27 + [180])) = [0]
	$21 = *($27 + [256])
	$22 = (*($27 + [260]) - $21)
	$13 = ((int_32)$22 / (int_32)[40])
	if ( ($22 == 0) ){ goto $label$131 }
	if ( ((uint_32)$13 >= (uint_32)[107374183]) ){ goto $label$53 }
	$3 = CALL $88($22)
	*(($27 + [172])) = $3
	*(($15 = (($27 + [136]) + [40]))) = $3
	*(($27 + [180])) = ($3 + ((int_32)$13 * (int_32)[40]))
	if ( ((int_32)$22 < (int_32)[1]) ){ goto $label$131 }
	CALL memcpy($3, $21, $22)
	*($15) = (*($15) + ((int_32)((uint_32)$22 / (uint_32)[40]) * (int_32)[40]))
	
.LABEL $label$131
	*(($3 = (($27 + [96]) + [24]))) = [0]
	*($27 + [104]) = $25
	*($27 + [96]) = $12
	*($27 + [112]) = (int_64)0
	*(($22 = CALL $88([16]))) = $12
	*($22 + [8]) = $24
	*((($27 + [96]) + [32])) = [0]
	$13 = ($22 + [16])
	*($3) = $13
	*((($27 + [96]) + [20])) = $13
	*($27 + [112]) = $22
	*($27 + [124]) = [0]
	*((($27 + [96]) + [36])) = [0]
	$13 = *($27 + [172])
	$3 = *($10)
	$15 = ($3 - $13)
	$23 = (CASTING uint_64)(uint_32 ((int_32)$15 / (int_32)[40]))
	$10 = ($27 + [124])
	$22 = [66]
	
.LOOP $label$132:
	$22 = ($22 + [1])
	$23 = (uint_64)$23 >> (uint_64)(int_64)7
	if ( ((int_64)$23) != (int_64)0) ){ goto $label$132 }
	if ( ((int_32)$13 == (int_32)$3) ){ goto $label$135 }
	$22 = (((int_32)((uint_32)($15 + [-40]) / (uint_32)[40]) * (int_32)[30]) + $22)
	if ( $22 ){ goto $label$134 }
	$3 = [0]
	$22 = [0]
	goto $label$133 
	
.LABEL $label$135
	$22 = ($22 + [-30])
	
.LABEL $label$134
	CALL $19($10, $22)
	$3 = *(($27 + [128]))
	$22 = *(($27 + [124]))
	
.LABEL $label$133
	*($27 + [84]) = $22
	*($27 + [80]) = $22
	*($27 + [88]) = $3
	*($27 + [552]) = ($27 + [80])
	*($27 + [64]) = ($27 + [136])
	CALL $51(($27 + [64]), ($27 + [552]))
	CALL $18(($27 + [80]), ($27 + [96]))
	$22 = *($27 + [80])
	CALL send_inline($22, (*($27 + [84]) - $22))
	$22 = *($27 + [80])
	if ( ($22 == 0) ){ goto $label$136 }
	*($27 + [84]) = $22
	CALL $89($22)
	
.LABEL $label$136
	$22 = *($27 + [124])
	if ( ($22 == 0) ){ goto $label$137 }
	*(($27 + [128])) = $22
	CALL $89($22)
	
.LABEL $label$137
	$22 = *($27 + [112])
	if ( ($22 == 0) ){ goto $label$138 }
	*(($27 + [116])) = $22
	CALL $89($22)
	
.LABEL $label$138
	$22 = *($27 + [172])
	if ( ($22 == 0) ){ goto $label$139 }
	*(($27 + [176])) = $22
	CALL $89($22)
	
.LABEL $label$139
	$22 = *($27 + [536])
	if ( ($22 == 0) ){ goto $label$140 }
	*($27 + [540]) = $22
	CALL $89($22)
	
.LABEL $label$140
	if ( ($21 == 0) ){ goto $label$141 }
	*($27 + [260]) = $21
	CALL $89($21)
	
.LABEL $label$141
	$22 = *($27 + [344])
	if ( ($22 == 0) ){ goto $label$142 }
	*($27 + [348]) = $22
	CALL $89($22)
	
.LABEL $label$142
	if ( ((*($27 + [360]) & [1]) == 0) ){ goto $label$143 }
	CALL $89(*($27 + [368]))
	
.LABEL $label$143
	if ( ((*($27 + [376]) & [1]) == 0) ){ goto $label$144 }
	CALL $89(*($27 + [384]))
	
.LABEL $label$144
	if ( ((*($27 + [392]) & [1]) == 0) ){ goto $label$145 }
	CALL $89(*($27 + [400]))
	
.LABEL $label$145
	if ( ((*($27 + [408]) & [1]) == 0) ){ goto $label$146 }
	CALL $89(*(($27 + [416])))
	
.LABEL $label$146
	if ( ((*($27 + [424]) & [1]) == 0) ){ goto $label$147 }
	CALL $89(*(($27 + [432])))
	
.LABEL $label$147
	if ( ((*($27 + [440]) & [1]) == 0) ){ goto $label$148 }
	CALL $89(*(($27 + [448])))
	
.LABEL $label$148
	$13 = *($27 + [520])
	if ( ($13 == 0) ){ goto $label$149 }
	$10 = ($27 + [524])
	$22 = *($10)
	if ( ((int_32)$22 == (int_32)$13) ){ goto $label$151 }
	
.LOOP $label$152:
	$22 = ($22 + [-24])
	$21 = *($22)
	*($22) = [0]
	if ( ($21 == 0) ){ goto $label$153 }
	$3 = *($21 + [36])
	if ( ($3 == 0) ){ goto $label$154 }
	*(($21 + [40])) = $3
	CALL $89($3)
	
.LABEL $label$154
	CALL $89($21)
	
.LABEL $label$153
	if ( ((int_32)$13 != (int_32)$22) ){ goto $label$152 }
	$22 = *(($27 + [520]))
	goto $label$150 
	
.LABEL $label$151
	$22 = $13
	
.LABEL $label$150
	*($10) = $13
	CALL $89($22)
	
.LABEL $label$149
	*([0] + [4]) = ($27 + [560])
	return (unreachable)
	
.LABEL $label$55
	CALL $90(($27 + [64]))
	
.LABEL $label$54
	CALL $110(($27 + [536]))
	
.LABEL $label$53
	CALL $110((($27 + [136]) + [36]))
	
.LABEL $label$52
	CALL $90(($27 + [64]))
	
.LABEL $label$20
	CALL $90(($27 + [136]))
	
.LABEL $label$19
	CALL $90(($27 + [136]))
	
.LABEL $label$18
	CALL $110(($27 + [344]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC wctomb (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL wcrtomb($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC wcrtomb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL __errno_location()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL __errno_location()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

void .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $40($0, $2, $1)
	if ( ($1 <= [513]) ){ goto $label$3 }
	CALL free($2)
	
.LABEL $label$3
	*([0] + [4]) = $3
}

int_64 .FUNC _ZN7eosgame8luckynum13getGameStatusEv (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$1 = *(($0 + [128]))
	$2 = *(($0 + [72]))
	$7 = *(($0 + [76]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [48])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$4), [208])
	if ( $6 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7235159537265672192, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $38($4, $6)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$4), [208])
	
.LABEL $label$5
	$1 = *($6 + [8])
	goto $label$3 
	
.LABEL $label$4
	$5 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$15()), [896])
	*(($6 = CALL $88([32])) + [16]) = $4
	*($6 + [8]) = (int_64)0
	*($6) = *(($0 + [128]))
	CALL eosio_assert([1], [832])
	CALL memcpy(($8 + [16]), $6, [8])
	CALL eosio_assert([1], [832])
	CALL memcpy((($8 + [16]) | [8]), ($6 + [8]), [8])
	$1 = *($6)
	$7 = CALL db_store_i64(*(($0 + [56])), (int_64)7235159537265672192, $5, $1, ($8 + [16]), [16])
	*($6 + [20]) = $7
	$4 = ($0 + [64])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$7 }
	*($4) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($8 + [8]) = $6
	$1 = *($6)
	*($8 + [16]) = $1
	*($8 + [4]) = $7
	$3 = ($0 + [76])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [80]))) ){ goto $label$9 }
	*($4 + [8]) = $1
	*($4 + [16]) = $7
	*($8 + [8]) = [0]
	*($4) = $6
	*($3) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $39(($0 + [72]), ($8 + [8]), ($8 + [16]), ($8 + [4]))
	
.LABEL $label$8
	$6 = *($8 + [8])
	*($8 + [8]) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $89($6)
	
.LABEL $label$10
	$1 = (int_64)0
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $1
}

int_32 .FUNC _ZN7eosgame8luckynumC2Ey (int_32 $0, int_64 $1)
{
	*($0 + [8]) = $1
	*($0) = $1
	*(($0 + [16])) = $1
	*(($0 + [24])) = (int_64)-1
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = [0]
	*($0 + [48]) = $1
	*(($0 + [56])) = $1
	*(($0 + [64])) = (int_64)-1
	*(($0 + [72])) = [0]
	*(($0 + [76])) = [0]
	*(($0 + [80])) = [0]
	*($0 + [88]) = $1
	*(($0 + [96])) = $1
	*(($0 + [104])) = (int_64)-1
	*(($0 + [112])) = [0]
	*(($0 + [116])) = [0]
	*(($0 + [120])) = [0]
	*(($0 + [124])) = [0]
	*($0 + [128]) = (int_64)1
	*($0 + [136]) = (int_64)2
	*($0 + [144]) = (int_64)3
	*($0 + [152]) = (int_64)4
	*($0 + [160]) = (int_64)362174300676
	*($0 + [168]) = (int_64)1397703940
	return $0
}

void .FUNC _ZN7eosgame8luckynum8transferEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_32 $23
	int_64 $24
	int_32 $25
	int_32 $26
	int_32 $27
	$27 = (*([0] + [4]) - [512])
	*([0] + [4]) = $27
	CALL $8(($27 + [448]))
	$24 = *($0)
	$10 = *($27 + [448])
	if ( ((int_64)$10 == (int_64)$24) ){ goto $label$9 }
	if ( ((int_64)*($27 + [456]) != (int_64)$24) ){ goto $label$9 }
	$24 = (int_64)0
	$20 = (int_64)59
	$13 = [16]
	$21 = (int_64)0
	
.LOOP $label$10:
	$22 = (int_64)0
	if ( ((uint_64)$24 > (uint_64)(int_64)11) ){ goto $label$11 }
	$25 = *($13)
	if ( ((uint_32)(($25 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$25 = ($25 + [165])
	goto $label$12 
	
.LABEL $label$13
	$25 = ( ($25 + [208]) ? [0] : ((($25 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$22 = ((int_64)(CASTING uint_64)(uint_32 ($25 & [31])) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$11
	$13 = ($13 + [1])
	$24 = ((int_64)$24 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$20 = ((int_64)$20 + (int_64)-5)
	if ( ((int_64)$20 != (int_64)-6) ){ goto $label$10 }
	if ( ((int_64)$10 == (int_64)$21) ){ goto $label$9 }
	$26 = ($27 + [480])
	$13 = *($27 + [480])
	$25 = CALL strlen([32])
	if ( ((int_32)$25 != (int_32)( *(($27 + [484])) ? uint_32($13 >> [1]) : ($13 & [1]) )) ){ goto $label$14 }
	if ( (CALL $100($26, [0], [-1], [32], $25) == 0) ){ goto $label$9 }
	
.LABEL $label$14
	CALL eosio_assert((int_64)(CALL $9($0) == 0), [48])
	$4 = *((($27 + [448]) + [24]))
	$25 = [0]
	$3 = *($27 + [464])
	if ( ((uint_64)((int_64)$3 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$15 }
	$24 = (uint_64)$4 >> (uint_64)(int_64)8)
	$13 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $24) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$24 = (uint_64)$24 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$24) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$24 = (uint_64)$24 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$24) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$25 = [1]
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$25 = [0]
	
.LABEL $label$15
	CALL eosio_assert($25, [64])
	*(($27 + [240])) = [0]
	*($27 + [232]) = (int_64)0
	$13 = CALL strlen([80])
	if ( ((uint_32)$13 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$13 >= (uint_32)[11]) ){ goto $label$22 }
	*($27 + [232]) = ($13 << [1])
	$15 = (($27 + [232]) | [1])
	if ( $13 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$25 = (($13 + [16]) & [-16])
	$15 = CALL $88($25)
	*($27 + [232]) = ($25 | [1])
	*($27 + [240]) = $15
	*($27 + [236]) = $13
	
.LABEL $label$21
	CALL memcpy($15, [80], $13)
	
.LABEL $label$20
	$25 = [0]
	*(($15 + $13)) = [0]
	CALL _ZN7eosgame8luckynum5splitERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_(($27 + [432]), $27, $26, ($27 + [232]))
	if ( ((*($27 + [232]) & [1]) == 0) ){ goto $label$23 }
	CALL $89(*($27 + [240]))
	
.LABEL $label$23
	CALL eosio_assert(((int_32)(*($27 + [436]) - *($27 + [432])) == (int_32)[48]), [96])
	$24 = CALL _ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji((*($27 + [432]) + [24]), [0], [10])
	*($27 + [424]) = ($0 + [88])
	$20 = ((int_64)$24 + (int_64)$4)
	*($27 + [368]) = $20
	CALL $11(($27 + [232]), ($27 + [424]), ($27 + [368]))
	$13 = *($27 + [236])
	if ( ($13 == 0) ){ goto $label$24 }
	$25 = ( $13 ? [0] : ((int_64)*($27 + [368]) == (int_64)((int_64)*(($13 + [16])) + (int_64)*($13 + [8]))) )
	
.LABEL $label$24
	CALL eosio_assert(((int_32)$25 != (int_32)[0]), [128])
	$26 = *($27 + [432])
	*(($27 + [240])) = [0]
	*($27 + [232]) = (int_64)0
	$13 = CALL strlen([160])
	if ( ((uint_32)$13 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$13 >= (uint_32)[11]) ){ goto $label$27 }
	*($27 + [232]) = ($13 << [1])
	$15 = (($27 + [232]) | [1])
	if ( $13 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$12 = (($13 + [16]) & [-16])
	$15 = CALL $88($12)
	*($27 + [232]) = ($12 | [1])
	*($27 + [240]) = $15
	*($27 + [236]) = $13
	
.LABEL $label$26
	CALL memcpy($15, [160], $13)
	
.LABEL $label$25
	$6 = [0]
	*(($15 + $13)) = [0]
	CALL _ZN7eosgame8luckynum5splitERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_(($27 + [408]), $27, $26, ($27 + [232]))
	if ( ((*($27 + [232]) & [1]) == 0) ){ goto $label$28 }
	CALL $89(*($27 + [240]))
	
.LABEL $label$28
	CALL eosio_assert(((int_64)((int_64)$3 / (int_64)(CASTING uint_64)(uint_32 ((int_32)(*($27 + [412]) - *($27 + [408])) / (int_32)[12]))) == (int_64)$24), [176])
	$5 = CALL _ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji((*($27 + [432]) + [12]), [0], [10])
	*(($27 + [400])) = [0]
	*($27 + [384]) = (int_64)-1
	*($27 + [392]) = (int_64)0
	$24 = *($0)
	*($27 + [368]) = $24
	*($27 + [376]) = $20
	*($27 + [404]) = [0]
	$13 = CALL db_find_i64($24, $20, (int_64)-8173735053029801984, $5)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$29 }
	$6 = CALL $12(($27 + [368]), $13)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)($27 + [368])), [208])
	
.LABEL $label$29
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [272])
	CALL eosio_assert((*($6 + [8]) == 0), [304])
	*($27 + [360]) = [0]
	*($27 + [352]) = (int_64)0
	$13 = (*(($6 + [40])) - *($6 + [36]))
	$15 = ((int_32)$13 / (int_32)[40])
	if ( ($13 == 0) ){ goto $label$30 }
	if ( ((uint_32)$15 >= (uint_32)[107374183]) ){ goto $label$6 }
	$13 = CALL $88($13)
	*(($27 + [360])) = ($13 + ((int_32)$15 * (int_32)[40]))
	*($27 + [352]) = $13
	*($27 + [356]) = $13
	$26 = *(($6 + [36]))
	$15 = (*(($6 + [40])) - $26)
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$30 }
	CALL memcpy($13, $26, $15)
	*($27 + [356]) = (*($27 + [356]) + ((int_32)((uint_32)$15 / (uint_32)[40]) * (int_32)[40]))
	
.LABEL $label$30
	*($27 + [351]) = *($25 + [24])
	$13 = *($27 + [408])
	if ( ((int_32)*($27 + [412]) == (int_32)$13) ){ goto $label$31 }
	$8 = (($27 + [232]) | [1])
	$15 = (($27 + [232]) + [8])
	$16 = ($27 + [252])
	$17 = (($27 + [232]) + [24])
	$18 = ($27 + [264])
	$19 = ($27 + [248])
	$23 = [0]
	
.LOOP $label$32:
	$9 = CALL _ZNSt3__15stoulERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji(($13 + ((int_32)$23 * (int_32)[12])), [0], [10])
	CALL eosio_assert((((int_32)$9 != (int_32)[0]) & ((uint_32)$9 <= (uint_32)*($27 + [351]))), [384])
	$13 = *($27 + [352])
	if ( ((int_32)*($27 + [356]) == (int_32)$13) ){ goto $label$33 }
	$25 = [0]
	$26 = [0]
	
.LOOP $label$34:
	$13 = ($13 + $25)
	$12 = *($13)
	CALL _ZNSt3__19to_stringEi(($27 + [296]), *($13))
	$13 = CALL $95(($27 + [296]), [512])
	$14 = ($13 + [8])
	*($15) = *($14)
	*($27 + [232]) = *($13)
	*($13) = [0]
	*(($13 + [4])) = [0]
	*($14) = [0]
	CALL eosio_assert(((int_32)$9 != (int_32)$12), ( *($15) ? $8 : (*($27 + [232]) & [1]) ))
	if ( ((*($27 + [232]) & [1]) == 0) ){ goto $label$35 }
	CALL $89(*($15))
	
.LABEL $label$35
	if ( ((*($27 + [296]) & [1]) == 0) ){ goto $label$36 }
	CALL $89(*((($27 + [296]) + [8])))
	
.LABEL $label$36
	$25 = ($25 + [40])
	$13 = *($27 + [352])
	$26 = ($26 + [1])
	if ( ($26 <= ((int_32)(*($27 + [356]) - $13) / (int_32)[40])) ){ goto $label$34 }
	
.LABEL $label$33
	*($27 + [232]) = $9
	*($15) = *($27 + [448])
	$24 = CALL current_time()
	*($16) = [0]
	*($17) = (int_64)0
	*($18) = $4
	*($19) = ((uint_64)$24 / (uint_64)(int_64)1000000)
	CALL eosio_assert([1], [416])
	$24 = (uint_64)*($18) >> (uint_64)(int_64)8)
	$13 = [0]
	
.LOOP $label$39:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $24) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$38 }
	$24 = (uint_64)$24 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$24) & (int_64)255) != (int_64)0) ){ goto $label$40 }
	
.LOOP $label$41:
	$24 = (uint_64)$24 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$24) & (int_64)255) != (int_64)0) ){ goto $label$38 }
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$41 }
	
.LABEL $label$40
	$25 = [1]
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$38
	$25 = [0]
	
.LABEL $label$37
	CALL eosio_assert($25, [480])
	$13 = *($27 + [356])
	if ( ((uint_32)$13 >= (uint_32)*((($27 + [352]) + [8]))) ){ goto $label$43 }
	*($27 + [356]) = (CALL memcpy($13, ($27 + [232]), [40]) + [40])
	goto $label$42 
	
.LABEL $label$43
	CALL $14(($27 + [352]), ($27 + [232]))
	
.LABEL $label$42
	$13 = *($27 + [408])
	$23 = ($23 + [1])
	if ( ($23 <= ((int_32)(*($27 + [412]) - $13) / (int_32)[12])) ){ goto $label$32 }
	
.LABEL $label$31
	$24 = *($0)
	*($27 + [236]) = ($27 + [351])
	*($27 + [232]) = ($27 + [352])
	*($27 + [240]) = ($27 + [448])
	CALL eosio_assert($7, [336])
	CALL $13(($27 + [368]), $6, $24, ($27 + [232]))
	if ( ((int_32)((int_32)(*($27 + [356]) - *($27 + [352])) / (int_32)[40]) != (int_32)*($27 + [351])) ){ goto $label$44 }
	CALL _ZN7eosgame8luckynum10createGameEy($0, $20)
	
.LABEL $label$44
	if ( ((int_64)$4 != (int_64)*($0 + [168])) ){ goto $label$45 }
	*(($27 + [344])) = [0]
	*($27 + [336]) = (int_64)0
	$13 = CALL strlen([544])
	if ( ((uint_32)$13 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$13 >= (uint_32)[11]) ){ goto $label$48 }
	*($27 + [336]) = ($13 << [1])
	$25 = (($27 + [336]) | [1])
	if ( $13 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	$15 = (($13 + [16]) & [-16])
	$25 = CALL $88($15)
	*($27 + [336]) = ($15 | [1])
	*($27 + [344]) = $25
	*($27 + [340]) = $13
	
.LABEL $label$47
	CALL memcpy($25, [544], $13)
	
.LABEL $label$46
	*(($25 + $13)) = [0]
	$24 = (int_64)0
	$22 = (int_64)59
	$13 = [560]
	$21 = (int_64)0
	
.LOOP $label$49:
	if ( ((uint_64)$24 > (uint_64)(int_64)8) ){ goto $label$54 }
	$25 = *($13)
	if ( ((uint_32)(($25 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$53 }
	$25 = ($25 + [165])
	goto $label$52 
	
.LABEL $label$54
	$20 = (int_64)0
	if ( ((uint_64)$24 <= (uint_64)(int_64)11) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$53
	$25 = ( ($25 + [208]) ? [0] : ((($25 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$52
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $25) << (int_64)56) >> (int_64)56)
	
.LABEL $label$51
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$50
	$13 = ($13 + [1])
	$24 = ((int_64)$24 + (int_64)1)
	$21 = ((int_64)$20 | (int_64)$21)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$49 }
	if ( (CALL is_account($21) == 0) ){ goto $label$55 }
	CALL $91(($27 + [336]), (*($27 + [432]) + [36]))
	
.LABEL $label$55
	$10 = *($0)
	$24 = (int_64)0
	$22 = (int_64)59
	$13 = [576]
	$21 = (int_64)0
	
.LOOP $label$56:
	if ( ((uint_64)$24 > (uint_64)(int_64)5) ){ goto $label$61 }
	$25 = *($13)
	if ( ((uint_32)(($25 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$60 }
	$25 = ($25 + [165])
	goto $label$59 
	
.LABEL $label$61
	$20 = (int_64)0
	if ( ((uint_64)$24 <= (uint_64)(int_64)11) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$60
	$25 = ( ($25 + [208]) ? [0] : ((($25 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$59
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $25) << (int_64)56) >> (int_64)56)
	
.LABEL $label$58
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$57
	$13 = ($13 + [1])
	$24 = ((int_64)$24 + (int_64)1)
	$21 = ((int_64)$20 | (int_64)$21)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$56 }
	*($27 + [288]) = $21
	*($27 + [280]) = $10
	$24 = (int_64)0
	$22 = (int_64)59
	$13 = [592]
	$21 = (int_64)0
	
.LOOP $label$62:
	if ( ((uint_64)$24 > (uint_64)(int_64)10) ){ goto $label$67 }
	$25 = *($13)
	if ( ((uint_32)(($25 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$66 }
	$25 = ($25 + [165])
	goto $label$65 
	
.LABEL $label$67
	$20 = (int_64)0
	if ( ((int_64)$24 == (int_64)11) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$66
	$25 = ( ($25 + [208]) ? [0] : ((($25 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$65
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $25) << (int_64)56) >> (int_64)56)
	
.LABEL $label$64
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$63
	$13 = ($13 + [1])
	$22 = ((int_64)$22 + (int_64)-5)
	$21 = ((int_64)$20 | (int_64)$21)
	$24 = ((int_64)$24 + (int_64)1)
	if ( ((int_64)$24 != (int_64)13) ){ goto $label$62 }
	$24 = (int_64)0
	$22 = (int_64)59
	$13 = [608]
	$10 = (int_64)0
	
.LOOP $label$68:
	if ( ((uint_64)$24 > (uint_64)(int_64)7) ){ goto $label$73 }
	$25 = *($13)
	if ( ((uint_32)(($25 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$72 }
	$25 = ($25 + [165])
	goto $label$71 
	
.LABEL $label$73
	$20 = (int_64)0
	if ( ((uint_64)$24 <= (uint_64)(int_64)11) ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$72
	$25 = ( ($25 + [208]) ? [0] : ((($25 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$71
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $25) << (int_64)56) >> (int_64)56)
	
.LABEL $label$70
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$69
	$13 = ($13 + [1])
	$24 = ((int_64)$24 + (int_64)1)
	$10 = ((int_64)$20 | (int_64)$10)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$68 }
	$24 = (int_64)0
	$20 = (int_64)59
	$13 = [624]
	$11 = (int_64)0
	
.LOOP $label$74:
	$22 = (int_64)0
	if ( ((uint_64)$24 > (uint_64)(int_64)11) ){ goto $label$75 }
	$25 = *($13)
	if ( ((uint_32)(($25 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$77 }
	$25 = ($25 + [165])
	goto $label$76 
	
.LABEL $label$77
	$25 = ( ($25 + [208]) ? [0] : ((($25 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$76
	$22 = ((int_64)(CASTING uint_64)(uint_32 ($25 & [31])) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$75
	$13 = ($13 + [1])
	$24 = ((int_64)$24 + (int_64)1)
	$11 = ((int_64)$22 | (int_64)$11)
	$20 = ((int_64)$20 + (int_64)-5)
	if ( ((int_64)$20 != (int_64)-6) ){ goto $label$74 }
	CALL __multi3($27, $3, (int_64)$3 >> (int_64)63), (int_64)5, (int_64)0)
	$24 = *(($27 + [8]))
	$20 = *($27)
	CALL eosio_assert(( (uint_64)($20 <= (int_64)4611686018427387904) ? ((int_64)$24 < (int_64)0) : (int_64)($24 == 0) ), [640])
	CALL eosio_assert(( ((uint_64)$20 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$24 > (int_64)-1) : ((int_64)$24 == (int_64)-1) ), [672])
	CALL eosio_assert([1], [704])
	CALL eosio_assert([1], [720])
	*((($27 + [120]) + [8])) = [0]
	*($27 + [120]) = (int_64)0
	$24 = ((int_64)$20 / (int_64)100)
	$13 = CALL strlen([752])
	if ( ((uint_32)$13 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$13 >= (uint_32)[11]) ){ goto $label$80 }
	*($27 + [120]) = ($13 << [1])
	$25 = (($27 + [120]) | [1])
	if ( $13 ){ goto $label$79 }
	goto $label$78 
	
.LABEL $label$80
	$15 = (($13 + [16]) & [-16])
	$25 = CALL $88($15)
	*($27 + [120]) = ($15 | [1])
	*($27 + [128]) = $25
	*($27 + [124]) = $13
	
.LABEL $label$79
	CALL memcpy($25, [752], $13)
	
.LABEL $label$78
	*(($25 + $13)) = [0]
	CALL _ZNSt3__19to_stringEy(($27 + [104]), $5)
	$13 = *($27 + [104])
	$25 = ($13 & [1])
	$13 = CALL $94(($27 + [120]), ( *($27 + [112]) ? (($27 + [104]) | [1]) : $25 ), ( *($27 + [108]) ? uint_32($13 >> [1]) : $25 ))
	$25 = ($13 + [8])
	*((($27 + [136]) + [8])) = *($25)
	*($27 + [136]) = *($13)
	*($13) = [0]
	*(($13 + [4])) = [0]
	*($25) = [0]
	*((($27 + [88]) + [8])) = [0]
	*($27 + [88]) = (int_64)0
	$13 = CALL strlen([784])
	if ( ((uint_32)$13 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$13 >= (uint_32)[11]) ){ goto $label$83 }
	*($27 + [88]) = ($13 << [1])
	$15 = (($27 + [88]) | [1])
	$25 = $15
	if ( $13 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$83
	$15 = (($13 + [16]) & [-16])
	$25 = CALL $88($15)
	*($27 + [88]) = ($15 | [1])
	*($27 + [96]) = $25
	*($27 + [92]) = $13
	$15 = (($27 + [88]) | [1])
	
.LABEL $label$82
	CALL memcpy($25, [784], $13)
	
.LABEL $label$81
	*(($25 + $13)) = [0]
	$13 = *($27 + [88])
	$25 = ($13 & [1])
	$13 = CALL $94(($27 + [136]), ( *($27 + [96]) ? $15 : $25 ), ( *($27 + [92]) ? uint_32($13 >> [1]) : $25 ))
	$25 = ($13 + [8])
	*((($27 + [152]) + [8])) = *($25)
	*($27 + [152]) = *($13)
	*($13) = [0]
	*(($13 + [4])) = [0]
	*($25) = [0]
	*($27 + [64]) = *($27 + [448])
	CALL $16(($27 + [72]), ($27 + [64]))
	$13 = *($27 + [72])
	$25 = ($13 & [1])
	$13 = CALL $94(($27 + [152]), ( *($27 + [80]) ? (($27 + [72]) | [1]) : $25 ), ( *($27 + [76]) ? uint_32($13 >> [1]) : $25 ))
	$25 = ($13 + [8])
	*((($27 + [168]) + [8])) = *($25)
	*($27 + [168]) = *($13)
	*($13) = [0]
	*(($13 + [4])) = [0]
	*($25) = [0]
	*((($27 + [48]) + [8])) = [0]
	*($27 + [48]) = (int_64)0
	$13 = CALL strlen([800])
	if ( ((uint_32)$13 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$13 >= (uint_32)[11]) ){ goto $label$86 }
	*($27 + [48]) = ($13 << [1])
	$15 = (($27 + [48]) | [1])
	$25 = $15
	if ( $13 ){ goto $label$85 }
	goto $label$84 
	
.LABEL $label$86
	$15 = (($13 + [16]) & [-16])
	$25 = CALL $88($15)
	*($27 + [48]) = ($15 | [1])
	*($27 + [56]) = $25
	*($27 + [52]) = $13
	$15 = (($27 + [48]) | [1])
	
.LABEL $label$85
	CALL memcpy($25, [800], $13)
	
.LABEL $label$84
	*(($25 + $13)) = [0]
	$13 = *($27 + [48])
	$25 = ($13 & [1])
	$13 = CALL $94(($27 + [168]), ( *($27 + [56]) ? $15 : $25 ), ( *($27 + [52]) ? uint_32($13 >> [1]) : $25 ))
	$25 = ($13 + [8])
	*((($27 + [184]) + [8])) = *($25)
	*($27 + [184]) = *($13)
	*($13) = [0]
	*(($13 + [4])) = [0]
	*($25) = [0]
	CALL _ZNSt3__19to_stringEx(($27 + [32]), $3)
	$13 = *($27 + [32])
	$25 = ($13 & [1])
	$13 = CALL $94(($27 + [184]), ( *($27 + [40]) ? (($27 + [32]) | [1]) : $25 ), ( *($27 + [36]) ? uint_32($13 >> [1]) : $25 ))
	$25 = ($13 + [8])
	*((($27 + [200]) + [8])) = *($25)
	*($27 + [200]) = *($13)
	*($13) = [0]
	*(($13 + [4])) = [0]
	*($25) = [0]
	*((($27 + [16]) + [8])) = [0]
	*($27 + [16]) = (int_64)0
	$13 = CALL strlen([816])
	if ( ((uint_32)$13 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$13 >= (uint_32)[11]) ){ goto $label$89 }
	*($27 + [16]) = ($13 << [1])
	$15 = (($27 + [16]) | [1])
	$25 = $15
	if ( $13 ){ goto $label$88 }
	goto $label$87 
	
.LABEL $label$89
	$15 = (($13 + [16]) & [-16])
	$25 = CALL $88($15)
	*($27 + [16]) = ($15 | [1])
	*($27 + [24]) = $25
	*($27 + [20]) = $13
	$15 = (($27 + [16]) | [1])
	
.LABEL $label$88
	CALL memcpy($25, [816], $13)
	
.LABEL $label$87
	*(($25 + $13)) = [0]
	$13 = *($27 + [16])
	$25 = ($13 & [1])
	$13 = CALL $94(($27 + [200]), ( *($27 + [24]) ? $15 : $25 ), ( *($27 + [20]) ? uint_32($13 >> [1]) : $25 ))
	$25 = ($13 + [8])
	*((($27 + [216]) + [8])) = *($25)
	*($27 + [216]) = *($13)
	*($13) = [0]
	*(($13 + [4])) = [0]
	*($25) = [0]
	$13 = *($27 + [336])
	$25 = ($13 & [1])
	$13 = CALL $94(($27 + [216]), ( *($27 + [344]) ? (($27 + [336]) | [1]) : $25 ), ( *($27 + [340]) ? uint_32($13 >> [1]) : $25 ))
	$20 = *($13)
	*($13) = (int_64)0
	$25 = *($13 + [8])
	*($13 + [8]) = [0]
	*(($27 + [256])) = $4
	*($27 + [240]) = $11
	*($27 + [248]) = $24
	*($27 + [264]) = $20
	*($27 + [232]) = *($0)
	*(($27 + [272])) = $25
	$13 = CALL $17(($27 + [296]), ($27 + [280]), $21, $10, ($27 + [232]))
	CALL $18(($27 + [496]), $13)
	$25 = *($27 + [496])
	CALL send_inline($25, (*($27 + [500]) - $25))
	$25 = *($27 + [496])
	if ( ($25 == 0) ){ goto $label$90 }
	*($27 + [500]) = $25
	CALL $89($25)
	
.LABEL $label$90
	$25 = *($13 + [28])
	if ( ($25 == 0) ){ goto $label$91 }
	*(($13 + [32])) = $25
	CALL $89($25)
	
.LABEL $label$91
	$25 = *($13 + [16])
	if ( ($25 == 0) ){ goto $label$92 }
	*(($13 + [20])) = $25
	CALL $89($25)
	
.LABEL $label$92
	if ( ((*($27 + [264]) & [1]) == 0) ){ goto $label$93 }
	CALL $89(*(($27 + [272])))
	
.LABEL $label$93
	if ( ((*($27 + [216]) & [1]) == 0) ){ goto $label$94 }
	CALL $89(*($27 + [224]))
	
.LABEL $label$94
	if ( ((*($27 + [16]) & [1]) == 0) ){ goto $label$95 }
	CALL $89(*(($27 + [24])))
	
.LABEL $label$95
	if ( ((*($27 + [200]) & [1]) == 0) ){ goto $label$96 }
	CALL $89(*($27 + [208]))
	
.LABEL $label$96
	if ( ((*($27 + [32]) & [1]) == 0) ){ goto $label$97 }
	CALL $89(*(($27 + [40])))
	
.LABEL $label$97
	if ( ((*($27 + [184]) & [1]) == 0) ){ goto $label$98 }
	CALL $89(*($27 + [192]))
	
.LABEL $label$98
	if ( ((*($27 + [48]) & [1]) == 0) ){ goto $label$99 }
	CALL $89(*(($27 + [56])))
	
.LABEL $label$99
	if ( ((*($27 + [168]) & [1]) == 0) ){ goto $label$100 }
	CALL $89(*($27 + [176]))
	
.LABEL $label$100
	if ( ((*($27 + [72]) & [1]) == 0) ){ goto $label$101 }
	CALL $89(*(($27 + [80])))
	
.LABEL $label$101
	if ( ((*($27 + [152]) & [1]) == 0) ){ goto $label$102 }
	CALL $89(*($27 + [160]))
	
.LABEL $label$102
	if ( ((*($27 + [88]) & [1]) == 0) ){ goto $label$103 }
	CALL $89(*(($27 + [96])))
	
.LABEL $label$103
	if ( ((*($27 + [136]) & [1]) == 0) ){ goto $label$104 }
	CALL $89(*($27 + [144]))
	
.LABEL $label$104
	if ( ((*($27 + [104]) & [1]) == 0) ){ goto $label$105 }
	CALL $89(*(($27 + [112])))
	
.LABEL $label$105
	if ( ((*($27 + [120]) & [1]) == 0) ){ goto $label$106 }
	CALL $89(*($27 + [128]))
	
.LABEL $label$106
	if ( ((*($27 + [336]) & [1]) == 0) ){ goto $label$45 }
	CALL $89(*(($27 + [344])))
	
.LABEL $label$45
	$13 = *($27 + [352])
	if ( ($13 == 0) ){ goto $label$107 }
	*($27 + [356]) = $13
	CALL $89($13)
	
.LABEL $label$107
	$26 = *($27 + [392])
	if ( ($26 == 0) ){ goto $label$108 }
	$12 = ($27 + [396])
	$13 = *($12)
	if ( ((int_32)$13 == (int_32)$26) ){ goto $label$110 }
	
.LOOP $label$111:
	$13 = ($13 + [-24])
	$25 = *($13)
	*($13) = [0]
	if ( ($25 == 0) ){ goto $label$112 }
	$15 = *($25 + [36])
	if ( ($15 == 0) ){ goto $label$113 }
	*(($25 + [40])) = $15
	CALL $89($15)
	
.LABEL $label$113
	CALL $89($25)
	
.LABEL $label$112
	if ( ((int_32)$26 != (int_32)$13) ){ goto $label$111 }
	$13 = *(($27 + [392]))
	goto $label$109 
	
.LABEL $label$110
	$13 = $26
	
.LABEL $label$109
	*($12) = $26
	CALL $89($13)
	
.LABEL $label$108
	$15 = *($27 + [408])
	if ( ($15 == 0) ){ goto $label$114 }
	$13 = *($27 + [412])
	if ( ((int_32)$13 == (int_32)$15) ){ goto $label$116 }
	$25 = ([0] - $15)
	$13 = ($13 + [-12])
	
.LOOP $label$117:
	if ( ((*($13) & [1]) == 0) ){ goto $label$118 }
	CALL $89(*(($13 + [8])))
	
.LABEL $label$118
	$13 = ($13 + [-12])
	if ( ((int_32)($13 + $25) != (int_32)[-12]) ){ goto $label$117 }
	$13 = *($27 + [408])
	goto $label$115 
	
.LABEL $label$116
	$13 = $15
	
.LABEL $label$115
	*($27 + [412]) = $15
	CALL $89($13)
	
.LABEL $label$114
	$15 = *($27 + [432])
	if ( ($15 == 0) ){ goto $label$9 }
	$13 = *($27 + [436])
	if ( ((int_32)$13 == (int_32)$15) ){ goto $label$120 }
	$25 = ([0] - $15)
	$13 = ($13 + [-12])
	
.LOOP $label$121:
	if ( ((*($13) & [1]) == 0) ){ goto $label$122 }
	CALL $89(*(($13 + [8])))
	
.LABEL $label$122
	$13 = ($13 + [-12])
	if ( ((int_32)($13 + $25) != (int_32)[-12]) ){ goto $label$121 }
	$13 = *($27 + [432])
	goto $label$119 
	
.LABEL $label$120
	$13 = $15
	
.LABEL $label$119
	*($27 + [436]) = $15
	CALL $89($13)
	
.LABEL $label$9
	if ( ((*($27 + [480]) & [1]) == 0) ){ goto $label$123 }
	CALL $89(*(($27 + [488])))
	
.LABEL $label$123
	*([0] + [4]) = ($27 + [512])
	return (unreachable)
	
.LABEL $label$8
	CALL $90(($27 + [232]))
	
.LABEL $label$7
	CALL $90(($27 + [232]))
	
.LABEL $label$6
	CALL $110(($27 + [352]))
	
.LABEL $label$5
	CALL $90(($27 + [336]))
	
.LABEL $label$4
	CALL $90(($27 + [120]))
	
.LABEL $label$3
	CALL $90(($27 + [88]))
	
.LABEL $label$2
	CALL $90(($27 + [48]))
	
.LABEL $label$1
	CALL $90(($27 + [16]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_32 .FUNC _ZN7eosgame4compERKNS_9numdetailES2_ (int_32 $0, int_32 $1)
{
	return (*($0) <= *($1))
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC memory ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC _ZeqRK11checksum256S1_ (int_32 $0, int_32 _ZeqRK11checksum256S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$2 = ((int_32)($5 - $4) / (int_32)[40])
	$7 = ($2 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[40])
	if ( ((uint_32)$3 > (uint_32)[53687090]) ){ goto $label$4 }
	$6 = ($3 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $88(((int_32)$6 * (int_32)[40]))
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $110($0)
	
.LABEL $label$1
	$5 = ($5 - $4)
	$2 = CALL memcpy(($7 + ((int_32)$2 * (int_32)[40])), $1, [40])
	$1 = ($2 + ((int_32)((int_32)$5 / (int_32)[-40]) * (int_32)[40]))
	$6 = ($7 + ((int_32)$6 * (int_32)[40]))
	$7 = ($2 + [40])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $4, $5)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $89($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC _ZN7eosgame8luckynum10createGameEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	*(($4 = ($6 + [48]))) = [0]
	*($6 + [24]) = $1
	*($6 + [32]) = (int_64)-1
	*($6 + [40]) = (int_64)0
	$1 = *($0)
	*($6 + [16]) = $1
	*($6 + [52]) = [0]
	*($6 + [8]) = ($6 + [16])
	*($6 + [88]) = $1
	CALL eosio_assert(((int_64)$1 == (int_64)CALL $fimport$15()), [896])
	*($6 + [68]) = ($6 + [8])
	*($6 + [64]) = ($6 + [16])
	*($6 + [72]) = ($6 + [88])
	*(($0 = CALL $88([64])) + [44]) = [0]
	*($0 + [36 align=4]) = (int_64)0
	*($0 + [48]) = ($6 + [16])
	CALL $24(($6 + [64]), $0)
	*($6 + [80]) = $0
	$1 = *($0)
	*($6 + [64]) = $1
	$2 = *($0 + [52])
	*($6 + [60]) = $2
	$5 = ($6 + [44])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*($4)) ){ goto $label$2 }
	*($3 + [8]) = $1
	*($3 + [16]) = $2
	*($6 + [80]) = [0]
	*($3) = $0
	*($5) = ($3 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $25(($6 + [40]), ($6 + [80]), ($6 + [64]), ($6 + [60]))
	
.LABEL $label$1
	$0 = *($6 + [80])
	*($6 + [80]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	$3 = *($0 + [36])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($0 + [40])) = $3
	CALL $89($3)
	
.LABEL $label$4
	CALL $89($0)
	
.LABEL $label$3
	$2 = *($6 + [40])
	if ( ($2 == 0) ){ goto $label$5 }
	$5 = ($6 + [44])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$9 }
	$4 = *($3 + [36])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [40])) = $4
	CALL $89($4)
	
.LABEL $label$10
	CALL $89($3)
	
.LABEL $label$9
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($6 + [40]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $2
	
.LABEL $label$6
	*($5) = $2
	CALL $89($0)
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $88([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [840]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $111($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $93($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $88([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $19($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $22(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC _ZN7eosgame8luckynum5splitERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [16])
	*([0] + [4]) = $15
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($3 + [1])
	$4 = ($2 + [1])
	$14 = *($3 + [4])
	$9 = *($3)
	$13 = ($2 + [4])
	$6 = [0]
	
.LOOP $label$2:
	$11 = ($12 & [1])
	$12 = *($2)
	$10 = ( *($13) ? uint_32($12 >> [1]) : $11 )
	if ( ($10 <= $6) ){ goto $label$1 }
	$12 = $6
	$8 = ($9 & [1])
	$9 = ( $14 ? uint_32(($9 & [254]) >> [1]) : $8 )
	if ( ($9 == 0) ){ goto $label$3 }
	$14 = ($7 + $6)
	$7 = ( *(($2 + [8])) ? $4 : $11 )
	$10 = ($7 + $10)
	$12 = ($10 - $14)
	if ( ((int_32)$12 < (int_32)$9) ){ goto $label$1 }
	$8 = ( *(($3 + [8])) ? $5 : $8 )
	$11 = *($8)
	
.LOOP $label$4:
	$12 = (($12 - $9) + [1])
	if ( ($12 == 0) ){ goto $label$1 }
	$12 = CALL memchr($14, $11, $12)
	if ( ($12 == 0) ){ goto $label$1 }
	if ( (CALL memcmp($12, $8, $9) == 0) ){ goto $label$5 }
	$14 = ($12 + [1])
	$12 = ($10 - $14)
	if ( ((int_32)$12 >= (int_32)$9) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$1 }
	$12 = ($12 - $7)
	
.LABEL $label$3
	if ( ((int_32)$12 == (int_32)[-1]) ){ goto $label$1 }
	CALL $111($15, $2, $6, ($12 - $6), $2)
	$9 = ($0 + [4])
	$14 = *($9)
	if ( ((uint_32)$14 >= (uint_32)*(($0 + [8]))) ){ goto $label$7 }
	*($14) = *($15)
	$14 = ($15 + [8])
	*(($14 + [8])) = *($14)
	*($14) = [0]
	*($15) = [0]
	*($15 + [4]) = [0]
	*($9) = (*($9) + [12])
	goto $label$6 
	
.LABEL $label$7
	CALL $37($0, $15)
	if ( ((*($15) & [1]) == 0) ){ goto $label$6 }
	CALL $89(*(($15 + [8])))
	
.LABEL $label$6
	$9 = *($3)
	$14 = *(($3 + [4]))
	$6 = (( $14 ? uint_32($9 >> [1]) : ($9 & [1]) ) + $12)
	goto $label$2 
	
.LABEL $label$1
	$12 = ($9 & [1])
	$9 = *($2)
	if ( ((int_32)$6 != (int_32)( *(($2 + [4])) ? uint_32($9 >> [1]) : $12 )) ){ goto $label$12 }
	if ( ($6 == 0) ){ goto $label$9 }
	$14 = ($6 + [-1])
	$11 = ($9 & [1])
	$9 = *($3)
	$9 = ( *(($3 + [4])) ? uint_32($9 >> [1]) : $11 )
	if ( ($9 == 0) ){ goto $label$10 }
	$14 = ($10 + $14)
	$10 = ( *(($2 + [8])) ? $4 : $12 )
	$6 = ($10 + $6)
	$12 = ($6 - $14)
	if ( ((int_32)$12 < (int_32)$9) ){ goto $label$9 }
	$11 = ( *(($3 + [8])) ? $5 : $11 )
	$2 = *($11)
	
.LOOP $label$13:
	$12 = (($12 - $9) + [1])
	if ( ($12 == 0) ){ goto $label$9 }
	$12 = CALL memchr($14, $2, $12)
	if ( ($12 == 0) ){ goto $label$9 }
	if ( (CALL memcmp($12, $11, $9) == 0) ){ goto $label$11 }
	$14 = ($12 + [1])
	$12 = ($6 - $14)
	if ( ((int_32)$12 >= (int_32)$9) ){ goto $label$13 }
	goto $label$9 
	
.LABEL $label$12
	CALL $111($15, $2, $6, [-1], $2)
	$9 = *(($0 + [4]))
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [8]))) ){ goto $label$14 }
	*($9) = *($15)
	$9 = ($15 + [8])
	*(($9 + [8])) = *($9)
	*($9) = [0]
	*($15) = [0]
	*($15 + [4]) = [0]
	*(($9 = ($0 + [4]))) = (*($9) + [12])
	goto $label$9 
	
.LABEL $label$14
	CALL $37($0, $15)
	if ( ((*($15) & [1]) == 0) ){ goto $label$9 }
	CALL $89(*($15 + [8]))
	goto $label$9 
	
.LABEL $label$11
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$9 }
	$14 = ($12 - $10)
	
.LABEL $label$10
	if ( ((int_32)$14 == (int_32)[-1]) ){ goto $label$9 }
	*(($15 + [8])) = [0]
	*($15) = (int_64)0
	$9 = CALL strlen([544])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$17 }
	*($15) = ($9 << [1])
	$12 = ($15 | [1])
	if ( $9 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$14 = (($9 + [16]) & [-16])
	$12 = CALL $88($14)
	*($15) = ($14 | [1])
	*($15 + [8]) = $12
	*($15 + [4]) = $9
	
.LABEL $label$16
	CALL memcpy($12, [544], $9)
	
.LABEL $label$15
	*(($12 + $9)) = [0]
	$9 = ($0 + [4])
	$12 = *($9)
	if ( ((uint_32)$12 >= (uint_32)*(($0 + [8]))) ){ goto $label$18 }
	*($12) = *($15)
	$12 = ($15 + [8])
	*(($12 + [8])) = *($12)
	*($12) = [0]
	*($15) = [0]
	*($15 + [4]) = [0]
	*($9) = (*($9) + [12])
	goto $label$9 
	
.LABEL $label$18
	CALL $37($0, $15)
	if ( ((*($15) & [1]) == 0) ){ goto $label$9 }
	CALL $89(*($15 + [8]))
	
.LABEL $label$9
	*([0] + [4]) = ($15 + [16])
	return (unreachable)
	
.LABEL $label$8
	CALL $90($15)
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)3794750970638893056, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*(($2 + [28])) == (int_32)$4), [208])
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$8 = CALL db_find_i64(*($4), *($4 + [8]), (int_64)3794750970638893056, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $34($4, $8)
	CALL eosio_assert(((int_32)*($2 + [28]) == (int_32)$4), [208])
	
.LABEL $label$4
	*($2 + [36]) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1312])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $88([64])) + [44]) = [0]
	*($6 + [36 align=4]) = (int_64)0
	*($6 + [48]) = $0
	CALL $30(($8 + [32]), $6)
	*($6 + [56]) = [-1]
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $25(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [36])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [40])) = $7
	CALL $89($7)
	
.LABEL $label$10
	CALL $89($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $13 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [1136])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1184])
	$5 = ($1 + [8])
	*(($9 = $10) + [24]) = *($5)
	$4 = *($1)
	$8 = *($3)
	if ( ((int_32)((int_32)(*($8 + [4]) - *($8)) / (int_32)[40]) != (int_32)*(*($3 + [4]))) ){ goto $label$1 }
	*($5) = [1]
	*($1 + [24]) = *(*($3 + [8]))
	*($1 + [32]) = *(((*(*($3)) + ((int_32)*(*(($3 + [4]))) * (int_32)[40])) + [-40]))
	*($1 + [16]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$8 = *($3)
	
.LABEL $label$1
	$3 = ($1 + [36])
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$2 }
	CALL $29($3, *($8), *($8 + [4]))
	
.LABEL $label$2
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1248])
	$5 = *($3)
	$8 = *(($1 + [40]))
	$6 = ($8 - $5)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[40]))
	$3 = [32]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$4 }
	$3 = ((((int_32)((uint_32)($6 + [-40]) / (uint_32)[40]) * (int_32)[30]) + $3) + [30])
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$8 = CALL malloc($3)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$5
	*($9 + [12]) = $8
	*($9 + [8]) = $8
	*($9 + [16]) = ($8 + $3)
	CALL $27(($9 + [8]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $8, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL free($8)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($9 + [40]) = *(($1 + [8]))
	if ( (CALL memcmp(($9 + [24]), ($9 + [40]), [8]) == 0) ){ goto $label$9 }
	$1 = ($1 + [56])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-8173735053029801984, ($9 + [32]), $4)
	*($1) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, $2, ($9 + [40]))
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [48])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [624])
	$10 = $8
	*([0] + [4]) = $8
	$3 = *($1 + [4])
	$9 = *($1)
	$1 = [0]
	$6 = [0]
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($4)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $4)
	
.LABEL $label$1
	*($10 + [128]) = (int_64)0
	$2 = CALL memset((($10 + [128]) | [8]), [0], [66])
	*(($10 + [232])) = (int_64)0
	*(($10 + [224])) = (int_64)0
	*(($10 + [216])) = (int_64)0
	*(($10 + [248])) = (int_64)1398362884
	*($10 + [208]) = (int_64)0
	*($10 + [240]) = (int_64)0
	CALL eosio_assert([1], [416])
	$5 = ($10 + [208])
	$7 = (int_64)5462355
	
.LOOP $label$5:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($8, [480])
	*($10 + [556]) = $6
	*($10 + [552]) = $6
	*($10 + [560]) = ($6 + $4)
	*($10 + [304]) = ($10 + [552])
	*($10 + [376]) = ($10 + [128])
	CALL $81(($10 + [376]), ($10 + [304]))
	if ( ($4 <= [513]) ){ goto $label$8 }
	CALL free($6)
	
.LABEL $label$8
	$7 = *($10 + [128])
	CALL memcpy(($10 + [304]), $2, [66])
	*(($1 = (($10 + [272]) + [24]))) = *(($5 + [24]))
	*(($8 = (($10 + [272]) + [16]))) = *(($5 + [16]))
	*($10 + [280]) = *(($5 + [8]))
	*($10 + [272]) = *($5)
	*(($6 = (($10 + [256]) + [8]))) = *(($10 + [248]))
	*($10 + [256]) = *($10 + [240])
	*((($10 + [448]) + [24])) = *($1)
	*((($10 + [448]) + [16])) = *($8)
	*((($10 + [480]) + [8])) = *($6)
	*($10 + [480]) = *($10 + [256])
	*($10 + [456]) = *($10 + [280])
	*($10 + [448]) = *($10 + [272])
	CALL memcpy(($10 + [376]), ($10 + [304]), [66])
	$1 = ($0 + int_32($3 >> [1]))
	if ( (($3 & [1]) == 0) ){ goto $label$9 }
	$9 = *((*($1) + $9))
	
.LABEL $label$9
	CALL memcpy(($10 + [552]), ($10 + [376]), [66])
	*(($8 = (($10 + [512]) + [24]))) = *((($10 + [448]) + [24]))
	*(($6 = (($10 + [512]) + [16]))) = *((($10 + [448]) + [16]))
	*($10 + [520]) = *($10 + [456])
	*($10 + [512]) = *($10 + [448])
	*(($5 = (($10 + [496]) + [8]))) = *((($10 + [480]) + [8]))
	*($10 + [496]) = *($10 + [480])
	CALL memcpy(($10 + [62]), ($10 + [552]), [66])
	*((($10 + [16]) + [24])) = *($8)
	*((($10 + [16]) + [16])) = *($6)
	*($10 + [24]) = *($10 + [520])
	*($10 + [16]) = *($10 + [512])
	*(($10 + [8])) = *($5)
	*($10) = *($10 + [496])
	CALL void $1((int_32 $7), (int_64 ($10 + [62])), (int_32 ($10 + [16])), (int_32 $10), (int_32 $9))
	*([0] + [4]) = ($10 + [624])
	return [1]
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $19($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [832])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [832])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $21(CALL $20($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $88($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $110($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $89($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC _ZN7eosgame8luckynum9betresultEyN5eosio5assetEymNSt3__16vectorINS_9numdetailENS3_9allocatorIS5_EEEE (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5)
{
	CALL require_auth(*($0))
}

void .FUNC _ZN7eosgame8luckynum12changeamountEyN5eosio5assetEh (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [80])
	*([0] + [4]) = $14
	*($14 + [15]) = $3
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [16]
	$11 = (int_64)0
	
.LOOP $label$1:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($11)
	CALL eosio_assert(((int_64)*($2) != (int_64)0), [1808])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[10]), [1840])
	$5 = ($0 + [88])
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$10 }
	$6 = *(($0 + [112]))
	$13 = *(($0 + [116]))
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$11 }
	$8 = ($13 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$12:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$11 }
	$13 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $7) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$9 }
	$8 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*(($8 + [28])) == (int_32)$5), [208])
	if ( $8 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$10 = *($0)
	*($14 + [4]) = $2
	*($14) = $0
	*($14 + [8]) = ($14 + [15])
	*($14 + [72]) = $10
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$15()), [896])
	*($14 + [16]) = $5
	*($14 + [20]) = $14
	*($14 + [24]) = ($14 + [72])
	*(($4 = CALL $88([40])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [416])
	$10 = (int_64)5462355
	$8 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	
.LOOP $label$17:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$17 }
	
.LABEL $label$16
	$13 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$13 = [0]
	
.LABEL $label$13
	CALL eosio_assert($13, [480])
	*($4 + [28]) = $5
	CALL $60(($14 + [16]), $4)
	*($14 + [56]) = $4
	$10 = *($4)
	*($14 + [16]) = $10
	$13 = *($4 + [32])
	*($14 + [68]) = $13
	$7 = ($0 + [116])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [120]))) ){ goto $label$6 }
	*($8 + [8]) = $10
	*($8 + [16]) = $13
	*($14 + [56]) = [0]
	*($8) = $4
	*($7) = ($8 + [24])
	goto $label$5 
	
.LABEL $label$9
	$8 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)3794750970638893056, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$8 = CALL $34($5, $8)
	CALL eosio_assert(((int_32)*($8 + [28]) == (int_32)$5), [208])
	
.LABEL $label$8
	$9 = *($0)
	CALL eosio_assert([1], [336])
	CALL eosio_assert(((int_32)*($8 + [28]) == (int_32)$5), [1136])
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$15()), [1184])
	$4 = ($8 + [16])
	$10 = *($4)
	*($4) = *(($2 + [8]))
	$13 = ($8 + [8])
	$12 = *($13)
	*($13) = *($2)
	*($14 + [56]) = ((int_64)$10 + (int_64)$12)
	$10 = *($8)
	*($8 + [24]) = $3
	CALL eosio_assert([1], [1248])
	CALL eosio_assert([1], [832])
	CALL memcpy(($14 + [16]), $8, [8])
	CALL eosio_assert([1], [832])
	CALL memcpy((($14 + [16]) | [8]), $13, [8])
	CALL eosio_assert([1], [832])
	CALL memcpy((($14 + [16]) + [16]), $4, [8])
	CALL eosio_assert([1], [832])
	CALL memcpy((($14 + [16]) + [24]), ($8 + [24]), [1])
	CALL db_update_i64(*($8 + [32]), $9, ($14 + [16]), [25])
	$7 = ($0 + [104])
	if ( (uint_64)($10 <= *($7)) ){ goto $label$18 }
	*($7) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$18
	*($14) = ((int_64)*($4) + (int_64)*($13))
	if ( (CALL memcmp(($14 + [56]), $14, [8]) == 0) ){ goto $label$7 }
	$4 = *($8 + [36])
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$19 }
	$4 = CALL db_idx64_find_primary(*(($0 + [88])), *(($0 + [96])), (int_64)3794750970638893056, ($14 + [72]), $10)
	*(($8 + [36])) = $4
	
.LABEL $label$19
	CALL db_idx64_update($4, $9, $14)
	
.LABEL $label$7
	*([0] + [4]) = ($14 + [80])
	return 
	
.LABEL $label$6
	CALL $36(($0 + [112]), ($14 + [56]), ($14 + [16]), ($14 + [68]))
	
.LABEL $label$5
	$8 = *($14 + [56])
	*($14 + [56]) = [0]
	if ( ($8 == 0) ){ goto $label$20 }
	CALL $89($8)
	
.LABEL $label$20
	CALL _ZN7eosgame8luckynum10createGameEy($0, ((int_64)*($2 + [8]) + (int_64)*($2)))
	*([0] + [4]) = ($14 + [80])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [1136])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1184])
	$7 = ($1 + [8])
	$8 = *($7)
	*($7) = [2]
	*(($10 = $9) + [24]) = $8
	$4 = *($1)
	$8 = $4
	$3 = *($3)
	$7 = ($1 + [36])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	CALL $29($7, *($3), *($3 + [4]))
	$8 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$8), [1248])
	$5 = *($7)
	$3 = *(($1 + [40]))
	$6 = ($3 - $5)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[40]))
	$7 = [32]
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$3 }
	$7 = ((((int_32)((uint_32)($6 + [-40]) / (uint_32)[40]) * (int_32)[30]) + $7) + [30])
	
.LABEL $label$3
	if ( ($7 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($7)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10 + [12]) = $9
	*($10 + [8]) = $9
	*($10 + [16]) = ($9 + $7)
	CALL $27(($10 + [8]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($10 + [40]) = *(($1 + [8]))
	if ( (CALL memcmp(($10 + [24]), ($10 + [40]), [8]) == 0) ){ goto $label$8 }
	$1 = ($1 + [56])
	$7 = *($1)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$9 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-8173735053029801984, ($10 + [32]), $4)
	*($1) = $7
	
.LABEL $label$9
	CALL db_idx64_update($7, $2, ($10 + [40]))
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [832])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$2 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [832])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	$0 = (*($4 + [4]) + [8])
	*($4 + [4]) = $0
	CALL eosio_assert(((int_32)(*($4 + [8]) - $0) > (int_32)[7]), [832])
	CALL memcpy(*($4 + [4]), ($2 + [16]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [832])
	CALL memcpy(*($4 + [4]), ($2 + [24]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [832])
	CALL memcpy(*($4 + [4]), ($2 + [32]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*(($2 + [40])) - *($2 + [36])) / (int_32)[40]))
	$1 = *($1)
	$0 = *($1 + [4])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$3 = ((int_64)$5) != (int_64)0
	*($6 + [15]) = (($3) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($1 + [8])) - $0) > (int_32)[0]), [832])
	$4 = ($1 + [4])
	CALL memcpy(*($4), ($6 + [15]), [1])
	$0 = (*($4) + [1])
	*($4) = $0
	if ( $3 ){ goto $label$1 }
	$0 = *(($2 + [40]))
	$4 = *(($2 + [36]))
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $28($1, $4)
	$4 = ($4 + [40])
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	$6 = CALL int_32 $1((int_32 $0), (int_32 *($4)))
	$5 = CALL int_32 $2((int_32 $1), (int_32 *($4)))
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$3 }
	CALL memcpy(($7 + [8]), $0, [40])
	CALL memcpy($0, $2, [40])
	CALL memcpy($2, ($7 + [8]), [40])
	$6 = [1]
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL memcpy(($7 + [8]), $1, [40])
	$5 = CALL memcpy($1, $2, [40])
	CALL memcpy($2, ($7 + [8]), [40])
	$6 = [1]
	if ( (CALL int_32 $5((int_32 $0), (int_32 *($4))) == 0) ){ goto $label$1 }
	CALL memcpy(($7 + [8]), $0, [40])
	CALL memcpy($0, $5, [40])
	CALL memcpy($5, ($7 + [8]), [40])
	goto $label$2 
	
.LABEL $label$3
	CALL memcpy(($7 + [8]), $0, [40])
	CALL memcpy($0, $1, [40])
	$6 = [1]
	$5 = CALL memcpy($1, ($7 + [8]), [40])
	if ( (CALL int_32 $2((int_32 $5), (int_32 *($4))) == 0) ){ goto $label$1 }
	CALL memcpy(($7 + [8]), $5, [40])
	CALL memcpy($5, $2, [40])
	CALL memcpy($2, ($7 + [8]), [40])
	
.LABEL $label$2
	$6 = [2]
	
.LABEL $label$1
	if ( (CALL int_32 $3((int_32 $2), (int_32 *($4))) == 0) ){ goto $label$5 }
	CALL memcpy(($7 + [8]), $2, [40])
	CALL memcpy($2, $3, [40])
	CALL memcpy($3, ($7 + [8]), [40])
	if ( (CALL int_32 $2((int_32 $1), (int_32 *($4))) == 0) ){ goto $label$7 }
	CALL memcpy(($7 + [8]), $1, [40])
	CALL memcpy($1, $2, [40])
	CALL memcpy($2, ($7 + [8]), [40])
	if ( (CALL int_32 $1((int_32 $0), (int_32 *($4))) == 0) ){ goto $label$6 }
	CALL memcpy(($7 + [8]), $0, [40])
	CALL memcpy($0, $1, [40])
	CALL memcpy($1, ($7 + [8]), [40])
	$6 = ($6 + [3])
	goto $label$5 
	
.LABEL $label$7
	$6 = ($6 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = ($6 + [2])
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [48])
	return $6
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$4 = ($0 + [40])
	$5 = CALL int_32 $4((int_32 $0), (int_32 *($2)))
	$7 = ($0 + [80])
	$3 = CALL int_32 $7((int_32 $4), (int_32 *($2)))
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ($3 == 0) ){ goto $label$2 }
	CALL memcpy(($8 + [8]), $0, [40])
	CALL memcpy($0, $7, [40])
	CALL memcpy($7, ($8 + [8]), [40])
	goto $label$1 
	
.LABEL $label$3
	if ( ($3 == 0) ){ goto $label$1 }
	CALL memcpy(($8 + [8]), $4, [40])
	CALL memcpy($4, $7, [40])
	CALL memcpy($7, ($8 + [8]), [40])
	if ( (CALL int_32 $4((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$1 }
	CALL memcpy(($8 + [8]), $0, [40])
	CALL memcpy($0, $4, [40])
	CALL memcpy($4, ($8 + [8]), [40])
	goto $label$1 
	
.LABEL $label$2
	CALL memcpy(($8 + [8]), $0, [40])
	CALL memcpy($0, $4, [40])
	$4 = CALL memcpy($4, ($8 + [8]), [40])
	if ( (CALL int_32 $7((int_32 $4), (int_32 *($2))) == 0) ){ goto $label$1 }
	CALL memcpy(($8 + [8]), $4, [40])
	CALL memcpy($4, $7, [40])
	CALL memcpy($7, ($8 + [8]), [40])
	
.LABEL $label$1
	$4 = ($0 + [120])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$4 }
	$6 = [0]
	
.LOOP $label$5:
	$3 = $4
	if ( (CALL int_32 $3((int_32 $7), (int_32 *($2))) == 0) ){ goto $label$6 }
	CALL memcpy(($8 + [8]), $3, [40])
	$7 = $6
	
.LOOP $label$8:
	$5 = ($4 + [80])
	$4 = ($0 + $7)
	CALL memcpy(($4 + [120]), $5, [40])
	if ( ((int_32)$7 == (int_32)[-80]) ){ goto $label$7 }
	$7 = ($7 + [-40])
	if ( CALL int_32 ($8 + [8])((int_32 ($4 + [40])), (int_32 *($2))) ){ goto $label$8 }
	
.LABEL $label$7
	CALL memcpy($5, ($8 + [8]), [40])
	
.LABEL $label$6
	$6 = ($6 + [40])
	$7 = $3
	$4 = ($3 + [40])
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$5 }
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [48])
}

int_32 .FUNC $54 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$4 = ((int_32)($1 - $0) / (int_32)[40])
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$9 }
	$8 = [1]
	goto $label$1 
	
.LABEL $label$11
	$4 = ($1 + [-40])
	if ( (CALL int_32 $4((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$1 }
	CALL memcpy(($9 + [8]), $0, [40])
	CALL memcpy($0, $4, [40])
	CALL memcpy($4, ($9 + [8]), [40])
	goto $label$1 
	
.LABEL $label$10
	$4 = ($0 + [40])
	$3 = CALL int_32 $4((int_32 $0), (int_32 *($2)))
	$5 = ($1 + [-40])
	$6 = CALL int_32 $5((int_32 $4), (int_32 *($2)))
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$4 }
	CALL memcpy(($9 + [8]), $0, [40])
	CALL memcpy($0, $5, [40])
	CALL memcpy($5, ($9 + [8]), [40])
	goto $label$1 
	
.LABEL $label$9
	$4 = ($0 + [40])
	$5 = CALL int_32 $4((int_32 $0), (int_32 *($2)))
	$8 = ($0 + [80])
	$3 = CALL int_32 $8((int_32 $4), (int_32 *($2)))
	if ( ($5 == 0) ){ goto $label$5 }
	if ( ($3 == 0) ){ goto $label$3 }
	CALL memcpy(($9 + [8]), $0, [40])
	CALL memcpy($0, $8, [40])
	CALL memcpy($8, ($9 + [8]), [40])
	goto $label$2 
	
.LABEL $label$8
	CALL $52($0, ($0 + [40]), ($0 + [80]), ($1 + [-40]), $2)
	goto $label$1 
	
.LABEL $label$7
	$4 = ($0 + [120])
	$3 = ($0 + [80])
	$6 = ($0 + [40])
	CALL $52($0, $6, $3, $4, $2)
	$5 = ($1 + [-40])
	if ( (CALL int_32 $5((int_32 $4), (int_32 *($2))) == 0) ){ goto $label$1 }
	CALL memcpy(($9 + [8]), $4, [40])
	CALL memcpy($4, $5, [40])
	CALL memcpy($5, ($9 + [8]), [40])
	if ( (CALL int_32 $4((int_32 $3), (int_32 *($2))) == 0) ){ goto $label$1 }
	CALL memcpy(($9 + [8]), $3, [40])
	$5 = CALL memcpy($3, $4, [40])
	CALL memcpy($4, ($9 + [8]), [40])
	if ( (CALL int_32 $5((int_32 $6), (int_32 *($2))) == 0) ){ goto $label$1 }
	CALL memcpy(($9 + [8]), $6, [40])
	$4 = CALL memcpy($6, $5, [40])
	CALL memcpy($5, ($9 + [8]), [40])
	if ( (CALL int_32 $4((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$1 }
	CALL memcpy(($9 + [8]), $0, [40])
	CALL memcpy($0, $4, [40])
	CALL memcpy($4, ($9 + [8]), [40])
	goto $label$1 
	
.LABEL $label$6
	if ( ($6 == 0) ){ goto $label$1 }
	CALL memcpy(($9 + [8]), $4, [40])
	CALL memcpy($4, $5, [40])
	CALL memcpy($5, ($9 + [8]), [40])
	if ( (CALL int_32 $4((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$1 }
	CALL memcpy(($9 + [8]), $0, [40])
	CALL memcpy($0, $4, [40])
	CALL memcpy($4, ($9 + [8]), [40])
	goto $label$1 
	
.LABEL $label$5
	if ( ($3 == 0) ){ goto $label$2 }
	CALL memcpy(($9 + [8]), $4, [40])
	CALL memcpy($4, $8, [40])
	CALL memcpy($8, ($9 + [8]), [40])
	if ( (CALL int_32 $4((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$2 }
	CALL memcpy(($9 + [8]), $0, [40])
	CALL memcpy($0, $4, [40])
	CALL memcpy($4, ($9 + [8]), [40])
	goto $label$2 
	
.LABEL $label$4
	CALL memcpy(($9 + [8]), $0, [40])
	CALL memcpy($0, $4, [40])
	$4 = CALL memcpy($4, ($9 + [8]), [40])
	if ( (CALL int_32 $5((int_32 $4), (int_32 *($2))) == 0) ){ goto $label$1 }
	CALL memcpy(($9 + [8]), $4, [40])
	CALL memcpy($4, $5, [40])
	CALL memcpy($5, ($9 + [8]), [40])
	goto $label$1 
	
.LABEL $label$3
	CALL memcpy(($9 + [8]), $0, [40])
	CALL memcpy($0, $4, [40])
	$4 = CALL memcpy($4, ($9 + [8]), [40])
	if ( (CALL int_32 $8((int_32 $4), (int_32 *($2))) == 0) ){ goto $label$2 }
	CALL memcpy(($9 + [8]), $4, [40])
	CALL memcpy($4, $8, [40])
	CALL memcpy($8, ($9 + [8]), [40])
	
.LABEL $label$2
	$4 = ($0 + [120])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$14 }
	$6 = [0]
	$7 = [0]
	
.LOOP $label$15:
	$3 = $4
	if ( (CALL int_32 $3((int_32 $8), (int_32 *($2))) == 0) ){ goto $label$16 }
	CALL memcpy(($9 + [8]), $3, [40])
	$8 = $6
	
.LOOP $label$18:
	$5 = ($4 + [80])
	$4 = ($0 + $8)
	CALL memcpy(($4 + [120]), $5, [40])
	if ( ((int_32)$8 == (int_32)[-80]) ){ goto $label$17 }
	$8 = ($8 + [-40])
	if ( CALL int_32 ($9 + [8])((int_32 ($4 + [40])), (int_32 *($2))) ){ goto $label$18 }
	
.LABEL $label$17
	CALL memcpy($5, ($9 + [8]), [40])
	$7 = ($7 + [1])
	if ( ((int_32)$7 == (int_32)[8]) ){ goto $label$13 }
	
.LABEL $label$16
	$6 = ($6 + [40])
	$8 = $3
	$4 = ($3 + [40])
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$15 }
	
.LABEL $label$14
	$8 = [1]
	goto $label$12 
	
.LABEL $label$13
	$4 = ((int_32)($3 + [40]) == (int_32)$1)
	$8 = [0]
	
.LABEL $label$12
	$8 = ($4 | $8)
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [48])
	$4
	return ($8 & [1])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1312])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $88([40])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [416])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [480])
	*($4 + [28]) = $0
	CALL $35(($8 + [32]), $4)
	*($4 + [36]) = [-1]
	*($4 + [32]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [32])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $36($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $89($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC _ZN7eosgame8luckynum13sha256_to_hexERK11checksum256 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	
.LOOP $label$1:
	$3 = *(($2 + $4))
	CALL $96($0, *((uint_32($3 >> [4]) + [1504])))
	CALL $96($0, *((($3 & [15]) + [1504])))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$1 }
}

int_64 .FUNC _ZN7eosgame8luckynum15get_contract_idEN5eosio11symbol_typeE (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$6 = ( [592] ? [1760] : ((int_64)$1 == (int_64)1397703940) )
	$5 = [-1]
	
.LOOP $label$1:
	$4 = ($6 + $5)
	$2 = ($5 + [1])
	$5 = $2
	if ( *(($4 + [1])) ){ goto $label$1 }
	$3 = (CASTING uint_64)(uint_32 $2)
	$1 = (int_64)0
	$7 = (int_64)59
	$8 = (int_64)0
	
.LOOP $label$2:
	$9 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$3) ){ goto $label$3 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$7 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	goto $label$6 
	
.LABEL $label$7
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$6
	$6 = ($6 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$2 }
	return $8
}

int_32 .FUNC vfprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [288])
	*([0] + [4]) = $7
	*($7 + [284]) = $2
	$6 = [0]
	CALL memset(($7 + [240]), [0], [40])
	*($7 + [280]) = *($7 + [284])
	$2 = [-1]
	if ( ((int_32)CALL $117([0], $1, ($7 + [280]), ($7 + [80]), ($7 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL __lockfile($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) > (int_32)[0]) ){ goto $label$3 }
	*($0) = ($2 & [-33])
	
.LABEL $label$3
	$3 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	$2 = CALL $117($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	goto $label$4 
	
.LABEL $label$5
	*(($5 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($7 + [80])
	*($0 + [28]) = $7
	*($0 + [20]) = $7
	$4 = *($0 + [44])
	*($0 + [44]) = $7
	$2 = CALL $117($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	if ( ($4 == 0) ){ goto $label$4 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $4
	*($5) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$4 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $4 )
	
.LABEL $label$4
	$1 = *($0)
	*($0) = ($1 | $3)
	$1 = ($1 & [32])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL __unlockfile($0)
	
.LABEL $label$6
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [288])
	return $2
}

int_32 .FUNC $117 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$39 = (*([0] + [4]) - [8128])
	*([0] + [4]) = $39
	$12 = (($39 + [692]) + [11])
	$11 = (($39 + [704]) | [8])
	$10 = (($39 + [704]) | [9])
	$9 = ($39 + [7664])
	$8 = ([-2] - ($39 + [704]))
	$7 = (($39 + [692]) + [12])
	$6 = (($39 + [352]) + [54])
	$5 = (($39 + [352]) + [55])
	$30 = [0]
	$38 = [0]
	$32 = [0]
	
.LOOP $label$17:
	$38 = ($30 + $38)
	$37 = $1
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$16 }
	$1 = $37
	$30 = ($30 & [255])
	if ( ($30 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	if ( ((int_32)$30 == (int_32)[37]) ){ goto $label$19 }
	$1 = ($1 + [1])
	$30 = (*($1) & [255])
	if ( $30 ){ goto $label$21 }
	
.LABEL $label$20
	$30 = $1
	goto $label$18 
	
.LABEL $label$19
	$30 = $1
	
.LOOP $label$22:
	if ( ((int_32)*(($1 + [1])) != (int_32)[37]) ){ goto $label$18 }
	$30 = ($30 + [1])
	$1 = ($1 + [2])
	if ( ((int_32)*($1) == (int_32)[37]) ){ goto $label$22 }
	
.LABEL $label$18
	$13 = ([2147483647] - $38)
	$30 = ($30 - $37)
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	if ( ($0 == 0) ){ goto $label$23 }
	if ( (*($0) & [32]) ){ goto $label$23 }
	CALL __fwritex($37, $30, $0)
	
.LABEL $label$23
	if ( $30 ){ goto $label$24 }
	$36 = ($1 + [1])
	$27 = [-1]
	$30 = *($1 + [1])
	$17 = ($30 + [-48])
	if ( ((uint_32)$17 > (uint_32)[9]) ){ goto $label$25 }
	$1 = ((int_32)*($1 + [2]) == (int_32)[36])
	$36 = ( ($1 + [3]) ? $36 : $1 )
	$30 = *($36)
	$27 = ( $17 ? [-1] : $1 )
	$32 = ( [1] ? $32 : $1 )
	
.LABEL $label$25
	$14 = [0]
	$1 = (int_32(($30 << [24]) >> [24]) + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$26 }
	$14 = [0]
	
.LOOP $label$27:
	if ( ((([1] << $1) & [75913]) == 0) ){ goto $label$26 }
	$14 = (([1] << (int_32(($30 << [24]) >> [24]) + [-32])) | $14)
	$36 = ($36 + [1])
	$30 = *($36)
	$1 = ($30 + [-32])
	if ( ($1 <= [32]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)($30 & [255]) != (int_32)[42]) ){ goto $label$33 }
	$1 = (*($36 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$32 }
	if ( ((int_32)*($36 + [2]) != (int_32)[36]) ){ goto $label$32 }
	*(($4 + ($1 << [2]))) = [10]
	$17 = ($36 + [3])
	$32 = [1]
	$15 = *((($3 + (*(($36 + [1])) << [4])) + [-768]))
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	goto $label$31 
	
.LABEL $label$33
	$15 = [0]
	$30 = (int_32(($30 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$30 > (uint_32)[9]) ){ goto $label$30 }
	$1 = [0]
	$17 = $36
	
.LOOP $label$34:
	$15 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$35 }
	$1 = ((int_32)$1 * (int_32)[10])
	$15 = ( [-1] ? ($1 + $30) : ((int_32)$30 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$35
	$1 = $15
	$17 = ($17 + [1])
	$30 = (*($17) + [-48])
	if ( ($30 <= [10]) ){ goto $label$34 }
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$28 }
	goto $label$15 
	
.LABEL $label$32
	if ( $32 ){ goto $label$3 }
	$17 = ($36 + [1])
	if ( ($0 == 0) ){ goto $label$29 }
	$1 = *($2)
	*($2) = ($1 + [4])
	$32 = [0]
	$15 = *($1)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	
.LABEL $label$31
	$15 = ([0] - $15)
	$14 = ($14 | [8192])
	goto $label$28 
	
.LABEL $label$30
	$17 = $36
	goto $label$28 
	
.LABEL $label$29
	$32 = [0]
	$15 = [0]
	
.LABEL $label$28
	$30 = [0]
	$36 = [-1]
	if ( ((int_32)*($17) != (int_32)[46]) ){ goto $label$42 }
	$36 = *($17 + [1])
	if ( ((int_32)$36 != (int_32)[42]) ){ goto $label$41 }
	$1 = (*($17 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$40 }
	if ( ((int_32)*($17 + [3]) != (int_32)[36]) ){ goto $label$40 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($17 + [4])
	$36 = *((($3 + (*(($17 + [2])) << [4])) + [-768]))
	goto $label$37 
	
.LABEL $label$42
	$1 = $17
	$16 = [0]
	goto $label$36 
	
.LABEL $label$41
	$1 = ($17 + [1])
	$31 = ($36 + [-48])
	if ( ((uint_32)$31 > (uint_32)[9]) ){ goto $label$39 }
	$17 = [0]
	
.LOOP $label$43:
	$36 = [-1]
	if ( ((uint_32)$17 > (uint_32)[214748364]) ){ goto $label$44 }
	$17 = ((int_32)$17 * (int_32)[10])
	$36 = ( [-1] ? ($17 + $31) : ((int_32)$31 > (int_32)([2147483647] - $17)) )
	
.LABEL $label$44
	$16 = [1]
	$17 = $36
	$1 = ($1 + [1])
	$31 = (*($1) + [-48])
	if ( ($31 <= [10]) ){ goto $label$43 }
	goto $label$36 
	
.LABEL $label$40
	if ( $32 ){ goto $label$3 }
	$1 = ($17 + [2])
	if ( ($0 == 0) ){ goto $label$38 }
	$17 = *($2)
	*($2) = ($17 + [4])
	$36 = *($17)
	goto $label$37 
	
.LABEL $label$39
	$16 = [1]
	$36 = [0]
	goto $label$36 
	
.LABEL $label$38
	$36 = [0]
	
.LABEL $label$37
	$16 = ((int_32)uint_32($36 >> [31]) ^ (int_32)[1])
	
.LABEL $label$36
	
.LOOP $label$45:
	$17 = $30
	$30 = (*($1) + [-65])
	if ( ((uint_32)$30 > (uint_32)[57]) ){ goto $label$3 }
	$1 = ($1 + [1])
	$30 = *(((((int_32)$17 * (int_32)[58]) + $30) + [10864]))
	if ( (($30 + [-1]) <= [8]) ){ goto $label$45 }
	if ( ($30 == 0) ){ goto $label$3 }
	if ( ((int_32)$30 != (int_32)[27]) ){ goto $label$49 }
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$48 }
	goto $label$3 
	
.LABEL $label$49
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$47 }
	*(($4 + ($27 << [2]))) = $30
	$30 = ($3 + ($27 << [4]))
	*($39 + [428]) = *(($30 + [12]))
	*($39 + [424]) = *(($30 + [8]))
	*($39 + [420]) = *(($30 + [4]))
	*($39 + [416]) = *($30)
	
.LABEL $label$48
	if ( $0 ){ goto $label$46 }
	$30 = [0]
	goto $label$24 
	
.LABEL $label$47
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $121(($39 + [416]), $30, $2)
	
.LABEL $label$46
	$31 = ($14 & [-65537])
	$18 = ( $31 ? $14 : ($14 & [8192]) )
	$26 = [0]
	$24 = [11344]
	$30 = *(($1 + [-1]))
	$29 = ( ( ($30 & [-33]) ? $30 : ((int_32)($30 & [15]) == (int_32)[3]) ) ? $30 : $17 )
	$30 = ($29 + [-65])
	if ( ((uint_32)$30 > (uint_32)[55]) ){ goto $label$80 }
	$14 = $5
	goto $label$111 
	
.LABEL $label$111
	if ( ((int_32)$36 > (int_32)[-1]) ){ goto $label$112 }
	if ( $16 ){ goto $label$15 }
	
.LABEL $label$112
	$35 = *($39 + [424])
	$23 = *($39 + [416])
	*($39 + [748]) = [0]
	if ( (CALL __signbitl($23, $35) == 0) ){ goto $label$113 }
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	$20 = [1]
	$19 = [11376]
	goto $label$108 
	
.LABEL $label$113
	if ( ($18 & [2048]) ){ goto $label$109 }
	$20 = ($18 & [1])
	$19 = ( [11382] ? [11377] : $20 )
	goto $label$108 
	
.LABEL $label$110
	$35 = *($39 + [416])
	if ( ((int_64)$35 <= (int_64)-1) ){ goto $label$92 }
	if ( ($18 & [2048]) ){ goto $label$88 }
	$26 = ($18 & [1])
	$24 = ( [11346] ? [11344] : $26 )
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$109
	$20 = [1]
	$19 = [11379]
	
.LABEL $label$108
	if ( ((int_32)CALL __fpclassifyl($23, $35) <= (int_32)[1]) ){ goto $label$115 }
	CALL frexpl(($39 + [320]), $23, $35, ($39 + [748]))
	$23 = *($39 + [328])
	$35 = *($39 + [320])
	CALL __addtf3(($39 + [304]), $35, $23, $35, $23)
	$23 = *((($39 + [304]) + [8]))
	$35 = *($39 + [304])
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$116 }
	*($39 + [748]) = (*($39 + [748]) + [-1])
	
.LABEL $label$116
	$21 = ($29 | [32])
	if ( ((int_32)$21 != (int_32)[97]) ){ goto $label$114 }
	$37 = ($29 & [32])
	$24 = ( ($19 + [9]) ? $19 : $37 )
	if ( ((uint_32)$36 > (uint_32)[26]) ){ goto $label$77 }
	if ( (([27] - $36) == 0) ){ goto $label$77 }
	$30 = ($36 + [-27])
	$34 = (int_64)4612248968380809216
	$33 = (int_64)0
	
.LOOP $label$117:
	CALL __multf3(($39 + [208]), $33, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($39 + [208]) + [8]))
	$33 = *($39 + [208])
	$30 = ($30 + [1])
	if ( $30 ){ goto $label$117 }
	if ( ((int_32)*($24) != (int_32)[45]) ){ goto $label$78 }
	CALL __subtf3(($39 + [160]), $35, ((int_64)$23 ^ (int_64)-9223372036854775808), $33, $34)
	CALL __addtf3(($39 + [144]), $33, $34, *($39 + [160]), *((($39 + [160]) + [8])))
	$23 = ((int_64)*((($39 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$35 = *($39 + [144])
	goto $label$77 
	
.LABEL $label$115
	$16 = CALL __unordtf2($23, $35, $23, $35)
	$37 = ($20 + [3])
	if ( ($18 & [8192]) ){ goto $label$93 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$93 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$95 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$118:
	if ( (($30 & [1]) == 0) ){ goto $label$119 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$119
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$118 }
	if ( $14 ){ goto $label$93 }
	$31 = ($31 & [255])
	goto $label$94 
	
.LABEL $label$114
	$30 = ((int_32)$36 < (int_32)[0])
	if ( (CALL __netf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$90 }
	CALL __multf3(($39 + [288]), $35, $23, (int_64)0, (int_64)4619285842798575616)
	$31 = (*($39 + [748]) + [-28])
	*($39 + [748]) = $31
	$23 = *((($39 + [288]) + [8]))
	$35 = *($39 + [288])
	goto $label$89 
	
.LABEL $label$107
	$35 = *($39 + [416])
	*((($39 + [344]) + [4])) = [0]
	*($39 + [344]) = $35
	*($39 + [416]) = ($39 + [344])
	$36 = [-1]
	$37 = ($39 + [344])
	goto $label$105 
	
.LABEL $label$106
	$37 = *($39 + [416])
	if ( ($36 == 0) ){ goto $label$74 }
	
.LABEL $label$105
	$30 = [0]
	$14 = $37
	$17 = [0]
	
.LOOP $label$121:
	$31 = *($14)
	if ( ($31 == 0) ){ goto $label$120 }
	$17 = CALL wctomb(($39 + [340]), $31)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$120 }
	if ( ((uint_32)$17 > (uint_32)($36 - $30)) ){ goto $label$120 }
	$14 = ($14 + [4])
	$30 = ($17 + $30)
	if ( ((uint_32)$36 > (uint_32)$30) ){ goto $label$121 }
	
.LABEL $label$120
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$104
	*((($39 + [352]) + [54])) = *($39 + [416])
	$36 = [1]
	$37 = $6
	$14 = $5
	$18 = $31
	goto $label$79 
	
.LABEL $label$103
	$37 = CALL strerror(*(CALL $112()))
	goto $label$97 
	
.LABEL $label$102
	$30 = ($17 & [255])
	if ( ((uint_32)$30 > (uint_32)[7]) ){ goto $label$56 }
	goto $label$122 
	
.LABEL $label$122
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$101
	$37 = $5
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$123 }
	$37 = $5
	
.LOOP $label$124:
	*(($37 = ($37 + [-1]))) = ((int_64)((int_64)$35 & (int_64)7) | (int_64)48)
	$35 = (uint_64)$35 >> (uint_64)(int_64)3
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$124 }
	
.LABEL $label$123
	if ( ($18 & [8]) ){ goto $label$84 }
	$26 = [0]
	$24 = [11344]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$100
	$36 = ( $36 ? [8] : ((uint_32)$36 > (uint_32)[8]) )
	$18 = ($18 | [8])
	$29 = [120]
	
.LABEL $label$99
	$26 = [0]
	$24 = [11344]
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$125 }
	$30 = ($29 & [32])
	$37 = $5
	
.LOOP $label$126:
	*(($37 = ($37 + [-1]))) = (*((((CASTING uint_32)(uint_64 $35) & [15]) + [11328])) | $30)
	$35 = (uint_64)$35 >> (uint_64)(int_64)4
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$126 }
	if ( (($18 & [8]) == 0) ){ goto $label$83 }
	if ( (int_64)(*($39 + [416]) == 0) ){ goto $label$83 }
	$24 = (int_32($29 >> [4]) + [11344])
	$26 = [2]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$125
	$37 = $5
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$98
	$30 = *($39 + [416])
	$37 = ( $30 ? [11360] : $30 )
	
.LABEL $label$97
	$26 = [0]
	$30 = CALL strnlen($37, ( [2147483647] ? $36 : ((int_32)$36 < (int_32)[0]) ))
	$14 = ($37 + $30)
	if ( ((int_32)$36 <= (int_32)[-1]) ){ goto $label$91 }
	$18 = $31
	$36 = $30
	goto $label$79 
	
.LABEL $label$96
	$26 = [0]
	$24 = [11344]
	$35 = *($39 + [416])
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$95
	if ( $17 ){ goto $label$93 }
	
.LABEL $label$94
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$93
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$127 }
	CALL __fwritex($19, $20, $0)
	$30 = *($0)
	
.LABEL $label$127
	if ( ($30 & [32]) ){ goto $label$128 }
	$30 = uint_32(($29 & [32]) >> [5])
	CALL __fwritex(( ( [11440] ? [11456] : $30 ) ? ( [11408] ? [11424] : $30 ) : $16 ), [3], $0)
	
.LABEL $label$128
	if ( ((int_32)($18 & [73728]) != (int_32)[8192]) ){ goto $label$129 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$129 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$131 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$132:
	if ( (($30 & [1]) == 0) ){ goto $label$133 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$133
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$132 }
	if ( $14 ){ goto $label$129 }
	$31 = ($31 & [255])
	goto $label$130 
	
.LABEL $label$131
	if ( $17 ){ goto $label$129 }
	
.LABEL $label$130
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$129
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$92
	$35 = (int_64)
	*($39 + [416]) = $35((int_64)0 - $35))
	$26 = [1]
	$24 = [11344]
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$91
	$18 = $31
	$36 = $30
	if ( (*($14) == 0) ){ goto $label$79 }
	goto $label$15 
	
.LABEL $label$90
	$31 = *($39 + [748])
	
.LABEL $label$89
	$28 = ( [6] ? $36 : $30 )
	$22 = ( ($39 + [752]) ? $9 : ((int_32)$31 < (int_32)[0]) )
	$36 = $22
	
.LOOP $label$134:
	$30 = CALL __fixunstfsi($35, $23)
	CALL __floatunsitf(($39 + [272]), $30)
	CALL __subtf3(($39 + [256]), $35, $23, *($39 + [272]), *((($39 + [272]) + [8])))
	CALL __multf3(($39 + [240]), *($39 + [256]), *((($39 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($36) = $30
	$36 = ($36 + [4])
	$23 = *((($39 + [240]) + [8]))
	$35 = *($39 + [240])
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$134 }
	if ( ((int_32)$31 < (int_32)[1]) ){ goto $label$137 }
	$17 = $22
	
.LOOP $label$138:
	$14 = ( $31 ? [29] : ((int_32)$31 < (int_32)[29]) )
	$30 = ($36 + [-4])
	if ( ($30 <= $17) ){ goto $label$139 }
	$23 = (CASTING uint_64)(uint_32 $14)
	$35 = (int_64)0
	
.LOOP $label$140:
	$35 = ((int_64)((int_64)*($30) << (int_64)$23) + (int_64)((int_64)$35 & (int_64)4294967295))
	*($30) = ((uint_64)$35 % (uint_64)(int_64)1000000000)
	$35 = ((uint_64)$35 / (uint_64)(int_64)1000000000)
	$30 = ($30 + [-4])
	if ( ((uint_32)$30 >= (uint_32)$17) ){ goto $label$140 }
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( ($30 == 0) ){ goto $label$139 }
	*(($17 = ($17 + [-4]))) = $30
	
.LABEL $label$139
	
.LOOP $label$142:
	$30 = $36
	if ( ((uint_32)$30 <= (uint_32)$17) ){ goto $label$141 }
	$36 = ($30 + [-4])
	if ( (*($36) == 0) ){ goto $label$142 }
	
.LABEL $label$141
	$36 = $30
	$31 = ($31 - $14)
	if ( ((int_32)$31 > (int_32)[0]) ){ goto $label$138 }
	*($39 + [748]) = $31
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	goto $label$136 
	
.LABEL $label$137
	$30 = $36
	$17 = $22
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	
.LABEL $label$136
	$24 = (((uint_32)($28 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$21 != (int_32)[102]) ){ goto $label$144 }
	$25 = ($22 + ($24 << [2]))
	
.LOOP $label$145:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$147 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$148:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$148 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$146 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$146 
	
.LABEL $label$147
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$146
	$30 = ( $25 ? $30 : ((int_32)int_32(($30 - $22) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$144
	
.LOOP $label$149:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$151 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$152:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$152 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$150 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$150 
	
.LABEL $label$151
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$150
	$30 = ( ($17 + ($24 << [2])) ? $30 : ((int_32)int_32(($30 - $17) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$149 }
	
.LABEL $label$143
	*($39 + [748]) = $31
	
.LABEL $label$135
	$36 = [0]
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$153 }
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$153 }
	$14 = [10]
	
.LOOP $label$154:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$154 }
	
.LABEL $label$153
	$16 = ((int_32)$21 == (int_32)[103])
	$14 = (($28 - ( $36 ? [0] : ((int_32)$21 != (int_32)[102]) )) - (((int_32)$28 != (int_32)[0]) & $16))
	if ( ((int_32)$14 >= (int_32)(((int_32)int_32(($30 - $22) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$155 }
	$37 = ($14 + [147456])
	$24 = ($22 + (((int_32)$37 / (int_32)[9]) << [2]))
	$31 = ($24 + [-65532])
	$14 = [10]
	$37 = ((int_32)$37 % (int_32)[9])
	if ( ((int_32)($37 + [1]) > (int_32)[8]) ){ goto $label$156 }
	$37 = ([8] - $37)
	$14 = [10]
	
.LOOP $label$157:
	$14 = ((int_32)$14 * (int_32)[10])
	$37 = ($37 + [-1])
	if ( $37 ){ goto $label$157 }
	
.LABEL $label$156
	$27 = *($31)
	$37 = ((uint_32)$27 % (uint_32)$14)
	$26 = ($31 + [4])
	if ( ((int_32)$26 != (int_32)$30) ){ goto $label$159 }
	if ( ($37 == 0) ){ goto $label$158 }
	
.LABEL $label$159
	if ( (((uint_32)$27 / (uint_32)$14) & [1]) ){ goto $label$161 }
	$35 = (int_64)4643211215818981376
	$23 = (int_64)0
	if ( ((uint_32)$31 <= (uint_32)$17) ){ goto $label$160 }
	if ( ((int_32)$14 != (int_32)[1000000000]) ){ goto $label$160 }
	if ( ((*(($31 + [-4])) & [1]) == 0) ){ goto $label$160 }
	
.LABEL $label$161
	$35 = (int_64)4643211215818981376
	$23 = (int_64)1
	
.LABEL $label$160
	$34 = (int_64)4611123068473966592
	$25 = ((int_32)$14 / (int_32)[2])
	if ( ($37 <= $25) ){ goto $label$162 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$37 == (int_32)$25) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$30) )
	
.LABEL $label$162
	if ( ($20 == 0) ){ goto $label$163 }
	if ( ((int_32)*($19) != (int_32)[45]) ){ goto $label$163 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	
.LABEL $label$163
	CALL __addtf3(($39 + [224]), $23, $35, (int_64)0, $34)
	$37 = ($27 - $37)
	*($31) = $37
	if ( (CALL __eqtf2(*($39 + [224]), *((($39 + [224]) + [8])), $23, $35) == 0) ){ goto $label$158 }
	$36 = ($37 + $14)
	*($31) = $36
	if ( ($36 <= [1000000000]) ){ goto $label$164 }
	$36 = ($24 + [-65536])
	
.LOOP $label$165:
	*(($36 + [4])) = [0]
	if ( ((uint_32)$36 >= (uint_32)$17) ){ goto $label$166 }
	*(($17 = ($17 + [-4]))) = [0]
	
.LABEL $label$166
	$14 = (*($36) + [1])
	*($36) = $14
	$36 = ($36 + [-4])
	if ( ((uint_32)$14 > (uint_32)[999999999]) ){ goto $label$165 }
	$31 = ($36 + [4])
	
.LABEL $label$164
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$158 }
	$14 = [10]
	
.LOOP $label$167:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$167 }
	
.LABEL $label$158
	$14 = ($31 + [4])
	$30 = ( $14 ? $30 : ((uint_32)$30 > (uint_32)$14) )
	
.LABEL $label$155
	$31 = ([0] - $36)
	
.LOOP $label$171:
	$14 = $30
	if ( ((uint_32)$14 <= (uint_32)$17) ){ goto $label$170 }
	$30 = ($14 + [-4])
	if ( (*($30) == 0) ){ goto $label$171 }
	$27 = [1]
	if ( $16 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$27 = [0]
	if ( ($16 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$30 = (($28 == 0) + $28)
	if ( ((int_32)$30 <= (int_32)$36) ){ goto $label$76 }
	if ( ((int_32)$36 < (int_32)[-4]) ){ goto $label$76 }
	$29 = ($29 + [-1])
	$28 = (($30 + [-1]) - $36)
	$16 = ($18 & [8])
	if ( ($16 == 0) ){ goto $label$75 }
	goto $label$68 
	
.LABEL $label$168
	$16 = ($18 & [8])
	goto $label$68 
	
.LABEL $label$88
	$26 = [1]
	$24 = [11345]
	if ( (uint_64)($35 <= (int_64)4294967296) ){ goto $label$86 }
	
.LABEL $label$87
	$37 = $5
	
.LOOP $label$172:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$172 }
	goto $label$85 
	
.LABEL $label$86
	$23 = $35
	$37 = $5
	
.LABEL $label$85
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$83 }
	
.LOOP $label$173:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $17 ){ goto $label$173 }
	goto $label$83 
	
.LABEL $label$84
	$30 = ($5 - $37)
	$24 = ( [11344] ? [11349] : ((int_32)$36 > (int_32)$30) )
	$26 = ((int_32)$36 <= (int_32)$30)
	
.LABEL $label$83
	if ( ($16 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	if ( ((int_32)$36 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$81
	$18 = ( ($18 & [-65537]) ? $18 : ((int_32)$36 > (int_32)[-1]) )
	$35 = *($39 + [416])
	if ( $36 ){ goto $label$174 }
	if ( ((int_64)($35 == 0) == 0) ){ goto $label$174 }
	$37 = $5
	$14 = $5
	$36 = [0]
	goto $label$79 
	
.LABEL $label$174
	$30 = ((int_64)($35 == 0) + ($5 - $37))
	$36 = ( $36 ? $30 : ((int_32)$36 > (int_32)$30) )
	
.LABEL $label$80
	$14 = $5
	
.LABEL $label$79
	$29 = ($14 - $37)
	$28 = ( $29 ? $36 : ((int_32)$36 < (int_32)$29) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$15 }
	$27 = ($26 + $28)
	$30 = ( $27 ? $15 : ((int_32)$15 < (int_32)$27) )
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$175 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$175 }
	$17 = ($22 <= [256])
	$22 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $22 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$177 }
	$17 = ($14 == 0)
	$14 = $22
	
.LOOP $label$178:
	if ( (($17 & [1]) == 0) ){ goto $label$179 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$179
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$178 }
	if ( $16 ){ goto $label$175 }
	$22 = ($22 & [255])
	goto $label$176 
	
.LABEL $label$177
	if ( $14 ){ goto $label$175 }
	
.LABEL $label$176
	CALL __fwritex(($39 + [432]), $22, $0)
	
.LABEL $label$175
	if ( (*($0) & [32]) ){ goto $label$180 }
	CALL __fwritex($24, $26, $0)
	
.LABEL $label$180
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$181 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$181 }
	$17 = ($26 <= [256])
	$26 = ($30 - $27)
	CALL memset(($39 + [432]), [48], ( $26 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$183 }
	$17 = ($14 == 0)
	$14 = $26
	
.LOOP $label$184:
	if ( (($17 & [1]) == 0) ){ goto $label$185 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$185
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$184 }
	if ( $16 ){ goto $label$181 }
	$26 = ($26 & [255])
	goto $label$182 
	
.LABEL $label$183
	if ( $14 ){ goto $label$181 }
	
.LABEL $label$182
	CALL __fwritex(($39 + [432]), $26, $0)
	
.LABEL $label$181
	if ( ((int_32)$29 >= (int_32)$36) ){ goto $label$186 }
	$17 = ($16 <= [256])
	$16 = ($28 - $29)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$188 }
	$17 = ($36 == 0)
	$36 = $16
	
.LOOP $label$189:
	if ( (($17 & [1]) == 0) ){ goto $label$190 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$190
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$189 }
	if ( $31 ){ goto $label$186 }
	$16 = ($16 & [255])
	goto $label$187 
	
.LABEL $label$188
	if ( $36 ){ goto $label$186 }
	
.LABEL $label$187
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$186
	if ( (*($0) & [32]) ){ goto $label$191 }
	CALL __fwritex($37, $29, $0)
	
.LABEL $label$191
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$24 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$24 }
	$17 = ($37 <= [256])
	$37 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $17 ))
	$36 = *($0)
	$15 = ($36 & [32])
	if ( $17 ){ goto $label$193 }
	$17 = ($15 == 0)
	$15 = $37
	
.LOOP $label$194:
	if ( (($17 & [1]) == 0) ){ goto $label$195 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$195
	$14 = ($36 & [32])
	$17 = ($14 == 0)
	$15 = ($15 + [-256])
	if ( ((uint_32)$15 > (uint_32)[255]) ){ goto $label$194 }
	if ( $14 ){ goto $label$24 }
	$37 = ($37 & [255])
	goto $label$192 
	
.LABEL $label$193
	if ( $15 ){ goto $label$24 }
	
.LABEL $label$192
	CALL __fwritex(($39 + [432]), $37, $0)
	goto $label$24 
	
.LABEL $label$78
	CALL __addtf3(($39 + [192]), $35, $23, $33, $34)
	CALL __subtf3(($39 + [176]), *($39 + [192]), *((($39 + [192]) + [8])), $33, $34)
	$23 = *((($39 + [176]) + [8]))
	$35 = *($39 + [176])
	
.LABEL $label$77
	$30 = int_32($31 >> [31])
	$31 = *($39 + [748])
	$17 = ((int_32)($31 + $30) ^ (int_32)$30)
	$34 = (CASTING int_64)(int_32 $17)
	$30 = [0]
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$198 }
	$17 = (CASTING uint_32)(uint_64 $34)
	if ( $17 ){ goto $label$197 }
	goto $label$196 
	
.LABEL $label$198
	$30 = [0]
	
.LOOP $label$199:
	*(($12 + $30)) = ((int_64)((uint_64)$34 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ($30 + [-1])
	$17 = ((uint_64)$34 > (uint_64)(int_64)42949672959)
	$33 = ((uint_64)$34 / (uint_64)(int_64)10)
	$34 = $33
	if ( $17 ){ goto $label$199 }
	$17 = (CASTING uint_32)(uint_64 $33)
	if ( ($17 == 0) ){ goto $label$196 }
	
.LABEL $label$197
	
.LOOP $label$200:
	*(((($39 + [692]) + $30) + [11])) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$30 = ($30 + [-1])
	$14 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $14 ){ goto $label$200 }
	
.LABEL $label$196
	$17 = ($7 + $30)
	if ( $30 ){ goto $label$201 }
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$201
	$16 = ($20 | [2])
	*(($27 = ($17 + [-2]))) = ($29 + [15])
	*(($17 + [-1])) = ((uint_32($31 >> [30]) & [2]) + [43])
	if ( ($18 & [8]) ){ goto $label$202 }
	if ( ((int_32)$36 < (int_32)[1]) ){ goto $label$71 }
	$30 = ($39 + [704])
	
.LOOP $label$203:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [80]), $17)
	CALL __subtf3(($39 + [64]), $35, $23, *($39 + [80]), *((($39 + [80]) + [8])))
	CALL __multf3(($39 + [48]), *($39 + [64]), *((($39 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [11328])) | $37)
	$23 = *((($39 + [48]) + [8]))
	$35 = *($39 + [48])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$204 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$204
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$203 }
	goto $label$70 
	
.LABEL $label$202
	$30 = ($39 + [704])
	
.LOOP $label$205:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [128]), $17)
	CALL __subtf3(($39 + [112]), $35, $23, *($39 + [128]), *((($39 + [128]) + [8])))
	CALL __multf3(($39 + [96]), *($39 + [112]), *((($39 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [11328])) | $37)
	$23 = *((($39 + [96]) + [8]))
	$35 = *($39 + [96])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$206 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$206
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$205 }
	goto $label$70 
	
.LABEL $label$76
	$28 = ($30 + [-1])
	$29 = ($29 + [-2])
	$16 = ($18 & [8])
	if ( $16 ){ goto $label$68 }
	
.LABEL $label$75
	$30 = [9]
	if ( ($27 == 0) ){ goto $label$207 }
	$16 = *(($14 + [-4]))
	if ( ($16 == 0) ){ goto $label$207 }
	$30 = [0]
	if ( ((uint_32)$16 % (uint_32)[10]) ){ goto $label$207 }
	$37 = [10]
	$30 = [0]
	
.LOOP $label$208:
	$30 = ($30 + [1])
	$37 = ((int_32)$37 * (int_32)[10])
	if ( (((uint_32)$16 % (uint_32)$37) == 0) ){ goto $label$208 }
	
.LABEL $label$207
	$37 = (((int_32)int_32(($14 - $22) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($29 | [32]) != (int_32)[102]) ){ goto $label$69 }
	$16 = [0]
	$30 = ($37 - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	goto $label$68 
	
.LABEL $label$74
	$30 = [0]
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	
.LABEL $label$73
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$72 }
	$17 = ($27 <= [256])
	$27 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $27 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$210 }
	$17 = ($36 == 0)
	$36 = $27
	
.LOOP $label$211:
	if ( (($17 & [1]) == 0) ){ goto $label$212 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$212
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$211 }
	if ( $31 ){ goto $label$72 }
	$27 = ($27 & [255])
	goto $label$209 
	
.LABEL $label$210
	if ( $36 ){ goto $label$72 }
	
.LABEL $label$209
	CALL __fwritex(($39 + [432]), $27, $0)
	
.LABEL $label$72
	if ( ($30 == 0) ){ goto $label$213 }
	$17 = [0]
	
.LOOP $label$214:
	$36 = *($37)
	if ( ($36 == 0) ){ goto $label$213 }
	$36 = CALL wctomb(($39 + [340]), $36)
	$17 = ($36 + $17)
	if ( ((uint_32)$17 > (uint_32)$30) ){ goto $label$213 }
	if ( (*($0) & [32]) ){ goto $label$215 }
	CALL __fwritex(($39 + [340]), $36, $0)
	
.LABEL $label$215
	$37 = ($37 + [4])
	if ( ($17 <= $30) ){ goto $label$214 }
	
.LABEL $label$213
	if ( ((int_32)$16 != (int_32)[8192]) ){ goto $label$216 }
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$216 }
	$17 = ($31 <= [256])
	$31 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$218 }
	$17 = ($36 == 0)
	$36 = $31
	
.LOOP $label$219:
	if ( (($17 & [1]) == 0) ){ goto $label$220 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$220
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$219 }
	if ( $37 ){ goto $label$216 }
	$31 = ($31 & [255])
	goto $label$217 
	
.LABEL $label$218
	if ( $36 ){ goto $label$216 }
	
.LABEL $label$217
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$216
	$30 = ( $15 ? $30 : ((int_32)$15 > (int_32)$30) )
	goto $label$24 
	
.LABEL $label$71
	$17 = ($39 + [704])
	
.LOOP $label$221:
	$14 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [32]), $14)
	CALL __subtf3(($39 + [16]), $35, $23, *($39 + [32]), *((($39 + [32]) + [8])))
	CALL __multf3($39, *($39 + [16]), *((($39 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($30 = $17)) = (*(($14 + [11328])) | $37)
	$23 = *(($39 + [8]))
	$35 = *($39)
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$222 }
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$222 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$222
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$221 }
	
.LABEL $label$70
	$30 = [-1]
	$31 = ($7 - $27)
	if ( ((int_32)(([2147483645] - $16) - $31) < (int_32)$36) ){ goto $label$50 }
	$26 = ($17 - ($39 + [704]))
	$29 = ( ( ($36 + [2]) ? $26 : ((int_32)($8 + $17) < (int_32)$36) ) ? $26 : $36 )
	$37 = (($31 + $16) + $29)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$65 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$65 }
	$30 = ($28 <= [256])
	$28 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$67 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$223:
	if ( (($30 & [1]) == 0) ){ goto $label$224 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$224
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$223 }
	if ( $14 ){ goto $label$65 }
	$28 = ($28 & [255])
	goto $label$66 
	
.LABEL $label$69
	$16 = [0]
	$30 = (($37 + $36) - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	
.LABEL $label$68
	$30 = [-1]
	$24 = ($28 | $16)
	$37 = ((int_32)$24 != (int_32)[0])
	if ( ((int_32)$28 > (int_32)([2147483646] - $37)) ){ goto $label$50 }
	$26 = (($28 + $37) + [1])
	$21 = ((int_32)($29 | [32]) != (int_32)[102])
	if ( $21 ){ goto $label$225 }
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	$36 = ( $36 ? [0] : ((int_32)$36 > (int_32)[0]) )
	goto $label$61 
	
.LABEL $label$225
	$30 = ( $31 ? $36 : ((int_32)$36 < (int_32)[0]) )
	$35 = (CASTING int_64)(int_32 $30)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$64 }
	$37 = $7
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( $30 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$67
	if ( $17 ){ goto $label$65 }
	
.LABEL $label$66
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$65
	if ( (*($0) & [32]) ){ goto $label$226 }
	CALL __fwritex($24, $16, $0)
	
.LABEL $label$226
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$227 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$227 }
	$30 = ($16 <= [256])
	$16 = ($15 - $37)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$229 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$230:
	if ( (($30 & [1]) == 0) ){ goto $label$231 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$231
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$230 }
	if ( $14 ){ goto $label$227 }
	$16 = ($16 & [255])
	goto $label$228 
	
.LABEL $label$229
	if ( $17 ){ goto $label$227 }
	
.LABEL $label$228
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$227
	if ( (*($0) & [32]) ){ goto $label$232 }
	CALL __fwritex(($39 + [704]), $26, $0)
	
.LABEL $label$232
	$16 = ($29 - $26)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$233 }
	$30 = ($16 <= [256])
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$235 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$236:
	if ( (($30 & [1]) == 0) ){ goto $label$237 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$237
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$236 }
	if ( $14 ){ goto $label$233 }
	$16 = ($16 & [255])
	goto $label$234 
	
.LABEL $label$235
	if ( $17 ){ goto $label$233 }
	
.LABEL $label$234
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$233
	if ( (*($0) & [32]) ){ goto $label$238 }
	CALL __fwritex($27, $31, $0)
	
.LABEL $label$238
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$239 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$239 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$241 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$242:
	if ( (($30 & [1]) == 0) ){ goto $label$243 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$243
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$242 }
	if ( $14 ){ goto $label$239 }
	$31 = ($31 & [255])
	goto $label$240 
	
.LABEL $label$241
	if ( $17 ){ goto $label$239 }
	
.LABEL $label$240
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$239
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$64
	$37 = $7
	
.LOOP $label$244:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$244 }
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	
.LOOP $label$245:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$31 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $31 ){ goto $label$245 }
	
.LABEL $label$62
	if ( ((int_32)($7 - $37) > (int_32)[1]) ){ goto $label$246 }
	$30 = ($37 + [-1])
	
.LOOP $label$247:
	*($30) = [48]
	$37 = ($7 - $30)
	$31 = ($30 + [-1])
	$30 = $31
	if ( ((int_32)$37 < (int_32)[2]) ){ goto $label$247 }
	$37 = ($31 + [1])
	
.LABEL $label$246
	*(($25 = ($37 + [-2]))) = $29
	$30 = [-1]
	*(($37 + [-1])) = ((uint_32($36 >> [30]) & [2]) + [43])
	$36 = ($7 - $25)
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	
.LABEL $label$61
	$30 = [-1]
	$36 = ($36 + $26)
	if ( ((int_32)$36 > (int_32)((int_32)$20 ^ (int_32)[2147483647])) ){ goto $label$50 }
	$26 = ($36 + $20)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$51 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$51 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$53 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$248:
	if ( (($30 & [1]) == 0) ){ goto $label$249 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$249
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$248 }
	if ( $31 ){ goto $label$51 }
	$29 = ($29 & [255])
	goto $label$52 
	
.LABEL $label$60
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$59
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$58
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$57
	*(*($39 + [416])) = $38
	
.LABEL $label$56
	$30 = [0]
	goto $label$24 
	
.LABEL $label$55
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$54
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$53
	if ( $36 ){ goto $label$51 }
	
.LABEL $label$52
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$51
	if ( (*($0) & [32]) ){ goto $label$250 }
	CALL __fwritex($19, $20, $0)
	
.LABEL $label$250
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$251 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$251 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [48], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$253 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$254:
	if ( (($30 & [1]) == 0) ){ goto $label$255 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$255
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$254 }
	if ( $31 ){ goto $label$251 }
	$29 = ($29 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $36 ){ goto $label$251 }
	
.LABEL $label$252
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$251
	if ( $21 ){ goto $label$266 }
	$31 = ( $22 ? $17 : ((uint_32)$17 > (uint_32)$22) )
	$37 = $31
	
.LOOP $label$267:
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$269 }
	$17 = [0]
	
.LOOP $label$270:
	*(($11 + $17)) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ($17 + [-1])
	$36 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $36 ){ goto $label$270 }
	goto $label$268 
	
.LABEL $label$269
	$17 = [0]
	
.LABEL $label$268
	$30 = ($10 + $17)
	if ( ((int_32)$37 == (int_32)$31) ){ goto $label$272 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$271 }
	
.LOOP $label$273:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$273 }
	$30 = ($39 + [704])
	goto $label$271 
	
.LABEL $label$272
	if ( $17 ){ goto $label$271 }
	*(($30 = ($30 + [-1]))) = [48]
	
.LABEL $label$271
	if ( (*($0) & [32]) ){ goto $label$274 }
	CALL __fwritex($30, ($10 - $30), $0)
	
.LABEL $label$274
	$37 = ($37 + [4])
	if ( ((uint_32)$37 <= (uint_32)$22) ){ goto $label$267 }
	if ( ($24 == 0) ){ goto $label$275 }
	if ( (*($0) & [32]) ){ goto $label$275 }
	CALL __fwritex([11472], [1], $0)
	
.LABEL $label$275
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$265 }
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$264 }
	
.LOOP $label$276:
	$30 = $10
	$17 = *($37)
	if ( ($17 == 0) ){ goto $label$278 }
	$30 = $10
	
.LOOP $label$279:
	*(($30 = ($30 + [-1]))) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$36 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $36 ){ goto $label$279 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$277 }
	
.LABEL $label$278
	
.LOOP $label$280:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$280 }
	
.LABEL $label$277
	if ( (*($0) & [32]) ){ goto $label$281 }
	CALL __fwritex($30, ( $28 ? [9] : ((int_32)$28 < (int_32)[9]) ), $0)
	
.LABEL $label$281
	$30 = ($28 + [-9])
	if ( ((int_32)$28 < (int_32)[10]) ){ goto $label$263 }
	$28 = $30
	$37 = ($37 + [4])
	if ( ($37 <= $14) ){ goto $label$276 }
	goto $label$263 
	
.LABEL $label$266
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$259 }
	$31 = ( $14 ? ($17 + [4]) : $27 )
	if ( ($16 == 0) ){ goto $label$261 }
	$37 = $17
	
.LOOP $label$282:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$284 }
	$36 = [0]
	
.LOOP $label$285:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$285 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$283 }
	
.LABEL $label$284
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$283
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$287 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$286 }
	
.LOOP $label$288:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$288 }
	goto $label$286 
	
.LABEL $label$287
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$289 }
	CALL __fwritex($14, [1], $0)
	$30 = *($0)
	
.LABEL $label$289
	$14 = ($14 + [1])
	if ( ($30 & [32]) ){ goto $label$286 }
	CALL __fwritex([11472], [1], $0)
	
.LABEL $label$286
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$290 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$290
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$282 }
	goto $label$260 
	
.LABEL $label$265
	$30 = $28
	if ( ((int_32)$30 >= (int_32)[1]) ){ goto $label$262 }
	goto $label$258 
	
.LABEL $label$264
	$30 = $28
	
.LABEL $label$263
	if ( ((int_32)$30 < (int_32)[1]) ){ goto $label$258 }
	
.LABEL $label$262
	$17 = ($30 <= [256])
	CALL memset(($39 + [432]), [48], ( $30 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$292 }
	$17 = ($36 == 0)
	$36 = $30
	
.LOOP $label$293:
	if ( (($17 & [1]) == 0) ){ goto $label$294 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$294
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$293 }
	if ( $37 ){ goto $label$258 }
	$30 = ($30 & [255])
	goto $label$291 
	
.LABEL $label$292
	if ( $36 ){ goto $label$258 }
	
.LABEL $label$291
	CALL __fwritex(($39 + [432]), $30, $0)
	if ( ((int_32)$18 == (int_32)[8192]) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$261
	$37 = $17
	
.LOOP $label$295:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$297 }
	$36 = [0]
	
.LOOP $label$298:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$298 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$296 }
	
.LABEL $label$297
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$296
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$300 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$299 }
	
.LOOP $label$301:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$301 }
	goto $label$299 
	
.LABEL $label$300
	if ( (*($0) & [32]) ){ goto $label$302 }
	CALL __fwritex($14, [1], $0)
	
.LABEL $label$302
	$14 = ($14 + [1])
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$299 }
	if ( (*($0) & [32]) ){ goto $label$299 }
	CALL __fwritex([11472], [1], $0)
	
.LABEL $label$299
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$303 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$303
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$295 }
	
.LABEL $label$260
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$259 }
	$30 = ($28 <= [256])
	CALL memset(($39 + [432]), [48], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$305 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$306:
	if ( (($30 & [1]) == 0) ){ goto $label$307 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$307
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$306 }
	if ( $14 ){ goto $label$259 }
	$28 = ($28 & [255])
	goto $label$304 
	
.LABEL $label$305
	if ( $17 ){ goto $label$259 }
	
.LABEL $label$304
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$259
	if ( (*($0) & [32]) ){ goto $label$258 }
	CALL __fwritex($25, ($7 - $25), $0)
	
.LABEL $label$258
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$256 }
	
.LABEL $label$257
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$256 }
	$30 = ($37 <= [256])
	$37 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$309 }
	$30 = ($17 == 0)
	$17 = $37
	
.LOOP $label$310:
	if ( (($30 & [1]) == 0) ){ goto $label$311 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$311
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$310 }
	if ( $14 ){ goto $label$256 }
	$37 = ($37 & [255])
	goto $label$308 
	
.LABEL $label$309
	if ( $17 ){ goto $label$256 }
	
.LABEL $label$308
	CALL __fwritex(($39 + [432]), $37, $0)
	
.LABEL $label$256
	$30 = ( $15 ? $26 : ((int_32)$15 > (int_32)$26) )
	
.LABEL $label$50
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$24
	if ( ((int_32)$30 <= (int_32)$13) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( $0 ){ goto $label$1 }
	if ( ($32 == 0) ){ goto $label$14 }
	$30 = [1]
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $121(($3 + [16]), $1, $2)
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $121(($3 + [32]), $1, $2)
	$1 = *($4 + [12])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $121(($3 + [48]), $1, $2)
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $121(($3 + [64]), $1, $2)
	$1 = *($4 + [20])
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $121(($3 + [80]), $1, $2)
	$1 = *($4 + [24])
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $121(($3 + [96]), $1, $2)
	$1 = *($4 + [28])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $121(($3 + [112]), $1, $2)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $121(($3 + [128]), $1, $2)
	$1 = *($4 + [36])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $121(($3 + [144]), $1, $2)
	$38 = [1]
	goto $label$1 
	
.LABEL $label$15
	*(CALL __errno_location()) = [75]
	goto $label$2 
	
.LABEL $label$14
	$38 = [0]
	goto $label$1 
	
.LABEL $label$13
	$30 = [2]
	goto $label$4 
	
.LABEL $label$12
	$30 = [3]
	goto $label$4 
	
.LABEL $label$11
	$38 = [0]
	goto $label$1 
	
.LABEL $label$10
	$30 = [4]
	goto $label$4 
	
.LABEL $label$9
	$30 = [5]
	goto $label$4 
	
.LABEL $label$8
	$30 = [6]
	goto $label$4 
	
.LABEL $label$7
	$30 = [7]
	goto $label$4 
	
.LABEL $label$6
	$30 = [8]
	goto $label$4 
	
.LABEL $label$5
	$30 = [9]
	
.LABEL $label$4
	$1 = ($4 + ($30 << [2]))
	
.LOOP $label$312:
	if ( *($1) ){ goto $label$3 }
	$1 = ($1 + [4])
	$38 = [1]
	$30 = ($30 + [1])
	if ( ((uint_32)$30 <= (uint_32)[9]) ){ goto $label$312 }
	goto $label$1 
	
.LABEL $label$3
	*(CALL __errno_location()) = [22]
	
.LABEL $label$2
	$38 = [-1]
	
.LABEL $label$1
	*([0] + [4]) = ($39 + [8128])
	$30
	$30
	return $38
}

int_32 .FUNC vsnprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	$5 = [-1]
	*($4 + [148]) = ( ($1 + [-1]) ? [0] : $1 )
	$0 = ( $0 ? ($4 + [158]) : $1 )
	*($4 + [144]) = $0
	*(($4 = CALL memset($4, [0], [144])) + [36]) = [9]
	*($4 + [75]) = [255]
	*($4 + [76]) = [-1]
	*($4 + [44]) = ($4 + [159])
	*($4 + [84]) = ($4 + [144])
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	*($0) = [0]
	$5 = CALL vfprintf($4, $2, $3)
	goto $label$1 
	
.LABEL $label$2
	*(CALL __errno_location()) = [75]
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [160])
	return $5
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1344])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1344])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1344])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1344])
	CALL memcpy(($1 + [24]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

int_32 .FUNC __errno_location ()
{
	return [10856]
}

int_32 .FUNC snprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $3
	$3 = CALL vsnprintf($0, $1, $2, $3)
	*([0] + [4]) = ($4 + [16])
	return $3
}

void .FUNC $110 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $88($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC __uflow (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = [-1]
	if ( CALL __toread($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($2 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$1 = *($2 + [15])
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $1
}

int_32 .FUNC __lockfile (int_32 $0)
{
	int_32 $1
	return $1
}

void .FUNC __unlockfile (int_32 $0)
{
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = ((int_32)$3 / (int_32)[40])
	if ( ((uint_32)$4 <= (uint_32)((int_32)($8 - $5) / (int_32)[40])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $89($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$1 }
	$5 = [107374182]
	$2 = ((int_32)$8 / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$6 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	
.LABEL $label$6
	$4 = ((int_32)$5 * (int_32)[40])
	$5 = CALL $88($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + ((int_32)((uint_32)$3 / (uint_32)[40]) * (int_32)[40]))
	return 
	
.LABEL $label$4
	$3 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$6 = ( ($1 + ((int_32)$3 * (int_32)[40])) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$8 = ($6 - $1)
	$7 = ((int_32)$8 / (int_32)[40])
	if ( ($8 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $8)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $6, $1)
	*($0) = (*($0) + ((int_32)((uint_32)$1 / (uint_32)[40]) * (int_32)[40]))
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ((int_32)$7 * (int_32)[40]))
	return (unreachable)
	
.LABEL $label$1
	CALL $110($0)
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [832])
	CALL memcpy(*($0 + [4]), $1, [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [832])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [832])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [832])
	CALL memcpy(*($0 + [4]), ($1 + [20]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [832])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [832])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $88(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $110($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $89($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $89($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZNSt3__19to_stringEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [10816], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $106(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $106(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $106 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$3 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$4 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($0 + [4])
	
.LABEL $label$3
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$5 }
	CALL $97($0, $3, (($1 - $3) + $4), $4, $4, [0], [0])
	$5 = *($0)
	
.LABEL $label$5
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = ($0 + [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($0 + [8])
	
.LABEL $label$6
	CALL memset(($5 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($1 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $1
	
.LABEL $label$8
	*(($5 + $1)) = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [832])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [832])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [832])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [832])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [832])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [832])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [832])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [832])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [832])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [832])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [832])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $23(*($1), ($0 + [32]))
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $88(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $110($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [36])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [40])) = $6
	CALL $89($6)
	
.LABEL $label$11
	CALL $89($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $89($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	$5 = *(*($0 + [4]))
	$4 = *($5 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$3 = CALL db_lowerbound_i64(*($5), *($5 + [8]), (int_64)-8173735053029801984, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $12($5, $3)
	*($8 + [12]) = [0]
	*($8 + [8]) = $5
	$4 = *(*(CALL $26(($8 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [960])
	$4 = *(($5 + [16]))
	*($1 + [8]) = [0]
	*($1) = ( (int_64)1 ? $4 : (int_64)($4 == 0) )
	$4 = CALL current_time()
	*($1 + [16]) = [0]
	*($1 + [24]) = (int_64)0
	*($1 + [32]) = [0]
	*($1 + [12]) = ((uint_64)$4 / (uint_64)(int_64)1000000)
	$5 = *($1 + [36])
	if ( ($5 == 0) ){ goto $label$4 }
	*(($1 + [40])) = $5
	CALL $89($5)
	*(($5 = ($1 + [44]))) = [0]
	*(($1 + [36])) = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	$5 = ($1 + [44])
	
.LABEL $label$3
	*($5) = [0]
	*(($1 + [36])) = (int_64)0
	$9 = $9
	$5 = ($9 + [-48])
	*([0] + [4]) = $5
	*($8 + [12]) = $5
	*($8 + [8]) = $5
	*($8 + [16]) = ($9 + [-15])
	CALL $27(($8 + [8]), $1)
	$4 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)-8173735053029801984, *(*($0 + [8])), $4, $5, [33])
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$4 = *(($2 + [8]))
	$6 = *(*(($0 + [8])))
	$7 = *($1)
	*($8 + [24]) = *(($1 + [8]))
	*($1 + [56]) = CALL db_idx64_store($4, (int_64)-8173735053029801984, $6, $7, ($8 + [24]))
	*([0] + [4]) = ($8 + [32])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [832])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [832])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [832])
	CALL memcpy(*($0 + [4]), ($1 + [12]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [832])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [832])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [832])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [40])) - *($1 + [36])) / (int_32)[40]))
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($6 + [15]) = (($2) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [832])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($6 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $2 ){ goto $label$1 }
	$4 = *(($1 + [40]))
	$3 = *(($1 + [36]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $28($0, $3)
	$3 = ($3 + [40])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [16])
	return $0
}

int_32 .FUNC $26 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [52]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1088])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-8173735053029801984)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1024])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1024])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $12(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC _ZNSt3__19to_stringEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [10848], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $106(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $106(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

int_64 .FUNC strtoull (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return $3
}

void .FUNC _ZN7eosgame8luckynum6to_hexEPKcm (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	if ( ($3 == 0) ){ goto $label$1 }
	
.LOOP $label$2:
	$4 = *($2)
	CALL $96($0, *((uint_32($4 >> [4]) + [1504])))
	CALL $96($0, *((($4 & [15]) + [1504])))
	$2 = ($2 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$1
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [1968])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [2016])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2080])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [36])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [40])) = $6
	CALL $89($6)
	
.LABEL $label$7
	CALL $89($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [36])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [40])) = $6
	CALL $89($6)
	
.LABEL $label$10
	CALL $89($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
	$7 = *(($1 + [56]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-8173735053029801984, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx64_remove($7)
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

void .FUNC _ZNSt3__19to_stringEx (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [10832], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $106(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $106(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [128])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [896])
	*(($5 = CALL $88([48])) + [36]) = $1
	$3 = CALL memcpy($5, *($3), [34])
	CALL memcpy(($7 + [48]), $3, [34])
	CALL memcpy(($7 + [88]), ($7 + [48]), [34])
	CALL eosio_assert([1], [832])
	CALL memcpy($7, ($7 + [88]), [34])
	*($3 + [40]) = CALL db_store_i64(*($1 + [8]), (int_64)-5069197016886673408, $2, (int_64)-5069197016886673408, $7, [34])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-5069197016886673408) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-5069197016886673407
	
.LABEL $label$1
	*($7 + [48]) = $3
	*($7 + [88]) = (int_64)-5069197016886673408
	$4 = *($3 + [40])
	*($7) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($5 + [8]) = (int_64)-5069197016886673408
	*($5 + [16]) = $4
	*($7 + [48]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $55(($1 + [24]), ($7 + [48]), ($7 + [88]), $7)
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [48])
	*($7 + [48]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $89($1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [128])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [112])
	*([0] + [4]) = $4
	CALL eosio_assert(((int_32)*(($1 + [36])) == (int_32)$0), [1136])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1184])
	CALL memcpy($1, *($3), [34])
	CALL eosio_assert([1], [1248])
	CALL memcpy(($4 + [38]), $1, [34])
	CALL memcpy(($4 + [72]), ($4 + [38]), [34])
	CALL eosio_assert([1], [832])
	CALL memcpy($4, ($4 + [72]), [34])
	CALL db_update_i64(*(($1 + [40])), $2, $4, [34])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-5069197016886673408) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-5069197016886673407
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [112])
}

void .FUNC _ZN7eosgame8luckynum5cleanEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [16]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($8)
	*($10 + [16]) = (int_64)-1
	$7 = *($0)
	*($10) = $7
	$6 = ((int_64)*($2 + [8]) + (int_64)*($2))
	*($10 + [8]) = $6
	*($10 + [24]) = [0]
	*(($10 + [28])) = [0]
	*(($10 + [32])) = [0]
	*($10 + [36]) = [0]
	$5 = CALL db_lowerbound_i64($7, $6, (int_64)-8173735053029801984, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $12($10, $5)
	
.LOOP $label$6:
	if ( ((int_32)*($5 + [8]) != (int_32)[2]) ){ goto $label$8 }
	$7 = *($5)
	$3 = [0]
	$2 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($2, [1920])
	CALL eosio_assert($2, [1888])
	$2 = CALL db_next_i64(*($5 + [52]), ($10 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$9 }
	$3 = CALL $12($10, $2)
	
.LABEL $label$9
	CALL $68($10, $5)
	$5 = $3
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	CALL eosio_assert([1], [1888])
	$3 = *($5 + [52])
	$5 = [0]
	$3 = CALL db_next_i64($3, ($10 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	$5 = CALL $12($10, $3)
	
.LABEL $label$7
	if ( $5 ){ goto $label$6 }
	
.LABEL $label$5
	$0 = *($10 + [24])
	if ( ($0 == 0) ){ goto $label$10 }
	$4 = ($10 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$14 }
	$2 = *($3 + [36])
	if ( ($2 == 0) ){ goto $label$15 }
	*(($3 + [40])) = $2
	CALL $89($2)
	
.LABEL $label$15
	CALL $89($3)
	
.LABEL $label$14
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$13 }
	$5 = *(($10 + [24]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $0
	
.LABEL $label$11
	*($4) = $0
	CALL $89($5)
	
.LABEL $label$10
	*([0] + [4]) = ($10 + [48])
}

void .FUNC _ZN7eosgame8luckynum11changepauseEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($4)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	$6 = *($0 + [128])
	$2 = *(($0 + [72]))
	$9 = *(($0 + [76]))
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$5 }
	$4 = ($9 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$6:
	if ( ((int_64)*(*($4)) == (int_64)$6) ){ goto $label$5 }
	$9 = $4
	$1 = ($4 + [-24])
	$4 = $1
	if ( ((int_32)($1 + $3) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$1 = ($0 + [48])
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$8 }
	$4 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$1), [208])
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	$9 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7235159537265672192, $6)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $38($1, $9)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$1), [208])
	
.LABEL $label$7
	$5 = *($0)
	$6 = *($4 + [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [336])
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$1), [1136])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$15()), [1184])
	*($4 + [8]) = (CASTING uint_64)(uint_32 (int_64)($6 == 0))
	$6 = *($4)
	CALL eosio_assert([1], [1248])
	CALL eosio_assert([1], [832])
	CALL memcpy($10, $4, [8])
	CALL eosio_assert([1], [832])
	CALL memcpy(($10 | [8]), ($4 + [8]), [8])
	CALL db_update_i64(*($4 + [20]), $5, $10, [16])
	$4 = ($0 + [64])
	if ( (uint_64)($6 <= *($4)) ){ goto $label$9 }
	*($4) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [32]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1088])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)3794750970638893056)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1024])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1024])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $34(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$9 = (*([0] + [4]) - [16])
	$12 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	$3 = *($0 + [4])
	$8 = *($3)
	$7 = ($8 + [104])
	$6 = *($7)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$4 = ($8 + [88])
	$5 = CALL db_lowerbound_i64(*($4), *(($8 + [96])), (int_64)3794750970638893056, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $34($4, $5)
	*($12 + [12]) = [0]
	*($12 + [8]) = $4
	$6 = *(*(CALL $61(($12 + [8])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($8 + [104])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [960])
	*($1) = *($7)
	$7 = *($3 + [4])
	*($1 + [8]) = *($7)
	*(($8 = ($1 + [16]))) = *(($7 + [8]))
	*($1 + [24]) = *(*($3 + [8]))
	$9 = $9
	$3 = ($9 + [-32])
	*([0] + [4]) = $3
	CALL eosio_assert([1], [832])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert([1], [832])
	CALL memcpy(($9 + [-24]), ($1 + [8]), [8])
	CALL eosio_assert([1], [832])
	CALL memcpy(($9 + [-16]), $8, [8])
	CALL eosio_assert([1], [832])
	CALL memcpy(($9 + [-8]), ($1 + [24]), [1])
	$6 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($2 + [8]), (int_64)3794750970638893056, *(*($0 + [8])), $6, $3, [25])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$6 = *(($2 + [8]))
	$10 = *(*(($0 + [8])))
	$11 = *($1)
	*($12 + [8]) = ((int_64)*($8) + (int_64)*($1 + [8]))
	*($1 + [36]) = CALL db_idx64_store($6, (int_64)3794750970638893056, $10, $11, ($12 + [8]))
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*(($3 + [36])) == (int_32)$0), [208])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-5069197016886673408, (int_64)-5069197016886673408)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $45($0, $3)
	CALL eosio_assert(((int_32)*(($3 + [36])) == (int_32)$0), [208])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [336])
	CALL $64($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $65($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC _ZN7eosgame8luckynum10newrandkeyE10public_key (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	*(($3 + [72])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$6 = *($0)
	*($3 + [40]) = $6
	*($3 + [48]) = $6
	$4 = CALL db_find_i64($6, $6, (int_64)-5069197016886673408, (int_64)-5069197016886673408)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*((CALL $45(($3 + [40]), $4) + [36])) == (int_32)($3 + [40])), [208])
	
.LABEL $label$5
	$1 = CALL memcpy($3, $1, [34])
	CALL $63(($1 + [40]), $1, *($0))
	$3 = *($1 + [64])
	if ( ($3 == 0) ){ goto $label$6 }
	$0 = ($1 + [68])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $89($2)
	
.LABEL $label$10
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($1 + [64]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $3
	
.LABEL $label$7
	*($0) = $3
	CALL $89($4)
	
.LABEL $label$6
	*([0] + [4]) = ($1 + [80])
}

int_32 .FUNC _ZNSt3__15stoulERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	$3 = CALL strlen([10736])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($6) = ($3 << [1])
	$5 = ($6 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $88($4)
	*($6) = ($4 | [1])
	*($6 + [8]) = $5
	*($6 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($5, [10736], $3)
	
.LABEL $label$4
	*(($5 + $3)) = [0]
	*($6 + [12]) = [0]
	$3 = *($0 + [8])
	$5 = *($0)
	$4 = *(CALL __errno_location())
	*(CALL __errno_location()) = [0]
	$3 = ( $3 ? ($0 + [1]) : ($5 & [1]) )
	$2 = CALL strtoul($3, ($6 + [12]), $2)
	$0 = CALL __errno_location()
	$5 = *($0)
	*($0) = $4
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($6 + [12])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $3)
	
.LABEL $label$7
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	CALL $89(*($6 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
	return $2
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $102($6)
	
.LABEL $label$1
	CALL $103($6)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $103 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $46($1, $0, [10752])
	CALL abort()
	(unreachable)
}

void .FUNC $102 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $46($1, $0, [10768])
	CALL abort()
	(unreachable)
}

void .FUNC _ZNSt3__19to_stringEi (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [10800], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $106(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $106(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

int_64 .FUNC _ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$3 = CALL strlen([10784])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($3 << [1])
	$6 = ($7 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = (($3 + [16]) & [-16])
	$6 = CALL $88($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($6, [10784], $3)
	
.LABEL $label$4
	*(($6 + $3)) = [0]
	*($7 + [12]) = [0]
	$3 = *($0 + [8])
	$6 = *($0)
	$5 = *(CALL __errno_location())
	*(CALL __errno_location()) = [0]
	$3 = ( $3 ? ($0 + [1]) : ($6 & [1]) )
	$4 = CALL strtoull($3, ($7 + [12]), $2)
	$0 = CALL __errno_location()
	$6 = *($0)
	*($0) = $5
	if ( ((int_32)$6 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($7 + [12])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $3)
	
.LABEL $label$7
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $89(*($7 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [16])
	return $4
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $102($7)
	
.LABEL $label$1
	CALL $103($7)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $89 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $88 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10732])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10624])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10432]
	$1 = (((int_32)$2 * (int_32)[12]) + [10432])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10726]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10728])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10726]) = [1]
	$7 = ($7 << [16])
	*([0] + [10728]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10728])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10728]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10726]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10726]) = [1]
	$3 = ($3 << [16])
	*([0] + [10728]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10728])
	
.LABEL $label$8
	*([0] + [10728]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $86($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10640])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $85([2240], $0)
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1344])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1344])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [1344])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [1344])
	CALL memcpy(($0 + [24]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [96])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [100])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [104])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [108])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [112])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [116])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [120])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [124])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [128])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [132])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [136])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [140])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [144])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [148])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [152])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [156])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [160])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [164])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [168])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [172])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [176])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [180])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [184])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [188])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [192])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [196])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [200])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [204])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [208])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [212])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [216])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [220])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [224])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [228])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [232])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [236])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [240])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [244])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [248])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [252])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [256])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [1344])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [1344])
	CALL memcpy($2, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [272])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1344])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	*($4) = *($1)
	*($4 + [12]) = ($3 + [9])
	*($4 + [8]) = ($3 + [8])
	*($4 + [16]) = ($3 + [10])
	*($4 + [20]) = ($3 + [11])
	*($4 + [24]) = ($3 + [12])
	*($4 + [28]) = ($3 + [13])
	*($4 + [32]) = ($3 + [14])
	*($4 + [36]) = ($3 + [15])
	*($4 + [40]) = ($3 + [16])
	*($4 + [44]) = ($3 + [17])
	*($4 + [48]) = ($3 + [18])
	*($4 + [52]) = ($3 + [19])
	*($4 + [56]) = ($3 + [20])
	*($4 + [60]) = ($3 + [21])
	*($4 + [64]) = ($3 + [22])
	*($4 + [68]) = ($3 + [23])
	*($4 + [72]) = ($3 + [24])
	*($4 + [76]) = ($3 + [25])
	*($4 + [80]) = ($3 + [26])
	*($4 + [84]) = ($3 + [27])
	*($4 + [88]) = ($3 + [28])
	*($4 + [92]) = ($3 + [29])
	*($4 + [96]) = ($3 + [30])
	*($4 + [100]) = ($3 + [31])
	*($4 + [104]) = ($3 + [32])
	*($4 + [108]) = ($3 + [33])
	*($4 + [112]) = ($3 + [34])
	*($4 + [116]) = ($3 + [35])
	*($4 + [120]) = ($3 + [36])
	*($4 + [124]) = ($3 + [37])
	*($4 + [128]) = ($3 + [38])
	*($4 + [132]) = ($3 + [39])
	*($4 + [136]) = ($3 + [40])
	*($4 + [140]) = ($3 + [41])
	*($4 + [144]) = ($3 + [42])
	*($4 + [148]) = ($3 + [43])
	*($4 + [152]) = ($3 + [44])
	*($4 + [156]) = ($3 + [45])
	*($4 + [160]) = ($3 + [46])
	*($4 + [164]) = ($3 + [47])
	*($4 + [168]) = ($3 + [48])
	*($4 + [172]) = ($3 + [49])
	*($4 + [176]) = ($3 + [50])
	*($4 + [180]) = ($3 + [51])
	*($4 + [184]) = ($3 + [52])
	*($4 + [188]) = ($3 + [53])
	*($4 + [192]) = ($3 + [54])
	*($4 + [196]) = ($3 + [55])
	*($4 + [200]) = ($3 + [56])
	*($4 + [204]) = ($3 + [57])
	*($4 + [208]) = ($3 + [58])
	*($4 + [212]) = ($3 + [59])
	*($4 + [216]) = ($3 + [60])
	*($4 + [220]) = ($3 + [61])
	*($4 + [224]) = ($3 + [62])
	*($4 + [228]) = ($3 + [63])
	*($4 + [232]) = ($3 + [64])
	*($4 + [236]) = ($3 + [65])
	*($4 + [240]) = ($3 + [66])
	*($4 + [244]) = ($3 + [67])
	*($4 + [248]) = ($3 + [68])
	*($4 + [252]) = ($3 + [69])
	*($4 + [256]) = ($3 + [70])
	*($4 + [260]) = ($3 + [71])
	*($4 + [264]) = ($3 + [72])
	*($4 + [268]) = ($3 + [73])
	CALL $82(($4 + [8]), $4)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [1344])
	CALL memcpy(($3 + [80]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [1344])
	CALL memcpy(($3 + [112]), *($1 + [4]), [8])
	$0 = (*($1 + [4]) + [8])
	*($1 + [4]) = $0
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $0) > (uint_32)[7]), [1344])
	CALL memcpy(($3 + [120]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	*([0] + [4]) = ($4 + [272])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	*((($11 + [32]) + [12])) = *(($1 + [20]))
	*(($6 = (($11 + [32]) + [8]))) = *(($1 + [16]))
	*($11 + [32]) = *($1 + [8])
	*($11 + [36]) = *(($1 + [12]))
	$2 = *($1)
	$4 = *($1 + [32])
	$3 = *($1 + [24])
	$8 = [0]
	*($11 + [16]) = [0]
	*($11 + [20]) = [0]
	*($11 + [24]) = [0]
	$5 = (*(($1 + [40])) - *($1 + [36]))
	$9 = ((int_32)$5 / (int_32)[40])
	if ( ($5 == 0) ){ goto $label$5 }
	if ( ((uint_32)$9 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = CALL $88($5)
	*(($11 + [24])) = ($8 + ((int_32)$9 * (int_32)[40]))
	*($11 + [16]) = $8
	*($11 + [20]) = $8
	$5 = *(($1 + [36]))
	$1 = (*(($1 + [40])) - $5)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($8, $5, $1)
	$1 = ($8 + ((int_32)((uint_32)$1 / (uint_32)[40]) * (int_32)[40]))
	*($11 + [20]) = $1
	$9 = $8
	$8 = $1
	$10 = $9
	goto $label$3 
	
.LABEL $label$5
	$9 = [0]
	$10 = [0]
	goto $label$3 
	
.LABEL $label$4
	$9 = $8
	$10 = $8
	
.LABEL $label$3
	*((($11 + [48]) + [8])) = *($6)
	*($11 + [48]) = *($11 + [32])
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$5 = (*(*($0)) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$6 }
	$1 = *((*($5) + $1))
	
.LABEL $label$6
	*(($7 = (($11 + [80]) + [8]))) = *((($11 + [48]) + [8]))
	*($11 + [80]) = *($11 + [48])
	*($11 + [64]) = [0]
	*($11 + [72]) = [0]
	*($11 + [68]) = [0]
	$0 = ($8 - $10)
	$6 = ((int_32)$0 / (int_32)[40])
	if ( ($0 == 0) ){ goto $label$7 }
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$1 }
	$0 = CALL $88($0)
	*(($11 + [72])) = ($0 + ((int_32)$6 * (int_32)[40]))
	*($11 + [64]) = $0
	*($11 + [68]) = $0
	$8 = ($8 - $9)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($0, $9, $8)
	*($11 + [68]) = ($0 + ((int_32)((uint_32)$8 / (uint_32)[40]) * (int_32)[40]))
	
.LABEL $label$7
	*(($11 + [8])) = *($7)
	*($11) = *($11 + [80])
	CALL void $5((int_32 $2), (int_64 $11), (int_32 $3), (int_64 $4), (int_32 ($11 + [64])), (int_32 $1))
	$1 = *($11 + [64])
	if ( ($1 == 0) ){ goto $label$8 }
	*($11 + [68]) = $1
	CALL $89($1)
	
.LABEL $label$8
	$1 = *($11 + [16])
	if ( ($1 == 0) ){ goto $label$9 }
	*($11 + [20]) = $1
	CALL $89($1)
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [96])
	return (unreachable)
	
.LABEL $label$2
	CALL $110(($11 + [16]))
	
.LABEL $label$1
	CALL $110(($11 + [64]))
	(unreachable)
}

void .FUNC $144 ()
{
	(unreachable)
}

int_32 .FUNC strtoul (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)4294967295)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return (CASTING uint_32)(uint_64 $3)
}

int_32 .FUNC __toread (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [32])) = (int_64)1398362884
	*($9 + [24]) = (int_64)0
	*($9 + [16]) = (int_64)0
	CALL eosio_assert([1], [416])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$7 = [0]
	
.LABEL $label$4
	CALL eosio_assert($7, [480])
	*($9 + [40]) = [0]
	*($9 + [84]) = $5
	*($9 + [80]) = $5
	*($9 + [88]) = ($5 + $3)
	*($9 + [48]) = ($9 + [80])
	*($9 + [64]) = ($9 + [16])
	CALL $83(($9 + [64]), ($9 + [48]))
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($5)
	
.LABEL $label$9
	*(($1 = (($9 + [48]) + [8]))) = *(($9 + [32]))
	$6 = *($9 + [16])
	*($9 + [48]) = *($9 + [24])
	$5 = *(($9 + [40]))
	*((($9 + [64]) + [8])) = *($1)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$10 }
	$8 = *((*($1) + $8))
	
.LABEL $label$10
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*(($9 + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9) = $4
	CALL void $1((int_32 $6), (int_64 $9), (int_32 ($5 & [255])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [288])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2144]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2160]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [2176])
	
.LABEL $label$7
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [592]
	$7 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$19 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$14 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$22 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [608]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$22
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [1760]
	$7 = (int_64)0
	
.LOOP $label$29:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$30 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$3 = ($3 + [165])
	goto $label$31 
	
.LABEL $label$32
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$30
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$20 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [608]
	$7 = (int_64)0
	
.LOOP $label$33:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$38 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$37 }
	$3 = ($3 + [165])
	goto $label$36 
	
.LABEL $label$38
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$37
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$36
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$35
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$34
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$33 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$20 }
	
.LABEL $label$21
	*(($9 + [128])) = $0
	*(($9 + [136])) = (int_64)-1
	*(($9 + [144])) = (int_64)0
	*(($9 + [152])) = [0]
	*($9 + [120]) = $0
	*($9 + [112]) = $0
	*($9 + [160]) = $0
	*(($9 + [168])) = $0
	*(($9 + [176])) = (int_64)-1
	*(($9 + [184])) = [0]
	*(($9 + [188])) = [0]
	*(($9 + [192])) = [0]
	*($9 + [200]) = $0
	*(($9 + [208])) = $0
	*(($9 + [216])) = (int_64)-1
	*(($9 + [224])) = [0]
	*(($9 + [228])) = [0]
	*(($9 + [232])) = [0]
	*(($9 + [236])) = [0]
	*($9 + [240]) = (int_64)1
	*($9 + [248]) = (int_64)2
	*($9 + [256]) = (int_64)3
	*($9 + [264]) = (int_64)4
	*($9 + [272]) = (int_64)362174300676
	*($9 + [280]) = (int_64)1397703940
	*($9 + [104]) = [2]
	*($9 + [108]) = [0]
	*($9 + [48 align=4]) = *($9 + [104])
	CALL $78(($9 + [112]), ($9 + [48]))
	CALL $77(($9 + [112]))
	
.LABEL $label$20
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$39 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [608]
	$7 = (int_64)0
	
.LOOP $label$40:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$45 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$44 }
	$3 = ($3 + [165])
	goto $label$43 
	
.LABEL $label$45
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$44
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$43
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$42
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$41
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$40 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$39 }
	*(($9 + [128])) = $1
	*(($9 + [136])) = (int_64)-1
	*(($9 + [144])) = (int_64)0
	*(($9 + [152])) = [0]
	*($9 + [120]) = $1
	*($9 + [112]) = $1
	*($9 + [160]) = $1
	*(($9 + [168])) = $1
	*(($9 + [176])) = (int_64)-1
	*(($9 + [184])) = [0]
	*(($9 + [188])) = [0]
	*(($9 + [192])) = [0]
	*($9 + [200]) = $1
	*(($9 + [208])) = $1
	*(($9 + [216])) = (int_64)-1
	*(($9 + [224])) = [0]
	*(($9 + [228])) = [0]
	*(($9 + [232])) = [0]
	*(($9 + [236])) = [0]
	*($9 + [240]) = (int_64)1
	*($9 + [248]) = (int_64)2
	*($9 + [256]) = (int_64)3
	*($9 + [264]) = (int_64)4
	*($9 + [272]) = (int_64)362174300676
	*($9 + [280]) = (int_64)1397703940
	if ( ((int_64)$2 > (int_64)4849591922708621199) ){ goto $label$51 }
	if ( ((int_64)$2 == (int_64)-7297674945816461312) ){ goto $label$50 }
	if ( ((int_64)$2 == (int_64)-4992623624440512512) ){ goto $label$49 }
	if ( ((int_64)$2 != (int_64)4229853544465301504) ){ goto $label$46 }
	*($9 + [60]) = [0]
	*($9 + [56]) = [3]
	*($9 + [40 align=4]) = *($9 + [56])
	CALL $76(($9 + [112]), ($9 + [40]))
	goto $label$46 
	
.LABEL $label$51
	if ( ((int_64)$2 == (int_64)4849591922708621200) ){ goto $label$48 }
	if ( ((int_64)$2 == (int_64)4849591930563466240) ){ goto $label$47 }
	if ( ((int_64)$2 != (int_64)4923676291099525120) ){ goto $label$46 }
	*($9 + [76]) = [0]
	*($9 + [72]) = [4]
	*($9 + [24 align=4]) = *($9 + [72])
	CALL $74(($9 + [112]), ($9 + [24]))
	goto $label$46 
	
.LABEL $label$50
	*($9 + [100]) = [0]
	*($9 + [96]) = [5]
	*($9) = *($9 + [96])
	CALL $71(($9 + [112]), $9)
	goto $label$46 
	
.LABEL $label$49
	*($9 + [68]) = [0]
	*($9 + [64]) = [6]
	*($9 + [32 align=4]) = *($9 + [64])
	CALL $75(($9 + [112]), ($9 + [32]))
	goto $label$46 
	
.LABEL $label$48
	*($9 + [84]) = [0]
	*($9 + [80]) = [7]
	*($9 + [16 align=4]) = *($9 + [80])
	CALL $73(($9 + [112]), ($9 + [16]))
	goto $label$46 
	
.LABEL $label$47
	*($9 + [92]) = [0]
	*($9 + [88]) = [8]
	*($9 + [8 align=4]) = *($9 + [88])
	CALL $72(($9 + [112]), ($9 + [8]))
	
.LABEL $label$46
	CALL $77(($9 + [112]))
	
.LABEL $label$39
	*([0] + [4]) = ($9 + [288])
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [192])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	CALL memset(($5 + [40]), [0], [34])
	CALL eosio_assert(((uint_32)$1 > (uint_32)[33]), [1344])
	CALL memcpy(($5 + [40]), $3, [34])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	CALL memcpy(($5 + [78]), ($5 + [40]), [34])
	CALL memcpy(($5 + [112]), ($5 + [78]), [34])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL memcpy(($5 + [152]), ($5 + [112]), [34])
	CALL memcpy(($5 + [6]), ($5 + [152]), [34])
	CALL void $1((int_32 ($5 + [6])), (int_32 $4))
	*([0] + [4]) = ($5 + [192])
	return [1]
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [16])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	CALL eosio_assert([1], [416])
	$3 = (int_64)5462355
	
.LOOP $label$5:
	$4 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($4, [480])
	*(($5 + [40])) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $79(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$8 }
	CALL free($0)
	
.LABEL $label$8
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $80(($5 + [64]), $5)
	$1 = *(($5 + [36]))
	if ( ($1 == 0) ){ goto $label$9 }
	*(($5 + [40])) = $1
	CALL $89($1)
	
.LABEL $label$9
	*([0] + [4]) = ($5 + [96])
	return [1]
}

int_32 .FUNC $77 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [116])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $89($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($0 + [112]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $89($4)
	
.LABEL $label$1
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$6 }
	$3 = ($0 + [76])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $89($2)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($0 + [72]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $1
	
.LABEL $label$7
	*($3) = $1
	CALL $89($4)
	
.LABEL $label$6
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$11 }
	$3 = ($0 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	CALL $89($2)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($0 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $1
	
.LABEL $label$12
	*($3) = $1
	CALL $89($4)
	
.LABEL $label$11
	return $0
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [416])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [480])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [1344])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [1344])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [1344])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $88(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $110($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $89($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $89($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $88(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $110($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $89($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $89($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $88(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $110($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $89(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $89($4)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1344])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [1344])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1344])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1344])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [1344])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1344])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [1344])
	CALL memcpy(($0 + [32]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	CALL $31(*($1), ($0 + [36]))
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)((int_32)($7 - $6) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$8 = *($0)
	$2 = ((int_32)($6 - $8) / (int_32)[40])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[107374183]) ){ goto $label$3 }
	$6 = [107374182]
	$7 = ((int_32)($7 - $8) / (int_32)[40])
	if ( ((uint_32)$7 > (uint_32)[53687090]) ){ goto $label$6 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$7 = CALL $88(((int_32)$6 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = (int_64)0
	*($6 + [24]) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 = ($6 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [416])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [480])
	$6 = (*($8) + [40])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $110($0)
	
.LABEL $label$2
	$3 = ($7 + ((int_32)$6 * (int_32)[40]))
	$2 = ($7 + ((int_32)$2 * (int_32)[40]))
	$7 = $2
	
.LOOP $label$13:
	*($7) = (int_64)0
	*($7 + [24]) = (int_64)0
	*(($7 + [16])) = (int_64)0
	*(($7 + [8])) = (int_64)0
	*(($6 = ($7 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [416])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$8 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$8 = [0]
	
.LABEL $label$14
	CALL eosio_assert($8, [480])
	$7 = ($7 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$13 }
	$6 = *($0)
	$4 = ($0 + [4])
	$8 = (*($4) - $6)
	$1 = ($2 + ((int_32)((int_32)$8 / (int_32)[-40]) * (int_32)[40]))
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$19 }
	CALL memcpy($1, $6, $8)
	$6 = *($0)
	
.LABEL $label$19
	*($0) = $1
	*($4) = $7
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $89($6)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [1344])
	CALL memcpy($1, *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1344])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1344])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1344])
	CALL memcpy(($1 + [20]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1344])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1344])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $31($0, ($1 + [36]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1344])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1344])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1344])
	CALL memcpy(($1 + [12]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1344])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1344])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1344])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1360])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$5 = *($1 + [4])
	$3 = ((int_32)($5 - $4) / (int_32)[40])
	$7 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$7 <= (uint_32)$3) ){ goto $label$4 }
	CALL $32($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$5 }
	$5 = ($4 + ((int_32)$7 * (int_32)[40]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	CALL $33($0, $4)
	$4 = ($4 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

void .FUNC frexpl (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$5 = ($4) & [32767]
	if ( ((int_32)$5) == (int_32)[32767]) ){ goto $label$1 }
	if ( $5 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($6, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL frexpl(($6 + [16]), *($6), *(($6 + [8])), $3)
	$4 = (*($3) + [-120])
	$2 = *($6 + [24])
	$1 = *($6 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($4 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($4 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	*($3) = $4
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($6 + [32])
}