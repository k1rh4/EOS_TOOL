(data (i32.const 4) "@h\00\00")
(data (i32.const 16) "05\00")
(data (i32.const 32) "01\00")
(data (i32.const 48) "03\00")
(data (i32.const 64) "07\00")
(data (i32.const 80) "09\00")
(data (i32.const 96) "02\00")
(data (i32.const 112) "04\00")
(data (i32.const 128) "06\00")
(data (i32.const 144) "08\00")
(data (i32.const 160) "10\00")
(data (i32.const 176) "onerror\00")
(data (i32.const 192) "eosio\00")
(data (i32.const 208) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 272) "read\00")
(data (i32.const 288) "get\00")
(data (i32.const 304) "session\00")
(data (i32.const 320) " | upper_bound gameid: \00")
(data (i32.const 352) "cannot pass end iterator to erase\00")
(data (i32.const 400) "cannot increment end iterator\00")
(data (i32.const 432) "betpk\00")
(data (i32.const 448) "object passed to erase is not in multi_index\00")
(data (i32.const 496) "cannot erase objects in table of another contract\00")
(data (i32.const 560) "attempt to remove object that was not in multi_index\00")
(data (i32.const 624) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 688) "error reading iterator\00")
(data (i32.const 720) "invalid symbol name\00")
(data (i32.const 752) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 816) "player already exist\00")
(data (i32.const 848) "cannot create objects in table of another contract\00")
(data (i32.const 912) "write\00")
(data (i32.const 928) "invalid quantity\00")
(data (i32.const 960) "must positive quantity\00")
(data (i32.const 1008) "must have bets in memo\00")
(data (i32.const 1040) "invalid asset symbol\00")
(data (i32.const 1072) "this one is not exist\00")
(data (i32.const 1104) "game dose not open\00")
(data (i32.const 1136) "active\00")
(data (i32.const 1152) "eosio.token\00")
(data (i32.const 1168) "transfer\00")
(data (i32.const 1184) "eoscrownhgb1\00")
(data (i32.const 1200) "this phase is betting\00")
(data (i32.const 1232) "cannot pass end iterator to modify\00")
(data (i32.const 1280) "already opened\00")
(data (i32.const 1296) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1360) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1424) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1472) "object passed to modify is not in multi_index\00")
(data (i32.const 1520) "cannot modify objects in table of another contract\00")
(data (i32.const 1584) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1648) "game dose not begin\00")
(data (i32.const 1680) "time is out\00")
(data (i32.const 1696) "only owner can start\00")
(data (i32.const 1728) "this phase already exist\00")
(data (i32.const 1760) " | itr: \00")
(data (i32.const 1776) " | invalid time\00")
(data (i32.const 1792) "invalid time\00")
(data (i32.const 10208) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$7 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$8 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$10 (param i32)))
(import "env" "db_idx64_store" (func $fimport$11 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$15 (param i32)))
(import "env" "db_store_i64" (func $fimport$16 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$17 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$18 (param i32 i32)))
(import "env" "memcpy" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$21 (param i32)))
(import "env" "printui" (func $fimport$22 (param i64)))
(import "env" "read_action_data" (func $fimport$23 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$24 (param i64)))
(import "env" "require_auth2" (func $fimport$25 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$26 (param i64)))
(import "env" "send_inline" (func $fimport$27 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z12string2floatPKc" (func $5))
(export "_Z7atof_myPKc" (func $6))
(export "_Z5splitNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_" (func $7))
(export "_Z8match2veNSt3__16vectorIyNS_9allocatorIyEEEES3_" (func $9))
(export "_Z6settle7BET_NUMNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_NS0_6vectorIS6_NS4_IS6_EEEES6_y" (func $10))
(export "_Z9getbetnumy" (func $12))
(export "_Z8parsebetNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEEyS8_S8_" (func $14))
(export "apply" (func $17))
(export "malloc" (func $90))
(export "free" (func $93))
(export "memchr" (func $106))
(export "memcmp" (func $107))
(export "strlen" (func $108))
(table $0 8 8 anyfunc)
(elem (i32.const 0) $109 $22 $28 $18 $20 $24 $26 $29)



void .FUNC $98 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $94($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $95($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $94(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $95($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $94 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10300])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $95 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $96 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $98($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $91([1808], $0)
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $92($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10208])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $92 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10294]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10296])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10294]) = [1]
	$7 = ($7 << [16])
	*([0] + [10296]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10296])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10296]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10294]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10294]) = [1]
	$3 = ($3 << [16])
	*([0] + [10296]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10296])
	
.LABEL $label$8
	*([0] + [10296]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10192])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10000]
	$1 = (((int_32)$2 * (int_32)[12]) + [10000])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [496])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$4 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($4)) == (int_64)$2) ){ goto $label$1 }
	$7 = $4
	$8 = ($4 + [-24])
	$4 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [560])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*(($4 + [44])) & [1]) == 0) ){ goto $label$7 }
	CALL $95(*(($4 + [52])))
	
.LABEL $label$7
	if ( ((*(($4 + [32])) & [1]) == 0) ){ goto $label$8 }
	CALL $95(*(($4 + [40])))
	
.LABEL $label$8
	CALL $95($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	if ( ((*(($4 + [44])) & [1]) == 0) ){ goto $label$11 }
	CALL $95(*(($4 + [52])))
	
.LABEL $label$11
	if ( ((*(($4 + [32])) & [1]) == 0) ){ goto $label$12 }
	CALL $95(*(($4 + [40])))
	
.LABEL $label$12
	CALL $95($4)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [3])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($7 >> [2])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $94(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $103($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [3]))
	$2 = ($7 + ($4 << [3]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [3]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $95($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [288])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [3])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $49($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [3]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $7) > (uint_32)[7]), [272])
	CALL memcpy($4, *($5), [8])
	$7 = (*($5) + [8])
	*($5) = $7
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*(($1 + [84])) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [496])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [560])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [8])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [12])) = $6
	CALL $95($6)
	
.LABEL $label$7
	CALL $95($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [8])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $6
	CALL $95($6)
	
.LABEL $label$10
	CALL $95($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [88]))
	$7 = *($1 + [92])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229821232054272000, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx64_remove($7)
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $42 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$7 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [400])
	$8 = *($0 + [4])
	$6 = *($8 + [92])
	if ( ((int_32)$6 != (int_32)[-1]) ){ goto $label$1 }
	$6 = *(*($0))
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)4229821232054272000, ($9 + [8]), *($8))
	*(*(($0 + [4])) + [92]) = $6
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($6, ($9 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$3 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$4:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$3 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*(($7 + [84])) == (int_32)$2), [624])
	goto $label$5 
	
.LABEL $label$6
	$7 = CALL $44($2, CALL $fimport$5(*($2), *($2 + [8]), (int_64)4229821232054272000, $3))
	CALL eosio_assert(((int_32)*($7 + [84]) == (int_32)$2), [624])
	
.LABEL $label$5
	*($7 + [92]) = $1
	
.LABEL $label$2
	*(($0 + [4])) = $7
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)4229821232054272000, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*(($2 + [84])) == (int_32)$4), [624])
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$8 = CALL db_find_i64(*($4), *($4 + [8]), (int_64)4229821232054272000, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $44($4, $8)
	CALL eosio_assert(((int_32)*($2 + [84]) == (int_32)$4), [624])
	
.LABEL $label$4
	*($2 + [92]) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [496])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [560])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $95(*(($4 + [24])))
	
.LABEL $label$7
	CALL $95($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL $95(*(($4 + [24])))
	
.LABEL $label$10
	CALL $95($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
	$7 = *(($1 + [56]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4992121823278661632, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx64_remove($7)
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $94(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $103($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $95($6)
	
.LABEL $label$11
	CALL $95($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $95($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [272])
	CALL memcpy($1, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $48($0, ($1 + [8]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [272])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [272])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [80]) = ((int_32)*($3 + [15]) != (int_32)[0])
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $45 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8 align=4]) = (int_64)0
	$2 = [0]
	*($0 + [32]) = [0]
	*($0 + [40]) = (int_64)0
	*(($0 + [16])) = [0]
	*(($3 = ($0 + [48]))) = (int_64)1414284548
	CALL eosio_assert([1], [752])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [720])
	*(($2 = ($0 + [72]))) = (int_64)1414284548
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [752])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [720])
	return $0
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [688])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $94([96])
	$4 = CALL $45($6)
	*($6 + [84]) = $0
	CALL $46(($8 + [32]), $4)
	*($6 + [92]) = [-1]
	*($6 + [88]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [88])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $47(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $95($7)
	
.LABEL $label$10
	CALL $95($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($6 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $94(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $103($0)
	
.LABEL $label$1
	$6 = ($4 + ((int_32)$2 * (int_32)[12]))
	CALL $104($6, $1)
	$2 = ($4 + ((int_32)$5 * (int_32)[12]))
	$3 = ($6 + [12])
	$5 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$1 = ([0] - $5)
	$5 = ($4 + [-12])
	
.LOOP $label$7:
	*(($6 + [-12])) = *($5)
	$4 = ($5 + [8])
	*(($6 + [-4])) = *($4)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	$6 = ($6 + [-12])
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	$6 = ([0] - $4)
	$5 = ($5 + [-12])
	
.LOOP $label$9:
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $95(*(($5 + [8])))
	
.LABEL $label$10
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $6) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $95($4)
	
.LABEL $label$11
	(unreachable)
}

int_64 .FUNC _Z8match2veNSt3__16vectorIyNS_9allocatorIyEEEES3_ (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	$6 = (int_64)0
	$2 = *($0 + [4])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$1 }
	$1 = *($1 + [4])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$6 = (int_64)0
	
.LOOP $label$2:
	$5 = *($4)
	$0 = $3
	
.LOOP $label$4:
	if ( ((int_64)$5 == (int_64)*($0)) ){ goto $label$3 }
	$0 = ($0 + [8])
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$4 }
	$4 = ($4 + [8])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$1 }
	$6 = ((int_64)$6 + (int_64)1)
	$4 = ($4 + [8])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	return $6
}

int_64 .FUNC _Z7atof_myPKc (int_32 $0)
{
	int_32 $1
	float_64 $2
	int_32 $3
	int_32 $4
	float_64 $5
	float_64 $6
	int_32 $7
	
.LOOP $label$2:
	$4 = *($0)
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$1 }
	$0 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$1
	if ( ((int_32)$4 != (int_32)[45]) ){ goto $label$4 }
	$0 = ($0 + [1])
	$4 = *($0)
	$5 = (float_64)-1
	goto $label$3 
	
.LABEL $label$4
	$5 = (float_64)1
	
.LABEL $label$3
	$2 = (float_64)0
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$5 }
	$0 = ($0 + [1])
	$2 = (float_64)0
	
.LOOP $label$7:
	$2 = ((float_64)((float_64)((float_64)$2 * (float_64)(float_64)10) + (float_64)(CASTING float_64)(int_32 int_32(($4 << [24]) >> [24]))) + (float_64)(float_64)-48)
	$1 = ($0 + [1])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)[46]) ){ goto $label$6 }
	$0 = $1
	if ( ((($4 + [-48]) & [255]) <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	$0 = ( $1 ? ($1 + [-1]) : ((int_32)$4 == (int_32)[46]) )
	$4 = *($0)
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$8 }
	$6 = (float_64)10
	
.LOOP $label$9:
	$2 = ((float_64)$2 + (float_64)((float_64)(CASTING float_64)(int_32 (int_32(($4 << [24]) >> [24]) + [-48])) / (float_64)$6))
	$6 = ((float_64)$6 * (float_64)(float_64)10)
	$0 = ($0 + [1])
	$4 = *($0)
	if ( ((($4 + [-48]) & [255]) <= [10]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ((int_32)(($4 | [32]) & [255]) != (int_32)[101]) ){ goto $label$10 }
	$4 = [0]
	$1 = *($0 + [1])
	if ( ((int_32)$1 != (int_32)[43]) ){ goto $label$12 }
	$7 = ($0 + [2])
	$1 = *($0 + [2])
	if ( ((uint_32)(($1 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$11 }
	$4 = [0]
	
.LOOP $label$13:
	$4 = ((((int_32)$4 * (int_32)[10]) + int_32(($1 << [24]) >> [24])) + [-48])
	$7 = ($7 + [1])
	$1 = *($7)
	if ( ((($1 + [-48]) & [255]) <= [10]) ){ goto $label$13 }
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$11 }
	
.LOOP $label$14:
	$2 = ((float_64)$2 * (float_64)(float_64)10)
	$0 = ((int_32)$4 > (int_32)[1])
	$3 = ($4 + [-1])
	$4 = $3
	if ( $0 ){ goto $label$14 }
	$4 = $3
	goto $label$11 
	
.LABEL $label$12
	$7 = ($0 + [1])
	
.LABEL $label$11
	if ( ((int_32)($1 & [255]) != (int_32)[45]) ){ goto $label$10 }
	$0 = *($7 + [1])
	if ( ((uint_32)(($0 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$1 = ($7 + [2])
	
.LOOP $label$16:
	$4 = ((((int_32)$4 * (int_32)[10]) + int_32(($0 << [24]) >> [24])) + [-48])
	$0 = *($1)
	$1 = ($1 + [1])
	if ( ((($0 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	
.LABEL $label$15
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$10 }
	$0 = ($4 + [1])
	
.LOOP $label$17:
	$2 = ((float_64)$2 / (float_64)(float_64)10)
	$0 = ($0 + [-1])
	if ( ((int_32)$0 > (int_32)[1]) ){ goto $label$17 }
	
.LABEL $label$10
	$2 = ((float_64)((float_64)$5 * (float_64)$2) * (float_64)(float_64)100)
	
.LABEL $label$5
	return $2
}

void .FUNC _Z5splitNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$17 = (*([0] + [4]) - [16])
	*([0] + [4]) = $17
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$16 = *($2)
	$7 = ($16 & [1])
	$3 = ($2 + [1])
	CALL $100($1, ( *($2 + [8]) ? $3 : $7 ), ( *($2 + [4]) ? uint_32($16 >> [1]) : $7 ))
	$16 = *($1)
	if ( ($16 & [1]) ){ goto $label$2 }
	$12 = uint_32($16 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$12 = *($1 + [4])
	
.LABEL $label$1
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$6 }
	$4 = ($1 + [1])
	$5 = [0]
	$10 = ($2 + [4])
	$11 = ($2 + [8])
	if ( (($16 & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$18 = [2]
	goto $label$3 
	
.LABEL $label$5
	$18 = [14]
	goto $label$3 
	
.LABEL $label$4
	$18 = [4]
	
.LABEL $label$3
	
.LOOP $label$7:
	goto $label$47 
	
.LABEL $label$49
	$16 = $8
	$18 = [13]
	goto $label$7 
	
.LABEL $label$48
	$16 = ( [-1] ? ($16 - $13) : ((int_32)$16 == (int_32)$8) )
	$18 = [0]
	goto $label$7 
	
.LABEL $label$47
	if ( ((uint_32)$16 >= (uint_32)$12) ){ goto $label$23 }
	$18 = [15]
	goto $label$7 
	
.LABEL $label$46
	CALL $105($17, $1, $5, ($16 - $5), $1)
	$7 = ($0 + [4])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)*(($0 + [8]))) ){ goto $label$12 }
	$18 = [16]
	goto $label$7 
	
.LABEL $label$45
	CALL $104($5, $17)
	*($7) = (*($7) + [12])
	goto $label$11 
	
.LABEL $label$44
	CALL $8($0, $17)
	$18 = [17]
	goto $label$7 
	
.LABEL $label$43
	$7 = *($2)
	if ( ($7 & [1]) ){ goto $label$10 }
	$18 = [22]
	goto $label$7 
	
.LABEL $label$42
	$7 = uint_32($7 >> [1])
	goto $label$9 
	
.LABEL $label$41
	$7 = *($10)
	$18 = [19]
	goto $label$7 
	
.LABEL $label$40
	$16 = ($16 + $7)
	if ( ((*($17) & [1]) == 0) ){ goto $label$8 }
	$18 = [20]
	goto $label$7 
	
.LABEL $label$39
	CALL $95(*(($17 + [8])))
	$18 = [21]
	goto $label$7 
	
.LABEL $label$38
	$5 = ($16 + [-1])
	$18 = [1]
	goto $label$7 
	
.LABEL $label$37
	$5 = ($5 + [1])
	if ( ((int_32)$5 >= (int_32)$12) ){ goto $label$19 }
	$18 = [3]
	goto $label$7 
	
.LABEL $label$36
	$16 = *($1)
	if ( ($16 & [1]) ){ goto $label$25 }
	$18 = [14]
	goto $label$7 
	
.LABEL $label$35
	$13 = $4
	$14 = uint_32(($16 & [254]) >> [1])
	if ( ($14 <= $5) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$34
	$13 = *(($1 + [8]))
	$14 = *(($1 + [4]))
	if ( ($14 <= $5) ){ goto $label$24 }
	$18 = [5]
	goto $label$7 
	
.LABEL $label$33
	$16 = $5
	$9 = ($7 & [1])
	$7 = *($2)
	$7 = ( *($10) ? uint_32($7 >> [1]) : $9 )
	if ( ($7 == 0) ){ goto $label$22 }
	$18 = [6]
	goto $label$7 
	
.LABEL $label$32
	$8 = ($13 + $14)
	$16 = $8
	$15 = ($13 + $5)
	$14 = ($8 - $15)
	if ( ((int_32)$14 < (int_32)$7) ){ goto $label$18 }
	$18 = [7]
	goto $label$7 
	
.LABEL $label$31
	$6 = ( *($11) ? $3 : $9 )
	$9 = *($6)
	$18 = [8]
	goto $label$7 
	
.LABEL $label$30
	$16 = (($14 - $7) + [1])
	if ( ($16 == 0) ){ goto $label$15 }
	$18 = [9]
	goto $label$7 
	
.LABEL $label$29
	$16 = CALL memchr($15, $9, $16)
	if ( ($16 == 0) ){ goto $label$14 }
	$18 = [10]
	goto $label$7 
	
.LABEL $label$28
	if ( (CALL memcmp($16, $6, $7) == 0) ){ goto $label$13 }
	$18 = [11]
	goto $label$7 
	
.LABEL $label$27
	$15 = ($16 + [1])
	$14 = ($8 - $15)
	if ( ((int_32)$14 >= (int_32)$7) ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$26
	*([0] + [4]) = ($17 + [16])
	return 
	
.LABEL $label$25
	$18 = [4]
	goto $label$7 
	
.LABEL $label$24
	$18 = [1]
	goto $label$7 
	
.LABEL $label$23
	$18 = [1]
	goto $label$7 
	
.LABEL $label$22
	$18 = [0]
	goto $label$7 
	
.LABEL $label$21
	$18 = [1]
	goto $label$7 
	
.LABEL $label$20
	$18 = [5]
	goto $label$7 
	
.LABEL $label$19
	$18 = [2]
	goto $label$7 
	
.LABEL $label$18
	$18 = [13]
	goto $label$7 
	
.LABEL $label$17
	$18 = [12]
	goto $label$7 
	
.LABEL $label$16
	$18 = [8]
	goto $label$7 
	
.LABEL $label$15
	$18 = [12]
	goto $label$7 
	
.LABEL $label$14
	$18 = [12]
	goto $label$7 
	
.LABEL $label$13
	$18 = [13]
	goto $label$7 
	
.LABEL $label$12
	$18 = [23]
	goto $label$7 
	
.LABEL $label$11
	$18 = [17]
	goto $label$7 
	
.LABEL $label$10
	$18 = [18]
	goto $label$7 
	
.LABEL $label$9
	$18 = [19]
	goto $label$7 
	
.LABEL $label$8
	$18 = [21]
	goto $label$7 
	$18
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_64 .FUNC _Z12string2floatPKc (int_32 $0)
{
	float_64 $1
	float_64 $2
	int_32 $3
	int_32 $4
	$4 = ((int_32)*($0) == (int_32)[45])
	$0 = ( ($0 + [1]) ? $0 : $4 )
	$2 = ( (float_64)-1 ? (float_64)1 : $4 )
	$3 = [0]
	$1 = (float_64)0
	
.LOOP $label$2:
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)[46]) ){ goto $label$3 }
	if ( ($4 == 0) ){ goto $label$1 }
	$4 = (int_32(($4 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$4 }
	$2 = ( ((float_64)$2 / (float_64)(float_64)10) ? $2 : $3 )
	$1 = ((float_64)((float_64)$1 * (float_64)(float_64)10) + (float_64)(CASTING float_64)(int_32 $4))
	
.LABEL $label$4
	$0 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$3 = [1]
	$0 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$1
	return ((float_64)$1 * (float_64)$2)
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _Z8parsebetNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEEyS8_S8_ (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [768])
	*([0] + [4]) = $8
	*($0 + [4 align=4]) = (int_64)0
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [12])) = (int_64)0
	*(($0 + [20])) = (int_64)0
	*(($0 + [36])) = (int_64)0
	*(($0 + [44])) = [0]
	*(($0 + [48])) = [0]
	*($0 + [52]) = [0]
	*(($0 + [56])) = [0]
	*(($0 + [60])) = [0]
	*($0 + [64]) = [0]
	*(($0 + [68])) = [0]
	*(($0 + [72])) = [0]
	*($0 + [76]) = [0]
	*(($0 + [80])) = [0]
	*(($0 + [84])) = [0]
	CALL _Z9getbetnumy(($8 + [752]), $2)
	if ( ((int_64)(((int_64)$2 & (int_64)1024) == 0) == 0) ){ goto $label$50 }
	if ( ((int_64)(((int_64)$2 & (int_64)2048) == 0) == 0) ){ goto $label$49 }
	if ( ((int_64)(((int_64)$2 & (int_64)4096) == 0) == 0) ){ goto $label$48 }
	if ( ((int_64)(((int_64)$2 & (int_64)8192) == 0) == 0) ){ goto $label$44 }
	if ( ((int_64)(((int_64)$2 & (int_64)16384) == 0) == 0) ){ goto $label$40 }
	if ( ((int_64)(((int_64)$2 & (int_64)32768) == 0) == 0) ){ goto $label$36 }
	if ( ((int_64)(((int_64)$2 & (int_64)65536) == 0) == 0) ){ goto $label$32 }
	if ( ((int_64)(((int_64)$2 & (int_64)131072) == 0) == 0) ){ goto $label$28 }
	if ( ((int_64)(((int_64)$2 & (int_64)262144) == 0) == 0) ){ goto $label$24 }
	if ( (int_64)(((int_64)$2 & (int_64)524288) == 0) ){ goto $label$11 }
	CALL $104(($8 + [48]), (*($4) + [108]))
	CALL $104(($8 + [32]), (*($3) + [108]))
	*($8 + [16]) = (int_64)0
	*($8 + [24]) = [0]
	$7 = (*($8 + [756]) - *($8 + [752]))
	$5 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$51 }
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$1 }
	$6 = CALL $94($7)
	*(($8 + [24])) = ($6 + ((int_32)$5 * (int_32)[12]))
	*($8 + [16]) = $6
	*($8 + [20]) = $6
	$5 = *($8 + [756])
	$7 = *($8 + [752])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$51 }
	
.LOOP $label$52:
	CALL $104($6, $7)
	$6 = (*($8 + [20]) + [12])
	*($8 + [20]) = $6
	$7 = ($7 + [12])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$52 }
	
.LABEL $label$51
	CALL $104($8, (*($1) + [108]))
	CALL _Z6settle7BET_NUMNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_NS0_6vectorIS6_NS4_IS6_EEEES6_y(($8 + [640]), [524288], ($8 + [48]), ($8 + [32]), ($8 + [16]), $8, $2)
	CALL $15($0, ($8 + [640]))
	CALL $16(($8 + [640]))
	if ( ((*($8) & [1]) == 0) ){ goto $label$53 }
	CALL $95(*($8 + [8]))
	
.LABEL $label$53
	$5 = *($8 + [16])
	if ( ($5 == 0) ){ goto $label$12 }
	$7 = *($8 + [20])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$14 }
	$6 = ([0] - $5)
	$7 = ($7 + [-12])
	
.LOOP $label$54:
	if ( ((*($7) & [1]) == 0) ){ goto $label$55 }
	CALL $95(*(($7 + [8])))
	
.LABEL $label$55
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $6) != (int_32)[-12]) ){ goto $label$54 }
	$7 = *($8 + [16])
	goto $label$13 
	
.LABEL $label$50
	CALL $104(($8 + [624]), *($4))
	CALL $104(($8 + [608]), *($3))
	*($8 + [592]) = (int_64)0
	*($8 + [600]) = [0]
	$7 = (*($8 + [756]) - *($8 + [752]))
	$5 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$56 }
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$10 }
	$6 = CALL $94($7)
	*(($8 + [600])) = ($6 + ((int_32)$5 * (int_32)[12]))
	*($8 + [592]) = $6
	*($8 + [596]) = $6
	$5 = *($8 + [756])
	$7 = *($8 + [752])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$56 }
	
.LOOP $label$57:
	CALL $104($6, $7)
	$6 = (*($8 + [596]) + [12])
	*($8 + [596]) = $6
	$7 = ($7 + [12])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$57 }
	
.LABEL $label$56
	CALL $104(($8 + [576]), *($1))
	CALL _Z6settle7BET_NUMNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_NS0_6vectorIS6_NS4_IS6_EEEES6_y(($8 + [640]), [1024], ($8 + [624]), ($8 + [608]), ($8 + [592]), ($8 + [576]), $2)
	CALL $15($0, ($8 + [640]))
	CALL $16(($8 + [640]))
	if ( ((*($8 + [576]) & [1]) == 0) ){ goto $label$58 }
	CALL $95(*($8 + [584]))
	
.LABEL $label$58
	$5 = *($8 + [592])
	if ( ($5 == 0) ){ goto $label$45 }
	$7 = *($8 + [596])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$47 }
	$6 = ([0] - $5)
	$7 = ($7 + [-12])
	
.LOOP $label$59:
	if ( ((*($7) & [1]) == 0) ){ goto $label$60 }
	CALL $95(*(($7 + [8])))
	
.LABEL $label$60
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $6) != (int_32)[-12]) ){ goto $label$59 }
	$7 = *($8 + [592])
	goto $label$46 
	
.LABEL $label$49
	CALL $104(($8 + [560]), (*($4) + [12]))
	CALL $104(($8 + [544]), (*($3) + [12]))
	*($8 + [528]) = (int_64)0
	*($8 + [536]) = [0]
	$7 = (*($8 + [756]) - *($8 + [752]))
	$5 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$61 }
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$9 }
	$6 = CALL $94($7)
	*(($8 + [536])) = ($6 + ((int_32)$5 * (int_32)[12]))
	*($8 + [528]) = $6
	*($8 + [532]) = $6
	$5 = *($8 + [756])
	$7 = *($8 + [752])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$61 }
	
.LOOP $label$62:
	CALL $104($6, $7)
	$6 = (*($8 + [532]) + [12])
	*($8 + [532]) = $6
	$7 = ($7 + [12])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$62 }
	
.LABEL $label$61
	CALL $104(($8 + [512]), (*($1) + [12]))
	CALL _Z6settle7BET_NUMNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_NS0_6vectorIS6_NS4_IS6_EEEES6_y(($8 + [640]), [2048], ($8 + [560]), ($8 + [544]), ($8 + [528]), ($8 + [512]), $2)
	CALL $15($0, ($8 + [640]))
	CALL $16(($8 + [640]))
	if ( ((*($8 + [512]) & [1]) == 0) ){ goto $label$63 }
	CALL $95(*($8 + [520]))
	
.LABEL $label$63
	$5 = *($8 + [528])
	if ( ($5 == 0) ){ goto $label$41 }
	$7 = *($8 + [532])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$43 }
	$6 = ([0] - $5)
	$7 = ($7 + [-12])
	
.LOOP $label$64:
	if ( ((*($7) & [1]) == 0) ){ goto $label$65 }
	CALL $95(*(($7 + [8])))
	
.LABEL $label$65
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $6) != (int_32)[-12]) ){ goto $label$64 }
	$7 = *($8 + [528])
	goto $label$42 
	
.LABEL $label$48
	CALL $104(($8 + [496]), (*($4) + [24]))
	CALL $104(($8 + [480]), (*($3) + [24]))
	*($8 + [464]) = (int_64)0
	*($8 + [472]) = [0]
	$7 = (*($8 + [756]) - *($8 + [752]))
	$5 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$66 }
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$8 }
	$6 = CALL $94($7)
	*(($8 + [472])) = ($6 + ((int_32)$5 * (int_32)[12]))
	*($8 + [464]) = $6
	*($8 + [468]) = $6
	$5 = *($8 + [756])
	$7 = *($8 + [752])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$66 }
	
.LOOP $label$67:
	CALL $104($6, $7)
	$6 = (*($8 + [468]) + [12])
	*($8 + [468]) = $6
	$7 = ($7 + [12])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$67 }
	
.LABEL $label$66
	CALL $104(($8 + [448]), (*($1) + [24]))
	CALL _Z6settle7BET_NUMNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_NS0_6vectorIS6_NS4_IS6_EEEES6_y(($8 + [640]), [4096], ($8 + [496]), ($8 + [480]), ($8 + [464]), ($8 + [448]), $2)
	CALL $15($0, ($8 + [640]))
	CALL $16(($8 + [640]))
	if ( ((*($8 + [448]) & [1]) == 0) ){ goto $label$68 }
	CALL $95(*($8 + [456]))
	
.LABEL $label$68
	$5 = *($8 + [464])
	if ( ($5 == 0) ){ goto $label$37 }
	$7 = *($8 + [468])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$39 }
	$6 = ([0] - $5)
	$7 = ($7 + [-12])
	
.LOOP $label$69:
	if ( ((*($7) & [1]) == 0) ){ goto $label$70 }
	CALL $95(*(($7 + [8])))
	
.LABEL $label$70
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $6) != (int_32)[-12]) ){ goto $label$69 }
	$7 = *($8 + [464])
	goto $label$38 
	
.LABEL $label$47
	$7 = $5
	
.LABEL $label$46
	*($8 + [596]) = $5
	CALL $95($7)
	
.LABEL $label$45
	if ( ((*($8 + [608]) & [1]) == 0) ){ goto $label$71 }
	CALL $95(*($8 + [616]))
	
.LABEL $label$71
	if ( ((*($8 + [624]) & [1]) == 0) ){ goto $label$11 }
	CALL $95(*($8 + [632]))
	goto $label$11 
	
.LABEL $label$44
	CALL $104(($8 + [432]), (*($4) + [36]))
	CALL $104(($8 + [416]), (*($3) + [36]))
	*($8 + [400]) = (int_64)0
	*($8 + [408]) = [0]
	$7 = (*($8 + [756]) - *($8 + [752]))
	$5 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$72 }
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$7 }
	$6 = CALL $94($7)
	*(($8 + [408])) = ($6 + ((int_32)$5 * (int_32)[12]))
	*($8 + [400]) = $6
	*($8 + [404]) = $6
	$5 = *($8 + [756])
	$7 = *($8 + [752])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$72 }
	
.LOOP $label$73:
	CALL $104($6, $7)
	$6 = (*($8 + [404]) + [12])
	*($8 + [404]) = $6
	$7 = ($7 + [12])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$73 }
	
.LABEL $label$72
	CALL $104(($8 + [384]), (*($1) + [36]))
	CALL _Z6settle7BET_NUMNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_NS0_6vectorIS6_NS4_IS6_EEEES6_y(($8 + [640]), [8192], ($8 + [432]), ($8 + [416]), ($8 + [400]), ($8 + [384]), $2)
	CALL $15($0, ($8 + [640]))
	CALL $16(($8 + [640]))
	if ( ((*($8 + [384]) & [1]) == 0) ){ goto $label$74 }
	CALL $95(*($8 + [392]))
	
.LABEL $label$74
	$5 = *($8 + [400])
	if ( ($5 == 0) ){ goto $label$33 }
	$7 = *($8 + [404])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$35 }
	$6 = ([0] - $5)
	$7 = ($7 + [-12])
	
.LOOP $label$75:
	if ( ((*($7) & [1]) == 0) ){ goto $label$76 }
	CALL $95(*(($7 + [8])))
	
.LABEL $label$76
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $6) != (int_32)[-12]) ){ goto $label$75 }
	$7 = *($8 + [400])
	goto $label$34 
	
.LABEL $label$43
	$7 = $5
	
.LABEL $label$42
	*($8 + [532]) = $5
	CALL $95($7)
	
.LABEL $label$41
	if ( ((*($8 + [544]) & [1]) == 0) ){ goto $label$77 }
	CALL $95(*($8 + [552]))
	
.LABEL $label$77
	if ( ((*($8 + [560]) & [1]) == 0) ){ goto $label$11 }
	CALL $95(*($8 + [568]))
	goto $label$11 
	
.LABEL $label$40
	CALL $104(($8 + [368]), (*($4) + [48]))
	CALL $104(($8 + [352]), (*($3) + [48]))
	*($8 + [336]) = (int_64)0
	*($8 + [344]) = [0]
	$7 = (*($8 + [756]) - *($8 + [752]))
	$5 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$78 }
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$6 }
	$6 = CALL $94($7)
	*(($8 + [344])) = ($6 + ((int_32)$5 * (int_32)[12]))
	*($8 + [336]) = $6
	*($8 + [340]) = $6
	$5 = *($8 + [756])
	$7 = *($8 + [752])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$78 }
	
.LOOP $label$79:
	CALL $104($6, $7)
	$6 = (*($8 + [340]) + [12])
	*($8 + [340]) = $6
	$7 = ($7 + [12])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$79 }
	
.LABEL $label$78
	CALL $104(($8 + [320]), (*($1) + [48]))
	CALL _Z6settle7BET_NUMNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_NS0_6vectorIS6_NS4_IS6_EEEES6_y(($8 + [640]), [16384], ($8 + [368]), ($8 + [352]), ($8 + [336]), ($8 + [320]), $2)
	CALL $15($0, ($8 + [640]))
	CALL $16(($8 + [640]))
	if ( ((*($8 + [320]) & [1]) == 0) ){ goto $label$80 }
	CALL $95(*($8 + [328]))
	
.LABEL $label$80
	$5 = *($8 + [336])
	if ( ($5 == 0) ){ goto $label$29 }
	$7 = *($8 + [340])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$31 }
	$6 = ([0] - $5)
	$7 = ($7 + [-12])
	
.LOOP $label$81:
	if ( ((*($7) & [1]) == 0) ){ goto $label$82 }
	CALL $95(*(($7 + [8])))
	
.LABEL $label$82
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $6) != (int_32)[-12]) ){ goto $label$81 }
	$7 = *($8 + [336])
	goto $label$30 
	
.LABEL $label$39
	$7 = $5
	
.LABEL $label$38
	*($8 + [468]) = $5
	CALL $95($7)
	
.LABEL $label$37
	if ( ((*($8 + [480]) & [1]) == 0) ){ goto $label$83 }
	CALL $95(*($8 + [488]))
	
.LABEL $label$83
	if ( ((*($8 + [496]) & [1]) == 0) ){ goto $label$11 }
	CALL $95(*($8 + [504]))
	goto $label$11 
	
.LABEL $label$36
	CALL $104(($8 + [304]), (*($4) + [60]))
	CALL $104(($8 + [288]), (*($3) + [60]))
	*($8 + [272]) = (int_64)0
	*($8 + [280]) = [0]
	$7 = (*($8 + [756]) - *($8 + [752]))
	$5 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$84 }
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$5 }
	$6 = CALL $94($7)
	*(($8 + [280])) = ($6 + ((int_32)$5 * (int_32)[12]))
	*($8 + [272]) = $6
	*($8 + [276]) = $6
	$5 = *($8 + [756])
	$7 = *($8 + [752])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$84 }
	
.LOOP $label$85:
	CALL $104($6, $7)
	$6 = (*($8 + [276]) + [12])
	*($8 + [276]) = $6
	$7 = ($7 + [12])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$85 }
	
.LABEL $label$84
	CALL $104(($8 + [256]), (*($1) + [60]))
	CALL _Z6settle7BET_NUMNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_NS0_6vectorIS6_NS4_IS6_EEEES6_y(($8 + [640]), [32768], ($8 + [304]), ($8 + [288]), ($8 + [272]), ($8 + [256]), $2)
	CALL $15($0, ($8 + [640]))
	CALL $16(($8 + [640]))
	if ( ((*($8 + [256]) & [1]) == 0) ){ goto $label$86 }
	CALL $95(*($8 + [264]))
	
.LABEL $label$86
	$5 = *($8 + [272])
	if ( ($5 == 0) ){ goto $label$25 }
	$7 = *($8 + [276])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$27 }
	$6 = ([0] - $5)
	$7 = ($7 + [-12])
	
.LOOP $label$87:
	if ( ((*($7) & [1]) == 0) ){ goto $label$88 }
	CALL $95(*(($7 + [8])))
	
.LABEL $label$88
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $6) != (int_32)[-12]) ){ goto $label$87 }
	$7 = *($8 + [272])
	goto $label$26 
	
.LABEL $label$35
	$7 = $5
	
.LABEL $label$34
	*($8 + [404]) = $5
	CALL $95($7)
	
.LABEL $label$33
	if ( ((*($8 + [416]) & [1]) == 0) ){ goto $label$89 }
	CALL $95(*($8 + [424]))
	
.LABEL $label$89
	if ( ((*($8 + [432]) & [1]) == 0) ){ goto $label$11 }
	CALL $95(*($8 + [440]))
	goto $label$11 
	
.LABEL $label$32
	CALL $104(($8 + [240]), (*($4) + [72]))
	CALL $104(($8 + [224]), (*($3) + [72]))
	*($8 + [208]) = (int_64)0
	*($8 + [216]) = [0]
	$7 = (*($8 + [756]) - *($8 + [752]))
	$5 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$90 }
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$4 }
	$6 = CALL $94($7)
	*(($8 + [216])) = ($6 + ((int_32)$5 * (int_32)[12]))
	*($8 + [208]) = $6
	*($8 + [212]) = $6
	$5 = *($8 + [756])
	$7 = *($8 + [752])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$90 }
	
.LOOP $label$91:
	CALL $104($6, $7)
	$6 = (*($8 + [212]) + [12])
	*($8 + [212]) = $6
	$7 = ($7 + [12])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$91 }
	
.LABEL $label$90
	CALL $104(($8 + [192]), (*($1) + [72]))
	CALL _Z6settle7BET_NUMNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_NS0_6vectorIS6_NS4_IS6_EEEES6_y(($8 + [640]), [65536], ($8 + [240]), ($8 + [224]), ($8 + [208]), ($8 + [192]), $2)
	CALL $15($0, ($8 + [640]))
	CALL $16(($8 + [640]))
	if ( ((*($8 + [192]) & [1]) == 0) ){ goto $label$92 }
	CALL $95(*($8 + [200]))
	
.LABEL $label$92
	$5 = *($8 + [208])
	if ( ($5 == 0) ){ goto $label$21 }
	$7 = *($8 + [212])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$23 }
	$6 = ([0] - $5)
	$7 = ($7 + [-12])
	
.LOOP $label$93:
	if ( ((*($7) & [1]) == 0) ){ goto $label$94 }
	CALL $95(*(($7 + [8])))
	
.LABEL $label$94
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $6) != (int_32)[-12]) ){ goto $label$93 }
	$7 = *($8 + [208])
	goto $label$22 
	
.LABEL $label$31
	$7 = $5
	
.LABEL $label$30
	*($8 + [340]) = $5
	CALL $95($7)
	
.LABEL $label$29
	if ( ((*($8 + [352]) & [1]) == 0) ){ goto $label$95 }
	CALL $95(*($8 + [360]))
	
.LABEL $label$95
	if ( ((*($8 + [368]) & [1]) == 0) ){ goto $label$11 }
	CALL $95(*($8 + [376]))
	goto $label$11 
	
.LABEL $label$28
	CALL $104(($8 + [176]), (*($4) + [84]))
	CALL $104(($8 + [160]), (*($3) + [84]))
	*($8 + [144]) = (int_64)0
	*($8 + [152]) = [0]
	$7 = (*($8 + [756]) - *($8 + [752]))
	$5 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$96 }
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$3 }
	$6 = CALL $94($7)
	*(($8 + [152])) = ($6 + ((int_32)$5 * (int_32)[12]))
	*($8 + [144]) = $6
	*($8 + [148]) = $6
	$5 = *($8 + [756])
	$7 = *($8 + [752])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$96 }
	
.LOOP $label$97:
	CALL $104($6, $7)
	$6 = (*($8 + [148]) + [12])
	*($8 + [148]) = $6
	$7 = ($7 + [12])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$97 }
	
.LABEL $label$96
	CALL $104(($8 + [128]), (*($1) + [84]))
	CALL _Z6settle7BET_NUMNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_NS0_6vectorIS6_NS4_IS6_EEEES6_y(($8 + [640]), [524288], ($8 + [176]), ($8 + [160]), ($8 + [144]), ($8 + [128]), $2)
	CALL $15($0, ($8 + [640]))
	CALL $16(($8 + [640]))
	if ( ((*($8 + [128]) & [1]) == 0) ){ goto $label$98 }
	CALL $95(*($8 + [136]))
	
.LABEL $label$98
	$5 = *($8 + [144])
	if ( ($5 == 0) ){ goto $label$18 }
	$7 = *($8 + [148])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$20 }
	$6 = ([0] - $5)
	$7 = ($7 + [-12])
	
.LOOP $label$99:
	if ( ((*($7) & [1]) == 0) ){ goto $label$100 }
	CALL $95(*(($7 + [8])))
	
.LABEL $label$100
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $6) != (int_32)[-12]) ){ goto $label$99 }
	$7 = *($8 + [144])
	goto $label$19 
	
.LABEL $label$27
	$7 = $5
	
.LABEL $label$26
	*($8 + [276]) = $5
	CALL $95($7)
	
.LABEL $label$25
	if ( ((*($8 + [288]) & [1]) == 0) ){ goto $label$101 }
	CALL $95(*($8 + [296]))
	
.LABEL $label$101
	if ( ((*($8 + [304]) & [1]) == 0) ){ goto $label$11 }
	CALL $95(*($8 + [312]))
	goto $label$11 
	
.LABEL $label$24
	CALL $104(($8 + [112]), (*($4) + [96]))
	CALL $104(($8 + [96]), (*($3) + [96]))
	*($8 + [80]) = (int_64)0
	*($8 + [88]) = [0]
	$7 = (*($8 + [756]) - *($8 + [752]))
	$5 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$102 }
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = CALL $94($7)
	*(($8 + [88])) = ($6 + ((int_32)$5 * (int_32)[12]))
	*($8 + [80]) = $6
	*($8 + [84]) = $6
	$5 = *($8 + [756])
	$7 = *($8 + [752])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$102 }
	
.LOOP $label$103:
	CALL $104($6, $7)
	$6 = (*($8 + [84]) + [12])
	*($8 + [84]) = $6
	$7 = ($7 + [12])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$103 }
	
.LABEL $label$102
	CALL $104(($8 + [64]), (*($1) + [96]))
	CALL _Z6settle7BET_NUMNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_NS0_6vectorIS6_NS4_IS6_EEEES6_y(($8 + [640]), [524288], ($8 + [112]), ($8 + [96]), ($8 + [80]), ($8 + [64]), $2)
	CALL $15($0, ($8 + [640]))
	CALL $16(($8 + [640]))
	if ( ((*($8 + [64]) & [1]) == 0) ){ goto $label$104 }
	CALL $95(*($8 + [72]))
	
.LABEL $label$104
	$5 = *($8 + [80])
	if ( ($5 == 0) ){ goto $label$15 }
	$7 = *($8 + [84])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$17 }
	$6 = ([0] - $5)
	$7 = ($7 + [-12])
	
.LOOP $label$105:
	if ( ((*($7) & [1]) == 0) ){ goto $label$106 }
	CALL $95(*(($7 + [8])))
	
.LABEL $label$106
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $6) != (int_32)[-12]) ){ goto $label$105 }
	$7 = *($8 + [80])
	goto $label$16 
	
.LABEL $label$23
	$7 = $5
	
.LABEL $label$22
	*($8 + [212]) = $5
	CALL $95($7)
	
.LABEL $label$21
	if ( ((*($8 + [224]) & [1]) == 0) ){ goto $label$107 }
	CALL $95(*($8 + [232]))
	
.LABEL $label$107
	if ( ((*($8 + [240]) & [1]) == 0) ){ goto $label$11 }
	CALL $95(*($8 + [248]))
	goto $label$11 
	
.LABEL $label$20
	$7 = $5
	
.LABEL $label$19
	*($8 + [148]) = $5
	CALL $95($7)
	
.LABEL $label$18
	if ( ((*($8 + [160]) & [1]) == 0) ){ goto $label$108 }
	CALL $95(*($8 + [168]))
	
.LABEL $label$108
	if ( ((*($8 + [176]) & [1]) == 0) ){ goto $label$11 }
	CALL $95(*($8 + [184]))
	goto $label$11 
	
.LABEL $label$17
	$7 = $5
	
.LABEL $label$16
	*($8 + [84]) = $5
	CALL $95($7)
	
.LABEL $label$15
	if ( ((*($8 + [96]) & [1]) == 0) ){ goto $label$109 }
	CALL $95(*($8 + [104]))
	
.LABEL $label$109
	if ( ((*($8 + [112]) & [1]) == 0) ){ goto $label$11 }
	CALL $95(*($8 + [120]))
	goto $label$11 
	
.LABEL $label$14
	$7 = $5
	
.LABEL $label$13
	*($8 + [20]) = $5
	CALL $95($7)
	
.LABEL $label$12
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$110 }
	CALL $95(*($8 + [40]))
	
.LABEL $label$110
	if ( ((*($8 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL $95(*($8 + [56]))
	
.LABEL $label$11
	if ( ((int_64)(((int_64)$2 & (int_64)1048576) == 0) == 0) ){ goto $label$112 }
	if ( (int_64)(((int_64)$2 & (int_64)2097152) == 0) ){ goto $label$111 }
	CALL $97(($0 + [40]), (*($4) + [132]))
	CALL $97(($0 + [52]), (*($3) + [132]))
	goto $label$111 
	
.LABEL $label$112
	CALL $97(($0 + [40]), (*($4) + [120]))
	CALL $97(($0 + [52]), (*($3) + [120]))
	
.LABEL $label$111
	if ( ((int_64)(((int_64)$2 & (int_64)4194304) == 0) == 0) ){ goto $label$116 }
	if ( (int_64)(((int_64)$2 & (int_64)8388608) == 0) ){ goto $label$115 }
	$7 = ($0 + [64])
	CALL $97($7, (*($3) + [156]))
	CALL $97($7, (*($3) + [144]))
	$6 = *($8 + [752])
	if ( $6 ){ goto $label$114 }
	goto $label$113 
	
.LABEL $label$116
	$7 = ($0 + [64])
	CALL $97($7, (*($3) + [144]))
	CALL $97($7, (*($3) + [144]))
	
.LABEL $label$115
	$6 = *($8 + [752])
	if ( ($6 == 0) ){ goto $label$113 }
	
.LABEL $label$114
	$7 = *($8 + [756])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$118 }
	$0 = ([0] - $6)
	$7 = ($7 + [-12])
	
.LOOP $label$119:
	if ( ((*($7) & [1]) == 0) ){ goto $label$120 }
	CALL $95(*(($7 + [8])))
	
.LABEL $label$120
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $0) != (int_32)[-12]) ){ goto $label$119 }
	$7 = *($8 + [752])
	goto $label$117 
	
.LABEL $label$118
	$7 = $6
	
.LABEL $label$117
	*($8 + [756]) = $6
	CALL $95($7)
	
.LABEL $label$113
	*([0] + [4]) = ($8 + [768])
	return (unreachable)
	
.LABEL $label$10
	CALL $103(($8 + [592]))
	
.LABEL $label$9
	CALL $103(($8 + [528]))
	
.LABEL $label$8
	CALL $103(($8 + [464]))
	
.LABEL $label$7
	CALL $103(($8 + [400]))
	
.LABEL $label$6
	CALL $103(($8 + [336]))
	
.LABEL $label$5
	CALL $103(($8 + [272]))
	
.LABEL $label$4
	CALL $103(($8 + [208]))
	
.LABEL $label$3
	CALL $103(($8 + [144]))
	
.LABEL $label$2
	CALL $103(($8 + [80]))
	
.LABEL $label$1
	CALL $103(($8 + [16]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*($0) = *($1)
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$4 }
	$5 = ($0 + [8])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$3 }
	$3 = ([0] - $2)
	$4 = ($4 + [-12])
	
.LOOP $label$5:
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $95(*(($4 + [8])))
	
.LABEL $label$6
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $3) != (int_32)[-12]) ){ goto $label$5 }
	$4 = *(($0 + [4]))
	goto $label$2 
	
.LABEL $label$4
	$2 = ($0 + [12])
	$5 = ($0 + [8])
	goto $label$1 
	
.LABEL $label$3
	$4 = $2
	
.LABEL $label$2
	*(($0 + [8])) = $2
	CALL $95($4)
	*(($2 = ($0 + [12]))) = [0]
	*(($0 + [4])) = (int_64)0
	
.LABEL $label$1
	$4 = ($1 + [4])
	*(($0 + [4])) = *($4)
	*($5) = *(($1 + [8]))
	$3 = ($1 + [12])
	*($2) = *($3)
	*($3) = [0]
	*($4) = (int_64)0
	$3 = ($1 + [16])
	$4 = ($0 + [16])
	if ( (*($0 + [16]) & [1]) ){ goto $label$8 }
	*($4) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*(($0 + [24]))) = [0]
	*(($0 + [20])) = [0]
	
.LABEL $label$7
	CALL $99($4, [0])
	*(($4 + [8])) = *(($3 + [8]))
	*($4) = *($3)
	*(($1 + [20])) = [0]
	*(($1 + [16])) = [0]
	*(($1 + [24])) = [0]
	$3 = ($1 + [28])
	$4 = ($0 + [28])
	if ( (*($0 + [28]) & [1]) ){ goto $label$10 }
	*($4) = [0]
	goto $label$9 
	
.LABEL $label$10
	*(*(($0 + [36]))) = [0]
	*(($0 + [32])) = [0]
	
.LABEL $label$9
	CALL $99($4, [0])
	*(($4 + [8])) = *(($3 + [8]))
	*($4) = *($3)
	*(($1 + [32])) = [0]
	*(($1 + [28])) = [0]
	*(($1 + [36])) = [0]
	$3 = ($1 + [40])
	$4 = ($0 + [40])
	if ( (*($0 + [40]) & [1]) ){ goto $label$12 }
	*($4) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*(($0 + [48]))) = [0]
	*(($0 + [44])) = [0]
	
.LABEL $label$11
	CALL $99($4, [0])
	*(($4 + [8])) = *(($3 + [8]))
	*($4) = *($3)
	*(($1 + [44])) = [0]
	*(($1 + [40])) = [0]
	*(($1 + [48])) = [0]
	$3 = ($1 + [52])
	$4 = ($0 + [52])
	if ( (*($0 + [52]) & [1]) ){ goto $label$14 }
	*($4) = [0]
	goto $label$13 
	
.LABEL $label$14
	*(*(($0 + [60]))) = [0]
	*(($0 + [56])) = [0]
	
.LABEL $label$13
	CALL $99($4, [0])
	*(($4 + [8])) = *(($3 + [8]))
	*($4) = *($3)
	*(($1 + [56])) = [0]
	*(($1 + [52])) = [0]
	*(($1 + [60])) = [0]
	$3 = ($1 + [64])
	$4 = ($0 + [64])
	if ( (*($0 + [64]) & [1]) ){ goto $label$16 }
	*($4) = [0]
	goto $label$15 
	
.LABEL $label$16
	*(*(($0 + [72]))) = [0]
	*(($0 + [68])) = [0]
	
.LABEL $label$15
	CALL $99($4, [0])
	*(($4 + [8])) = *(($3 + [8]))
	*($4) = *($3)
	*(($1 + [68])) = [0]
	*(($1 + [64])) = [0]
	*(($1 + [72])) = [0]
	$3 = ($1 + [76])
	$4 = ($0 + [76])
	if ( (*($0 + [76]) & [1]) ){ goto $label$18 }
	*($4) = [0]
	goto $label$17 
	
.LABEL $label$18
	*(*(($0 + [84]))) = [0]
	*(($0 + [80])) = [0]
	
.LABEL $label$17
	CALL $99($4, [0])
	*(($4 + [8])) = *(($3 + [8]))
	*($4) = *($3)
	*(($1 + [80])) = [0]
	*(($1 + [76])) = [0]
	*(($1 + [84])) = [0]
	*(($0 + [104])) = *(($1 + [104]))
	*(($0 + [96])) = *(($1 + [96]))
	*($0 + [88]) = *($1 + [88])
	return $0
}

int_32 .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	if ( ((*($0 + [76]) & [1]) == 0) ){ goto $label$1 }
	CALL $95(*(($0 + [84])))
	
.LABEL $label$1
	if ( ((*($0 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $95(*(($0 + [72])))
	
.LABEL $label$2
	if ( ((*($0 + [52]) & [1]) == 0) ){ goto $label$3 }
	CALL $95(*(($0 + [60])))
	
.LABEL $label$3
	if ( ((*($0 + [40]) & [1]) == 0) ){ goto $label$4 }
	CALL $95(*(($0 + [48])))
	
.LABEL $label$4
	if ( ((*($0 + [28]) & [1]) == 0) ){ goto $label$5 }
	CALL $95(*(($0 + [36])))
	
.LABEL $label$5
	if ( ((*($0 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL $95(*(($0 + [24])))
	
.LABEL $label$6
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$7 }
	$3 = ($0 + [8])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$9 }
	$2 = ([0] - $1)
	$4 = ($4 + [-12])
	
.LOOP $label$10:
	if ( ((*($4) & [1]) == 0) ){ goto $label$11 }
	CALL $95(*(($4 + [8])))
	
.LABEL $label$11
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $2) != (int_32)[-12]) ){ goto $label$10 }
	$4 = *(($0 + [4]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $1
	
.LABEL $label$8
	*($3) = $1
	CALL $95($4)
	
.LABEL $label$7
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [288])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [176]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [192]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [208])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [176]
	$7 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$21 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*(($9 + [136])) = $0
	*(($9 + [144])) = (int_64)-1
	*(($9 + [152])) = [0]
	*(($9 + [156])) = [0]
	*($9 + [120]) = [300]
	*($9 + [112]) = $0
	*($9 + [128]) = $0
	*(($9 + [160])) = [0]
	*($9 + [168]) = $0
	*(($9 + [176])) = $0
	*(($9 + [184])) = (int_64)-1
	*(($9 + [192])) = [0]
	*(($9 + [196])) = [0]
	*(($9 + [200])) = [0]
	*(($9 + [204])) = [0]
	*($9 + [208]) = $0
	*(($9 + [216])) = $0
	*(($9 + [224])) = (int_64)-1
	*(($9 + [232])) = [0]
	*(($9 + [236])) = [0]
	*(($9 + [240])) = [0]
	*(($9 + [244])) = [0]
	*($9 + [248]) = $0
	*(($9 + [256])) = $0
	*(($9 + [264])) = (int_64)-1
	*(($9 + [272])) = [0]
	*(($9 + [276])) = [0]
	*(($9 + [280])) = [0]
	*(($9 + [284])) = [0]
	if ( ((int_64)$2 <= (int_64)-4417032211467862017) ){ goto $label$28 }
	if ( ((int_64)$2 > (int_64)4923678490122780671) ){ goto $label$27 }
	if ( ((int_64)$2 == (int_64)-4417032211467862016) ){ goto $label$26 }
	if ( ((int_64)$2 != (int_64)4229443000054317056) ){ goto $label$22 }
	*($9 + [92]) = [0]
	*($9 + [88]) = [1]
	*($9 + [16 align=4]) = *($9 + [88])
	CALL $23(($9 + [112]), ($9 + [16]))
	goto $label$22 
	
.LABEL $label$28
	if ( ((int_64)$2 == (int_64)-6533262907872903168) ){ goto $label$25 }
	if ( ((int_64)$2 == (int_64)-4497217113437317776) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)-4417057971926728704) ){ goto $label$22 }
	*($9 + [68]) = [0]
	*($9 + [64]) = [2]
	*($9 + [40 align=4]) = *($9 + [64])
	CALL $21(($9 + [112]), ($9 + [40]))
	goto $label$22 
	
.LABEL $label$27
	if ( ((int_64)$2 == (int_64)4923678490122780672) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$22 }
	*($9 + [108]) = [0]
	*($9 + [104]) = [3]
	*($9) = *($9 + [104])
	CALL $19(($9 + [112]), $9)
	goto $label$22 
	
.LABEL $label$26
	*($9 + [100]) = [0]
	*($9 + [96]) = [4]
	*($9 + [8 align=4]) = *($9 + [96])
	CALL $21(($9 + [112]), ($9 + [8]))
	goto $label$22 
	
.LABEL $label$25
	*($9 + [84]) = [0]
	*($9 + [80]) = [5]
	*($9 + [24 align=4]) = *($9 + [80])
	CALL $25(($9 + [112]), ($9 + [24]))
	goto $label$22 
	
.LABEL $label$24
	*($9 + [76]) = [0]
	*($9 + [72]) = [6]
	*($9 + [32 align=4]) = *($9 + [72])
	CALL $27(($9 + [112]), ($9 + [32]))
	goto $label$22 
	
.LABEL $label$23
	*($9 + [60]) = [0]
	*($9 + [56]) = [7]
	*($9 + [48 align=4]) = *($9 + [56])
	CALL $30(($9 + [112]), ($9 + [48]))
	
.LABEL $label$22
	CALL $31(($9 + [112]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [288])
}

void .FUNC _Z6settle7BET_NUMNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_NS0_6vectorIS6_NS4_IS6_EEEES6_y (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6)
{
	int_32 $7
	int_32 $8
	*($0 + [4 align=4]) = (int_64)0
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [12])) = (int_64)0
	*(($0 + [20])) = (int_64)0
	*(($0 + [36])) = (int_64)0
	*(($0 + [44])) = [0]
	*(($0 + [48])) = [0]
	*($0 + [52]) = [0]
	*(($0 + [56])) = [0]
	*(($0 + [60])) = [0]
	*($0 + [64]) = [0]
	*(($0 + [68])) = [0]
	*(($0 + [72])) = [0]
	*($0 + [76]) = [0]
	*(($0 + [80])) = [0]
	*(($0 + [84])) = [0]
	*($0) = $1
	CALL $97(($0 + [16]), $2)
	CALL $97(($0 + [28]), $3)
	$7 = *($4 + [4])
	$3 = *($4)
	if ( (*($5) & [1]) ){ goto $label$4 }
	$1 = ($5 + [1])
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$1 = *($5 + [8])
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	$2 = *($3)
	$8 = CALL strlen($1)
	if ( ((int_32)$8 != (int_32)( *(($3 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$7 }
	if ( (CALL $101($3, [0], [-1], $1, $8) == 0) ){ goto $label$5 }
	
.LABEL $label$7
	$3 = ($3 + [12])
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$6 }
	$3 = $7
	
.LABEL $label$5
	$2 = *(($4 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$2 = $3
	
.LABEL $label$1
	*($0 + [96]) = ((int_32)$3 != (int_32)$2)
	$2 = CALL $102($5, [16])
	if ( (int_64)(((int_64)$6 & (int_64)1048576) == 0) ){ goto $label$9 }
	$3 = [1]
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$8 }
	
.LABEL $label$9
	$3 = (CASTING uint_32)(uint_64 ((int_64)(uint_64)$6 >> (uint_64)(int_64)21) & (int_64)1))
	
.LABEL $label$8
	*(($0 + [97])) = $3
	$3 = *($5)
	$2 = CALL strlen([32])
	if ( ((int_32)$2 != (int_32)( *($5 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$14 }
	if ( (CALL $101($5, [0], [-1], [32], $2) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$3 = *($5)
	$2 = ($5 + [4])
	$1 = CALL strlen([48])
	if ( ((int_32)$1 != (int_32)( *($2) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$15 }
	if ( (CALL $101($5, [0], [-1], [48], $1) == 0) ){ goto $label$13 }
	
.LABEL $label$15
	$3 = *($5)
	$1 = CALL strlen([16])
	if ( ((int_32)$1 != (int_32)( *($2) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$16 }
	if ( (CALL $101($5, [0], [-1], [16], $1) == 0) ){ goto $label$13 }
	
.LABEL $label$16
	$3 = *($5)
	$2 = ($5 + [4])
	$1 = CALL strlen([64])
	if ( ((int_32)$1 != (int_32)( *($2) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$17 }
	if ( (CALL $101($5, [0], [-1], [64], $1) == 0) ){ goto $label$13 }
	
.LABEL $label$17
	$3 = *($5)
	$1 = CALL strlen([80])
	if ( ((int_32)$1 != (int_32)( *($2) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$12 }
	$3 = CALL $101($5, [0], [-1], [80], $1)
	if ( (int_64)(((int_64)$6 & (int_64)4194304) == 0) ){ goto $label$12 }
	if ( ($3 == 0) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_64)(((int_64)$6 & (int_64)4194304) == 0) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	*($0 + [98]) = ((int_64)(uint_64)$6 >> (uint_64)(int_64)23) & (int_64)1)
	goto $label$10 
	
.LABEL $label$11
	*($0 + [98]) = [1]
	
.LABEL $label$10
	$3 = ($0 + [4])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$18 }
	CALL $11($3, *($4), *(($4 + [4])))
	
.LABEL $label$18
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$7 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[12])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($7 - $6) / (int_32)[12])) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	$5 = ([0] - $6)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $95(*(($7 + [8])))
	
.LABEL $label$8
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $5) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$7 = ($1 + ((int_32)$4 * (int_32)[12]))
	$5 = ( $7 ? $2 : ((uint_32)$3 > (uint_32)$4) )
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $97($6, $1)
	$6 = ($6 + [12])
	$1 = ($1 + [12])
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	$1 = ($0 + [4])
	$6 = *($1)
	
.LOOP $label$12:
	CALL $104($6, $7)
	$6 = (*($1) + [12])
	*($1) = $6
	$7 = ($7 + [12])
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$13 }
	$7 = ([0] - $6)
	$1 = ($1 + [-12])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $95(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $7) != (int_32)[-12]) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $6
	return 
	
.LABEL $label$5
	$7 = $6
	
.LABEL $label$4
	*(($0 + [4])) = $6
	CALL $95($7)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$6 = [357913941]
	$7 = ((int_32)$7 / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$16 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	
.LABEL $label$16
	$7 = ((int_32)$6 * (int_32)[12])
	$6 = CALL $94($7)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $7)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$17:
	CALL $104($6, $1)
	$6 = (*($7) + [12])
	*($7) = $6
	$1 = ($1 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $103($0)
}

void .FUNC _Z9getbetnumy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	if ( (int_64)(((int_64)$1 & (int_64)1) == 0) ){ goto $label$2 }
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	$2 = CALL strlen([32])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$5 }
	*($5) = ($2 << [1])
	$4 = ($5 | [1])
	if ( $2 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $94($3)
	*($5) = ($3 | [1])
	*($5 + [8]) = $4
	*($5 + [4]) = $2
	
.LABEL $label$4
	CALL memcpy($4, [32], $2)
	
.LABEL $label$3
	*(($4 + $2)) = [0]
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [8]))) ){ goto $label$6 }
	*($4) = *($5)
	$4 = ($5 + [8])
	*(($4 + [8])) = *($4)
	*($4) = [0]
	*($5) = [0]
	*($5 + [4]) = [0]
	*($2) = (*($2) + [12])
	goto $label$2 
	
.LABEL $label$6
	CALL $13($0, $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$2 }
	CALL $95(*($5 + [8]))
	
.LABEL $label$2
	if ( (int_64)(((int_64)$1 & (int_64)2) == 0) ){ goto $label$7 }
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	$2 = CALL strlen([96])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$10 }
	*($5) = ($2 << [1])
	$4 = ($5 | [1])
	if ( $2 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $94($3)
	*($5) = ($3 | [1])
	*($5 + [8]) = $4
	*($5 + [4]) = $2
	
.LABEL $label$9
	CALL memcpy($4, [96], $2)
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [8]))) ){ goto $label$11 }
	*($4) = *($5)
	$4 = ($5 + [8])
	*(($4 + [8])) = *($4)
	*($4) = [0]
	*($5) = [0]
	*($5 + [4]) = [0]
	*($2) = (*($2) + [12])
	goto $label$7 
	
.LABEL $label$11
	CALL $13($0, $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$7 }
	CALL $95(*($5 + [8]))
	
.LABEL $label$7
	if ( (int_64)(((int_64)$1 & (int_64)4) == 0) ){ goto $label$12 }
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	$2 = CALL strlen([48])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$15 }
	*($5) = ($2 << [1])
	$4 = ($5 | [1])
	if ( $2 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $94($3)
	*($5) = ($3 | [1])
	*($5 + [8]) = $4
	*($5 + [4]) = $2
	
.LABEL $label$14
	CALL memcpy($4, [48], $2)
	
.LABEL $label$13
	*(($4 + $2)) = [0]
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [8]))) ){ goto $label$16 }
	*($4) = *($5)
	$4 = ($5 + [8])
	*(($4 + [8])) = *($4)
	*($4) = [0]
	*($5) = [0]
	*($5 + [4]) = [0]
	*($2) = (*($2) + [12])
	goto $label$12 
	
.LABEL $label$16
	CALL $13($0, $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$12 }
	CALL $95(*($5 + [8]))
	
.LABEL $label$12
	if ( (int_64)(((int_64)$1 & (int_64)8) == 0) ){ goto $label$17 }
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	$2 = CALL strlen([112])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$20 }
	*($5) = ($2 << [1])
	$4 = ($5 | [1])
	if ( $2 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $94($3)
	*($5) = ($3 | [1])
	*($5 + [8]) = $4
	*($5 + [4]) = $2
	
.LABEL $label$19
	CALL memcpy($4, [112], $2)
	
.LABEL $label$18
	*(($4 + $2)) = [0]
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [8]))) ){ goto $label$21 }
	*($4) = *($5)
	$4 = ($5 + [8])
	*(($4 + [8])) = *($4)
	*($4) = [0]
	*($5) = [0]
	*($5 + [4]) = [0]
	*($2) = (*($2) + [12])
	goto $label$17 
	
.LABEL $label$21
	CALL $13($0, $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$17 }
	CALL $95(*($5 + [8]))
	
.LABEL $label$17
	if ( (int_64)(((int_64)$1 & (int_64)16) == 0) ){ goto $label$22 }
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	$2 = CALL strlen([16])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$25 }
	*($5) = ($2 << [1])
	$4 = ($5 | [1])
	if ( $2 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $94($3)
	*($5) = ($3 | [1])
	*($5 + [8]) = $4
	*($5 + [4]) = $2
	
.LABEL $label$24
	CALL memcpy($4, [16], $2)
	
.LABEL $label$23
	*(($4 + $2)) = [0]
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [8]))) ){ goto $label$26 }
	*($4) = *($5)
	$4 = ($5 + [8])
	*(($4 + [8])) = *($4)
	*($4) = [0]
	*($5) = [0]
	*($5 + [4]) = [0]
	*($2) = (*($2) + [12])
	goto $label$22 
	
.LABEL $label$26
	CALL $13($0, $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$22 }
	CALL $95(*($5 + [8]))
	
.LABEL $label$22
	if ( (int_64)(((int_64)$1 & (int_64)32) == 0) ){ goto $label$27 }
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	$2 = CALL strlen([128])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$30 }
	*($5) = ($2 << [1])
	$4 = ($5 | [1])
	if ( $2 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $94($3)
	*($5) = ($3 | [1])
	*($5 + [8]) = $4
	*($5 + [4]) = $2
	
.LABEL $label$29
	CALL memcpy($4, [128], $2)
	
.LABEL $label$28
	*(($4 + $2)) = [0]
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [8]))) ){ goto $label$31 }
	*($4) = *($5)
	$4 = ($5 + [8])
	*(($4 + [8])) = *($4)
	*($4) = [0]
	*($5) = [0]
	*($5 + [4]) = [0]
	*($2) = (*($2) + [12])
	goto $label$27 
	
.LABEL $label$31
	CALL $13($0, $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$27 }
	CALL $95(*($5 + [8]))
	
.LABEL $label$27
	if ( (int_64)(((int_64)$1 & (int_64)64) == 0) ){ goto $label$32 }
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	$2 = CALL strlen([64])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$35 }
	*($5) = ($2 << [1])
	$4 = ($5 | [1])
	if ( $2 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $94($3)
	*($5) = ($3 | [1])
	*($5 + [8]) = $4
	*($5 + [4]) = $2
	
.LABEL $label$34
	CALL memcpy($4, [64], $2)
	
.LABEL $label$33
	*(($4 + $2)) = [0]
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [8]))) ){ goto $label$36 }
	*($4) = *($5)
	$4 = ($5 + [8])
	*(($4 + [8])) = *($4)
	*($4) = [0]
	*($5) = [0]
	*($5 + [4]) = [0]
	*($2) = (*($2) + [12])
	goto $label$32 
	
.LABEL $label$36
	CALL $13($0, $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$32 }
	CALL $95(*($5 + [8]))
	
.LABEL $label$32
	if ( (int_64)(((int_64)$1 & (int_64)128) == 0) ){ goto $label$37 }
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	$2 = CALL strlen([144])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$40 }
	*($5) = ($2 << [1])
	$4 = ($5 | [1])
	if ( $2 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $94($3)
	*($5) = ($3 | [1])
	*($5 + [8]) = $4
	*($5 + [4]) = $2
	
.LABEL $label$39
	CALL memcpy($4, [144], $2)
	
.LABEL $label$38
	*(($4 + $2)) = [0]
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [8]))) ){ goto $label$41 }
	*($4) = *($5)
	$4 = ($5 + [8])
	*(($4 + [8])) = *($4)
	*($4) = [0]
	*($5) = [0]
	*($5 + [4]) = [0]
	*($2) = (*($2) + [12])
	goto $label$37 
	
.LABEL $label$41
	CALL $13($0, $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$37 }
	CALL $95(*($5 + [8]))
	
.LABEL $label$37
	if ( (int_64)(((int_64)$1 & (int_64)256) == 0) ){ goto $label$42 }
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	$2 = CALL strlen([80])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$45 }
	*($5) = ($2 << [1])
	$4 = ($5 | [1])
	if ( $2 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $94($3)
	*($5) = ($3 | [1])
	*($5 + [8]) = $4
	*($5 + [4]) = $2
	
.LABEL $label$44
	CALL memcpy($4, [80], $2)
	
.LABEL $label$43
	*(($4 + $2)) = [0]
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [8]))) ){ goto $label$46 }
	*($4) = *($5)
	$4 = ($5 + [8])
	*(($4 + [8])) = *($4)
	*($4) = [0]
	*($5) = [0]
	*($5 + [4]) = [0]
	*($2) = (*($2) + [12])
	goto $label$42 
	
.LABEL $label$46
	CALL $13($0, $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$42 }
	CALL $95(*($5 + [8]))
	
.LABEL $label$42
	if ( (int_64)(((int_64)$1 & (int_64)512) == 0) ){ goto $label$47 }
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	$2 = CALL strlen([160])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$50 }
	*($5) = ($2 << [1])
	$4 = ($5 | [1])
	if ( $2 ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $94($3)
	*($5) = ($3 | [1])
	*($5 + [8]) = $4
	*($5 + [4]) = $2
	
.LABEL $label$49
	CALL memcpy($4, [160], $2)
	
.LABEL $label$48
	*(($4 + $2)) = [0]
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [8]))) ){ goto $label$51 }
	*($4) = *($5)
	$0 = ($5 + [8])
	*(($4 + [8])) = *($0)
	*($0) = [0]
	*($5) = [0]
	*($5 + [4]) = [0]
	*($2) = (*($2) + [12])
	goto $label$47 
	
.LABEL $label$51
	CALL $13($0, $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$47 }
	CALL $95(*($5 + [8]))
	
.LABEL $label$47
	*([0] + [4]) = ($5 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $96($5)
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $94(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $103($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $95(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $95($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [848])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $94([96])
	CALL $45($3)
	*($3 + [84]) = $1
	CALL $77(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [88])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $47(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [8])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($1 + [12])) = $3
	CALL $95($3)
	
.LABEL $label$4
	CALL $95($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $18 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	*($10 + [56]) = $3
	*($10 + [48]) = $1
	CALL require_auth(*($0))
	$6 = *(($0 + [40]))
	$9 = *(($0 + [44]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$1 }
	$3 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($3)) == (int_64)$1) ){ goto $label$1 }
	$9 = $3
	$8 = ($3 + [-24])
	$3 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [16])
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$4 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$3), [624])
	$9 = ($0 + [24])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$9 = ($0 + [24])
	$7 = CALL db_find_i64(*(($0 + [16])), *($9), (int_64)-4417600971606065152, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $36($3, $7)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$3), [624])
	
.LABEL $label$3
	*($10 + [40]) = $2
	CALL eosio_assert(($8 == 0), [1728])
	$8 = CALL db_lowerbound_i64(*($3), *($9), (int_64)-4417600971606065152, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	CALL $36($3, $8)
	$1 = (CASTING uint_64)(uint_32 $3)
	*($10 + [16]) = $1
	$8 = *(CALL $86(($10 + [16])) + [4])
	CALL prints([1760])
	CALL printui(*($8))
	*($10 + [16]) = $1
	if ( ((uint_32)*(*(CALL $86(($10 + [16])) + [4]) + [20]) >= (uint_32)*($10 + [40])) ){ goto $label$6 }
	CALL prints([1776])
	
.LABEL $label$6
	*($10 + [16]) = $1
	CALL eosio_assert((*(*(CALL $86(($10 + [16])) + [4]) + [20]) <= *($10 + [40])), [1792])
	
.LABEL $label$5
	$1 = *($0)
	*($10 + [28]) = $0
	*($10 + [32]) = $4
	*($10 + [36]) = $5
	*($10 + [20]) = ($10 + [40])
	*($10 + [16]) = ($10 + [48])
	*($10 + [24]) = ($10 + [56])
	CALL $87(($10 + [8]), $3, $1, ($10 + [16]))
	*([0] + [4]) = ($10 + [64])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [96])
	*([0] + [4]) = $3
	*(($2 = $3) + [60]) = $0
	*($2 + [48]) = *($1)
	*($2 + [52]) = *($1 + [4])
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [32])) = (int_64)0
	*(($2 + [40])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [68]) = $1
	*($2 + [64]) = $1
	*($2 + [72]) = ($1 + $0)
	*($2 + [80]) = ($2 + [64])
	*($2 + [88]) = ($2 + [8])
	CALL $84(($2 + [88]), ($2 + [80]))
	if ( ($0 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	*($2 + [68]) = ($2 + [48])
	*($2 + [64]) = ($2 + [60])
	CALL $85(($2 + [64]), ($2 + [8]))
	if ( ((*($2 + [36]) & [1]) == 0) ){ goto $label$6 }
	CALL $95(*(($2 + [44])))
	
.LABEL $label$6
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$7 }
	CALL $95(*(($2 + [32])))
	
.LABEL $label$7
	*([0] + [4]) = ($2 + [96])
	return [1]
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $94(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $103($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $95($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $95($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [272])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [272])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [272])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $32(*($1), ($0 + [32]))
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [688])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $94([64])) + [16 align=4]) = (int_64)0
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [48]) = $0
	CALL $51(($8 + [32]), $6)
	*($6 + [56]) = [-1]
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $52(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL $95(*(($4 + [24])))
	
.LABEL $label$10
	CALL $95($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [272])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $32($0, ($1 + [16]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [272])
	CALL memcpy(($1 + [28]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [272])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [32]) = ((int_32)*($3 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $94(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $103($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL $95(*(($1 + [24])))
	
.LABEL $label$11
	CALL $95($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $95($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [272])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [272])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [272])
	CALL memcpy(($1 + [20]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $32($0, ($1 + [32]))
	CALL $32($0, ($1 + [44]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [272])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $94(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $103($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*(($1 + [44])) & [1]) == 0) ){ goto $label$11 }
	CALL $95(*(($1 + [52])))
	
.LABEL $label$11
	if ( ((*(($1 + [32])) & [1]) == 0) ){ goto $label$12 }
	CALL $95(*(($1 + [40])))
	
.LABEL $label$12
	CALL $95($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $95($6)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [288])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $35($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [272])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [848])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $94([32])) + [16]) = $1
	CALL $57(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $58(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $95($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	$2 = *($0)
	CALL eosio_assert([1], [912])
	CALL memcpy($7, $1, [8])
	CALL eosio_assert([1], [912])
	$4 = ($1 + [8])
	CALL memcpy(($7 | [8]), $4, [8])
	$3 = *($1)
	*($1 + [20]) = CALL db_store_i64(*($2 + [8]), (int_64)-5001621369012617216, *(*($0 + [8])), $3, $7, [16])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($2 + [8]))
	$5 = *(*(($0 + [8])))
	$6 = *($1)
	*($7 + [24]) = *($4)
	*($1 + [24]) = CALL db_idx64_store($3, (int_64)-5001621369012617216, $5, $6, ($7 + [24]))
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $94($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $103($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $95($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	CALL require_auth(*($0))
	$9 = *($3)
	$8 = CALL strlen([304])
	if ( ((int_32)$8 != (int_32)( *($3 + [4]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$1 }
	if ( CALL $101($3, [0], [-1], [304], $8) ){ goto $label$1 }
	CALL prints([320])
	CALL printui($1)
	$9 = CALL db_lowerbound_i64(*($0 + [16]), *(($0 + [24])), (int_64)-4417600971606065152, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$5 = ($0 + [96])
	$4 = ($0 + [16])
	$8 = CALL $36($4, $9)
	
.LOOP $label$2:
	$6 = *($8)
	if ( (uint_64)($6 <= $1) ){ goto $label$1 }
	if ( ((uint_64)$6 > (uint_64)$2) ){ goto $label$1 }
	CALL prints([320])
	CALL printui(*($8))
	*($10 + [16]) = $5
	*($10 + [24]) = (int_64)0
	CALL $37(($10 + [8]), ($10 + [16]), ($10 + [24]))
	$9 = *($10 + [12])
	if ( ($9 == 0) ){ goto $label$3 }
	
.LOOP $label$4:
	if ( ((int_64)*($9 + [8]) != (int_64)*($8)) ){ goto $label$3 }
	$6 = *($10 + [8])
	*($10 + [24]) = $6
	$9 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$9) != (int_32)[0]), [352])
	CALL $39(($10 + [24]))
	CALL $40(*($10 + [16]), $9)
	$6 = *($10 + [24])
	*($10 + [8]) = $6
	$9 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)32)
	if ( $9) ){ goto $label$4 }
	
.LABEL $label$3
	$9 = [0]
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [352])
	CALL eosio_assert($7, [400])
	$7 = CALL db_next_i64(*($8 + [68]), ($10 + [24]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$9 = CALL $36($4, $7)
	
.LABEL $label$5
	CALL $38($4, $8)
	$8 = $9
	if ( $9 ){ goto $label$2 }
	
.LABEL $label$1
	$9 = *($3)
	$8 = CALL strlen([432])
	if ( ((int_32)$8 != (int_32)( *(($3 + [4])) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$6 }
	if ( CALL $101($3, [0], [-1], [432], $8) ){ goto $label$6 }
	*($10 + [16]) = ($0 + [56])
	*($10 + [24]) = (int_64)0
	CALL $41(($10 + [8]), ($10 + [16]), ($10 + [24]))
	$9 = *($10 + [12])
	if ( ($9 == 0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = *($9 + [56])
	if ( (uint_64)($6 <= $1) ){ goto $label$6 }
	if ( ((uint_64)$6 > (uint_64)$2) ){ goto $label$6 }
	$6 = *($10 + [8])
	*($10 + [24]) = $6
	$9 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$9) != (int_32)[0]), [352])
	CALL $42(($10 + [24]))
	CALL $43(*($10 + [16]), $9)
	$6 = *($10 + [24])
	*($10 + [8]) = $6
	$9 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)32)
	if ( $9) ){ goto $label$7 }
	
.LABEL $label$6
	*([0] + [4]) = ($10 + [32])
}

void .FUNC $28 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	*($8 + [40]) = $1
	*($8 + [32]) = $2
	CALL require_auth(*($0))
	$3 = *(($0 + [160]))
	$7 = *(($0 + [164]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [136])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$5 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$6), [624])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$7 = CALL db_find_i64(*(($0 + [136])), *(($0 + [144])), (int_64)-5001621369012617216, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $55($6, $7)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$6), [624])
	
.LABEL $label$3
	CALL eosio_assert(($5 == 0), [816])
	$1 = *($0)
	*($8 + [24]) = $0
	*($8 + [20]) = ($8 + [32])
	*($8 + [16]) = ($8 + [40])
	CALL $56(($8 + [8]), $6, $1, ($8 + [16]))
	*([0] + [4]) = ($8 + [48])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [688])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $94([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [272])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [272])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [24]) = [-1]
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $58(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $95($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [272])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [272])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($8 + [8]) = $2
	CALL require_auth(*($0))
	$3 = *(($0 + [40]))
	$7 = *(($0 + [44]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [16])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$5), [624])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-4417600971606065152, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $36($5, $7)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$5), [624])
	
.LABEL $label$3
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [1072])
	CALL eosio_assert((uint_64)($2 <= (int_64)4), [1072])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*($0)), [1696])
	*($8) = ($8 + [8])
	CALL eosio_assert($7, [1232])
	CALL $83($5, $6, (int_64)0, $8)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [112])
	*([0] + [4]) = $4
	*(($5 = $4) + [76]) = $0
	*($5 + [64]) = *($1)
	*($5 + [68]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = [0]
	*(($5 + [40])) = (int_64)1414284548
	*($5 + [8]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	CALL eosio_assert([1], [752])
	$3 = (int_64)5524549
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [720])
	*($5 + [56]) = [0]
	*($5 + [48]) = (int_64)0
	*($5 + [84]) = $0
	*($5 + [80]) = $0
	*($5 + [88]) = ($0 + $2)
	*($5 + [96]) = ($5 + [80])
	*($5 + [104]) = ($5 + [8])
	CALL $73(($5 + [104]), ($5 + [96]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [84]) = ($5 + [64])
	*($5 + [80]) = ($5 + [76])
	CALL $74(($5 + [80]), ($5 + [8]))
	$1 = *(($5 + [16]))
	if ( ($1 == 0) ){ goto $label$10 }
	*(($5 + [20])) = $1
	CALL $95($1)
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [112])
	return [1]
}

void .FUNC $22 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	*($11 + [56]) = $5
	*($11 + [48]) = $1
	*($11 + [40]) = $4
	CALL require_auth(*($0))
	$6 = *(($0 + [40]))
	$10 = *(($0 + [44]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$1 }
	$9 = ($10 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)$4) ){ goto $label$1 }
	$10 = $9
	$8 = ($9 + [-24])
	$9 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = ($0 + [16])
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$4 }
	$9 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$8), [624])
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	$10 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-4417600971606065152, $4)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $36($8, $10)
	CALL eosio_assert(((int_32)*($9 + [64]) == (int_32)$8), [624])
	
.LABEL $label$3
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, [1072])
	CALL eosio_assert(((int_64)*($9 + [24]) == (int_64)1), [1648])
	CALL eosio_assert(((uint_32)*($9 + [20]) > (uint_32)$5), [1680])
	$4 = *($0)
	*($11 + [16]) = $0
	*($11 + [24]) = $2
	*($11 + [36]) = $3
	*($11 + [20]) = ($11 + [48])
	*($11 + [28]) = ($11 + [56])
	*($11 + [32]) = ($11 + [40])
	CALL $75(($11 + [8]), ($0 + [56]), $4, ($11 + [16]))
	CALL eosio_assert($10, [1232])
	CALL $76($8, $9, (int_64)0, ($11 + [16]))
	*([0] + [4]) = ($11 + [64])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [24]) = [0]
	*($2 + [52]) = $1
	*($2 + [48]) = $1
	*($2 + [56]) = ($1 + $0)
	CALL $32(($2 + [48]), $2)
	CALL eosio_assert(((uint_32)(*($2 + [56]) - *($2 + [52])) > (uint_32)[7]), [272])
	CALL memcpy(($2 + [16]), *($2 + [52]), [8])
	$3 = (*($2 + [52]) + [8])
	*($2 + [52]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [56]) - $3) > (uint_32)[3]), [272])
	CALL memcpy(($2 + [24]), *($2 + [52]), [4])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $66(($2 + [48]), $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$5 }
	CALL $95(*(($2 + [8])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*($9 + [40]) = $3
	*($9 + [32]) = $2
	CALL require_auth(*($0))
	$4 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$6), [624])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-4417600971606065152, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $36($6, $8)
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$6), [624])
	
.LABEL $label$3
	CALL eosio_assert((*($7 + [20]) <= $3), [1200])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1232])
	CALL $67($6, $7, (int_64)0, ($9 + [8]))
	$7 = ($0 + [96])
	*($9 + [24]) = $7
	CALL $37(($9 + [8]), ($9 + [24]), ($9 + [32]))
	$6 = *($9 + [12])
	if ( ($6 == 0) ){ goto $label$6 }
	$6 = ((int_64)*($9 + [32]) != (int_64)*($6 + [8]))
	goto $label$5 
	
.LABEL $label$6
	$6 = [1]
	
.LABEL $label$5
	CALL eosio_assert($6, [1280])
	$2 = *($0)
	*($9 + [8]) = $0
	*($9 + [16]) = $1
	*($9 + [12]) = ($9 + [32])
	*($9 + [20]) = ($9 + [40])
	CALL $68($9, $7, $2, ($9 + [8]))
	*([0] + [4]) = ($9 + [48])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1414284548
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [752])
	$3 = (int_64)5524549
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [720])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $59(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $60(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $95(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $26 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [144])
	*([0] + [4]) = $16
	CALL require_auth(*($0))
	$8 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$12 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [928])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [960])
	$10 = [1]
	$8 = [1]
	$9 = *($4)
	$6 = CALL strlen([992])
	if ( ((int_32)$6 != (int_32)( *($4 + [4]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$6 }
	$8 = ((int_32)CALL $101($4, [0], [-1], [992], $6) != (int_32)[0])
	
.LABEL $label$6
	CALL eosio_assert($8, [1008])
	$12 = *($3 + [8])
	if ( ((int_64)$12 == (int_64)1397703940) ){ goto $label$7 }
	$10 = ((int_64)$12 == (int_64)1111967748)
	
.LABEL $label$7
	CALL eosio_assert($10, [1040])
	$5 = *(($0 + [40]))
	$9 = *(($0 + [44]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$8 }
	$10 = ($9 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$9:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$8 }
	$9 = $10
	$8 = ($10 + [-24])
	$10 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	$8 = ($0 + [16])
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$11 }
	$10 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$8), [624])
	goto $label$10 
	
.LABEL $label$11
	$10 = [0]
	$9 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-4417600971606065152, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$10 }
	$10 = CALL $36($8, $9)
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$8), [624])
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [1072])
	CALL eosio_assert(((int_64)*($10 + [24]) == (int_64)3), [1104])
	CALL require_recipient(*($0))
	CALL require_recipient($2)
	$12 = *(($3 + [8]))
	if ( ((int_64)$12 != (int_64)1397703940) ){ goto $label$12 }
	$7 = *($0)
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [1136]
	$13 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$18 }
	$8 = *($10)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$8 = ($8 + [165])
	goto $label$16 
	
.LABEL $label$18
	$1 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$14
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$1 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$13 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [1152]
	$14 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$24 }
	$8 = *($10)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$8 = ($8 + [165])
	goto $label$22 
	
.LABEL $label$24
	$1 = (int_64)0
	if ( ((int_64)$12 == (int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$20
	$10 = ($10 + [1])
	$11 = ((int_64)$11 + (int_64)-5)
	$14 = ((int_64)$1 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$19 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [1168]
	$15 = (int_64)0
	
.LOOP $label$25:
	if ( ((uint_64)$12 > (uint_64)(int_64)7) ){ goto $label$30 }
	$8 = *($10)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$8 = ($8 + [165])
	goto $label$28 
	
.LABEL $label$30
	$1 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$26
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$15 = ((int_64)$1 | (int_64)$15)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$25 }
	CALL $104(($16 + [8]), $4)
	*((($16 + [24]) + [28])) = *(($3 + [12]))
	*((($16 + [24]) + [24])) = *(($3 + [8]))
	*((($16 + [24]) + [20])) = *(($3 + [4]))
	*($16 + [32]) = $2
	*($16 + [24]) = *($0)
	*($16 + [40]) = *($3)
	$10 = (($16 + [8]) + [8])
	*(($16 + [64])) = *($10)
	*($16 + [56]) = *($16 + [8])
	*($16 + [8]) = [0]
	*($16 + [12]) = [0]
	*($10) = [0]
	*($16 + [72]) = $14
	*($16 + [80]) = $15
	*($16 + [88]) = [0]
	*(($8 = (($16 + [72]) + [20]))) = [0]
	*(($9 = (($16 + [72]) + [24]))) = [0]
	*(($10 = CALL $94([16]))) = $7
	*($10 + [8]) = $13
	*((($16 + [72]) + [32])) = [0]
	$6 = ($10 + [16])
	*($9) = $6
	*($8) = $6
	*($16 + [88]) = $10
	*($16 + [100]) = [0]
	*((($16 + [72]) + [36])) = [0]
	$10 = *($16 + [56])
	$8 = ( *((($16 + [24]) + [36])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($8 + [32])
	$12 = (CASTING uint_64)(uint_32 $8)
	$8 = (($16 + [72]) + [28])
	
.LOOP $label$31:
	$10 = ($10 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$31 }
	if ( ($10 == 0) ){ goto $label$33 }
	CALL $35($8, $10)
	$8 = *(($16 + [104]))
	$10 = *(($16 + [100]))
	goto $label$32 
	
.LABEL $label$33
	$8 = [0]
	$10 = [0]
	
.LABEL $label$32
	*($16 + [116]) = $10
	*($16 + [112]) = $10
	*($16 + [120]) = $8
	*($16 + [128]) = ($16 + [112])
	*($16 + [136]) = ($16 + [24])
	CALL $61(($16 + [136]), ($16 + [128]))
	CALL $62(($16 + [112]), ($16 + [72]))
	$10 = *($16 + [112])
	CALL send_inline($10, (*($16 + [116]) - $10))
	$10 = *($16 + [112])
	if ( ($10 == 0) ){ goto $label$34 }
	*($16 + [116]) = $10
	CALL $95($10)
	
.LABEL $label$34
	$10 = *($16 + [100])
	if ( ($10 == 0) ){ goto $label$35 }
	*(($16 + [104])) = $10
	CALL $95($10)
	
.LABEL $label$35
	$10 = *($16 + [88])
	if ( ($10 == 0) ){ goto $label$36 }
	*(($16 + [92])) = $10
	CALL $95($10)
	
.LABEL $label$36
	if ( ((*(($16 + [56])) & [1]) == 0) ){ goto $label$37 }
	CALL $95(*(($16 + [64])))
	
.LABEL $label$37
	if ( ((*($16 + [8]) & [1]) == 0) ){ goto $label$38 }
	CALL $95(*(($16 + [16])))
	
.LABEL $label$38
	$12 = *(($3 + [8]))
	
.LABEL $label$12
	if ( ((int_64)$12 != (int_64)1111967748) ){ goto $label$39 }
	$7 = *($0)
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [1136]
	$13 = (int_64)0
	
.LOOP $label$40:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$45 }
	$8 = *($10)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$44 }
	$8 = ($8 + [165])
	goto $label$43 
	
.LABEL $label$45
	$1 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$44
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$43
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$42
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$41
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$1 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$40 }
	$12 = (int_64)0
	$1 = (int_64)59
	$10 = [1184]
	$14 = (int_64)0
	
.LOOP $label$46:
	$11 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$47 }
	$8 = *($10)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$49 }
	$8 = ($8 + [165])
	goto $label$48 
	
.LABEL $label$49
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$48
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$47
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$14 = ((int_64)$11 | (int_64)$14)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$46 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [1168]
	$15 = (int_64)0
	
.LOOP $label$50:
	if ( ((uint_64)$12 > (uint_64)(int_64)7) ){ goto $label$55 }
	$8 = *($10)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$8 = ($8 + [165])
	goto $label$53 
	
.LABEL $label$55
	$1 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$54
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$52
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$51
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$15 = ((int_64)$1 | (int_64)$15)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$50 }
	CALL $104(($16 + [8]), $4)
	*((($16 + [24]) + [28])) = *(($3 + [12]))
	*((($16 + [24]) + [24])) = *(($3 + [8]))
	*((($16 + [24]) + [20])) = *(($3 + [4]))
	*($16 + [32]) = $2
	*($16 + [24]) = *($0)
	*($16 + [40]) = *($3)
	$10 = (($16 + [8]) + [8])
	*(($16 + [64])) = *($10)
	*($16 + [56]) = *($16 + [8])
	*($16 + [8]) = [0]
	*($16 + [12]) = [0]
	*($10) = [0]
	*($16 + [72]) = $14
	*($16 + [80]) = $15
	*(($10 = CALL $94([16]))) = $7
	*($10 + [8]) = $13
	*((($16 + [72]) + [32])) = [0]
	$8 = ($10 + [16])
	*((($16 + [72]) + [24])) = $8
	*((($16 + [72]) + [20])) = $8
	*($16 + [88]) = $10
	*($16 + [100]) = [0]
	*((($16 + [72]) + [36])) = [0]
	$10 = *($16 + [56])
	$8 = ( *((($16 + [24]) + [36])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($8 + [32])
	$12 = (CASTING uint_64)(uint_32 $8)
	$8 = (($16 + [72]) + [28])
	
.LOOP $label$56:
	$10 = ($10 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$56 }
	if ( ($10 == 0) ){ goto $label$58 }
	CALL $35($8, $10)
	$8 = *(($16 + [104]))
	$10 = *(($16 + [100]))
	goto $label$57 
	
.LABEL $label$58
	$8 = [0]
	$10 = [0]
	
.LABEL $label$57
	*($16 + [116]) = $10
	*($16 + [112]) = $10
	*($16 + [120]) = $8
	*($16 + [128]) = ($16 + [112])
	*($16 + [136]) = ($16 + [24])
	CALL $61(($16 + [136]), ($16 + [128]))
	CALL $62(($16 + [112]), ($16 + [72]))
	$10 = *($16 + [112])
	CALL send_inline($10, (*($16 + [116]) - $10))
	$10 = *($16 + [112])
	if ( ($10 == 0) ){ goto $label$59 }
	*($16 + [116]) = $10
	CALL $95($10)
	
.LABEL $label$59
	$10 = *($16 + [100])
	if ( ($10 == 0) ){ goto $label$60 }
	*(($16 + [104])) = $10
	CALL $95($10)
	
.LABEL $label$60
	$10 = *($16 + [88])
	if ( ($10 == 0) ){ goto $label$61 }
	*(($16 + [92])) = $10
	CALL $95($10)
	
.LABEL $label$61
	if ( ((*(($16 + [56])) & [1]) == 0) ){ goto $label$62 }
	CALL $95(*(($16 + [64])))
	
.LABEL $label$62
	if ( ((*($16 + [8]) & [1]) == 0) ){ goto $label$39 }
	CALL $95(*(($16 + [16])))
	
.LABEL $label$39
	*([0] + [4]) = ($16 + [144])
}

void .FUNC $109 ()
{
	(unreachable)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	$11 = $12
	*([0] + [4]) = $12
	$2 = *($0)
	$8 = *($0 + [4])
	$10 = *($8)
	$5 = ($10 + [112])
	$9 = *($5)
	if ( ((int_64)$9 != (int_64)-1) ){ goto $label$1 }
	$9 = (int_64)0
	$3 = ($10 + [96])
	$4 = CALL db_lowerbound_i64(*($3), *(($10 + [104])), (int_64)-4992121823278661632, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $50($3, $4)
	*($11 + [12]) = [0]
	*($11 + [8]) = $3
	$9 = *(*(CALL $70(($11 + [8])) + [4]))
	$9 = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($10 + [112])) = $9
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($9 <= (int_64)-2), [1296])
	*($1) = *($5)
	*($1 + [8]) = *(*($8 + [4]))
	CALL $97(($1 + [16]), *($8 + [8]))
	*($1 + [28]) = *(*($8 + [12]))
	*($1 + [40]) = *($10)
	$8 = *($1 + [16])
	$10 = ( *(($1 + [20])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($10 + [29])
	$9 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$3:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ($8 <= [513]) ){ goto $label$5 }
	$10 = CALL malloc($8)
	goto $label$4 
	
.LABEL $label$5
	$10 = ($12 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$4
	*($11 + [12]) = $10
	*($11 + [8]) = $10
	*($11 + [16]) = ($10 + $8)
	CALL $71(($11 + [8]), $1)
	$9 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)-4992121823278661632, *(*($0 + [8])), $9, $10, $8)
	if ( ($8 <= [513]) ){ goto $label$6 }
	CALL free($10)
	
.LABEL $label$6
	if ( (uint_64)($9 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$9 = *(($2 + [8]))
	$6 = *(*(($0 + [8])))
	$7 = *($1)
	*($11 + [24]) = *(($1 + [8]))
	*($1 + [56]) = CALL db_idx64_store($9, (int_64)-4992121823278661632, $6, $7, ($11 + [24]))
	*([0] + [4]) = ($11 + [32])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [848])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $94([64])) + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [48]) = $1
	CALL $69(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [52])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $52(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL $95(*(($3 + [24])))
	
.LABEL $label$4
	CALL $95($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [912])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [912])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [912])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [912])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1472])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1520])
	*($1 + [24]) = (int_64)3
	$4 = *($1)
	CALL eosio_assert([1], [1584])
	$7 = *($1 + [32])
	$5 = ( *(($1 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($5 + [40])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$5 = *(($1 + [44]))
	$5 = ( *(($1 + [48])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$7 = ($5 + $7)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($7 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($7)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($8 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $7)
	CALL $72($9, $1)
	CALL db_update_i64(*($1 + [68]), $2, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL $104($5, $1)
	$3 = *($1 + [24])
	$2 = *($1 + [16])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $104(($5 + [16]), $5)
	CALL void $0((int_32 ($5 + [16])), (int_32 $2), (int_64 $3), (int_32 $1))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $95(*($5 + [24]))
	
.LABEL $label$2
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $95(*($5 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $65(*($1), ($0 + [32]))
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	*(($5 + [28])) = *(($1 + [28]))
	*(($4 = (($5 + [16]) + [8]))) = *(($1 + [24]))
	*($5 + [16]) = *($1 + [16])
	*($5 + [20]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $104($5, ($1 + [32]))
	*((($5 + [32]) + [8])) = *($4)
	*($5 + [32]) = *($5 + [16])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $104(($5 + [48]), $5)
	CALL void $0((int_32 $2), (int_64 $3), (int_64 ($5 + [32])), (int_32 ($5 + [48])), (int_32 $1))
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$2 }
	CALL $95(*($5 + [56]))
	
.LABEL $label$2
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $95(*($5 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [912])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [912])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [912])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $35($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [912])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [912])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $64(CALL $63($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $101 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $100 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $98($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $103 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = *($0)
	$3 = ($5 & [1])
	if ( $3 ){ goto $label$2 }
	$5 = uint_32($5 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$5 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	if ( $3 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$4 = ((uint_32)$5 > (uint_32)$2)
	$3 = ( $2 ? $5 : $4 )
	if ( ($3 == 0) ){ goto $label$7 }
	$0 = CALL memcmp($0, $1, $3)
	if ( $0 ){ goto $label$6 }
	
.LABEL $label$7
	$0 = ( [-1] ? $4 : ($5 <= $2) )
	
.LABEL $label$6
	return $0
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $105 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $94($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $94($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	*($1) = *(*($0))
	*($1 + [16]) = *(*($0 + [4]))
	$2 = *($0 + [12])
	$3 = *(*($0 + [8]))
	*($1 + [24]) = (int_64)0
	*($1 + [20]) = $3
	*($1 + [56]) = (int_64)0
	*($1 + [8]) = *($2)
	*(($4 + [24])) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = (int_64)0
	CALL $97(($4 + [8]), *($0 + [16]))
	$2 = ($4 + [20])
	CALL $97($2, *($0 + [20]))
	CALL $97(($1 + [32]), ($4 + [8]))
	CALL $97(($1 + [44]), $2)
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$1 }
	CALL $95(*(($4 + [28])))
	
.LABEL $label$1
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$2 }
	CALL $95(*(($4 + [16])))
	
.LABEL $label$2
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	$2 = *($0)
	CALL $89(*($0 + [4]), $1)
	$5 = *($1 + [32])
	$3 = ( *(($1 + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($3 + [40])
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$3 = *(($1 + [44]))
	$3 = ( *(($1 + [48])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $5)
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $5)
	CALL $72($7, $1)
	$4 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($2 + [8]), (int_64)-4417600971606065152, *(*($0 + [8])), $4, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [848])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $94([80])) + [16 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [64]) = $1
	CALL $88(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [68])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $54(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*(($3 + [44])) & [1]) == 0) ){ goto $label$4 }
	CALL $95(*(($3 + [52])))
	
.LABEL $label$4
	if ( ((*(($3 + [32])) & [1]) == 0) ){ goto $label$5 }
	CALL $95(*(($3 + [40])))
	
.LABEL $label$5
	CALL $95($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [68]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1424])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-4417600971606065152)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1360])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1360])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $36(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	$4 = *($1 + [12])
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $104(($6 + [16]), ($1 + [16]))
	CALL $104($6, ($1 + [28]))
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*(*($0)) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $104(($6 + [48]), ($6 + [16]))
	CALL $104(($6 + [32]), $6)
	CALL void $0((int_32 $2), (int_64 $3), (int_32 $4), (int_32 ($6 + [48])), (int_32 ($6 + [32])), (int_32 $1))
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$2 }
	CALL $95(*($6 + [40]))
	
.LABEL $label$2
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$3 }
	CALL $95(*($6 + [56]))
	
.LABEL $label$3
	if ( ((*($6) & [1]) == 0) ){ goto $label$4 }
	CALL $95(*($6 + [8]))
	
.LABEL $label$4
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $95(*($6 + [24]))
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [64])
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [272])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [272])
	CALL memcpy(($2 + [8]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [272])
	CALL memcpy(($2 + [12]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $32(*($1), ($2 + [16]))
	CALL $32(*($1), ($2 + [28]))
}

void .FUNC $83 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1472])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1520])
	*($1 + [24]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1584])
	$3 = *($1 + [32])
	$5 = ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [40])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$5 = *(($1 + [44]))
	$5 = ( *(($1 + [48])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = ($5 + $3)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$7 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$3
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $3)
	CALL $72($8, $1)
	CALL db_update_i64(*($1 + [68]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [3])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $95($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = [536870911]
	if ( ((uint_32)int_32($8 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [2])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [3])
	$5 = CALL $94($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [3])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [3])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $103($0)
}

int_32 .FUNC $81 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [88]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1424])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4229821232054272000)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1360])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1360])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $44(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [912])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $7) > (int_32)[7]), [912])
	CALL memcpy(*($2), $5, [8])
	$7 = (*($2) + [8])
	*($2) = $7
	$5 = ($5 + [8])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [20]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $65($0, ($1 + [32]))
	CALL $65($0, ($1 + [44]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [272])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	CALL $48(*($1), ($0 + [8]))
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [272])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [272])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [272])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [272])
	CALL memcpy(($0 + [48]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
}

int_32 .FUNC $70 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [52]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1424])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-4992121823278661632)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1360])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1360])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $50(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $65($0, ($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [28]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	*($3 + [15]) = *($1 + [32])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [912])
	CALL memcpy(*($0 + [4]), ($3 + [15]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1472])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1520])
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)1)
	$4 = *($1)
	CALL eosio_assert([1], [1584])
	$7 = *($1 + [32])
	$5 = ( *(($1 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($5 + [40])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$5 = *(($1 + [44]))
	$5 = ( *(($1 + [48])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$7 = ($5 + $7)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($7 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($7)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($8 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $7)
	CALL $72($9, $1)
	CALL db_update_i64(*($1 + [68]), $2, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	$10 = $11
	*([0] + [4]) = $11
	$2 = *($0)
	CALL $78(*($0 + [4]), $1)
	$3 = *($1 + [8])
	$4 = *(($1 + [12]))
	$5 = ($4 - $3)
	$9 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	$8 = [8]
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$8 = (($5 & [-8]) + $8)
	
.LABEL $label$2
	$4 = ($8 + [53])
	if ( ($4 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($4)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($11 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($10 + [12]) = $8
	*($10 + [8]) = $8
	*($10 + [16]) = ($8 + $4)
	CALL $79(($10 + [8]), $1)
	$9 = *($1)
	*($1 + [88]) = CALL db_store_i64(*($2 + [8]), (int_64)4229821232054272000, *(*($0 + [8])), $9, $8, $4)
	if ( ($4 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	if ( (uint_64)($9 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$9 = *(($2 + [8]))
	$6 = *(*(($0 + [8])))
	$7 = *($1)
	*($10 + [24]) = *($1 + [56])
	*($1 + [92]) = CALL db_idx64_store($9, (int_64)4229821232054272000, $6, $7, ($10 + [24]))
	*([0] + [4]) = ($10 + [32])
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	*($10 + [16]) = (int_64)0
	$7 = [0]
	*($10 + [24]) = [0]
	$2 = *($1)
	$8 = (*(($1 + [12])) - *($1 + [8]))
	$5 = int_32($8 >> [3])
	if ( ($5 == 0) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$2 }
	$8 = CALL $94($8)
	*((($10 + [16]) + [8])) = ($8 + ($5 << [3]))
	*($10 + [16]) = $8
	*($10 + [20]) = $8
	$5 = *(($1 + [8]))
	$7 = (*(($1 + [12])) - $5)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($8, $5, $7)
	$7 = ($8 + $7)
	*($10 + [20]) = $7
	goto $label$4 
	
.LABEL $label$6
	$8 = [0]
	$9 = [0]
	$6 = [0]
	goto $label$3 
	
.LABEL $label$5
	$7 = $8
	
.LABEL $label$4
	$9 = $8
	$6 = $8
	
.LABEL $label$3
	*(($5 = ($10 + [8]))) = *(($1 + [32]))
	*($10) = *($1 + [24])
	$4 = *($1 + [48])
	$3 = *($1 + [40])
	*((($10 + [32]) + [8])) = *($5)
	*($10 + [32]) = *($10)
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$5 = (*(*($0)) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($5) + $1))
	
.LABEL $label$7
	*($10 + [56]) = [0]
	*($10 + [48]) = (int_64)0
	$0 = ($7 - $6)
	$6 = int_32($0 >> [3])
	if ( ($6 == 0) ){ goto $label$8 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$1 }
	$0 = CALL $94($0)
	*(($10 + [56])) = ($0 + ($6 << [3]))
	*($10 + [48]) = $0
	*($10 + [52]) = $0
	$7 = ($7 - $9)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($0, $8, $7)
	*($10 + [52]) = ($0 + $7)
	
.LABEL $label$8
	CALL void $5((int_32 $2), (int_64 ($10 + [48])), (int_32 ($10 + [32])), (int_32 $3), (int_64 $4), (int_32 $1))
	$1 = *($10 + [48])
	if ( ($1 == 0) ){ goto $label$9 }
	*($10 + [52]) = $1
	CALL $95($1)
	
.LABEL $label$9
	$1 = *($10 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	*($10 + [20]) = $1
	CALL $95($1)
	
.LABEL $label$10
	*([0] + [4]) = ($10 + [64])
	return (unreachable)
	
.LABEL $label$2
	CALL $103(($10 + [16]))
	
.LABEL $label$1
	CALL $103(($10 + [48]))
	(unreachable)
}

int_32 .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [400])
	$6 = *($0 + [4])
	$7 = *($6 + [56])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-4992121823278661632, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [56]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$2), [624])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $50($2, CALL $fimport$5(*($2), *($2 + [8]), (int_64)-4992121823278661632, $3))
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$2), [624])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [56])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [688])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $94([80])) + [16 align=4]) = (int_64)0
	*($6 + [32 align=4]) = (int_64)0
	*($6 + [40 align=4]) = (int_64)0
	*($6 + [48 align=4]) = (int_64)0
	*($6 + [64]) = $0
	CALL $53(($8 + [32]), $6)
	*($6 + [68]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [68])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $54(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*(($4 + [44])) & [1]) == 0) ){ goto $label$10 }
	CALL $95(*(($4 + [52])))
	
.LABEL $label$10
	if ( ((*(($4 + [32])) & [1]) == 0) ){ goto $label$11 }
	CALL $95(*(($4 + [40])))
	
.LABEL $label$11
	CALL $95($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-4992121823278661632, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [624])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $50($4, CALL $fimport$5(*($4), *($4 + [8]), (int_64)-4992121823278661632, $5))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [624])
	
.LABEL $label$4
	*(($2 + [56])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = *($0)
	$5 = ($7 + [72])
	$6 = *($5)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$2 = ($7 + [56])
	$3 = CALL db_lowerbound_i64(*($2), *(($7 + [64])), (int_64)4229821232054272000, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $44($2, $3)
	*($8 + [12]) = [0]
	*($8 + [8]) = $2
	$6 = *(*(CALL $81(($8 + [8])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($7 + [72])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [1296])
	*($1) = *($5)
	*($1 + [24]) = *(*($0 + [4]))
	$7 = *($0 + [8])
	$5 = ($1 + [8])
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$3 }
	CALL $82($5, *($7), *($7 + [4]))
	
.LABEL $label$3
	*($1 + [32]) = *(*($0 + [12]))
	$7 = *($0 + [16])
	*($1 + [80]) = [0]
	*($1 + [56]) = *($7)
	$7 = *($0 + [20])
	*($1 + [40]) = *($7)
	*(($1 + [48])) = *(($7 + [8]))
	$4 = *(*($0 + [20]) + [8])
	CALL eosio_assert([1], [752])
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$7 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$7 = [0]
	
.LABEL $label$4
	CALL eosio_assert($7, [720])
	*(($1 + [72])) = $4
	*($1 + [64]) = (int_64)0
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), $1, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $80($0, ($1 + [8]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	*($3 + [15]) = *($1 + [80])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [912])
	CALL memcpy(*($0 + [4]), ($3 + [15]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $34($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $99($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $94($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $99($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $95($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $96($7)
	return (unreachable)
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $104($5, ($1 + [16]))
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $104(($5 + [16]), $5)
	CALL void $0((int_32 $2), (int_64 $3), (int_64 ($5 + [16])), (int_32 $1))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $95(*($5 + [24]))
	
.LABEL $label$2
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $95(*($5 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($3 = $4) + [44]) = $0
	*($3 + [32]) = *($1)
	*($3 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [48]) = $1
	$4 = ($1 + $0)
	*($3 + [56]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [272])
	CALL memcpy($3, $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[7]), [272])
	CALL memcpy(($3 + [8]), $2, [8])
	*($3 + [52]) = ($1 + [16])
	CALL $32(($3 + [48]), ($3 + [16]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $33(($3 + [48]), $3)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $95(*(($3 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [64])
	return [1]
}

int_32 .FUNC $31 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = *(($0 + [160]))
	if ( ($2 == 0) ){ goto $label$1 }
	$1 = ($0 + [164])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $95($5)
	
.LABEL $label$5
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [160]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$2
	*($1) = $2
	CALL $95($3)
	
.LABEL $label$1
	$2 = *(($0 + [120]))
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = ($0 + [124])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL $95(*(($5 + [24])))
	
.LABEL $label$11
	CALL $95($5)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [120]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $2
	
.LABEL $label$7
	*($1) = $2
	CALL $95($3)
	
.LABEL $label$6
	$1 = *(($0 + [80]))
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [84])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$16 }
	$2 = *($5 + [8])
	if ( ($2 == 0) ){ goto $label$17 }
	*(($5 + [12])) = $2
	CALL $95($2)
	
.LABEL $label$17
	CALL $95($5)
	
.LABEL $label$16
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$15 }
	$3 = *(($0 + [80]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $95($3)
	
.LABEL $label$12
	$2 = *(($0 + [40]))
	if ( ($2 == 0) ){ goto $label$18 }
	$1 = ($0 + [44])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$20 }
	
.LOOP $label$21:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$22 }
	if ( ((*(($3 + [44])) & [1]) == 0) ){ goto $label$23 }
	CALL $95(*(($3 + [52])))
	
.LABEL $label$23
	if ( ((*(($3 + [32])) & [1]) == 0) ){ goto $label$24 }
	CALL $95(*(($3 + [40])))
	
.LABEL $label$24
	CALL $95($3)
	
.LABEL $label$22
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$21 }
	$3 = *(($0 + [40]))
	goto $label$19 
	
.LABEL $label$20
	$3 = $2
	
.LABEL $label$19
	*($1) = $2
	CALL $95($3)
	
.LABEL $label$18
	return $0
}