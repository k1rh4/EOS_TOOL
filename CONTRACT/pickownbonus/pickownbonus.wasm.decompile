(data (i32.const 8192) "Bonus exceeds total EOS amount.\00")
(data (i32.const 8224) "Mining Withdrawal.\00")
(data (i32.const 8243) "withdrawing more OWN than can do.\00")
(data (i32.const 8277) "withdrawing:\00")
(data (i32.const 8290) "\n\00")
(data (i32.const 8292) "OWN withdrawal.\00")
(data (i32.const 8308) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 8372) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8423) "error reading iterator\00")
(data (i32.const 8446) "read\00")
(data (i32.const 8451) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8500) "invalid symbol name\00")
(data (i32.const 8520) "write\00")
(data (i32.const 8526) "cannot create objects in table of another contract\00")
(data (i32.const 8577) "cannot pass end iterator to modify\00")
(data (i32.const 8612) "object passed to modify is not in multi_index\00")
(data (i32.const 8658) "cannot modify objects in table of another contract\00")
(data (i32.const 8709) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8768) "cannot increment end iterator\00")
(data (i32.const 8798) "next primary key in table is at autoincrement limit\00")
(data (i32.const 8850) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 8904) "cannot decrement iterator at beginning of table\00")
(data (i32.const 8952) "cannot pass end iterator to erase\00")
(data (i32.const 8986) "object passed to erase is not in multi_index\00")
(data (i32.const 9031) "cannot erase objects in table of another contract\00")
(data (i32.const 9081) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9134) "get\00")
(data (i32.const 9138) "singleton does not exist\00")
(data (i32.const 17580) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "send_inline" (func $fimport$1 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "db_update_i64" (func $fimport$4 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$5 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$6 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$10 (param i32)))
(import "env" "printi" (func $fimport$11 (param i64)))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "read_action_data" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$15))
(import "env" "current_time" (func $fimport$16 (result i64)))
(import "env" "db_previous_i64" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$18 (param i64 i64 i64) (result i32)))
(import "env" "db_remove_i64" (func $fimport$19 (param i32)))
(import "env" "memset" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$22 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$29 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$30 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$33 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$34 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$37 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$39 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$40 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$41 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $19))
(export "_ZdlPv" (func $46))
(export "_Znwj" (func $44))
(export "_Znaj" (func $45))
(export "_ZdaPv" (func $47))
(export "_ZnwjSt11align_val_t" (func $48))
(export "_ZnajSt11align_val_t" (func $49))
(export "_ZdlPvSt11align_val_t" (func $50))
(export "_ZdaPvSt11align_val_t" (func $51))
(table $0 6 6 anyfunc)
(elem (i32.const 1) $11 $7 $12 $13 $16)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17666))
(global $global$2 i32 (i32.const 17666))


void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8986])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9031])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9081])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $63($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [17580])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$2 != (int_64)-6569208335818555392) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$1 == (int_64)6138663577826885632), [8308])
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$6 }
	if ( ((int_64)$2 <= (int_64)-2139410024311554049) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-2139410024311554048) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)-2039333636185577984) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)4729477039889842176) ){ goto $label$2 }
	*($3 + [68]) = [0]
	*($3 + [64]) = [1]
	*($3 + [8]) = *($3 + [64])
	CALL $20($1, $1, ($3 + [8]))
	goto $label$2 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)-6402001778988023808) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	
.LABEL $label$6
	if ( ((int_64)$1 == (int_64)-6084070134817483472) ){ goto $label$9 }
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$2 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$8 }
	goto $label$2 
	
.LABEL $label$9
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	
.LABEL $label$8
	*($3 + [76]) = [0]
	*($3 + [72]) = [2]
	*($3) = *($3 + [72])
	CALL $21($0, $1, $3)
	goto $label$2 
	
.LABEL $label$5
	*($3 + [60]) = [0]
	*($3 + [56]) = [3]
	*($3 + [16]) = *($3 + [56])
	CALL $22($1, $1, ($3 + [16]))
	goto $label$2 
	
.LABEL $label$4
	*($3 + [52]) = [0]
	*($3 + [48]) = [4]
	*($3 + [24]) = *($3 + [48])
	CALL $23($1, $1, ($3 + [24]))
	goto $label$2 
	
.LABEL $label$3
	*($3 + [44]) = [0]
	*($3 + [40]) = [5]
	*($3 + [32]) = *($3 + [40])
	CALL $24($1, $1, ($3 + [32]))
	
.LABEL $label$2
	CALL $57([0])
	$global$0 = ($3 + [80])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8446])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8446])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8446])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8446])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8446])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8446])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8520])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8520])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8520])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $28 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $36(($0 + [112]), ($0 + [152]), *($0))
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [136]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [96]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [56]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	return $0
}

int_32 .FUNC $21 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [320])
	$global$0 = $3
	*(($4 = $3) + [312]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $61($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [288])) = (int_64)0
	*(($4 + [304])) = [0]
	*($4 + [272]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [252]) = $2
	*($4 + [248]) = $2
	*($4 + [256]) = ($2 + $5)
	*($4 + [24]) = ($4 + [248])
	*($4 + [48]) = ($4 + [264])
	CALL $25(($4 + [48]), ($4 + [24]))
	$3 = *($4 + [256])
	*((($4 + [32]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$6 = *($4 + [248])
	*($4 + [8]) = $6
	*($4 + [32]) = $6
	$3 = CALL $26(($4 + [48]), $0, $1, ($4 + [8]))
	*($4 + [24]) = $3
	*($4 + [28]) = ($4 + [312])
	CALL $27(($4 + [24]), ($4 + [264]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $64($2)
	
.LABEL $label$4
	CALL $28($3)
	if ( ((*($4 + [296]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [304])))
	
.LABEL $label$5
	$global$0 = ($4 + [320])
	return [1]
}

int_32 .FUNC $20 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [240])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $61($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	$3 = ($2 + $7)
	*(($4 + [16])) = $3
	*($4 + [28]) = $2
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $26(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $64($2)
	
.LABEL $label$6
	CALL $28($8)
	$global$0 = ($4 + [240])
	return [1]
}

int_32 .FUNC $23 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $61($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [248]) = (int_64)0
	*($4 + [240]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8446])
	CALL memcpy(($4 + [240]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8446])
	CALL memcpy((($4 + [240]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [16])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $26(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [248])
	$1 = *($4 + [240])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $64($2)
	
.LABEL $label$6
	CALL $28($8)
	$global$0 = ($4 + [256])
	return [1]
}

int_32 .FUNC $22 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [240])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $61($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [232]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8446])
	CALL memcpy(($4 + [232]), $2, [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [8])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $26(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [232])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $64($2)
	
.LABEL $label$6
	CALL $28($8)
	$global$0 = ($4 + [240])
	return [1]
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8446])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8446])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8446])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8446])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $37(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $24 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [240])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $61($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [232]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8446])
	CALL memcpy(($4 + [232]), $2, [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [8])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $26(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [232])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $64($2)
	
.LABEL $label$6
	CALL $28($8)
	$global$0 = ($4 + [240])
	return [1]
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $53(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $53(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $26 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$4 = ($global$0 - [32])
	$global$0 = $4
	*(($5 = ($4 + [8]))) = *(($3 + [8]))
	*($4) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*((($4 + [16]) + [8])) = $3
	$2 = *($4)
	*($0 + [16]) = $2
	*(($0 + [24])) = $3
	*($4 + [16]) = $2
	*(($0 + [40])) = $1
	*($0 + [32]) = $1
	*(($0 + [48])) = (int_64)-1
	$2 = (int_64)0
	*(($0 + [56])) = (int_64)0
	*(($0 + [64])) = [0]
	*($0 + [72]) = $1
	*(($0 + [80])) = $1
	*(($0 + [88])) = (int_64)-1
	*(($0 + [96])) = (int_64)0
	*(($0 + [104])) = [0]
	*($0 + [112]) = $1
	*(($0 + [120])) = $1
	*(($0 + [128])) = (int_64)-1
	*(($3 = ($0 + [136]))) = (int_64)0
	*(($0 + [144])) = [0]
	*($0 + [152]) = (int_64)0
	*(($5 = ($0 + [160]))) = (int_64)0
	*(($6 = ($0 + [168]))) = (int_64)0
	*(($7 = ($0 + [184]))) = (int_64)0
	*(($8 = ($0 + [176]))) = (int_64)0
	*(($9 = ($0 + [192]))) = (int_64)0
	$10 = (int_64)0
	$11 = (int_64)0
	$12 = (int_64)0
	$13 = (int_64)0
	$14 = (int_64)0
	$15 = CALL db_find_i64($1, $1, (int_64)-4157502620916088832, (int_64)-4157502620916088832)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$1 }
	$16 = ($0 + [112])
	CALL eosio_assert(((int_32)*(CALL $35($16, $15) + [48]) == (int_32)$16), [8372])
	$15 = *(($0 + [140]))
	if ( ((int_32)$15 == (int_32)*($3)) ){ goto $label$3 }
	$3 = *(($15 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)$16), [8372])
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	$15 = CALL db_find_i64(*(($0 + [112])), *(($0 + [120])), (int_64)-4157502620916088832, (int_64)-4157502620916088832)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $35($16, $15)
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)$16), [8372])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9138])
	$2 = *($3 + [40])
	$10 = *($3 + [32])
	$11 = *($3 + [24])
	$12 = *($3 + [16])
	$13 = *($3 + [8])
	$14 = *($3)
	
.LABEL $label$1
	*($5) = $13
	*(($0 + [152])) = $14
	*($6) = $12
	*($8) = $11
	*($7) = $10
	*($9) = $2
	$global$0 = ($4 + [32])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $59(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9164])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $59(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8520])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8520])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8520])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8520])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8520])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8520])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [8526])
	*(($5 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = $1
	$3 = *($3)
	*($5) = *($3)
	*($5 + [8]) = *(($3 + [8]))
	*($5 + [16]) = *(($3 + [16]))
	*($5 + [24]) = *(($3 + [24]))
	*($5 + [32]) = *(($3 + [32]))
	*($5 + [40]) = *(($3 + [40]))
	*($4 + [72]) = (($4 + [16]) + [48])
	*($4 + [68]) = ($4 + [16])
	*($4 + [64]) = ($4 + [16])
	CALL $43(($4 + [64]), $5)
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-4157502620916088832, $2, (int_64)-4157502620916088832, ($4 + [16]), [48])
	*($5 + [52]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-4157502620916088832) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-4157502620916088831
	
.LABEL $label$1
	*($4 + [64]) = $5
	*($4 + [16]) = (int_64)-4157502620916088832
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-4157502620916088832
	*($3 + [16]) = $6
	*($4 + [64]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $40(($1 + [24]), ($4 + [64]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [8612])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [8658])
	$3 = *($3)
	*($1) = *($3)
	*(($1 + [40])) = *(($3 + [40]))
	*(($1 + [32])) = *(($3 + [32]))
	*(($1 + [24])) = *(($3 + [24]))
	*(($1 + [16])) = *(($3 + [16]))
	*(($1 + [8])) = *(($3 + [8]))
	CALL eosio_assert([1], [8709])
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $43(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $4, [48])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-4157502620916088832) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-4157502620916088831
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $55($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $64($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $61($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9164])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $61($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $61($1)
	
.LABEL $label$2
	*(CALL $56()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $61(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $64($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8423])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $61($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = $0
	CALL $32(($3 + [32]), $5)
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $10(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $64($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8520])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8520])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8520])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8520])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8520])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8520])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8520])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $6 (int_64 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [144])
	$global$0 = $4
	*($4 + [104]) = $0
	$5 = (uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807)
	CALL eosio_assert($5, [8451])
	$0 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $0) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$0 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$0 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$0 = $7
	$8 = [1]
	$9 = $6
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$0 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$0 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$0 = (uint_64)$0 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [8500])
	CALL eosio_assert($5, [8451])
	$0 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $0) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$0 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$0 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$0 = $7
	$8 = [1]
	$9 = $6
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$0 = $7
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$0 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$0 = (uint_64)$0 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $8 ){ goto $label$10 }
	$8 = [1]
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	
.LABEL $label$6
	CALL eosio_assert($8, [8500])
	*((($4 + [64]) + [24])) = (int_64)0
	*((($4 + [64]) + [32])) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [64]) = (int_64)6138663591592764928
	*($4 + [72]) = (int_64)-3617168760277827584
	*($4) = (int_64)3617214756542218240
	CALL $1(($4 + [80]), ($4 + [104]), $4)
	$0 = *($4 + [104])
	*(($4 + [24])) = (int_64)1397703940
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$6 = CALL $53(($4 + [32]), $3)
	*($4 + [56]) = [0]
	*($4 + [48]) = (int_64)0
	$6 = *($6)
	$8 = ( *(($4 + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($8 + [32])
	$0 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$11:
	$6 = ($6 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$11 }
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $2(($4 + [48]), $6)
	$8 = *($4 + [52])
	$6 = *($4 + [48])
	goto $label$12 
	
.LABEL $label$13
	$8 = [0]
	$6 = [0]
	
.LABEL $label$12
	*($4 + [116]) = $6
	*($4 + [112]) = $6
	*($4 + [120]) = $8
	*($4 + [128]) = ($4 + [112])
	*($4 + [136]) = $4
	CALL $5(($4 + [136]), ($4 + [128]))
	$6 = *($4 + [92])
	if ( ($6 == 0) ){ goto $label$14 }
	*(($4 + [96])) = $6
	CALL _ZdlPv($6)
	*(($4 + [100])) = [0]
	*(($4 + [92])) = (int_64)0
	
.LABEL $label$14
	*(($4 + [92])) = *($4 + [48])
	$6 = ($4 + [56])
	$8 = *($6)
	*($6) = [0]
	*(($4 + [100])) = $8
	*($4 + [48]) = (int_64)0
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$15
	CALL $3($4, ($4 + [64]))
	$6 = *($4)
	CALL send_inline($6, (*($4 + [4]) - $6))
	$6 = *($4)
	if ( ($6 == 0) ){ goto $label$16 }
	*($4 + [4]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$16
	$6 = *(($4 + [92]))
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + [96])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$17
	$6 = *(($4 + [80]))
	if ( ($6 == 0) ){ goto $label$18 }
	*(($4 + [84])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$18
	$global$0 = ($4 + [144])
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$5 = ($global$0 - [80])
	$global$0 = $5
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$6 }
	$2 = *($3 + [8])
	if ( ((int_64)$2 == (int_64)1397703940) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)1314344708) ){ goto $label$6 }
	$6 = ($0 + [32])
	$8 = *(($0 + [60]))
	$7 = *(($0 + [56]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	
.LOOP $label$8:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$5 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$8 }
	goto $label$4 
	
.LABEL $label$7
	*(($9 = ($0 + [176]))) = ((int_64)*($9) + (int_64)*($3))
	
.LABEL $label$6
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($10 + [56]) == (int_32)$6), [8372])
	goto $label$3 
	
.LABEL $label$4
	$8 = ($0 + [40])
	$9 = CALL db_find_i64(*($6), *($8), (int_64)4406680309249769472, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$2 }
	$10 = CALL $8($6, $9)
	CALL eosio_assert(((int_32)*($10 + [56]) == (int_32)$6), [8372])
	
.LABEL $label$3
	$11 = *($0)
	CALL eosio_assert([1], [8577])
	CALL eosio_assert(((int_32)*($10 + [56]) == (int_32)$6), [8612])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$3()), [8658])
	$2 = *($3)
	*($10 + [24]) = ((int_64)*($10 + [24]) + (int_64)$2)
	$1 = *($10)
	CALL eosio_assert([1], [8709])
	*($5 + [72]) = ($5 + [56])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $9(($5 + [64]), $10)
	CALL db_update_i64(*($10 + [60]), $11, $5, [56])
	$9 = ($0 + [48])
	if ( (uint_64)($1 <= *($9)) ){ goto $label$1 }
	*($9) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	goto $label$1 
	
.LABEL $label$2
	$11 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$3()), [8526])
	*(($9 = CALL _Znwj([72])) + [48]) = (int_64)0
	*($9 + [40]) = (int_64)0
	*($9 + [56]) = $6
	*($9 + [8]) = (int_64)0
	*($9) = $1
	*($9 + [16]) = (int_64)0
	*($9 + [32]) = (int_64)0
	$2 = *($3)
	*($9 + [24]) = $2
	*($5 + [72]) = ($5 + [56])
	*($5 + [68]) = $5
	*($5 + [64]) = $5
	CALL $9(($5 + [64]), $9)
	$1 = *($9)
	$10 = CALL db_store_i64(*($8), (int_64)4406680309249769472, $11, $1, $5, [56])
	*($9 + [60]) = $10
	$8 = ($0 + [48])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$9 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($5 + [64]) = $9
	$1 = *($9)
	*($5) = $1
	*($5 + [60]) = $10
	$7 = ($0 + [60])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [64]))) ){ goto $label$11 }
	*($8 + [8]) = $1
	*($8 + [16]) = $10
	*($5 + [64]) = [0]
	*($8) = $9
	*($7) = ($8 + [24])
	$9 = *($5 + [64])
	*($5 + [64]) = [0]
	if ( $9 ){ goto $label$10 }
	goto $label$1 
	
.LABEL $label$11
	CALL $10(($0 + [56]), ($5 + [64]), $5, ($5 + [60]))
	$9 = *($5 + [64])
	*($5 + [64]) = [0]
	if ( ($9 == 0) ){ goto $label$1 }
	
.LABEL $label$10
	CALL _ZdlPv($9)
	
.LABEL $label$1
	*(($9 = ($0 + [184]))) = ((int_64)*($9) + (int_64)$2)
	$global$0 = ($5 + [80])
}

void .FUNC $4 (int_64 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [144])
	$global$0 = $4
	*($4 + [104]) = $0
	$5 = (uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807)
	CALL eosio_assert($5, [8451])
	$0 = (int_64)5134159
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $0) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$0 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$0 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$0 = $7
	$8 = [1]
	$9 = $6
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$0 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$0 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$0 = (uint_64)$0 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [8500])
	CALL eosio_assert($5, [8451])
	$0 = (int_64)5134159
	$6 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $0) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$0 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$0 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$0 = $7
	$8 = [1]
	$9 = $6
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$0 = $7
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$0 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$0 = (uint_64)$0 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $8 ){ goto $label$10 }
	$8 = [1]
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	
.LABEL $label$6
	CALL eosio_assert($8, [8500])
	*((($4 + [64]) + [24])) = (int_64)0
	*((($4 + [64]) + [32])) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [64]) = (int_64)-6084070134817483472
	*($4 + [72]) = (int_64)-3617168760277827584
	*($4) = (int_64)3617214756542218240
	CALL $1(($4 + [80]), ($4 + [104]), $4)
	$0 = *($4 + [104])
	*(($4 + [24])) = (int_64)1314344708
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$6 = CALL $53(($4 + [32]), $3)
	*($4 + [56]) = [0]
	*($4 + [48]) = (int_64)0
	$6 = *($6)
	$8 = ( *(($4 + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($8 + [32])
	$0 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$11:
	$6 = ($6 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$11 }
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $2(($4 + [48]), $6)
	$8 = *($4 + [52])
	$6 = *($4 + [48])
	goto $label$12 
	
.LABEL $label$13
	$8 = [0]
	$6 = [0]
	
.LABEL $label$12
	*($4 + [116]) = $6
	*($4 + [112]) = $6
	*($4 + [120]) = $8
	*($4 + [128]) = ($4 + [112])
	*($4 + [136]) = $4
	CALL $5(($4 + [136]), ($4 + [128]))
	$6 = *($4 + [92])
	if ( ($6 == 0) ){ goto $label$14 }
	*(($4 + [96])) = $6
	CALL _ZdlPv($6)
	*(($4 + [100])) = [0]
	*(($4 + [92])) = (int_64)0
	
.LABEL $label$14
	*(($4 + [92])) = *($4 + [48])
	$6 = ($4 + [56])
	$8 = *($6)
	*($6) = [0]
	*(($4 + [100])) = $8
	*($4 + [48]) = (int_64)0
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$15
	CALL $3($4, ($4 + [64]))
	$6 = *($4)
	CALL send_inline($6, (*($4 + [4]) - $6))
	$6 = *($4)
	if ( ($6 == 0) ){ goto $label$16 }
	*($4 + [4]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$16
	$6 = *(($4 + [92]))
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + [96])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$17
	$6 = *(($4 + [80]))
	if ( ($6 == 0) ){ goto $label$18 }
	*(($4 + [84])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$18
	$global$0 = ($4 + [144])
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8520])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8520])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8520])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8520])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $31(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $55($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $2($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8520])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8520])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $30(CALL $29($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$3 = *($0 + [4])
	$5 = int_32(($3 - $4) >> [4])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	$7 = [268435455]
	$8 = (*($0 + [8]) - $4)
	if ( ((uint_32)int_32($8 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$7 = int_32($8 >> [3])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ((uint_32)$7 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$6 = CALL _Znwj(($7 << [4]))
	$3 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $55($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($5 = ($6 + ($5 << [4])))) = *($1)
	*($5 + [8]) = *($2)
	$3 = ($3 - $4)
	$1 = ($5 - $3)
	$7 = ($6 + ($7 << [4]))
	$5 = ($5 + [16])
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $4, $3)
	$4 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $7
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [88])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [72])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [80])), (int_64)-2131950964154826752, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $17($9, $10)
	*($3 + [12]) = [0]
	*($3 + [8]) = $9
	$8 = *(*(CALL $33(($3 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [88])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [8798])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	*($1 + [24]) = CALL current_time()
	$2 = $2
	$5 = ($2 + [-32])
	$global$0 = $5
	CALL eosio_assert([1], [8520])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [8520])
	CALL memcpy(($2 + [-24]), ($1 + [8]), [8])
	CALL eosio_assert([1], [8520])
	CALL memcpy(($2 + [-16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [8520])
	CALL memcpy(($2 + [-8]), ($1 + [24]), [8])
	$8 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)-2131950964154826752, *(*($0 + [8])), $8, $5, [32])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $55($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = ($0 + [72])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$6:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$5 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [8372])
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)-2131950964154826752, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $17($3, $6)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [8372])
	
.LABEL $label$3
	$1 = *($7 + [8])
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	$8 = *($7 + [16])
	$9 = *($0)
	$6 = CALL $58([8292])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$9 }
	*($2 + [8]) = ($6 << [1])
	$5 = (($2 + [8]) | [1])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [8]) = ($4 | [1])
	*($2 + [16]) = $5
	*($2 + [12]) = $6
	
.LABEL $label$8
	CALL memcpy($5, [8292], $6)
	
.LABEL $label$7
	*(($5 + $6)) = [0]
	CALL $4($9, $1, $8, ($2 + [8]))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($2 + [16]))
	
.LABEL $label$10
	CALL eosio_assert([1], [8952])
	CALL eosio_assert([1], [8768])
	$6 = CALL db_next_i64(*($7 + [36]), ($2 + [24]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$11 }
	CALL $17($3, $6)
	
.LABEL $label$11
	CALL $18($3, $7)
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $52(($2 + [8]))
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8423])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $61($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = $0
	CALL $34(($3 + [32]), $5)
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $15(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $64($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $55($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $11 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	float_64 $9
	float_64 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	int_32 $15
	$1 = ($global$0 - [80])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = ($0 + [176])
	$3 = *($2)
	$4 = *(($0 + [184]))
	$5 = (int_64)0
	$6 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)4406680309249769472, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = ($0 + [32])
	$6 = CALL $8($7, $6)
	$8 = ($1 + [56])
	$9 = (CASTING float_64)(int_64 $3)
	$10 = (CASTING float_64)(int_64 $4)
	$5 = (int_64)0
	$11 = ($1 + [72])
	$12 = ($0 + [48])
	
.LOOP $label$2:
	$4 = *($0)
	$3 = *($6 + [24])
	CALL eosio_assert([1], [8577])
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$7), [8612])
	CALL eosio_assert(((int_64)*($7) == (int_64)CALL $fimport$3()), [8658])
	$13 = ((float_64)((float_64)(CASTING float_64)(int_64 $3) / (float_64)$10) * (float_64)$9)
	$14 = ((float_64)$13 + (float_64)(CASTING float_64)(uint_64 *($6 + [8])))
	if ( (((float_64)$14 < (float_64)(float_64)18446744073709551615) & ((float_64)$14 >= (float_64)(float_64)0)) ){ goto $label$4 }
	$3 = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	$3 = (Rounds 0)($14)
	
.LABEL $label$3
	*($6 + [8]) = $3
	$3 = *($6)
	CALL eosio_assert([1], [8709])
	*($11) = $8
	*($1 + [68]) = $1
	*($1 + [64]) = $1
	CALL $9(($1 + [64]), $6)
	CALL db_update_i64(*($6 + [60]), $4, $1, [56])
	$15 = (uint_64)($3 <= *($12))
	$14 = ((float_64)$13 + (float_64)(CASTING float_64)(int_64 $5))
	if ( ((float_64)(float_64)|$14| < (float_64)(float_64)9223372036854775808) ){ goto $label$7 }
	$5 = (int_64)-9223372036854775808
	if ( ($15 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$5 = (Rounds 0)($14)
	if ( $15 ){ goto $label$5 }
	
.LABEL $label$6
	*($12) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	CALL eosio_assert([1], [8768])
	$6 = CALL db_next_i64(*(($6 + [60])), $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$1 }
	$6 = CALL $8($7, $6)
	goto $label$2 
	
.LABEL $label$1
	*($0 + [152]) = ((int_64)*($0 + [152]) + (int_64)$5)
	CALL eosio_assert(((uint_64)*($2) >= (uint_64)$5), [8192])
	*($2) = (int_64))(*($2) - $5)
	$global$0 = ($1 + [80])
}

void .FUNC $12 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = ($0 + [32])
	$5 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$6:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$5 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$3), [8372])
	$8 = *($7 + [8])
	if ( ((int_64)($8 == 0) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)4406680309249769472, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $8($3, $6)
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$3), [8372])
	$8 = *($7 + [8])
	if ( (int_64)($8 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = *($0)
	CALL eosio_assert([1], [8577])
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)$3), [8612])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$3()), [8658])
	*(($7 + [8])) = (int_64)0
	*($7 + [16]) = ((int_64)*($7 + [16]) + (int_64)$8)
	$10 = *($7)
	CALL eosio_assert([1], [8709])
	*($2 + [88]) = (($2 + [16]) + [56])
	*($2 + [84]) = ($2 + [16])
	*($2 + [80]) = ($2 + [16])
	CALL $9(($2 + [80]), $7)
	CALL db_update_i64(*($7 + [60]), $9, ($2 + [16]), [56])
	$6 = ($0 + [48])
	if ( (uint_64)($10 <= *($6)) ){ goto $label$7 }
	*($6) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$10 = *($0)
	$6 = CALL $58([8224])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$10 }
	*($2) = ($6 << [1])
	$5 = ($2 | [1])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$7 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($7)
	*($2) = ($7 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $6
	
.LABEL $label$9
	CALL memcpy($5, [8224], $6)
	
.LABEL $label$8
	*(($5 + $6)) = [0]
	CALL $6($10, $1, $8, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$2
	$global$0 = ($2 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $52($2)
}

void .FUNC $13 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [112])
	$global$0 = $3
	*($3 + [8]) = $1
	$4 = ($0 + [32])
	$6 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)$4), [8372])
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)4406680309249769472, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $8($4, $7)
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)$4), [8372])
	
.LABEL $label$2
	$9 = *($8 + [24])
	$1 = ( $9 ? $2 : ((int_64)$9 < (int_64)$2) )
	*($3) = $1
	CALL eosio_assert(((uint_64)*(($0 + [184])) >= (uint_64)$1), [8243])
	CALL prints([8277])
	CALL printi($1)
	CALL prints([8290])
	$2 = *($0)
	CALL eosio_assert([1], [8577])
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)$4), [8612])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$3()), [8658])
	*($8 + [24]) = (int_64))($9 - $1)
	$1 = *($8)
	CALL eosio_assert([1], [8709])
	*($3 + [88]) = (($3 + [16]) + [56])
	*($3 + [84]) = ($3 + [16])
	*($3 + [80]) = ($3 + [16])
	CALL $9(($3 + [80]), $8)
	CALL db_update_i64(*($8 + [60]), $2, ($3 + [16]), [56])
	$7 = ($0 + [48])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$6 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$1 = *($0)
	*($3 + [80]) = $0
	*($3 + [84]) = ($3 + [8])
	*($3 + [88]) = $3
	*($3 + [104]) = $1
	CALL eosio_assert(((int_64)*($0 + [72]) == (int_64)CALL $fimport$3()), [8526])
	$6 = ($0 + [72])
	*($3 + [16]) = $6
	*($3 + [20]) = ($3 + [80])
	*($3 + [24]) = ($3 + [104])
	*(($7 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($7) = (int_64)0
	*($7 + [16]) = (int_64)0
	*($7 + [24]) = (int_64)0
	*($7 + [32]) = $6
	CALL $14(($3 + [16]), $7)
	*($3 + [96]) = $7
	$1 = *($7)
	*($3 + [16]) = $1
	$8 = *($7 + [36])
	*($3 + [92]) = $8
	$5 = ($0 + [100])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($6 + [8]) = $1
	*($6 + [16]) = $8
	*($3 + [96]) = [0]
	*($6) = $7
	*($5) = ($6 + [24])
	$7 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( $7 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $15(($0 + [96]), ($3 + [96]), ($3 + [16]), ($3 + [92]))
	$7 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*(($7 = ($0 + [184]))) = (int_64))(*($7) - *($3))
	
.LABEL $label$1
	$global$0 = ($3 + [112])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$0), [8372])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157502620916088832, (int_64)-4157502620916088832)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $35($0, $4)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$0), [8372])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [8577])
	CALL $41($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $42($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $38($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $54($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $54($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $52($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8446])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8446])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8446])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8446])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8423])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $61($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = $0
	CALL $39(($3 + [32]), $5)
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-4157502620916088832
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-4157502620916088832
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $40(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $64($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8446])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8446])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8446])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8446])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8446])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8446])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8446])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $33 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [36]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8904])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-2131950964154826752)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8850])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8850])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $17(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8520])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8520])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8520])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8520])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $58 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $56())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $60($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $61 (int_32 $0)
{
	return CALL $62([9184], $0)
}

int_32 .FUNC $63 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9176]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9180])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9176]) = [1]
	$2 = ($2 << [16])
	*([0] + [9180]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9180])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9180]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9176]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9176]) = [1]
	$3 = ($3 << [16])
	*([0] + [9180]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9180])
	
.LABEL $label$10
	*([0] + [9180]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $64 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17568])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17376]
	$3 = (((int_32)$1 * (int_32)[12]) + [17376])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $64($0)
	
.LABEL $label$1
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9134])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $2($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8446])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $52 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $55 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $56 ()
{
	return [9168]
}

void .FUNC $57 (int_32 $0)
{
}