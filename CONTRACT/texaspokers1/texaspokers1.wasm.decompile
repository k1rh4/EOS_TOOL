(data (i32.const 4) "Pi\00\00")
(data (i32.const 32) "onerror\00")
(data (i32.const 48) "eosio\00")
(data (i32.const 64) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 128) "transfer\00")
(data (i32.const 144) "eosio.token\00")
(data (i32.const 160) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 224) "cannot pass end iterator to erase\00")
(data (i32.const 272) "cannot increment end iterator\00")
(data (i32.const 304) "object passed to erase is not in multi_index\00")
(data (i32.const 352) "cannot erase objects in table of another contract\00")
(data (i32.const 416) "attempt to remove object that was not in multi_index\00")
(data (i32.const 480) "error reading iterator\00")
(data (i32.const 512) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 576) "invalid symbol name\00")
(data (i32.const 608) "read\00")
(data (i32.const 624) "active\00")
(data (i32.const 656) "write\00")
(data (i32.const 672) "cannot create objects in table of another contract\00")
(data (i32.const 736) "cannot pass end iterator to modify\00")
(data (i32.const 784) "object passed to modify is not in multi_index\00")
(data (i32.const 832) "cannot modify objects in table of another contract\00")
(data (i32.const 896) "attempt to add asset with different symbol\00")
(data (i32.const 944) "addition underflow\00")
(data (i32.const 976) "addition overflow\00")
(data (i32.const 1008) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1072) "withdraw\00")
(data (i32.const 1088) "\e8\af\a5\e7\89\8c\e6\a1\8c\e4\b8\8d\e5\ad\98\e5\9c\a8\00")
(data (i32.const 1120) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1184) "\e7\ad\b9\e7\a0\81\e4\b8\8d\e5\a4\9f\00")
(data (i32.const 1200) "get\00")
(data (i32.const 1216) "attempt to subtract asset with different symbol\00")
(data (i32.const 1264) "subtraction underflow\00")
(data (i32.const 1296) "subtraction overflow\00")
(data (i32.const 1328) "bet money refund\00")
(data (i32.const 1360) "chip refund\00")
(data (i32.const 1376) "no this day\00")
(data (i32.const 1392) "unable to find key\00")
(data (i32.const 1424) "divide by zero\00")
(data (i32.const 1440) "signed division overflow\00")
(data (i32.const 1472) "multiplication overflow\00")
(data (i32.const 1504) "multiplication underflow\00")
(data (i32.const 1536) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1600) "texas dividend\00")
(data (i32.const 1616) "\e8\af\a5\e7\94\a8\e6\88\b7\e6\9c\aa\e6\b3\a8\e5\86\8c\00")
(data (i32.const 1648) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1712) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1760) ".\00")
(data (i32.const 1776) " \00")
(data (i32.const 1792) ",\00")
(data (i32.const 1808) "allinreceipt\00")
(data (i32.const 1824) "\e6\8c\96\e7\9f\bf\e6\88\90\e5\8a\9f\00")
(data (i32.const 1840) "\e9\94\99\e8\af\af\00")
(data (i32.const 1856) "Not enough chips\00")
(data (i32.const 1888) "texasdeal\00")
(data (i32.const 1904) "no enough chip\00")
(data (i32.const 1920) "player is not on table\00")
(data (i32.const 1952) "no winer\00")
(data (i32.const 1968) "Invalid type\00")
(data (i32.const 1984) "only accept EOS\00")
(data (i32.const 2000) "must more than 0.01 EOS\00")
(data (i32.const 10432) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 10528) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 10544) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 10560) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$1))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_end_i64" (func $fimport$5 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "db_idx_double_find_primary" (func $fimport$8 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx_double_store" (func $fimport$9 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx_double_update" (func $fimport$10 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$14 (param i32)))
(import "env" "db_store_i64" (func $fimport$15 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$16 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$17 (param i32 i32)))
(import "env" "memcpy" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$21 (param i64)))
(import "env" "prints" (func $fimport$22 (param i32)))
(import "env" "prints_l" (func $fimport$23 (param i32 i32)))
(import "env" "printui" (func $fimport$24 (param i64)))
(import "env" "read_action_data" (func $fimport$25 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$26 (param i64)))
(import "env" "require_auth2" (func $fimport$27 (param i64 i64)))
(import "env" "send_inline" (func $fimport$28 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $1))
(export "_ZeqRK11checksum160S1_" (func $2))
(export "_ZneRK11checksum160S1_" (func $3))
(export "now" (func $4))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $5))
(export "apply" (func $6))
(export "_ZN5eosio10texas_gameC2Ey" (func $7))
(export "_ZN5eosio10texas_game8transferEyyNS_5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $8))
(export "_ZN5eosio10texas_game8texasbetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyNS_5assetE" (func $10))
(export "_ZN5eosio10texas_game9texasoverENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6vectorIyNS5_IyEEEENS8_INS0_12player_pokerENS5_ISB_EEEE" (func $12))
(export "_ZN5eosio10texas_game11texasrewardENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyNS_5assetE" (func $14))
(export "_ZN5eosio10texas_game9texasdealENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_" (func $15))
(export "_ZN5eosio10texas_game9texasexitENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy" (func $17))
(export "_ZN5eosio10texas_game9texasjoinEyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_5assetE" (func $19))
(export "_ZN5eosio10texas_game6miningEv" (func $21))
(export "_ZN5eosio10texas_game10texasallinENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy" (func $23))
(export "_ZN5eosio10texas_game12allinreceiptEyNS_5assetE" (func $24))
(export "_ZN5eosio10texas_game10settlementEv" (func $26))
(export "_ZN5eosio10texas_game10texasclearENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE" (func $27))
(export "_ZN5eosio10texas_game11texasconfigEyy" (func $29))
(export "_ZN5eosio10texas_game10texasblindENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyNS_5assetE" (func $31))
(export "_ZN5eosio10texas_game11texasredeemEy" (func $32))
(export "_ZN5eosio10texas_game11startminingEb" (func $34))
(export "_ZN5eosio10texas_game8rechargeEyNS_5assetE" (func $36))
(export "_ZN5eosio10texas_game11withdraweosEy" (func $37))
(export "_ZN5eosio10texas_game9clearchipEy" (func $38))
(export "_ZN5eosio10texas_game10texasdividEv" (func $91))
(export "_ZN5eosio10texas_game12setcoinscaleEy" (func $92))
(export "_ZN5eosio10texas_game11perdividendEy" (func $93))
(export "_ZN5eosio10texas_game7promoteEv" (func $94))
(export "_ZN5eosio10texas_game9circulateEv" (func $95))
(export "_ZN5eosio10texas_game9culactiveEy" (func $116))
(export "_ZN5eosio10texas_game9culminingEv" (func $117))
(export "_ZN5eosio10texas_game11sortbyscoreEv" (func $118))
(export "_ZN5eosio10texas_game9perminingEyNS_5assetE" (func $119))
(export "_ZN5eosio4cmp1ERKNS_11player_chipES2_" (func $142))
(export "_ZN5eosio10texas_game7chippotERNSt3__16vectorINS_11player_chipENS1_9allocatorIS3_EEEEy" (func $144))
(export "_ZN5eosio10texas_game13compare_cardsERNSt3__16vectorINS0_12player_pokerENS1_9allocatorIS3_EEEE" (func $146))
(export "_ZN5eosio10texas_game7compareERKNS0_12player_pokerES3_" (func $153))
(export "_ZN5eosio10texas_game9sortcardsENSt3__16vectorIyNS1_9allocatorIyEEEE" (func $156))
(export "_ZN5eosio10texas_game3culEdy" (func $177))
(export "_ZN5eosio10texas_game13culgcoinownerEv" (func $178))
(export "malloc" (func $180))
(export "free" (func $183))
(export "pow" (func $190))
(export "sqrt" (func $191))
(export "fabs" (func $192))
(export "scalbn" (func $193))
(export "memcmp" (func $194))
(export "strlen" (func $195))
(export "_GLOBAL__sub_I_eostexas.cpp" (func $0))
(table $0 22 22 anyfunc)
(elem (i32.const 0) $196 $32 $29 $38 $36 $17 $10 $8 $34 $19 $12 $31 $27 $37 $24 $21 $15 $23 $14 $26 $142 $153)



void .FUNC $174 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [80])
	$11 = $12
	*([0] + [4]) = $12
	*($1) = *(*(*($0 + [4])))
	$3 = ($1 + [92])
	$4 = *($1 + [92])
	$5 = *(($1 + [96]))
	$6 = ($5 - $4)
	$10 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	$2 = *($0)
	$9 = [90]
	
.LOOP $label$1:
	$9 = ($9 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$9 = (($6 & [-8]) + $9)
	
.LABEL $label$2
	$5 = ($9 + [2])
	if ( ($5 <= [513]) ){ goto $label$4 }
	$9 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$9 = ($12 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$3
	*($11 + [4]) = $9
	*($11) = $9
	*($11 + [8]) = ($9 + $5)
	*($11 + [16]) = $11
	*($11 + [28]) = ($1 + [8])
	*($11 + [24]) = $1
	*($11 + [32]) = ($1 + [16])
	*($11 + [36]) = ($1 + [32])
	*($11 + [40]) = ($1 + [40])
	*($11 + [44]) = ($1 + [56])
	*($11 + [48]) = ($1 + [72])
	*($11 + [52]) = ($1 + [80])
	*($11 + [56]) = ($1 + [88])
	*($11 + [60]) = ($1 + [89])
	*($11 + [64]) = $3
	*($11 + [68]) = ($1 + [104])
	*($11 + [72]) = ($1 + [105])
	CALL $58(($11 + [24]), ($11 + [16]))
	$10 = *($1)
	*($1 + [112]) = CALL db_store_i64(*($2 + [8]), (int_64)-6030912134838419456, *(*($0 + [8])), $10, $9, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($9)
	
.LABEL $label$5
	if ( (uint_64)($10 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$10 = *(($2 + [8]))
	$7 = *(*(($0 + [8])))
	$8 = *($1)
	*($11 + [24]) = *(($1 + [80]))
	*($1 + [116]) = CALL db_idx_double_store($10, (int_64)-6030912134838419456, $7, $8, ($11 + [24]))
	*([0] + [4]) = ($11 + [80])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [480])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [48]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [64])
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$16 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$22 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$3 = ($3 + [165])
	goto $label$20 
	
.LABEL $label$22
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$18
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$17 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$16
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$15 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$34 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$30
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$29 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$14 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$40 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$3 = ($3 + [165])
	goto $label$38 
	
.LABEL $label$40
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$36
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$35 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	$4 = CALL _ZN5eosio10texas_gameC2Ey(($9 + [304]), $0)
	if ( ((int_64)$2 <= (int_64)-3838636825027018753) ){ goto $label$59 }
	if ( ((int_64)$2 > (int_64)-3838636584145137153) ){ goto $label$58 }
	if ( ((int_64)$2 <= (int_64)-3838636716443828225) ){ goto $label$56 }
	if ( ((int_64)$2 == (int_64)-3838636716443828224) ){ goto $label$52 }
	if ( ((int_64)$2 == (int_64)-3838636626851397632) ){ goto $label$51 }
	if ( ((int_64)$2 != (int_64)-3838636584462015488) ){ goto $label$41 }
	*($9 + [188]) = [0]
	*($9 + [184]) = [1]
	*($9 + [112 align=4]) = *($9 + [184])
	CALL $33($4, ($9 + [112]))
	goto $label$41 
	
.LABEL $label$59
	if ( ((int_64)$2 <= (int_64)-3838636872625242113) ){ goto $label$57 }
	if ( ((int_64)$2 <= (int_64)-3838636855493246977) ){ goto $label$55 }
	if ( ((int_64)$2 == (int_64)-3838636855493246976) ){ goto $label$50 }
	if ( ((int_64)$2 == (int_64)-3838636838387073024) ){ goto $label$49 }
	if ( ((int_64)$2 != (int_64)-3838636836622985216) ){ goto $label$41 }
	*($9 + [204]) = [0]
	*($9 + [200]) = [2]
	*($9 + [96 align=4]) = *($9 + [200])
	CALL $30($4, ($9 + [96]))
	goto $label$41 
	
.LABEL $label$58
	if ( ((int_64)$2 <= (int_64)-2039333636190949377) ){ goto $label$54 }
	if ( ((int_64)$2 == (int_64)-2039333636190949376) ){ goto $label$48 }
	if ( ((int_64)$2 == (int_64)3774836574300384144) ){ goto $label$47 }
	if ( ((int_64)$2 != (int_64)4923678634786947072) ){ goto $label$41 }
	*($9 + [156]) = [0]
	*($9 + [152]) = [3]
	*($9 + [144 align=4]) = *($9 + [152])
	CALL $33($4, ($9 + [144]))
	goto $label$41 
	
.LABEL $label$57
	if ( ((int_64)$2 > (int_64)-4417018952356577281) ){ goto $label$53 }
	if ( ((int_64)$2 == (int_64)-7807295961876660224) ){ goto $label$46 }
	if ( ((int_64)$2 != (int_64)-5003266787307945984) ){ goto $label$41 }
	*($9 + [172]) = [0]
	*($9 + [168]) = [4]
	*($9 + [128 align=4]) = *($9 + [168])
	CALL $25($4, ($9 + [128]))
	goto $label$41 
	
.LABEL $label$56
	if ( ((int_64)$2 == (int_64)-3838636825027018752) ){ goto $label$45 }
	if ( ((int_64)$2 != (int_64)-3838636797508190208) ){ goto $label$41 }
	*($9 + [260]) = [0]
	*($9 + [256]) = [5]
	*($9 + [40 align=4]) = *($9 + [256])
	CALL $18($4, ($9 + [40]))
	goto $label$41 
	
.LABEL $label$55
	if ( ((int_64)$2 == (int_64)-3838636872625242112) ){ goto $label$44 }
	if ( ((int_64)$2 != (int_64)-3838636859076902912) ){ goto $label$41 }
	*($9 + [292]) = [0]
	*($9 + [288]) = [6]
	*($9 + [8 align=4]) = *($9 + [288])
	CALL $11($4, ($9 + [8]))
	goto $label$41 
	
.LABEL $label$54
	if ( ((int_64)$2 == (int_64)-3838636584145137152) ){ goto $label$43 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$41 }
	*($9 + [300]) = [0]
	*($9 + [296]) = [7]
	*($9) = *($9 + [296])
	CALL $9($4, $9)
	goto $label$41 
	
.LABEL $label$53
	if ( ((int_64)$2 == (int_64)-4417018952356577280) ){ goto $label$42 }
	if ( ((int_64)$2 != (int_64)-4157529674715179008) ){ goto $label$41 }
	*($9 + [180]) = [0]
	*($9 + [176]) = [8]
	*($9 + [120 align=4]) = *($9 + [176])
	CALL $35($4, ($9 + [120]))
	goto $label$41 
	
.LABEL $label$52
	*($9 + [252]) = [0]
	*($9 + [248]) = [9]
	*($9 + [48 align=4]) = *($9 + [248])
	CALL $20($4, ($9 + [48]))
	goto $label$41 
	
.LABEL $label$51
	*($9 + [284]) = [0]
	*($9 + [280]) = [10]
	*($9 + [16 align=4]) = *($9 + [280])
	CALL $13($4, ($9 + [16]))
	goto $label$41 
	
.LABEL $label$50
	*($9 + [196]) = [0]
	*($9 + [192]) = [11]
	*($9 + [104 align=4]) = *($9 + [192])
	CALL $11($4, ($9 + [104]))
	goto $label$41 
	
.LABEL $label$49
	*($9 + [212]) = [0]
	*($9 + [208]) = [12]
	*($9 + [88 align=4]) = *($9 + [208])
	CALL $28($4, ($9 + [88]))
	goto $label$41 
	
.LABEL $label$48
	*($9 + [164]) = [0]
	*($9 + [160]) = [13]
	*($9 + [136 align=4]) = *($9 + [160])
	CALL $33($4, ($9 + [136]))
	goto $label$41 
	
.LABEL $label$47
	*($9 + [228]) = [0]
	*($9 + [224]) = [14]
	*($9 + [72 align=4]) = *($9 + [224])
	CALL $25($4, ($9 + [72]))
	goto $label$41 
	
.LABEL $label$46
	*($9 + [244]) = [0]
	*($9 + [240]) = [15]
	*($9 + [56 align=4]) = *($9 + [240])
	CALL $22($4, ($9 + [56]))
	goto $label$41 
	
.LABEL $label$45
	*($9 + [268]) = [0]
	*($9 + [264]) = [16]
	*($9 + [32 align=4]) = *($9 + [264])
	CALL $16($4, ($9 + [32]))
	goto $label$41 
	
.LABEL $label$44
	*($9 + [236]) = [0]
	*($9 + [232]) = [17]
	*($9 + [64 align=4]) = *($9 + [232])
	CALL $18($4, ($9 + [64]))
	goto $label$41 
	
.LABEL $label$43
	*($9 + [276]) = [0]
	*($9 + [272]) = [18]
	*($9 + [24 align=4]) = *($9 + [272])
	CALL $11($4, ($9 + [24]))
	goto $label$41 
	
.LABEL $label$42
	*($9 + [220]) = [0]
	*($9 + [216]) = [19]
	*($9 + [80 align=4]) = *($9 + [216])
	CALL $22($4, ($9 + [80]))
	
.LABEL $label$41
	CALL $39($4)
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [480])
}

void .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	*($1) = (int_64)1
	$2 = *($0)
	$3 = (Rounds 0)(((float_64)CALL pow((float_64)10, (float_64)4) * (float_64)(float_64)391148))
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [512])
	$4 = (int_64)4411461
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [576])
	*(($1 + [16])) = (int_64)1129334020
	*($1 + [8]) = $3
	$3 = (Rounds 0)(((float_64)CALL pow((float_64)10, (float_64)4) * (float_64)(float_64)391148))
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [512])
	$4 = (int_64)4411461
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [576])
	*(($1 + [32])) = (int_64)1129334020
	*(($6 = ($1 + [24]))) = $3
	$8 = $8
	$5 = ($8 + [-112])
	*([0] + [4]) = $5
	*($7 + [12]) = $5
	*($7 + [8]) = $5
	*($7 + [16]) = ($8 + [-8])
	CALL eosio_assert([1], [656])
	CALL memcpy(*($7 + [12]), $1, [8])
	*($7 + [12]) = (*($7 + [12]) + [8])
	*($7 + [40]) = ($7 + [8])
	*($7 + [28]) = $6
	*($7 + [24]) = ($1 + [8])
	*($7 + [32]) = ($1 + [40])
	CALL $83(($7 + [24]), ($7 + [40]))
	*($7 + [40]) = ($7 + [8])
	*($7 + [28]) = ($1 + [64])
	*($7 + [24]) = ($1 + [48])
	*($7 + [32]) = ($1 + [80])
	*($7 + [36]) = ($1 + [96])
	CALL $84(($7 + [24]), ($7 + [40]))
	$4 = *($1)
	*($1 + [108]) = CALL db_store_i64(*($2 + [8]), (int_64)-3838636613264998400, *(*($0 + [8])), $4, $5, [104])
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$11 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($7 + [48])
}

int_64 .FUNC _ZN5eosio10texas_game3culEdy (int_32 $0, float_64 $1, int_64 $2)
{
	float_64 $3
	$3 = (float_64)1e3
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	
.LOOP $label$2:
	$3 = ((float_64)$3 + (float_64)((float_64)CALL pow((float_64)0.5, (CASTING float_64)(uint_64 $2)) * (float_64)$1))
	$2 = ((int_64)$2 + (int_64)-1)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$2 }
	
.LABEL $label$1
	return $3
}

void .FUNC $170 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [96])
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*(($1 + [108])) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$4 = ($1 + [80])
	*(($12 = $13) + [24]) = *($4)
	$5 = *($1)
	$6 = *(*($3))
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [512])
	$11 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$10 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [576])
	CALL eosio_assert(((int_64)*(($1 + [24])) == (int_64)1397703940), [896])
	$11 = ((int_64)*($1 + [16]) + (int_64)$6)
	*($1 + [16]) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [976])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [1008])
	$7 = ($1 + [92])
	$8 = *($1 + [92])
	$10 = *(($1 + [96]))
	$9 = ($10 - $8)
	$11 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	$3 = [90]
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$7 }
	$3 = (($9 & [-8]) + $3)
	
.LABEL $label$7
	$10 = ($3 + [2])
	if ( ($10 <= [513]) ){ goto $label$9 }
	$3 = CALL malloc($10)
	goto $label$8 
	
.LABEL $label$9
	$3 = ($13 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$8
	*($12 + [12]) = $3
	*($12 + [8]) = $3
	*($12 + [16]) = ($3 + $10)
	*($12 + [32]) = ($12 + [8])
	*($12 + [40]) = $1
	*($12 + [44]) = ($1 + [8])
	*($12 + [48]) = ($1 + [16])
	*($12 + [52]) = ($1 + [32])
	*($12 + [56]) = ($1 + [40])
	*($12 + [60]) = ($1 + [56])
	*($12 + [64]) = ($1 + [72])
	*($12 + [68]) = $4
	*($12 + [72]) = ($1 + [88])
	*($12 + [76]) = ($1 + [89])
	*($12 + [80]) = $7
	*($12 + [84]) = ($1 + [104])
	*($12 + [88]) = ($1 + [105])
	CALL $58(($12 + [40]), ($12 + [32]))
	CALL db_update_i64(*($1 + [112]), $2, $3, $10)
	if ( ($10 <= [513]) ){ goto $label$10 }
	CALL free($3)
	
.LABEL $label$10
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($12 + [40]) = *($4)
	if ( (CALL memcmp(($12 + [24]), ($12 + [40]), [8]) == 0) ){ goto $label$12 }
	$3 = *($1 + [116])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$13 }
	$3 = CALL db_idx_double_find_primary(*($0), *($0 + [8]), (int_64)-6030912134838419456, ($12 + [32]), $5)
	*(($1 + [116])) = $3
	
.LABEL $label$13
	CALL db_idx_double_update($3, $2, ($12 + [40]))
	
.LABEL $label$12
	*([0] + [4]) = ($12 + [96])
}

void .FUNC $171 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [608])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [608])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [608])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $77(*($1), ($0 + [32]))
}

void .FUNC $172 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $189(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $189(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $185(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $185(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC _ZN5eosio10texas_gameC2Ey (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	*($0 + [8]) = $1
	*($0) = $1
	*(($0 + [16])) = $1
	*(($0 + [24])) = (int_64)-1
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = [0]
	*($0 + [48]) = $1
	*(($0 + [56])) = $1
	*(($0 + [64])) = (int_64)-1
	*(($0 + [72])) = [0]
	*(($5 = ($0 + [76]))) = [0]
	*(($6 = ($0 + [80]))) = [0]
	*($0 + [96]) = $1
	*(($0 + [104])) = $1
	*(($0 + [112])) = (int_64)-1
	*(($0 + [120])) = [0]
	*(($0 + [124])) = [0]
	*(($0 + [128])) = [0]
	*($0 + [136]) = $1
	*(($0 + [144])) = $1
	*(($0 + [152])) = (int_64)-1
	*(($0 + [160])) = [0]
	*(($0 + [164])) = [0]
	*(($0 + [168])) = [0]
	$2 = ($0 + [48])
	$3 = CALL db_find_i64($1, $1, (int_64)-3838636613264998400, (int_64)1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $81($2, $3) + [104]) == (int_32)$2), [160])
	goto $label$1 
	
.LABEL $label$2
	$7 = *($2)
	*($8 + [40]) = $1
	CALL eosio_assert(((int_64)$7 == (int_64)CALL $fimport$3()), [672])
	*($8 + [16]) = $2
	*($8 + [20]) = ($8 + [8])
	*($8 + [24]) = ($8 + [40])
	$3 = CALL $184([120])
	CALL $96(($3 + [8]))
	CALL $97(($3 + [48]))
	*($3 + [104]) = $2
	CALL $176(($8 + [16]), $3)
	*($8 + [32]) = $3
	$1 = *($3)
	*($8 + [16]) = $1
	$4 = *($3 + [108])
	*($8 + [12]) = $4
	$2 = *($5)
	if ( ((uint_32)$2 >= (uint_32)*($6)) ){ goto $label$4 }
	*($2 + [8]) = $1
	*($2 + [16]) = $4
	*($8 + [32]) = [0]
	*($2) = $3
	*(($0 + [76])) = ($2 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $99(($0 + [72]), ($8 + [32]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$3
	$2 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	CALL $185($2)
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [48])
	return $0
}

void .FUNC _ZN5eosio10texas_game13culgcoinownerEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [288])
	*([0] + [4]) = $7
	*(($7 + [136])) = [0]
	*($7 + [120]) = (int_64)-1
	$6 = (int_64)0
	*($7 + [128]) = (int_64)0
	$3 = *($0)
	*($7 + [104]) = $3
	*($7 + [112]) = $3
	*($7 + [140]) = [0]
	$5 = CALL db_lowerbound_i64($3, $3, (int_64)-6030912134838419456, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $56(($7 + [104]), $5)
	$6 = (int_64)0
	
.LOOP $label$2:
	CALL _ZN5eosio10texas_game12setcoinscaleEy(($7 + [144]), $0, *($5))
	$3 = *($7 + [144])
	CALL eosio_assert([1], [272])
	$6 = ((int_64)(CASTING uint_64)(uint_32 ((int_64)$3 > (int_64)0)) + (int_64)$6)
	$5 = CALL db_next_i64(*($5 + [112]), ($7 + [144]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $56(($7 + [104]), $5)
	goto $label$2 
	
.LABEL $label$1
	$5 = ($0 + [48])
	*($7 + [144]) = (CASTING uint_64)(uint_32 $5)
	$1 = CALL memcpy($7, CALL $179($5, *(*(CALL $80(($7 + [144])) + [4])), [1392]), [96])
	$3 = *($0)
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$5), [784])
	CALL eosio_assert(((int_64)*($0 + [48]) == (int_64)CALL $fimport$3()), [832])
	*(($7 = ($1 + [96]))) = $6
	$6 = *($1)
	CALL eosio_assert([1], [1008])
	*($1 + [256]) = (($1 + [144]) + [104])
	*($1 + [252]) = ($1 + [144])
	*($1 + [248]) = ($1 + [144])
	CALL eosio_assert([1], [656])
	CALL memcpy(*($1 + [252]), $1, [8])
	*($1 + [252]) = (*($1 + [252]) + [8])
	*($1 + [280]) = ($1 + [248])
	*($1 + [268]) = ($1 + [24])
	*($1 + [264]) = ($1 + [8])
	*($1 + [272]) = ($1 + [40])
	CALL $83(($1 + [264]), ($1 + [280]))
	*($1 + [280]) = ($1 + [248])
	*($1 + [268]) = ($1 + [64])
	*($1 + [264]) = ($1 + [48])
	*($1 + [272]) = ($1 + [80])
	*($1 + [276]) = $7
	CALL $84(($1 + [264]), ($1 + [280]))
	CALL db_update_i64(*($1 + [108]), $3, ($1 + [144]), [104])
	$7 = ($0 + [64])
	if ( (uint_64)($6 <= *($7)) ){ goto $label$3 }
	*($7) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$2 = *($1 + [128])
	if ( ($2 == 0) ){ goto $label$4 }
	$4 = ($1 + [132])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$8 }
	$0 = *($5 + [92])
	if ( ($0 == 0) ){ goto $label$9 }
	*(($5 + [96])) = $0
	CALL $185($0)
	
.LABEL $label$9
	CALL $185($5)
	
.LABEL $label$8
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$7 }
	$7 = *(($1 + [128]))
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	*($4) = $2
	CALL $185($7)
	
.LABEL $label$4
	*([0] + [4]) = ($1 + [288])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [5])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$3 }
	$4 = [134217727]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$4 = int_32($7 >> [4])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $184(($4 << [5]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $188($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [5])))) = *($1)
	*(($3 + [24])) = *(($1 + [24]))
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [5]))
	$3 = ($3 + [32])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $185($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC $189 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $184($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $188 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [656])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $50(*($1), ($0 + [32]))
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [656])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [656])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC memory ()
{
	*([0] + [24]) = (int_64)1397703940
	*([0] + [16]) = (int_64)1129334020
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $184(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $188($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $185($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $185($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [608])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [608])
	CALL memcpy($0, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [304])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [352])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [416])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $185($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $185($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [32]))
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [480])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$2 = ($0 + [24])
	*(($4 = CALL $184([40])) + [16]) = (int_64)344826856192
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [512])
	$3 = ($4 + [8])
	$7 = (int_64)1346979907
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [576])
	*($4 + [28]) = $0
	*($4 + [24]) = [0]
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = $3
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + [24])
	CALL $42(($8 + [32]), ($8 + [24]))
	*($4 + [32]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [32]) = $7
	$6 = *($4 + [32])
	*($8 + [4]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $43($2, ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $185($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [656])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [656])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [656])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $184($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $188($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $185($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $46($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [656])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [656])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $48(CALL $47($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $184([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $46($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $49(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

int_32 .FUNC $167 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [32])
	*([0] + [4]) = $16
	$15 = int_32(($1 - $0) >> [5])
	if ( ((uint_32)$15 > (uint_32)[5]) ){ goto $label$9 }
	$8 = [1]
	goto $label$1 
	
.LABEL $label$11
	$15 = ($1 + [-32])
	if ( (CALL int_32 $15((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$1 }
	$9 = ($0 + [24])
	*(($2 = ($16 + [24]))) = *($9)
	$11 = ($0 + [16])
	*(($10 = ($16 + [16]))) = *($11)
	$3 = ($0 + [8])
	*(($12 = ($16 + [8]))) = *($3)
	*($16) = *($0)
	$13 = ($15 + [24])
	*($9) = *($13)
	$9 = ($15 + [16])
	*($11) = *($9)
	$11 = ($15 + [8])
	*($3) = *($11)
	*($0) = *($15)
	*($13) = *($2)
	*($9) = *($10)
	*($11) = *($12)
	*($15) = *($16)
	goto $label$1 
	
.LABEL $label$10
	$15 = ($0 + [32])
	$10 = CALL int_32 $15((int_32 $0), (int_32 *($2)))
	$9 = ($1 + [-32])
	$11 = CALL int_32 $9((int_32 $15), (int_32 *($2)))
	if ( ($10 == 0) ){ goto $label$6 }
	$12 = ($0 + [24])
	*(($10 = ($16 + [24]))) = *($12)
	$13 = ($0 + [16])
	*(($3 = ($16 + [16]))) = *($13)
	$14 = ($0 + [8])
	*(($1 = ($16 + [8]))) = *($14)
	*($16) = *($0)
	if ( ($11 == 0) ){ goto $label$4 }
	*($0) = *($9)
	$15 = ($9 + [24])
	*($12) = *($15)
	$0 = ($9 + [16])
	*($13) = *($0)
	$2 = ($9 + [8])
	*($14) = *($2)
	*($15) = *($10)
	*($9) = *($16)
	*($0) = *($3)
	*($2) = *($1)
	goto $label$1 
	
.LABEL $label$9
	$15 = ($0 + [32])
	$9 = CALL int_32 $15((int_32 $0), (int_32 *($2)))
	$8 = ($0 + [64])
	$10 = CALL int_32 $8((int_32 $15), (int_32 *($2)))
	if ( ($9 == 0) ){ goto $label$5 }
	$11 = ($0 + [24])
	*(($9 = ($16 + [24]))) = *($11)
	$3 = ($0 + [16])
	*(($12 = ($16 + [16]))) = *($3)
	$14 = ($0 + [8])
	*(($13 = ($16 + [8]))) = *($14)
	*($16) = *($0)
	if ( ($10 == 0) ){ goto $label$3 }
	*($0) = *($8)
	$15 = ($8 + [24])
	*($11) = *($15)
	$10 = ($8 + [16])
	*($3) = *($10)
	$11 = ($8 + [8])
	*($14) = *($11)
	*($15) = *($9)
	*($10) = *($12)
	*($11) = *($13)
	*($8) = *($16)
	goto $label$2 
	
.LABEL $label$8
	CALL $166($0, ($0 + [32]), ($0 + [64]), ($1 + [-32]), $2)
	goto $label$1 
	
.LABEL $label$7
	$15 = ($0 + [96])
	$9 = ($0 + [64])
	$11 = ($0 + [32])
	CALL $166($0, $11, $9, $15, $2)
	$10 = ($1 + [-32])
	if ( (CALL int_32 $10((int_32 $15), (int_32 *($2))) == 0) ){ goto $label$1 }
	$3 = ($15 + [24])
	*(($12 = ($16 + [24]))) = *($3)
	$1 = ($15 + [16])
	*(($13 = ($16 + [16]))) = *($1)
	$5 = ($15 + [8])
	*(($14 = ($16 + [8]))) = *($5)
	*($16) = *($15)
	$6 = ($10 + [24])
	*($3) = *($6)
	$7 = ($10 + [16])
	*($1) = *($7)
	$4 = ($10 + [8])
	*($5) = *($4)
	*($15) = *($10)
	*($6) = *($12)
	*($7) = *($13)
	*($4) = *($14)
	*($10) = *($16)
	if ( (CALL int_32 $15((int_32 $9), (int_32 *($2))) == 0) ){ goto $label$1 }
	$10 = ($9 + [24])
	*($12) = *($10)
	$6 = ($9 + [16])
	*($13) = *($6)
	$7 = ($9 + [8])
	*($14) = *($7)
	*($16) = *($9)
	*($10) = *($3)
	*($6) = *($1)
	*($7) = *($5)
	*($9) = *($15)
	*($3) = *($12)
	*($1) = *($13)
	*($5) = *($14)
	*($15) = *($16)
	if ( (CALL int_32 $9((int_32 $11), (int_32 *($2))) == 0) ){ goto $label$1 }
	$10 = ($11 + [24])
	*(($15 = ($16 + [24]))) = *($10)
	$3 = ($11 + [16])
	*(($12 = ($16 + [16]))) = *($3)
	$1 = ($11 + [8])
	*(($13 = ($16 + [8]))) = *($1)
	*($16) = *($11)
	$14 = ($9 + [24])
	*($10) = *($14)
	$5 = ($9 + [16])
	*($3) = *($5)
	$6 = ($9 + [8])
	*($1) = *($6)
	*($11) = *($9)
	*($14) = *($15)
	*($5) = *($12)
	*($6) = *($13)
	*($9) = *($16)
	if ( (CALL int_32 $11((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$1 }
	$2 = ($0 + [24])
	*($15) = *($2)
	$9 = ($0 + [16])
	*($12) = *($9)
	$14 = ($0 + [8])
	*($13) = *($14)
	*($16) = *($0)
	*($2) = *($10)
	*($9) = *($3)
	*($14) = *($1)
	*($0) = *($11)
	*($10) = *($15)
	*($3) = *($12)
	*($1) = *($13)
	*($11) = *($16)
	goto $label$1 
	
.LABEL $label$6
	if ( ($11 == 0) ){ goto $label$1 }
	$11 = ($15 + [24])
	*(($10 = ($16 + [24]))) = *($11)
	$3 = ($15 + [16])
	*(($12 = ($16 + [16]))) = *($3)
	$1 = ($15 + [8])
	*(($13 = ($16 + [8]))) = *($1)
	*($16) = *($15)
	$14 = ($9 + [24])
	*($11) = *($14)
	$5 = ($9 + [16])
	*($3) = *($5)
	$6 = ($9 + [8])
	*($1) = *($6)
	*($15) = *($9)
	*($14) = *($10)
	*($5) = *($12)
	*($6) = *($13)
	*($9) = *($16)
	if ( (CALL int_32 $15((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$1 }
	$2 = ($0 + [24])
	*($10) = *($2)
	$9 = ($0 + [16])
	*($12) = *($9)
	$14 = ($0 + [8])
	*($13) = *($14)
	*($16) = *($0)
	*($2) = *($11)
	*($9) = *($3)
	*($14) = *($1)
	*($0) = *($15)
	*($11) = *($10)
	*($3) = *($12)
	*($1) = *($13)
	*($15) = *($16)
	goto $label$1 
	
.LABEL $label$5
	if ( ($10 == 0) ){ goto $label$2 }
	$10 = ($15 + [24])
	*(($9 = ($16 + [24]))) = *($10)
	$12 = ($15 + [16])
	*(($11 = ($16 + [16]))) = *($12)
	$13 = ($15 + [8])
	*(($3 = ($16 + [8]))) = *($13)
	*($16) = *($15)
	$14 = ($8 + [24])
	*($10) = *($14)
	$5 = ($8 + [16])
	*($12) = *($5)
	$6 = ($8 + [8])
	*($13) = *($6)
	*($15) = *($8)
	*($14) = *($9)
	*($5) = *($11)
	*($6) = *($3)
	*($8) = *($16)
	if ( (CALL int_32 $15((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$2 }
	$14 = ($0 + [24])
	*($9) = *($14)
	$5 = ($0 + [16])
	*($11) = *($5)
	$6 = ($0 + [8])
	*($3) = *($6)
	*($16) = *($0)
	*($14) = *($10)
	*($5) = *($12)
	*($6) = *($13)
	*($0) = *($15)
	*($10) = *($9)
	*($12) = *($11)
	*($13) = *($3)
	*($15) = *($16)
	goto $label$2 
	
.LABEL $label$4
	*($0) = *($15)
	$0 = ($15 + [24])
	*($12) = *($0)
	$11 = ($15 + [16])
	*($13) = *($11)
	$12 = ($15 + [8])
	*($14) = *($12)
	*($0) = *($10)
	*($11) = *($3)
	*($12) = *($1)
	*($15) = *($16)
	if ( (CALL int_32 $9((int_32 $15), (int_32 *($2))) == 0) ){ goto $label$1 }
	$2 = ($15 + [24])
	*(($0 = ($16 + [24]))) = *($2)
	$11 = ($15 + [16])
	*(($10 = ($16 + [16]))) = *($11)
	$3 = ($15 + [8])
	*(($12 = ($16 + [8]))) = *($3)
	*($16) = *($15)
	$13 = ($9 + [24])
	*($2) = *($13)
	$2 = ($9 + [16])
	*($11) = *($2)
	$11 = ($9 + [8])
	*($3) = *($11)
	*($15) = *($9)
	*($13) = *($0)
	*($2) = *($10)
	*($11) = *($12)
	*($9) = *($16)
	goto $label$1 
	
.LABEL $label$3
	*($0) = *($15)
	$10 = ($15 + [24])
	*($11) = *($10)
	$11 = ($15 + [16])
	*($3) = *($11)
	$3 = ($15 + [8])
	*($14) = *($3)
	*($10) = *($9)
	*($11) = *($12)
	*($3) = *($13)
	*($15) = *($16)
	if ( (CALL int_32 $8((int_32 $15), (int_32 *($2))) == 0) ){ goto $label$2 }
	$10 = ($15 + [24])
	*(($9 = ($16 + [24]))) = *($10)
	$12 = ($15 + [16])
	*(($11 = ($16 + [16]))) = *($12)
	$13 = ($15 + [8])
	*(($3 = ($16 + [8]))) = *($13)
	*($16) = *($15)
	$14 = ($8 + [24])
	*($10) = *($14)
	$10 = ($8 + [16])
	*($12) = *($10)
	$12 = ($8 + [8])
	*($13) = *($12)
	*($15) = *($8)
	*($14) = *($9)
	*($10) = *($11)
	*($12) = *($3)
	*($8) = *($16)
	
.LABEL $label$2
	$15 = ($0 + [96])
	if ( ((int_32)$15 == (int_32)$1) ){ goto $label$14 }
	$13 = [0]
	$14 = [0]
	
.LOOP $label$15:
	$3 = $15
	if ( (CALL int_32 $3((int_32 $8), (int_32 *($2))) == 0) ){ goto $label$16 }
	*(($5 = ($16 + [24]))) = *(($3 + [24]))
	*(($6 = ($16 + [16]))) = *(($3 + [16]))
	*(($7 = ($16 + [8]))) = *(($3 + [8]))
	*($16) = *($3)
	$15 = $13
	
.LOOP $label$18:
	$9 = ($8 + [88])
	*((($8 = ($0 + $15)) + [120])) = *($9)
	$10 = ($8 + [80])
	*(($8 + [112])) = *($10)
	$11 = ($8 + [72])
	*(($8 + [104])) = *($11)
	$12 = ($8 + [64])
	*(($8 + [96])) = *($12)
	if ( ((int_32)$15 == (int_32)[-64]) ){ goto $label$17 }
	$15 = ($15 + [-32])
	if ( CALL int_32 $16((int_32 ($8 + [32])), (int_32 *($2))) ){ goto $label$18 }
	
.LABEL $label$17
	*($9) = *($5)
	*($10) = *($6)
	*($11) = *($7)
	*($12) = *($16)
	$14 = ($14 + [1])
	if ( ((int_32)$14 == (int_32)[8]) ){ goto $label$13 }
	
.LABEL $label$16
	$13 = ($13 + [32])
	$8 = $3
	$15 = ($3 + [32])
	if ( ((int_32)$15 != (int_32)$1) ){ goto $label$15 }
	
.LABEL $label$14
	$8 = [1]
	goto $label$12 
	
.LABEL $label$13
	$15 = ((int_32)($3 + [32]) == (int_32)$1)
	$8 = [0]
	
.LABEL $label$12
	$8 = ($15 | $8)
	
.LABEL $label$1
	*([0] + [4]) = ($16 + [32])
	$15
	return ($8 & [1])
}

int_32 .FUNC $166 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [32])
	*([0] + [4]) = $15
	$14 = CALL int_32 $1((int_32 $0), (int_32 *($4)))
	$5 = CALL int_32 $2((int_32 $1), (int_32 *($4)))
	if ( ($14 == 0) ){ goto $label$4 }
	$6 = ($0 + [24])
	*(($14 = ($15 + [24]))) = *($6)
	$7 = ($0 + [16])
	*(($8 = ($15 + [16]))) = *($7)
	$9 = ($0 + [8])
	*(($10 = ($15 + [8]))) = *($9)
	*($15) = *($0)
	if ( ($5 == 0) ){ goto $label$3 }
	*($0) = *($2)
	$5 = ($2 + [24])
	*($6) = *($5)
	$6 = ($2 + [16])
	*($7) = *($6)
	$7 = ($2 + [8])
	*($9) = *($7)
	*($5) = *($14)
	*($2) = *($15)
	*($6) = *($8)
	*($7) = *($10)
	$14 = [1]
	goto $label$1 
	
.LABEL $label$4
	$14 = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($1 + [24])
	*(($5 = ($15 + [24]))) = *($6)
	$7 = ($1 + [16])
	*(($8 = ($15 + [16]))) = *($7)
	$9 = ($1 + [8])
	*(($10 = ($15 + [8]))) = *($9)
	*($15) = *($1)
	$14 = ($2 + [24])
	*($6) = *($14)
	$11 = ($2 + [16])
	*($7) = *($11)
	$12 = ($2 + [8])
	*($9) = *($12)
	*($1) = *($2)
	*($14) = *($5)
	*($11) = *($8)
	*($12) = *($10)
	*($2) = *($15)
	$14 = [1]
	if ( (CALL int_32 $1((int_32 $0), (int_32 *($4))) == 0) ){ goto $label$1 }
	$14 = ($0 + [24])
	*($5) = *($14)
	$11 = ($0 + [16])
	*($8) = *($11)
	$12 = ($0 + [8])
	*($10) = *($12)
	*($15) = *($0)
	*($14) = *($6)
	*($11) = *($7)
	*($12) = *($9)
	*($0) = *($1)
	*($6) = *($5)
	*($7) = *($8)
	*($9) = *($10)
	*($1) = *($15)
	goto $label$2 
	
.LABEL $label$3
	*($0) = *($1)
	$5 = ($1 + [24])
	*($6) = *($5)
	$6 = ($1 + [16])
	*($7) = *($6)
	$7 = ($1 + [8])
	*($9) = *($7)
	*($5) = *($14)
	*($1) = *($15)
	*($6) = *($8)
	*($7) = *($10)
	$14 = [1]
	if ( (CALL int_32 $2((int_32 $1), (int_32 *($4))) == 0) ){ goto $label$1 }
	$5 = ($1 + [24])
	*(($14 = ($15 + [24]))) = *($5)
	$8 = ($1 + [16])
	*(($6 = ($15 + [16]))) = *($8)
	$10 = ($1 + [8])
	*(($7 = ($15 + [8]))) = *($10)
	*($15) = *($1)
	$9 = ($2 + [24])
	*($5) = *($9)
	$5 = ($2 + [16])
	*($8) = *($5)
	$8 = ($2 + [8])
	*($10) = *($8)
	*($1) = *($2)
	*($9) = *($14)
	*($5) = *($6)
	*($8) = *($7)
	*($2) = *($15)
	
.LABEL $label$2
	$14 = [2]
	
.LABEL $label$1
	if ( (CALL int_32 $3((int_32 $2), (int_32 *($4))) == 0) ){ goto $label$5 }
	$6 = ($2 + [24])
	*(($5 = ($15 + [24]))) = *($6)
	$7 = ($2 + [16])
	*(($8 = ($15 + [16]))) = *($7)
	$9 = ($2 + [8])
	*(($10 = ($15 + [8]))) = *($9)
	*($15) = *($2)
	$11 = ($3 + [24])
	*($6) = *($11)
	$12 = ($3 + [16])
	*($7) = *($12)
	$13 = ($3 + [8])
	*($9) = *($13)
	*($2) = *($3)
	*($11) = *($5)
	*($12) = *($8)
	*($13) = *($10)
	*($3) = *($15)
	if ( (CALL int_32 $2((int_32 $1), (int_32 *($4))) == 0) ){ goto $label$7 }
	$3 = ($1 + [24])
	*($5) = *($3)
	$11 = ($1 + [16])
	*($8) = *($11)
	$12 = ($1 + [8])
	*($10) = *($12)
	*($15) = *($1)
	*($3) = *($6)
	*($11) = *($7)
	*($12) = *($9)
	*($1) = *($2)
	*($6) = *($5)
	*($7) = *($8)
	*($9) = *($10)
	*($2) = *($15)
	if ( (CALL int_32 $1((int_32 $0), (int_32 *($4))) == 0) ){ goto $label$6 }
	$4 = ($0 + [24])
	*(($2 = ($15 + [24]))) = *($4)
	$5 = ($0 + [16])
	*(($3 = ($15 + [16]))) = *($5)
	$8 = ($0 + [8])
	*(($6 = ($15 + [8]))) = *($8)
	*($15) = *($0)
	$7 = ($1 + [24])
	*($4) = *($7)
	$4 = ($1 + [16])
	*($5) = *($4)
	$5 = ($1 + [8])
	*($8) = *($5)
	*($0) = *($1)
	*($7) = *($2)
	*($4) = *($3)
	*($5) = *($6)
	*($1) = *($15)
	$14 = ($14 + [3])
	goto $label$5 
	
.LABEL $label$7
	$14 = ($14 + [1])
	goto $label$5 
	
.LABEL $label$6
	$14 = ($14 + [2])
	
.LABEL $label$5
	*([0] + [4]) = ($15 + [32])
	return $14
}

void .FUNC $165 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [5])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [5])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $185($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$1 }
	$5 = [134217727]
	if ( ((uint_32)int_32($8 >> [5]) > (uint_32)[67108862]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [4])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[134217728]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [5])
	$5 = CALL $184($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [5])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [5])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [5]))
	return (unreachable)
	
.LABEL $label$1
	CALL $188($0)
}

void .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $3
	if ( $3 ){ goto $label$3 }
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( *($2 + [12]) ){ goto $label$3 }
	$3 = *($2 + [8])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$10 }
	if ( ($4 == 0) ){ goto $label$8 }
	if ( *($4 + [12]) ){ goto $label$8 }
	$4 = ($4 + [12])
	goto $label$9 
	
.LABEL $label$10
	$4 = *($3 + [4])
	if ( ($4 == 0) ){ goto $label$6 }
	if ( *($4 + [12]) ){ goto $label$6 }
	$4 = ($4 + [12])
	
.LABEL $label$9
	*(($2 + [12])) = [1]
	$2 = ((int_32)$3 == (int_32)$0)
	*($3 + [12]) = $2
	*($4) = [1]
	$1 = $3
	if ( ($2 == 0) ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$8
	if ( ((int_32)*($2) == (int_32)$1) ){ goto $label$5 }
	$4 = $2
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_32)*($2) == (int_32)$1) ){ goto $label$2 }
	$4 = *($2 + [4])
	$1 = *($4)
	*($2 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $2
	$3 = *(($2 + [8]))
	
.LABEL $label$11
	*($4 + [8]) = $3
	*(( ($3 = *(($1 = ($2 + [8])))) ? ($3 + [4]) : ((int_32)*($3) == (int_32)$2) )) = $4
	*($1) = $4
	*($4) = $2
	$3 = *($4 + [8])
	goto $label$1 
	
.LABEL $label$5
	$4 = *($2)
	$1 = *($4 + [4])
	*($2) = $1
	if ( ($1 == 0) ){ goto $label$12 }
	*($1 + [8]) = $2
	$3 = *(($2 + [8]))
	
.LABEL $label$12
	*($4 + [8]) = $3
	*(( ($3 = *(($1 = ($2 + [8])))) ? ($3 + [4]) : ((int_32)*($3) == (int_32)$2) )) = $4
	*($1) = $4
	*(($4 + [4])) = $2
	$3 = *($4 + [8])
	
.LABEL $label$4
	*($4 + [12]) = [1]
	*($3 + [12]) = [0]
	$2 = *($3 + [4])
	$4 = *($2)
	*($3 + [4]) = $4
	if ( ($4 == 0) ){ goto $label$13 }
	*($4 + [8]) = $3
	
.LABEL $label$13
	*($2 + [8]) = *($3 + [8])
	*(( ($4 = *($3 + [8])) ? ($4 + [4]) : ((int_32)*($4) == (int_32)$3) )) = $2
	*($3 + [8]) = $2
	*($2) = $3
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	$4 = $2
	
.LABEL $label$1
	*($4 + [12]) = [1]
	*($3 + [12]) = [0]
	$2 = *($3)
	$4 = *($2 + [4])
	*($3) = $4
	if ( ($4 == 0) ){ goto $label$14 }
	*($4 + [8]) = $3
	
.LABEL $label$14
	*($2 + [8]) = *($3 + [8])
	*(( ($4 = *($3 + [8])) ? ($4 + [4]) : ((int_32)*($4) == (int_32)$3) )) = $2
	*($3 + [8]) = $2
	*(($2 + [4])) = $3
}

int_32 .FUNC $163 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	$27 = (*([0] + [4]) - [48])
	*([0] + [4]) = $27
	$24 = ((int_32)($1 - $0) / (int_32)[40])
	if ( ((uint_32)$24 > (uint_32)[5]) ){ goto $label$9 }
	$6 = [1]
	goto $label$1 
	
.LABEL $label$10
	$25 = ($1 + [-40])
	if ( (CALL int_32 $25((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$1 }
	$2 = *($0 + [8])
	*($0 + [8]) = [0]
	$24 = ($0 + [16])
	$15 = *($24)
	*($24) = [0]
	$16 = ($0 + [12])
	$5 = *($16)
	*($16) = [0]
	$3 = *($0)
	$7 = ($0 + [28])
	$17 = *($7)
	$18 = ($0 + [24])
	$20 = *($18)
	$21 = *($0 + [20])
	*($7) = [0]
	*($18) = [0]
	*($0 + [20]) = [0]
	$4 = *($0 + [32])
	*($0) = *($25)
	$26 = ($1 + [-28])
	$19 = *($26)
	$23 = ($1 + [-32])
	*($0 + [8]) = *($23)
	*($16) = $19
	$19 = ($1 + [-24])
	*($24) = *($19)
	*($19) = [0]
	*($23) = (int_64)0
	$24 = ($1 + [-20])
	$16 = *($0 + [20])
	if ( ($16 == 0) ){ goto $label$11 }
	*($18) = $16
	CALL $185($16)
	*($7) = [0]
	*(($0 + [20])) = (int_64)0
	
.LABEL $label$11
	*(($0 + [20])) = *($24)
	$16 = ($1 + [-16])
	*($18) = *($16)
	$18 = ($1 + [-12])
	*($7) = *($18)
	*($24) = [0]
	*($16) = (int_64)0
	$7 = ($1 + [-8])
	*(($0 + [32])) = *($7)
	*($25) = $3
	$25 = *($23)
	if ( ($25 == 0) ){ goto $label$5 }
	*($26) = $25
	CALL $185($25)
	*($23) = $2
	*($26) = $5
	*($19) = $15
	$25 = *($24)
	if ( ($25 == 0) ){ goto $label$4 }
	*($16) = $25
	CALL $185($25)
	*($16) = [0]
	*($18) = [0]
	*($24) = [0]
	goto $label$4 
	
.LABEL $label$9
	$23 = ($0 + [80])
	CALL $159($0, ($0 + [40]), $23, $2)
	$6 = ($0 + [120])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$12 }
	$9 = (($27 + [8]) + [8])
	$12 = ($27 + [28])
	$14 = ($27 + [40])
	$21 = [0]
	$22 = [0]
	
.LOOP $label$13:
	$5 = $6
	if ( (CALL int_32 $5((int_32 $23), (int_32 *($2))) == 0) ){ goto $label$14 }
	*(($8 = (($27 + [8]) + [16]))) = [0]
	*($9) = *($5 + [8])
	*($27 + [8]) = *($5)
	$6 = ($5 + [12])
	*(($10 = (($27 + [8]) + [12]))) = *($6)
	$24 = ($5 + [16])
	*($8) = *($24)
	*($24) = [0]
	*($6) = [0]
	*($5 + [8]) = [0]
	*(($11 = (($27 + [8]) + [28]))) = [0]
	*($12) = *($5 + [20])
	$6 = ($5 + [24])
	*(($13 = (($27 + [8]) + [24]))) = *($6)
	$24 = ($5 + [28])
	*($11) = *($24)
	*($6) = [0]
	*($24) = [0]
	*($5 + [20]) = [0]
	*($14) = *($5 + [32])
	$24 = $21
	$25 = $5
	
.LOOP $label$15:
	$15 = ($6 + [80])
	*((($6 = ($0 + $24)) + [120])) = *($15)
	$16 = ($6 + [128])
	$7 = *($16)
	if ( ($7 == 0) ){ goto $label$17 }
	*(($18 = ($6 + [132]))) = $7
	CALL $185($7)
	*($16) = [0]
	*($18) = (int_64)0
	$7 = ($25 + [16])
	$18 = ($25 + [12])
	goto $label$16 
	
.LABEL $label$17
	$7 = ($6 + [136])
	$18 = ($6 + [132])
	
.LABEL $label$16
	$17 = ($6 + [92])
	*($18) = *($17)
	$18 = ($6 + [88])
	*($16) = *($18)
	$19 = ($6 + [96])
	*($7) = *($19)
	*($19) = [0]
	*($18) = (int_64)0
	$16 = ($6 + [140])
	$7 = *($16)
	if ( ($7 == 0) ){ goto $label$19 }
	*(($26 = ($6 + [144]))) = $7
	CALL $185($7)
	*($16) = [0]
	*($26) = (int_64)0
	$26 = ($25 + [28])
	$25 = ($25 + [24])
	goto $label$18 
	
.LABEL $label$19
	$26 = ($6 + [148])
	$25 = ($6 + [144])
	
.LABEL $label$18
	$20 = ($6 + [104])
	*($25) = *($20)
	$7 = ($6 + [100])
	*($16) = *($7)
	$16 = ($6 + [108])
	*($26) = *($16)
	*($16) = [0]
	*($7) = (int_64)0
	$26 = ($6 + [112])
	*(($6 + [152])) = *($26)
	if ( ((int_32)$24 == (int_32)[-80]) ){ goto $label$20 }
	$24 = ($24 + [-40])
	$25 = $23
	$23 = ($23 + [-40])
	if ( CALL int_32 ($27 + [8])((int_32 ($6 + [40])), (int_32 *($2))) ){ goto $label$15 }
	
.LABEL $label$20
	*($15) = *($27 + [8])
	$6 = *($18)
	if ( ($6 == 0) ){ goto $label$21 }
	*($17) = $6
	CALL $185($6)
	*($19) = [0]
	*($18) = (int_64)0
	
.LABEL $label$21
	*($18) = *($9)
	*($10) = [0]
	$6 = *($8)
	*($8) = [0]
	*($19) = $6
	*($9) = [0]
	$6 = *($7)
	if ( ($6 == 0) ){ goto $label$22 }
	*($20) = $6
	CALL $185($6)
	*($16) = [0]
	*($7) = (int_64)0
	
.LABEL $label$22
	*($7) = *($12)
	*($13) = [0]
	$6 = *($11)
	*($11) = [0]
	*($16) = $6
	*($12) = [0]
	*($26) = *($14)
	$22 = ($22 + [1])
	$6 = *($9)
	if ( ($6 == 0) ){ goto $label$23 }
	*($10) = $6
	CALL $185($6)
	
.LABEL $label$23
	if ( ((int_32)$22 == (int_32)[8]) ){ goto $label$3 }
	
.LABEL $label$14
	$21 = ($21 + [40])
	$23 = $5
	$6 = ($5 + [40])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$13 }
	
.LABEL $label$12
	$6 = [1]
	goto $label$2 
	
.LABEL $label$8
	CALL $159($0, ($0 + [40]), ($1 + [-40]), $2)
	goto $label$1 
	
.LABEL $label$7
	CALL $160($0, ($0 + [40]), ($0 + [80]), ($1 + [-40]), $2)
	goto $label$1 
	
.LABEL $label$6
	CALL $161($0, ($0 + [40]), ($0 + [80]), ($0 + [120]), ($1 + [-40]), $2)
	goto $label$1 
	
.LABEL $label$5
	*($26) = $5
	*($23) = $2
	*($19) = $15
	
.LABEL $label$4
	*($16) = $20
	*($24) = $21
	*($18) = $17
	*($7) = $4
	goto $label$1 
	
.LABEL $label$3
	$24 = ((int_32)($5 + [40]) == (int_32)$1)
	$6 = [0]
	
.LABEL $label$2
	$6 = ($24 | $6)
	
.LABEL $label$1
	*([0] + [4]) = ($27 + [48])
	$24
	return ($6 & [1])
}

void .FUNC $162 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	$24 = (*([0] + [4]) - [48])
	*([0] + [4]) = $24
	$22 = ($0 + [80])
	CALL $159($0, ($0 + [40]), $22, $2)
	$4 = ($0 + [120])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$1 }
	$7 = ($24 + [16])
	$10 = ($24 + [28])
	$12 = ($24 + [40])
	$19 = [0]
	
.LOOP $label$2:
	$3 = $4
	if ( (CALL int_32 $3((int_32 $22), (int_32 *($2))) == 0) ){ goto $label$3 }
	*(($6 = (($24 + [8]) + [16]))) = [0]
	*($7) = *($3 + [8])
	*($24 + [8]) = *($3)
	$4 = ($3 + [12])
	*(($8 = (($24 + [8]) + [12]))) = *($4)
	$20 = ($3 + [16])
	*($6) = *($20)
	*($20) = [0]
	*($4) = [0]
	*($3 + [8]) = [0]
	*(($9 = (($24 + [8]) + [28]))) = [0]
	*($10) = *($3 + [20])
	$4 = ($3 + [24])
	*(($11 = (($24 + [8]) + [24]))) = *($4)
	$20 = ($3 + [28])
	*($9) = *($20)
	*($4) = [0]
	*($20) = [0]
	*($3 + [20]) = [0]
	*($12) = *($3 + [32])
	$20 = $19
	$21 = $3
	
.LOOP $label$4:
	$13 = ($4 + [80])
	*((($4 = ($0 + $20)) + [120])) = *($13)
	$14 = ($4 + [128])
	$5 = *($14)
	if ( ($5 == 0) ){ goto $label$6 }
	*(($16 = ($4 + [132]))) = $5
	CALL $185($5)
	*($14) = [0]
	*($16) = (int_64)0
	$5 = ($21 + [16])
	$16 = ($21 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = ($4 + [136])
	$16 = ($4 + [132])
	
.LABEL $label$5
	$15 = ($4 + [92])
	*($16) = *($15)
	$16 = ($4 + [88])
	*($14) = *($16)
	$17 = ($4 + [96])
	*($5) = *($17)
	*($17) = [0]
	*($16) = (int_64)0
	$14 = ($4 + [140])
	$5 = *($14)
	if ( ($5 == 0) ){ goto $label$8 }
	*(($23 = ($4 + [144]))) = $5
	CALL $185($5)
	*($14) = [0]
	*($23) = (int_64)0
	$23 = ($21 + [28])
	$21 = ($21 + [24])
	goto $label$7 
	
.LABEL $label$8
	$23 = ($4 + [148])
	$21 = ($4 + [144])
	
.LABEL $label$7
	$18 = ($4 + [104])
	*($21) = *($18)
	$5 = ($4 + [100])
	*($14) = *($5)
	$14 = ($4 + [108])
	*($23) = *($14)
	*($14) = [0]
	*($5) = (int_64)0
	$23 = ($4 + [112])
	*(($4 + [152])) = *($23)
	if ( ((int_32)$20 == (int_32)[-80]) ){ goto $label$9 }
	$20 = ($20 + [-40])
	$21 = $22
	$22 = ($22 + [-40])
	if ( CALL int_32 ($24 + [8])((int_32 ($4 + [40])), (int_32 *($2))) ){ goto $label$4 }
	
.LABEL $label$9
	*($13) = *($24 + [8])
	$4 = *($16)
	if ( ($4 == 0) ){ goto $label$10 }
	*($15) = $4
	CALL $185($4)
	*($17) = [0]
	*($16) = (int_64)0
	
.LABEL $label$10
	*($16) = *($7)
	*($8) = [0]
	$4 = *($6)
	*($6) = [0]
	*($17) = $4
	*($7) = [0]
	$4 = *($5)
	if ( ($4 == 0) ){ goto $label$11 }
	*($18) = $4
	CALL $185($4)
	*($14) = [0]
	*($5) = (int_64)0
	
.LABEL $label$11
	*($5) = *($10)
	*($11) = [0]
	$4 = *($9)
	*($9) = [0]
	*($14) = $4
	*($10) = [0]
	*($23) = *($12)
	$4 = *($7)
	if ( ($4 == 0) ){ goto $label$3 }
	*($8) = $4
	CALL $185($4)
	
.LABEL $label$3
	$19 = ($19 + [40])
	$22 = $3
	$4 = ($3 + [40])
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($24 + [48])
}

int_32 .FUNC $161 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$19 = CALL $160($0, $1, $2, $3, $5)
	if ( (CALL int_32 $4((int_32 $3), (int_32 *($5))) == 0) ){ goto $label$1 }
	$7 = *($3 + [8])
	*($3 + [8]) = [0]
	$14 = ($3 + [16])
	$9 = *($14)
	*($14) = [0]
	$15 = ($3 + [12])
	$8 = *($15)
	*($15) = [0]
	$6 = *($3)
	$16 = ($3 + [28])
	$12 = *($16)
	$17 = ($3 + [24])
	$11 = *($17)
	$10 = *($3 + [20])
	*($16) = [0]
	*($17) = [0]
	*($3 + [20]) = [0]
	$13 = *($3 + [32])
	*($3) = *($4)
	$18 = *(($4 + [12]))
	*($3 + [8]) = *($4 + [8])
	*($15) = $18
	$15 = ($4 + [16])
	*($14) = *($15)
	*($15) = [0]
	*($4 + [8 align=4]) = (int_64)0
	$14 = *($3 + [20])
	if ( ($14 == 0) ){ goto $label$2 }
	*($17) = $14
	CALL $185($14)
	*($16) = [0]
	*(($3 + [20])) = (int_64)0
	
.LABEL $label$2
	$14 = ($4 + [20])
	*(($3 + [20])) = *($14)
	*($17) = *(($4 + [24]))
	$17 = ($4 + [28])
	*($16) = *($17)
	*($17) = [0]
	*($14) = (int_64)0
	*(($3 + [32])) = *($4 + [32])
	*($4) = $6
	$17 = ($4 + [8])
	$16 = *($17)
	if ( ($16 == 0) ){ goto $label$4 }
	*(($15 = ($4 + [12]))) = $16
	CALL $185($16)
	*($17) = $7
	*($15) = $8
	*(($4 + [16])) = $9
	$16 = *($14)
	if ( ($16 == 0) ){ goto $label$3 }
	*(($4 + [24])) = $16
	CALL $185($16)
	*(($4 + [28])) = [0]
	*(($4 + [20])) = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	*(($4 + [12])) = $8
	*($17) = $7
	*(($4 + [16])) = $9
	
.LABEL $label$3
	*(($4 + [24])) = $11
	*(($4 + [20])) = $10
	*(($4 + [28])) = $12
	*(($4 + [32])) = $13
	if ( (CALL int_32 $3((int_32 $2), (int_32 *($5))) == 0) ){ goto $label$7 }
	$10 = *($2 + [8])
	*($2 + [8]) = [0]
	$4 = ($2 + [16])
	$18 = *($4)
	*($4) = [0]
	$16 = ($2 + [12])
	$7 = *($16)
	*($16) = [0]
	$6 = *($2)
	$17 = ($2 + [28])
	$14 = *($17)
	$15 = ($2 + [24])
	$12 = *($15)
	$11 = *($2 + [20])
	*($17) = [0]
	*($15) = [0]
	*($2 + [20]) = [0]
	$13 = *($2 + [32])
	*($2) = *($3)
	$15 = *(($3 + [12]))
	$17 = ($3 + [8])
	*($2 + [8]) = *($17)
	*($16) = $15
	$16 = ($3 + [16])
	*($4) = *($16)
	*($16) = [0]
	*($17) = (int_64)0
	$4 = *($2 + [20])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [24])) = $4
	CALL $185($4)
	*(($2 + [28])) = [0]
	*(($2 + [20])) = (int_64)0
	
.LABEL $label$8
	$4 = ($3 + [20])
	*(($2 + [20])) = *($4)
	*(($2 + [24])) = *(($3 + [24]))
	$16 = ($3 + [28])
	*(($2 + [28])) = *($16)
	*($16) = [0]
	*($4) = (int_64)0
	*(($2 + [32])) = *(($3 + [32]))
	*($3) = $6
	$16 = *($17)
	if ( ($16 == 0) ){ goto $label$6 }
	*(($17 = ($3 + [12]))) = $16
	CALL $185($16)
	*(($3 + [8])) = $10
	*($17) = $7
	*(($3 + [16])) = $18
	$4 = *($4)
	if ( ($4 == 0) ){ goto $label$5 }
	*(($3 + [24])) = $4
	CALL $185($4)
	*(($3 + [28])) = [0]
	*(($3 + [20])) = (int_64)0
	goto $label$5 
	
.LABEL $label$7
	return ($19 + [1])
	
.LABEL $label$6
	*(($3 + [12])) = $7
	*(($3 + [8])) = $10
	*(($3 + [16])) = $18
	
.LABEL $label$5
	*(($3 + [24])) = $12
	*(($3 + [20])) = $11
	*(($3 + [28])) = $14
	*(($3 + [32])) = $13
	if ( (CALL int_32 $2((int_32 $1), (int_32 *($5))) == 0) ){ goto $label$11 }
	$11 = *($1 + [8])
	*($1 + [8]) = [0]
	$3 = ($1 + [16])
	$10 = *($3)
	*($3) = [0]
	$4 = ($1 + [12])
	$18 = *($4)
	*($4) = [0]
	$6 = *($1)
	$16 = ($1 + [28])
	$17 = *($16)
	$14 = ($1 + [24])
	$15 = *($14)
	$12 = *($1 + [20])
	*($16) = [0]
	*($14) = [0]
	*($1 + [20]) = [0]
	$13 = *($1 + [32])
	*($1) = *($2)
	$14 = *(($2 + [12]))
	$16 = ($2 + [8])
	*($1 + [8]) = *($16)
	*($4) = $14
	$4 = ($2 + [16])
	*($3) = *($4)
	*($4) = [0]
	*($16) = (int_64)0
	$3 = *($1 + [20])
	if ( ($3 == 0) ){ goto $label$12 }
	*(($1 + [24])) = $3
	CALL $185($3)
	*(($1 + [28])) = [0]
	*(($1 + [20])) = (int_64)0
	
.LABEL $label$12
	$3 = ($2 + [20])
	*(($1 + [20])) = *($3)
	*(($1 + [24])) = *(($2 + [24]))
	$4 = ($2 + [28])
	*(($1 + [28])) = *($4)
	*($4) = [0]
	*($3) = (int_64)0
	*(($1 + [32])) = *(($2 + [32]))
	*($2) = $6
	$4 = *($16)
	if ( ($4 == 0) ){ goto $label$10 }
	*(($16 = ($2 + [12]))) = $4
	CALL $185($4)
	*(($2 + [8])) = $11
	*($16) = $18
	*(($2 + [16])) = $10
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$9 }
	*(($2 + [24])) = $3
	CALL $185($3)
	*(($2 + [28])) = [0]
	*(($2 + [20])) = (int_64)0
	goto $label$9 
	
.LABEL $label$11
	return ($19 + [2])
	
.LABEL $label$10
	*(($2 + [12])) = $18
	*(($2 + [8])) = $11
	*(($2 + [16])) = $10
	
.LABEL $label$9
	*(($2 + [24])) = $15
	*(($2 + [20])) = $12
	*(($2 + [28])) = $17
	*(($2 + [32])) = $13
	if ( (CALL int_32 $1((int_32 $0), (int_32 *($5))) == 0) ){ goto $label$15 }
	$5 = *($0 + [8])
	*($0 + [8]) = [0]
	$3 = ($0 + [16])
	$16 = *($3)
	*($3) = [0]
	$4 = ($0 + [12])
	$17 = *($4)
	*($4) = [0]
	$6 = *($0)
	$2 = ($0 + [28])
	$14 = *($2)
	$15 = ($0 + [24])
	$12 = *($15)
	$11 = *($0 + [20])
	*($2) = [0]
	*($15) = [0]
	*($0 + [20]) = [0]
	$13 = *($0 + [32])
	*($0) = *($1)
	$15 = *(($1 + [12]))
	$2 = ($1 + [8])
	*($0 + [8]) = *($2)
	*($4) = $15
	$4 = ($1 + [16])
	*($3) = *($4)
	*($4) = [0]
	*($2) = (int_64)0
	$3 = *($0 + [20])
	if ( ($3 == 0) ){ goto $label$16 }
	*(($0 + [24])) = $3
	CALL $185($3)
	*(($0 + [28])) = [0]
	*(($0 + [20])) = (int_64)0
	
.LABEL $label$16
	$3 = ($1 + [20])
	*(($0 + [20])) = *($3)
	*(($0 + [24])) = *(($1 + [24]))
	$4 = ($1 + [28])
	*(($0 + [28])) = *($4)
	*($4) = [0]
	*($3) = (int_64)0
	*(($0 + [32])) = *(($1 + [32]))
	*($1) = $6
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$14 }
	*(($2 = ($1 + [12]))) = $4
	CALL $185($4)
	*(($1 + [8])) = $5
	*($2) = $17
	*(($1 + [16])) = $16
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$13 }
	*(($1 + [24])) = $3
	CALL $185($3)
	*(($1 + [28])) = [0]
	*(($1 + [20])) = (int_64)0
	goto $label$13 
	
.LABEL $label$15
	return ($19 + [3])
	
.LABEL $label$14
	*(($1 + [12])) = $17
	*(($1 + [8])) = $5
	*(($1 + [16])) = $16
	
.LABEL $label$13
	*(($1 + [24])) = $12
	*(($1 + [20])) = $11
	*(($1 + [28])) = $14
	*(($1 + [32])) = $13
	$19 = ($19 + [4])
	
.LABEL $label$1
	return $19
}

int_32 .FUNC $160 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$18 = CALL $159($0, $1, $2, $4)
	if ( (CALL int_32 $3((int_32 $2), (int_32 *($4))) == 0) ){ goto $label$1 }
	$6 = *($2 + [8])
	*($2 + [8]) = [0]
	$13 = ($2 + [16])
	$8 = *($13)
	*($13) = [0]
	$14 = ($2 + [12])
	$7 = *($14)
	*($14) = [0]
	$5 = *($2)
	$15 = ($2 + [28])
	$11 = *($15)
	$16 = ($2 + [24])
	$10 = *($16)
	$9 = *($2 + [20])
	*($15) = [0]
	*($16) = [0]
	*($2 + [20]) = [0]
	$12 = *($2 + [32])
	*($2) = *($3)
	$17 = *(($3 + [12]))
	*($2 + [8]) = *($3 + [8])
	*($14) = $17
	$14 = ($3 + [16])
	*($13) = *($14)
	*($14) = [0]
	*($3 + [8 align=4]) = (int_64)0
	$13 = *($2 + [20])
	if ( ($13 == 0) ){ goto $label$2 }
	*($16) = $13
	CALL $185($13)
	*($15) = [0]
	*(($2 + [20])) = (int_64)0
	
.LABEL $label$2
	$13 = ($3 + [20])
	*(($2 + [20])) = *($13)
	*($16) = *(($3 + [24]))
	$16 = ($3 + [28])
	*($15) = *($16)
	*($16) = [0]
	*($13) = (int_64)0
	*(($2 + [32])) = *($3 + [32])
	*($3) = $5
	$16 = ($3 + [8])
	$15 = *($16)
	if ( ($15 == 0) ){ goto $label$4 }
	*(($14 = ($3 + [12]))) = $15
	CALL $185($15)
	*($16) = $6
	*($14) = $7
	*(($3 + [16])) = $8
	$15 = *($13)
	if ( ($15 == 0) ){ goto $label$3 }
	*(($3 + [24])) = $15
	CALL $185($15)
	*(($3 + [28])) = [0]
	*(($3 + [20])) = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	*(($3 + [12])) = $7
	*($16) = $6
	*(($3 + [16])) = $8
	
.LABEL $label$3
	*(($3 + [24])) = $10
	*(($3 + [20])) = $9
	*(($3 + [28])) = $11
	*(($3 + [32])) = $12
	if ( (CALL int_32 $2((int_32 $1), (int_32 *($4))) == 0) ){ goto $label$7 }
	$9 = *($1 + [8])
	*($1 + [8]) = [0]
	$3 = ($1 + [16])
	$17 = *($3)
	*($3) = [0]
	$15 = ($1 + [12])
	$6 = *($15)
	*($15) = [0]
	$5 = *($1)
	$16 = ($1 + [28])
	$13 = *($16)
	$14 = ($1 + [24])
	$11 = *($14)
	$10 = *($1 + [20])
	*($16) = [0]
	*($14) = [0]
	*($1 + [20]) = [0]
	$12 = *($1 + [32])
	*($1) = *($2)
	$14 = *(($2 + [12]))
	$16 = ($2 + [8])
	*($1 + [8]) = *($16)
	*($15) = $14
	$15 = ($2 + [16])
	*($3) = *($15)
	*($15) = [0]
	*($16) = (int_64)0
	$3 = *($1 + [20])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($1 + [24])) = $3
	CALL $185($3)
	*(($1 + [28])) = [0]
	*(($1 + [20])) = (int_64)0
	
.LABEL $label$8
	$3 = ($2 + [20])
	*(($1 + [20])) = *($3)
	*(($1 + [24])) = *(($2 + [24]))
	$15 = ($2 + [28])
	*(($1 + [28])) = *($15)
	*($15) = [0]
	*($3) = (int_64)0
	*(($1 + [32])) = *(($2 + [32]))
	*($2) = $5
	$15 = *($16)
	if ( ($15 == 0) ){ goto $label$6 }
	*(($16 = ($2 + [12]))) = $15
	CALL $185($15)
	*(($2 + [8])) = $9
	*($16) = $6
	*(($2 + [16])) = $17
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($2 + [24])) = $3
	CALL $185($3)
	*(($2 + [28])) = [0]
	*(($2 + [20])) = (int_64)0
	goto $label$5 
	
.LABEL $label$7
	return ($18 + [1])
	
.LABEL $label$6
	*(($2 + [12])) = $6
	*(($2 + [8])) = $9
	*(($2 + [16])) = $17
	
.LABEL $label$5
	*(($2 + [24])) = $11
	*(($2 + [20])) = $10
	*(($2 + [28])) = $13
	*(($2 + [32])) = $12
	if ( (CALL int_32 $1((int_32 $0), (int_32 *($4))) == 0) ){ goto $label$11 }
	$11 = *($0 + [8])
	*($0 + [8]) = [0]
	$2 = ($0 + [16])
	$10 = *($2)
	*($2) = [0]
	$3 = ($0 + [12])
	$9 = *($3)
	*($3) = [0]
	$5 = *($0)
	$4 = ($0 + [28])
	$15 = *($4)
	$16 = ($0 + [24])
	$13 = *($16)
	$14 = *($0 + [20])
	*($4) = [0]
	*($16) = [0]
	*($0 + [20]) = [0]
	$12 = *($0 + [32])
	*($0) = *($1)
	$16 = *(($1 + [12]))
	$4 = ($1 + [8])
	*($0 + [8]) = *($4)
	*($3) = $16
	$3 = ($1 + [16])
	*($2) = *($3)
	*($3) = [0]
	*($4) = (int_64)0
	$2 = *($0 + [20])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($0 + [24])) = $2
	CALL $185($2)
	*(($0 + [28])) = [0]
	*(($0 + [20])) = (int_64)0
	
.LABEL $label$12
	$2 = ($1 + [20])
	*(($0 + [20])) = *($2)
	*(($0 + [24])) = *(($1 + [24]))
	$3 = ($1 + [28])
	*(($0 + [28])) = *($3)
	*($3) = [0]
	*($2) = (int_64)0
	*(($0 + [32])) = *(($1 + [32]))
	*($1) = $5
	$3 = *($4)
	if ( ($3 == 0) ){ goto $label$10 }
	*(($0 = ($1 + [12]))) = $3
	CALL $185($3)
	*(($1 + [8])) = $11
	*($0) = $9
	*(($1 + [16])) = $10
	$2 = *($2)
	if ( ($2 == 0) ){ goto $label$9 }
	*(($1 + [24])) = $2
	CALL $185($2)
	*(($1 + [28])) = [0]
	*(($1 + [20])) = (int_64)0
	goto $label$9 
	
.LABEL $label$11
	return ($18 + [2])
	
.LABEL $label$10
	*(($1 + [12])) = $9
	*(($1 + [8])) = $11
	*(($1 + [16])) = $10
	
.LABEL $label$9
	*(($1 + [24])) = $13
	*(($1 + [20])) = $14
	*(($1 + [28])) = $15
	*(($1 + [32])) = $12
	$18 = ($18 + [3])
	
.LABEL $label$1
	return $18
}

void .FUNC $169 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$8 = (*([0] + [4]) - [64])
	$12 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$4 = *($1)
	$10 = *(($1 + [24]))
	$11 = *($1 + [20])
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$3 }
	$9 = *(*($3))
	
.LOOP $label$4:
	if ( ((int_64)$9 == (int_64)*($11)) ){ goto $label$3 }
	$11 = ($11 + [32])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$2 }
	$10 = *($3 + [4])
	CALL eosio_assert(((int_64)*($10 + [8]) == (int_64)*(($11 + [16]))), [896])
	$9 = ((int_64)*($11 + [8]) + (int_64)*($10))
	*($11 + [8]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($11 + [8]) < (int_64)4611686018427387904), [976])
	goto $label$1 
	
.LABEL $label$2
	$5 = ($1 + [20])
	*(($12 + [40])) = (int_64)344826856192
	*($12 + [32]) = (int_64)0
	CALL eosio_assert([1], [512])
	$9 = (int_64)1346979907
	$11 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$10 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$10 = [0]
	
.LABEL $label$5
	CALL eosio_assert($10, [576])
	*($12 + [48]) = [0]
	*($12 + [24]) = *(*($3))
	$11 = *($3 + [4])
	*(($12 + [44])) = *(($11 + [12]))
	*(($6 = (($12 + [24]) + [16]))) = *(($11 + [8]))
	*((($12 + [24]) + [12])) = *(($11 + [4]))
	*($12 + [32]) = *($11)
	$10 = ($1 + [24])
	$11 = *($10)
	if ( ((int_32)$11 == (int_32)*(($1 + [28]))) ){ goto $label$10 }
	*($11) = *($12 + [24])
	*(($11 + [24])) = *((($12 + [24]) + [24]))
	*(($11 + [16])) = *($6)
	*(($11 + [8])) = *((($12 + [24]) + [8]))
	*($10) = (*($10) + [32])
	goto $label$1 
	
.LABEL $label$10
	CALL $65($5, ($12 + [24]))
	
.LABEL $label$1
	$6 = ($1 + [12])
	$10 = *($6)
	$11 = *($1 + [8])
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$11 }
	$9 = *(*($3))
	
.LOOP $label$12:
	if ( ((int_64)$9 == (int_64)*($11)) ){ goto $label$11 }
	$11 = ($11 + [32])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$12 }
	$11 = $10
	
.LABEL $label$11
	$10 = *($3 + [4])
	CALL eosio_assert(((int_64)*($10 + [8]) == (int_64)*(($11 + [16]))), [1216])
	$9 = (int_64)
	*($11 + [8]) = $9(*($11 + [8]) - *($10)))
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($11 + [8]) < (int_64)4611686018427387904), [1296])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1008])
	$3 = *($1 + [8])
	$10 = *($6)
	$6 = ($10 - $3)
	$9 = (CASTING uint_64)(uint_32 int_32($6 >> [5]))
	$11 = [36]
	
.LOOP $label$13:
	$11 = ($11 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$13 }
	if ( ((int_32)$3 == (int_32)$10) ){ goto $label$15 }
	$3 = (((int_32)uint_32(($6 + [-32]) >> [5]) * (int_32)[28]) + $11)
	goto $label$14 
	
.LABEL $label$15
	$3 = ($11 + [-28])
	
.LABEL $label$14
	$10 = *(($1 + [20]))
	$11 = *(($1 + [24]))
	$6 = ($11 - $10)
	$9 = (CASTING uint_64)(uint_32 int_32($6 >> [5]))
	
.LOOP $label$16:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$17 }
	$3 = ((((int_32)uint_32(($6 + [-32]) >> [5]) * (int_32)[25]) + $3) + [25])
	
.LABEL $label$17
	if ( ($3 <= [513]) ){ goto $label$19 }
	$7 = CALL malloc($3)
	goto $label$18 
	
.LABEL $label$19
	$7 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$18
	*($12 + [8]) = $7
	$5 = ($7 + $3)
	*($12 + [16]) = $5
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [656])
	CALL memcpy($7, $1, [8])
	$10 = ($7 + [8])
	*($12 + [12]) = $10
	$9 = (CASTING uint_64)(uint_32 int_32((*(($1 + [12])) - *(($1 + [8]))) >> [5]))
	$8 = ($7 + [9])
	
.LOOP $label$20:
	$11 = (CASTING uint_32)(uint_64 $9)
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	$6 = ((int_64)$9) != (int_64)0
	*($12 + [24]) = (($6) << [7]) | ($11 & [127]))
	CALL eosio_assert(((int_32)($5 - $10) > (int_32)[0]), [656])
	$11 = $8
	CALL memcpy(($11 + [-1]), ($12 + [24]), [1])
	*($12 + [12]) = $11
	$8 = ($11 + [1])
	$10 = $11
	if ( $6 ){ goto $label$20 }
	$8 = *(($1 + [12]))
	$10 = *(($1 + [8]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$21 }
	
.LOOP $label$22:
	*($12 + [56]) = ($12 + [8])
	*($12 + [24]) = $10
	*((($12 + [24]) + [8])) = ($10 + [24])
	*($12 + [28]) = ($10 + [8])
	CALL $66(($12 + [24]), ($12 + [56]))
	$10 = ($10 + [32])
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$22 }
	$11 = *($12 + [12])
	
.LABEL $label$21
	$9 = (CASTING uint_64)(uint_32 int_32((*(($1 + [24])) - *(($1 + [20]))) >> [5]))
	$6 = (($12 + [8]) + [8])
	
.LOOP $label$23:
	$10 = (CASTING uint_32)(uint_64 $9)
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	$8 = ((int_64)$9) != (int_64)0
	*($12 + [24]) = (($8) << [7]) | ($10 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $11) > (int_32)[0]), [656])
	CALL memcpy(*($12 + [12]), ($12 + [24]), [1])
	$11 = (*($12 + [12]) + [1])
	*($12 + [12]) = $11
	if ( $8 ){ goto $label$23 }
	$10 = *(($1 + [24]))
	$11 = *(($1 + [20]))
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$24 }
	
.LOOP $label$25:
	*($12 + [56]) = ($12 + [8])
	*($12 + [24]) = $11
	*((($12 + [24]) + [8])) = ($11 + [24])
	*($12 + [28]) = ($11 + [8])
	CALL $67(($12 + [24]), ($12 + [56]))
	$11 = ($11 + [32])
	if ( ((int_32)$11 != (int_32)$10) ){ goto $label$25 }
	
.LABEL $label$24
	CALL db_update_i64(*($1 + [36]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$26 }
	CALL free($7)
	
.LABEL $label$26
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$27 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$27
	*([0] + [4]) = ($12 + [64])
}

void .FUNC $168 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL $189(($5 + [32]), $1)
	*(($5 + [28])) = *(($1 + [36]))
	*(($3 = (($5 + [16]) + [8]))) = *(($1 + [32]))
	*($5 + [16]) = *($1 + [24])
	*($5 + [20]) = *(($1 + [28]))
	$2 = *($1 + [16])
	*((($5 + [48]) + [8])) = *($3)
	*($5 + [48]) = *($5 + [16])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*(*($0)) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $189(($5 + [80]), ($5 + [32]))
	$4 = *((($5 + [48]) + [8]))
	*((($5 + [64]) + [8])) = $4
	*(($5 + [8])) = $4
	$4 = *($5 + [48])
	*($5 + [64]) = $4
	*($5) = $4
	CALL void $0((int_32 ($5 + [80])), (int_32 $2), (int_64 $5), (int_32 $1))
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$2 }
	CALL $185(*($5 + [88]))
	
.LABEL $label$2
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $185(*($5 + [40]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $175 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$4 = *($1)
	$5 = *(*($3))
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [512])
	$6 = (int_64)1346979907
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [576])
	CALL eosio_assert(((int_64)*(($1 + [16])) == (int_64)344826856192), [896])
	$6 = ((int_64)*($1 + [8]) + (int_64)$5)
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [976])
	*($1 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1008])
	$7 = $9
	$3 = ($7 + [-32])
	*([0] + [4]) = $3
	*($8 + [12]) = $3
	*($8 + [8]) = $3
	*($8 + [16]) = ($7 + [-4])
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($1 + [8])
	*($8 + [32]) = $1
	*($8 + [40]) = ($1 + [24])
	CALL $51(($8 + [32]), ($8 + [24]))
	CALL db_update_i64(*($1 + [32]), $2, $3, [28])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [656])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [656])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	CALL $59(*($1), *($0 + [40]))
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [656])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$1 = *($1)
	*($5 + [15]) = *(*($0 + [48]))
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[0]), [656])
	CALL memcpy(*($1 + [4]), ($5 + [15]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [656])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $7) > (int_32)[7]), [656])
	CALL memcpy(*($2), $5, [8])
	$7 = (*($2) + [8])
	*($2) = $7
	$5 = ($5 + [8])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [656])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [656])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [656])
	CALL memcpy(*($2 + [4]), $0, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [480])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $184([32])) + [12]) = [0]
	*($6 + [8]) = [0]
	*($6 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [608])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [608])
	CALL memcpy(($8 + [16]), ($7 + [8]), [1])
	*($6 + [8]) = ((int_32)*($8 + [16]) != (int_32)[0])
	CALL eosio_assert(((uint_32)($4 + [-9]) > (uint_32)[3]), [608])
	CALL memcpy(($6 + [12]), ($7 + [9]), [4])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $53(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $185($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $184(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $188($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $185($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $185($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [480])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $184([48])) + [8 align=4]) = (int_64)0
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [32]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [608])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $68(($8 + [32]), ($6 + [8]))
	CALL $69(($8 + [32]), ($6 + [20]))
	*($6 + [36]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [36])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $70(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [20])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [24])) = $7
	CALL $185($7)
	
.LABEL $label$10
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$11 }
	*(($4 + [12])) = $7
	CALL $185($7)
	
.LABEL $label$11
	CALL $185($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$8 = (*([0] + [4]) - [64])
	$12 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$4 = *($1)
	$10 = *(($1 + [24]))
	$11 = *($1 + [20])
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$3 }
	$9 = *(*($3))
	
.LOOP $label$4:
	if ( ((int_64)$9 == (int_64)*($11)) ){ goto $label$3 }
	$11 = ($11 + [32])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$2 }
	$10 = *($3 + [4])
	CALL eosio_assert(((int_64)*($10 + [8]) == (int_64)*(($11 + [16]))), [896])
	$9 = ((int_64)*($11 + [8]) + (int_64)*($10))
	*($11 + [8]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($11 + [8]) < (int_64)4611686018427387904), [976])
	goto $label$1 
	
.LABEL $label$2
	$5 = ($1 + [20])
	*(($12 + [40])) = (int_64)344826856192
	*($12 + [32]) = (int_64)0
	CALL eosio_assert([1], [512])
	$9 = (int_64)1346979907
	$11 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$10 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$10 = [0]
	
.LABEL $label$5
	CALL eosio_assert($10, [576])
	*($12 + [48]) = [0]
	*($12 + [24]) = *(*($3))
	$11 = *($3 + [4])
	*(($12 + [44])) = *(($11 + [12]))
	*(($6 = (($12 + [24]) + [16]))) = *(($11 + [8]))
	*((($12 + [24]) + [12])) = *(($11 + [4]))
	*($12 + [32]) = *($11)
	$10 = ($1 + [24])
	$11 = *($10)
	if ( ((int_32)$11 == (int_32)*(($1 + [28]))) ){ goto $label$10 }
	*($11) = *($12 + [24])
	*(($11 + [24])) = *((($12 + [24]) + [24]))
	*(($11 + [16])) = *($6)
	*(($11 + [8])) = *((($12 + [24]) + [8]))
	*($10) = (*($10) + [32])
	goto $label$1 
	
.LABEL $label$10
	CALL $65($5, ($12 + [24]))
	
.LABEL $label$1
	$6 = ($1 + [12])
	$10 = *($6)
	$11 = *($1 + [8])
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$11 }
	$9 = *(*($3))
	
.LOOP $label$12:
	if ( ((int_64)$9 == (int_64)*($11)) ){ goto $label$11 }
	$11 = ($11 + [32])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$12 }
	$11 = $10
	
.LABEL $label$11
	$10 = *($3 + [4])
	CALL eosio_assert(((int_64)*($10 + [8]) == (int_64)*(($11 + [16]))), [1216])
	$9 = (int_64)
	*($11 + [8]) = $9(*($11 + [8]) - *($10)))
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($11 + [8]) < (int_64)4611686018427387904), [1296])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1008])
	$3 = *($1 + [8])
	$10 = *($6)
	$6 = ($10 - $3)
	$9 = (CASTING uint_64)(uint_32 int_32($6 >> [5]))
	$11 = [36]
	
.LOOP $label$13:
	$11 = ($11 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$13 }
	if ( ((int_32)$3 == (int_32)$10) ){ goto $label$15 }
	$3 = (((int_32)uint_32(($6 + [-32]) >> [5]) * (int_32)[28]) + $11)
	goto $label$14 
	
.LABEL $label$15
	$3 = ($11 + [-28])
	
.LABEL $label$14
	$10 = *(($1 + [20]))
	$11 = *(($1 + [24]))
	$6 = ($11 - $10)
	$9 = (CASTING uint_64)(uint_32 int_32($6 >> [5]))
	
.LOOP $label$16:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$17 }
	$3 = ((((int_32)uint_32(($6 + [-32]) >> [5]) * (int_32)[25]) + $3) + [25])
	
.LABEL $label$17
	if ( ($3 <= [513]) ){ goto $label$19 }
	$7 = CALL malloc($3)
	goto $label$18 
	
.LABEL $label$19
	$7 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$18
	*($12 + [8]) = $7
	$5 = ($7 + $3)
	*($12 + [16]) = $5
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [656])
	CALL memcpy($7, $1, [8])
	$10 = ($7 + [8])
	*($12 + [12]) = $10
	$9 = (CASTING uint_64)(uint_32 int_32((*(($1 + [12])) - *(($1 + [8]))) >> [5]))
	$8 = ($7 + [9])
	
.LOOP $label$20:
	$11 = (CASTING uint_32)(uint_64 $9)
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	$6 = ((int_64)$9) != (int_64)0
	*($12 + [24]) = (($6) << [7]) | ($11 & [127]))
	CALL eosio_assert(((int_32)($5 - $10) > (int_32)[0]), [656])
	$11 = $8
	CALL memcpy(($11 + [-1]), ($12 + [24]), [1])
	*($12 + [12]) = $11
	$8 = ($11 + [1])
	$10 = $11
	if ( $6 ){ goto $label$20 }
	$8 = *(($1 + [12]))
	$10 = *(($1 + [8]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$21 }
	
.LOOP $label$22:
	*($12 + [56]) = ($12 + [8])
	*($12 + [24]) = $10
	*((($12 + [24]) + [8])) = ($10 + [24])
	*($12 + [28]) = ($10 + [8])
	CALL $66(($12 + [24]), ($12 + [56]))
	$10 = ($10 + [32])
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$22 }
	$11 = *($12 + [12])
	
.LABEL $label$21
	$9 = (CASTING uint_64)(uint_32 int_32((*(($1 + [24])) - *(($1 + [20]))) >> [5]))
	$6 = (($12 + [8]) + [8])
	
.LOOP $label$23:
	$10 = (CASTING uint_32)(uint_64 $9)
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	$8 = ((int_64)$9) != (int_64)0
	*($12 + [24]) = (($8) << [7]) | ($10 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $11) > (int_32)[0]), [656])
	CALL memcpy(*($12 + [12]), ($12 + [24]), [1])
	$11 = (*($12 + [12]) + [1])
	*($12 + [12]) = $11
	if ( $8 ){ goto $label$23 }
	$10 = *(($1 + [24]))
	$11 = *(($1 + [20]))
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$24 }
	
.LOOP $label$25:
	*($12 + [56]) = ($12 + [8])
	*($12 + [24]) = $11
	*((($12 + [24]) + [8])) = ($11 + [24])
	*($12 + [28]) = ($11 + [8])
	CALL $67(($12 + [24]), ($12 + [56]))
	$11 = ($11 + [32])
	if ( ((int_32)$11 != (int_32)$10) ){ goto $label$25 }
	
.LABEL $label$24
	CALL db_update_i64(*($1 + [36]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$26 }
	CALL free($7)
	
.LABEL $label$26
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$27 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$27
	*([0] + [4]) = ($12 + [64])
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [480])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $184([120])
	CALL $60($6)
	*($6 + [108]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [32])
	*($8 + [56]) = ($6 + [40])
	*($8 + [60]) = ($6 + [56])
	*($8 + [64]) = ($6 + [72])
	*($8 + [68]) = ($6 + [80])
	*($8 + [72]) = ($6 + [88])
	*($8 + [76]) = ($6 + [89])
	*($8 + [80]) = ($6 + [92])
	*($8 + [84]) = ($6 + [104])
	*($8 + [88]) = ($6 + [105])
	CALL $61(($8 + [40]), ($8 + [32]))
	*($6 + [116]) = [-1]
	*($6 + [112]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [112])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $62(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [92])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [96])) = $7
	CALL $185($7)
	
.LABEL $label$10
	CALL $185($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [96])
	return $6
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [96])
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*(($1 + [108])) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$4 = ($1 + [80])
	*(($12 = $13) + [24]) = *($4)
	$5 = *($1)
	$6 = *(*($3))
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [512])
	$11 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$10 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [576])
	CALL eosio_assert(((int_64)*(($1 + [24])) == (int_64)1397703940), [896])
	$11 = ((int_64)*($1 + [16]) + (int_64)$6)
	*($1 + [16]) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [976])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [1008])
	$7 = ($1 + [92])
	$8 = *($1 + [92])
	$10 = *(($1 + [96]))
	$9 = ($10 - $8)
	$11 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	$3 = [90]
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$7 }
	$3 = (($9 & [-8]) + $3)
	
.LABEL $label$7
	$10 = ($3 + [2])
	if ( ($10 <= [513]) ){ goto $label$9 }
	$3 = CALL malloc($10)
	goto $label$8 
	
.LABEL $label$9
	$3 = ($13 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$8
	*($12 + [12]) = $3
	*($12 + [8]) = $3
	*($12 + [16]) = ($3 + $10)
	*($12 + [32]) = ($12 + [8])
	*($12 + [40]) = $1
	*($12 + [44]) = ($1 + [8])
	*($12 + [48]) = ($1 + [16])
	*($12 + [52]) = ($1 + [32])
	*($12 + [56]) = ($1 + [40])
	*($12 + [60]) = ($1 + [56])
	*($12 + [64]) = ($1 + [72])
	*($12 + [68]) = $4
	*($12 + [72]) = ($1 + [88])
	*($12 + [76]) = ($1 + [89])
	*($12 + [80]) = $7
	*($12 + [84]) = ($1 + [104])
	*($12 + [88]) = ($1 + [105])
	CALL $58(($12 + [40]), ($12 + [32]))
	CALL db_update_i64(*($1 + [112]), $2, $3, $10)
	if ( ($10 <= [513]) ){ goto $label$10 }
	CALL free($3)
	
.LABEL $label$10
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($12 + [40]) = *($4)
	if ( (CALL memcmp(($12 + [24]), ($12 + [40]), [8]) == 0) ){ goto $label$12 }
	$3 = *($1 + [116])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$13 }
	$3 = CALL db_idx_double_find_primary(*($0), *($0 + [8]), (int_64)-6030912134838419456, ($12 + [32]), $5)
	*(($1 + [116])) = $3
	
.LABEL $label$13
	CALL db_idx_double_update($3, $2, ($12 + [40]))
	
.LABEL $label$12
	*([0] + [4]) = ($12 + [96])
}

void .FUNC $173 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$5 = *($0 + [4])
	*($1) = *(*($5))
	$2 = *($0)
	$3 = *(*($5 + [4]))
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [512])
	$4 = (int_64)1346979907
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [576])
	*(($1 + [16])) = (int_64)344826856192
	*($1 + [8]) = $3
	*($1 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$6 = $8
	$5 = ($6 + [-32])
	*([0] + [4]) = $5
	*($7 + [12]) = $5
	*($7 + [8]) = $5
	*($7 + [16]) = ($6 + [-4])
	*($7 + [24]) = ($7 + [8])
	*($7 + [36]) = ($1 + [8])
	*($7 + [32]) = $1
	*($7 + [40]) = ($1 + [24])
	CALL $51(($7 + [32]), ($7 + [24]))
	$4 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($2 + [8]), (int_64)-3838636559280373760, *(*($0 + [8])), $4, $5, [28])
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $152 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $152($0, *($1))
	CALL $152($0, *($1 + [4]))
	$0 = *(($1 + [20]))
	if ( ($0 == 0) ){ goto $label$2 }
	*(($1 + [24])) = $0
	CALL $185($0)
	
.LABEL $label$2
	CALL $185($1)
	
.LABEL $label$1
}

int_32 .FUNC _ZN5eosio10texas_game7compareERKNS0_12player_pokerES3_ (int_32 $0, int_32 $1)
{
	CALL eosio_assert((uint_64)(((int_64)*($0 + [32]) + (int_64)-1) <= (int_64)10), [1968])
	CALL eosio_assert((uint_64)(((int_64)*($1 + [32]) + (int_64)-1) <= (int_64)10), [1968])
	return (uint_64)(*($0 + [32]) <= *($1 + [32]))
}

void .FUNC $150 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$5 = (*([0] + [4]) - [64])
	$13 = $5
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$4 = *($1)
	$8 = *(($1 + [12]))
	$11 = *($1 + [8])
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$3 }
	$12 = *(*(*($3)))
	
.LOOP $label$4:
	if ( ((int_64)$12 == (int_64)*($11)) ){ goto $label$3 }
	$11 = ($11 + [32])
	if ( ((int_32)$8 != (int_32)$11) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$2 }
	$8 = *($3 + [4])
	$7 = *($8)
	$12 = *($8 + [8])
	$6 = *(*($3 + [8]))
	CALL eosio_assert(((int_64)$6 != (int_64)0), [1424])
	CALL eosio_assert([1], [1440])
	$8 = *(*($3 + [12]))
	CALL eosio_assert(((int_64)$12 == (int_64)*(($8 + [16]))), [896])
	$7 = ((int_64)*($8 + [8]) + (int_64)((int_64)$7 / (int_64)$6))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [976])
	CALL eosio_assert(((int_64)$12 == (int_64)*(($11 + [16]))), [896])
	$12 = ((int_64)*($11 + [8]) + (int_64)$7)
	*($11 + [8]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($11 + [8]) < (int_64)4611686018427387904), [976])
	goto $label$1 
	
.LABEL $label$2
	$10 = ($1 + [8])
	*(($13 + [40])) = (int_64)344826856192
	*($13 + [32]) = (int_64)0
	CALL eosio_assert([1], [512])
	$12 = (int_64)1346979907
	$11 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$8 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$8 = [0]
	
.LABEL $label$5
	CALL eosio_assert($8, [576])
	*($13 + [48]) = [0]
	*($13 + [24]) = *(*(*($3)))
	$11 = *($3 + [4])
	$7 = *($11)
	$12 = *($11 + [8])
	$6 = *(*($3 + [8]))
	CALL eosio_assert(((int_64)$6 != (int_64)0), [1424])
	CALL eosio_assert([1], [1440])
	$11 = *(*($3 + [12]))
	CALL eosio_assert(((int_64)$12 == (int_64)*(($11 + [16]))), [896])
	$7 = ((int_64)*($11 + [8]) + (int_64)((int_64)$7 / (int_64)$6))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [976])
	*(($3 = (($13 + [24]) + [16]))) = $12
	*(($9 = (($13 + [24]) + [8]))) = $7
	$8 = ($1 + [12])
	$11 = *($8)
	if ( ((int_32)$11 == (int_32)*(($1 + [16]))) ){ goto $label$10 }
	*($11) = *($13 + [24])
	*(($11 + [24])) = *((($13 + [24]) + [24]))
	*(($11 + [16])) = *($3)
	*(($11 + [8])) = *($9)
	*($8) = (*($8) + [32])
	goto $label$1 
	
.LABEL $label$10
	CALL $65($10, ($13 + [24]))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1008])
	$3 = *(($1 + [8]))
	$8 = *(($1 + [12]))
	$9 = ($8 - $3)
	$12 = (CASTING uint_64)(uint_32 int_32($9 >> [5]))
	$11 = [33]
	
.LOOP $label$11:
	$11 = ($11 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$11 }
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$13 }
	$9 = (((int_32)uint_32(($9 + [-32]) >> [5]) * (int_32)[25]) + $11)
	goto $label$12 
	
.LABEL $label$13
	$9 = ($11 + [-25])
	
.LABEL $label$12
	if ( ($9 <= [513]) ){ goto $label$15 }
	$10 = CALL malloc($9)
	goto $label$14 
	
.LABEL $label$15
	$10 = ($5 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$14
	*($13 + [8]) = $10
	$5 = ($10 + $9)
	*($13 + [16]) = $5
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [656])
	CALL memcpy($10, $1, [8])
	$11 = ($10 + [8])
	*($13 + [12]) = $11
	$12 = (CASTING uint_64)(uint_32 int_32((*(($1 + [12])) - *(($1 + [8]))) >> [5]))
	
.LOOP $label$16:
	$8 = (CASTING uint_32)(uint_64 $12)
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	$3 = ((int_64)$12) != (int_64)0
	*($13 + [24]) = (($3) << [7]) | ($8 & [127]))
	CALL eosio_assert(((int_32)($5 - $11) > (int_32)[0]), [656])
	CALL memcpy($11, ($13 + [24]), [1])
	$11 = ($11 + [1])
	*($13 + [12]) = $11
	if ( $3 ){ goto $label$16 }
	$8 = *(($1 + [12]))
	$11 = *(($1 + [8]))
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$17 }
	
.LOOP $label$18:
	*($13 + [56]) = ($13 + [8])
	*($13 + [24]) = $11
	*((($13 + [24]) + [8])) = ($11 + [24])
	*($13 + [28]) = ($11 + [8])
	CALL $67(($13 + [24]), ($13 + [56]))
	$11 = ($11 + [32])
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$18 }
	
.LABEL $label$17
	CALL db_update_i64(*($1 + [24]), $2, $10, $9)
	if ( ($9 <= [513]) ){ goto $label$19 }
	CALL free($10)
	
.LABEL $label$19
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$20 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	*([0] + [4]) = ($13 + [64])
}

void .FUNC $151 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$10 = (*([0] + [4]) - [48])
	$12 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	*(($1 + [24])) = *($1 + [20])
	$3 = *($1)
	CALL eosio_assert([1], [1008])
	$8 = *($1 + [8])
	$6 = *(($1 + [12]))
	$5 = ($6 - $8)
	$9 = (CASTING uint_64)(uint_32 int_32($5 >> [5]))
	$11 = [36]
	
.LOOP $label$1:
	$11 = ($11 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$6 = (((int_32)uint_32(($5 + [-32]) >> [5]) * (int_32)[28]) + $11)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($11 + [-28])
	
.LABEL $label$2
	$8 = *(($1 + [20]))
	$11 = *(($1 + [24]))
	$5 = ($11 - $8)
	$9 = (CASTING uint_64)(uint_32 int_32($5 >> [5]))
	
.LOOP $label$4:
	$6 = ($6 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$5 }
	$6 = ((((int_32)uint_32(($5 + [-32]) >> [5]) * (int_32)[25]) + $6) + [25])
	
.LABEL $label$5
	if ( ($6 <= [513]) ){ goto $label$7 }
	$7 = CALL malloc($6)
	goto $label$6 
	
.LABEL $label$7
	$7 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$6
	*($12 + [8]) = $7
	$4 = ($7 + $6)
	*($12 + [16]) = $4
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [656])
	CALL memcpy($7, $1, [8])
	$10 = ($7 + [8])
	*($12 + [12]) = $10
	$9 = (CASTING uint_64)(uint_32 int_32((*(($1 + [12])) - *(($1 + [8]))) >> [5]))
	$8 = ($7 + [9])
	
.LOOP $label$8:
	$11 = (CASTING uint_32)(uint_64 $9)
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	$5 = ((int_64)$9) != (int_64)0
	*($12 + [32]) = (($5) << [7]) | ($11 & [127]))
	CALL eosio_assert(((int_32)($4 - $10) > (int_32)[0]), [656])
	$11 = $8
	CALL memcpy(($11 + [-1]), ($12 + [32]), [1])
	*($12 + [12]) = $11
	$8 = ($11 + [1])
	$10 = $11
	if ( $5 ){ goto $label$8 }
	$8 = *(($1 + [12]))
	$10 = *(($1 + [8]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$9 }
	
.LOOP $label$10:
	*($12 + [24]) = ($12 + [8])
	*($12 + [32]) = $10
	*((($12 + [32]) + [8])) = ($10 + [24])
	*($12 + [36]) = ($10 + [8])
	CALL $66(($12 + [32]), ($12 + [24]))
	$10 = ($10 + [32])
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$10 }
	$11 = *($12 + [12])
	
.LABEL $label$9
	$9 = (CASTING uint_64)(uint_32 int_32((*(($1 + [24])) - *(($1 + [20]))) >> [5]))
	$5 = (($12 + [8]) + [8])
	
.LOOP $label$11:
	$10 = (CASTING uint_32)(uint_64 $9)
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	$8 = ((int_64)$9) != (int_64)0
	*($12 + [32]) = (($8) << [7]) | ($10 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $11) > (int_32)[0]), [656])
	CALL memcpy(*($12 + [12]), ($12 + [32]), [1])
	$11 = (*($12 + [12]) + [1])
	*($12 + [12]) = $11
	if ( $8 ){ goto $label$11 }
	$10 = *(($1 + [24]))
	$11 = *(($1 + [20]))
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$12 }
	
.LOOP $label$13:
	*($12 + [24]) = ($12 + [8])
	*($12 + [32]) = $11
	*((($12 + [32]) + [8])) = ($11 + [24])
	*($12 + [36]) = ($11 + [8])
	CALL $67(($12 + [32]), ($12 + [24]))
	$11 = ($11 + [32])
	if ( ((int_32)$11 != (int_32)$10) ){ goto $label$13 }
	
.LABEL $label$12
	CALL db_update_i64(*($1 + [36]), $2, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$14 }
	CALL free($7)
	
.LABEL $label$14
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$15 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	*([0] + [4]) = ($12 + [48])
}

void .FUNC _ZN5eosio10texas_game9sortcardsENSt3__16vectorIyNS1_9allocatorIyEEEE (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	*([0] + [4]) = $13
	$12 = *($2)
	$11 = *($2 + [4])
	$6 = ((int_32)$11 != (int_32)$12)
	if ( $6 ){ goto $label$4 }
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$9 = ($0 + [4])
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32(($11 - $12) >> [3])
	$10 = [0]
	$11 = $12
	
.LOOP $label$5:
	*($11) = ((int_64)((uint_64)*($11) % (uint_64)(int_64)13) + (int_64)2)
	$11 = ($11 + [8])
	$10 = ($10 + [1])
	if ( ($10 <= $5) ){ goto $label$5 }
	$5 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$9 = ($0 + [4])
	if ( $6 ){ goto $label$2 }
	
.LABEL $label$3
	$11 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	$7 = ($13 + [8])
	$11 = [0]
	$8 = [0]
	
.LOOP $label$6:
	*($7) = [1]
	*($13) = (int_64)-1
	$10 = ($12 + ($8 << [3]))
	*($13) = *($10)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$7 }
	$12 = int_32(($5 - $11) >> [4])
	$3 = *($10)
	$10 = [0]
	
.LOOP $label$8:
	if ( ((int_64)*($11) != (int_64)$3) ){ goto $label$9 }
	$6 = (*($6) + [1])
	*(($6 = ($11 + [8]))) = $6
	*($7) = $6
	
.LABEL $label$9
	$11 = ($11 + [16])
	$10 = ($10 + [1])
	if ( ($10 <= $12) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)*(($0 + [8]))) ){ goto $label$11 }
	*($5) = *($13)
	*(($5 + [8])) = *($7)
	*($9) = (*($9) + [16])
	goto $label$10 
	
.LABEL $label$11
	CALL $158($0, $13)
	
.LABEL $label$10
	$5 = *($9)
	$11 = *($0)
	$12 = *($2)
	$8 = ($8 + [1])
	if ( ($8 <= int_32((*(($2 + [4])) - $12) >> [3])) ){ goto $label$6 }
	
.LABEL $label$1
	if ( ((int_32)($5 - $11) == (int_32)[16]) ){ goto $label$12 }
	$10 = [0]
	
.LOOP $label$13:
	$4 = ($10 + [1])
	if ( ((int_32)int_32(($5 - $11) >> [4]) == (int_32)$4) ){ goto $label$14 }
	$2 = ((int_32)$10 ^ (int_32)[-1])
	$10 = [0]
	$12 = [0]
	
.LOOP $label$15:
	$12 = ($12 + [1])
	$7 = ($11 + [24])
	$6 = *($7)
	$11 = ($11 + $10)
	$8 = ($11 + [8])
	$5 = *($8)
	if ( ((int_32)$5 > (int_32)$6) ){ goto $label$16 }
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$17 }
	$5 = ($11 + [16])
	if ( ((uint_64)*($11) >= (uint_64)*($5)) ){ goto $label$16 }
	*(($6 = ($13 + [8]))) = *($7)
	*($13) = *($5)
	*($5) = *($11)
	*($7) = *($8)
	*(($11 + [20])) = *(($11 + [4]))
	*(($11 = (*($0) + $10))) = *($13)
	*(($11 + [8])) = *($6)
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$5 >= (int_32)$6) ){ goto $label$16 }
	*(($5 = ($13 + [8]))) = *($7)
	$6 = ($11 + [16])
	*($13) = *($6)
	*($6) = *($11)
	*($7) = *($8)
	*(($11 + [20])) = *(($11 + [4]))
	*(($11 = (*($0) + $10))) = *($13)
	*(($11 + [8])) = *($5)
	
.LABEL $label$16
	$10 = ($10 + [16])
	$11 = *($0)
	$5 = *($9)
	if ( ($12 <= (int_32(($5 - $11) >> [4]) + $2)) ){ goto $label$15 }
	
.LABEL $label$14
	$10 = $4
	if ( ($4 <= (int_32(($5 - $11) >> [4]) + [-1])) ){ goto $label$13 }
	
.LABEL $label$12
	*([0] + [4]) = ($13 + [16])
}

void .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [2])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$4 = [1073741823]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$4 = int_32($2 >> [1])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $184(($4 << [2]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $188($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [2])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [2]))
	$7 = ($3 + [4])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $185($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $154 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	
.LOOP $label$1:
	$11 = ([80] - $1)
	$10 = ($1 + [-8])
	$9 = ($1 + [-12])
	$8 = ($1 + [-16])
	$7 = ($1 + [-20])
	$6 = ($1 + [-24])
	$5 = ($1 + [-28])
	$4 = ($1 + [-32])
	$3 = ($1 + [-40])
	
.LOOP $label$2:
	$12 = $0
	
.LOOP $label$4:
	$0 = ($1 - $12)
	$35 = ((int_32)$0 / (int_32)[40])
	if ( ((uint_32)$35 <= (uint_32)[5]) ){ goto $label$15 }
	if ( ((int_32)$0 <= (int_32)[279]) ){ goto $label$14 }
	$26 = ($12 + ((int_32)((uint_32)$0 / (uint_32)[80]) * (int_32)[40]))
	if ( ((int_32)$0 < (int_32)[39961]) ){ goto $label$17 }
	$0 = ((int_32)((uint_32)$0 / (uint_32)[160]) * (int_32)[40])
	$18 = CALL $161($12, ($12 + $0), $26, ($26 + $0), $3, $2)
	goto $label$16 
	
.LABEL $label$17
	$18 = CALL $159($12, $26, $3, $2)
	
.LABEL $label$16
	if ( CALL int_32 $12((int_32 $26), (int_32 *($2))) ){ goto $label$18 }
	$0 = ([0] - $12)
	$33 = $3
	
.LOOP $label$21:
	if ( ((int_32)($33 + $0) == (int_32)[40]) ){ goto $label$20 }
	$33 = ($33 + [-40])
	if ( (CALL int_32 $33((int_32 $26), (int_32 *($2))) == 0) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$34 = ($12 + [40])
	if ( CALL int_32 $12((int_32 $3), (int_32 *($2))) ){ goto $label$22 }
	if ( ((int_32)$34 == (int_32)$3) ){ goto $label$6 }
	$33 = ($12 + $11)
	$0 = [0]
	
.LOOP $label$24:
	$35 = ($12 + $0)
	$26 = ($35 + [40])
	if ( CALL int_32 $12((int_32 $26), (int_32 *($2))) ){ goto $label$23 }
	$0 = ($0 + [40])
	if ( ($33 + $0) ){ goto $label$24 }
	goto $label$6 
	
.LABEL $label$23
	$30 = ($35 + [56])
	$28 = *($30)
	*($30) = [0]
	$31 = ($35 + [52])
	$29 = *($31)
	*($31) = [0]
	$27 = ($35 + [48])
	$21 = *($27)
	*($27) = [0]
	$20 = *($26)
	$22 = ($35 + [68])
	$34 = *($22)
	$33 = ($35 + [64])
	$17 = *($33)
	$0 = ($35 + [60])
	$18 = *($0)
	*($22) = [0]
	*($33) = [0]
	*($0) = [0]
	$19 = ($35 + [72])
	$13 = *($19)
	*($26) = *($3)
	$26 = *($5)
	*($27) = *($4)
	*($31) = $26
	*($30) = *($6)
	*($5) = [0]
	*($6) = [0]
	*($4) = [0]
	$26 = *($0)
	if ( ($26 == 0) ){ goto $label$25 }
	*($33) = $26
	CALL $185($26)
	*($33) = [0]
	*($22) = [0]
	*($0) = [0]
	
.LABEL $label$25
	*($0) = *($7)
	*($33) = *($8)
	*($22) = *($9)
	*($8) = [0]
	*($9) = [0]
	*($7) = [0]
	*($19) = *($10)
	*($3) = $20
	$0 = *($4)
	if ( ($0 == 0) ){ goto $label$27 }
	*($5) = $0
	CALL $185($0)
	*($4) = $21
	*($5) = $29
	*($6) = $28
	$0 = *($7)
	if ( ($0 == 0) ){ goto $label$26 }
	*($8) = $0
	CALL $185($0)
	*($8) = [0]
	*($9) = [0]
	*($7) = [0]
	goto $label$26 
	
.LABEL $label$27
	*($5) = $29
	*($4) = $21
	*($6) = $28
	
.LABEL $label$26
	*($8) = $17
	*($7) = $18
	*($9) = $34
	*($10) = $13
	$34 = ($35 + [80])
	
.LABEL $label$22
	if ( ((int_32)$34 == (int_32)$3) ){ goto $label$6 }
	$33 = $3
	
.LOOP $label$28:
	$35 = ($34 + [-40])
	
.LOOP $label$29:
	$35 = ($35 + [40])
	if ( (CALL int_32 $12((int_32 $35), (int_32 *($2))) == 0) ){ goto $label$29 }
	$0 = ($33 + [32])
	$34 = ($35 + [40])
	
.LOOP $label$30:
	$26 = ($0 + [-72])
	$0 = ($0 + [-40])
	if ( CALL int_32 $12((int_32 $26), (int_32 *($2))) ){ goto $label$30 }
	$33 = ($0 + [-32])
	if ( ((uint_32)$35 >= (uint_32)$33) ){ goto $label$5 }
	$27 = ($35 + [16])
	$16 = *($27)
	*($27) = [0]
	$28 = ($35 + [12])
	$15 = *($28)
	*($28) = [0]
	$29 = ($35 + [8])
	$14 = *($29)
	*($29) = [0]
	$13 = *($35)
	$30 = ($35 + [28])
	$19 = *($30)
	$31 = ($35 + [24])
	$18 = *($31)
	$26 = ($35 + [20])
	$17 = *($26)
	*($30) = [0]
	*($31) = [0]
	*($26) = [0]
	$32 = ($35 + [32])
	$20 = *($32)
	*($35) = *($33)
	$21 = ($0 + [-20])
	$35 = *($21)
	$22 = ($0 + [-24])
	*($29) = *($22)
	*($28) = $35
	$28 = ($0 + [-16])
	*($27) = *($28)
	*($28) = [0]
	*($22) = (int_64)0
	$35 = *($26)
	if ( ($35 == 0) ){ goto $label$31 }
	*($31) = $35
	CALL $185($35)
	*($30) = [0]
	*($26) = (int_64)0
	
.LABEL $label$31
	$35 = ($0 + [-12])
	*($26) = *($35)
	$27 = ($0 + [-8])
	*($31) = *($27)
	$26 = ($0 + [-4])
	*($30) = *($26)
	*($26) = [0]
	*($35) = (int_64)0
	*($32) = *($0)
	*($33) = $13
	$30 = *($22)
	if ( ($30 == 0) ){ goto $label$33 }
	*($21) = $30
	CALL $185($30)
	*($22) = $14
	*($21) = $15
	*($28) = $16
	$22 = *($35)
	if ( ($22 == 0) ){ goto $label$32 }
	*($27) = $22
	CALL $185($22)
	*($27) = [0]
	*($26) = [0]
	*($35) = [0]
	goto $label$32 
	
.LABEL $label$33
	*($21) = $15
	*($22) = $14
	*($28) = $16
	
.LABEL $label$32
	*($27) = $18
	*($35) = $17
	*($26) = $19
	*($0) = $20
	goto $label$28 
	
.LABEL $label$19
	$29 = *($12 + [8])
	*($12 + [8]) = [0]
	$0 = ($12 + [16])
	$21 = *($0)
	*($0) = [0]
	$31 = ($12 + [12])
	$34 = *($31)
	*($31) = [0]
	$20 = *($12)
	$22 = ($12 + [28])
	$17 = *($22)
	$30 = ($12 + [24])
	$19 = *($30)
	$16 = *($12 + [20])
	*($22) = [0]
	*($30) = [0]
	*($12 + [20]) = [0]
	$13 = *($12 + [32])
	*($12) = *($33)
	$27 = ($33 + [12])
	$28 = *($27)
	$35 = ($33 + [8])
	*($12 + [8]) = *($35)
	*($31) = $28
	$31 = ($33 + [16])
	*($0) = *($31)
	*($31) = [0]
	*($35) = (int_64)0
	$0 = *($12 + [20])
	if ( ($0 == 0) ){ goto $label$34 }
	*($30) = $0
	CALL $185($0)
	*($22) = [0]
	*(($12 + [20])) = (int_64)0
	
.LABEL $label$34
	$0 = ($33 + [20])
	*(($12 + [20])) = *($0)
	$28 = ($33 + [24])
	*($30) = *($28)
	$30 = ($33 + [28])
	*($22) = *($30)
	*($30) = [0]
	*($0) = (int_64)0
	$15 = ($33 + [32])
	*(($12 + [32])) = *($15)
	*($33) = $20
	$22 = *($35)
	if ( ($22 == 0) ){ goto $label$36 }
	*($27) = $22
	CALL $185($22)
	*($35) = $29
	*($27) = $34
	*($31) = $21
	$35 = *($0)
	if ( ($35 == 0) ){ goto $label$35 }
	*($28) = $35
	CALL $185($35)
	*($30) = [0]
	*($0) = (int_64)0
	goto $label$35 
	
.LABEL $label$36
	*($27) = $34
	*($35) = $29
	*($31) = $21
	
.LABEL $label$35
	*($28) = $19
	*($0) = $16
	*($30) = $17
	*($15) = $13
	$18 = ($18 + [1])
	goto $label$7 
	
.LABEL $label$18
	$33 = $3
	goto $label$7 
	
.LABEL $label$15
	goto $label$6 
	
.LABEL $label$14
	CALL $162($12, $1, $2)
	return 
	
.LABEL $label$13
	if ( (CALL int_32 $3((int_32 $12), (int_32 *($2))) == 0) ){ goto $label$6 }
	$27 = *($12 + [8])
	*($12 + [8]) = [0]
	$35 = ($12 + [16])
	$28 = *($35)
	*($35) = [0]
	$26 = ($12 + [12])
	$29 = *($26)
	*($26) = [0]
	$20 = *($12)
	$2 = ($12 + [28])
	$33 = *($2)
	$0 = ($12 + [24])
	$22 = *($0)
	$30 = *($12 + [20])
	*($2) = [0]
	*($0) = [0]
	*($12 + [20]) = [0]
	$13 = *($12 + [32])
	*($12) = *($3)
	$31 = *($5)
	*($12 + [8]) = *($4)
	*($26) = $31
	*($35) = *($6)
	*($5) = [0]
	*($6) = [0]
	*($4) = [0]
	$35 = *($12 + [20])
	if ( ($35 == 0) ){ goto $label$37 }
	*($0) = $35
	CALL $185($35)
	*($2) = [0]
	*(($12 + [20])) = (int_64)0
	
.LABEL $label$37
	*(($12 + [20])) = *($7)
	*($0) = *($8)
	*($2) = *($9)
	*($8) = [0]
	*($9) = [0]
	*($7) = [0]
	*(($12 + [32])) = *($10)
	*($3) = $20
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$9 }
	*($5) = $2
	CALL $185($2)
	*($4) = $27
	*($5) = $29
	*($6) = $28
	$2 = *($7)
	if ( ($2 == 0) ){ goto $label$8 }
	*($8) = $2
	CALL $185($2)
	*($8) = [0]
	*($9) = [0]
	*($7) = [0]
	goto $label$8 
	
.LABEL $label$12
	CALL $159($12, ($12 + [40]), $3, $2)
	return 
	
.LABEL $label$11
	CALL $160($12, ($12 + [40]), ($12 + [80]), $3, $2)
	return 
	
.LABEL $label$10
	CALL $161($12, ($12 + [40]), ($12 + [80]), ($12 + [120]), $3, $2)
	return 
	
.LABEL $label$9
	*($5) = $29
	*($4) = $27
	*($6) = $28
	
.LABEL $label$8
	*($8) = $22
	*($7) = $30
	*($9) = $33
	*($10) = $13
	return 
	
.LABEL $label$7
	$34 = ($12 + [40])
	if ( ((uint_32)$34 >= (uint_32)$33) ){ goto $label$38 }
	
.LOOP $label$39:
	$35 = ($34 + [-40])
	
.LOOP $label$40:
	$35 = ($35 + [40])
	if ( CALL int_32 $35((int_32 $26), (int_32 *($2))) ){ goto $label$40 }
	$0 = ($33 + [32])
	$34 = ($35 + [40])
	
.LOOP $label$41:
	$33 = ($0 + [-72])
	$0 = ($0 + [-40])
	if ( (CALL int_32 $33((int_32 $26), (int_32 *($2))) == 0) ){ goto $label$41 }
	$33 = ($0 + [-32])
	if ( ((uint_32)$35 > (uint_32)$33) ){ goto $label$42 }
	$30 = ($35 + [16])
	$25 = *($30)
	*($30) = [0]
	$29 = ($35 + [12])
	$24 = *($29)
	*($29) = [0]
	$21 = ($35 + [8])
	$23 = *($21)
	*($21) = [0]
	$13 = *($35)
	$27 = ($35 + [28])
	$15 = *($27)
	$28 = ($35 + [24])
	$16 = *($28)
	$22 = ($35 + [20])
	$19 = *($22)
	*($27) = [0]
	*($28) = [0]
	*($22) = [0]
	$14 = ($35 + [32])
	$20 = *($14)
	*($35) = *($33)
	$17 = ($0 + [-20])
	$32 = *($17)
	$31 = ($0 + [-24])
	*($21) = *($31)
	*($29) = $32
	$29 = ($0 + [-16])
	*($30) = *($29)
	*($29) = [0]
	*($31) = (int_64)0
	$30 = *($22)
	if ( ($30 == 0) ){ goto $label$43 }
	*($28) = $30
	CALL $185($30)
	*($27) = [0]
	*($22) = (int_64)0
	
.LABEL $label$43
	$30 = ($0 + [-12])
	*($22) = *($30)
	$21 = ($0 + [-8])
	*($28) = *($21)
	$22 = ($0 + [-4])
	*($27) = *($22)
	*($22) = [0]
	*($30) = (int_64)0
	*($14) = *($0)
	*($33) = $13
	$27 = *($31)
	if ( ($27 == 0) ){ goto $label$45 }
	*($17) = $27
	CALL $185($27)
	*($31) = $23
	*($17) = $24
	*($29) = $25
	$31 = *($30)
	if ( ($31 == 0) ){ goto $label$44 }
	*($21) = $31
	CALL $185($31)
	*($21) = [0]
	*($22) = [0]
	*($30) = [0]
	goto $label$44 
	
.LABEL $label$45
	*($17) = $24
	*($31) = $23
	*($29) = $25
	
.LABEL $label$44
	*($21) = $16
	*($30) = $19
	*($22) = $15
	*($0) = $20
	$26 = ( $33 ? $26 : ((int_32)$26 == (int_32)$35) )
	$18 = ($18 + [1])
	goto $label$39 
	
.LABEL $label$42
	$34 = $35
	
.LABEL $label$38
	if ( ((int_32)$34 == (int_32)$26) ){ goto $label$46 }
	if ( (CALL int_32 $26((int_32 $34), (int_32 *($2))) == 0) ){ goto $label$46 }
	$21 = *($34 + [8])
	*($34 + [8]) = [0]
	$0 = ($34 + [16])
	$17 = *($0)
	*($0) = [0]
	$22 = ($34 + [12])
	$19 = *($22)
	*($22) = [0]
	$20 = *($34)
	$35 = ($34 + [28])
	$27 = *($35)
	$33 = ($34 + [24])
	$28 = *($33)
	$29 = *($34 + [20])
	*($35) = [0]
	*($33) = [0]
	*($34 + [20]) = [0]
	$13 = *($34 + [32])
	*($34) = *($26)
	$30 = ($26 + [12])
	$31 = *($30)
	*($34 + [8]) = *($26 + [8])
	*($22) = $31
	$22 = ($26 + [16])
	*($0) = *($22)
	*($22) = [0]
	*($26 + [8 align=4]) = (int_64)0
	$0 = *($34 + [20])
	if ( ($0 == 0) ){ goto $label$47 }
	*($33) = $0
	CALL $185($0)
	*($35) = [0]
	*(($34 + [20])) = (int_64)0
	
.LABEL $label$47
	$0 = ($26 + [20])
	*(($34 + [20])) = *($0)
	$31 = ($26 + [24])
	*($33) = *($31)
	$33 = ($26 + [28])
	*($35) = *($33)
	*($33) = [0]
	*($0) = (int_64)0
	*(($34 + [32])) = *($26 + [32])
	*($26) = $20
	$16 = ($26 + [8])
	$35 = *($16)
	if ( ($35 == 0) ){ goto $label$49 }
	*($30) = $35
	CALL $185($35)
	*($16) = $21
	*($30) = $19
	*($22) = $17
	$35 = *($0)
	if ( ($35 == 0) ){ goto $label$48 }
	*($31) = $35
	CALL $185($35)
	*($33) = [0]
	*($0) = (int_64)0
	goto $label$48 
	
.LABEL $label$49
	*($30) = $19
	*($16) = $21
	*($22) = $17
	
.LABEL $label$48
	*($31) = $28
	*($0) = $29
	*($33) = $27
	*(($26 + [32])) = $13
	$18 = ($18 + [1])
	
.LABEL $label$46
	if ( $18 ){ goto $label$51 }
	$35 = CALL $163($12, $34, $2)
	$0 = ($34 + [40])
	if ( CALL $163($0, $1, $2) ){ goto $label$50 }
	if ( $35 ){ goto $label$2 }
	
.LABEL $label$51
	if ( ((int_32)($34 - $12) >= (int_32)($1 - $34)) ){ goto $label$3 }
	CALL $154($12, $34, $2)
	$0 = ($34 + [40])
	goto $label$2 
	
.LABEL $label$50
	$1 = $34
	$0 = $12
	if ( ($35 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	return 
	
.LABEL $label$5
	$12 = $35
	goto $label$4 
	
.LABEL $label$3
	CALL $154(($34 + [40]), $1, $2)
	$1 = $34
	$0 = $12
	goto $label$1 
	$35
}

void .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [2])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$4 = [1073741823]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$4 = int_32($2 >> [1])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $184(($4 << [2]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $188($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [2])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [2]))
	$7 = ($3 + [4])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $185($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $158 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $184(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $188($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $185($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $159 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$13 = CALL int_32 $1((int_32 $0), (int_32 *($3)))
	$4 = CALL int_32 $2((int_32 $1), (int_32 *($3)))
	if ( ($13 == 0) ){ goto $label$14 }
	$6 = *($0 + [8])
	*($0 + [8]) = [0]
	$13 = ($0 + [16])
	$8 = *($13)
	*($13) = [0]
	$14 = ($0 + [12])
	$7 = *($14)
	*($14) = [0]
	$5 = *($0)
	$15 = ($0 + [28])
	$11 = *($15)
	$16 = ($0 + [24])
	$10 = *($16)
	$9 = *($0 + [20])
	*($15) = [0]
	*($16) = [0]
	*($0 + [20]) = [0]
	$12 = *($0 + [32])
	if ( ($4 == 0) ){ goto $label$13 }
	*($0) = *($2)
	*(($0 + [8])) = *($2 + [8])
	*($14) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($13) = *($1)
	*($1) = [0]
	*($2 + [8 align=4]) = (int_64)0
	$1 = ($0 + [20])
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$15 }
	*(($0 + [24])) = $3
	CALL $185($3)
	*(($0 + [28])) = [0]
	*($1) = (int_64)0
	
.LABEL $label$15
	$3 = ($2 + [20])
	*($1) = *($3)
	*(($0 + [24])) = *(($2 + [24]))
	$1 = ($2 + [28])
	*(($0 + [28])) = *($1)
	*($1) = [0]
	*($3) = (int_64)0
	*(($0 + [32])) = *($2 + [32])
	*($2) = $5
	$1 = *(($2 + [8]))
	if ( ($1 == 0) ){ goto $label$12 }
	*(($0 = ($2 + [12]))) = $1
	CALL $185($1)
	*(($2 + [8])) = $6
	*($0) = $7
	*(($2 + [16])) = $8
	$0 = ($2 + [20])
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [24])) = $1
	CALL $185($1)
	*(($2 + [28])) = [0]
	*($0) = (int_64)0
	goto $label$11 
	
.LABEL $label$14
	$13 = [0]
	if ( ($4 == 0) ){ goto $label$1 }
	$6 = *($1 + [8])
	*($1 + [8]) = [0]
	$14 = ($1 + [16])
	$8 = *($14)
	*($14) = [0]
	$15 = ($1 + [12])
	$7 = *($15)
	*($15) = [0]
	$5 = *($1)
	$13 = ($1 + [28])
	$16 = *($13)
	$4 = ($1 + [24])
	$11 = *($4)
	$10 = *($1 + [20])
	*($13) = [0]
	*($4) = [0]
	*($1 + [20]) = [0]
	$12 = *($1 + [32])
	*($1) = *($2)
	$9 = *(($2 + [12]))
	*($1 + [8]) = *($2 + [8])
	*($15) = $9
	$15 = ($2 + [16])
	*($14) = *($15)
	*($15) = [0]
	*($2 + [8 align=4]) = (int_64)0
	$14 = *($1 + [20])
	if ( ($14 == 0) ){ goto $label$16 }
	*($4) = $14
	CALL $185($14)
	*($13) = [0]
	*(($1 + [20])) = (int_64)0
	
.LABEL $label$16
	$14 = ($2 + [20])
	*(($1 + [20])) = *($14)
	*($4) = *(($2 + [24]))
	$4 = ($2 + [28])
	*($13) = *($4)
	*($4) = [0]
	*($14) = (int_64)0
	*(($1 + [32])) = *($2 + [32])
	*($2) = $5
	$4 = ($2 + [8])
	$13 = *($4)
	if ( ($13 == 0) ){ goto $label$10 }
	*(($15 = ($2 + [12]))) = $13
	CALL $185($13)
	*($4) = $6
	*($15) = $7
	*(($2 + [16])) = $8
	$13 = *($14)
	if ( ($13 == 0) ){ goto $label$9 }
	*(($2 + [24])) = $13
	CALL $185($13)
	*(($2 + [28])) = [0]
	*(($2 + [20])) = (int_64)0
	goto $label$9 
	
.LABEL $label$13
	*($0) = *($1)
	*(($0 + [8])) = *($1 + [8])
	*($14) = *(($1 + [12]))
	$4 = ($1 + [16])
	*($13) = *($4)
	*($4) = [0]
	*($1 + [8 align=4]) = (int_64)0
	$13 = ($0 + [20])
	$4 = *($13)
	if ( ($4 == 0) ){ goto $label$17 }
	*(($0 + [24])) = $4
	CALL $185($4)
	*(($0 + [28])) = [0]
	*($13) = (int_64)0
	
.LABEL $label$17
	$4 = ($1 + [20])
	*($13) = *($4)
	*(($0 + [24])) = *(($1 + [24]))
	$13 = ($1 + [28])
	*(($0 + [28])) = *($13)
	*($13) = [0]
	*($4) = (int_64)0
	*(($0 + [32])) = *($1 + [32])
	*($1) = $5
	$0 = *(($1 + [8]))
	if ( ($0 == 0) ){ goto $label$8 }
	*(($13 = ($1 + [12]))) = $0
	CALL $185($0)
	*(($1 + [8])) = $6
	*($13) = $7
	*(($1 + [16])) = $8
	$13 = ($1 + [20])
	$0 = *($13)
	if ( ($0 == 0) ){ goto $label$7 }
	*(($1 + [24])) = $0
	CALL $185($0)
	*(($1 + [28])) = [0]
	*($13) = (int_64)0
	goto $label$7 
	
.LABEL $label$12
	*(($2 + [12])) = $7
	*(($2 + [8])) = $6
	*(($2 + [16])) = $8
	
.LABEL $label$11
	*(($2 + [24])) = $10
	*(($2 + [20])) = $9
	*(($2 + [28])) = $11
	*(($2 + [32])) = $12
	return [1]
	
.LABEL $label$10
	*(($2 + [12])) = $7
	*($4) = $6
	*(($2 + [16])) = $8
	
.LABEL $label$9
	*(($2 + [24])) = $11
	*(($2 + [20])) = $10
	*(($2 + [28])) = $16
	*(($2 + [32])) = $12
	$13 = [1]
	if ( (CALL int_32 $1((int_32 $0), (int_32 *($3))) == 0) ){ goto $label$1 }
	$11 = *($0 + [8])
	*($0 + [8]) = [0]
	$2 = ($0 + [16])
	$10 = *($2)
	*($2) = [0]
	$3 = ($0 + [12])
	$9 = *($3)
	*($3) = [0]
	$5 = *($0)
	$13 = ($0 + [28])
	$4 = *($13)
	$14 = ($0 + [24])
	$15 = *($14)
	$16 = *($0 + [20])
	*($13) = [0]
	*($14) = [0]
	*($0 + [20]) = [0]
	$12 = *($0 + [32])
	*($0) = *($1)
	$14 = *(($1 + [12]))
	$13 = ($1 + [8])
	*($0 + [8]) = *($13)
	*($3) = $14
	$3 = ($1 + [16])
	*($2) = *($3)
	*($3) = [0]
	*($13) = (int_64)0
	$2 = *($0 + [20])
	if ( ($2 == 0) ){ goto $label$18 }
	*(($0 + [24])) = $2
	CALL $185($2)
	*(($0 + [28])) = [0]
	*(($0 + [20])) = (int_64)0
	
.LABEL $label$18
	$2 = ($1 + [20])
	*(($0 + [20])) = *($2)
	*(($0 + [24])) = *(($1 + [24]))
	$3 = ($1 + [28])
	*(($0 + [28])) = *($3)
	*($3) = [0]
	*($2) = (int_64)0
	*(($0 + [32])) = *(($1 + [32]))
	*($1) = $5
	$0 = *($13)
	if ( ($0 == 0) ){ goto $label$6 }
	*(($3 = ($1 + [12]))) = $0
	CALL $185($0)
	*(($1 + [8])) = $11
	*($3) = $9
	*(($1 + [16])) = $10
	$2 = *($2)
	if ( ($2 == 0) ){ goto $label$5 }
	*(($1 + [24])) = $2
	CALL $185($2)
	*(($1 + [28])) = [0]
	*(($1 + [20])) = (int_64)0
	goto $label$5 
	
.LABEL $label$8
	*(($1 + [12])) = $7
	*(($1 + [8])) = $6
	*(($1 + [16])) = $8
	
.LABEL $label$7
	*(($4 = ($1 + [24]))) = $10
	*(($0 = ($1 + [20]))) = $9
	*(($14 = ($1 + [28]))) = $11
	*(($15 = ($1 + [32]))) = $12
	$13 = [1]
	if ( (CALL int_32 $2((int_32 $1), (int_32 *($3))) == 0) ){ goto $label$1 }
	$3 = ($1 + [16])
	$6 = *($3)
	*($3) = [0]
	$13 = ($1 + [12])
	$8 = *($13)
	*($13) = [0]
	$16 = ($1 + [8])
	$7 = *($16)
	*($16) = [0]
	$5 = *($1)
	$11 = *($14)
	$10 = *($4)
	$9 = *($0)
	*($14) = [0]
	*($4) = [0]
	*($0) = [0]
	$12 = *($15)
	*($1) = *($2)
	$4 = *(($2 + [12]))
	*($16) = *($2 + [8])
	*($13) = $4
	$13 = ($2 + [16])
	*($3) = *($13)
	*($13) = [0]
	*($2 + [8 align=4]) = (int_64)0
	$0 = *($0)
	if ( ($0 == 0) ){ goto $label$19 }
	*(($1 + [24])) = $0
	CALL $185($0)
	*(($1 + [28])) = [0]
	*(($1 + [20])) = (int_64)0
	
.LABEL $label$19
	$0 = ($2 + [20])
	*(($1 + [20])) = *($0)
	*(($1 + [24])) = *(($2 + [24]))
	$3 = ($2 + [28])
	*(($1 + [28])) = *($3)
	*($3) = [0]
	*($0) = (int_64)0
	*(($1 + [32])) = *($2 + [32])
	*($2) = $5
	$1 = *(($2 + [8]))
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 = ($2 + [12]))) = $1
	CALL $185($1)
	*(($2 + [8])) = $7
	*($3) = $8
	*(($2 + [16])) = $6
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$3 }
	*(($2 + [24])) = $1
	CALL $185($1)
	*(($2 + [28])) = [0]
	*(($2 + [20])) = (int_64)0
	goto $label$3 
	
.LABEL $label$6
	*(($1 + [12])) = $9
	*(($1 + [8])) = $11
	*(($1 + [16])) = $10
	
.LABEL $label$5
	*(($1 + [24])) = $15
	*(($1 + [20])) = $16
	*(($1 + [28])) = $4
	*(($1 + [32])) = $12
	goto $label$2 
	
.LABEL $label$4
	*(($2 + [12])) = $8
	*(($2 + [8])) = $7
	*(($2 + [16])) = $6
	
.LABEL $label$3
	*(($2 + [24])) = $10
	*(($2 + [20])) = $9
	*(($2 + [28])) = $11
	*(($2 + [32])) = $12
	
.LABEL $label$2
	$13 = [2]
	
.LABEL $label$1
	return $13
}

int_32 .FUNC $179 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [104]) == (int_32)$0), [160])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3838636613264998400, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $81($0, $5)
	CALL eosio_assert(((int_32)*($6 + [104]) == (int_32)$0), [160])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10408])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10216]
	$1 = (((int_32)$2 * (int_32)[12]) + [10216])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($2)), [1200])
	$4 = *($3)
	$7 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$4 = *($1 + [4])
	$3 = int_32(($4 - $7) >> [5])
	$6 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$4 }
	CALL $71($1, ($6 - $3))
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$6 >= (uint_32)$3) ){ goto $label$5 }
	$4 = ($7 + ($6 << [5]))
	*(($1 + [4])) = $4
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	*($8 + [8]) = $0
	*($8 + [16]) = $7
	*((($8 + [16]) + [8])) = ($7 + [24])
	*($8 + [20]) = ($7 + [8])
	CALL $72(($8 + [16]), ($8 + [8]))
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [32])
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($2)), [1200])
	$4 = *($3)
	$7 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$4 = *($1 + [4])
	$3 = int_32(($4 - $7) >> [5])
	$6 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$4 }
	CALL $73($1, ($6 - $3))
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$6 >= (uint_32)$3) ){ goto $label$5 }
	$4 = ($7 + ($6 << [5]))
	*(($1 + [4])) = $4
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	*($8 + [8]) = $0
	*($8 + [16]) = $7
	*((($8 + [16]) + [8])) = ($7 + [24])
	*($8 + [20]) = ($7 + [8])
	CALL $74(($8 + [16]), ($8 + [8]))
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [32])
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [5])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$3 }
	$4 = [134217727]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$4 = int_32($7 >> [4])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $184(($4 << [5]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $188($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [5])))) = *($1)
	*(($3 + [24])) = *(($1 + [24]))
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [5]))
	$3 = ($3 + [32])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $185($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [3])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($7 >> [2])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $184(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $188($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [3]))
	$2 = ($7 + ($4 << [3]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [3]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $185($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	*($5 + [15]) = *(*($0 + [8]))
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [656])
	CALL memcpy(*($2 + [4]), ($5 + [15]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [656])
	CALL memcpy(*($2 + [4]), $0, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [608])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [608])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [608])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [608])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [608])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	CALL $63(*($1), *($0 + [40]))
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [608])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [608])
	CALL memcpy(($5 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($2) = ((int_32)*($5 + [15]) != (int_32)[0])
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $60 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [16]) = (int_64)0
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [24]))) = (int_64)1397703940
	CALL eosio_assert([1], [512])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [576])
	*($0 + [40]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*(($2 = ($0 + [48]))) = (int_64)1129334020
	CALL eosio_assert([1], [512])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [576])
	*(($2 = ($0 + [64]))) = (int_64)1129334020
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [512])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [576])
	*($0 + [80]) = (int_64)0
	*($0 + [72]) = (int_64)0
	*($0 + [88]) = [0]
	*($0 + [92 align=4]) = (int_64)0
	*(($0 + [100])) = [0]
	*($0 + [104]) = [0]
	*($0 + [105]) = [0]
	return $0
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1200])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [3])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $64($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [3]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $7) > (uint_32)[7]), [608])
	CALL memcpy($4, *($5), [8])
	$7 = (*($5) + [8])
	*($5) = $7
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $184(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $188($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [92])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [96])) = $6
	CALL $185($6)
	
.LABEL $label$11
	CALL $185($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $185($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC _ZeqRK11checksum256S1_ (int_32 $0, int_32 _ZeqRK11checksum256S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$4 = *($1)
	$6 = *($3)
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*(($1 + [72]))), [896])
	$5 = ((int_64)*($3) + (int_64)*($6))
	*(($3 = ($1 + [64]))) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($3) < (int_64)4611686018427387904), [976])
	CALL eosio_assert([1], [512])
	$5 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [576])
	*(($1 + [56])) = (int_64)1397703940
	*($1 + [48]) = (int_64)0
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1008])
	$6 = $8
	$3 = ($6 + [-112])
	*([0] + [4]) = $3
	*($7 + [12]) = $3
	*($7 + [8]) = $3
	*($7 + [16]) = ($6 + [-8])
	CALL eosio_assert([1], [656])
	CALL memcpy(*($7 + [12]), $1, [8])
	*($7 + [12]) = (*($7 + [12]) + [8])
	*($7 + [40]) = ($7 + [8])
	*($7 + [28]) = ($1 + [24])
	*($7 + [24]) = ($1 + [8])
	*($7 + [32]) = ($1 + [40])
	CALL $83(($7 + [24]), ($7 + [40]))
	*($7 + [40]) = ($7 + [8])
	*($7 + [28]) = ($1 + [64])
	*($7 + [24]) = ($1 + [48])
	*($7 + [32]) = ($1 + [80])
	*($7 + [36]) = ($1 + [96])
	CALL $84(($7 + [24]), ($7 + [40]))
	CALL db_update_i64(*($1 + [108]), $2, $3, [104])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $184(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $188($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $185($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $185($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $0, [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((int_32)(*($2 + [8]) - $1) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), ($0 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $86 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [512])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [576])
	*(($2 = ($0 + [32]))) = (int_64)1397703940
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [512])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [576])
	*(($2 = ($0 + [48]))) = (int_64)1397703940
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [512])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [576])
	*(($2 = ($0 + [64]))) = (int_64)1129334020
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [512])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [576])
	*(($2 = ($0 + [80]))) = (int_64)1397703940
	*($0 + [72]) = (int_64)0
	CALL eosio_assert([1], [512])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$3 = [0]
	
.LABEL $label$21
	CALL eosio_assert($3, [576])
	*(($2 = ($0 + [96]))) = (int_64)1129334020
	*($0 + [88]) = (int_64)0
	CALL eosio_assert([1], [512])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$29 }
	
.LOOP $label$30:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$27 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$30 }
	
.LABEL $label$29
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$3 = [0]
	
.LABEL $label$26
	CALL eosio_assert($3, [576])
	return $0
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [480])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $184([120])
	CALL $86($6)
	*($6 + [104]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [24])
	*($8 + [44]) = ($6 + [40])
	*($8 + [48]) = ($6 + [56])
	*($8 + [52]) = ($6 + [72])
	*($8 + [56]) = ($6 + [88])
	CALL $109(($8 + [32]), ($8 + [24]))
	*($6 + [108]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [108])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $88(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $185($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $82 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$0), [160])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3838636836622985216, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $75($0, $5)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$0), [160])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [480])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	$7 = ($4 + $6)
	*($8 + [16]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [16]))
	$4 = *($8 + [12])
	
.LABEL $label$7
	$6 = CALL $184([120])
	$3 = ($6 + [8])
	CALL $96($3)
	$2 = ($6 + [48])
	CALL $97($2)
	*($6 + [104]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [608])
	CALL memcpy($6, *($8 + [12]), [8])
	*($8 + [12]) = (*($8 + [12]) + [8])
	*($8 + [40]) = ($8 + [8])
	*($8 + [28]) = ($6 + [24])
	*($8 + [24]) = $3
	*($8 + [32]) = ($6 + [40])
	CALL $110(($8 + [24]), ($8 + [40]))
	*($8 + [40]) = ($8 + [8])
	*($8 + [28]) = ($6 + [64])
	*($8 + [24]) = $2
	*($8 + [32]) = ($6 + [80])
	*($8 + [36]) = ($6 + [96])
	CALL $111(($8 + [24]), ($8 + [40]))
	*($6 + [108]) = $1
	*($8 + [40]) = $6
	$5 = *($6)
	*($8 + [24]) = $5
	$7 = *($6 + [108])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [40]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $99(($0 + [24]), ($8 + [40]), ($8 + [24]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [40])
	*($8 + [40]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $185($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $80 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [108]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1712])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-3838636613264998400)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1648])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1648])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $81(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $182 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10518]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10520])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10518]) = [1]
	$7 = ($7 << [16])
	*([0] + [10520]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10520])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10520]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10518]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10518]) = [1]
	$3 = ($3 << [16])
	*([0] + [10520]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10520])
	
.LABEL $label$8
	*([0] + [10520]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $149 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$10 = (*([0] + [4]) - [48])
	$14 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$4 = *($1)
	$8 = ($1 + [12])
	$12 = *($8)
	$13 = *($1 + [8])
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$1 }
	$11 = *(*(*($3)))
	
.LOOP $label$2:
	if ( ((int_64)$11 == (int_64)*($13)) ){ goto $label$1 }
	$13 = ($13 + [32])
	if ( ((int_32)$12 != (int_32)$13) ){ goto $label$2 }
	$13 = $12
	
.LABEL $label$1
	$12 = *($3 + [4])
	$7 = *($12)
	$11 = *($12 + [8])
	$6 = *(*($3 + [8]))
	CALL eosio_assert(((int_64)$6 != (int_64)0), [1424])
	CALL eosio_assert([1], [1440])
	$12 = *(*($3 + [12]))
	CALL eosio_assert(((int_64)$11 == (int_64)*(($12 + [16]))), [896])
	$7 = ((int_64)*($12 + [8]) + (int_64)((int_64)$7 / (int_64)$6))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [976])
	CALL eosio_assert(((int_64)$11 == (int_64)*(($13 + [16]))), [896])
	$11 = ((int_64)*($13 + [8]) + (int_64)$7)
	*($13 + [8]) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($13 + [8]) < (int_64)4611686018427387904), [976])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1008])
	$3 = *($1 + [8])
	$12 = *($8)
	$8 = ($12 - $3)
	$11 = (CASTING uint_64)(uint_32 int_32($8 >> [5]))
	$13 = [36]
	
.LOOP $label$3:
	$13 = ($13 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$12) ){ goto $label$5 }
	$3 = (((int_32)uint_32(($8 + [-32]) >> [5]) * (int_32)[28]) + $13)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($13 + [-28])
	
.LABEL $label$4
	$12 = *(($1 + [20]))
	$13 = *(($1 + [24]))
	$8 = ($13 - $12)
	$11 = (CASTING uint_64)(uint_32 int_32($8 >> [5]))
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$7 }
	$3 = ((((int_32)uint_32(($8 + [-32]) >> [5]) * (int_32)[25]) + $3) + [25])
	
.LABEL $label$7
	if ( ($3 <= [513]) ){ goto $label$9 }
	$9 = CALL malloc($3)
	goto $label$8 
	
.LABEL $label$9
	$9 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$8
	*($14 + [8]) = $9
	$5 = ($9 + $3)
	*($14 + [16]) = $5
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [656])
	CALL memcpy($9, $1, [8])
	$12 = ($9 + [8])
	*($14 + [12]) = $12
	$11 = (CASTING uint_64)(uint_32 int_32((*(($1 + [12])) - *(($1 + [8]))) >> [5]))
	$10 = ($9 + [9])
	
.LOOP $label$10:
	$13 = (CASTING uint_32)(uint_64 $11)
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	$8 = ((int_64)$11) != (int_64)0
	*($14 + [32]) = (($8) << [7]) | ($13 & [127]))
	CALL eosio_assert(((int_32)($5 - $12) > (int_32)[0]), [656])
	$13 = $10
	CALL memcpy(($13 + [-1]), ($14 + [32]), [1])
	*($14 + [12]) = $13
	$10 = ($13 + [1])
	$12 = $13
	if ( $8 ){ goto $label$10 }
	$10 = *(($1 + [12]))
	$12 = *(($1 + [8]))
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$11 }
	
.LOOP $label$12:
	*($14 + [24]) = ($14 + [8])
	*($14 + [32]) = $12
	*((($14 + [32]) + [8])) = ($12 + [24])
	*($14 + [36]) = ($12 + [8])
	CALL $66(($14 + [32]), ($14 + [24]))
	$12 = ($12 + [32])
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$12 }
	$13 = *($14 + [12])
	
.LABEL $label$11
	$11 = (CASTING uint_64)(uint_32 int_32((*(($1 + [24])) - *(($1 + [20]))) >> [5]))
	$8 = (($14 + [8]) + [8])
	
.LOOP $label$13:
	$12 = (CASTING uint_32)(uint_64 $11)
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	$10 = ((int_64)$11) != (int_64)0
	*($14 + [32]) = (($10) << [7]) | ($12 & [127]))
	CALL eosio_assert(((int_32)(*($8) - $13) > (int_32)[0]), [656])
	CALL memcpy(*($14 + [12]), ($14 + [32]), [1])
	$13 = (*($14 + [12]) + [1])
	*($14 + [12]) = $13
	if ( $10 ){ goto $label$13 }
	$12 = *(($1 + [24]))
	$13 = *(($1 + [20]))
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$14 }
	
.LOOP $label$15:
	*($14 + [24]) = ($14 + [8])
	*($14 + [32]) = $13
	*((($14 + [32]) + [8])) = ($13 + [24])
	*($14 + [36]) = ($13 + [8])
	CALL $67(($14 + [32]), ($14 + [24]))
	$13 = ($13 + [32])
	if ( ((int_32)$13 != (int_32)$12) ){ goto $label$15 }
	
.LABEL $label$14
	CALL db_update_i64(*($1 + [36]), $2, $9, $3)
	if ( ($3 <= [513]) ){ goto $label$16 }
	CALL free($9)
	
.LABEL $label$16
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$17 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	*([0] + [4]) = ($14 + [48])
}

void .FUNC $148 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$5 = (*([0] + [4]) - [64])
	$13 = $5
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$4 = *($1)
	$8 = *(($1 + [12]))
	$11 = *($1 + [8])
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$3 }
	$12 = *(*(*($3)))
	
.LOOP $label$4:
	if ( ((int_64)$12 == (int_64)*($11)) ){ goto $label$3 }
	$11 = ($11 + [32])
	if ( ((int_32)$8 != (int_32)$11) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$2 }
	$8 = *($3 + [4])
	$12 = *($8)
	$7 = *($8 + [8])
	$6 = *(*($3 + [8]))
	CALL eosio_assert(((int_64)$6 != (int_64)0), [1424])
	CALL eosio_assert([1], [1440])
	CALL eosio_assert(((int_64)$7 == (int_64)*(($11 + [16]))), [896])
	$12 = ((int_64)*($11 + [8]) + (int_64)((int_64)$12 / (int_64)$6))
	*($11 + [8]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($11 + [8]) < (int_64)4611686018427387904), [976])
	goto $label$1 
	
.LABEL $label$2
	$10 = ($1 + [8])
	*(($13 + [40])) = (int_64)344826856192
	*($13 + [32]) = (int_64)0
	CALL eosio_assert([1], [512])
	$12 = (int_64)1346979907
	$11 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$8 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$8 = [0]
	
.LABEL $label$5
	CALL eosio_assert($8, [576])
	*($13 + [48]) = [0]
	*($13 + [24]) = *(*(*($3)))
	$11 = *($3 + [4])
	$12 = *($11)
	$7 = *($11 + [8])
	$6 = *(*($3 + [8]))
	CALL eosio_assert(((int_64)$6 != (int_64)0), [1424])
	CALL eosio_assert([1], [1440])
	*(($3 = (($13 + [24]) + [16]))) = $7
	*(($9 = (($13 + [24]) + [8]))) = ((int_64)$12 / (int_64)$6)
	$8 = ($1 + [12])
	$11 = *($8)
	if ( ((int_32)$11 == (int_32)*(($1 + [16]))) ){ goto $label$10 }
	*($11) = *($13 + [24])
	*(($11 + [24])) = *((($13 + [24]) + [24]))
	*(($11 + [16])) = *($3)
	*(($11 + [8])) = *($9)
	*($8) = (*($8) + [32])
	goto $label$1 
	
.LABEL $label$10
	CALL $65($10, ($13 + [24]))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1008])
	$3 = *(($1 + [8]))
	$8 = *(($1 + [12]))
	$9 = ($8 - $3)
	$12 = (CASTING uint_64)(uint_32 int_32($9 >> [5]))
	$11 = [33]
	
.LOOP $label$11:
	$11 = ($11 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$11 }
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$13 }
	$9 = (((int_32)uint_32(($9 + [-32]) >> [5]) * (int_32)[25]) + $11)
	goto $label$12 
	
.LABEL $label$13
	$9 = ($11 + [-25])
	
.LABEL $label$12
	if ( ($9 <= [513]) ){ goto $label$15 }
	$10 = CALL malloc($9)
	goto $label$14 
	
.LABEL $label$15
	$10 = ($5 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$14
	*($13 + [8]) = $10
	$5 = ($10 + $9)
	*($13 + [16]) = $5
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [656])
	CALL memcpy($10, $1, [8])
	$11 = ($10 + [8])
	*($13 + [12]) = $11
	$12 = (CASTING uint_64)(uint_32 int_32((*(($1 + [12])) - *(($1 + [8]))) >> [5]))
	
.LOOP $label$16:
	$8 = (CASTING uint_32)(uint_64 $12)
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	$3 = ((int_64)$12) != (int_64)0
	*($13 + [24]) = (($3) << [7]) | ($8 & [127]))
	CALL eosio_assert(((int_32)($5 - $11) > (int_32)[0]), [656])
	CALL memcpy($11, ($13 + [24]), [1])
	$11 = ($11 + [1])
	*($13 + [12]) = $11
	if ( $3 ){ goto $label$16 }
	$8 = *(($1 + [12]))
	$11 = *(($1 + [8]))
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$17 }
	
.LOOP $label$18:
	*($13 + [56]) = ($13 + [8])
	*($13 + [24]) = $11
	*((($13 + [24]) + [8])) = ($11 + [24])
	*($13 + [28]) = ($11 + [8])
	CALL $67(($13 + [24]), ($13 + [56]))
	$11 = ($11 + [32])
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$18 }
	
.LABEL $label$17
	CALL db_update_i64(*($1 + [24]), $2, $10, $9)
	if ( ($9 <= [513]) ){ goto $label$19 }
	CALL free($10)
	
.LABEL $label$19
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$20 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	*([0] + [4]) = ($13 + [64])
}

void .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = *($0)
	$9 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$5 = ($9 + [1])
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$7 = ($8 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $184(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $188($0)
	
.LABEL $label$1
	$2 = ($8 + ((int_32)$7 * (int_32)[40]))
	$9 = ($8 + ((int_32)$9 * (int_32)[40]))
	$8 = CALL $135($9, $1)
	$3 = ($8 + [40])
	$7 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$6 }
	$4 = ([0] - $7)
	$7 = ($1 + [-20])
	
.LOOP $label$7:
	*(($1 = ($8 + [-32]))) = (int_64)0
	*(($5 = ($8 + [-24]))) = [0]
	$6 = ($7 + [-12])
	*($1) = *($6)
	*(($8 + [-28])) = *(($7 + [-8]))
	*(($8 + [-40])) = *(($7 + [-20]))
	$1 = ($7 + [-4])
	*($5) = *($1)
	*($6) = (int_64)0
	*($1) = [0]
	*(($1 = ($8 + [-20]))) = (int_64)0
	*(($5 = ($8 + [-12]))) = [0]
	*($1) = *($7)
	*(($8 + [-16])) = *(($7 + [4]))
	$1 = ($7 + [8])
	*($5) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	*(($8 + [-8])) = *(($7 + [12]))
	$9 = ($9 + [-40])
	$8 = $9
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $4) != (int_32)[-20]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $7
	
.LABEL $label$5
	*($0) = $9
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$8 }
	$9 = ([0] - $1)
	$7 = ($7 + [-32])
	
.LOOP $label$9:
	$8 = *(($7 + [12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($7 + [16])) = $8
	CALL $185($8)
	
.LABEL $label$10
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$11 }
	*(($7 + [4])) = $8
	CALL $185($8)
	
.LABEL $label$11
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $9) != (int_32)[-32]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $185($1)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC _ZN5eosio10texas_game7chippotERNSt3__16vectorINS_11player_chipENS1_9allocatorIS3_EEEEy (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$20 = (*([0] + [4]) - [16])
	*([0] + [4]) = $20
	*($0 + [8]) = [0]
	*($0 + [4]) = [0]
	$16 = ($0 + [4])
	*($0) = $16
	$10 = *($2)
	$17 = *($2 + [4])
	if ( ((int_32)$17 == (int_32)$10) ){ goto $label$1 }
	$12 = ($2 + [4])
	$13 = [8]
	$14 = [1]
	$15 = [0]
	
.LOOP $label$3:
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$2 }
	$19 = ($10 + ($15 << [5]))
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 ([0] - (*($19 + [24]) & [1]))) << (int_64)56) >> (int_64)56)
	if ( (int_64)(*($19 + [8]) == 0) ){ goto $label$4 }
	*(($9 = ($20 + [8]))) = [0]
	*($20) = (int_64)0
	if ( ((uint_32)$15 >= (uint_32)int_32(($17 - $10) >> [5])) ){ goto $label$5 }
	$4 = *($19 + [8])
	$5 = *(($19 + [16]))
	$19 = [0]
	$17 = $13
	$18 = $14
	
.LOOP $label$6:
	$10 = ($10 + $17)
	$11 = *($10)
	*($10) = $4
	$10 = ($10 + [8])
	$6 = *($10)
	*($10) = $5
	$10 = (*($2) + $17)
	$7 = ($10 + [-8])
	if ( ((int_32)$19 == (int_32)*($9)) ){ goto $label$8 }
	*(($19 + [8])) = *($10)
	*(($19 + [24])) = *(($10 + [16]))
	*(($19 + [16])) = *(($10 + [8]))
	*($19) = *($7)
	*($20 + [4]) = ($19 + [32])
	goto $label$7 
	
.LABEL $label$8
	CALL $65($20, $7)
	
.LABEL $label$7
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [1216])
	$11 = (int_64)
	CALL eosio_assert(((int_64)$11($11 - $4)) > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [1296])
	*(($19 = (*($2) + $17))) = $11
	*(($19 + [8])) = $6
	$10 = *($2)
	if ( ((uint_32)$18 >= (uint_32)int_32((*($12) - $10) >> [5])) ){ goto $label$5 }
	$17 = ($17 + [32])
	$18 = ($18 + [1])
	$19 = *($20 + [4])
	goto $label$6 
	
.LABEL $label$5
	$10 = $16
	$19 = *($16)
	if ( $19 ){ goto $label$11 }
	$19 = $16
	$10 = $16
	$17 = *($10)
	if ( $17 ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	
.LOOP $label$14:
	$17 = *($19 + [16])
	if ( ((int_32)$15 >= (int_32)$17) ){ goto $label$16 }
	$10 = $19
	$17 = *($19)
	if ( $17 ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	if ( ((int_32)$17 >= (int_32)$15) ){ goto $label$12 }
	$10 = ($19 + [4])
	$17 = *($19 + [4])
	if ( ($17 == 0) ){ goto $label$12 }
	
.LABEL $label$15
	$19 = $17
	goto $label$14 
	
.LABEL $label$13
	$10 = $19
	
.LABEL $label$12
	$17 = *($10)
	if ( $17 ){ goto $label$9 }
	
.LABEL $label$10
	*(($17 = CALL $184([32])) + [20]) = [0]
	*($17 + [24]) = [0]
	*($17 + [28]) = [0]
	*($17) = (int_64)0
	*($17 + [8]) = $19
	*($17 + [16]) = $15
	*($10) = $17
	$19 = $17
	$18 = *(*($0))
	if ( ($18 == 0) ){ goto $label$17 }
	*($0) = $18
	$19 = *($10)
	
.LABEL $label$17
	CALL $164(*(($0 + [4])), $19)
	*(($19 = ($0 + [8]))) = (*($19) + [1])
	
.LABEL $label$9
	$19 = ($17 + [20])
	if ( ((int_32)$19 == (int_32)$20) ){ goto $label$18 }
	CALL $165($19, *($20), *($20 + [4]))
	
.LABEL $label$18
	$19 = *($20)
	if ( ($19 == 0) ){ goto $label$19 }
	*($20 + [4]) = $19
	CALL $185($19)
	
.LABEL $label$19
	$17 = *($12)
	$10 = *($2)
	
.LABEL $label$4
	$3 = ((int_64)$8 + (int_64)$3)
	$13 = ($13 + [32])
	$14 = ($14 + [1])
	$15 = ($15 + [1])
	if ( ($15 <= int_32(($17 - $10) >> [5])) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$19 = *($16)
	if ( ($19 == 0) ){ goto $label$23 }
	$10 = $16
	
.LOOP $label$25:
	$17 = *($19 + [16])
	if ( ((int_32)$15 >= (int_32)$17) ){ goto $label$27 }
	$10 = $19
	$17 = *($19)
	if ( $17 ){ goto $label$26 }
	goto $label$22 
	
.LABEL $label$27
	if ( ((int_32)$17 >= (int_32)$15) ){ goto $label$24 }
	$10 = ($19 + [4])
	$17 = *($19 + [4])
	if ( ($17 == 0) ){ goto $label$24 }
	
.LABEL $label$26
	$19 = $17
	goto $label$25 
	
.LABEL $label$24
	$16 = $19
	$19 = $10
	$17 = *($19)
	if ( $17 ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$23
	$19 = $16
	$17 = *($19)
	if ( $17 ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$22
	$16 = $19
	$17 = *($19)
	if ( $17 ){ goto $label$20 }
	
.LABEL $label$21
	*(($17 = CALL $184([32])) + [20]) = [0]
	*($17 + [24]) = [0]
	*($17 + [28]) = [0]
	*($17) = (int_64)0
	*($17 + [8]) = $16
	*($17 + [16]) = $15
	*($19) = $17
	$10 = $17
	$18 = *(*($0))
	if ( ($18 == 0) ){ goto $label$28 }
	*($0) = $18
	$10 = *($19)
	
.LABEL $label$28
	CALL $164(*(($0 + [4])), $10)
	*(($19 = ($0 + [8]))) = (*($19) + [1])
	
.LABEL $label$20
	$19 = ($17 + [20])
	if ( ((int_32)$19 == (int_32)$2) ){ goto $label$1 }
	CALL $165($19, *($2), *(($2 + [4])))
	
.LABEL $label$1
	*([0] + [4]) = ($20 + [16])
}

void .FUNC $147 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$8 = (*([0] + [4]) - [48])
	$14 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$5 = *(($3 + [8]))
	$10 = *(($3 + [4]))
	$4 = *($1)
	$9 = ($1 + [12])
	$12 = *($9)
	$13 = *($1 + [8])
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$1 }
	$11 = *(*(*($3)))
	
.LOOP $label$2:
	if ( ((int_64)$11 == (int_64)*($13)) ){ goto $label$1 }
	$13 = ($13 + [32])
	if ( ((int_32)$12 != (int_32)$13) ){ goto $label$2 }
	$13 = $12
	
.LABEL $label$1
	$11 = *($10)
	$7 = *($10 + [8])
	$6 = *($5)
	CALL eosio_assert(((int_64)$6 != (int_64)0), [1424])
	CALL eosio_assert([1], [1440])
	CALL eosio_assert(((int_64)$7 == (int_64)*(($13 + [16]))), [896])
	$11 = ((int_64)*($13 + [8]) + (int_64)((int_64)$11 / (int_64)$6))
	*($13 + [8]) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($13 + [8]) < (int_64)4611686018427387904), [976])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1008])
	$3 = *($1 + [8])
	$12 = *($9)
	$10 = ($12 - $3)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [5]))
	$13 = [36]
	
.LOOP $label$3:
	$13 = ($13 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$12) ){ goto $label$5 }
	$3 = (((int_32)uint_32(($10 + [-32]) >> [5]) * (int_32)[28]) + $13)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($13 + [-28])
	
.LABEL $label$4
	$12 = *(($1 + [20]))
	$13 = *(($1 + [24]))
	$10 = ($13 - $12)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [5]))
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$7 }
	$3 = ((((int_32)uint_32(($10 + [-32]) >> [5]) * (int_32)[25]) + $3) + [25])
	
.LABEL $label$7
	if ( ($3 <= [513]) ){ goto $label$9 }
	$9 = CALL malloc($3)
	goto $label$8 
	
.LABEL $label$9
	$9 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$8
	*($14 + [8]) = $9
	$5 = ($9 + $3)
	*($14 + [16]) = $5
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [656])
	CALL memcpy($9, $1, [8])
	$12 = ($9 + [8])
	*($14 + [12]) = $12
	$11 = (CASTING uint_64)(uint_32 int_32((*(($1 + [12])) - *(($1 + [8]))) >> [5]))
	$10 = ($9 + [9])
	
.LOOP $label$10:
	$13 = (CASTING uint_32)(uint_64 $11)
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	$8 = ((int_64)$11) != (int_64)0
	*($14 + [32]) = (($8) << [7]) | ($13 & [127]))
	CALL eosio_assert(((int_32)($5 - $12) > (int_32)[0]), [656])
	$13 = $10
	CALL memcpy(($13 + [-1]), ($14 + [32]), [1])
	*($14 + [12]) = $13
	$10 = ($13 + [1])
	$12 = $13
	if ( $8 ){ goto $label$10 }
	$10 = *(($1 + [12]))
	$12 = *(($1 + [8]))
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$11 }
	
.LOOP $label$12:
	*($14 + [24]) = ($14 + [8])
	*($14 + [32]) = $12
	*((($14 + [32]) + [8])) = ($12 + [24])
	*($14 + [36]) = ($12 + [8])
	CALL $66(($14 + [32]), ($14 + [24]))
	$12 = ($12 + [32])
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$12 }
	$13 = *($14 + [12])
	
.LABEL $label$11
	$11 = (CASTING uint_64)(uint_32 int_32((*(($1 + [24])) - *(($1 + [20]))) >> [5]))
	$8 = (($14 + [8]) + [8])
	
.LOOP $label$13:
	$12 = (CASTING uint_32)(uint_64 $11)
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	$10 = ((int_64)$11) != (int_64)0
	*($14 + [32]) = (($10) << [7]) | ($12 & [127]))
	CALL eosio_assert(((int_32)(*($8) - $13) > (int_32)[0]), [656])
	CALL memcpy(*($14 + [12]), ($14 + [32]), [1])
	$13 = (*($14 + [12]) + [1])
	*($14 + [12]) = $13
	if ( $10 ){ goto $label$13 }
	$12 = *(($1 + [24]))
	$13 = *(($1 + [20]))
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$14 }
	
.LOOP $label$15:
	*($14 + [24]) = ($14 + [8])
	*($14 + [32]) = $13
	*((($14 + [32]) + [8])) = ($13 + [24])
	*($14 + [36]) = ($13 + [8])
	CALL $67(($14 + [32]), ($14 + [24]))
	$13 = ($13 + [32])
	if ( ((int_32)$13 != (int_32)$12) ){ goto $label$15 }
	
.LABEL $label$14
	CALL db_update_i64(*($1 + [36]), $2, $9, $3)
	if ( ($3 <= [513]) ){ goto $label$16 }
	CALL free($9)
	
.LABEL $label$16
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$17 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	*([0] + [4]) = ($14 + [48])
}

void .FUNC _ZN5eosio10texas_game13compare_cardsERNSt3__16vectorINS0_12player_pokerENS1_9allocatorIS3_EEEE (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [96])
	*([0] + [4]) = $13
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = *($2)
	$4 = *($2 + [4])
	if ( ((int_32)($4 - $5) != (int_32)[40]) ){ goto $label$4 }
	CALL $122($0, $5)
	goto $label$3 
	
.LABEL $label$4
	*($13 + [80]) = [21]
	CALL $154($5, $4, ($13 + [80]))
	*($13 + [88]) = [0]
	*($13 + [80]) = (int_64)0
	*($13 + [76]) = [0]
	CALL $155(($13 + [80]), ($13 + [76]))
	$5 = *($2)
	$10 = ($2 + [4])
	if ( ((int_32)(*($10) - $5) == (int_32)[40]) ){ goto $label$5 }
	$11 = (($13 + [48]) + [8])
	$9 = [0]
	
.LOOP $label$6:
	$9 = ($9 + [1])
	$3 = ((int_32)$9 * (int_32)[40])
	$4 = ($5 + ((int_32)*($13 + [76]) * (int_32)[40]))
	if ( ((int_64)*($4 + [32]) != (int_64)*(($5 + $3) + [32])) ){ goto $label$5 }
	*($11) = [0]
	*($13 + [48]) = (int_64)0
	$12 = ($4 + [24])
	$5 = (*($12) - *($4 + [20]))
	$6 = int_32($5 >> [3])
	if ( ($6 == 0) ){ goto $label$7 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	$5 = CALL $184($5)
	*($11) = ($5 + ($6 << [3]))
	*($13 + [48]) = $5
	*($13 + [52]) = $5
	$6 = *(($4 + [20]))
	$4 = (*($12) - $6)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($5, $6, $4)
	*($13 + [52]) = (*($13 + [52]) + $4)
	
.LABEL $label$7
	CALL _ZN5eosio10texas_game9sortcardsENSt3__16vectorIyNS1_9allocatorIyEEEE(($13 + [64]), $13, ($13 + [48]))
	$5 = *($13 + [48])
	if ( ($5 == 0) ){ goto $label$8 }
	*($13 + [52]) = $5
	CALL $185($5)
	
.LABEL $label$8
	*(($12 = (($13 + [16]) + [8]))) = [0]
	*($13 + [16]) = (int_64)0
	$5 = (*($2) + $3)
	$3 = ($5 + [24])
	$4 = (*($3) - *($5 + [20]))
	$6 = int_32($4 >> [3])
	if ( ($6 == 0) ){ goto $label$9 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$1 }
	$4 = CALL $184($4)
	*($12) = ($4 + ($6 << [3]))
	*($13 + [16]) = $4
	*($13 + [20]) = $4
	$6 = *(($5 + [20]))
	$5 = (*($3) - $6)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($4, $6, $5)
	*($13 + [20]) = (*($13 + [20]) + $5)
	
.LABEL $label$9
	CALL _ZN5eosio10texas_game9sortcardsENSt3__16vectorIyNS1_9allocatorIyEEEE(($13 + [32]), $13, ($13 + [16]))
	$5 = *($13 + [16])
	if ( ($5 == 0) ){ goto $label$10 }
	*($13 + [20]) = $5
	CALL $185($5)
	
.LABEL $label$10
	$5 = *($13 + [64])
	$4 = *($13 + [68])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$13 }
	$3 = int_32(($4 - $5) >> [4])
	$6 = [0]
	$4 = *($13 + [32])
	
.LOOP $label$17:
	$8 = *($4)
	$7 = *($5)
	if ( (uint_64)($7 <= $8) ){ goto $label$16 }
	if ( ((int_64)$7 != (int_64)$8) ){ goto $label$15 }
	$4 = ($4 + [16])
	$5 = ($5 + [16])
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	*($13 + [76]) = $9
	$5 = *($13 + [80])
	*($13 + [84]) = $5
	if ( ((int_32)$5 == (int_32)*((($13 + [80]) + [8]))) ){ goto $label$18 }
	*($5) = $9
	*($13 + [84]) = ($5 + [4])
	if ( ((int_32)$6 == (int_32)[5]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$18
	CALL $155(($13 + [80]), ($13 + [76]))
	
.LABEL $label$15
	if ( ((int_32)$6 != (int_32)[5]) ){ goto $label$13 }
	
.LABEL $label$14
	*($13 + [12]) = $9
	$5 = *($13 + [84])
	if ( ((uint_32)$5 >= (uint_32)*((($13 + [80]) + [8]))) ){ goto $label$19 }
	*($5) = $9
	*($13 + [84]) = ($5 + [4])
	$5 = *($13 + [32])
	if ( $5 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$19
	CALL $157(($13 + [80]), ($13 + [12]))
	
.LABEL $label$13
	$5 = *($13 + [32])
	if ( ($5 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	*($13 + [36]) = $5
	CALL $185($5)
	
.LABEL $label$11
	$5 = *($13 + [64])
	if ( ($5 == 0) ){ goto $label$20 }
	*($13 + [68]) = $5
	CALL $185($5)
	
.LABEL $label$20
	$5 = *($2)
	if ( ($9 <= (((int_32)(*($10) - $5) / (int_32)[40]) + [-1])) ){ goto $label$6 }
	
.LABEL $label$5
	$3 = *($13 + [80])
	$12 = *($13 + [84])
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$21 }
	$4 = [0]
	$10 = ($0 + [8])
	$11 = ($0 + [4])
	$6 = [1]
	
.LOOP $label$22:
	$9 = ($5 + ((int_32)*(($3 + $4)) * (int_32)[40]))
	$5 = *($11)
	if ( ((int_32)$5 == (int_32)*($10)) ){ goto $label$24 }
	*($11) = ($5 + [8])
	*($5) = *($9)
	goto $label$23 
	
.LABEL $label$24
	CALL $122($0, $9)
	$3 = *($13 + [80])
	$12 = *($13 + [84])
	
.LABEL $label$23
	if ( ((uint_32)$6 >= (uint_32)int_32(($12 - $3) >> [2])) ){ goto $label$21 }
	$4 = ($4 + [4])
	$6 = ($6 + [1])
	$5 = *($2)
	goto $label$22 
	
.LABEL $label$21
	if ( ($3 == 0) ){ goto $label$3 }
	*($13 + [84]) = $3
	CALL $185($3)
	
.LABEL $label$3
	*([0] + [4]) = ($13 + [96])
	return (unreachable)
	
.LABEL $label$2
	CALL $188(($13 + [48]))
	
.LABEL $label$1
	CALL $188(($13 + [16]))
	(unreachable)
}

void .FUNC $141 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $184(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $188($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $185($6)
	
.LABEL $label$11
	CALL $185($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $185($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $140 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$5 = (*([0] + [4]) - [48])
	$11 = $5
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	*(($9 = ($1 + [12]))) = *($1 + [8])
	$3 = *($1)
	CALL eosio_assert([1], [1008])
	$4 = *($1 + [8])
	$6 = *($9)
	$7 = ($6 - $4)
	$10 = (CASTING uint_64)(uint_32 int_32($7 >> [5]))
	$9 = [33]
	
.LOOP $label$1:
	$9 = ($9 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$3 }
	$7 = (((int_32)uint_32(($7 + [-32]) >> [5]) * (int_32)[25]) + $9)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($9 + [-25])
	
.LABEL $label$2
	if ( ($7 <= [513]) ){ goto $label$5 }
	$8 = CALL malloc($7)
	goto $label$4 
	
.LABEL $label$5
	$8 = ($5 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$4
	*($11 + [8]) = $8
	$4 = ($8 + $7)
	*($11 + [16]) = $4
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [656])
	CALL memcpy($8, $1, [8])
	$9 = ($8 + [8])
	*($11 + [12]) = $9
	$10 = (CASTING uint_64)(uint_32 int_32((*(($1 + [12])) - *(($1 + [8]))) >> [5]))
	
.LOOP $label$6:
	$5 = (CASTING uint_32)(uint_64 $10)
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	$6 = ((int_64)$10) != (int_64)0
	*($11 + [32]) = (($6) << [7]) | ($5 & [127]))
	CALL eosio_assert(((int_32)($4 - $9) > (int_32)[0]), [656])
	CALL memcpy($9, ($11 + [32]), [1])
	$9 = ($9 + [1])
	*($11 + [12]) = $9
	if ( $6 ){ goto $label$6 }
	$5 = *(($1 + [12]))
	$9 = *(($1 + [8]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	*($11 + [24]) = ($11 + [8])
	*($11 + [32]) = $9
	*((($11 + [32]) + [8])) = ($9 + [24])
	*($11 + [36]) = ($9 + [8])
	CALL $67(($11 + [32]), ($11 + [24]))
	$9 = ($9 + [32])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$8 }
	
.LABEL $label$7
	CALL db_update_i64(*($1 + [24]), $2, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL free($8)
	
.LABEL $label$9
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($11 + [48])
}

void .FUNC $143 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$18 = (*([0] + [4]) - [32])
	*([0] + [4]) = $18
	
.LOOP $label$1:
	$4 = ($1 + [-64])
	$3 = ($1 + [-32])
	
.LOOP $label$2:
	$5 = $0
	
.LOOP $label$4:
	$0 = ($1 - $5)
	$17 = int_32($0 >> [5])
	if ( ((uint_32)$17 <= (uint_32)[5]) ){ goto $label$14 }
	if ( ((int_32)$0 <= (int_32)[991]) ){ goto $label$13 }
	$7 = ($5 + (((int_32)$17 / (int_32)[2]) << [5]))
	if ( ((int_32)$0 < (int_32)[31969]) ){ goto $label$21 }
	$0 = ($7 + $0)
	$0 = (((int_32)$17 / (int_32)[4]) << [5])
	$17 = ($5 + $0)
	$10 = CALL $166($5, $17, $7, $0, $2)
	if ( (CALL int_32 $3((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$15 }
	$11 = ($0 + [24])
	*(($8 = ($18 + [24]))) = *($11)
	$13 = ($0 + [16])
	*(($9 = ($18 + [16]))) = *($13)
	$14 = ($0 + [8])
	*(($12 = ($18 + [8]))) = *($14)
	*($18) = *($0)
	$15 = ($3 + [24])
	*($11) = *($15)
	$16 = ($3 + [16])
	*($13) = *($16)
	$6 = ($3 + [8])
	*($14) = *($6)
	*($0) = *($3)
	*($15) = *($8)
	*($16) = *($9)
	*($6) = *($12)
	*($3) = *($18)
	if ( (CALL int_32 $0((int_32 $7), (int_32 *($2))) == 0) ){ goto $label$20 }
	$15 = ($7 + [24])
	*($8) = *($15)
	$16 = ($7 + [16])
	*($9) = *($16)
	$6 = ($7 + [8])
	*($12) = *($6)
	*($18) = *($7)
	*($15) = *($11)
	*($16) = *($13)
	*($6) = *($14)
	*($7) = *($0)
	*($11) = *($8)
	*($13) = *($9)
	*($14) = *($12)
	*($0) = *($18)
	if ( (CALL int_32 $7((int_32 $17), (int_32 *($2))) == 0) ){ goto $label$17 }
	$0 = ($17 + [24])
	*($8) = *($0)
	$11 = ($17 + [16])
	*($9) = *($11)
	$13 = ($17 + [8])
	*($12) = *($13)
	*($18) = *($17)
	*($0) = *($15)
	*($11) = *($16)
	*($13) = *($6)
	*($17) = *($7)
	*($15) = *($8)
	*($16) = *($9)
	*($6) = *($12)
	*($7) = *($18)
	if ( (CALL int_32 $17((int_32 $5), (int_32 *($2))) == 0) ){ goto $label$16 }
	$14 = ($5 + [24])
	*($8) = *($14)
	$15 = ($5 + [16])
	*($9) = *($15)
	$16 = ($5 + [8])
	*($12) = *($16)
	*($18) = *($5)
	*($14) = *($0)
	*($15) = *($11)
	*($16) = *($13)
	*($5) = *($17)
	*($0) = *($8)
	*($11) = *($9)
	*($13) = *($12)
	*($17) = *($18)
	$10 = ($10 + [4])
	goto $label$15 
	
.LABEL $label$21
	$0 = CALL int_32 $7((int_32 $5), (int_32 *($2)))
	$17 = CALL int_32 $3((int_32 $7), (int_32 *($2)))
	if ( ($0 == 0) ){ goto $label$22 }
	$10 = ($5 + [24])
	*(($0 = ($18 + [24]))) = *($10)
	$12 = ($5 + [16])
	*(($8 = ($18 + [16]))) = *($12)
	$11 = ($5 + [8])
	*(($9 = ($18 + [8]))) = *($11)
	*($18) = *($5)
	if ( ($17 == 0) ){ goto $label$19 }
	*($5) = *($3)
	$17 = ($3 + [24])
	*($10) = *($17)
	$10 = ($3 + [16])
	*($12) = *($10)
	$12 = ($3 + [8])
	*($11) = *($12)
	*($17) = *($0)
	*($3) = *($18)
	*($10) = *($8)
	*($12) = *($9)
	$10 = [1]
	goto $label$15 
	
.LABEL $label$22
	$10 = [0]
	if ( ($17 == 0) ){ goto $label$15 }
	$17 = ($7 + [24])
	*(($0 = ($18 + [24]))) = *($17)
	$9 = ($7 + [16])
	*(($8 = ($18 + [16]))) = *($9)
	$11 = ($7 + [8])
	*(($12 = ($18 + [8]))) = *($11)
	*($18) = *($7)
	$10 = ($3 + [24])
	*($17) = *($10)
	$13 = ($3 + [16])
	*($9) = *($13)
	$14 = ($3 + [8])
	*($11) = *($14)
	*($7) = *($3)
	*($10) = *($0)
	*($13) = *($8)
	*($14) = *($12)
	*($3) = *($18)
	$10 = [1]
	if ( (CALL int_32 $7((int_32 $5), (int_32 *($2))) == 0) ){ goto $label$15 }
	$10 = ($5 + [24])
	*($0) = *($10)
	$13 = ($5 + [16])
	*($8) = *($13)
	$14 = ($5 + [8])
	*($12) = *($14)
	*($18) = *($5)
	*($10) = *($17)
	*($13) = *($9)
	*($14) = *($11)
	*($5) = *($7)
	*($17) = *($0)
	*($9) = *($8)
	*($11) = *($12)
	*($7) = *($18)
	goto $label$18 
	
.LABEL $label$20
	$10 = ($10 + [1])
	goto $label$15 
	
.LABEL $label$19
	*($5) = *($7)
	$17 = ($7 + [24])
	*($10) = *($17)
	$13 = ($7 + [16])
	*($12) = *($13)
	$12 = ($7 + [8])
	*($11) = *($12)
	*($17) = *($0)
	*($7) = *($18)
	*($13) = *($8)
	*($12) = *($9)
	$10 = [1]
	if ( (CALL int_32 $3((int_32 $7), (int_32 *($2))) == 0) ){ goto $label$15 }
	*($0) = *($17)
	*($8) = *($13)
	*($9) = *($12)
	*($18) = *($7)
	$10 = ($3 + [24])
	*($17) = *($10)
	$17 = ($3 + [16])
	*($13) = *($17)
	$11 = ($3 + [8])
	*($12) = *($11)
	*($7) = *($3)
	*($10) = *($0)
	*($17) = *($8)
	*($11) = *($9)
	*($3) = *($18)
	
.LABEL $label$18
	$10 = [2]
	goto $label$15 
	
.LABEL $label$17
	$10 = ($10 + [2])
	goto $label$15 
	
.LABEL $label$16
	$10 = ($10 + [3])
	
.LABEL $label$15
	if ( CALL int_32 $5((int_32 $7), (int_32 *($2))) ){ goto $label$23 }
	$0 = $4
	
.LOOP $label$25:
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$24 }
	$17 = CALL int_32 $0((int_32 $7), (int_32 *($2)))
	$0 = ($0 + [-32])
	if ( ($17 == 0) ){ goto $label$25 }
	$17 = ($5 + [24])
	*(($8 = ($18 + [24]))) = *($17)
	$12 = ($5 + [16])
	*(($9 = ($18 + [16]))) = *($12)
	$13 = ($5 + [8])
	*(($11 = ($18 + [8]))) = *($13)
	*($18) = *($5)
	$14 = ($0 + [56])
	*($17) = *($14)
	$15 = ($0 + [48])
	*($12) = *($15)
	$12 = ($0 + [40])
	*($13) = *($12)
	$17 = ($0 + [32])
	*($5) = *($17)
	*($15) = *($9)
	*($17) = *($18)
	*($14) = *($8)
	*($12) = *($11)
	$10 = ($10 + [1])
	goto $label$7 
	
.LABEL $label$24
	$0 = ($5 + [32])
	if ( CALL int_32 $5((int_32 $3), (int_32 *($2))) ){ goto $label$26 }
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$6 }
	$0 = ($5 + [64])
	
.LOOP $label$28:
	$17 = ($0 + [-32])
	if ( CALL int_32 $5((int_32 $17), (int_32 *($2))) ){ goto $label$27 }
	$0 = ($0 + [32])
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$28 }
	goto $label$6 
	
.LABEL $label$27
	$8 = ($0 + [-8])
	*(($7 = ($18 + [24]))) = *($8)
	$9 = ($0 + [-16])
	*(($10 = ($18 + [16]))) = *($9)
	$11 = ($0 + [-24])
	*(($12 = ($18 + [8]))) = *($11)
	*($18) = *($17)
	$13 = ($3 + [16])
	*($9) = *($13)
	$9 = ($3 + [8])
	*($11) = *($9)
	$11 = ($3 + [24])
	*($8) = *($11)
	*($17) = *($3)
	*($13) = *($10)
	*($11) = *($7)
	*($9) = *($12)
	*($3) = *($18)
	
.LABEL $label$26
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$6 }
	$17 = $3
	
.LOOP $label$29:
	$7 = CALL int_32 $5((int_32 $0), (int_32 *($2)))
	$0 = ($0 + [32])
	if ( ($7 == 0) ){ goto $label$29 }
	$7 = ($0 + [-32])
	
.LOOP $label$30:
	$17 = ($17 + [-32])
	if ( CALL int_32 $5((int_32 $17), (int_32 *($2))) ){ goto $label$30 }
	if ( ((uint_32)$7 >= (uint_32)$17) ){ goto $label$5 }
	$8 = ($0 + [-8])
	*(($7 = ($18 + [24]))) = *($8)
	$9 = ($0 + [-16])
	*(($10 = ($18 + [16]))) = *($9)
	$11 = ($0 + [-24])
	*(($12 = ($18 + [8]))) = *($11)
	$13 = ($0 + [-32])
	*($18) = *($13)
	$14 = ($17 + [16])
	*($9) = *($14)
	$9 = ($17 + [8])
	*($11) = *($9)
	$11 = ($17 + [24])
	*($8) = *($11)
	*($13) = *($17)
	*($14) = *($10)
	*($11) = *($7)
	*($9) = *($12)
	*($17) = *($18)
	goto $label$29 
	
.LABEL $label$23
	$17 = $3
	goto $label$7 
	
.LABEL $label$14
	goto $label$6 
	
.LABEL $label$31
	if ( (CALL int_32 $3((int_32 $5), (int_32 *($2))) == 0) ){ goto $label$6 }
	$0 = ($5 + [24])
	*(($2 = ($18 + [24]))) = *($0)
	$7 = ($5 + [16])
	*(($17 = ($18 + [16]))) = *($7)
	$10 = ($5 + [8])
	*(($8 = ($18 + [8]))) = *($10)
	*($18) = *($5)
	$9 = ($3 + [24])
	*($0) = *($9)
	$0 = ($3 + [16])
	*($7) = *($0)
	$7 = ($3 + [8])
	*($10) = *($7)
	*($5) = *($3)
	*($9) = *($2)
	*($0) = *($17)
	*($7) = *($8)
	*($3) = *($18)
	goto $label$6 
	
.LABEL $label$13
	$17 = ($5 + [32])
	$7 = CALL int_32 $17((int_32 $5), (int_32 *($2)))
	$0 = ($5 + [64])
	$8 = CALL int_32 $0((int_32 $17), (int_32 *($2)))
	if ( ($7 == 0) ){ goto $label$34 }
	$10 = ($5 + [24])
	*(($7 = ($18 + [24]))) = *($10)
	$12 = ($5 + [16])
	*(($9 = ($18 + [16]))) = *($12)
	$13 = ($5 + [8])
	*(($11 = ($18 + [8]))) = *($13)
	*($18) = *($5)
	if ( ($8 == 0) ){ goto $label$33 }
	*($5) = *($0)
	$17 = ($0 + [24])
	*($10) = *($17)
	$8 = ($0 + [16])
	*($12) = *($8)
	$10 = ($0 + [8])
	*($13) = *($10)
	*($17) = *($7)
	*($8) = *($9)
	*($10) = *($11)
	*($0) = *($18)
	goto $label$32 
	
.LABEL $label$34
	if ( ($8 == 0) ){ goto $label$32 }
	$8 = ($17 + [24])
	*(($7 = ($18 + [24]))) = *($8)
	$9 = ($17 + [16])
	*(($10 = ($18 + [16]))) = *($9)
	$11 = ($17 + [8])
	*(($12 = ($18 + [8]))) = *($11)
	*($18) = *($17)
	$13 = ($0 + [24])
	*($8) = *($13)
	$14 = ($0 + [16])
	*($9) = *($14)
	$15 = ($0 + [8])
	*($11) = *($15)
	*($17) = *($0)
	*($13) = *($7)
	*($14) = *($10)
	*($15) = *($12)
	*($0) = *($18)
	if ( (CALL int_32 $17((int_32 $5), (int_32 *($2))) == 0) ){ goto $label$32 }
	$13 = ($5 + [24])
	*($7) = *($13)
	$14 = ($5 + [16])
	*($10) = *($14)
	$15 = ($5 + [8])
	*($12) = *($15)
	*($18) = *($5)
	*($13) = *($8)
	*($14) = *($9)
	*($15) = *($11)
	*($5) = *($17)
	*($8) = *($7)
	*($9) = *($10)
	*($11) = *($12)
	*($17) = *($18)
	goto $label$32 
	
.LABEL $label$33
	*($5) = *($17)
	$8 = ($17 + [24])
	*($10) = *($8)
	$10 = ($17 + [16])
	*($12) = *($10)
	$12 = ($17 + [8])
	*($13) = *($12)
	*($8) = *($7)
	*($10) = *($9)
	*($12) = *($11)
	*($17) = *($18)
	if ( (CALL int_32 $0((int_32 $17), (int_32 *($2))) == 0) ){ goto $label$32 }
	$8 = ($17 + [24])
	*(($7 = ($18 + [24]))) = *($8)
	$9 = ($17 + [16])
	*(($10 = ($18 + [16]))) = *($9)
	$11 = ($17 + [8])
	*(($12 = ($18 + [8]))) = *($11)
	*($18) = *($17)
	$13 = ($0 + [24])
	*($8) = *($13)
	$8 = ($0 + [16])
	*($9) = *($8)
	$9 = ($0 + [8])
	*($11) = *($9)
	*($17) = *($0)
	*($13) = *($7)
	*($8) = *($10)
	*($9) = *($12)
	*($0) = *($18)
	
.LABEL $label$32
	$17 = ($5 + [96])
	if ( ((int_32)$17 == (int_32)$1) ){ goto $label$6 }
	$11 = [0]
	
.LOOP $label$35:
	$12 = $17
	if ( (CALL int_32 $12((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$36 }
	*(($13 = ($18 + [24]))) = *(($12 + [24]))
	*(($14 = ($18 + [16]))) = *(($12 + [16]))
	*(($15 = ($18 + [8]))) = *(($12 + [8]))
	*($18) = *($12)
	$17 = $11
	
.LOOP $label$38:
	$7 = ($0 + [88])
	*((($0 = ($5 + $17)) + [120])) = *($7)
	$8 = ($0 + [80])
	*(($0 + [112])) = *($8)
	$10 = ($0 + [72])
	*(($0 + [104])) = *($10)
	$9 = ($0 + [64])
	*(($0 + [96])) = *($9)
	if ( ((int_32)$17 == (int_32)[-64]) ){ goto $label$37 }
	$17 = ($17 + [-32])
	if ( CALL int_32 $18((int_32 ($0 + [32])), (int_32 *($2))) ){ goto $label$38 }
	
.LABEL $label$37
	*($7) = *($13)
	*($8) = *($14)
	*($10) = *($15)
	*($9) = *($18)
	
.LABEL $label$36
	$11 = ($11 + [32])
	$0 = $12
	$17 = ($12 + [32])
	if ( ((int_32)$17 != (int_32)$1) ){ goto $label$35 }
	goto $label$6 
	
.LABEL $label$12
	$0 = ($5 + [32])
	$17 = CALL int_32 $0((int_32 $5), (int_32 *($2)))
	$7 = CALL int_32 $3((int_32 $0), (int_32 *($2)))
	if ( ($17 == 0) ){ goto $label$9 }
	$8 = ($5 + [24])
	*(($17 = ($18 + [24]))) = *($8)
	$9 = ($5 + [16])
	*(($10 = ($18 + [16]))) = *($9)
	$11 = ($5 + [8])
	*(($12 = ($18 + [8]))) = *($11)
	*($18) = *($5)
	if ( ($7 == 0) ){ goto $label$8 }
	*($5) = *($3)
	$2 = ($3 + [24])
	*($8) = *($2)
	$0 = ($3 + [16])
	*($9) = *($0)
	$5 = ($3 + [8])
	*($11) = *($5)
	*($2) = *($17)
	*($3) = *($18)
	*($0) = *($10)
	*($5) = *($12)
	goto $label$6 
	
.LABEL $label$11
	CALL $166($5, ($5 + [32]), ($5 + [64]), $3, $2)
	goto $label$6 
	
.LABEL $label$10
	$0 = ($5 + [96])
	$17 = ($5 + [64])
	$7 = ($5 + [32])
	CALL $166($5, $7, $17, $0, $2)
	if ( (CALL int_32 $3((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$6 }
	$10 = ($0 + [24])
	*(($8 = ($18 + [24]))) = *($10)
	$12 = ($0 + [16])
	*(($9 = ($18 + [16]))) = *($12)
	$13 = ($0 + [8])
	*(($11 = ($18 + [8]))) = *($13)
	*($18) = *($0)
	$14 = ($3 + [24])
	*($10) = *($14)
	$15 = ($3 + [16])
	*($12) = *($15)
	$16 = ($3 + [8])
	*($13) = *($16)
	*($0) = *($3)
	*($15) = *($9)
	*($16) = *($11)
	*($3) = *($18)
	*($14) = *($8)
	if ( (CALL int_32 $0((int_32 $17), (int_32 *($2))) == 0) ){ goto $label$6 }
	$14 = ($17 + [24])
	*($8) = *($14)
	$15 = ($17 + [16])
	*($9) = *($15)
	$16 = ($17 + [8])
	*($11) = *($16)
	*($18) = *($17)
	*($14) = *($10)
	*($15) = *($12)
	*($16) = *($13)
	*($17) = *($0)
	*($10) = *($8)
	*($12) = *($9)
	*($13) = *($11)
	*($0) = *($18)
	if ( (CALL int_32 $17((int_32 $7), (int_32 *($2))) == 0) ){ goto $label$6 }
	$8 = ($7 + [24])
	*(($0 = ($18 + [24]))) = *($8)
	$9 = ($7 + [16])
	*(($10 = ($18 + [16]))) = *($9)
	$11 = ($7 + [8])
	*(($12 = ($18 + [8]))) = *($11)
	*($18) = *($7)
	$13 = ($17 + [24])
	*($8) = *($13)
	$14 = ($17 + [16])
	*($9) = *($14)
	$15 = ($17 + [8])
	*($11) = *($15)
	*($7) = *($17)
	*($13) = *($0)
	*($14) = *($10)
	*($15) = *($12)
	*($17) = *($18)
	if ( (CALL int_32 $7((int_32 $5), (int_32 *($2))) == 0) ){ goto $label$6 }
	$2 = ($5 + [24])
	*($0) = *($2)
	$17 = ($5 + [16])
	*($10) = *($17)
	$13 = ($5 + [8])
	*($12) = *($13)
	*($18) = *($5)
	*($2) = *($8)
	*($17) = *($9)
	*($13) = *($11)
	*($5) = *($7)
	*($8) = *($0)
	*($9) = *($10)
	*($11) = *($12)
	*($7) = *($18)
	goto $label$6 
	
.LABEL $label$9
	if ( ($7 == 0) ){ goto $label$6 }
	$7 = ($0 + [24])
	*(($17 = ($18 + [24]))) = *($7)
	$10 = ($0 + [16])
	*(($8 = ($18 + [16]))) = *($10)
	$12 = ($0 + [8])
	*(($9 = ($18 + [8]))) = *($12)
	*($18) = *($0)
	$11 = ($3 + [24])
	*($7) = *($11)
	$13 = ($3 + [16])
	*($10) = *($13)
	$14 = ($3 + [8])
	*($12) = *($14)
	*($0) = *($3)
	*($13) = *($8)
	*($14) = *($9)
	*($3) = *($18)
	*($11) = *($17)
	if ( (CALL int_32 $0((int_32 $5), (int_32 *($2))) == 0) ){ goto $label$6 }
	$2 = ($5 + [24])
	*($17) = *($2)
	$11 = ($5 + [16])
	*($8) = *($11)
	$13 = ($5 + [8])
	*($9) = *($13)
	*($18) = *($5)
	*($2) = *($7)
	*($11) = *($10)
	*($13) = *($12)
	*($5) = *($0)
	*($7) = *($17)
	*($10) = *($8)
	*($12) = *($9)
	*($0) = *($18)
	goto $label$6 
	
.LABEL $label$8
	*($5) = *($0)
	$5 = ($0 + [24])
	*($8) = *($5)
	$7 = ($0 + [16])
	*($9) = *($7)
	$8 = ($0 + [8])
	*($11) = *($8)
	*($5) = *($17)
	*($7) = *($10)
	*($8) = *($12)
	*($0) = *($18)
	if ( (CALL int_32 $3((int_32 $0), (int_32 *($2))) == 0) ){ goto $label$6 }
	$17 = ($0 + [24])
	*(($2 = ($18 + [24]))) = *($17)
	$7 = ($0 + [16])
	*(($5 = ($18 + [16]))) = *($7)
	$10 = ($0 + [8])
	*(($8 = ($18 + [8]))) = *($10)
	*($18) = *($0)
	$9 = ($3 + [24])
	*($17) = *($9)
	$17 = ($3 + [16])
	*($7) = *($17)
	$7 = ($3 + [8])
	*($10) = *($7)
	*($0) = *($3)
	*($17) = *($5)
	*($7) = *($8)
	*($3) = *($18)
	*($9) = *($2)
	goto $label$6 
	
.LABEL $label$7
	$8 = ($5 + [32])
	if ( ((uint_32)$8 >= (uint_32)$17) ){ goto $label$39 }
	
.LOOP $label$40:
	$0 = ($8 + [-32])
	
.LOOP $label$41:
	$0 = ($0 + [32])
	if ( CALL int_32 $0((int_32 $7), (int_32 *($2))) ){ goto $label$41 }
	$8 = ($0 + [32])
	
.LOOP $label$42:
	$17 = ($17 + [-32])
	if ( (CALL int_32 $17((int_32 $7), (int_32 *($2))) == 0) ){ goto $label$42 }
	if ( ((uint_32)$0 > (uint_32)$17) ){ goto $label$43 }
	$12 = ($0 + [24])
	*(($9 = ($18 + [24]))) = *($12)
	$13 = ($0 + [16])
	*(($11 = ($18 + [16]))) = *($13)
	$15 = ($0 + [8])
	*(($14 = ($18 + [8]))) = *($15)
	*($18) = *($0)
	$16 = ($17 + [24])
	*($12) = *($16)
	$12 = ($17 + [16])
	*($13) = *($12)
	$13 = ($17 + [8])
	*($15) = *($13)
	*($0) = *($17)
	*($16) = *($9)
	*($12) = *($11)
	*($13) = *($14)
	*($17) = *($18)
	$7 = ( $17 ? $7 : ((int_32)$7 == (int_32)$0) )
	$10 = ($10 + [1])
	goto $label$40 
	
.LABEL $label$43
	$8 = $0
	
.LABEL $label$39
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$44 }
	if ( (CALL int_32 $7((int_32 $8), (int_32 *($2))) == 0) ){ goto $label$44 }
	$17 = ($8 + [24])
	*(($0 = ($18 + [24]))) = *($17)
	$12 = ($8 + [16])
	*(($9 = ($18 + [16]))) = *($12)
	$13 = ($8 + [8])
	*(($11 = ($18 + [8]))) = *($13)
	*($18) = *($8)
	$14 = ($7 + [24])
	*($17) = *($14)
	$17 = ($7 + [16])
	*($12) = *($17)
	$12 = ($7 + [8])
	*($13) = *($12)
	*($8) = *($7)
	*($14) = *($0)
	*($17) = *($9)
	*($12) = *($11)
	*($7) = *($18)
	$10 = ($10 + [1])
	
.LABEL $label$44
	if ( $10 ){ goto $label$46 }
	$17 = CALL $167($5, $8, $2)
	$0 = ($8 + [32])
	if ( CALL $167($0, $1, $2) ){ goto $label$45 }
	if ( $17 ){ goto $label$2 }
	
.LABEL $label$46
	if ( ((int_32)($8 - $5) >= (int_32)($1 - $8)) ){ goto $label$3 }
	CALL $143($5, $8, $2)
	$5 = ($8 + [32])
	goto $label$4 
	
.LABEL $label$45
	$1 = $8
	$0 = $5
	if ( ($17 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	*([0] + [4]) = ($18 + [32])
	return 
	
.LABEL $label$5
	$5 = $7
	goto $label$4 
	
.LABEL $label$3
	CALL $143(($8 + [32]), $1, $2)
	$1 = $8
	$0 = $5
	goto $label$1 
	$17
}

int_32 .FUNC _ZN5eosio4cmp1ERKNS_11player_chipES2_ (int_32 $0, int_32 $1)
{
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)*(($1 + [16]))), [1120])
	return ((int_64)*($0 + [8]) < (int_64)*($1 + [8]))
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [608])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [608])
	CALL memcpy(($5 + [15]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($0) = ((int_32)*($5 + [15]) != (int_32)[0])
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $8) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$2 = *($0)
	$3 = int_32(($8 - $2) >> [5])
	$8 = ($3 + $1)
	if ( ((uint_32)$8 >= (uint_32)[134217728]) ){ goto $label$4 }
	$6 = [134217727]
	$7 = ($7 - $2)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$6 = int_32($7 >> [4])
	$6 = ( $8 ? $6 : ($6 <= $8) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$7 = CALL $184(($6 << [5]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*(($6 = ($8 + [16]))) = (int_64)0
	*($8) = (int_64)0
	*(($8 + [8])) = (int_64)0
	*(($8 + [24])) = (int_64)0
	*($6) = (int_64)344826856192
	CALL eosio_assert([1], [512])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$10:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	CALL eosio_assert($7, [576])
	*($8 + [24]) = [0]
	$8 = (*($0) + [32])
	*($0) = $8
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $188($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$2 = ($7 + ($6 << [5]))
	$3 = ($7 + ($3 << [5]))
	$8 = $3
	
.LOOP $label$13:
	*(($6 = ($8 + [16]))) = (int_64)0
	*($8) = (int_64)0
	*(($8 + [8])) = (int_64)0
	*(($8 + [24])) = (int_64)0
	*($6) = (int_64)344826856192
	CALL eosio_assert([1], [512])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$15:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	
.LOOP $label$17:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$17 }
	
.LABEL $label$16
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	CALL eosio_assert($7, [576])
	*($8 + [24]) = [0]
	$8 = ($8 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$13 }
	$6 = *($0)
	$4 = ($0 + [4])
	$7 = (*($4) - $6)
	$1 = ($3 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$18 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$18
	*($0) = $1
	*($4) = $8
	*(($0 + [8])) = $2
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $185($6)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $184(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $188($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [20])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [24])) = $6
	CALL $185($6)
	
.LABEL $label$11
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$12 }
	*(($1 + [12])) = $6
	CALL $185($6)
	
.LABEL $label$12
	CALL $185($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL $185($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $8) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$2 = *($0)
	$3 = int_32(($8 - $2) >> [5])
	$8 = ($3 + $1)
	if ( ((uint_32)$8 >= (uint_32)[134217728]) ){ goto $label$4 }
	$6 = [134217727]
	$7 = ($7 - $2)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$6 = int_32($7 >> [4])
	$6 = ( $8 ? $6 : ($6 <= $8) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$7 = CALL $184(($6 << [5]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*(($6 = ($8 + [16]))) = (int_64)0
	*($8) = (int_64)0
	*(($8 + [8])) = (int_64)0
	*(($8 + [24])) = (int_64)0
	*($6) = (int_64)344826856192
	CALL eosio_assert([1], [512])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$10:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	CALL eosio_assert($7, [576])
	*($8 + [24]) = [0]
	$8 = (*($0) + [32])
	*($0) = $8
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $188($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$2 = ($7 + ($6 << [5]))
	$3 = ($7 + ($3 << [5]))
	$8 = $3
	
.LOOP $label$13:
	*(($6 = ($8 + [16]))) = (int_64)0
	*($8) = (int_64)0
	*(($8 + [8])) = (int_64)0
	*(($8 + [24])) = (int_64)0
	*($6) = (int_64)344826856192
	CALL eosio_assert([1], [512])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$15:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	
.LOOP $label$17:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$17 }
	
.LABEL $label$16
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	CALL eosio_assert($7, [576])
	*($8 + [24]) = [0]
	$8 = ($8 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$13 }
	$6 = *($0)
	$4 = ($0 + [4])
	$7 = (*($4) - $6)
	$1 = ($3 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$18 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$18
	*($0) = $1
	*($4) = $8
	*(($0 + [8])) = $2
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $185($6)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $184(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $188($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $185($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $185($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $78($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $187($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $184($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $187($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $185($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $186($7)
	return (unreachable)
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [608])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [608])
	CALL memcpy($0, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [480])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $184([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [608])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [608])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [608])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $76(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $185($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1200])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $46($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [608])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [304])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [352])
	$3 = *($0 + [24])
	$4 = ($0 + [28])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$5 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$8 = ($6 + [-24])
	$6 = $8
	if ( ((int_32)($8 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [416])
	$8 = ($7 + [-24])
	$6 = *($4)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	$3 = ([0] - $6)
	$6 = $8
	
.LOOP $label$5:
	$8 = ($6 + [24])
	$5 = *($8)
	*($8) = [0]
	$7 = *($6)
	*($6) = $5
	if ( ($7 == 0) ){ goto $label$6 }
	$5 = *($7 + [20])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($7 + [24])) = $5
	CALL $185($5)
	
.LABEL $label$7
	$5 = *($7 + [8])
	if ( ($5 == 0) ){ goto $label$8 }
	*(($7 + [12])) = $5
	CALL $185($5)
	
.LABEL $label$8
	CALL $185($7)
	
.LABEL $label$6
	*(($6 + [16])) = *(($6 + [40]))
	*(($6 + [8])) = *(($6 + [32]))
	$6 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	$5 = *($6 + [20])
	if ( ($5 == 0) ){ goto $label$11 }
	*(($6 + [24])) = $5
	CALL $185($5)
	
.LABEL $label$11
	$5 = *($6 + [8])
	if ( ($5 == 0) ){ goto $label$12 }
	*(($6 + [12])) = $5
	CALL $185($5)
	
.LABEL $label$12
	CALL $185($6)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$8 = ($4 + [64])
	$7 = *($8)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$5 = ($4 + [48])
	$6 = CALL db_lowerbound_i64(*($5), *(($4 + [56])), (int_64)-3838636613264998400, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $81($5, $6)
	*($9 + [28]) = [0]
	*($9 + [24]) = $5
	$7 = *(*(CALL $80(($9 + [24])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [64])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [1536])
	*($1) = *($8)
	*($1 + [8]) = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *(*($3 + [4]))) * (float_64)(float_64)0.00117))
	*(($4 = ($1 + [24]))) = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(int_64 *(*($3 + [4]))) * (float_64)(float_64)0.00117) + (float_64)(CASTING float_64)(int_64 *(*($3 + [8])))))
	$10 = $10
	$3 = ($10 + [-112])
	*([0] + [4]) = $3
	*($9 + [12]) = $3
	*($9 + [8]) = $3
	*($9 + [16]) = ($10 + [-8])
	CALL eosio_assert([1], [656])
	CALL memcpy(*($9 + [12]), $1, [8])
	*($9 + [12]) = (*($9 + [12]) + [8])
	*($9 + [40]) = ($9 + [8])
	*($9 + [28]) = $4
	*($9 + [24]) = ($1 + [8])
	*($9 + [32]) = ($1 + [40])
	CALL $83(($9 + [24]), ($9 + [40]))
	*($9 + [40]) = ($9 + [8])
	*($9 + [28]) = ($1 + [64])
	*($9 + [24]) = ($1 + [48])
	*($9 + [32]) = ($1 + [80])
	*($9 + [36]) = ($1 + [96])
	CALL $84(($9 + [24]), ($9 + [40]))
	$7 = *($1)
	*($1 + [108]) = CALL db_store_i64(*($2 + [8]), (int_64)-3838636613264998400, *(*($0 + [8])), $7, $3, [104])
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $184(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $188($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $185($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $185($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN5eosio10texas_game7promoteEv (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	$1 = ($0 + [48])
	$4 = (CASTING uint_64)(uint_32 $1)
	*($7 + [32]) = $4
	*($7 + [48]) = (Rounds 0)(((float_64)((float_64)CALL pow((float_64)0.9830038632051824, (CASTING float_64)(uint_64 *(*(CALL $80(($7 + [32])) + [4])))) * (float_64)(float_64)330950) * (float_64)CALL pow((float_64)10, (float_64)4)))
	*($7 + [32]) = $4
	$5 = *(CALL $80(($7 + [32])) + [4])
	*(($7 + [40])) = *(($5 + [32]))
	*($7 + [32]) = *(($5 + [24]))
	*($7 + [64]) = (int_64)-3838636544615976944
	$4 = (int_64)4411461
	CALL $101(($7 + [16]), ($7 + [64]), *($0), (int_64)4411461)
	$2 = (Rounds 0)(((float_64)CALL pow((float_64)10, (float_64)4) * (float_64)(float_64)71665))
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [512])
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [576])
	CALL eosio_assert(((int_64)*($7 + [24]) == (int_64)1129334020), [1120])
	$4 = *($0)
	if ( ((int_64)*($7 + [16]) <= (int_64)$2) ){ goto $label$11 }
	*($7 + [4]) = ($7 + [48])
	*($7 + [8]) = ($7 + [32])
	*($7) = $0
	*($7 + [88]) = $4
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$3()), [672])
	*($7 + [64]) = $1
	*($7 + [68]) = $7
	*($7 + [72]) = ($7 + [88])
	$5 = CALL $184([120])
	CALL $96(($5 + [8]))
	CALL $97(($5 + [48]))
	*($5 + [104]) = $1
	CALL $105(($7 + [64]), $5)
	*($7 + [80]) = $5
	$4 = *($5)
	*($7 + [64]) = $4
	$1 = *($5 + [108])
	*($7 + [60]) = $1
	$3 = ($0 + [76])
	$6 = *($3)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [80]))) ){ goto $label$10 }
	*($6 + [8]) = $4
	*($6 + [16]) = $1
	*($7 + [80]) = [0]
	*($6) = $5
	*($3) = ($6 + [24])
	goto $label$9 
	
.LABEL $label$11
	*($7 + [4]) = ($7 + [16])
	*($7 + [8]) = ($7 + [32])
	*($7) = $0
	*($7 + [88]) = $4
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$3()), [672])
	*($7 + [64]) = $1
	*($7 + [68]) = $7
	*($7 + [72]) = ($7 + [88])
	$5 = CALL $184([120])
	CALL $96(($5 + [8]))
	CALL $97(($5 + [48]))
	*($5 + [104]) = $1
	CALL $106(($7 + [64]), $5)
	*($7 + [80]) = $5
	$4 = *($5)
	*($7 + [64]) = $4
	$1 = *($5 + [108])
	*($7 + [60]) = $1
	$3 = ($0 + [76])
	$6 = *($3)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [80]))) ){ goto $label$8 }
	*($6 + [8]) = $4
	*($6 + [16]) = $1
	*($7 + [80]) = [0]
	*($6) = $5
	*($3) = ($6 + [24])
	goto $label$7 
	
.LABEL $label$10
	CALL $99(($0 + [72]), ($7 + [80]), ($7 + [64]), ($7 + [60]))
	
.LABEL $label$9
	$5 = *($7 + [80])
	*($7 + [80]) = [0]
	if ( ($5 == 0) ){ goto $label$6 }
	CALL $185($5)
	goto $label$6 
	
.LABEL $label$8
	CALL $99(($0 + [72]), ($7 + [80]), ($7 + [64]), ($7 + [60]))
	
.LABEL $label$7
	$5 = *($7 + [80])
	*($7 + [80]) = [0]
	if ( ($5 == 0) ){ goto $label$6 }
	CALL $185($5)
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [96])
}

void .FUNC _ZN5eosio10texas_game9circulateEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*($6 + [24]) = (int_64)-3838636544615976944
	$3 = (int_64)4411461
	CALL $101(($6 + [40]), ($6 + [24]), *($0), (int_64)4411461)
	CALL eosio_assert([1], [512])
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [576])
	$4 = ($0 + [48])
	*($6 + [24]) = (CASTING uint_64)(uint_32 $4)
	$5 = *(CALL $80(($6 + [24])) + [4])
	*((($6 + [24]) + [8])) = *(($5 + [32]))
	*($6 + [24]) = *(($5 + [24]))
	CALL eosio_assert(((int_64)*($6 + [48]) == (int_64)1129334020), [1120])
	$3 = *($0)
	if ( ((int_64)*($6 + [40]) < (int_64)5000001) ){ goto $label$11 }
	*($6 + [12]) = ($6 + [40])
	*($6 + [16]) = ($6 + [24])
	*($6 + [8]) = $0
	*($6 + [88]) = $3
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$3()), [672])
	*($6 + [64]) = $4
	*($6 + [68]) = ($6 + [8])
	*($6 + [72]) = ($6 + [88])
	$5 = CALL $184([120])
	CALL $96(($5 + [8]))
	CALL $97(($5 + [48]))
	*($5 + [104]) = $4
	CALL $98(($6 + [64]), $5)
	*($6 + [80]) = $5
	$3 = *($5)
	*($6 + [64]) = $3
	$1 = *($5 + [108])
	*($6 + [60]) = $1
	$2 = ($0 + [76])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [80]))) ){ goto $label$10 }
	*($4 + [8]) = $3
	*($4 + [16]) = $1
	*($6 + [80]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	goto $label$9 
	
.LABEL $label$11
	*($6 + [12]) = ($6 + [40])
	*($6 + [16]) = ($6 + [24])
	*($6 + [8]) = $0
	*($6 + [88]) = $3
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$3()), [672])
	*($6 + [64]) = $4
	*($6 + [68]) = ($6 + [8])
	*($6 + [72]) = ($6 + [88])
	$5 = CALL $184([120])
	CALL $96(($5 + [8]))
	CALL $97(($5 + [48]))
	*($5 + [104]) = $4
	CALL $100(($6 + [64]), $5)
	*($6 + [80]) = $5
	$3 = *($5)
	*($6 + [64]) = $3
	$1 = *($5 + [108])
	*($6 + [60]) = $1
	$2 = ($0 + [76])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [80]))) ){ goto $label$8 }
	*($4 + [8]) = $3
	*($4 + [16]) = $1
	*($6 + [80]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$10
	CALL $99(($0 + [72]), ($6 + [80]), ($6 + [64]), ($6 + [60]))
	
.LABEL $label$9
	$4 = *($6 + [80])
	*($6 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $185($4)
	goto $label$6 
	
.LABEL $label$8
	CALL $99(($0 + [72]), ($6 + [80]), ($6 + [64]), ($6 + [60]))
	
.LABEL $label$7
	$4 = *($6 + [80])
	*($6 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $185($4)
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [96])
}

int_32 .FUNC $96 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)1129334020
	*($0) = (int_64)0
	CALL eosio_assert([1], [512])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [576])
	*(($2 = ($0 + [24]))) = (int_64)1129334020
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [512])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [576])
	return $0
}

int_32 .FUNC $97 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [512])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [576])
	*(($2 = ($0 + [24]))) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [512])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [576])
	*(($2 = ($0 + [40]))) = (int_64)1397703940
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [512])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [576])
	return $0
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$3 = *(*($3) + [4])
	*(($1 + [20])) = *(($3 + [76]))
	*(($1 + [16])) = *(($3 + [72]))
	*(($1 + [12])) = *(($3 + [68]))
	*($1 + [8]) = *(($3 + [64]))
	$4 = *($1)
	CALL eosio_assert([1], [512])
	$5 = ($1 + [8])
	$6 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [576])
	*(($1 + [32])) = (int_64)1397703940
	*($1 + [24]) = (int_64)0
	CALL eosio_assert([1], [512])
	$6 = (int_64)4411461
	$3 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$7 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [576])
	*(($1 + [64])) = (int_64)1129334020
	*($1 + [56]) = (int_64)0
	CALL eosio_assert([1], [512])
	$6 = (int_64)4411461
	$3 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$7 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$7 = [0]
	
.LABEL $label$11
	CALL eosio_assert($7, [576])
	*(($1 + [96])) = (int_64)1129334020
	*($1 + [88]) = (int_64)0
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1008])
	$7 = $9
	$3 = ($7 + [-112])
	*([0] + [4]) = $3
	*($8 + [12]) = $3
	*($8 + [8]) = $3
	*($8 + [16]) = ($7 + [-8])
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = $5
	*($8 + [32]) = $1
	*($8 + [40]) = ($1 + [24])
	*($8 + [44]) = ($1 + [40])
	*($8 + [48]) = ($1 + [56])
	*($8 + [52]) = ($1 + [72])
	*($8 + [56]) = ($1 + [88])
	CALL $87(($8 + [32]), ($8 + [24]))
	CALL db_update_i64(*($1 + [108]), $2, $3, [104])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$16 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*([0] + [4]) = ($8 + [64])
}

void .FUNC _ZN5eosio10texas_game10texasdividEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [56])) = [0]
	*($6 + [40]) = (int_64)-1
	$3 = *($0)
	*($6 + [24]) = $3
	*($6 + [32]) = $3
	*($6 + [48]) = (int_64)0
	*($6 + [60]) = [0]
	$5 = CALL db_lowerbound_i64($3, $3, (int_64)-6030912134838419456, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $56(($6 + [24]), $5)
	
.LOOP $label$2:
	CALL _ZN5eosio10texas_game12setcoinscaleEy(($6 + [8]), $0, *($5))
	CALL _ZN5eosio10texas_game11perdividendEy($0, *($5))
	CALL eosio_assert([1], [272])
	$5 = CALL db_next_i64(*($5 + [112]), ($6 + [8]))
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL $56(($6 + [24]), $5)
	goto $label$2 
	
.LABEL $label$1
	*($6 + [8]) = (CASTING uint_64)(uint_32 ($0 + [48]))
	if ( ((uint_64)*(*(CALL $80(($6 + [8])) + [4])) >= (uint_64)(int_64)100) ){ goto $label$5 }
	CALL _ZN5eosio10texas_game7promoteEv($0)
	$1 = *($6 + [48])
	if ( $1 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZN5eosio10texas_game9circulateEv($0)
	$1 = *($6 + [48])
	if ( ($1 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = ($6 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	$2 = *($0 + [92])
	if ( ($2 == 0) ){ goto $label$10 }
	*(($0 + [96])) = $2
	CALL $185($2)
	
.LABEL $label$10
	CALL $185($0)
	
.LABEL $label$9
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$8 }
	$5 = *(($6 + [48]))
	goto $label$6 
	
.LABEL $label$7
	$5 = $1
	
.LABEL $label$6
	*($4) = $1
	CALL $185($5)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [64])
}

void .FUNC _ZN5eosio10texas_game12setcoinscaleEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	$5 = [0]
	*(($7 + [56])) = [0]
	*($7 + [40]) = (int_64)-1
	*($7 + [48]) = (int_64)0
	$4 = *($1)
	*($7 + [24]) = $4
	*($7 + [32]) = $4
	*($7 + [60]) = [0]
	$6 = [0]
	$3 = CALL db_find_i64($4, $4, (int_64)-6030912134838419456, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $56(($7 + [24]), $3)
	CALL eosio_assert(((int_32)*($6 + [108]) == (int_32)($7 + [24])), [160])
	
.LABEL $label$1
	*($0 + [8]) = (int_64)1129334020
	*($0) = (int_64)0
	CALL eosio_assert([1], [512])
	$4 = (int_64)4411461
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$3 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	
.LABEL $label$2
	CALL eosio_assert($3, [576])
	*($7) = (int_64)-3838636544615976944
	CALL $101(($7 + [8]), $7, $2, (uint_64)(int_64)1129334016 >> (uint_64)(int_64)8))
	$5 = (($7 + [8]) + [8])
	*(($0 + [8])) = *($5)
	*($0) = *($7 + [8])
	*($7 + [8]) = (CASTING uint_64)(uint_32 ($1 + [48]))
	$3 = *(CALL $80(($7 + [8])) + [4])
	*($5) = *(($3 + [32]))
	*($7 + [8]) = *(($3 + [24]))
	$5 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($5, [1616])
	$4 = *($1)
	*($7) = $0
	*($7 + [4]) = ($7 + [8])
	CALL eosio_assert($5, [736])
	CALL $108(($7 + [24]), $6, $4, $7)
	$1 = *($7 + [48])
	if ( ($1 == 0) ){ goto $label$7 }
	$6 = ($7 + [52])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	$3 = *($0 + [92])
	if ( ($3 == 0) ){ goto $label$12 }
	*(($0 + [96])) = $3
	CALL $185($3)
	
.LABEL $label$12
	CALL $185($0)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$10 }
	$5 = *(($7 + [48]))
	goto $label$8 
	
.LABEL $label$9
	$5 = $1
	
.LABEL $label$8
	*($6) = $1
	CALL $185($5)
	
.LABEL $label$7
	*([0] + [4]) = ($7 + [64])
}

void .FUNC _ZN5eosio10texas_game11perdividendEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [288])
	*([0] + [4]) = $14
	$8 = [0]
	*(($14 + [264])) = [0]
	*($14 + [248]) = (int_64)-1
	*($14 + [256]) = (int_64)0
	$10 = *($0)
	*($14 + [232]) = $10
	*($14 + [240]) = $10
	*($14 + [268]) = [0]
	$7 = CALL $107(($14 + [232]), $1, [1392])
	CALL memcpy(($14 + [120]), $7, [90])
	*(($14 + [220])) = [0]
	*($14 + [212 align=4]) = (int_64)0
	$6 = (*(($7 + [96])) - *($7 + [92]))
	$2 = int_32($6 >> [3])
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$2 }
	$6 = CALL $184($6)
	*((($14 + [120]) + [92])) = $6
	*(($14 + [220])) = ($6 + ($2 << [3]))
	*(($2 = (($14 + [120]) + [96]))) = $6
	$3 = *(($7 + [92]))
	$4 = (*(($7 + [96])) - $3)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $3, $4)
	*($2) = (*($2) + $4)
	
.LABEL $label$3
	*($14 + [224]) = *($7 + [104])
	$9 = (CASTING uint_64)(uint_32 ($0 + [48]))
	*($14 + [16]) = $9
	$7 = *(CALL $80(($14 + [16])) + [4])
	$13 = *(($7 + [56]))
	$12 = *($7 + [48])
	*($14 + [16]) = $9
	$7 = *(CALL $80(($14 + [16])) + [4])
	$5 = *(($7 + [72]))
	$11 = *(($7 + [64]))
	CALL eosio_assert([1], [512])
	$10 = (int_64)5459781
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [576])
	*($14 + [16]) = $9
	$10 = (int_64)20
	if ( ((int_64)*(*(CALL $80(($14 + [16])) + [4])) == (int_64)1) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$13 == (int_64)$5), [1120])
	$8 = ((int_64)$12 > (int_64)$11)
	$10 = ( (int_64)20 ? (int_64)10 : $8 )
	$12 = ((int_64)( $11 ? (int_64)0 : $8 ) + (int_64)$12)
	
.LABEL $label$8
	$5 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 ((int_64)((int_64)$12 * (int_64)9) / (int_64)$10)) * (float_64)*($14 + [192])))
	if ( ((int_64)$5 < (int_64)1) ){ goto $label$9 }
	$13 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [624]
	$11 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$15 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$7 = ($7 + [165])
	goto $label$13 
	
.LABEL $label$15
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$11
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$10 }
	*($14 + [72]) = $11
	*($14 + [64]) = $13
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [144]
	$11 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$21 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$7 = ($7 + [165])
	goto $label$19 
	
.LABEL $label$21
	$12 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$17
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$16 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [128]
	$13 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$27 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$7 = ($7 + [165])
	goto $label$25 
	
.LABEL $label$27
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$23
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$22 }
	*(($14 + [8])) = [0]
	*($14) = (int_64)0
	$8 = CALL strlen([1600])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$30 }
	*($14) = ($8 << [1])
	$7 = ($14 | [1])
	if ( $8 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$6 = (($8 + [16]) & [-16])
	$7 = CALL $184($6)
	*($14) = ($6 | [1])
	*($14 + [8]) = $7
	*($14 + [4]) = $8
	
.LABEL $label$29
	CALL memcpy($7, [1600], $8)
	
.LABEL $label$28
	*(($7 + $8)) = [0]
	*(($14 + [40])) = (int_64)1397703940
	*(($14 + [52])) = *($14 + [4])
	*($14 + [24]) = $1
	$8 = ($14 + [8])
	*(($14 + [56])) = *($8)
	*($14 + [16]) = *($0)
	*($14 + [32]) = $5
	*($14 + [48]) = *($14)
	*($14) = [0]
	*($14 + [4]) = [0]
	*($8) = [0]
	$8 = CALL $44(($14 + [80]), ($14 + [64]), $11, $13, ($14 + [16]))
	CALL $45(($14 + [272]), $8)
	$7 = *($14 + [272])
	CALL send_inline($7, (*($14 + [276]) - $7))
	$7 = *($14 + [272])
	if ( ($7 == 0) ){ goto $label$31 }
	*($14 + [276]) = $7
	CALL $185($7)
	
.LABEL $label$31
	$7 = *($8 + [28])
	if ( ($7 == 0) ){ goto $label$32 }
	*(($8 + [32])) = $7
	CALL $185($7)
	
.LABEL $label$32
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$33 }
	*(($8 + [20])) = $7
	CALL $185($7)
	
.LABEL $label$33
	if ( ((*(($14 + [48])) & [1]) == 0) ){ goto $label$34 }
	CALL $185(*(($14 + [56])))
	
.LABEL $label$34
	if ( ((*($14) & [1]) == 0) ){ goto $label$9 }
	CALL $185(*(($14 + [8])))
	
.LABEL $label$9
	$8 = *($14 + [212])
	if ( ($8 == 0) ){ goto $label$35 }
	*(($14 + [216])) = $8
	CALL $185($8)
	
.LABEL $label$35
	$6 = *($14 + [256])
	if ( ($6 == 0) ){ goto $label$36 }
	$2 = ($14 + [260])
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$38 }
	
.LOOP $label$39:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$40 }
	$0 = *($7 + [92])
	if ( ($0 == 0) ){ goto $label$41 }
	*(($7 + [96])) = $0
	CALL $185($0)
	
.LABEL $label$41
	CALL $185($7)
	
.LABEL $label$40
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$39 }
	$8 = *(($14 + [256]))
	goto $label$37 
	
.LABEL $label$38
	$8 = $6
	
.LABEL $label$37
	*($2) = $6
	CALL $185($8)
	
.LABEL $label$36
	*([0] + [4]) = ($14 + [288])
	return (unreachable)
	
.LABEL $label$2
	CALL $188(($14 + [212]))
	
.LABEL $label$1
	CALL $186($14)
	(unreachable)
}

void .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = (*([0] + [4]) - [48])
	$10 = $4
	*([0] + [4]) = $4
	*($1) = *(*(*($0 + [4])))
	$3 = *($1 + [8])
	$5 = *(($1 + [12]))
	$6 = ($5 - $3)
	$9 = (CASTING uint_64)(uint_32 int_32($6 >> [5]))
	$2 = *($0)
	$8 = [33]
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$3 }
	$6 = (((int_32)uint_32(($6 + [-32]) >> [5]) * (int_32)[25]) + $8)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($8 + [-25])
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL malloc($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($4 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$4
	*($10 + [8]) = $7
	$3 = ($7 + $6)
	*($10 + [16]) = $3
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [656])
	CALL memcpy($7, $1, [8])
	$8 = ($7 + [8])
	*($10 + [12]) = $8
	$9 = (CASTING uint_64)(uint_32 int_32((*(($1 + [12])) - *(($1 + [8]))) >> [5]))
	
.LOOP $label$6:
	$4 = (CASTING uint_32)(uint_64 $9)
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	$5 = ((int_64)$9) != (int_64)0
	*($10 + [32]) = (($5) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)($3 - $8) > (int_32)[0]), [656])
	CALL memcpy($8, ($10 + [32]), [1])
	$8 = ($8 + [1])
	*($10 + [12]) = $8
	if ( $5 ){ goto $label$6 }
	$4 = *(($1 + [12]))
	$8 = *(($1 + [8]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$7 }
	
.LOOP $label$8:
	*($10 + [24]) = ($10 + [8])
	*($10 + [32]) = $8
	*((($10 + [32]) + [8])) = ($8 + [24])
	*($10 + [36]) = ($8 + [8])
	CALL $67(($10 + [32]), ($10 + [24]))
	$8 = ($8 + [32])
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	$9 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-2042756381877293056, *(*($0 + [8])), $9, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$9 }
	CALL free($7)
	
.LABEL $label$9
	if ( (uint_64)($9 <= *($2 + [16])) ){ goto $label$10 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [480])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $184([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [608])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $69(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $141(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $185($7)
	
.LABEL $label$10
	CALL $185($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $130 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$9 = (*([0] + [4]) - [48])
	$12 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$4 = *($1)
	$10 = $4
	$3 = *(*($3))
	$6 = ($3 + [32])
	$11 = ($1 + [12])
	$5 = (*($11) - $6)
	$7 = int_32($5 >> [5])
	if ( ($7 == 0) ){ goto $label$1 }
	CALL memmove($3, $6, $5)
	$10 = *($1)
	
.LABEL $label$1
	*($11) = ($3 + ($7 << [5]))
	CALL eosio_assert(((int_64)$4 == (int_64)$10), [1008])
	$7 = *($1 + [8])
	$3 = *($11)
	$6 = ($3 - $7)
	$10 = (CASTING uint_64)(uint_32 int_32($6 >> [5]))
	$11 = [36]
	
.LOOP $label$2:
	$11 = ($11 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$7 = (((int_32)uint_32(($6 + [-32]) >> [5]) * (int_32)[28]) + $11)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($11 + [-28])
	
.LABEL $label$3
	$3 = *(($1 + [20]))
	$11 = *(($1 + [24]))
	$6 = ($11 - $3)
	$10 = (CASTING uint_64)(uint_32 int_32($6 >> [5]))
	
.LOOP $label$5:
	$7 = ($7 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)$11) ){ goto $label$6 }
	$7 = ((((int_32)uint_32(($6 + [-32]) >> [5]) * (int_32)[25]) + $7) + [25])
	
.LABEL $label$6
	if ( ($7 <= [513]) ){ goto $label$8 }
	$8 = CALL malloc($7)
	goto $label$7 
	
.LABEL $label$8
	$8 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$7
	*($12 + [8]) = $8
	$5 = ($8 + $7)
	*($12 + [16]) = $5
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [656])
	CALL memcpy($8, $1, [8])
	$3 = ($8 + [8])
	*($12 + [12]) = $3
	$10 = (CASTING uint_64)(uint_32 int_32((*(($1 + [12])) - *(($1 + [8]))) >> [5]))
	$9 = ($8 + [9])
	
.LOOP $label$9:
	$11 = (CASTING uint_32)(uint_64 $10)
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	$6 = ((int_64)$10) != (int_64)0
	*($12 + [32]) = (($6) << [7]) | ($11 & [127]))
	CALL eosio_assert(((int_32)($5 - $3) > (int_32)[0]), [656])
	$11 = $9
	CALL memcpy(($11 + [-1]), ($12 + [32]), [1])
	*($12 + [12]) = $11
	$9 = ($11 + [1])
	$3 = $11
	if ( $6 ){ goto $label$9 }
	$9 = *(($1 + [12]))
	$3 = *(($1 + [8]))
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$10 }
	
.LOOP $label$11:
	*($12 + [24]) = ($12 + [8])
	*($12 + [32]) = $3
	*((($12 + [32]) + [8])) = ($3 + [24])
	*($12 + [36]) = ($3 + [8])
	CALL $66(($12 + [32]), ($12 + [24]))
	$3 = ($3 + [32])
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$11 }
	$11 = *($12 + [12])
	
.LABEL $label$10
	$10 = (CASTING uint_64)(uint_32 int_32((*(($1 + [24])) - *(($1 + [20]))) >> [5]))
	$6 = (($12 + [8]) + [8])
	
.LOOP $label$12:
	$3 = (CASTING uint_32)(uint_64 $10)
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	$9 = ((int_64)$10) != (int_64)0
	*($12 + [32]) = (($9) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $11) > (int_32)[0]), [656])
	CALL memcpy(*($12 + [12]), ($12 + [32]), [1])
	$11 = (*($12 + [12]) + [1])
	*($12 + [12]) = $11
	if ( $9 ){ goto $label$12 }
	$3 = *(($1 + [24]))
	$11 = *(($1 + [20]))
	if ( ((int_32)$11 == (int_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	*($12 + [24]) = ($12 + [8])
	*($12 + [32]) = $11
	*((($12 + [32]) + [8])) = ($11 + [24])
	*($12 + [36]) = ($11 + [8])
	CALL $67(($12 + [32]), ($12 + [24]))
	$11 = ($11 + [32])
	if ( ((int_32)$11 != (int_32)$3) ){ goto $label$14 }
	
.LABEL $label$13
	CALL db_update_i64(*($1 + [36]), $2, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$15 }
	CALL free($8)
	
.LABEL $label$15
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$16 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*([0] + [4]) = ($12 + [48])
}

void .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	CALL $189(($3 + [16]), $1)
	CALL $189($3, ($1 + [12]))
	$0 = *($0 + [4])
	$2 = *($0 + [4])
	$1 = (*(*($0)) + int_32($2 >> [1]))
	$0 = *($0)
	if ( (($2 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	CALL $189(($3 + [48]), ($3 + [16]))
	CALL $189(($3 + [32]), $3)
	CALL void $1((int_32 ($3 + [48])), (int_32 ($3 + [32])), (int_32 $0))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$2 }
	CALL $185(*($3 + [40]))
	
.LABEL $label$2
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$3 }
	CALL $185(*($3 + [56]))
	
.LABEL $label$3
	if ( ((*($3) & [1]) == 0) ){ goto $label$4 }
	CALL $185(*($3 + [8]))
	
.LABEL $label$4
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $185(*($3 + [24]))
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [64])
}

void .FUNC $132 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$6 = (*([0] + [4]) - [48])
	$12 = $6
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$7 = *(($3 + [4]))
	$4 = *($1)
	$5 = ($1 + [12])
	$10 = *($5)
	$11 = *($1 + [8])
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$1 }
	$9 = *(*($3))
	
.LOOP $label$2:
	if ( ((int_64)$9 == (int_64)*($11)) ){ goto $label$1 }
	$11 = ($11 + [32])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$2 }
	$11 = $10
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($11 + [16]))), [1216])
	$9 = (int_64)
	*($11 + [8]) = $9(*($11 + [8]) - *($7)))
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($11 + [8]) < (int_64)4611686018427387904), [1296])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1008])
	$7 = *($1 + [8])
	$10 = *($5)
	$3 = ($10 - $7)
	$9 = (CASTING uint_64)(uint_32 int_32($3 >> [5]))
	$11 = [36]
	
.LOOP $label$3:
	$11 = ($11 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$5 }
	$7 = (((int_32)uint_32(($3 + [-32]) >> [5]) * (int_32)[28]) + $11)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($11 + [-28])
	
.LABEL $label$4
	$10 = *(($1 + [20]))
	$11 = *(($1 + [24]))
	$3 = ($11 - $10)
	$9 = (CASTING uint_64)(uint_32 int_32($3 >> [5]))
	
.LOOP $label$6:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$7 }
	$7 = ((((int_32)uint_32(($3 + [-32]) >> [5]) * (int_32)[25]) + $7) + [25])
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$9 }
	$8 = CALL malloc($7)
	goto $label$8 
	
.LABEL $label$9
	$8 = ($6 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$8
	*($12 + [8]) = $8
	$5 = ($8 + $7)
	*($12 + [16]) = $5
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [656])
	CALL memcpy($8, $1, [8])
	$10 = ($8 + [8])
	*($12 + [12]) = $10
	$9 = (CASTING uint_64)(uint_32 int_32((*(($1 + [12])) - *(($1 + [8]))) >> [5]))
	$3 = ($8 + [9])
	
.LOOP $label$10:
	$11 = (CASTING uint_32)(uint_64 $9)
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	$6 = ((int_64)$9) != (int_64)0
	*($12 + [32]) = (($6) << [7]) | ($11 & [127]))
	CALL eosio_assert(((int_32)($5 - $10) > (int_32)[0]), [656])
	$11 = $3
	CALL memcpy(($11 + [-1]), ($12 + [32]), [1])
	*($12 + [12]) = $11
	$3 = ($11 + [1])
	$10 = $11
	if ( $6 ){ goto $label$10 }
	$3 = *(($1 + [12]))
	$10 = *(($1 + [8]))
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$11 }
	
.LOOP $label$12:
	*($12 + [24]) = ($12 + [8])
	*($12 + [32]) = $10
	*((($12 + [32]) + [8])) = ($10 + [24])
	*($12 + [36]) = ($10 + [8])
	CALL $66(($12 + [32]), ($12 + [24]))
	$10 = ($10 + [32])
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$12 }
	$11 = *($12 + [12])
	
.LABEL $label$11
	$9 = (CASTING uint_64)(uint_32 int_32((*(($1 + [24])) - *(($1 + [20]))) >> [5]))
	$6 = (($12 + [8]) + [8])
	
.LOOP $label$13:
	$10 = (CASTING uint_32)(uint_64 $9)
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	$3 = ((int_64)$9) != (int_64)0
	*($12 + [32]) = (($3) << [7]) | ($10 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $11) > (int_32)[0]), [656])
	CALL memcpy(*($12 + [12]), ($12 + [32]), [1])
	$11 = (*($12 + [12]) + [1])
	*($12 + [12]) = $11
	if ( $3 ){ goto $label$13 }
	$10 = *(($1 + [24]))
	$11 = *(($1 + [20]))
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$14 }
	
.LOOP $label$15:
	*($12 + [24]) = ($12 + [8])
	*($12 + [32]) = $11
	*((($12 + [32]) + [8])) = ($11 + [24])
	*($12 + [36]) = ($11 + [8])
	CALL $67(($12 + [32]), ($12 + [24]))
	$11 = ($11 + [32])
	if ( ((int_32)$11 != (int_32)$10) ){ goto $label$15 }
	
.LABEL $label$14
	CALL db_update_i64(*($1 + [36]), $2, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$16 }
	CALL free($8)
	
.LABEL $label$16
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$17 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	*([0] + [4]) = ($12 + [48])
}

int_32 .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1200])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$6 = *($1)
	$2 = *($1 + [4])
	$7 = ((int_32)($2 - $6) / (int_32)[40])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $137($1, ($4 - $7))
	$2 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[40])
	$3 = ($6 + $4)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$4 }
	$6 = (([0] - $6) - $4)
	$4 = ($2 + [-32])
	
.LOOP $label$5:
	$7 = *(($4 + [12]))
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [16])) = $7
	CALL $185($7)
	
.LABEL $label$6
	$7 = *($4)
	if ( ($7 == 0) ){ goto $label$7 }
	*(($4 + [4])) = $7
	CALL $185($7)
	
.LABEL $label$7
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $6) != (int_32)[-32]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$2
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$9:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [608])
	CALL memcpy($7, *($4), [8])
	*($4) = (*($4) + [8])
	CALL $63($0, ($7 + [8]))
	CALL $63($0, ($7 + [20]))
	CALL eosio_assert(((uint_32)(*($3) - *($4)) > (uint_32)[7]), [608])
	CALL memcpy(($7 + [32]), *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	return $0
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL $189(($5 + [32]), $1)
	*($5 + [24]) = [0]
	*($5 + [16]) = (int_64)0
	$4 = (*(($1 + [16])) - *($1 + [12]))
	$3 = int_32($4 >> [3])
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$2 }
	$4 = CALL $184($4)
	*(($5 + [24])) = ($4 + ($3 << [3]))
	*($5 + [16]) = $4
	*($5 + [20]) = $4
	$2 = *(($1 + [12]))
	$3 = (*(($1 + [16])) - $2)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($4, $2, $3)
	*($5 + [20]) = (*($5 + [20]) + $3)
	
.LABEL $label$3
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	$4 = (*(($1 + [28])) - *($1 + [24]))
	$2 = ((int_32)$4 / (int_32)[40])
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[107374183]) ){ goto $label$1 }
	$3 = CALL $184($4)
	*(($5 + [8])) = ($3 + ((int_32)$2 * (int_32)[40]))
	*($5) = $3
	*($5 + [4]) = $3
	$1 = *(($1 + [28]))
	$4 = *(($1 + [24]))
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$4 }
	
.LOOP $label$5:
	CALL $135($3, $4)
	$3 = (*($5 + [4]) + [40])
	*($5 + [4]) = $3
	$4 = ($4 + [40])
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$4
	CALL $136($0, ($5 + [32]), ($5 + [16]), $5)
	$2 = *($5)
	if ( ($2 == 0) ){ goto $label$6 }
	$4 = *($5 + [4])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$8 }
	$1 = ([0] - $2)
	$4 = ($4 + [-32])
	
.LOOP $label$9:
	$3 = *(($4 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($4 + [16])) = $3
	CALL $185($3)
	
.LABEL $label$10
	$3 = *($4)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($4 + [4])) = $3
	CALL $185($3)
	
.LABEL $label$11
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $1) != (int_32)[-32]) ){ goto $label$9 }
	$4 = *($5)
	goto $label$7 
	
.LABEL $label$8
	$4 = $2
	
.LABEL $label$7
	*($5 + [4]) = $2
	CALL $185($4)
	
.LABEL $label$6
	$4 = *($5 + [16])
	if ( ($4 == 0) ){ goto $label$12 }
	*($5 + [20]) = $4
	CALL $185($4)
	
.LABEL $label$12
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL $185(*($5 + [40]))
	
.LABEL $label$13
	*([0] + [4]) = ($5 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $188(($5 + [16]))
	
.LABEL $label$1
	CALL $188($5)
	(unreachable)
}

int_32 .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*(($0 + [12])) = (int_64)0
	*($0 + [8]) = [0]
	*($0) = *($1)
	$3 = (*(($1 + [12])) - *($1 + [8]))
	$2 = int_32($3 >> [3])
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$2 }
	$3 = CALL $184($3)
	*(($0 + [8])) = $3
	*(($0 + [16])) = ($3 + ($2 << [3]))
	*(($2 = ($0 + [12]))) = $3
	$4 = *(($1 + [8]))
	$5 = (*(($1 + [12])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $4, $5)
	*($2) = (*($2) + $5)
	
.LABEL $label$3
	*($0 + [20 align=4]) = (int_64)0
	*(($0 + [28])) = [0]
	$3 = (*(($1 + [24])) - *($1 + [20]))
	$2 = int_32($3 >> [3])
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	$3 = CALL $184($3)
	*(($0 + [20])) = $3
	*(($0 + [28])) = ($3 + ($2 << [3]))
	*(($2 = ($0 + [24]))) = $3
	$4 = *(($1 + [20]))
	$5 = (*(($1 + [24])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($3, $4, $5)
	*($2) = (*($2) + $5)
	
.LABEL $label$4
	*($0 + [32]) = *($1 + [32])
	return $0
	
.LABEL $label$2
	CALL $188(($0 + [8]))
	
.LABEL $label$1
	CALL $188(($0 + [20]))
	(unreachable)
	return (unreachable)
}

void .FUNC $136 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$4 = (*(*($0)) + int_32($6 >> [1]))
	$5 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$5 = *((*($4) + $5))
	
.LABEL $label$1
	CALL $189(($7 + [32]), $1)
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$0 = (*($2 + [4]) - *($2))
	$1 = int_32($0 >> [3])
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ((uint_32)$1 >= (uint_32)[536870912]) ){ goto $label$3 }
	$0 = CALL $184($0)
	*(($7 + [24])) = ($0 + ($1 << [3]))
	*($7 + [16]) = $0
	*($7 + [20]) = $0
	$1 = *($2)
	$2 = (*(($2 + [4])) - $1)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($0, $1, $2)
	*($7 + [20]) = (*($7 + [20]) + $2)
	
.LABEL $label$4
	*($7 + [8]) = [0]
	*($7) = (int_64)0
	$2 = (*($3 + [4]) - *($3))
	$1 = ((int_32)$2 / (int_32)[40])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((uint_32)$1 >= (uint_32)[107374183]) ){ goto $label$2 }
	$0 = CALL $184($2)
	*(($7 + [8])) = ($0 + ((int_32)$1 * (int_32)[40]))
	*($7) = $0
	*($7 + [4]) = $0
	$3 = *(($3 + [4]))
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	CALL $135($0, $2)
	$0 = (*($7 + [4]) + [40])
	*($7 + [4]) = $0
	$2 = ($2 + [40])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$5
	CALL void $4((int_32 ($7 + [32])), (int_32 ($7 + [16])), (int_32 $7), (int_32 $5))
	$5 = *($7)
	if ( ($5 == 0) ){ goto $label$7 }
	$2 = *($7 + [4])
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$9 }
	$3 = ([0] - $5)
	$2 = ($2 + [-32])
	
.LOOP $label$10:
	$0 = *(($2 + [12]))
	if ( ($0 == 0) ){ goto $label$11 }
	*(($2 + [16])) = $0
	CALL $185($0)
	
.LABEL $label$11
	$0 = *($2)
	if ( ($0 == 0) ){ goto $label$12 }
	*(($2 + [4])) = $0
	CALL $185($0)
	
.LABEL $label$12
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-32]) ){ goto $label$10 }
	$2 = *($7)
	goto $label$8 
	
.LABEL $label$9
	$2 = $5
	
.LABEL $label$8
	*($7 + [4]) = $5
	CALL $185($2)
	
.LABEL $label$7
	$2 = *($7 + [16])
	if ( ($2 == 0) ){ goto $label$13 }
	*($7 + [20]) = $2
	CALL $185($2)
	
.LABEL $label$13
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$14 }
	CALL $185(*($7 + [40]))
	
.LABEL $label$14
	*([0] + [4]) = ($7 + [48])
	return (unreachable)
	
.LABEL $label$3
	CALL $188(($7 + [16]))
	
.LABEL $label$2
	CALL $188($7)
	(unreachable)
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $8) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$6 = ((int_32)($8 - $5) / (int_32)[40])
	$7 = ($6 + $1)
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$3 }
	$8 = [107374182]
	$2 = ((int_32)($2 - $5) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$6 }
	$8 = ($2 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $184(((int_32)$8 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$2 = ($0 + [4])
	
.LOOP $label$7:
	*(($8 = CALL memset($8, [0], [40])) + [8 align=4]) = (int_64)0
	*(($8 + [16])) = (int_64)0
	*(($8 + [24])) = (int_64)0
	$8 = (*($2) + [40])
	*($2) = $8
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$8 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $188($0)
	
.LABEL $label$2
	$3 = ($2 + ((int_32)$8 * (int_32)[40]))
	$8 = ($2 + ((int_32)$6 * (int_32)[40]))
	$2 = $8
	
.LOOP $label$8:
	*(($2 = CALL memset($2, [0], [40])) + [8 align=4]) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*(($2 + [24])) = (int_64)0
	$2 = ($2 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$10 }
	$4 = ([0] - $1)
	$1 = ($5 + [-20])
	
.LOOP $label$11:
	*(($5 = ($8 + [-32]))) = (int_64)0
	*(($6 = ($8 + [-24]))) = [0]
	$7 = ($1 + [-12])
	*($5) = *($7)
	*(($8 + [-28])) = *(($1 + [-8]))
	*(($8 + [-40])) = *(($1 + [-20]))
	$5 = ($1 + [-4])
	*($6) = *($5)
	*($7) = (int_64)0
	*($5) = [0]
	*(($5 = ($8 + [-20]))) = (int_64)0
	*(($6 = ($8 + [-12]))) = [0]
	*($5) = *($1)
	*(($8 + [-16])) = *(($1 + [4]))
	$5 = ($1 + [8])
	*($6) = *($5)
	*($5) = [0]
	*($1) = (int_64)0
	*(($8 + [-8])) = *(($1 + [12]))
	$8 = ($8 + [-40])
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $4) != (int_32)[-20]) ){ goto $label$11 }
	$1 = *(($0 + [4]))
	$5 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$5 = $1
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $2
	*(($0 + [8])) = $3
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$12 }
	$2 = ([0] - $5)
	$1 = ($1 + [-32])
	
.LOOP $label$13:
	$8 = *(($1 + [12]))
	if ( ($8 == 0) ){ goto $label$14 }
	*(($1 + [16])) = $8
	CALL $185($8)
	
.LABEL $label$14
	$8 = *($1)
	if ( ($8 == 0) ){ goto $label$15 }
	*(($1 + [4])) = $8
	CALL $185($8)
	
.LABEL $label$15
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $2) != (int_32)[-32]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $185($5)
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $181 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $182($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10432])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $129 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [96])
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*(($1 + [108])) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$4 = ($1 + [80])
	*(($12 = $13) + [24]) = *($4)
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [1008])
	$7 = ($1 + [92])
	$6 = ($1 + [8])
	$8 = *($1 + [92])
	$9 = *(($1 + [96]))
	$10 = ($9 - $8)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	$3 = [90]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	$3 = (($10 & [-8]) + $3)
	
.LABEL $label$2
	$9 = ($3 + [2])
	if ( ($9 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($9)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($13 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($12 + [12]) = $3
	*($12 + [8]) = $3
	*($12 + [16]) = ($3 + $9)
	*($12 + [32]) = ($12 + [8])
	*($12 + [44]) = $6
	*($12 + [40]) = $1
	*($12 + [48]) = ($1 + [16])
	*($12 + [52]) = ($1 + [32])
	*($12 + [56]) = ($1 + [40])
	*($12 + [60]) = ($1 + [56])
	*($12 + [64]) = ($1 + [72])
	*($12 + [68]) = $4
	*($12 + [72]) = ($1 + [88])
	*($12 + [76]) = ($1 + [89])
	*($12 + [80]) = $7
	*($12 + [84]) = ($1 + [104])
	*($12 + [88]) = ($1 + [105])
	CALL $58(($12 + [40]), ($12 + [32]))
	CALL db_update_i64(*($1 + [112]), $2, $3, $9)
	if ( ($9 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($12 + [40]) = *($4)
	if ( (CALL memcmp(($12 + [24]), ($12 + [40]), [8]) == 0) ){ goto $label$7 }
	$3 = *($1 + [116])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx_double_find_primary(*($0), *($0 + [8]), (int_64)-6030912134838419456, ($12 + [32]), $5)
	*(($1 + [116])) = $3
	
.LABEL $label$8
	CALL db_idx_double_update($3, $2, ($12 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($12 + [96])
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	CALL $189($4, $1)
	$2 = *($1 + [16])
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$1 = (*(*($0)) + int_32($3 >> [1]))
	$0 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	CALL $189(($4 + [16]), $4)
	CALL void $1((int_32 ($4 + [16])), (int_32 $2), (int_64 $0))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $185(*($4 + [24]))
	
.LABEL $label$2
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	CALL $185(*($4 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [32])
}

void .FUNC _ZN5eosio10texas_game8transferEyyNS_5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	*($11 + [48]) = $1
	$8 = *($0)
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$8 != (int_64)$2) ){ goto $label$1 }
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)1397703940), [1984])
	CALL eosio_assert(((int_64)*($3) > (int_64)99), [2000])
	$7 = *(($0 + [120]))
	$10 = *(($0 + [124]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$2 }
	$9 = ($10 + [-24])
	$5 = ([0] - $7)
	
.LOOP $label$3:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$2 }
	$10 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$6 = ($0 + [96])
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$7 }
	$9 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [28]) == (int_32)$6), [160])
	$1 = *($0)
	if ( $9 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$9 = CALL db_find_i64(*(($0 + [96])), *(($0 + [104])), (int_64)-3838636559280373760, $1)
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$5 }
	$9 = CALL $40($6, $9)
	CALL eosio_assert(((int_32)*($9 + [28]) == (int_32)$6), [160])
	$1 = *($0)
	
.LABEL $label$6
	*($11 + [8]) = $3
	CALL eosio_assert([1], [736])
	CALL $175($6, $9, $1, ($11 + [8]))
	goto $label$1 
	
.LABEL $label$5
	$1 = *($0)
	
.LABEL $label$4
	*($11 + [92]) = $3
	*($11 + [88]) = ($11 + [48])
	*($11 + [64]) = $1
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL $fimport$3()), [672])
	*($11 + [8]) = $6
	*($11 + [12]) = ($11 + [88])
	*($11 + [16]) = ($11 + [64])
	*(($10 = CALL $184([40])) + [16]) = (int_64)344826856192
	*($10 + [8]) = (int_64)0
	CALL eosio_assert([1], [512])
	$1 = (int_64)1346979907
	$9 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$5 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$5 = [0]
	
.LABEL $label$8
	CALL eosio_assert($5, [576])
	*($10 + [28]) = $6
	*($10 + [24]) = [0]
	CALL $173(($11 + [8]), $10)
	*($11 + [80]) = $10
	$1 = *($10)
	*($11 + [8]) = $1
	$6 = *($10 + [32])
	*($11 + [60]) = $6
	$5 = ($0 + [124])
	$9 = *($5)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [128]))) ){ goto $label$14 }
	*($9 + [8]) = $1
	*($9 + [16]) = $6
	*($11 + [80]) = [0]
	*($9) = $10
	*($5) = ($9 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $43(($0 + [120]), ($11 + [80]), ($11 + [8]), ($11 + [60]))
	
.LABEL $label$13
	$9 = *($11 + [80])
	*($11 + [80]) = [0]
	if ( ($9 == 0) ){ goto $label$15 }
	CALL $185($9)
	
.LABEL $label$15
	*(($6 = ($11 + [40]))) = [0]
	$1 = *($0)
	*($11 + [8]) = $1
	*($11 + [24]) = (int_64)-1
	*($11 + [32]) = (int_64)0
	*($11 + [16]) = $1
	*($11 + [44]) = [0]
	$9 = CALL db_find_i64($1, $1, (int_64)-6030912134838419456, *($11 + [48]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$17 }
	CALL eosio_assert(((int_32)*(CALL $56(($11 + [8]), $9) + [108]) == (int_32)($11 + [8])), [160])
	$5 = *($11 + [32])
	if ( $5 ){ goto $label$16 }
	goto $label$1 
	
.LABEL $label$17
	$1 = *($0)
	$2 = *($11 + [8])
	*($11) = ($11 + [48])
	*($11 + [88]) = $1
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$3()), [672])
	*($11 + [68]) = $11
	*($11 + [64]) = ($11 + [8])
	*($11 + [72]) = ($11 + [88])
	$9 = CALL $184([120])
	CALL $60($9)
	*($9 + [108]) = ($11 + [8])
	CALL $174(($11 + [64]), $9)
	*($11 + [80]) = $9
	$1 = *($9)
	*($11 + [64]) = $1
	$5 = *($9 + [112])
	*($11 + [60]) = $5
	$0 = ($11 + [36])
	$10 = *($0)
	if ( ((uint_32)$10 >= (uint_32)*($6)) ){ goto $label$19 }
	*($10 + [8]) = $1
	*($10 + [16]) = $5
	*($11 + [80]) = [0]
	*($10) = $9
	*($0) = ($10 + [24])
	goto $label$18 
	
.LABEL $label$19
	CALL $62(($11 + [32]), ($11 + [80]), ($11 + [64]), ($11 + [60]))
	
.LABEL $label$18
	$9 = *($11 + [80])
	*($11 + [80]) = [0]
	if ( ($9 == 0) ){ goto $label$20 }
	$6 = *($9 + [92])
	if ( ($6 == 0) ){ goto $label$21 }
	*(($9 + [96])) = $6
	CALL $185($6)
	
.LABEL $label$21
	CALL $185($9)
	
.LABEL $label$20
	$5 = *($11 + [32])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$16
	$0 = ($11 + [36])
	$9 = *($0)
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$23 }
	
.LOOP $label$24:
	$9 = ($9 + [-24])
	$6 = *($9)
	*($9) = [0]
	if ( ($6 == 0) ){ goto $label$25 }
	$10 = *($6 + [92])
	if ( ($10 == 0) ){ goto $label$26 }
	*(($6 + [96])) = $10
	CALL $185($10)
	
.LABEL $label$26
	CALL $185($6)
	
.LABEL $label$25
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$24 }
	$9 = *(($11 + [32]))
	goto $label$22 
	
.LABEL $label$23
	$9 = $5
	
.LABEL $label$22
	*($0) = $5
	CALL $185($9)
	
.LABEL $label$1
	*([0] + [4]) = ($11 + [96])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [512])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [576])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $171(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $172(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $185(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $123 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [96])
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*(($1 + [108])) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	*($1 + [16]) = (int_64)0
	*($1 + [8]) = (int_64)0
	$4 = ($1 + [80])
	$11 = *($4)
	*($4) = *(*($3))
	*(($12 = $13) + [24]) = $11
	$5 = *($1)
	CALL eosio_assert([1], [1008])
	$7 = ($1 + [92])
	$6 = ($1 + [8])
	$8 = *($1 + [92])
	$9 = *(($1 + [96]))
	$10 = ($9 - $8)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	$3 = [90]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	$3 = (($10 & [-8]) + $3)
	
.LABEL $label$2
	$9 = ($3 + [2])
	if ( ($9 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($9)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($13 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($12 + [12]) = $3
	*($12 + [8]) = $3
	*($12 + [16]) = ($3 + $9)
	*($12 + [32]) = ($12 + [8])
	*($12 + [44]) = $6
	*($12 + [40]) = $1
	*($12 + [48]) = ($1 + [16])
	*($12 + [52]) = ($1 + [32])
	*($12 + [56]) = ($1 + [40])
	*($12 + [60]) = ($1 + [56])
	*($12 + [64]) = ($1 + [72])
	*($12 + [68]) = $4
	*($12 + [72]) = ($1 + [88])
	*($12 + [76]) = ($1 + [89])
	*($12 + [80]) = $7
	*($12 + [84]) = ($1 + [104])
	*($12 + [88]) = ($1 + [105])
	CALL $58(($12 + [40]), ($12 + [32]))
	CALL db_update_i64(*($1 + [112]), $2, $3, $9)
	if ( ($9 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($12 + [40]) = *($4)
	if ( (CALL memcmp(($12 + [24]), ($12 + [40]), [8]) == 0) ){ goto $label$7 }
	$3 = *($1 + [116])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx_double_find_primary(*($0), *($0 + [8]), (int_64)-6030912134838419456, ($12 + [32]), $5)
	*(($1 + [116])) = $3
	
.LABEL $label$8
	CALL db_idx_double_update($3, $2, ($12 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($12 + [96])
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $184(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $188($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $185($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $121 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [96])
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*(($1 + [108])) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$4 = ($1 + [80])
	*(($12 = $13) + [24]) = *($4)
	$5 = *($1)
	$9 = *($3)
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)*(($1 + [48]))), [896])
	$11 = ((int_64)*($1 + [40]) + (int_64)*($9))
	*($1 + [40]) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [976])
	$3 = *($3)
	*($1 + [56]) = *($3)
	$11 = *(($3 + [8]))
	*($4) = (int_64)0
	*(($1 + [64])) = $11
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [1008])
	$7 = ($1 + [92])
	$6 = ($1 + [56])
	$8 = *($1 + [92])
	$9 = *(($1 + [96]))
	$10 = ($9 - $8)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	$3 = [90]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	$3 = (($10 & [-8]) + $3)
	
.LABEL $label$2
	$9 = ($3 + [2])
	if ( ($9 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($9)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($13 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($12 + [12]) = $3
	*($12 + [8]) = $3
	*($12 + [16]) = ($3 + $9)
	*($12 + [32]) = ($12 + [8])
	*($12 + [60]) = $6
	*($12 + [40]) = $1
	*($12 + [44]) = ($1 + [8])
	*($12 + [48]) = ($1 + [16])
	*($12 + [52]) = ($1 + [32])
	*($12 + [56]) = ($1 + [40])
	*($12 + [64]) = ($1 + [72])
	*($12 + [68]) = $4
	*($12 + [72]) = ($1 + [88])
	*($12 + [76]) = ($1 + [89])
	*($12 + [80]) = $7
	*($12 + [84]) = ($1 + [104])
	*($12 + [88]) = ($1 + [105])
	CALL $58(($12 + [40]), ($12 + [32]))
	CALL db_update_i64(*($1 + [112]), $2, $3, $9)
	if ( ($9 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($12 + [40]) = *($4)
	if ( (CALL memcmp(($12 + [24]), ($12 + [40]), [8]) == 0) ){ goto $label$7 }
	$3 = *($1 + [116])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx_double_find_primary(*($0), *($0 + [8]), (int_64)-6030912134838419456, ($12 + [32]), $5)
	*(($1 + [116])) = $3
	
.LABEL $label$8
	CALL db_idx_double_update($3, $2, ($12 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($12 + [96])
}

void .FUNC $120 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [96])
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*(($1 + [108])) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	*($1 + [56]) = (int_64)0
	$3 = ($1 + [80])
	*(($11 = $12) + [24]) = *($3)
	$4 = *($1)
	CALL eosio_assert([1], [1008])
	$5 = ($1 + [92])
	$6 = *($1 + [92])
	$7 = *(($1 + [96]))
	$8 = ($7 - $6)
	$10 = (CASTING uint_64)(uint_32 int_32($8 >> [3]))
	$9 = [90]
	
.LOOP $label$1:
	$9 = ($9 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$9 = (($8 & [-8]) + $9)
	
.LABEL $label$2
	$7 = ($9 + [2])
	if ( ($7 <= [513]) ){ goto $label$4 }
	$9 = CALL malloc($7)
	goto $label$3 
	
.LABEL $label$4
	$9 = ($12 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$3
	*($11 + [12]) = $9
	*($11 + [8]) = $9
	*($11 + [16]) = ($9 + $7)
	*($11 + [32]) = ($11 + [8])
	*($11 + [40]) = $1
	*($11 + [44]) = ($1 + [8])
	*($11 + [48]) = ($1 + [16])
	*($11 + [52]) = ($1 + [32])
	*($11 + [56]) = ($1 + [40])
	*($11 + [60]) = ($1 + [56])
	*($11 + [64]) = ($1 + [72])
	*($11 + [68]) = $3
	*($11 + [72]) = ($1 + [88])
	*($11 + [76]) = ($1 + [89])
	*($11 + [80]) = $5
	*($11 + [84]) = ($1 + [104])
	*($11 + [88]) = ($1 + [105])
	CALL $58(($11 + [40]), ($11 + [32]))
	CALL db_update_i64(*($1 + [112]), $2, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL free($9)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($11 + [40]) = *($3)
	if ( (CALL memcmp(($11 + [24]), ($11 + [40]), [8]) == 0) ){ goto $label$7 }
	$9 = *($1 + [116])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$8 }
	$9 = CALL db_idx_double_find_primary(*($0), *($0 + [8]), (int_64)-6030912134838419456, ($11 + [32]), $4)
	*(($1 + [116])) = $9
	
.LABEL $label$8
	CALL db_idx_double_update($9, $2, ($11 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($11 + [96])
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $126 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$9 = (*([0] + [4]) - [48])
	$12 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$7 = *(($3 + [8]))
	$6 = *(($3 + [4]))
	$4 = *($1)
	$10 = *(*($3))
	$11 = *(($1 + [12]))
	$3 = *($1 + [8])
	if ( ((int_32)$3 == (int_32)$11) ){ goto $label$1 }
	
.LOOP $label$2:
	if ( ((int_64)$10 == (int_64)*($3)) ){ goto $label$1 }
	$3 = ($3 + [32])
	if ( ((int_32)$11 != (int_32)$3) ){ goto $label$2 }
	$3 = $11
	
.LABEL $label$1
	if ( ((int_64)*($3) != (int_64)$10) ){ goto $label$4 }
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*(($3 + [16]))), [896])
	$10 = ((int_64)*($3 + [8]) + (int_64)*($6))
	*($3 + [8]) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($3 + [8]) < (int_64)4611686018427387904), [976])
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$11 == (int_32)*(($1 + [16]))) ){ goto $label$5 }
	*($11) = *($7)
	*(($11 + [24])) = *(($7 + [24]))
	*(($11 + [16])) = *(($7 + [16]))
	*(($11 + [8])) = *(($7 + [8]))
	*(($3 = ($1 + [12]))) = (*($3) + [32])
	goto $label$3 
	
.LABEL $label$5
	CALL $127(($1 + [8]), $7)
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1008])
	$7 = *(($1 + [8]))
	$11 = *(($1 + [12]))
	$6 = ($11 - $7)
	$10 = (CASTING uint_64)(uint_32 int_32($6 >> [5]))
	$3 = [36]
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$8 }
	$7 = (((int_32)uint_32(($6 + [-32]) >> [5]) * (int_32)[28]) + $3)
	goto $label$7 
	
.LABEL $label$8
	$7 = ($3 + [-28])
	
.LABEL $label$7
	$11 = *(($1 + [20]))
	$3 = *(($1 + [24]))
	$6 = ($3 - $11)
	$10 = (CASTING uint_64)(uint_32 int_32($6 >> [5]))
	
.LOOP $label$9:
	$7 = ($7 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$9 }
	if ( ((int_32)$11 == (int_32)$3) ){ goto $label$10 }
	$7 = ((((int_32)uint_32(($6 + [-32]) >> [5]) * (int_32)[25]) + $7) + [25])
	
.LABEL $label$10
	if ( ($7 <= [513]) ){ goto $label$12 }
	$8 = CALL malloc($7)
	goto $label$11 
	
.LABEL $label$12
	$8 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$11
	*($12 + [8]) = $8
	$5 = ($8 + $7)
	*($12 + [16]) = $5
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [656])
	CALL memcpy($8, $1, [8])
	$11 = ($8 + [8])
	*($12 + [12]) = $11
	$10 = (CASTING uint_64)(uint_32 int_32((*(($1 + [12])) - *(($1 + [8]))) >> [5]))
	$9 = ($8 + [9])
	
.LOOP $label$13:
	$3 = (CASTING uint_32)(uint_64 $10)
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	$6 = ((int_64)$10) != (int_64)0
	*($12 + [32]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)($5 - $11) > (int_32)[0]), [656])
	$3 = $9
	CALL memcpy(($3 + [-1]), ($12 + [32]), [1])
	*($12 + [12]) = $3
	$9 = ($3 + [1])
	$11 = $3
	if ( $6 ){ goto $label$13 }
	$9 = *(($1 + [12]))
	$11 = *(($1 + [8]))
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$14 }
	
.LOOP $label$15:
	*($12 + [24]) = ($12 + [8])
	*($12 + [32]) = $11
	*((($12 + [32]) + [8])) = ($11 + [24])
	*($12 + [36]) = ($11 + [8])
	CALL $66(($12 + [32]), ($12 + [24]))
	$11 = ($11 + [32])
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$15 }
	$3 = *($12 + [12])
	
.LABEL $label$14
	$10 = (CASTING uint_64)(uint_32 int_32((*(($1 + [24])) - *(($1 + [20]))) >> [5]))
	$6 = (($12 + [8]) + [8])
	
.LOOP $label$16:
	$11 = (CASTING uint_32)(uint_64 $10)
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	$9 = ((int_64)$10) != (int_64)0
	*($12 + [32]) = (($9) << [7]) | ($11 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $3) > (int_32)[0]), [656])
	CALL memcpy(*($12 + [12]), ($12 + [32]), [1])
	$3 = (*($12 + [12]) + [1])
	*($12 + [12]) = $3
	if ( $9 ){ goto $label$16 }
	$11 = *(($1 + [24]))
	$3 = *(($1 + [20]))
	if ( ((int_32)$3 == (int_32)$11) ){ goto $label$17 }
	
.LOOP $label$18:
	*($12 + [24]) = ($12 + [8])
	*($12 + [32]) = $3
	*((($12 + [32]) + [8])) = ($3 + [24])
	*($12 + [36]) = ($3 + [8])
	CALL $67(($12 + [32]), ($12 + [24]))
	$3 = ($3 + [32])
	if ( ((int_32)$3 != (int_32)$11) ){ goto $label$18 }
	
.LABEL $label$17
	CALL db_update_i64(*($1 + [36]), $2, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$19 }
	CALL free($8)
	
.LABEL $label$19
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$20 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	*([0] + [4]) = ($12 + [48])
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$7 = (*([0] + [4]) - [48])
	$11 = $7
	*([0] + [4]) = $7
	$10 = *($0 + [4])
	*($1) = *(*($10))
	$2 = *($0)
	$10 = *($10 + [4])
	$5 = ($1 + [12])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($9) = *($10)
	*(($9 + [24])) = *(($10 + [24]))
	*(($9 + [16])) = *(($10 + [16]))
	*(($9 + [8])) = *(($10 + [8]))
	$9 = (*($5) + [32])
	*($5) = $9
	$4 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$4 = ($1 + [8])
	CALL $127($4, $10)
	$9 = *($5)
	
.LABEL $label$1
	$5 = *($4)
	$3 = ($9 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($3 >> [5]))
	$10 = [36]
	
.LOOP $label$3:
	$10 = ($10 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$5 }
	$5 = (((int_32)uint_32(($3 + [-32]) >> [5]) * (int_32)[28]) + $10)
	goto $label$4 
	
.LABEL $label$5
	$5 = ($10 + [-28])
	
.LABEL $label$4
	$9 = *(($1 + [20]))
	$10 = *(($1 + [24]))
	$3 = ($10 - $9)
	$8 = (CASTING uint_64)(uint_32 int_32($3 >> [5]))
	
.LOOP $label$6:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$7 }
	$5 = ((((int_32)uint_32(($3 + [-32]) >> [5]) * (int_32)[25]) + $5) + [25])
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	$6 = CALL malloc($5)
	goto $label$8 
	
.LABEL $label$9
	$6 = ($7 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$8
	*($11 + [8]) = $6
	$3 = ($6 + $5)
	*($11 + [16]) = $3
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [656])
	CALL memcpy($6, $1, [8])
	$9 = ($6 + [8])
	*($11 + [12]) = $9
	$7 = ($6 + [9])
	$8 = (CASTING uint_64)(uint_32 int_32((*(($1 + [12])) - *($4)) >> [5]))
	
.LOOP $label$10:
	$10 = (CASTING uint_32)(uint_64 $8)
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	$4 = ((int_64)$8) != (int_64)0
	*($11 + [32]) = (($4) << [7]) | ($10 & [127]))
	CALL eosio_assert(((int_32)($3 - $9) > (int_32)[0]), [656])
	$10 = $7
	CALL memcpy(($10 + [-1]), ($11 + [32]), [1])
	*($11 + [12]) = $10
	$7 = ($10 + [1])
	$9 = $10
	if ( $4 ){ goto $label$10 }
	$7 = *(($1 + [12]))
	$9 = *($1 + [8])
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$11 }
	
.LOOP $label$12:
	*($11 + [24]) = ($11 + [8])
	*($11 + [32]) = $9
	*((($11 + [32]) + [8])) = ($9 + [24])
	*($11 + [36]) = ($9 + [8])
	CALL $66(($11 + [32]), ($11 + [24]))
	$9 = ($9 + [32])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$12 }
	$10 = *($11 + [12])
	
.LABEL $label$11
	$8 = (CASTING uint_64)(uint_32 int_32((*(($1 + [24])) - *(($1 + [20]))) >> [5]))
	$4 = ($11 + [16])
	
.LOOP $label$13:
	$9 = (CASTING uint_32)(uint_64 $8)
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	$7 = ((int_64)$8) != (int_64)0
	*($11 + [32]) = (($7) << [7]) | ($9 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $10) > (int_32)[0]), [656])
	CALL memcpy(*($11 + [12]), ($11 + [32]), [1])
	$10 = (*($11 + [12]) + [1])
	*($11 + [12]) = $10
	if ( $7 ){ goto $label$13 }
	$9 = *(($1 + [24]))
	$10 = *(($1 + [20]))
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$14 }
	
.LOOP $label$15:
	*($11 + [24]) = ($11 + [8])
	*($11 + [32]) = $10
	*((($11 + [32]) + [8])) = ($10 + [24])
	*($11 + [36]) = ($10 + [8])
	CALL $67(($11 + [32]), ($11 + [24]))
	$10 = ($10 + [32])
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$15 }
	
.LABEL $label$14
	$8 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)-3838636552279642112, *(*($0 + [8])), $8, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$16 }
	CALL free($6)
	
.LABEL $label$16
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$17 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	*([0] + [4]) = ($11 + [48])
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	$2 = *($1)
	CALL $189(($5 + [32]), ($1 + [8]))
	*(($3 = (($5 + [16]) + [8]))) = *(($1 + [32]))
	*($5 + [16]) = *($1 + [24])
	*((($5 + [48]) + [8])) = *($3)
	*($5 + [48]) = *($5 + [16])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*(*($0)) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $189(($5 + [80]), ($5 + [32]))
	$4 = *((($5 + [48]) + [8]))
	*((($5 + [64]) + [8])) = $4
	*(($5 + [8])) = $4
	$4 = *($5 + [48])
	*($5 + [64]) = $4
	*($5) = $4
	CALL void $0((int_32 $2), (int_64 ($5 + [80])), (int_32 $5), (int_32 $1))
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$2 }
	CALL $185(*($5 + [88]))
	
.LABEL $label$2
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $185(*($5 + [40]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC _ZN5eosio10texas_game11texasrewardENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyNS_5assetE (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [16])
	*([0] + [4]) = $14
	*($14 + [8]) = $2
	CALL require_auth($2)
	if ( (*($1) & [1]) ){ goto $label$2 }
	$1 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($1 + [8])
	
.LABEL $label$1
	$4 = ($0 + [8])
	$9 = [-1]
	
.LOOP $label$3:
	$8 = ($1 + $9)
	$5 = ($9 + [1])
	$9 = $5
	if ( *(($8 + [1])) ){ goto $label$3 }
	$6 = (CASTING uint_64)(uint_32 $5)
	$11 = (int_64)0
	$10 = (int_64)59
	$12 = (int_64)0
	
.LOOP $label$4:
	$13 = (int_64)0
	if ( ((uint_64)$11 >= (uint_64)$6) ){ goto $label$5 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$9 = ($9 + [165])
	goto $label$6 
	
.LABEL $label$7
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$9 }
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$13 = ((int_64)$13 & (int_64)15)
	
.LABEL $label$8
	$1 = ($1 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$4 }
	$7 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	$1 = ($8 + [-24])
	$5 = ([0] - $7)
	
.LOOP $label$11:
	if ( ((int_64)*(*($1)) == (int_64)$12) ){ goto $label$10 }
	$8 = $1
	$9 = ($1 + [-24])
	$1 = $9
	if ( ((int_32)($9 + $5) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$14 }
	$8 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [160])
	if ( $8 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$1 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3838636552279642112, $12)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$12 }
	$8 = CALL $54($4, $1)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [160])
	
.LABEL $label$13
	$9 = *(($8 + [12]))
	$1 = *($8 + [8])
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$15 }
	
.LOOP $label$16:
	if ( ((int_64)*($1) == (int_64)$2) ){ goto $label$15 }
	$1 = ($1 + [32])
	if ( ((int_32)$9 != (int_32)$1) ){ goto $label$16 }
	goto $label$12 
	
.LABEL $label$15
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$12 }
	CALL eosio_assert(((int_64)*(($1 + [16])) == (int_64)*($3 + [8])), [1120])
	CALL eosio_assert(((int_64)*($1 + [8]) >= (int_64)*($3)), [1904])
	$11 = *($0)
	*($14 + [4]) = $3
	*($14) = ($14 + [8])
	CALL eosio_assert([1], [736])
	CALL $132($4, $8, $11, $14)
	
.LABEL $label$12
	*([0] + [4]) = ($14 + [16])
}

void .FUNC _ZN5eosio10texas_game9texasdealENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_ (int_32 $0, int_32 $1, int_32 $2)
{
	CALL prints([1888])
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [52]) = $1
	*($2 + [48]) = $1
	*($2 + [56]) = ($1 + $0)
	CALL $77(($2 + [48]), ($2 + [8]))
	CALL $77(($2 + [48]), ($2 + [20]))
	if ( ($0 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $131(($2 + [48]), ($2 + [8]))
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$6 }
	CALL $185(*(($2 + [28])))
	
.LABEL $label$6
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $185(*(($2 + [16])))
	
.LABEL $label$7
	*([0] + [4]) = ($2 + [64])
	return [1]
}

void .FUNC _ZN5eosio10texas_game9texasexitENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [128])
	*([0] + [4]) = $15
	CALL require_auth(*($0))
	if ( (*($1) & [1]) ){ goto $label$2 }
	$1 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($1 + [8])
	
.LABEL $label$1
	$3 = ($0 + [8])
	$8 = [-1]
	
.LOOP $label$3:
	$7 = ($1 + $8)
	$4 = ($8 + [1])
	$8 = $4
	if ( *(($7 + [1])) ){ goto $label$3 }
	$5 = (CASTING uint_64)(uint_32 $4)
	$10 = (int_64)0
	$9 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$4:
	$12 = (int_64)0
	if ( ((uint_64)$10 >= (uint_64)$5) ){ goto $label$5 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$8 = ($8 + [165])
	goto $label$6 
	
.LABEL $label$7
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$9 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$8
	$1 = ($1 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$4 }
	$13 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$13) ){ goto $label$10 }
	$1 = ($7 + [-24])
	$4 = ([0] - $13)
	
.LOOP $label$11:
	if ( ((int_64)*(*($1)) == (int_64)$11) ){ goto $label$10 }
	$7 = $1
	$8 = ($1 + [-24])
	$1 = $8
	if ( ((int_32)($8 + $4) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)$7 == (int_32)$13) ){ goto $label$14 }
	$13 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [32]) == (int_32)$3), [160])
	if ( $13 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$1 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3838636552279642112, $11)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$12 }
	$13 = CALL $54($3, $1)
	CALL eosio_assert(((int_32)*($13 + [32]) == (int_32)$3), [160])
	
.LABEL $label$13
	$8 = *(($13 + [12]))
	$1 = *($13 + [8])
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$15 }
	
.LOOP $label$16:
	if ( ((int_64)*($1) == (int_64)$2) ){ goto $label$15 }
	$1 = ($1 + [32])
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$16 }
	$1 = $8
	
.LABEL $label$15
	*($15 + [40]) = $1
	$14 = [0]
	*(($15 + [32])) = [0]
	*($15 + [16]) = (int_64)-1
	*($15 + [24]) = (int_64)0
	$10 = *($0)
	*($15) = $10
	*($15 + [8]) = $10
	*($15 + [36]) = [0]
	$1 = CALL db_find_i64($10, $10, (int_64)-6030912134838419456, $2)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$17 }
	$14 = CALL $56($15, $1)
	CALL eosio_assert(((int_32)*($14 + [108]) == (int_32)$15), [160])
	
.LABEL $label$17
	$6 = *(($0 + [120]))
	$7 = *(($0 + [124]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$18 }
	$1 = ($7 + [-24])
	$4 = ([0] - $6)
	
.LOOP $label$19:
	if ( ((int_64)*(*($1)) == (int_64)$2) ){ goto $label$18 }
	$7 = $1
	$8 = ($1 + [-24])
	$1 = $8
	if ( ((int_32)($8 + $4) != (int_32)[-24]) ){ goto $label$19 }
	
.LABEL $label$18
	$8 = ($0 + [96])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$21 }
	$1 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$8), [160])
	goto $label$20 
	
.LABEL $label$21
	$1 = [0]
	$7 = CALL db_find_i64(*(($0 + [96])), *(($0 + [104])), (int_64)-3838636559280373760, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$20 }
	$1 = CALL $40($8, $7)
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$8), [160])
	
.LABEL $label$20
	if ( ((int_32)*($15 + [40]) == (int_32)*(($13 + [12]))) ){ goto $label$22 }
	if ( ($1 == 0) ){ goto $label$23 }
	$9 = *($0)
	CALL eosio_assert([1], [736])
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$8), [784])
	CALL eosio_assert(((int_64)*(($0 + [96])) == (int_64)CALL $fimport$3()), [832])
	$10 = *($1)
	$8 = *($15 + [40])
	CALL eosio_assert(((int_64)*(($8 + [16])) == (int_64)*(($1 + [16]))), [896])
	$12 = ((int_64)*($1 + [8]) + (int_64)*($8 + [8]))
	*($1 + [8]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [976])
	CALL eosio_assert(((int_64)$10 == (int_64)*($1)), [1008])
	*($15 + [96]) = (($15 + [48]) + [28])
	*($15 + [92]) = ($15 + [48])
	*($15 + [88]) = ($15 + [48])
	*($15 + [104]) = ($15 + [88])
	*($15 + [116]) = ($1 + [8])
	*($15 + [112]) = $1
	*($15 + [120]) = ($1 + [24])
	CALL $51(($15 + [112]), ($15 + [104]))
	CALL db_update_i64(*($1 + [32]), $9, ($15 + [48]), [28])
	$1 = ($0 + [112])
	if ( (uint_64)($10 <= *($1)) ){ goto $label$23 }
	*($1) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	if ( ($14 == 0) ){ goto $label$24 }
	*($15 + [48]) = (CASTING uint_64)(uint_32 ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) - *(*($15 + [40]) + [24])))
	$10 = *($0)
	*($15 + [112]) = ($15 + [48])
	CALL eosio_assert([1], [736])
	CALL $129($15, $14, $10, ($15 + [112]))
	
.LABEL $label$24
	$10 = *($0)
	*($15 + [48]) = ($15 + [40])
	CALL eosio_assert([1], [736])
	CALL $130($3, $13, $10, ($15 + [48]))
	if ( ((int_32)*(($13 + [12])) != (int_32)*(($13 + [8]))) ){ goto $label$22 }
	CALL eosio_assert([1], [224])
	CALL eosio_assert([1], [272])
	$1 = CALL db_next_i64(*($13 + [36]), ($15 + [48]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$25 }
	CALL $54($3, $1)
	
.LABEL $label$25
	CALL $79($3, $13)
	
.LABEL $label$22
	$4 = *($15 + [24])
	if ( ($4 == 0) ){ goto $label$12 }
	$0 = ($15 + [28])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$27 }
	
.LOOP $label$28:
	$1 = ($1 + [-24])
	$8 = *($1)
	*($1) = [0]
	if ( ($8 == 0) ){ goto $label$29 }
	$7 = *($8 + [92])
	if ( ($7 == 0) ){ goto $label$30 }
	*(($8 + [96])) = $7
	CALL $185($7)
	
.LABEL $label$30
	CALL $185($8)
	
.LABEL $label$29
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$28 }
	$1 = *(($15 + [24]))
	goto $label$26 
	
.LABEL $label$27
	$1 = $4
	
.LABEL $label$26
	*($0) = $4
	CALL $185($1)
	
.LABEL $label$12
	*([0] + [4]) = ($15 + [128])
}

void .FUNC _ZN5eosio10texas_game8texasbetENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyNS_5assetE (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [64])
	*([0] + [4]) = $14
	*($14 + [56]) = $2
	CALL require_auth($2)
	if ( (*($1) & [1]) ){ goto $label$2 }
	$1 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($1 + [8])
	
.LABEL $label$1
	$4 = ($0 + [8])
	$9 = [-1]
	
.LOOP $label$3:
	$8 = ($1 + $9)
	$5 = ($9 + [1])
	$9 = $5
	if ( *(($8 + [1])) ){ goto $label$3 }
	$6 = (CASTING uint_64)(uint_32 $5)
	$11 = (int_64)0
	$10 = (int_64)59
	$12 = (int_64)0
	
.LOOP $label$4:
	$13 = (int_64)0
	if ( ((uint_64)$11 >= (uint_64)$6) ){ goto $label$5 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$9 = ($9 + [165])
	goto $label$6 
	
.LABEL $label$7
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$9 }
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$13 = ((int_64)$13 & (int_64)15)
	
.LABEL $label$8
	$1 = ($1 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$4 }
	$7 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	$1 = ($8 + [-24])
	$5 = ([0] - $7)
	
.LOOP $label$11:
	if ( ((int_64)*(*($1)) == (int_64)$12) ){ goto $label$10 }
	$8 = $1
	$9 = ($1 + [-24])
	$1 = $9
	if ( ((int_32)($9 + $5) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$14 }
	$8 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [160])
	if ( $8 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$1 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3838636552279642112, $12)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$12 }
	$8 = CALL $54($4, $1)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [160])
	
.LABEL $label$13
	CALL eosio_assert([1], [512])
	$11 = (int_64)1346979907
	$1 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$9 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$9 = [0]
	
.LABEL $label$15
	CALL eosio_assert($9, [576])
	$9 = *(($8 + [12]))
	$1 = *($8 + [8])
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$20 }
	
.LOOP $label$21:
	if ( ((int_64)*($1) == (int_64)$2) ){ goto $label$20 }
	$1 = ($1 + [32])
	if ( ((int_32)$9 != (int_32)$1) ){ goto $label$21 }
	goto $label$12 
	
.LABEL $label$20
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$12 }
	$11 = *($1 + [8])
	CALL eosio_assert(((int_64)*(($1 + [16])) == (int_64)*($3 + [8])), [1120])
	CALL eosio_assert(((int_64)$11 >= (int_64)*($3)), [1184])
	$11 = *($0)
	*($14 + [20]) = $3
	*($14 + [16]) = ($14 + [56])
	CALL eosio_assert([1], [736])
	CALL $169($4, $8, $11, ($14 + [16]))
	*(($14 + [48])) = [0]
	$11 = *($0)
	*($14 + [16]) = $11
	*($14 + [32]) = (int_64)-1
	*($14 + [40]) = (int_64)0
	*($14 + [24]) = $11
	*($14 + [52]) = [0]
	$1 = CALL db_find_i64($11, $11, (int_64)-6030912134838419456, *($14 + [56]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$22 }
	$1 = CALL $56(($14 + [16]), $1)
	CALL eosio_assert(((int_32)*($1 + [108]) == (int_32)($14 + [16])), [160])
	$11 = *($0)
	*($14 + [8]) = $3
	CALL eosio_assert([1], [736])
	CALL $170(($14 + [16]), $1, $11, ($14 + [8]))
	
.LABEL $label$22
	$5 = *($14 + [40])
	if ( ($5 == 0) ){ goto $label$12 }
	$0 = ($14 + [44])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$24 }
	
.LOOP $label$25:
	$1 = ($1 + [-24])
	$9 = *($1)
	*($1) = [0]
	if ( ($9 == 0) ){ goto $label$26 }
	$8 = *($9 + [92])
	if ( ($8 == 0) ){ goto $label$27 }
	*(($9 + [96])) = $8
	CALL $185($8)
	
.LABEL $label$27
	CALL $185($9)
	
.LABEL $label$26
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$25 }
	$1 = *(($14 + [40]))
	goto $label$23 
	
.LABEL $label$24
	$1 = $5
	
.LABEL $label$23
	*($0) = $5
	CALL $185($1)
	
.LABEL $label$12
	*([0] + [4]) = ($14 + [64])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	*(($6 = $5) + [60]) = $0
	*($6 + [48]) = *($1)
	*($6 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($5 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($6 + [40])) = (int_64)1398362884
	*($6 + [16]) = [0]
	*($6 + [8]) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = (int_64)0
	CALL eosio_assert([1], [512])
	$3 = ($6 + [24])
	$4 = (int_64)5462355
	
.LOOP $label$5:
	$5 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($5, [576])
	*($6 + [68]) = $0
	*($6 + [64]) = $0
	*($6 + [72]) = ($0 + $2)
	CALL $77(($6 + [64]), ($6 + [8]))
	CALL eosio_assert(((uint_32)(*($6 + [72]) - *($6 + [68])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($6 + [68]), [8])
	$1 = (*($6 + [68]) + [8])
	*($6 + [68]) = $1
	CALL eosio_assert(((uint_32)(*($6 + [72]) - $1) > (uint_32)[7]), [608])
	CALL memcpy(($6 + [32]), *($6 + [68]), [8])
	$1 = (*($6 + [68]) + [8])
	*($6 + [68]) = $1
	CALL eosio_assert(((uint_32)(*($6 + [72]) - $1) > (uint_32)[7]), [608])
	CALL memcpy(($6 + [40]), *($6 + [68]), [8])
	if ( ($2 <= [513]) ){ goto $label$8 }
	CALL free($0)
	
.LABEL $label$8
	*($6 + [68]) = ($6 + [48])
	*($6 + [64]) = ($6 + [60])
	CALL $168(($6 + [64]), ($6 + [8]))
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL $185(*(($6 + [16])))
	
.LABEL $label$9
	*([0] + [4]) = ($6 + [80])
	return [1]
}

void .FUNC _ZN5eosio10texas_game9texasoverENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6vectorIyNS5_IyEEEENS8_INS0_12player_pokerENS5_ISB_EEEE (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_32 $26
	int_32 $27
	int_32 $28
	$28 = (*([0] + [4]) - [288])
	*([0] + [4]) = $28
	CALL require_auth(*($0))
	if ( (*($1) & [1]) ){ goto $label$2 }
	$1 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($1 + [8])
	
.LABEL $label$1
	$12 = [-1]
	
.LOOP $label$3:
	$26 = ($1 + $12)
	$16 = ($12 + [1])
	$12 = $16
	if ( *(($26 + [1])) ){ goto $label$3 }
	$4 = (CASTING uint_64)(uint_32 $16)
	$13 = (int_64)0
	$23 = (int_64)59
	$24 = (int_64)0
	
.LOOP $label$4:
	$25 = (int_64)0
	if ( ((uint_64)$13 >= (uint_64)$4) ){ goto $label$5 }
	$12 = *($1)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$12 = ($12 + [165])
	goto $label$6 
	
.LABEL $label$7
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$9 }
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$23 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$25 = ((int_64)$25 & (int_64)15)
	
.LABEL $label$8
	$1 = ($1 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$24 = ((int_64)$25 | (int_64)$24)
	$23 = ((int_64)$23 + (int_64)-5)
	if ( ((int_64)$23 != (int_64)-6) ){ goto $label$4 }
	*($28 + [136]) = $24
	$17 = *(($0 + [32]))
	$26 = *(($0 + [36]))
	if ( ((int_32)$26 == (int_32)$17) ){ goto $label$10 }
	$1 = ($26 + [-24])
	$16 = ([0] - $17)
	
.LOOP $label$11:
	if ( ((int_64)*(*($1)) == (int_64)$24) ){ goto $label$10 }
	$26 = $1
	$12 = ($1 + [-24])
	$1 = $12
	if ( ((int_32)($12 + $16) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$5 = ($0 + [8])
	if ( ((int_32)$26 == (int_32)$17) ){ goto $label$15 }
	$6 = *(($26 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$5), [160])
	if ( $6 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$1 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3838636552279642112, $24)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$13 }
	$6 = CALL $54($5, $1)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$5), [160])
	
.LABEL $label$14
	if ( ((int_32)*($3 + [4]) == (int_32)*($3)) ){ goto $label$13 }
	if ( ((int_32)*(($6 + [24])) == (int_32)*($6 + [20])) ){ goto $label$13 }
	*(($12 = (($28 + [96]) + [32]))) = [0]
	*($28 + [112]) = (int_64)-1
	*($28 + [120]) = (int_64)0
	$13 = *($0)
	*($28 + [96]) = $13
	*($28 + [104]) = $13
	$1 = CALL db_find_i64($13, $13, (int_64)-2042756381877293056, $24)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$17 }
	$7 = CALL $139(($28 + [96]), $1)
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)($28 + [96])), [160])
	$13 = *($0)
	CALL eosio_assert([1], [736])
	CALL $140(($28 + [96]), $7, $13)
	goto $label$16 
	
.LABEL $label$17
	$13 = *($0)
	*($28 + [80]) = ($28 + [136])
	*($28 + [264]) = $13
	CALL eosio_assert(((int_64)*($28 + [96]) == (int_64)CALL $fimport$3()), [672])
	*($28 + [148]) = ($28 + [80])
	*($28 + [144]) = ($28 + [96])
	*($28 + [152]) = ($28 + [264])
	*(($1 = CALL $184([32])) + [16]) = [0]
	*($1 + [8 align=4]) = (int_64)0
	*($1 + [20]) = ($28 + [96])
	CALL $138(($28 + [144]), $1)
	*($28 + [24]) = $1
	$13 = *($1)
	*($28 + [144]) = $13
	$16 = *($1 + [24])
	*($28 + [248]) = $16
	$17 = ($28 + [124])
	$26 = *($17)
	if ( ((uint_32)$26 >= (uint_32)*($12)) ){ goto $label$19 }
	*($26 + [8]) = $13
	*($26 + [16]) = $16
	*($28 + [24]) = [0]
	*($26) = $1
	*($17) = ($26 + [24])
	goto $label$18 
	
.LABEL $label$19
	CALL $141(($28 + [120]), ($28 + [24]), ($28 + [144]), ($28 + [248]))
	
.LABEL $label$18
	$1 = *($28 + [24])
	*($28 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$20 }
	$12 = *($1 + [8])
	if ( ($12 == 0) ){ goto $label$21 }
	*(($1 + [12])) = $12
	CALL $185($12)
	
.LABEL $label$21
	CALL $185($1)
	
.LABEL $label$20
	$13 = *($28 + [136])
	$17 = *(($28 + [120]))
	$26 = *(($28 + [124]))
	if ( ((int_32)$26 == (int_32)$17) ){ goto $label$22 }
	$1 = ($26 + [-24])
	$16 = ([0] - $17)
	
.LOOP $label$23:
	if ( ((int_64)*(*($1)) == (int_64)$13) ){ goto $label$22 }
	$26 = $1
	$12 = ($1 + [-24])
	$1 = $12
	if ( ((int_32)($12 + $16) != (int_32)[-24]) ){ goto $label$23 }
	
.LABEL $label$22
	if ( ((int_32)$26 == (int_32)$17) ){ goto $label$24 }
	$7 = *(($26 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)($28 + [96])), [160])
	goto $label$16 
	
.LABEL $label$24
	$7 = [0]
	$1 = CALL db_find_i64(*($28 + [96]), *(($28 + [104])), (int_64)-2042756381877293056, $13)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$16 }
	$7 = CALL $139(($28 + [96]), $1)
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)($28 + [96])), [160])
	
.LABEL $label$16
	$13 = (int_64)0
	$12 = *(($6 + [24]))
	$26 = *(($6 + [20]))
	if ( ((int_32)$26 == (int_32)$12) ){ goto $label$25 }
	$13 = (int_64)0
	$1 = $26
	
.LOOP $label$26:
	$13 = ((int_64)*(($1 + [24])) + (int_64)$13)
	$1 = ($1 + [32])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$26 }
	
.LABEL $label$25
	*($28 + [88]) = [0]
	*($28 + [80]) = (int_64)0
	$1 = [0]
	$16 = [0]
	$26 = ($12 - $26)
	$12 = int_32($26 >> [5])
	if ( ($12 == 0) ){ goto $label$27 }
	if ( ((uint_32)$12 >= (uint_32)[134217728]) ){ goto $label$12 }
	$1 = CALL $184($26)
	*(($28 + [88])) = ($1 + ($12 << [5]))
	*($28 + [80]) = $1
	*($28 + [84]) = $1
	$26 = *(($6 + [20]))
	$12 = (*(($6 + [24])) - $26)
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$28 }
	CALL memcpy($1, $26, $12)
	$1 = (*($28 + [84]) + $12)
	*($28 + [84]) = $1
	$16 = *($28 + [80])
	goto $label$27 
	
.LABEL $label$28
	$16 = $1
	
.LABEL $label$27
	*($28 + [144]) = [20]
	CALL $143($16, $1, ($28 + [144]))
	CALL _ZN5eosio10texas_game7chippotERNSt3__16vectorINS_11player_chipENS1_9allocatorIS3_EEEEy(($28 + [64]), $1, ($28 + [80]), $13)
	*($28 + [56]) = [0]
	*($28 + [48]) = (int_64)0
	$12 = *($28 + [64])
	*($28 + [44]) = $12
	$8 = (($28 + [64]) | [4])
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$29 }
	$11 = ((int_32)$7 != (int_32)[0])
	$9 = ($0 + [48])
	$24 = (CASTING uint_64)(uint_32 $9)
	$10 = (($28 + [144]) + [104])
	$15 = (($28 + [24]) + [8])
	$18 = ($3 + [4])
	$19 = ($6 + [12])
	$20 = ($0 + [72])
	$21 = ($0 + [76])
	$22 = ($0 + [56])
	
.LOOP $label$30:
	*($15) = (int_64)344826856192
	*($28 + [24]) = (int_64)0
	CALL eosio_assert([1], [512])
	$13 = (uint_64)*($15) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$32:
	$26 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$33 }
	
.LOOP $label$34:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$31 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$34 }
	
.LABEL $label$33
	$26 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$32 }
	
.LABEL $label$31
	CALL eosio_assert($26, [576])
	$16 = ($12 + [24])
	$17 = ($12 + [20])
	$26 = *($17)
	if ( ((int_32)$26 == (int_32)*($16)) ){ goto $label$35 }
	
.LOOP $label$36:
	$12 = *($18)
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$12) ){ goto $label$37 }
	$13 = *($26)
	
.LOOP $label$38:
	if ( ((int_64)$13 == (int_64)*($1)) ){ goto $label$37 }
	$1 = ($1 + [40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$38 }
	$1 = $12
	
.LABEL $label$37
	if ( ((int_32)*(($1 + [24])) == (int_32)*($1 + [20])) ){ goto $label$39 }
	if ( ((int_32)$1 == (int_32)$12) ){ goto $label$39 }
	if ( (int_64)(*($26 + [8]) == 0) ){ goto $label$39 }
	$12 = *($28 + [52])
	if ( ((int_32)$12 == (int_32)*((($28 + [48]) + [8]))) ){ goto $label$40 }
	CALL $135($12, $1)
	*($28 + [52]) = (*($28 + [52]) + [40])
	goto $label$39 
	
.LABEL $label$40
	CALL $145(($28 + [48]), $1)
	
.LABEL $label$39
	CALL eosio_assert(((int_64)*(($26 + [16])) == (int_64)*($15)), [896])
	$13 = ((int_64)*($28 + [24]) + (int_64)*($26 + [8]))
	*($28 + [24]) = $13
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($28 + [24]) < (int_64)4611686018427387904), [976])
	$26 = ($26 + [32])
	if ( ((int_32)$26 != (int_32)*($16)) ){ goto $label$36 }
	
.LABEL $label$35
	$26 = *($3)
	if ( ((int_32)(*($18) - $26) != (int_32)[40]) ){ goto $label$41 }
	if ( ((int_32)*($28 + [52]) != (int_32)*($28 + [48])) ){ goto $label$41 }
	$12 = *($19)
	$1 = *(($6 + [8]))
	if ( ((int_32)$1 == (int_32)$12) ){ goto $label$42 }
	$13 = *($26)
	
.LOOP $label$43:
	if ( ((int_64)$13 == (int_64)*($1)) ){ goto $label$42 }
	$1 = ($1 + [32])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$43 }
	$1 = $12
	
.LABEL $label$42
	CALL eosio_assert(((int_32)$1 != (int_32)$12), [1920])
	$1 = *($3)
	$12 = *($28 + [52])
	if ( ((int_32)$12 == (int_32)*((($28 + [48]) + [8]))) ){ goto $label$44 }
	CALL $135($12, $1)
	*($28 + [52]) = (*($28 + [52]) + [40])
	goto $label$41 
	
.LABEL $label$44
	CALL $145(($28 + [48]), $1)
	
.LABEL $label$41
	if ( ((int_32)*($28 + [52]) == (int_32)*($28 + [48])) ){ goto $label$29 }
	CALL _ZN5eosio10texas_game13compare_cardsERNSt3__16vectorINS0_12player_pokerENS1_9allocatorIS3_EEEE(($28 + [8]), $0, ($28 + [48]))
	$1 = int_32((*($28 + [12]) - *($28 + [8])) >> [3])
	*($28 + [4]) = $1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [1952])
	$27 = *($28 + [4])
	if ( ($27 == 0) ){ goto $label$45 }
	$26 = [0]
	
.LOOP $label$46:
	$12 = *($16)
	$1 = *($17)
	if ( ((int_32)$1 == (int_32)$12) ){ goto $label$48 }
	$13 = *((*($28 + [8]) + ($26 << [3])))
	
.LOOP $label$49:
	if ( ((int_64)$13 == (int_64)*($1)) ){ goto $label$48 }
	$1 = ($1 + [32])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$48
	if ( ((int_32)$1 == (int_32)$12) ){ goto $label$47 }
	CALL eosio_assert(((int_64)*(($1 + [16])) == (int_64)*($15)), [1216])
	$13 = (int_64)
	*($28 + [24]) = $13(*($28 + [24]) - *($1 + [8])))
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($28 + [24]) < (int_64)4611686018427387904), [1296])
	$27 = *($28 + [4])
	
.LABEL $label$47
	$26 = ($26 + [1])
	if ( ($26 <= $27) ){ goto $label$46 }
	
.LABEL $label$45
	$25 = *($15)
	$13 = *($28 + [24])
	CALL eosio_assert([1], [1424])
	CALL eosio_assert([1], [1440])
	$23 = ((int_64)$13 / (int_64)20)
	CALL eosio_assert((uint_64)(((int_64)$23 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [512])
	$13 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$52:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$51 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$53 }
	
.LOOP $label$54:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$51 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$54 }
	
.LABEL $label$53
	$12 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$52 }
	goto $label$50 
	
.LABEL $label$51
	$12 = [0]
	
.LABEL $label$50
	CALL eosio_assert($12, [576])
	CALL eosio_assert(((int_64)$25 == (int_64)*($15)), [1216])
	$13 = (int_64)
	*($28 + [24]) = $13(*($28 + [24]) - $23))
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($28 + [24]) < (int_64)4611686018427387904), [1296])
	*($28 + [144]) = $24
	$13 = *(*(CALL $80(($28 + [144])) + [4]))
	$14 = *($20)
	$26 = *($21)
	if ( ((int_32)$26 == (int_32)$14) ){ goto $label$55 }
	$1 = ($26 + [-24])
	$27 = ([0] - $14)
	
.LOOP $label$56:
	if ( ((int_64)*(*($1)) == (int_64)$13) ){ goto $label$55 }
	$26 = $1
	$12 = ($1 + [-24])
	$1 = $12
	if ( ((int_32)($12 + $27) != (int_32)[-24]) ){ goto $label$56 }
	
.LABEL $label$55
	if ( ((int_32)$26 == (int_32)$14) ){ goto $label$58 }
	$1 = *(($26 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$9), [160])
	goto $label$57 
	
.LABEL $label$58
	$1 = [0]
	$12 = CALL db_find_i64(*($9), *($22), (int_64)-3838636613264998400, $13)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$57 }
	$1 = CALL $81($9, $12)
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$9), [160])
	
.LABEL $label$57
	$25 = *($0)
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [736])
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$9), [784])
	CALL eosio_assert(((int_64)*($9) == (int_64)CALL $fimport$3()), [832])
	$13 = *($1)
	CALL eosio_assert(((int_64)*(($1 + [56])) == (int_64)1397703940), [896])
	$23 = ((int_64)*($1 + [48]) + (int_64)$23)
	*($1 + [48]) = $23
	CALL eosio_assert(((int_64)$23 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [976])
	CALL eosio_assert(((int_64)$13 == (int_64)*($1)), [1008])
	*((($28 + [248]) + [8])) = $10
	*($28 + [252]) = ($28 + [144])
	*($28 + [248]) = ($28 + [144])
	CALL eosio_assert([1], [656])
	CALL memcpy(*($28 + [252]), $1, [8])
	*($28 + [252]) = (*($28 + [252]) + [8])
	*($28 + [280]) = ($28 + [248])
	*(($12 = (($28 + [264]) + [8]))) = ($1 + [40])
	*($28 + [268]) = ($1 + [24])
	*($28 + [264]) = ($1 + [8])
	CALL $83(($28 + [264]), ($28 + [280]))
	*($28 + [280]) = ($28 + [248])
	*($12) = ($1 + [80])
	*((($28 + [264]) + [12])) = ($1 + [96])
	*($28 + [268]) = ($1 + [64])
	*($28 + [264]) = ($1 + [48])
	CALL $84(($28 + [264]), ($28 + [280]))
	CALL db_update_i64(*($1 + [108]), $25, ($28 + [144]), [104])
	$1 = ($0 + [64])
	if ( (uint_64)($13 <= *($1)) ){ goto $label$59 }
	*($1) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$59
	$26 = *($28 + [8])
	*($28 + [264]) = $26
	if ( ((int_32)$26 == (int_32)*($28 + [12])) ){ goto $label$60 }
	
.LOOP $label$61:
	$12 = *($16)
	$1 = *($17)
	if ( ((int_32)$1 == (int_32)$12) ){ goto $label$64 }
	$13 = *($26)
	
.LOOP $label$65:
	if ( ((int_64)$13 == (int_64)*($1)) ){ goto $label$64 }
	$1 = ($1 + [32])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$65 }
	*($28 + [248]) = $12
	$13 = *($0)
	goto $label$63 
	
.LABEL $label$64
	*($28 + [248]) = $1
	$13 = *($0)
	if ( ((int_32)$1 == (int_32)$12) ){ goto $label$63 }
	*(($1 = (($28 + [144]) + [8]))) = ($28 + [4])
	*(($12 = (($28 + [144]) + [12]))) = ($28 + [248])
	*($28 + [148]) = ($28 + [24])
	*($28 + [144]) = ($28 + [264])
	CALL eosio_assert([1], [736])
	CALL $149($5, $6, $13, ($28 + [144]))
	$13 = *($0)
	*($1) = ($28 + [4])
	*($12) = ($28 + [248])
	*($28 + [148]) = ($28 + [24])
	*($28 + [144]) = ($28 + [264])
	CALL eosio_assert($11, [736])
	CALL $150(($28 + [96]), $7, $13, ($28 + [144]))
	goto $label$62 
	
.LABEL $label$63
	*(($1 = (($28 + [144]) + [8]))) = ($28 + [4])
	*($28 + [148]) = ($28 + [24])
	*($28 + [144]) = ($28 + [264])
	CALL eosio_assert([1], [736])
	CALL $147($5, $6, $13, ($28 + [144]))
	$13 = *($0)
	*($1) = ($28 + [4])
	*($28 + [148]) = ($28 + [24])
	*($28 + [144]) = ($28 + [264])
	CALL eosio_assert($11, [736])
	CALL $148(($28 + [96]), $7, $13, ($28 + [144]))
	
.LABEL $label$62
	$26 = (*($28 + [264]) + [8])
	*($28 + [264]) = $26
	if ( ((int_32)$26 != (int_32)*($28 + [12])) ){ goto $label$61 }
	
.LABEL $label$60
	$16 = *($28 + [48])
	$1 = *($28 + [52])
	if ( ((int_32)$1 == (int_32)$16) ){ goto $label$66 }
	$26 = ([0] - $16)
	$1 = ($1 + [-32])
	
.LOOP $label$67:
	$12 = *(($1 + [12]))
	if ( ($12 == 0) ){ goto $label$68 }
	*(($1 + [16])) = $12
	CALL $185($12)
	
.LABEL $label$68
	$12 = *($1)
	if ( ($12 == 0) ){ goto $label$69 }
	*(($1 + [4])) = $12
	CALL $185($12)
	
.LABEL $label$69
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $26) != (int_32)[-32]) ){ goto $label$67 }
	
.LABEL $label$66
	*($28 + [52]) = $16
	$1 = *($28 + [8])
	if ( ($1 == 0) ){ goto $label$70 }
	*($28 + [12]) = $1
	CALL $185($1)
	
.LABEL $label$70
	$26 = *($28 + [44])
	$1 = *($26 + [4])
	if ( ($1 == 0) ){ goto $label$72 }
	
.LOOP $label$73:
	$12 = $1
	$1 = *($12)
	if ( $1 ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$72
	$12 = *($26 + [8])
	if ( ((int_32)*($12) == (int_32)$26) ){ goto $label$71 }
	$26 = ($26 + [8])
	
.LOOP $label$74:
	$1 = *($26)
	$26 = ($1 + [8])
	$12 = *($1 + [8])
	if ( ((int_32)$1 != (int_32)*($12)) ){ goto $label$74 }
	
.LABEL $label$71
	*($28 + [44]) = $12
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$30 }
	
.LABEL $label$29
	$13 = *($0)
	CALL eosio_assert([1], [736])
	CALL $151($5, $6, $13)
	$16 = *($28 + [48])
	if ( ($16 == 0) ){ goto $label$75 }
	$1 = *($28 + [52])
	if ( ((int_32)$1 == (int_32)$16) ){ goto $label$77 }
	$26 = ([0] - $16)
	$1 = ($1 + [-32])
	
.LOOP $label$78:
	$12 = *(($1 + [12]))
	if ( ($12 == 0) ){ goto $label$79 }
	*(($1 + [16])) = $12
	CALL $185($12)
	
.LABEL $label$79
	$12 = *($1)
	if ( ($12 == 0) ){ goto $label$80 }
	*(($1 + [4])) = $12
	CALL $185($12)
	
.LABEL $label$80
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $26) != (int_32)[-32]) ){ goto $label$78 }
	$1 = *($28 + [48])
	goto $label$76 
	
.LABEL $label$77
	$1 = $16
	
.LABEL $label$76
	*($28 + [52]) = $16
	CALL $185($1)
	
.LABEL $label$75
	CALL $152(($28 + [64]), *($28 + [68]))
	$1 = *($28 + [80])
	if ( ($1 == 0) ){ goto $label$81 }
	*($28 + [84]) = $1
	CALL $185($1)
	
.LABEL $label$81
	$16 = *($28 + [120])
	if ( ($16 == 0) ){ goto $label$13 }
	$0 = ($28 + [124])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$16) ){ goto $label$83 }
	
.LOOP $label$84:
	$1 = ($1 + [-24])
	$12 = *($1)
	*($1) = [0]
	if ( ($12 == 0) ){ goto $label$85 }
	$26 = *($12 + [8])
	if ( ($26 == 0) ){ goto $label$86 }
	*(($12 + [12])) = $26
	CALL $185($26)
	
.LABEL $label$86
	CALL $185($12)
	
.LABEL $label$85
	if ( ((int_32)$16 != (int_32)$1) ){ goto $label$84 }
	$1 = *(($28 + [120]))
	goto $label$82 
	
.LABEL $label$83
	$1 = $16
	
.LABEL $label$82
	*($0) = $16
	CALL $185($1)
	
.LABEL $label$13
	*([0] + [4]) = ($28 + [288])
	return (unreachable)
	
.LABEL $label$12
	CALL $188(($28 + [80]))
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	*(($5 = $3) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)0
	*(($5 + [40])) = [0]
	*($5 + [8]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $1
	*($5 + [64]) = $1
	*($5 + [72]) = ($1 + $0)
	CALL $77(($5 + [64]), ($5 + [8]))
	CALL $63(($5 + [64]), ($5 + [20]))
	CALL $133(($5 + [64]), ($5 + [32]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $134(($5 + [64]), ($5 + [8]))
	$2 = *($5 + [32])
	if ( ($2 == 0) ){ goto $label$5 }
	$4 = ($5 + [36])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$7 }
	$3 = ([0] - $2)
	$1 = ($1 + [-32])
	
.LOOP $label$8:
	$0 = *(($1 + [12]))
	if ( ($0 == 0) ){ goto $label$9 }
	*(($1 + [16])) = $0
	CALL $185($0)
	
.LABEL $label$9
	$0 = *($1)
	if ( ($0 == 0) ){ goto $label$10 }
	*(($1 + [4])) = $0
	CALL $185($0)
	
.LABEL $label$10
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $3) != (int_32)[-32]) ){ goto $label$8 }
	$1 = *(($5 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$1 = $2
	
.LABEL $label$6
	*($4) = $2
	CALL $185($1)
	
.LABEL $label$5
	$1 = *(($5 + [20]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($5 + [24])) = $1
	CALL $185($1)
	
.LABEL $label$11
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL $185(*(($5 + [16])))
	
.LABEL $label$12
	*([0] + [4]) = ($5 + [80])
	return [1]
}

void .FUNC $185 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*($2 + [16]) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [52]) = $1
	*($2 + [48]) = $1
	*($2 + [56]) = ($1 + $0)
	CALL $77(($2 + [48]), ($2 + [8]))
	CALL eosio_assert(((uint_32)(*($2 + [56]) - *($2 + [52])) > (uint_32)[7]), [608])
	CALL memcpy(($2 + [24]), *($2 + [52]), [8])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $128(($2 + [48]), ($2 + [8]))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL $185(*(($2 + [16])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

void .FUNC _ZN5eosio10texas_game9texasjoinEyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_5assetE (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [128])
	*([0] + [4]) = $15
	*($15 + [40]) = $1
	CALL require_auth(*($0))
	$8 = *(($0 + [120]))
	$7 = *(($0 + [124]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$1 }
	$10 = ($7 + [-24])
	$5 = ([0] - $8)
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$1) ){ goto $label$1 }
	$7 = $10
	$9 = ($10 + [-24])
	$10 = $9
	if ( ((int_32)($9 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [96])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$5 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [28]) == (int_32)$4), [160])
	if ( $8 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$10 = CALL db_find_i64(*(($0 + [96])), *(($0 + [104])), (int_64)-3838636559280373760, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $40($4, $10)
	CALL eosio_assert(((int_32)*($8 + [28]) == (int_32)$4), [160])
	
.LABEL $label$4
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($8 + [16]))), [1120])
	CALL eosio_assert(((int_64)*($3) <= (int_64)*($8 + [8])), [1856])
	if ( (*($2) & [1]) ){ goto $label$7 }
	$10 = ($2 + [1])
	goto $label$6 
	
.LABEL $label$7
	$10 = *($2 + [8])
	
.LABEL $label$6
	$9 = [-1]
	
.LOOP $label$8:
	$7 = ($10 + $9)
	$5 = ($9 + [1])
	$9 = $5
	if ( *(($7 + [1])) ){ goto $label$8 }
	$6 = (CASTING uint_64)(uint_32 $5)
	$12 = (int_64)0
	$11 = (int_64)59
	$13 = (int_64)0
	
.LOOP $label$9:
	$14 = (int_64)0
	if ( ((uint_64)$12 >= (uint_64)$6) ){ goto $label$10 }
	$9 = *($10)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$9 = ($9 + [165])
	goto $label$11 
	
.LABEL $label$12
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$14 }
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	goto $label$13 
	
.LABEL $label$14
	$14 = ((int_64)$14 & (int_64)15)
	
.LABEL $label$13
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$9 }
	*($15 + [32]) = $13
	$2 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$15 }
	$10 = ($7 + [-24])
	$5 = ([0] - $2)
	
.LOOP $label$16:
	if ( ((int_64)*(*($10)) == (int_64)$13) ){ goto $label$15 }
	$7 = $10
	$9 = ($10 + [-24])
	$10 = $9
	if ( ((int_32)($9 + $5) != (int_32)[-24]) ){ goto $label$16 }
	
.LABEL $label$15
	$5 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$18 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$5), [160])
	goto $label$17 
	
.LABEL $label$18
	$7 = [0]
	$10 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3838636552279642112, $13)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$17 }
	$7 = CALL $54($5, $10)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$5), [160])
	
.LABEL $label$17
	*(($15 + [16])) = (int_64)344826856192
	*($15 + [8]) = (int_64)0
	CALL eosio_assert([1], [512])
	$12 = (int_64)1346979907
	$10 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	
.LOOP $label$23:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$23 }
	
.LABEL $label$22
	$9 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$9 = [0]
	
.LABEL $label$19
	CALL eosio_assert($9, [576])
	*(($15 + [20])) = *(($3 + [12]))
	*(($15 + [16])) = *(($3 + [8]))
	*(($15 + [12])) = *(($3 + [4]))
	*($15) = $1
	*($15 + [8]) = *($3)
	*($15 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$12 = *($0)
	if ( ($7 == 0) ){ goto $label$25 }
	*($15 + [52]) = $3
	*($15 + [48]) = ($15 + [40])
	*($15 + [56]) = $15
	CALL eosio_assert([1], [736])
	CALL $126($5, $7, $12, ($15 + [48]))
	goto $label$24 
	
.LABEL $label$25
	*($15 + [92]) = $15
	*($15 + [88]) = ($15 + [32])
	*($15 + [104]) = $12
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$3()), [672])
	*($15 + [48]) = $5
	*($15 + [52]) = ($15 + [88])
	*($15 + [56]) = ($15 + [104])
	*(($10 = CALL $184([48])) + [8 align=4]) = (int_64)0
	*($10 + [16 align=4]) = (int_64)0
	*($10 + [24 align=4]) = (int_64)0
	*($10 + [32]) = $5
	CALL $125(($15 + [48]), $10)
	*($15 + [120]) = $10
	$12 = *($10)
	*($15 + [48]) = $12
	$7 = *($10 + [36])
	*($15 + [116]) = $7
	$5 = ($0 + [36])
	$9 = *($5)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [40]))) ){ goto $label$27 }
	*($9 + [8]) = $12
	*($9 + [16]) = $7
	*($15 + [120]) = [0]
	*($9) = $10
	*($5) = ($9 + [24])
	goto $label$26 
	
.LABEL $label$27
	CALL $70(($0 + [32]), ($15 + [120]), ($15 + [48]), ($15 + [116]))
	
.LABEL $label$26
	$10 = *($15 + [120])
	*($15 + [120]) = [0]
	if ( ($10 == 0) ){ goto $label$24 }
	$9 = *($10 + [20])
	if ( ($9 == 0) ){ goto $label$28 }
	*(($10 + [24])) = $9
	CALL $185($9)
	
.LABEL $label$28
	$9 = *($10 + [8])
	if ( ($9 == 0) ){ goto $label$29 }
	*(($10 + [12])) = $9
	CALL $185($9)
	
.LABEL $label$29
	CALL $185($10)
	
.LABEL $label$24
	$11 = *($0)
	CALL eosio_assert([1], [736])
	CALL eosio_assert(((int_32)*($8 + [28]) == (int_32)$4), [784])
	CALL eosio_assert(((int_64)*(($0 + [96])) == (int_64)CALL $fimport$3()), [832])
	$12 = *($8)
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)*(($8 + [16]))), [1216])
	$14 = (int_64)
	*($8 + [8]) = $14(*($8 + [8]) - *($3)))
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($8 + [8]) < (int_64)4611686018427387904), [1296])
	CALL eosio_assert(((int_64)$12 == (int_64)*($8)), [1008])
	*($15 + [96]) = (($15 + [48]) + [28])
	*($15 + [92]) = ($15 + [48])
	*($15 + [88]) = ($15 + [48])
	*($15 + [120]) = ($15 + [88])
	*($15 + [108]) = ($8 + [8])
	*($15 + [104]) = $8
	*($15 + [112]) = ($8 + [24])
	CALL $51(($15 + [104]), ($15 + [120]))
	CALL db_update_i64(*($8 + [32]), $11, ($15 + [48]), [28])
	$10 = ($0 + [112])
	if ( (uint_64)($12 <= *($10)) ){ goto $label$3 }
	*($10) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($15 + [128])
}

int_32 .FUNC $184 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10524])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $187 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $184(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $185($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $186 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $181([2024], $0)
}

void .FUNC _ZN5eosio10texas_game9culactiveEy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	float_64 $8
	int_64 $9
	float_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [192])
	*([0] + [4]) = $12
	*(($12 + [40])) = [0]
	*($12 + [24]) = (int_64)-1
	*($12 + [32]) = (int_64)0
	$9 = *($0)
	*($12 + [8]) = $9
	*($12 + [16]) = $9
	*($12 + [44]) = [0]
	$11 = CALL db_find_i64($9, $9, (int_64)-6030912134838419456, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $56(($12 + [8]), $11)
	CALL eosio_assert(((int_32)*($7 + [108]) == (int_32)($12 + [8])), [160])
	*($12) = (int_64)0
	$2 = *(($7 + [24]))
	$1 = *($7 + [16])
	$9 = *($7 + [8])
	if ( ((int_64)$9 == (int_64)0) ){ goto $label$5 }
	if ( ((uint_64)$9 <= (uint_64)(int_64)18000) ){ goto $label$4 }
	$9 = ((uint_64)((int_64)$9 + (int_64)-18000) / (uint_64)(int_64)3600)
	if ( ((CASTING uint_32)(uint_64 $9) == 0) ){ goto $label$3 }
	$9 = (int_64)((int_64)$9 << (int_64)32) >> (int_64)32)
	$10 = (float_64)1e3
	
.LOOP $label$6:
	$10 = ((float_64)$10 + (float_64)((float_64)CALL pow((float_64)0.5, (CASTING float_64)(uint_64 $9)) * (float_64)(float_64)100))
	$9 = ((int_64)$9 + (int_64)-1)
	if ( ((int_64)($9 == 0) == 0) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$5
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	
.LABEL $label$4
	$10 = (CASTING float_64)(uint_64 ((int_64)((uint_64)$9 / (uint_64)(int_64)1800) * (int_64)100))
	goto $label$2 
	
.LABEL $label$3
	$10 = (float_64)1e3
	
.LABEL $label$2
	$10 = ((float_64)$10 * (float_64)(float_64)0.38)
	*($12) = $10
	CALL eosio_assert([1], [512])
	$9 = (int_64)5459781
	$11 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$6 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [576])
	CALL eosio_assert(((int_64)$2 == (int_64)1397703940), [1120])
	if ( ((int_64)$1 > (int_64)5000000) ){ goto $label$13 }
	$8 = (CASTING float_64)(int_64 ((int_64)$1 / (int_64)10000))
	$10 = ((float_64)((float_64)((float_64)$8 + (float_64)$8) * (float_64)(float_64)0.62) + (float_64)$10)
	goto $label$12 
	
.LABEL $label$13
	$9 = ((int_64)((int_64)$1 + (int_64)-5000000) / (int_64)1000000)
	if ( ((CASTING uint_32)(uint_64 $9) == 0) ){ goto $label$15 }
	$9 = (int_64)((int_64)$9 << (int_64)32) >> (int_64)32)
	$10 = (float_64)1e3
	
.LOOP $label$16:
	$10 = ((float_64)$10 + (float_64)((float_64)CALL pow((float_64)0.5, (CASTING float_64)(uint_64 $9)) * (float_64)(float_64)0.5))
	$9 = ((int_64)$9 + (int_64)-1)
	if ( ((int_64)$9 != (int_64)0) ){ goto $label$16 }
	$8 = ((float_64)$10 * (float_64)(float_64)0.62)
	$10 = *($12)
	goto $label$14 
	
.LABEL $label$15
	$8 = (float_64)620
	
.LABEL $label$14
	$10 = ((float_64)$10 + (float_64)$8)
	
.LABEL $label$12
	*($12) = $10
	$9 = *($0)
	*($12 + [48]) = $12
	CALL eosio_assert([1], [736])
	CALL $123(($12 + [8]), $7, $9, ($12 + [48]))
	$10 = *($12)
	if ( (((float_64)$10 <= (float_64)(float_64)0) | ((float_64)$10 != (float_64)$10)) ){ goto $label$1 }
	$3 = ($0 + [48])
	*($12 + [48]) = (CASTING uint_64)(uint_32 $3)
	$9 = *(*(CALL $80(($12 + [48])) + [4]))
	$4 = *(($0 + [72]))
	$6 = *(($0 + [76]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$17 }
	$11 = ($6 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$18:
	if ( ((int_64)*(*($11)) == (int_64)$9) ){ goto $label$17 }
	$6 = $11
	$7 = ($11 + [-24])
	$11 = $7
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$18 }
	
.LABEL $label$17
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$20 }
	$11 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [104]) == (int_32)$3), [160])
	goto $label$19 
	
.LABEL $label$20
	$11 = [0]
	$7 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-3838636613264998400, $9)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$19 }
	$11 = CALL $81($3, $7)
	CALL eosio_assert(((int_32)*($11 + [104]) == (int_32)$3), [160])
	
.LABEL $label$19
	$7 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($7, [1840])
	$1 = *($0)
	CALL eosio_assert($7, [736])
	CALL eosio_assert(((int_32)*($11 + [104]) == (int_32)$3), [784])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$3()), [832])
	*(($7 = ($11 + [40]))) = ((int_64)*($7) + (int_64)1)
	$9 = *($11)
	CALL eosio_assert([1], [1008])
	*($12 + [160]) = (($12 + [48]) + [104])
	*($12 + [156]) = ($12 + [48])
	*($12 + [152]) = ($12 + [48])
	CALL eosio_assert([1], [656])
	CALL memcpy(*($12 + [156]), $11, [8])
	*($12 + [156]) = (*($12 + [156]) + [8])
	*($12 + [184]) = ($12 + [152])
	*($12 + [172]) = ($11 + [24])
	*($12 + [168]) = ($11 + [8])
	*($12 + [176]) = $7
	CALL $83(($12 + [168]), ($12 + [184]))
	*($12 + [184]) = ($12 + [152])
	*($12 + [172]) = ($11 + [64])
	*($12 + [168]) = ($11 + [48])
	*($12 + [176]) = ($11 + [80])
	*($12 + [180]) = ($11 + [96])
	CALL $84(($12 + [168]), ($12 + [184]))
	CALL db_update_i64(*($11 + [108]), $1, ($12 + [48]), [104])
	$11 = ($0 + [64])
	if ( (uint_64)($9 <= *($11)) ){ goto $label$1 }
	*($11) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$6 = *($12 + [32])
	if ( ($6 == 0) ){ goto $label$21 }
	$5 = ($12 + [36])
	$11 = *($5)
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$23 }
	
.LOOP $label$24:
	$11 = ($11 + [-24])
	$7 = *($11)
	*($11) = [0]
	if ( ($7 == 0) ){ goto $label$25 }
	$0 = *($7 + [92])
	if ( ($0 == 0) ){ goto $label$26 }
	*(($7 + [96])) = $0
	CALL $185($0)
	
.LABEL $label$26
	CALL $185($7)
	
.LABEL $label$25
	if ( ((int_32)$6 != (int_32)$11) ){ goto $label$24 }
	$11 = *(($12 + [32]))
	goto $label$22 
	
.LABEL $label$23
	$11 = $6
	
.LABEL $label$22
	*($5) = $6
	CALL $185($11)
	
.LABEL $label$21
	*([0] + [4]) = ($12 + [192])
}

void .FUNC _ZN5eosio10texas_game9culminingEv (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 ($1 + [48]))
	*($8 + [40]) = $6
	$1 = *(CALL $80(($8 + [40])) + [4])
	$4 = *(($1 + [40]))
	$3 = *(($1 + [16]))
	$2 = *($1 + [8])
	*($8 + [40]) = $6
	$1 = *(CALL $80(($8 + [40])) + [4])
	*($0) = (int_64)0
	*($0 + [8]) = (int_64)1129334020
	$5 = *($1)
	CALL eosio_assert([1], [512])
	$1 = [0]
	$6 = (int_64)4411461
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [576])
	if ( (int_64)($4 == 0) ){ goto $label$6 }
	if ( (uint_64)($5 <= (int_64)99) ){ goto $label$8 }
	CALL __multi3(($8 + [8]), ((uint_64)$4 / (uint_64)(int_64)3), (int_64)0, $2, (int_64)$2 >> (int_64)63))
	$4 = *(($8 + [16]))
	$6 = *($8 + [8])
	CALL eosio_assert(( (uint_64)($6 <= (int_64)4611686018427387904) ? ((int_64)$4 < (int_64)0) : (int_64)($4 == 0) ), [1472])
	CALL eosio_assert(( ((uint_64)$6 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$4 > (int_64)-1) : ((int_64)$4 == (int_64)-1) ), [1504])
	goto $label$7 
	
.LABEL $label$8
	if ( (uint_64)($5 <= (int_64)66) ){ goto $label$9 }
	CALL __multi3(($8 + [24]), ((uint_64)((int_64)$4 << (int_64)1) / (uint_64)(int_64)3), (int_64)0, $2, (int_64)$2 >> (int_64)63))
	$4 = *(($8 + [32]))
	$6 = *($8 + [24])
	CALL eosio_assert(( (uint_64)($6 <= (int_64)4611686018427387904) ? ((int_64)$4 < (int_64)0) : (int_64)($4 == 0) ), [1472])
	CALL eosio_assert(( ((uint_64)$6 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$4 > (int_64)-1) : ((int_64)$4 == (int_64)-1) ), [1504])
	goto $label$7 
	
.LABEL $label$9
	CALL eosio_assert([1], [1424])
	CALL eosio_assert((((int_64)$2 != (int_64)-9223372036854775808) | ((int_64)$4 != (int_64)-1)), [1440])
	$6 = ((int_64)$2 / (int_64)$4)
	
.LABEL $label$7
	*($0) = $6
	*(($0 + [8])) = $3
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $114 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$8 = (*([0] + [4]) - [64])
	$12 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$4 = *($1)
	$10 = *(($1 + [24]))
	$11 = *($1 + [20])
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$3 }
	$9 = *(*($3))
	
.LOOP $label$4:
	if ( ((int_64)$9 == (int_64)*($11)) ){ goto $label$3 }
	$11 = ($11 + [32])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$2 }
	$10 = *($3 + [4])
	CALL eosio_assert(((int_64)*($10 + [8]) == (int_64)*(($11 + [16]))), [896])
	$9 = ((int_64)*($11 + [8]) + (int_64)*($10))
	*($11 + [8]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($11 + [8]) < (int_64)4611686018427387904), [976])
	*($11 + [24]) = [1]
	goto $label$1 
	
.LABEL $label$2
	$5 = ($1 + [20])
	*(($12 + [40])) = (int_64)344826856192
	*($12 + [32]) = (int_64)0
	CALL eosio_assert([1], [512])
	$9 = (int_64)1346979907
	$11 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$10 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$10 = [0]
	
.LABEL $label$5
	CALL eosio_assert($10, [576])
	*($12 + [48]) = [0]
	*($12 + [24]) = *(*($3))
	$11 = *($3 + [4])
	*(($12 + [44])) = *(($11 + [12]))
	*(($6 = (($12 + [24]) + [16]))) = *(($11 + [8]))
	*((($12 + [24]) + [12])) = *(($11 + [4]))
	*($12 + [32]) = *($11)
	*($12 + [48]) = [1]
	$10 = ($1 + [24])
	$11 = *($10)
	if ( ((int_32)$11 == (int_32)*(($1 + [28]))) ){ goto $label$10 }
	*($11) = *($12 + [24])
	*(($11 + [24])) = *((($12 + [24]) + [24]))
	*(($11 + [16])) = *($6)
	*(($11 + [8])) = *((($12 + [24]) + [8]))
	*($10) = (*($10) + [32])
	goto $label$1 
	
.LABEL $label$10
	CALL $65($5, ($12 + [24]))
	
.LABEL $label$1
	$6 = ($1 + [12])
	$10 = *($6)
	$11 = *($1 + [8])
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$11 }
	$9 = *(*($3))
	
.LOOP $label$12:
	if ( ((int_64)$9 == (int_64)*($11)) ){ goto $label$11 }
	$11 = ($11 + [32])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$12 }
	$11 = $10
	
.LABEL $label$11
	*($11 + [8]) = (int_64)0
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1008])
	$3 = *($1 + [8])
	$10 = *($6)
	$6 = ($10 - $3)
	$9 = (CASTING uint_64)(uint_32 int_32($6 >> [5]))
	$11 = [36]
	
.LOOP $label$13:
	$11 = ($11 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$13 }
	if ( ((int_32)$3 == (int_32)$10) ){ goto $label$15 }
	$3 = (((int_32)uint_32(($6 + [-32]) >> [5]) * (int_32)[28]) + $11)
	goto $label$14 
	
.LABEL $label$15
	$3 = ($11 + [-28])
	
.LABEL $label$14
	$10 = *(($1 + [20]))
	$11 = *(($1 + [24]))
	$6 = ($11 - $10)
	$9 = (CASTING uint_64)(uint_32 int_32($6 >> [5]))
	
.LOOP $label$16:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$17 }
	$3 = ((((int_32)uint_32(($6 + [-32]) >> [5]) * (int_32)[25]) + $3) + [25])
	
.LABEL $label$17
	if ( ($3 <= [513]) ){ goto $label$19 }
	$7 = CALL malloc($3)
	goto $label$18 
	
.LABEL $label$19
	$7 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$18
	*($12 + [8]) = $7
	$5 = ($7 + $3)
	*($12 + [16]) = $5
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [656])
	CALL memcpy($7, $1, [8])
	$10 = ($7 + [8])
	*($12 + [12]) = $10
	$9 = (CASTING uint_64)(uint_32 int_32((*(($1 + [12])) - *(($1 + [8]))) >> [5]))
	$8 = ($7 + [9])
	
.LOOP $label$20:
	$11 = (CASTING uint_32)(uint_64 $9)
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	$6 = ((int_64)$9) != (int_64)0
	*($12 + [24]) = (($6) << [7]) | ($11 & [127]))
	CALL eosio_assert(((int_32)($5 - $10) > (int_32)[0]), [656])
	$11 = $8
	CALL memcpy(($11 + [-1]), ($12 + [24]), [1])
	*($12 + [12]) = $11
	$8 = ($11 + [1])
	$10 = $11
	if ( $6 ){ goto $label$20 }
	$8 = *(($1 + [12]))
	$10 = *(($1 + [8]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$21 }
	
.LOOP $label$22:
	*($12 + [56]) = ($12 + [8])
	*($12 + [24]) = $10
	*((($12 + [24]) + [8])) = ($10 + [24])
	*($12 + [28]) = ($10 + [8])
	CALL $66(($12 + [24]), ($12 + [56]))
	$10 = ($10 + [32])
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$22 }
	$11 = *($12 + [12])
	
.LABEL $label$21
	$9 = (CASTING uint_64)(uint_32 int_32((*(($1 + [24])) - *(($1 + [20]))) >> [5]))
	$6 = (($12 + [8]) + [8])
	
.LOOP $label$23:
	$10 = (CASTING uint_32)(uint_64 $9)
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	$8 = ((int_64)$9) != (int_64)0
	*($12 + [24]) = (($8) << [7]) | ($10 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $11) > (int_32)[0]), [656])
	CALL memcpy(*($12 + [12]), ($12 + [24]), [1])
	$11 = (*($12 + [12]) + [1])
	*($12 + [12]) = $11
	if ( $8 ){ goto $label$23 }
	$10 = *(($1 + [24]))
	$11 = *(($1 + [20]))
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$24 }
	
.LOOP $label$25:
	*($12 + [56]) = ($12 + [8])
	*($12 + [24]) = $11
	*((($12 + [24]) + [8])) = ($11 + [24])
	*($12 + [28]) = ($11 + [8])
	CALL $67(($12 + [24]), ($12 + [56]))
	$11 = ($11 + [32])
	if ( ((int_32)$11 != (int_32)$10) ){ goto $label$25 }
	
.LABEL $label$24
	CALL db_update_i64(*($1 + [36]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$26 }
	CALL free($7)
	
.LABEL $label$26
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$27 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$27
	*([0] + [4]) = ($12 + [64])
}

void .FUNC $115 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [96])
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*(($1 + [108])) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$4 = ($1 + [80])
	*(($12 = $13) + [24]) = *($4)
	$5 = *($1)
	$6 = *(*($3))
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [512])
	$11 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$10 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [576])
	CALL eosio_assert(((int_64)*(($1 + [24])) == (int_64)1397703940), [896])
	$11 = ((int_64)*($1 + [16]) + (int_64)$6)
	*($1 + [16]) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [976])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [1008])
	$7 = ($1 + [92])
	$8 = *($1 + [92])
	$10 = *(($1 + [96]))
	$9 = ($10 - $8)
	$11 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	$3 = [90]
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$7 }
	$3 = (($9 & [-8]) + $3)
	
.LABEL $label$7
	$10 = ($3 + [2])
	if ( ($10 <= [513]) ){ goto $label$9 }
	$3 = CALL malloc($10)
	goto $label$8 
	
.LABEL $label$9
	$3 = ($13 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$8
	*($12 + [12]) = $3
	*($12 + [8]) = $3
	*($12 + [16]) = ($3 + $10)
	*($12 + [32]) = ($12 + [8])
	*($12 + [40]) = $1
	*($12 + [44]) = ($1 + [8])
	*($12 + [48]) = ($1 + [16])
	*($12 + [52]) = ($1 + [32])
	*($12 + [56]) = ($1 + [40])
	*($12 + [60]) = ($1 + [56])
	*($12 + [64]) = ($1 + [72])
	*($12 + [68]) = $4
	*($12 + [72]) = ($1 + [88])
	*($12 + [76]) = ($1 + [89])
	*($12 + [80]) = $7
	*($12 + [84]) = ($1 + [104])
	*($12 + [88]) = ($1 + [105])
	CALL $58(($12 + [40]), ($12 + [32]))
	CALL db_update_i64(*($1 + [112]), $2, $3, $10)
	if ( ($10 <= [513]) ){ goto $label$10 }
	CALL free($3)
	
.LABEL $label$10
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($12 + [40]) = *($4)
	if ( (CALL memcmp(($12 + [24]), ($12 + [40]), [8]) == 0) ){ goto $label$12 }
	$3 = *($1 + [116])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$13 }
	$3 = CALL db_idx_double_find_primary(*($0), *($0 + [8]), (int_64)-6030912134838419456, ($12 + [32]), $5)
	*(($1 + [116])) = $3
	
.LABEL $label$13
	CALL db_idx_double_update($3, $2, ($12 + [40]))
	
.LABEL $label$12
	*([0] + [4]) = ($12 + [96])
}

void .FUNC $112 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = *([0] + [4])
	$10 = $2
	$7 = (int_64)1
	$8 = *($0 + [8])
	$5 = (int_64)($8 == 0)
	if ( $5 ){ goto $label$1 }
	$9 = ((int_64)$8 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$2:
	$7 = ((int_64)$7 * (int_64)10)
	$9 = ((int_64)$9 + (int_64)-1)
	if ( ((int_64)$9 > (int_64)1) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [8])
	$2 = ($2 - (((CASTING uint_32)(uint_64 ((int_64)$8 + (int_64)1)) + [15]) & [1008]))
	*([0] + [4]) = $2
	*(($6 = ($2 + ($3 = (CASTING uint_32)(uint_64 $8))))) = [0]
	$4 = *($0)
	if ( $5 ){ goto $label$3 }
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$4 % (int_64)$7)
	$0 = ($6 + [-1])
	
.LOOP $label$4:
	*($0) = ((int_64)((int_64)$9 % (int_64)10) + (int_64)48)
	$0 = ($0 + [-1])
	$9 = ((int_64)$9 / (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$4 }
	
.LABEL $label$3
	CALL printi(((int_64)$4 / (int_64)$7))
	CALL prints([1760])
	CALL prints_l($2, $3)
	CALL prints([1776])
	CALL $113($1, [0])
	*([0] + [4]) = $10
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([1792])
	
.LABEL $label$1
	$2 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)8)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)16)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)24)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)40)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)56)
	*($3 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	
.LABEL $label$2
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [608])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [608])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [608])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [608])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [608])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC _ZN5eosio10texas_game11sortbyscoreEv (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	float_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$16 = (*([0] + [4]) - [48])
	*([0] + [4]) = $16
	*(($16 + [32])) = [0]
	*($16 + [16]) = (int_64)-1
	$2 = *($1)
	*($16) = $2
	*($16 + [8]) = $2
	*($16 + [24]) = (int_64)0
	*($16 + [36]) = [0]
	$1 = [0]
	$5 = CALL db_lowerbound_i64($2, $2, (int_64)-6030912134838419456, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $56($16, $5)
	
.LABEL $label$1
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	if ( ($1 == 0) ){ goto $label$5 }
	$4 = ($0 + [8])
	$15 = ($0 + [4])
	$5 = [0]
	if ( ((int_32)[0] != (int_32)[0]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$1 = [0]
	$5 = [0]
	$17 = [5]
	goto $label$2 
	
.LABEL $label$4
	$17 = [3]
	goto $label$2 
	
.LABEL $label$3
	$17 = [0]
	
.LABEL $label$2
	
.LOOP $label$6:
	goto $label$70 
	
.LABEL $label$71
	$1 = CALL $56($16, $1)
	$5 = *($15)
	if ( ((int_32)$5 == (int_32)*($4)) ){ goto $label$32 }
	$17 = [0]
	goto $label$6 
	
.LABEL $label$70
	*($15) = ($5 + [8])
	*($5) = *($1)
	goto $label$31 
	
.LABEL $label$69
	CALL $122($0, $1)
	$17 = [1]
	goto $label$6 
	
.LABEL $label$68
	CALL eosio_assert([1], [272])
	$1 = CALL db_next_i64(*($1 + [112]), ($16 + [40]))
	if ( ((int_32)$1 >= (int_32)[0]) ){ goto $label$30 }
	$17 = [4]
	goto $label$6 
	
.LABEL $label$67
	$5 = *(($0 + [4]))
	$1 = *($0)
	goto $label$29 
	
.LABEL $label$66
	if ( ((int_32)($5 - $1) == (int_32)[8]) ){ goto $label$28 }
	$17 = [6]
	goto $label$6 
	
.LABEL $label$65
	$7 = ($16 + [24])
	$8 = ($16 + [28])
	$10 = ($16 + [8])
	$12 = ($0 + [4])
	$13 = [0]
	$17 = [7]
	goto $label$6 
	
.LABEL $label$64
	$14 = $13
	if ( ((uint_32)$13 >= (uint_32)(int_32(($5 - $1) >> [3]) + [-1])) ){ goto $label$26 }
	$17 = [21]
	goto $label$6 
	
.LABEL $label$63
	$9 = ($14 << [3])
	$2 = *(($1 + $9))
	$3 = *($7)
	$15 = *($8)
	if ( ((int_32)$15 == (int_32)$3) ){ goto $label$18 }
	$17 = [22]
	goto $label$6 
	
.LABEL $label$62
	$1 = ($15 + [-24])
	$4 = ([0] - $3)
	$17 = [23]
	goto $label$6 
	
.LABEL $label$61
	if ( ((int_64)*(*($1)) == (int_64)$2) ){ goto $label$16 }
	$17 = [24]
	goto $label$6 
	
.LABEL $label$60
	$15 = $1
	$5 = ($1 + [-24])
	$1 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$17 }
	$17 = [25]
	goto $label$6 
	
.LABEL $label$59
	if ( ((int_32)$15 == (int_32)$3) ){ goto $label$15 }
	$17 = [26]
	goto $label$6 
	
.LABEL $label$58
	$1 = *(($15 + [-24]))
	CALL eosio_assert(((int_32)*(($1 + [108])) == (int_32)$16), [160])
	goto $label$14 
	
.LABEL $label$57
	$1 = CALL $56($16, CALL $fimport$6(*($16), *($10), (int_64)-6030912134838419456, $2))
	CALL eosio_assert(((int_32)*($1 + [108]) == (int_32)$16), [160])
	$17 = [27]
	goto $label$6 
	
.LABEL $label$56
	$14 = ($14 + [1])
	$11 = ($14 << [3])
	$2 = *((*($0) + $11))
	$6 = *($1 + [80])
	$3 = *($7)
	$15 = *($8)
	if ( ((int_32)$15 == (int_32)$3) ){ goto $label$13 }
	$17 = [28]
	goto $label$6 
	
.LABEL $label$55
	$1 = ($15 + [-24])
	$4 = ([0] - $3)
	$17 = [29]
	goto $label$6 
	
.LABEL $label$54
	if ( ((int_64)*(*($1)) == (int_64)$2) ){ goto $label$11 }
	$17 = [30]
	goto $label$6 
	
.LABEL $label$53
	$15 = $1
	$5 = ($1 + [-24])
	$1 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$12 }
	$17 = [31]
	goto $label$6 
	
.LABEL $label$52
	if ( ((int_32)$15 == (int_32)$3) ){ goto $label$10 }
	$17 = [32]
	goto $label$6 
	
.LABEL $label$51
	$1 = *(($15 + [-24]))
	CALL eosio_assert(((int_32)*(($1 + [108])) == (int_32)$16), [160])
	goto $label$9 
	
.LABEL $label$50
	$1 = CALL $56($16, CALL $fimport$6(*($16), *($10), (int_64)-6030912134838419456, $2))
	CALL eosio_assert(((int_32)*($1 + [108]) == (int_32)$16), [160])
	$17 = [33]
	goto $label$6 
	
.LABEL $label$49
	if ( (((float_64)$6 < (float_64)*($1 + [80])) == 0) ){ goto $label$8 }
	$17 = [36]
	goto $label$6 
	
.LABEL $label$48
	$1 = *($0)
	$5 = ($1 + $9)
	$2 = *($5)
	$15 = ($1 + $11)
	*($5) = *($15)
	*($15) = $2
	goto $label$7 
	
.LABEL $label$47
	$1 = *($0)
	$17 = [35]
	goto $label$6 
	
.LABEL $label$46
	$5 = *($12)
	if ( ($14 <= (int_32(($5 - $1) >> [3]) + [-1])) ){ goto $label$25 }
	$17 = [8]
	goto $label$6 
	
.LABEL $label$45
	$13 = ($13 + [1])
	if ( ($13 <= (int_32(($5 - $1) >> [3]) + [-1])) ){ goto $label$27 }
	$17 = [9]
	goto $label$6 
	
.LABEL $label$44
	$4 = *($16 + [24])
	if ( ($4 == 0) ){ goto $label$24 }
	$17 = [10]
	goto $label$6 
	
.LABEL $label$43
	$14 = ($16 + [28])
	$1 = *($14)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$23 }
	$17 = [11]
	goto $label$6 
	
.LABEL $label$42
	$17 = [12]
	goto $label$6 
	
.LABEL $label$41
	$1 = ($1 + [-24])
	$5 = *($1)
	*($1) = [0]
	if ( ($5 == 0) ){ goto $label$21 }
	$17 = [13]
	goto $label$6 
	
.LABEL $label$40
	$15 = *($5 + [92])
	if ( ($15 == 0) ){ goto $label$20 }
	$17 = [14]
	goto $label$6 
	
.LABEL $label$39
	*(($5 + [96])) = $15
	CALL $185($15)
	$17 = [15]
	goto $label$6 
	
.LABEL $label$38
	CALL $185($5)
	$17 = [16]
	goto $label$6 
	
.LABEL $label$37
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$22 }
	$17 = [17]
	goto $label$6 
	
.LABEL $label$36
	$1 = *(($16 + [24]))
	goto $label$19 
	
.LABEL $label$35
	$1 = $4
	$17 = [18]
	goto $label$6 
	
.LABEL $label$34
	*($14) = $4
	CALL $185($1)
	$17 = [19]
	goto $label$6 
	
.LABEL $label$33
	*([0] + [4]) = ($16 + [48])
	return 
	
.LABEL $label$32
	$17 = [3]
	goto $label$6 
	
.LABEL $label$31
	$17 = [1]
	goto $label$6 
	
.LABEL $label$30
	$17 = [2]
	goto $label$6 
	
.LABEL $label$29
	$17 = [5]
	goto $label$6 
	
.LABEL $label$28
	$17 = [9]
	goto $label$6 
	
.LABEL $label$27
	$17 = [7]
	goto $label$6 
	
.LABEL $label$26
	$17 = [8]
	goto $label$6 
	
.LABEL $label$25
	$17 = [21]
	goto $label$6 
	
.LABEL $label$24
	$17 = [19]
	goto $label$6 
	
.LABEL $label$23
	$17 = [20]
	goto $label$6 
	
.LABEL $label$22
	$17 = [12]
	goto $label$6 
	
.LABEL $label$21
	$17 = [16]
	goto $label$6 
	
.LABEL $label$20
	$17 = [15]
	goto $label$6 
	
.LABEL $label$19
	$17 = [18]
	goto $label$6 
	
.LABEL $label$18
	$17 = [25]
	goto $label$6 
	
.LABEL $label$17
	$17 = [23]
	goto $label$6 
	
.LABEL $label$16
	$17 = [25]
	goto $label$6 
	
.LABEL $label$15
	$17 = [38]
	goto $label$6 
	
.LABEL $label$14
	$17 = [27]
	goto $label$6 
	
.LABEL $label$13
	$17 = [31]
	goto $label$6 
	
.LABEL $label$12
	$17 = [29]
	goto $label$6 
	
.LABEL $label$11
	$17 = [31]
	goto $label$6 
	
.LABEL $label$10
	$17 = [37]
	goto $label$6 
	
.LABEL $label$9
	$17 = [33]
	goto $label$6 
	
.LABEL $label$8
	$17 = [34]
	goto $label$6 
	
.LABEL $label$7
	$17 = [35]
	goto $label$6 
	$17
}

void .FUNC _ZN5eosio10texas_game9perminingEyNS_5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	float_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [176])
	*([0] + [4]) = $12
	*(($12 + [152])) = [0]
	*($12 + [136]) = (int_64)-1
	*($12 + [144]) = (int_64)0
	$8 = *($0)
	*($12 + [120]) = $8
	*($12 + [128]) = $8
	*($12 + [156]) = [0]
	$11 = CALL db_find_i64($8, $8, (int_64)-6030912134838419456, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$4 }
	$11 = CALL $56(($12 + [120]), $11)
	CALL eosio_assert(((int_32)*($11 + [108]) == (int_32)($12 + [120])), [160])
	$8 = *($0)
	$5 = *($11 + [80])
	if ( ((((float_64)$5 > (float_64)(float_64)0) | ((float_64)$5 != (float_64)$5)) == 0) ){ goto $label$8 }
	*($12 + [16]) = $2
	CALL eosio_assert([1], [736])
	CALL $121(($12 + [120]), $11, $8, ($12 + [16]))
	if ( ((int_64)*($2) < (int_64)1) ){ goto $label$4 }
	$3 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$11 = [624]
	$9 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$14 }
	$4 = *($11)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$4 = ($4 + [165])
	goto $label$12 
	
.LABEL $label$14
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$10
	$11 = ($11 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$9 }
	*($12 + [72]) = $9
	*($12 + [64]) = $3
	$8 = (int_64)0
	$7 = (int_64)59
	$11 = [128]
	$9 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$20 }
	$4 = *($11)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$4 = ($4 + [165])
	goto $label$18 
	
.LABEL $label$20
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$16
	$11 = ($11 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$15 }
	*(($12 + [8])) = [0]
	*($12) = (int_64)0
	$11 = CALL strlen([1824])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$7 }
	*($12) = ($11 << [1])
	$4 = ($12 | [1])
	if ( $11 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	CALL eosio_assert([1], [736])
	CALL $120(($12 + [120]), $11, $8)
	$2 = *($12 + [144])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$7
	$6 = (($11 + [16]) & [-16])
	$4 = CALL $184($6)
	*($12) = ($6 | [1])
	*($12 + [8]) = $4
	*($12 + [4]) = $11
	
.LABEL $label$6
	CALL memcpy($4, [1824], $11)
	
.LABEL $label$5
	*(($4 + $11)) = [0]
	*(($12 + [44])) = *(($2 + [12]))
	*(($12 + [40])) = *(($2 + [8]))
	*(($12 + [36])) = *(($2 + [4]))
	*($12 + [24]) = $1
	*($12 + [16]) = *($0)
	*($12 + [32]) = *($2)
	$11 = ($12 + [8])
	*(($12 + [56])) = *($11)
	*($12 + [48]) = *($12)
	*($12) = [0]
	*($12 + [4]) = [0]
	*($11) = [0]
	$11 = CALL $44(($12 + [80]), ($12 + [64]), (int_64)-3838636544615976944, $9, ($12 + [16]))
	CALL $45(($12 + [160]), $11)
	$4 = *($12 + [160])
	CALL send_inline($4, (*($12 + [164]) - $4))
	$4 = *($12 + [160])
	if ( ($4 == 0) ){ goto $label$21 }
	*($12 + [164]) = $4
	CALL $185($4)
	
.LABEL $label$21
	$4 = *($11 + [28])
	if ( ($4 == 0) ){ goto $label$22 }
	*(($11 + [32])) = $4
	CALL $185($4)
	
.LABEL $label$22
	$4 = *($11 + [16])
	if ( ($4 == 0) ){ goto $label$23 }
	*(($11 + [20])) = $4
	CALL $185($4)
	
.LABEL $label$23
	if ( ((*(($12 + [48])) & [1]) == 0) ){ goto $label$24 }
	CALL $185(*(($12 + [56])))
	
.LABEL $label$24
	if ( ((*($12) & [1]) == 0) ){ goto $label$4 }
	CALL $185(*(($12 + [8])))
	
.LABEL $label$4
	$2 = *($12 + [144])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($12 + [148])
	$11 = *($6)
	if ( ((int_32)$11 == (int_32)$2) ){ goto $label$26 }
	
.LOOP $label$27:
	$11 = ($11 + [-24])
	$4 = *($11)
	*($11) = [0]
	if ( ($4 == 0) ){ goto $label$28 }
	$0 = *($4 + [92])
	if ( ($0 == 0) ){ goto $label$29 }
	*(($4 + [96])) = $0
	CALL $185($0)
	
.LABEL $label$29
	CALL $185($4)
	
.LABEL $label$28
	if ( ((int_32)$2 != (int_32)$11) ){ goto $label$27 }
	$11 = *(($12 + [144]))
	goto $label$25 
	
.LABEL $label$26
	$11 = $2
	
.LABEL $label$25
	*($6) = $2
	CALL $185($11)
	
.LABEL $label$2
	*([0] + [4]) = ($12 + [176])
	return (unreachable)
	
.LABEL $label$1
	CALL $186($12)
}

void .FUNC _ZN5eosio10texas_game11texasconfigEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	CALL require_auth(*($0))
	*(($8 + [40])) = [0]
	*($8 + [24]) = (int_64)-1
	$4 = *($0)
	*($8 + [8]) = $4
	*($8 + [16]) = $4
	*($8 + [32]) = (int_64)0
	$7 = CALL db_find_i64($4, $4, (int_64)-3838636836622985216, (int_64)0)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$4 }
	$7 = CALL $75(($8 + [8]), $7)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($8 + [8])), [160])
	$5 = *($0)
	CALL eosio_assert([1], [736])
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($8 + [8])), [784])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)CALL $fimport$3()), [832])
	*($7 + [8]) = $1
	*($7 + [16]) = $2
	$4 = *($7)
	CALL eosio_assert([1], [1008])
	CALL eosio_assert([1], [656])
	CALL memcpy(($8 + [64]), $7, [8])
	CALL eosio_assert([1], [656])
	CALL memcpy((($8 + [64]) | [8]), ($7 + [8]), [8])
	CALL eosio_assert([1], [656])
	CALL memcpy((($8 + [64]) + [16]), ($7 + [16]), [8])
	CALL db_update_i64(*($7 + [28]), $5, ($8 + [64]), [24])
	$7 = (($8 + [8]) + [16])
	if ( (uint_64)($4 <= *($7)) ){ goto $label$3 }
	*($7) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$3 = *($8 + [32])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$5 = *($0)
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)CALL $fimport$3()), [672])
	*(($7 = CALL $184([40])) + [24]) = ($8 + [8])
	*($7 + [8]) = $1
	*($7) = (int_64)0
	*($7 + [16]) = $2
	CALL eosio_assert([1], [656])
	CALL memcpy(($8 + [64]), $7, [8])
	CALL eosio_assert([1], [656])
	CALL memcpy((($8 + [64]) | [8]), ($7 + [8]), [8])
	CALL eosio_assert([1], [656])
	CALL memcpy((($8 + [64]) + [16]), ($7 + [16]), [8])
	$4 = *($7)
	$3 = CALL db_store_i64(*((($8 + [8]) + [8])), (int_64)-3838636836622985216, $5, $4, ($8 + [64]), [24])
	*($7 + [28]) = $3
	$0 = (($8 + [8]) + [16])
	if ( (uint_64)($4 <= *($0)) ){ goto $label$5 }
	*($0) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($8 + [56]) = $7
	$4 = *($7)
	*($8 + [64]) = $4
	*($8 + [52]) = $3
	$6 = ($8 + [36])
	$0 = *($6)
	if ( ((uint_32)$0 >= (uint_32)*(($8 + [40]))) ){ goto $label$7 }
	*($0 + [8]) = $4
	*($0 + [16]) = $3
	*($8 + [56]) = [0]
	*($0) = $7
	*($6) = ($0 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $76(($8 + [32]), ($8 + [56]), ($8 + [64]), ($8 + [52]))
	
.LABEL $label$6
	$7 = *($8 + [56])
	*($8 + [56]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $185($7)
	
.LABEL $label$3
	$3 = *($8 + [32])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($8 + [36])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$7 = ($7 + [-24])
	$0 = *($7)
	*($7) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $185($0)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$10 }
	$7 = *(($8 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$7 = $3
	
.LABEL $label$8
	*($6) = $3
	CALL $185($7)
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [96])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [36]) = $1
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + $3)
	CALL $77(($5 + [32]), $5)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	CALL $189(($5 + [16]), $5)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL $189(($5 + [32]), ($5 + [16]))
	CALL void $1((int_32 ($5 + [32])), (int_32 $4))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $185(*($5 + [40]))
	
.LABEL $label$6
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $185(*($5 + [24]))
	
.LABEL $label$7
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $185(*(($5 + [8])))
	
.LABEL $label$8
	*([0] + [4]) = ($5 + [48])
	return [1]
}

void .FUNC _ZN5eosio10texas_game6miningEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [224])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*((($6 + [184]) + [32])) = [0]
	*($6 + [200]) = (int_64)-1
	$4 = *($0)
	*($6 + [184]) = $4
	*($6 + [192]) = $4
	*($6 + [208]) = (int_64)0
	if ( (*(CALL $52(($6 + [184]), CALL $fimport$11($4, $4, (int_64)-4157529991795441664, (int_64)0)) + [8]) == 0) ){ goto $label$1 }
	*((($6 + [144]) + [32])) = [0]
	*($6 + [160]) = (int_64)-1
	$4 = *($0)
	*($6 + [144]) = $4
	*($6 + [152]) = $4
	*($6 + [168]) = (int_64)0
	*($6 + [180]) = [0]
	$4 = (CASTING uint_64)(uint_32 ($0 + [48]))
	*($6 + [128]) = $4
	CALL $80(($6 + [128]))
	*($6 + [128]) = $4
	$4 = *(*(CALL $80(($6 + [128])) + [4]))
	$3 = CALL db_lowerbound_i64(*($6 + [144]), *($6 + [152]), (int_64)-6030912134838419456, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $56(($6 + [144]), $3)
	CALL _ZN5eosio10texas_game9culactiveEy($0, *($3))
	CALL eosio_assert([1], [272])
	$3 = CALL db_next_i64(*($3 + [112]), ($6 + [128]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	
.LOOP $label$3:
	$3 = CALL $56(($6 + [144]), $3)
	CALL _ZN5eosio10texas_game9culactiveEy($0, *($3))
	CALL eosio_assert([1], [272])
	$3 = CALL db_next_i64(*($3 + [112]), ($6 + [128]))
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$2
	CALL _ZN5eosio10texas_game9culminingEv(($6 + [128]), $0)
	if ( (uint_64)($4 <= (int_64)99) ){ goto $label$6 }
	CALL _ZN5eosio10texas_game11sortbyscoreEv(($6 + [112]), $0)
	$2 = *($6 + [112])
	$3 = int_32((*($6 + [116]) - $2) >> [3])
	$1 = ((uint_32)$3 / (uint_32)[3])
	if ( ($3 <= [3]) ){ goto $label$7 }
	$3 = [0]
	$5 = [0]
	
.LOOP $label$8:
	$4 = *(($2 + $3))
	*(($2 = (($6 + [96]) + [8]))) = *((($6 + [128]) + [8]))
	*($6 + [96]) = *($6 + [128])
	*(($6 + [8])) = *($2)
	*($6) = *($6 + [96])
	CALL _ZN5eosio10texas_game9perminingEyNS_5assetE($0, $4, $6)
	$3 = ($3 + [8])
	$2 = *($6 + [112])
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)$1) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($2 == 0) ){ goto $label$5 }
	*($6 + [116]) = $2
	CALL $185($2)
	$5 = *($6 + [168])
	if ( $5 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$6
	if ( (uint_64)($4 <= (int_64)66) ){ goto $label$9 }
	CALL _ZN5eosio10texas_game11sortbyscoreEv(($6 + [112]), $0)
	$2 = *($6 + [112])
	$3 = int_32((*($6 + [116]) - $2) >> [2])
	$1 = ((uint_32)$3 / (uint_32)[3])
	if ( ($3 <= [3]) ){ goto $label$10 }
	$3 = [0]
	$5 = [0]
	
.LOOP $label$11:
	$4 = *(($2 + $3))
	*(($2 = (($6 + [80]) + [8]))) = *((($6 + [128]) + [8]))
	*($6 + [80]) = *($6 + [128])
	*((($6 + [16]) + [8])) = *($2)
	*($6 + [16]) = *($6 + [80])
	CALL _ZN5eosio10texas_game9perminingEyNS_5assetE($0, $4, ($6 + [16]))
	$3 = ($3 + [8])
	$2 = *($6 + [112])
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)$1) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($2 == 0) ){ goto $label$5 }
	*($6 + [116]) = $2
	CALL $185($2)
	$5 = *($6 + [168])
	if ( $5 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$9
	$3 = CALL db_lowerbound_i64(*($6 + [144]), *((($6 + [144]) + [8])), (int_64)-6030912134838419456, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$3 = CALL $56(($6 + [144]), $3)
	$4 = *($3)
	*(($2 = (($6 + [64]) + [8]))) = *((($6 + [128]) + [8]))
	*($6 + [64]) = *($6 + [128])
	*((($6 + [48]) + [8])) = *($2)
	*($6 + [48]) = *($6 + [64])
	CALL _ZN5eosio10texas_game9perminingEyNS_5assetE($0, $4, ($6 + [48]))
	CALL eosio_assert([1], [272])
	$3 = CALL db_next_i64(*($3 + [112]), ($6 + [112]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	
.LOOP $label$12:
	$3 = CALL $56(($6 + [144]), $3)
	$4 = *($3)
	*(($2 = (($6 + [64]) + [8]))) = *((($6 + [128]) + [8]))
	*($6 + [64]) = *($6 + [128])
	*((($6 + [32]) + [8])) = *($2)
	*($6 + [32]) = *($6 + [64])
	CALL _ZN5eosio10texas_game9perminingEyNS_5assetE($0, $4, ($6 + [32]))
	CALL eosio_assert([1], [272])
	$3 = CALL db_next_i64(*($3 + [112]), ($6 + [112]))
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$12 }
	
.LABEL $label$5
	$5 = *($6 + [168])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$4
	$1 = ($6 + [172])
	$0 = *($1)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$14 }
	
.LOOP $label$15:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$16 }
	$2 = *($3 + [92])
	if ( ($2 == 0) ){ goto $label$17 }
	*(($3 + [96])) = $2
	CALL $185($2)
	
.LABEL $label$17
	CALL $185($3)
	
.LABEL $label$16
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$15 }
	$0 = *(($6 + [168]))
	goto $label$13 
	
.LABEL $label$14
	$0 = $5
	
.LABEL $label$13
	*($1) = $5
	CALL $185($0)
	
.LABEL $label$1
	$2 = *($6 + [208])
	if ( ($2 == 0) ){ goto $label$18 }
	$5 = ($6 + [212])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$20 }
	
.LOOP $label$21:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$22 }
	CALL $185($3)
	
.LABEL $label$22
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$21 }
	$0 = *(($6 + [208]))
	goto $label$19 
	
.LABEL $label$20
	$0 = $2
	
.LABEL $label$19
	*($5) = $2
	CALL $185($0)
	
.LABEL $label$18
	*([0] + [4]) = ($6 + [224])
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [80])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = [0]
	*(($5 + [40])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	CALL eosio_assert([1], [512])
	$3 = (int_64)5462355
	
.LOOP $label$5:
	$4 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($4, [576])
	*($5 + [72]) = ($0 + $2)
	*($5 + [64]) = $0
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [608])
	CALL memcpy(($5 + [8]), $0, [8])
	*($5 + [68]) = ($0 + [8])
	CALL $77(($5 + [64]), (($5 + [8]) + [8]))
	CALL eosio_assert(((uint_32)(*($5 + [72]) - *($5 + [68])) > (uint_32)[7]), [608])
	CALL memcpy(($5 + [32]), *($5 + [68]), [8])
	$1 = (*($5 + [68]) + [8])
	*($5 + [68]) = $1
	CALL eosio_assert(((uint_32)(*($5 + [72]) - $1) > (uint_32)[7]), [608])
	CALL memcpy(($5 + [40]), *($5 + [68]), [8])
	if ( ($2 <= [513]) ){ goto $label$8 }
	CALL free($0)
	
.LABEL $label$8
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $124(($5 + [64]), ($5 + [8]))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$9 }
	CALL $185(*(($5 + [24])))
	
.LABEL $label$9
	*([0] + [4]) = ($5 + [80])
	return [1]
}

void .FUNC _ZN5eosio10texas_game10texasallinENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [112])
	*([0] + [4]) = $13
	*($13 + [88]) = $2
	CALL require_auth($2)
	if ( (*($1) & [1]) ){ goto $label$2 }
	$1 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($1 + [8])
	
.LABEL $label$1
	$3 = ($0 + [8])
	$8 = [-1]
	
.LOOP $label$3:
	$7 = ($1 + $8)
	$4 = ($8 + [1])
	$8 = $4
	if ( *(($7 + [1])) ){ goto $label$3 }
	$5 = (CASTING uint_64)(uint_32 $4)
	$10 = (int_64)0
	$9 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$4:
	$12 = (int_64)0
	if ( ((uint_64)$10 >= (uint_64)$5) ){ goto $label$5 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$8 = ($8 + [165])
	goto $label$6 
	
.LABEL $label$7
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$9 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$8
	$1 = ($1 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$4 }
	$6 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$10 }
	$1 = ($7 + [-24])
	$4 = ([0] - $6)
	
.LOOP $label$11:
	if ( ((int_64)*(*($1)) == (int_64)$11) ){ goto $label$10 }
	$7 = $1
	$8 = ($1 + [-24])
	$1 = $8
	if ( ((int_32)($8 + $4) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$14 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [160])
	if ( $7 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$1 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3838636552279642112, $11)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$12 }
	$7 = CALL $54($3, $1)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [160])
	
.LABEL $label$13
	$8 = *(($7 + [12]))
	$1 = *($7 + [8])
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$15 }
	
.LOOP $label$16:
	if ( ((int_64)*($1) == (int_64)$2) ){ goto $label$15 }
	$1 = ($1 + [32])
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$16 }
	goto $label$12 
	
.LABEL $label$15
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$12 }
	$10 = (int_64)0
	CALL eosio_assert(((int_64)*($1 + [8]) > (int_64)0), [1184])
	*(($13 + [80])) = *(($1 + [16]))
	*($13 + [72]) = *($1 + [8])
	$9 = *($0)
	*($13 + [36]) = ($13 + [72])
	*($13 + [32]) = ($13 + [88])
	CALL eosio_assert([1], [736])
	CALL $114($3, $7, $9, ($13 + [32]))
	$2 = *($0)
	$12 = (int_64)59
	$1 = [624]
	$11 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$22 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$8 = ($8 + [165])
	goto $label$20 
	
.LABEL $label$22
	$9 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$18
	$1 = ($1 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$17 }
	$10 = (int_64)0
	$9 = (int_64)59
	$1 = [1808]
	$5 = (int_64)0
	
.LOOP $label$23:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$24 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$8 = ($8 + [165])
	goto $label$25 
	
.LABEL $label$26
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$24
	$1 = ($1 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$5 = ((int_64)$12 | (int_64)$5)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$23 }
	*((($13 + [8]) + [12])) = *($13 + [76])
	*((($13 + [8]) + [20])) = *((($13 + [72]) + [12]))
	*(($7 = (($13 + [8]) + [16]))) = *((($13 + [72]) + [8]))
	*($13 + [8]) = *($13 + [88])
	*($13 + [16]) = *($13 + [72])
	*($13 + [32]) = $2
	*($13 + [40]) = $5
	*(($1 = CALL $184([16]))) = $2
	*($1 + [8]) = $11
	*(($8 = ($13 + [64]))) = [0]
	$4 = ($1 + [16])
	*((($13 + [32]) + [24])) = $4
	*((($13 + [32]) + [20])) = $4
	*($13 + [48]) = $1
	*($13 + [60]) = [0]
	*(($13 + [68])) = [0]
	CALL $46(($13 + [60]), [24])
	$1 = *($13 + [60])
	$8 = (*($8) - $1)
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [656])
	CALL memcpy($1, ($13 + [8]), [8])
	CALL eosio_assert(((int_32)($8 + [-8]) > (int_32)[7]), [656])
	CALL memcpy(($1 + [8]), (($13 + [8]) + [8]), [8])
	CALL eosio_assert(((int_32)($8 + [-16]) > (int_32)[7]), [656])
	CALL memcpy(($1 + [16]), $7, [8])
	CALL $45(($13 + [96]), ($13 + [32]))
	$1 = *($13 + [96])
	CALL send_inline($1, (*($13 + [100]) - $1))
	$1 = *($13 + [96])
	if ( ($1 == 0) ){ goto $label$27 }
	*($13 + [100]) = $1
	CALL $185($1)
	
.LABEL $label$27
	$1 = *($13 + [60])
	if ( ($1 == 0) ){ goto $label$28 }
	*(($13 + [64])) = $1
	CALL $185($1)
	
.LABEL $label$28
	$1 = *($13 + [48])
	if ( ($1 == 0) ){ goto $label$29 }
	*(($13 + [52])) = $1
	CALL $185($1)
	
.LABEL $label$29
	*(($13 + [64])) = [0]
	$10 = *($0)
	*($13 + [32]) = $10
	*($13 + [48]) = (int_64)-1
	*($13 + [56]) = (int_64)0
	*($13 + [40]) = $10
	*($13 + [68]) = [0]
	$1 = CALL db_find_i64($10, $10, (int_64)-6030912134838419456, *($13 + [88]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$30 }
	$1 = CALL $56(($13 + [32]), $1)
	CALL eosio_assert(((int_32)*($1 + [108]) == (int_32)($13 + [32])), [160])
	$10 = *($0)
	*($13 + [8]) = ($13 + [72])
	CALL eosio_assert([1], [736])
	CALL $115(($13 + [32]), $1, $10, ($13 + [8]))
	
.LABEL $label$30
	$4 = *($13 + [56])
	if ( ($4 == 0) ){ goto $label$12 }
	$0 = ($13 + [60])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$32 }
	
.LOOP $label$33:
	$1 = ($1 + [-24])
	$8 = *($1)
	*($1) = [0]
	if ( ($8 == 0) ){ goto $label$34 }
	$7 = *($8 + [92])
	if ( ($7 == 0) ){ goto $label$35 }
	*(($8 + [96])) = $7
	CALL $185($7)
	
.LABEL $label$35
	CALL $185($8)
	
.LABEL $label$34
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$33 }
	$1 = *(($13 + [56]))
	goto $label$31 
	
.LABEL $label$32
	$1 = $4
	
.LABEL $label$31
	*($0) = $4
	CALL $185($1)
	
.LABEL $label$12
	*([0] + [4]) = ($13 + [112])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [512])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [576])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [608])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [608])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [608])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC _ZN5eosio10texas_game12allinreceiptEyNS_5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	CALL $112($2)
}

void .FUNC _ZN5eosio10texas_game10texasclearENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	$22 = (*([0] + [4]) - [144])
	*([0] + [4]) = $22
	CALL require_auth(*($0))
	if ( (*($1) & [1]) ){ goto $label$2 }
	$1 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($1 + [8])
	
.LABEL $label$1
	$2 = ($0 + [8])
	$8 = [-1]
	
.LOOP $label$3:
	$7 = ($1 + $8)
	$3 = ($8 + [1])
	$8 = $3
	if ( *(($7 + [1])) ){ goto $label$3 }
	$21 = (CASTING uint_64)(uint_32 $3)
	$18 = (int_64)0
	$20 = (int_64)59
	$19 = (int_64)0
	
.LOOP $label$4:
	$17 = (int_64)0
	if ( ((uint_64)$18 >= (uint_64)$21) ){ goto $label$5 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$8 = ($8 + [165])
	goto $label$6 
	
.LABEL $label$7
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$18 > (uint_64)(int_64)11) ){ goto $label$9 }
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$20 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$17 = ((int_64)$17 & (int_64)15)
	
.LABEL $label$8
	$1 = ($1 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$19 = ((int_64)$17 | (int_64)$19)
	$20 = ((int_64)$20 + (int_64)-5)
	if ( ((int_64)$20 != (int_64)-6) ){ goto $label$4 }
	$6 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$10 }
	$1 = ($7 + [-24])
	$3 = ([0] - $6)
	
.LOOP $label$11:
	if ( ((int_64)*(*($1)) == (int_64)$19) ){ goto $label$10 }
	$7 = $1
	$8 = ($1 + [-24])
	$1 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$15 }
	$4 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$2), [160])
	if ( $4 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$1 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3838636552279642112, $19)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$13 }
	$4 = CALL $54($2, $1)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$2), [160])
	
.LABEL $label$14
	$7 = *($4 + [20])
	*($22 + [124]) = $7
	$9 = ($4 + [24])
	$1 = *($9)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$16 }
	$5 = ($22 | [1])
	$10 = (($22 + [64]) + [8])
	$12 = (($22 + [16]) + [16])
	$6 = (($22 + [16]) + [32])
	$13 = ($6 + [4])
	$14 = ($22 + [108])
	$16 = ($22 + [56])
	$15 = ($22 + [100])
	
.LOOP $label$17:
	if ( ((int_64)*($7 + [8]) < (int_64)1) ){ goto $label$18 }
	$21 = *($0)
	$18 = (int_64)0
	$17 = (int_64)59
	$1 = [624]
	$19 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$18 > (uint_64)(int_64)5) ){ goto $label$24 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$8 = ($8 + [165])
	goto $label$22 
	
.LABEL $label$24
	$20 = (int_64)0
	if ( ((uint_64)$18 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$20
	$1 = ($1 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$19 }
	*($10) = $19
	*($22 + [64]) = $21
	$18 = (int_64)0
	$17 = (int_64)59
	$1 = [144]
	$19 = (int_64)0
	
.LOOP $label$25:
	if ( ((uint_64)$18 > (uint_64)(int_64)10) ){ goto $label$30 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$8 = ($8 + [165])
	goto $label$28 
	
.LABEL $label$30
	$20 = (int_64)0
	if ( ((int_64)$18 == (int_64)11) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$26
	$1 = ($1 + [1])
	$17 = ((int_64)$17 + (int_64)-5)
	$19 = ((int_64)$20 | (int_64)$19)
	$18 = ((int_64)$18 + (int_64)1)
	if ( ((int_64)$18 != (int_64)13) ){ goto $label$25 }
	$18 = (int_64)0
	$17 = (int_64)59
	$1 = [128]
	$21 = (int_64)0
	
.LOOP $label$31:
	if ( ((uint_64)$18 > (uint_64)(int_64)7) ){ goto $label$36 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$8 = ($8 + [165])
	goto $label$34 
	
.LABEL $label$36
	$20 = (int_64)0
	if ( ((uint_64)$18 <= (uint_64)(int_64)11) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$35
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$33
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$32
	$1 = ($1 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$21 = ((int_64)$20 | (int_64)$21)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$31 }
	$20 = *($7 + [8])
	CALL eosio_assert((uint_64)(((int_64)$20 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [512])
	$18 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$39:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$38 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$40 }
	
.LOOP $label$41:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$38 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$41 }
	
.LABEL $label$40
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$38
	$8 = [0]
	
.LABEL $label$37
	CALL eosio_assert($8, [576])
	*(($8 = ($22 + [8]))) = [0]
	*($22) = (int_64)0
	$1 = CALL strlen([1328])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$44 }
	*($22) = ($1 << [1])
	$3 = $5
	if ( $1 ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$44
	$11 = (($1 + [16]) & [-16])
	$3 = CALL $184($11)
	*($8) = $3
	*($22) = ($11 | [1])
	*($22 + [4]) = $1
	
.LABEL $label$43
	CALL memcpy($3, [1328], $1)
	
.LABEL $label$42
	*(($3 + $1)) = [0]
	*((($22 + [16]) + [8])) = *($7)
	*((($22 + [16]) + [24])) = (int_64)1397703940
	*($12) = $20
	*($13) = *($22 + [4 align=4])
	*($22 + [16]) = *($0)
	*($6) = *($22)
	*($22) = [0]
	*($22 + [4]) = [0]
	*($8) = [0]
	CALL $45(($22 + [128]), CALL $44(($22 + [80]), ($22 + [64]), $19, $21, ($22 + [16])))
	$1 = *($22 + [128])
	CALL send_inline($1, (*($22 + [132]) - $1))
	$1 = *($22 + [128])
	if ( ($1 == 0) ){ goto $label$45 }
	*($22 + [132]) = $1
	CALL $185($1)
	
.LABEL $label$45
	$1 = *($14)
	if ( ($1 == 0) ){ goto $label$46 }
	*((($22 + [80]) + [32])) = $1
	CALL $185($1)
	
.LABEL $label$46
	$1 = *((($22 + [80]) + [16]))
	if ( ($1 == 0) ){ goto $label$47 }
	*($15) = $1
	CALL $185($1)
	
.LABEL $label$47
	if ( ((*($6) & [1]) == 0) ){ goto $label$48 }
	CALL $185(*($16))
	
.LABEL $label$48
	if ( ((*($22) & [1]) == 0) ){ goto $label$49 }
	CALL $185(*($8))
	
.LABEL $label$49
	$1 = *($9)
	$7 = *($22 + [124])
	
.LABEL $label$18
	$7 = ($7 + [32])
	*($22 + [124]) = $7
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$17 }
	
.LABEL $label$16
	$7 = *($4 + [8])
	*($22 + [124]) = $7
	$9 = ($4 + [12])
	$1 = *($9)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$50 }
	$5 = ($22 | [1])
	$10 = (($22 + [64]) + [8])
	$12 = (($22 + [16]) + [16])
	$6 = (($22 + [16]) + [32])
	$13 = ($6 + [4])
	$14 = ($22 + [108])
	$16 = ($22 + [56])
	$15 = ($22 + [100])
	
.LOOP $label$51:
	if ( ((int_64)*($7 + [8]) < (int_64)1) ){ goto $label$52 }
	$21 = *($0)
	$18 = (int_64)0
	$17 = (int_64)59
	$1 = [624]
	$19 = (int_64)0
	
.LOOP $label$53:
	if ( ((uint_64)$18 > (uint_64)(int_64)5) ){ goto $label$58 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$57 }
	$8 = ($8 + [165])
	goto $label$56 
	
.LABEL $label$58
	$20 = (int_64)0
	if ( ((uint_64)$18 <= (uint_64)(int_64)11) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$57
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$56
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$55
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$54
	$1 = ($1 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$53 }
	*($10) = $19
	*($22 + [64]) = $21
	$18 = (int_64)0
	$17 = (int_64)59
	$1 = [144]
	$19 = (int_64)0
	
.LOOP $label$59:
	if ( ((uint_64)$18 > (uint_64)(int_64)10) ){ goto $label$64 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$63 }
	$8 = ($8 + [165])
	goto $label$62 
	
.LABEL $label$64
	$20 = (int_64)0
	if ( ((int_64)$18 == (int_64)11) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$63
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$62
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$61
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$60
	$1 = ($1 + [1])
	$17 = ((int_64)$17 + (int_64)-5)
	$19 = ((int_64)$20 | (int_64)$19)
	$18 = ((int_64)$18 + (int_64)1)
	if ( ((int_64)$18 != (int_64)13) ){ goto $label$59 }
	$18 = (int_64)0
	$17 = (int_64)59
	$1 = [128]
	$21 = (int_64)0
	
.LOOP $label$65:
	if ( ((uint_64)$18 > (uint_64)(int_64)7) ){ goto $label$70 }
	$8 = *($1)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$69 }
	$8 = ($8 + [165])
	goto $label$68 
	
.LABEL $label$70
	$20 = (int_64)0
	if ( ((uint_64)$18 <= (uint_64)(int_64)11) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$69
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$68
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$67
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$66
	$1 = ($1 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$21 = ((int_64)$20 | (int_64)$21)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$65 }
	$20 = *($7 + [8])
	CALL eosio_assert((uint_64)(((int_64)$20 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [512])
	$18 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$73:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$72 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$74 }
	
.LOOP $label$75:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$72 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$75 }
	
.LABEL $label$74
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$72
	$8 = [0]
	
.LABEL $label$71
	CALL eosio_assert($8, [576])
	*(($8 = ($22 + [8]))) = [0]
	*($22) = (int_64)0
	$1 = CALL strlen([1360])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$78 }
	*($22) = ($1 << [1])
	$3 = $5
	if ( $1 ){ goto $label$77 }
	goto $label$76 
	
.LABEL $label$78
	$11 = (($1 + [16]) & [-16])
	$3 = CALL $184($11)
	*($8) = $3
	*($22) = ($11 | [1])
	*($22 + [4]) = $1
	
.LABEL $label$77
	CALL memcpy($3, [1360], $1)
	
.LABEL $label$76
	*(($3 + $1)) = [0]
	*((($22 + [16]) + [8])) = *($7)
	*((($22 + [16]) + [24])) = (int_64)1397703940
	*($12) = $20
	*($13) = *($22 + [4 align=4])
	*($22 + [16]) = *($0)
	*($6) = *($22)
	*($22) = [0]
	*($22 + [4]) = [0]
	*($8) = [0]
	CALL $45(($22 + [128]), CALL $44(($22 + [80]), ($22 + [64]), $19, $21, ($22 + [16])))
	$1 = *($22 + [128])
	CALL send_inline($1, (*($22 + [132]) - $1))
	$1 = *($22 + [128])
	if ( ($1 == 0) ){ goto $label$79 }
	*($22 + [132]) = $1
	CALL $185($1)
	
.LABEL $label$79
	$1 = *($14)
	if ( ($1 == 0) ){ goto $label$80 }
	*((($22 + [80]) + [32])) = $1
	CALL $185($1)
	
.LABEL $label$80
	$1 = *((($22 + [80]) + [16]))
	if ( ($1 == 0) ){ goto $label$81 }
	*($15) = $1
	CALL $185($1)
	
.LABEL $label$81
	if ( ((*($6) & [1]) == 0) ){ goto $label$82 }
	CALL $185(*($16))
	
.LABEL $label$82
	if ( ((*($22) & [1]) == 0) ){ goto $label$83 }
	CALL $185(*($8))
	
.LABEL $label$83
	$1 = *($9)
	$7 = *($22 + [124])
	
.LABEL $label$52
	$7 = ($7 + [32])
	*($22 + [124]) = $7
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$51 }
	
.LABEL $label$50
	CALL eosio_assert([1], [224])
	CALL eosio_assert([1], [272])
	$1 = CALL db_next_i64(*($4 + [36]), ($22 + [16]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$84 }
	CALL $54($2, $1)
	
.LABEL $label$84
	CALL $79($2, $4)
	
.LABEL $label$13
	*([0] + [4]) = ($22 + [144])
	return (unreachable)
	
.LABEL $label$12
	CALL $186($22)
}

void .FUNC _ZN5eosio10texas_game10settlementEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	$21 = (*([0] + [4]) - [384])
	*([0] + [4]) = $21
	CALL require_auth(*($0))
	*(($21 + [248])) = [0]
	*($21 + [232]) = (int_64)-1
	*($21 + [240]) = (int_64)0
	$15 = *($0)
	*($21 + [216]) = $15
	*($21 + [224]) = $15
	$1 = ($0 + [48])
	$15 = (CASTING uint_64)(uint_32 $1)
	*($21 + [256]) = $15
	$19 = *(*(CALL $80(($21 + [256])) + [4]))
	$9 = *(($0 + [72]))
	$14 = *(($0 + [76]))
	if ( ((int_32)$14 == (int_32)$9) ){ goto $label$1 }
	$16 = ($14 + [-24])
	$2 = ([0] - $9)
	
.LOOP $label$2:
	if ( ((int_64)*(*($16)) == (int_64)$19) ){ goto $label$1 }
	$14 = $16
	$3 = ($16 + [-24])
	$16 = $3
	if ( ((int_32)($3 + $2) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$14 == (int_32)$9) ){ goto $label$4 }
	$16 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [104]) == (int_32)$1), [160])
	*($21 + [212]) = $16
	*($21 + [208]) = $1
	$11 = (($21 + [208]) | [4])
	goto $label$3 
	
.LABEL $label$4
	$16 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-3838636613264998400, $19)
	if ( ((int_32)$16 <= (int_32)[-1]) ){ goto $label$5 }
	$16 = CALL $81($1, $16)
	CALL eosio_assert(((int_32)*($16 + [104]) == (int_32)$1), [160])
	*($21 + [212]) = $16
	*($21 + [208]) = $1
	$11 = (($21 + [208]) | [4])
	goto $label$3 
	
.LABEL $label$5
	$16 = [0]
	*($21 + [212]) = [0]
	*($21 + [208]) = $1
	$11 = (($21 + [208]) | [4])
	
.LABEL $label$3
	*($21 + [256]) = $15
	$3 = *(CALL $80(($21 + [256])) + [4])
	$13 = *(($3 + [56]))
	$12 = *($3 + [48])
	*($21 + [256]) = $15
	$3 = *(CALL $80(($21 + [256])) + [4])
	*(($21 + [200])) = *(($3 + [72]))
	*($21 + [192]) = *(($3 + [64]))
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [1376])
	CALL eosio_assert([1], [512])
	$15 = (int_64)5459781
	$16 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$15) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$15) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [576])
	CALL eosio_assert([1], [512])
	$15 = (int_64)5459781
	$16 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$15) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$15) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [576])
	*(($21 + [184])) = [0]
	*($21 + [168]) = (int_64)-1
	$15 = *($0)
	*($21 + [152]) = $15
	*($21 + [160]) = $15
	*($21 + [176]) = (int_64)0
	$16 = CALL $82(($21 + [152]), (int_64)0, [1392])
	$5 = *($16 + [16])
	$4 = *($16 + [8])
	if ( ((int_64)$19 != (int_64)1) ){ goto $label$39 }
	CALL eosio_assert([1], [1424])
	CALL eosio_assert([1], [1440])
	$6 = ((int_64)$12 / (int_64)2)
	if ( ((int_64)$12 < (int_64)2) ){ goto $label$35 }
	$20 = *($0)
	$15 = (int_64)0
	$17 = (int_64)59
	$16 = [624]
	$18 = (int_64)0
	
.LOOP $label$40:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$45 }
	$3 = *($16)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$44 }
	$3 = ($3 + [165])
	goto $label$43 
	
.LABEL $label$45
	$19 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$44
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$43
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$42
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$41
	$16 = ($16 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$18 = ((int_64)$19 | (int_64)$18)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$40 }
	*($21 + [96]) = $18
	*($21 + [88]) = $20
	$15 = (int_64)0
	$17 = (int_64)59
	$16 = [144]
	$18 = (int_64)0
	
.LOOP $label$46:
	if ( ((uint_64)$15 > (uint_64)(int_64)10) ){ goto $label$51 }
	$3 = *($16)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$50 }
	$3 = ($3 + [165])
	goto $label$49 
	
.LABEL $label$51
	$19 = (int_64)0
	if ( ((int_64)$15 == (int_64)11) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$50
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$49
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$48
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$47
	$16 = ($16 + [1])
	$17 = ((int_64)$17 + (int_64)-5)
	$18 = ((int_64)$19 | (int_64)$18)
	$15 = ((int_64)$15 + (int_64)1)
	if ( ((int_64)$15 != (int_64)13) ){ goto $label$46 }
	$15 = (int_64)0
	$17 = (int_64)59
	$16 = [128]
	$20 = (int_64)0
	
.LOOP $label$52:
	if ( ((uint_64)$15 > (uint_64)(int_64)7) ){ goto $label$57 }
	$3 = *($16)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$56 }
	$3 = ($3 + [165])
	goto $label$55 
	
.LABEL $label$57
	$19 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$56
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$55
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$54
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$53
	$16 = ($16 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$20 = ((int_64)$19 | (int_64)$20)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$52 }
	CALL eosio_assert([1], [1424])
	CALL eosio_assert([1], [1440])
	*(($21 + [376])) = [0]
	*($21 + [368]) = (int_64)0
	$16 = CALL strlen([640])
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$16 >= (uint_32)[11]) ){ goto $label$38 }
	*($21 + [368]) = ($16 << [1])
	$3 = (($21 + [368]) | [1])
	if ( $16 ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	*(($21 + [96])) = [0]
	*(($21 + [104])) = [0]
	*($21 + [92]) = $1
	*($21 + [100]) = $1
	CALL $80(($21 + [100]))
	*($21 + [256]) = *($21 + [100 align=4])
	$16 = *(CALL $80(($21 + [256])) + [4])
	$7 = *(($16 + [64]))
	$6 = *(($16 + [72]))
	$14 = ((int_64)$13 == (int_64)$6)
	CALL eosio_assert($14, [1120])
	if ( ((int_64)$12 <= (int_64)$7) ){ goto $label$58 }
	CALL eosio_assert($14, [896])
	$7 = ((int_64)$7 + (int_64)$12)
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [976])
	CALL eosio_assert([1], [1424])
	CALL eosio_assert([1], [1440])
	CALL eosio_assert($14, [1216])
	$8 = ((int_64)$7 / (int_64)2)
	$12 = (int_64)
	$2 = ((int_64)$12($12 - $8)) > (int_64)-4611686018427387904
	CALL eosio_assert($2), [1264])
	$9 = ((int_64)$12 < (int_64)4611686018427387904)
	CALL eosio_assert($9, [1296])
	if ( ((int_64)$12 < (int_64)1) ){ goto $label$31 }
	$20 = *($0)
	$15 = (int_64)0
	$17 = (int_64)59
	$16 = [624]
	$18 = (int_64)0
	
.LOOP $label$59:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$64 }
	$3 = *($16)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$63 }
	$3 = ($3 + [165])
	goto $label$62 
	
.LABEL $label$64
	$19 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$63
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$62
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$61
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$60
	$16 = ($16 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$18 = ((int_64)$19 | (int_64)$18)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$59 }
	*($21 + [80]) = $18
	*($21 + [72]) = $20
	$15 = (int_64)0
	$17 = (int_64)59
	$16 = [144]
	$18 = (int_64)0
	
.LOOP $label$65:
	if ( ((uint_64)$15 > (uint_64)(int_64)10) ){ goto $label$70 }
	$3 = *($16)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$69 }
	$3 = ($3 + [165])
	goto $label$68 
	
.LABEL $label$70
	$19 = (int_64)0
	if ( ((int_64)$15 == (int_64)11) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$69
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$68
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$67
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$66
	$16 = ($16 + [1])
	$17 = ((int_64)$17 + (int_64)-5)
	$18 = ((int_64)$19 | (int_64)$18)
	$15 = ((int_64)$15 + (int_64)1)
	if ( ((int_64)$15 != (int_64)13) ){ goto $label$65 }
	$15 = (int_64)0
	$17 = (int_64)59
	$16 = [128]
	$20 = (int_64)0
	
.LOOP $label$71:
	if ( ((uint_64)$15 > (uint_64)(int_64)7) ){ goto $label$76 }
	$3 = *($16)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$75 }
	$3 = ($3 + [165])
	goto $label$74 
	
.LABEL $label$76
	$19 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$75
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$74
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$73
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$72
	$16 = ($16 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$20 = ((int_64)$19 | (int_64)$20)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$71 }
	CALL eosio_assert([1], [1424])
	CALL eosio_assert([1], [1440])
	CALL eosio_assert($14, [1216])
	CALL eosio_assert($2, [1264])
	CALL eosio_assert($9, [1296])
	*(($21 + [64])) = [0]
	*($21 + [56]) = (int_64)0
	$16 = CALL strlen([640])
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$16 >= (uint_32)[11]) ){ goto $label$34 }
	*($21 + [56]) = ($16 << [1])
	$3 = (($21 + [56]) | [1])
	if ( $16 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$58
	CALL eosio_assert([1], [1424])
	CALL eosio_assert([1], [1440])
	$4 = ((int_64)$12 / (int_64)10)
	if ( ((int_64)$12 < (int_64)10) ){ goto $label$27 }
	$20 = *($0)
	$15 = (int_64)0
	$17 = (int_64)59
	$16 = [624]
	$18 = (int_64)0
	
.LOOP $label$77:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$82 }
	$3 = *($16)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$81 }
	$3 = ($3 + [165])
	goto $label$80 
	
.LABEL $label$82
	$19 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$79 }
	goto $label$78 
	
.LABEL $label$81
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$80
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$79
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$78
	$16 = ($16 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$18 = ((int_64)$19 | (int_64)$18)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$77 }
	*($21 + [80]) = $18
	*($21 + [72]) = $20
	$15 = (int_64)0
	$17 = (int_64)59
	$16 = [144]
	$18 = (int_64)0
	
.LOOP $label$83:
	if ( ((uint_64)$15 > (uint_64)(int_64)10) ){ goto $label$88 }
	$3 = *($16)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$87 }
	$3 = ($3 + [165])
	goto $label$86 
	
.LABEL $label$88
	$19 = (int_64)0
	if ( ((int_64)$15 == (int_64)11) ){ goto $label$85 }
	goto $label$84 
	
.LABEL $label$87
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$86
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$85
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$84
	$16 = ($16 + [1])
	$17 = ((int_64)$17 + (int_64)-5)
	$18 = ((int_64)$19 | (int_64)$18)
	$15 = ((int_64)$15 + (int_64)1)
	if ( ((int_64)$15 != (int_64)13) ){ goto $label$83 }
	$15 = (int_64)0
	$17 = (int_64)59
	$16 = [128]
	$20 = (int_64)0
	
.LOOP $label$89:
	if ( ((uint_64)$15 > (uint_64)(int_64)7) ){ goto $label$94 }
	$3 = *($16)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$93 }
	$3 = ($3 + [165])
	goto $label$92 
	
.LABEL $label$94
	$19 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$93
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$92
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$91
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$90
	$16 = ($16 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$20 = ((int_64)$19 | (int_64)$20)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$89 }
	CALL eosio_assert([1], [1424])
	CALL eosio_assert([1], [1440])
	*(($21 + [64])) = [0]
	*($21 + [56]) = (int_64)0
	$16 = CALL strlen([640])
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$16 >= (uint_32)[11]) ){ goto $label$30 }
	*($21 + [56]) = ($16 << [1])
	$3 = (($21 + [56]) | [1])
	if ( $16 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$38
	$14 = (($16 + [16]) & [-16])
	$3 = CALL $184($14)
	*($21 + [368]) = ($14 | [1])
	*($21 + [376]) = $3
	*($21 + [372]) = $16
	
.LABEL $label$37
	CALL memcpy($3, [640], $16)
	
.LABEL $label$36
	*(($3 + $16)) = [0]
	*(($21 + [280])) = $13
	*(($21 + [292])) = *($21 + [372])
	*($21 + [264]) = $4
	$16 = ($21 + [376])
	*(($21 + [296])) = *($16)
	*($21 + [256]) = *($0)
	*($21 + [272]) = $6
	*($21 + [288]) = *($21 + [368])
	*($21 + [368]) = [0]
	*($21 + [372]) = [0]
	*($16) = [0]
	$16 = CALL $44(($21 + [112]), ($21 + [88]), $18, $20, ($21 + [256]))
	CALL $45(($21 + [72]), $16)
	$3 = *($21 + [72])
	CALL send_inline($3, (*($21 + [76]) - $3))
	$3 = *($21 + [72])
	if ( ($3 == 0) ){ goto $label$95 }
	*($21 + [76]) = $3
	CALL $185($3)
	
.LABEL $label$95
	$3 = *($16 + [28])
	if ( ($3 == 0) ){ goto $label$96 }
	*(($16 + [32])) = $3
	CALL $185($3)
	
.LABEL $label$96
	$3 = *($16 + [16])
	if ( ($3 == 0) ){ goto $label$97 }
	*(($16 + [20])) = $3
	CALL $185($3)
	
.LABEL $label$97
	if ( ((*(($21 + [288])) & [1]) == 0) ){ goto $label$98 }
	CALL $185(*(($21 + [296])))
	
.LABEL $label$98
	if ( ((*($21 + [368]) & [1]) == 0) ){ goto $label$35 }
	CALL $185(*(($21 + [376])))
	
.LABEL $label$35
	CALL eosio_assert([1], [1424])
	CALL eosio_assert([1], [1440])
	$7 = ((int_64)$12 / (int_64)20)
	if ( ((int_64)$12 < (int_64)20) ){ goto $label$99 }
	$20 = *($0)
	$15 = (int_64)0
	$17 = (int_64)59
	$16 = [624]
	$18 = (int_64)0
	
.LOOP $label$100:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$105 }
	$3 = *($16)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$104 }
	$3 = ($3 + [165])
	goto $label$103 
	
.LABEL $label$105
	$19 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$102 }
	goto $label$101 
	
.LABEL $label$104
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$103
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$102
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$101
	$16 = ($16 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$18 = ((int_64)$19 | (int_64)$18)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$100 }
	*($21 + [96]) = $18
	*($21 + [88]) = $20
	$15 = (int_64)0
	$17 = (int_64)59
	$16 = [144]
	$18 = (int_64)0
	
.LOOP $label$106:
	if ( ((uint_64)$15 > (uint_64)(int_64)10) ){ goto $label$111 }
	$3 = *($16)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$110 }
	$3 = ($3 + [165])
	goto $label$109 
	
.LABEL $label$111
	$19 = (int_64)0
	if ( ((int_64)$15 == (int_64)11) ){ goto $label$108 }
	goto $label$107 
	
.LABEL $label$110
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$109
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$108
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$107
	$16 = ($16 + [1])
	$17 = ((int_64)$17 + (int_64)-5)
	$18 = ((int_64)$19 | (int_64)$18)
	$15 = ((int_64)$15 + (int_64)1)
	if ( ((int_64)$15 != (int_64)13) ){ goto $label$106 }
	$15 = (int_64)0
	$17 = (int_64)59
	$16 = [128]
	$20 = (int_64)0
	
.LOOP $label$112:
	if ( ((uint_64)$15 > (uint_64)(int_64)7) ){ goto $label$117 }
	$3 = *($16)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$116 }
	$3 = ($3 + [165])
	goto $label$115 
	
.LABEL $label$117
	$19 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$114 }
	goto $label$113 
	
.LABEL $label$116
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$115
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$114
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$113
	$16 = ($16 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$20 = ((int_64)$19 | (int_64)$20)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$112 }
	CALL eosio_assert([1], [1424])
	CALL eosio_assert([1], [1440])
	*(($21 + [376])) = [0]
	*($21 + [368]) = (int_64)0
	$16 = CALL strlen([640])
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$16 >= (uint_32)[11]) ){ goto $label$120 }
	*($21 + [368]) = ($16 << [1])
	$3 = (($21 + [368]) | [1])
	if ( $16 ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$120
	$14 = (($16 + [16]) & [-16])
	$3 = CALL $184($14)
	*($21 + [368]) = ($14 | [1])
	*($21 + [376]) = $3
	*($21 + [372]) = $16
	
.LABEL $label$119
	CALL memcpy($3, [640], $16)
	
.LABEL $label$118
	*(($3 + $16)) = [0]
	*(($21 + [280])) = $13
	*(($21 + [292])) = *($21 + [372])
	*($21 + [264]) = $5
	$16 = ($21 + [376])
	*(($21 + [296])) = *($16)
	*($21 + [256]) = *($0)
	*($21 + [272]) = $7
	*($21 + [288]) = *($21 + [368])
	*($21 + [368]) = [0]
	*($21 + [372]) = [0]
	*($16) = [0]
	$16 = CALL $44(($21 + [112]), ($21 + [88]), $18, $20, ($21 + [256]))
	CALL $45(($21 + [72]), $16)
	$3 = *($21 + [72])
	CALL send_inline($3, (*($21 + [76]) - $3))
	$3 = *($21 + [72])
	if ( ($3 == 0) ){ goto $label$121 }
	*($21 + [76]) = $3
	CALL $185($3)
	
.LABEL $label$121
	$3 = *($16 + [28])
	if ( ($3 == 0) ){ goto $label$122 }
	*(($16 + [32])) = $3
	CALL $185($3)
	
.LABEL $label$122
	$3 = *($16 + [16])
	if ( ($3 == 0) ){ goto $label$123 }
	*(($16 + [20])) = $3
	CALL $185($3)
	
.LABEL $label$123
	if ( ((*(($21 + [288])) & [1]) == 0) ){ goto $label$124 }
	CALL $185(*(($21 + [296])))
	
.LABEL $label$124
	if ( ((*($21 + [368]) & [1]) == 0) ){ goto $label$99 }
	CALL $185(*(($21 + [376])))
	
.LABEL $label$99
	$19 = *($0)
	$16 = *($21 + [212])
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [736])
	CALL eosio_assert(((int_32)*($16 + [104]) == (int_32)$1), [784])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$3()), [832])
	$15 = *($16)
	CALL eosio_assert([1], [1424])
	CALL eosio_assert([1], [1440])
	*(($16 + [72])) = $13
	*(($14 = ($16 + [64]))) = $6
	CALL eosio_assert([1], [1424])
	CALL eosio_assert([1], [1440])
	CALL eosio_assert(((int_64)$13 == (int_64)*(($16 + [88]))), [896])
	$17 = ((int_64)*($3) + (int_64)$7)
	*(($3 = ($16 + [80]))) = $17
	CALL eosio_assert(((int_64)$17 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($3) < (int_64)4611686018427387904), [976])
	CALL eosio_assert(((int_64)$15 == (int_64)*($16)), [1008])
	*($21 + [96]) = (($21 + [256]) + [104])
	*($21 + [92]) = ($21 + [256])
	*($21 + [88]) = ($21 + [256])
	CALL eosio_assert([1], [656])
	CALL memcpy(*($21 + [92]), $16, [8])
	*($21 + [92]) = (*($21 + [92]) + [8])
	*($21 + [72]) = ($21 + [88])
	*($21 + [116]) = ($16 + [24])
	*($21 + [112]) = ($16 + [8])
	*($21 + [120]) = ($16 + [40])
	CALL $83(($21 + [112]), ($21 + [72]))
	*($21 + [72]) = ($21 + [88])
	*($21 + [116]) = $14
	*($21 + [112]) = ($16 + [48])
	*($21 + [120]) = $3
	*($21 + [124]) = ($16 + [96])
	CALL $84(($21 + [112]), ($21 + [72]))
	CALL db_update_i64(*($16 + [108]), $19, ($21 + [256]), [104])
	$16 = ($0 + [64])
	if ( (uint_64)($15 <= *($16)) ){ goto $label$125 }
	*($16) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	
.LABEL $label$125
	CALL __multi3(($21 + [8]), $12, (int_64)$12 >> (int_64)63), (int_64)9, (int_64)0)
	$15 = *((($21 + [8]) + [8]))
	$19 = *($21 + [8])
	CALL eosio_assert(( (uint_64)($19 <= (int_64)4611686018427387904) ? ((int_64)$15 < (int_64)0) : (int_64)($15 == 0) ), [1472])
	CALL eosio_assert(( ((uint_64)$19 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$15 > (int_64)-1) : ((int_64)$15 == (int_64)-1) ), [1504])
	CALL eosio_assert([1], [1424])
	CALL eosio_assert([1], [1440])
	$19 = ((int_64)$19 / (int_64)20)
	goto $label$21 
	
.LABEL $label$34
	$14 = (($16 + [16]) & [-16])
	$3 = CALL $184($14)
	*($21 + [56]) = ($14 | [1])
	*($21 + [64]) = $3
	*($21 + [60]) = $16
	
.LABEL $label$33
	CALL memcpy($3, [640], $16)
	
.LABEL $label$32
	*(($3 + $16)) = [0]
	*(($21 + [280])) = $13
	*(($21 + [292])) = *($21 + [60])
	*($21 + [264]) = $4
	$16 = ($21 + [64])
	*(($21 + [296])) = *($16)
	*($21 + [256]) = *($0)
	*($21 + [272]) = $12
	*($21 + [288]) = *($21 + [56])
	*($21 + [56]) = [0]
	*($21 + [60]) = [0]
	*($16) = [0]
	$16 = CALL $44(($21 + [112]), ($21 + [72]), $18, $20, ($21 + [256]))
	CALL $45(($21 + [368]), $16)
	$3 = *($21 + [368])
	CALL send_inline($3, (*($21 + [372]) - $3))
	$3 = *($21 + [368])
	if ( ($3 == 0) ){ goto $label$126 }
	*($21 + [372]) = $3
	CALL $185($3)
	
.LABEL $label$126
	$3 = *($16 + [28])
	if ( ($3 == 0) ){ goto $label$127 }
	*(($16 + [32])) = $3
	CALL $185($3)
	
.LABEL $label$127
	$3 = *($16 + [16])
	if ( ($3 == 0) ){ goto $label$128 }
	*(($16 + [20])) = $3
	CALL $185($3)
	
.LABEL $label$128
	if ( ((*(($21 + [288])) & [1]) == 0) ){ goto $label$129 }
	CALL $185(*(($21 + [296])))
	
.LABEL $label$129
	if ( ((*($21 + [56]) & [1]) == 0) ){ goto $label$31 }
	CALL $185(*(($21 + [64])))
	
.LABEL $label$31
	CALL eosio_assert([1], [1424])
	CALL eosio_assert([1], [1440])
	$12 = ((int_64)$7 / (int_64)20)
	if ( ((int_64)$7 < (int_64)20) ){ goto $label$23 }
	$20 = *($0)
	$15 = (int_64)0
	$17 = (int_64)59
	$16 = [624]
	$18 = (int_64)0
	
.LOOP $label$130:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$135 }
	$3 = *($16)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$134 }
	$3 = ($3 + [165])
	goto $label$133 
	
.LABEL $label$135
	$19 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$132 }
	goto $label$131 
	
.LABEL $label$134
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$133
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$132
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$131
	$16 = ($16 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$18 = ((int_64)$19 | (int_64)$18)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$130 }
	*($21 + [80]) = $18
	*($21 + [72]) = $20
	$15 = (int_64)0
	$17 = (int_64)59
	$16 = [144]
	$18 = (int_64)0
	
.LOOP $label$136:
	if ( ((uint_64)$15 > (uint_64)(int_64)10) ){ goto $label$141 }
	$3 = *($16)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$140 }
	$3 = ($3 + [165])
	goto $label$139 
	
.LABEL $label$141
	$19 = (int_64)0
	if ( ((int_64)$15 == (int_64)11) ){ goto $label$138 }
	goto $label$137 
	
.LABEL $label$140
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$139
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$138
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$137
	$16 = ($16 + [1])
	$17 = ((int_64)$17 + (int_64)-5)
	$18 = ((int_64)$19 | (int_64)$18)
	$15 = ((int_64)$15 + (int_64)1)
	if ( ((int_64)$15 != (int_64)13) ){ goto $label$136 }
	$15 = (int_64)0
	$17 = (int_64)59
	$16 = [128]
	$20 = (int_64)0
	
.LOOP $label$142:
	if ( ((uint_64)$15 > (uint_64)(int_64)7) ){ goto $label$147 }
	$3 = *($16)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$146 }
	$3 = ($3 + [165])
	goto $label$145 
	
.LABEL $label$147
	$19 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$144 }
	goto $label$143 
	
.LABEL $label$146
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$145
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$144
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$143
	$16 = ($16 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$20 = ((int_64)$19 | (int_64)$20)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$142 }
	CALL eosio_assert([1], [1424])
	CALL eosio_assert([1], [1440])
	*(($21 + [64])) = [0]
	*($21 + [56]) = (int_64)0
	$16 = CALL strlen([640])
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$16 >= (uint_32)[11]) ){ goto $label$26 }
	*($21 + [56]) = ($16 << [1])
	$3 = (($21 + [56]) | [1])
	if ( $16 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$30
	$14 = (($16 + [16]) & [-16])
	$3 = CALL $184($14)
	*($21 + [56]) = ($14 | [1])
	*($21 + [64]) = $3
	*($21 + [60]) = $16
	
.LABEL $label$29
	CALL memcpy($3, [640], $16)
	
.LABEL $label$28
	*(($3 + $16)) = [0]
	*(($21 + [280])) = $13
	*(($21 + [292])) = *($21 + [60])
	*($21 + [264]) = $5
	$16 = ($21 + [64])
	*(($21 + [296])) = *($16)
	*($21 + [256]) = *($0)
	*($21 + [272]) = $4
	*($21 + [288]) = *($21 + [56])
	*($21 + [56]) = [0]
	*($21 + [60]) = [0]
	*($16) = [0]
	$16 = CALL $44(($21 + [112]), ($21 + [72]), $18, $20, ($21 + [256]))
	CALL $45(($21 + [368]), $16)
	$3 = *($21 + [368])
	CALL send_inline($3, (*($21 + [372]) - $3))
	$3 = *($21 + [368])
	if ( ($3 == 0) ){ goto $label$148 }
	*($21 + [372]) = $3
	CALL $185($3)
	
.LABEL $label$148
	$3 = *($16 + [28])
	if ( ($3 == 0) ){ goto $label$149 }
	*(($16 + [32])) = $3
	CALL $185($3)
	
.LABEL $label$149
	$3 = *($16 + [16])
	if ( ($3 == 0) ){ goto $label$150 }
	*(($16 + [20])) = $3
	CALL $185($3)
	
.LABEL $label$150
	if ( ((*(($21 + [288])) & [1]) == 0) ){ goto $label$151 }
	CALL $185(*(($21 + [296])))
	
.LABEL $label$151
	if ( ((*($21 + [56]) & [1]) == 0) ){ goto $label$27 }
	CALL $185(*(($21 + [64])))
	
.LABEL $label$27
	$19 = *($0)
	$16 = *($21 + [212])
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [736])
	CALL eosio_assert(((int_32)*($16 + [104]) == (int_32)$1), [784])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$3()), [832])
	*(($14 = ($16 + [64]))) = $7
	*(($16 + [72])) = $6
	$15 = *($16)
	CALL eosio_assert([1], [1424])
	CALL eosio_assert([1], [1440])
	CALL eosio_assert(((int_64)$13 == (int_64)*(($16 + [88]))), [896])
	$17 = ((int_64)*($3) + (int_64)$4)
	*(($3 = ($16 + [80]))) = $17
	CALL eosio_assert(((int_64)$17 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($3) < (int_64)4611686018427387904), [976])
	CALL eosio_assert(((int_64)$15 == (int_64)*($16)), [1008])
	*($21 + [80]) = (($21 + [256]) + [104])
	*($21 + [76]) = ($21 + [256])
	*($21 + [72]) = ($21 + [256])
	CALL eosio_assert([1], [656])
	CALL memcpy(*($21 + [76]), $16, [8])
	*($21 + [76]) = (*($21 + [76]) + [8])
	*($21 + [368]) = ($21 + [72])
	*($21 + [116]) = ($16 + [24])
	*($21 + [112]) = ($16 + [8])
	*($21 + [120]) = ($16 + [40])
	CALL $83(($21 + [112]), ($21 + [368]))
	*($21 + [368]) = ($21 + [72])
	*($21 + [116]) = $14
	*($21 + [112]) = ($16 + [48])
	*($21 + [120]) = $3
	*($21 + [124]) = ($16 + [96])
	CALL $84(($21 + [112]), ($21 + [368]))
	CALL db_update_i64(*($16 + [108]), $19, ($21 + [256]), [104])
	$16 = ($0 + [64])
	if ( (uint_64)($15 <= *($16)) ){ goto $label$152 }
	*($16) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	
.LABEL $label$152
	CALL __multi3(($21 + [40]), $12, (int_64)$12 >> (int_64)63), (int_64)9, (int_64)0)
	$15 = *((($21 + [40]) + [8]))
	$19 = *($21 + [40])
	CALL eosio_assert(( (uint_64)($19 <= (int_64)4611686018427387904) ? ((int_64)$15 < (int_64)0) : (int_64)($15 == 0) ), [1472])
	CALL eosio_assert(( ((uint_64)$19 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$15 > (int_64)-1) : ((int_64)$15 == (int_64)-1) ), [1504])
	CALL eosio_assert([1], [1424])
	CALL eosio_assert([1], [1440])
	$19 = ((int_64)$19 / (int_64)10)
	$6 = $13
	goto $label$22 
	
.LABEL $label$26
	$14 = (($16 + [16]) & [-16])
	$3 = CALL $184($14)
	*($21 + [56]) = ($14 | [1])
	*($21 + [64]) = $3
	*($21 + [60]) = $16
	
.LABEL $label$25
	CALL memcpy($3, [640], $16)
	
.LABEL $label$24
	*(($3 + $16)) = [0]
	*(($21 + [280])) = $6
	*(($21 + [292])) = *($21 + [60])
	*($21 + [264]) = $5
	$16 = ($21 + [64])
	*(($21 + [296])) = *($16)
	*($21 + [256]) = *($0)
	*($21 + [272]) = $12
	*($21 + [288]) = *($21 + [56])
	*($21 + [56]) = [0]
	*($21 + [60]) = [0]
	*($16) = [0]
	$16 = CALL $44(($21 + [112]), ($21 + [72]), $18, $20, ($21 + [256]))
	CALL $45(($21 + [368]), $16)
	$3 = *($21 + [368])
	CALL send_inline($3, (*($21 + [372]) - $3))
	$3 = *($21 + [368])
	if ( ($3 == 0) ){ goto $label$153 }
	*($21 + [372]) = $3
	CALL $185($3)
	
.LABEL $label$153
	$3 = *($16 + [28])
	if ( ($3 == 0) ){ goto $label$154 }
	*(($16 + [32])) = $3
	CALL $185($3)
	
.LABEL $label$154
	$3 = *($16 + [16])
	if ( ($3 == 0) ){ goto $label$155 }
	*(($16 + [20])) = $3
	CALL $185($3)
	
.LABEL $label$155
	if ( ((*(($21 + [288])) & [1]) == 0) ){ goto $label$156 }
	CALL $185(*(($21 + [296])))
	
.LABEL $label$156
	if ( ((*($21 + [56]) & [1]) == 0) ){ goto $label$23 }
	CALL $185(*(($21 + [64])))
	
.LABEL $label$23
	$19 = *($0)
	$16 = *($21 + [212])
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [736])
	CALL eosio_assert(((int_32)*($16 + [104]) == (int_32)$1), [784])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$3()), [832])
	$15 = *($16)
	CALL eosio_assert([1], [1424])
	CALL eosio_assert([1], [1440])
	*(($16 + [72])) = $6
	*(($14 = ($16 + [64]))) = $8
	CALL eosio_assert([1], [1424])
	CALL eosio_assert([1], [1440])
	CALL eosio_assert(((int_64)$6 == (int_64)*(($16 + [88]))), [896])
	$17 = ((int_64)*($3) + (int_64)$12)
	*(($3 = ($16 + [80]))) = $17
	CALL eosio_assert(((int_64)$17 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($3) < (int_64)4611686018427387904), [976])
	CALL eosio_assert(((int_64)$15 == (int_64)*($16)), [1008])
	*($21 + [80]) = (($21 + [256]) + [104])
	*($21 + [76]) = ($21 + [256])
	*($21 + [72]) = ($21 + [256])
	CALL eosio_assert([1], [656])
	CALL memcpy(*($21 + [76]), $16, [8])
	*($21 + [76]) = (*($21 + [76]) + [8])
	*($21 + [368]) = ($21 + [72])
	*($21 + [116]) = ($16 + [24])
	*($21 + [112]) = ($16 + [8])
	*($21 + [120]) = ($16 + [40])
	CALL $83(($21 + [112]), ($21 + [368]))
	*($21 + [368]) = ($21 + [72])
	*($21 + [116]) = $14
	*($21 + [112]) = ($16 + [48])
	*($21 + [120]) = $3
	*($21 + [124]) = ($16 + [96])
	CALL $84(($21 + [112]), ($21 + [368]))
	CALL db_update_i64(*($16 + [108]), $19, ($21 + [256]), [104])
	$16 = ($0 + [64])
	if ( (uint_64)($15 <= *($16)) ){ goto $label$157 }
	*($16) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	
.LABEL $label$157
	CALL __multi3(($21 + [24]), $7, (int_64)$7 >> (int_64)63), (int_64)9, (int_64)0)
	$15 = *((($21 + [24]) + [8]))
	$19 = *($21 + [24])
	CALL eosio_assert(( (uint_64)($19 <= (int_64)4611686018427387904) ? ((int_64)$15 < (int_64)0) : (int_64)($15 == 0) ), [1472])
	CALL eosio_assert(( ((uint_64)$19 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$15 > (int_64)-1) : ((int_64)$15 == (int_64)-1) ), [1504])
	CALL eosio_assert([1], [1424])
	CALL eosio_assert([1], [1440])
	$19 = ((int_64)$19 / (int_64)20)
	
.LABEL $label$22
	$13 = $6
	
.LABEL $label$21
	$10 = *(($0 + [160]))
	$14 = *(($0 + [164]))
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$158 }
	$16 = ($14 + [-24])
	$2 = ([0] - $10)
	
.LOOP $label$159:
	if ( (int_64)(*(*($16)) == 0) ){ goto $label$158 }
	$14 = $16
	$3 = ($16 + [-24])
	$16 = $3
	if ( ((int_32)($3 + $2) != (int_32)[-24]) ){ goto $label$159 }
	
.LABEL $label$158
	$9 = ($0 + [136])
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$164 }
	$16 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [104]) == (int_32)$9), [160])
	$17 = *($0)
	if ( $16 ){ goto $label$163 }
	goto $label$161 
	
.LABEL $label$164
	$16 = CALL db_find_i64(*(($0 + [136])), *(($0 + [144])), (int_64)-3838636826861502464, (int_64)0)
	if ( ((int_32)$16 <= (int_32)[-1]) ){ goto $label$162 }
	$16 = CALL $85($9, $16)
	CALL eosio_assert(((int_32)*($16 + [104]) == (int_32)$9), [160])
	$17 = *($0)
	
.LABEL $label$163
	CALL eosio_assert([1], [736])
	CALL eosio_assert(((int_32)*($16 + [104]) == (int_32)$9), [784])
	CALL eosio_assert(((int_64)*(($0 + [136])) == (int_64)CALL $fimport$3()), [832])
	$3 = *($11)
	*(($16 + [20])) = *(($3 + [76]))
	*(($16 + [16])) = *(($3 + [72]))
	*(($16 + [12])) = *(($3 + [68]))
	*($16 + [8]) = *(($3 + [64]))
	$15 = *($16)
	CALL eosio_assert(((int_64)$13 == (int_64)*(($16 + [32]))), [896])
	$19 = ((int_64)*($16 + [24]) + (int_64)$19)
	*($16 + [24]) = $19
	CALL eosio_assert(((int_64)$19 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($16 + [24]) < (int_64)4611686018427387904), [976])
	$3 = *($11)
	*($16 + [40]) = *($3 + [48])
	*(($16 + [52])) = *(($3 + [60]))
	*(($16 + [48])) = *(($3 + [56]))
	*(($16 + [44])) = *(($3 + [52]))
	*(($16 + [64])) = *(($3 + [32]))
	*($16 + [56]) = *(($3 + [24]))
	*(($16 + [96])) = *(($3 + [16]))
	*($16 + [88]) = *($3 + [8])
	CALL eosio_assert(((int_64)$15 == (int_64)*($16)), [1008])
	*($21 + [96]) = (($21 + [256]) + [104])
	*($21 + [92]) = ($21 + [256])
	*($21 + [88]) = ($21 + [256])
	*($21 + [72]) = ($21 + [88])
	*($21 + [116]) = ($16 + [8])
	*($21 + [112]) = $16
	*($21 + [120]) = ($16 + [24])
	*($21 + [124]) = ($16 + [40])
	*($21 + [128]) = ($16 + [56])
	*($21 + [132]) = ($16 + [72])
	*($21 + [136]) = ($16 + [88])
	CALL $87(($21 + [112]), ($21 + [72]))
	CALL db_update_i64(*($16 + [108]), $17, ($21 + [256]), [104])
	$16 = ($0 + [152])
	if ( (uint_64)($15 <= *($16)) ){ goto $label$160 }
	*($16) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	goto $label$160 
	
.LABEL $label$162
	$17 = *($0)
	
.LABEL $label$161
	CALL eosio_assert(((int_64)*(($0 + [136])) == (int_64)CALL $fimport$3()), [672])
	$16 = CALL $184([120])
	CALL $86($16)
	*($16 + [104]) = $9
	*($16) = (int_64)0
	$3 = *($11)
	*(($16 + [20])) = *(($3 + [76]))
	*(($16 + [16])) = *(($3 + [72]))
	*(($16 + [12])) = *(($3 + [68]))
	*($16 + [8]) = *(($3 + [64]))
	*($16 + [24]) = $19
	*($16 + [32]) = $13
	*(($16 + [48])) = *(($3 + [56]))
	*($16 + [40]) = *($3 + [48])
	*(($16 + [64])) = *(($3 + [32]))
	*($16 + [56]) = *(($3 + [24]))
	*(($16 + [96])) = *(($3 + [16]))
	*($16 + [88]) = *($3 + [8])
	*($21 + [96]) = (($21 + [256]) + [104])
	*($21 + [92]) = ($21 + [256])
	*($21 + [88]) = ($21 + [256])
	*($21 + [72]) = ($21 + [88])
	*($21 + [116]) = ($16 + [8])
	*($21 + [112]) = $16
	*($21 + [120]) = ($16 + [24])
	*($21 + [124]) = ($16 + [40])
	*($21 + [128]) = ($16 + [56])
	*($21 + [132]) = ($16 + [72])
	*($21 + [136]) = ($16 + [88])
	CALL $87(($21 + [112]), ($21 + [72]))
	$15 = *($16)
	$14 = CALL db_store_i64(*(($0 + [144])), (int_64)-3838636826861502464, $17, $15, ($21 + [256]), [104])
	*($16 + [108]) = $14
	$3 = ($0 + [152])
	if ( (uint_64)($15 <= *($3)) ){ goto $label$165 }
	*($3) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	
.LABEL $label$165
	*($21 + [112]) = $16
	$15 = *($16)
	*($21 + [256]) = $15
	*($21 + [88]) = $14
	$2 = ($0 + [164])
	$3 = *($2)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [168]))) ){ goto $label$167 }
	*($3 + [8]) = $15
	*($3 + [16]) = $14
	*($21 + [112]) = [0]
	*($3) = $16
	*($2) = ($3 + [24])
	goto $label$166 
	
.LABEL $label$167
	CALL $88(($0 + [160]), ($21 + [112]), ($21 + [256]), ($21 + [88]))
	
.LABEL $label$166
	$16 = *($21 + [112])
	*($21 + [112]) = [0]
	if ( ($16 == 0) ){ goto $label$160 }
	CALL $185($16)
	
.LABEL $label$160
	if ( (*(CALL $52(($21 + [216]), CALL $fimport$11(*($21 + [216]), *(($21 + [224])), (int_64)-4157529991795441664, (int_64)0)) + [8]) == 0) ){ goto $label$170 }
	CALL _ZN5eosio10texas_game10texasdividEv($0)
	$3 = *($21 + [176])
	if ( $3 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$16 = *($21 + [212])
	$15 = *($0)
	*($21 + [256]) = ($21 + [192])
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [736])
	CALL $89($1, $16, $15, ($21 + [256]))
	$1 = *(($0 + [160]))
	$14 = *(($0 + [164]))
	if ( ((int_32)$14 == (int_32)$1) ){ goto $label$171 }
	$16 = ($14 + [-24])
	$2 = ([0] - $1)
	
.LOOP $label$172:
	if ( (int_64)(*(*($16)) == 0) ){ goto $label$171 }
	$14 = $16
	$3 = ($16 + [-24])
	$16 = $3
	if ( ((int_32)($3 + $2) != (int_32)[-24]) ){ goto $label$172 }
	
.LABEL $label$171
	if ( ((int_32)$14 == (int_32)$1) ){ goto $label$174 }
	$16 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [104]) == (int_32)$9), [160])
	goto $label$173 
	
.LABEL $label$174
	$16 = [0]
	$3 = CALL db_find_i64(*(($0 + [136])), *(($0 + [144])), (int_64)-3838636826861502464, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$173 }
	$16 = CALL $85($9, $3)
	CALL eosio_assert(((int_32)*($16 + [104]) == (int_32)$9), [160])
	
.LABEL $label$173
	$15 = *($0)
	*($21 + [256]) = ($21 + [208])
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [736])
	CALL $90($9, $16, $15, ($21 + [256]))
	$3 = *($21 + [176])
	if ( ($3 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$14 = ($21 + [180])
	$16 = *($14)
	if ( ((int_32)$16 == (int_32)$3) ){ goto $label$176 }
	
.LOOP $label$177:
	$16 = ($16 + [-24])
	$0 = *($16)
	*($16) = [0]
	if ( ($0 == 0) ){ goto $label$178 }
	CALL $185($0)
	
.LABEL $label$178
	if ( ((int_32)$3 != (int_32)$16) ){ goto $label$177 }
	$16 = *(($21 + [176]))
	goto $label$175 
	
.LABEL $label$176
	$16 = $3
	
.LABEL $label$175
	*($14) = $3
	CALL $185($16)
	
.LABEL $label$168
	$3 = *($21 + [240])
	if ( ($3 == 0) ){ goto $label$179 }
	$14 = ($21 + [244])
	$16 = *($14)
	if ( ((int_32)$16 == (int_32)$3) ){ goto $label$181 }
	
.LOOP $label$182:
	$16 = ($16 + [-24])
	$0 = *($16)
	*($16) = [0]
	if ( ($0 == 0) ){ goto $label$183 }
	CALL $185($0)
	
.LABEL $label$183
	if ( ((int_32)$3 != (int_32)$16) ){ goto $label$182 }
	$16 = *(($21 + [240]))
	goto $label$180 
	
.LABEL $label$181
	$16 = $3
	
.LABEL $label$180
	*($14) = $3
	CALL $185($16)
	
.LABEL $label$179
	*([0] + [4]) = ($21 + [384])
	return (unreachable)
	
.LABEL $label$20
	CALL $186(($21 + [368]))
	
.LABEL $label$19
	CALL $186(($21 + [368]))
	
.LABEL $label$18
	CALL $186(($21 + [56]))
	
.LABEL $label$17
	CALL $186(($21 + [56]))
	
.LABEL $label$16
	CALL $186(($21 + [56]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $101 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	$6 = [0]
	*(($7 + [40])) = [0]
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$4 = *($1)
	*($7 + [8]) = $4
	*($7 + [16]) = $2
	$1 = CALL db_find_i64($4, $2, (int_64)3607749779137757184, $3)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $102(($7 + [8]), $1)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($7 + [8])), [160])
	*(($0 + [8])) = *(($6 + [8]))
	*($0) = *($6)
	$1 = *($7 + [32])
	if ( ($1 == 0) ){ goto $label$1 }
	$5 = ($7 + [36])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL $185($0)
	
.LABEL $label$6
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$5 }
	$6 = *(($7 + [32]))
	goto $label$2 
	
.LABEL $label$4
	*($0 + [8]) = (int_64)1129334020
	*($0) = (int_64)0
	CALL eosio_assert([1], [512])
	$2 = (int_64)4411461
	
.LOOP $label$8:
	$0 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$0 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert($0, [576])
	goto $label$1 
	
.LABEL $label$3
	$6 = $1
	
.LABEL $label$2
	*($5) = $1
	CALL $185($6)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	$10 = $11
	*([0] + [4]) = $11
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$7 = ($4 + [64])
	$9 = *($7)
	if ( ((int_64)$9 != (int_64)-1) ){ goto $label$1 }
	$9 = (int_64)0
	$5 = ($4 + [48])
	$6 = CALL db_lowerbound_i64(*($5), *(($4 + [56])), (int_64)-3838636613264998400, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $81($5, $6)
	*($10 + [28]) = [0]
	*($10 + [24]) = $5
	$9 = *(*(CALL $80(($10 + [24])) + [4]))
	$9 = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [64])) = $9
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($9 <= (int_64)-2), [1536])
	*($1) = *($7)
	$4 = *($3 + [4])
	*($1 + [8]) = *($4)
	*(($1 + [16])) = *(($4 + [8]))
	$4 = *($3 + [4])
	$9 = *($4)
	$8 = *($4 + [8])
	$3 = *($3 + [8])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$8), [896])
	$9 = ((int_64)$9 + (int_64)*($3))
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [976])
	*(($1 + [32])) = $8
	*(($4 = ($1 + [24]))) = $9
	$11 = $11
	$3 = ($11 + [-112])
	*([0] + [4]) = $3
	*($10 + [12]) = $3
	*($10 + [8]) = $3
	*($10 + [16]) = ($11 + [-8])
	CALL eosio_assert([1], [656])
	CALL memcpy(*($10 + [12]), $1, [8])
	*($10 + [12]) = (*($10 + [12]) + [8])
	*($10 + [40]) = ($10 + [8])
	*($10 + [28]) = $4
	*($10 + [24]) = ($1 + [8])
	*($10 + [32]) = ($1 + [40])
	CALL $83(($10 + [24]), ($10 + [40]))
	*($10 + [40]) = ($10 + [8])
	*($10 + [28]) = ($1 + [64])
	*($10 + [24]) = ($1 + [48])
	*($10 + [32]) = ($1 + [80])
	*($10 + [36]) = ($1 + [96])
	CALL $84(($10 + [24]), ($10 + [40]))
	$9 = *($1)
	*($1 + [108]) = CALL db_store_i64(*($2 + [8]), (int_64)-3838636613264998400, *(*($0 + [8])), $9, $3, [104])
	if ( (uint_64)($9 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC $103 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [512])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [576])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [608])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [480])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $184([32])
	$6 = CALL $103($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $104(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $185($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$8 = ($4 + [64])
	$7 = *($8)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$5 = ($4 + [48])
	$6 = CALL db_lowerbound_i64(*($5), *(($4 + [56])), (int_64)-3838636613264998400, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $81($5, $6)
	*($9 + [28]) = [0]
	*($9 + [24]) = $5
	$7 = *(*(CALL $80(($9 + [24])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [64])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [1536])
	*($1) = *($8)
	*($1 + [8]) = *(*($3 + [4]))
	*(($4 = ($1 + [24]))) = ((int_64)*(*($3 + [4])) + (int_64)*(*($3 + [8])))
	$10 = $10
	$3 = ($10 + [-112])
	*([0] + [4]) = $3
	*($9 + [12]) = $3
	*($9 + [8]) = $3
	*($9 + [16]) = ($10 + [-8])
	CALL eosio_assert([1], [656])
	CALL memcpy(*($9 + [12]), $1, [8])
	*($9 + [12]) = (*($9 + [12]) + [8])
	*($9 + [40]) = ($9 + [8])
	*($9 + [28]) = $4
	*($9 + [24]) = ($1 + [8])
	*($9 + [32]) = ($1 + [40])
	CALL $83(($9 + [24]), ($9 + [40]))
	*($9 + [40]) = ($9 + [8])
	*($9 + [28]) = ($1 + [64])
	*($9 + [24]) = ($1 + [48])
	*($9 + [32]) = ($1 + [80])
	*($9 + [36]) = ($1 + [96])
	CALL $84(($9 + [24]), ($9 + [40]))
	$7 = *($1)
	*($1 + [108]) = CALL db_store_i64(*($2 + [8]), (int_64)-3838636613264998400, *(*($0 + [8])), $7, $3, [104])
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $104 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $184(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $188($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $185($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $185($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $107 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*(($6 + [108])) == (int_32)$0), [160])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6030912134838419456, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $56($0, $5)
	CALL eosio_assert(((int_32)*($6 + [108]) == (int_32)$0), [160])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	$10 = $11
	*([0] + [4]) = $11
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$7 = ($4 + [64])
	$9 = *($7)
	if ( ((int_64)$9 != (int_64)-1) ){ goto $label$1 }
	$9 = (int_64)0
	$5 = ($4 + [48])
	$6 = CALL db_lowerbound_i64(*($5), *(($4 + [56])), (int_64)-3838636613264998400, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $81($5, $6)
	*($10 + [28]) = [0]
	*($10 + [24]) = $5
	$9 = *(*(CALL $80(($10 + [24])) + [4]))
	$9 = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [64])) = $9
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($9 <= (int_64)-2), [1536])
	*($1) = *($7)
	$4 = *($3 + [4])
	*($1 + [8]) = *($4)
	*(($1 + [16])) = *(($4 + [8]))
	$4 = *($3 + [8])
	$9 = *($4)
	$8 = *($4 + [8])
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$8), [896])
	$9 = ((int_64)$9 + (int_64)*($3))
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [976])
	*(($1 + [32])) = $8
	*(($4 = ($1 + [24]))) = $9
	$11 = $11
	$3 = ($11 + [-112])
	*([0] + [4]) = $3
	*($10 + [12]) = $3
	*($10 + [8]) = $3
	*($10 + [16]) = ($11 + [-8])
	CALL eosio_assert([1], [656])
	CALL memcpy(*($10 + [12]), $1, [8])
	*($10 + [12]) = (*($10 + [12]) + [8])
	*($10 + [40]) = ($10 + [8])
	*($10 + [28]) = $4
	*($10 + [24]) = ($1 + [8])
	*($10 + [32]) = ($1 + [40])
	CALL $83(($10 + [24]), ($10 + [40]))
	*($10 + [40]) = ($10 + [8])
	*($10 + [28]) = ($1 + [64])
	*($10 + [24]) = ($1 + [48])
	*($10 + [32]) = ($1 + [80])
	*($10 + [36]) = ($1 + [96])
	CALL $84(($10 + [24]), ($10 + [40]))
	$9 = *($1)
	*($1 + [108]) = CALL db_store_i64(*($2 + [8]), (int_64)-3838636613264998400, *(*($0 + [8])), $9, $3, [104])
	if ( (uint_64)($9 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [608])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [608])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [608])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [608])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [608])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [608])
	CALL memcpy($0, *($2 + [4]), [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $1) > (uint_32)[7]), [608])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $108 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [96])
	*([0] + [4]) = $14
	CALL eosio_assert(((int_32)*(($1 + [108])) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	*($1 + [72]) = ((float_64)(CASTING float_64)(int_64 *(*($3))) / (float_64)(CASTING float_64)(int_64 *(*($3 + [4]))))
	$4 = ($1 + [80])
	*(($13 = $14) + [24]) = *($4)
	$5 = *($1)
	$3 = *($3)
	*($1 + [40]) = *($3)
	*(($1 + [48])) = *(($3 + [8]))
	CALL eosio_assert([1], [1008])
	$8 = ($1 + [92])
	$7 = ($1 + [40])
	$6 = ($1 + [72])
	$9 = *($1 + [92])
	$10 = *(($1 + [96]))
	$11 = ($10 - $9)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [3]))
	$3 = [90]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$2 }
	$3 = (($11 & [-8]) + $3)
	
.LABEL $label$2
	$10 = ($3 + [2])
	if ( ($10 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($10)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($14 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($13 + [12]) = $3
	*($13 + [8]) = $3
	*($13 + [16]) = ($3 + $10)
	*($13 + [32]) = ($13 + [8])
	*($13 + [56]) = $7
	*($13 + [64]) = $6
	*($13 + [40]) = $1
	*($13 + [44]) = ($1 + [8])
	*($13 + [48]) = ($1 + [16])
	*($13 + [52]) = ($1 + [32])
	*($13 + [60]) = ($1 + [56])
	*($13 + [68]) = $4
	*($13 + [72]) = ($1 + [88])
	*($13 + [76]) = ($1 + [89])
	*($13 + [80]) = $8
	*($13 + [84]) = ($1 + [104])
	*($13 + [88]) = ($1 + [105])
	CALL $58(($13 + [40]), ($13 + [32]))
	CALL db_update_i64(*($1 + [112]), $2, $3, $10)
	if ( ($10 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($13 + [40]) = *($4)
	if ( (CALL memcmp(($13 + [24]), ($13 + [40]), [8]) == 0) ){ goto $label$7 }
	$3 = *($1 + [116])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx_double_find_primary(*($0), *($0 + [8]), (int_64)-6030912134838419456, ($13 + [32]), $5)
	*(($1 + [116])) = $3
	
.LABEL $label$8
	CALL db_idx_double_update($3, $2, ($13 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($13 + [96])
}

void .FUNC _ZN5eosio10texas_game9clearchipEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	$2 = *(($0 + [120]))
	$6 = *(($0 + [124]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [96])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$5 }
	$4 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)$5), [160])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = CALL db_find_i64(*(($0 + [96])), *(($0 + [104])), (int_64)-3838636559280373760, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $40($5, $4)
	CALL eosio_assert(((int_32)*($4 + [28]) == (int_32)$5), [160])
	
.LABEL $label$4
	CALL eosio_assert([1], [224])
	CALL eosio_assert([1], [272])
	$6 = CALL db_next_i64(*($4 + [32]), ($7 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL $40($5, $6)
	
.LABEL $label$6
	CALL $41($5, $4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *(($0 + [160]))
	if ( ($3 == 0) ){ goto $label$1 }
	$1 = ($0 + [164])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $185($5)
	
.LABEL $label$5
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$4 }
	$2 = *(($0 + [160]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $3
	
.LABEL $label$2
	*($1) = $3
	CALL $185($2)
	
.LABEL $label$1
	$3 = *(($0 + [120]))
	if ( ($3 == 0) ){ goto $label$6 }
	$1 = ($0 + [124])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	CALL $185($5)
	
.LABEL $label$10
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($0 + [120]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $3
	
.LABEL $label$7
	*($1) = $3
	CALL $185($2)
	
.LABEL $label$6
	$3 = *(($0 + [72]))
	if ( ($3 == 0) ){ goto $label$11 }
	$1 = ($0 + [76])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	CALL $185($5)
	
.LABEL $label$15
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($0 + [72]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $3
	
.LABEL $label$12
	*($1) = $3
	CALL $185($2)
	
.LABEL $label$11
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$16 }
	$4 = ($0 + [36])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$20 }
	$3 = *($2 + [20])
	if ( ($3 == 0) ){ goto $label$21 }
	*(($2 + [24])) = $3
	CALL $185($3)
	
.LABEL $label$21
	$3 = *($2 + [8])
	if ( ($3 == 0) ){ goto $label$22 }
	*(($2 + [12])) = $3
	CALL $185($3)
	
.LABEL $label$22
	CALL $185($2)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$19 }
	$2 = *(($0 + [32]))
	goto $label$17 
	
.LABEL $label$18
	$2 = $1
	
.LABEL $label$17
	*($4) = $1
	CALL $185($2)
	
.LABEL $label$16
	return $0
}

void .FUNC _ZN5eosio10texas_game8rechargeEyNS_5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [80])
	*([0] + [4]) = $10
	CALL require_auth(*($0))
	$3 = *(($0 + [120]))
	$7 = *(($0 + [124]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [96])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$7 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [28]) == (int_32)$4), [160])
	$9 = *($0)
	if ( $6 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = CALL db_find_i64(*(($0 + [96])), *(($0 + [104])), (int_64)-3838636559280373760, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL $40($4, $6)
	CALL eosio_assert(((int_32)*($6 + [28]) == (int_32)$4), [160])
	$9 = *($0)
	
.LABEL $label$6
	CALL eosio_assert([1], [736])
	CALL eosio_assert(((int_32)*($6 + [28]) == (int_32)$4), [784])
	CALL eosio_assert(((int_64)*(($0 + [96])) == (int_64)CALL $fimport$3()), [832])
	$8 = *($6)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($6 + [16]))), [896])
	$1 = ((int_64)*($6 + [8]) + (int_64)*($2))
	*($6 + [8]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($6 + [8]) < (int_64)4611686018427387904), [976])
	*($6 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$8 == (int_64)*($6)), [1008])
	*($10 + [48]) = ($10 + [28])
	*($10 + [44]) = $10
	*($10 + [40]) = $10
	*($10 + [56]) = ($10 + [40])
	*($10 + [68]) = ($6 + [8])
	*($10 + [64]) = $6
	*($10 + [72]) = ($6 + [24])
	CALL $51(($10 + [64]), ($10 + [56]))
	CALL db_update_i64(*($6 + [32]), $9, $10, [28])
	$6 = ($0 + [112])
	if ( (uint_64)($8 <= *($6)) ){ goto $label$3 }
	*($6) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	goto $label$3 
	
.LABEL $label$5
	$9 = *($0)
	
.LABEL $label$4
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$3()), [672])
	*(($5 = CALL $184([40])) + [16]) = (int_64)344826856192
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [512])
	$7 = ($5 + [8])
	$8 = (int_64)1346979907
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$3 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$3 = [0]
	
.LABEL $label$8
	CALL eosio_assert($3, [576])
	*($5 + [28]) = $4
	*($5) = $1
	*(($7 + [12])) = *(($2 + [12]))
	*(($7 + [8])) = *(($2 + [8]))
	*(($7 + [4])) = *(($2 + [4]))
	*($7) = *($2)
	*($5 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($10 + [48]) = ($10 + [28])
	*($10 + [44]) = $10
	*($10 + [40]) = $10
	*($10 + [56]) = ($10 + [40])
	*($10 + [68]) = $7
	*($10 + [64]) = $5
	*($10 + [72]) = ($5 + [24])
	CALL $51(($10 + [64]), ($10 + [56]))
	$8 = *($5)
	$7 = CALL db_store_i64(*(($0 + [104])), (int_64)-3838636559280373760, $9, $8, $10, [28])
	*($5 + [32]) = $7
	$6 = ($0 + [112])
	if ( (uint_64)($8 <= *($6)) ){ goto $label$13 }
	*($6) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($10 + [64]) = $5
	$8 = *($5)
	*($10) = $8
	*($10 + [40]) = $7
	$4 = ($0 + [124])
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [128]))) ){ goto $label$15 }
	*($6 + [8]) = $8
	*($6 + [16]) = $7
	*($10 + [64]) = [0]
	*($6) = $5
	*($4) = ($6 + [24])
	goto $label$14 
	
.LABEL $label$15
	CALL $43(($0 + [120]), ($10 + [64]), $10, ($10 + [40]))
	
.LABEL $label$14
	$6 = *($10 + [64])
	*($10 + [64]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	CALL $185($6)
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [80])
}

void .FUNC _ZN5eosio10texas_game11withdraweosEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [144])
	*([0] + [4]) = $13
	CALL require_auth(*($0))
	$2 = *(($0 + [120]))
	$7 = *(($0 + [124]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [96])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [28]) == (int_32)$3), [160])
	if ( $7 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = CALL db_find_i64(*(($0 + [96])), *(($0 + [104])), (int_64)-3838636559280373760, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$7 = CALL $40($3, $6)
	CALL eosio_assert(((int_32)*($7 + [28]) == (int_32)$3), [160])
	
.LABEL $label$5
	$5 = *($7 + [8])
	if ( ((int_64)$5 < (int_64)1) ){ goto $label$7 }
	$12 = *($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$6 = [624]
	$10 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$13 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$4 = ($4 + [165])
	goto $label$11 
	
.LABEL $label$13
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$8 }
	*($13 + [80]) = $10
	*($13 + [72]) = $12
	$9 = (int_64)0
	$8 = (int_64)59
	$6 = [144]
	$10 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$19 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$4 = ($4 + [165])
	goto $label$17 
	
.LABEL $label$19
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$15
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$14 }
	$9 = (int_64)0
	$8 = (int_64)59
	$6 = [128]
	$12 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$25 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$4 = ($4 + [165])
	goto $label$23 
	
.LABEL $label$25
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$21
	$6 = ($6 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$12 = ((int_64)$11 | (int_64)$12)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$20 }
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [512])
	$9 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$29 }
	
.LOOP $label$30:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$27 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$30 }
	
.LABEL $label$29
	$4 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$4 = [0]
	
.LABEL $label$26
	CALL eosio_assert($4, [576])
	*(($13 + [16])) = [0]
	*($13 + [8]) = (int_64)0
	$6 = CALL strlen([640])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$33 }
	*($13 + [8]) = ($6 << [1])
	$4 = (($13 + [8]) | [1])
	if ( $6 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$2 = (($6 + [16]) & [-16])
	$4 = CALL $184($2)
	*($13 + [8]) = ($2 | [1])
	*($13 + [16]) = $4
	*($13 + [12]) = $6
	
.LABEL $label$32
	CALL memcpy($4, [640], $6)
	
.LABEL $label$31
	*(($4 + $6)) = [0]
	*(($13 + [48])) = (int_64)1397703940
	*(($13 + [60])) = *($13 + [12])
	*($13 + [32]) = $1
	$6 = ($13 + [16])
	*(($13 + [64])) = *($6)
	*($13 + [24]) = *($0)
	*($13 + [40]) = $5
	*($13 + [56]) = *($13 + [8])
	*($13 + [8]) = [0]
	*($13 + [12]) = [0]
	*($6) = [0]
	$6 = CALL $44(($13 + [88]), ($13 + [72]), $10, $12, ($13 + [24]))
	CALL $45(($13 + [128]), $6)
	$4 = *($13 + [128])
	CALL send_inline($4, (*($13 + [132]) - $4))
	$4 = *($13 + [128])
	if ( ($4 == 0) ){ goto $label$34 }
	*($13 + [132]) = $4
	CALL $185($4)
	
.LABEL $label$34
	$4 = *($6 + [28])
	if ( ($4 == 0) ){ goto $label$35 }
	*(($6 + [32])) = $4
	CALL $185($4)
	
.LABEL $label$35
	$4 = *($6 + [16])
	if ( ($4 == 0) ){ goto $label$36 }
	*(($6 + [20])) = $4
	CALL $185($4)
	
.LABEL $label$36
	if ( ((*(($13 + [56])) & [1]) == 0) ){ goto $label$37 }
	CALL $185(*(($13 + [64])))
	
.LABEL $label$37
	if ( ((*($13 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $185(*(($13 + [16])))
	
.LABEL $label$7
	CALL eosio_assert([1], [224])
	CALL eosio_assert([1], [272])
	$6 = CALL db_next_i64(*($7 + [32]), ($13 + [24]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$38 }
	CALL $40($3, $6)
	
.LABEL $label$38
	CALL $41($3, $7)
	
.LABEL $label$4
	*([0] + [4]) = ($13 + [144])
	return (unreachable)
	
.LABEL $label$3
	CALL $186(($13 + [8]))
}

void .FUNC _ZN5eosio10texas_game11startminingEb (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*((($6 + [8]) + [32])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$2 = *($0)
	*($6 + [8]) = $2
	*($6 + [16]) = $2
	$5 = CALL db_find_i64($2, $2, (int_64)-4157529991795441664, (int_64)1)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$4 }
	$5 = CALL $52(($6 + [8]), $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($6 + [8])), [160])
	$3 = *($0)
	CALL eosio_assert([1], [736])
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($6 + [8])), [784])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)CALL $fimport$3()), [832])
	*($5 + [8]) = $1
	$2 = *($5)
	*($5 + [12]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$2 == (int_64)*($5)), [1008])
	CALL eosio_assert([1], [656])
	CALL memcpy(($6 + [64]), $5, [8])
	*($6 + [56]) = *($5 + [8])
	CALL eosio_assert([1], [656])
	CALL memcpy((($6 + [64]) | [8]), ($6 + [56]), [1])
	CALL eosio_assert([1], [656])
	CALL memcpy((($6 + [64]) | [9]), ($5 + [12]), [4])
	CALL db_update_i64(*($5 + [20]), $3, ($6 + [64]), [13])
	$5 = ($6 + [24])
	if ( (uint_64)($2 <= *($5)) ){ goto $label$3 }
	*($5) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$1 = *($6 + [32])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$3 = *($0)
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)CALL $fimport$3()), [672])
	*(($5 = CALL $184([32])) + [16]) = ($6 + [8])
	*($5 + [8]) = $1
	*($5) = (int_64)1
	*($5 + [12]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert([1], [656])
	CALL memcpy(($6 + [64]), $5, [8])
	*($6 + [56]) = *($5 + [8])
	CALL eosio_assert([1], [656])
	CALL memcpy((($6 + [64]) | [8]), ($6 + [56]), [1])
	CALL eosio_assert([1], [656])
	CALL memcpy((($6 + [64]) | [9]), ($5 + [12]), [4])
	$2 = *($5)
	$1 = CALL db_store_i64(*((($6 + [8]) + [8])), (int_64)-4157529991795441664, $3, $2, ($6 + [64]), [13])
	*($5 + [20]) = $1
	$0 = ($6 + [24])
	if ( (uint_64)($2 <= *($0)) ){ goto $label$5 }
	*($0) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($6 + [56]) = $5
	$2 = *($5)
	*($6 + [64]) = $2
	*($6 + [52]) = $1
	$4 = ($6 + [36])
	$0 = *($4)
	if ( ((uint_32)$0 >= (uint_32)*(($6 + [40]))) ){ goto $label$7 }
	*($0 + [8]) = $2
	*($0 + [16]) = $1
	*($6 + [56]) = [0]
	*($0) = $5
	*($4) = ($0 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $53(($6 + [32]), ($6 + [56]), ($6 + [64]), ($6 + [52]))
	
.LABEL $label$6
	$5 = *($6 + [56])
	*($6 + [56]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $185($5)
	
.LABEL $label$3
	$1 = *($6 + [32])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($6 + [36])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $185($0)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$10 }
	$5 = *(($6 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$5 = $1
	
.LABEL $label$8
	*($4) = $1
	CALL $185($5)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [80])
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [608])
	CALL memcpy(($5 + [15]), $3, [1])
	$6 = *($5 + [15])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 ((int_32)($6 & [255]) != (int_32)[0])), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

void .FUNC _ZN5eosio10texas_game11texasredeemEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [144])
	*([0] + [4]) = $12
	CALL require_auth($1)
	$2 = *(($0 + [120]))
	$5 = *(($0 + [124]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$1 }
	$6 = ($5 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$5 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [96])
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [28]) == (int_32)$3), [160])
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = CALL db_find_i64(*(($0 + [96])), *(($0 + [104])), (int_64)-3838636559280373760, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $40($3, $6)
	CALL eosio_assert(((int_32)*($5 + [28]) == (int_32)$3), [160])
	
.LABEL $label$5
	$11 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [624]
	$9 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$12 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$4 = ($4 + [165])
	goto $label$10 
	
.LABEL $label$12
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$8
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$7 }
	*($12 + [80]) = $9
	*($12 + [72]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [144]
	$9 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$18 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$4 = ($4 + [165])
	goto $label$16 
	
.LABEL $label$18
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$14
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$13 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [128]
	$11 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$24 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$4 = ($4 + [165])
	goto $label$22 
	
.LABEL $label$24
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$20
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$19 }
	$10 = *($5 + [8])
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [512])
	$8 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	
.LOOP $label$29:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$29 }
	
.LABEL $label$28
	$4 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$4 = [0]
	
.LABEL $label$25
	CALL eosio_assert($4, [576])
	*(($12 + [16])) = [0]
	*($12 + [8]) = (int_64)0
	$6 = CALL strlen([1072])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$32 }
	*($12 + [8]) = ($6 << [1])
	$4 = (($12 + [8]) | [1])
	if ( $6 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$2 = (($6 + [16]) & [-16])
	$4 = CALL $184($2)
	*($12 + [8]) = ($2 | [1])
	*($12 + [16]) = $4
	*($12 + [12]) = $6
	
.LABEL $label$31
	CALL memcpy($4, [1072], $6)
	
.LABEL $label$30
	*(($4 + $6)) = [0]
	*(($12 + [48])) = (int_64)1397703940
	*(($12 + [60])) = *($12 + [12])
	*($12 + [32]) = $1
	$6 = ($12 + [16])
	*(($12 + [64])) = *($6)
	*($12 + [24]) = *($0)
	*($12 + [40]) = $10
	*($12 + [56]) = *($12 + [8])
	*($12 + [8]) = [0]
	*($12 + [12]) = [0]
	*($6) = [0]
	$6 = CALL $44(($12 + [88]), ($12 + [72]), $9, $11, ($12 + [24]))
	CALL $45(($12 + [128]), $6)
	$4 = *($12 + [128])
	CALL send_inline($4, (*($12 + [132]) - $4))
	$4 = *($12 + [128])
	if ( ($4 == 0) ){ goto $label$33 }
	*($12 + [132]) = $4
	CALL $185($4)
	
.LABEL $label$33
	$4 = *($6 + [28])
	if ( ($4 == 0) ){ goto $label$34 }
	*(($6 + [32])) = $4
	CALL $185($4)
	
.LABEL $label$34
	$4 = *($6 + [16])
	if ( ($4 == 0) ){ goto $label$35 }
	*(($6 + [20])) = $4
	CALL $185($4)
	
.LABEL $label$35
	if ( ((*(($12 + [56])) & [1]) == 0) ){ goto $label$36 }
	CALL $185(*(($12 + [64])))
	
.LABEL $label$36
	if ( ((*($12 + [8]) & [1]) == 0) ){ goto $label$37 }
	CALL $185(*(($12 + [16])))
	
.LABEL $label$37
	CALL eosio_assert([1], [224])
	CALL eosio_assert([1], [272])
	$6 = CALL db_next_i64(*($5 + [32]), ($12 + [24]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$38 }
	CALL $40($3, $6)
	
.LABEL $label$38
	CALL $41($3, $5)
	
.LABEL $label$4
	*([0] + [4]) = ($12 + [144])
	return (unreachable)
	
.LABEL $label$3
	CALL $186(($12 + [8]))
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [608])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [608])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [608])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC _ZN5eosio10texas_game10texasblindENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEyNS_5assetE (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [64])
	*([0] + [4]) = $14
	*($14 + [56]) = $2
	CALL require_auth(*($0))
	if ( (*($1) & [1]) ){ goto $label$2 }
	$1 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($1 + [8])
	
.LABEL $label$1
	$9 = [-1]
	
.LOOP $label$3:
	$8 = ($1 + $9)
	$4 = ($9 + [1])
	$9 = $4
	if ( *(($8 + [1])) ){ goto $label$3 }
	$5 = (CASTING uint_64)(uint_32 $4)
	$11 = (int_64)0
	$10 = (int_64)59
	$12 = (int_64)0
	
.LOOP $label$4:
	$13 = (int_64)0
	if ( ((uint_64)$11 >= (uint_64)$5) ){ goto $label$5 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$9 = ($9 + [165])
	goto $label$6 
	
.LABEL $label$7
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$9 }
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$13 = ((int_64)$13 & (int_64)15)
	
.LABEL $label$8
	$1 = ($1 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$4 }
	$6 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$10 }
	$1 = ($8 + [-24])
	$4 = ([0] - $6)
	
.LOOP $label$11:
	if ( ((int_64)*(*($1)) == (int_64)$12) ){ goto $label$10 }
	$8 = $1
	$9 = ($1 + [-24])
	$1 = $9
	if ( ((int_32)($9 + $4) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$4 = ($0 + [8])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$13 }
	$8 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [160])
	goto $label$12 
	
.LABEL $label$13
	$8 = [0]
	$1 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3838636552279642112, $12)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$12 }
	$8 = CALL $54($4, $1)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [160])
	
.LABEL $label$12
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [1088])
	$9 = *(($8 + [12]))
	$1 = *($8 + [8])
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$15 }
	
.LOOP $label$16:
	if ( ((int_64)*($1) == (int_64)$2) ){ goto $label$15 }
	$1 = ($1 + [32])
	if ( ((int_32)$9 != (int_32)$1) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$14 }
	CALL eosio_assert([1], [512])
	$11 = (int_64)1346979907
	$9 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	
.LOOP $label$21:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$21 }
	
.LABEL $label$20
	$6 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$6 = [0]
	
.LABEL $label$17
	CALL eosio_assert($6, [576])
	$11 = *($1 + [8])
	CALL eosio_assert(((int_64)*(($1 + [16])) == (int_64)*($3 + [8])), [1120])
	CALL eosio_assert(((int_64)$11 >= (int_64)*($3)), [1184])
	$11 = *($0)
	*($14 + [20]) = $3
	*($14 + [16]) = ($14 + [56])
	CALL eosio_assert($7, [736])
	CALL $55($4, $8, $11, ($14 + [16]))
	*(($14 + [48])) = [0]
	$11 = *($0)
	*($14 + [16]) = $11
	*($14 + [32]) = (int_64)-1
	*($14 + [40]) = (int_64)0
	*($14 + [24]) = $11
	*($14 + [52]) = [0]
	$1 = CALL db_find_i64($11, $11, (int_64)-6030912134838419456, *($14 + [56]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$22 }
	$1 = CALL $56(($14 + [16]), $1)
	CALL eosio_assert(((int_32)*($1 + [108]) == (int_32)($14 + [16])), [160])
	$11 = *($0)
	*($14 + [8]) = $3
	CALL eosio_assert([1], [736])
	CALL $57(($14 + [16]), $1, $11, ($14 + [8]))
	
.LABEL $label$22
	$4 = *($14 + [40])
	if ( ($4 == 0) ){ goto $label$14 }
	$0 = ($14 + [44])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$24 }
	
.LOOP $label$25:
	$1 = ($1 + [-24])
	$9 = *($1)
	*($1) = [0]
	if ( ($9 == 0) ){ goto $label$26 }
	$8 = *($9 + [92])
	if ( ($8 == 0) ){ goto $label$27 }
	*(($9 + [96])) = $8
	CALL $185($8)
	
.LABEL $label$27
	CALL $185($9)
	
.LABEL $label$26
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$25 }
	$1 = *(($14 + [40]))
	goto $label$23 
	
.LABEL $label$24
	$1 = $4
	
.LABEL $label$23
	*($0) = $4
	CALL $185($1)
	
.LABEL $label$14
	*([0] + [4]) = ($14 + [64])
}

void .FUNC $196 ()
{
	(unreachable)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_64 .FUNC fabs (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC scalbn (float_64 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	$2 = ($1 + [-1023])
	if ( ((int_32)$2 < (int_32)[1024]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	$2 = ($1 + [969])
	if ( ((int_32)$2 > (int_32)[-1023]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = $2
	goto $label$1 
	
.LABEL $label$2
	$1 = $2
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_64 .FUNC pow (float_64 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	int_32 $19
	float_64 $20
	float_64 $21
	$21 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (CASTING int_64)(float_64 $1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$8 = ($5) & [2147483647]
	if ( (($8) | $6) == 0) ){ goto $label$1 }
	$11 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$3 = (CASTING uint_32)(uint_64 $11)
	if ( $3 ){ goto $label$2 }
	if ( ((int_32)$2 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 & [2147483647])
	if ( ((uint_32)$7 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$3 != (int_32)[0]) & ((int_32)$7 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$19 = [0]
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$19 = [2]
	if ( ((uint_32)$8 > (uint_32)[1128267775]) ){ goto $label$8 }
	$19 = [0]
	if ( ($8 <= [1072693248]) ){ goto $label$8 }
	$9 = uint_32($8 >> [20])
	if ( ((int_32)($9 + [-1023]) < (int_32)[21]) ){ goto $label$7 }
	$19 = ([1075] - $9)
	$9 = uint_32($6 >> $19)
	$19 = ( ([2] - ($9 & [1])) ? [0] : ((int_32)($9 << $19) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$19 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $9)
	$19 = uint_32($8 >> $6)
	$19 = ( ([2] - ($19 & [1])) ? [0] : ((int_32)($19 << $6) == (int_32)$8) )
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($7 + [-1072693248]) | $3) == 0) ){ goto $label$1 }
	if ( ($7 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$5 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL sqrt($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$21 = CALL fabs($0)
	if ( $3 ){ goto $label$18 }
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((int_32)($7 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = (float_64)1
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$16 }
	if ( $19 ){ goto $label$14 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$17
	$21 = ( ((float_64)(float_64)1 / (float_64)$21) ? $21 : ((int_32)$5 < (int_32)[0]) )
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($19 | ($7 + [-1072693248])) == 0) ){ goto $label$15 }
	return ( !(float_64)$21 ? $21 : ((int_32)$19 == (int_32)[1]) )
	
.LABEL $label$16
	$10 = (float_64)-1
	goto $label$14 
	
.LABEL $label$15
	$1 = (float_64)
	return ((float_64)$1($21 - $21)) / (float_64)$1)
	
.LABEL $label$14
	if ( ($8 <= [1105199105]) ){ goto $label$28 }
	if ( ($8 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$7 > (uint_32)[1072693247]) ){ goto $label$24 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 < (int_32)[0]) )
	
.LABEL $label$28
	$8 = [0]
	if ( ((uint_32)$7 > (uint_32)[1048575]) ){ goto $label$26 }
	$21 = ((float_64)$21 * (float_64)(float_64)9007199254740992)
	$7 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $21) >> (uint_64)(int_64)32))
	$5 = [-53]
	goto $label$25 
	
.LABEL $label$27
	if ( ((uint_32)$7 > (uint_32)[1072693246]) ){ goto $label$23 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 < (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	$6 = ($7 & [1048575])
	$2 = ($6 | [1072693248])
	$5 = ((int_32($7 >> [20]) + $5) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$22 }
	$8 = [1]
	goto $label$21 
	
.LABEL $label$24
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 > (int_32)[0]) )
	
.LABEL $label$23
	if ( ($7 <= [1072693249]) ){ goto $label$20 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 > (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$22
	$2 = ($2 + [-1048576])
	$5 = ($5 + [1])
	
.LABEL $label$21
	$13 = ((float_64)*(($6 + [10544])) + (float_64)((float_64)((float_64)(float_64))($21 - (float_64))($0 - $14)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$21 = ((float_64)((float_64)$12 * (float_64)$0) + (float_64)((float_64)$21 * (float_64)(float_64))($13 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $17))
	$0 = ((float_64)$21 * (float_64)$21)
	$16 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($2 >> [1]) | [536870912]) + ($8 << [18])) + [524288])) << (int_64)32))
	$12 = ((float_64)$15 * (float_64)(float_64))((float_64))($14 - ((float_64)$0 * (float_64)$16)) - ((float_64)$0 * (float_64)(float_64))($12 - (float_64))($16 - $13)
	$13 = ((float_64)((float_64)((float_64)$21 + (float_64)$0) * (float_64)$12))
	$17 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$17 + (float_64)(float_64)3) + (float_64)$13)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$15 = ((float_64)(float_64)1 / (float_64)((float_64)$13 + (float_64)$12))
	$13 = *(($6 + [10528]))
	$12 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $21) & (int_64)4294967295)))
	$14 = (float_64)
	$21 = ((float_64)$14($12 - $13)) * (float_64)$15
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $21)) & (int_64)-4294967296)
	$14 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$14 & (int_64)-4294967296))))
	$12 = ((float_64)$0 + (float_64)$21)
	$6 = ($8 << [3])
	$18 = *(($6 + [10560]))
	$20 = (CASTING float_64)(int_32 $5)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$20 + (float_64)((float_64)$18 + (float_64)((float_64)$12)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$20 = (float_64))((float_64))((float_64))($0 + (float_64)$13)))))) & (int_64)-4294967296))) - $20) - $18) - $12)
	goto $label$19 
	
.LABEL $label$20
	$13 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$21 + (float_64)(float_64)-1)
	$21 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$21 + (float_64)$13))) & (int_64)-4294967296)
	$20 = (float_64))($0) - $21)
	
.LABEL $label$19
	$1 = ((float_64)((float_64)(float_64))($1 - $12) * (float_64)$0) + (float_64)((float_64)(float_64))($13 - $20) * (float_64)$1
	$12 = (CASTING float_64)(int_64 ((int_64)$4 & (int_64)-4294967296))
	$21 = ((float_64)$12 * (float_64)$0)
	$0 = ((float_64)$21 + (float_64)$1)
	$4 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 $4)))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$2) < (int_32)[1083179008]) ){ goto $label$33 }
	if ( ((($2 + [-1083179008]) | $8) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$33
	if ( (($2 & [2147482624]) <= [1083231232]) ){ goto $label$30 }
	if ( ((($2 + [1064252416]) | $8) == 0) ){ goto $label$31 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$32
	$0 = (float_64)
	$12 = ((float_64)$1 + (float_64)(float_64)8.008566259537294e-17)
	if ( (((float_64)$12 <= (float_64)$0($0 - $21))) | (((float_64)$12 != (float_64)$12) | ((float_64)$0 != (float_64)$0))) ){ goto $label$30 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$31
	$0 = (float_64)
	if ( ((((float_64)$1 > (float_64)$0($0 - $21))) | (((float_64)$1 != (float_64)$1) | ((float_64)$0 != (float_64)$0))) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$8 = ($2 & [2147483647])
	if ( ($8 <= [1071644673]) ){ goto $label$35 }
	$6 = (uint_32($8 >> [20]) & [2047])
	$8 = (uint_32([1048576] >> (uint_32($8 >> [20]) + [-1022])) + $2)
	$5 = uint_32((($8 & [1048575]) | [1048576]) >> ([1043] - $6))
	$2 = ( ([0] - $5) ? $5 : ((int_32)$2 < (int_32)[0]) )
	$21 = (float_64))($21 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($8 & ((int_32)uint_32([1048575] >> ($6 + [-1023])) ^ (int_32)[-1]))) << (int_64)32)))
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	
.LABEL $label$34
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$21 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $21)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$1 + (float_64)$21)) & (int_64)-4294967296))
	$12 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$12 + (float_64)$21 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = (float_64)
	$4 = (CASTING int_64)(float_64 $1((float_64)1 - (float_64))((float_64))(((float_64)((float_64)$1)) * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)
	$8 = ((CASTING uint_32)(uint_64 (uint_64)$4 - ((float_64)$0($21 - (float_64))($1 - $12))) + (float_64)((float_64)$1 * (float_64)$0))
	if ( ((int_32)int_32($8 - $1))))) >> (uint_64)(int_64)32)) + ($2 << [20]))) >> [20]) <= (int_32)[0]) ){ goto $label$36 }
	return ((float_64)$10 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))))
	
.LABEL $label$36
	return ((float_64)$10 * (float_64)CALL scalbn($1, $2))
	
.LABEL $label$29
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $21
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}