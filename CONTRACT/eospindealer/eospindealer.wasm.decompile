(data (i32.const 8192) "EOS\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8205) "eosio.token\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8308) "unable to find key\00")
(data (i32.const 8327) " \00")
(data (i32.const 8329) "0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x\00")
(data (i32.const 8400) "$\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\03\00\00\00\12\00\00\00\t\00\00\00\12\00\00\00\t\00\00\00\12\00\00\00\t\00\00\00\12\00\00\00\t\00\00\00\12\00\00\00\t\00\00\00\12\00\00\00\t\00\00\00\12\00\00\00\t\00\00\00\12\00\00\00\t\00\00\00\12\00\00\00\t\00\00\00\12\00\00\00\t\00\00\00\12\00\00\00\t\00\00\00\12\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\03\00\00\00\12\00\00\00\t\00\00\00\12\00\00\00\t\00\00\00\12\00\00\00\t\00\00\00\12\00\00\00\t\00\00\00\12\00\00\00\t\00\00\00\12\00\00\00\t\00\00\00\12\00\00\00\t\00\00\00\12\00\00\00\t\00\00\00\12\00\00\00\t\00\00\00\12\00\00\00\t\00\00\00\12\00\00\00\t\00\00\00\12\00\00\00$\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\12\00\00\00$\00\00\00\03\00\00\00\07\00\00\00\0c\00\00\00\06\00\00\00\0c\00\00\00\06\00\00\00\0c\00\00\00\06\00\00\00\0c\00\00\00\06\00\00\00\0c\00\00\00\06\00\00\00\0c\00\00\00\06\00\00\00\0c\00\00\00\06\00\00\00\0c\00\00\00\06\00\00\00\0c\00\00\00\06\00\00\00\0c\00\00\00\06\00\00\00\0c\00\00\00\06\00\00\00\0c\00\00\00\03\00\00\00\03\00\00\00\03\00\00\00\02\00\00\00\02\00\00\00\02\00\00\00\02\00\00\00\02\00\00\00\02\00\00\00\8fG\00\00")
(data (i32.const 17724) "transfer\00")
(data (i32.const 17733) "spinreceipt\00")
(data (i32.const 17745) "spinstart\00")
(data (i32.const 17755) "spinend\00")
(data (i32.const 17763) "payout\00")
(data (i32.const 17770) "string is too long to be a valid symbol_code\00")
(data (i32.const 17815) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 17868) "string is too long to be a valid name\00")
(data (i32.const 17906) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 17973) "character is not in allowed character set for names\00")
(data (i32.const 18025) "eospinsystem\00")
(data (i32.const 18038) "-\00")
(data (i32.const 18040) "active\00")
(data (i32.const 18047) "read\00")
(data (i32.const 18052) "get\00")
(data (i32.const 18056) "write\00")
(data (i32.const 18062) "eospinswitch\00")
(data (i32.const 18075) "System is in emergency stop. Try later\00")
(data (i32.const 18114) "Cannot start : Dealer is not rich enough now\00")
(data (i32.const 18160) "NO GAME (DRAW)\00")
(data (i32.const 18175) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 18224) "invalid symbol name\00")
(data (i32.const 18244) "37\00")
(data (i32.const 18247) "00\00")
(data (i32.const 18250) "eospindealer\00")
(data (i32.const 18263) "eosmaxiodice\00")
(data (i32.const 18276) "betdividends\00")
(data (i32.const 18289) "betdicehouse\00")
(data (i32.const 18302) "betdicegroup\00")
(data (i32.const 18315) "W\00")
(data (i32.const 18317) "L\00")
(data (i32.const 18319) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 18352) "id:\00")
(data (i32.const 18356) ", player:\00")
(data (i32.const 18366) ", Referral reward from https://eosp.in\00")
(data (i32.const 18405) ", Payback for your WIN from https://eosp.in\00")
(data (i32.const 18449) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18500) "error reading iterator\00")
(data (i32.const 18523) "stoull\00")
(data (i32.const 18530) "%d\00")
(data (i32.const 18533) "%lld\00")
(data (i32.const 18538) "%llu\00")
(data (i32.const 18543) "%f\00")
(data (i32.const 18546) ": no conversion\00")
(data (i32.const 18562) ": out of range\00")
(data (i32.const 18592) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 18672) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$4 (result i32)))
(import "env" "read_action_data" (func $fimport$5 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$6 (param i64)))
(import "env" "sha256" (func $fimport$7 (param i32 i32 i32)))
(import "env" "current_time" (func $fimport$8 (result i64)))
(import "env" "send_inline" (func $fimport$9 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$10 (param i32)))
(import "env" "require_recipient" (func $fimport$11 (param i64)))
(import "env" "send_deferred" (func $fimport$12 (param i32 i64 i32 i32 i32)))
(import "env" "is_account" (func $fimport$13 (param i64) (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$14 (result i32)))
(import "env" "db_get_i64" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$16))
(import "env" "memmove" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$18 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$25 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$26 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$27 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$28 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$29 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$30 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$33 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$35 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$36 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$37 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $8))
(export "_ZdlPv" (func $64))
(export "_Znwj" (func $62))
(export "_Znaj" (func $63))
(export "_ZdaPv" (func $65))
(export "_ZnwjSt11align_val_t" (func $66))
(export "_ZnajSt11align_val_t" (func $67))
(export "_ZdlPvSt11align_val_t" (func $68))
(export "_ZdaPvSt11align_val_t" (func $69))
(table $0 9 9 anyfunc)
(elem (i32.const 1) $9 $11 $13 $15 $17 $7 $101 $104)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18929))
(global $global$2 i32 (i32.const 18929))


void .FUNC $98 (int_32 $0)
{
}

int_32 .FUNC $99 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $116([9044])
	$3 = *([0] + [9052])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [9056])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [9060]
	*([0] + [9052]) = [9060]
	$4 = *([0] + [9056])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $123([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [9052])
	*([0] + [9052]) = $3
	*([0] + [9056]) = [0]
	
.LABEL $label$2
	*([0] + [9056]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $117([9044])
	return [0]
	
.LABEL $label$1
	CALL $117([9044])
	return [-1]
}

void .FUNC $94 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $95 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $96 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $97 ()
{
	return [9036]
}

void .FUNC $90 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $78(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $105(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [18533], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $78(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $78(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $91 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $78(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $105(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [18538], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $78(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $78(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $92 (int_32 $0, float_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	float_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $78(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (PROMOTE float_64)(float_32 $1)
	$6 = (($2 + [16]) | [1])
	$7 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $5
	$3 = CALL $105(( *($7) ? $6 : ($3 & [1]) ), ($4 + [1]), [18543], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $78(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $78(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $115($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $75($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $121([9328], $1)
	CALL memset($0, [0], $1)
	return $0
}

int_32 .FUNC $115 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $122 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9320]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9324])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9320]) = [1]
	$2 = ($2 << [16])
	*([0] + [9324]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9324])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9324]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9320]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9320]) = [1]
	$3 = ($3 << [16])
	*([0] + [9324]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9324])
	
.LABEL $label$10
	*([0] + [9324]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $122($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8222])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $120 (int_32 $0)
{
	return CALL $121([9328], $0)
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18047])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18047])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18047])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18047])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $23(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $96($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $55(($6 + [28]), $4)
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($8 + [-24])
	*($5) = *($4)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($4) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$8 = ($global$0 - [272])
	$global$0 = $8
	*(($8 + [200])) = (int_64)0
	*(($8 + [208])) = (int_64)0
	*(($9 = ($8 + [224]))) = (int_64)0
	*(($8 + [232])) = (int_64)0
	*(($8 + [248])) = [0]
	*($8 + [152]) = $2
	*($8 + [144]) = $1
	*($8 + [192]) = (int_64)0
	*($8 + [216]) = (int_64)0
	*($8 + [240]) = (int_64)0
	*($8 + [160]) = $3
	*($8 + [168]) = $4
	*($8 + [176]) = $5
	*($8 + [184]) = (int_64)-4294967296
	$10 = ($8 + [192])
	CALL $74($10, $6)
	$11 = ($8 + [204])
	CALL $74($11, $7)
	CALL $5(($8 + [128]), $4)
	$7 = ($8 + [216])
	if ( (*($8 + [216]) & [1]) ){ goto $label$2 }
	*($7) = [0]
	goto $label$1 
	
.LABEL $label$2
	*(*($9)) = [0]
	*(($8 + [220])) = [0]
	
.LABEL $label$1
	CALL $76($7, [0])
	*(($7 + [8])) = *((($8 + [128]) + [8]))
	*($7) = *($8 + [128])
	CALL $5(($8 + [128]), $5)
	$6 = ($8 + [228])
	if ( (*($8 + [228]) & [1]) ){ goto $label$4 }
	*($6) = [0]
	goto $label$3 
	
.LABEL $label$4
	*(*(($8 + [236]))) = [0]
	*(($8 + [232])) = [0]
	
.LABEL $label$3
	CALL $76($6, [0])
	*(($6 + [8])) = *((($8 + [128]) + [8]))
	*($6) = *($8 + [128])
	*(($8 + [16])) = *((($8 + [144]) + [16]))
	*(($8 + [24])) = *((($8 + [144]) + [24]))
	*(($8 + [32])) = *((($8 + [144]) + [32]))
	*(($8 + [40])) = *((($8 + [144]) + [40]))
	*($8 + [264]) = (int_64)0
	*($8 + [256]) = (int_64)0
	*($8) = *($8 + [144])
	*($8 + [8]) = *($8 + [152])
	$10 = CALL $71(($8 + [48]), $10)
	$11 = CALL $71(($8 + [60]), $11)
	$7 = CALL $71(($8 + [72]), $7)
	$6 = CALL $71(($8 + [84]), $6)
	$9 = CALL $71(($8 + [96]), (($8 + [144]) + [96]))
	*(($8 + [120])) = *($8 + [264])
	*($8 + [112]) = *($8 + [256])
	CALL $51($0, $8)
	if ( (*($9) & [1]) ){ goto $label$13 }
	if ( (*($6) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*(($8 + [104])))
	if ( ((*($6) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($8 + [92])))
	$6 = [1]
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$6 = [1]
	if ( (*($7) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($11) & $6) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($8 + [80])))
	if ( ((*($11) & $6) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($8 + [68])))
	$7 = [1]
	if ( (*($10) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = [1]
	if ( ((*($10) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($8 + [56])))
	
.LABEL $label$5
	if ( ((*(($8 + [240])) & $7) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($8 + [248])))
	
.LABEL $label$14
	if ( ((*(($8 + [228])) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($8 + [236])))
	
.LABEL $label$15
	if ( ((*(($8 + [216])) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($8 + [224])))
	
.LABEL $label$16
	if ( ((*(($8 + [204])) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($8 + [212])))
	
.LABEL $label$17
	if ( ((*(($8 + [192])) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($8 + [200])))
	
.LABEL $label$18
	$global$0 = ($8 + [272])
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18056])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [18056])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18056])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18056])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18056])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [18056])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [18056])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $47 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$4 = ($global$0 - [192])
	$global$0 = $4
	$5 = *($0)
	*($4 + [104]) = [18040]
	*($4 + [108]) = CALL $115([18040])
	*($4 + [16]) = *($4 + [104])
	$6 = *(CALL $2(($4 + [112]), ($4 + [16])))
	*($4 + [88]) = [8205]
	*($4 + [92]) = CALL $115([8205])
	*($4 + [8]) = *($4 + [88])
	$7 = CALL $2(($4 + [96]), ($4 + [8]))
	*($4 + [72]) = [17724]
	*($4 + [76]) = CALL $115([17724])
	*($4) = *($4 + [72])
	$8 = CALL $2(($4 + [80]), $4)
	$9 = *($0)
	$0 = CALL $115([8192])
	if ( ($0 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17770])
	goto $label$3 
	
.LABEL $label$4
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$10 = (int_64)0
	
.LOOP $label$5:
	$11 = *(($0 + [8191]))
	if ( ((($11 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17815])
	
.LABEL $label$6
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$5 }
	$12 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$12 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18175])
	$10 = (uint_64)$12 >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$13 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$10 = $13
	$11 = [1]
	$14 = $0
	$0 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$10 = $13
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$11 = ((int_32)$0 < (int_32)[6])
	$14 = ($0 + [1])
	$0 = $14
	if ( $11 ){ goto $label$11 }
	$11 = [1]
	$0 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$11 = [0]
	
.LABEL $label$7
	CALL eosio_assert($11, [18224])
	*((($4 + [24]) + [24])) = $12
	*($4 + [32]) = $1
	*($4 + [24]) = $9
	*($4 + [40]) = $2
	$11 = CALL $71((($4 + [24]) + [32]), $3)
	*($4 + [120]) = *($7)
	*($4 + [128]) = *($8)
	*(($0 = CALL _Znwj([16]))) = $5
	*($0 + [8]) = $6
	*((($4 + [120]) + [36])) = [0]
	$14 = ($0 + [16])
	*((($4 + [120]) + [24])) = $14
	*(($4 + [140])) = $14
	*($4 + [136]) = $0
	*($4 + [148 align=4]) = (int_64)0
	$0 = *($11)
	$11 = ( *((($4 + [24]) + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($11 + [32])
	$10 = (CASTING uint_64)(uint_32 $11)
	$11 = ($4 + [148])
	
.LOOP $label$12:
	$0 = ($0 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$12 }
	if ( ($0 == 0) ){ goto $label$14 }
	CALL $20($11, $0)
	$11 = *(($4 + [152]))
	$0 = *(($4 + [148]))
	goto $label$13 
	
.LABEL $label$14
	$11 = [0]
	$0 = [0]
	
.LABEL $label$13
	*($4 + [180]) = $0
	*($4 + [176]) = $0
	*($4 + [184]) = $11
	*($4 + [160]) = ($4 + [176])
	*($4 + [168]) = ($4 + [24])
	CALL $50(($4 + [168]), ($4 + [160]))
	CALL $22(($4 + [176]), ($4 + [120]))
	$0 = *($4 + [176])
	CALL send_inline($0, (*($4 + [180]) - $0))
	$0 = *($4 + [176])
	if ( ($0 == 0) ){ goto $label$15 }
	*($4 + [180]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$15
	$0 = *($4 + [148])
	if ( ($0 == 0) ){ goto $label$16 }
	*(($4 + [152])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$16
	$0 = *($4 + [136])
	if ( ($0 == 0) ){ goto $label$17 }
	*(($4 + [140])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$17
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$18
	$global$0 = ($4 + [192])
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18056])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [18056])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $42($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18056])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [18056])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [18056])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $42(CALL $41($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [18056])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [18056])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [18056])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [18056])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [18056])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [18056])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $124 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17712])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17520]
	$3 = (((int_32)$1 * (int_32)[12]) + [17520])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [192])
	$global$0 = $3
	CALL memory()
	*($3 + [176]) = [8205]
	*($3 + [180]) = CALL $115([8205])
	*($3 + [88]) = *($3 + [176])
	CALL $2(($3 + [184]), ($3 + [88]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$2 }
	*($3 + [168]) = [17724]
	*($3 + [172]) = CALL $115([17724])
	*($3 + [16]) = *($3 + [168])
	CALL $2(($3 + [184]), ($3 + [16]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [1]
	*($3 + [8]) = *($3 + [160])
	CALL $10($0, (int_64)6138663591592764928, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	*($3 + [152]) = [17733]
	*($3 + [156]) = CALL $115([17733])
	*($3 + [80]) = *($3 + [152])
	CALL $2(($3 + [184]), ($3 + [80]))
	if ( ((int_64)$2 != (int_64)-4225155278192676352) ){ goto $label$3 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [2]
	*($3 + [24]) = *($3 + [144])
	CALL $12($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [136]) = [17745]
	*($3 + [140]) = CALL $115([17745])
	*($3 + [72]) = *($3 + [136])
	CALL $2(($3 + [184]), ($3 + [72]))
	if ( ((int_64)$2 != (int_64)-4225154471589052416) ){ goto $label$4 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [3]
	*($3 + [32]) = *($3 + [128])
	CALL $14($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [120]) = [17755]
	*($3 + [124]) = CALL $115([17755])
	*($3 + [64]) = *($3 + [120])
	CALL $2(($3 + [184]), ($3 + [64]))
	if ( ((int_64)$2 != (int_64)-4225162270038032384) ){ goto $label$5 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [4]
	*($3 + [40]) = *($3 + [112])
	CALL $16($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [104]) = [17763]
	*($3 + [108]) = CALL $115([17763])
	*($3 + [56]) = *($3 + [104])
	CALL $2(($3 + [184]), ($3 + [56]))
	if ( ((int_64)$2 != (int_64)-6215726818809348096) ){ goto $label$1 }
	*($3 + [100]) = [0]
	*($3 + [96]) = [5]
	*($3 + [48]) = *($3 + [96])
	CALL $18($1, $1, ($3 + [48]))
	
.LABEL $label$1
	CALL $98([0])
	$global$0 = ($3 + [192])
}

void .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$1 = ($global$0 - [304])
	$global$0 = $1
	CALL $19(($1 + [224]))
	$2 = *($1 + [224])
	CALL require_auth($2)
	$3 = *($1 + [240])
	$4 = *($1 + [232])
	$5 = (uint_64)*(($1 + [248])) >> (uint_64)(int_64)8
	if ( (int_64)($5) == 0) ){ goto $label$4 }
	$6 = [0]
	
.LOOP $label$6:
	*((($1 + [32]) + ($7 = $6))) = $5
	$6 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[5]) ){ goto $label$5 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($1 + [216])) = [0]
	*($1 + [208]) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$3 }
	*($1 + [208]) = ($6 << [1])
	$8 = (($1 + [208]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($1 + [216])) = [0]
	*($1 + [208]) = (int_64)0
	*($1 + [208]) = [0]
	$7 = (($1 + [208]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$9 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($1 + [208]) = ($9 | [1])
	*($1 + [216]) = $8
	*($1 + [212]) = $6
	
.LABEL $label$2
	$9 = ($7 + [1])
	$7 = [0]
	
.LOOP $label$7:
	*(($8 + $7)) = *((($1 + [32]) + $7))
	$7 = ($7 + [1])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$7 }
	$7 = ($8 + $6)
	
.LABEL $label$1
	*($7) = [0]
	$8 = CALL $71(($1 + [192]), ($1 + [256]))
	*($1 + [184]) = [18025]
	*($1 + [188]) = CALL $115([18025])
	*($1 + [24]) = *($1 + [184])
	if ( ((int_64)$2 == (int_64)*(CALL $2(($1 + [32]), ($1 + [24])))) ){ goto $label$12 }
	$5 = *($0)
	if ( ((int_64)$2 == (int_64)$5) ){ goto $label$14 }
	if ( ((int_64)$4 != (int_64)$5) ){ goto $label$14 }
	$6 = *($1 + [208])
	$7 = CALL $115([8192])
	if ( ((int_32)$7 != (int_32)( *($1 + [212]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$14 }
	if ( CALL $83(($1 + [208]), [0], [-1], [8192], $7) ){ goto $label$14 }
	$7 = *($1 + [192])
	$9 = *($8 + [8])
	$10 = *($8 + [4])
	$6 = CALL $115([18038])
	if ( ($6 == 0) ){ goto $label$13 }
	$11 = ( $10 ? uint_32($7 >> [1]) : $11 )
	$11 = ($7 & [1])
	$12 = ( $9 ? ($8 + [1]) : $11 )
	$10 = ($12 + $11)
	if ( ((int_32)$11 < (int_32)$6) ){ goto $label$16 }
	$7 = $11
	$9 = $12
	
.LOOP $label$17:
	$7 = (($7 - $6) + [1])
	if ( ($7 == 0) ){ goto $label$16 }
	$7 = CALL $113($9, [45], $7)
	if ( ($7 == 0) ){ goto $label$16 }
	if ( (CALL $114($7, [18038], $6) == 0) ){ goto $label$15 }
	$9 = ($7 + [1])
	$7 = ($10 - $9)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$17 }
	
.LABEL $label$16
	$7 = $10
	
.LABEL $label$15
	$7 = ( [-1] ? ($7 - $12) : ((int_32)$7 == (int_32)$10) )
	if ( ((int_32)$7 == (int_32)($11 + [-1])) ){ goto $label$13 }
	if ( ((uint_32)($7 + [1]) <= (uint_32)[1]) ){ goto $label$13 }
	$7 = CALL $72(($1 + [32]), $8, [0], $7, $8)
	$5 = CALL $88($7, [0], [10])
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$18
	if ( ((uint_64)((int_64)$5 + (int_64)-1514764800) >= (uint_64)(int_64)2587680001) ){ goto $label$11 }
	CALL sha256(( *($8 + [8]) ? ($8 + [1]) : (*($1 + [192]) & [1]) ), $11, ($1 + [144]))
	$7 = *($1 + [144])
	$4 = CALL current_time()
	$13 = *($0)
	*($1 + [104]) = [18040]
	*($1 + [108]) = CALL $115([18040])
	*($1 + [16]) = *($1 + [104])
	$14 = *(CALL $2(($1 + [32]), ($1 + [16])))
	$15 = *($0)
	*($1 + [104]) = [17745]
	*($1 + [108]) = CALL $115([17745])
	*($1 + [8]) = *($1 + [104])
	$16 = *(CALL $2(($1 + [32]), ($1 + [8])))
	*($1 + [32]) = ((int_64)((int_64)$5 << (int_64)16) | (int_64)(CASTING uint_64)(uint_32 uint_32((($7 << [24]) | (($7 << [8]) & [16711680])) >> [16])))
	*($1 + [56]) = $3
	*($1 + [48]) = $2
	*($1 + [40]) = ((int_64)(uint_64)$5 >> (uint_64)(int_64)48) + (int_64)$2)
	$6 = CALL $71(($1 + [64]), $8)
	*($1 + [104]) = $15
	*($1 + [80]) = $4
	*($1 + [112]) = $16
	*(($7 = CALL _Znwj([16]))) = $13
	*($7 + [8]) = $14
	*((($1 + [104]) + [36])) = [0]
	$9 = ($7 + [16])
	*((($1 + [104]) + [24])) = $9
	*(($1 + [124])) = $9
	*($1 + [120]) = $7
	*($1 + [132 align=4]) = (int_64)0
	$7 = *($6)
	$6 = ( *((($1 + [32]) + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($6 + [40])
	$5 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [132])
	
.LOOP $label$19:
	$7 = ($7 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$19 }
	if ( ($7 == 0) ){ goto $label$21 }
	CALL $20($6, $7)
	$6 = *(($1 + [136]))
	$7 = *(($1 + [132]))
	goto $label$20 
	
.LABEL $label$21
	$6 = [0]
	$7 = [0]
	
.LABEL $label$20
	*($1 + [276]) = $7
	*($1 + [272]) = $7
	*($1 + [280]) = $6
	*($1 + [288]) = ($1 + [272])
	*($1 + [296]) = ($1 + [32])
	CALL $21(($1 + [296]), ($1 + [288]))
	CALL $22(($1 + [272]), ($1 + [104]))
	$7 = *($1 + [272])
	CALL send_inline($7, (*($1 + [276]) - $7))
	$7 = *($1 + [272])
	if ( ($7 == 0) ){ goto $label$22 }
	*($1 + [276]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$22
	$7 = *($1 + [132])
	if ( ($7 == 0) ){ goto $label$23 }
	*(($1 + [136])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$23
	$7 = *($1 + [120])
	if ( ($7 == 0) ){ goto $label$24 }
	*(($1 + [124])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$24
	if ( (*($1 + [64]) & [1]) ){ goto $label$26 }
	if ( (*($1 + [192]) & [1]) ){ goto $label$25 }
	goto $label$10 
	
.LABEL $label$26
	CALL _ZdlPv(*(($1 + [72])))
	if ( ((*($1 + [192]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$25
	CALL _ZdlPv(*(($8 + [8])))
	$7 = [1]
	if ( (*($1 + [208]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$14
	CALL eosio_exit([0])
	
.LABEL $label$13
	CALL eosio_exit([0])
	
.LABEL $label$12
	CALL eosio_exit([0])
	
.LABEL $label$11
	CALL eosio_exit([0])
	
.LABEL $label$10
	$7 = [1]
	if ( ((*($1 + [208]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*($1 + [216]))
	
.LABEL $label$8
	if ( ((*(($1 + [256])) & $7) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($1 + [264])))
	
.LABEL $label$27
	$global$0 = ($1 + [304])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $6 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [136]) = $2
	*($3 + [128]) = $1
	CALL memset(($3 + [80]), [0], [34])
	CALL memset(($3 + [64]), [0], [16])
	CALL memcpy(($3 + [64]), ($3 + [128]), [16])
	*(($3 + [60])) = *($3 + [79])
	*(($3 + [56])) = *($3 + [78])
	*(($3 + [52])) = *($3 + [77])
	*(($3 + [48])) = *($3 + [76])
	*(($3 + [44])) = *($3 + [75])
	*(($3 + [40])) = *($3 + [74])
	*(($3 + [36])) = *($3 + [73])
	*(($3 + [32])) = *($3 + [72])
	*(($3 + [28])) = *($3 + [71])
	*(($3 + [24])) = *($3 + [70])
	*(($3 + [20])) = *($3 + [69])
	*(($3 + [16])) = *($3 + [68])
	*($3 + [12]) = *($3 + [67])
	*($3 + [8]) = *($3 + [66])
	*($3 + [4]) = *($3 + [65])
	*($3) = *($3 + [64])
	CALL $103(($3 + [80]), [8329], $3)
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	$4 = CALL $115(($3 + [80]))
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$3
	CALL memcpy($5, ($3 + [80]), $4)
	
.LABEL $label$2
	*(($5 + $4)) = [0]
	$global$0 = ($3 + [144])
	return (unreachable)
	
.LABEL $label$1
	CALL $70($0)
}

void .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *([0] + [9020])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *([0] + [9024])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($2 + [-12])
	$4 = *($3)
	if ( ($4 == 0) ){ goto $label$5 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$2 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *([0] + [9020])
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*([0] + [9024]) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18500])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $120($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18047])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [18047])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $58(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $124($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $5 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL $92(($2 + [32]), ((float_32)(CASTING float_32)(uint_64 $1) / (float_32)(float_32)1e4))
	$3 = [0]
	$5 = ($4 & [1])
	$4 = *($2 + [32])
	$4 = ( *($2 + [36]) ? uint_32($4 >> [1]) : $5 )
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ( *($2 + [40]) ? (($2 + [32]) | [1]) : $5 )
	$3 = [0]
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + $3)) == (int_32)[46]) ){ goto $label$1 }
	$3 = ($3 + [1])
	if ( ($3 <= $4) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = CALL $72($2, ($2 + [32]), [0], ($3 + [5]), ($2 + [32]))
	$3 = CALL $80($5, [8327])
	$4 = ($3 + [8])
	*((($2 + [16]) + [8])) = *($4)
	*($2 + [16]) = *($3)
	*($3) = (int_64)0
	*($4) = [0]
	$3 = CALL $80(($2 + [16]), [8192])
	$1 = *($3)
	*($3) = (int_64)0
	*($0) = $1
	$3 = ($3 + [8])
	*(($0 + [8])) = *($3)
	*($3) = [0]
	if ( (*($2 + [16]) & [1]) ){ goto $label$7 }
	$3 = [1]
	if ( (*($2) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*($2 + [24]))
	$3 = [1]
	if ( ((*($2) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($2 + [32]) & $3) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( (*($2 + [32]) & $3) ){ goto $label$3 }
	
.LABEL $label$4
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$3
	CALL _ZdlPv(*($2 + [40]))
	$global$0 = ($2 + [48])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [17868])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [17973])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [17906])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [17973])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $3 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [18449])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $4($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [18449])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC memory ()
{
	CALL $61()
}

void .FUNC $1 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = CALL $115([8192])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17770])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [8191]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17815])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)0
	
.LABEL $label$1
	*($2 + [56]) = [8205]
	*($2 + [60]) = CALL $115([8205])
	*($2 + [8]) = *($2 + [56])
	$6 = *(CALL $2(($2 + [16]), ($2 + [8])))
	*(($2 + [48])) = [0]
	*($2 + [24]) = $1
	*($2 + [16]) = $6
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$3 = CALL $3(($2 + [16]), $4, [8308])
	*($0) = *($3)
	*(($0 + [8])) = *(($3 + [8]))
	$0 = *($2 + [40])
	if ( ($0 == 0) ){ goto $label$7 }
	$7 = ($2 + [44])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$10 }
	$3 = *(($2 + [40]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $0
	
.LABEL $label$8
	*($7) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$global$0 = ($2 + [64])
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [192])
	$global$0 = $3
	*(($4 = $3) + [136]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $120($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [104])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [176]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $26(($4 + [16]), ($4 + [176]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$3 = *($3)
	*((($4 + [144]) + [8])) = $3
	*(($6 = (($4 + [160]) + [8]))) = $3
	$7 = *($4)
	*($4 + [160]) = $7
	*($4 + [144]) = $7
	$3 = *($6)
	*((($4 + [176]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [160])
	*($4 + [32]) = $0
	*($4 + [176]) = $0
	*($4 + [180]) = ($4 + [136])
	*($4 + [176]) = ($4 + [16])
	CALL $27(($4 + [176]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [96]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $124($2)
	$2 = [1]
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [104])))
	$global$0 = ($4 + [192])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [192])
	return $2
}

void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$6 = ($global$0 - [192])
	$global$0 = $6
	CALL require_auth(*($0))
	*(($7 = $6) + [160]) = [18062]
	*($7 + [164]) = CALL $115([18062])
	*($7 + [24]) = *($7 + [160])
	CALL $1(($7 + [176]), *(CALL $2(($7 + [168]), ($7 + [24]))))
	if ( ((int_64)*($7 + [176]) < (int_64)1000001) ){ goto $label$7 }
	*(($7 + [152])) = [0]
	*($7 + [144]) = (int_64)0
	$8 = CALL $115([18075])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$10 }
	*($7 + [144]) = ($8 << [1])
	$9 = (($7 + [144]) | [1])
	if ( $8 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($7 + [144]) = ($10 | [1])
	*($7 + [152]) = $9
	*($7 + [148]) = $8
	
.LABEL $label$9
	CALL memcpy($9, [18075], $8)
	
.LABEL $label$8
	*(($9 + $8)) = [0]
	CALL $32($0, $1, $2, $3, $4, ($7 + [144]))
	if ( ((*($7 + [144]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($7 + [152]))
	
.LABEL $label$7
	CALL $1(($7 + [176]), *($0))
	if ( ((uint_64)((int_64)$4 * (int_64)40) <= (uint_64)*($7 + [176])) ){ goto $label$11 }
	*(($7 + [136])) = [0]
	*($7 + [128]) = (int_64)0
	$8 = CALL $115([18114])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$14 }
	*($7 + [128]) = ($8 << [1])
	$9 = (($7 + [128]) | [1])
	if ( $8 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($7 + [128]) = ($10 | [1])
	*($7 + [136]) = $9
	*($7 + [132]) = $8
	
.LABEL $label$13
	CALL memcpy($9, [18114], $8)
	
.LABEL $label$12
	*(($9 + $8)) = [0]
	CALL $32($0, $1, $2, $3, $4, ($7 + [128]))
	if ( ((*($7 + [128]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($7 + [136]))
	
.LABEL $label$11
	$8 = *($5)
	if ( ($8 & [1]) ){ goto $label$16 }
	$10 = uint_32($8 >> [1])
	goto $label$15 
	
.LABEL $label$16
	$10 = *($5 + [4])
	
.LABEL $label$15
	$11 = ($10 + [-11])
	$8 = CALL $72(($7 + [176]), $5, [11], $11, $5)
	$9 = CALL $82($8, [45], [0])
	if ( ((int_32)$9 == (int_32)($10 + [-12])) ){ goto $label$17 }
	$10 = ($9 + [1])
	if ( ((uint_32)$10 <= (uint_32)[1]) ){ goto $label$17 }
	$12 = CALL $72(($7 + [112]), $8, [0], $9, $8)
	$11 = ($11 - $9)
	$13 = ($11 + [-1])
	CALL $72(($7 + [96]), $8, $10, $13, $8)
	if ( (*($7 + [176]) & [1]) ){ goto $label$19 }
	*($8 + [1]) = [0]
	*($7 + [176]) = [0]
	goto $label$18 
	
.LABEL $label$19
	*(*($8 + [8])) = [0]
	*($8 + [4]) = [0]
	
.LABEL $label$18
	CALL $76($8, [0])
	*((($7 + [176]) + [8])) = *((($7 + [96]) + [8]))
	*($7 + [176]) = *($7 + [96])
	$10 = ($9 & [1])
	$9 = *($7 + [112])
	$15 = uint_32($9 >> [1])
	$14 = *($12 + [4])
	if ( ((int_32)( $14 ? $15 : $10 ) != (int_32)[12]) ){ goto $label$21 }
	$17 = ($12 + [1])
	$16 = *($12 + [8])
	$9 = ( $16 ? $17 : $10 )
	$18 = *($9)
	if ( ((uint_32)(($18 + [-97]) & [255]) <= (uint_32)[25]) ){ goto $label$4 }
	if ( ((uint_32)($18 + [-49]) >= (uint_32)[5]) ){ goto $label$20 }
	goto $label$4 
	
.LABEL $label$21
	CALL $77($12, [18159])
	goto $label$1 
	
.LABEL $label$20
	if ( ((int_32)$18 == (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$17
	CALL eosio_exit([0])
	
.LABEL $label$6
	CALL $70(($7 + [144]))
	
.LABEL $label$5
	CALL $70(($7 + [128]))
	
.LABEL $label$4
	$18 = *($9 + [1])
	if ( ((uint_32)(($18 + [-97]) & [255]) <= (uint_32)[25]) ){ goto $label$22 }
	if ( (($18 + [-49]) <= [5]) ){ goto $label$22 }
	if ( ((int_32)$18 != (int_32)[46]) ){ goto $label$3 }
	
.LABEL $label$22
	$18 = *($9 + [2])
	if ( ((($18 + [-97]) & [255]) <= [26]) ){ goto $label$23 }
	if ( (($18 + [-49]) <= [5]) ){ goto $label$23 }
	if ( ((int_32)$18 != (int_32)[46]) ){ goto $label$3 }
	
.LABEL $label$23
	$18 = *($9 + [3])
	if ( ((($18 + [-97]) & [255]) <= [26]) ){ goto $label$24 }
	if ( (($18 + [-49]) <= [5]) ){ goto $label$24 }
	if ( ((int_32)$18 != (int_32)[46]) ){ goto $label$3 }
	
.LABEL $label$24
	$18 = *($9 + [4])
	if ( ((($18 + [-97]) & [255]) <= [26]) ){ goto $label$25 }
	if ( (($18 + [-49]) <= [5]) ){ goto $label$25 }
	if ( ((int_32)$18 != (int_32)[46]) ){ goto $label$3 }
	
.LABEL $label$25
	$18 = *($9 + [5])
	if ( ((($18 + [-97]) & [255]) <= [26]) ){ goto $label$26 }
	if ( (($18 + [-49]) <= [5]) ){ goto $label$26 }
	if ( ((int_32)$18 != (int_32)[46]) ){ goto $label$3 }
	
.LABEL $label$26
	$18 = *($9 + [6])
	if ( ((($18 + [-97]) & [255]) <= [26]) ){ goto $label$27 }
	if ( (($18 + [-49]) <= [5]) ){ goto $label$27 }
	if ( ((int_32)$18 != (int_32)[46]) ){ goto $label$3 }
	
.LABEL $label$27
	$18 = *($9 + [7])
	if ( ((($18 + [-97]) & [255]) <= [26]) ){ goto $label$28 }
	if ( (($18 + [-49]) <= [5]) ){ goto $label$28 }
	if ( ((int_32)$18 != (int_32)[46]) ){ goto $label$3 }
	
.LABEL $label$28
	$18 = *($9 + [8])
	if ( ((($18 + [-97]) & [255]) <= [26]) ){ goto $label$29 }
	if ( (($18 + [-49]) <= [5]) ){ goto $label$29 }
	if ( ((int_32)$18 != (int_32)[46]) ){ goto $label$3 }
	
.LABEL $label$29
	$18 = *($9 + [9])
	if ( ((($18 + [-97]) & [255]) <= [26]) ){ goto $label$30 }
	if ( (($18 + [-49]) <= [5]) ){ goto $label$30 }
	if ( ((int_32)$18 != (int_32)[46]) ){ goto $label$3 }
	
.LABEL $label$30
	$18 = *($9 + [10])
	if ( ((($18 + [-97]) & [255]) <= [26]) ){ goto $label$31 }
	if ( (($18 + [-49]) <= [5]) ){ goto $label$31 }
	if ( ((int_32)$18 != (int_32)[46]) ){ goto $label$3 }
	
.LABEL $label$31
	$9 = *($9 + [11])
	if ( ((($9 + [-97]) & [255]) <= [26]) ){ goto $label$2 }
	if ( (($9 + [-49]) <= [5]) ){ goto $label$2 }
	if ( ((int_32)$9 == (int_32)[46]) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $77($12, [18159])
	$9 = *($7 + [112])
	$15 = uint_32($9 >> [1])
	$10 = ($9 & [1])
	$14 = *(($12 + [4]))
	$16 = *(($12 + [8]))
	
.LABEL $label$2
	*($7 + [84]) = ( $14 ? $15 : $10 )
	*($7 + [80]) = ( $16 ? $17 : $10 )
	*($7 + [16]) = *($7 + [80])
	if ( (CALL is_account(*(CALL $2(($7 + [88]), ($7 + [16])))) == 0) ){ goto $label$33 }
	$9 = *($7 + [112])
	$10 = ($9 & [1])
	$14 = ($12 + [8])
	*($7 + [72]) = ( *($14) ? $17 : $10 )
	$15 = ($12 + [4])
	*($7 + [76]) = ( *($15) ? uint_32($9 >> [1]) : $10 )
	*($7 + [8]) = *($7 + [72])
	if ( ((int_64)*(CALL $2(($7 + [96]), ($7 + [8]))) != (int_64)$3) ){ goto $label$32 }
	CALL $77($12, [18159])
	goto $label$1 
	
.LABEL $label$33
	CALL $77($12, [18159])
	goto $label$1 
	
.LABEL $label$32
	$9 = *($7 + [112])
	$10 = ($9 & [1])
	*($7 + [64]) = ( *($14) ? $17 : $10 )
	*($7 + [68]) = ( *($15) ? uint_32($9 >> [1]) : $10 )
	*($7) = *($7 + [64])
	if ( ((int_64)*(CALL $2(($7 + [96]), $7)) != (int_64)*($0)) ){ goto $label$1 }
	CALL $77($12, [18159])
	
.LABEL $label$1
	$9 = CALL $82($8, [45], [0])
	if ( ((int_32)$9 == (int_32)($11 + [-2])) ){ goto $label$38 }
	$10 = ($9 + [1])
	if ( ((uint_32)$10 <= (uint_32)[1]) ){ goto $label$38 }
	$14 = ($13 - $9)
	$13 = ($14 + [-1])
	CALL $72(($7 + [96]), $8, $10, $13, $8)
	if ( (*($7 + [176]) & [1]) ){ goto $label$40 }
	*($8 + [1]) = [0]
	*($7 + [176]) = [0]
	goto $label$39 
	
.LABEL $label$40
	*(*($8 + [8])) = [0]
	*($8 + [4]) = [0]
	
.LABEL $label$39
	CALL $76($8, [0])
	*((($7 + [176]) + [8])) = *((($7 + [96]) + [8]))
	*($7 + [176]) = *($7 + [96])
	if ( ((int_32)$14 < (int_32)[2]) ){ goto $label$42 }
	$11 = ( *($8 + [8]) ? ($8 + [1]) : (*($7 + [176]) & [1]) )
	$9 = [0]
	
.LOOP $label$43:
	$10 = *(($11 + $9))
	if ( ((int_32)$10 == (int_32)[45]) ){ goto $label$44 }
	if ( ((uint_32)(($10 + [-48]) & [255]) >= (uint_32)[10]) ){ goto $label$41 }
	
.LABEL $label$44
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)$13) ){ goto $label$43 }
	
.LABEL $label$42
	$19 = $6
	$18 = ($6 - (((((int_32)$14 / (int_32)[4]) << [3]) + [15]) & [-16]))
	$global$0 = $18
	$9 = CALL $82($8, [45], [0])
	if ( ((int_32)$9 == (int_32)($14 + [-2])) ){ goto $label$49 }
	$6 = ($9 + [1])
	if ( ($6 <= [2]) ){ goto $label$49 }
	$10 = $18
	$15 = [0]
	$14 = [0]
	
.LOOP $label$50:
	$11 = CALL $85(CALL $72(($7 + [96]), $8, [0], $9, $8), [0], [10])
	*($10) = $11
	if ( ((*($7 + [96]) & [1]) == 0) ){ goto $label$51 }
	CALL _ZdlPv(*((($7 + [96]) + [8])))
	$11 = *($10)
	
.LABEL $label$51
	if ( ((uint_32)$11 >= (uint_32)[154]) ){ goto $label$46 }
	$11 = ($13 - $9)
	$13 = ($11 + [-1])
	CALL $72(($7 + [96]), $8, $6, $13, $8)
	if ( (*($7 + [176]) & [1]) ){ goto $label$53 }
	*(($8 + [1])) = [0]
	*($7 + [176]) = [0]
	goto $label$52 
	
.LABEL $label$53
	*(*(($8 + [8]))) = [0]
	*(($8 + [4])) = [0]
	
.LABEL $label$52
	CALL $76($8, [0])
	$6 = (($7 + [96]) + [8])
	*(($17 = (($7 + [176]) + [8]))) = *($6)
	*($7 + [176]) = *($7 + [96])
	$9 = CALL $82($8, [45], [0])
	if ( ($9 == 0) ){ goto $label$47 }
	if ( ((int_32)$9 == (int_32)($11 + [-2])) ){ goto $label$47 }
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$48 }
	$11 = ((int_32)CALL $85(CALL $72(($7 + [96]), $8, [0], $9, $8), [0], [10]) * (int_32)[1000])
	*(($16 = ($10 + [4]))) = $11
	if ( ((*($7 + [96]) & [1]) == 0) ){ goto $label$54 }
	CALL _ZdlPv(*($6))
	$11 = *($16)
	
.LABEL $label$54
	if ( ((uint_32)($11 + [-1000]) >= (uint_32)[49001]) ){ goto $label$45 }
	$16 = ($13 - $9)
	$13 = ($16 + [-1])
	CALL $72(($7 + [96]), $8, ($9 + [1]), $13, $8)
	if ( (*($7 + [176]) & [1]) ){ goto $label$56 }
	*(($8 + [1])) = [0]
	*($7 + [176]) = [0]
	goto $label$55 
	
.LABEL $label$56
	*(*(($8 + [8]))) = [0]
	*(($8 + [4])) = [0]
	
.LABEL $label$55
	CALL $76($8, [0])
	*($17) = *($6)
	*($7 + [176]) = *($7 + [96])
	$9 = CALL $82($8, [45], [0])
	if ( ((int_32)$9 == (int_32)($16 + [-2])) ){ goto $label$49 }
	$14 = ($14 + [1])
	$15 = ($11 + $15)
	$10 = ($10 + [8])
	$6 = ($9 + [1])
	if ( ((uint_32)$6 >= (uint_32)[2]) ){ goto $label$50 }
	
.LABEL $label$49
	CALL eosio_exit([0])
	
.LABEL $label$48
	$9 = ((int_32)CALL $85($8, [0], [10]) * (int_32)[1000])
	*(($10 + [4])) = $9
	if ( ((uint_32)($9 + [-1000]) >= (uint_32)[49001]) ){ goto $label$37 }
	if ( ((uint_32)$14 > (uint_32)[4]) ){ goto $label$36 }
	if ( ((int_64)(CASTING int_64)(int_32 ($9 + $15)) != (int_64)$4) ){ goto $label$35 }
	$10 = CALL $71(($7 + [32]), $12)
	$9 = CALL $71(($7 + [48]), $5)
	CALL $33($0, $1, $2, $3, $18, ($14 + [1]), $9, $4, $10)
	if ( ((*($10) & [1]) == 0) ){ goto $label$57 }
	CALL _ZdlPv(*($10 + [8]))
	
.LABEL $label$57
	if ( ((*($9) & [1]) == 0) ){ goto $label$58 }
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$58
	$19
	if ( (*($7 + [112]) & [1]) ){ goto $label$60 }
	if ( (*($7 + [176]) & [1]) ){ goto $label$59 }
	goto $label$34 
	
.LABEL $label$60
	CALL _ZdlPv(*($12 + [8]))
	if ( ((*($7 + [176]) & [1]) == 0) ){ goto $label$34 }
	
.LABEL $label$59
	CALL _ZdlPv(*(($8 + [8])))
	$global$0 = ($7 + [192])
	return (unreachable)
	
.LABEL $label$47
	CALL eosio_exit([0])
	
.LABEL $label$46
	CALL eosio_exit([0])
	
.LABEL $label$45
	CALL eosio_exit([0])
	
.LABEL $label$41
	CALL eosio_exit([0])
	
.LABEL $label$38
	CALL eosio_exit([0])
	
.LABEL $label$37
	CALL eosio_exit([0])
	
.LABEL $label$36
	CALL eosio_exit([0])
	
.LABEL $label$35
	CALL eosio_exit([0])
	
.LABEL $label$34
	$global$0 = ($7 + [192])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $120($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [104])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [56]) = ($2 + $5)
	*($4 + [48]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[15]), [18047])
	CALL memcpy(($4 + [64]), $2, [16])
	$3 = ($5 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [18047])
	CALL memcpy((($4 + [64]) + [16]), ($2 + [16]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[24]), [18047])
	CALL memcpy((($4 + [64]) + [24]), ($2 + [24]), [8])
	*($4 + [52]) = ($2 + [32])
	CALL $23(($4 + [48]), (($4 + [64]) + [32]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$3 = *($3)
	*((($4 + [128]) + [8])) = $3
	*(($6 = (($4 + [144]) + [8]))) = $3
	$7 = *($4)
	*($4 + [144]) = $7
	*($4 + [128]) = $7
	$3 = *($6)
	*((($4 + [160]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [144])
	*($4 + [32]) = $0
	*($4 + [160]) = $0
	*($4 + [164]) = ($4 + [120])
	*($4 + [160]) = ($4 + [16])
	CALL $31(($4 + [160]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [96]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $124($2)
	$2 = [1]
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [104])))
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [176])
	return $2
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [224])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL $6(($2 + [192]), *($1), *(($1 + [8])))
	$3 = CALL $71(($2 + [176]), ($2 + [192]))
	$4 = *($1 + [16])
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$4 }
	$5 = [0]
	$6 = *([0] + [9016])
	
.LOOP $label$6:
	*((($2 + [211]) + ($7 = $5))) = *(($6 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$4 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$7 == (int_32)[12]) )))))
	$5 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[11]) ){ goto $label$5 }
	$4 = ((int_64)$4 << (int_64)5)
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($2 + [168])) = [0]
	*($2 + [160]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$3 }
	*($2 + [160]) = ($5 << [1])
	$6 = (($2 + [160]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*((($2 + [160]) + [8])) = [0]
	*($2 + [160]) = (int_64)0
	*($2 + [160]) = [0]
	$7 = (($2 + [160]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$8 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($2 + [160]) = ($8 | [1])
	*($2 + [168]) = $6
	*($2 + [164]) = $5
	
.LABEL $label$2
	$8 = ($7 + [1])
	$7 = [0]
	
.LOOP $label$7:
	*(($6 + $7)) = *((($2 + [211]) + $7))
	$7 = ($7 + [1])
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	$7 = ($6 + $5)
	
.LABEL $label$1
	*($7) = [0]
	$5 = ($1 + [96])
	$7 = CALL $71(($2 + [144]), $5)
	CALL $36($0, $3, ($2 + [160]), *($1 + [24]), $7)
	if ( (*($7) & [1]) ){ goto $label$12 }
	if ( (*($2 + [160]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($2 + [160]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($2 + [168]))
	$6 = [1]
	if ( (*($3) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$6 = [1]
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$7 = CALL $71(($2 + [128]), ($2 + [192]))
	*(($2 + [40])) = *(($1 + [40]))
	*(($2 + [32])) = *(($1 + [32]))
	*(($2 + [24])) = *(($1 + [24]))
	*(($2 + [16])) = *(($1 + [16]))
	*($2) = *($1)
	*($2 + [8]) = *(($1 + [8]))
	$8 = CALL $71(($2 + [48]), ($1 + [48]))
	$3 = CALL $71(($2 + [60]), ($1 + [60]))
	$9 = CALL $71(($2 + [72]), ($1 + [72]))
	$10 = CALL $71(($2 + [84]), ($1 + [84]))
	$5 = CALL $71(($2 + [96]), $5)
	*(($2 + [120])) = *(($1 + [120]))
	*($2 + [112]) = *($1 + [112])
	CALL $37($0, $7, $2)
	if ( (*($5) & $6) ){ goto $label$25 }
	$5 = [1]
	if ( (*($10) & [1]) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL _ZdlPv(*(($2 + [104])))
	$5 = [1]
	if ( ((*($10) & [1]) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($2 + [92])))
	if ( ((*($9) & $5) == 0) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	if ( (*($9) & $5) ){ goto $label$21 }
	
.LABEL $label$22
	$5 = [1]
	if ( (*($3) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL _ZdlPv(*(($2 + [80])))
	$5 = [1]
	if ( ((*($3) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($2 + [68])))
	if ( ((*($8) & $5) == 0) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	if ( (*($8) & $5) ){ goto $label$17 }
	
.LABEL $label$18
	$5 = [1]
	if ( (*($7) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL _ZdlPv(*(($2 + [56])))
	$5 = [1]
	if ( ((*($7) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($2 + [192]) & $5) == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	if ( (*($2 + [192]) & $5) ){ goto $label$13 }
	
.LABEL $label$14
	$global$0 = ($2 + [224])
	return 
	
.LABEL $label$13
	CALL _ZdlPv(*($2 + [200]))
	$global$0 = ($2 + [224])
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $120($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $124($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_64 $9, int_32 $10, int_64 $11)
{
	CALL require_auth(*($0))
	CALL require_recipient($3)
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [240])
	$global$0 = $3
	*(($4 = $3) + [184]) = *($2)
	$5 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$5 = CALL $120($2)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$2
	CALL read_action_data($5, $2)
	
.LABEL $label$1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = (int_64)0
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = (int_64)0
	*(($4 + [160])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [136]) = [0]
	*($4 + [144]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [52]) = $5
	*($4 + [48]) = $5
	*($4 + [56]) = ($5 + $2)
	*($4 + [224]) = ($4 + [48])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[15]), [18047])
	CALL memcpy(($4 + [64]), *($4 + [52]), [16])
	$3 = (*($4 + [52]) + [16])
	*($4 + [52]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [56]) - $3) > (uint_32)[7]), [18047])
	CALL memcpy((($4 + [64]) + [16]), *($4 + [52]), [8])
	*($4 + [52]) = (*($4 + [52]) + [8])
	CALL $23(($4 + [48]), (($4 + [64]) + [24]))
	CALL $23(($4 + [48]), ($4 + [100]))
	*($4 + [16]) = ($4 + [64])
	CALL $24(($4 + [16]), ($4 + [224]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$3 = *($3)
	*((($4 + [192]) + [8])) = $3
	*(($6 = (($4 + [208]) + [8]))) = $3
	$7 = *($4)
	*($4 + [208]) = $7
	*($4 + [192]) = $7
	$3 = *($6)
	*((($4 + [224]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [208])
	*($4 + [32]) = $0
	*($4 + [224]) = $0
	*($4 + [228]) = ($4 + [184])
	*($4 + [224]) = ($4 + [16])
	CALL $25(($4 + [224]), ($4 + [64]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$14 }
	$2 = [1]
	if ( (*($4 + [152]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $124($5)
	$2 = [1]
	if ( ((*($4 + [152]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($4 + [160])))
	if ( ((*($4 + [124]) & $2) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( (*($4 + [124]) & $2) ){ goto $label$10 }
	
.LABEL $label$11
	$2 = [1]
	if ( (*($4 + [112]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($4 + [132])))
	$2 = [1]
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [120])))
	if ( ((*($4 + [100]) & $2) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($4 + [100]) & $2) ){ goto $label$6 }
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [108])))
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	$global$0 = ($4 + [240])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [240])
	return $2
}

void .FUNC $13 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5, int_64 $6)
{
	int_32 $7
	int_64 $8
	$7 = ($global$0 - [192])
	$global$0 = $7
	*($7 + [168]) = $2
	*($7 + [160]) = $1
	CALL require_auth(*($0))
	$8 = CALL current_time()
	*(($7 + [124])) = (int_64)0
	*(($7 + [140])) = (int_64)0
	*(($7 + [148])) = (int_64)0
	*($7 + [108]) = [0]
	*($7 + [112]) = [0]
	*($7 + [116 align=4]) = (int_64)0
	*($7 + [132 align=4]) = (int_64)0
	*($7 + [96]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	$8 = *($0)
	*($7 + [80]) = [18040]
	*($7 + [84]) = CALL $115([18040])
	*($7 + [8]) = *($7 + [80])
	*($7 + [88]) = *(CALL $2(($7 + [16]), ($7 + [8])))
	*($7 + [80]) = $8
	*($7 + [72]) = *($0)
	*($7 + [184]) = [17755]
	*($7 + [188]) = CALL $115([17755])
	*($7) = *($7 + [184])
	*($7 + [184]) = *(CALL $2(($7 + [16]), $7))
	*($7 + [24]) = $2
	*($7 + [16]) = $1
	*($7 + [32]) = $3
	*($7 + [40]) = $4
	CALL $71(($7 + [48]), $5)
	CALL $28(($7 + [132]), ($7 + [80]), ($7 + [72]), ($7 + [184]), ($7 + [16]))
	if ( ((*($7 + [48]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($7 + [56])))
	
.LABEL $label$1
	*(($7 + [116])) = [1]
	$1 = *($0)
	CALL $29(($7 + [16]), ($7 + [96]))
	$0 = *($7 + [16])
	CALL send_deferred(($7 + [160]), $1, $0, (*($7 + [20]) - $0), [0])
	$0 = *($7 + [16])
	if ( ($0 == 0) ){ goto $label$2 }
	*($7 + [20]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$2
	CALL $30(($7 + [96]))
	$global$0 = ($7 + [192])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [272])
	$global$0 = $3
	*(($4 = $3) + [160]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $120($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	CALL memset(($4 + [32]), [0], [128])
	*(($4 + [88])) = (int_64)0
	*(($4 + [96])) = (int_64)0
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = (int_64)0
	*(($4 + [136])) = [0]
	*($4 + [48]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [20]) = $2
	*($4 + [16]) = $2
	*($4 + [24]) = ($2 + $5)
	*($4 + [256]) = ($4 + [16])
	*($4 + [172]) = ($4 + [48])
	*($4 + [176]) = (($4 + [32]) + [24])
	*($4 + [180]) = ($4 + [64])
	*($4 + [184]) = ($4 + [72])
	*($4 + [188]) = ($4 + [76])
	*($4 + [192]) = ($4 + [80])
	*($4 + [196]) = ($4 + [92])
	*($4 + [200]) = ($4 + [104])
	*($4 + [204]) = ($4 + [116])
	$3 = ($4 + [128])
	*($4 + [208]) = $3
	*($4 + [212]) = ($4 + [144])
	*($4 + [216]) = ($4 + [152])
	*($4 + [168]) = ($4 + [32])
	CALL $34(($4 + [168]), ($4 + [256]))
	*(($6 = ($4 + [8]))) = *($4 + [24])
	*($4) = *($4 + [16])
	$6 = *($6)
	*((($4 + [224]) + [8])) = $6
	*(($7 = (($4 + [240]) + [8]))) = $6
	$8 = *($4)
	*($4 + [240]) = $8
	*($4 + [224]) = $8
	$6 = *($7)
	*((($4 + [256]) + [8])) = $6
	*((($4 + [168]) + [24])) = $6
	*($4 + [168]) = $0
	*($4 + [176]) = $1
	$0 = *($4 + [240])
	*($4 + [184]) = $0
	*($4 + [256]) = $0
	*($4 + [260]) = ($4 + [160])
	*($4 + [256]) = ($4 + [168])
	CALL $35(($4 + [256]), ($4 + [32]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $124($2)
	
.LABEL $label$4
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [136])))
	
.LABEL $label$5
	if ( ((*(($4 + [116])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [124])))
	
.LABEL $label$6
	if ( ((*(($4 + [104])) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [112])))
	
.LABEL $label$7
	if ( ((*(($4 + [92])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [100])))
	
.LABEL $label$8
	if ( ((*(($4 + [80])) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($4 + [88])))
	
.LABEL $label$9
	$global$0 = ($4 + [272])
	return [1]
}

void .FUNC $19 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $120($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $38(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $96($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $59 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_64 $9, int_32 $10, int_64 $11)
{
	int_32 $12
	int_32 $13
	int_32 $14
	$12 = ($global$0 - [80])
	$global$0 = $12
	$0 = *($0 + [4])
	$13 = *($0 + [4])
	$14 = (*($0) + int_32($13 >> [1]))
	$0 = *($0)
	if ( (($13 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($14) + $0))
	
.LABEL $label$1
	$10 = CALL $71($12, $10)
	$7 = CALL $71(($12 + [16]), $7)
	$6 = CALL $71(($12 + [32]), $6)
	$5 = CALL $71(($12 + [48]), $5)
	$4 = CALL $71(($12 + [64]), $4)
	CALL void $14((int_32 $1), (int_64 $2), (int_64 $3), (int_64 $4), (int_32 $5), (int_32 $6), (int_32 $7), (int_32 $8), (int_32 $9), (int_64 $10), (int_32 $11), (int_64 $0))
	if ( (*($10) & [1]) ){ goto $label$10 }
	if ( (*($7) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*($10 + [8]))
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*($7 + [8]))
	$0 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$0 = [1]
	if ( (*($6) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( (*($5) & $0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & $0) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($4) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($12 + [80])
	return 
	
.LABEL $label$2
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($12 + [80])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18056])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18056])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18056])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [18056])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $40(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [224])
	$global$0 = $2
	CALL $89(($2 + [176]), *($1 + [44]))
	$4 = *($2 + [176])
	$3 = CALL $115([18244])
	if ( ((int_32)$3 != (int_32)( *($2 + [180]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$1 }
	if ( CALL $83(($2 + [176]), [0], [-1], [18244], $3) ){ goto $label$1 }
	CALL $77(($2 + [176]), [18247])
	
.LABEL $label$1
	$5 = *($0)
	*($2 + [136]) = [18040]
	*($2 + [140]) = CALL $115([18040])
	*($2 + [8]) = *($2 + [136])
	$6 = *(CALL $2(($2 + [16]), ($2 + [8])))
	$7 = *($0)
	*($2 + [136]) = [17733]
	*($2 + [140]) = CALL $115([17733])
	*($2) = *($2 + [136])
	$8 = *(CALL $2(($2 + [16]), $2))
	*($2 + [24]) = *(($1 + [8]))
	*($2 + [16]) = *($1)
	*($2 + [32]) = *($1 + [16])
	$4 = CALL $71((($2 + [16]) + [24]), ($1 + [72]))
	$3 = CALL $71((($2 + [16]) + [36]), ($1 + [84]))
	CALL $71((($2 + [16]) + [48]), ($1 + [60]))
	CALL $71((($2 + [16]) + [60]), ($1 + [48]))
	*($2 + [88]) = *($1 + [40])
	*($2 + [96]) = *($1 + [112])
	CALL $71(($2 + [104]), ($2 + [176]))
	*($2 + [136]) = $7
	*($2 + [144]) = $8
	*($2 + [120]) = *($1 + [120])
	*(($1 = CALL _Znwj([16]))) = $5
	*($1 + [8]) = $6
	$0 = [0]
	*((($2 + [136]) + [36])) = [0]
	$9 = ($1 + [16])
	*((($2 + [136]) + [24])) = $9
	*(($2 + [156])) = $9
	*($2 + [152]) = $1
	*($2 + [164 align=4]) = (int_64)0
	*($2 + [208]) = [0]
	*($2 + [216]) = ($2 + [208])
	*($2 + [192]) = ($2 + [16])
	CALL $52(($2 + [192]), ($2 + [216]))
	$1 = *($2 + [208])
	if ( ($1 == 0) ){ goto $label$3 }
	$9 = ($2 + [164])
	CALL $20($9, $1)
	$0 = *(($2 + [168]))
	$1 = *($9)
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	
.LABEL $label$2
	*($2 + [196]) = $1
	*($2 + [192]) = $1
	*($2 + [200]) = $0
	*($2 + [208]) = ($2 + [192])
	CALL eosio_assert(((int_32)($0 - $1) > (int_32)[15]), [18056])
	CALL memcpy(*($2 + [196]), ($2 + [16]), [16])
	$1 = (*($2 + [196]) + [16])
	*($2 + [196]) = $1
	CALL eosio_assert(((int_32)(*($2 + [200]) - $1) > (int_32)[7]), [18056])
	CALL memcpy(*($2 + [196]), (($2 + [16]) + [16]), [8])
	*($2 + [196]) = (*($2 + [196]) + [8])
	CALL $40(($2 + [192]), $4)
	CALL $40(($2 + [192]), $3)
	*($2 + [216]) = ($2 + [16])
	CALL $53(($2 + [216]), ($2 + [208]))
	CALL $22(($2 + [192]), ($2 + [136]))
	$1 = *($2 + [192])
	CALL send_inline($1, (*($2 + [196]) - $1))
	$1 = *($2 + [192])
	if ( ($1 == 0) ){ goto $label$4 }
	*($2 + [196]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$1 = *($2 + [164])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($2 + [168])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$1 = *($2 + [152])
	if ( ($1 == 0) ){ goto $label$6 }
	*(($2 + [156])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$6
	if ( (*($2 + [104]) & [1]) ){ goto $label$17 }
	if ( (*($2 + [76]) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL _ZdlPv(*(($2 + [112])))
	if ( ((*($2 + [76]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($2 + [84])))
	$1 = [1]
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$1 = [1]
	if ( (*($2 + [64]) & [1]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( (*($2 + [52]) & $1) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*(($2 + [72])))
	if ( ((*($2 + [52]) & $1) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($2 + [60])))
	$1 = [1]
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$1 = [1]
	if ( (*($2 + [40]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($2 + [176]) & $1) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($2 + [48])))
	if ( ((*($2 + [176]) & $1) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($2 + [184]))
	$global$0 = ($2 + [224])
	return 
	
.LABEL $label$7
	$global$0 = ($2 + [224])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$4 = (*($3) + [24])
	*(($3 = *($1))) = $4
	$5 = *($0 + [24])
	$0 = *($0)
	$6 = (CASTING uint_64)(uint_32 ( *(($0 + [28])) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	*($3) = $4
	$5 = *(($0 + [24]))
	$5 = ( *(($0 + [28])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($5 == 0) ){ goto $label$2 }
	$4 = ($5 + $4)
	*($3) = $4
	
.LABEL $label$2
	$5 = *($0 + [36])
	$6 = (CASTING uint_64)(uint_32 ( *(($0 + [40])) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	*($3) = $4
	$5 = *(($0 + [36]))
	$5 = ( *(($0 + [40])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($5 == 0) ){ goto $label$4 }
	*($3) = ($5 + $4)
	
.LABEL $label$4
	*($2 + [8]) = $0
	CALL $54(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $40(*($1), (*($0) + [48]))
	$0 = *($0)
	CALL $40(*($1), ($0 + [60]))
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [18056])
	CALL memcpy(*($2 + [4]), ($0 + [72]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [18056])
	CALL memcpy(*($2 + [4]), ($0 + [80]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $40(*($1), ($0 + [88]))
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[7]), [18056])
	CALL memcpy(*($1 + [4]), ($0 + [104]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$2 = *($0 + [48])
	$0 = *($0)
	$3 = (CASTING uint_64)(uint_32 ( *(($0 + [52])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	$2 = *($1)
	$1 = *($2)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$4 = *(($0 + [48]))
	$4 = ( *(($0 + [52])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$2 }
	$1 = ($4 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($0 + [60])
	$3 = (CASTING uint_64)(uint_32 ( *(($0 + [64])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$4 = *(($0 + [60]))
	$4 = ( *(($0 + [64])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$4 }
	$1 = ($4 + $1)
	*($2) = $1
	
.LABEL $label$4
	$1 = ($1 + [12])
	*($2) = $1
	$4 = *($0 + [88])
	$3 = (CASTING uint_64)(uint_32 ( *(($0 + [92])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *(($0 + [88]))
	$0 = ( *(($0 + [92])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	$1 = ($0 + $1)
	*($2) = $1
	
.LABEL $label$6
	*($2) = ($1 + [8])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[15]), [18047])
	CALL memcpy($2, *($3 + [4]), [16])
	*($3 + [4]) = (*($3 + [4]) + [16])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18047])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18047])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18047])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [18047])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [18047])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	CALL $23(*($1), *($0 + [24]))
	CALL $23(*($1), *($0 + [28]))
	CALL $23(*($1), *($0 + [32]))
	CALL $23(*($1), *($0 + [36]))
	CALL $23(*($1), *($0 + [40]))
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18047])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18047])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [48])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($3)
	$3 = *($0 + [28])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$4 = *($3)
	$3 = *($0 + [32])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$6
	$4 = *($3)
	$3 = *($0 + [36])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$7:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$8 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$8
	$3 = *($0)
	$0 = *($0 + [40])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$9:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$9 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$10 }
	$1 = ($0 + $1)
	*($2) = $1
	
.LABEL $label$10
	*($2) = ($1 + [16])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[15]), [18056])
	CALL memcpy(*($3 + [4]), $2, [16])
	*($3 + [4]) = (*($3 + [4]) + [16])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18056])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18056])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18056])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [18056])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [18056])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	CALL $40(*($1), *($0 + [24]))
	CALL $40(*($1), *($0 + [28]))
	CALL $40(*($1), *($0 + [32]))
	CALL $40(*($1), *($0 + [36]))
	CALL $40(*($1), *($0 + [40]))
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18056])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18056])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $116 (int_32 $0)
{
	*($0) = [1]
}

void .FUNC $117 (int_32 $0)
{
	*($0) = [0]
}

int_32 .FUNC $114 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [128])
	$global$0 = $2
	*(($2 + [40])) = *(($1 + [40]))
	*(($2 + [32])) = *(($1 + [32]))
	*(($2 + [24])) = *(($1 + [24]))
	*(($2 + [16])) = *(($1 + [16]))
	*($2) = *($1)
	*($2 + [8]) = *(($1 + [8]))
	$3 = CALL $71(($2 + [48]), ($1 + [48]))
	$4 = CALL $71(($2 + [60]), ($1 + [60]))
	$5 = CALL $71(($2 + [72]), ($1 + [72]))
	$6 = CALL $71(($2 + [84]), ($1 + [84]))
	$7 = CALL $71(($2 + [96]), ($1 + [96]))
	*(($2 + [120])) = *(($1 + [120]))
	*($2 + [112]) = *($1 + [112])
	CALL $60($0, $2)
	if ( (*($7) & [1]) ){ goto $label$9 }
	if ( (*($6) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($2 + [104])))
	if ( ((*($6) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($2 + [92])))
	$1 = [1]
	if ( ((*($5) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = [1]
	if ( (*($5) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($4) & $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*(($2 + [80])))
	if ( ((*($4) & $1) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*(($2 + [68])))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [128])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*(($2 + [56])))
	$global$0 = ($2 + [128])
}

int_32 .FUNC $112 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $108($3, (int_64)0)
	$4 = CALL $110($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_64 .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $109($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $97()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $109($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [18673]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $108($0, (int_64)0)
	*(CALL $97()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $109($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $109($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $109($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $109($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [18673])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [18673]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18673]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $109($0)
	$5 = *(($6 + [18673]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $109($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [18673]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8196]))
	$8 = (int_64)0
	$5 = *(($6 + [18673]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18673]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $109($0)
	$5 = *(($6 + [18673]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $109($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [18673]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $108($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [18673]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [18673]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $109($0) + [18673]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $97()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $97()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $97()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_64 .FUNC $111 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $108($3, (int_64)0)
	$4 = CALL $110($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

int_32 .FUNC $118 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $97())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $119($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $120($1)
	
.LABEL $label$2
	*(CALL $97()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $120(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $124($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $43($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $20($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $44($2, $1)
	CALL $46(CALL $45(CALL $45($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [16])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $96($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$10 = (CASTING uint_64)(uint_32 $1)
	$3 = ($4 + [32])
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$9 = ($7 + [32])
	$1 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $20($1, $2)
	$9 = *($9)
	$2 = *($1)
	goto $label$6 
	
.LABEL $label$7
	$9 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5) = $2
	*($5 + [8]) = $9
	$9 = ($9 - $2)
	CALL eosio_assert(((int_32)$9 > (int_32)[15]), [18056])
	CALL memcpy($2, $4, [16])
	CALL eosio_assert(((int_32)($9 + [-16]) > (int_32)[7]), [18056])
	CALL memcpy(($2 + [16]), ($4 + [16]), [8])
	CALL eosio_assert(((int_32)($9 + [-24]) > (int_32)[7]), [18056])
	CALL memcpy(($2 + [24]), ($4 + [24]), [8])
	*($5 + [4]) = ($2 + [32])
	CALL $40($5, $3)
	$12 = ($7 + [40])
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($5 + [16])
	(unreachable)
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2 + [16]) = [0]
	*($2) = ($2 + [16])
	$4 = ($1 + [16])
	*($2 + [28]) = $4
	*($2 + [24]) = $1
	$5 = ($1 + [24])
	*($2 + [32]) = $5
	$6 = ($1 + [32])
	*($2 + [36]) = $6
	$7 = ($1 + [40])
	*($2 + [40]) = $7
	$8 = ($1 + [44])
	*($2 + [44]) = $8
	$9 = ($1 + [48])
	*($2 + [48]) = $9
	$10 = ($1 + [60])
	*($2 + [52]) = $10
	$11 = ($1 + [72])
	*($2 + [56]) = $11
	$12 = ($1 + [84])
	*($2 + [60]) = $12
	$13 = ($1 + [96])
	*($2 + [64]) = $13
	$14 = ($1 + [112])
	*($2 + [68]) = $14
	$15 = ($1 + [120])
	*($2 + [72]) = $15
	CALL $56(($2 + [24]), $2)
	$16 = *($2 + [16])
	if ( ($16 == 0) ){ goto $label$2 }
	CALL $20($0, $16)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	*($2 + [16]) = $2
	*($2 + [28]) = $4
	*($2 + [24]) = $1
	*($2 + [32]) = $5
	*($2 + [36]) = $6
	*($2 + [40]) = $7
	*($2 + [44]) = $8
	*($2 + [48]) = $9
	*($2 + [52]) = $10
	*($2 + [56]) = $11
	*($2 + [60]) = $12
	*($2 + [64]) = $13
	*($2 + [68]) = $14
	*($2 + [72]) = $15
	CALL $57(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [80])
}

int_32 .FUNC $107 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $106($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $106 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[15]), [18056])
	CALL memcpy(*($3 + [4]), $2, [16])
	*($3 + [4]) = (*($3 + [4]) + [16])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18056])
	CALL memcpy(*($0 + [4]), ($3 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18056])
	CALL memcpy(*($0 + [4]), ($3 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $40(*($1), ($3 + [32]))
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[7]), [18056])
	CALL memcpy(*($1 + [4]), ($3 + [48]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $96($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $39($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $76($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $76($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $70($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $20($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [18056])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [18056])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $42(CALL $41($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	$7 = CALL $71($2, ($1 + [88]))
	$6 = CALL $71(($2 + [16]), ($1 + [60]))
	$5 = CALL $71(($2 + [32]), ($1 + [48]))
	$4 = CALL $71(($2 + [48]), ($1 + [36]))
	$3 = CALL $71(($2 + [64]), ($1 + [24]))
	CALL $59($0, *($1), *(($1 + [8])), *($1 + [16]), $3, $4, $5, $6, *($1 + [72]), *($1 + [80]), $7, *($1 + [104]))
	if ( (*($7) & [1]) ){ goto $label$9 }
	if ( (*($6) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($6 + [8]))
	$1 = [1]
	if ( ((*($5) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = [1]
	if ( (*($5) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($4) & $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & $1) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [80])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [80])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $23(*($1), (*($0) + [48]))
	$0 = *($0)
	CALL $23(*($1), ($0 + [60]))
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [18047])
	CALL memcpy(($0 + [72]), *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [18047])
	CALL memcpy(($0 + [80]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $23(*($1), ($0 + [88]))
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [18047])
	CALL memcpy(($0 + [104]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *(($1 + [8]))
	$4 = *($1)
	$5 = *($1 + [24])
	$6 = *($1 + [16])
	$7 = CALL $71($2, ($1 + [32]))
	$8 = *($1 + [48])
	$1 = *($0 + [4])
	$9 = *($1 + [4])
	$0 = (*($0) + int_32($9 >> [1]))
	$1 = *($1)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$9 = CALL $71(($2 + [16]), $7)
	CALL void $0((int_32 $4), (int_64 $3), (int_64 $6), (int_64 $5), (int_64 $9), (int_32 $8), (int_64 $1))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($7) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($7) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($7 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[15]), [18047])
	CALL memcpy($2, *($3 + [4]), [16])
	*($3 + [4]) = (*($3 + [4]) + [16])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18047])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18047])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $23(*($1), ($3 + [32]))
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [18047])
	CALL memcpy(($3 + [48]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

int_32 .FUNC $109 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $107($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $124($0)
	
.LABEL $label$1
}

void .FUNC $108 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $124($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $118(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9032])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $118(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $61 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$0 = ($global$0 - [464])
	$global$0 = $0
	*(($1 = CALL _Znwj([12]))) = (int_64)412316860464
	*($1 + [8]) = [121]
	*($0 + [8]) = $1
	$1 = ($1 + [12])
	*($0 + [16]) = $1
	*($0 + [12]) = $1
	*(($1 = CALL _Znwj([48]))) = (int_64)8589934593
	*($1 + [8 align=4]) = (int_64)107374182424
	*($1 + [16 align=4]) = (int_64)519691042842
	*($1 + [24 align=4]) = (int_64)528280977530
	*($1 + [32 align=4]) = (int_64)635655159953
	*($1 + [40 align=4]) = (int_64)652835029143
	$2 = ($1 + [48])
	*(($0 + [28])) = $2
	*(($0 + [24])) = $2
	*($0 + [20]) = $1
	*(($1 = CALL _Znwj([56]))) = (int_64)111669149721
	*($1 + [8 align=4]) = (int_64)214748364849
	*($1 + [16 align=4]) = (int_64)313532612680
	*($1 + [24 align=4]) = (int_64)519691042890
	*($1 + [32 align=4]) = (int_64)528280977530
	*($1 + [40 align=4]) = (int_64)635655159953
	*($1 + [48 align=4]) = (int_64)644245094549
	$2 = ($1 + [56])
	*(($0 + [40])) = $2
	*(($0 + [36])) = $2
	*($0 + [32]) = $1
	*(($1 = CALL _Znwj([48]))) = (int_64)317827579977
	*($1 + [8 align=4]) = (int_64)420906795105
	*($1 + [16 align=4]) = (int_64)519691042936
	*($1 + [24 align=4]) = (int_64)528280977530
	*($1 + [32 align=4]) = (int_64)635655159953
	*($1 + [40 align=4]) = (int_64)652835029143
	$2 = ($1 + [48])
	*((($0 + [8]) + [44])) = $2
	*(($0 + [48])) = $2
	*($0 + [44]) = $1
	*(($1 = CALL _Znwj([56]))) = (int_64)12884901890
	*($1 + [8 align=4]) = (int_64)103079215108
	*($1 + [16 align=4]) = (int_64)115964117018
	*($1 + [24 align=4]) = (int_64)528280977436
	*($1 + [32 align=4]) = (int_64)536870912124
	*($1 + [40 align=4]) = (int_64)635655159953
	*($1 + [48 align=4]) = (int_64)644245094549
	$2 = ($1 + [56])
	*((($0 + [8]) + [56])) = $2
	*((($0 + [8]) + [52])) = $2
	*($0 + [56]) = $1
	*(($1 = CALL _Znwj([68]))) = (int_64)115964117018
	*($1 + [8 align=4]) = (int_64)214748364828
	*($1 + [16 align=4]) = (int_64)223338299443
	*($1 + [24 align=4]) = (int_64)317827579976
	*($1 + [32 align=4]) = (int_64)326417514571
	*($1 + [40 align=4]) = (int_64)532575944827
	*($1 + [48 align=4]) = (int_64)622770258045
	*($1 + [56 align=4]) = (int_64)648540061844
	*($1 + [64]) = [152]
	$2 = ($1 + [68])
	*((($0 + [8]) + [68])) = $2
	*(($0 + [72])) = $2
	*($0 + [68]) = $1
	*(($1 = CALL _Znwj([56]))) = (int_64)322122547274
	*($1 + [8 align=4]) = (int_64)420906795084
	*($1 + [16 align=4]) = (int_64)429496729699
	*($1 + [24 align=4]) = (int_64)528280977528
	*($1 + [32 align=4]) = (int_64)536870912124
	*($1 + [40 align=4]) = (int_64)635655159953
	*($1 + [48 align=4]) = (int_64)644245094549
	$2 = ($1 + [56])
	*(($0 + [88])) = $2
	*(($0 + [84])) = $2
	*($0 + [80]) = $1
	*(($1 = CALL _Znwj([56]))) = (int_64)21474836484
	*($1 + [8 align=4]) = (int_64)103079215110
	*($1 + [16 align=4]) = (int_64)124554051612
	*($1 + [24 align=4]) = (int_64)536870912030
	*($1 + [32 align=4]) = (int_64)545460846718
	*($1 + [40 align=4]) = (int_64)635655159953
	*($1 + [48 align=4]) = (int_64)652835029143
	$2 = ($1 + [56])
	*(($0 + [100])) = $2
	*(($0 + [96])) = $2
	*($0 + [92]) = $1
	*(($1 = CALL _Znwj([68]))) = (int_64)124554051612
	*($1 + [8 align=4]) = (int_64)223338299422
	*($1 + [16 align=4]) = (int_64)231928234037
	*($1 + [24 align=4]) = (int_64)326417514568
	*($1 + [32 align=4]) = (int_64)335007449165
	*($1 + [40 align=4]) = (int_64)541165879421
	*($1 + [48 align=4]) = (int_64)622770258047
	*($1 + [56 align=4]) = (int_64)639950127252
	*($1 + [64]) = [150]
	$2 = ($1 + [68])
	*(($0 + [112])) = $2
	*(($0 + [108])) = $2
	*($0 + [104]) = $1
	*(($1 = CALL _Znwj([56]))) = (int_64)330712481868
	*($1 + [8 align=4]) = (int_64)429496729678
	*($1 + [16 align=4]) = (int_64)438086664293
	*($1 + [24 align=4]) = (int_64)536870912120
	*($1 + [32 align=4]) = (int_64)545460846718
	*($1 + [40 align=4]) = (int_64)635655159953
	*($1 + [48 align=4]) = (int_64)652835029143
	$2 = ($1 + [56])
	*(($0 + [124])) = $2
	*(($0 + [120])) = $2
	*($0 + [116]) = $1
	*(($1 = CALL _Znwj([56]))) = (int_64)30064771078
	*($1 + [8 align=4]) = (int_64)103079215112
	*($1 + [16 align=4]) = (int_64)133143986206
	*($1 + [24 align=4]) = (int_64)545460846624
	*($1 + [32 align=4]) = (int_64)554050781312
	*($1 + [40 align=4]) = (int_64)635655159953
	*($1 + [48 align=4]) = (int_64)648540061845
	$2 = ($1 + [56])
	*(($0 + [136])) = $2
	*(($0 + [132])) = $2
	*($0 + [128]) = $1
	*(($1 = CALL _Znwj([68]))) = (int_64)133143986206
	*($1 + [8 align=4]) = (int_64)231928234016
	*($1 + [16 align=4]) = (int_64)240518168631
	*($1 + [24 align=4]) = (int_64)335007449160
	*($1 + [32 align=4]) = (int_64)343597383759
	*($1 + [40 align=4]) = (int_64)549755814015
	*($1 + [48 align=4]) = (int_64)622770258049
	*($1 + [56 align=4]) = (int_64)644245094548
	*($1 + [64]) = [152]
	$2 = ($1 + [68])
	*(($0 + [148])) = $2
	*(($0 + [144])) = $2
	*($0 + [140]) = $1
	*(($1 = CALL _Znwj([56]))) = (int_64)339302416462
	*($1 + [8 align=4]) = (int_64)438086664272
	*($1 + [16 align=4]) = (int_64)446676598887
	*($1 + [24 align=4]) = (int_64)545460846712
	*($1 + [32 align=4]) = (int_64)554050781312
	*($1 + [40 align=4]) = (int_64)635655159953
	*($1 + [48 align=4]) = (int_64)644245094549
	$2 = ($1 + [56])
	*((($0 + [8]) + [152])) = $2
	*(($0 + [156])) = $2
	*($0 + [152]) = $1
	*(($1 = CALL _Znwj([56]))) = (int_64)38654705672
	*($1 + [8 align=4]) = (int_64)103079215114
	*($1 + [16 align=4]) = (int_64)141733920800
	*($1 + [24 align=4]) = (int_64)554050781218
	*($1 + [32 align=4]) = (int_64)562640715906
	*($1 + [40 align=4]) = (int_64)635655159954
	*($1 + [48 align=4]) = (int_64)652835029142
	$2 = ($1 + [56])
	*(($0 + [172])) = $2
	*(($0 + [168])) = $2
	*($0 + [164]) = $1
	*(($1 = CALL _Znwj([68]))) = (int_64)141733920800
	*($1 + [8 align=4]) = (int_64)240518168610
	*($1 + [16 align=4]) = (int_64)249108103225
	*($1 + [24 align=4]) = (int_64)343597383752
	*($1 + [32 align=4]) = (int_64)352187318353
	*($1 + [40 align=4]) = (int_64)558345748609
	*($1 + [48 align=4]) = (int_64)627065225347
	*($1 + [56 align=4]) = (int_64)639950127252
	*($1 + [64]) = [151]
	$2 = ($1 + [68])
	*(($0 + [184])) = $2
	*(($0 + [180])) = $2
	*($0 + [176]) = $1
	*(($1 = CALL _Znwj([56]))) = (int_64)347892351056
	*($1 + [8 align=4]) = (int_64)446676598866
	*($1 + [16 align=4]) = (int_64)455266533481
	*($1 + [24 align=4]) = (int_64)554050781304
	*($1 + [32 align=4]) = (int_64)562640715906
	*($1 + [40 align=4]) = (int_64)635655159954
	*($1 + [48 align=4]) = (int_64)652835029142
	$2 = ($1 + [56])
	*(($0 + [196])) = $2
	*(($0 + [192])) = $2
	*($0 + [188]) = $1
	*(($1 = CALL _Znwj([56]))) = (int_64)47244640266
	*($1 + [8 align=4]) = (int_64)103079215116
	*($1 + [16 align=4]) = (int_64)150323855394
	*($1 + [24 align=4]) = (int_64)562640715812
	*($1 + [32 align=4]) = (int_64)571230650500
	*($1 + [40 align=4]) = (int_64)635655159954
	*($1 + [48 align=4]) = (int_64)648540061845
	$2 = ($1 + [56])
	*(($0 + [208])) = $2
	*(($0 + [204])) = $2
	*($0 + [200]) = $1
	*(($1 = CALL _Znwj([68]))) = (int_64)150323855394
	*($1 + [8 align=4]) = (int_64)249108103204
	*($1 + [16 align=4]) = (int_64)257698037819
	*($1 + [24 align=4]) = (int_64)352187318344
	*($1 + [32 align=4]) = (int_64)360777252947
	*($1 + [40 align=4]) = (int_64)566935683203
	*($1 + [48 align=4]) = (int_64)627065225349
	*($1 + [56 align=4]) = (int_64)644245094548
	*($1 + [64]) = [152]
	$2 = ($1 + [68])
	*(($0 + [220])) = $2
	*(($0 + [216])) = $2
	*($0 + [212]) = $1
	*(($1 = CALL _Znwj([56]))) = (int_64)356482285650
	*($1 + [8 align=4]) = (int_64)455266533460
	*($1 + [16 align=4]) = (int_64)463856468075
	*($1 + [24 align=4]) = (int_64)562640715896
	*($1 + [32 align=4]) = (int_64)571230650500
	*($1 + [40 align=4]) = (int_64)635655159954
	*($1 + [48 align=4]) = (int_64)648540061845
	$2 = ($1 + [56])
	*(($0 + [232])) = $2
	*(($0 + [228])) = $2
	*($0 + [224]) = $1
	*(($1 = CALL _Znwj([56]))) = (int_64)55834574860
	*($1 + [8 align=4]) = (int_64)103079215118
	*($1 + [16 align=4]) = (int_64)158913789988
	*($1 + [24 align=4]) = (int_64)571230650406
	*($1 + [32 align=4]) = (int_64)579820585094
	*($1 + [40 align=4]) = (int_64)648540061842
	*($1 + [48 align=4]) = (int_64)657129996440
	$2 = ($1 + [56])
	*(($0 + [244])) = $2
	*(($0 + [240])) = $2
	*($0 + [236]) = $1
	*(($1 = CALL _Znwj([68]))) = (int_64)158913789988
	*($1 + [8 align=4]) = (int_64)257698037798
	*($1 + [16 align=4]) = (int_64)266287972413
	*($1 + [24 align=4]) = (int_64)360777252936
	*($1 + [32 align=4]) = (int_64)369367187541
	*($1 + [40 align=4]) = (int_64)575525617797
	*($1 + [48 align=4]) = (int_64)627065225351
	*($1 + [56 align=4]) = (int_64)644245094549
	*($1 + [64]) = [153]
	$2 = ($1 + [68])
	*(($0 + [256])) = $2
	*(($0 + [252])) = $2
	*($0 + [248]) = $1
	*(($1 = CALL _Znwj([56]))) = (int_64)365072220244
	*($1 + [8 align=4]) = (int_64)463856468054
	*($1 + [16 align=4]) = (int_64)472446402669
	*($1 + [24 align=4]) = (int_64)571230650488
	*($1 + [32 align=4]) = (int_64)579820585094
	*($1 + [40 align=4]) = (int_64)648540061842
	*($1 + [48 align=4]) = (int_64)657129996440
	$2 = ($1 + [56])
	*(($0 + [268])) = $2
	*(($0 + [264])) = $2
	*($0 + [260]) = $1
	*(($1 = CALL _Znwj([56]))) = (int_64)64424509454
	*($1 + [8 align=4]) = (int_64)103079215120
	*($1 + [16 align=4]) = (int_64)167503724582
	*($1 + [24 align=4]) = (int_64)579820585000
	*($1 + [32 align=4]) = (int_64)588410519688
	*($1 + [40 align=4]) = (int_64)639950127250
	*($1 + [48 align=4]) = (int_64)657129996438
	$2 = ($1 + [56])
	*(($0 + [280])) = $2
	*(($0 + [276])) = $2
	*($0 + [272]) = $1
	*(($1 = CALL _Znwj([68]))) = (int_64)167503724582
	*($1 + [8 align=4]) = (int_64)266287972392
	*($1 + [16 align=4]) = (int_64)274877907007
	*($1 + [24 align=4]) = (int_64)369367187528
	*($1 + [32 align=4]) = (int_64)377957122135
	*($1 + [40 align=4]) = (int_64)584115552391
	*($1 + [48 align=4]) = (int_64)627065225353
	*($1 + [56 align=4]) = (int_64)652835029143
	*($1 + [64]) = [153]
	$2 = ($1 + [68])
	*(($0 + [292])) = $2
	*(($0 + [288])) = $2
	*($0 + [284]) = $1
	*(($1 = CALL _Znwj([56]))) = (int_64)373662154838
	*($1 + [8 align=4]) = (int_64)472446402648
	*($1 + [16 align=4]) = (int_64)481036337263
	*($1 + [24 align=4]) = (int_64)579820585080
	*($1 + [32 align=4]) = (int_64)588410519688
	*($1 + [40 align=4]) = (int_64)639950127250
	*($1 + [48 align=4]) = (int_64)657129996438
	$2 = ($1 + [56])
	*(($0 + [304])) = $2
	*(($0 + [300])) = $2
	*($0 + [296]) = $1
	*(($1 = CALL _Znwj([56]))) = (int_64)73014444048
	*($1 + [8 align=4]) = (int_64)103079215122
	*($1 + [16 align=4]) = (int_64)176093659176
	*($1 + [24 align=4]) = (int_64)588410519594
	*($1 + [32 align=4]) = (int_64)597000454282
	*($1 + [40 align=4]) = (int_64)648540061843
	*($1 + [48 align=4]) = (int_64)657129996440
	$2 = ($1 + [56])
	*(($0 + [316])) = $2
	*(($0 + [312])) = $2
	*($0 + [308]) = $1
	*(($1 = CALL _Znwj([68]))) = (int_64)176093659176
	*($1 + [8 align=4]) = (int_64)274877906986
	*($1 + [16 align=4]) = (int_64)283467841601
	*($1 + [24 align=4]) = (int_64)377957122120
	*($1 + [32 align=4]) = (int_64)386547056729
	*($1 + [40 align=4]) = (int_64)592705486985
	*($1 + [48 align=4]) = (int_64)631360192651
	*($1 + [56 align=4]) = (int_64)644245094549
	*($1 + [64]) = [153]
	$2 = ($1 + [68])
	*(($0 + [328])) = $2
	*(($0 + [324])) = $2
	*($0 + [320]) = $1
	*(($1 = CALL _Znwj([56]))) = (int_64)382252089432
	*($1 + [8 align=4]) = (int_64)481036337242
	*($1 + [16 align=4]) = (int_64)489626271857
	*($1 + [24 align=4]) = (int_64)588410519672
	*($1 + [32 align=4]) = (int_64)597000454282
	*($1 + [40 align=4]) = (int_64)648540061843
	*($1 + [48 align=4]) = (int_64)657129996440
	$2 = ($1 + [56])
	*(($0 + [340])) = $2
	*(($0 + [336])) = $2
	*($0 + [332]) = $1
	*(($1 = CALL _Znwj([56]))) = (int_64)81604378642
	*($1 + [8 align=4]) = (int_64)103079215124
	*($1 + [16 align=4]) = (int_64)184683593770
	*($1 + [24 align=4]) = (int_64)597000454188
	*($1 + [32 align=4]) = (int_64)605590388876
	*($1 + [40 align=4]) = (int_64)639950127251
	*($1 + [48 align=4]) = (int_64)657129996439
	$2 = ($1 + [56])
	*(($0 + [352])) = $2
	*(($0 + [348])) = $2
	*($0 + [344]) = $1
	*(($1 = CALL _Znwj([68]))) = (int_64)184683593770
	*($1 + [8 align=4]) = (int_64)283467841580
	*($1 + [16 align=4]) = (int_64)292057776195
	*($1 + [24 align=4]) = (int_64)386547056712
	*($1 + [32 align=4]) = (int_64)395136991323
	*($1 + [40 align=4]) = (int_64)601295421579
	*($1 + [48 align=4]) = (int_64)631360192653
	*($1 + [56 align=4]) = (int_64)652835029142
	*($1 + [64]) = [153]
	$2 = ($1 + [68])
	*(($0 + [364])) = $2
	*(($0 + [360])) = $2
	*($0 + [356]) = $1
	*(($1 = CALL _Znwj([56]))) = (int_64)390842024026
	*($1 + [8 align=4]) = (int_64)489626271836
	*($1 + [16 align=4]) = (int_64)498216206451
	*($1 + [24 align=4]) = (int_64)597000454264
	*($1 + [32 align=4]) = (int_64)605590388876
	*($1 + [40 align=4]) = (int_64)639950127251
	*($1 + [48 align=4]) = (int_64)657129996438
	$2 = ($1 + [56])
	*(($0 + [376])) = $2
	*(($0 + [372])) = $2
	*($0 + [368]) = $1
	*(($1 = CALL _Znwj([56]))) = (int_64)90194313236
	*($1 + [8 align=4]) = (int_64)103079215126
	*($1 + [16 align=4]) = (int_64)193273528364
	*($1 + [24 align=4]) = (int_64)605590388782
	*($1 + [32 align=4]) = (int_64)614180323470
	*($1 + [40 align=4]) = (int_64)644245094547
	*($1 + [48 align=4]) = (int_64)657129996440
	$2 = ($1 + [56])
	*(($0 + [388])) = $2
	*(($0 + [384])) = $2
	*($0 + [380]) = $1
	*(($1 = CALL _Znwj([68]))) = (int_64)193273528364
	*($1 + [8 align=4]) = (int_64)292057776174
	*($1 + [16 align=4]) = (int_64)300647710789
	*($1 + [24 align=4]) = (int_64)395136991304
	*($1 + [32 align=4]) = (int_64)403726925917
	*($1 + [40 align=4]) = (int_64)609885356173
	*($1 + [48 align=4]) = (int_64)631360192655
	*($1 + [56 align=4]) = (int_64)648540061845
	*($1 + [64]) = [153]
	$2 = ($1 + [68])
	*(($0 + [400])) = $2
	*(($0 + [396])) = $2
	*($0 + [392]) = $1
	*(($1 = CALL _Znwj([56]))) = (int_64)399431958620
	*($1 + [8 align=4]) = (int_64)498216206430
	*($1 + [16 align=4]) = (int_64)506806141045
	*($1 + [24 align=4]) = (int_64)605590388856
	*($1 + [32 align=4]) = (int_64)614180323470
	*($1 + [40 align=4]) = (int_64)644245094547
	*($1 + [48 align=4]) = (int_64)657129996440
	$2 = ($1 + [56])
	*(($0 + [412])) = $2
	*(($0 + [408])) = $2
	*($0 + [404]) = $1
	*(($1 = CALL _Znwj([44]))) = (int_64)98784247830
	*($1 + [8 align=4]) = (int_64)197568495640
	*($1 + [16 align=4]) = (int_64)614180323375
	*($1 + [24 align=4]) = (int_64)631360192656
	*($1 + [32 align=4]) = (int_64)648540061845
	*($1 + [40]) = [153]
	$2 = ($1 + [44])
	*(($0 + [424])) = $2
	*(($0 + [420])) = $2
	*($0 + [416]) = $1
	*(($1 = CALL _Znwj([52]))) = (int_64)201863462958
	*($1 + [8 align=4]) = (int_64)304942678086
	*($1 + [16 align=4]) = (int_64)403726925896
	*($1 + [24 align=4]) = (int_64)614180323423
	*($1 + [32 align=4]) = (int_64)631360192656
	*($1 + [40 align=4]) = (int_64)652835029142
	*($1 + [48]) = [153]
	$2 = ($1 + [52])
	*(($0 + [436])) = $2
	*(($0 + [432])) = $2
	*($0 + [428]) = $1
	*(($1 = CALL _Znwj([44]))) = (int_64)408021893214
	*($1 + [8 align=4]) = (int_64)511101108342
	*($1 + [16 align=4]) = (int_64)614180323448
	*($1 + [24 align=4]) = (int_64)631360192656
	*($1 + [32 align=4]) = (int_64)648540061845
	*($1 + [40]) = [153]
	$2 = ($1 + [44])
	*(($0 + [448])) = $2
	*(($0 + [444])) = $2
	*($0 + [440]) = $1
	*(($1 = CALL _Znwj([12]))) = (int_64)206158430208
	*($1 + [8]) = [121]
	*([0] + [9020 align=4]) = (int_64)0
	$2 = ($1 + [12])
	*(($0 + [460])) = $2
	*(($0 + [456])) = $2
	*($0 + [452]) = $1
	*([0] + [9028]) = [0]
	$1 = CALL _Znwj([456])
	*([0] + [9020]) = $1
	*([0] + [9024]) = $1
	*([0] + [9028]) = ($1 + [456])
	$2 = [0]
	
.LOOP $label$2:
	*($1) = (int_64)0
	*($1 + [8]) = [0]
	$3 = (($0 + [8]) + $2)
	$4 = ($3 + [4])
	$5 = (*($4) - *($3))
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = int_32($5 >> [2])
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$5 = CALL _Znwj($5)
	*(($7 = ($1 + [4]))) = $5
	*(($1 + [8])) = ($5 + ($6 << [2]))
	*($1) = $5
	$3 = *($3)
	$1 = (*($4) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $3, $1)
	*($7) = (*($7) + $1)
	
.LABEL $label$3
	$1 = (*([0] + [9024]) + [12])
	*([0] + [9024]) = $1
	$2 = ($2 + [12])
	if ( ((int_32)$2 != (int_32)[456]) ){ goto $label$2 }
	$1 = [456]
	
.LOOP $label$4:
	$3 = (($0 + [8]) + $1)
	$2 = *(($3 + [-12]))
	if ( ($2 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$1 = ($1 + [-12])
	if ( $1 ){ goto $label$4 }
	CALL $99([6], [0], [8192])
	$global$0 = ($0 + [464])
	return (unreachable)
	
.LABEL $label$1
	CALL $96($1)
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [128])
	$global$0 = $2
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$4 = (*($0) + int_32($3 >> [1]))
	$0 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($4) + $0))
	
.LABEL $label$1
	*(($2 + [40])) = *(($1 + [40]))
	*(($2 + [32])) = *(($1 + [32]))
	*(($2 + [24])) = *(($1 + [24]))
	*(($2 + [16])) = *(($1 + [16]))
	*($2) = *($1)
	*($2 + [8]) = *(($1 + [8]))
	$3 = CALL $71(($2 + [48]), ($1 + [48]))
	$5 = CALL $71(($2 + [60]), ($1 + [60]))
	$6 = CALL $71(($2 + [72]), ($1 + [72]))
	$7 = CALL $71(($2 + [84]), ($1 + [84]))
	$8 = CALL $71(($2 + [96]), ($1 + [96]))
	*(($2 + [120])) = *(($1 + [120]))
	*($2 + [112]) = *($1 + [112])
	CALL void $4((int_32 $2), (int_32 $0))
	if ( (*($8) & [1]) ){ goto $label$10 }
	if ( (*($7) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($2 + [104])))
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($2 + [92])))
	$1 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$1 = [1]
	if ( (*($6) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( (*($5) & $1) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($2 + [80])))
	if ( ((*($5) & $1) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($2 + [68])))
	if ( ((*($3) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($3) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($2 + [128])
	return 
	
.LABEL $label$2
	CALL _ZdlPv(*(($2 + [56])))
	$global$0 = ($2 + [128])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $120($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9032])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $120($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $101 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [7] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $102($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $102($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $102($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $102($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18592]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $102($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $102($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $102($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_32 .FUNC $103 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [12]) = $2
	$2 = CALL $100([8], $0, [-1], $1, $2)
	$global$0 = ($3 + [16])
	return $2
}

int_32 .FUNC $102 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

int_32 .FUNC $105 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $100([8], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $104 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $78(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $105(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [18530], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $78(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $78(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_64 .FUNC $88 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $115([18523])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [18523], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $97())
	*(CALL $97()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $111($4, ($3 + [12]), $2)
	$0 = CALL $97()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $86($3)
	
.LABEL $label$1
	CALL $87($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $87 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $93($1, $0, [18546])
	CALL $95()
	(unreachable)
}

void .FUNC $86 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $93($1, $0, [18562])
	CALL $94()
	(unreachable)
}

int_32 .FUNC $85 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $115([8217])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8217], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $97())
	*(CALL $97()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $112($4, ($3 + [12]), $2)
	$5 = CALL $97()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $86($3)
	
.LABEL $label$1
	CALL $87($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = CALL $115($1)
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, $1, $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$3 = ($2 + [1])
	$5 = (*($2) & [1])
	$2 = *($2 + [8])
	$6 = *($0)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$9 }
	$1 = [10]
	$3 = ( $2 ? $3 : $5 )
	$2 = uint_32($6 >> [1])
	if ( (([10] - $2) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$3 = ( $2 ? $3 : $5 )
	$2 = *(($0 + [4]))
	$1 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($1 - $2) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $75($0, $1, (($2 + $4) - $1), $2, $2, [0], $4, $3)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ( *(($0 + [8])) ? ($0 + [1]) : $7 )
	CALL memcpy(($5 + $2), $3, $4)
	$2 = ($2 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $2
	*(($5 + $2)) = [0]
	(unreachable)
}

int_32 .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $114(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $82 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $113(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

int_32 .FUNC $81 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $75($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $115($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $75($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $72 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $73 (int_32 $0)
{
	if ( ((*($0) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($0 + [8]))
	
.LABEL $label$1
	return $0
}

void .FUNC $70 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $115($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $75($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $75($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $75($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18052])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $20($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [18047])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [112])
	$global$0 = $5
	$3 = ((int_64)$3 * (int_64)50)
	$6 = ((uint_64)$3 / (uint_64)(int_64)10000)
	if ( (uint_64)($3 <= (int_64)10000) ){ goto $label$1 }
	$8 = *($4)
	$7 = CALL $115([18159])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$2 }
	if ( (CALL $83($4, [0], [-1], [18159], $7) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $84(($5 + [48]), [18352], $1)
	$1 = CALL $80(($5 + [48]), [18356])
	$8 = ($1 + [8])
	*((($5 + [64]) + [8])) = *($8)
	*($5 + [64]) = *($1)
	*($1) = (int_64)0
	*($8) = [0]
	$1 = *($2)
	$8 = ($1 & [1])
	$2 = CALL $81(($5 + [64]), ( *($2 + [8]) ? ($2 + [1]) : $8 ), ( *($2 + [4]) ? uint_32($1 >> [1]) : $8 ))
	$1 = ($2 + [8])
	*((($5 + [80]) + [8])) = *($1)
	*($5 + [80]) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	$2 = CALL $80(($5 + [80]), [18366])
	$1 = ($2 + [8])
	*((($5 + [96]) + [8])) = *($1)
	*($5 + [96]) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( (*($5 + [80]) & [1]) ){ goto $label$10 }
	$2 = [1]
	if ( (*($5 + [64]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*($5 + [88]))
	$2 = [1]
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*($5 + [72]))
	if ( ((*($5 + [48]) & $2) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($5 + [48]) & $2) ){ goto $label$6 }
	
.LABEL $label$7
	$2 = [1]
	$1 = *($4)
	if ( ($1 & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($5 + [56]))
	$2 = [1]
	$1 = *($4)
	if ( (($1 & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$1 = *(($4 + [4]))
	$4 = *($4 + [8])
	goto $label$3 
	
.LABEL $label$4
	$1 = uint_32($1 >> $2)
	$4 = ($4 + $2)
	
.LABEL $label$3
	*($5 + [36]) = $1
	*($5 + [32]) = $4
	*($5 + [8]) = *($5 + [32])
	$2 = CALL $2(($5 + [40]), ($5 + [8]))
	$4 = CALL $71(($5 + [16]), ($5 + [96]))
	CALL $47($0, *($2), $6, $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$11
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($5 + [104]))
	
.LABEL $label$1
	$global$0 = ($5 + [112])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [176])
	$global$0 = $3
	if ( (int_64)(*($2 + [32]) == 0) ){ goto $label$1 }
	CALL $84(($3 + [144]), [18352], $1)
	$1 = CALL $80(($3 + [144]), [18405])
	$4 = ($1 + [8])
	*((($3 + [160]) + [8])) = *($4)
	*($3 + [160]) = *($1)
	*($1) = (int_64)0
	*($4) = [0]
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($3 + [152]))
	
.LABEL $label$2
	$1 = CALL $71(($3 + [128]), ($3 + [160]))
	CALL $47($0, *($2 + [16]), *(($2 + [32])), $1)
	if ( ((*($1) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$3
	if ( ((*($3 + [160]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($3 + [168]))
	
.LABEL $label$1
	*(($3 + [40])) = *(($2 + [40]))
	*(($3 + [32])) = *(($2 + [32]))
	*(($3 + [24])) = *(($2 + [24]))
	*(($3 + [16])) = *(($2 + [16]))
	*($3) = *($2)
	*($3 + [8]) = *(($2 + [8]))
	$4 = CALL $71(($3 + [48]), ($2 + [48]))
	$5 = CALL $71(($3 + [60]), ($2 + [60]))
	$6 = CALL $71(($3 + [72]), ($2 + [72]))
	$7 = CALL $71(($3 + [84]), ($2 + [84]))
	$1 = CALL $71(($3 + [96]), ($2 + [96]))
	*(($3 + [120])) = *(($2 + [120]))
	*($3 + [112]) = *($2 + [112])
	CALL $51($0, $3)
	if ( (*($1) & [1]) ){ goto $label$12 }
	if ( (*($7) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*(($3 + [104])))
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [92])))
	$2 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$2 = [1]
	if ( (*($6) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($5) & $2) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [80])))
	if ( ((*($5) & $2) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [68])))
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( (*($4) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	$global$0 = ($3 + [176])
	return 
	
.LABEL $label$4
	CALL _ZdlPv(*(($3 + [56])))
	$global$0 = ($3 + [176])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $79($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $32 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = ($global$0 - [48])
	$global$0 = $6
	$7 = CALL $71(($6 + [32]), $5)
	CALL $47($0, $3, $4, $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$1
	*(($6 + [24])) = [0]
	*($6 + [16]) = (int_64)0
	$7 = CALL $115([18160])
	if ( ($7 <= [-16]) ){ goto $label$2 }
	CALL $70(($6 + [16]))
	
.LABEL $label$2
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$5 }
	*($6 + [16]) = ($7 << [1])
	$8 = (($6 + [16]) | [1])
	if ( $7 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($6 + [16]) = ($9 | [1])
	*($6 + [24]) = $8
	*($6 + [20]) = $7
	
.LABEL $label$4
	CALL memcpy($8, [18160], $7)
	
.LABEL $label$3
	*(($8 + $7)) = [0]
	$7 = CALL $71($6, $5)
	CALL $48($0, $1, $2, $3, $4, $4, ($6 + [16]), $7)
	CALL $73($7)
	CALL $73(($6 + [16]))
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
}

void .FUNC $33 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$9 = ($global$0 - [736])
	$global$0 = $9
	*(($9 + [664])) = (int_64)0
	*(($9 + [672])) = (int_64)0
	*(($10 = ($9 + [688]))) = (int_64)0
	*(($9 + [696])) = (int_64)0
	*(($9 + [712])) = [0]
	*($9 + [616]) = $2
	*($9 + [608]) = $1
	*($9 + [656]) = (int_64)0
	*($9 + [680]) = (int_64)0
	*($9 + [704]) = (int_64)0
	*($9 + [624]) = $3
	*($9 + [632]) = $7
	*($9 + [648]) = $5
	$11 = ($9 + [656])
	CALL $74($11, $6)
	CALL $5(($9 + [64]), $7)
	$12 = ($9 + [680])
	if ( (*($9 + [680]) & [1]) ){ goto $label$2 }
	*($12) = [0]
	goto $label$1 
	
.LABEL $label$2
	*(*($10)) = [0]
	*(($9 + [684])) = [0]
	
.LABEL $label$1
	CALL $76($12, [0])
	*(($12 + [8])) = *((($9 + [64]) + [8]))
	*($12) = *($9 + [64])
	$13 = ($9 + [704])
	CALL $74($13, $8)
	*($9 + [728]) = CALL current_time()
	*($9 + [480]) = [18250]
	*($9 + [484]) = CALL $115([18250])
	*($9 + [56]) = *($9 + [480])
	CALL $1(($9 + [64]), *(CALL $2(($9 + [488]), ($9 + [56]))))
	CALL $90(($9 + [496]), *($9 + [64]))
	*($9 + [448]) = [18263]
	*($9 + [452]) = CALL $115([18263])
	*($9 + [48]) = *($9 + [448])
	CALL $1(($9 + [192]), *(CALL $2(($9 + [456]), ($9 + [48]))))
	CALL $90(($9 + [464]), *($9 + [192]))
	$8 = *($9 + [464])
	$10 = ($8 & [1])
	$8 = CALL $81(($9 + [496]), ( *($9 + [472]) ? (($9 + [464]) | [1]) : $10 ), ( *($9 + [468]) ? uint_32($8 >> [1]) : $10 ))
	$10 = ($8 + [8])
	*((($9 + [512]) + [8])) = *($10)
	*($9 + [512]) = *($8)
	*($8) = (int_64)0
	*($10) = [0]
	*($9 + [416]) = [18276]
	*($9 + [420]) = CALL $115([18276])
	*($9 + [40]) = *($9 + [416])
	CALL $1(($9 + [256]), *(CALL $2(($9 + [424]), ($9 + [40]))))
	CALL $90(($9 + [432]), *($9 + [256]))
	$8 = *($9 + [432])
	$10 = ($8 & [1])
	$8 = CALL $81(($9 + [512]), ( *($9 + [440]) ? (($9 + [432]) | [1]) : $10 ), ( *($9 + [436]) ? uint_32($8 >> [1]) : $10 ))
	$10 = ($8 + [8])
	*((($9 + [528]) + [8])) = *($10)
	*($9 + [528]) = *($8)
	*($8) = (int_64)0
	*($10) = [0]
	*($9 + [368]) = [18289]
	*($9 + [372]) = CALL $115([18289])
	*($9 + [32]) = *($9 + [368])
	CALL $1(($9 + [384]), *(CALL $2(($9 + [376]), ($9 + [32]))))
	CALL $90(($9 + [400]), *($9 + [384]))
	$8 = *($9 + [400])
	$10 = ($8 & [1])
	$8 = CALL $81(($9 + [528]), ( *($9 + [408]) ? (($9 + [400]) | [1]) : $10 ), ( *($9 + [404]) ? uint_32($8 >> [1]) : $10 ))
	$10 = ($8 + [8])
	*((($9 + [544]) + [8])) = *($10)
	*($9 + [544]) = *($8)
	*($8) = (int_64)0
	*($10) = [0]
	*($9 + [320]) = [18302]
	*($9 + [324]) = CALL $115([18302])
	*($9 + [24]) = *($9 + [320])
	CALL $1(($9 + [336]), *(CALL $2(($9 + [328]), ($9 + [24]))))
	CALL $90(($9 + [352]), *($9 + [336]))
	$8 = *($9 + [352])
	$10 = ($8 & [1])
	$8 = CALL $81(($9 + [544]), ( *($9 + [360]) ? (($9 + [352]) | [1]) : $10 ), ( *($9 + [356]) ? uint_32($8 >> [1]) : $10 ))
	$10 = ($8 + [8])
	*((($9 + [560]) + [8])) = *($10)
	*($9 + [560]) = *($8)
	*($8) = (int_64)0
	*($10) = [0]
	CALL $89(($9 + [304]), CALL $fimport$14())
	$8 = *($9 + [304])
	$10 = ($8 & [1])
	$8 = CALL $81(($9 + [560]), ( *($9 + [312]) ? (($9 + [304]) | [1]) : $10 ), ( *($9 + [308]) ? uint_32($8 >> [1]) : $10 ))
	$10 = ($8 + [8])
	*((($9 + [576]) + [8])) = *($10)
	*($9 + [576]) = *($8)
	*($8) = (int_64)0
	*($10) = [0]
	CALL $91(($9 + [288]), *($9 + [728]))
	$8 = *($9 + [288])
	$10 = ($8 & [1])
	$8 = CALL $81(($9 + [576]), ( *($9 + [296]) ? (($9 + [288]) | [1]) : $10 ), ( *($9 + [292]) ? uint_32($8 >> [1]) : $10 ))
	$10 = ($8 + [8])
	*((($9 + [592]) + [8])) = *($10)
	*($9 + [592]) = *($8)
	*($8) = (int_64)0
	*($10) = [0]
	if ( (*($9 + [288]) & [1]) ){ goto $label$25 }
	if ( (*($9 + [576]) & [1]) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL _ZdlPv(*((($9 + [288]) + [8])))
	if ( ((*($9 + [576]) & [1]) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*($9 + [584]))
	$8 = [1]
	if ( ((*($9 + [304]) & [1]) == 0) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$8 = [1]
	if ( (*($9 + [304]) & [1]) ){ goto $label$21 }
	
.LABEL $label$22
	if ( (*($9 + [560]) & $8) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL _ZdlPv(*(($9 + [312])))
	if ( ((*($9 + [560]) & $8) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*($9 + [568]))
	$8 = [1]
	if ( ((*($9 + [352]) & [1]) == 0) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$8 = [1]
	if ( (*($9 + [352]) & [1]) ){ goto $label$17 }
	
.LABEL $label$18
	if ( (*($9 + [544]) & $8) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL _ZdlPv(*(($9 + [360])))
	if ( ((*($9 + [544]) & $8) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*($9 + [552]))
	$8 = [1]
	if ( ((*($9 + [400]) & [1]) == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$8 = [1]
	if ( (*($9 + [400]) & [1]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( (*($9 + [528]) & $8) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*(($9 + [408])))
	if ( ((*($9 + [528]) & $8) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*($9 + [536]))
	$8 = [1]
	if ( ((*($9 + [432]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$8 = [1]
	if ( (*($9 + [432]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($9 + [512]) & $8) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($9 + [440])))
	if ( ((*($9 + [512]) & $8) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($9 + [520]))
	$8 = [1]
	if ( ((*($9 + [464]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = [1]
	if ( (*($9 + [464]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( ((*($9 + [496]) & $8) == 0) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	CALL _ZdlPv(*(($9 + [472])))
	if ( ((*($9 + [496]) & $8) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($9 + [504]))
	
.LABEL $label$3
	$8 = *($9 + [592])
	$10 = ($8 & [1])
	CALL sha256(( *($9 + [600]) ? (($9 + [592]) | [1]) : $10 ), ( *($9 + [596]) ? uint_32($8 >> [1]) : $10 ), ($9 + [256]))
	$8 = *($9 + [256])
	$8 = uint_32((($8 << [24]) | (($8 << [8]) & [16711680])) >> [16])
	*($9 + [720]) = (CASTING uint_64)(uint_32 $8)
	CALL $89(($9 + [192]), $8)
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$29 }
	$10 = [0]
	$14 = *([0] + [9016])
	
.LOOP $label$31:
	*((($9 + [64]) + ($8 = $10))) = *(($14 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$3 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$8 == (int_32)[12]) )))))
	$10 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[11]) ){ goto $label$30 }
	$3 = ((int_64)$3 << (int_64)5)
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$31 }
	
.LABEL $label$30
	*(($9 + [392])) = [0]
	*($9 + [384]) = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$28 }
	*($9 + [384]) = ($10 << [1])
	$14 = (($9 + [384]) | [1])
	goto $label$27 
	
.LABEL $label$29
	*((($9 + [384]) + [8])) = [0]
	*($9 + [384]) = (int_64)0
	*($9 + [384]) = [0]
	$8 = (($9 + [384]) | [1])
	$10 = $8
	goto $label$26 
	
.LABEL $label$28
	$15 = (($10 + [16]) & [-16])
	$14 = CALL _Znwj($15)
	*($9 + [384]) = ($15 | [1])
	*($9 + [392]) = $14
	*($9 + [388]) = $10
	
.LABEL $label$27
	$15 = ($8 + [1])
	$8 = [0]
	
.LOOP $label$32:
	*(($14 + $8)) = *((($9 + [64]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$15 != (int_32)$8) ){ goto $label$32 }
	$10 = ($14 + $10)
	$8 = (($9 + [384]) | [1])
	
.LABEL $label$26
	*($10) = [0]
	$10 = *($9 + [384])
	$14 = ($10 & [1])
	$8 = CALL $81(($9 + [192]), ( *($9 + [392]) ? $8 : $14 ), ( *($9 + [388]) ? uint_32($10 >> [1]) : $14 ))
	$10 = ($8 + [8])
	*((($9 + [64]) + [8])) = *($10)
	*($9 + [64]) = *($8)
	*($8) = (int_64)0
	*($10) = [0]
	$8 = *($6)
	$10 = ($8 & [1])
	$8 = CALL $81(($9 + [64]), ( *($6 + [8]) ? ($6 + [1]) : $10 ), ( *($6 + [4]) ? uint_32($8 >> [1]) : $10 ))
	$10 = ($8 + [8])
	*((($9 + [336]) + [8])) = *($10)
	*($9 + [336]) = *($8)
	*($8) = (int_64)0
	*($10) = [0]
	if ( (*($9 + [64]) & [1]) ){ goto $label$37 }
	if ( (*($9 + [384]) & [1]) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	CALL _ZdlPv(*($9 + [72]))
	if ( ((*($9 + [384]) & [1]) == 0) ){ goto $label$35 }
	
.LABEL $label$36
	CALL _ZdlPv(*(($9 + [392])))
	$8 = [1]
	if ( (*($9 + [192]) & [1]) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$8 = [1]
	if ( ((*($9 + [192]) & [1]) == 0) ){ goto $label$33 }
	
.LABEL $label$34
	CALL _ZdlPv(*($9 + [200]))
	
.LABEL $label$33
	$10 = *($9 + [336])
	$14 = ($10 & $8)
	CALL sha256(( *($9 + [344]) ? (($9 + [336]) | $8) : $14 ), ( *($9 + [340]) ? uint_32($10 >> $8) : $14 ), ($9 + [256]))
	$10 = *($9 + [256])
	*($9 + [652]) = ((uint_32)((($10 << [24]) | (($10 << [8]) & [16711680])) | ((uint_32($10 >> [8]) & [65280]) | uint_32($10 >> [24]))) % (uint_32)[38])
	$16 = ($9 + [668])
	CALL $77($16, [18159])
	if ( ((int_32)$5 < (int_32)$8) ){ goto $label$39 }
	$3 = (int_64)0
	$17 = ($9 + [652])
	$6 = [0]
	
.LOOP $label$40:
	$8 = *($8)
	$8 = (*([0] + [9020]) + ((int_32)*($17) * (int_32)[12]))
	$10 = (*($8 + [4]) - $8)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$42 }
	$15 = int_32($10 >> [2])
	$18 = ($4 + ($6 << [3]))
	$14 = *($18)
	$19 = *((($14 << [2]) + [8400]))
	$10 = [0]
	
.LOOP $label$43:
	if ( ((int_32)*($8) == (int_32)$14) ){ goto $label$41 }
	$8 = ($8 + [4])
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)$15) ){ goto $label$43 }
	
.LABEL $label$42
	CALL $80($16, [18317])
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$41
	CALL $80($16, [18315])
	$3 = ((int_64)$3 + (int_64)(CASTING int_64)(int_32 ((int_32)*($18 + [4]) * (int_32)$19)))
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$39
	$3 = (int_64)0
	
.LABEL $label$38
	$10 = ($9 + [720])
	*($9 + [640]) = $3
	CALL $5(($9 + [64]), $3)
	$8 = ($9 + [692])
	if ( (*($9 + [692]) & [1]) ){ goto $label$45 }
	*($8) = [0]
	goto $label$44 
	
.LABEL $label$45
	*(*(($9 + [700]))) = [0]
	*(($9 + [696])) = [0]
	
.LABEL $label$44
	CALL $76($8, [0])
	*(($8 + [8])) = *((($9 + [64]) + [8]))
	*($8) = *($9 + [64])
	$3 = CALL current_time()
	*(($9 + [220])) = (int_64)0
	*(($9 + [236])) = (int_64)0
	*(($9 + [244])) = (int_64)0
	*($9 + [204]) = [0]
	*($9 + [208]) = [0]
	*($9 + [212 align=4]) = (int_64)0
	*($9 + [228 align=4]) = (int_64)0
	*($9 + [192]) = ((CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000)) + [60])
	$3 = *($0)
	*($9 + [384]) = [18040]
	*($9 + [388]) = CALL $115([18040])
	*($9 + [16]) = *($9 + [384])
	*($9 + [392]) = *(CALL $2(($9 + [64]), ($9 + [16])))
	*($9 + [384]) = $3
	*($9 + [560]) = *($0)
	*($9 + [576]) = [17763]
	*($9 + [580]) = CALL $115([17763])
	*($9 + [8]) = *($9 + [576])
	*($9 + [576]) = *(CALL $2(($9 + [64]), ($9 + [8])))
	*((($9 + [64]) + [40])) = *((($9 + [608]) + [40]))
	*((($9 + [64]) + [32])) = *((($9 + [608]) + [32]))
	*((($9 + [64]) + [24])) = *((($9 + [608]) + [24]))
	*((($9 + [64]) + [16])) = *((($9 + [608]) + [16]))
	*($9 + [72]) = *($9 + [616])
	*($9 + [64]) = *($9 + [608])
	$14 = CALL $71(($9 + [112]), $11)
	$15 = CALL $71((($9 + [64]) + [60]), $16)
	$6 = CALL $71(($9 + [136]), $12)
	$5 = CALL $71(($9 + [148]), $8)
	$8 = CALL $71(($9 + [160]), $13)
	*(($9 + [184])) = *(($10 + [8]))
	*($9 + [176]) = *($10)
	CALL $49(($9 + [228]), ($9 + [384]), ($9 + [560]), ($9 + [576]), ($9 + [64]))
	if ( (*($8) & [1]) ){ goto $label$54 }
	if ( (*($5) & [1]) ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	CALL _ZdlPv(*(($9 + [168])))
	if ( ((*($5) & [1]) == 0) ){ goto $label$52 }
	
.LABEL $label$53
	CALL _ZdlPv(*(($9 + [156])))
	$8 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	$8 = [1]
	if ( (*($6) & [1]) ){ goto $label$50 }
	
.LABEL $label$51
	if ( (*($15) & $8) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	CALL _ZdlPv(*(($9 + [144])))
	if ( ((*($15) & $8) == 0) ){ goto $label$48 }
	
.LABEL $label$49
	CALL _ZdlPv(*(($9 + [132])))
	if ( (*($14) & [1]) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	if ( ((*($14) & [1]) == 0) ){ goto $label$46 }
	
.LABEL $label$47
	CALL _ZdlPv(*(($9 + [120])))
	
.LABEL $label$46
	*(($9 + [212])) = [0]
	$3 = ((int_64)$1 + (int_64)1)
	*($9 + [64]) = $3
	*($9 + [72]) = ((int_64)$2 + (int_64)(CASTING uint_64)(uint_32 (uint_64)($3 <= $1)))
	$3 = *($0)
	CALL $29(($9 + [384]), ($9 + [192]))
	$8 = *($9 + [384])
	CALL send_deferred(($9 + [64]), $3, $8, (*($9 + [388]) - $8), [0])
	$8 = *($9 + [384])
	if ( ($8 == 0) ){ goto $label$55 }
	*($9 + [388]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$55
	CALL $30(($9 + [192]))
	if ( ((*($9 + [336]) & [1]) == 0) ){ goto $label$56 }
	CALL _ZdlPv(*(($9 + [344])))
	
.LABEL $label$56
	if ( ((*($9 + [592]) & [1]) == 0) ){ goto $label$57 }
	CALL _ZdlPv(*(($9 + [600])))
	
.LABEL $label$57
	if ( ((*(($9 + [704])) & [1]) == 0) ){ goto $label$58 }
	CALL _ZdlPv(*(($9 + [712])))
	
.LABEL $label$58
	if ( ((*(($9 + [692])) & [1]) == 0) ){ goto $label$59 }
	CALL _ZdlPv(*(($9 + [700])))
	
.LABEL $label$59
	if ( ((*(($9 + [680])) & [1]) == 0) ){ goto $label$60 }
	CALL _ZdlPv(*(($9 + [688])))
	
.LABEL $label$60
	if ( ((*(($9 + [668])) & [1]) == 0) ){ goto $label$61 }
	CALL _ZdlPv(*(($9 + [676])))
	
.LABEL $label$61
	if ( ((*(($9 + [656])) & [1]) == 0) ){ goto $label$62 }
	CALL _ZdlPv(*(($9 + [664])))
	
.LABEL $label$62
	$global$0 = ($9 + [736])
}

int_32 .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *(($1 + [8]))
	$4 = *($1)
	$5 = *($1 + [24])
	$6 = *($1 + [16])
	$1 = CALL $71($2, ($1 + [32]))
	$0 = *($0 + [4])
	$7 = *($0 + [4])
	$8 = (*($0) + int_32($7 >> [1]))
	$0 = *($0)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($8) + $0))
	
.LABEL $label$1
	$7 = CALL $71(($2 + [16]), $1)
	CALL void $8((int_32 $4), (int_64 $3), (int_64 $6), (int_64 $5), (int_64 $7), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}