(data (i32.const 8193) "GCHIP\00")
(data (i32.const 8199) "init\00")
(data (i32.const 8204) "admin.set\00")
(data (i32.const 8214) "minter.set\00")
(data (i32.const 8225) "mint\00")
(data (i32.const 8230) "transfer\00")
(data (i32.const 8239) "period.set\00")
(data (i32.const 8250) "distribute\00")
(data (i32.const 8261) "round.next\00")
(data (i32.const 8272) "notify\00")
(data (i32.const 8279) "currency.add\00")
(data (i32.const 8292) "deposit\00")
(data (i32.const 8300) "withdraw\00")
(data (i32.const 8309) "withdraw.set\00")
(data (i32.const 8322) "cancel.w\00")
(data (i32.const 8331) "rate.set\00")
(data (i32.const 8340) "eosio\00")
(data (i32.const 8346) "onerror\00")
(data (i32.const 8354) "eosio.token\00")
(data (i32.const 8366) "goldenchipio\00")
(data (i32.const 8379) "bitpietokens\00")
(data (i32.const 8392) "invalid symbol name\00")
(data (i32.const 8412) "invalid supply\00")
(data (i32.const 8427) "max-supply must be positive\00")
(data (i32.const 8455) "token with symbol already exists\00")
(data (i32.const 8488) "memo has more than 256 bytes\00")
(data (i32.const 8517) "token with symbol does not exist, create token before issue\00")
(data (i32.const 8577) "invalid quantity\00")
(data (i32.const 8594) "must issue positive quantity\00")
(data (i32.const 8623) "symbol precision mismatch\00")
(data (i32.const 8649) "quantity exceeds available supply\00")
(data (i32.const 8683) "cannot transfer to self\00")
(data (i32.const 8707) "to account does not exist\00")
(data (i32.const 8733) "unable to find key\00")
(data (i32.const 8752) "must transfer positive quantity\00")
(data (i32.const 8784) "no balance object found\00")
(data (i32.const 8808) "overdrawn balance\00")
(data (i32.const 8826) "Withdraw\00")
(data (i32.const 8835) "No currency in list\00")
(data (i32.const 8855) "token with symbol not exists\00")
(data (i32.const 8884) "You cannot call this action.\00")
(data (i32.const 8913) "You cannot change admin.\00")
(data (i32.const 8938) "New admin should differs from current.\00")
(data (i32.const 8977) "Unregistered \'admin\' account.\00")
(data (i32.const 9007) "Cannot start new distribution until current distribution finished.\00")
(data (i32.const 9074) "Unregistered \'minter\' account.\00")
(data (i32.const 9105) "Minter already exists.\00")
(data (i32.const 9128) "Cannot transfer tokens to this account.\00")
(data (i32.const 9168) "Distribution is in progress. Deposits are temporaly disabled\00")
(data (i32.const 9229) "Deposit\00")
(data (i32.const 9237) "No deposit for this account\00")
(data (i32.const 9265) "Not enough balance for this amount\00")
(data (i32.const 9300) "Cannot find this user\00")
(data (i32.const 9322) "No withdraw with this id\00")
(data (i32.const 9347) "You cannot perform this action\00")
(data (i32.const 9378) "Only minter can call this function.\00")
(data (i32.const 9414) "invalid account\00")
(data (i32.const 9430) "invalid symbol\00")
(data (i32.const 9445) "quantity must be positive\00")
(data (i32.const 9471) "Cannot mint tokens to this account.\00")
(data (i32.const 9507) "Minted \00")
(data (i32.const 9515) " by \00")
(data (i32.const 9520) " to account \00")
(data (i32.const 9533) "Transfer \00")
(data (i32.const 9543) "You cannot set distribution date.\00")
(data (i32.const 9577) "wrong timestamp of next distribution.\00")
(data (i32.const 9615) "You cannot call distribute.\00")
(data (i32.const 9643) "Cannot start new distribution.\00")
(data (i32.const 9674) "Dividents\00")
(data (i32.const 9684) "Quantity is not valid\00")
(data (i32.const 9706) "Action(s) failed: \00")
(data (i32.const 9725) "|\00")
(data (i32.const 9727) "Currency is not valid\00")
(data (i32.const 9749) "Currency is already added\00")
(data (i32.const 9776) "4&\00\00")
(data (i32.const 9780) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9813) "string is too long to be a valid name\00")
(data (i32.const 9851) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9918) "character is not in allowed character set for names\00")
(data (i32.const 9970) "string is too long to be a valid symbol_code\00")
(data (i32.const 10015) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 10068) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 10117) "write\00")
(data (i32.const 10123) "attempt to add asset with different symbol\00")
(data (i32.const 10166) "addition underflow\00")
(data (i32.const 10185) "addition overflow\00")
(data (i32.const 10203) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 10262) "attempt to subtract asset with different symbol\00")
(data (i32.const 10310) "subtraction underflow\00")
(data (i32.const 10332) "subtraction overflow\00")
(data (i32.const 10353) "-%lld.%s %s\00")
(data (i32.const 10365) "%lld.%s %s\00")
(data (i32.const 10376) "get\00")
(data (i32.const 10380) "read\00")
(data (i32.const 10385) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 10436) "error reading iterator\00")
(data (i32.const 10459) "cannot create objects in table of another contract\00")
(data (i32.const 10510) "object passed to modify is not in multi_index\00")
(data (i32.const 10556) "cannot modify objects in table of another contract\00")
(data (i32.const 10607) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10666) "cannot pass end iterator to modify\00")
(data (i32.const 10701) "cannot pass end iterator to erase\00")
(data (i32.const 10735) "cannot increment end iterator\00")
(data (i32.const 10765) "object passed to erase is not in multi_index\00")
(data (i32.const 10810) "cannot erase objects in table of another contract\00")
(data (i32.const 10860) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10913) "singleton does not exist\00")
(data (i32.const 10938) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10990) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 11044) "cannot decrement iterator at beginning of table\00")
(data (i32.const 19520) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 19600) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "read_action_data" (func $fimport$3 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$4 (param i64)))
(import "env" "is_account" (func $fimport$5 (param i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$7 (result i64)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "current_time" (func $fimport$10 (result i64)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "send_deferred" (func $fimport$13 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$14 (param i32 i32)))
(import "env" "require_recipient" (func $fimport$15 (param i64)))
(import "env" "has_auth" (func $fimport$16 (param i64) (result i32)))
(import "env" "abort" (func $fimport$17))
(import "env" "db_get_i64" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$19 (param i32)))
(import "env" "db_previous_i64" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$21 (param i64 i64 i64) (result i32)))
(import "env" "memset" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$24 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$35 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$36 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$39 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$41 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$42 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$43 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $3))
(export "_Znwj" (func $117))
(export "_ZdlPv" (func $119))
(export "_Znaj" (func $118))
(export "_ZdaPv" (func $120))
(export "_ZnwjSt11align_val_t" (func $121))
(export "_ZnajSt11align_val_t" (func $122))
(export "_ZdlPvSt11align_val_t" (func $123))
(export "_ZdaPvSt11align_val_t" (func $124))
(table $0 20 20 anyfunc)
(elem (i32.const 1) $4 $6 $8 $9 $11 $13 $15 $16 $18 $20 $22 $24 $25 $27 $29 $31 $33 $137 $139)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19686))
(global $global$2 i32 (i32.const 19686))


int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10117])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [10117])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [10117])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $95(CALL $94($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10117])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [10117])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $95($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10117])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10117])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10117])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10117])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [10117])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [10117])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [10117])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [10117])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [10117])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [10117])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [10117])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	*($1) = *(*(*($0 + [4])))
	$4 = *($0)
	$5 = CALL $141([8193])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9970])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [8192]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [10015])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert([1], [10068])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $9
	$7 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $9
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [8392])
	*(($10 = ($1 + [16]))) = $8
	*($1 + [8]) = (int_64)0
	$5 = $2
	$7 = ($5 + [-32])
	$global$0 = $7
	CALL eosio_assert([1], [10117])
	CALL memcpy($7, $1, [8])
	CALL eosio_assert([1], [10117])
	CALL memcpy(($5 + [-24]), ($1 + [8]), [8])
	*($3 + [8]) = *($10)
	CALL eosio_assert([1], [10117])
	CALL memcpy(($5 + [-16]), ($3 + [8]), [8])
	$6 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)-5915276602093682176, *(*($0 + [8])), $6, $7, [24])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$12 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$global$0 = ($3 + [16])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10436])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $144($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10380])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [10380])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $114(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $147($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10380])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10380])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10380])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10380])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $57(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $138 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $147($0)
	
.LABEL $label$1
}

int_32 .FUNC $115 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [44]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [11044])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-2039333636196089344)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10990])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10990])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $63(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $130 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $127($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $131 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $127($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $132 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $131($0, $1, $2, CALL $141($2))
}

void .FUNC $133 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $134 ()
{
	return [11096]
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $142(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [11092])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $142(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $136 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [18] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $138($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $138($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $138($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $138($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19520]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $138($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $138($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $138($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $137 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10117])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10117])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10117])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10117])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10117])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10117])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10436])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $144($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [48]) = $0
	CALL $108(($3 + [32]), $5)
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $59(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $147($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $125 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [8])
	$5 = (CASTING uint_32)(uint_64 $4)
	$6 = ((int_64)$4 & (int_64)255)
	$7 = (int_64)($6 == 0)
	if ( $7 ){ goto $label$2 }
	$8 = ((int_64)$6 + (int_64)1)
	$9 = (int_64)1
	
.LOOP $label$3:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)1
	
.LABEL $label$1
	$5 = ($5 & [255])
	$10 = ($2 - (($5 + [16]) & [496]))
	$11 = $10
	$global$0 = $11
	*(($12 = ($10 + $5))) = [0]
	$13 = *($1)
	$2 = ((int_64)$13 < (int_64)0)
	if ( $7 ){ goto $label$4 }
	$8 = ((int_64)( (int_64)-1 ? (int_64)1 : $2 ) * (int_64)((int_64)$13 % (int_64)$9))
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ($12 + [-1])
	
.LOOP $label$5:
	$14 = ((int_64)$8 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$14 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$8 = $14
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	$12 = ( [10353] ? [10365] : $2 )
	$9 = ((int_64)$13 / (int_64)$9)
	$15 = ($5 + [32])
	$11 = ($11 - (($5 + [47]) & [496]))
	$global$0 = $11
	$8 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( (int_64)($8) == 0) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	*((($3 + [41]) + ($1 = $5))) = $8
	$5 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [24]) = ($5 << [1])
	$2 = (($3 + [24]) | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [24]) = [0]
	$1 = (($3 + [24]) | [1])
	$5 = $1
	goto $label$6 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($7)
	*($3 + [24]) = ($7 | [1])
	*($3 + [32]) = $2
	*($3 + [28]) = $5
	
.LABEL $label$7
	$7 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$12:
	*(($2 + $1)) = *((($3 + [41]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$12 }
	$5 = ($2 + $5)
	$1 = (($3 + [24]) | [1])
	
.LABEL $label$6
	*($5) = [0]
	*($3 + [8]) = $10
	*($3) = $9
	*($3 + [12]) = ( *($3 + [32]) ? $1 : (*($3 + [24]) & [1]) )
	CALL $140($11, $15, $12, $3)
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$13
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $141($11)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$17 }
	*($0) = ($1 << [1])
	$5 = ($0 + [1])
	if ( $1 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$2 = (($1 + [16]) & [-16])
	$5 = CALL _Znwj($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $1
	
.LABEL $label$16
	CALL memcpy($5, $11, $1)
	
.LABEL $label$15
	*(($5 + $1)) = [0]
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$14
	CALL $125($0)
}

int_32 .FUNC $42 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = CALL $141([8193])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9970])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($4 + [8192]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [10015])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$5 = ((int_64)$5 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)0
	
.LABEL $label$1
	$6 = [0]
	*((($3 + [40]) + [32])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$7 = *($0)
	*($3 + [40]) = $7
	*($3 + [48]) = $1
	$4 = [0]
	$8 = CALL db_find_i64($7, $1, (int_64)3607749779137757184, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $92(($3 + [40]), $8)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)($3 + [40])), [10385])
	
.LABEL $label$7
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$1 = *($0)
	*($3) = $1
	*($3 + [8]) = $5
	$8 = CALL db_find_i64($1, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$8 }
	$6 = CALL $88($3, $8)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$3), [10385])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8855])
	if ( ($4 == 0) ){ goto $label$11 }
	$5 = *($4)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($4 + [8])), [10123])
	$5 = ((int_64)$5 + (int_64)*($2))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [10166])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [10185])
	$2 = ((float_64)((float_64)*(($0 + [80])) * (float_64)(CASTING float_64)(int_64 *($6 + [16]))) > (float_64)(CASTING float_64)(int_64 $5))
	$0 = *($3 + [24])
	if ( $0 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$2 = [1]
	$0 = *($3 + [24])
	if ( ($0 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$8 = ($3 + [28])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$15 }
	CALL _ZdlPv($6)
	
.LABEL $label$15
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($3 + [24]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $0
	
.LABEL $label$12
	*($8) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$9
	$0 = *($3 + [64])
	if ( ($0 == 0) ){ goto $label$16 }
	$8 = ($3 + [68])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$18 }
	
.LOOP $label$19:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$20 }
	CALL _ZdlPv($6)
	
.LABEL $label$20
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$19 }
	$4 = *(($3 + [64]))
	goto $label$17 
	
.LABEL $label$18
	$4 = $0
	
.LABEL $label$17
	*($8) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$global$0 = ($3 + [80])
	return $2
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	float_64 $11
	float_64 $12
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = ($1 + [296])
	$5 = *($2 + [8])
	$7 = *(($1 + [324]))
	$6 = *(($1 + [320]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$5) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$4), [10385])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($4), *(($1 + [304])), (int_64)-3665743316688306176, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $48($4, $8)
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$4), [10385])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8835])
	$10 = *($1)
	$11 = *($9 + [40])
	$8 = CALL $141([8193])
	if ( ($8 <= [8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9970])
	goto $label$7 
	
.LABEL $label$8
	if ( ($8 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = (int_64)0
	
.LOOP $label$9:
	$7 = *(($8 + [8192]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$10 }
	CALL eosio_assert([0], [10015])
	
.LABEL $label$10
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$9 }
	$5 = ((int_64)$5 & (int_64)72057594037927935)
	goto $label$5 
	
.LABEL $label$6
	$5 = (int_64)0
	
.LABEL $label$5
	*(($3 + [40])) = [0]
	*($3 + [8]) = $10
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [16]) = $5
	$5 = *(CALL $81(($3 + [8]), $5, [8733]))
	$9 = *($3 + [32])
	if ( ($9 == 0) ){ goto $label$11 }
	$6 = ($3 + [36])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$13 }
	
.LOOP $label$14:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	CALL _ZdlPv($7)
	
.LABEL $label$15
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$14 }
	$8 = *(($3 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$8 = $9
	
.LABEL $label$12
	*($6) = $9
	CALL _ZdlPv($8)
	
.LABEL $label$11
	$12 = ((float_64)(CASTING float_64)(int_64 ((int_64)$5 + (int_64)-36292514043200)) / (float_64)(float_64)143931485956800)
	$11 = ( $11 ? ((float_64)$11 * (float_64)(float_64)0.5) : ((int_32)((float_64)$12 >= (float_64)(float_64)0.05) ^ (int_32)[1]) )
	$11 = ( $11 ? ((float_64)$11 * (float_64)(float_64)0.5) : ((int_32)((float_64)$12 >= (float_64)(float_64)0.1) ^ (int_32)[1]) )
	$11 = ( $11 ? ((float_64)$11 * (float_64)(float_64)0.5) : ((int_32)((float_64)$12 >= (float_64)(float_64)0.15) ^ (int_32)[1]) )
	$11 = ( $11 ? ((float_64)$11 * (float_64)(float_64)0.5) : ((int_32)((float_64)$12 >= (float_64)(float_64)0.2) ^ (int_32)[1]) )
	$11 = ( $11 ? ((float_64)$11 * (float_64)(float_64)0.5) : ((int_32)((float_64)$12 >= (float_64)(float_64)0.25) ^ (int_32)[1]) )
	$11 = ( $11 ? ((float_64)$11 * (float_64)(float_64)0.5) : ((int_32)((float_64)$12 >= (float_64)(float_64)0.3) ^ (int_32)[1]) )
	$11 = ( $11 ? ((float_64)$11 * (float_64)(float_64)0.5) : ((int_32)((float_64)$12 >= (float_64)(float_64)0.35) ^ (int_32)[1]) )
	$11 = ( $11 ? ((float_64)$11 * (float_64)(float_64)0.5) : ((int_32)((float_64)$12 >= (float_64)(float_64)0.4) ^ (int_32)[1]) )
	$11 = ( $11 ? ((float_64)$11 * (float_64)(float_64)0.5) : ((int_32)((float_64)$12 >= (float_64)(float_64)0.45) ^ (int_32)[1]) )
	$12 = ((float_64)( $11 ? ((float_64)$11 * (float_64)(float_64)0.5) : ((int_32)((float_64)$12 >= (float_64)(float_64)0.5) ^ (int_32)[1]) ) * (float_64)(CASTING float_64)(int_64 *($2)))
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$17 }
	$10 = (int_64)-9223372036854775808
	goto $label$16 
	
.LABEL $label$17
	$10 = (Rounds 0)($12)
	
.LABEL $label$16
	$8 = CALL $141([8193])
	if ( ($8 <= [8]) ){ goto $label$21 }
	CALL eosio_assert([0], [9970])
	goto $label$20 
	
.LABEL $label$21
	if ( ($8 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$5 = (int_64)0
	
.LOOP $label$22:
	$7 = *(($8 + [8192]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$23 }
	CALL eosio_assert([0], [10015])
	
.LABEL $label$23
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$22 }
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$18 
	
.LABEL $label$19
	$5 = (int_64)4
	
.LABEL $label$18
	*($0 + [8]) = $5
	*($0) = $10
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10068])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$10 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$27 }
	$5 = $10
	$7 = [1]
	$9 = $8
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = $10
	
.LOOP $label$28:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$25 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$9 = ($8 + [1])
	$8 = $9
	if ( $7 ){ goto $label$28 }
	$7 = [1]
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$7 = [0]
	
.LABEL $label$24
	CALL eosio_assert($7, [8392])
	$global$0 = ($3 + [48])
}

void .FUNC $40 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [128])
	$global$0 = $2
	$3 = CALL $141([8193])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9970])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [8192]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [10015])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$4 = ((int_64)$4 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)0
	
.LABEL $label$1
	*((($2 + [8]) + [32])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$6 = *($0)
	*($2 + [8]) = $6
	*($2 + [16]) = $4
	$3 = [0]
	$5 = CALL db_find_i64($6, $4, (int_64)-4157508551318700032, $4)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$3 = CALL $88(($2 + [8]), $5)
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)($2 + [8])), [10385])
	
.LABEL $label$7
	$5 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($5, [8855])
	$4 = *($0)
	CALL eosio_assert($5, [10666])
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)($2 + [8])), [10510])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$7()), [10556])
	*($3 + [32]) = $1
	$1 = *($3 + [8])
	CALL eosio_assert([1], [10607])
	*($2 + [96]) = (($2 + [48]) + [40])
	*($2 + [92]) = ($2 + [48])
	*($2 + [88]) = ($2 + [48])
	*($2 + [104]) = ($2 + [88])
	*($2 + [116]) = ($3 + [16])
	*($2 + [112]) = $3
	*($2 + [120]) = ($3 + [32])
	CALL $89(($2 + [112]), ($2 + [104]))
	CALL db_update_i64(*($3 + [44]), $4, ($2 + [48]), [40])
	$3 = (($2 + [8]) + [16])
	$4 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( (uint_64)($4) <= *($3)) ){ goto $label$8 }
	*($3) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$8
	$0 = *($2 + [32])
	if ( ($0 == 0) ){ goto $label$9 }
	$7 = ($2 + [36])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$11 }
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$12 }
	$3 = *(($2 + [32]))
	goto $label$10 
	
.LABEL $label$11
	$3 = $0
	
.LABEL $label$10
	*($7) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$9
	$global$0 = ($2 + [128])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $126(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $126(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10380])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10380])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10380])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [10380])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $57(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $45 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$5 = ($global$0 - [112])
	$global$0 = $5
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [8683])
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$5($2), [8707])
	$6 = *($3 + [8])
	$7 = [0]
	*(($5 + [104])) = [0]
	$8 = (uint_64)$6 >> (uint_64)(int_64)8
	*($5 + [80]) = $8)
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	*($5 + [72]) = *($0)
	$9 = CALL $81(($5 + [72]), $8, [8733])
	CALL require_recipient($1)
	CALL require_recipient($2)
	$10 = *($3)
	if ( ((uint_64)((int_64)$10 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$11 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$12 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $12
	$7 = [1]
	$13 = $11
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $12
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$11 < (int_32)[6])
	$13 = ($11 + [1])
	$11 = $13
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8577])
	CALL eosio_assert(((int_64)$10 > (int_64)0), [8752])
	CALL eosio_assert(((int_64)$6 == (int_64)*($9 + [8])), [8623])
	$11 = *($4)
	if ( ($11 & [1]) ){ goto $label$7 }
	$11 = uint_32($11 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$11 = *($4 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($11 <= [257]), [8488])
	$11 = CALL has_auth($2)
	$7 = ($3 + [8])
	$12 = *($7)
	*((($5 + [56]) + [8])) = $12
	$8 = *($3)
	*((($5 + [24]) + [8])) = $12
	*($5 + [24]) = $8
	*($5 + [56]) = $8
	CALL $79($0, $1, ($5 + [24]))
	$12 = *($7)
	*((($5 + [40]) + [8])) = $12
	$8 = *($3)
	*((($5 + [8]) + [8])) = $12
	*($5 + [8]) = $8
	*($5 + [40]) = $8
	CALL $75($0, $2, ($5 + [8]), ( $2 ? $1 : $11 ))
	$13 = *($5 + [96])
	if ( ($13 == 0) ){ goto $label$8 }
	$3 = ($5 + [100])
	$11 = *($3)
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$10 }
	
.LOOP $label$11:
	$11 = ($11 + [-24])
	$7 = *($11)
	*($11) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	CALL _ZdlPv($7)
	
.LABEL $label$12
	if ( ((int_32)$13 != (int_32)$11) ){ goto $label$11 }
	$11 = *(($5 + [96]))
	goto $label$9 
	
.LABEL $label$10
	$11 = $13
	
.LABEL $label$9
	*($3) = $13
	CALL _ZdlPv($11)
	
.LABEL $label$8
	$global$0 = ($5 + [112])
}

void .FUNC $44 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [224])
	$global$0 = $4
	$5 = [0]
	$6 = *($2 + [8])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	$8 = $7)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$10 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [8392])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = uint_32($5 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($3 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($5 <= [257]), [8488])
	$10 = [0]
	*(($4 + [136])) = [0]
	*($4 + [120]) = (int_64)-1
	*($4 + [128]) = (int_64)0
	$8 = *($0)
	*($4 + [104]) = $8
	*($4 + [112]) = $7
	$11 = [0]
	$5 = CALL db_find_i64($8, $7, (int_64)-4157508551318700032, $7)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$11 = CALL $72(($4 + [104]), $5)
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [104])), [10385])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [8517])
	CALL require_auth(*($11 + [32]))
	$8 = *($2)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$7 = $9
	$10 = [1]
	$12 = $5
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$7 = $9
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$12 = ($5 + [1])
	$5 = $12
	if ( $10 ){ goto $label$13 }
	$10 = [1]
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$10 = [0]
	
.LABEL $label$9
	CALL eosio_assert($10, [8577])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [8594])
	CALL eosio_assert(((int_64)$6 == (int_64)*($11 + [8])), [8623])
	CALL eosio_assert(((int_64)$8 <= (int_64))(*($11 + [16]) - *($11))), [8649])
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [104])), [10510])
	CALL eosio_assert(((int_64)*($4 + [104]) == (int_64)CALL $fimport$7()), [10556])
	$7 = *($11 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$7), [10123])
	$8 = ((int_64)*($11) + (int_64)$8)
	*($11) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10166])
	CALL eosio_assert(((int_64)*($11) < (int_64)4611686018427387904), [10185])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$8) == (int_64)(uint_64)*($11 + [8]) >> (uint_64)(int_64)8)), [10607])
	*($4 + [208]) = (($4 + [144]) + [40])
	*($4 + [204]) = ($4 + [144])
	*($4 + [200]) = ($4 + [144])
	*($4 + [216]) = ($4 + [200])
	*($4 + [76]) = ($11 + [16])
	*($4 + [72]) = $11
	$5 = ($11 + [32])
	*($4 + [80]) = $5
	CALL $73(($4 + [72]), ($4 + [216]))
	CALL db_update_i64(*($11 + [44]), (int_64)0, ($4 + [144]), [40])
	$10 = (($4 + [104]) + [16])
	if ( (uint_64)($8 <= *($10)) ){ goto $label$14 }
	*($10) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$14
	$8 = *($5)
	$11 = ($2 + [8])
	*(($10 = (($4 + [88]) + [8]))) = *($11)
	$7 = *($2)
	*((($4 + [8]) + [8])) = *($10)
	*($4 + [88]) = $7
	*($4 + [8]) = *($4 + [88])
	CALL $75($0, $8, ($4 + [8]), $8)
	$8 = *($5)
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$15 }
	$7 = *($0)
	*($4 + [80]) = (int_64)3617214756542218240
	*($4 + [72]) = $8
	*((($10 = CALL _Znwj([16])) + [8])) = *($4 + [80])
	*($10) = *($4 + [72])
	*(($12 = (($4 + [24]) + [24]))) = *($11)
	*($4 + [32]) = $1
	*($4 + [40]) = *($2)
	*($4 + [24]) = *($5)
	CALL $126(($4 + [56]), $3)
	*((($4 + [144]) + [24])) = *($12)
	$5 = (($4 + [24]) + [40])
	*(($11 = (($4 + [144]) + [40]))) = *($5)
	*($5) = [0]
	$5 = ($10 + [16])
	*($4 + [204]) = $5
	*($4 + [200]) = $10
	*($4 + [208]) = $5
	*($4 + [144]) = *($4 + [24])
	*($4 + [152]) = *($4 + [32])
	*($4 + [160]) = *($4 + [40])
	*($4 + [176]) = *($4 + [56])
	*($4 + [56]) = (int_64)0
	CALL $76($7, (int_64)-3617168760277827584, ($4 + [200]), ($4 + [144]))
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$16
	$5 = *($4 + [200])
	if ( ($5 == 0) ){ goto $label$17 }
	*($4 + [204]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	if ( ((*(($4 + [56])) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$15
	$11 = *($4 + [128])
	if ( ($11 == 0) ){ goto $label$18 }
	$12 = ($4 + [132])
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$20 }
	
.LOOP $label$21:
	$5 = ($5 + [-24])
	$10 = *($5)
	*($5) = [0]
	if ( ($10 == 0) ){ goto $label$22 }
	CALL _ZdlPv($10)
	
.LABEL $label$22
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$21 }
	$5 = *(($4 + [128]))
	goto $label$19 
	
.LABEL $label$20
	$5 = $11
	
.LABEL $label$19
	*($12) = $11
	CALL _ZdlPv($5)
	
.LABEL $label$18
	$global$0 = ($4 + [224])
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $8 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth($1)
	$4 = [1]
	if ( ((int_64)*(($0 + [72])) == (int_64)$1) ){ goto $label$1 }
	$4 = ((int_64)*($0 + [64]) == (int_64)$1)
	
.LABEL $label$1
	CALL eosio_assert($4, [8913])
	$4 = [2]
	if ( (CASTING uint_32)(uint_64 ((int_64)*(($0 + [120])) / (int_64)1000000)) ){ goto $label$2 }
	$4 = [1]
	if ( ((int_64)((int_64)*(($0 + [96])) | (int_64)*(($0 + [104]))) != (int_64)0) ){ goto $label$2 }
	*($3 + [24]) = [8192]
	*($3 + [28]) = CALL $141([8192])
	*($3 + [8]) = *($3 + [24])
	$4 = CALL $2(($3 + [32]), ($3 + [8]))
	$4 = ( [4] ? [3] : ((int_64)*(($0 + [112])) == (int_64)*($4)) )
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$4 != (int_32)[1]), [9007])
	CALL eosio_assert(CALL $fimport$5($2), [9074])
	$5 = ($0 + [256])
	$7 = *(($0 + [284]))
	$6 = *(($0 + [280]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($7 + [-24])
	$8 = *($4)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$5 }
	$7 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($8 + [8]) == (int_32)$5), [10385])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$4 = CALL db_find_i64(*($5), *(($0 + [264])), (int_64)-7807107193754861568, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $37($5, $4)
	CALL eosio_assert(((int_32)*($8 + [8]) == (int_32)$5), [10385])
	
.LABEL $label$3
	CALL eosio_assert(($8 == 0), [9105])
	$1 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [256])) == (int_64)CALL $fimport$7()), [10459])
	*(($4 = CALL _Znwj([24])) + [8]) = $5
	*($4) = $2
	CALL eosio_assert([1], [10117])
	CALL memcpy(($3 + [32]), $4, [8])
	$2 = *($4)
	$8 = CALL db_store_i64(*(($0 + [264])), (int_64)-7807107193754861568, $1, $2, ($3 + [32]), [8])
	*($4 + [12]) = $8
	$7 = ($0 + [272])
	if ( (uint_64)($2 <= *($7)) ){ goto $label$7 }
	*($7) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($3 + [24]) = $4
	$2 = *($4)
	*($3 + [32]) = $2
	*($3 + [20]) = $8
	$6 = ($0 + [284])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [288]))) ){ goto $label$10 }
	*($7 + [8]) = $2
	*($7 + [16]) = $8
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	$4 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $4 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $38(($0 + [280]), ($3 + [24]), ($3 + [32]), ($3 + [20]))
	$4 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv($4)
	
.LABEL $label$8
	$global$0 = ($3 + [48])
}

void .FUNC $9 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$4 = ($global$0 - [240])
	$global$0 = $4
	CALL require_auth($1)
	$5 = ($0 + [256])
	$7 = *(($0 + [284]))
	$6 = *(($0 + [280]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [8]) == (int_32)$5), [10385])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [264])), (int_64)-7807107193754861568, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $37($5, $8)
	CALL eosio_assert(((int_32)*($9 + [8]) == (int_32)$5), [10385])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9378])
	CALL $40($0, $1)
	$10 = *(($3 + [8]))
	*((($4 + [192]) + [8])) = $10
	$11 = *($3)
	*((($4 + [64]) + [8])) = $10
	*($4 + [64]) = $11
	*($4 + [192]) = $11
	CALL $41(($4 + [208]), $0, ($4 + [64]))
	if ( (int_64)(*($4 + [208]) == 0) ){ goto $label$5 }
	$8 = [2]
	if ( (CASTING uint_32)(uint_64 ((int_64)*(($0 + [120])) / (int_64)1000000)) ){ goto $label$9 }
	$8 = [1]
	if ( ((int_64)((int_64)*(($0 + [96])) | (int_64)*(($0 + [104]))) == (int_64)0) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$8 == (int_32)[4]) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	*($4 + [160]) = [8192]
	*($4 + [164]) = CALL $141([8192])
	*($4 + [56]) = *($4 + [160])
	$8 = CALL $2(($4 + [224]), ($4 + [56]))
	$8 = ( [4] ? [3] : ((int_64)*(($0 + [112])) == (int_64)*($8)) )
	if ( ((int_32)$8 == (int_32)[4]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( ((int_32)($8 & [255]) != (int_32)[2]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert(CALL $fimport$5($2), [9414])
	$8 = CALL $141([8193])
	if ( ($8 <= [8]) ){ goto $label$13 }
	CALL eosio_assert([0], [9970])
	goto $label$12 
	
.LABEL $label$13
	if ( ($8 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$11 = (int_64)0
	
.LOOP $label$14:
	$7 = *(($8 + [8192]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [10015])
	
.LABEL $label$15
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$14 }
	$11 = ((int_64)$11 << (int_64)8)
	goto $label$10 
	
.LABEL $label$11
	$11 = (int_64)0
	
.LABEL $label$10
	CALL eosio_assert(((int_64)*($4 + [216]) == (int_64)((int_64)$11 | (int_64)4)), [9430])
	$7 = [0]
	if ( ((uint_64)((int_64)*($4 + [208]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$16 }
	$11 = (uint_64)*(($4 + [216])) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$10 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$11 = $10
	$7 = [1]
	$9 = $8
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$11 = $10
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$9 = ($8 + [1])
	$8 = $9
	if ( $7 ){ goto $label$20 }
	$7 = [1]
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$7 = [0]
	
.LABEL $label$16
	CALL eosio_assert($7, [8577])
	CALL eosio_assert(((int_64)*($4 + [208]) > (int_64)0), [9445])
	$11 = *((($4 + [208]) + [8]))
	*((($4 + [176]) + [8])) = $11
	*((($4 + [40]) + [8])) = $11
	$11 = *($4 + [208])
	*($4 + [40]) = $11
	*($4 + [176]) = $11
	CALL eosio_assert(CALL $42($0, $2, ($4 + [40])), [9471])
	CALL $43(($4 + [224]), ($4 + [208]))
	$8 = CALL $132(($4 + [224]), [0], [9507])
	$7 = ($8 + [8])
	*((($4 + [160]) + [8])) = *($7)
	*($4 + [160]) = *($8)
	*($8) = (int_64)0
	*($7) = [0]
	if ( ((*($4 + [224]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($4 + [232]))
	
.LABEL $label$21
	CALL $129(($4 + [160]), [9515])
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$25 }
	$7 = [0]
	$9 = *([0] + [9776])
	$11 = $2
	
.LOOP $label$27:
	*((($4 + [224]) + ($8 = $7))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$11 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$8 == (int_32)[12]) )))))
	$7 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[11]) ){ goto $label$26 }
	$11 = ((int_64)$11 << (int_64)5)
	if ( ((int_64)$11 != (int_64)0) ){ goto $label$27 }
	
.LABEL $label$26
	*(($4 + [152])) = [0]
	*($4 + [144]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$24 }
	*($4 + [144]) = ($7 << [1])
	$9 = (($4 + [144]) | [1])
	goto $label$23 
	
.LABEL $label$25
	*(($4 + [152])) = [0]
	*($4 + [144]) = (int_64)0
	*($4 + [144]) = [0]
	$8 = (($4 + [144]) | [1])
	$7 = $8
	goto $label$22 
	
.LABEL $label$24
	$6 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($6)
	*($4 + [144]) = ($6 | [1])
	*($4 + [152]) = $9
	*($4 + [148]) = $7
	
.LABEL $label$23
	$6 = ($8 + [1])
	$8 = [0]
	
.LOOP $label$28:
	*(($9 + $8)) = *((($4 + [224]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$28 }
	$7 = ($9 + $7)
	$8 = (($4 + [144]) | [1])
	
.LABEL $label$22
	*($7) = [0]
	$7 = *($4 + [144])
	$9 = ($7 & [1])
	CALL $130(($4 + [160]), ( *($4 + [152]) ? $8 : $9 ), ( *($4 + [148]) ? uint_32($7 >> [1]) : $9 ))
	if ( ((*($4 + [144]) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($4 + [152])))
	
.LABEL $label$29
	CALL $129(($4 + [160]), [9520])
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$33 }
	$7 = [0]
	$9 = *([0] + [9776])
	$11 = $1
	
.LOOP $label$35:
	*((($4 + [224]) + ($8 = $7))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$11 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$8 == (int_32)[12]) )))))
	$7 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[11]) ){ goto $label$34 }
	$11 = ((int_64)$11 << (int_64)5)
	if ( ((int_64)$11 != (int_64)0) ){ goto $label$35 }
	
.LABEL $label$34
	*(($4 + [152])) = [0]
	*($4 + [144]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$32 }
	*($4 + [144]) = ($7 << [1])
	$9 = (($4 + [144]) | [1])
	goto $label$31 
	
.LABEL $label$33
	*(($4 + [152])) = [0]
	*($4 + [144]) = (int_64)0
	*($4 + [144]) = [0]
	$8 = (($4 + [144]) | [1])
	$7 = $8
	goto $label$30 
	
.LABEL $label$32
	$6 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($6)
	*($4 + [144]) = ($6 | [1])
	*($4 + [152]) = $9
	*($4 + [148]) = $7
	
.LABEL $label$31
	$6 = ($8 + [1])
	$8 = [0]
	
.LOOP $label$36:
	*(($9 + $8)) = *((($4 + [224]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$36 }
	$7 = ($9 + $7)
	$8 = (($4 + [144]) | [1])
	
.LABEL $label$30
	*($7) = [0]
	$7 = *($4 + [144])
	$9 = ($7 & [1])
	CALL $130(($4 + [160]), ( *($4 + [152]) ? $8 : $9 ), ( *($4 + [148]) ? uint_32($7 >> [1]) : $9 ))
	if ( ((*($4 + [144]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*(($4 + [152])))
	
.LABEL $label$37
	*(($7 = (($4 + [128]) + [8]))) = *((($4 + [208]) + [8]))
	*($4 + [128]) = *($4 + [208])
	$8 = CALL $126(($4 + [112]), ($4 + [160]))
	*((($4 + [24]) + [8])) = *($7)
	*($4 + [24]) = *($4 + [128])
	$0 = ($0 + [32])
	CALL $44($0, $1, ($4 + [24]), $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$38
	CALL $43(($4 + [224]), ($4 + [208]))
	$8 = CALL $132(($4 + [224]), [0], [9533])
	$7 = *($8 + [4])
	$9 = *($8)
	*($8) = (int_64)0
	$6 = *($8 + [8])
	*($8 + [8]) = [0]
	if ( (*($4 + [160]) & [1]) ){ goto $label$40 }
	*($4 + [160]) = [0]
	$8 = ($4 + [168])
	goto $label$39 
	
.LABEL $label$40
	*(*($4 + [168])) = [0]
	*($4 + [164]) = [0]
	$8 = ($4 + [168])
	
.LABEL $label$39
	CALL $128(($4 + [160]), [0])
	*($8) = $6
	*($4 + [164]) = $7
	*($4 + [160]) = $9
	if ( ((*($4 + [224]) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*($4 + [232]))
	
.LABEL $label$41
	CALL $129(($4 + [160]), [9520])
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$45 }
	$7 = [0]
	$9 = *([0] + [9776])
	$11 = $2
	
.LOOP $label$47:
	*((($4 + [224]) + ($8 = $7))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$11 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$8 == (int_32)[12]) )))))
	$7 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[11]) ){ goto $label$46 }
	$11 = ((int_64)$11 << (int_64)5)
	if ( ((int_64)$11 != (int_64)0) ){ goto $label$47 }
	
.LABEL $label$46
	*(($4 + [152])) = [0]
	*($4 + [144]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$44 }
	*($4 + [144]) = ($7 << [1])
	$9 = (($4 + [144]) | [1])
	goto $label$43 
	
.LABEL $label$45
	*(($4 + [152])) = [0]
	*($4 + [144]) = (int_64)0
	*($4 + [144]) = [0]
	$8 = (($4 + [144]) | [1])
	$7 = $8
	goto $label$42 
	
.LABEL $label$44
	$6 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($6)
	*($4 + [144]) = ($6 | [1])
	*($4 + [152]) = $9
	*($4 + [148]) = $7
	
.LABEL $label$43
	$6 = ($8 + [1])
	$8 = [0]
	
.LOOP $label$48:
	*(($9 + $8)) = *((($4 + [224]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$48 }
	$7 = ($9 + $7)
	$8 = (($4 + [144]) | [1])
	
.LABEL $label$42
	*($7) = [0]
	$7 = *($4 + [144])
	$9 = ($7 & [1])
	CALL $130(($4 + [160]), ( *($4 + [152]) ? $8 : $9 ), ( *($4 + [148]) ? uint_32($7 >> [1]) : $9 ))
	if ( ((*($4 + [144]) & [1]) == 0) ){ goto $label$49 }
	CALL _ZdlPv(*(($4 + [152])))
	
.LABEL $label$49
	*(($7 = (($4 + [96]) + [8]))) = *((($4 + [208]) + [8]))
	*($4 + [96]) = *($4 + [208])
	$8 = CALL $126(($4 + [80]), ($4 + [160]))
	*((($4 + [8]) + [8])) = *($7)
	*($4 + [8]) = *($4 + [96])
	CALL $45($0, $1, $2, ($4 + [8]), $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$50
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [168])))
	
.LABEL $label$5
	$global$0 = ($4 + [240])
}

void .FUNC $6 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	CALL require_auth($1)
	$3 = [1]
	$4 = ($0 + [72])
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$1 }
	$3 = ((int_64)*($0 + [64]) == (int_64)$1)
	
.LABEL $label$1
	CALL eosio_assert($3, [8913])
	CALL eosio_assert(((int_64)*($4) != (int_64)$2), [8938])
	CALL eosio_assert(CALL $fimport$5($2), [8977])
	*($4) = $2
}

int_32 .FUNC $7 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [432])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $144($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [424]) = (int_64)0
	*($4 + [416]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10380])
	CALL memcpy(($4 + [416]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [10380])
	CALL memcpy((($4 + [416]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $34(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [424])
	$1 = *($4 + [416])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $147($2)
	
.LABEL $label$6
	CALL $35($8)
	$global$0 = ($4 + [432])
	return [1]
}

void .FUNC $4 (int_32 $0, int_64 $1)
{
	int_32 $2
	CALL require_auth($1)
	$2 = [1]
	if ( ((int_64)*(($0 + [72])) == (int_64)$1) ){ goto $label$1 }
	$2 = ((int_64)*($0 + [64]) == (int_64)$1)
	
.LABEL $label$1
	CALL eosio_assert($2, [8884])
	CALL $36($0)
}

int_32 .FUNC $5 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [432])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $144($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [424]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10380])
	CALL memcpy(($4 + [424]), $2, [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [8])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $34(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [424])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $147($2)
	
.LABEL $label$6
	CALL $35($8)
	$global$0 = ($4 + [432])
	return [1]
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9813])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9918])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9851])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9918])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [688])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$2 }
	*($3 + [672]) = [8199]
	*($3 + [676]) = CALL $141([8199])
	*($3 + [328]) = *($3 + [672])
	CALL $2(($3 + [680]), ($3 + [328]))
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$3 }
	*($3 + [668]) = [0]
	*($3 + [664]) = [1]
	*($3) = *($3 + [664])
	CALL $5($1, $1, $3)
	goto $label$1 
	
.LABEL $label$3
	*($3 + [656]) = [8204]
	*($3 + [660]) = CALL $141([8204])
	*($3 + [320]) = *($3 + [656])
	CALL $2(($3 + [680]), ($3 + [320]))
	if ( ((int_64)$2 != (int_64)3631283948598329344) ){ goto $label$4 }
	*($3 + [652]) = [0]
	*($3 + [648]) = [2]
	*($3 + [8]) = *($3 + [648])
	CALL $7($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [640]) = [8214]
	*($3 + [644]) = CALL $141([8214])
	*($3 + [312]) = *($3 + [640])
	CALL $2(($3 + [680]), ($3 + [312]))
	if ( ((int_64)$2 != (int_64)-7807107206245629952) ){ goto $label$5 }
	*($3 + [636]) = [0]
	*($3 + [632]) = [3]
	*($3 + [16]) = *($3 + [632])
	CALL $7($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [624]) = [8225]
	*($3 + [628]) = CALL $141([8225])
	*($3 + [304]) = *($3 + [624])
	CALL $2(($3 + [680]), ($3 + [304]))
	if ( ((int_64)$2 != (int_64)-7807113099349065728) ){ goto $label$6 }
	*($3 + [620]) = [0]
	*($3 + [616]) = [4]
	*($3 + [24]) = *($3 + [616])
	CALL $10($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [608]) = [8230]
	*($3 + [612]) = CALL $141([8230])
	*($3 + [296]) = *($3 + [608])
	CALL $2(($3 + [680]), ($3 + [296]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$7 }
	*($3 + [604]) = [0]
	*($3 + [600]) = [5]
	*($3 + [32]) = *($3 + [600])
	CALL $12($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [592]) = [8239]
	*($3 + [596]) = CALL $141([8239])
	*($3 + [288]) = *($3 + [592])
	CALL $2(($3 + [680]), ($3 + [288]))
	if ( ((int_64)$2 != (int_64)-6147719000566120448) ){ goto $label$8 }
	*($3 + [588]) = [0]
	*($3 + [584]) = [6]
	*($3 + [40]) = *($3 + [584])
	CALL $14($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [576]) = [8250]
	*($3 + [580]) = CALL $141([8250])
	*($3 + [280]) = *($3 + [576])
	CALL $2(($3 + [680]), ($3 + [280]))
	if ( ((int_64)$2 != (int_64)5454311842506244096) ){ goto $label$9 }
	*($3 + [572]) = [0]
	*($3 + [568]) = [7]
	*($3 + [48]) = *($3 + [568])
	CALL $5($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [560]) = [8261]
	*($3 + [564]) = CALL $141([8261])
	*($3 + [272]) = *($3 + [560])
	CALL $2(($3 + [680]), ($3 + [272]))
	if ( ((int_64)$2 != (int_64)-4812882892031115264) ){ goto $label$10 }
	*($3 + [556]) = [0]
	*($3 + [552]) = [8]
	*($3 + [56]) = *($3 + [552])
	CALL $17($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$10
	*($3 + [544]) = [8272]
	*($3 + [548]) = CALL $141([8272])
	*($3 + [264]) = *($3 + [544])
	CALL $2(($3 + [680]), ($3 + [264]))
	if ( ((int_64)$2 != (int_64)-7119375207604682752) ){ goto $label$11 }
	*($3 + [540]) = [0]
	*($3 + [536]) = [9]
	*($3 + [64]) = *($3 + [536])
	CALL $19($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$11
	*($3 + [528]) = [8279]
	*($3 + [532]) = CALL $141([8279])
	*($3 + [256]) = *($3 + [528])
	CALL $2(($3 + [680]), ($3 + [256]))
	if ( ((int_64)$2 != (int_64)5093418677655671440) ){ goto $label$12 }
	*($3 + [524]) = [0]
	*($3 + [520]) = [10]
	*($3 + [72]) = *($3 + [520])
	CALL $21($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$12
	*($3 + [512]) = [8292]
	*($3 + [516]) = CALL $141([8292])
	*($3 + [248]) = *($3 + [512])
	CALL $2(($3 + [680]), ($3 + [248]))
	if ( ((int_64)$2 != (int_64)5380477996647841792) ){ goto $label$13 }
	*($3 + [508]) = [0]
	*($3 + [504]) = [11]
	*($3 + [80]) = *($3 + [504])
	CALL $23($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$13
	*($3 + [496]) = [8300]
	*($3 + [500]) = CALL $141([8300])
	*($3 + [240]) = *($3 + [496])
	CALL $2(($3 + [680]), ($3 + [240]))
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$14 }
	*($3 + [492]) = [0]
	*($3 + [488]) = [12]
	*($3 + [88]) = *($3 + [488])
	CALL $23($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$14
	*($3 + [480]) = [8309]
	*($3 + [484]) = CALL $141([8309])
	*($3 + [232]) = *($3 + [480])
	CALL $2(($3 + [680]), ($3 + [232]))
	if ( ((int_64)$2 != (int_64)-2039333636196133488) ){ goto $label$15 }
	*($3 + [476]) = [0]
	*($3 + [472]) = [13]
	*($3 + [96]) = *($3 + [472])
	CALL $26($1, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$15
	*($3 + [464]) = [8322]
	*($3 + [468]) = CALL $141([8322])
	*($3 + [224]) = *($3 + [464])
	CALL $2(($3 + [680]), ($3 + [224]))
	if ( ((int_64)$2 != (int_64)4730614986173317120) ){ goto $label$16 }
	*($3 + [460]) = [0]
	*($3 + [456]) = [14]
	*($3 + [104]) = *($3 + [456])
	CALL $28($1, $1, ($3 + [104]))
	goto $label$1 
	
.LABEL $label$16
	*($3 + [448]) = [8331]
	*($3 + [452]) = CALL $141([8331])
	*($3 + [216]) = *($3 + [448])
	CALL $2(($3 + [680]), ($3 + [216]))
	if ( ((int_64)$2 != (int_64)-5065810290872942592) ){ goto $label$2 }
	*($3 + [444]) = [0]
	*($3 + [440]) = [15]
	*($3 + [112]) = *($3 + [440])
	CALL $30($1, $1, ($3 + [112]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [432]) = [8340]
	*($3 + [436]) = CALL $141([8340])
	*($3 + [208]) = *($3 + [432])
	CALL $2(($3 + [680]), ($3 + [208]))
	if ( ((int_64)$1 != (int_64)6138663577826885632) ){ goto $label$17 }
	*($3 + [416]) = [8346]
	*($3 + [420]) = CALL $141([8346])
	*($3 + [200]) = *($3 + [416])
	CALL $2(($3 + [424]), ($3 + [200]))
	if ( ((int_64)$2 != (int_64)-6569208335818555392) ){ goto $label$17 }
	*($3 + [412]) = [0]
	*($3 + [408]) = [16]
	*($3 + [120]) = *($3 + [408])
	CALL $32($0, (int_64)6138663577826885632, ($3 + [120]))
	goto $label$1 
	
.LABEL $label$17
	*($3 + [400]) = [8354]
	*($3 + [404]) = CALL $141([8354])
	*($3 + [192]) = *($3 + [400])
	CALL $2(($3 + [680]), ($3 + [192]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$18 }
	*($3 + [392]) = [8230]
	*($3 + [396]) = CALL $141([8230])
	*($3 + [184]) = *($3 + [392])
	CALL $2(($3 + [424]), ($3 + [184]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$18 }
	*($3 + [388]) = [0]
	*($3 + [384]) = [17]
	*($3 + [128]) = *($3 + [384])
	CALL $17($0, (int_64)6138663591592764928, ($3 + [128]))
	goto $label$1 
	
.LABEL $label$18
	*($3 + [376]) = [8366]
	*($3 + [380]) = CALL $141([8366])
	*($3 + [176]) = *($3 + [376])
	CALL $2(($3 + [680]), ($3 + [176]))
	if ( ((int_64)$1 != (int_64)7287551305209699648) ){ goto $label$19 }
	*($3 + [368]) = [8230]
	*($3 + [372]) = CALL $141([8230])
	*($3 + [168]) = *($3 + [368])
	CALL $2(($3 + [424]), ($3 + [168]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$19 }
	*($3 + [364]) = [0]
	*($3 + [360]) = [17]
	*($3 + [136]) = *($3 + [360])
	CALL $17($0, (int_64)7287551305209699648, ($3 + [136]))
	goto $label$1 
	
.LABEL $label$19
	*($3 + [352]) = [8379]
	*($3 + [356]) = CALL $141([8379])
	*($3 + [160]) = *($3 + [352])
	CALL $2(($3 + [680]), ($3 + [160]))
	if ( ((int_64)$1 != (int_64)4301877912145143680) ){ goto $label$1 }
	*($3 + [344]) = [8230]
	*($3 + [348]) = CALL $141([8230])
	*($3 + [152]) = *($3 + [344])
	CALL $2(($3 + [424]), ($3 + [152]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [340]) = [0]
	*($3 + [336]) = [17]
	*($3 + [144]) = *($3 + [336])
	CALL $17($0, (int_64)4301877912145143680, ($3 + [144]))
	
.LABEL $label$1
	CALL $135([0])
	$global$0 = ($3 + [688])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [32]) = (int_64)0
	*($0 + [8]) = $1
	*($0) = $1
	*($0 + [16]) = (int_64)4602678819172646912
	*(($0 + [40])) = (int_64)0
	*($2 + [8]) = [8192]
	*($2 + [12]) = CALL $141([8192])
	*($2) = *($2 + [8])
	CALL $2(($0 + [48]), $2)
	*(($0 + [64])) = (int_64)0
	*(($0 + [56])) = (int_64)0
	$3 = CALL $141([8193])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9970])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$1 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($3 + [8192]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [10015])
	
.LABEL $label$6
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$1 = (int_64)4
	
.LABEL $label$1
	*($0 + [80]) = (int_64)0
	*(($3 = ($0 + [88]))) = $1
	CALL eosio_assert([1], [10068])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$5 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $5
	$4 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$1 = $5
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $4 ){ goto $label$11 }
	$4 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [8392])
	*($0 + [96]) = (int_64)86400
	$global$0 = ($2 + [16])
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [432])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $144($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [424]) = (int_64)0
	*($4 + [416]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10380])
	CALL memcpy(($4 + [416]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [10380])
	CALL memcpy((($4 + [416]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $34(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [424])
	$1 = *($4 + [416])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $147($2)
	
.LABEL $label$6
	CALL $35($8)
	$global$0 = ($4 + [432])
	return [1]
}

void .FUNC $15 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	float_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [128])
	$global$0 = $2
	CALL require_auth($1)
	$3 = [1]
	if ( ((int_64)*(($0 + [72])) == (int_64)$1) ){ goto $label$1 }
	$3 = ((int_64)*($0 + [64]) == (int_64)$1)
	
.LABEL $label$1
	CALL eosio_assert($3, [9615])
	$4 = ($0 + [96])
	$3 = [2]
	if ( (CASTING uint_32)(uint_64 ((int_64)*(($0 + [120])) / (int_64)1000000)) ){ goto $label$2 }
	$3 = [1]
	if ( ((int_64)((int_64)*($4) | (int_64)*(($4 + [8]))) != (int_64)0) ){ goto $label$2 }
	*($2 + [32]) = [8192]
	*($2 + [36]) = CALL $141([8192])
	*($2 + [8]) = *($2 + [32])
	$3 = CALL $2(($2 + [48]), ($2 + [8]))
	$3 = ( [4] ? [3] : ((int_64)*(($0 + [112])) == (int_64)*($3)) )
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$3 != (int_32)[1]), [9643])
	$1 = *(($0 + [144]))
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$4 }
	if ( ((int_32)($3 & [255]) != (int_32)[4]) ){ goto $label$3 }
	$5 = CALL current_time()
	*(($0 + [104])) = (int_64)0
	*(($0 + [96])) = $5
	*($2 + [120]) = [8192]
	*($2 + [124]) = CALL $141([8192])
	*($2) = *($2 + [120])
	*(($0 + [112])) = *(CALL $2(($2 + [48]), $2))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL current_time()
	*($4 + [8]) = (int_64)0
	*($4) = $5
	
.LABEL $label$3
	$3 = CALL db_lowerbound_i64(*($0 + [296]), *(($0 + [304])), (int_64)-3665743316688306176, (int_64)0)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = ($0 + [296])
	$3 = CALL $48($6, $3)
	$7 = (($2 + [48]) + [48])
	$8 = (CASTING float_64)(int_64 $1)
	$9 = ($2 + [40])
	$10 = ($0 + [312])
	
.LOOP $label$6:
	$5 = *($0)
	CALL eosio_assert([1], [10666])
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)$6), [10510])
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL $fimport$7()), [10556])
	*($3 + [32]) = ((float_64)(CASTING float_64)(int_64 *($3 + [16])) / (float_64)$8)
	$1 = *($3)
	CALL eosio_assert([1], [10607])
	*($9) = $7
	*($2 + [36]) = ($2 + [48])
	*($2 + [32]) = ($2 + [48])
	CALL $49(($2 + [32]), $3)
	CALL db_update_i64(*($3 + [52]), $5, ($2 + [48]), [48])
	if ( (uint_64)($1 <= *($10)) ){ goto $label$7 }
	*($10) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	CALL eosio_assert([1], [10735])
	$3 = CALL db_next_i64(*(($3 + [52])), ($2 + [48]))
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = CALL $48($6, $3)
	goto $label$6 
	
.LABEL $label$5
	$1 = CALL current_time()
	*(($2 + [76])) = (int_64)0
	*(($2 + [92])) = (int_64)0
	*(($2 + [100])) = (int_64)0
	*($2 + [60]) = [0]
	*($2 + [64]) = [0]
	*($2 + [68 align=4]) = (int_64)0
	*($2 + [84 align=4]) = (int_64)0
	*($2 + [48]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	*($2 + [40]) = (int_64)3617214756542218240
	*($2 + [32]) = *($0)
	*($2 + [24]) = (int_64)-4812882892031115264
	CALL $50(($2 + [84]), ($2 + [32]), $0, ($2 + [24]), ($2 + [16]))
	$1 = *($0)
	*($2 + [68]) = [1]
	CALL $51(($2 + [32]), ($2 + [48]))
	$3 = *($2 + [32])
	CALL send_deferred($4, $1, $3, (*($2 + [36]) - $3), [0])
	$3 = *($2 + [32])
	if ( ($3 == 0) ){ goto $label$8 }
	*($2 + [36]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$8
	CALL $52(($2 + [48]))
	$global$0 = ($2 + [128])
}

void .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_64 $25
	$1 = ($global$0 - [176])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = *(($0 + [112]))
	$3 = CALL $141([8193])
	if ( ($3 <= [8]) ){ goto $label$3 }
	CALL eosio_assert([0], [9970])
	goto $label$2 
	
.LABEL $label$3
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	
.LOOP $label$4:
	if ( (((*(($3 + [8192])) + [-65]) & [255]) <= [26]) ){ goto $label$5 }
	CALL eosio_assert([0], [10015])
	
.LABEL $label$5
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$4 }
	
.LABEL $label$1
	$3 = CALL db_lowerbound_i64(*($0 + [216]), *(($0 + [224])), (int_64)-5915276602093682176, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$7 }
	$4 = ($0 + [96])
	$6 = ($0 + [216])
	$7 = CALL $53($6, $3)
	*(($5 = ($0 + [112]))) = *($7)
	$8 = ($0 + [296])
	$9 = ($1 + [132])
	$10 = (($1 + [16]) + [32])
	$11 = (($1 + [88]) | [1])
	$12 = ($0 + [304])
	$13 = ($1 + [124])
	$14 = ($1 + [56])
	$15 = [0]
	
.LOOP $label$8:
	$3 = CALL db_lowerbound_i64(*(($0 + [296])), *($12), (int_64)-3665743316688306176, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$10 }
	$16 = CALL $48($8, $3)
	$17 = *($16 + [32])
	if ( ((float_64)$17 != (float_64)(float_64)0) ){ goto $label$11 }
	$18 = [1]
	goto $label$9 
	
.LABEL $label$11
	$18 = [3]
	goto $label$9 
	
.LABEL $label$10
	$18 = [37]
	
.LABEL $label$9
	
.LOOP $label$12:
	goto $label$67 
	
.LABEL $label$81
	$16 = CALL $48($8, $3)
	$17 = *($16 + [32])
	if ( ((float_64)$17 != (float_64)(float_64)0) ){ goto $label$31 }
	$18 = [1]
	goto $label$12 
	
.LABEL $label$80
	CALL eosio_assert([1], [10735])
	$3 = CALL db_next_i64(*($16 + [52]), ($1 + [16]))
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$79
	$17 = ((float_64)$17 * (float_64)(CASTING float_64)(int_64 *(($7 + [8]))))
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)9223372036854775808) ){ goto $label$28 }
	$18 = [36]
	goto $label$12 
	
.LABEL $label$78
	$19 = (int_64)-9223372036854775808
	goto $label$27 
	
.LABEL $label$77
	$19 = (Rounds 0)($17)
	$18 = [5]
	goto $label$12 
	
.LABEL $label$76
	$20 = *($16)
	CALL eosio_assert((uint_64)(((int_64)$19 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10068])
	$2 = (uint_64)$20 >> (uint_64)(int_64)8)
	$3 = [0]
	$18 = [6]
	goto $label$12 
	
.LABEL $label$75
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$18 = [29]
	goto $label$12 
	
.LABEL $label$74
	$21 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$18 = [30]
	goto $label$12 
	
.LABEL $label$73
	$2 = $21
	$22 = [1]
	$23 = $3
	$3 = ($23 + [1])
	if ( ((int_32)$23 < (int_32)[6]) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$72
	$2 = $21
	$18 = [32]
	goto $label$12 
	
.LABEL $label$71
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$18 = [34]
	goto $label$12 
	
.LABEL $label$70
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$23 = ((int_32)$3 < (int_32)[6])
	$24 = ($3 + [1])
	$3 = $24
	if ( $23 ){ goto $label$14 }
	$18 = [35]
	goto $label$12 
	
.LABEL $label$69
	$22 = [1]
	$3 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[6]) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$68
	$22 = [0]
	$18 = [0]
	goto $label$12 
	
.LABEL $label$67
	CALL eosio_assert($22, [8392])
	if ( ((int_64)$19 < (int_64)1) ){ goto $label$36 }
	$18 = [8]
	goto $label$12 
	
.LABEL $label$66
	if ( ((int_64)*($16 + [16]) < (int_64)$19) ){ goto $label$39 }
	$18 = [9]
	goto $label$12 
	
.LABEL $label$65
	$2 = *($16 + [8])
	$21 = *($0)
	*(($23 = (($1 + [88]) + [8]))) = [0]
	*($1 + [88]) = (int_64)0
	$3 = CALL $141([9674])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$42 }
	$18 = [10]
	goto $label$12 
	
.LABEL $label$64
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$25 }
	$18 = [28]
	goto $label$12 
	
.LABEL $label$63
	*($1 + [88]) = ($3 << [1])
	$24 = $11
	if ( $3 ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$62
	$22 = (($3 + [16]) & [-16])
	$24 = CALL _Znwj($22)
	*($23) = $24
	*($1 + [88]) = ($22 | [1])
	*($1 + [92]) = $3
	$18 = [12]
	goto $label$12 
	
.LABEL $label$61
	CALL memcpy($24, [9674], $3)
	$18 = [13]
	goto $label$12 
	
.LABEL $label$60
	*(($24 + $3)) = [0]
	*(($24 = (($1 + [104]) + [16]))) = (int_64)0
	*(($22 = (($1 + [104]) + [24]))) = [0]
	$25 = *($7)
	*((($1 + [16]) + [16])) = $19
	*((($1 + [16]) + [24])) = $20
	*($10) = *($1 + [88])
	*(($10 + [8])) = *($23)
	*((($1 + [104]) + [8])) = (int_64)-3617168760277827584
	*((($1 + [16]) + [8])) = $25
	*($23) = [0]
	*($1 + [16]) = *($0)
	*($1 + [88]) = (int_64)0
	*($1 + [104]) = $2
	$3 = CALL _Znwj([16])
	*($24) = $3
	*($3) = $21
	*($3 + [8]) = (int_64)3617214756542218240
	*($9) = (int_64)0
	*((($1 + [104]) + [36])) = [0]
	$3 = ($3 + [16])
	*($22) = $3
	*($13) = $3
	$3 = *($10)
	$22 = ( *((($1 + [16]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($22 + [32])
	$2 = (CASTING uint_64)(uint_32 $22)
	$18 = [14]
	goto $label$12 
	
.LABEL $label$59
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$22 }
	$18 = [15]
	goto $label$12 
	
.LABEL $label$58
	if ( ($3 == 0) ){ goto $label$21 }
	$18 = [16]
	goto $label$12 
	
.LABEL $label$57
	CALL $54($9, $3)
	$22 = *((($1 + [104]) + [32]))
	$3 = *($9)
	goto $label$20 
	
.LABEL $label$56
	$22 = [0]
	$3 = [0]
	$18 = [17]
	goto $label$12 
	
.LABEL $label$55
	*((($1 + [144]) + [8])) = $22
	*($1 + [148]) = $3
	*($1 + [144]) = $3
	*($1 + [160]) = ($1 + [144])
	*($1 + [168]) = ($1 + [16])
	CALL $55(($1 + [168]), ($1 + [160]))
	CALL $56(($1 + [144]), ($1 + [104]))
	$3 = *($1 + [144])
	CALL send_inline($3, (*($1 + [148]) - $3))
	$3 = *($1 + [144])
	if ( ($3 == 0) ){ goto $label$19 }
	$18 = [18]
	goto $label$12 
	
.LABEL $label$54
	*($1 + [148]) = $3
	CALL _ZdlPv($3)
	$18 = [19]
	goto $label$12 
	
.LABEL $label$53
	$3 = *($9)
	if ( ($3 == 0) ){ goto $label$18 }
	$18 = [20]
	goto $label$12 
	
.LABEL $label$52
	*((($1 + [104]) + [32])) = $3
	CALL _ZdlPv($3)
	$18 = [21]
	goto $label$12 
	
.LABEL $label$51
	$3 = *($24)
	if ( ($3 == 0) ){ goto $label$17 }
	$18 = [22]
	goto $label$12 
	
.LABEL $label$50
	*($13) = $3
	CALL _ZdlPv($3)
	$18 = [23]
	goto $label$12 
	
.LABEL $label$49
	if ( ((*($10) & [1]) == 0) ){ goto $label$16 }
	$18 = [24]
	goto $label$12 
	
.LABEL $label$48
	CALL _ZdlPv(*($14))
	$18 = [25]
	goto $label$12 
	
.LABEL $label$47
	if ( ((*($1 + [88]) & [1]) == 0) ){ goto $label$41 }
	$18 = [26]
	goto $label$12 
	
.LABEL $label$46
	CALL _ZdlPv(*($23))
	goto $label$40 
	
.LABEL $label$45
	CALL eosio_assert([0], [8392])
	if ( ((int_64)$19 >= (int_64)1) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$44
	CALL eosio_assert([1], [10735])
	$3 = CALL db_next_i64(*($7 + [28]), ($1 + [16]))
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$6 }
	$18 = [38]
	goto $label$12 
	
.LABEL $label$43
	$7 = CALL $53($6, $3)
	*($5) = *($7)
	$3 = ($15 & [65535])
	$15 = ($15 + [1])
	if ( ((uint_32)$3 <= (uint_32)[3]) ){ goto $label$8 }
	$2 = CALL current_time()
	*(($1 + [44])) = (int_64)0
	*(($1 + [60])) = (int_64)0
	*(($1 + [68])) = (int_64)0
	*($1 + [28]) = [0]
	*($1 + [32]) = [0]
	*($1 + [36 align=4]) = (int_64)0
	*($1 + [52 align=4]) = (int_64)0
	*($1 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	$2 = CALL current_time()
	*(($0 + [104])) = (int_64)0
	*(($0 + [96])) = $2
	*($1 + [112]) = (int_64)3617214756542218240
	*($1 + [104]) = *($0)
	*($1 + [144]) = (int_64)-4812882892031115264
	CALL $50(($1 + [52]), ($1 + [104]), $0, ($1 + [144]), ($1 + [88]))
	$2 = *($0)
	*($1 + [36]) = [1]
	CALL $51(($1 + [104]), ($1 + [16]))
	$3 = *($1 + [104])
	CALL send_deferred($4, $2, $3, (*($1 + [108]) - $3), [0])
	$3 = *($1 + [104])
	if ( ($3 == 0) ){ goto $label$82 }
	*($1 + [108]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$82
	CALL $52(($1 + [16]))
	$global$0 = ($1 + [176])
	return (unreachable)
	
.LABEL $label$42
	CALL $125(($1 + [88]))
	
.LABEL $label$41
	$18 = [1]
	goto $label$12 
	
.LABEL $label$40
	$18 = [1]
	goto $label$12 
	
.LABEL $label$39
	$18 = [1]
	goto $label$12 
	
.LABEL $label$38
	$18 = [8]
	goto $label$12 
	
.LABEL $label$37
	$18 = [1]
	goto $label$12 
	
.LABEL $label$36
	$18 = [1]
	goto $label$12 
	
.LABEL $label$35
	$18 = [6]
	goto $label$12 
	
.LABEL $label$34
	$18 = [0]
	goto $label$12 
	
.LABEL $label$33
	$18 = [6]
	goto $label$12 
	
.LABEL $label$32
	$18 = [0]
	goto $label$12 
	
.LABEL $label$31
	$18 = [3]
	goto $label$12 
	
.LABEL $label$30
	$18 = [37]
	goto $label$12 
	
.LABEL $label$29
	$18 = [2]
	goto $label$12 
	
.LABEL $label$28
	$18 = [4]
	goto $label$12 
	
.LABEL $label$27
	$18 = [5]
	goto $label$12 
	
.LABEL $label$26
	$18 = [7]
	goto $label$12 
	
.LABEL $label$25
	$18 = [11]
	goto $label$12 
	
.LABEL $label$24
	$18 = [13]
	goto $label$12 
	
.LABEL $label$23
	$18 = [12]
	goto $label$12 
	
.LABEL $label$22
	$18 = [14]
	goto $label$12 
	
.LABEL $label$21
	$18 = [27]
	goto $label$12 
	
.LABEL $label$20
	$18 = [17]
	goto $label$12 
	
.LABEL $label$19
	$18 = [19]
	goto $label$12 
	
.LABEL $label$18
	$18 = [21]
	goto $label$12 
	
.LABEL $label$17
	$18 = [23]
	goto $label$12 
	
.LABEL $label$16
	$18 = [25]
	goto $label$12 
	
.LABEL $label$15
	$18 = [31]
	goto $label$12 
	
.LABEL $label$14
	$18 = [32]
	goto $label$12 
	
.LABEL $label$13
	$18 = [33]
	goto $label$12 
	
.LABEL $label$7
	$8 = ($0 + [296])
	
.LABEL $label$6
	*(($0 + [104])) = (int_64)0
	*(($0 + [96])) = (int_64)0
	*($1 + [104]) = [8192]
	*($1 + [108]) = CALL $141([8192])
	*($1 + [8]) = *($1 + [104])
	*(($0 + [112])) = *(CALL $2(($1 + [16]), ($1 + [8])))
	*(($0 + [120])) = (int_64)0
	$24 = ($0 + [296])
	$3 = CALL db_lowerbound_i64(*($24), *(($0 + [304])), (int_64)-3665743316688306176, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$83 }
	$3 = CALL $48($8, $3)
	$16 = (($1 + [16]) + [48])
	$22 = ($1 + [112])
	$23 = ($0 + [312])
	
.LOOP $label$84:
	$21 = *($0)
	CALL eosio_assert([1], [10666])
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)$8), [10510])
	CALL eosio_assert(((int_64)*($24) == (int_64)CALL $fimport$7()), [10556])
	*($3 + [32]) = (int_64)0
	$2 = *($3)
	CALL eosio_assert([1], [10607])
	*($22) = $16
	*($1 + [108]) = ($1 + [16])
	*($1 + [104]) = ($1 + [16])
	CALL $49(($1 + [104]), $3)
	CALL db_update_i64(*($3 + [52]), $21, ($1 + [16]), [48])
	if ( (uint_64)($2 <= *($23)) ){ goto $label$85 }
	*($23) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$85
	CALL eosio_assert([1], [10735])
	$3 = CALL db_next_i64(*(($3 + [52])), ($1 + [16]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$83 }
	$3 = CALL $48($8, $3)
	goto $label$84 
	
.LABEL $label$83
	$global$0 = ($1 + [176])
	$18
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [416])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $144($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = $2
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $34(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $147($2)
	
.LABEL $label$6
	CALL $35($8)
	$global$0 = ($4 + [416])
	return [1]
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$3 = ($global$0 - [528])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $144($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [472]))) = (int_64)0
	*($4 + [456]) = (int_64)0
	*($4 + [448]) = (int_64)0
	*($4 + [464]) = (int_64)0
	*($4 + [436]) = $2
	*($4 + [432]) = $2
	*($4 + [440]) = ($2 + $7)
	*($4 + [512]) = ($4 + [432])
	*($4 + [48]) = ($4 + [448])
	CALL $39(($4 + [48]), ($4 + [512]))
	$8 = *($4 + [440])
	*((($4 + [32]) + [8])) = $8
	*((($4 + [16]) + [8])) = $8
	$9 = *($4 + [432])
	*($4 + [16]) = $9
	*($4 + [32]) = $9
	$8 = CALL $34(($4 + [48]), $0, $1, ($4 + [16]))
	*(($10 = (($4 + [480]) + [8]))) = *($3)
	*($4 + [480]) = *($4 + [464])
	$0 = *($4 + [456])
	$1 = *($4 + [448])
	*((($4 + [496]) + [8])) = *($10)
	*($4 + [496]) = *($4 + [480])
	$3 = (($4 + [48]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$9 = *((($4 + [496]) + [8]))
	*((($4 + [512]) + [8])) = $9
	*(($4 + [8])) = $9
	$9 = *($4 + [496])
	*($4) = $9
	*($4 + [512]) = $9
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $147($2)
	
.LABEL $label$6
	CALL $35($8)
	$global$0 = ($4 + [528])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [144])
	$global$0 = $5
	CALL require_auth($1)
	$6 = *(($3 + [8]))
	*((($5 + [64]) + [8])) = $6
	$7 = *($3)
	*((($5 + [16]) + [8])) = $6
	*($5 + [16]) = $7
	*($5 + [64]) = $7
	CALL eosio_assert(CALL $42($0, $2, ($5 + [16])), [9128])
	$8 = CALL $141([8193])
	if ( ($8 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9970])
	goto $label$3 
	
.LABEL $label$4
	if ( ($8 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$9 = *(($8 + [8192]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [10015])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$5 }
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)4
	
.LABEL $label$1
	$10 = ($0 + [296])
	$9 = *(($0 + [324]))
	$11 = *(($0 + [320]))
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$11 }
	
.LOOP $label$13:
	$8 = ($9 + [-24])
	$12 = *($8)
	if ( ((int_64)*($12) == (int_64)$7) ){ goto $label$12 }
	$9 = $8
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($12 + [48]) == (int_32)$10), [10385])
	if ( ($12 == 0) ){ goto $label$7 }
	$7 = *($0)
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$8 = CALL db_find_i64(*(($0 + [296])), *(($0 + [304])), (int_64)-3665743316688306176, $7)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$12 = CALL $48($10, $8)
	CALL eosio_assert(((int_32)*($12 + [48]) == (int_32)$10), [10385])
	$7 = *($0)
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$9 }
	
.LABEL $label$10
	CALL eosio_assert([1], [10666])
	CALL eosio_assert(((int_32)*($12 + [48]) == (int_32)$10), [10510])
	CALL eosio_assert(((int_64)*(($0 + [296])) == (int_64)CALL $fimport$7()), [10556])
	$7 = *($12)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($12 + [24]))), [10262])
	$6 = (int_64)
	*($12 + [16]) = $6(*($12 + [16]) - *($3)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [10310])
	CALL eosio_assert(((int_64)*($12 + [16]) < (int_64)4611686018427387904), [10332])
	CALL eosio_assert(((int_64)$7 == (int_64)*($12)), [10607])
	*($5 + [136]) = (($5 + [80]) + [48])
	*($5 + [132]) = ($5 + [80])
	*($5 + [128]) = ($5 + [80])
	CALL $49(($5 + [128]), $12)
	CALL db_update_i64(*($12 + [52]), $1, ($5 + [80]), [48])
	$8 = ($0 + [312])
	if ( (uint_64)($7 <= *($8)) ){ goto $label$14 }
	*($8) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	
.LABEL $label$8
	CALL eosio_assert([1], [10666])
	CALL eosio_assert(((int_32)*($12 + [48]) == (int_32)$10), [10510])
	CALL eosio_assert(((int_64)*(($0 + [296])) == (int_64)CALL $fimport$7()), [10556])
	$7 = *($12)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($12 + [24]))), [10123])
	$6 = ((int_64)*($12 + [16]) + (int_64)*($3))
	*($12 + [16]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [10166])
	CALL eosio_assert(((int_64)*($12 + [16]) < (int_64)4611686018427387904), [10185])
	CALL eosio_assert(((int_64)$7 == (int_64)*($12)), [10607])
	*($5 + [136]) = (($5 + [80]) + [48])
	*($5 + [132]) = ($5 + [80])
	*($5 + [128]) = ($5 + [80])
	CALL $49(($5 + [128]), $12)
	CALL db_update_i64(*($12 + [52]), $2, ($5 + [80]), [48])
	$8 = ($0 + [312])
	if ( (uint_64)($7 <= *($8)) ){ goto $label$7 }
	*($8) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*(($9 = (($5 + [48]) + [8]))) = *(($3 + [8]))
	*($5 + [48]) = *($3)
	$8 = CALL $126(($5 + [32]), $4)
	*(($5 + [8])) = *($9)
	*($5) = *($5 + [48])
	CALL $45(($0 + [32]), $1, $2, $5, $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$15
	$global$0 = ($5 + [144])
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [512])
	$global$0 = $3
	*(($4 = $3) + [504]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $144($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [480])) = (int_64)0
	*(($4 + [496])) = [0]
	*($4 + [464]) = (int_64)0
	*($4 + [456]) = (int_64)0
	*($4 + [472]) = (int_64)0
	*($4 + [488]) = (int_64)0
	*($4 + [444]) = $2
	*($4 + [440]) = $2
	*($4 + [448]) = ($2 + $5)
	*($4 + [24]) = ($4 + [440])
	*($4 + [48]) = ($4 + [456])
	CALL $46(($4 + [48]), ($4 + [24]))
	$3 = *($4 + [448])
	*((($4 + [32]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$6 = *($4 + [440])
	*($4 + [8]) = $6
	*($4 + [32]) = $6
	$3 = CALL $34(($4 + [48]), $0, $1, ($4 + [8]))
	*($4 + [24]) = $3
	*($4 + [28]) = ($4 + [504])
	CALL $47(($4 + [24]), ($4 + [456]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $147($2)
	
.LABEL $label$4
	CALL $35($3)
	if ( ((*($4 + [488]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [496])))
	
.LABEL $label$5
	$global$0 = ($4 + [512])
	return [1]
}

void .FUNC $13 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL require_auth($1)
	$4 = [1]
	if ( ((int_64)*(($0 + [72])) == (int_64)$1) ){ goto $label$1 }
	$4 = ((int_64)*($0 + [64]) == (int_64)$1)
	
.LABEL $label$1
	CALL eosio_assert($4, [9543])
	if ( (CASTING uint_32)(uint_64 ((int_64)*(($0 + [120])) / (int_64)1000000)) ){ goto $label$2 }
	if ( ((int_64)((int_64)*(($0 + [96])) | (int_64)*(($0 + [104]))) != (int_64)0) ){ goto $label$2 }
	*($3 + [16]) = [8192]
	*($3 + [20]) = CALL $141([8192])
	*($3 + [8]) = *($3 + [16])
	CALL $2(($3 + [24]), ($3 + [8]))
	
.LABEL $label$2
	CALL eosio_assert(((int_64)$2 > (int_64)0), [9577])
	*(($0 + [128])) = $2
	$global$0 = ($3 + [32])
}

void .FUNC $75 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	$6 = *($2 + [8])
	*($4 + [16]) = $1
	$0 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $77(($4 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($4 + [8])), [10385])
	CALL eosio_assert([1], [10666])
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($4 + [8])), [10510])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$7()), [10556])
	$1 = *($0 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$1), [10123])
	$6 = ((int_64)*($0) + (int_64)*($2))
	*($0) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [10166])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [10185])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [10607])
	CALL eosio_assert([1], [10117])
	CALL memcpy(($4 + [48]), $0, [8])
	*($4 + [72]) = *($0 + [8])
	CALL eosio_assert([1], [10117])
	CALL memcpy((($4 + [48]) | [8]), ($4 + [72]), [8])
	CALL db_update_i64(*($0 + [20]), (int_64)0, ($4 + [48]), [16])
	$0 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($0)) ){ goto $label$3 }
	*($0) = ((int_64)$1 + (int_64)1)
	$7 = *($4 + [32])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$7()), [10459])
	*(($0 = CALL _Znwj([32])) + [16]) = ($4 + [8])
	*($0 + [8]) = *(($2 + [8]))
	*($0) = *($2)
	CALL eosio_assert([1], [10117])
	CALL memcpy(($4 + [48]), $0, [8])
	*($4 + [72]) = *($0 + [8])
	CALL eosio_assert([1], [10117])
	CALL memcpy((($4 + [48]) | [8]), ($4 + [72]), [8])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	$7 = CALL db_store_i64(*((($4 + [8]) + [8])), (int_64)3607749779137757184, $3, $1), ($4 + [48]), [16]
	*($0 + [20]) = $7)
	$2 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$5 }
	*($2) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$5
	*($4 + [72]) = $0
	$1 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8
	*($4 + [48]) = $1)
	*($4 + [68]) = $7
	$8 = ($4 + [36])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($4 + [40]))) ){ goto $label$7 }
	*($2 + [8]) = $1
	*($2 + [16]) = $7
	*($4 + [72]) = [0]
	*($2) = $0
	*($8) = ($2 + [24])
	$0 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( $0 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $78(($4 + [32]), ($4 + [72]), ($4 + [48]), ($4 + [68]))
	$0 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($4 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $7
	
.LABEL $label$8
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	CALL require_auth(*($0))
	$2 = ($0 + [72])
	CALL require_recipient(*($2))
	$3 = *($0 + [64])
	if ( ((int_64)$3 == (int_64)*($2)) ){ goto $label$1 }
	CALL require_recipient($3)
	
.LABEL $label$1
}

int_32 .FUNC $19 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [480])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $144($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [440]) = [0]
	*($4 + [432]) = (int_64)0
	*($4 + [420]) = $2
	*($4 + [416]) = $2
	*($4 + [424]) = ($2 + $7)
	CALL $57(($4 + [416]), ($4 + [432]))
	$3 = *($4 + [424])
	*((($4 + [16]) + [8])) = $3
	*(($4 + [8])) = $3
	$8 = *($4 + [416])
	*($4) = $8
	*($4 + [16]) = $8
	$9 = CALL $34(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$10 = CALL $126(($4 + [448]), ($4 + [432]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $126(($4 + [464]), $10)
	CALL void $3((int_32 $5), (int_32 $6))
	if ( (*($4 + [464]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [448]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [448]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($10 + [8]))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $147($2)
	
.LABEL $label$5
	CALL $35($9)
	if ( ((*($4 + [432]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [440])))
	
.LABEL $label$10
	$global$0 = ($4 + [480])
	return [1]
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($4)
	*($1) = *($5)
	*($1 + [8]) = *(*($4 + [4]))
	$6 = *($0)
	$7 = *($5)
	CALL eosio_assert([1], [10068])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$5 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [8392])
	*(($1 + [24])) = $7
	*($1 + [16]) = (int_64)0
	*($1 + [32]) = (int_64)0
	*($1 + [40]) = (int_64)4607182418800017408
	$5 = $2
	$4 = ($5 + [-48])
	$global$0 = $4
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = $5
	CALL $49($3, $1)
	$8 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($6 + [8]), (int_64)-3665743316688306176, *(*($0 + [8])), $8, $4, [48])
	if ( (uint_64)($8 <= *($6 + [16])) ){ goto $label$6 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	*(($7 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$6 = ($2 + [16])
	*($3) = $6
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $6
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($7 + [40])
	$2 = *($0)
	$11 = *(($0 + [4]))
	if ( ((int_32)$11 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $11)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($11 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$6 = ($8 + [-24])
	*($5) = *($6)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($6) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $96($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $54($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $97($2, $1)
	CALL $99(CALL $98(CALL $98($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10436])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $144($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10380])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [10380])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [10380])
	CALL memcpy(($3 + [24]), ($2 + [16]), [8])
	*($5 + [16]) = *($3 + [24])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$7 = *($5)
	*($3 + [24]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [16]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $91(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $147($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $133($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $34 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [176])
	$global$0 = $4
	$6 = ($3 + [8])
	*(($5 = (($4 + [144]) + [8]))) = *($6)
	*($4 + [144]) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$5 = *($5)
	*(($7 = (($4 + [16]) + [8]))) = $5
	$8 = *($4 + [144])
	*($0 + [16]) = $8
	*(($0 + [24])) = $5
	*($4 + [16]) = $8
	*(($5 = (($4 + [128]) + [8]))) = *($6)
	*($4 + [128]) = *($3)
	*(($3 = (($4 + [160]) + [8]))) = *($5)
	*($4 + [160]) = *($4 + [128])
	*($0 + [32]) = $1
	*(($0 + [40])) = $2
	$3 = *($3)
	*($7) = $3
	$2 = *($4 + [160])
	*(($0 + [48])) = $2
	*(($0 + [56])) = $3
	*($4 + [16]) = $2
	*(($0 + [72])) = (int_64)0
	*($0 + [64]) = (int_64)0
	*(($0 + [112])) = (int_64)0
	*(($0 + [120])) = (int_64)0
	*(($0 + [144])) = (int_64)0
	*(($0 + [152])) = (int_64)0
	*($0 + [176]) = $1
	*(($0 + [184])) = $1
	*(($0 + [192])) = (int_64)-1
	*(($3 = ($0 + [200]))) = (int_64)0
	*(($0 + [208])) = [0]
	*($0 + [216]) = $1
	*(($0 + [224])) = $1
	*(($0 + [232])) = (int_64)-1
	*(($0 + [240])) = (int_64)0
	*(($0 + [248])) = [0]
	*($0 + [256]) = $1
	*(($0 + [272])) = (int_64)-1
	*(($0 + [264])) = $1
	*(($0 + [280])) = (int_64)0
	*(($0 + [288])) = [0]
	*($0 + [296]) = $1
	*(($0 + [304])) = $1
	*(($0 + [312])) = (int_64)-1
	*(($0 + [320])) = (int_64)0
	*(($0 + [328])) = [0]
	*($0 + [336]) = $1
	*(($0 + [344])) = $1
	*(($0 + [352])) = (int_64)-1
	*(($0 + [360])) = (int_64)0
	*(($0 + [368])) = [0]
	$5 = ($0 + [64])
	$7 = CALL db_find_i64($1, $1, (int_64)4982871454971854848, (int_64)4982871454971854848)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$4 }
	$6 = ($0 + [176])
	CALL eosio_assert(((int_32)*(CALL $82($6, $7) + [112]) == (int_32)$6), [10385])
	$7 = *(($0 + [204]))
	if ( ((int_32)$7 == (int_32)*($3)) ){ goto $label$3 }
	$3 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [112]) == (int_32)$6), [10385])
	goto $label$2 
	
.LABEL $label$4
	CALL $1(($4 + [16]), *($0))
	CALL memcpy($5, ($4 + [16]), [104])
	$1 = *($0)
	*($4 + [16]) = $1
	*($4 + [8]) = $1
	*($4 + [24]) = (int_64)8421045207927095296
	*(($3 = CALL _Znwj([16]))) = $1
	*($3 + [8]) = (int_64)3617214756542218240
	*(($4 + [52])) = [0]
	$5 = ($3 + [16])
	*((($4 + [16]) + [24])) = $5
	*(($4 + [36])) = $5
	*($4 + [32]) = $3
	*($4 + [44 align=4]) = (int_64)0
	CALL $54(($4 + [44]), [8])
	$3 = *($4 + [44])
	CALL eosio_assert(((int_32)(*(($4 + [48])) - $3) > (int_32)[7]), [10117])
	CALL memcpy($3, ($4 + [8]), [8])
	CALL $56(($4 + [160]), ($4 + [16]))
	$3 = *($4 + [160])
	CALL send_inline($3, (*($4 + [164]) - $3))
	$3 = *($4 + [160])
	if ( ($3 == 0) ){ goto $label$5 }
	*($4 + [164]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$5
	$3 = *($4 + [44])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($4 + [48])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$3 = *($4 + [32])
	if ( ($3 == 0) ){ goto $label$1 }
	*(($4 + [36])) = $3
	CALL _ZdlPv($3)
	goto $label$1 
	
.LABEL $label$3
	$3 = [0]
	$7 = CALL db_find_i64(*(($0 + [176])), *(($0 + [184])), (int_64)4982871454971854848, (int_64)4982871454971854848)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $82($6, $7)
	CALL eosio_assert(((int_32)*($3 + [112]) == (int_32)$6), [10385])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [10913])
	CALL memcpy(($4 + [16]), $3, [112])
	CALL memcpy($5, ($4 + [16]), [104])
	
.LABEL $label$1
	CALL $83($0)
	CALL $84($0)
	$global$0 = ($4 + [176])
	return $0
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $54($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [10117])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [10117])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $95(CALL $94($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $65($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $128($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $128($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $125($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10117])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10117])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10117])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10117])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10117])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $144($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11092])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $144($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $35 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $85(($0 + [176]), ($0 + [64]), *($0))
	$1 = *(($0 + [360]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [364])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [360]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [320]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [324])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [320]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [280]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [284])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [280]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [240]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [244])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [240]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [200]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [204])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [200]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	return $0
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10380])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10380])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10380])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10380])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10380])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10117])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10117])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10117])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $111($0, ($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10117])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [88]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10117])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10117])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[15]), [10117])
	CALL memcpy(*($0 + [4]), $1, [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10117])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10117])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10117])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $139 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $147($0)
	
.LABEL $label$1
}

void .FUNC $29 (int_32 $0, int_64 $1, float_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = ($0 + [296])
	$6 = *(($0 + [324]))
	$5 = *(($0 + [320]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$4), [10385])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [304])), (int_64)-3665743316688306176, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $48($4, $7)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$4), [10385])
	
.LABEL $label$1
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [8835])
	$9 = *($0)
	CALL eosio_assert($7, [10666])
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$4), [10510])
	CALL eosio_assert(((int_64)*(($0 + [296])) == (int_64)CALL $fimport$7()), [10556])
	*($8 + [40]) = $2
	$1 = *($8)
	CALL eosio_assert([1], [10607])
	*($3 + [56]) = ($3 + [48])
	*($3 + [52]) = $3
	*($3 + [48]) = $3
	CALL $49(($3 + [48]), $8)
	CALL db_update_i64(*($8 + [52]), $9, $3, [48])
	$7 = ($0 + [312])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$5 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$global$0 = ($3 + [64])
}

int_32 .FUNC $28 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [432])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $144($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [424]) = (int_64)0
	*($4 + [416]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10380])
	CALL memcpy(($4 + [416]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [10380])
	CALL memcpy((($4 + [416]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $34(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [424])
	$1 = *($4 + [416])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $147($2)
	
.LABEL $label$6
	CALL $35($8)
	$global$0 = ($4 + [432])
	return [1]
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10117])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10117])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10117])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [10117])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $69(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[15]), [10380])
	CALL memcpy($1, *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10380])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10380])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10380])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $21 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [432])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $144($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [424]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10380])
	CALL memcpy(($4 + [32]), $2, [8])
	*($4 + [416]) = *($4 + [32])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [10380])
	CALL memcpy((($4 + [416]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $34(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [424])
	$1 = *($4 + [416])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $147($2)
	
.LABEL $label$6
	CALL $35($8)
	$global$0 = ($4 + [432])
	return [1]
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [8]) = $2
	*($3 + [16]) = $1
	CALL require_auth(*($0))
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9727])
	$8 = ($0 + [296])
	$6 = *(($0 + [324]))
	$9 = *(($0 + [320]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$9:
	$4 = ($6 + [-24])
	$7 = *($4)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$8 }
	$6 = $4
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$8), [10385])
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	$4 = CALL db_find_i64(*($8), *(($0 + [304])), (int_64)-3665743316688306176, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$6 }
	$7 = CALL $48($8, $4)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$8), [10385])
	
.LABEL $label$6
	CALL eosio_assert(($7 == 0), [9749])
	$2 = *($0)
	*($3 + [4]) = ($3 + [8])
	*($3) = ($3 + [16])
	*($3 + [56]) = $2
	CALL eosio_assert(((int_64)*(($0 + [296])) == (int_64)CALL $fimport$7()), [10459])
	*($3 + [32]) = $8
	*($3 + [36]) = $3
	*($3 + [40]) = ($3 + [56])
	*(($4 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [48]) = $8
	CALL $58(($3 + [32]), $4)
	*($3 + [48]) = $4
	$2 = *($4)
	*($3 + [32]) = $2
	$7 = *($4 + [52])
	*($3 + [28]) = $7
	$9 = ($0 + [324])
	$6 = *($9)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [328]))) ){ goto $label$12 }
	*($6 + [8]) = $2
	*($6 + [16]) = $7
	*($3 + [48]) = [0]
	*($6) = $4
	*($9) = ($6 + [24])
	$4 = *($3 + [48])
	*($3 + [48]) = [0]
	if ( $4 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $59(($0 + [320]), ($3 + [48]), ($3 + [32]), ($3 + [28]))
	$4 = *($3 + [48])
	*($3 + [48]) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
}

int_32 .FUNC $23 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [512])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $144($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [440]) + [16]))) = (int_64)0
	*($4 + [448]) = (int_64)0
	*($4 + [440]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10380])
	CALL memcpy(($4 + [440]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [10380])
	CALL memcpy((($4 + [440]) + [8]), ($2 + [8]), [8])
	*($4 + [48]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [10380])
	CALL memcpy(($4 + [48]), ($2 + [16]), [8])
	*($3) = *($4 + [48])
	$8 = ($2 + $7)
	*((($4 + [16]) + [8])) = $8
	*($4 + [36]) = ($2 + [24])
	*($4 + [32]) = $2
	*($4 + [40]) = $8
	*($4 + [16]) = *($4 + [32])
	$8 = CALL $34(($4 + [48]), $0, $1, ($4 + [16]))
	*(($9 = (($4 + [464]) + [8]))) = *($3)
	*($4 + [464]) = *($4 + [448])
	$0 = *($4 + [440])
	*((($4 + [480]) + [8])) = *($9)
	*($4 + [480]) = *($4 + [464])
	$3 = (($4 + [48]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [480]) + [8]))
	*((($4 + [496]) + [8])) = $1
	*(($4 + [8])) = $1
	$1 = *($4 + [480])
	*($4) = $1
	*($4 + [496]) = $1
	CALL void $3((int_32 $0), (int_64 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $147($2)
	
.LABEL $label$6
	CALL $35($8)
	$global$0 = ($4 + [512])
	return [1]
}

void .FUNC $22 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [96])
	$global$0 = $3
	$4 = [2]
	if ( (CASTING uint_32)(uint_64 ((int_64)*(($0 + [120])) / (int_64)1000000)) ){ goto $label$1 }
	$4 = [1]
	if ( ((int_64)((int_64)*(($0 + [96])) | (int_64)*(($0 + [104]))) != (int_64)0) ){ goto $label$1 }
	*($3 + [88]) = [8192]
	*($3 + [92]) = CALL $141([8192])
	*($3 + [24]) = *($3 + [88])
	$4 = CALL $2(($3 + [64]), ($3 + [24]))
	$4 = ( [4] ? [3] : ((int_64)*(($0 + [112])) == (int_64)*($4)) )
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[1]), [9168])
	*((($3 + [32]) + [8])) = [0]
	*((($3 + [48]) + [8])) = *(($2 + [8]))
	*($3 + [32]) = (int_64)0
	*($3 + [48]) = *($2)
	$5 = *($0)
	$4 = CALL $141([9229])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	$6 = ($0 + [32])
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($3 + [32]) = ($4 << [1])
	$7 = (($3 + [32]) | [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$8 = (($4 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($3 + [32]) = ($8 | [1])
	*($3 + [40]) = $7
	*($3 + [36]) = $4
	
.LABEL $label$4
	CALL memcpy($7, [9229], $4)
	
.LABEL $label$3
	*(($7 + $4)) = [0]
	*((($3 + [8]) + [8])) = *((($3 + [48]) + [8]))
	*($3 + [8]) = *($3 + [48])
	CALL $45($6, $1, $5, ($3 + [8]), ($3 + [32]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($3 + [40]))
	
.LABEL $label$6
	CALL $60($0, $1)
	$9 = ($0 + [216])
	$6 = *(($0 + [244]))
	$8 = *(($0 + [240]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$10:
	$4 = ($6 + [-24])
	$7 = *($4)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$9 }
	$6 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$9), [10385])
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	$4 = CALL db_find_i64(*($9), *(($0 + [224])), (int_64)-5915276602093682176, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $53($9, $4)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$9), [10385])
	
.LABEL $label$7
	$5 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [10666])
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$9), [10510])
	CALL eosio_assert(((int_64)*(($0 + [216])) == (int_64)CALL $fimport$7()), [10556])
	$1 = *($7)
	$4 = ($7 + [16])
	$10 = *($2 + [8])
	CALL eosio_assert(((int_64)$10 == (int_64)*($4)), [10123])
	$11 = ((int_64)*($7 + [8]) + (int_64)*($2))
	*($7 + [8]) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [10166])
	CALL eosio_assert(((int_64)*($7 + [8]) < (int_64)4611686018427387904), [10185])
	CALL eosio_assert(((int_64)$1 == (int_64)*($7)), [10607])
	CALL eosio_assert([1], [10117])
	CALL memcpy(($3 + [64]), $7, [8])
	CALL eosio_assert([1], [10117])
	CALL memcpy((($3 + [64]) | [8]), ($7 + [8]), [8])
	*($3 + [88]) = *($4)
	CALL eosio_assert([1], [10117])
	CALL memcpy((($3 + [64]) + [16]), ($3 + [88]), [8])
	CALL db_update_i64(*($7 + [28]), $5, ($3 + [64]), [24])
	$4 = ($0 + [232])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$11 }
	*($4) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	CALL eosio_assert(((int_64)$10 == (int_64)*(($0 + [152]))), [10123])
	$1 = ((int_64)*($4) + (int_64)*($2))
	*(($4 = ($0 + [144]))) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [10166])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [10185])
	$global$0 = ($3 + [96])
	return (unreachable)
	
.LABEL $label$2
	CALL $125(($3 + [32]))
}

void .FUNC $25 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
	*(($0 + [160])) = $1
}

void .FUNC $24 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [80])
	$global$0 = $3
	*($3 + [24]) = $1
	CALL require_auth($1)
	$4 = ($0 + [216])
	$6 = *(($0 + [244]))
	$5 = *(($0 + [240]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [10385])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [224])), (int_64)-5915276602093682176, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $53($4, $7)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [10385])
	
.LABEL $label$1
	$6 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($6, [9237])
	$9 = *($2 + [8])
	$7 = ($8 + [16])
	CALL eosio_assert(((int_64)*($7) == (int_64)$9), [10203])
	$10 = *($2)
	CALL eosio_assert(((int_64)*($8 + [8]) >= (int_64)$10), [9265])
	$11 = *($0)
	CALL eosio_assert($6, [10666])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [10510])
	CALL eosio_assert(((int_64)*(($0 + [216])) == (int_64)CALL $fimport$7()), [10556])
	$1 = *($8)
	CALL eosio_assert(((int_64)$9 == (int_64)*($7)), [10262])
	$10 = (int_64)
	*($8 + [8]) = $10(*($8 + [8]) - $10))
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [10310])
	CALL eosio_assert(((int_64)*($8 + [8]) < (int_64)4611686018427387904), [10332])
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [10607])
	CALL eosio_assert([1], [10117])
	CALL memcpy(($3 + [32]), $8, [8])
	CALL eosio_assert([1], [10117])
	CALL memcpy((($3 + [32]) | [8]), ($8 + [8]), [8])
	*($3 + [8]) = *($7)
	CALL eosio_assert([1], [10117])
	CALL memcpy((($3 + [32]) + [16]), ($3 + [8]), [8])
	CALL db_update_i64(*($8 + [28]), $11, ($3 + [32]), [24])
	$7 = ($0 + [232])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$5 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	CALL eosio_assert(((int_64)$9 == (int_64)*(($0 + [152]))), [10262])
	$1 = (int_64)
	*(($7 = ($0 + [144]))) = $1(*($7) - *($2)))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [10310])
	CALL eosio_assert(((int_64)*($7) < (int_64)4611686018427387904), [10332])
	$1 = *($0)
	*($3 + [8]) = $0
	*($3 + [16]) = $2
	*($3 + [12]) = ($3 + [24])
	*($3 + [72]) = $1
	CALL eosio_assert(((int_64)*($0 + [336]) == (int_64)CALL $fimport$7()), [10459])
	$8 = ($0 + [336])
	*($3 + [32]) = $8
	*($3 + [36]) = ($3 + [8])
	*($3 + [40]) = ($3 + [72])
	*(($7 = CALL _Znwj([56])) + [16]) = (int_64)0
	*($7 + [8]) = (int_64)0
	*($7 + [24]) = (int_64)0
	*($7 + [32]) = (int_64)0
	*($7 + [40]) = $8
	CALL $61(($3 + [32]), $7)
	*($3 + [64]) = $7
	$1 = *($7)
	*($3 + [32]) = $1
	$6 = *($7 + [44])
	*($3 + [60]) = $6
	$5 = ($0 + [364])
	$8 = *($5)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [368]))) ){ goto $label$8 }
	*($8 + [8]) = $1
	*($8 + [16]) = $6
	*($3 + [64]) = [0]
	*($8) = $7
	*($5) = ($8 + [24])
	$7 = *($3 + [64])
	*($3 + [64]) = [0]
	if ( $7 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $62(($0 + [360]), ($3 + [64]), ($3 + [32]), ($3 + [60]))
	$7 = *($3 + [64])
	*($3 + [64]) = [0]
	if ( ($7 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$global$0 = ($3 + [80])
}

void .FUNC $27 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL require_auth($1)
	$4 = ($0 + [336])
	$6 = *(($0 + [364]))
	$5 = *(($0 + [360]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$4), [10385])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [344])), (int_64)-2039333636196089344, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $63($4, $7)
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$4), [10385])
	
.LABEL $label$1
	$9 = ($0 + [216])
	$5 = *(($0 + [244]))
	$10 = *(($0 + [240]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$8:
	$7 = ($5 + [-24])
	$6 = *($7)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$7 }
	$5 = $7
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$9), [10385])
	goto $label$5 
	
.LABEL $label$6
	$6 = [0]
	$7 = CALL db_find_i64(*($9), *(($0 + [224])), (int_64)-5915276602093682176, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $53($9, $7)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$9), [10385])
	
.LABEL $label$5
	$10 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($10, [9300])
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [9322])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)$1), [9347])
	$11 = ($8 + [24])
	CALL eosio_assert(((int_64)*($11) == (int_64)*(($0 + [152]))), [10123])
	$1 = ((int_64)*($5) + (int_64)*($8 + [16]))
	*(($5 = ($0 + [144]))) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [10166])
	CALL eosio_assert(((int_64)*($5) < (int_64)4611686018427387904), [10185])
	$2 = *($0)
	CALL eosio_assert($10, [10666])
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$9), [10510])
	CALL eosio_assert(((int_64)*(($0 + [216])) == (int_64)CALL $fimport$7()), [10556])
	$1 = *($6)
	$5 = ($6 + [16])
	CALL eosio_assert(((int_64)*($11) == (int_64)*($5)), [10123])
	$12 = ((int_64)*($6 + [8]) + (int_64)*($8 + [16]))
	*($6 + [8]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [10166])
	CALL eosio_assert(((int_64)*($6 + [8]) < (int_64)4611686018427387904), [10185])
	CALL eosio_assert(((int_64)$1 == (int_64)*($6)), [10607])
	CALL eosio_assert([1], [10117])
	CALL memcpy($3, $6, [8])
	CALL eosio_assert([1], [10117])
	CALL memcpy(($3 | [8]), ($6 + [8]), [8])
	*($3 + [24]) = *($5)
	CALL eosio_assert([1], [10117])
	CALL memcpy(($3 + [16]), ($3 + [24]), [8])
	CALL db_update_i64(*($6 + [28]), $2, $3, [24])
	$6 = ($0 + [232])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$9 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	CALL eosio_assert($7, [10701])
	CALL eosio_assert($7, [10735])
	$7 = CALL db_next_i64(*($8 + [44]), $3)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$10 }
	CALL $63($4, $7)
	
.LABEL $label$10
	CALL $64($4, $8)
	$global$0 = ($3 + [32])
}

int_32 .FUNC $26 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [432])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $144($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [424]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10380])
	CALL memcpy(($4 + [424]), $2, [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [8])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $34(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [424])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $147($2)
	
.LABEL $label$6
	CALL $35($8)
	$global$0 = ($4 + [432])
	return [1]
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10380])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10380])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10380])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10380])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10380])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $135 (int_32 $0)
{
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [10117])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [10117])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10376])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = int_32(($3 - $6) >> [4])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $100($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ($7 << [4]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($3 + [-16])
	$2 = *(($3 + [-12]))
	if ( ($2 == 0) ){ goto $label$8 }
	*(($3 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$3 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$3 = $6
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($0 + [8])
	
.LOOP $label$9:
	$2 = ($0 + [4])
	CALL eosio_assert(((uint_32)(*($6) - *($2)) > (uint_32)[1]), [10380])
	CALL memcpy($7, *($2), [2])
	*($2) = (*($2) + [2])
	CALL $65($0, ($7 + [4]))
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10380])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($1) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10380])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10380])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10380])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10380])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10380])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10376])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $54($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [10380])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [10765])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10810])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10860])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10376])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = ((int_32)($3 - $6) / (int_32)[40])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $101($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ((int_32)$7 * (int_32)[40]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = *(($3 + [-12]))
	if ( ($7 == 0) ){ goto $label$8 }
	*(($3 + [-8])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = ($3 + [-40])
	$2 = *(($3 + [-24]))
	if ( ($2 == 0) ){ goto $label$9 }
	*(($3 + [-20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$3 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$3 = $6
	
.LABEL $label$5
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	
.LOOP $label$10:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - *($7)) > (uint_32)[7]), [10380])
	CALL memcpy($2, *($7), [8])
	$5 = (*($7) + [8])
	*($7) = $5
	CALL eosio_assert(((uint_32)(*($6) - $5) > (uint_32)[7]), [10380])
	CALL memcpy(($2 + [8]), *($7), [8])
	*($7) = (*($7) + [8])
	CALL $65(CALL $102($0, ($2 + [16])), ($2 + [28]))
	$2 = ($2 + [40])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [10380])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [10380])
	CALL memcpy(($1 + [4]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [10380])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	$4 = [0]
	$5 = (int_64)0
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *(($0 + [8]))), [10376])
	$6 = ($0 + [4])
	$3 = *($6)
	$2 = *($3)
	$3 = ($3 + [1])
	*($6) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($2 & [128]) ){ goto $label$1 }
	*($1 + [12]) = $5
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)*($7) != (int_32)$3), [10380])
	$3 = ($0 + [4])
	CALL memcpy(($1 + [16]), *($3), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$6 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	CALL eosio_assert(($4 <= *($7)), [10376])
	$4 = *($3)
	$2 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $6)))
	$6 = ($6 + [7])
	if ( ($2 & [128]) ){ goto $label$2 }
	*($1 + [20]) = $5
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [352])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [336])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [344])), (int_64)-2039333636196089344, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $63($9, $10)
	*($3 + [4]) = [0]
	*($3) = $9
	$8 = *(*(CALL $115($3) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [352])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [10938])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	$5 = *($5 + [8])
	*(($1 + [24])) = *(($5 + [8]))
	*($1 + [16]) = *($5)
	*($1 + [32]) = ((int_64)((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) + (int_64)*(($6 + [160]))) * (int_64)1000000)
	$2 = $2
	$6 = ($2 + [-48])
	$global$0 = $6
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($2 + [-8])
	CALL $116($3, $1)
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)-2039333636196089344, *(*($0 + [8])), $8, $6, [40])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $60 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [16]) = $1
	$3 = ($0 + [216])
	$5 = *(($0 + [244]))
	$4 = *(($0 + [240]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [10385])
	if ( $7 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [224])), (int_64)-5915276602093682176, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $53($3, $6) + [24]) == (int_32)$3), [10385])
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$1 = *($0)
	*($2 + [8]) = ($2 + [16])
	*($2 + [56]) = $1
	CALL eosio_assert(((int_64)*(($0 + [216])) == (int_64)CALL $fimport$7()), [10459])
	*($2 + [32]) = $3
	*($2 + [36]) = ($2 + [8])
	*($2 + [40]) = ($2 + [56])
	*(($6 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($6) = (int_64)0
	*($6 + [16]) = (int_64)0
	*($6 + [24]) = $3
	CALL $90(($2 + [32]), $6)
	*($2 + [48]) = $6
	$1 = *($6)
	*($2 + [32]) = $1
	$4 = *($6 + [28])
	*($2 + [28]) = $4
	$7 = ($0 + [244])
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [248]))) ){ goto $label$7 }
	*($5 + [8]) = $1
	*($5 + [16]) = $4
	*($2 + [48]) = [0]
	*($5) = $6
	*($7) = ($5 + [24])
	$6 = *($2 + [48])
	*($2 + [48]) = [0]
	if ( $6 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$7
	CALL $91(($0 + [240]), ($2 + [48]), ($2 + [32]), ($2 + [28]))
	$6 = *($2 + [48])
	*($2 + [48]) = [0]
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	CALL _ZdlPv($6)
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10436])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $144($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	CALL $109(($3 + [32]), $5)
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $62(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $147($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[40])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$2 = ((int_32)($2 - $4) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	$6 = ($6 + [40])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[40]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$7 = ($2 + ((int_32)$6 * (int_32)[40]))
	$8 = ($2 + ((int_32)$3 * (int_32)[40]))
	$6 = $8
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	$6 = ($6 + [40])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$9 = ($8 + ((int_32)$1 * (int_32)[40]))
	$6 = *($0)
	$10 = *(($0 + [4]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$9 }
	$11 = ($6 - $10)
	$1 = [0]
	
.LOOP $label$10:
	$2 = ($10 + $1)
	*((($6 = ($8 + $1)) + [-32])) = *(($2 + [-32]))
	*(($6 + [-40])) = *(($2 + [-40]))
	*(($3 = ($6 + [-24]))) = (int_64)0
	*(($4 = ($6 + [-16]))) = [0]
	$5 = ($2 + [-24])
	*($3) = *($5)
	$3 = ($2 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($6 + [-12]))) = (int_64)0
	*(($6 = ($6 + [-4]))) = [0]
	$4 = ($2 + [-12])
	*($3) = *($4)
	*($5) = (int_64)0
	$2 = ($2 + [-4])
	*($6) = *($2)
	*($2) = [0]
	*($4) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$10 }
	$8 = ($8 + $1)
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$3 = $6
	
.LABEL $label$8
	*($0) = $8
	*(($0 + [4])) = $9
	*(($0 + [8])) = $7
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = *(($6 + [-12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($6 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$13
	$2 = ($6 + [-40])
	$1 = *(($6 + [-24]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $133($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$8 = ($7 + ($6 << [4]))
	$9 = ($7 + ($3 << [4]))
	$6 = $9
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$10 = ($9 + ($1 << [4]))
	$6 = *($0)
	$11 = ($0 + [4])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$10 }
	$13 = (($3 + [-1]) - uint_32((($12 + [-16]) - $6) >> [4]))
	$14 = ($6 - $12)
	$6 = [0]
	
.LOOP $label$11:
	*(($3 = (($2 = ($9 + $6)) + [-12]))) = (int_64)0
	*(($4 = ($2 + [-4]))) = [0]
	$1 = ($12 + $6)
	$5 = ($1 + [-12])
	*($3) = *($5)
	$3 = ($1 + [-4])
	*($4) = *($3)
	*(($2 + [-16])) = *(($1 + [-16]))
	*($3) = [0]
	*($5) = (int_64)0
	$6 = ($6 + [-16])
	if ( ((int_32)$14 != (int_32)$6) ){ goto $label$11 }
	$9 = ($7 + ($13 << [4]))
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$3 = $6
	
.LABEL $label$9
	*($0) = $9
	*($11) = $10
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($6 + [-16])
	$1 = *(($6 + [-12]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-8])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
	(unreachable)
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $133($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [4]))
	$3 = ($2 + ($3 << [4]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [4]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10376])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $2) >> [4])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $103($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ($7 << [4]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$3 = *($7)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [10380])
	CALL memcpy($2, *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [10380])
	CALL memcpy(($2 + [8]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	$2 = ($2 + [16])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10380])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10380])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10380])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $107($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10380])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10380])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [88])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10380])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10380])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10380])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10380])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10380])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10380])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10117])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10117])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10117])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10117])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10117])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10436])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $144($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $112(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $113(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $147($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $87 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$7()), [10459])
	*(($5 = CALL _Znwj([128])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [112]) = $1
	$5 = CALL memcpy($5, *($3), [104])
	*($4 + [120]) = (($4 + [16]) + [88])
	*($4 + [116]) = ($4 + [16])
	*($4 + [112]) = ($4 + [16])
	CALL $110(($4 + [112]), $5)
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)4982871454971854848, $2, (int_64)4982871454971854848, ($4 + [16]), [88])
	*($5 + [116]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4982871454971854848) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4982871454971854849
	
.LABEL $label$1
	*($4 + [112]) = $5
	*($4 + [16]) = (int_64)4982871454971854848
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4982871454971854848
	*($3 + [16]) = $6
	*($4 + [112]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $106(($1 + [24]), ($4 + [112]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [112])
	*($4 + [112]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [128])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [10510])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10556])
	$1 = CALL memcpy($1, *($3), [104])
	CALL eosio_assert([1], [10607])
	*($4 + [104]) = ($4 + [88])
	*($4 + [100]) = $4
	*($4 + [96]) = $4
	CALL $110(($4 + [96]), $1)
	CALL db_update_i64(*($1 + [116]), $2, $4, [88])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4982871454971854848) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)4982871454971854849
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

void .FUNC $85 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$0), [10385])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4982871454971854848, (int_64)4982871454971854848)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $82($0, $4)
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$0), [10385])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [10666])
	CALL $86($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $87($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $84 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$1 = ($global$0 - [80])
	$global$0 = $1
	if ( (CASTING uint_32)(uint_64 ((int_64)*(($0 + [120])) / (int_64)1000000)) ){ goto $label$3 }
	if ( ((int_64)(((int_64)*(($0 + [96])) | (int_64)*(($0 + [104]))) == 0) == 0) ){ goto $label$2 }
	*($1 + [64]) = [8192]
	*($1 + [68]) = CALL $141([8192])
	*($1 + [24]) = *($1 + [64])
	CALL $2(($1 + [72]), ($1 + [24]))
	
.LABEL $label$3
	$2 = CALL db_lowerbound_i64(*($0 + [336]), *(($0 + [344])), (int_64)-2039333636196089344, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$3 = ($0 + [32])
	$4 = ($0 + [336])
	$2 = CALL $63($4, $2)
	$5 = (($1 + [32]) | [1])
	
.LOOP $label$4:
	if ( ((uint_32)(CASTING uint_32)(uint_64 ((int_64)*($2 + [32]) / (int_64)1000000)) <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$5 }
	CALL eosio_assert([1], [10735])
	$6 = *($2 + [44])
	$2 = [0]
	$6 = CALL db_next_i64($6, ($1 + [72]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	$2 = CALL $63($4, $6)
	
.LABEL $label$6
	if ( $2 ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$7 = *($2 + [8])
	*(($8 = (($1 + [32]) + [8]))) = [0]
	*(($9 = (($1 + [48]) + [8]))) = *(($2 + [24]))
	*($1 + [32]) = (int_64)0
	*($1 + [48]) = *($2 + [16])
	$10 = *($0)
	$6 = CALL $141([8826])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$9 }
	*($1 + [32]) = ($6 << [1])
	$11 = $5
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$12 = (($6 + [16]) & [-16])
	$11 = CALL _Znwj($12)
	*($8) = $11
	*($1 + [32]) = ($12 | [1])
	*($1 + [36]) = $6
	
.LABEL $label$8
	CALL memcpy($11, [8826], $6)
	
.LABEL $label$7
	*(($11 + $6)) = [0]
	*((($1 + [8]) + [8])) = *($9)
	*($1 + [8]) = *($1 + [48])
	CALL $45($3, $10, $7, ($1 + [8]), ($1 + [32]))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($8))
	
.LABEL $label$10
	CALL eosio_assert([1], [10735])
	$6 = [0]
	$11 = CALL db_next_i64(*($2 + [44]), ($1 + [72]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$11 }
	$6 = CALL $63($4, $11)
	
.LABEL $label$11
	$11 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($11, [10701])
	CALL eosio_assert($11, [10735])
	$11 = CALL db_next_i64(*($2 + [44]), ($1 + [72]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$12 }
	CALL $63($4, $11)
	
.LABEL $label$12
	CALL $64($4, $2)
	$2 = $6
	if ( $2 ){ goto $label$4 }
	
.LABEL $label$2
	$global$0 = ($1 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $125(($1 + [32]))
}

void .FUNC $83 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	float_64 $8
	int_32 $9
	int_32 $10
	$1 = ($global$0 - [96])
	$global$0 = $1
	$2 = ($0 + [128])
	if ( (int_64)(*($2) == 0) ){ goto $label$2 }
	$3 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$3 = ((int_64))($3 - ((uint_64)$3 % (uint_64)*($2))) * (int_64)1000000)
	$2 = ($0 + [120])
	$4 = *($2)
	if ( ((CASTING uint_32)(uint_64 ((int_64)$4 / (int_64)1000000)) == 0) ){ goto $label$1 }
	if ( ((int_64)$3 <= (int_64)$4) ){ goto $label$2 }
	*(($2 = ($0 + [120]))) = $3
	$4 = *(($0 + [144]))
	$3 = CALL current_time()
	*(($0 + [104])) = (int_64)0
	*(($5 = ($0 + [96]))) = $3
	*($2) = (int_64)0
	$2 = CALL db_lowerbound_i64(*($0 + [296]), *(($0 + [304])), (int_64)-3665743316688306176, (int_64)0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = ($0 + [296])
	$2 = CALL $48($6, $2)
	$7 = (($1 + [32]) + [48])
	$8 = (CASTING float_64)(int_64 $4)
	$9 = ($1 + [24])
	$10 = ($0 + [312])
	
.LOOP $label$4:
	$4 = *($0)
	CALL eosio_assert([1], [10666])
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$6), [10510])
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL $fimport$7()), [10556])
	*($2 + [32]) = ((float_64)(CASTING float_64)(int_64 *($2 + [16])) / (float_64)$8)
	$3 = *($2)
	CALL eosio_assert([1], [10607])
	*($9) = $7
	*($1 + [20]) = ($1 + [32])
	*($1 + [16]) = ($1 + [32])
	CALL $49(($1 + [16]), $2)
	CALL db_update_i64(*($2 + [52]), $4, ($1 + [32]), [48])
	if ( (uint_64)($3 <= *($10)) ){ goto $label$5 }
	*($10) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	CALL eosio_assert([1], [10735])
	$2 = CALL db_next_i64(*(($2 + [52])), ($1 + [32]))
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$3 }
	$2 = CALL $48($6, $2)
	goto $label$4 
	
.LABEL $label$3
	$3 = CALL current_time()
	*(($1 + [60])) = (int_64)0
	*(($1 + [76])) = (int_64)0
	*(($1 + [84])) = (int_64)0
	*($1 + [44]) = [0]
	*($1 + [48]) = [0]
	*($1 + [52 align=4]) = (int_64)0
	*($1 + [68 align=4]) = (int_64)0
	*($1 + [32]) = ((CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000)) + [60])
	*($1 + [24]) = (int_64)3617214756542218240
	*($1 + [16]) = *($0)
	*($1 + [8]) = (int_64)-4812882892031115264
	CALL $50(($1 + [68]), ($1 + [16]), $0, ($1 + [8]), $1)
	$3 = *($0)
	*($1 + [52]) = [1]
	CALL $51(($1 + [16]), ($1 + [32]))
	$2 = *($1 + [16])
	CALL send_deferred($5, $3, $2, (*($1 + [20]) - $2), [0])
	$2 = *($1 + [16])
	if ( ($2 == 0) ){ goto $label$6 }
	*($1 + [20]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	CALL $52(($1 + [32]))
	
.LABEL $label$2
	$global$0 = ($1 + [96])
	return 
	
.LABEL $label$1
	*($2) = $3
	$global$0 = ($1 + [96])
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10436])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $144($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([128])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [112]) = $0
	CALL $105(($3 + [32]), $5)
	*($5 + [116]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)4982871454971854848
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)4982871454971854848
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $106(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $147($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $81 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [10385])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $72($0, $4)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$0), [10385])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $80 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [10385])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $77($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [10385])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $146($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [19600])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $144 (int_32 $0)
{
	return CALL $145([11112], $0)
}

void .FUNC $147 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19496])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19304]
	$3 = (((int_32)$1 * (int_32)[12]) + [19304])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $146 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11104]) == 0) ){ goto $label$2 }
	$2 = *([0] + [11108])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [11104]) = [1]
	$2 = ($2 << [16])
	*([0] + [11108]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11108])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [11108]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [11104]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [11104]) = [1]
	$3 = ($3 << [16])
	*([0] + [11108]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11108])
	
.LABEL $label$10
	*([0] + [11108]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $141 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $140 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $136([19], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $144($1)
	
.LABEL $label$2
	*(CALL $134()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $144(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $147($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $142 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $134())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $143($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10436])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $144($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $104(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $74(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $147($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10117])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10117])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10117])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10117])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10117])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $70 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $144($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $93(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

void .FUNC $71 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = [0]
	$5 = *($2 + [8])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8392])
	$9 = [0]
	$11 = *($2)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$4 = [0]
	$7 = $6
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $8
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$10 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert($9, [8412])
	CALL eosio_assert(((int_64)$11 > (int_64)0), [8427])
	*((($3 + [8]) + [32])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$7 = *($0)
	*($3 + [8]) = $7
	*($3 + [16]) = $6
	$4 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(CALL $72(($3 + [8]), $4) + [40]) == (int_32)($3 + [8])), [10385])
	$4 = [0]
	goto $label$11 
	
.LABEL $label$12
	$4 = [1]
	
.LABEL $label$11
	CALL eosio_assert($4, [8455])
	$8 = *($0)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$7()), [10459])
	*(($4 = CALL _Znwj([56]))) = (int_64)0
	*($4 + [40]) = ($3 + [8])
	*($4 + [8]) = $5
	*($4 + [32]) = $1
	*($4 + [16]) = *($2)
	*(($4 + [24])) = *(($2 + [8]))
	*($3 + [96]) = (($3 + [48]) + [40])
	*($3 + [92]) = ($3 + [48])
	*($3 + [88]) = ($3 + [48])
	*($3 + [104]) = ($3 + [88])
	*($3 + [116]) = ($4 + [16])
	*($3 + [112]) = $4
	*($3 + [120]) = ($4 + [32])
	CALL $73(($3 + [112]), ($3 + [104]))
	$7 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	$10 = CALL db_store_i64(*((($3 + [8]) + [8])), (int_64)-4157508551318700032, $8, $7), ($3 + [48]), [40]
	*($4 + [44]) = $10)
	$9 = (($3 + [8]) + [16])
	if ( (uint_64)($7 <= *($9)) ){ goto $label$13 }
	*($9) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$13
	*($3 + [112]) = $4
	$7 = (uint_64)*(($4 + [8])) >> (uint_64)(int_64)8
	*($3 + [48]) = $7)
	*($3 + [88]) = $10
	$2 = ($3 + [36])
	$9 = *($2)
	if ( ((uint_32)$9 >= (uint_32)*(($3 + [40]))) ){ goto $label$16 }
	*($9 + [8]) = $7
	*($9 + [16]) = $10
	*($3 + [112]) = [0]
	*($9) = $4
	*($2) = ($9 + [24])
	$4 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( $4 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $74(($3 + [32]), ($3 + [112]), ($3 + [48]), ($3 + [88]))
	$4 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$10 = *($3 + [32])
	if ( ($10 == 0) ){ goto $label$17 }
	$2 = ($3 + [36])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$19 }
	
.LOOP $label$20:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$21 }
	CALL _ZdlPv($9)
	
.LABEL $label$21
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$20 }
	$4 = *(($3 + [32]))
	goto $label$18 
	
.LABEL $label$19
	$4 = $10
	
.LABEL $label$18
	*($2) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$17
	$global$0 = ($3 + [128])
}

void .FUNC $76 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $54($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $55(($4 + [72]), ($4 + [64]))
	CALL $56(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $133(($4 + [8]))
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10436])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $144($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10380])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [10380])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $78(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $147($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10380])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10380])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10380])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [10380])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $36 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$1 = ($global$0 - [112])
	$global$0 = $1
	$2 = CALL $141([8193])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9970])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8192]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [10015])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$5 = ((int_64)$3 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)0
	
.LABEL $label$1
	*((($1 + [32]) + [32])) = [0]
	*($1 + [48]) = (int_64)-1
	*($1 + [56]) = (int_64)0
	$3 = *($0)
	*($1 + [32]) = $3
	*($1 + [40]) = $5
	$2 = CALL db_find_i64($3, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*(CALL $88(($1 + [32]), $2) + [40]) == (int_32)($1 + [32])), [10385])
	goto $label$7 
	
.LABEL $label$8
	$6 = *($0 + [64])
	$2 = CALL $141([8193])
	if ( ($2 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [9970])
	goto $label$11 
	
.LABEL $label$12
	if ( ($2 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$3 = (int_64)0
	
.LOOP $label$13:
	$4 = *(($2 + [8192]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [10015])
	
.LABEL $label$14
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$13 }
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$9 
	
.LABEL $label$10
	$3 = (int_64)4
	
.LABEL $label$9
	$7 = ($0 + [32])
	*($1 + [16]) = (int_64)180224000000000
	*($1 + [24]) = $3
	CALL eosio_assert([1], [10068])
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$3 = $8
	$4 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$3 = $8
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $4 ){ goto $label$19 }
	$4 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$4 = [0]
	
.LABEL $label$15
	CALL eosio_assert($4, [8392])
	*(($1 + [8])) = *((($1 + [16]) + [8]))
	*($1) = *($1 + [16])
	CALL $71($7, $6, $1)
	
.LABEL $label$7
	$3 = *($0)
	*(($1 + [104])) = [0]
	*($1 + [80]) = $5
	*($1 + [72]) = $3
	*($1 + [88]) = (int_64)-1
	*($1 + [96]) = (int_64)0
	CALL $81(($1 + [72]), $5, [8733])
	$9 = *($1 + [96])
	if ( ($9 == 0) ){ goto $label$20 }
	$0 = ($1 + [100])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$22 }
	
.LOOP $label$23:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$24 }
	CALL _ZdlPv($4)
	
.LABEL $label$24
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$23 }
	$2 = *(($1 + [96]))
	goto $label$21 
	
.LABEL $label$22
	$2 = $9
	
.LABEL $label$21
	*($0) = $9
	CALL _ZdlPv($2)
	
.LABEL $label$20
	$9 = *($1 + [56])
	if ( ($9 == 0) ){ goto $label$25 }
	$0 = ($1 + [60])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$27 }
	
.LOOP $label$28:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$29 }
	CALL _ZdlPv($4)
	
.LABEL $label$29
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$28 }
	$2 = *(($1 + [56]))
	goto $label$26 
	
.LABEL $label$27
	$2 = $9
	
.LABEL $label$26
	*($0) = $9
	CALL _ZdlPv($2)
	
.LABEL $label$25
	$global$0 = ($1 + [112])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10436])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $144($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10380])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $38(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $147($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $78 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $133($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $79 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	$5 = *($2)
	$4 = *($2 + [8])
	$0 = CALL $80(($3 + [8]), (uint_64)$4 >> (uint_64)(int_64)8), [8784]
	CALL eosio_assert(((int_64)*($0)) >= (int_64)$5), [8808])
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($3 + [8])), [10510])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$7()), [10556])
	$6 = *($0 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)$6), [10262])
	$4 = (int_64)
	*($0) = $4(*($0) - $5))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [10310])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [10332])
	$4 = (uint_64)$6 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$4) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [10607])
	CALL eosio_assert([1], [10117])
	CALL memcpy(($3 + [48]), $0, [8])
	*($3 + [72]) = *($0 + [8])
	CALL eosio_assert([1], [10117])
	CALL memcpy((($3 + [48]) | [8]), ($3 + [72]), [8])
	CALL db_update_i64(*($0 + [20]), $1, ($3 + [48]), [16])
	if ( (uint_64)($4 <= *($3 + [24])) ){ goto $label$1 }
	*((($3 + [8]) + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$7 = *($3 + [32])
	if ( ($7 == 0) ){ goto $label$2 }
	$8 = ($3 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($3 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $7
	
.LABEL $label$3
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($3 + [80])
}

int_32 .FUNC $32 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [496])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $144($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [432]) + [24]))) = (int_64)0
	*(($3 = (($4 + [432]) + [16]))) = (int_64)0
	*($8) = [0]
	*($4 + [440]) = (int_64)0
	*($4 + [432]) = (int_64)0
	*($4 + [424]) = ($2 + $7)
	*($4 + [416]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[15]), [10380])
	CALL memcpy(($4 + [432]), $2, [16])
	*($4 + [420]) = ($2 + [16])
	CALL $65(($4 + [416]), $3)
	$8 = *($4 + [424])
	*((($4 + [16]) + [8])) = $8
	*(($4 + [8])) = $8
	$9 = *($4 + [416])
	*($4) = $9
	*($4 + [16]) = $9
	$10 = CALL $34(($4 + [32]), $0, $1, $4)
	*((($4 + [464]) + [24])) = [0]
	*($4 + [480]) = (int_64)0
	*($4 + [472]) = *($4 + [440])
	*($4 + [464]) = *($4 + [432])
	$3 = (*(($4 + [452])) - *($3))
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$4 }
	$8 = CALL _Znwj($3)
	*((($4 + [464]) + [16])) = $8
	*(($11 = (($4 + [464]) + [20]))) = $8
	*(($4 + [488])) = ($8 + $3)
	$12 = *((($4 + [432]) + [16]))
	$3 = (*((($4 + [432]) + [20])) - $12)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($8, $12, $3)
	*($11) = (*($11) + $3)
	
.LABEL $label$5
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 ($4 + [464])), (int_32 $6))
	$5 = *($4 + [480])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($4 + [484])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $147($2)
	
.LABEL $label$8
	CALL $35($10)
	$2 = *(($4 + [448]))
	if ( ($2 == 0) ){ goto $label$9 }
	*(($4 + [452])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$global$0 = ($4 + [496])
	return [1]
	
.LABEL $label$4
	CALL $133((($4 + [464]) + [16]))
	return (unreachable)
}

void .FUNC $33 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$1 = ($global$0 - [112])
	$global$0 = $1
	CALL $70($1)
	$2 = [0]
	if ( ((uint_64)((int_64)*($1 + [16]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$2 = [0]
	$3 = [0]
	$4 = (uint_64)*(($1 + [24])) >> (uint_64)(int_64)8
	$5 = $4)
	
.LOOP $label$2:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$1 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$1 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$4 = $5
	$2 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$8
	$4 = $5
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$9 }
	$2 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$6
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [9684])
	$9 = ($0 + [296])
	$5 = *(($1 + [24]))
	$8 = *(($0 + [324]))
	$2 = *(($0 + [320]))
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$11 }
	
.LOOP $label$13:
	$3 = ($8 + [-24])
	$7 = *($3)
	if ( ((int_64)*($7) == (int_64)$5) ){ goto $label$12 }
	$8 = $3
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$9), [10385])
	goto $label$10 
	
.LABEL $label$11
	$7 = [0]
	$3 = CALL db_find_i64(*($9), *(($0 + [304])), (int_64)-3665743316688306176, $5)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$10 }
	$7 = CALL $48($9, $3)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$9), [10385])
	
.LABEL $label$10
	$3 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($3, [8835])
	$4 = *($0)
	$6 = *($1)
	CALL eosio_assert($3, [10666])
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$9), [10510])
	CALL eosio_assert(((int_64)*(($0 + [296])) == (int_64)CALL $fimport$7()), [10556])
	$3 = ((int_64)*(($1 + [24])) == (int_64)*(($7 + [24])))
	$5 = *($7)
	if ( ((int_64)$6 != (int_64)$4) ){ goto $label$17 }
	CALL eosio_assert($3, [10262])
	$4 = (int_64)
	*($7 + [16]) = $4(*($7 + [16]) - *(($1 + [16]))))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [10310])
	CALL eosio_assert(((int_64)*($7 + [16]) < (int_64)4611686018427387904), [10332])
	CALL eosio_assert(((int_64)$5 == (int_64)*($7)), [10607])
	*($1 + [104]) = (($1 + [48]) + [48])
	*($1 + [100]) = ($1 + [48])
	*($1 + [96]) = ($1 + [48])
	CALL $49(($1 + [96]), $7)
	CALL db_update_i64(*($7 + [52]), $6, ($1 + [48]), [48])
	$3 = ($0 + [312])
	if ( (uint_64)($5 <= *($3)) ){ goto $label$16 }
	*($3) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	if ( (*($1 + [32]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	CALL eosio_assert($3, [10123])
	$6 = ((int_64)*($7 + [16]) + (int_64)*(($1 + [16])))
	*($7 + [16]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [10166])
	CALL eosio_assert(((int_64)*($7 + [16]) < (int_64)4611686018427387904), [10185])
	CALL eosio_assert(((int_64)$5 == (int_64)*($7)), [10607])
	*($1 + [104]) = (($1 + [48]) + [48])
	*($1 + [100]) = ($1 + [48])
	*($1 + [96]) = ($1 + [48])
	CALL $49(($1 + [96]), $7)
	CALL db_update_i64(*($7 + [52]), $4, ($1 + [48]), [48])
	$3 = ($0 + [312])
	if ( (uint_64)($5 <= *($3)) ){ goto $label$16 }
	*($3) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$14
	$global$0 = ($1 + [112])
}

int_32 .FUNC $30 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	float_64 $9
	$3 = ($global$0 - [432])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $144($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [424]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10380])
	CALL memcpy(($4 + [32]), $2, [8])
	*($4 + [416]) = *($4 + [32])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [10380])
	CALL memcpy((($4 + [416]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $34(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$9 = *($4 + [424])
	$0 = *($4 + [416])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $9), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $147($2)
	
.LABEL $label$6
	CALL $35($8)
	$global$0 = ($4 + [432])
	return [1]
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [160])
	$global$0 = $2
	$3 = *(($1 + [20]))
	$1 = *($1 + [16])
	$4 = CALL current_time()
	*(($2 + [108])) = (int_64)0
	*(($2 + [124])) = (int_64)0
	*(($2 + [132])) = (int_64)0
	*($2 + [92]) = [0]
	*($2 + [96]) = [0]
	*($2 + [100 align=4]) = (int_64)0
	*($2 + [116 align=4]) = (int_64)0
	*($2 + [80]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	*($2 + [28]) = $1
	*($2 + [24]) = $1
	*($2 + [32]) = $3
	CALL $66(($2 + [24]), ($2 + [80]))
	CALL $68(CALL $67(CALL $67(($2 + [24]), ($2 + [104])), ($2 + [116])), ($2 + [128]))
	*(($2 + [72])) = [0]
	*($2 + [64]) = (int_64)0
	$1 = CALL $141([9706])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$4 }
	*($2 + [64]) = ($1 << [1])
	$3 = (($2 + [64]) | [1])
	if ( $1 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [64]) = ($5 | [1])
	*($2 + [72]) = $3
	*($2 + [68]) = $1
	
.LABEL $label$3
	CALL memcpy($3, [9706], $1)
	
.LABEL $label$2
	*(($3 + $1)) = [0]
	*(($0 + [104])) = (int_64)0
	*(($0 + [96])) = (int_64)0
	$7 = *((($2 + [80]) + [40]))
	$6 = *((($2 + [80]) + [36]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$5 }
	$8 = (($2 + [144]) | [1])
	$9 = ($2 + [152])
	
.LOOP $label$6:
	$4 = *($6 + [8])
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$10 }
	$3 = [0]
	$5 = *([0] + [9776])
	
.LOOP $label$12:
	*((($2 + [24]) + ($1 = $3))) = *(($5 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$4 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$1 == (int_32)[12]) )))))
	$3 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[11]) ){ goto $label$11 }
	$4 = ((int_64)$4 << (int_64)5)
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$12 }
	
.LABEL $label$11
	*($9) = [0]
	*($2 + [144]) = (int_64)0
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$9 }
	*($2 + [144]) = ($3 << [1])
	$5 = $8
	goto $label$8 
	
.LABEL $label$10
	*($9) = [0]
	*($2 + [144]) = (int_64)0
	*($2 + [144]) = [0]
	$1 = $8
	goto $label$7 
	
.LABEL $label$9
	$10 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($10)
	*($9) = $5
	*($2 + [144]) = ($10 | [1])
	*($2 + [148]) = $3
	
.LABEL $label$8
	$10 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$13:
	*(($5 + $1)) = *((($2 + [24]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$13 }
	$1 = ($5 + $3)
	
.LABEL $label$7
	*($1) = [0]
	$1 = *($2 + [144])
	$3 = ($1 & [1])
	CALL $130(($2 + [64]), ( *($9) ? $8 : $3 ), ( *($2 + [148]) ? uint_32($1 >> [1]) : $3 ))
	CALL $129(($2 + [64]), [9725])
	if ( ((*($2 + [144]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$14
	$6 = ($6 + [40])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = *($0)
	$3 = CALL $126(($2 + [8]), ($2 + [64]))
	*($2 + [32]) = (int_64)-7119375207604682752
	*($2 + [24]) = $4
	*(($1 = CALL _Znwj([16]))) = $4
	*($1 + [8]) = (int_64)3617214756542218240
	*((($2 + [24]) + [36])) = [0]
	$5 = ($1 + [16])
	*(($2 + [48])) = $5
	*(($2 + [44])) = $5
	*($2 + [40]) = $1
	*($2 + [52 align=4]) = (int_64)0
	$1 = *($2 + [8])
	$1 = ( *($2 + [12]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$4 = (CASTING uint_64)(uint_32 $1)
	$5 = ($2 + [52])
	
.LOOP $label$15:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$15 }
	if ( ($1 == 0) ){ goto $label$17 }
	CALL $54($5, $1)
	$5 = *(($2 + [56]))
	$1 = *(($2 + [52]))
	goto $label$16 
	
.LABEL $label$17
	$5 = [0]
	$1 = [0]
	
.LABEL $label$16
	*($2 + [148]) = $1
	*($2 + [144]) = $1
	*($2 + [152]) = $5
	CALL $69(($2 + [144]), $3)
	CALL $56(($2 + [144]), ($2 + [24]))
	$1 = *($2 + [144])
	CALL send_inline($1, (*($2 + [148]) - $1))
	$1 = *($2 + [144])
	if ( ($1 == 0) ){ goto $label$18 }
	*($2 + [148]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$18
	$1 = *($2 + [52])
	if ( ($1 == 0) ){ goto $label$19 }
	*(($2 + [56])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$19
	$1 = *($2 + [40])
	if ( ($1 == 0) ){ goto $label$20 }
	*(($2 + [44])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$20
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($2 + [16]))
	
.LABEL $label$21
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($2 + [72]))
	
.LABEL $label$22
	CALL $52(($2 + [80]))
	$global$0 = ($2 + [160])
	return (unreachable)
	
.LABEL $label$1
	CALL $125(($2 + [64]))
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $141($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $127($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}