(data (i32.const 4) "@h\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "eosio.token\00")
(data (i32.const 128) "transfer\00")
(data (i32.const 144) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 208) "The template that you are looking for cannot be found!\00")
(data (i32.const 272) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 336) "Insufficient fund was sent.\00")
(data (i32.const 368) "active\00")
(data (i32.const 384) "multiplication overflow or underflow\00")
(data (i32.const 432) "multiplication underflow\00")
(data (i32.const 464) "multiplication overflow\00")
(data (i32.const 496) "Tokens paid to dev.\00")
(data (i32.const 528) "Tokens paid to merkley\00")
(data (i32.const 560) "attempt to subtract asset with different symbol\00")
(data (i32.const 608) "subtraction underflow\00")
(data (i32.const 640) "subtraction overflow\00")
(data (i32.const 672) "Return of EOS tokens\00")
(data (i32.const 704) "write\00")
(data (i32.const 720) "error reading iterator\00")
(data (i32.const 752) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 816) "invalid symbol name\00")
(data (i32.const 848) "read\00")
(data (i32.const 864) "get\00")
(data (i32.const 880) "cannot pass end iterator to erase\00")
(data (i32.const 928) "cannot increment end iterator\00")
(data (i32.const 960) "object passed to erase is not in multi_index\00")
(data (i32.const 1008) "cannot erase objects in table of another contract\00")
(data (i32.const 1072) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1136) "cannot create objects in table of another contract\00")
(data (i32.const 1200) "table\00")
(data (i32.const 1216) "failed to look up\00")
(data (i32.const 1248) "Smart contract template not found. Wrong template ID?\00")
(data (i32.const 1312) "Smart contract template not erased properly\00")
(data (i32.const 1360) "cannot pass end iterator to modify\00")
(data (i32.const 1408) "object passed to modify is not in multi_index\00")
(data (i32.const 1456) "cannot modify objects in table of another contract\00")
(data (i32.const 1520) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1584) "Template ID is longer than 13 characters\00")
(data (i32.const 1632) "Template ID should only contains the following symbol .12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 1728) "Smart contract template already exits!\00")
(data (i32.const 1768) "\f0\06\00\00")
(data (i32.const 1776) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 10208) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$8 (param i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$16 (param i64)))
(import "env" "require_auth2" (func $fimport$17 (param i64 i64)))
(import "env" "send_inline" (func $fimport$18 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $57))
(export "free" (func $60))
(export "memcmp" (func $70))
(export "strlen" (func $71))
(export "strnlen" (func $72))
(export "memchr" (func $73))
(table $0 7 7 anyfunc)
(elem (i32.const 0) $74 $8 $6 $16 $12 $14 $10)



void .FUNC $18 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [752])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [816])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $33($6, $0)
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $62 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [720])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $61([120])
	$6 = CALL $28($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [108])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $29(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $22($4)
	CALL $62($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $61(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $62($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $61($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $62($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$5 = *($0 + [4])
	*($1) = *(*(*($5) + [4]))
	$2 = *($0)
	CALL $64(($1 + [8]), (*(*($5) + [4]) + [8]))
	CALL $64(($1 + [20]), (*(*($5) + [4]) + [20]))
	*($1 + [32]) = *(*(*($5) + [4]) + [32])
	$3 = *(*($5) + [4])
	*($1 + [40]) = *($3 + [40])
	*(($1 + [48])) = *(($3 + [48]))
	CALL $64(($1 + [56]), (*(*($5) + [4]) + [56]))
	CALL $64(($1 + [68]), (*(*($5) + [4]) + [68]))
	CALL $64(($1 + [80]), (*(*($5) + [4]) + [80]))
	CALL $64(($1 + [92]), (*(*($5) + [4]) + [92]))
	*(($5 = $6)) = [0]
	CALL $40($5, $1)
	$3 = *($5)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($5 + [4]) = $6
	*($5) = $6
	*($5 + [8]) = ($6 + $3)
	CALL $41($5, $1)
	$4 = *($1)
	*($1 + [108]) = CALL db_store_i64(*($2 + [8]), (int_64)-4453310894032912384, *(*($0 + [8])), $4, $6, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

void .FUNC $67 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $61(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $67($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $22($1)
	CALL $62($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $62($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $28 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*(($0 + [16])) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*(($4 = ($0 + [48]))) = (int_64)1398362884
	CALL eosio_assert([1], [752])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [816])
	*($0 + [56 align=4]) = (int_64)0
	*(($0 + [64])) = (int_64)0
	*(($0 + [72])) = (int_64)0
	*($0 + [80 align=4]) = (int_64)0
	*(($0 + [88])) = (int_64)0
	*(($0 + [96])) = [0]
	*(($0 + [100])) = [0]
	*($0 + [104]) = $1
	CALL $30(*($2 + [4]), $0)
	*($0 + [108]) = *(*($2 + [8]))
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $23($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [704])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [704])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $25(CALL $24($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $61([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $23($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $26(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $61($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $67($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $62($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $22 (int_32 $0)
{
	if ( ((*($0 + [92]) & [1]) == 0) ){ goto $label$1 }
	CALL $62(*(($0 + [100])))
	
.LABEL $label$1
	if ( ((*($0 + [80]) & [1]) == 0) ){ goto $label$2 }
	CALL $62(*(($0 + [88])))
	
.LABEL $label$2
	if ( ((*($0 + [68]) & [1]) == 0) ){ goto $label$3 }
	CALL $62(*(($0 + [76])))
	
.LABEL $label$3
	if ( ((*($0 + [56]) & [1]) == 0) ){ goto $label$4 }
	CALL $62(*(($0 + [64])))
	
.LABEL $label$4
	if ( ((*($0 + [20]) & [1]) == 0) ){ goto $label$5 }
	CALL $62(*(($0 + [28])))
	
.LABEL $label$5
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL $62(*(($0 + [16])))
	
.LABEL $label$6
	return $0
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [704])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [704])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [704])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [704])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [704])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [704])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [704])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [704])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $27(*($1), ($0 + [32]))
}

void .FUNC $74 ()
{
	(unreachable)
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [1408])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1456])
	$4 = *($1)
	CALL $64(($1 + [8]), *($3))
	CALL $64(($1 + [20]), *($3 + [4]))
	$5 = *($3 + [8])
	*($1 + [40]) = *($5)
	*(($1 + [48])) = *(($5 + [8]))
	CALL $64(($1 + [56]), *($3 + [12]))
	CALL $64(($1 + [68]), *($3 + [16]))
	CALL $64(($1 + [80]), *($3 + [20]))
	CALL $64(($1 + [92]), *($3 + [24]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1520])
	*(($3 = $6)) = [0]
	CALL $40($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	CALL $41($3, $1)
	CALL db_update_i64(*($1 + [108]), $2, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [144])
	*([0] + [4]) = $11
	$0 = *($0 + [4])
	$10 = *($0 + [4])
	$9 = (*(*($0)) + int_32($10 >> [1]))
	$0 = *($0)
	if ( (($10 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($9) + $0))
	
.LABEL $label$1
	CALL $68(($11 + [128]), $1)
	CALL $68(($11 + [112]), $2)
	CALL $68(($11 + [96]), $3)
	*(($1 = (($11 + [80]) + [8]))) = *(($4 + [8]))
	*($11 + [80]) = *($4)
	CALL $68(($11 + [64]), $5)
	CALL $68(($11 + [48]), $6)
	CALL $68(($11 + [32]), $7)
	CALL $68(($11 + [16]), $8)
	*(($11 + [8])) = *($1)
	*($11) = *($11 + [80])
	CALL void $9((int_32 ($11 + [128])), (int_32 ($11 + [112])), (int_32 ($11 + [96])), (int_32 $11), (int_32 ($11 + [64])), (int_32 ($11 + [48])), (int_32 ($11 + [32])), (int_32 ($11 + [16])), (int_32 $0))
	if ( ((*($11 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $62(*($11 + [24]))
	
.LABEL $label$2
	if ( ((*($11 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $62(*($11 + [40]))
	
.LABEL $label$3
	if ( ((*($11 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL $62(*($11 + [56]))
	
.LABEL $label$4
	if ( ((*($11 + [64]) & [1]) == 0) ){ goto $label$5 }
	CALL $62(*($11 + [72]))
	
.LABEL $label$5
	if ( ((*($11 + [96]) & [1]) == 0) ){ goto $label$6 }
	CALL $62(*($11 + [104]))
	
.LABEL $label$6
	if ( ((*($11 + [112]) & [1]) == 0) ){ goto $label$7 }
	CALL $62(*($11 + [120]))
	
.LABEL $label$7
	if ( ((*($11 + [128]) & [1]) == 0) ){ goto $label$8 }
	CALL $62(*($11 + [136]))
	
.LABEL $label$8
	*([0] + [4]) = ($11 + [144])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $61($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $61($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $61(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $67($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $37($1)
	CALL $62($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $62($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $42 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*(($0 + [16])) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*(($4 = ($0 + [48]))) = (int_64)1398362884
	CALL eosio_assert([1], [752])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [816])
	*($0 + [56 align=4]) = (int_64)0
	*(($0 + [64])) = (int_64)0
	*(($0 + [72])) = (int_64)0
	*($0 + [80 align=4]) = (int_64)0
	*(($0 + [88])) = (int_64)0
	*(($0 + [96])) = [0]
	*(($0 + [100])) = [0]
	*($0 + [104]) = $1
	CALL $44(*($2 + [4]), $0)
	*($0 + [108]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $27(CALL $27(CALL $27(CALL $27($0, ($1 + [56])), ($1 + [68])), ($1 + [80])), ($1 + [92]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($0 + [4]), $1, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $27(CALL $27($0, ($1 + [8])), ($1 + [20]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [704])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [704])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [704])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*($0) + [8])
	*($0) = $4
	$2 = *($1 + [8])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [12])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $4
	$2 = *(($1 + [8]))
	$2 = ( *(($1 + [12])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$2
	$2 = *($1 + [20])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [24])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $4
	$2 = *(($1 + [20]))
	$2 = ( *(($1 + [24])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$4
	$4 = ($4 + [24])
	*($0) = $4
	$2 = *($1 + [56])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [60])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$5:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$5 }
	*($0) = $4
	$2 = *(($1 + [56]))
	$2 = ( *(($1 + [60])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$6 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$6
	$2 = *($1 + [68])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [72])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$7:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$7 }
	*($0) = $4
	$2 = *(($1 + [68]))
	$2 = ( *(($1 + [72])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$8
	$2 = *($1 + [80])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [84])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$9:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $4
	$2 = *(($1 + [80]))
	$2 = ( *(($1 + [84])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$10 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$10
	$2 = *($1 + [92])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [96])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$11:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$11 }
	*($0) = $4
	$1 = *(($1 + [92]))
	$1 = ( *(($1 + [96])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$12 }
	*($0) = ($1 + $4)
	
.LABEL $label$12
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [144])
	*([0] + [4]) = $3
	CALL $68(($3 + [128]), $1)
	CALL $68(($3 + [112]), ($1 + [12]))
	CALL $68(($3 + [96]), ($1 + [24]))
	*(($2 = (($3 + [80]) + [8]))) = *(($1 + [48]))
	*($3 + [80]) = *($1 + [40])
	CALL $68(($3 + [64]), ($1 + [56]))
	CALL $68(($3 + [48]), ($1 + [68]))
	CALL $68(($3 + [32]), ($1 + [80]))
	CALL $68(($3 + [16]), ($1 + [92]))
	*(($3 + [8])) = *($2)
	*($3) = *($3 + [80])
	CALL $48($0, ($3 + [128]), ($3 + [112]), ($3 + [96]), $3, ($3 + [64]), ($3 + [48]), ($3 + [32]), ($3 + [16]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$1 }
	CALL $62(*($3 + [24]))
	
.LABEL $label$1
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$2 }
	CALL $62(*($3 + [40]))
	
.LABEL $label$2
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$3 }
	CALL $62(*($3 + [56]))
	
.LABEL $label$3
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$4 }
	CALL $62(*($3 + [72]))
	
.LABEL $label$4
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$5 }
	CALL $62(*($3 + [104]))
	
.LABEL $label$5
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$6 }
	CALL $62(*($3 + [120]))
	
.LABEL $label$6
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$7 }
	CALL $62(*($3 + [136]))
	
.LABEL $label$7
	*([0] + [4]) = ($3 + [144])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	CALL $31(*($1), *($0))
	$2 = *($0)
	CALL $31(*($1), ($2 + [12]))
	CALL $31(*($1), ($2 + [24]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [848])
	CALL memcpy(($2 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [848])
	CALL memcpy(($2 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $31(*($1), ($2 + [56]))
	CALL $31(*($1), ($2 + [68]))
	CALL $31(*($1), ($2 + [80]))
	CALL $31(*($1), ($2 + [92]))
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [960])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1008])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1072])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $22($4)
	CALL $62($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $22($4)
	CALL $62($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [108]))
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $31(CALL $31(CALL $31(CALL $31($0, ($1 + [56])), ($1 + [68])), ($1 + [80])), ($1 + [92]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [848])
	CALL memcpy($1, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $31(CALL $31($0, ($1 + [8])), ($1 + [20]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC strnlen (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL memchr($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	$2 = *($1)
	CALL $68(($4 + [128]), ($1 + [8]))
	CALL $68(($4 + [112]), ($1 + [20]))
	CALL $68(($4 + [96]), ($1 + [32]))
	*(($3 = (($4 + [80]) + [8]))) = *(($1 + [56]))
	*($4 + [80]) = *($1 + [48])
	CALL $68(($4 + [64]), ($1 + [64]))
	CALL $68(($4 + [48]), ($1 + [76]))
	CALL $68(($4 + [32]), ($1 + [88]))
	CALL $68(($4 + [16]), ($1 + [100]))
	*(($4 + [8])) = *($3)
	*($4) = *($4 + [80])
	CALL $52($0, $2, ($4 + [128]), ($4 + [112]), ($4 + [96]), $4, ($4 + [64]), ($4 + [48]), ($4 + [32]), ($4 + [16]))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$1 }
	CALL $62(*($4 + [24]))
	
.LABEL $label$1
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$2 }
	CALL $62(*($4 + [40]))
	
.LABEL $label$2
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$3 }
	CALL $62(*($4 + [56]))
	
.LABEL $label$3
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$4 }
	CALL $62(*($4 + [72]))
	
.LABEL $label$4
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$5 }
	CALL $62(*($4 + [104]))
	
.LABEL $label$5
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$6 }
	CALL $62(*($4 + [120]))
	
.LABEL $label$6
	if ( ((*($4 + [128]) & [1]) == 0) ){ goto $label$7 }
	CALL $62(*($4 + [136]))
	
.LABEL $label$7
	*([0] + [4]) = ($4 + [144])
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10196])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10004]
	$1 = (((int_32)$2 * (int_32)[12]) + [10004])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [80])
	*([0] + [4]) = $18
	CALL require_auth(*($0))
	*(($18 + [72])) = [0]
	*($18 + [56]) = (int_64)-1
	*($18 + [64]) = (int_64)0
	$9 = *($0)
	*($18 + [40]) = $9
	*($18 + [48]) = $9
	if ( (*($1) & [1]) ){ goto $label$2 }
	$1 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($1 + [8])
	
.LABEL $label$1
	$13 = [-1]
	
.LOOP $label$3:
	$12 = ($1 + $13)
	$10 = ($13 + [1])
	$13 = $10
	if ( *(($12 + [1])) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $10)
	$15 = (int_64)0
	$14 = (int_64)59
	$16 = (int_64)0
	
.LOOP $label$4:
	$17 = (int_64)0
	if ( ((uint_64)$15 >= (uint_64)$11) ){ goto $label$5 }
	$13 = *($1)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$13 = ($13 + [165])
	goto $label$6 
	
.LABEL $label$7
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$15 > (uint_64)(int_64)11) ){ goto $label$9 }
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$17 = ((int_64)$17 & (int_64)15)
	
.LABEL $label$8
	$1 = ($1 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$4 }
	$1 = [0]
	$13 = CALL db_find_i64($9, $9, (int_64)-4453310894032912384, $16)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$10 }
	$1 = CALL $19(($18 + [40]), $13)
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)($18 + [40])), [144])
	
.LABEL $label$10
	$13 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($13, [1248])
	$15 = *($0)
	*($18 + [12]) = $3
	*($18 + [8]) = $2
	*($18 + [16]) = $4
	*($18 + [20]) = $5
	*($18 + [24]) = $6
	*($18 + [28]) = $7
	*($18 + [32]) = $8
	CALL eosio_assert($13, [1360])
	CALL $49(($18 + [40]), $1, $15, ($18 + [8]))
	$12 = *($18 + [64])
	if ( ($12 == 0) ){ goto $label$11 }
	$10 = ($18 + [68])
	$1 = *($10)
	if ( ((int_32)$1 == (int_32)$12) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($1 + [-24])
	$13 = *($1)
	*($1) = [0]
	if ( ($13 == 0) ){ goto $label$15 }
	CALL $22($13)
	CALL $62($13)
	
.LABEL $label$15
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$14 }
	$1 = *(($18 + [64]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $12
	
.LABEL $label$12
	*($10) = $12
	CALL $62($1)
	
.LABEL $label$11
	*([0] + [4]) = ($18 + [80])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	*(($5 = $4) + [124]) = $0
	*($5 + [112]) = *($1)
	*($5 + [116]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)0
	*(($5 + [40])) = [0]
	*($5 + [8]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*(($4 = ($5 + [56]))) = (int_64)1398362884
	CALL eosio_assert([1], [752])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [816])
	*(($5 + [72])) = (int_64)0
	*(($5 + [80])) = (int_64)0
	*(($5 + [96])) = (int_64)0
	*(($5 + [104])) = [0]
	*($5 + [64]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*(($5 + [108])) = [0]
	*($5 + [132]) = $0
	*($5 + [128]) = $0
	*($5 + [136]) = ($0 + $2)
	*($5 + [144]) = ($5 + [128])
	*($5 + [152]) = ($5 + [8])
	CALL $46(($5 + [152]), ($5 + [144]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [132]) = ($5 + [112])
	*($5 + [128]) = ($5 + [124])
	CALL $47(($5 + [128]), ($5 + [8]))
	if ( ((*($5 + [100]) & [1]) == 0) ){ goto $label$10 }
	CALL $62(*(($5 + [108])))
	
.LABEL $label$10
	if ( ((*($5 + [88]) & [1]) == 0) ){ goto $label$11 }
	CALL $62(*(($5 + [96])))
	
.LABEL $label$11
	if ( ((*($5 + [76]) & [1]) == 0) ){ goto $label$12 }
	CALL $62(*(($5 + [84])))
	
.LABEL $label$12
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$13 }
	CALL $62(*(($5 + [72])))
	
.LABEL $label$13
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$14 }
	CALL $62(*(($5 + [40])))
	
.LABEL $label$14
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$15 }
	CALL $62(*(($5 + [28])))
	
.LABEL $label$15
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$16 }
	CALL $62(*(($5 + [16])))
	
.LABEL $label$16
	*([0] + [4]) = ($5 + [160])
	return [1]
}

void .FUNC $6 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9)
{
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	$20 = (*([0] + [4]) - [112])
	*([0] + [4]) = $20
	*($20 + [104]) = $1
	CALL require_auth(*($0))
	*(($20 + [96])) = [0]
	*($20 + [80]) = (int_64)-1
	*($20 + [88]) = (int_64)0
	$1 = *($0)
	*($20 + [64]) = $1
	*($20 + [72]) = $1
	if ( (*($2) & [1]) ){ goto $label$2 }
	$16 = ($2 + [1])
	goto $label$1 
	
.LABEL $label$2
	$16 = *($2 + [8])
	
.LABEL $label$1
	CALL eosio_assert((CALL $72($16, [14]) <= [14]), [1584])
	if ( (*($2) & [1]) ){ goto $label$4 }
	$16 = ($2 + [1])
	goto $label$3 
	
.LABEL $label$4
	$16 = *($2 + [8])
	
.LABEL $label$3
	$15 = [-1]
	
.LOOP $label$5:
	$14 = ($16 + $15)
	$10 = ($15 + [1])
	$15 = $10
	if ( *(($14 + [1])) ){ goto $label$5 }
	$11 = (CASTING uint_64)(uint_32 $10)
	$1 = (int_64)0
	$17 = (int_64)59
	$18 = (int_64)0
	
.LOOP $label$6:
	$19 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$11) ){ goto $label$7 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$15 = ($15 + [165])
	goto $label$8 
	
.LABEL $label$9
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$11 }
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	goto $label$10 
	
.LABEL $label$11
	$19 = ((int_64)$19 & (int_64)15)
	
.LABEL $label$10
	$16 = ($16 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$18 = ((int_64)$19 | (int_64)$18)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$6 }
	*($20 + [56]) = $18
	*($20 + [48]) = $18
	CALL $53(($20 + [8]), ($20 + [48]))
	$10 = [0]
	$15 = ($16 & [1])
	$16 = *($2)
	$14 = ($16 & [1])
	$16 = *($20 + [8])
	$12 = uint_32($16 >> [1])
	$13 = ( *($20 + [12]) ? $12 : $14 )
	if ( ((int_32)$13 != (int_32)( *($2 + [4]) ? uint_32($16 >> [1]) : $15 )) ){ goto $label$12 }
	$16 = (($20 + [8]) | [1])
	$15 = ( *($2 + [8]) ? ($2 + [1]) : $15 )
	if ( $14 ){ goto $label$15 }
	if ( ($13 == 0) ){ goto $label$14 }
	$14 = ([0] - $12)
	
.LOOP $label$16:
	if ( ((int_32)*($16) != (int_32)*($15)) ){ goto $label$13 }
	$10 = [1]
	$15 = ($15 + [1])
	$16 = ($16 + [1])
	$14 = ($14 + [1])
	if ( $14 ){ goto $label$16 }
	goto $label$12 
	
.LABEL $label$15
	if ( ($13 == 0) ){ goto $label$14 }
	$10 = (CALL memcmp(( *($20 + [16]) ? $16 : $14 ), $15, $13) == 0)
	goto $label$12 
	
.LABEL $label$14
	$10 = [1]
	goto $label$12 
	
.LABEL $label$13
	$10 = [0]
	
.LABEL $label$12
	CALL eosio_assert($10, [1632])
	if ( ((*($20 + [8]) & [1]) == 0) ){ goto $label$17 }
	CALL $62(*($20 + [16]))
	
.LABEL $label$17
	$1 = *($20 + [56])
	$2 = *(($20 + [88]))
	$14 = *(($20 + [92]))
	if ( ((int_32)$14 == (int_32)$2) ){ goto $label$18 }
	$16 = ($14 + [-24])
	$10 = ([0] - $2)
	
.LOOP $label$19:
	if ( ((int_64)*(*($16)) == (int_64)$1) ){ goto $label$18 }
	$14 = $16
	$15 = ($16 + [-24])
	$16 = $15
	if ( ((int_32)($15 + $10) != (int_32)[-24]) ){ goto $label$19 }
	
.LABEL $label$18
	if ( ((int_32)$14 == (int_32)$2) ){ goto $label$21 }
	$16 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [104]) == (int_32)($20 + [64])), [144])
	goto $label$20 
	
.LABEL $label$21
	$16 = [0]
	$15 = CALL db_find_i64(*($20 + [64]), *(($20 + [72])), (int_64)-4453310894032912384, $1)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$20 }
	$16 = CALL $19(($20 + [64]), $15)
	CALL eosio_assert(((int_32)*($16 + [104]) == (int_32)($20 + [64])), [144])
	
.LABEL $label$20
	CALL eosio_assert(($16 == 0), [1728])
	$1 = *($0)
	*($20 + [12]) = $3
	*($20 + [16]) = $4
	*($20 + [24]) = $5
	*($20 + [28]) = $6
	*($20 + [32]) = $7
	*($20 + [8]) = ($20 + [56])
	*($20 + [20]) = ($20 + [104])
	*($20 + [36]) = $8
	*($20 + [40]) = $9
	CALL $54(($20 + [48]), ($20 + [64]), $1, ($20 + [8]))
	$14 = *($20 + [88])
	if ( ($14 == 0) ){ goto $label$22 }
	$10 = ($20 + [92])
	$16 = *($10)
	if ( ((int_32)$16 == (int_32)$14) ){ goto $label$24 }
	
.LOOP $label$25:
	$16 = ($16 + [-24])
	$15 = *($16)
	*($16) = [0]
	if ( ($15 == 0) ){ goto $label$26 }
	CALL $22($15)
	CALL $62($15)
	
.LABEL $label$26
	if ( ((int_32)$14 != (int_32)$16) ){ goto $label$25 }
	$16 = *(($20 + [88]))
	goto $label$23 
	
.LABEL $label$24
	$16 = $14
	
.LABEL $label$23
	*($10) = $14
	CALL $62($16)
	
.LABEL $label$22
	*([0] + [4]) = ($20 + [112])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [144])
	*([0] + [4]) = $2
	*(($3 = $2) + [140]) = $0
	*($3 + [128]) = *($1)
	*($3 + [132]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $50(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [12]) = ($3 + [128])
	*($3 + [8]) = ($3 + [140])
	CALL $51(($3 + [8]), ($3 + [16]))
	if ( ((*($3 + [116]) & [1]) == 0) ){ goto $label$6 }
	CALL $62(*(($3 + [124])))
	
.LABEL $label$6
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$7 }
	CALL $62(*(($3 + [112])))
	
.LABEL $label$7
	if ( ((*($3 + [92]) & [1]) == 0) ){ goto $label$8 }
	CALL $62(*(($3 + [100])))
	
.LABEL $label$8
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$9 }
	CALL $62(*(($3 + [88])))
	
.LABEL $label$9
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$10 }
	CALL $62(*(($3 + [56])))
	
.LABEL $label$10
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$11 }
	CALL $62(*(($3 + [44])))
	
.LABEL $label$11
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$12 }
	CALL $62(*(($3 + [32])))
	
.LABEL $label$12
	*([0] + [4]) = ($3 + [144])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	*($9 + [96]) = $0
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$21 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	if ( ((int_64)$2 > (int_64)5031766165509111807) ){ goto $label$26 }
	if ( ((int_64)$2 == (int_64)-7811085199994781696) ){ goto $label$25 }
	if ( ((int_64)$2 == (int_64)-4417100715441258496) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)-3075276113711202304) ){ goto $label$14 }
	*($9 + [84]) = [0]
	*($9 + [80]) = [1]
	*($9 + [8 align=4]) = *($9 + [80])
	CALL $9(($9 + [96]), ($9 + [8]))
	goto $label$14 
	
.LABEL $label$26
	if ( ((int_64)$2 == (int_64)7112114330627211264) ){ goto $label$23 }
	if ( ((int_64)$2 == (int_64)5378050755607396352) ){ goto $label$22 }
	if ( ((int_64)$2 != (int_64)5031766165509111808) ){ goto $label$14 }
	*($9 + [92]) = [0]
	*($9 + [88]) = [2]
	*($9) = *($9 + [88])
	CALL $7(($9 + [96]), $9)
	goto $label$14 
	
.LABEL $label$25
	*($9 + [52]) = [0]
	*($9 + [48]) = [3]
	*($9 + [40 align=4]) = *($9 + [48])
	CALL $15(($9 + [96]), ($9 + [40]))
	goto $label$14 
	
.LABEL $label$24
	*($9 + [68]) = [0]
	*($9 + [64]) = [4]
	*($9 + [24 align=4]) = *($9 + [64])
	CALL $13(($9 + [96]), ($9 + [24]))
	goto $label$14 
	
.LABEL $label$23
	*($9 + [60]) = [0]
	*($9 + [56]) = [5]
	*($9 + [32 align=4]) = *($9 + [56])
	CALL $15(($9 + [96]), ($9 + [32]))
	goto $label$14 
	
.LABEL $label$22
	*($9 + [76]) = [0]
	*($9 + [72]) = [6]
	*($9 + [16 align=4]) = *($9 + [72])
	CALL $11(($9 + [96]), ($9 + [16]))
	
.LABEL $label$14
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$32 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$3 = ($3 + [165])
	goto $label$30 
	
.LABEL $label$32
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$28
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$27 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$33 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$34:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$39 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$3 = ($3 + [165])
	goto $label$37 
	
.LABEL $label$39
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$36
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$35
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$34 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$33 }
	CALL $17(($9 + [96]), $0, $1)
	
.LABEL $label$33
	*([0] + [4]) = ($9 + [112])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$1 = *($0)
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [1200]
	$6 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$5 > (uint_64)(int_64)4) ){ goto $label$6 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$7 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	$3 = CALL db_find_i64($1, $1, $6, $1)
	CALL eosio_assert(((int_32)uint_32($3 >> [31]) ^ (int_32)[1]), [1216])
	CALL db_get_i64($3, ($0 + [8]), [8])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $16 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL require_auth(*($0))
	*((($5 + [64]) + [32])) = [0]
	*($5 + [80]) = (int_64)-1
	*($5 + [88]) = (int_64)0
	$1 = *($0)
	*($5 + [64]) = $1
	*($5 + [72]) = $1
	*((($5 + [24]) + [32])) = [0]
	*($5 + [32]) = $1
	*($5 + [24]) = $1
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	$4 = CALL db_lowerbound_i64($1, $1, (int_64)-4453310894032911872, (int_64)0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$2 }
	*($5 + [20]) = CALL $34(($5 + [64]), $4)
	*($5 + [16]) = ($5 + [64])
	
.LOOP $label$3:
	$1 = *($0)
	*($5 + [8]) = ($5 + [16])
	CALL $35(($5 + [104]), ($5 + [24]), $1, ($5 + [8]))
	$4 = [0]
	$1 = *($5 + [16])
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	$3 = ((int_32)$2) != (int_32)[0]
	CALL eosio_assert($3), [880])
	CALL eosio_assert($3, [928])
	$3 = CALL db_next_i64(*($2 + [108]), ($5 + [104]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $34((CASTING uint_32)(uint_64 $1), $3)
	
.LABEL $label$4
	CALL $36(($5 + [64]), $2)
	*($5 + [16]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)32) | (int_64)((int_64)$1 & (int_64)4294967295))
	if ( $4 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($5 + [20]) = [0]
	*($5 + [16]) = ($5 + [64])
	
.LABEL $label$1
	$3 = *($5 + [48])
	if ( ($3 == 0) ){ goto $label$5 }
	$0 = ($5 + [52])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	CALL $22($2)
	CALL $62($2)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	$4 = *(($5 + [48]))
	goto $label$6 
	
.LABEL $label$7
	$4 = $3
	
.LABEL $label$6
	*($0) = $3
	CALL $62($4)
	
.LABEL $label$5
	$3 = *($5 + [88])
	if ( ($3 == 0) ){ goto $label$10 }
	$0 = ($5 + [92])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$14 }
	CALL $37($2)
	CALL $62($2)
	
.LABEL $label$14
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$13 }
	$4 = *(($5 + [88]))
	goto $label$11 
	
.LABEL $label$12
	$4 = $3
	
.LABEL $label$11
	*($0) = $3
	CALL $62($4)
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $17 (int_32 $0, int_64 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [224])
	*([0] + [4]) = $13
	CALL $18(($13 + [160]))
	if ( ((int_64)*($13 + [160]) == (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)*($13 + [168]) != (int_64)$1) ){ goto $label$2 }
	CALL $14($0)
	*(($13 + [152])) = [0]
	*($13 + [136]) = (int_64)-1
	*($13 + [144]) = (int_64)0
	$3 = *($0)
	*($13 + [120]) = $3
	*($13 + [128]) = $3
	$8 = ( *(($13 + [200])) ? ($13 + [193]) : (*($13 + [192]) & [1]) )
	$7 = [-1]
	
.LOOP $label$3:
	$6 = ($8 + $7)
	$4 = ($7 + [1])
	$7 = $4
	if ( *(($6 + [1])) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $4)
	$1 = (int_64)0
	$11 = (int_64)59
	$9 = (int_64)0
	
.LOOP $label$4:
	$10 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$12) ){ goto $label$5 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$7 = ($7 + [165])
	goto $label$6 
	
.LABEL $label$7
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$9 }
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$10 = ((int_64)$10 & (int_64)15)
	
.LABEL $label$8
	$8 = ($8 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$4 }
	$6 = [0]
	$8 = CALL db_find_i64($3, $3, (int_64)-4453310894032912384, $9)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$10 }
	$6 = CALL $19(($13 + [120]), $8)
	CALL eosio_assert(((int_32)*($6 + [104]) == (int_32)($13 + [120])), [144])
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [208])
	CALL eosio_assert(((int_64)*(($13 + [184])) == (int_64)*(($6 + [48]))), [272])
	CALL eosio_assert(((int_64)*($13 + [176]) >= (int_64)*($6 + [40])), [336])
	$12 = *($0)
	$1 = (int_64)0
	$10 = (int_64)59
	$8 = [368]
	$9 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$16 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$7 = ($7 + [165])
	goto $label$14 
	
.LABEL $label$16
	$11 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$12
	$8 = ($8 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$9 = ((int_64)$11 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$11 }
	*($13 + [72]) = $9
	*($13 + [64]) = $12
	$1 = (int_64)0
	$10 = (int_64)59
	$8 = [112]
	$9 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$22 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$7 = ($7 + [165])
	goto $label$20 
	
.LABEL $label$22
	$11 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$18
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$9 = ((int_64)$11 | (int_64)$9)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$17 }
	$1 = (int_64)0
	$10 = (int_64)59
	$8 = [128]
	$12 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$28 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$7 = ($7 + [165])
	goto $label$26 
	
.LABEL $label$28
	$11 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$24
	$8 = ($8 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$12 = ((int_64)$11 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$23 }
	$11 = *(($6 + [48]))
	$1 = *(($6 + [40]))
	CALL eosio_assert([1], [384])
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [432])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [464])
	*(($13 + [8])) = [0]
	*($13) = (int_64)0
	$1 = ((int_64)((int_64)$1 << (int_64)3) / (int_64)10)
	$8 = CALL strlen([496])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$31 }
	*($13) = ($8 << [1])
	$7 = ($13 | [1])
	if ( $8 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $61($4)
	*($13) = ($4 | [1])
	*($13 + [8]) = $7
	*($13 + [4]) = $8
	
.LABEL $label$30
	CALL memcpy($7, [496], $8)
	
.LABEL $label$29
	*(($7 + $8)) = [0]
	$10 = *(($6 + [32]))
	*(($13 + [40])) = $11
	*(($13 + [52])) = *($13 + [4 align=4])
	*($13 + [16]) = *($0)
	*($13 + [24]) = $10
	*($13 + [32]) = $1
	*($13 + [48]) = *($13)
	*($13) = [0]
	*($13 + [4]) = [0]
	*(($13 + [8])) = [0]
	$8 = CALL $20(($13 + [80]), ($13 + [64]), $9, $12, ($13 + [16]))
	CALL $21(($13 + [208]), $8)
	$7 = *($13 + [208])
	CALL send_inline($7, (*($13 + [212]) - $7))
	$7 = *($13 + [208])
	if ( ($7 == 0) ){ goto $label$32 }
	*($13 + [212]) = $7
	CALL $62($7)
	
.LABEL $label$32
	$7 = *($8 + [28])
	if ( ($7 == 0) ){ goto $label$33 }
	*(($8 + [32])) = $7
	CALL $62($7)
	
.LABEL $label$33
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$34 }
	*(($8 + [20])) = $7
	CALL $62($7)
	
.LABEL $label$34
	if ( ((*(($13 + [48])) & [1]) == 0) ){ goto $label$35 }
	CALL $62(*(($13 + [56])))
	
.LABEL $label$35
	if ( ((*($13) & [1]) == 0) ){ goto $label$36 }
	CALL $62(*(($13 + [8])))
	
.LABEL $label$36
	$12 = *($0)
	$1 = (int_64)0
	$10 = (int_64)59
	$8 = [368]
	$9 = (int_64)0
	
.LOOP $label$37:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$42 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$7 = ($7 + [165])
	goto $label$40 
	
.LABEL $label$42
	$11 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$41
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$39
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$38
	$8 = ($8 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$9 = ((int_64)$11 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$37 }
	*($13 + [72]) = $9
	*($13 + [64]) = $12
	$1 = (int_64)0
	$10 = (int_64)59
	$8 = [112]
	$9 = (int_64)0
	
.LOOP $label$43:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$48 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$47 }
	$7 = ($7 + [165])
	goto $label$46 
	
.LABEL $label$48
	$11 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$47
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$46
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$45
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$44
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$9 = ((int_64)$11 | (int_64)$9)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$43 }
	$1 = (int_64)0
	$10 = (int_64)59
	$8 = [128]
	$12 = (int_64)0
	
.LOOP $label$49:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$54 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$53 }
	$7 = ($7 + [165])
	goto $label$52 
	
.LABEL $label$54
	$11 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$53
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$52
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$51
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$50
	$8 = ($8 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$12 = ((int_64)$11 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$49 }
	$11 = *(($6 + [48]))
	$1 = *(($6 + [40]))
	CALL eosio_assert([1], [384])
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [432])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [464])
	*(($13 + [8])) = [0]
	*($13) = (int_64)0
	$1 = ((int_64)$1 / (int_64)5)
	$8 = CALL strlen([528])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$57 }
	*($13) = ($8 << [1])
	$7 = ($13 | [1])
	if ( $8 ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$57
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $61($4)
	*($13) = ($4 | [1])
	*($13 + [8]) = $7
	*($13 + [4]) = $8
	
.LABEL $label$56
	CALL memcpy($7, [528], $8)
	
.LABEL $label$55
	*(($7 + $8)) = [0]
	*(($13 + [40])) = $11
	*($13 + [24]) = *(($0 + [8]))
	$8 = ($13 + [8])
	*(($13 + [56])) = *($8)
	*($13 + [16]) = *($0)
	*($13 + [32]) = $1
	*($13 + [48]) = *($13)
	*($13) = [0]
	*($13 + [4]) = [0]
	*($8) = [0]
	$8 = CALL $20(($13 + [80]), ($13 + [64]), $9, $12, ($13 + [16]))
	CALL $21(($13 + [208]), $8)
	$7 = *($13 + [208])
	CALL send_inline($7, (*($13 + [212]) - $7))
	$7 = *($13 + [208])
	if ( ($7 == 0) ){ goto $label$58 }
	*($13 + [212]) = $7
	CALL $62($7)
	
.LABEL $label$58
	$7 = *($8 + [28])
	if ( ($7 == 0) ){ goto $label$59 }
	*(($8 + [32])) = $7
	CALL $62($7)
	
.LABEL $label$59
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$60 }
	*(($8 + [20])) = $7
	CALL $62($7)
	
.LABEL $label$60
	if ( ((*(($13 + [48])) & [1]) == 0) ){ goto $label$61 }
	CALL $62(*(($13 + [56])))
	
.LABEL $label$61
	if ( ((*($13) & [1]) == 0) ){ goto $label$62 }
	CALL $62(*(($13 + [8])))
	
.LABEL $label$62
	$1 = *(($13 + [176]))
	$5 = *(($13 + [184]))
	CALL eosio_assert(((int_64)*(($6 + [48])) == (int_64)$5), [560])
	$3 = (int_64)
	CALL eosio_assert(((int_64)$3($1 - *(($6 + [40])))) > (int_64)-4611686018427387904), [608])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [640])
	if ( ((int_64)$3 < (int_64)1) ){ goto $label$63 }
	$12 = *($0)
	$1 = (int_64)0
	$10 = (int_64)59
	$8 = [368]
	$9 = (int_64)0
	
.LOOP $label$64:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$69 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$68 }
	$7 = ($7 + [165])
	goto $label$67 
	
.LABEL $label$69
	$11 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$68
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$67
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$66
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$65
	$8 = ($8 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$9 = ((int_64)$11 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$64 }
	*($13 + [72]) = $9
	*($13 + [64]) = $12
	$1 = (int_64)0
	$10 = (int_64)59
	$8 = [112]
	$9 = (int_64)0
	
.LOOP $label$70:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$75 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$74 }
	$7 = ($7 + [165])
	goto $label$73 
	
.LABEL $label$75
	$11 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$74
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$73
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$72
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$71
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$9 = ((int_64)$11 | (int_64)$9)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$70 }
	$1 = (int_64)0
	$10 = (int_64)59
	$8 = [128]
	$12 = (int_64)0
	
.LOOP $label$76:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$81 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$80 }
	$7 = ($7 + [165])
	goto $label$79 
	
.LABEL $label$81
	$11 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$78 }
	goto $label$77 
	
.LABEL $label$80
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$79
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$78
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$77
	$8 = ($8 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$12 = ((int_64)$11 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$76 }
	*(($13 + [8])) = [0]
	*($13) = (int_64)0
	$8 = CALL strlen([672])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$84 }
	*($13) = ($8 << [1])
	$7 = ($13 | [1])
	if ( $8 ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$84
	$6 = (($8 + [16]) & [-16])
	$7 = CALL $61($6)
	*($13) = ($6 | [1])
	*($13 + [8]) = $7
	*($13 + [4]) = $8
	
.LABEL $label$83
	CALL memcpy($7, [672], $8)
	
.LABEL $label$82
	*(($7 + $8)) = [0]
	*(($13 + [40])) = $5
	*($13 + [16]) = *($0)
	*($13 + [24]) = *($13 + [160])
	$8 = ($13 + [8])
	*(($13 + [56])) = *($8)
	*($13 + [32]) = $3
	*($13 + [48]) = *($13)
	*($13) = [0]
	*($13 + [4]) = [0]
	*($8) = [0]
	$8 = CALL $20(($13 + [80]), ($13 + [64]), $9, $12, ($13 + [16]))
	CALL $21(($13 + [208]), $8)
	$7 = *($13 + [208])
	CALL send_inline($7, (*($13 + [212]) - $7))
	$7 = *($13 + [208])
	if ( ($7 == 0) ){ goto $label$85 }
	*($13 + [212]) = $7
	CALL $62($7)
	
.LABEL $label$85
	$7 = *($8 + [28])
	if ( ($7 == 0) ){ goto $label$86 }
	*(($8 + [32])) = $7
	CALL $62($7)
	
.LABEL $label$86
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$87 }
	*(($8 + [20])) = $7
	CALL $62($7)
	
.LABEL $label$87
	if ( ((*(($13 + [48])) & [1]) == 0) ){ goto $label$88 }
	CALL $62(*(($13 + [56])))
	
.LABEL $label$88
	if ( ((*($13) & [1]) == 0) ){ goto $label$63 }
	CALL $62(*(($13 + [8])))
	
.LABEL $label$63
	$6 = *($13 + [144])
	if ( ($6 == 0) ){ goto $label$2 }
	$4 = ($13 + [148])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$90 }
	
.LOOP $label$91:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$92 }
	CALL $22($7)
	CALL $62($7)
	
.LABEL $label$92
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$91 }
	$8 = *(($13 + [144]))
	goto $label$89 
	
.LABEL $label$90
	$8 = $6
	
.LABEL $label$89
	*($4) = $6
	CALL $62($8)
	
.LABEL $label$2
	if ( ((*($13 + [192]) & [1]) == 0) ){ goto $label$93 }
	CALL $62(*(($13 + [200])))
	
.LABEL $label$93
	*([0] + [4]) = ($13 + [224])
	return (unreachable)
	
.LABEL $label$1
	CALL $63($13)
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	CALL require_auth(*($0))
	*(($10 + [32])) = [0]
	*($10 + [16]) = (int_64)-1
	*($10 + [24]) = (int_64)0
	$2 = *($0)
	*($10) = $2
	*($10 + [8]) = $2
	if ( (*($1) & [1]) ){ goto $label$2 }
	$1 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($1 + [8])
	
.LABEL $label$1
	$0 = [-1]
	
.LOOP $label$3:
	$5 = ($1 + $0)
	$3 = ($0 + [1])
	$0 = $3
	if ( *(($5 + [1])) ){ goto $label$3 }
	$4 = (CASTING uint_64)(uint_32 $3)
	$7 = (int_64)0
	$6 = (int_64)59
	$8 = (int_64)0
	
.LOOP $label$4:
	$9 = (int_64)0
	if ( ((uint_64)$7 >= (uint_64)$4) ){ goto $label$5 }
	$0 = *($1)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$0 = ($0 + [165])
	goto $label$6 
	
.LABEL $label$7
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$9 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$8
	$1 = ($1 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$4 }
	$1 = [0]
	$0 = CALL db_find_i64($2, $2, (int_64)-4453310894032912384, $8)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$10 }
	$1 = CALL $19($10, $0)
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$10), [144])
	
.LABEL $label$10
	$0 = ((int_32)$1 != (int_32)[0])
	CALL eosio_assert($0, [1248])
	CALL eosio_assert($0, [880])
	CALL eosio_assert($0, [928])
	$5 = CALL db_next_i64(*($1 + [108]), ($10 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$11 }
	CALL $19($10, $5)
	
.LABEL $label$11
	CALL $45($10, $1)
	CALL eosio_assert($0, [1312])
	$5 = *($10 + [24])
	if ( ($5 == 0) ){ goto $label$12 }
	$3 = ($10 + [28])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$16 }
	CALL $22($0)
	CALL $62($0)
	
.LABEL $label$16
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$15 }
	$1 = *(($10 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$1 = $5
	
.LABEL $label$13
	*($3) = $5
	CALL $62($1)
	
.LABEL $label$12
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [36]) = $1
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + $3)
	CALL $31(($5 + [32]), $5)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	CALL $68(($5 + [16]), $5)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL $68(($5 + [32]), ($5 + [16]))
	CALL void $1((int_32 ($5 + [32])), (int_32 $4))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $62(*($5 + [40]))
	
.LABEL $label$6
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $62(*($5 + [24]))
	
.LABEL $label$7
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $62(*(($5 + [8])))
	
.LABEL $label$8
	*([0] + [4]) = ($5 + [48])
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	CALL require_auth(*($0))
	*($0 + [8]) = $1
	$2 = ($0 + [8])
	$3 = *($0)
	$1 = (int_64)0
	$5 = (int_64)59
	$0 = [1200]
	$6 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$1 > (uint_64)(int_64)4) ){ goto $label$6 }
	$4 = *($0)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$7 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL db_store_i64($3, $6, $3, $3, $2, [8])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [848])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [960])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1008])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1072])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $37($4)
	CALL $62($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $37($4)
	CALL $62($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [108]))
}

int_32 .FUNC $37 (int_32 $0)
{
	if ( ((*($0 + [92]) & [1]) == 0) ){ goto $label$1 }
	CALL $62(*(($0 + [100])))
	
.LABEL $label$1
	if ( ((*($0 + [80]) & [1]) == 0) ){ goto $label$2 }
	CALL $62(*(($0 + [88])))
	
.LABEL $label$2
	if ( ((*($0 + [68]) & [1]) == 0) ){ goto $label$3 }
	CALL $62(*(($0 + [76])))
	
.LABEL $label$3
	if ( ((*($0 + [56]) & [1]) == 0) ){ goto $label$4 }
	CALL $62(*(($0 + [64])))
	
.LABEL $label$4
	if ( ((*($0 + [20]) & [1]) == 0) ){ goto $label$5 }
	CALL $62(*(($0 + [28])))
	
.LABEL $label$5
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL $62(*(($0 + [16])))
	
.LABEL $label$6
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [720])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $61([120])
	$6 = CALL $42($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [108])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $43(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $37($4)
	CALL $62($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1136])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $61([120])
	CALL $38($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [108])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $29(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $22($1)
	CALL $62($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [864])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $23($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [848])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $31($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [848])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $31(CALL $31(CALL $31(CALL $31($0, ($1 + [56])), ($1 + [68])), ($1 + [80])), ($1 + [92]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [848])
	CALL memcpy($1, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $31(CALL $31($0, ($1 + [8])), ($1 + [20]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [848])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $32($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $66($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $61($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $66($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $62($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $63($7)
	return (unreachable)
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $59($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10208])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $59 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10294]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10296])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10294]) = [1]
	$7 = ($7 << [16])
	*([0] + [10296]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10296])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10296]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10294]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10294]) = [1]
	$3 = ($3 << [16])
	*([0] + [10296]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10296])
	
.LABEL $label$8
	*([0] + [10296]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10300])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $63 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $65($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*($0) = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*(($0 + [16])) = (int_64)0
	*(($0 + [24])) = (int_64)0
	$4 = [0]
	*(($0 + [40])) = [0]
	*($0 + [48]) = (int_64)0
	*(($5 = ($0 + [56]))) = (int_64)1398362884
	CALL eosio_assert([1], [752])
	$3 = (uint_64)*($5) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [816])
	*($0 + [64]) = (int_64)0
	*(($0 + [72])) = (int_64)0
	*(($0 + [80])) = (int_64)0
	*($0 + [88]) = (int_64)0
	*(($0 + [96])) = (int_64)0
	*(($0 + [104])) = [0]
	*(($0 + [108])) = [0]
	*($6 + [8]) = ($1 + $2)
	*($6) = $1
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [848])
	CALL memcpy($0, $1, [8])
	*($6 + [4]) = ($1 + [8])
	CALL $31($6, ($0 + [8]))
	CALL $31($6, ($0 + [20]))
	CALL $31($6, ($0 + [32]))
	CALL eosio_assert(((uint_32)(*($6 + [8]) - *($6 + [4])) > (uint_32)[7]), [848])
	CALL memcpy(($0 + [48]), *($6 + [4]), [8])
	$4 = (*($6 + [4]) + [8])
	*($6 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($6 + [8]) - $4) > (uint_32)[7]), [848])
	CALL memcpy(($0 + [56]), *($6 + [4]), [8])
	*($6 + [4]) = (*($6 + [4]) + [8])
	CALL $31($6, ($0 + [64]))
	CALL $31($6, ($0 + [76]))
	CALL $31($6, ($0 + [88]))
	CALL $31($6, ($0 + [100]))
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*(($0 + [16])) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*(($4 = ($0 + [48]))) = (int_64)1398362884
	CALL eosio_assert([1], [752])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [816])
	*($0 + [56 align=4]) = (int_64)0
	*(($0 + [64])) = (int_64)0
	*(($0 + [72])) = (int_64)0
	*($0 + [80 align=4]) = (int_64)0
	*(($0 + [88])) = (int_64)0
	*(($0 + [96])) = [0]
	*(($0 + [100])) = [0]
	*($0 + [104]) = $1
	CALL $39($2, $0)
	return $0
}

void .FUNC $52 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9)
{
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [144])
	*([0] + [4]) = $12
	$0 = *($0 + [4])
	$11 = *($0 + [4])
	$10 = (*(*($0)) + int_32($11 >> [1]))
	$0 = *($0)
	if ( (($11 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($10) + $0))
	
.LABEL $label$1
	CALL $68(($12 + [128]), $2)
	CALL $68(($12 + [112]), $3)
	CALL $68(($12 + [96]), $4)
	*(($2 = (($12 + [80]) + [8]))) = *(($5 + [8]))
	*($12 + [80]) = *($5)
	CALL $68(($12 + [64]), $6)
	CALL $68(($12 + [48]), $7)
	CALL $68(($12 + [32]), $8)
	CALL $68(($12 + [16]), $9)
	*(($12 + [8])) = *($2)
	*($12) = *($12 + [80])
	CALL void $10((int_32 $1), (int_64 ($12 + [128])), (int_32 ($12 + [112])), (int_32 ($12 + [96])), (int_32 $12), (int_32 ($12 + [64])), (int_32 ($12 + [48])), (int_32 ($12 + [32])), (int_32 ($12 + [16])), (int_32 $0))
	if ( ((*($12 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $62(*($12 + [24]))
	
.LABEL $label$2
	if ( ((*($12 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $62(*($12 + [40]))
	
.LABEL $label$3
	if ( ((*($12 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL $62(*($12 + [56]))
	
.LABEL $label$4
	if ( ((*($12 + [64]) & [1]) == 0) ){ goto $label$5 }
	CALL $62(*($12 + [72]))
	
.LABEL $label$5
	if ( ((*($12 + [96]) & [1]) == 0) ){ goto $label$6 }
	CALL $62(*($12 + [104]))
	
.LABEL $label$6
	if ( ((*($12 + [112]) & [1]) == 0) ){ goto $label$7 }
	CALL $62(*($12 + [120]))
	
.LABEL $label$7
	if ( ((*($12 + [128]) & [1]) == 0) ){ goto $label$8 }
	CALL $62(*($12 + [136]))
	
.LABEL $label$8
	*([0] + [4]) = ($12 + [144])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $61([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [1768]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $69($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $66($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1136])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $61([120])
	CALL $55($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [108])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $29(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $22($1)
	CALL $62($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*(($0 + [16])) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*(($4 = ($0 + [48]))) = (int_64)1398362884
	CALL eosio_assert([1], [752])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [816])
	*($0 + [56 align=4]) = (int_64)0
	*(($0 + [64])) = (int_64)0
	*(($0 + [72])) = (int_64)0
	*($0 + [80 align=4]) = (int_64)0
	*(($0 + [88])) = (int_64)0
	*(($0 + [96])) = [0]
	*(($0 + [100])) = [0]
	*($0 + [104]) = $1
	CALL $56($2, $0)
	return $0
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$5 = *($0 + [4])
	*($1) = *(*($5))
	$2 = *($0)
	CALL $64(($1 + [8]), *($5 + [4]))
	CALL $64(($1 + [20]), *($5 + [8]))
	*($1 + [32]) = *(*($5 + [12]))
	$3 = *($5 + [16])
	*($1 + [40]) = *($3)
	*(($1 + [48])) = *(($3 + [8]))
	CALL $64(($1 + [56]), *($5 + [20]))
	CALL $64(($1 + [68]), *($5 + [24]))
	CALL $64(($1 + [80]), *($5 + [28]))
	CALL $64(($1 + [92]), *($5 + [32]))
	*(($5 = $6)) = [0]
	CALL $40($5, $1)
	$3 = *($5)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($5 + [4]) = $6
	*($5) = $6
	*($5 + [8]) = ($6 + $3)
	CALL $41($5, $1)
	$4 = *($1)
	*($1 + [108]) = CALL db_store_i64(*($2 + [8]), (int_64)-4453310894032912384, *(*($0 + [8])), $4, $6, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $58([1812], $0)
}