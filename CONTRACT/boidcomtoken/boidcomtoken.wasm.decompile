(data (i32.const 8232) "failed to allocate pages\00invalid symbol name\00")
(data (i32.const 8288) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 8368) "%u\00quantity exceeds available supply\00")
(data (i32.const 8416) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 8432) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 8448) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 8464) "invalid supply\00")
(data (i32.const 8479) "max-supply must be positive\00")
(data (i32.const 8507) "symbol already exists\00")
(data (i32.const 8529) "issue\n\00")
(data (i32.const 8536) "memo has more than 256 bytes\00")
(data (i32.const 8565) "symbol does not exist, create token with symbol before issuing said token\00")
(data (i32.const 8639) "invalid quantity\00")
(data (i32.const 8656) "must issue positive quantity\00")
(data (i32.const 8685) "symbol precision mismatch\00")
(data (i32.const 8711) "recycle\n\00")
(data (i32.const 8720) "symbol does not exist in stats table\00")
(data (i32.const 8757) "must recycle positive quantity\00")
(data (i32.const 8788) "transferring more than available balance\00")
(data (i32.const 8829) "owner account does not exist\00")
(data (i32.const 8858) "symbol does not exist\00")
(data (i32.const 8880) "Balance row already deleted or never existed. Action won\'t have any effect.\00")
(data (i32.const 8956) "Cannot close because the balance is not zero.\00")
(data (i32.const 9002) "transfer\n\00")
(data (i32.const 9012) "cannot transfer to self\00")
(data (i32.const 9036) "to account does not exist\00")
(data (i32.const 9062) "unable to find key\00")
(data (i32.const 9081) "must transfer positive quantity\00")
(data (i32.const 9113) "Cannot do a transfer stake to self\00")
(data (i32.const 9148) "Must first initstats\00")
(data (i32.const 9169) "Can only stake from liquid balance during season break\00")
(data (i32.const 9224) "must stake positive quantity\00")
(data (i32.const 9253) "transfer staking more than available balance\00")
(data (i32.const 9298) "Must stake minimum amount\00")
(data (i32.const 9324) "Already an existing transfer stake to this account\00")
(data (i32.const 9375) "no account object found\00")
(data (i32.const 9399) "BOID\00")
(data (i32.const 9404) "from account does not exist\00")
(data (i32.const 9432) "staking more than available balance\00")
(data (i32.const 9468) "Already an existing stake to this account with later expiration time\00")
(data (i32.const 9537) "staking more than available staked balance\00")
(data (i32.const 9580) "staking from staked balance to self\00")
(data (i32.const 9616) "Delegation cannot cause tokens to expire earlier than expected\00")
(data (i32.const 9679) "stake\00")
(data (i32.const 9685) "Can only stake from liquid balance out of season\00")
(data (i32.const 9734) "staking more than available liquid balance\00")
(data (i32.const 9777) "liquid\00")
(data (i32.const 9784) "account:  \00")
(data (i32.const 9795) " using \00")
(data (i32.const 9803) " balance\naction: stake\00")
(data (i32.const 9826) "\ndelegate: \00")
(data (i32.const 9838) "\namount: \00")
(data (i32.const 9848) "\ntimeout \00")
(data (i32.const 9858) " seconds\00")
(data (i32.const 9867) "Must have BOID account\00")
(data (i32.const 9890) "symbol does not exist, create token with symbol before using said token\00")
(data (i32.const 9962) "Percentage to self-stake must be in range [0 100]\00")
(data (i32.const 10012) "boidpower: \00")
(data (i32.const 10024) "min: \00")
(data (i32.const 10030) "powered stake amount: \00")
(data (i32.const 10053) "Payout would cause token supply to exceed maximum\nstake account: \00")
(data (i32.const 10119) "\ntotal payout: \00")
(data (i32.const 10135) "\npower payout: \00")
(data (i32.const 10151) "\nstake payout: \00")
(data (i32.const 10167) "All payouts must be zero or positive quantities\00")
(data (i32.const 10215) "\naction: claim\00")
(data (i32.const 10230) "\nstake bonus: \00")
(data (i32.const 10245) "\npower bonus: \00")
(data (i32.const 10260) "\nwpf contribution: \00")
(data (i32.const 10280) "\npercentage to self stake: \00")
(data (i32.const 10308) "\nreturning \00")
(data (i32.const 10320) " expired tokens\00")
(data (i32.const 10336) "\nreceiving \00")
(data (i32.const 10348) " delegated tokens\00")
(data (i32.const 10366) "unstake\n\00")
(data (i32.const 10375) "Nothing to unstake\00")
(data (i32.const 10394) "must unstake positive quantity\00")
(data (i32.const 10425) "After unstake, must have nothing staked or a valid amount\00")
(data (i32.const 10483) "curr time: \00")
(data (i32.const 10495) "expiration time: \00")
(data (i32.const 10513) "Cannot unstake before time limit\00")
(data (i32.const 10546) "Must unstake all tokens for definite-time stake\00")
(data (i32.const 10594) "Can only unstake to liquid balance during season break\00")
(data (i32.const 10649) "initstats\n\00")
(data (i32.const 10660) "Can only have zero or positive boidpower\00")
(data (i32.const 10701) "Self stake does not exist\00")
(data (i32.const 10727) "Self delegation does not exist\00")
(data (i32.const 10758) "no balance object found\00")
(data (i32.const 10782) "overdrawn balance\00")
(data (i32.const 10800) "Delegation does not exist\00")
(data (i32.const 10826) "Stake does not exist\00")
(data (i32.const 10847) "Must maintain minimum stake or have zero stake for this delegation\00")
(data (i32.const 10914) "Entry exists in delegation table but not stake table\00")
(data (i32.const 10967) "no entry in stake table\00")
(data (i32.const 10991) "no entry in delegation table\00")
(data (i32.const 11020) "stake coef: \00")
(data (i32.const 11033) "wpf amt: \00")
(data (i32.const 11043) "wpf payout: \00")
(data (i32.const 11056) "stake payout: \00")
(data (i32.const 11071) "dt: \00")
(data (i32.const 11076) "power coef: \00")
(data (i32.const 11089) "power payout: \00")
(data (i32.const 11104) "Must first sync total delegated\00")
(data (i32.const 11136) "write\00")
(data (i32.const 11142) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 11201) "string is too long to be a valid symbol_code\00")
(data (i32.const 11246) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 11300) "(,\00\00")
(data (i32.const 11304) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 11337) "%lld%s%s %s\00")
(data (i32.const 11349) ".\00")
(data (i32.const 11352) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 11401) "bpprev: \00")
(data (i32.const 11410) "bpnew: \00")
(data (i32.const 11418) "decay param: \00")
(data (i32.const 11432) "decay: \00")
(data (i32.const 11440) "const decay: \00")
(data (i32.const 11454) "quantity: \00")
(data (i32.const 11465) "attempt to add asset with different symbol\00")
(data (i32.const 11508) "addition underflow\00")
(data (i32.const 11527) "addition overflow\00")
(data (i32.const 11545) "attempt to subtract asset with different symbol\00")
(data (i32.const 11593) "subtraction underflow\00")
(data (i32.const 11615) "subtraction overflow\00")
(data (i32.const 11636) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 11687) "error reading iterator\00")
(data (i32.const 11710) "read\00")
(data (i32.const 11715) "cannot create objects in table of another contract\00")
(data (i32.const 11766) "object passed to modify is not in multi_index\00")
(data (i32.const 11812) "cannot modify objects in table of another contract\00")
(data (i32.const 11863) "updater cannot change primary key when modifying an object\00")
(data (i32.const 11922) "Warning: recycle sets   supply below 0. Please check this out. Setting supply to 0\00")
(data (i32.const 12005) "cannot pass end iterator to modify\00")
(data (i32.const 12040) "cannot pass end iterator to erase\00")
(data (i32.const 12074) "cannot increment end iterator\00")
(data (i32.const 12104) "object passed to erase is not in multi_index\00")
(data (i32.const 12149) "cannot erase objects in table of another contract\00")
(data (i32.const 12199) "attempt to remove object that was not in multi_index\00")
(data (i32.const 12252) "get\00")
(data (i32.const 0) "\e0/\00\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "memset" (func $fimport$1 (param i32 i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "read_action_data" (func $fimport$3 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$4 (param i64)))
(import "env" "current_receiver" (func $fimport$5 (result i64)))
(import "env" "abort" (func $fimport$6))
(import "env" "db_store_i64" (func $fimport$7 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$8 (param i32)))
(import "env" "memcpy" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$11 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$12 (param i32 i32)))
(import "env" "__multf3" (func $fimport$13 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$14 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$15 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$16 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$17 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$22 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$24 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$25 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$27 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$28 (param i64 i64) (result i32)))
(import "env" "is_account" (func $fimport$29 (param i64) (result i32)))
(import "env" "require_recipient" (func $fimport$30 (param i64)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$31 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$32 (param i32 i32) (result i32)))
(import "env" "set_proposed_producers" (func $fimport$33 (param i32 i32) (result i64)))
(import "env" "current_time" (func $fimport$34 (result i64)))
(import "env" "get_active_producers" (func $fimport$35 (param i32 i32) (result i32)))
(import "env" "printsf" (func $fimport$36 (param f32)))
(import "env" "printi" (func $fimport$37 (param i64)))
(import "env" "db_find_i64" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_update_i64" (func $fimport$39 (param i32 i64 i32 i32)))
(import "env" "send_inline" (func $fimport$40 (param i32 i32)))
(import "env" "printdf" (func $fimport$41 (param f64)))
(import "env" "eosio_assert_code" (func $fimport$42 (param i32 i64)))
(import "env" "db_get_i64" (func $fimport$43 (param i32 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$44 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$45 (param i32)))
(import "env" "db_lowerbound_i64" (func $fimport$46 (param i64 i64 i64 i64) (result i32)))
(export "apply" (func $42))
(table $0 36 36 anyfunc)
(elem (i32.const 1) $20 $22 $43 $45 $47 $49 $51 $53 $55 $57 $58 $59 $61 $62 $63 $65 $66 $68 $69 $71 $73 $74 $75 $77 $79 $80 $81 $83 $84 $86 $87 $89 $90 $92 $93)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 12256))
(global $global$2 i32 (i32.const 12256))


void .FUNC $220 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [80])
	$global$0 = $4
	*(($4 + [56])) = [0]
	*($4 + [32]) = $1
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	*($4 + [24]) = *($0)
	CALL $108(($4 + [16]), ($4 + [24]), $1)
	*($4 + [68]) = CALL $16([9399])
	*($4 + [64]) = [9399]
	*($4 + [8]) = *($4 + [64])
	$0 = CALL $138(($4 + [72]), ($4 + [8]))
	$5 = *($4 + [20])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((int_64)*(($5 + [72])) == (int_64)((int_64)((int_64)*($0) << (int_64)8) | (int_64)4)) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [11104])
	
.LABEL $label$1
	$0 = *($4 + [20])
	*($4 + [72]) = $2
	if ( $0 ){ goto $label$3 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$3
	CALL $237(($4 + [24]), $0, ($4 + [72]))
	CALL $115(($4 + [48]))
	$global$0 = ($4 + [80])
}

int_32 .FUNC $284 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($1)
	$5 = ($0 + [8])
	$1 = ($0 + [4])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$7 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [11136])
	$3 = *($1)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($1) + [1])
	*($1) = $3
	if ( $7 ){ goto $label$1 }
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $285 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$5) ){ goto $label$1 }
	CALL eosio_assert([0], [11710])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy(($2 + [14]), $5, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	*(($3 + [36])) = ((int_32)*($2 + [14]) != (int_32)[0])
	$0 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert([0], [11710])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy(($2 + [15]), $5, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	*(($0 + [37])) = ((int_32)*($2 + [15]) != (int_32)[0])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)*($1 + [8]) != (int_32)$4) ){ goto $label$3 }
	CALL eosio_assert([0], [11710])
	$4 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [13]), $4, [1])
	*(($1 = ($1 + [4]))) = (*($1) + [1])
	*(($0 + [38])) = ((int_32)*($2 + [13]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $317 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$3 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$7 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$5 
	
.LABEL $label$7
	CALL eosio_assert([0], [11687])
	
.LABEL $label$6
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL $8([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [28]) = $0
	CALL $318(($3 + [32]), $5)
	*($5 + [32]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $319(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $2($4)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $10($1)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $174 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	CALL $122(*($1), *($0 + [8]))
	CALL $122(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [20])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $122(*($1), *($0 + [24]))
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $1($1)
	
.LABEL $label$2
	*(CALL $5()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $1(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $2($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $176 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [96]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$2 = *($2)
	*($1 + [16]) = *($2)
	*(($1 + [24])) = *(($2 + [8]))
	$5 = *($1)
	$2 = $3
	$3 = ($2 + [-96])
	$global$0 = $3
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = $2
	*($4 + [16]) = $4
	*($4 + [28]) = ($1 + [8])
	*($4 + [24]) = $1
	*($4 + [32]) = ($1 + [16])
	*($4 + [36]) = ($1 + [32])
	*($4 + [40]) = ($1 + [48])
	*($4 + [44]) = ($1 + [56])
	*($4 + [48]) = ($1 + [64])
	*($4 + [52]) = ($1 + [80])
	*($4 + [56]) = ($1 + [88])
	CALL $323(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [100]), (int_64)0, $3, [96])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($4 + [64])
}

void .FUNC $177 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$2 = *($2)
	*($1 + [16]) = *($2)
	*(($1 + [24])) = *(($2 + [8]))
	$5 = *($1 + [8])
	$2 = $3
	$3 = ($2 + [-64])
	$global$0 = $3
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = $2
	*($4 + [16]) = $4
	*($4 + [28]) = ($1 + [8])
	*($4 + [24]) = $1
	*($4 + [32]) = ($1 + [16])
	*($4 + [36]) = ($1 + [32])
	*($4 + [40]) = ($1 + [40])
	*($4 + [44]) = ($1 + [56])
	CALL $324(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [68]), (int_64)0, $3, [64])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $170 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( $2 ){ goto $label$1 }
	CALL eosio_assert([0], [12074])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	$3 = [0]
	$2 = CALL db_next_i64(*($2 + [32]), ($1 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $317(*($0), $2)
	
.LABEL $label$2
	*(($0 + [4])) = $3
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $171 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $10($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $10($2)
	
.LABEL $label$1
	return $0
}

void .FUNC $172 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $94(*($1), *($0))
	$2 = (*($0) + [8])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [11710])
	$1 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $5())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $6($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $246 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [128])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [84]) = $2
	*($3 + [80]) = $2
	*($3 + [88]) = ($2 + $4)
	*($3 + [72]) = (int_64)0
	CALL $94(($3 + [80]), ($3 + [72]))
	*($3 + [64]) = (int_64)0
	*($3 + [24]) = (int_64)0
	$2 = *($3 + [84])
	if ( ((uint_32)(*($3 + [88]) - $2) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11710])
	$2 = *($3 + [84])
	
.LABEL $label$5
	CALL memcpy(($3 + [24]), $2, [8])
	*($3 + [64]) = *($3 + [24])
	*($3 + [84]) = (*($3 + [84]) + [8])
	*($3 + [56]) = (int_64)0
	CALL $94(($3 + [80]), ($3 + [56]))
	*(($2 = (($3 + [8]) + [8]))) = *((($3 + [80]) + [8]))
	*($3 + [8]) = *($3 + [80])
	*(($4 = (($3 + [96]) + [8]))) = *($2)
	*($3 + [96]) = *($3 + [8])
	$2 = *($4)
	*((($3 + [112]) + [8])) = $2
	*(($3 + [48])) = $2
	*($3 + [24]) = $0
	*($3 + [32]) = $1
	$0 = *($3 + [96])
	*($3 + [40]) = $0
	*($3 + [112]) = $0
	CALL $71(($3 + [24]), ($3 + [72]), ($3 + [64]), ($3 + [56]))
	$global$0 = ($3 + [128])
}

int_32 .FUNC $178 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$6 = CALL $8([16])
	*($0 + [16]) = $6
	*(($7 = ($0 + [20]))) = $6
	$8 = ($6 + [16])
	*($5) = $8
	*(($6 + [8])) = *(($1 + [8]))
	*($6) = *($1)
	*($7) = $8
	CALL $236(($0 + [28]), $4)
	return $0
}

void .FUNC $4 (int_32 $0)
{
}

int_32 .FUNC $276 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0) = (*($0) + [16])
	$0 = CALL $283($0, ($1 + [16]))
	$3 = *($1 + [28])
	$2 = *(($1 + [32]))
	$1 = (($2 + *($0)) - $3)
	$4 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $1
	return $0
}

void .FUNC $221 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$6 = *($3 + [4])
	$7 = *($1 + [8])
	if ( (*(*($3)) == 0) ){ goto $label$4 }
	*($1 + [40]) = *($6)
	*(($1 + [48])) = *(($6 + [8]))
	*($1 + [56]) = *(*($3 + [8]))
	$6 = ($1 + [16])
	$8 = ($1 + [40])
	goto $label$3 
	
.LABEL $label$4
	*($1 + [16]) = *($6)
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [32]) = *(*($3 + [8]))
	$8 = ($1 + [40])
	$6 = ($1 + [16])
	
.LABEL $label$3
	$4 = $4
	$3 = ($4 + [-64])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = $4
	*($5 + [16]) = $5
	*($5 + [32]) = $6
	*($5 + [40]) = $8
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [8])
	*($5 + [36]) = ($1 + [32])
	*($5 + [44]) = ($1 + [56])
	CALL $324(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [68]), $2, $3, [64])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$global$0 = ($5 + [48])
}

int_32 .FUNC $5 ()
{
	return [8208]
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *($2 + [4])
	if ( $3 ){ goto $label$1 }
	CALL eosio_assert([0], [12040])
	$3 = *(($2 + [4]))
	
.LABEL $label$1
	CALL $206($2)
	CALL $207($1, $3)
	*($0) = *($2)
}

void .FUNC $3 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

void .FUNC $189 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [196]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$5 = *($1)
	$6 = ($1 + [160])
	CALL $112($6, $6)
	if ( ((int_64)$5 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [11863])
	
.LABEL $label$3
	$6 = $3
	$3 = ($6 + [-192])
	$global$0 = $3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($6 + [-15])
	*($4 + [24]) = ($4 + [8])
	CALL $166($1, ($4 + [24]))
	CALL db_update_i64(*($1 + [200]), $2, $3, [177])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $188 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [196]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	*($1 + [176]) = *(*($3))
	$6 = *($1)
	$3 = $4
	$4 = ($3 + [-192])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-15])
	*($5 + [24]) = ($5 + [8])
	CALL $166($1, ($5 + [24]))
	CALL db_update_i64(*($1 + [200]), $2, $4, [177])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [32])
}

void .FUNC $49 (int_32 $0, float_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [60]) = $1
	CALL require_auth(*($0))
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$3 = *($0)
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	CALL $132(($2 + [8]), ($2 + [16]), (int_64)0)
	if ( *($2 + [12]) ){ goto $label$1 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$1
	$3 = *($0)
	$0 = *($2 + [12])
	*($2) = ($2 + [60])
	if ( $0 ){ goto $label$2 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$2
	CALL $186(($2 + [16]), $0, $3, $2)
	CALL $137(($2 + [40]))
	$global$0 = ($2 + [64])
}

int_32 .FUNC $48 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [64]) + [24])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = [0]
	*($4 + [100]) = [0]
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [128]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $140(($4 + [16]), ($4 + [128]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4)
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [16])
	CALL $141(($4 + [128]), ($4 + [64]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $2($2)
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $264 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ($4 <= [512]) ){ goto $label$4 }
	$2 = CALL $1($4)
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	$5 = ($3 + [44])
	$6 = $4
	goto $label$2 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $4)
	$6 = ($2 + $4)
	$5 = ($3 + [44])
	if ( ((uint_32)$4 > (uint_32)[3]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [11710])
	
.LABEL $label$1
	CALL memcpy($5, $2, [4])
	*(($3 + [28])) = ($2 + [4])
	*(($3 + [32])) = $6
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [24]) = $2
	CALL $92(($3 + [8]), *($3 + [44]))
	$global$0 = ($3 + [48])
}

void .FUNC $0 ()
{
	CALL $3()
}

void .FUNC $266 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ($4 <= [512]) ){ goto $label$4 }
	$2 = CALL $1($4)
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	$5 = ($3 + [44])
	$6 = $4
	goto $label$2 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $4)
	$6 = ($2 + $4)
	$5 = ($3 + [44])
	if ( ((uint_32)$4 > (uint_32)[3]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [11710])
	
.LABEL $label$1
	CALL memcpy($5, $2, [4])
	*(($3 + [28])) = ($2 + [4])
	*(($3 + [32])) = $6
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [24]) = $2
	CALL $49(($3 + [8]), *($3 + [44]))
	$global$0 = ($3 + [48])
}

void .FUNC $236 (int_32 $0, int_32 $1)
{
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	CALL $279($0, [8])
	$0 = *($0)
	if ( ((int_32)(*($0 + [4]) - $0) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11136])
	
.LABEL $label$1
	CALL memcpy($0, $1, [8])
}

void .FUNC $43 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL prints([8529])
	$5 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	*($4 + [24]) = $5)
	if ( CALL $97(($4 + [24])) ){ goto $label$1 }
	CALL eosio_assert([0], [8257])
	
.LABEL $label$1
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	if ( (*($3 + [4]) <= [257]) ){ goto $label$2 }
	CALL eosio_assert([0], [8536])
	
.LABEL $label$2
	*(($4 + [184])) = [0]
	*($4 + [160]) = $5
	*($4 + [168]) = (int_64)-1
	*($4 + [176]) = (int_64)0
	*($4 + [152]) = *($0)
	CALL $98(($4 + [144]), ($4 + [152]), $5)
	$6 = *($4 + [148])
	if ( $6 ){ goto $label$3 }
	CALL eosio_assert([0], [8565])
	$6 = *($4 + [148])
	
.LABEL $label$3
	CALL require_auth(*($6 + [32]))
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$5 }
	*($4 + [24]) = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	if ( CALL $97(($4 + [24])) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [8639])
	
.LABEL $label$4
	if ( ((int_64)*($2) > (int_64)0) ){ goto $label$6 }
	CALL eosio_assert([0], [8656])
	
.LABEL $label$6
	if ( ((int_64)*(($2 + [8])) == (int_64)*($6 + [8])) ){ goto $label$7 }
	CALL eosio_assert([0], [8685])
	
.LABEL $label$7
	if ( ((int_64)*($2) <= (int_64))(*($6 + [16]) - *($6))) ){ goto $label$8 }
	CALL eosio_assert([0], [8371])
	
.LABEL $label$8
	$5 = *($0)
	*($4 + [24]) = $2
	CALL $104(($4 + [152]), $6, $5, ($4 + [24]))
	$6 = ($6 + [32])
	$5 = *($6)
	$8 = ($2 + [8])
	*(($7 = (($4 + [128]) + [8]))) = *($8)
	$9 = *($2)
	*((($4 + [8]) + [8])) = *($7)
	*($4 + [128]) = $9
	*($4 + [8]) = *($4 + [128])
	CALL $105($0, $5, ($4 + [8]), $5)
	$5 = *($6)
	if ( ((int_64)$5 == (int_64)$1) ){ goto $label$9 }
	*($4 + [80]) = (int_64)3617214756542218240
	*($4 + [72]) = $5
	$9 = *($0)
	*(($4 + [48])) = *($8)
	*($4 + [32]) = $1
	*($4 + [24]) = $5
	*($4 + [40]) = *($2)
	CALL $25((($4 + [24]) + [32]), $3)
	$2 = CALL $106(($4 + [88]), ($4 + [72]), $9, (int_64)-3617168760277827584, ($4 + [24]))
	CALL $107($2)
	$6 = *($2 + [28])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($2 + [32])) = $6
	CALL $10($6)
	
.LABEL $label$10
	$6 = *($2 + [16])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($2 + [20])) = $6
	CALL $10($6)
	
.LABEL $label$11
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$9 }
	CALL $10(*(($4 + [64])))
	
.LABEL $label$9
	CALL $101(($4 + [176]))
	$global$0 = ($4 + [192])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [528])
	$global$0 = $3
	CALL $0()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)-4416963957765997569) ){ goto $label$33 }
	if ( ((int_64)$2 <= (int_64)-3102536759825661953) ){ goto $label$32 }
	if ( ((int_64)$2 <= (int_64)4981848853887762431) ){ goto $label$30 }
	if ( ((int_64)$2 <= (int_64)6182744524343914495) ){ goto $label$26 }
	if ( ((int_64)$2 == (int_64)6182744524343914496) ){ goto $label$2 }
	if ( ((int_64)$2 == (int_64)8421058835216596992) ){ goto $label$18 }
	if ( ((int_64)$2 != (int_64)8516769789752901632) ){ goto $label$1 }
	*($3 + [516]) = [0]
	*($3 + [512]) = [3]
	*($3 + [8]) = *($3 + [512])
	CALL $44($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$33
	if ( ((int_64)$2 > (int_64)-4417333270828023809) ){ goto $label$31 }
	if ( ((int_64)$2 > (int_64)-4994301949000253441) ){ goto $label$29 }
	if ( ((int_64)$2 > (int_64)-5002966724473339905) ){ goto $label$25 }
	if ( ((int_64)$2 == (int_64)-6533262907872903168) ){ goto $label$17 }
	if ( ((int_64)$2 != (int_64)-5002966724954292224) ){ goto $label$1 }
	*($3 + [508]) = [0]
	*($3 + [504]) = [4]
	*($3 + [16]) = *($3 + [504])
	CALL $46($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$32
	if ( ((int_64)$2 > (int_64)-4060403175468548097) ){ goto $label$28 }
	if ( ((int_64)$2 > (int_64)-4157661250656665601) ){ goto $label$24 }
	if ( ((int_64)$2 == (int_64)-4416963957765997568) ){ goto $label$16 }
	if ( ((int_64)$2 != (int_64)-4157661383434960896) ){ goto $label$1 }
	*($3 + [460]) = [0]
	*($3 + [456]) = [5]
	*($3 + [64]) = *($3 + [456])
	CALL $48($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$31
	if ( ((int_64)$2 > (int_64)-4417087366677948753) ){ goto $label$27 }
	if ( ((int_64)$2 > (int_64)-4417147813006324257) ){ goto $label$23 }
	if ( ((int_64)$2 == (int_64)-4417333270828023808) ){ goto $label$15 }
	if ( ((int_64)$2 != (int_64)-4417147816640630016) ){ goto $label$1 }
	*($3 + [340]) = [0]
	*($3 + [336]) = [6]
	*($3 + [184]) = *($3 + [336])
	CALL $50($1, $1, ($3 + [184]))
	goto $label$1 
	
.LABEL $label$30
	if ( ((int_64)$2 > (int_64)4921564679018381311) ){ goto $label$22 }
	if ( ((int_64)$2 == (int_64)-3102536759825661952) ){ goto $label$14 }
	if ( ((int_64)$2 != (int_64)-3075276115105632768) ){ goto $label$1 }
	*($3 + [412]) = [0]
	*($3 + [408]) = [7]
	*($3 + [112]) = *($3 + [408])
	CALL $52($1, $1, ($3 + [112]))
	goto $label$1 
	
.LABEL $label$29
	if ( ((int_64)$2 > (int_64)-4417333445814501377) ){ goto $label$21 }
	if ( ((int_64)$2 == (int_64)-4994301949000253440) ){ goto $label$13 }
	if ( ((int_64)$2 != (int_64)-4420677573848919040) ){ goto $label$1 }
	*($3 + [452]) = [0]
	*($3 + [448]) = [8]
	*($3 + [72]) = *($3 + [448])
	CALL $54($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$28
	if ( ((int_64)$2 > (int_64)-3617168760277827585) ){ goto $label$20 }
	if ( ((int_64)$2 == (int_64)-4060403175468548096) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)-4060401516693946368) ){ goto $label$1 }
	*($3 + [388]) = [0]
	*($3 + [384]) = [9]
	*($3 + [136]) = *($3 + [384])
	CALL $56($1, $1, ($3 + [136]))
	goto $label$1 
	
.LABEL $label$27
	if ( ((int_64)$2 > (int_64)-4417083046977293041) ){ goto $label$19 }
	if ( ((int_64)$2 == (int_64)-4417087366677948752) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)-4417087366670732640) ){ goto $label$1 }
	*($3 + [364]) = [0]
	*($3 + [360]) = [10]
	*($3 + [160]) = *($3 + [360])
	CALL $50($1, $1, ($3 + [160]))
	goto $label$1 
	
.LABEL $label$26
	if ( ((int_64)$2 == (int_64)4981848853887762432) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$1 }
	*($3 + [524]) = [0]
	*($3 + [520]) = [11]
	*($3) = *($3 + [520])
	CALL $46($1, $1, $3)
	goto $label$1 
	
.LABEL $label$25
	if ( ((int_64)$2 == (int_64)-5002966724473339904) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-4994302189668794368) ){ goto $label$1 }
	*($3 + [276]) = [0]
	*($3 + [272]) = [12]
	*($3 + [248]) = *($3 + [272])
	CALL $60($1, $1, ($3 + [248]))
	goto $label$1 
	
.LABEL $label$24
	if ( ((int_64)$2 == (int_64)-4157661250656665600) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-4060403901285096960) ){ goto $label$1 }
	*($3 + [404]) = [0]
	*($3 + [400]) = [13]
	*($3 + [120]) = *($3 + [400])
	CALL $60($1, $1, ($3 + [120]))
	goto $label$1 
	
.LABEL $label$23
	if ( ((int_64)$2 == (int_64)-4417147813006324256) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-4417143588841581568) ){ goto $label$1 }
	*($3 + [348]) = [0]
	*($3 + [344]) = [14]
	*($3 + [176]) = *($3 + [344])
	CALL $56($1, $1, ($3 + [176]))
	goto $label$1 
	
.LABEL $label$22
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)4929617502180212736) ){ goto $label$1 }
	*($3 + [492]) = [0]
	*($3 + [488]) = [15]
	*($3 + [32]) = *($3 + [488])
	CALL $64($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$21
	if ( ((int_64)$2 == (int_64)-4417333445814501376) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4417333434197245952) ){ goto $label$1 }
	*($3 + [300]) = [0]
	*($3 + [296]) = [16]
	*($3 + [224]) = *($3 + [296])
	CALL $50($1, $1, ($3 + [224]))
	goto $label$1 
	
.LABEL $label$20
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-3617168522019340288) ){ goto $label$1 }
	*($3 + [476]) = [0]
	*($3 + [472]) = [17]
	*($3 + [48]) = *($3 + [472])
	CALL $67($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$19
	if ( ((int_64)$2 == (int_64)-4417083046977293040) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-4417032216294746448) ){ goto $label$1 }
	*($3 + [380]) = [0]
	*($3 + [376]) = [18]
	*($3 + [144]) = *($3 + [376])
	CALL $50($1, $1, ($3 + [144]))
	goto $label$1 
	
.LABEL $label$18
	*($3 + [428]) = [0]
	*($3 + [424]) = [19]
	*($3 + [96]) = *($3 + [424])
	CALL $70($1, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$17
	*($3 + [500]) = [0]
	*($3 + [496]) = [20]
	*($3 + [24]) = *($3 + [496])
	CALL $72($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$16
	*($3 + [324]) = [0]
	*($3 + [320]) = [21]
	*($3 + [200]) = *($3 + [320])
	CALL $60($1, $1, ($3 + [200]))
	goto $label$1 
	
.LABEL $label$15
	*($3 + [292]) = [0]
	*($3 + [288]) = [22]
	*($3 + [232]) = *($3 + [288])
	CALL $50($1, $1, ($3 + [232]))
	goto $label$1 
	
.LABEL $label$14
	*($3 + [436]) = [0]
	*($3 + [432]) = [23]
	*($3 + [88]) = *($3 + [432])
	CALL $76($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$13
	*($3 + [268]) = [0]
	*($3 + [264]) = [24]
	*($3 + [256]) = *($3 + [264])
	CALL $78($1, $1, ($3 + [256]))
	goto $label$1 
	
.LABEL $label$12
	*($3 + [396]) = [0]
	*($3 + [392]) = [25]
	*($3 + [128]) = *($3 + [392])
	CALL $60($1, $1, ($3 + [128]))
	goto $label$1 
	
.LABEL $label$11
	*($3 + [372]) = [0]
	*($3 + [368]) = [26]
	*($3 + [152]) = *($3 + [368])
	CALL $50($1, $1, ($3 + [152]))
	goto $label$1 
	
.LABEL $label$10
	*($3 + [316]) = [0]
	*($3 + [312]) = [27]
	*($3 + [208]) = *($3 + [312])
	CALL $82($1, $1, ($3 + [208]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [308]) = [0]
	*($3 + [304]) = [28]
	*($3 + [216]) = *($3 + [304])
	CALL $82($1, $1, ($3 + [216]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [468]) = [0]
	*($3 + [464]) = [29]
	*($3 + [56]) = *($3 + [464])
	CALL $85($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [332]) = [0]
	*($3 + [328]) = [30]
	*($3 + [192]) = *($3 + [328])
	CALL $56($1, $1, ($3 + [192]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [444]) = [0]
	*($3 + [440]) = [31]
	*($3 + [80]) = *($3 + [440])
	CALL $88($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [284]) = [0]
	*($3 + [280]) = [32]
	*($3 + [240]) = *($3 + [280])
	CALL $50($1, $1, ($3 + [240]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [484]) = [0]
	*($3 + [480]) = [33]
	*($3 + [40]) = *($3 + [480])
	CALL $91($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [356]) = [0]
	*($3 + [352]) = [34]
	*($3 + [168]) = *($3 + [352])
	CALL $50($1, $1, ($3 + [168]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [420]) = [0]
	*($3 + [416]) = [35]
	*($3 + [104]) = *($3 + [416])
	CALL $82($1, $1, ($3 + [104]))
	
.LABEL $label$1
	CALL $4([0])
	$global$0 = ($3 + [528])
}

int_64 .FUNC $41 (float_64 $0, float_64 $1)
{
	int_64 $2
	int_64 $3
	$2 = (CASTING int_64)(float_64 $0)
	if ( ((uint_64)((int_64)$2 & (int_64)9223372036854775807) > (uint_64)(int_64)9218868437227405312) ){ goto $label$2 }
	$3 = (CASTING int_64)(float_64 $1)
	if ( ((uint_64)((int_64)$3 & (int_64)9223372036854775807) <= (uint_64)(int_64)9218868437227405312) ){ goto $label$3 }
	return $0
	
.LABEL $label$3
	if ( ((int_32)(CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)63)) != (int_32)(CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)63))) ){ goto $label$1 }
	$1 = ( $1 ? $0 : ((float_64)$0 < (float_64)$1) )
	
.LABEL $label$2
	return $1
	
.LABEL $label$1
	return ( $1 ? $0 : ((int_64)$2 < (int_64)0) )
}

int_32 .FUNC $40 (float_32 $0, float_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (CASTING int_32)(float_32 $0)
	if ( ((uint_32)($2 & [2147483647]) > (uint_32)[2139095040]) ){ goto $label$2 }
	$3 = (CASTING int_32)(float_32 $1)
	if ( ((uint_32)($3 & [2147483647]) <= (uint_32)[2139095040]) ){ goto $label$3 }
	return $0
	
.LABEL $label$3
	if ( ((int_32)((int_32)$3 ^ (int_32)$2) <= (int_32)[-1]) ){ goto $label$1 }
	$1 = ( $0 ? $1 : ((float_32)$0 < (float_32)$1) )
	
.LABEL $label$2
	return $1
	
.LABEL $label$1
	return ( $0 ? $1 : ((int_32)$2 < (int_32)[0]) )
}

void .FUNC $47 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	float_64 $9
	int_64 $10
	$6 = ($global$0 - [704])
	$global$0 = $6
	*($6 + [688]) = $2
	*($6 + [696]) = $1
	CALL require_auth($1)
	*(($6 + [680])) = [0]
	*($6 + [664]) = (int_64)-1
	*($6 + [672]) = (int_64)0
	$2 = *($0)
	*($6 + [648]) = $2
	*($6 + [656]) = $2
	CALL $132(($6 + [640]), ($6 + [648]), (int_64)0)
	if ( *($6 + [644]) ){ goto $label$1 }
	CALL eosio_assert([0], [9148])
	$1 = *($6 + [696])
	
.LABEL $label$1
	if ( CALL is_account($1) ){ goto $label$2 }
	CALL eosio_assert([0], [9404])
	
.LABEL $label$2
	if ( CALL is_account(*($6 + [688])) ){ goto $label$3 }
	CALL eosio_assert([0], [9036])
	
.LABEL $label$3
	$2 = *($3 + [8])
	*(($6 + [632])) = [0]
	$1 = (uint_64)$2 >> (uint_64)(int_64)8
	*($6 + [608]) = $1)
	*($6 + [616]) = (int_64)-1
	*($6 + [624]) = (int_64)0
	*($6 + [600]) = *($0)
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$5 }
	*($6 + [560]) = $1
	if ( CALL $97(($6 + [560])) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [8639])
	
.LABEL $label$4
	if ( ((int_64)*($3) > (int_64)0) ){ goto $label$6 }
	CALL eosio_assert([0], [9224])
	
.LABEL $label$6
	$7 = CALL $118(($6 + [600]), $1, [9062])
	if ( ((int_64)*(($3 + [8])) == (int_64)*($7 + [8])) ){ goto $label$7 }
	CALL eosio_assert([0], [8685])
	
.LABEL $label$7
	*((($6 + [560]) + [32])) = [0]
	*($6 + [576]) = (int_64)-1
	*($6 + [584]) = (int_64)0
	$1 = *($0)
	*($6 + [560]) = $1
	$8 = *($6 + [696])
	*($6 + [568]) = $8
	*((($6 + [520]) + [32])) = [0]
	*($6 + [520]) = $1
	*($6 + [536]) = (int_64)-1
	*($6 + [544]) = (int_64)0
	*($6 + [528]) = *($6 + [688])
	CALL $108(($6 + [512]), ($6 + [560]), $8)
	CALL $108(($6 + [504]), ($6 + [520]), *($6 + [688]))
	$7 = *($6 + [516])
	if ( ($7 == 0) ){ goto $label$9 }
	if ( ((int_64)*(($7 + [72])) == (int_64)$2) ){ goto $label$8 }
	
.LABEL $label$9
	$1 = *($6 + [696])
	CALL $109($0, $1, $1)
	
.LABEL $label$8
	$8 = *($6 + [688])
	$1 = *($6 + [696])
	if ( ((int_64)$1 == (int_64)$8) ){ goto $label$10 }
	$7 = *($6 + [508])
	if ( ($7 == 0) ){ goto $label$11 }
	if ( ((int_64)*(($7 + [72])) == (int_64)$2) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $109($0, $8, $1)
	$1 = *($6 + [696])
	
.LABEL $label$10
	*(($6 + [496])) = [0]
	*($6 + [472]) = $1
	*($6 + [480]) = (int_64)-1
	*($6 + [488]) = (int_64)0
	*($6 + [464]) = *($0)
	CALL $142(($6 + [456]), ($6 + [464]), $1)
	if ( ($5 == 0) ){ goto $label$13 }
	$7 = *($6 + [460])
	$1 = *(($7 + [24]))
	$2 = *($7 + [16])
	goto $label$12 
	
.LABEL $label$13
	CALL $110(($6 + [304]), $0, *($6 + [696]))
	CALL $111(($6 + [56]), $0, *($6 + [696]), $1, [0])
	*(($7 = (($6 + [416]) + [8]))) = *((($6 + [304]) + [8]))
	*($6 + [416]) = *($6 + [304])
	CALL $112(($6 + [416]), ($6 + [56]))
	$1 = *($7)
	$2 = *($6 + [416])
	
.LABEL $label$12
	if ( ((int_64)*(($3 + [8])) == (int_64)$1) ){ goto $label$14 }
	CALL eosio_assert([0], [11142])
	
.LABEL $label$14
	if ( ((int_64)*($3) <= (int_64)$2) ){ goto $label$15 }
	CALL eosio_assert([0], [9432])
	
.LABEL $label$15
	*(($6 + [448])) = [0]
	*($6 + [432]) = (int_64)-1
	$1 = (int_64)0
	*($6 + [440]) = (int_64)0
	*($6 + [416]) = *($0)
	*($6 + [424]) = *($6 + [688])
	$2 = CALL $37()
	if ( ($4 == 0) ){ goto $label$16 }
	$9 = ((float_64)(CASTING float_64)(uint_32 $4) * (float_64)(float_64)1e6)
	if ( ((float_64)(float_64)|$9| < (float_64)(float_64)9223372036854775808) ){ goto $label$18 }
	$1 = (int_64)-9223372036854775808
	goto $label$17 
	
.LABEL $label$18
	$1 = (Rounds 0)($9)
	
.LABEL $label$17
	$1 = ((int_64)$2 + (int_64)$1)
	
.LABEL $label$16
	CALL $133(($6 + [408]), ($6 + [416]), *($6 + [696]))
	$7 = *($6 + [412])
	if ( ($7 == 0) ){ goto $label$20 }
	if ( ((int_64)$1 >= (int_64)*($7 + [48])) ){ goto $label$19 }
	CALL eosio_assert([0], [9468])
	goto $label$19 
	
.LABEL $label$20
	if ( ((int_64)*($3) >= (int_64)*(*($6 + [644]) + [120])) ){ goto $label$19 }
	CALL eosio_assert([0], [9298])
	
.LABEL $label$19
	*(($6 + [400])) = [0]
	*($6 + [392]) = (int_64)0
	$7 = [0]
	
.LOOP $label$21:
	*((($6 + [392]) + $7)) = [0]
	$7 = ($7 + [4])
	if ( ((int_32)$7 != (int_32)[12]) ){ goto $label$21 }
	*(($6 + [384])) = [0]
	*($6 + [376]) = (int_64)0
	$7 = [0]
	
.LOOP $label$22:
	*((($6 + [376]) + $7)) = [0]
	$7 = ($7 + [4])
	if ( ((int_32)$7 != (int_32)[12]) ){ goto $label$22 }
	if ( ($5 == 0) ){ goto $label$24 }
	$7 = *($6 + [460])
	if ( ($7 == 0) ){ goto $label$26 }
	if ( ((int_64)*(($3 + [8])) == (int_64)*(($7 + [24]))) ){ goto $label$27 }
	CALL eosio_assert([0], [11142])
	
.LABEL $label$27
	if ( ((int_64)*($3) <= (int_64)*($7 + [16])) ){ goto $label$25 }
	
.LABEL $label$26
	CALL eosio_assert([0], [9537])
	
.LABEL $label$25
	if ( ((int_64)*($6 + [696]) != (int_64)*($6 + [688])) ){ goto $label$28 }
	CALL eosio_assert([0], [9580])
	
.LABEL $label$28
	$8 = *(*($6 + [460]) + [32])
	if ( ((int_64)$8 <= (int_64)$1) ){ goto $label$29 }
	CALL eosio_assert([0], [9616])
	$8 = *(*($6 + [460]) + [32])
	
.LABEL $label$29
	$7 = ($3 + [8])
	$10 = *($7)
	*((($6 + [360]) + [8])) = $10
	$2 = *($3)
	*((($6 + [24]) + [8])) = $10
	*($6 + [360]) = $2
	*($6 + [24]) = $2
	$2 = *($6 + [696])
	CALL $143($0, $2, $2, ($6 + [24]), $8, $2, [0])
	$2 = *($3)
	$8 = *($7)
	*((($6 + [8]) + [8])) = $8
	*((($6 + [344]) + [8])) = $8
	*($6 + [8]) = $2
	*($6 + [344]) = $2
	$2 = *($6 + [696])
	CALL $135($0, $2, *($6 + [688]), ($6 + [8]), $1, $2, [0])
	CALL $28(($6 + [376]), [9679])
	goto $label$23 
	
.LABEL $label$24
	*(($6 + [336])) = [0]
	*($6 + [320]) = (int_64)-1
	*($6 + [328]) = (int_64)0
	*($6 + [304]) = *($0)
	*($6 + [312]) = *($6 + [696])
	$5 = ($3 + [8])
	$7 = CALL $134(($6 + [304]), (uint_64)*($5) >> (uint_64)(int_64)8), [9375])
	if ( ((int_32)*(*($6 + [644]) + [8]) == (int_32)[1]) ){ goto $label$30 }
	CALL eosio_assert([0], [9685])
	
.LABEL $label$30
	if ( ((int_64)*($5) == (int_64)*($7 + [8])) ){ goto $label$31 }
	CALL eosio_assert([0], [11142])
	
.LABEL $label$31
	if ( ((int_64)*($3) <= (int_64)*($7)) ){ goto $label$32 }
	CALL eosio_assert([0], [9734])
	
.LABEL $label$32
	$8 = *(($3 + [8]))
	*((($6 + [288]) + [8])) = $8
	$2 = *($3)
	*((($6 + [40]) + [8])) = $8
	*($6 + [288]) = $2
	*($6 + [40]) = $2
	$2 = *($6 + [696])
	CALL $135($0, $2, *($6 + [688]), ($6 + [40]), $1, $2, [0])
	CALL $28(($6 + [376]), [9777])
	CALL $124(($6 + [328]))
	
.LABEL $label$23
	CALL $144(($6 + [144]), ($6 + [696]))
	$5 = CALL $34(($6 + [144]), [0], [9784])
	*((($6 + [160]) + [8])) = *(($5 + [8]))
	*($6 + [160]) = *($5)
	$7 = [0]
	
.LOOP $label$33:
	*(($5 + $7)) = [0]
	$7 = ($7 + [4])
	if ( ((int_32)$7 != (int_32)[12]) ){ goto $label$33 }
	$5 = CALL $31(($6 + [160]), [9795])
	*((($6 + [176]) + [8])) = *(($5 + [8]))
	*($6 + [176]) = *($5)
	$7 = [0]
	
.LOOP $label$34:
	*(($5 + $7)) = [0]
	$7 = ($7 + [4])
	if ( ((int_32)$7 != (int_32)[12]) ){ goto $label$34 }
	$7 = *($6 + [376])
	$5 = ($7 & [1])
	$5 = CALL $32(($6 + [176]), ( *($6 + [384]) ? (($6 + [376]) | [1]) : $5 ), ( *($6 + [380]) ? uint_32($7 >> [1]) : $5 ))
	*((($6 + [192]) + [8])) = *(($5 + [8]))
	*($6 + [192]) = *($5)
	$7 = [0]
	
.LOOP $label$35:
	*(($5 + $7)) = [0]
	$7 = ($7 + [4])
	if ( ((int_32)$7 != (int_32)[12]) ){ goto $label$35 }
	$5 = CALL $31(($6 + [192]), [9803])
	*((($6 + [208]) + [8])) = *(($5 + [8]))
	*($6 + [208]) = *($5)
	$7 = [0]
	
.LOOP $label$36:
	*(($5 + $7)) = [0]
	$7 = ($7 + [4])
	if ( ((int_32)$7 != (int_32)[12]) ){ goto $label$36 }
	$5 = CALL $31(($6 + [208]), [9826])
	*((($6 + [224]) + [8])) = *(($5 + [8]))
	*($6 + [224]) = *($5)
	$7 = [0]
	
.LOOP $label$37:
	*(($5 + $7)) = [0]
	$7 = ($7 + [4])
	if ( ((int_32)$7 != (int_32)[12]) ){ goto $label$37 }
	CALL $144(($6 + [128]), ($6 + [688]))
	$7 = *($6 + [128])
	$5 = ($7 & [1])
	$5 = CALL $32(($6 + [224]), ( *($6 + [136]) ? (($6 + [128]) | [1]) : $5 ), ( *($6 + [132]) ? uint_32($7 >> [1]) : $5 ))
	*((($6 + [240]) + [8])) = *(($5 + [8]))
	*($6 + [240]) = *($5)
	$7 = [0]
	
.LOOP $label$38:
	*(($5 + $7)) = [0]
	$7 = ($7 + [4])
	if ( ((int_32)$7 != (int_32)[12]) ){ goto $label$38 }
	$5 = CALL $31(($6 + [240]), [9838])
	*((($6 + [256]) + [8])) = *(($5 + [8]))
	*($6 + [256]) = *($5)
	$7 = [0]
	
.LOOP $label$39:
	*(($5 + $7)) = [0]
	$7 = ($7 + [4])
	if ( ((int_32)$7 != (int_32)[12]) ){ goto $label$39 }
	CALL $145(($6 + [112]), $3)
	$7 = *($6 + [112])
	$5 = ($7 & [1])
	$5 = CALL $32(($6 + [256]), ( *($6 + [120]) ? (($6 + [112]) | [1]) : $5 ), ( *($6 + [116]) ? uint_32($7 >> [1]) : $5 ))
	*((($6 + [272]) + [8])) = *(($5 + [8]))
	*($6 + [272]) = *($5)
	$7 = [0]
	
.LOOP $label$40:
	*(($5 + $7)) = [0]
	$7 = ($7 + [4])
	if ( ((int_32)$7 != (int_32)[12]) ){ goto $label$40 }
	$5 = CALL $31(($6 + [272]), [9848])
	*((($6 + [80]) + [8])) = *(($5 + [8]))
	*($6 + [80]) = *($5)
	$7 = [0]
	
.LOOP $label$41:
	*(($5 + $7)) = [0]
	$7 = ($7 + [4])
	if ( ((int_32)$7 != (int_32)[12]) ){ goto $label$41 }
	CALL $35(($6 + [96]), $4)
	$7 = *($6 + [96])
	$5 = ($7 & [1])
	$5 = CALL $32(($6 + [80]), ( *($6 + [104]) ? (($6 + [96]) | [1]) : $5 ), ( *($6 + [100]) ? uint_32($7 >> [1]) : $5 ))
	*((($6 + [56]) + [8])) = *(($5 + [8]))
	*($6 + [56]) = *($5)
	$7 = [0]
	
.LOOP $label$42:
	*(($5 + $7)) = [0]
	$7 = ($7 + [4])
	if ( ((int_32)$7 != (int_32)[12]) ){ goto $label$42 }
	$5 = CALL $31(($6 + [56]), [9858])
	*((($6 + [304]) + [8])) = *(($5 + [8]))
	*($6 + [304]) = *($5)
	$7 = [0]
	
.LOOP $label$43:
	*(($5 + $7)) = [0]
	$7 = ($7 + [4])
	if ( ((int_32)$7 != (int_32)[12]) ){ goto $label$43 }
	if ( (*($6 + [392]) & [1]) ){ goto $label$45 }
	*($6 + [392]) = [0]
	goto $label$44 
	
.LABEL $label$45
	*(*($6 + [400])) = [0]
	*($6 + [396]) = [0]
	
.LABEL $label$44
	CALL $27(($6 + [392]), [0])
	*((($6 + [392]) + [8])) = *((($6 + [304]) + [8]))
	*($6 + [392]) = *($6 + [304])
	$7 = [0]
	
.LOOP $label$46:
	*((($6 + [304]) + $7)) = [0]
	$7 = ($7 + [4])
	if ( ((int_32)$7 != (int_32)[12]) ){ goto $label$46 }
	if ( ((*($6 + [304]) & [1]) == 0) ){ goto $label$47 }
	CALL $10(*($6 + [312]))
	
.LABEL $label$47
	if ( ((*($6 + [56]) & [1]) == 0) ){ goto $label$48 }
	CALL $10(*($6 + [64]))
	
.LABEL $label$48
	if ( ((*($6 + [96]) & [1]) == 0) ){ goto $label$49 }
	CALL $10(*(($6 + [104])))
	
.LABEL $label$49
	if ( ((*($6 + [80]) & [1]) == 0) ){ goto $label$50 }
	CALL $10(*($6 + [88]))
	
.LABEL $label$50
	if ( ((*($6 + [272]) & [1]) == 0) ){ goto $label$51 }
	CALL $10(*($6 + [280]))
	
.LABEL $label$51
	if ( ((*($6 + [112]) & [1]) == 0) ){ goto $label$52 }
	CALL $10(*(($6 + [120])))
	
.LABEL $label$52
	if ( ((*($6 + [256]) & [1]) == 0) ){ goto $label$53 }
	CALL $10(*($6 + [264]))
	
.LABEL $label$53
	if ( ((*($6 + [240]) & [1]) == 0) ){ goto $label$54 }
	CALL $10(*($6 + [248]))
	
.LABEL $label$54
	if ( ((*($6 + [128]) & [1]) == 0) ){ goto $label$55 }
	CALL $10(*(($6 + [136])))
	
.LABEL $label$55
	if ( ((*($6 + [224]) & [1]) == 0) ){ goto $label$56 }
	CALL $10(*($6 + [232]))
	
.LABEL $label$56
	if ( ((*($6 + [208]) & [1]) == 0) ){ goto $label$57 }
	CALL $10(*($6 + [216]))
	
.LABEL $label$57
	if ( ((*($6 + [192]) & [1]) == 0) ){ goto $label$58 }
	CALL $10(*($6 + [200]))
	
.LABEL $label$58
	if ( ((*($6 + [176]) & [1]) == 0) ){ goto $label$59 }
	CALL $10(*($6 + [184]))
	
.LABEL $label$59
	if ( ((*($6 + [160]) & [1]) == 0) ){ goto $label$60 }
	CALL $10(*($6 + [168]))
	
.LABEL $label$60
	if ( ((*($6 + [144]) & [1]) == 0) ){ goto $label$61 }
	CALL $10(*($6 + [152]))
	
.LABEL $label$61
	*($6 + [88]) = (int_64)3617214756542218240
	$1 = *($0)
	*($6 + [80]) = $1
	*($6 + [56]) = $1
	CALL $25(($6 + [64]), ($6 + [392]))
	$7 = CALL $146(($6 + [304]), ($6 + [80]), $1, (int_64)-4420677573848919040, ($6 + [56]))
	CALL $107($7)
	$5 = *($7 + [28])
	if ( ($5 == 0) ){ goto $label$62 }
	*(($7 + [32])) = $5
	CALL $10($5)
	
.LABEL $label$62
	$5 = *($7 + [16])
	if ( ($5 == 0) ){ goto $label$63 }
	*(($7 + [20])) = $5
	CALL $10($5)
	
.LABEL $label$63
	if ( ((*($6 + [64]) & [1]) == 0) ){ goto $label$64 }
	CALL $10(*(($6 + [72])))
	
.LABEL $label$64
	if ( ((*($6 + [376]) & [1]) == 0) ){ goto $label$65 }
	CALL $10(*(($6 + [384])))
	
.LABEL $label$65
	if ( ((*($6 + [392]) & [1]) == 0) ){ goto $label$66 }
	CALL $10(*($6 + [400]))
	
.LABEL $label$66
	CALL $136((($6 + [416]) + [24]))
	CALL $147((($6 + [464]) + [24]))
	CALL $115((($6 + [520]) + [24]))
	CALL $115((($6 + [560]) + [24]))
	CALL $101((($6 + [600]) + [24]))
	CALL $137((($6 + [648]) + [24]))
	$global$0 = ($6 + [704])
}

int_32 .FUNC $46 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [128])
	$global$0 = $3
	*(($4 = $3) + [88]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $1($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*(($4 + [80])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [52]) = $3
	*($4 + [48]) = $3
	*($4 + [56]) = ($3 + $2)
	CALL $94(($4 + [48]), ($4 + [64]))
	CALL $95(($4 + [48]), (($4 + [64]) + [8]))
	*(($5 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [96]) + [8]))) = *($5)
	*($4 + [96]) = *($4)
	$5 = *($6)
	*((($4 + [112]) + [8])) = $5
	*(($4 + [40])) = $5
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [96])
	*($4 + [32]) = $0
	*($4 + [112]) = $0
	*($4 + [116]) = ($4 + [88])
	*($4 + [112]) = ($4 + [16])
	CALL $96(($4 + [112]), ($4 + [64]))
	if ( ($2 <= [513]) ){ goto $label$5 }
	CALL $2($3)
	
.LABEL $label$5
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $45 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL prints([8711])
	$4 = *($2 + [8])
	$5 = (uint_64)$4 >> (uint_64)(int_64)8
	*($3 + [136]) = $5)
	if ( CALL $97(($3 + [136])) ){ goto $label$1 }
	CALL eosio_assert([0], [8257])
	
.LABEL $label$1
	*(($3 + [168])) = [0]
	*($3 + [144]) = $5
	*($3 + [152]) = (int_64)-1
	*($3 + [160]) = (int_64)0
	*($3 + [136]) = *($0)
	CALL $98(($3 + [128]), ($3 + [136]), $5)
	$6 = *($3 + [132])
	if ( $6 ){ goto $label$2 }
	CALL eosio_assert([0], [8720])
	$6 = *($3 + [132])
	
.LABEL $label$2
	CALL require_auth($1)
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$4 }
	*($3 + [88]) = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	if ( CALL $97(($3 + [88])) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [8639])
	
.LABEL $label$3
	if ( ((int_64)*($2) > (int_64)0) ){ goto $label$5 }
	CALL eosio_assert([0], [8757])
	
.LABEL $label$5
	if ( ((int_64)*(($2 + [8])) == (int_64)*($6 + [8])) ){ goto $label$6 }
	CALL eosio_assert([0], [8685])
	
.LABEL $label$6
	*(($3 + [120])) = [0]
	*($3 + [96]) = $1
	*($3 + [104]) = (int_64)-1
	*($3 + [112]) = (int_64)0
	*($3 + [88]) = *($0)
	CALL $108(($3 + [80]), ($3 + [88]), $1)
	$7 = *($3 + [84])
	if ( ($7 == 0) ){ goto $label$8 }
	if ( ((int_64)*(($7 + [72])) == (int_64)$4) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $109($0, $1, $1)
	
.LABEL $label$7
	CALL $110(($3 + [48]), $0, $1)
	CALL $111(($3 + [32]), $0, $1, $1, [0])
	*(($7 = (($3 + [64]) + [8]))) = *((($3 + [48]) + [8]))
	*($3 + [64]) = *($3 + [48])
	CALL $112(($3 + [64]), ($3 + [32]))
	if ( ((int_64)*(($2 + [8])) == (int_64)*($7)) ){ goto $label$9 }
	CALL eosio_assert([0], [11142])
	
.LABEL $label$9
	if ( ((int_64)*($2) <= (int_64)*($3 + [64])) ){ goto $label$10 }
	CALL eosio_assert([0], [8788])
	
.LABEL $label$10
	$4 = *(($2 + [8]))
	*((($3 + [16]) + [8])) = $4
	$5 = *($2)
	*(($3 + [8])) = $4
	*($3 + [16]) = $5
	*($3) = $5
	CALL $113($0, $1, $3, $1)
	$1 = *($0)
	*($3 + [48]) = $2
	CALL $114(($3 + [136]), $6, $1, ($3 + [48]))
	CALL $115((($3 + [88]) + [24]))
	CALL $101((($3 + [136]) + [24]))
	$global$0 = ($3 + [176])
}

int_32 .FUNC $44 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [80])) = (int_64)0
	*(($4 + [96])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [88]) = (int_64)0
	$3 = [24]
	
.LOOP $label$4:
	*((($4 + [64]) + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[36]) ){ goto $label$4 }
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [128]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $102(($4 + [16]), ($4 + [128]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4)
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [16])
	CALL $103(($4 + [128]), ($4 + [64]))
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL $2($2)
	
.LABEL $label$5
	if ( ((*((($4 + [64]) + [24])) & [1]) == 0) ){ goto $label$6 }
	CALL $10(*(($4 + [96])))
	
.LABEL $label$6
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $222 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [96]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$6 = *($3 + [4])
	$7 = *($1)
	if ( (*(*($3)) == 0) ){ goto $label$4 }
	*($1 + [64]) = *($6)
	*(($1 + [72])) = *(($6 + [8]))
	*($1 + [80]) = *(*($3 + [8]))
	$6 = ($1 + [16])
	$8 = ($1 + [64])
	goto $label$3 
	
.LABEL $label$4
	*($1 + [16]) = *($6)
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [48]) = *(*($3 + [8]))
	$8 = ($1 + [64])
	$6 = ($1 + [16])
	
.LABEL $label$3
	$4 = $4
	$3 = ($4 + [-96])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = $4
	*($5 + [16]) = $5
	*($5 + [32]) = $6
	*($5 + [48]) = $8
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [8])
	*($5 + [36]) = ($1 + [32])
	*($5 + [40]) = ($1 + [48])
	*($5 + [44]) = ($1 + [56])
	*($5 + [52]) = ($1 + [80])
	*($5 + [56]) = ($1 + [88])
	CALL $323(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [100]), $2, $3, [96])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$global$0 = ($5 + [64])
}

void .FUNC $267 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [144])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [100]) = $2
	*($3 + [96]) = $2
	*($3 + [104]) = ($2 + $4)
	*($3 + [88]) = (int_64)0
	*($3 + [80]) = (int_64)0
	CALL $95(($3 + [96]), ($3 + [80]))
	*(($2 = (($3 + [32]) + [8]))) = *($3 + [104])
	*($3 + [32]) = *($3 + [96])
	*(($4 = (($3 + [112]) + [8]))) = *($2)
	*($3 + [112]) = *($3 + [32])
	$2 = *($4)
	*((($3 + [128]) + [8])) = $2
	*(($3 + [72])) = $2
	*($3 + [48]) = $0
	*($3 + [56]) = $1
	$0 = *($3 + [112])
	*($3 + [64]) = $0
	*($3 + [128]) = $0
	$0 = *($3 + [88])
	*((($3 + [16]) + [8])) = $0
	*(($3 + [8])) = $0
	$0 = *($3 + [80])
	*($3) = $0
	*($3 + [16]) = $0
	CALL $86(($3 + [48]), $3)
	$global$0 = ($3 + [144])
}

void .FUNC $234 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [24]
	CALL $296($2, ($1 + [24]))
	CALL $277($0, *($2))
	$3 = *($0)
	*($2) = $3
	*($2 + [4]) = $3
	*($2 + [8]) = *($0 + [4])
	*($2 + [16]) = $2
	*($2 + [24]) = $1
	CALL $316(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [32])
}

void .FUNC $233 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL prints($0)
	$0 = *($1)
	$2 = ($0 & [1])
	CALL prints_l(( *($1 + [8]) ? ($1 + [1]) : $2 ), ( *($1 + [4]) ? uint_32($0 >> [1]) : $2 ))
}

void .FUNC $249 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [176])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [132]) = $2
	*($3 + [128]) = $2
	*($3 + [136]) = ($2 + $4)
	*($3 + [120]) = (int_64)0
	CALL $94(($3 + [128]), ($3 + [120]))
	*($3 + [112]) = (int_64)0
	CALL $94(($3 + [128]), ($3 + [112]))
	*($3 + [104]) = (int_64)0
	*($3 + [96]) = (int_64)0
	CALL $95(($3 + [128]), ($3 + [96]))
	$2 = *($3 + [132])
	if ( ((uint_32)(*($3 + [136]) - $2) > (uint_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [11710])
	$2 = *($3 + [132])
	
.LABEL $label$5
	CALL memcpy(($3 + [92]), $2, [4])
	*($3 + [132]) = (*($3 + [132]) + [4])
	*(($2 = (($3 + [40]) + [8]))) = *((($3 + [128]) + [8]))
	*($3 + [40]) = *($3 + [128])
	*(($4 = (($3 + [144]) + [8]))) = *($2)
	*($3 + [144]) = *($3 + [40])
	$2 = *($4)
	*((($3 + [160]) + [8])) = $2
	*(($3 + [80])) = $2
	*($3 + [56]) = $0
	*($3 + [64]) = $1
	$0 = *($3 + [144])
	*($3 + [72]) = $0
	*($3 + [160]) = $0
	$0 = *((($3 + [96]) + [8]))
	*((($3 + [24]) + [8])) = $0
	*((($3 + [8]) + [8])) = $0
	$0 = *($3 + [96])
	*($3 + [24]) = $0
	*($3 + [8]) = $0
	CALL $66(($3 + [56]), *($3 + [120]), *($3 + [112]), ($3 + [8]), *($3 + [92]))
	$global$0 = ($3 + [176])
}

void .FUNC $226 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [196]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	*($1 + [56]) = (*($1 + [56]) + [-1])
	$6 = *($1)
	CALL $112(($1 + [64]), *($3))
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [11863])
	
.LABEL $label$3
	$3 = $4
	$4 = ($3 + [-192])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-15])
	*($5 + [24]) = ($5 + [8])
	CALL $166($1, ($5 + [24]))
	CALL db_update_i64(*($1 + [200]), $2, $4, [177])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($5 + [32])
}

void .FUNC $167 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $289(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $290($0, $9)
	CALL $291($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $166 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [96])
	$global$0 = $2
	*($2 + [8]) = $0
	*($2 + [12]) = ($0 + [8])
	*($2 + [16]) = ($0 + [16])
	*($2 + [20]) = ($0 + [32])
	*($2 + [24]) = ($0 + [40])
	*($2 + [28]) = ($0 + [56])
	*($2 + [32]) = ($0 + [64])
	*($2 + [36]) = ($0 + [80])
	*($2 + [40]) = ($0 + [96])
	*($2 + [44]) = ($0 + [100])
	*($2 + [48]) = ($0 + [104])
	*($2 + [52]) = ($0 + [108])
	*($2 + [56]) = ($0 + [112])
	*($2 + [60]) = ($0 + [120])
	*($2 + [64]) = ($0 + [136])
	*($2 + [68]) = ($0 + [144])
	*($2 + [72]) = ($0 + [160])
	*($2 + [76]) = ($0 + [176])
	*($2 + [80]) = ($0 + [184])
	*($2 + [88]) = ($0 + [192])
	*($2 + [84]) = ($0 + [188])
	CALL $310(($2 + [8]), $1)
	$global$0 = ($2 + [96])
}

void .FUNC $165 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	float_32 $7
	int_64 $8
	float_64 $9
	int_64 $10
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [196]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	*($1 + [8]) = [1]
	$6 = *($3)
	*($1 + [40]) = *($6)
	*(($1 + [48])) = *(($6 + [8]))
	$6 = *($3)
	*($1 + [16]) = *($6)
	*(($1 + [24])) = *(($6 + [8]))
	$6 = *($3)
	*($1 + [64]) = *($6)
	*(($1 + [72])) = *(($6 + [8]))
	*($1 + [56]) = [0]
	$7 = *(*($3 + [4]))
	if ( ((float_32)(float_32)|$7| < (float_32)(float_32)9223372036854775808) ){ goto $label$4 }
	$8 = (int_64)-9223372036854775808
	goto $label$3 
	
.LABEL $label$4
	$8 = (Rounds 0)($7)
	
.LABEL $label$3
	$9 = ((float_64)(CASTING float_64)(int_64 $8) * (float_64)(float_64)1e5)
	if ( ((float_64)(float_64)|$9| < (float_64)(float_64)9223372036854775808) ){ goto $label$6 }
	$10 = (int_64)-9223372036854775808
	goto $label$5 
	
.LABEL $label$6
	$10 = (Rounds 0)($9)
	
.LABEL $label$5
	$8 = *($1)
	CALL $121(($5 + [16]), $10, *(*($3 + [8])))
	$6 = (($5 + [16]) + [8])
	*(($1 + [128])) = *($6)
	*($1 + [120]) = *($5 + [16])
	*($1 + [100 align=4]) = (int_64)4812096203217757206
	*($1 + [108 align=4]) = (int_64)3826847249711383479
	*($1 + [136]) = [1028443341]
	$7 = ((float_32)*(*($3 + [4])) * (float_32)(float_32)1e4)
	if ( ((float_32)(float_32)|$7| < (float_32)(float_32)9223372036854775808) ){ goto $label$8 }
	$10 = (int_64)-9223372036854775808
	goto $label$7 
	
.LABEL $label$8
	$10 = (Rounds 0)($7)
	
.LABEL $label$7
	CALL $121(($5 + [16]), $10, *(*($3 + [8])))
	*(($1 + [152])) = *($6)
	*($1 + [144]) = *($5 + [16])
	if ( (*(*($3 + [12])) == 0) ){ goto $label$9 }
	$3 = *($3)
	*($1 + [160]) = *($3)
	*(($1 + [168])) = *(($3 + [8]))
	
.LABEL $label$9
	*($1 + [192]) = [1120403456]
	*($1 + [184]) = (int_64)4417130516253546963
	if ( ((int_64)$8 == (int_64)*($1)) ){ goto $label$10 }
	CALL eosio_assert([0], [11863])
	
.LABEL $label$10
	$4 = $4
	$3 = ($4 + [-192])
	$global$0 = $3
	*($5 + [20]) = $3
	*($5 + [16]) = $3
	*($5 + [24]) = ($4 + [-15])
	*($5 + [8]) = ($5 + [16])
	CALL $166($1, ($5 + [8]))
	CALL db_update_i64(*($1 + [200]), $2, $3, [177])
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$global$0 = ($5 + [32])
}

void .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = (($2 + [16]) + [8]))) = *(($1 + [24]))
	*($2 + [16]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$6 = *($1 + [32])
	$7 = *($1 + [36])
	$8 = *($1 + [37])
	$9 = *($1 + [38])
	*((($2 + [32]) + [8])) = *($3)
	*($2 + [32]) = *($2 + [16])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$10 = *((($2 + [32]) + [8]))
	*((($2 + [48]) + [8])) = $10
	*(($2 + [8])) = $10
	$10 = *($2 + [32])
	*($2) = $10
	*($2 + [48]) = $10
	CALL void $0((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 ((int_32)($7 & [255]) != (int_32)[0])), (int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 ((int_32)($9 & [255]) != (int_32)[0])), (int_32 $1))
	$global$0 = ($2 + [64])
}

void .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $94(*($1), *($0))
	$0 = *($0)
	CALL $94(*($1), ($0 + [8]))
	CALL $95(*($1), ($0 + [16]))
	$3 = ($0 + [32])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [11710])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	*($2 + [8]) = $0
	CALL $285(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $162 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [80]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	*($1 + [48]) = *(*($3))
	$6 = *($1)
	$7 = ($1 + [16])
	CALL $154($7, *($3 + [4]))
	$8 = ($1 + [32])
	CALL $154($8, *($3 + [8]))
	*($1 + [8]) = *(*($3 + [12]))
	*($1 + [56]) = *(*($3))
	$9 = ($1 + [8])
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [11863])
	
.LABEL $label$3
	$4 = $4
	$3 = ($4 + [-80])
	$global$0 = $3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($4 + [-4])
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $9
	*($5 + [40]) = $7
	*($5 + [44]) = $8
	*($5 + [32]) = $1
	*($5 + [48]) = ($1 + [48])
	*($5 + [52]) = ($1 + [56])
	*($5 + [56]) = ($1 + [64])
	CALL $174(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [84]), $2, $3, [76])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($5 + [64])
}

int_32 .FUNC $161 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$6 = CALL $8([16])
	*($0 + [16]) = $6
	*(($7 = ($0 + [20]))) = $6
	$8 = ($6 + [16])
	*($5) = $8
	*(($6 + [8])) = *(($1 + [8]))
	*($6) = *($1)
	*($7) = $8
	CALL $234(($0 + [28]), $4)
	return $0
}

void .FUNC $160 (int_32 $0, int_64 $1, int_64 $2, float_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	float_32 $7
	$5 = ($global$0 - [80])
	$global$0 = $5
	*(($5 + [64])) = [0]
	*($5 + [48]) = (int_64)-1
	*($5 + [56]) = (int_64)0
	$6 = *($0)
	*($5 + [32]) = $6
	*($5 + [40]) = $6
	CALL $132(($5 + [24]), ($5 + [32]), (int_64)0)
	if ( *($5 + [28]) ){ goto $label$1 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$1
	*($5 + [76]) = CALL $16([9399])
	*($5 + [72]) = [9399]
	*($5) = *($5 + [72])
	$6 = *(CALL $138(($5 + [8]), $5))
	CALL $39((float_64)10, (float_64)4)
	$1 = (int_64)
	$0 = *($5 + [28])
	$3 = CALL $40(((float_32)$3 / (float_32)*($0 + [108])), *($0 + [112]))
	$7 = ((float_32)$3 * (float_32)(CASTING float_32)(int_64 $1($2 - ( $2 ? $1 : (int_64)($1 == 0) ))))
	if ( ((float_32)(float_32)|$7)| < (float_32)(float_32)9223372036854775808) ){ goto $label$3 }
	$2 = (int_64)-9223372036854775808
	goto $label$2 
	
.LABEL $label$3
	$2 = (Rounds 0)($7)
	
.LABEL $label$2
	CALL $121(($5 + [8]), $2, ((int_64)((int_64)$6 << (int_64)8) | (int_64)4))
	*(($4 + [8])) = *((($5 + [8]) + [8]))
	*($4) = *($5 + [8])
	CALL prints([11071])
	CALL printi($1)
	CALL prints([11076])
	CALL printsf($3)
	CALL $145(($5 + [8]), $4)
	CALL $233([11089], ($5 + [8]))
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL $10(*($5 + [16]))
	
.LABEL $label$4
	CALL $137(($5 + [56]))
	$global$0 = ($5 + [80])
}

int_32 .FUNC $289 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $8(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $230 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$5 = *($1 + [8])
	*(($1 + ( [56] ? [32] : *(*($2)) ))) = *(*($2 + [4]))
	$3 = $3
	$2 = ($3 + [-64])
	$global$0 = $2
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = $3
	*($4 + [16]) = $4
	*($4 + [28]) = ($1 + [8])
	*($4 + [24]) = $1
	*($4 + [32]) = ($1 + [16])
	*($4 + [36]) = ($1 + [32])
	*($4 + [40]) = ($1 + [40])
	*($4 + [44]) = ($1 + [56])
	CALL $324(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [68]), (int_64)0, $2, [64])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $244 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = [0]
	CALL $325($0, ($2 + [8]))
	CALL $277($1, *($2 + [8]))
	$4 = *($1)
	$1 = (*($1 + [4]) - $4)
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) >= (uint_32)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [11710])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $3, $1)
	*(($3 = ($0 + [4]))) = (*($3) + $1)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $169 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *($2 + [4])
	if ( $3 ){ goto $label$1 }
	CALL eosio_assert([0], [12040])
	$3 = *(($2 + [4]))
	
.LABEL $label$1
	CALL $170($2)
	CALL $235($1, $3)
	*($0) = *($2)
}

void .FUNC $168 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = [0]
	$4 = CALL db_lowerbound_i64(*($1), *($1 + [8]), (int_64)-4157660971118100480, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $317($1, $4)
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
}

void .FUNC $245 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [160])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [116]) = $2
	*($3 + [112]) = $2
	*($3 + [120]) = ($2 + $4)
	*($3 + [104]) = (int_64)0
	CALL $94(($3 + [112]), ($3 + [104]))
	*($3 + [96]) = (int_64)0
	*($3 + [88]) = (int_64)0
	CALL $95(($3 + [112]), ($3 + [88]))
	*(($2 = (($3 + [40]) + [8]))) = *($3 + [120])
	*($3 + [40]) = *($3 + [112])
	*(($4 = (($3 + [128]) + [8]))) = *($2)
	*($3 + [128]) = *($3 + [40])
	$2 = *($4)
	*((($3 + [144]) + [8])) = $2
	*(($3 + [80])) = $2
	*($3 + [56]) = $0
	*($3 + [64]) = $1
	$0 = *($3 + [128])
	*($3 + [72]) = $0
	*($3 + [144]) = $0
	$0 = *($3 + [96])
	*((($3 + [24]) + [8])) = $0
	*((($3 + [8]) + [8])) = $0
	$0 = *($3 + [88])
	*($3 + [24]) = $0
	*($3 + [8]) = $0
	CALL $45(($3 + [56]), *($3 + [104]), ($3 + [8]))
	$global$0 = ($3 + [160])
}

void .FUNC $279 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$6 = ($4 - $5)
	$7 = ($6 + $1)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = ($0 + [8])
	$3 = ($3 - $5)
	if ( ((uint_32)$3 >= (uint_32)[1073741823]) ){ goto $label$5 }
	*(($2 + [24])) = $4
	$4 = [0]
	*($2 + [20]) = [0]
	$3 = ($3 << [1])
	$3 = ( $7 ? $3 : ($3 <= $7) )
	if ( $3 ){ goto $label$4 }
	$3 = [0]
	goto $label$3 
	
.LABEL $label$6
	$3 = ($0 + [4])
	
.LOOP $label$7:
	*($4) = [0]
	$4 = (*($3) + [1])
	*($3) = $4
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$5
	*(($2 + [24])) = $4
	*($2 + [20]) = [0]
	$3 = [2147483647]
	
.LABEL $label$4
	$4 = CALL $8($3)
	
.LABEL $label$3
	*($2 + [8]) = $4
	*(($2 + [20])) = ($4 + $3)
	$4 = ($4 + $6)
	*($2 + [16]) = $4
	*($2 + [12]) = $4
	$3 = ($2 + [16])
	
.LOOP $label$8:
	*($4) = [0]
	$4 = (*($3) + [1])
	*($3) = $4
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	CALL $282($0, ($2 + [8]))
	$4 = *($2 + [12])
	$1 = ($2 + [16])
	if ( ((int_32)*($1) == (int_32)$4) ){ goto $label$9 }
	*($1) = $4
	
.LABEL $label$9
	$1 = *($2 + [8])
	if ( ($1 == 0) ){ goto $label$2 }
	CALL $10($1)
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $175 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $300(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $301($0, $9)
	CALL $302($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $242 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [160])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [116]) = $2
	*($3 + [112]) = $2
	*($3 + [120]) = ($2 + $4)
	*($3 + [104]) = (int_64)0
	CALL $94(($3 + [112]), ($3 + [104]))
	*($3 + [96]) = (int_64)0
	*($3 + [88]) = (int_64)0
	CALL $95(($3 + [112]), ($3 + [88]))
	*(($2 = (($3 + [40]) + [8]))) = *($3 + [120])
	*($3 + [40]) = *($3 + [112])
	*(($4 = (($3 + [128]) + [8]))) = *($2)
	*($3 + [128]) = *($3 + [40])
	$2 = *($4)
	*((($3 + [144]) + [8])) = $2
	*(($3 + [80])) = $2
	*($3 + [56]) = $0
	*($3 + [64]) = $1
	$0 = *($3 + [128])
	*($3 + [72]) = $0
	*($3 + [144]) = $0
	$0 = *($3 + [96])
	*((($3 + [24]) + [8])) = $0
	*((($3 + [8]) + [8])) = $0
	$0 = *($3 + [88])
	*($3 + [24]) = $0
	*($3 + [8]) = $0
	CALL $58(($3 + [56]), *($3 + [104]), ($3 + [8]))
	$global$0 = ($3 + [160])
}

void .FUNC $288 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11710])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)*($3 + [8]) != (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert([0], [11710])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	CALL $95(*($1), *($0 + [8]))
	$2 = *($0 + [12])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11710])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $95(*($1), *($0 + [16]))
	$2 = *($0 + [20])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [11710])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	CALL $95(*($1), *($0 + [24]))
	CALL $95(*($1), *($0 + [28]))
	$2 = *($0 + [32])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [11710])
	$4 = *(($3 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [36])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [11710])
	$4 = *(($3 + [4]))
	
.LABEL $label$6
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [40])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$7 }
	CALL eosio_assert([0], [11710])
	$4 = *(($3 + [4]))
	
.LABEL $label$7
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [44])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$8 }
	CALL eosio_assert([0], [11710])
	$4 = *(($3 + [4]))
	
.LABEL $label$8
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [48])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$9 }
	CALL eosio_assert([0], [11710])
	$4 = *(($3 + [4]))
	
.LABEL $label$9
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	CALL $95(*($1), *($0 + [52]))
	$2 = *($0 + [56])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$10 }
	CALL eosio_assert([0], [11710])
	$4 = *(($3 + [4]))
	
.LABEL $label$10
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	CALL $95(*($1), *($0 + [60]))
	CALL $95(*($1), *($0 + [64]))
	CALL $94(*($1), *($0 + [68]))
	$2 = *($0 + [72])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$11 }
	CALL eosio_assert([0], [11710])
	$4 = *(($3 + [4]))
	
.LABEL $label$11
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [76])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$12 }
	CALL eosio_assert([0], [11710])
	$4 = *(($3 + [4]))
	
.LABEL $label$12
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$3 = *($0 + [80])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[3]) ){ goto $label$13 }
	CALL eosio_assert([0], [11710])
	$1 = *(($0 + [4]))
	
.LABEL $label$13
	CALL memcpy($3, $1, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
}

void .FUNC $243 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [192])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*($3 + [148]) = $4
	*($3 + [144]) = $4
	*($3 + [152]) = ($4 + $5)
	*($3 + [136]) = (int_64)0
	CALL $94(($3 + [144]), ($3 + [136]))
	*($3 + [128]) = (int_64)0
	*($3 + [120]) = (int_64)0
	CALL $95(($3 + [144]), ($3 + [120]))
	*(($3 + [112])) = [0]
	*($3 + [104]) = (int_64)0
	$4 = [0]
	
.LOOP $label$4:
	*((($3 + [104]) + $4)) = [0]
	$4 = ($4 + [4])
	if ( ((int_32)$4 != (int_32)[12]) ){ goto $label$4 }
	CALL $148(($3 + [144]), ($3 + [104]))
	*(($4 = (($3 + [56]) + [8]))) = *((($3 + [144]) + [8]))
	*($3 + [56]) = *($3 + [144])
	*(($5 = (($3 + [160]) + [8]))) = *($4)
	*($3 + [160]) = *($3 + [56])
	$4 = *($5)
	*((($3 + [176]) + [8])) = $4
	*(($3 + [96])) = $4
	*($3 + [72]) = $0
	*($3 + [80]) = $1
	$0 = *($3 + [160])
	*($3 + [88]) = $0
	*($3 + [176]) = $0
	*(($5 = (($3 + [40]) + [8]))) = *((($3 + [120]) + [8]))
	*($3 + [40]) = *($3 + [120])
	$0 = *($3 + [136])
	$4 = CALL $25(($3 + [24]), ($3 + [104]))
	*((($3 + [8]) + [8])) = *($5)
	*($3 + [8]) = *($3 + [40])
	CALL $43(($3 + [72]), $0, ($3 + [8]), $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	CALL $10(*($4 + [8]))
	
.LABEL $label$5
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$6 }
	CALL $10(*($3 + [112]))
	
.LABEL $label$6
	$global$0 = ($3 + [192])
}

void .FUNC $58 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = *($2 + [8])
	$5 = (uint_64)$4 >> (uint_64)(int_64)8
	*($3 + [48]) = $5)
	if ( CALL $97(($3 + [48])) ){ goto $label$1 }
	CALL eosio_assert([0], [8257])
	
.LABEL $label$1
	$6 = *($2)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	*($3 + [48]) = $5
	if ( CALL $97(($3 + [48])) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert([0], [8464])
	
.LABEL $label$2
	if ( ((int_64)$6 > (int_64)0) ){ goto $label$4 }
	CALL eosio_assert([0], [8479])
	
.LABEL $label$4
	*(($3 + [40])) = [0]
	*($3 + [16]) = $5
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	CALL $98($3, ($3 + [8]), $5)
	if ( (*($3 + [4]) == 0) ){ goto $label$5 }
	CALL eosio_assert([0], [8507])
	
.LABEL $label$5
	$6 = *($0)
	if ( ((int_64)CALL current_receiver() == (int_64)*($3 + [8])) ){ goto $label$6 }
	CALL eosio_assert([0], [11715])
	
.LABEL $label$6
	*(($0 = CALL $8([56]))) = (int_64)0
	*($0 + [40]) = ($3 + [8])
	*($0 + [8]) = $4
	*($0 + [32]) = $1
	*($0 + [16]) = *($2)
	*(($0 + [24])) = *(($2 + [8]))
	*($3 + [96]) = (($3 + [48]) + [40])
	*($3 + [92]) = ($3 + [48])
	*($3 + [88]) = ($3 + [48])
	*($3 + [104]) = ($3 + [88])
	*($3 + [116]) = ($0 + [16])
	*($3 + [112]) = $0
	*($3 + [120]) = ($0 + [32])
	CALL $99(($3 + [112]), ($3 + [104]))
	$5 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	$7 = CALL db_store_i64(*((($3 + [8]) + [8])), (int_64)-4157508551318700032, $6, $5), ($3 + [48]), [40]
	*($0 + [44]) = $7)
	$2 = (($3 + [8]) + [16])
	if ( (uint_64)($5 <= *($2)) ){ goto $label$7 }
	*($2) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$7
	*($3 + [112]) = $0
	$5 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8
	*($3 + [48]) = $5)
	*($3 + [88]) = $7
	$8 = ($3 + [36])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*((($3 + [8]) + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $5
	*($2 + [16]) = $7
	*($3 + [112]) = [0]
	*($2) = $0
	*($8) = ($2 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $100(($3 + [32]), ($3 + [112]), ($3 + [48]), ($3 + [88]))
	
.LABEL $label$8
	$0 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	CALL $10($0)
	
.LABEL $label$10
	CALL $101(($3 + [32]))
	$global$0 = ($3 + [128])
}

void .FUNC $59 (int_32 $0, int_64 $1)
{
	int_32 $2
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth(*($0))
	*($2 + [76]) = CALL $16([9399])
	*($2 + [72]) = [9399]
	*($2 + [8]) = *($2 + [72])
	*($2 + [64]) = ((int_64)((int_64)*(CALL $138(($2 + [24]), ($2 + [8]))) << (int_64)8) | (int_64)4)
	*(($2 + [56])) = [0]
	*($2 + [32]) = $1
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	*($2 + [24]) = *($0)
	CALL $108(($2 + [72]), ($2 + [24]), $1)
	if ( (*($2 + [76]) == 0) ){ goto $label$1 }
	$0 = *($2 + [76])
	*($2 + [16]) = ($2 + [64])
	if ( $0 ){ goto $label$2 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$2
	CALL $195(($2 + [24]), $0, ($2 + [16]))
	
.LABEL $label$1
	CALL $115(($2 + [48]))
	$global$0 = ($2 + [80])
}

void .FUNC $271 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ($4 <= [512]) ){ goto $label$4 }
	$2 = CALL $1($4)
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	$5 = ($3 + [44])
	$6 = $4
	goto $label$2 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $4)
	$6 = ($2 + $4)
	$5 = ($3 + [44])
	if ( ((uint_32)$4 > (uint_32)[3]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [11710])
	
.LABEL $label$1
	CALL memcpy($5, $2, [4])
	*(($3 + [28])) = ($2 + [4])
	*(($3 + [32])) = $6
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [24]) = $2
	CALL $65(($3 + [8]), *($3 + [44]))
	$global$0 = ($3 + [48])
}

void .FUNC $270 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*(($3 + [20])) = $2
	*(($3 + [24])) = ($2 + $4)
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [16]) = $2
	CALL $83($3)
	$global$0 = ($3 + [32])
}

void .FUNC $277 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = (*($0 + [4]) - $2)
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$1 }
	CALL $279($0, ($1 - $3))
	return 
	
.LABEL $label$1
	if ( ((uint_32)$3 <= (uint_32)$1) ){ goto $label$2 }
	*(($0 + [4])) = ($2 + $1)
	
.LABEL $label$2
}

void .FUNC $240 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [80]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$5 = *($1)
	$6 = ($1 + [64])
	CALL $154($6, *($2))
	if ( ((int_64)$5 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [11863])
	
.LABEL $label$3
	$2 = $3
	$3 = ($2 + [-80])
	$global$0 = $3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($2 + [-4])
	*($4 + [24]) = ($4 + [8])
	*($4 + [56]) = $6
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [40]) = ($1 + [16])
	*($4 + [44]) = ($1 + [32])
	*($4 + [48]) = ($1 + [48])
	*($4 + [52]) = ($1 + [56])
	CALL $174(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [84]), (int_64)0, $3, [76])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($4 + [64])
}

void .FUNC $275 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [68]) = $2
	*($3 + [64]) = $2
	*($3 + [72]) = ($2 + $4)
	*($3 + [56]) = (int_64)0
	CALL $94(($3 + [64]), ($3 + [56]))
	$2 = *($3 + [68])
	if ( ((int_32)*($3 + [72]) != (int_32)$2) ){ goto $label$5 }
	CALL eosio_assert([0], [11710])
	$2 = *($3 + [68])
	
.LABEL $label$5
	CALL memcpy(($3 + [24]), $2, [1])
	*($3 + [68]) = (*($3 + [68]) + [1])
	*(($2 = (($3 + [8]) + [8]))) = *((($3 + [64]) + [8]))
	*($3 + [8]) = *($3 + [64])
	*(($4 = (($3 + [80]) + [8]))) = *($2)
	*($3 + [80]) = *($3 + [8])
	$2 = *($4)
	*((($3 + [96]) + [8])) = $2
	*(($3 + [48])) = $2
	*($3 + [24]) = $0
	*($3 + [32]) = $1
	$0 = *($3 + [80])
	*($3 + [40]) = $0
	*($3 + [96]) = $0
	CALL $77(($3 + [24]), *($3 + [56]), [0])
	$global$0 = ($3 + [112])
}

void .FUNC $274 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [68]) = $2
	*($3 + [64]) = $2
	*($3 + [72]) = ($2 + $4)
	*($3 + [56]) = (int_64)0
	CALL $94(($3 + [64]), ($3 + [56]))
	*(($2 = (($3 + [8]) + [8]))) = *($3 + [72])
	*($3 + [8]) = *($3 + [64])
	*(($4 = (($3 + [80]) + [8]))) = *($2)
	*($3 + [80]) = *($3 + [8])
	$2 = *($4)
	*((($3 + [96]) + [8])) = $2
	*(($3 + [48])) = $2
	*($3 + [24]) = $0
	*($3 + [32]) = $1
	$0 = *($3 + [80])
	*($3 + [40]) = $0
	*($3 + [96]) = $0
	CALL $59(($3 + [24]), *($3 + [56]))
	$global$0 = ($3 + [112])
}

int_32 .FUNC $50 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	float_32 $8
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = [0]
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [11710])
	
.LABEL $label$4
	CALL memcpy(($4 + [40]), $2, [4])
	*(($4 + [28])) = ($2 + [4])
	*(($4 + [32])) = $3
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$8 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $8))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $2($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	$6
	return [1]
}

void .FUNC $51 (int_32 $0, int_64 $1, float_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [256])
	$global$0 = $3
	*($3 + [104]) = $1
	*($3 + [100]) = $2
	if ( ((float_32)$2 >= (float_32)(float_32)0) ){ goto $label$1 }
	CALL eosio_assert([0], [10660])
	
.LABEL $label$1
	CALL require_auth(*($0))
	*(($3 + [88])) = [0]
	*($3 + [64]) = $1
	*($3 + [72]) = (int_64)-1
	*($3 + [80]) = (int_64)0
	*($3 + [56]) = *($0)
	*($3 + [48]) = CALL $37()
	*($3 + [228]) = CALL $16([9399])
	*($3 + [224]) = [9399]
	*($3 + [8]) = *($3 + [224])
	$4 = ((int_64)((int_64)*(CALL $138(($3 + [112]), ($3 + [8]))) << (int_64)8) | (int_64)4)
	*($3 + [40]) = $4
	CALL $121(($3 + [24]), (int_64)0, $4)
	CALL $108(($3 + [16]), ($3 + [56]), $1)
	if ( (*($3 + [20]) == 0) ){ goto $label$3 }
	$5 = *($3 + [20])
	*($3 + [112]) = $0
	*($3 + [116]) = ($3 + [100])
	*($3 + [120]) = ($3 + [48])
	*($3 + [124]) = ($3 + [40])
	*($3 + [128]) = ($3 + [104])
	if ( $5 ){ goto $label$4 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$4
	CALL $173(($3 + [56]), $5, ($3 + [112]))
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	if ( ((int_64)CALL current_receiver() == (int_64)*($3 + [56])) ){ goto $label$5 }
	CALL eosio_assert([0], [11715])
	
.LABEL $label$5
	*(($5 = CALL $8([96])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = ($3 + [56])
	*($5) = *($3 + [104])
	*($5 + [56]) = *($3 + [48])
	*($5 + [8]) = CALL $151($0, (float_32)0, *($3 + [100]), (float_32)0)
	*($5 + [48]) = (int_64)0
	$1 = *($3 + [24])
	*($5 + [16]) = $1
	$6 = *((($3 + [24]) + [8]))
	*($5 + [24]) = $6
	*($5 + [32]) = $1
	*($5 + [40]) = $6
	CALL $111(($3 + [112]), $0, *($3 + [104]), $1, [1])
	*($5 + [72]) = *((($3 + [112]) + [8]))
	*($5 + [64]) = *($3 + [112])
	*($3 + [208]) = (($3 + [112]) + [76])
	*($3 + [204]) = ($3 + [112])
	*($3 + [200]) = ($3 + [112])
	*($3 + [216]) = ($3 + [200])
	*($3 + [228]) = ($5 + [8])
	*($3 + [224]) = $5
	*($3 + [232]) = ($5 + [16])
	*($3 + [236]) = ($5 + [32])
	*($3 + [240]) = ($5 + [48])
	*($3 + [244]) = ($5 + [56])
	*($3 + [248]) = ($5 + [64])
	CALL $174(($3 + [224]), ($3 + [216]))
	$1 = *($5)
	$7 = CALL db_store_i64(*((($3 + [56]) + [8])), (int_64)-5964828727891197952, $4, $1, ($3 + [112]), [76])
	*($5 + [84]) = $7
	$0 = (($3 + [56]) + [16])
	if ( (uint_64)($1 <= *($0)) ){ goto $label$6 }
	*($0) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($3 + [224]) = $5
	$1 = *($5)
	*($3 + [112]) = $1
	*($3 + [200]) = $7
	$8 = ($3 + [84])
	$0 = *($8)
	if ( ((uint_32)$0 >= (uint_32)*((($3 + [56]) + [32]))) ){ goto $label$8 }
	*($0 + [8]) = $1
	*($0 + [16]) = $7
	*($3 + [224]) = [0]
	*($0) = $5
	*($8) = ($0 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $175(($3 + [80]), ($3 + [224]), ($3 + [112]), ($3 + [200]))
	
.LABEL $label$7
	$5 = *($3 + [224])
	*($3 + [224]) = [0]
	if ( ($5 == 0) ){ goto $label$2 }
	CALL $10($5)
	
.LABEL $label$2
	CALL $115(($3 + [80]))
	$global$0 = ($3 + [256])
}

int_32 .FUNC $52 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	float_32 $9
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [72]) = [0]
	*($4 + [64]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [96]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $172(($4 + [16]), ($4 + [96]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4)
	$3 = *($8)
	*((($4 + [96]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [80])
	*($4 + [32]) = $0
	*($4 + [96]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$9 = *($4 + [72])
	$0 = *($4 + [64])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $9))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $2($2)
	
.LABEL $label$5
	$global$0 = ($4 + [112])
	$6
	return [1]
}

void .FUNC $53 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL require_auth($1)
	$3 = *($2)
	if ( ($3 & [1]) ){ goto $label$2 }
	$4 = [1]
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	if ( (*(($2 + [4])) <= [257]) ){ goto $label$1 }
	CALL eosio_assert([0], [8536])
	$3 = *($2)
	$4 = (($3 & [1]) == 0)
	
.LABEL $label$1
	CALL prints_l(( ($2 + [1]) ? *($2 + [8]) : $4 ), ( uint_32($3 >> [1]) ? *(($2 + [4])) : $4 ))
}

int_32 .FUNC $54 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [128])
	$global$0 = $3
	*(($4 = $3) + [88]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [80])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	$3 = [8]
	
.LOOP $label$4:
	*((($4 + [64]) + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[20]) ){ goto $label$4 }
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	CALL $94(($4 + [48]), ($4 + [64]))
	$3 = (($4 + [64]) + [8])
	CALL $148(($4 + [48]), $3)
	*(($6 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($7 = (($4 + [96]) + [8]))) = *($6)
	*($4 + [96]) = *($4)
	$6 = *($7)
	*((($4 + [112]) + [8])) = $6
	*(($4 + [40])) = $6
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [96])
	*($4 + [32]) = $0
	*($4 + [112]) = $0
	*($4 + [116]) = ($4 + [88])
	*($4 + [112]) = ($4 + [16])
	CALL $149(($4 + [112]), ($4 + [64]))
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL $2($2)
	
.LABEL $label$5
	if ( ((*($3) & [1]) == 0) ){ goto $label$6 }
	CALL $10(*(($4 + [80])))
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [56])) = [0]
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	$3 = *($0)
	*($2 + [24]) = $3
	*($2 + [32]) = $3
	CALL $132(($2 + [16]), ($2 + [24]), (int_64)0)
	if ( *($2 + [20]) ){ goto $label$1 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$1
	$3 = *($0)
	$0 = *($2 + [20])
	*($2 + [8]) = $1
	if ( $0 ){ goto $label$2 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$2
	CALL $180(($2 + [24]), $0, $3, ($2 + [8]))
	CALL $137(($2 + [48]))
	$global$0 = ($2 + [64])
}

int_32 .FUNC $56 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [128])
	$global$0 = $3
	*(($4 = $3) + [88]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $1($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [60]) = $3
	*($4 + [56]) = $3
	*($4 + [64]) = ($3 + $2)
	CALL $95(($4 + [56]), ($4 + [72]))
	*(($5 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [96]) + [8]))) = *($5)
	*($4 + [96]) = *($4 + [8])
	$5 = *($6)
	*((($4 + [112]) + [8])) = $5
	*(($4 + [48])) = $5
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [96])
	*($4 + [40]) = $0
	*($4 + [112]) = $0
	*($4 + [116]) = ($4 + [88])
	*($4 + [112]) = ($4 + [24])
	CALL $179(($4 + [112]), ($4 + [72]))
	if ( ($2 <= [513]) ){ goto $label$5 }
	CALL $2($3)
	
.LABEL $label$5
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $57 (int_32 $0, float_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [60]) = $1
	CALL require_auth(*($0))
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$3 = *($0)
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	CALL $132(($2 + [8]), ($2 + [16]), (int_64)0)
	if ( *($2 + [12]) ){ goto $label$1 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$1
	$3 = *($0)
	$0 = *($2 + [12])
	*($2) = ($2 + [60])
	if ( $0 ){ goto $label$2 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$2
	CALL $183(($2 + [16]), $0, $3, $2)
	CALL $137(($2 + [40]))
	$global$0 = ($2 + [64])
}

void .FUNC $247 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [68]) = $2
	*($3 + [64]) = $2
	*($3 + [72]) = ($2 + $4)
	*($3 + [56]) = (int_64)0
	CALL $94(($3 + [64]), ($3 + [56]))
	*($3 + [48]) = (int_64)0
	*($3 + [16]) = (int_64)0
	$2 = *($3 + [68])
	if ( ((uint_32)(*($3 + [72]) - $2) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11710])
	$2 = *($3 + [68])
	
.LABEL $label$5
	CALL memcpy(($3 + [16]), $2, [8])
	*($3 + [48]) = *($3 + [16])
	*($3 + [68]) = (*($3 + [68]) + [8])
	*(($2 = ($3 + [8]))) = *((($3 + [64]) + [8]))
	*($3) = *($3 + [64])
	*(($4 = (($3 + [80]) + [8]))) = *($2)
	*($3 + [80]) = *($3)
	$2 = *($4)
	*((($3 + [96]) + [8])) = $2
	*(($3 + [40])) = $2
	*($3 + [16]) = $0
	*($3 + [24]) = $1
	$0 = *($3 + [80])
	*($3 + [32]) = $0
	*($3 + [96]) = $0
	CALL $63(($3 + [16]), ($3 + [56]), ($3 + [48]))
	$global$0 = ($3 + [112])
}

void .FUNC $173 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	float_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [80]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$5 = *($1)
	$6 = *($2)
	$7 = CALL $151($6, *($1 + [8]), *(*($2 + [4])), (CASTING float_32)(int_64 (int_64))(*(*($2 + [8])) - *($1 + [56]))))
	*($1 + [56]) = *(*($2 + [8]))
	*($1 + [8]) = $7
	$8 = ($1 + [72])
	if ( ((int_64)*($8) == (int_64)*(*($2 + [12]))) ){ goto $label$3 }
	CALL $111(($4 + [32]), $6, *(*($2 + [16])), $5, [1])
	*($8) = *((($4 + [32]) + [8]))
	*($1 + [64]) = *($4 + [32])
	
.LABEL $label$3
	$6 = ($1 + [8])
	if ( ((int_64)$5 == (int_64)*($1)) ){ goto $label$4 }
	CALL eosio_assert([0], [11863])
	
.LABEL $label$4
	$3 = $3
	$2 = ($3 + [-80])
	$global$0 = $2
	*($4 + [12]) = $2
	*($4 + [8]) = $2
	*($4 + [16]) = ($3 + [-4])
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = $6
	*($4 + [32]) = $1
	*($4 + [40]) = ($1 + [16])
	*($4 + [44]) = ($1 + [32])
	*($4 + [48]) = ($1 + [48])
	*($4 + [52]) = ($1 + [56])
	*($4 + [56]) = ($1 + [64])
	CALL $174(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [84]), (int_64)0, $2, [76])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$global$0 = ($4 + [64])
}

void .FUNC $152 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = [0]
	$4 = CALL db_lowerbound_i64(*($1), *($1 + [8]), (int_64)-4157661228816138240, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $209($1, $4)
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
}

void .FUNC $153 (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_64 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$7 = ($global$0 - [128])
	$global$0 = $7
	CALL $121(($7 + [112]), (int_64)0, *($1 + [8]))
	*(($7 + [104])) = [0]
	*($7 + [88]) = (int_64)-1
	*($7 + [96]) = (int_64)0
	$8 = *($0)
	*($7 + [72]) = $8
	*($7 + [80]) = $8
	CALL $132(($7 + [64]), ($7 + [72]), (int_64)0)
	if ( *($7 + [68]) ){ goto $label$1 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$1
	$8 = CALL $37()
	if ( ((int_64)$8 >= (int_64)$3) ){ goto $label$2 }
	$9 = *($7 + [112])
	*($5) = $9
	$10 = *((($7 + [112]) + [8]))
	*(($5 + [8])) = $10
	*($6) = $9
	*(($6 + [8])) = $10
	
.LABEL $label$2
	if ( (int_64)($4 == 0) ){ goto $label$4 }
	if ( (int_64)($3 == 0) ){ goto $label$4 }
	if ( ((int_64)$8 <= (int_64)$4) ){ goto $label$4 }
	$11 = ( $4 ? $3 : ((int_64)$3 > (int_64)$4) )
	$8 = $4
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $8 ? $3 : (int_64)($3 == 0) )
	$11 = ( $8 ? $3 : ((int_64)$3 > (int_64)$8) )
	
.LABEL $label$3
	$9 = *(($1 + [8]))
	*((($7 + [48]) + [8])) = $9
	$10 = *(($2 + [8]))
	*((($7 + [32]) + [8])) = $10
	$3 = *($2)
	$4 = *($1)
	*((($7 + [16]) + [8])) = $9
	*(($7 + [8])) = $10
	*($7 + [48]) = $4
	*($7 + [32]) = $3
	*($7 + [16]) = $4
	*($7) = $3
	CALL $229($0, $11, $8, ($7 + [16]), $7, $5, $6)
	CALL $137(($7 + [96]))
	$global$0 = ($7 + [128])
}

void .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $94(*($1), *($0))
	$3 = *($0)
	$4 = ($3 + [8])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [11710])
	$5 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $5, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
	$0 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)*($1 + [8]) != (int_32)$0) ){ goto $label$2 }
	CALL eosio_assert([0], [11710])
	$0 = *(($1 + [4]))
	
.LABEL $label$2
	CALL memcpy(($2 + [15]), $0, [1])
	*(($1 = ($1 + [4]))) = (*($1) + [1])
	*(($3 + [12])) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $151 (int_32 $0, float_32 $1, float_32 $2, float_32 $3)
{
	int_32 $4
	int_64 $5
	float_64 $6
	float_64 $7
	float_64 $8
	float_64 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	*($4 + [16]) = $5
	CALL $132($4, ($4 + [8]), (int_64)0)
	if ( *($4 + [4]) ){ goto $label$1 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$1
	CALL prints([11401])
	CALL printsf($1)
	CALL prints([11410])
	CALL printsf($2)
	CALL prints([11071])
	CALL printsf($3)
	$6 = (PROMOTE float_64)(float_32 $3)
	$7 = CALL $39((float_64))((float_64)1 - (PROMOTE float_64)(float_32 *(*($4 + [4]) + [184]))), $6)
	$0 = *($4 + [4])
	$3 = *($0 + [192])
	$8 = CALL $39((float_64))((float_64)1 - (PROMOTE float_64)(float_32 *($0 + [184]))), $6)
	CALL prints([11418])
	CALL printdf($8)
	$9 = CALL $39((float_64))((float_64)1 - (PROMOTE float_64)(float_32 *(*($4 + [4]) + [184]))), $6)
	CALL prints([11432])
	$8 = (PROMOTE float_64)(float_32 $1)
	CALL printdf((float_64))($8 - ((float_64)$9 * (float_64)$8)))
	$1 = *(*($4 + [4]) + [192])
	CALL prints([11440])
	$6 = ((float_64)$6 / (float_64)(float_64)864e8)
	CALL printdf(((float_64)$6 * (float_64)(PROMOTE float_64)(float_32 $1)))
	CALL prints([11454])
	$1 = (DEMOTE float_32)(float_64 (float_64))(((float_64)$7 * (float_64)$8) - ((float_64)$6 * (float_64)(PROMOTE float_64)(float_32 $3)))
	CALL printsf($1))
	$6 = CALL $41((PROMOTE float_64)(float_32 $1), (float_64)0)
	$1 = *(*($4 + [4]) + [188])
	CALL $137(($4 + [32]))
	$global$0 = ($4 + [48])
	return (DEMOTE float_32)(float_64 ((float_64)$6 + (float_64)(PROMOTE float_64)(float_32 ((float_32)$1 * (float_32)$2))))
}

void .FUNC $156 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [80])
	$global$0 = $5
	*($5 + [71]) = $4
	*($5 + [72]) = $3
	*(($5 + [56])) = [0]
	*($5 + [32]) = $2
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	*($5 + [24]) = *($0)
	CALL $133(($5 + [16]), ($5 + [24]), $1)
	if ( *($5 + [20]) ){ goto $label$1 }
	CALL eosio_assert([0], [10967])
	
.LABEL $label$1
	$0 = *($5 + [20])
	*($5 + [12]) = ($5 + [72])
	*($5 + [8]) = ($5 + [71])
	if ( $0 ){ goto $label$2 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$2
	CALL $232(($5 + [24]), $0, ($5 + [8]))
	CALL $136(($5 + [48]))
	$global$0 = ($5 + [80])
}

int_32 .FUNC $157 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( $2 ){ goto $label$1 }
	CALL eosio_assert([0], [12074])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	$3 = [0]
	$2 = CALL db_next_i64(*($2 + [100]), ($1 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $209(*($0), $2)
	
.LABEL $label$2
	*(($0 + [4])) = $3
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $154 (int_32 $0, int_32 $1)
{
	int_64 $2
	if ( ((int_64)*($1 + [8]) == (int_64)*($0 + [8])) ){ goto $label$1 }
	CALL eosio_assert([0], [11465])
	
.LABEL $label$1
	$2 = ((int_64)*($0) + (int_64)*($1))
	*($0) = $2
	if ( ((int_64)$2 > (int_64)-4611686018427387904) ){ goto $label$2 }
	CALL eosio_assert([0], [11508])
	$2 = *($0)
	
.LABEL $label$2
	if ( ((int_64)$2 < (int_64)4611686018427387904) ){ goto $label$3 }
	CALL eosio_assert([0], [11527])
	
.LABEL $label$3
	return $0
}

void .FUNC $155 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [128])
	$global$0 = $5
	*($5 + [119]) = $4
	*($5 + [120]) = $3
	*((($5 + [72]) + [32])) = [0]
	*($5 + [80]) = $2
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	*($5 + [72]) = *($0)
	CALL $133(($5 + [64]), ($5 + [72]), $1)
	*((($5 + [24]) + [32])) = [0]
	*($5 + [32]) = $1
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	*($5 + [24]) = *($0)
	CALL $142(($5 + [16]), ($5 + [24]), $2)
	if ( *($5 + [68]) ){ goto $label$1 }
	CALL eosio_assert([0], [10967])
	
.LABEL $label$1
	if ( *($5 + [20]) ){ goto $label$2 }
	CALL eosio_assert([0], [10991])
	
.LABEL $label$2
	$0 = *($5 + [20])
	*($5 + [12]) = ($5 + [120])
	*($5 + [8]) = ($5 + [119])
	if ( $0 ){ goto $label$3 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$3
	CALL $230(($5 + [24]), $0, ($5 + [8]))
	$0 = *($5 + [68])
	*($5 + [12]) = ($5 + [120])
	*($5 + [8]) = ($5 + [119])
	if ( $0 ){ goto $label$4 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$4
	CALL $231(($5 + [72]), $0, ($5 + [8]))
	CALL $147((($5 + [24]) + [24]))
	CALL $136((($5 + [72]) + [24]))
	$global$0 = ($5 + [128])
}

void .FUNC $158 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = [0]
	$4 = CALL db_lowerbound_i64(*($1), *($1 + [8]), (int_64)5378043540710670336, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $219($1, $4)
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
}

int_32 .FUNC $159 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( $2 ){ goto $label$1 }
	CALL eosio_assert([0], [12074])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	$3 = [0]
	$2 = CALL db_next_i64(*($2 + [68]), ($1 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $219(*($0), $2)
	
.LABEL $label$2
	*(($0 + [4])) = $3
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $273 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ($4 <= [512]) ){ goto $label$4 }
	$2 = CALL $1($4)
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	$5 = ($3 + [44])
	$6 = $4
	goto $label$2 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $4)
	$6 = ($2 + $4)
	$5 = ($3 + [44])
	if ( ((uint_32)$4 > (uint_32)[3]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [11710])
	
.LABEL $label$1
	CALL memcpy($5, $2, [4])
	*(($3 + [28])) = ($2 + [4])
	*(($3 + [32])) = $6
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [24]) = $2
	CALL $89(($3 + [8]), *($3 + [44]))
	$global$0 = ($3 + [48])
}

void .FUNC $272 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ($4 <= [512]) ){ goto $label$4 }
	$2 = CALL $1($4)
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	$5 = ($3 + [44])
	$6 = $4
	goto $label$2 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $4)
	$6 = ($2 + $4)
	$5 = ($3 + [44])
	if ( ((uint_32)$4 > (uint_32)[3]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [11710])
	
.LABEL $label$1
	CALL memcpy($5, $2, [4])
	*(($3 + [28])) = ($2 + [4])
	*(($3 + [32])) = $6
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [24]) = $2
	CALL $74(($3 + [8]), *($3 + [44]))
	$global$0 = ($3 + [48])
}

void .FUNC $179 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = (($2 + [16]) + [8]))) = *(($1 + [8]))
	*($2 + [16]) = *($1)
	*((($2 + [32]) + [8])) = *($3)
	*($2 + [32]) = *($2 + [16])
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$1 = (*($0) + int_32($3 >> [1]))
	$0 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	$4 = *((($2 + [32]) + [8]))
	*((($2 + [48]) + [8])) = $4
	*(($2 + [8])) = $4
	$4 = *($2 + [32])
	*($2) = $4
	*($2 + [48]) = $4
	CALL void $1((int_32 $2), (int_32 $0))
	$global$0 = ($2 + [64])
}

void .FUNC $224 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *($2 + [4])
	if ( $3 ){ goto $label$1 }
	CALL eosio_assert([0], [12040])
	$3 = *(($2 + [4]))
	
.LABEL $label$1
	CALL $159($2)
	CALL $238($1, $3)
	*($0) = *($2)
}

void .FUNC $183 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [196]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	*($1 + [112]) = *(*($3))
	$6 = *($1)
	$3 = $4
	$4 = ($3 + [-192])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-15])
	*($5 + [24]) = ($5 + [8])
	CALL $166($1, ($5 + [24]))
	CALL db_update_i64(*($1 + [200]), $2, $4, [177])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [32])
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	float_32 $7
	float_64 $8
	int_32 $9
	$2 = ($global$0 - [352])
	$global$0 = $2
	*($2 + [143]) = $1
	CALL prints([10649])
	CALL require_auth(*($0))
	*((($2 + [96]) + [32])) = [0]
	*($2 + [112]) = (int_64)-1
	*($2 + [120]) = (int_64)0
	$3 = *($0)
	*($2 + [96]) = $3
	*($2 + [104]) = $3
	CALL $132(($2 + [88]), ($2 + [96]), (int_64)0)
	*($2 + [28]) = CALL $16([9399])
	*($2 + [24]) = [9399]
	*($2 + [8]) = *($2 + [24])
	$4 = *(CALL $138(($2 + [144]), ($2 + [8])))
	$3 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	*($2 + [80]) = $3
	$5 = CALL $121(($2 + [64]), (int_64)0, $3)
	*((($2 + [24]) + [32])) = [0]
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	*($2 + [24]) = *($0)
	$4 = ((int_64)$4 & (int_64)72057594037927935)
	*($2 + [32]) = $4
	$1 = CALL $118(($2 + [24]), $4, [9062])
	if ( ((int_64)$3 == (int_64)*($1 + [8])) ){ goto $label$1 }
	CALL eosio_assert([0], [8685])
	$3 = *($2 + [80])
	
.LABEL $label$1
	CALL require_auth(*($1 + [32]))
	*($2 + [20]) = (DEMOTE float_32)(float_64 CALL $39((float_64)10, (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 $3) & [255]))))
	if ( (*($2 + [92]) == 0) ){ goto $label$3 }
	$3 = *($0)
	$0 = *($2 + [92])
	*($2 + [144]) = $5
	*($2 + [148]) = ($2 + [20])
	*($2 + [152]) = ($2 + [80])
	*($2 + [156]) = ($2 + [143])
	if ( $0 ){ goto $label$4 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$4
	CALL $165(($2 + [96]), $0, $3, ($2 + [144]))
	goto $label$2 
	
.LABEL $label$3
	$6 = *($0)
	if ( ((int_64)CALL current_receiver() == (int_64)*($2 + [96])) ){ goto $label$5 }
	CALL eosio_assert([0], [11715])
	
.LABEL $label$5
	*(($0 = CALL $8([208])) + [80]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [88]) = (int_64)0
	*($0 + [120]) = (int_64)0
	*($0 + [128]) = (int_64)0
	*($0 + [144]) = (int_64)0
	*($0 + [152]) = (int_64)0
	*($0 + [160]) = (int_64)0
	*($0 + [168]) = (int_64)0
	*($0 + [176]) = (int_64)0
	*($0 + [196]) = ($2 + [96])
	*($0 + [8]) = [1]
	*($0) = (int_64)0
	*($0 + [56]) = [0]
	$3 = *($2 + [64])
	*($0 + [40]) = $3
	$1 = (($2 + [64]) + [8])
	$4 = *($1)
	*(($0 + [48])) = $4
	*($0 + [16]) = $3
	*(($0 + [24])) = $4
	*($0 + [64]) = $3
	*(($0 + [72])) = $4
	$7 = *($2 + [20])
	if ( ((float_32)(float_32)|$7| < (float_32)(float_32)9223372036854775808) ){ goto $label$7 }
	$3 = (int_64)-9223372036854775808
	goto $label$6 
	
.LABEL $label$7
	$3 = (Rounds 0)($7)
	
.LABEL $label$6
	$8 = ((float_64)(CASTING float_64)(int_64 $3) * (float_64)(float_64)1e5)
	if ( ((float_64)(float_64)|$8| < (float_64)(float_64)9223372036854775808) ){ goto $label$9 }
	$3 = (int_64)-9223372036854775808
	goto $label$8 
	
.LABEL $label$9
	$3 = (Rounds 0)($8)
	
.LABEL $label$8
	CALL $121(($2 + [144]), $3, *($2 + [80]))
	$5 = (($2 + [144]) + [8])
	*($0 + [128]) = *($5)
	*($0 + [120]) = *($2 + [144])
	*($0 + [100 align=4]) = (int_64)4812096203217757206
	*($0 + [108 align=4]) = (int_64)3826847249711383479
	*($0 + [136]) = [1028443341]
	$7 = ((float_32)*($2 + [20]) * (float_32)(float_32)1e4)
	if ( ((float_32)(float_32)|$7| < (float_32)(float_32)9223372036854775808) ){ goto $label$11 }
	$3 = (int_64)-9223372036854775808
	goto $label$10 
	
.LABEL $label$11
	$3 = (Rounds 0)($7)
	
.LABEL $label$10
	CALL $121(($2 + [144]), $3, *($2 + [80]))
	*($0 + [152]) = *($5)
	*($0 + [144]) = *($2 + [144])
	*($0 + [184]) = (int_64)4417130516253546963
	*($0 + [192]) = [1120403456]
	*($0 + [168]) = *($1)
	*($0 + [160]) = *($2 + [64])
	*($2 + [336]) = (($2 + [144]) + [177])
	*($2 + [332]) = ($2 + [144])
	*($2 + [328]) = ($2 + [144])
	*($2 + [344]) = ($2 + [328])
	CALL $166($0, ($2 + [344]))
	$3 = *($0)
	$5 = CALL db_store_i64(*((($2 + [96]) + [8])), (int_64)-4157661234933819008, $6, $3, ($2 + [144]), [177])
	*($0 + [200]) = $5
	$1 = ($2 + [112])
	if ( (uint_64)($3 <= *($1)) ){ goto $label$12 }
	*($1) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*($2 + [328]) = $0
	$3 = *($0)
	*($2 + [144]) = $3
	*($2 + [344]) = $5
	$9 = ($2 + [124])
	$1 = *($9)
	if ( ((uint_32)$1 >= (uint_32)*(($2 + [128]))) ){ goto $label$14 }
	*($1 + [8]) = $3
	*($1 + [16]) = $5
	*($2 + [328]) = [0]
	*($1) = $0
	*($9) = ($1 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $167(($2 + [120]), ($2 + [328]), ($2 + [144]), ($2 + [344]))
	
.LABEL $label$13
	$0 = *($2 + [328])
	*($2 + [328]) = [0]
	if ( ($0 == 0) ){ goto $label$2 }
	CALL $10($0)
	
.LABEL $label$2
	CALL $101((($2 + [24]) + [24]))
	CALL $137((($2 + [96]) + [24]))
	$global$0 = ($2 + [352])
}

void .FUNC $68 (int_32 $0, float_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [60]) = $1
	CALL require_auth(*($0))
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$3 = *($0)
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	CALL $132(($2 + [8]), ($2 + [16]), (int_64)0)
	if ( *($2 + [12]) ){ goto $label$1 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$1
	$3 = *($0)
	$0 = *($2 + [12])
	*($2) = ($2 + [60])
	if ( $0 ){ goto $label$2 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$2
	CALL $181(($2 + [16]), $0, $3, $2)
	CALL $137(($2 + [40]))
	$global$0 = ($2 + [64])
}

void .FUNC $248 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [192])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*($3 + [148]) = $4
	*($3 + [144]) = $4
	*($3 + [152]) = ($4 + $5)
	*($3 + [136]) = (int_64)0
	CALL $94(($3 + [144]), ($3 + [136]))
	*($3 + [128]) = (int_64)0
	CALL $94(($3 + [144]), ($3 + [128]))
	*($3 + [120]) = (int_64)0
	*($3 + [112]) = (int_64)0
	CALL $95(($3 + [144]), ($3 + [112]))
	*(($3 + [104])) = [0]
	*($3 + [96]) = (int_64)0
	$4 = [0]
	
.LOOP $label$4:
	*((($3 + [96]) + $4)) = [0]
	$4 = ($4 + [4])
	if ( ((int_32)$4 != (int_32)[12]) ){ goto $label$4 }
	CALL $148(($3 + [144]), ($3 + [96]))
	*(($4 = (($3 + [48]) + [8]))) = *((($3 + [144]) + [8]))
	*($3 + [48]) = *($3 + [144])
	*(($5 = (($3 + [160]) + [8]))) = *($4)
	*($3 + [160]) = *($3 + [48])
	$4 = *($5)
	*((($3 + [176]) + [8])) = $4
	*(($3 + [88])) = $4
	*($3 + [64]) = $0
	*($3 + [72]) = $1
	$0 = *($3 + [160])
	*($3 + [80]) = $0
	*($3 + [176]) = $0
	*(($5 = (($3 + [32]) + [8]))) = *((($3 + [112]) + [8]))
	*($3 + [32]) = *($3 + [112])
	$0 = *($3 + [128])
	$1 = *($3 + [136])
	$4 = CALL $25(($3 + [16]), ($3 + [96]))
	*(($3 + [8])) = *($5)
	*($3) = *($3 + [32])
	CALL $90(($3 + [64]), $1, $0, $3, $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	CALL $10(*($4 + [8]))
	
.LABEL $label$5
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$6 }
	CALL $10(*($3 + [104]))
	
.LABEL $label$6
	$global$0 = ($3 + [192])
}

void .FUNC $225 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *($2 + [4])
	if ( $3 ){ goto $label$1 }
	CALL eosio_assert([0], [12040])
	$3 = *(($2 + [4]))
	
.LABEL $label$1
	CALL $157($2)
	CALL $239($1, $3)
	*($0) = *($2)
}

void .FUNC $65 (int_32 $0, float_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [60]) = $1
	CALL require_auth(*($0))
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$3 = *($0)
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	CALL $132(($2 + [8]), ($2 + [16]), (int_64)0)
	if ( *($2 + [12]) ){ goto $label$1 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$1
	$3 = *($0)
	$0 = *($2 + [12])
	*($2) = ($2 + [60])
	if ( $0 ){ goto $label$2 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$2
	CALL $192(($2 + [16]), $0, $3, $2)
	CALL $137(($2 + [40]))
	$global$0 = ($2 + [64])
}

int_32 .FUNC $64 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [128])
	$global$0 = $3
	*(($4 = $3) + [88]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $1($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [60]) = $3
	*($4 + [56]) = $3
	*($4 + [64]) = ($3 + $2)
	*($4 + [112]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $125(($4 + [24]), ($4 + [112]))
	*(($5 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [96]) + [8]))) = *($5)
	*($4 + [96]) = *($4 + [8])
	$5 = *($6)
	*((($4 + [112]) + [8])) = $5
	*(($4 + [48])) = $5
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [96])
	*($4 + [40]) = $0
	*($4 + [112]) = $0
	*($4 + [116]) = ($4 + [88])
	*($4 + [112]) = ($4 + [24])
	CALL $126(($4 + [112]), ($4 + [72]))
	if ( ($2 <= [513]) ){ goto $label$5 }
	CALL $2($3)
	
.LABEL $label$5
	$global$0 = ($4 + [128])
	return [1]
}

int_32 .FUNC $67 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [64]) + [24])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = [0]
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [128]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $130(($4 + [16]), ($4 + [128]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4)
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [16])
	CALL $131(($4 + [128]), ($4 + [64]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $2($2)
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $66 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	float_64 $11
	$5 = ($global$0 - [384])
	$global$0 = $5
	CALL require_auth($1)
	if ( ((int_64)$1 != (int_64)$2) ){ goto $label$1 }
	CALL eosio_assert([0], [9113])
	
.LABEL $label$1
	*(($5 + [376])) = [0]
	*($5 + [360]) = (int_64)-1
	*($5 + [368]) = (int_64)0
	$6 = *($0)
	*($5 + [344]) = $6
	*($5 + [352]) = $6
	CALL $132(($5 + [336]), ($5 + [344]), (int_64)0)
	$7 = *($5 + [340])
	if ( $7 ){ goto $label$2 }
	CALL eosio_assert([0], [9148])
	$7 = *($5 + [340])
	
.LABEL $label$2
	if ( ((int_32)*($7 + [8]) == (int_32)[1]) ){ goto $label$3 }
	CALL eosio_assert([0], [9169])
	
.LABEL $label$3
	$6 = *($3 + [8])
	*(($5 + [328])) = [0]
	$8 = (uint_64)$6 >> (uint_64)(int_64)8
	*($5 + [304]) = $8)
	*($5 + [312]) = (int_64)-1
	*($5 + [320]) = (int_64)0
	*($5 + [296]) = *($0)
	$9 = *($3)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$5 }
	*($5 + [256]) = $8
	if ( CALL $97(($5 + [256])) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [8639])
	
.LABEL $label$4
	if ( ((int_64)$9 > (int_64)0) ){ goto $label$6 }
	CALL eosio_assert([0], [9224])
	
.LABEL $label$6
	if ( ((int_64)$6 == (int_64)*(CALL $118(($5 + [296]), $8, [9062]) + [8])) ){ goto $label$7 }
	CALL eosio_assert([0], [8685])
	
.LABEL $label$7
	*((($5 + [256]) + [32])) = [0]
	*($5 + [264]) = $1
	*($5 + [272]) = (int_64)-1
	*($5 + [280]) = (int_64)0
	$10 = *($0)
	*($5 + [256]) = $10
	*((($5 + [216]) + [32])) = [0]
	*($5 + [224]) = $2
	*($5 + [216]) = $10
	*($5 + [232]) = (int_64)-1
	*($5 + [240]) = (int_64)0
	CALL $108(($5 + [208]), ($5 + [256]), $1)
	CALL $108(($5 + [200]), ($5 + [216]), $2)
	$7 = *($5 + [212])
	if ( ($7 == 0) ){ goto $label$9 }
	if ( ((int_64)*(($7 + [72])) == (int_64)$6) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $109($0, $1, $1)
	
.LABEL $label$8
	if ( ((int_64)$1 == (int_64)$2) ){ goto $label$10 }
	$7 = *($5 + [204])
	if ( ($7 == 0) ){ goto $label$11 }
	if ( ((int_64)*(($7 + [72])) == (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $109($0, $2, $1)
	
.LABEL $label$10
	CALL $110(($5 + [144]), $0, $1)
	CALL $111(($5 + [96]), $0, $1, $1, [0])
	*(($7 = (($5 + [184]) + [8]))) = *((($5 + [144]) + [8]))
	*($5 + [184]) = *($5 + [144])
	CALL $112(($5 + [184]), ($5 + [96]))
	if ( ((int_64)$6 == (int_64)*($7)) ){ goto $label$12 }
	CALL eosio_assert([0], [11142])
	
.LABEL $label$12
	if ( ((int_64)$9 <= (int_64)*($5 + [184])) ){ goto $label$13 }
	CALL eosio_assert([0], [9253])
	
.LABEL $label$13
	*(($5 + [176])) = [0]
	*($5 + [152]) = $2
	*($5 + [160]) = (int_64)-1
	*($5 + [168]) = (int_64)0
	*($5 + [144]) = *($0)
	CALL $133(($5 + [136]), ($5 + [144]), $1)
	$7 = *($5 + [140])
	if ( ($7 == 0) ){ goto $label$15 }
	if ( (int_64)(*($7 + [64]) == 0) ){ goto $label$14 }
	CALL eosio_assert([0], [9324])
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_64)$9 >= (int_64)*(*($5 + [340]) + [120])) ){ goto $label$14 }
	CALL eosio_assert([0], [9298])
	
.LABEL $label$14
	*(($5 + [128])) = [0]
	*($5 + [104]) = $1
	*($5 + [112]) = (int_64)-1
	$9 = (int_64)0
	*($5 + [120]) = (int_64)0
	*($5 + [96]) = *($0)
	CALL $134(($5 + [96]), $8, [9375])
	$6 = CALL $37()
	if ( ($4 == 0) ){ goto $label$16 }
	$11 = ((float_64)(CASTING float_64)(uint_32 $4) * (float_64)(float_64)1e6)
	if ( ((float_64)(float_64)|$11| < (float_64)(float_64)9223372036854775808) ){ goto $label$18 }
	$8 = (int_64)-9223372036854775808
	goto $label$17 
	
.LABEL $label$18
	$8 = (Rounds 0)($11)
	
.LABEL $label$17
	$9 = ((int_64)$6 + (int_64)$8)
	
.LABEL $label$16
	$4 = ($3 + [8])
	$8 = *($4)
	*((($5 + [80]) + [8])) = $8
	$6 = *($3)
	*((($5 + [32]) + [8])) = $8
	*($5 + [80]) = $6
	*($5 + [32]) = $6
	CALL $113($0, $1, ($5 + [32]), $1)
	$8 = *($4)
	*((($5 + [64]) + [8])) = $8
	$6 = *($3)
	*((($5 + [16]) + [8])) = $8
	*($5 + [16]) = $6
	*($5 + [64]) = $6
	CALL $105($0, $2, ($5 + [16]), $1)
	$8 = *($4)
	*((($5 + [48]) + [8])) = $8
	$6 = *($3)
	*(($5 + [8])) = $8
	*($5) = $6
	*($5 + [48]) = $6
	CALL $135($0, $1, $2, $5, $9, $1, [1])
	CALL $124((($5 + [96]) + [24]))
	CALL $136((($5 + [144]) + [24]))
	CALL $115((($5 + [216]) + [24]))
	CALL $115((($5 + [256]) + [24]))
	CALL $101((($5 + [296]) + [24]))
	CALL $137((($5 + [344]) + [24]))
	$global$0 = ($5 + [384])
}

void .FUNC $61 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [208])
	$global$0 = $2
	CALL require_auth(*($0))
	*((($2 + [168]) + [32])) = [0]
	*($2 + [176]) = $1
	*($2 + [184]) = (int_64)-1
	*($2 + [192]) = (int_64)0
	*($2 + [168]) = *($0)
	*($2 + [84]) = CALL $16([9399])
	*($2 + [80]) = [9399]
	*($2) = *($2 + [80])
	$3 = CALL $134(($2 + [168]), ((int_64)*(CALL $138(($2 + [128]), $2)) & (int_64)72057594037927935), [9375])
	*((($2 + [128]) + [32])) = [0]
	*($2 + [136]) = $1
	*($2 + [144]) = (int_64)-1
	*($2 + [152]) = (int_64)0
	*($2 + [128]) = *($0)
	CALL $133(($2 + [120]), ($2 + [128]), $1)
	*((($2 + [80]) + [32])) = [0]
	*($2 + [88]) = $1
	*($2 + [96]) = (int_64)-1
	*($2 + [104]) = (int_64)0
	*($2 + [80]) = *($0)
	CALL $142(($2 + [72]), ($2 + [80]), $1)
	if ( *($2 + [124]) ){ goto $label$1 }
	CALL eosio_assert([0], [10701])
	
.LABEL $label$1
	if ( *($2 + [76]) ){ goto $label$2 }
	CALL eosio_assert([0], [10727])
	
.LABEL $label$2
	$4 = *($2 + [124])
	*($2 + [32]) = $3
	if ( $4 ){ goto $label$3 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$3
	CALL $176(($2 + [128]), $4, ($2 + [32]))
	$4 = *($2 + [76])
	*($2 + [32]) = $3
	if ( $4 ){ goto $label$4 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$4
	CALL $177(($2 + [80]), $4, ($2 + [32]))
	*($2 + [24]) = (int_64)3617214756542218240
	$5 = *($0)
	*($2 + [16]) = $5
	*($2 + [8]) = $1
	$0 = CALL $178(($2 + [32]), ($2 + [16]), $5, (int_64)-4060403175468548096, ($2 + [8]))
	CALL $107($0)
	$3 = *($0 + [28])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($0 + [32])) = $3
	CALL $10($3)
	
.LABEL $label$5
	$3 = *($0 + [16])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($0 + [20])) = $3
	CALL $10($3)
	
.LABEL $label$6
	CALL $147((($2 + [80]) + [24]))
	CALL $136((($2 + [128]) + [24]))
	CALL $124((($2 + [168]) + [24]))
	$global$0 = ($2 + [208])
}

int_32 .FUNC $60 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [72]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	CALL $94(($4 + [56]), ($4 + [72]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4 + [8])
	$3 = *($8)
	*((($4 + [96]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [80])
	*($4 + [40]) = $0
	*($4 + [96]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [72])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $2($2)
	
.LABEL $label$6
	$global$0 = ($4 + [112])
	return [1]
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL require_auth(*($1))
	*(($3 + [72])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	*($3 + [40]) = *($0)
	*($3 + [48]) = *($1)
	CALL $119(($3 + [32]), ($3 + [40]), (uint_64)*($2) >> (uint_64)(int_64)8))
	$1 = *($3 + [36])
	if ( $1 ){ goto $label$1 }
	CALL eosio_assert([0], [8880])
	$1 = *($3 + [36])
	
.LABEL $label$1
	if ( (int_64)(*($1) == 0) ){ goto $label$2 }
	CALL eosio_assert([0], [8956])
	
.LABEL $label$2
	*($3 + [24]) = *($3 + [32])
	*($3 + [8]) = *($3 + [24])
	CALL $127(($3 + [16]), ($3 + [40]), ($3 + [8]))
	CALL $124(($3 + [64]))
	$global$0 = ($3 + [80])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [56])) = [0]
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	$3 = *($0)
	*($2 + [24]) = $3
	*($2 + [32]) = $3
	CALL $132(($2 + [16]), ($2 + [24]), (int_64)0)
	if ( *($2 + [20]) ){ goto $label$1 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$1
	$3 = *($0)
	$0 = *($2 + [20])
	*($2 + [8]) = $1
	if ( $0 ){ goto $label$2 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$2
	CALL $185(($2 + [24]), $0, $3, ($2 + [8]))
	CALL $137(($2 + [48]))
	$global$0 = ($2 + [64])
}

int_32 .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8232])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $227 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	if ( (int_64)($3 == 0) ){ goto $label$4 }
	$4 = [0]
	
.LOOP $label$6:
	*((($2 + [9]) + ($1 = $4))) = $3
	$4 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	*($0) = [0]
	$1 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $8($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$2
	$0 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$7:
	*(($5 + $1)) = *((($2 + [9]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$7 }
	$1 = ($5 + $4)
	
.LABEL $label$1
	*($1) = [0]
	$global$0 = ($2 + [16])
}

void .FUNC $228 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [8]
	CALL $296($2, ($1 + [8]))
	CALL $277($0, *($2))
	$3 = *($0)
	*($2) = $3
	*($2 + [4]) = $3
	*($2 + [8]) = *($0 + [4])
	*($2 + [16]) = $2
	*($2 + [24]) = $1
	CALL $315(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [32])
}

void .FUNC $229 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_64 $8
	float_64 $9
	int_64 $10
	int_64 $11
	float_32 $12
	float_64 $13
	float_32 $14
	float_32 $15
	$7 = ($global$0 - [64])
	$global$0 = $7
	*(($7 + [56])) = [0]
	*($7 + [40]) = (int_64)-1
	*($7 + [48]) = (int_64)0
	$8 = *($0)
	*($7 + [24]) = $8
	*($7 + [32]) = $8
	CALL $132(($7 + [16]), ($7 + [24]), (int_64)0)
	if ( *($7 + [20]) ){ goto $label$1 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$1
	$8 = *($3 + [8])
	$9 = CALL $39((float_64)10, (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 $8) & [255])))
	$11 = *($4)
	$10 = *($3)
	$12 = CALL $40((CASTING float_32)(int_64 $10), (CASTING float_32)(int_64 $11))
	$13 = CALL $41((PROMOTE float_64)(float_32 (CASTING float_32)(int_64 (int_64))($10 - $11))), (float_64)0)
	$14 = ((float_32)(CASTING float_32)(int_64 (int_64))($2 - $1)) / (float_32)*(*($7 + [20]) + [100])
	$12 = ((float_32)$12 * (float_32)$14)
	if ( ((float_32)(float_32)|$12)| < (float_32)(float_32)9223372036854775808) ){ goto $label$3 }
	$2 = (int_64)-9223372036854775808
	goto $label$2 
	
.LABEL $label$3
	$2 = (Rounds 0)($12)
	
.LABEL $label$2
	if ( ((float_64)(float_64)|$9| < (float_64)(float_64)9223372036854775808) ){ goto $label$5 }
	$1 = (int_64)-9223372036854775808
	goto $label$4 
	
.LABEL $label$5
	$1 = (Rounds 0)($9)
	
.LABEL $label$4
	CALL $121($7, ((int_64)$2 / (int_64)$1), $8)
	$3 = ($7 + [8])
	*(($5 + [8])) = *($3)
	*($5) = *($7)
	$12 = (DEMOTE float_32)(float_64 $13)
	$15 = ((float_32)$14 * (float_32)$12)
	if ( ((float_32)(float_32)|$15| < (float_32)(float_32)9223372036854775808) ){ goto $label$7 }
	$2 = (int_64)-9223372036854775808
	goto $label$6 
	
.LABEL $label$7
	$2 = (Rounds 0)($15)
	
.LABEL $label$6
	CALL $121($7, ((int_64)$2 / (int_64)$1), $8)
	*(($0 = ($6 + [8]))) = *($3)
	*($6) = *($7)
	$3 = *($7 + [20])
	$4 = $3
	if ( ((int_64)*($0) == (int_64)*(($3 + [152]))) ){ goto $label$8 }
	CALL eosio_assert([0], [11142])
	$4 = *($7 + [20])
	
.LABEL $label$8
	$3 = ( ($4 + [144]) ? $6 : ((int_64)*($6) > (int_64)*($3 + [144])) )
	*($6) = *($3)
	*(($6 + [8])) = *(($3 + [8]))
	CALL prints([11020])
	CALL printsf($14)
	CALL prints([11033])
	CALL printsf($12)
	CALL $145($7, $6)
	CALL $241([11043], $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$9 }
	CALL $10(*($7 + [8]))
	
.LABEL $label$9
	CALL $145($7, $5)
	CALL $233([11056], $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*($7 + [8]))
	
.LABEL $label$10
	CALL $137(($7 + [48]))
	$global$0 = ($7 + [64])
}

void .FUNC $89 (int_32 $0, float_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [60]) = $1
	CALL require_auth(*($0))
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$3 = *($0)
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	CALL $132(($2 + [8]), ($2 + [16]), (int_64)0)
	if ( *($2 + [12]) ){ goto $label$1 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$1
	$3 = *($0)
	$0 = *($2 + [12])
	*($2) = ($2 + [60])
	if ( $0 ){ goto $label$2 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$2
	CALL $194(($2 + [16]), $0, $3, $2)
	CALL $137(($2 + [40]))
	$global$0 = ($2 + [64])
}

int_32 .FUNC $88 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	float_32 $9
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [72]) = [0]
	*($4 + [64]) = (int_64)0
	*($4 + [76]) = [0]
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [96]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $150(($4 + [16]), ($4 + [96]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4)
	$3 = *($8)
	*((($4 + [96]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [80])
	*($4 + [32]) = $0
	*($4 + [96]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$8 = *($4 + [76])
	$9 = *($4 + [72])
	$0 = *($4 + [64])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $9), (int_32 ((int_32)($8 & [255]) != (int_32)[0])))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $2($2)
	
.LABEL $label$5
	$global$0 = ($4 + [112])
	$6
	return [1]
}

void .FUNC $87 (int_32 $0, int_64 $1, float_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	float_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	float_32 $12
	float_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_32 $23
	$4 = ($global$0 - [1344])
	$global$0 = $4
	*($4 + [1336]) = $1
	*(($4 + [1328])) = [0]
	*($4 + [1312]) = (int_64)-1
	*($4 + [1320]) = (int_64)0
	$1 = *($0)
	*($4 + [1296]) = $1
	*($4 + [1304]) = $1
	CALL $132(($4 + [1288]), ($4 + [1296]), (int_64)0)
	$5 = *($4 + [1292])
	if ( $5 ){ goto $label$1 }
	CALL eosio_assert([0], [9148])
	$5 = *($4 + [1292])
	
.LABEL $label$1
	$6 = *(($5 + [24]))
	$7 = CALL $39((float_64)10, (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 $6) & [255])))
	*((($4 + [1248]) + [32])) = [0]
	*($4 + [1264]) = (int_64)-1
	*($4 + [1272]) = (int_64)0
	*($4 + [1248]) = *($0)
	*($4 + [1256]) = *($4 + [1336])
	$1 = (uint_64)$6 >> (uint_64)(int_64)8
	CALL $119(($4 + [1240]), ($4 + [1248]), $1))
	if ( *($4 + [1244]) ){ goto $label$2 }
	CALL eosio_assert([0], [9867])
	
.LABEL $label$2
	*((($4 + [1200]) + [32])) = [0]
	*($4 + [1208]) = $1
	*($4 + [1216]) = (int_64)-1
	*($4 + [1224]) = (int_64)0
	*($4 + [1200]) = *($0)
	CALL $98(($4 + [1192]), ($4 + [1200]), $1)
	$8 = *($4 + [1196])
	if ( $8 ){ goto $label$3 }
	CALL eosio_assert([0], [9890])
	$8 = *($4 + [1196])
	
.LABEL $label$3
	if ( ((int_32)((float_32)$2 <= (float_32)(float_32)100) ^ (int_32)[1]) ){ goto $label$7 }
	if ( (((float_32)$2 >= (float_32)(float_32)0) == 0) ){ goto $label$7 }
	if ( ($3 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL eosio_assert([0], [9962])
	if ( $3 ){ goto $label$5 }
	
.LABEL $label$6
	CALL require_auth(*($4 + [1336]))
	goto $label$4 
	
.LABEL $label$5
	CALL require_auth(*($8 + [32]))
	
.LABEL $label$4
	$9 = CALL $121(($4 + [1176]), (int_64)0, $6)
	$5 = (($4 + [1176]) + [8])
	*((($4 + [1160]) + [8])) = *($5)
	*($4 + [1160]) = *($4 + [1176])
	*((($4 + [1144]) + [8])) = *($5)
	*($4 + [1144]) = *($4 + [1176])
	*((($4 + [1128]) + [8])) = *($5)
	*($4 + [1128]) = *($4 + [1176])
	*((($4 + [1112]) + [8])) = *($5)
	*($4 + [1112]) = *($4 + [1176])
	*((($4 + [1096]) + [8])) = *($5)
	*($4 + [1096]) = *($4 + [1176])
	*((($4 + [1080]) + [8])) = *($5)
	*($4 + [1080]) = *($4 + [1176])
	*((($4 + [1064]) + [8])) = *($5)
	*($4 + [1064]) = *($4 + [1176])
	*((($4 + [1048]) + [8])) = *($5)
	*($4 + [1048]) = *($4 + [1176])
	$10 = ($8 + [32])
	$11 = *(( $10 ? ($4 + [1336]) : $3 ))
	*((($4 + [1008]) + [32])) = [0]
	*($4 + [1024]) = (int_64)-1
	*($4 + [1032]) = (int_64)0
	*($4 + [1008]) = *($0)
	$1 = *($4 + [1336])
	*($4 + [1016]) = $1
	CALL $108(($4 + [1000]), ($4 + [1008]), $1)
	$5 = *($4 + [1004])
	if ( ($5 == 0) ){ goto $label$9 }
	if ( ((int_64)*(($5 + [72])) == (int_64)$6) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $109($0, *($4 + [1336]), $11)
	
.LABEL $label$8
	$12 = (DEMOTE float_32)(float_64 $7)
	CALL $108(($4 + [944]), ($4 + [1008]), *($4 + [1336]))
	*($4 + [1000]) = *($4 + [944])
	$1 = CALL $37()
	*($4 + [992]) = $1
	$5 = *($4 + [1004])
	$13 = CALL $151($0, *($5 + [8]), (float_32)0, (CASTING float_32)(int_64 (int_64))($1 - *($5 + [56])))
	*($4 + [988]) = $13)
	*(($4 + [976])) = [0]
	*($4 + [960]) = (int_64)-1
	$14 = (int_64)0
	*($4 + [968]) = (int_64)0
	*($4 + [944]) = *($0)
	$1 = *($4 + [1336])
	*($4 + [952]) = $1
	CALL $133(($4 + [936]), ($4 + [944]), $1)
	$5 = *($4 + [940])
	if ( ($5 == 0) ){ goto $label$10 }
	$14 = *($5 + [48])
	
.LABEL $label$10
	$5 = *($4 + [1292])
	$12 = CALL $40(((float_32)((float_32)*($5 + [104]) * (float_32)$13) * (float_32)$12), ((float_32)*($5 + [136]) * (float_32)(CASTING float_32)(int_64 *($5 + [64]))))
	CALL prints([10012])
	CALL printsf($13)
	$5 = *($4 + [1292])
	$13 = *($5 + [136])
	$1 = *($5 + [64])
	CALL prints([10024])
	CALL printsf(((float_32)$13 * (float_32)(CASTING float_32)(int_64 $1)))
	CALL prints([10030])
	CALL printsf($12)
	if ( ((float_32)(float_32)|$12| < (float_32)(float_32)9223372036854775808) ){ goto $label$12 }
	$1 = (int_64)-9223372036854775808
	goto $label$11 
	
.LABEL $label$12
	$1 = (Rounds 0)($12)
	
.LABEL $label$11
	CALL $121(($4 + [832]), $1, $6)
	$15 = (($4 + [832]) + [8])
	*(($3 = (($4 + [1080]) + [8]))) = *($15)
	*($4 + [1080]) = *($4 + [832])
	$5 = (($4 + [1176]) + [8])
	*((($4 + [920]) + [8])) = *($5)
	*($4 + [920]) = *($4 + [1176])
	*((($4 + [904]) + [8])) = *($5)
	*($4 + [904]) = *($4 + [1176])
	CALL $152(($4 + [664]), ($4 + [944]), (int_64)0)
	$5 = *($4 + [668])
	if ( ($5 == 0) ){ goto $label$13 }
	$16 = (($4 + [832]) + [24])
	$17 = ($4 + [864])
	
.LOOP $label$14:
	if ( ((int_64)*($5 + [16]) < (int_64)1) ){ goto $label$15 }
	$18 = *(($5 + [24]))
	*((($4 + [888]) + [8])) = $18
	$19 = *($3)
	*((($4 + [872]) + [8])) = $19
	$20 = *($5 + [56])
	$21 = *($5 + [48])
	$1 = *($5 + [16])
	*((($4 + [192]) + [8])) = $18
	*((($4 + [176]) + [8])) = $19
	$18 = *($4 + [1080])
	*($4 + [872]) = $18
	*($4 + [888]) = $1
	*($4 + [192]) = $1
	*($4 + [176]) = $18
	CALL $153($0, ($4 + [192]), ($4 + [176]), $20, $21, ($4 + [920]), ($4 + [904]))
	CALL $154(($4 + [1128]), ($4 + [920]))
	CALL $154(($4 + [1096]), ($4 + [904]))
	CALL $112(($4 + [1080]), (*($4 + [668]) + [16]))
	if ( ((int_64)*($3) == (int_64)*(($9 + [8]))) ){ goto $label$16 }
	CALL eosio_assert([0], [11142])
	
.LABEL $label$16
	$5 = ( $9 ? ($4 + [1080]) : ((int_64)*($4 + [1080]) < (int_64)*($9)) )
	*($3) = *(($5 + [8]))
	*($4 + [1080]) = *($5)
	*((($4 + [832]) + [16])) = (int_64)-1
	$18 = (int_64)0
	*($16) = (int_64)0
	*($17) = [0]
	$5 = *($4 + [668])
	*($15) = *($5)
	*($4 + [832]) = *($0)
	CALL $133(($4 + [224]), ($4 + [832]), *($5))
	$5 = *($4 + [228])
	if ( ($5 == 0) ){ goto $label$17 }
	$18 = *($5 + [48])
	
.LABEL $label$17
	$5 = *($4 + [668])
	$1 = *($5 + [48])
	if ( (int_64)($1 == 0) ){ goto $label$18 }
	if ( ((int_64)$1 >= (int_64)*($4 + [992])) ){ goto $label$18 }
	$20 = *($5 + [8])
	$19 = *($5)
	if ( ((int_64)$19 != (int_64)$20) ){ goto $label$19 }
	$14 = (int_64)0
	CALL $155($0, $19, $19, (int_64)0, [0])
	goto $label$18 
	
.LABEL $label$19
	$22 = *(($5 + [24]))
	*((($4 + [816]) + [8])) = $22
	$21 = *($5 + [16])
	*((($4 + [160]) + [8])) = $22
	*($4 + [816]) = $21
	*($4 + [160]) = $21
	CALL $143($0, $19, $20, ($4 + [160]), $1, (int_64)0, [0])
	$5 = *($4 + [668])
	$1 = *($5)
	*(($23 = (($4 + [800]) + [8]))) = *(($5 + [24]))
	$19 = *($5 + [16])
	*((($4 + [144]) + [8])) = *($23)
	*($4 + [800]) = $19
	*($4 + [144]) = *($4 + [800])
	CALL $135($0, $1, $1, ($4 + [144]), $18, $11, [0])
	
.LABEL $label$18
	$5 = *($4 + [668])
	CALL $156($0, *($5), *($5 + [8]), *($4 + [992]), [0])
	CALL $136($16)
	$5 = *($4 + [668])
	
.LABEL $label$15
	if ( ((int_64)*($5 + [64]) < (int_64)1) ){ goto $label$20 }
	$18 = *(($5 + [72]))
	*((($4 + [784]) + [8])) = $18
	$19 = *($3)
	*((($4 + [768]) + [8])) = $19
	$20 = *($5 + [88])
	$21 = *($5 + [80])
	$1 = *($5 + [64])
	*((($4 + [128]) + [8])) = $18
	*((($4 + [112]) + [8])) = $19
	$18 = *($4 + [1080])
	*($4 + [768]) = $18
	*($4 + [784]) = $1
	*($4 + [128]) = $1
	*($4 + [112]) = $18
	CALL $153($0, ($4 + [128]), ($4 + [112]), $20, $21, ($4 + [920]), ($4 + [904]))
	CALL $154(($4 + [1128]), ($4 + [920]))
	CALL $154(($4 + [1096]), ($4 + [904]))
	CALL $112(($4 + [1080]), (*($4 + [668]) + [64]))
	if ( ((int_64)*($3) == (int_64)*(($9 + [8]))) ){ goto $label$21 }
	CALL eosio_assert([0], [11142])
	
.LABEL $label$21
	$5 = ( $9 ? ($4 + [1080]) : ((int_64)*($4 + [1080]) < (int_64)*($9)) )
	*($3) = *(($5 + [8]))
	*($4 + [1080]) = *($5)
	$1 = *($4 + [992])
	$5 = *($4 + [668])
	$18 = *($5 + [80])
	if ( (int_64)($18 == 0) ){ goto $label$22 }
	if ( ((int_64)$18 >= (int_64)$1) ){ goto $label$22 }
	$20 = *($5 + [8])
	$19 = *($5)
	if ( ((int_64)$19 == (int_64)$20) ){ goto $label$22 }
	$21 = *(($5 + [72]))
	*((($4 + [752]) + [8])) = $21
	$1 = *($5 + [64])
	*((($4 + [96]) + [8])) = $21
	*($4 + [752]) = $1
	*($4 + [96]) = $1
	CALL $143($0, $19, $20, ($4 + [96]), $18, (int_64)0, [1])
	$5 = *($4 + [668])
	$1 = *($5 + [8])
	*(($23 = (($4 + [736]) + [8]))) = *(($5 + [72]))
	$18 = *($5 + [64])
	*((($4 + [80]) + [8])) = *($23)
	*($4 + [736]) = $18
	*($4 + [80]) = $18
	CALL $135($0, $1, $1, ($4 + [80]), $14, $11, [0])
	$1 = *($4 + [992])
	$5 = *($4 + [668])
	
.LABEL $label$22
	CALL $156($0, *($5), *($5 + [8]), $1, [1])
	
.LABEL $label$20
	CALL $157(($4 + [664]))
	$5 = *($4 + [668])
	if ( $5 ){ goto $label$14 }
	
.LABEL $label$13
	$5 = *($4 + [1292])
	$3 = $5
	if ( ((int_64)*($4 + [1104]) == (int_64)*(($5 + [152]))) ){ goto $label$23 }
	CALL eosio_assert([0], [11142])
	$3 = *($4 + [1292])
	
.LABEL $label$23
	$5 = ( ($4 + [1096]) ? ($3 + [144]) : ((int_64)*($4 + [1096]) < (int_64)*($5 + [144])) )
	*((($4 + [1096]) + [8])) = *(($5 + [8]))
	*($4 + [1096]) = *($5)
	*((($4 + [832]) + [8])) = *((($4 + [1128]) + [8]))
	*($4 + [832]) = *($4 + [1128])
	CALL $154(($4 + [832]), ($4 + [1096]))
	CALL $154(($4 + [1160]), ($4 + [832]))
	*((($4 + [832]) + [32])) = [0]
	*($4 + [848]) = (int_64)-1
	*($4 + [856]) = (int_64)0
	*($4 + [832]) = *($0)
	*($4 + [840]) = *($4 + [1336])
	CALL $158(($4 + [224]), ($4 + [832]), (int_64)0)
	$5 = *($4 + [228])
	if ( ($5 == 0) ){ goto $label$24 }
	$3 = (($4 + [664]) + [24])
	$15 = ($4 + [680])
	$17 = (($4 + [664]) + [32])
	
.LOOP $label$25:
	$1 = *($4 + [992])
	$18 = *($5 + [32])
	if ( (int_64)($18 == 0) ){ goto $label$26 }
	if ( ((int_64)$18 >= (int_64)$1) ){ goto $label$26 }
	$20 = *($5 + [8])
	$19 = *($5)
	if ( ((int_64)$19 == (int_64)$20) ){ goto $label$26 }
	$21 = *(($5 + [24]))
	*((($4 + [720]) + [8])) = $21
	$1 = *($5 + [16])
	*((($4 + [64]) + [8])) = $21
	*($4 + [720]) = $1
	*($4 + [64]) = $1
	CALL $143($0, $19, $20, ($4 + [64]), $18, (int_64)0, [0])
	$5 = *($4 + [228])
	$1 = *($5)
	*(($16 = (($4 + [704]) + [8]))) = *(($5 + [24]))
	$18 = *($5 + [16])
	*((($4 + [48]) + [8])) = *($16)
	*($4 + [704]) = $18
	*($4 + [48]) = *($4 + [704])
	CALL $135($0, $1, $1, ($4 + [48]), $14, $11, [0])
	$1 = *($4 + [992])
	$5 = *($4 + [228])
	
.LABEL $label$26
	$18 = *($5 + [56])
	if ( (int_64)($18 == 0) ){ goto $label$27 }
	if ( ((int_64)$18 >= (int_64)$1) ){ goto $label$27 }
	$1 = *($5 + [8])
	if ( ((int_64)*($5) == (int_64)$1) ){ goto $label$27 }
	*((($4 + [664]) + [8])) = $1
	*($15) = (int_64)-1
	$19 = (int_64)0
	*($3) = (int_64)0
	*($17) = [0]
	*($4 + [664]) = *($0)
	CALL $142(($4 + [504]), ($4 + [664]), $1)
	$5 = *($4 + [508])
	if ( ($5 == 0) ){ goto $label$28 }
	$19 = *($5 + [32])
	
.LABEL $label$28
	$5 = *($4 + [228])
	$18 = *($5 + [8])
	$20 = *($5)
	$21 = *(($5 + [48]))
	*((($4 + [648]) + [8])) = $21
	$22 = *($5 + [56])
	$1 = *($5 + [40])
	*((($4 + [32]) + [8])) = $21
	*($4 + [648]) = $1
	*($4 + [32]) = $1
	CALL $143($0, $20, $18, ($4 + [32]), $22, (int_64)0, [1])
	$5 = *($4 + [228])
	$1 = *($5 + [8])
	*(($16 = (($4 + [632]) + [8]))) = *(($5 + [48]))
	$18 = *($5 + [40])
	*((($4 + [16]) + [8])) = *($16)
	*($4 + [632]) = $18
	*($4 + [16]) = $18
	CALL $135($0, $1, $1, ($4 + [16]), $19, $11, [0])
	CALL $147($3)
	
.LABEL $label$27
	CALL $159(($4 + [224]))
	$5 = *($4 + [228])
	if ( $5 ){ goto $label$25 }
	
.LABEL $label$24
	if ( (*($4 + [1244]) == 0) ){ goto $label$29 }
	CALL $160($0, *(*($4 + [1004]) + [48]), *($4 + [992]), *($4 + [988]), ($4 + [1144]))
	CALL $154(($4 + [1160]), ($4 + [1144]))
	CALL $144(($4 + [568]), ($4 + [1336]))
	$3 = CALL $34(($4 + [568]), [0], [10053])
	*((($4 + [584]) + [8])) = *(($3 + [8]))
	*($4 + [584]) = *($3)
	$5 = [0]
	
.LOOP $label$30:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$30 }
	$3 = CALL $31(($4 + [584]), [10119])
	*((($4 + [600]) + [8])) = *(($3 + [8]))
	*($4 + [600]) = *($3)
	$5 = [0]
	
.LOOP $label$31:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$31 }
	CALL $145(($4 + [552]), ($4 + [1160]))
	$5 = *($4 + [552])
	$3 = ($5 & [1])
	$3 = CALL $32(($4 + [600]), ( *($4 + [560]) ? (($4 + [552]) | [1]) : $3 ), ( *($4 + [556]) ? uint_32($5 >> [1]) : $3 ))
	*((($4 + [264]) + [8])) = *(($3 + [8]))
	*($4 + [264]) = *($3)
	$5 = [0]
	
.LOOP $label$32:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$32 }
	$3 = CALL $31(($4 + [264]), [10135])
	*((($4 + [504]) + [8])) = *(($3 + [8]))
	*($4 + [504]) = *($3)
	$5 = [0]
	
.LOOP $label$33:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$33 }
	CALL $145(($4 + [536]), ($4 + [1144]))
	$5 = *($4 + [536])
	$3 = ($5 & [1])
	$3 = CALL $32(($4 + [504]), ( *($4 + [544]) ? (($4 + [536]) | [1]) : $3 ), ( *($4 + [540]) ? uint_32($5 >> [1]) : $3 ))
	*((($4 + [224]) + [8])) = *(($3 + [8]))
	*($4 + [224]) = *($3)
	$5 = [0]
	
.LOOP $label$34:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$34 }
	$3 = CALL $31(($4 + [224]), [10151])
	*((($4 + [664]) + [8])) = *(($3 + [8]))
	*($4 + [664]) = *($3)
	$5 = [0]
	
.LOOP $label$35:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$35 }
	CALL $145(($4 + [520]), ($4 + [1128]))
	$5 = *($4 + [520])
	$3 = ($5 & [1])
	$3 = CALL $32(($4 + [664]), ( *($4 + [528]) ? (($4 + [520]) | [1]) : $3 ), ( *($4 + [524]) ? uint_32($5 >> [1]) : $3 ))
	*((($4 + [616]) + [8])) = *(($3 + [8]))
	*($4 + [616]) = *($3)
	$5 = [0]
	
.LOOP $label$36:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$36 }
	if ( ((*($4 + [520]) & [1]) == 0) ){ goto $label$37 }
	CALL $10(*(($4 + [528])))
	
.LABEL $label$37
	if ( ((*($4 + [664]) & [1]) == 0) ){ goto $label$38 }
	CALL $10(*($4 + [672]))
	
.LABEL $label$38
	if ( ((*($4 + [224]) & [1]) == 0) ){ goto $label$39 }
	CALL $10(*($4 + [232]))
	
.LABEL $label$39
	if ( ((*($4 + [536]) & [1]) == 0) ){ goto $label$40 }
	CALL $10(*(($4 + [544])))
	
.LABEL $label$40
	if ( ((*($4 + [504]) & [1]) == 0) ){ goto $label$41 }
	CALL $10(*($4 + [512]))
	
.LABEL $label$41
	if ( ((*($4 + [264]) & [1]) == 0) ){ goto $label$42 }
	CALL $10(*($4 + [272]))
	
.LABEL $label$42
	if ( ((*($4 + [552]) & [1]) == 0) ){ goto $label$43 }
	CALL $10(*(($4 + [560])))
	
.LABEL $label$43
	if ( ((*($4 + [600]) & [1]) == 0) ){ goto $label$44 }
	CALL $10(*($4 + [608]))
	
.LABEL $label$44
	if ( ((*($4 + [584]) & [1]) == 0) ){ goto $label$45 }
	CALL $10(*($4 + [592]))
	
.LABEL $label$45
	if ( ((*($4 + [568]) & [1]) == 0) ){ goto $label$46 }
	CALL $10(*($4 + [576]))
	
.LABEL $label$46
	$5 = *($4 + [1196])
	*(($3 = ($4 + [672]))) = *(($5 + [24]))
	*($4 + [664]) = *($5 + [16])
	CALL $112(($4 + [664]), $5)
	if ( ((int_64)*($4 + [1168]) == (int_64)*($3)) ){ goto $label$47 }
	CALL eosio_assert([0], [11142])
	
.LABEL $label$47
	$1 = *($4 + [1160])
	if ( ((int_64)$1 <= (int_64)*($4 + [664])) ){ goto $label$48 }
	CALL eosio_assert([0], ( *($4 + [624]) ? (($4 + [616]) | [1]) : (*($4 + [616]) & [1]) ))
	$1 = *($4 + [1160])
	
.LABEL $label$48
	if ( ((int_64)$1 < (int_64)0) ){ goto $label$50 }
	if ( ((int_64)*($4 + [1144]) < (int_64)0) ){ goto $label$50 }
	if ( ((int_64)((int_64)*($4 + [1096]) | (int_64)*($4 + [1128])) > (int_64)-1) ){ goto $label$49 }
	
.LABEL $label$50
	CALL eosio_assert([0], [10167])
	
.LABEL $label$49
	*((($4 + [504]) + [8])) = *((($4 + [1144]) + [8]))
	*($4 + [504]) = *($4 + [1144])
	CALL $154(($4 + [504]), ($4 + [1128]))
	CALL $144(($4 + [376]), ($4 + [1336]))
	$3 = CALL $34(($4 + [376]), [0], [9784])
	*((($4 + [392]) + [8])) = *(($3 + [8]))
	*($4 + [392]) = *($3)
	$5 = [0]
	
.LOOP $label$51:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$51 }
	$3 = CALL $31(($4 + [392]), [10215])
	*((($4 + [408]) + [8])) = *(($3 + [8]))
	*($4 + [408]) = *($3)
	$5 = [0]
	
.LOOP $label$52:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$52 }
	$3 = CALL $31(($4 + [408]), [10230])
	*((($4 + [424]) + [8])) = *(($3 + [8]))
	*($4 + [424]) = *($3)
	$5 = [0]
	
.LOOP $label$53:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$53 }
	CALL $145(($4 + [360]), ($4 + [1128]))
	$5 = *($4 + [360])
	$3 = ($5 & [1])
	$3 = CALL $32(($4 + [424]), ( *($4 + [368]) ? (($4 + [360]) | [1]) : $3 ), ( *($4 + [364]) ? uint_32($5 >> [1]) : $3 ))
	*((($4 + [440]) + [8])) = *(($3 + [8]))
	*($4 + [440]) = *($3)
	$5 = [0]
	
.LOOP $label$54:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$54 }
	$3 = CALL $31(($4 + [440]), [10245])
	*((($4 + [456]) + [8])) = *(($3 + [8]))
	*($4 + [456]) = *($3)
	$5 = [0]
	
.LOOP $label$55:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$55 }
	CALL $145(($4 + [344]), ($4 + [1144]))
	$5 = *($4 + [344])
	$3 = ($5 & [1])
	$3 = CALL $32(($4 + [456]), ( *($4 + [352]) ? (($4 + [344]) | [1]) : $3 ), ( *($4 + [348]) ? uint_32($5 >> [1]) : $3 ))
	*((($4 + [472]) + [8])) = *(($3 + [8]))
	*($4 + [472]) = *($3)
	$5 = [0]
	
.LOOP $label$56:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$56 }
	$3 = CALL $31(($4 + [472]), [10260])
	*((($4 + [488]) + [8])) = *(($3 + [8]))
	*($4 + [488]) = *($3)
	$5 = [0]
	
.LOOP $label$57:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$57 }
	CALL $145(($4 + [328]), ($4 + [1096]))
	$5 = *($4 + [328])
	$3 = ($5 & [1])
	$3 = CALL $32(($4 + [488]), ( *($4 + [336]) ? (($4 + [328]) | [1]) : $3 ), ( *($4 + [332]) ? uint_32($5 >> [1]) : $3 ))
	*((($4 + [520]) + [8])) = *(($3 + [8]))
	*($4 + [520]) = *($3)
	$5 = [0]
	
.LOOP $label$58:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$58 }
	$3 = CALL $31(($4 + [520]), [10280])
	*((($4 + [536]) + [8])) = *(($3 + [8]))
	*($4 + [536]) = *($3)
	$5 = [0]
	
.LOOP $label$59:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$59 }
	CALL $145(($4 + [312]), ($4 + [1112]))
	$5 = *($4 + [312])
	$3 = ($5 & [1])
	$3 = CALL $32(($4 + [536]), ( *($4 + [320]) ? (($4 + [312]) | [1]) : $3 ), ( *($4 + [316]) ? uint_32($5 >> [1]) : $3 ))
	*((($4 + [552]) + [8])) = *(($3 + [8]))
	*($4 + [552]) = *($3)
	$5 = [0]
	
.LOOP $label$60:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$60 }
	$3 = CALL $31(($4 + [552]), [10308])
	*((($4 + [568]) + [8])) = *(($3 + [8]))
	*($4 + [568]) = *($3)
	$5 = [0]
	
.LOOP $label$61:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$61 }
	CALL $145(($4 + [296]), ($4 + [1064]))
	$5 = *($4 + [296])
	$3 = ($5 & [1])
	$3 = CALL $32(($4 + [568]), ( *($4 + [304]) ? (($4 + [296]) | [1]) : $3 ), ( *($4 + [300]) ? uint_32($5 >> [1]) : $3 ))
	*((($4 + [584]) + [8])) = *(($3 + [8]))
	*($4 + [584]) = *($3)
	$5 = [0]
	
.LOOP $label$62:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$62 }
	$3 = CALL $31(($4 + [584]), [10320])
	*((($4 + [264]) + [8])) = *(($3 + [8]))
	*($4 + [264]) = *($3)
	$5 = [0]
	
.LOOP $label$63:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$63 }
	$3 = CALL $31(($4 + [264]), [10336])
	*((($4 + [224]) + [8])) = *(($3 + [8]))
	*($4 + [224]) = *($3)
	$5 = [0]
	
.LOOP $label$64:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$64 }
	CALL $145(($4 + [280]), ($4 + [1048]))
	$5 = *($4 + [280])
	$3 = ($5 & [1])
	$3 = CALL $32(($4 + [224]), ( *($4 + [288]) ? (($4 + [280]) | [1]) : $3 ), ( *($4 + [284]) ? uint_32($5 >> [1]) : $3 ))
	*((($4 + [664]) + [8])) = *(($3 + [8]))
	*($4 + [664]) = *($3)
	$5 = [0]
	
.LOOP $label$65:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$65 }
	$3 = CALL $31(($4 + [664]), [10348])
	*((($4 + [600]) + [8])) = *(($3 + [8]))
	*($4 + [600]) = *($3)
	$5 = [0]
	
.LOOP $label$66:
	*(($3 + $5)) = [0]
	$5 = ($5 + [4])
	if ( ((int_32)$5 != (int_32)[12]) ){ goto $label$66 }
	if ( ((*($4 + [664]) & [1]) == 0) ){ goto $label$67 }
	CALL $10(*($4 + [672]))
	
.LABEL $label$67
	if ( ((*($4 + [280]) & [1]) == 0) ){ goto $label$68 }
	CALL $10(*(($4 + [288])))
	
.LABEL $label$68
	if ( ((*($4 + [224]) & [1]) == 0) ){ goto $label$69 }
	CALL $10(*($4 + [232]))
	
.LABEL $label$69
	if ( ((*($4 + [264]) & [1]) == 0) ){ goto $label$70 }
	CALL $10(*($4 + [272]))
	
.LABEL $label$70
	if ( ((*($4 + [584]) & [1]) == 0) ){ goto $label$71 }
	CALL $10(*($4 + [592]))
	
.LABEL $label$71
	if ( ((*($4 + [296]) & [1]) == 0) ){ goto $label$72 }
	CALL $10(*(($4 + [304])))
	
.LABEL $label$72
	if ( ((*($4 + [568]) & [1]) == 0) ){ goto $label$73 }
	CALL $10(*($4 + [576]))
	
.LABEL $label$73
	if ( ((*($4 + [552]) & [1]) == 0) ){ goto $label$74 }
	CALL $10(*($4 + [560]))
	
.LABEL $label$74
	if ( ((*($4 + [312]) & [1]) == 0) ){ goto $label$75 }
	CALL $10(*(($4 + [320])))
	
.LABEL $label$75
	if ( ((*($4 + [536]) & [1]) == 0) ){ goto $label$76 }
	CALL $10(*($4 + [544]))
	
.LABEL $label$76
	if ( ((*($4 + [520]) & [1]) == 0) ){ goto $label$77 }
	CALL $10(*($4 + [528]))
	
.LABEL $label$77
	if ( ((*($4 + [328]) & [1]) == 0) ){ goto $label$78 }
	CALL $10(*(($4 + [336])))
	
.LABEL $label$78
	if ( ((*($4 + [488]) & [1]) == 0) ){ goto $label$79 }
	CALL $10(*($4 + [496]))
	
.LABEL $label$79
	if ( ((*($4 + [472]) & [1]) == 0) ){ goto $label$80 }
	CALL $10(*($4 + [480]))
	
.LABEL $label$80
	if ( ((*($4 + [344]) & [1]) == 0) ){ goto $label$81 }
	CALL $10(*(($4 + [352])))
	
.LABEL $label$81
	if ( ((*($4 + [456]) & [1]) == 0) ){ goto $label$82 }
	CALL $10(*($4 + [464]))
	
.LABEL $label$82
	if ( ((*($4 + [440]) & [1]) == 0) ){ goto $label$83 }
	CALL $10(*($4 + [448]))
	
.LABEL $label$83
	if ( ((*($4 + [360]) & [1]) == 0) ){ goto $label$84 }
	CALL $10(*(($4 + [368])))
	
.LABEL $label$84
	if ( ((*($4 + [424]) & [1]) == 0) ){ goto $label$85 }
	CALL $10(*($4 + [432]))
	
.LABEL $label$85
	if ( ((*($4 + [408]) & [1]) == 0) ){ goto $label$86 }
	CALL $10(*($4 + [416]))
	
.LABEL $label$86
	if ( ((*($4 + [392]) & [1]) == 0) ){ goto $label$87 }
	CALL $10(*($4 + [400]))
	
.LABEL $label$87
	if ( ((*($4 + [376]) & [1]) == 0) ){ goto $label$88 }
	CALL $10(*($4 + [384]))
	
.LABEL $label$88
	if ( ((int_64)*($4 + [512]) == (int_64)*($9 + [8])) ){ goto $label$89 }
	CALL eosio_assert([0], [11142])
	
.LABEL $label$89
	$1 = *($4 + [504])
	if ( ((int_64)$1 == (int_64)*($9)) ){ goto $label$90 }
	*($4 + [272]) = (int_64)3617214756542218240
	*($4 + [264]) = *($8 + [32])
	$1 = *($0)
	*(($4 + [240])) = *(($4 + [512]))
	*($4 + [224]) = *($4 + [1336])
	*($4 + [232]) = *($4 + [504])
	CALL $25(($4 + [248]), ($4 + [600]))
	$5 = CALL $161(($4 + [664]), ($4 + [264]), $1, (int_64)8516769789752901632, ($4 + [224]))
	CALL $107($5)
	$3 = *($5 + [28])
	if ( ($3 == 0) ){ goto $label$91 }
	*(($5 + [32])) = $3
	CALL $10($3)
	
.LABEL $label$91
	$3 = *($5 + [16])
	if ( ($3 == 0) ){ goto $label$92 }
	*(($5 + [20])) = $3
	CALL $10($3)
	
.LABEL $label$92
	if ( ((*($4 + [248]) & [1]) == 0) ){ goto $label$93 }
	CALL $10(*(($4 + [256])))
	
.LABEL $label$93
	$1 = *($4 + [504])
	
.LABEL $label$90
	$12 = ((float_32)$2 / (float_32)(float_32)100)
	if ( ((float_32)(float_32)|$12| < (float_32)(float_32)9223372036854775808) ){ goto $label$95 }
	$18 = (int_64)-9223372036854775808
	goto $label$94 
	
.LABEL $label$95
	$18 = (Rounds 0)($12)
	
.LABEL $label$94
	$1 = ((int_64)$1 * (int_64)$18)
	CALL $154(($4 + [1112]), CALL $121(($4 + [664]), $1, $6))
	CALL $133(($4 + [584]), ($4 + [944]), *($4 + [1336]))
	if ( ((int_64)$1 < (int_64)1) ){ goto $label$96 }
	if ( ((int_64)((int_64)*(*($4 + [588]) + [16]) + (int_64)$1) < (int_64)*(*($4 + [1292]) + [120])) ){ goto $label$96 }
	$1 = *((($4 + [1112]) + [8]))
	*((($4 + [208]) + [8])) = $1
	*(($4 + [8])) = $1
	$1 = *($4 + [1112])
	*($4 + [208]) = $1
	*($4) = $1
	$1 = *($4 + [1336])
	CALL $135($0, $1, $1, $4, $14, $11, [0])
	
.LABEL $label$96
	$1 = ( (int_64)0 ? $11 : ((int_64)$11 == (int_64)*($10)) )
	$5 = *($4 + [1004])
	*($4 + [668]) = ($4 + [1144])
	*($4 + [664]) = ($4 + [992])
	*($4 + [672]) = ($4 + [1128])
	*($4 + [676]) = ($4 + [988])
	if ( $5 ){ goto $label$97 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$97
	CALL $162(($4 + [1008]), $5, $1, ($4 + [664]))
	if ( ((int_64)*((($4 + [1096]) + [8])) == (int_64)*(($9 + [8]))) ){ goto $label$98 }
	CALL eosio_assert([0], [11142])
	
.LABEL $label$98
	if ( ((int_64)*($4 + [1096]) == (int_64)*($9)) ){ goto $label$99 }
	*($4 + [272]) = (int_64)3617214756542218240
	*($4 + [264]) = *($8 + [32])
	$1 = *($0)
	*(($4 + [240])) = *(($4 + [1104]))
	*($4 + [232]) = *($4 + [1096])
	*($4 + [224]) = *(*($4 + [1292]) + [176])
	CALL $25(($4 + [248]), ($4 + [600]))
	$5 = CALL $161(($4 + [664]), ($4 + [264]), $1, (int_64)8516769789752901632, ($4 + [224]))
	CALL $107($5)
	$0 = *($5 + [28])
	if ( ($0 == 0) ){ goto $label$100 }
	*(($5 + [32])) = $0
	CALL $10($0)
	
.LABEL $label$100
	$0 = *($5 + [16])
	if ( ($0 == 0) ){ goto $label$101 }
	*(($5 + [20])) = $0
	CALL $10($0)
	
.LABEL $label$101
	if ( ((*($4 + [248]) & [1]) == 0) ){ goto $label$99 }
	CALL $10(*(($4 + [256])))
	
.LABEL $label$99
	if ( ((*($4 + [600]) & [1]) == 0) ){ goto $label$102 }
	CALL $10(*($4 + [608]))
	
.LABEL $label$102
	if ( ((*($4 + [616]) & [1]) == 0) ){ goto $label$29 }
	CALL $10(*($4 + [624]))
	
.LABEL $label$29
	CALL $147((($4 + [832]) + [24]))
	CALL $136((($4 + [944]) + [24]))
	CALL $115((($4 + [1008]) + [24]))
	CALL $101((($4 + [1200]) + [24]))
	CALL $124((($4 + [1248]) + [24]))
	CALL $137((($4 + [1296]) + [24]))
	$global$0 = ($4 + [1344])
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [56])) = [0]
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	$3 = *($0)
	*($2 + [24]) = $3
	*($2 + [32]) = $3
	CALL $132(($2 + [16]), ($2 + [24]), (int_64)0)
	if ( *($2 + [20]) ){ goto $label$1 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$1
	$3 = *($0)
	$0 = *($2 + [20])
	*($2 + [8]) = $1
	if ( $0 ){ goto $label$2 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$2
	CALL $187(($2 + [24]), $0, $3, ($2 + [8]))
	CALL $137(($2 + [48]))
	$global$0 = ($2 + [64])
}

int_32 .FUNC $85 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	*($4 + [40]) = [0]
	CALL eosio_assert([0], [11710])
	$3 = ($4 + [40])
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	*($4 + [40]) = [0]
	$3 = ($4 + [40])
	
.LABEL $label$1
	CALL memcpy($3, $2, [1])
	*(($4 + [28])) = ($2 + [1])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$8 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($8 & [255])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $2($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [128])
	$global$0 = $2
	*($2 + [127]) = $1
	*($2 + [36]) = CALL $16([9399])
	*($2 + [32]) = [9399]
	*($2) = *($2 + [32])
	$3 = *(CALL $138(($2 + [80]), $2))
	*(($2 + [112])) = [0]
	$3 = ((int_64)$3 & (int_64)72057594037927935)
	*($2 + [88]) = $3
	*($2 + [96]) = (int_64)-1
	*($2 + [104]) = (int_64)0
	*($2 + [80]) = *($0)
	CALL $98(($2 + [72]), ($2 + [80]), $3)
	$1 = *($2 + [76])
	if ( $1 ){ goto $label$1 }
	CALL eosio_assert([0], [8565])
	$1 = *($2 + [76])
	
.LABEL $label$1
	CALL require_auth(*($1 + [32]))
	*(($2 + [64])) = [0]
	*($2 + [48]) = (int_64)-1
	*($2 + [56]) = (int_64)0
	$3 = *($0)
	*($2 + [32]) = $3
	*($2 + [40]) = $3
	CALL $132(($2 + [24]), ($2 + [32]), (int_64)0)
	if ( *($2 + [28]) ){ goto $label$2 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$2
	*($2 + [16]) = CALL $37()
	$3 = *($0)
	$0 = *($2 + [28])
	*($2 + [12]) = ($2 + [16])
	*($2 + [8]) = ($2 + [127])
	if ( $0 ){ goto $label$3 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$3
	CALL $139(($2 + [32]), $0, $3, ($2 + [8]))
	CALL $137((($2 + [32]) + [24]))
	CALL $101((($2 + [80]) + [24]))
	$global$0 = ($2 + [128])
}

void .FUNC $83 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	$1 = ($global$0 - [128])
	$global$0 = $1
	CALL require_auth(*($0))
	*((($1 + [80]) + [32])) = [0]
	*($1 + [96]) = (int_64)-1
	*($1 + [104]) = (int_64)0
	$2 = *($0)
	*($1 + [80]) = $2
	*($1 + [88]) = $2
	CALL $132(($1 + [72]), ($1 + [80]), (int_64)0)
	if ( *($1 + [76]) ){ goto $label$1 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$1
	*($1 + [124]) = CALL $16([9399])
	*($1 + [120]) = [9399]
	*($1 + [8]) = *($1 + [120])
	$2 = *(CALL $138(($1 + [24]), ($1 + [8])))
	*($1 + [64]) = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	*((($1 + [24]) + [32])) = [0]
	$2 = ((int_64)$2 & (int_64)72057594037927935)
	*($1 + [32]) = $2
	*($1 + [40]) = (int_64)-1
	*($1 + [48]) = (int_64)0
	*($1 + [24]) = *($0)
	CALL $98(($1 + [120]), ($1 + [24]), $2)
	$3 = *($1 + [124])
	if ( $3 ){ goto $label$2 }
	CALL eosio_assert([0], [8720])
	$3 = *($1 + [124])
	
.LABEL $label$2
	CALL require_auth(*($3 + [32]))
	$2 = *($0)
	*($1 + [20]) = ($1 + [64])
	*($1 + [16]) = ($1 + [72])
	CALL $190(($1 + [24]), $3, $2, ($1 + [16]))
	$2 = *($0)
	$0 = *($1 + [76])
	if ( $0 ){ goto $label$3 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$3
	CALL $191(($1 + [80]), $0, $2)
	CALL $101((($1 + [24]) + [24]))
	CALL $137((($1 + [80]) + [24]))
	$global$0 = ($1 + [128])
}

int_32 .FUNC $82 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $2($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

void .FUNC $81 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	$1 = ($global$0 - [80])
	$global$0 = $1
	CALL require_auth(*($0))
	*(($1 + [72])) = [0]
	*($1 + [56]) = (int_64)-1
	*($1 + [64]) = (int_64)0
	$2 = *($0)
	*($1 + [40]) = $2
	*($1 + [48]) = $2
	CALL $132(($1 + [32]), ($1 + [40]), (int_64)0)
	$3 = *($1 + [36])
	if ( $3 ){ goto $label$1 }
	CALL eosio_assert([0], [9148])
	$3 = *($1 + [36])
	
.LABEL $label$1
	$4 = *(($3 + [168]))
	*((($1 + [16]) + [8])) = $4
	$5 = *($0)
	$6 = *($3 + [176])
	$2 = *($3 + [160])
	*(($1 + [8])) = $4
	*($1 + [16]) = $2
	*($1) = $2
	CALL $105($0, $6, $1, $5)
	$2 = *($0)
	$0 = *($1 + [36])
	if ( $0 ){ goto $label$2 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$2
	CALL $189(($1 + [40]), $0, $2)
	CALL $137(($1 + [64]))
	$global$0 = ($1 + [80])
}

void .FUNC $80 (int_32 $0, float_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [60]) = $1
	CALL require_auth(*($0))
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$3 = *($0)
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	CALL $132(($2 + [8]), ($2 + [16]), (int_64)0)
	if ( *($2 + [12]) ){ goto $label$1 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$1
	$3 = *($0)
	$0 = *($2 + [12])
	*($2) = ($2 + [60])
	if ( $0 ){ goto $label$2 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$2
	CALL $182(($2 + [16]), $0, $3, $2)
	CALL $137(($2 + [40]))
	$global$0 = ($2 + [64])
}

void .FUNC $182 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [196]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	*($1 + [108]) = *(*($3))
	$6 = *($1)
	$3 = $4
	$4 = ($3 + [-192])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-15])
	*($5 + [24]) = ($5 + [8])
	CALL $166($1, ($5 + [24]))
	CALL db_update_i64(*($1 + [200]), $2, $4, [177])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [32])
}

void .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$1 = CALL $25($2, ($1 + [8]))
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*($0) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($5) + $0))
	
.LABEL $label$1
	$4 = CALL $25(($2 + [16]), $1)
	CALL void $5((int_32 $3), (int_64 $4), (int_32 $0))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $10(*($4 + [8]))
	
.LABEL $label$2
	if ( ((*($1) & [1]) == 0) ){ goto $label$3 }
	CALL $10(*($1 + [8]))
	
.LABEL $label$3
	$global$0 = ($2 + [32])
}

int_32 .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $244($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$7 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$6 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$5 
	
.LABEL $label$7
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$3 = [0]
	
.LOOP $label$8:
	*(($2 + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[12]) ){ goto $label$8 }
	if ( (*($1) & [1]) ){ goto $label$4 }
	*($1) = [0]
	goto $label$3 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $8($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$5
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $27($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = [0]
	
.LOOP $label$12:
	*(($2 + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[12]) ){ goto $label$12 }
	if ( ((*($2) & [1]) == 0) ){ goto $label$2 }
	CALL $10(*($2 + [8]))
	goto $label$2 
	
.LABEL $label$4
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$3
	CALL $27($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = [0]
	
.LOOP $label$13:
	*(($2 + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[12]) ){ goto $label$13 }
	if ( ((*($2) & [1]) == 0) ){ goto $label$2 }
	CALL $10(*($2 + [8]))
	
.LABEL $label$2
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$14 }
	*($2 + [20]) = $3
	CALL $10($3)
	
.LABEL $label$14
	$global$0 = ($2 + [32])
	return $0
	
.LABEL $label$1
	CALL $24($2)
	return (unreachable)
}

void .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [8])
	$5 = (CASTING uint_32)(uint_64 $4)
	$6 = ((int_64)$4 & (int_64)255)
	$7 = (int_64)($6 == 0)
	if ( $7 ){ goto $label$2 }
	$8 = ((int_64)$6 + (int_64)1)
	$9 = (int_64)1
	
.LOOP $label$3:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)1
	
.LABEL $label$1
	$5 = ($5 & [255])
	$2 = ($2 - (($5 + [16]) & [496]))
	$10 = $2
	$global$0 = $10
	*(($11 = ($2 + $5))) = [0]
	$12 = *($1)
	if ( $7 ){ goto $label$4 }
	$8 = ((int_64)( (int_64)-1 ? (int_64)1 : ((int_64)$12 < (int_64)0) ) * (int_64)((int_64)$12 % (int_64)$9))
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ($11 + [-1])
	
.LOOP $label$5:
	$13 = ((int_64)$8 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$13 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$8 = $13
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = ($10 - (($5 + [47]) & [496]))
	$global$0 = $7
	$1 = *($2)
	*($3 + [24]) = (uint_64)$4 >> (uint_64)(int_64)8)
	CALL $227(($3 + [32]), ($3 + [24]))
	*(($3 + [16])) = ( *($3 + [40]) ? (($3 + [32]) | [1]) : (*($3 + [32]) & [1]) )
	*($3 + [12]) = $2
	*($3 + [8]) = ( [11349] ? [11351] : $1 )
	*($3) = ((int_64)$12 / (int_64)$9)
	CALL $23($7, ($5 + [32]), [11337], $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $10(*(($3 + [40])))
	
.LABEL $label$6
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	$1 = CALL $16($7)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$10 }
	*($0) = ($1 << [1])
	$5 = ($0 + [1])
	if ( $1 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$2 = (($1 + [16]) & [-16])
	$5 = CALL $8($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $1
	
.LABEL $label$9
	CALL memcpy($5, $7, $1)
	
.LABEL $label$8
	*(($5 + $1)) = [0]
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$7
	CALL $24($0)
}

void .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$4 }
	$4 = [0]
	$5 = *([0] + [11300])
	
.LOOP $label$6:
	*((($2 + [3]) + ($1 = $4))) = *(($5 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$3 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$1 == (int_32)[12]) )))))
	$4 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[11]) ){ goto $label$5 }
	$3 = ((int_64)$3 << (int_64)5)
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	*($0) = [0]
	$1 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $8($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$2
	$0 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$7:
	*(($5 + $1)) = *((($2 + [3]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$7 }
	$1 = ($5 + $4)
	
.LABEL $label$1
	*($1) = [0]
	$global$0 = ($2 + [16])
}

int_32 .FUNC $147 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $10($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $10($2)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $146 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$6 = CALL $8([16])
	*($0 + [16]) = $6
	*(($7 = ($0 + [20]))) = $6
	$8 = ($6 + [16])
	*($5) = $8
	*(($6 + [8])) = *(($1 + [8]))
	*($6) = *($1)
	*($7) = $8
	CALL $228(($0 + [28]), $4)
	return $0
}

void .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = (($2 + [16]) + [8]))) = *(($1 + [24]))
	*($2 + [16]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$6 = *($1 + [32])
	$7 = *($1 + [36])
	*((($2 + [32]) + [8])) = *($3)
	*($2 + [32]) = *($2 + [16])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$8 = *((($2 + [32]) + [8]))
	*((($2 + [48]) + [8])) = $8
	*(($2 + [8])) = $8
	$8 = *($2 + [32])
	*($2) = $8
	*($2 + [48]) = $8
	CALL void $0((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 ((int_32)($7 & [255]) != (int_32)[0])), (int_32 $1))
	$global$0 = ($2 + [64])
}

void .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $94(*($1), *($0))
	$0 = *($0)
	CALL $94(*($1), ($0 + [8]))
	CALL $95(*($1), ($0 + [16]))
	$3 = ($0 + [32])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [11710])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)*($1 + [8]) != (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert([0], [11710])
	$4 = *(($1 + [4]))
	
.LABEL $label$2
	CALL memcpy(($2 + [15]), $4, [1])
	*(($1 = ($1 + [4]))) = (*($1) + [1])
	*(($0 + [36])) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $143 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4, int_64 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	$7 = ($global$0 - [304])
	$global$0 = $7
	*($7 + [295]) = $6
	*($7 + [296]) = $4
	*((($7 + [248]) + [32])) = [0]
	*($7 + [256]) = $1
	*($7 + [264]) = (int_64)-1
	*($7 + [272]) = (int_64)0
	*($7 + [248]) = *($0)
	CALL $142(($7 + [240]), ($7 + [248]), $2)
	if ( *($7 + [244]) ){ goto $label$1 }
	CALL eosio_assert([0], [10800])
	
.LABEL $label$1
	*((($7 + [200]) + [32])) = [0]
	*($7 + [208]) = $2
	*($7 + [216]) = (int_64)-1
	*($7 + [224]) = (int_64)0
	*($7 + [200]) = *($0)
	CALL $133(($7 + [192]), ($7 + [200]), $1)
	$6 = *($7 + [196])
	if ( $6 ){ goto $label$2 }
	CALL eosio_assert([0], [10826])
	$6 = *($7 + [196])
	
.LABEL $label$2
	$6 = ( ($6 + [64]) ? ($6 + [16]) : *($7 + [295]) )
	*(($8 = (($7 + [176]) + [8]))) = *(($6 + [8]))
	*($7 + [176]) = *($6)
	*(($6 = (($7 + [160]) + [8]))) = *($8)
	*($7 + [160]) = *($7 + [176])
	CALL $112(($7 + [160]), $3)
	*(($7 + [152])) = [0]
	*($7 + [136]) = (int_64)-1
	*($7 + [144]) = (int_64)0
	$4 = *($0)
	*($7 + [120]) = $4
	*($7 + [128]) = $4
	CALL $132(($7 + [112]), ($7 + [120]), (int_64)0)
	$6 = *($7 + [116])
	if ( ((int_64)*($6) == (int_64)*(($6 + [128]))) ){ goto $label$3 }
	CALL eosio_assert([0], [11142])
	
.LABEL $label$3
	$4 = *($7 + [160])
	if ( (int_64)($4 == 0) ){ goto $label$4 }
	if ( ((int_64)$4 >= (int_64)*($6 + [120])) ){ goto $label$4 }
	CALL eosio_assert([0], [10847])
	
.LABEL $label$4
	if ( (*($7 + [295]) == 0) ){ goto $label$6 }
	$4 = *(($3 + [8]))
	*((($7 + [96]) + [8])) = $4
	$1 = *($3)
	*((($7 + [32]) + [8])) = $4
	*($7 + [96]) = $1
	*($7 + [32]) = $1
	CALL $220($0, $2, ($7 + [32]), $2)
	goto $label$5 
	
.LABEL $label$6
	$4 = *(($3 + [8]))
	*((($7 + [80]) + [8])) = $4
	$2 = *($3)
	*((($7 + [16]) + [8])) = $4
	*($7 + [80]) = $2
	*($7 + [16]) = $2
	CALL $220($0, $1, ($7 + [16]), $2)
	
.LABEL $label$5
	$2 = *($7 + [240])
	if ( ((int_64)*($7 + [160]) == (int_64)0) ){ goto $label$8 }
	*($7 + [52]) = ($7 + [160])
	*($7 + [48]) = ($7 + [295])
	*($7 + [56]) = ($7 + [296])
	$6 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	if ( $6) ){ goto $label$9 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$9
	CALL $221(($7 + [248]), $6, $5, ($7 + [48]))
	$6 = *($7 + [196])
	*($7 + [52]) = ($7 + [160])
	*($7 + [48]) = ($7 + [295])
	*($7 + [56]) = ($7 + [296])
	if ( $6 ){ goto $label$10 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$10
	CALL $222(($7 + [200]), $6, $5, ($7 + [48]))
	$2 = *($0)
	$0 = *($7 + [116])
	*($7 + [48]) = $3
	if ( $0 ){ goto $label$11 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$11
	CALL $223(($7 + [120]), $0, $2, ($7 + [48]))
	goto $label$7 
	
.LABEL $label$8
	*($7 + [72]) = $2
	*($7 + [8]) = *($7 + [72])
	CALL $224(($7 + [48]), ($7 + [248]), ($7 + [8]))
	*($7 + [64]) = *($7 + [192])
	*($7) = *($7 + [64])
	CALL $225(($7 + [48]), ($7 + [200]), $7)
	$2 = *($0)
	$0 = *($7 + [116])
	*($7 + [48]) = $3
	if ( $0 ){ goto $label$12 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$12
	CALL $226(($7 + [120]), $0, $2, ($7 + [48]))
	
.LABEL $label$7
	CALL $137((($7 + [120]) + [24]))
	CALL $136((($7 + [200]) + [24]))
	CALL $147((($7 + [248]) + [24]))
	$global$0 = ($7 + [304])
}

void .FUNC $142 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	if ( ((int_64)*(*($5) + [8]) == (int_64)$2) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$5 = *(($4 + [-24]))
	if ( ((int_32)*($5 + [64]) == (int_32)$1) ){ goto $label$5 }
	CALL eosio_assert([0], [11636])
	
.LABEL $label$5
	*($0 + [4]) = $5
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)5378043540710670336, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	$5 = CALL $219($1, $5)
	if ( ((int_32)*($5 + [64]) == (int_32)$1) ){ goto $label$7 }
	CALL eosio_assert([0], [11636])
	
.LABEL $label$7
	*($0 + [4]) = $5
	goto $label$1 
	
.LABEL $label$6
	*($0 + [4]) = [0]
	
.LABEL $label$1
	*($0) = $1
}

int_32 .FUNC $72 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [128])
	$global$0 = $3
	*(($4 = $3) + [88]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $1($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [52]) = $3
	*($4 + [48]) = $3
	*($4 + [56]) = ($3 + $2)
	*($4 + [112]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $116(($4 + [16]), ($4 + [112]))
	*(($5 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [96]) + [8]))) = *($5)
	*($4 + [96]) = *($4)
	$5 = *($6)
	*((($4 + [112]) + [8])) = $5
	*(($4 + [40])) = $5
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [96])
	*($4 + [32]) = $0
	*($4 + [112]) = $0
	*($4 + [116]) = ($4 + [88])
	*($4 + [112]) = ($4 + [16])
	CALL $117(($4 + [112]), ($4 + [64]))
	if ( ($2 <= [513]) ){ goto $label$5 }
	CALL $2($3)
	
.LABEL $label$5
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $73 (int_32 $0, int_64 $1)
{
	int_32 $2
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [56]) = $1
	CALL require_auth(*($0))
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$1 = *($0)
	*($2 + [16]) = $1
	*($2 + [24]) = $1
	CALL $132(($2 + [8]), ($2 + [16]), (int_64)0)
	if ( *($2 + [12]) ){ goto $label$1 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$1
	$1 = *($0)
	$0 = *($2 + [12])
	*($2) = ($2 + [56])
	if ( $0 ){ goto $label$2 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$2
	CALL $188(($2 + [16]), $0, $1, $2)
	CALL $137(($2 + [40]))
	$global$0 = ($2 + [64])
}

int_32 .FUNC $70 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	CALL eosio_assert([0], [11710])
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL memcpy($4, $2, [1])
	$8 = *($4)
	*(($4 + [20])) = ($2 + [1])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $2($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL require_auth(*($3))
	if ( CALL is_account(*($1)) ){ goto $label$1 }
	CALL eosio_assert([0], [8829])
	
.LABEL $label$1
	$5 = *($2)
	*((($4 + [48]) + [32])) = [0]
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	*($4 + [56]) = $5)
	*($4 + [64]) = (int_64)-1
	*($4 + [72]) = (int_64)0
	*($4 + [48]) = *($0)
	if ( ((int_64)*(CALL $118(($4 + [48]), $5, [8858]) + [8]) == (int_64)*($2)) ){ goto $label$2 }
	CALL eosio_assert([0], [8685])
	
.LABEL $label$2
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [8]) = *($0)
	*($4 + [16]) = *($1)
	CALL $119($4, ($4 + [8]), $5)
	if ( (*($4 + [4]) == 0) ){ goto $label$4 }
	$5 = *($1)
	if ( ((int_64)$5 != (int_64)*($3)) ){ goto $label$3 }
	$1 = *($4 + [4])
	if ( $1 ){ goto $label$5 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$5
	CALL $120(($4 + [8]), $1, $5)
	goto $label$3 
	
.LABEL $label$4
	$6 = *($3)
	if ( ((int_64)CALL current_receiver() == (int_64)*($4 + [8])) ){ goto $label$6 }
	CALL eosio_assert([0], [11715])
	
.LABEL $label$6
	*(($1 = CALL $8([32])) + [8]) = (int_64)0
	*($1) = (int_64)0
	*($1 + [16]) = ($4 + [8])
	CALL $121(($4 + [112]), (int_64)0, *($2))
	*($1 + [8]) = *((($4 + [112]) + [8]))
	*($1) = *($4 + [112])
	*($4 + [104]) = (($4 + [112]) + [16])
	*($4 + [100]) = ($4 + [112])
	*($4 + [96]) = ($4 + [112])
	CALL $122(($4 + [96]), $1)
	$5 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	$0 = CALL db_store_i64(*((($4 + [8]) + [8])), (int_64)3607749779137757184, $6, $5), ($4 + [112]), [16]
	*($1 + [20]) = $0)
	$2 = (($4 + [8]) + [16])
	if ( (uint_64)($5 <= *($2)) ){ goto $label$7 }
	*($2) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$7
	*($4 + [96]) = $1
	$5 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8
	*($4 + [112]) = $5)
	*($4 + [92]) = $0
	$3 = ($4 + [36])
	$2 = *($3)
	if ( ((uint_32)$2 >= (uint_32)*((($4 + [8]) + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $5
	*($2 + [16]) = $0
	*($4 + [96]) = [0]
	*($2) = $1
	*($3) = ($2 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $123(($4 + [32]), ($4 + [96]), ($4 + [112]), ($4 + [92]))
	
.LABEL $label$8
	$1 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $10($1)
	
.LABEL $label$3
	CALL $124((($4 + [8]) + [24]))
	CALL $101((($4 + [48]) + [24]))
	$global$0 = ($4 + [128])
}

int_32 .FUNC $76 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [64]) + [24])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = [0]
	*($4 + [100]) = [0]
	*($4 + [102]) = [0]
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [128]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $163(($4 + [16]), ($4 + [128]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4)
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [16])
	CALL $164(($4 + [128]), ($4 + [64]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $2($2)
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $77 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth(*($0))
	*(($3 + [40])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	CALL $108($3, ($3 + [8]), $1)
	if ( (*($3 + [4]) == 0) ){ goto $label$1 }
	$0 = *($3 + [4])
	if ( $0 ){ goto $label$2 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$2
	CALL $197(($3 + [8]), $0)
	
.LABEL $label$1
	CALL $115(($3 + [32]))
	$global$0 = ($3 + [48])
}

void .FUNC $74 (int_32 $0, float_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [60]) = $1
	CALL require_auth(*($0))
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$3 = *($0)
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	CALL $132(($2 + [8]), ($2 + [16]), (int_64)0)
	if ( *($2 + [12]) ){ goto $label$1 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$1
	$3 = *($0)
	$0 = *($2 + [12])
	*($2) = ($2 + [60])
	if ( $0 ){ goto $label$2 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$2
	CALL $193(($2 + [16]), $0, $3, $2)
	CALL $137(($2 + [40]))
	$global$0 = ($2 + [64])
}

void .FUNC $75 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	float_64 $14
	$8 = ($global$0 - [432])
	$global$0 = $8
	CALL prints([10366])
	*((($8 + [392]) + [32])) = [0]
	*($8 + [408]) = (int_64)-1
	*($8 + [416]) = (int_64)0
	$9 = *($0)
	*($8 + [392]) = $9
	*($8 + [400]) = $9
	CALL $132(($8 + [384]), ($8 + [392]), (int_64)0)
	if ( *($8 + [388]) ){ goto $label$1 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$1
	$9 = *($3 + [8])
	*((($8 + [344]) + [32])) = [0]
	*($8 + [360]) = (int_64)-1
	*($8 + [368]) = (int_64)0
	*($8 + [344]) = *($0)
	$10 = (uint_64)$9 >> (uint_64)(int_64)8
	*($8 + [352]) = $10)
	$11 = CALL $118(($8 + [344]), $10, [9062])
	if ( ((int_64)$9 == (int_64)*($11 + [8])) ){ goto $label$2 }
	CALL eosio_assert([0], [8685])
	
.LABEL $label$2
	*((($8 + [304]) + [32])) = [0]
	*($8 + [312]) = $1
	*($8 + [320]) = (int_64)-1
	*($8 + [328]) = (int_64)0
	$10 = *($0)
	*($8 + [304]) = $10
	*((($8 + [264]) + [32])) = [0]
	*($8 + [272]) = $2
	*($8 + [264]) = $10
	*($8 + [280]) = (int_64)-1
	*($8 + [288]) = (int_64)0
	CALL $108(($8 + [256]), ($8 + [304]), $1)
	CALL $108(($8 + [248]), ($8 + [264]), $2)
	$6 = ((((int_32)*(*($8 + [388]) + [8]) != (int_32)[1]) & ((int_32)$5 ^ (int_32)[1])) | $6)
	if ( $6 ){ goto $label$4 }
	if ( $7 ){ goto $label$4 }
	CALL require_auth($1)
	$6 = *($8 + [260])
	if ( ($6 == 0) ){ goto $label$6 }
	if ( ((int_64)*(($6 + [72])) == (int_64)$9) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $109($0, $1, $1)
	
.LABEL $label$5
	if ( ((int_64)$1 == (int_64)$2) ){ goto $label$3 }
	$6 = *($8 + [252])
	if ( ($6 == 0) ){ goto $label$7 }
	if ( ((int_64)*(($6 + [72])) == (int_64)$9) ){ goto $label$3 }
	
.LABEL $label$7
	CALL $109($0, $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( (($6 | ((int_32)$7 ^ (int_32)[1])) == 0) ){ goto $label$8 }
	CALL require_auth(*($11 + [32]))
	$6 = *($8 + [260])
	if ( ($6 == 0) ){ goto $label$10 }
	if ( ((int_64)*(($6 + [72])) == (int_64)$9) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $109($0, $1, *($0))
	
.LABEL $label$9
	if ( ((int_64)$1 == (int_64)$2) ){ goto $label$3 }
	$6 = *($8 + [252])
	if ( ($6 == 0) ){ goto $label$11 }
	if ( ((int_64)*(($6 + [72])) == (int_64)$9) ){ goto $label$3 }
	
.LABEL $label$11
	CALL $109($0, $2, *($0))
	goto $label$3 
	
.LABEL $label$8
	CALL require_auth($2)
	$6 = *($8 + [260])
	if ( ($6 == 0) ){ goto $label$13 }
	if ( ((int_64)*(($6 + [72])) == (int_64)$9) ){ goto $label$12 }
	
.LABEL $label$13
	CALL $109($0, $1, $2)
	
.LABEL $label$12
	if ( ((int_64)$1 == (int_64)$2) ){ goto $label$3 }
	$6 = *($8 + [252])
	if ( ($6 == 0) ){ goto $label$14 }
	if ( ((int_64)*(($6 + [72])) == (int_64)$9) ){ goto $label$3 }
	
.LABEL $label$14
	CALL $109($0, $2, $2)
	
.LABEL $label$3
	*(($8 + [240])) = [0]
	*($8 + [216]) = $2
	*($8 + [224]) = (int_64)-1
	*($8 + [232]) = (int_64)0
	*($8 + [208]) = *($0)
	CALL $133(($8 + [200]), ($8 + [208]), $1)
	if ( *($8 + [204]) ){ goto $label$15 }
	CALL eosio_assert([0], [10375])
	
.LABEL $label$15
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$17 }
	*($8 + [128]) = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	if ( CALL $97(($8 + [128])) ){ goto $label$16 }
	
.LABEL $label$17
	CALL eosio_assert([0], [8639])
	
.LABEL $label$16
	if ( ((int_64)*($3) > (int_64)0) ){ goto $label$18 }
	CALL eosio_assert([0], [10394])
	
.LABEL $label$18
	$6 = *($8 + [204])
	$6 = ( ($6 + [64]) ? ($6 + [16]) : $7 )
	$12 = *($6)
	$13 = *($6 + [8])
	*($8 + [192]) = $13
	*($8 + [184]) = $12
	CALL $112(($8 + [184]), $3)
	$6 = *($8 + [388])
	if ( ((int_64)*($8 + [192]) == (int_64)*(($6 + [128]))) ){ goto $label$19 }
	CALL eosio_assert([0], [11142])
	
.LABEL $label$19
	$9 = *($8 + [184])
	if ( (int_64)($9 == 0) ){ goto $label$20 }
	if ( ((int_64)$9 >= (int_64)*($6 + [120])) ){ goto $label$20 }
	CALL eosio_assert([0], [10425])
	
.LABEL $label$20
	$10 = CALL $37()
	$6 = *($8 + [204])
	$9 = *(( ($6 + [80]) ? ($6 + [48]) : $7 ))
	CALL prints([10483])
	CALL printi($10)
	CALL prints([10495])
	CALL printi($9)
	if ( ((int_64)$9 < (int_64)$10) ){ goto $label$21 }
	CALL eosio_assert([0], [10513])
	
.LABEL $label$21
	if ( (int_64)($9 == 0) ){ goto $label$22 }
	if ( ((int_64)$13 == (int_64)*(($3 + [8]))) ){ goto $label$23 }
	CALL eosio_assert([0], [11142])
	
.LABEL $label$23
	if ( ((int_64)$12 == (int_64)*($3)) ){ goto $label$22 }
	CALL eosio_assert([0], [10546])
	
.LABEL $label$22
	if ( ($4 == 0) ){ goto $label$29 }
	$14 = ((float_64)(CASTING float_64)(uint_32 $4) * (float_64)(float_64)1e6)
	if ( ((float_64)(float_64)|$14| < (float_64)(float_64)9223372036854775808) ){ goto $label$28 }
	$9 = (int_64)-9223372036854775808
	goto $label$27 
	
.LABEL $label$29
	$9 = (int_64)0
	if ( $5 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$9 = (Rounds 0)($14)
	
.LABEL $label$27
	$9 = ((int_64)$10 + (int_64)$9)
	if ( ($5 == 0) ){ goto $label$25 }
	
.LABEL $label$26
	if ( ((int_64)$2 == (int_64)$1) ){ goto $label$24 }
	$12 = *(($3 + [8]))
	*((($8 + [168]) + [8])) = $12
	$10 = *($3)
	*((($8 + [40]) + [8])) = $12
	*($8 + [168]) = $10
	*($8 + [40]) = $10
	CALL $143($0, $1, $2, ($8 + [40]), $9, $1, $7)
	if ( ($7 == 0) ){ goto $label$30 }
	*(($8 + [160])) = [0]
	*($8 + [136]) = $2
	*($8 + [144]) = (int_64)-1
	$9 = (int_64)0
	*($8 + [152]) = (int_64)0
	*($8 + [128]) = *($0)
	CALL $142(($8 + [120]), ($8 + [128]), $2)
	$7 = *($8 + [124])
	if ( ($7 == 0) ){ goto $label$31 }
	$9 = *($7 + [32])
	
.LABEL $label$31
	$10 = *(($3 + [8]))
	*((($8 + [104]) + [8])) = $10
	$1 = *($3)
	*((($8 + [8]) + [8])) = $10
	*($8 + [104]) = $1
	*($8 + [8]) = $1
	CALL $135($0, $2, $2, ($8 + [8]), $9, $2, [0])
	CALL $147(($8 + [152]))
	goto $label$24 
	
.LABEL $label$30
	*(($8 + [160])) = [0]
	*($8 + [136]) = $1
	*($8 + [144]) = (int_64)-1
	$9 = (int_64)0
	*($8 + [152]) = (int_64)0
	*($8 + [128]) = *($0)
	CALL $142(($8 + [120]), ($8 + [128]), $1)
	$7 = *($8 + [124])
	if ( ($7 == 0) ){ goto $label$32 }
	$9 = *($7 + [32])
	
.LABEL $label$32
	$10 = *(($3 + [8]))
	*((($8 + [88]) + [8])) = $10
	$2 = *($3)
	*((($8 + [24]) + [8])) = $10
	*($8 + [88]) = $2
	*($8 + [24]) = $2
	CALL $135($0, $1, $1, ($8 + [24]), $9, $1, [0])
	CALL $147(($8 + [152]))
	goto $label$24 
	
.LABEL $label$25
	if ( ((int_32)*(*($8 + [388]) + [8]) == (int_32)[1]) ){ goto $label$33 }
	CALL eosio_assert([0], [10594])
	
.LABEL $label$33
	$12 = *(($3 + [8]))
	*((($8 + [72]) + [8])) = $12
	$10 = *($3)
	*((($8 + [56]) + [8])) = $12
	*($8 + [72]) = $10
	*($8 + [56]) = $10
	CALL $143($0, $1, $2, ($8 + [56]), $9, $1, $7)
	
.LABEL $label$24
	CALL $136((($8 + [208]) + [24]))
	CALL $115((($8 + [264]) + [24]))
	CALL $115((($8 + [304]) + [24]))
	CALL $101((($8 + [344]) + [24]))
	CALL $137((($8 + [392]) + [24]))
	$global$0 = ($8 + [432])
}

int_32 .FUNC $78 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [72]) = [0]
	*($4 + [64]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [96]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $196(($4 + [16]), ($4 + [96]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4)
	$3 = *($8)
	*((($4 + [96]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [80])
	*($4 + [32]) = $0
	*($4 + [96]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$8 = *($4 + [72])
	$0 = *($4 + [64])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $2($2)
	
.LABEL $label$5
	$global$0 = ($4 + [112])
	return [1]
}

void .FUNC $79 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
	CALL $109($0, $1, *($0))
}

void .FUNC $241 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL prints($0)
	$0 = *($1)
	$2 = ($0 & [1])
	CALL prints_l(( *($1 + [8]) ? ($1 + [1]) : $2 ), ( *($1 + [4]) ? uint_32($0 >> [1]) : $2 ))
}

void .FUNC $259 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [68]) = $2
	*($3 + [64]) = $2
	*($3 + [72]) = ($2 + $4)
	*($3 + [56]) = (int_64)0
	CALL $94(($3 + [64]), ($3 + [56]))
	*(($2 = (($3 + [8]) + [8]))) = *($3 + [72])
	*($3 + [8]) = *($3 + [64])
	*(($4 = (($3 + [80]) + [8]))) = *($2)
	*($3 + [80]) = *($3 + [8])
	$2 = *($4)
	*((($3 + [96]) + [8])) = $2
	*(($3 + [48])) = $2
	*($3 + [24]) = $0
	*($3 + [32]) = $1
	$1 = *($3 + [80])
	*($3 + [40]) = $1
	*($3 + [96]) = $1
	$1 = *($3 + [56])
	CALL require_auth($0)
	CALL $109(($3 + [24]), $1, $0)
	$global$0 = ($3 + [112])
}

void .FUNC $258 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [68]) = $2
	*($3 + [64]) = $2
	*($3 + [72]) = ($2 + $4)
	*($3 + [56]) = (int_64)0
	CALL $94(($3 + [64]), ($3 + [56]))
	*(($2 = (($3 + [8]) + [8]))) = *($3 + [72])
	*($3 + [8]) = *($3 + [64])
	*(($4 = (($3 + [80]) + [8]))) = *($2)
	*($3 + [80]) = *($3 + [8])
	$2 = *($4)
	*((($3 + [96]) + [8])) = $2
	*(($3 + [48])) = $2
	*($3 + [24]) = $0
	*($3 + [32]) = $1
	$0 = *($3 + [80])
	*($3 + [40]) = $0
	*($3 + [96]) = $0
	CALL $61(($3 + [24]), *($3 + [56]))
	$global$0 = ($3 + [112])
}

int_32 .FUNC $312 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $8(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $313 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	$4 = ($1 + [4])
	$5 = *($4)
	
.LOOP $label$3:
	$6 = ($2 + [-24])
	$7 = *($6)
	*($6) = [0]
	*(($5 + [-24])) = $7
	*(($5 + [-8])) = *(($2 + [-8]))
	*(($5 + [-16])) = *(($2 + [-16]))
	$5 = (*($4) + [-24])
	*($4) = $5
	$2 = $6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$5 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $5
	*(($5 = ($1 + [4]))) = $3
	$2 = ($0 + [4])
	$6 = *($2)
	*($2) = *($1 + [8])
	*($1 + [8]) = $6
	$2 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $2
	*($1) = *($5)
}

int_32 .FUNC $314 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$1 = ($1 + [-24])
	*($3) = $1
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $10($4)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $10($1)
	
.LABEL $label$4
	return $0
}

void .FUNC $223 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [196]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$6 = *($1)
	CALL $112(($1 + [64]), *($3))
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [11863])
	
.LABEL $label$3
	$3 = $4
	$4 = ($3 + [-192])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-15])
	*($5 + [24]) = ($5 + [8])
	CALL $166($1, ($5 + [24]))
	CALL db_update_i64(*($1 + [200]), $2, $4, [177])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($5 + [32])
}

void .FUNC $316 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	CALL $122(*($1), ($3 + [8]))
	CALL $298(*($1), ($3 + [24]))
}

void .FUNC $268 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [68]) = $2
	*($3 + [64]) = $2
	*($3 + [72]) = ($2 + $4)
	*($3 + [56]) = (int_64)0
	CALL $94(($3 + [64]), ($3 + [56]))
	*(($2 = (($3 + [8]) + [8]))) = *($3 + [72])
	*($3 + [8]) = *($3 + [64])
	*(($4 = (($3 + [80]) + [8]))) = *($2)
	*($3 + [80]) = *($3 + [8])
	$2 = *($4)
	*((($3 + [96]) + [8])) = $2
	*(($3 + [48])) = $2
	*($3 + [24]) = $0
	*($3 + [32]) = $1
	$0 = *($3 + [80])
	*($3 + [40]) = $0
	*($3 + [96]) = $0
	CALL $73(($3 + [24]), *($3 + [56]))
	$global$0 = ($3 + [112])
}

void .FUNC $251 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [176])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [132]) = $2
	*($3 + [128]) = $2
	*($3 + [136]) = ($2 + $4)
	*($3 + [120]) = (int_64)0
	CALL $94(($3 + [128]), ($3 + [120]))
	*($3 + [112]) = (int_64)0
	CALL $94(($3 + [128]), ($3 + [112]))
	*($3 + [104]) = (int_64)0
	*($3 + [96]) = (int_64)0
	CALL $95(($3 + [128]), ($3 + [96]))
	$2 = *($3 + [132])
	if ( ((uint_32)(*($3 + [136]) - $2) > (uint_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [11710])
	$2 = *($3 + [132])
	
.LABEL $label$5
	CALL memcpy(($3 + [92]), $2, [4])
	$2 = (*($3 + [132]) + [4])
	*($3 + [132]) = $2
	$4 = (($3 + [128]) + [8])
	if ( ((int_32)*($4) != (int_32)$2) ){ goto $label$6 }
	CALL eosio_assert([0], [11710])
	$2 = *($3 + [132])
	
.LABEL $label$6
	CALL memcpy(($3 + [56]), $2, [1])
	*($3 + [132]) = (*($3 + [132]) + [1])
	$2 = *($3 + [56])
	*(($5 = (($3 + [40]) + [8]))) = *($4)
	*($3 + [40]) = *($3 + [128])
	*(($4 = (($3 + [144]) + [8]))) = *($5)
	*($3 + [144]) = *($3 + [40])
	$4 = *($4)
	*((($3 + [160]) + [8])) = $4
	*(($3 + [80])) = $4
	*($3 + [56]) = $0
	*($3 + [64]) = $1
	$0 = *($3 + [144])
	*($3 + [72]) = $0
	*($3 + [160]) = $0
	$0 = *((($3 + [96]) + [8]))
	*((($3 + [24]) + [8])) = $0
	*((($3 + [8]) + [8])) = $0
	$0 = *($3 + [96])
	*($3 + [24]) = $0
	*($3 + [8]) = $0
	CALL $47(($3 + [56]), *($3 + [120]), *($3 + [112]), ($3 + [8]), *($3 + [92]), ((int_32)$2 != (int_32)[0]))
	$global$0 = ($3 + [176])
}

void .FUNC $250 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	CALL eosio_assert([0], [11710])
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	CALL memcpy(($3 + [47]), $2, [1])
	*(($3 + [28])) = ($2 + [1])
	*(($3 + [32])) = ($2 + $4)
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [24]) = $2
	CALL $84(($3 + [8]), *($3 + [47]))
	$global$0 = ($3 + [48])
}

void .FUNC $253 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [68]) = $2
	*($3 + [64]) = $2
	*($3 + [72]) = ($2 + $4)
	*($3 + [56]) = (int_64)0
	CALL $94(($3 + [64]), ($3 + [56]))
	$2 = *($3 + [68])
	if ( ((uint_32)(*($3 + [72]) - $2) > (uint_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [11710])
	$2 = *($3 + [68])
	
.LABEL $label$5
	CALL memcpy(($3 + [52]), $2, [4])
	$2 = (*($3 + [68]) + [4])
	*($3 + [68]) = $2
	$4 = (($3 + [64]) + [8])
	if ( ((int_32)*($4) != (int_32)$2) ){ goto $label$6 }
	CALL eosio_assert([0], [11710])
	$2 = *($3 + [68])
	
.LABEL $label$6
	CALL memcpy(($3 + [16]), $2, [1])
	*($3 + [68]) = (*($3 + [68]) + [1])
	$2 = *($3 + [16])
	*(($5 = ($3 + [8]))) = *($4)
	*($3) = *($3 + [64])
	*(($4 = (($3 + [80]) + [8]))) = *($5)
	*($3 + [80]) = *($3)
	$4 = *($4)
	*((($3 + [96]) + [8])) = $4
	*(($3 + [40])) = $4
	*($3 + [16]) = $0
	*($3 + [24]) = $1
	$0 = *($3 + [80])
	*($3 + [32]) = $0
	*($3 + [96]) = $0
	CALL $87(($3 + [16]), *($3 + [56]), *($3 + [52]), ((int_32)$2 != (int_32)[0]))
	$global$0 = ($3 + [112])
}

void .FUNC $252 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*($3 + [52]) = $4
	*($3 + [48]) = $4
	*($3 + [56]) = ($4 + $5)
	*($3 + [40]) = (int_64)0
	CALL $94(($3 + [48]), ($3 + [40]))
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	$4 = [0]
	
.LOOP $label$4:
	*((($3 + [24]) + $4)) = [0]
	$4 = ($4 + [4])
	if ( ((int_32)$4 != (int_32)[12]) ){ goto $label$4 }
	CALL $148(($3 + [48]), ($3 + [24]))
	$4 = CALL $25(($3 + [8]), ($3 + [24]))
	CALL $53($4, *($3 + [40]), $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	CALL $10(*($4 + [8]))
	
.LABEL $label$5
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$6 }
	CALL $10(*($3 + [32]))
	
.LABEL $label$6
	$global$0 = ($3 + [64])
}

void .FUNC $255 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	CALL eosio_assert([0], [11710])
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	CALL memcpy($3, $2, [1])
	$5 = *($3)
	*(($3 + [20])) = ($2 + [1])
	*(($3 + [24])) = ($2 + $4)
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [16]) = $2
	CALL $69($3, ((int_32)$5 != (int_32)[0]))
	$global$0 = ($3 + [32])
}

void .FUNC $254 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [176])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [132]) = $2
	*($3 + [128]) = $2
	*($3 + [136]) = ($2 + $4)
	*($3 + [120]) = (int_64)0
	CALL $94(($3 + [128]), ($3 + [120]))
	*($3 + [112]) = (int_64)0
	CALL $94(($3 + [128]), ($3 + [112]))
	*($3 + [104]) = (int_64)0
	*($3 + [96]) = (int_64)0
	CALL $95(($3 + [128]), ($3 + [96]))
	$2 = *($3 + [132])
	if ( ((uint_32)(*($3 + [136]) - $2) > (uint_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [11710])
	$2 = *($3 + [132])
	
.LABEL $label$5
	CALL memcpy(($3 + [92]), $2, [4])
	$2 = (*($3 + [132]) + [4])
	*($3 + [132]) = $2
	$4 = ($3 + [136])
	if ( ((int_32)*($4) != (int_32)$2) ){ goto $label$6 }
	CALL eosio_assert([0], [11710])
	$2 = *($3 + [132])
	
.LABEL $label$6
	CALL memcpy(($3 + [56]), $2, [1])
	$2 = (*($3 + [132]) + [1])
	*($3 + [132]) = $2
	$5 = *($3 + [56])
	if ( ((int_32)*($4) != (int_32)$2) ){ goto $label$7 }
	CALL eosio_assert([0], [11710])
	$2 = *($3 + [132])
	
.LABEL $label$7
	CALL memcpy(($3 + [56]), $2, [1])
	$2 = (*($3 + [132]) + [1])
	*($3 + [132]) = $2
	$4 = *($3 + [56])
	$6 = (($3 + [128]) + [8])
	if ( ((int_32)*($6) != (int_32)$2) ){ goto $label$8 }
	CALL eosio_assert([0], [11710])
	$2 = *($3 + [132])
	
.LABEL $label$8
	CALL memcpy(($3 + [56]), $2, [1])
	*($3 + [132]) = (*($3 + [132]) + [1])
	$2 = *($3 + [56])
	*(($7 = (($3 + [40]) + [8]))) = *($6)
	*($3 + [40]) = *($3 + [128])
	*(($6 = (($3 + [144]) + [8]))) = *($7)
	*($3 + [144]) = *($3 + [40])
	$6 = *($6)
	*((($3 + [160]) + [8])) = $6
	*(($3 + [80])) = $6
	*($3 + [56]) = $0
	*($3 + [64]) = $1
	$0 = *($3 + [144])
	*($3 + [72]) = $0
	*($3 + [160]) = $0
	$0 = *((($3 + [96]) + [8]))
	*((($3 + [24]) + [8])) = $0
	*((($3 + [8]) + [8])) = $0
	$0 = *($3 + [96])
	*($3 + [24]) = $0
	*($3 + [8]) = $0
	CALL $75(($3 + [56]), *($3 + [120]), *($3 + [112]), ($3 + [8]), *($3 + [92]), ((int_32)($5 & [255]) != (int_32)[0]), ((int_32)($4 & [255]) != (int_32)[0]), ((int_32)$2 != (int_32)[0]))
	$global$0 = ($3 + [176])
}

void .FUNC $257 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [68]) = $2
	*($3 + [64]) = $2
	*($3 + [72]) = ($2 + $4)
	*($3 + [56]) = (int_64)0
	CALL $94(($3 + [64]), ($3 + [56]))
	$2 = *($3 + [68])
	if ( ((uint_32)(*($3 + [72]) - $2) > (uint_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [11710])
	$2 = *($3 + [68])
	
.LABEL $label$5
	CALL memcpy(($3 + [52]), $2, [4])
	*($3 + [68]) = (*($3 + [68]) + [4])
	*(($2 = ($3 + [8]))) = *((($3 + [64]) + [8]))
	*($3) = *($3 + [64])
	*(($4 = (($3 + [80]) + [8]))) = *($2)
	*($3 + [80]) = *($3)
	$2 = *($4)
	*((($3 + [96]) + [8])) = $2
	*(($3 + [40])) = $2
	*($3 + [16]) = $0
	*($3 + [24]) = $1
	$0 = *($3 + [80])
	*($3 + [32]) = $0
	*($3 + [96]) = $0
	CALL $51(($3 + [16]), *($3 + [56]), *($3 + [52]))
	$global$0 = ($3 + [112])
}

void .FUNC $256 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*(($3 + [20])) = $2
	*(($3 + [24])) = ($2 + $4)
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [16]) = $2
	CALL $93($3)
	$global$0 = ($3 + [32])
}

void .FUNC $98 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	if ( ((int_64)(uint_64)*(*($5) + [8]) >> (uint_64)(int_64)8) == (int_64)$2) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$5 = *(($4 + [-24]))
	if ( ((int_32)*($5 + [40]) == (int_32)$1) ){ goto $label$5 }
	CALL eosio_assert([0], [11636])
	
.LABEL $label$5
	*($0 + [4]) = $5
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-4157508551318700032, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	$5 = CALL $198($1, $5)
	if ( ((int_32)*($5 + [40]) == (int_32)$1) ){ goto $label$7 }
	CALL eosio_assert([0], [11636])
	
.LABEL $label$7
	*($0 + [4]) = $5
	goto $label$1 
	
.LABEL $label$6
	*($0 + [4]) = [0]
	
.LABEL $label$1
	*($0) = $1
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $122(*($1), *($0))
	CALL $122(*($1), *($0 + [4]))
	$2 = *($0 + [8])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11136])
	$1 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
}

void .FUNC $239 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [96]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12104])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12149])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$6 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$7:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$5 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	CALL eosio_assert([0], [12199])
	$4 = *($3)
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	$8 = $5
	
.LOOP $label$11:
	$9 = *($8)
	*($8) = [0]
	$7 = ($8 + [-24])
	$5 = *($7)
	*($7) = $9
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $10($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$9 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) != (int_32)$8) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$9 = ($5 + [-24])
	
.LABEL $label$9
	
.LOOP $label$13:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL $10($8)
	
.LABEL $label$14
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$8
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [100]))
}

void .FUNC $238 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12104])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12149])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	$5 = $4
	$6 = *($1 + [8])
	if ( ((int_64)*(*(($4 + [-24])) + [8]) == (int_64)$6) ){ goto $label$6 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$7:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$5 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9) + [8]) != (int_64)$6) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	CALL eosio_assert([0], [12199])
	$4 = *($3)
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	$8 = $5
	
.LOOP $label$11:
	$9 = *($8)
	*($8) = [0]
	$7 = ($8 + [-24])
	$5 = *($7)
	*($7) = $9
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $10($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$9 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) != (int_32)$8) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$9 = ($5 + [-24])
	
.LABEL $label$9
	
.LOOP $label$13:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL $10($8)
	
.LABEL $label$14
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$8
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [68]))
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11710])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	*(($2 = ($0 + [4]))) = (*($2) + [8])
	return $0
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11710])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11710])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $4, [8])
	*($1 + [8]) = *($2 + [8])
	*($3) = (*($3) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = (($2 + [16]) + [8]))) = *(($1 + [16]))
	*($2 + [16]) = *($1 + [8])
	$4 = *($1)
	*((($2 + [32]) + [8])) = *($3)
	*($2 + [32]) = *($2 + [16])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$5 = *((($2 + [32]) + [8]))
	*((($2 + [48]) + [8])) = $5
	*(($2 + [8])) = $5
	$5 = *($2 + [32])
	*($2) = $5
	*($2 + [48]) = $5
	CALL void $0((int_32 $4), (int_64 $2), (int_32 $1))
	$global$0 = ($2 + [64])
}

int_32 .FUNC $97 (int_32 $0)
{
	int_64 $1
	int_64 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	$0 = [0]
	
.LOOP $label$2:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$1 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $2
	$3 = $0
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$1 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $4 ){ goto $label$5 }
	
.LABEL $label$3
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$2 }
	return [1]
	
.LABEL $label$1
	return [0]
}

void .FUNC $90 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$5 = ($global$0 - [256])
	$global$0 = $5
	CALL prints([9002])
	if ( ((int_64)$1 != (int_64)$2) ){ goto $label$1 }
	CALL eosio_assert([0], [9012])
	
.LABEL $label$1
	CALL require_auth($1)
	if ( CALL is_account($2) ){ goto $label$2 }
	CALL eosio_assert([0], [9036])
	
.LABEL $label$2
	$6 = *($3 + [8])
	*(($5 + [248])) = [0]
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	*($5 + [224]) = $7)
	*($5 + [232]) = (int_64)-1
	*($5 + [240]) = (int_64)0
	*($5 + [216]) = *($0)
	$8 = CALL $118(($5 + [216]), $7, [9062])
	CALL require_recipient($1)
	CALL require_recipient($2)
	$9 = *($3)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$4 }
	*($5 + [176]) = $7
	if ( CALL $97(($5 + [176])) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [8639])
	
.LABEL $label$3
	if ( ((int_64)$9 > (int_64)0) ){ goto $label$5 }
	CALL eosio_assert([0], [9081])
	
.LABEL $label$5
	if ( ((int_64)$6 == (int_64)*($8 + [8])) ){ goto $label$6 }
	CALL eosio_assert([0], [8685])
	
.LABEL $label$6
	if ( ((*($4) & [1]) == 0) ){ goto $label$7 }
	if ( (*($4 + [4]) <= [257]) ){ goto $label$7 }
	CALL eosio_assert([0], [8536])
	
.LABEL $label$7
	*((($5 + [176]) + [32])) = [0]
	*($5 + [184]) = $1
	*($5 + [192]) = (int_64)-1
	*($5 + [200]) = (int_64)0
	$7 = *($0)
	*($5 + [176]) = $7
	*((($5 + [136]) + [32])) = [0]
	*($5 + [144]) = $2
	*($5 + [136]) = $7
	*($5 + [152]) = (int_64)-1
	*($5 + [160]) = (int_64)0
	CALL $108(($5 + [128]), ($5 + [176]), $1)
	CALL $108(($5 + [120]), ($5 + [136]), $2)
	$4 = *($5 + [132])
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((int_64)*(($4 + [72])) == (int_64)$6) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $109($0, $1, $1)
	
.LABEL $label$8
	if ( ((int_64)$1 == (int_64)$2) ){ goto $label$10 }
	$4 = *($5 + [124])
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_64)*(($4 + [72])) == (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $109($0, $2, $1)
	
.LABEL $label$10
	CALL $110(($5 + [88]), $0, $1)
	CALL $111(($5 + [72]), $0, $1, $1, [0])
	*(($4 = (($5 + [104]) + [8]))) = *((($5 + [88]) + [8]))
	*($5 + [104]) = *($5 + [88])
	CALL $112(($5 + [104]), ($5 + [72]))
	if ( ((int_64)$6 == (int_64)*($4)) ){ goto $label$12 }
	CALL eosio_assert([0], [11142])
	
.LABEL $label$12
	if ( ((int_64)$9 <= (int_64)*($5 + [104])) ){ goto $label$13 }
	CALL eosio_assert([0], [8788])
	
.LABEL $label$13
	$4 = ($3 + [8])
	$9 = *($4)
	*((($5 + [56]) + [8])) = $9
	$6 = *($3)
	*((($5 + [24]) + [8])) = $9
	*($5 + [56]) = $6
	*($5 + [24]) = $6
	CALL $113($0, $1, ($5 + [24]), (int_64)0)
	$9 = *($4)
	*((($5 + [40]) + [8])) = $9
	$6 = *($3)
	*((($5 + [8]) + [8])) = $9
	*($5 + [8]) = $6
	*($5 + [40]) = $6
	CALL $105($0, $2, ($5 + [8]), $1)
	CALL $115((($5 + [136]) + [24]))
	CALL $115((($5 + [176]) + [24]))
	CALL $101((($5 + [216]) + [24]))
	$global$0 = ($5 + [256])
}

int_32 .FUNC $91 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [96])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	$3 = [32]
	
.LOOP $label$4:
	*((($4 + [72]) + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[44]) ){ goto $label$4 }
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $128(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $129(($4 + [144]), ($4 + [72]))
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL $2($2)
	
.LABEL $label$5
	if ( ((*(($4 + [104])) & [1]) == 0) ){ goto $label$6 }
	CALL $10(*(($4 + [112])))
	
.LABEL $label$6
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $92 (int_32 $0, float_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [60]) = $1
	CALL require_auth(*($0))
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$3 = *($0)
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	CALL $132(($2 + [8]), ($2 + [16]), (int_64)0)
	if ( *($2 + [12]) ){ goto $label$1 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$1
	$3 = *($0)
	$0 = *($2 + [12])
	*($2) = ($2 + [60])
	if ( $0 ){ goto $label$2 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$2
	CALL $184(($2 + [16]), $0, $3, $2)
	CALL $137(($2 + [40]))
	$global$0 = ($2 + [64])
}

void .FUNC $93 (int_32 $0)
{
	int_32 $1
	int_64 $2
	$1 = ($global$0 - [80])
	$global$0 = $1
	CALL require_auth(*($0))
	*(($1 + [72])) = [0]
	*($1 + [56]) = (int_64)-1
	*($1 + [64]) = (int_64)0
	$2 = *($0)
	*($1 + [40]) = $2
	*($1 + [48]) = $2
	CALL $168(($1 + [32]), ($1 + [40]), (int_64)0)
	if ( (*($1 + [36]) == 0) ){ goto $label$1 }
	
.LOOP $label$2:
	*($1 + [24]) = *($1 + [32])
	*($1 + [8]) = *($1 + [24])
	CALL $169(($1 + [16]), ($1 + [40]), ($1 + [8]))
	CALL $170(($1 + [32]))
	if ( *($1 + [36]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL $171(($1 + [64]))
	$global$0 = ($1 + [80])
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [8]) ){ goto $label$3 }
	CALL eosio_assert([0], [11201])
	goto $label$2 
	
.LABEL $label$3
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = *($1)
	
.LOOP $label$4:
	$1 = (($3 + $2) + [-1])
	if ( (((*($1) + [-65]) & [255]) <= [26]) ){ goto $label$5 }
	CALL eosio_assert([0], [11246])
	
.LABEL $label$5
	$4 = ((int_64)*($0) << (int_64)8)
	*($0) = $4
	*($0) = ((int_64)$4 | (int_64)*($1))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$4 }
	
.LABEL $label$1
	return $0
}

void .FUNC $139 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [196]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$6 = *($3)
	*($1 + [8]) = *($6)
	$7 = *($1)
	if ( *($6) ){ goto $label$3 }
	*($1 + [32]) = *(*($3 + [4]))
	
.LABEL $label$3
	$3 = $4
	$4 = ($3 + [-192])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-15])
	*($5 + [24]) = ($5 + [8])
	CALL $166($1, ($5 + [24]))
	CALL db_update_i64(*($1 + [200]), $2, $4, [177])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($5 + [32])
}

void .FUNC $269 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*(($3 + [20])) = $2
	*(($3 + [24])) = ($2 + $4)
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [16]) = $2
	CALL $81($3)
	$global$0 = ($3 + [32])
}

void .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $94(*($1), *($0))
	$0 = *($0)
	CALL $94(*($1), ($0 + [8]))
	CALL $95(*($1), ($0 + [16]))
	$2 = ($0 + [32])
	$0 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $0) > (uint_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [11710])
	$0 = *(($1 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $0, [4])
	*(($1 = ($1 + [4]))) = (*($1) + [4])
}

void .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = (($2 + [16]) + [8]))) = *(($1 + [24]))
	*($2 + [16]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$6 = *($1 + [32])
	*((($2 + [32]) + [8])) = *($3)
	*($2 + [32]) = *($2 + [16])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$7 = *((($2 + [32]) + [8]))
	*((($2 + [48]) + [8])) = $7
	*(($2 + [8])) = $7
	$7 = *($2 + [32])
	*($2) = $7
	*($2 + [48]) = $7
	CALL void $0((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $1))
	$global$0 = ($2 + [64])
}

void .FUNC $132 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	if ( ((int_64)*(*($5)) == (int_64)$2) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$5 = *(($4 + [-24]))
	if ( ((int_32)*($5 + [196]) == (int_32)$1) ){ goto $label$5 }
	CALL eosio_assert([0], [11636])
	
.LABEL $label$5
	*($0 + [4]) = $5
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-4157661234933819008, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	$5 = CALL $208($1, $5)
	if ( ((int_32)*($5 + [196]) == (int_32)$1) ){ goto $label$7 }
	CALL eosio_assert([0], [11636])
	
.LABEL $label$7
	*($0 + [4]) = $5
	goto $label$1 
	
.LABEL $label$6
	*($0 + [4]) = [0]
	
.LABEL $label$1
	*($0) = $1
}

void .FUNC $133 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	if ( ((int_64)*(*($5)) == (int_64)$2) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$5 = *(($4 + [-24]))
	if ( ((int_32)*($5 + [96]) == (int_32)$1) ){ goto $label$5 }
	CALL eosio_assert([0], [11636])
	
.LABEL $label$5
	*($0 + [4]) = $5
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-4157661228816138240, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	$5 = CALL $209($1, $5)
	if ( ((int_32)*($5 + [96]) == (int_32)$1) ){ goto $label$7 }
	CALL eosio_assert([0], [11636])
	
.LABEL $label$7
	*($0 + [4]) = $5
	goto $label$1 
	
.LABEL $label$6
	*($0 + [4]) = [0]
	
.LABEL $label$1
	*($0) = $1
}

int_32 .FUNC $134 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL $119(($3 + [8]), $0, $1)
	$0 = *($3 + [12])
	if ( $0 ){ goto $label$1 }
	CALL eosio_assert([0], $2)
	$0 = *($3 + [12])
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $135 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4, int_64 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$7 = ($global$0 - [352])
	$global$0 = $7
	*($7 + [296]) = $2
	*($7 + [304]) = $1
	*($7 + [288]) = $4
	*($7 + [287]) = $6
	$8 = CALL $121(($7 + [264]), (int_64)0, *($3 + [8]))
	*((($7 + [224]) + [32])) = [0]
	*($7 + [232]) = $2
	*($7 + [240]) = (int_64)-1
	*($7 + [248]) = (int_64)0
	*($7 + [224]) = *($0)
	CALL $133(($7 + [216]), ($7 + [224]), $1)
	*((($7 + [176]) + [32])) = [0]
	*($7 + [184]) = $1
	*($7 + [192]) = (int_64)-1
	*($7 + [200]) = (int_64)0
	*($7 + [176]) = *($0)
	CALL $142(($7 + [168]), ($7 + [176]), $2)
	*((($7 + [128]) + [32])) = [0]
	*($7 + [144]) = (int_64)-1
	*($7 + [152]) = (int_64)0
	$1 = *($0)
	*($7 + [128]) = $1
	*($7 + [136]) = $1
	CALL $132(($7 + [120]), ($7 + [128]), (int_64)0)
	if ( *($7 + [124]) ){ goto $label$1 }
	CALL eosio_assert([0], [9148])
	
.LABEL $label$1
	*($7 + [112]) = CALL $37()
	*($7 + [104]) = (int_64)0
	if ( (*($7 + [172]) == 0) ){ goto $label$3 }
	if ( *($7 + [220]) ){ goto $label$4 }
	CALL eosio_assert([0], [10914])
	
.LABEL $label$4
	$6 = *($7 + [172])
	*($7 + [80]) = $3
	*($7 + [76]) = ($7 + [288])
	*($7 + [72]) = ($7 + [287])
	if ( $6 ){ goto $label$5 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$5
	CALL $210(($7 + [176]), $6, ($7 + [72]))
	$6 = *($7 + [220])
	*($7 + [76]) = $3
	*($7 + [72]) = ($7 + [287])
	*($7 + [80]) = ($7 + [288])
	*($7 + [84]) = ($7 + [104])
	*($7 + [88]) = ($7 + [112])
	if ( $6 ){ goto $label$6 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$6
	CALL $211(($7 + [224]), $6, ($7 + [72]))
	goto $label$2 
	
.LABEL $label$3
	*($7 + [88]) = $3
	*($7 + [92]) = $8
	*($7 + [76]) = ($7 + [296])
	*($7 + [72]) = ($7 + [304])
	*($7 + [80]) = ($7 + [287])
	*($7 + [84]) = ($7 + [288])
	*($7 + [344]) = $5
	if ( ((int_64)CALL current_receiver() == (int_64)*($7 + [176])) ){ goto $label$7 }
	CALL eosio_assert([0], [11715])
	
.LABEL $label$7
	*($7 + [324]) = ($7 + [72])
	*($7 + [320]) = ($7 + [176])
	*($7 + [328]) = ($7 + [344])
	*(($6 = CALL $8([80])) + [8]) = (int_64)0
	*($6) = (int_64)0
	*($6 + [16]) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = (int_64)0
	*($6 + [40]) = (int_64)0
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = (int_64)0
	*($6 + [64]) = ($7 + [176])
	CALL $212(($7 + [320]), $6)
	*($7 + [336]) = $6
	$1 = *($6 + [8])
	*($7 + [320]) = $1
	$9 = *($6 + [68])
	*($7 + [316]) = $9
	$10 = ($7 + [204])
	$11 = *($10)
	if ( ((uint_32)$11 >= (uint_32)*(($7 + [208]))) ){ goto $label$9 }
	*($11 + [8]) = $1
	*($11 + [16]) = $9
	*($7 + [336]) = [0]
	*($11) = $6
	*($10) = ($11 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $213(($7 + [200]), ($7 + [336]), ($7 + [320]), ($7 + [316]))
	
.LABEL $label$8
	$6 = *($7 + [336])
	*($7 + [336]) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $10($6)
	
.LABEL $label$10
	*($7 + [80]) = $8
	*($7 + [92]) = $3
	*($7 + [76]) = ($7 + [296])
	*($7 + [72]) = ($7 + [304])
	*($7 + [84]) = ($7 + [287])
	*($7 + [88]) = ($7 + [104])
	*($7 + [96]) = ($7 + [288])
	*($7 + [100]) = ($7 + [112])
	*($7 + [344]) = $5
	if ( ((int_64)CALL current_receiver() == (int_64)*($7 + [224])) ){ goto $label$11 }
	CALL eosio_assert([0], [11715])
	
.LABEL $label$11
	*($7 + [324]) = ($7 + [72])
	*($7 + [320]) = ($7 + [224])
	*($7 + [328]) = ($7 + [344])
	*(($6 = CALL $8([112])) + [8]) = (int_64)0
	*($6) = (int_64)0
	*($6 + [16]) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = (int_64)0
	*($6 + [40]) = (int_64)0
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = (int_64)0
	*($6 + [64]) = (int_64)0
	*($6 + [72]) = (int_64)0
	*($6 + [80]) = (int_64)0
	*($6 + [88]) = (int_64)0
	*($6 + [96]) = ($7 + [224])
	CALL $214(($7 + [320]), $6)
	*($7 + [336]) = $6
	$1 = *($6)
	*($7 + [320]) = $1
	$11 = *($6 + [100])
	*($7 + [316]) = $11
	$9 = ($7 + [252])
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)*(($7 + [256]))) ){ goto $label$13 }
	*($8 + [8]) = $1
	*($8 + [16]) = $11
	*($7 + [336]) = [0]
	*($8) = $6
	*($9) = ($8 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $215(($7 + [248]), ($7 + [336]), ($7 + [320]), ($7 + [316]))
	
.LABEL $label$12
	$6 = *($7 + [336])
	*($7 + [336]) = [0]
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $10($6)
	
.LABEL $label$14
	$1 = *($0)
	$6 = *($7 + [124])
	if ( $6 ){ goto $label$15 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$15
	CALL $216(($7 + [128]), $6, $1)
	
.LABEL $label$2
	$1 = *($0)
	$6 = *($7 + [124])
	*($7 + [72]) = $3
	if ( $6 ){ goto $label$16 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$16
	CALL $217(($7 + [128]), $6, $1, ($7 + [72]))
	if ( (*($7 + [287]) == 0) ){ goto $label$18 }
	$2 = *(($3 + [8]))
	*((($7 + [56]) + [8])) = $2
	$1 = *($3)
	*((($7 + [24]) + [8])) = $2
	*($7 + [56]) = $1
	*($7 + [24]) = $1
	CALL $218($0, *($7 + [296]), ($7 + [24]), $1)
	goto $label$17 
	
.LABEL $label$18
	$2 = *(($3 + [8]))
	*((($7 + [40]) + [8])) = $2
	$1 = *($3)
	*((($7 + [8]) + [8])) = $2
	*($7 + [40]) = $1
	*($7 + [8]) = $1
	CALL $218($0, *($7 + [304]), ($7 + [8]), $1)
	
.LABEL $label$17
	CALL $137((($7 + [128]) + [24]))
	CALL $147((($7 + [176]) + [24]))
	CALL $136((($7 + [224]) + [24]))
	$global$0 = ($7 + [352])
}

int_32 .FUNC $136 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $10($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $10($2)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $137 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $10($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $10($2)
	
.LABEL $label$1
	return $0
}

void .FUNC $260 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [144])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [100]) = $2
	*($3 + [96]) = $2
	*($3 + [104]) = ($2 + $4)
	*($3 + [88]) = (int_64)0
	*($3 + [80]) = (int_64)0
	CALL $95(($3 + [96]), ($3 + [80]))
	*(($2 = (($3 + [32]) + [8]))) = *($3 + [104])
	*($3 + [32]) = *($3 + [96])
	*(($4 = (($3 + [112]) + [8]))) = *($2)
	*($3 + [112]) = *($3 + [32])
	$2 = *($4)
	*((($3 + [128]) + [8])) = $2
	*(($3 + [72])) = $2
	*($3 + [48]) = $0
	*($3 + [56]) = $1
	$0 = *($3 + [112])
	*($3 + [64]) = $0
	*($3 + [128]) = $0
	$0 = *($3 + [88])
	*((($3 + [16]) + [8])) = $0
	*(($3 + [8])) = $0
	$0 = *($3 + [80])
	*($3) = $0
	*($3 + [16]) = $0
	CALL $55(($3 + [48]), $3)
	$global$0 = ($3 + [144])
}

void .FUNC $323 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $122(*($1), *($0 + [8]))
	CALL $122(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [20])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $122(*($1), *($0 + [24]))
	$2 = *($0 + [28])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0 + [32])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [11136])
	$1 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($1, $3, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
}

void .FUNC $261 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ($4 <= [512]) ){ goto $label$4 }
	$2 = CALL $1($4)
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	$5 = ($3 + [44])
	$6 = $4
	goto $label$2 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $4)
	$6 = ($2 + $4)
	$5 = ($3 + [44])
	if ( ((uint_32)$4 > (uint_32)[3]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [11710])
	
.LABEL $label$1
	CALL memcpy($5, $2, [4])
	*(($3 + [28])) = ($2 + [4])
	*(($3 + [32])) = $6
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [24]) = $2
	CALL $68(($3 + [8]), *($3 + [44]))
	$global$0 = ($3 + [48])
}

void .FUNC $213 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $312(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $313($0, $9)
	CALL $314($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $262 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ($4 <= [512]) ){ goto $label$4 }
	$2 = CALL $1($4)
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	$5 = ($3 + [44])
	$6 = $4
	goto $label$2 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $4)
	$6 = ($2 + $4)
	$5 = ($3 + [44])
	if ( ((uint_32)$4 > (uint_32)[3]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [11710])
	
.LABEL $label$1
	CALL memcpy($5, $2, [4])
	*(($3 + [28])) = ($2 + [4])
	*(($3 + [32])) = $6
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [24]) = $2
	CALL $80(($3 + [8]), *($3 + [44]))
	$global$0 = ($3 + [48])
}

int_32 .FUNC $283 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = *($1)
	$2 = *($1 + [4])
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$1 = *($0)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$1 = (((($4 + [-16]) & [-16]) + $1) + [16])
	
.LABEL $label$2
	*($0) = $1
	return $0
}

int_32 .FUNC $303 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $8(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $302 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$1 = ($1 + [-24])
	*($3) = $1
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $10($4)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $10($1)
	
.LABEL $label$4
	return $0
}

void .FUNC $301 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	$4 = ($1 + [4])
	$5 = *($4)
	
.LOOP $label$3:
	$6 = ($2 + [-24])
	$7 = *($6)
	*($6) = [0]
	*(($5 + [-24])) = $7
	*(($5 + [-8])) = *(($2 + [-8]))
	*(($5 + [-16])) = *(($2 + [-16]))
	$5 = (*($4) + [-24])
	*($4) = $5
	$2 = $6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$5 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $5
	*(($5 = ($1 + [4]))) = $3
	$2 = ($0 + [4])
	$6 = *($2)
	*($2) = *($1 + [8])
	*($1 + [8]) = $6
	$2 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $2
	*($1) = *($5)
}

void .FUNC $263 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ($4 <= [512]) ){ goto $label$4 }
	$2 = CALL $1($4)
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	$5 = ($3 + [44])
	$6 = $4
	goto $label$2 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $4)
	$6 = ($2 + $4)
	$5 = ($3 + [44])
	if ( ((uint_32)$4 > (uint_32)[3]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [11710])
	
.LABEL $label$1
	CALL memcpy($5, $2, [4])
	*(($3 + [28])) = ($2 + [4])
	*(($3 + [32])) = $6
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [24]) = $2
	CALL $57(($3 + [8]), *($3 + [44]))
	$global$0 = ($3 + [48])
}

int_32 .FUNC $307 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $8(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $306 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $94(*($1), *($0))
	CALL $94(*($1), *($0 + [4]))
	CALL $95(*($1), *($0 + [8]))
	CALL $95(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11710])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [20])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11710])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $95(*($1), *($0 + [24]))
	$2 = *($0 + [28])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11710])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0 + [32])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [11710])
	$1 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
}

int_32 .FUNC $305 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$1 = ($1 + [-24])
	*($3) = $1
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $10($4)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $10($1)
	
.LABEL $label$4
	return $0
}

void .FUNC $304 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	$4 = ($1 + [4])
	$5 = *($4)
	
.LOOP $label$3:
	$6 = ($2 + [-24])
	$7 = *($6)
	*($6) = [0]
	*(($5 + [-24])) = $7
	*(($5 + [-8])) = *(($2 + [-8]))
	*(($5 + [-16])) = *(($2 + [-16]))
	$5 = (*($4) + [-24])
	*($4) = $5
	$2 = $6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$5 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $5
	*(($5 = ($1 + [4]))) = $3
	$2 = ($0 + [4])
	$6 = *($2)
	*($2) = *($1 + [8])
	*($1 + [8]) = $6
	$2 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $2
	*($1) = *($5)
}

int_32 .FUNC $309 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$1 = ($1 + [-24])
	*($3) = $1
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $10($4)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $10($1)
	
.LABEL $label$4
	return $0
}

void .FUNC $308 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	$4 = ($1 + [4])
	$5 = *($4)
	
.LOOP $label$3:
	$6 = ($2 + [-24])
	$7 = *($6)
	*($6) = [0]
	*(($5 + [-24])) = $7
	*(($5 + [-8])) = *(($2 + [-8]))
	*(($5 + [-16])) = *(($2 + [-16]))
	$5 = (*($4) + [-24])
	*($4) = $5
	$2 = $6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$5 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $5
	*(($5 = ($1 + [4]))) = $3
	$2 = ($0 + [4])
	$6 = *($2)
	*($2) = *($1 + [8])
	*($1 + [8]) = $6
	$2 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $2
	*($1) = *($5)
}

void .FUNC $310 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	CALL $122(*($1), *($0 + [8]))
	$2 = *($0 + [12])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $122(*($1), *($0 + [16]))
	$2 = *($0 + [20])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	CALL $122(*($1), *($0 + [24]))
	CALL $122(*($1), *($0 + [28]))
	$2 = *($0 + [32])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [36])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$6 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$6
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [40])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$7 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$7
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [44])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$8 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$8
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [48])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$9 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$9
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	CALL $122(*($1), *($0 + [52]))
	$2 = *($0 + [56])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$10 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$10
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	CALL $122(*($1), *($0 + [60]))
	CALL $122(*($1), *($0 + [64]))
	$2 = *($0 + [68])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$11
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [72])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$12 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$12
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [76])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$13 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$13
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$3 = *($0 + [80])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[3]) ){ goto $label$14 }
	CALL eosio_assert([0], [11136])
	$1 = *(($0 + [4]))
	
.LABEL $label$14
	CALL memcpy($1, $3, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
}

void .FUNC $265 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [144])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [100]) = $2
	*($3 + [96]) = $2
	*($3 + [104]) = ($2 + $4)
	*($3 + [88]) = (int_64)0
	*($3 + [80]) = (int_64)0
	CALL $95(($3 + [96]), ($3 + [80]))
	*(($2 = (($3 + [32]) + [8]))) = *($3 + [104])
	*($3 + [32]) = *($3 + [96])
	*(($4 = (($3 + [112]) + [8]))) = *($2)
	*($3 + [112]) = *($3 + [32])
	$2 = *($4)
	*((($3 + [128]) + [8])) = $2
	*(($3 + [72])) = $2
	*($3 + [48]) = $0
	*($3 + [56]) = $1
	$0 = *($3 + [112])
	*($3 + [64]) = $0
	*($3 + [128]) = $0
	$0 = *($3 + [88])
	*((($3 + [16]) + [8])) = $0
	*(($3 + [8])) = $0
	$0 = *($3 + [80])
	*($3) = $0
	*($3 + [16]) = $0
	CALL $62(($3 + [48]), $3)
	$global$0 = ($3 + [144])
}

int_32 .FUNC $208 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$3 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$7 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	$6 = [0]
	goto $label$5 
	
.LABEL $label$7
	CALL eosio_assert([0], [11687])
	
.LABEL $label$6
	$5 = CALL $1($4)
	$6 = [1]
	
.LABEL $label$5
	CALL db_get_i64($1, $5, $4)
	*($3 + [36]) = $5
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + $4)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $8([208])
	$2 = CALL $286($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1)
	*($3 + [8]) = $7
	$8 = *($1 + [200])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$4 = *($9)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($4 + [8]) = $7
	*($4 + [16]) = $8
	*($3 + [24]) = [0]
	*($4) = $1
	*($9) = ($4 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $167(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $2($5)
	
.LABEL $label$8
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $10($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

int_32 .FUNC $209 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$3 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$7 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$5 
	
.LABEL $label$7
	CALL eosio_assert([0], [11687])
	
.LABEL $label$6
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $8([112])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [56])
	*($3 + [64]) = ($5 + [64])
	*($3 + [68]) = ($5 + [80])
	*($3 + [72]) = ($5 + [88])
	CALL $306(($3 + [40]), ($3 + [32]))
	*($5 + [100]) = $1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $215(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $2($4)
	
.LABEL $label$8
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $10($1)
	
.LABEL $label$1
	$global$0 = ($3 + [80])
	return $5
}

int_32 .FUNC $202 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$3 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$7 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$5 
	
.LABEL $label$7
	CALL eosio_assert([0], [11687])
	
.LABEL $label$6
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $8([96])) + [16]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [48])
	*($3 + [52]) = ($5 + [56])
	*($3 + [56]) = ($5 + [64])
	CALL $299(($3 + [32]), ($3 + [24]))
	*($5 + [84]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [32]) = $7
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $175(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $2($4)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $10($1)
	
.LABEL $label$1
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $203 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [80]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$2 = *($2)
	*($1 + [64]) = *($2)
	*(($1 + [72])) = *(($2 + [8]))
	$5 = *($1)
	$2 = $3
	$3 = ($2 + [-80])
	$global$0 = $3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($2 + [-4])
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = ($1 + [8])
	*($4 + [32]) = $1
	*($4 + [40]) = ($1 + [16])
	*($4 + [44]) = ($1 + [32])
	*($4 + [48]) = ($1 + [48])
	*($4 + [52]) = ($1 + [56])
	*($4 + [56]) = ($1 + [64])
	CALL $174(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [84]), (int_64)0, $3, [76])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($4 + [64])
}

void .FUNC $200 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [32]
	CALL $296($2, ($1 + [32]))
	CALL $277($0, *($2))
	$3 = *($0)
	*($2) = $3
	*($2 + [4]) = $3
	*($2 + [8]) = *($0 + [4])
	*($2 + [16]) = $2
	*($2 + [24]) = $1
	CALL $297(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [32])
}

void .FUNC $201 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $276($2, $1)
	CALL $277($0, *($2))
	$3 = *($0)
	*($2) = $3
	*($2 + [4]) = $3
	*($2 + [8]) = *($0 + [4])
	CALL $278($2, $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $206 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( $2 ){ goto $label$1 }
	CALL eosio_assert([0], [12074])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	$3 = [0]
	$2 = CALL db_next_i64(*($2 + [20]), ($1 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $205(*($0), $2)
	
.LABEL $label$2
	*(($0 + [4])) = $3
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $207 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12104])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12149])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	$5 = $4
	$6 = *($1 + [8])
	if ( (uint_64)(((int_64)*(*(($4 + [-24])) + [8]) ^ (int_64)$6) <= (int_64)256) ){ goto $label$6 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$7:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$5 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((uint_64)((int_64)*(*($9) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	CALL eosio_assert([0], [12199])
	$4 = *($3)
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	$8 = $5
	
.LOOP $label$11:
	$9 = *($8)
	*($8) = [0]
	$7 = ($8 + [-24])
	$5 = *($7)
	*($7) = $9
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $10($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$9 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) != (int_32)$8) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$9 = ($5 + [-24])
	
.LABEL $label$9
	
.LOOP $label$13:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL $10($8)
	
.LABEL $label$14
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$8
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $204 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$6 = *($1 + [8])
	CALL $112($1, *($3))
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)$6) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)) ){ goto $label$3 }
	CALL eosio_assert([0], [11863])
	
.LABEL $label$3
	$3 = $4
	$4 = ($3 + [-16])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = $3
	CALL $122($5, $1)
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

int_32 .FUNC $205 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$3 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$7 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$5 
	
.LABEL $label$7
	CALL eosio_assert([0], [11687])
	
.LABEL $label$6
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL $8([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL $95(($3 + [32]), $5)
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$7 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [16]) = $7)
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $123(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $2($4)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $10($1)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $282 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = (*($0 + [4]) - $2)
	$4 = (*($1 + [4]) - $3)
	*($1 + [4]) = $4
	if ( ((int_32)$3 <= (int_32)[0]) ){ goto $label$1 }
	CALL memcpy($4, $2, $3)
	$4 = *(($1 + [4]))
	
.LABEL $label$1
	$3 = *($0)
	*($0) = $4
	*(($4 = ($1 + [4]))) = $3
	$3 = ($0 + [4])
	$2 = *($3)
	*($3) = *($1 + [8])
	*($1 + [8]) = $2
	$3 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $3
	*($1) = *($4)
}

void .FUNC $181 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [196]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	*($1 + [100]) = *(*($3))
	$6 = *($1)
	$3 = $4
	$4 = ($3 + [-192])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-15])
	*($5 + [24]) = ($5 + [8])
	CALL $166($1, ($5 + [24]))
	CALL db_update_i64(*($1 + [200]), $2, $4, [177])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [32])
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $25(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $25(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $10(*($6 + [8]))
	
.LABEL $label$2
	if ( ((*($1) & [1]) == 0) ){ goto $label$3 }
	CALL $10(*($1 + [8]))
	
.LABEL $label$3
	$global$0 = ($2 + [96])
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	CALL $94(*($1), *($0))
	$0 = *($0)
	CALL $94(*($1), ($0 + [8]))
	CALL $95(*($1), ($0 + [16]))
	CALL $148(*($1), ($0 + [32]))
}

int_32 .FUNC $286 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($0 + [80]) = (int_64)0
	*($0 + [120]) = (int_64)0
	*($0 + [144]) = (int_64)0
	*($0 + [160]) = (int_64)0
	*($0 + [176]) = (int_64)0
	*($0 + [196]) = $1
	*(($0 + [24])) = (int_64)0
	*(($0 + [48])) = (int_64)0
	*(($0 + [72])) = (int_64)0
	*(($0 + [88])) = (int_64)0
	*(($0 + [128])) = (int_64)0
	*(($0 + [152])) = (int_64)0
	*(($0 + [168])) = (int_64)0
	*($3 + [8]) = *($2 + [4])
	CALL $287($0, ($3 + [8]))
	*($0 + [200]) = *(*($2 + [8]))
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $287 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [96])
	$global$0 = $2
	*($2 + [8]) = $0
	*($2 + [12]) = ($0 + [8])
	*($2 + [16]) = ($0 + [16])
	*($2 + [20]) = ($0 + [32])
	*($2 + [24]) = ($0 + [40])
	*($2 + [28]) = ($0 + [56])
	*($2 + [32]) = ($0 + [64])
	*($2 + [36]) = ($0 + [80])
	*($2 + [40]) = ($0 + [96])
	*($2 + [44]) = ($0 + [100])
	*($2 + [48]) = ($0 + [104])
	*($2 + [52]) = ($0 + [108])
	*($2 + [56]) = ($0 + [112])
	*($2 + [60]) = ($0 + [120])
	*($2 + [64]) = ($0 + [136])
	*($2 + [68]) = ($0 + [144])
	*($2 + [72]) = ($0 + [160])
	*($2 + [76]) = ($0 + [176])
	*($2 + [80]) = ($0 + [184])
	*($2 + [88]) = ($0 + [192])
	*($2 + [84]) = ($0 + [188])
	CALL $288(($2 + [8]), $1)
	$global$0 = ($2 + [96])
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $1($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $1($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $9 (int_32 $0)
{
	return CALL $8($0)
}

void .FUNC $123 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $303(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $304($0, $9)
	CALL $305($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11136])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = *($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11136])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [8]), [8])
	*($3) = (*($3) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $121 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = $2
	*($0) = $1
	if ( (uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$1 }
	CALL eosio_assert([0], [11352])
	$2 = *(($0 + [8]))
	
.LABEL $label$1
	*($3 + [8]) = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( CALL $97(($3 + [8])) ){ goto $label$2 }
	CALL eosio_assert([0], [8257])
	
.LABEL $label$2
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $120 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$5 = *($1 + [8])
	$6 = $3
	$3 = ($6 + [-16])
	$global$0 = $3
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = $6
	CALL $122($4, $1)
	CALL db_update_i64(*($1 + [20]), $2, $3, [16])
	$2 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( (uint_64)($2) <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$3
	$global$0 = ($4 + [16])
}

void .FUNC $2 (int_32 $0)
{
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	*($2) = *($1 + [8])
	*($2 + [8]) = $3
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$1 = (*($0) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	CALL void $1((int_32 ($2 + [8])), (int_32 $2), (int_32 $0))
	$global$0 = ($2 + [16])
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $94(*($1), *($0))
	$3 = *($0)
	$0 = *($1)
	*($2 + [8]) = (int_64)0
	$1 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11710])
	$1 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy(($2 + [8]), $1, [8])
	*($3 + [8]) = *($2 + [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $124 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $10($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $10($2)
	
.LABEL $label$1
	return $0
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	CALL $14($0, $1)
}

int_32 .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_64 .FUNC $17 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

void .FUNC $10 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

void .FUNC $11 (int_32 $0)
{
	CALL $10($0)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $7(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $7(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	return CALL $12($0, $1)
}

void .FUNC $185 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [196]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$3 = *($3)
	*($1 + [120]) = *($3)
	*(($1 + [128])) = *(($3 + [8]))
	$6 = *($1)
	$3 = $4
	$4 = ($3 + [-192])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-15])
	*($5 + [24]) = ($5 + [8])
	CALL $166($1, ($5 + [24]))
	CALL db_update_i64(*($1 + [200]), $2, $4, [177])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [32])
}

int_32 .FUNC $281 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = (*($1 + [4]) - *($1))
	CALL $284($0, ($2 + [8]))
	$4 = *($1)
	$1 = (*($1 + [4]) - $4)
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) >= (int_32)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [11136])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $4, $1)
	*(($3 = ($0 + [4]))) = (*($3) + $1)
	$global$0 = ($2 + [16])
	return $0
}

int_64 .FUNC $18 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_32 .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [1] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $21($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $21($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $21($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $21($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [8288]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $21($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $21($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $21($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $184 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [196]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	*($1 + [104]) = *(*($3))
	$6 = *($1)
	$3 = $4
	$4 = ($3 + [-192])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-15])
	*($5 + [24]) = ($5 + [8])
	CALL $166($1, ($5 + [24]))
	CALL db_update_i64(*($1 + [200]), $2, $4, [177])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [32])
}

void .FUNC $187 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [196]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$3 = *($3)
	*($1 + [144]) = *($3)
	*(($1 + [152])) = *(($3 + [8]))
	$6 = *($1)
	$3 = $4
	$4 = ($3 + [-192])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-15])
	*($5 + [24]) = ($5 + [8])
	CALL $166($1, ($5 + [24]))
	CALL db_update_i64(*($1 + [200]), $2, $4, [177])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [32])
}

void .FUNC $218 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [80])
	$global$0 = $4
	*(($4 + [56])) = [0]
	*($4 + [32]) = $1
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	*($4 + [24]) = *($0)
	CALL $108(($4 + [16]), ($4 + [24]), $1)
	*($4 + [68]) = CALL $16([9399])
	*($4 + [64]) = [9399]
	*($4 + [8]) = *($4 + [64])
	$0 = CALL $138(($4 + [72]), ($4 + [8]))
	$5 = *($4 + [20])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((int_64)*(($5 + [72])) == (int_64)((int_64)((int_64)*($0) << (int_64)8) | (int_64)4)) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [11104])
	
.LABEL $label$1
	$0 = *($4 + [20])
	*($4 + [72]) = $2
	if ( $0 ){ goto $label$3 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$3
	CALL $240(($4 + [24]), $0, ($4 + [72]))
	CALL $115(($4 + [48]))
	$global$0 = ($4 + [80])
}

void .FUNC $186 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [196]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	*($1 + [136]) = ((float_32)*(*($3)) / (float_32)(float_32)100)
	$6 = *($1)
	$3 = $4
	$4 = ($3 + [-192])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-15])
	*($5 + [24]) = ($5 + [8])
	CALL $166($1, ($5 + [24]))
	CALL db_update_i64(*($1 + [200]), $2, $4, [177])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [32])
}

void .FUNC $180 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [196]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$6 = *($1)
	CALL $154(($1 + [160]), *($3))
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [11863])
	
.LABEL $label$3
	$3 = $4
	$4 = ($3 + [-192])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-15])
	*($5 + [24]) = ($5 + [8])
	CALL $166($1, ($5 + [24]))
	CALL db_update_i64(*($1 + [200]), $2, $4, [177])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($5 + [32])
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $94(*($1), *($0))
	$3 = *($0)
	$0 = *($1)
	*($2 + [8]) = (int_64)0
	$4 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11710])
	$4 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy(($2 + [8]), $4, [8])
	*($3 + [8]) = *($2 + [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	CALL $94(*($1), ($3 + [16]))
	$global$0 = ($2 + [16])
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [16])
	$4 = *($1)
	*($2 + [16]) = *($1 + [8])
	*($2 + [24]) = $4
	*($2 + [8]) = $3
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*($0) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL void $0((int_32 ($2 + [24])), (int_32 ($2 + [16])), (int_32 ($2 + [8])), (int_32 $1))
	$global$0 = ($2 + [32])
}

void .FUNC $114 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$6 = *($1 + [8])
	CALL $112($1, *($3))
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)*($1) > (int_64)-1) ){ goto $label$3 }
	CALL prints([11922])
	CALL $121(($5 + [32]), (int_64)0, *(*($3) + [8]))
	*(($1 + [8])) = *((($5 + [32]) + [8]))
	*($1) = *($5 + [32])
	
.LABEL $label$3
	if ( ((int_64)$6 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)) ){ goto $label$4 }
	CALL eosio_assert([0], [11863])
	
.LABEL $label$4
	$3 = $4
	$4 = ($3 + [-48])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-8])
	*($5 + [24]) = ($5 + [8])
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [16])
	*($5 + [40]) = ($1 + [32])
	CALL $99(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$5
	$global$0 = ($5 + [48])
}

int_32 .FUNC $115 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $10($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $10($2)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_64 $2
	if ( ((int_64)*($1 + [8]) == (int_64)*($0 + [8])) ){ goto $label$1 }
	CALL eosio_assert([0], [11545])
	
.LABEL $label$1
	$2 = (int_64)
	*($0) = $2(*($0) - *($1)))
	if ( ((int_64)$2 > (int_64)-4611686018427387904) ){ goto $label$2 }
	CALL eosio_assert([0], [11593])
	$2 = *($0)
	
.LABEL $label$2
	if ( ((int_64)$2 < (int_64)4611686018427387904) ){ goto $label$3 }
	CALL eosio_assert([0], [11615])
	
.LABEL $label$3
	return $0
}

void .FUNC $113 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	$4 = ($global$0 - [48])
	$global$0 = $4
	*(($4 + [40])) = [0]
	*($4 + [16]) = $1
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [8]) = *($0)
	$0 = CALL $134(($4 + [8]), (uint_64)*($2 + [8]) >> (uint_64)(int_64)8), [10758]
	if ( ((int_64)*($0)) >= (int_64)*($2)) ){ goto $label$1 }
	CALL eosio_assert([0], [10782])
	
.LABEL $label$1
	*($4) = $2
	CALL $204(($4 + [8]), $0, $3, $4)
	CALL $124(($4 + [32]))
	$global$0 = ($4 + [48])
}

void .FUNC $110 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [64])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [16]) = $2
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($1)
	*($3 + [52]) = CALL $16([9399])
	*($3 + [48]) = [9399]
	*($3) = *($3 + [48])
	$1 = CALL $134(($3 + [8]), ((int_64)*(CALL $138(($3 + [56]), $3)) & (int_64)72057594037927935), [9062])
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	CALL $124(($3 + [32]))
	$global$0 = ($3 + [64])
}

void .FUNC $111 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [128])
	$global$0 = $5
	*($5 + [20]) = CALL $16([9399])
	*($5 + [16]) = [9399]
	*($5 + [8]) = *($5 + [16])
	CALL $121(($5 + [104]), (int_64)0, ((int_64)((int_64)*(CALL $138(($5 + [64]), ($5 + [8]))) << (int_64)8) | (int_64)4))
	if ( ($4 == 0) ){ goto $label$2 }
	*((($5 + [64]) + [32])) = [0]
	*($0) = *($5 + [104])
	*(($0 + [8])) = *((($5 + [104]) + [8]))
	*($5 + [72]) = $2
	*($5 + [80]) = (int_64)-1
	*($5 + [88]) = (int_64)0
	*($5 + [64]) = *($1)
	CALL $158(($5 + [16]), ($5 + [64]), (int_64)0)
	$4 = *($5 + [20])
	if ( ($4 == 0) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $154($0, ($4 + [16]))
	CALL $159(($5 + [16]))
	$4 = *($5 + [20])
	if ( $4 ){ goto $label$4 }
	
.LABEL $label$3
	*((($5 + [16]) + [32])) = [0]
	*($5 + [24]) = $2
	*($5 + [32]) = (int_64)-1
	*($5 + [40]) = (int_64)0
	*($5 + [16]) = *($1)
	CALL $152(($5 + [120]), ($5 + [16]), (int_64)0)
	$4 = *($5 + [124])
	if ( ($4 == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	CALL $154($0, ($4 + [64]))
	CALL $157(($5 + [120]))
	$4 = *($5 + [124])
	if ( $4 ){ goto $label$6 }
	
.LABEL $label$5
	CALL $136((($5 + [16]) + [24]))
	CALL $147((($5 + [64]) + [24]))
	goto $label$1 
	
.LABEL $label$2
	*(($5 + [96])) = [0]
	*($5 + [72]) = $2
	*($5 + [80]) = (int_64)-1
	*($5 + [88]) = (int_64)0
	*($5 + [64]) = *($1)
	CALL $108(($5 + [56]), ($5 + [64]), $2)
	*($5 + [124]) = CALL $16([9399])
	*($5 + [120]) = [9399]
	*($5) = *($5 + [120])
	$1 = CALL $138(($5 + [16]), $5)
	$4 = *($5 + [60])
	if ( ($4 == 0) ){ goto $label$8 }
	if ( ((int_64)*(($4 + [72])) == (int_64)((int_64)((int_64)*($1) << (int_64)8) | (int_64)4)) ){ goto $label$7 }
	
.LABEL $label$8
	CALL eosio_assert([0], [11104])
	$4 = *($5 + [60])
	
.LABEL $label$7
	*($0) = *($4 + [64])
	*(($0 + [8])) = *(($4 + [72]))
	CALL $115(($5 + [88]))
	
.LABEL $label$1
	$global$0 = ($5 + [128])
}

void .FUNC $237 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [80]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$5 = *($1)
	$6 = ($1 + [64])
	CALL $112($6, *($2))
	if ( ((int_64)$5 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [11863])
	
.LABEL $label$3
	$2 = $3
	$3 = ($2 + [-80])
	$global$0 = $3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($2 + [-4])
	*($4 + [24]) = ($4 + [8])
	*($4 + [56]) = $6
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [40]) = ($1 + [16])
	*($4 + [44]) = ($1 + [32])
	*($4 + [48]) = ($1 + [48])
	*($4 + [52]) = ($1 + [56])
	CALL $174(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [84]), (int_64)0, $3, [76])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($4 + [64])
}

int_32 .FUNC $118 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL $98(($3 + [8]), $0, $1)
	$0 = *($3 + [12])
	if ( $0 ){ goto $label$1 }
	CALL eosio_assert([0], $2)
	$0 = *($3 + [12])
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $119 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	if ( ((int_64)(uint_64)*(*($5) + [8]) >> (uint_64)(int_64)8) == (int_64)$2) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$5 = *(($4 + [-24]))
	if ( ((int_32)*($5 + [16]) == (int_32)$1) ){ goto $label$5 }
	CALL eosio_assert([0], [11636])
	
.LABEL $label$5
	*($0 + [4]) = $5
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)3607749779137757184, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	$5 = CALL $205($1, $5)
	if ( ((int_32)*($5 + [16]) == (int_32)$1) ){ goto $label$7 }
	CALL eosio_assert([0], [11636])
	
.LABEL $label$7
	*($0 + [4]) = $5
	goto $label$1 
	
.LABEL $label$6
	*($0 + [4]) = [0]
	
.LABEL $label$1
	*($0) = $1
}

void .FUNC $299 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $94(*($1), *($0))
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [11710])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	CALL $95(*($1), *($0 + [8]))
	CALL $95(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11710])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [20])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11710])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $95(*($1), *($0 + [24]))
}

int_32 .FUNC $298 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	*($2 + [8]) = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	CALL $284($0, ($2 + [8]))
	$4 = ($3 & [1])
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : $4 )
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ( *($1 + [8]) ? ($1 + [1]) : $4 )
	$1 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $1) >= (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [11136])
	$1 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($1, $4, $3)
	*(($1 = ($0 + [4]))) = (*($1) + $3)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $295 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$1 = ($1 + [-24])
	*($3) = $1
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $10($4)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $10($1)
	
.LABEL $label$4
	return $0
}

void .FUNC $294 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	$4 = ($1 + [4])
	$5 = *($4)
	
.LOOP $label$3:
	$6 = ($2 + [-24])
	$7 = *($6)
	*($6) = [0]
	*(($5 + [-24])) = $7
	*(($5 + [-8])) = *(($2 + [-8]))
	*(($5 + [-16])) = *(($2 + [-16]))
	$5 = (*($4) + [-24])
	*($4) = $5
	$2 = $6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$5 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $5
	*(($5 = ($1 + [4]))) = $3
	$2 = ($0 + [4])
	$6 = *($2)
	*($2) = *($1 + [8])
	*($1 + [8]) = $6
	$2 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $2
	*($1) = *($5)
}

void .FUNC $297 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = *($0)
	$2 = ($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $122(*($1), ($0 + [16]))
	CALL $298(*($1), ($0 + [32]))
}

int_32 .FUNC $296 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = *($1)
	$3 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	$2 = *($0)
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$1 = *($1)
	$1 = ( *(($1 + [4])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$2 }
	*($0) = ($1 + $2)
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $291 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$1 = ($1 + [-24])
	*($3) = $1
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $10($4)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $10($1)
	
.LABEL $label$4
	return $0
}

void .FUNC $290 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	$4 = ($1 + [4])
	$5 = *($4)
	
.LOOP $label$3:
	$6 = ($2 + [-24])
	$7 = *($6)
	*($6) = [0]
	*(($5 + [-24])) = $7
	*(($5 + [-8])) = *(($2 + [-8]))
	*(($5 + [-16])) = *(($2 + [-16]))
	$5 = (*($4) + [-24])
	*($4) = $5
	$2 = $6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$5 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $5
	*(($5 = ($1 + [4]))) = $3
	$2 = ($0 + [4])
	$6 = *($2)
	*($2) = *($1 + [8])
	*($1 + [8]) = $6
	$2 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $2
	*($1) = *($5)
}

int_32 .FUNC $293 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $8(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $292 (int_32 $0, int_32 $1)
{
	CALL $95(*($1), *($0))
	CALL $95(*($1), *($0 + [4]))
	CALL $94(*($1), *($0 + [8]))
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $30($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $16($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $26($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $26($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $235 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*(($1 + [28])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12104])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12149])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$6 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$7:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$5 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	CALL eosio_assert([0], [12199])
	$4 = *($3)
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	$8 = $5
	
.LOOP $label$11:
	$9 = *($8)
	*($8) = [0]
	$7 = ($8 + [-24])
	$5 = *($7)
	*($7) = $9
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $10($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$9 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) != (int_32)$8) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$9 = ($5 + [-24])
	
.LABEL $label$9
	
.LOOP $label$13:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL $10($8)
	
.LABEL $label$14
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$8
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [32]))
}

int_32 .FUNC $278 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $281(CALL $280($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11136])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11136])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $311 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $94(*($1), *($0))
	CALL $94(*($1), *($0 + [4]))
	CALL $95(*($1), *($0 + [8]))
	$2 = *($0 + [12])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11710])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $95(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11710])
	$1 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $19([2], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $8($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $24 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $8(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $10($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $8($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $10($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $232 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [96]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$5 = *($1)
	*(($1 + ( [88] ? [56] : *(*($2)) ))) = *(*($2 + [4]))
	$3 = $3
	$2 = ($3 + [-96])
	$global$0 = $2
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = $3
	*($4 + [16]) = $4
	*($4 + [28]) = ($1 + [8])
	*($4 + [24]) = $1
	*($4 + [32]) = ($1 + [16])
	*($4 + [36]) = ($1 + [32])
	*($4 + [40]) = ($1 + [48])
	*($4 + [44]) = ($1 + [56])
	*($4 + [48]) = ($1 + [64])
	*($4 + [52]) = ($1 + [80])
	*($4 + [56]) = ($1 + [88])
	CALL $323(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [100]), (int_64)0, $2, [96])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($4 + [64])
}

int_32 .FUNC $300 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $8(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $321 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	$4 = ($1 + [4])
	$5 = *($4)
	
.LOOP $label$3:
	$6 = ($2 + [-24])
	$7 = *($6)
	*($6) = [0]
	*(($5 + [-24])) = $7
	*(($5 + [-8])) = *(($2 + [-8]))
	*(($5 + [-16])) = *(($2 + [-16]))
	$5 = (*($4) + [-24])
	*($4) = $5
	$2 = $6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$5 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $5
	*(($5 = ($1 + [4]))) = $3
	$2 = ($0 + [4])
	$6 = *($2)
	*($2) = *($1 + [8])
	*($1 + [8]) = $6
	$2 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $2
	*($1) = *($5)
}

int_32 .FUNC $320 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $8(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $280 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = int_32((*($1 + [4]) - *($1)) >> [4])
	CALL $284($0, ($2 + [8]))
	$4 = *($1 + [4])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$1 = ($0 + [4])
	
.LOOP $label$2:
	if ( ((int_32)(*($6) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11136])
	$5 = *($1)
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	$5 = (*($1) + [8])
	*($1) = $5
	if ( ((int_32)(*($6) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [11136])
	$5 = *($1)
	
.LABEL $label$4
	CALL memcpy($5, ($3 + [8]), [8])
	$5 = (*($1) + [8])
	*($1) = $5
	$3 = ($3 + [16])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $322 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$1 = ($1 + [-24])
	*($3) = $1
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $10($4)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $10($1)
	
.LABEL $label$4
	return $0
}

int_32 .FUNC $325 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [12252])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	*($1) = $3
	return $0
}

void .FUNC $324 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $122(*($1), *($0 + [8]))
	$2 = *($0 + [12])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $122(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [11136])
	$1 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($1, $3, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
}

void .FUNC $315 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11136])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $298(*($1), (*($0) + [8]))
}

int_32 .FUNC $101 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $10($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $10($2)
	
.LABEL $label$1
	return $0
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $293(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $294($0, $9)
	CALL $295($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $25(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $25(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $10(*($5 + [8]))
	
.LABEL $label$2
	if ( ((*($1) & [1]) == 0) ){ goto $label$3 }
	CALL $10(*($1 + [8]))
	
.LABEL $label$3
	$global$0 = ($2 + [96])
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	CALL $94(*($1), *($0))
	$0 = *($0)
	CALL $95(*($1), ($0 + [8]))
	CALL $148(*($1), ($0 + [24]))
}

void .FUNC $105 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [96])
	$global$0 = $4
	*(($4 + [48])) = [0]
	*($4 + [24]) = $1
	*($4 + [32]) = (int_64)-1
	*($4 + [40]) = (int_64)0
	*($4 + [16]) = *($0)
	CALL $119(($4 + [8]), ($4 + [16]), (uint_64)*($2 + [8]) >> (uint_64)(int_64)8))
	if ( (*($4 + [12]) == 0) ){ goto $label$2 }
	$0 = *($4 + [12])
	*($4 + [64]) = $2
	if ( $0 ){ goto $label$3 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$3
	CALL $199(($4 + [16]), $0, ($4 + [64]))
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)CALL current_receiver() == (int_64)*($4 + [16])) ){ goto $label$4 }
	CALL eosio_assert([0], [11715])
	
.LABEL $label$4
	*(($0 = CALL $8([32])) + [16]) = ($4 + [16])
	*($0 + [8]) = *(($2 + [8]))
	*($0) = *($2)
	*($4 + [88]) = (($4 + [64]) + [16])
	*($4 + [84]) = ($4 + [64])
	*($4 + [80]) = ($4 + [64])
	CALL $122(($4 + [80]), $0)
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	$5 = CALL db_store_i64(*((($4 + [16]) + [8])), (int_64)3607749779137757184, $3, $1), ($4 + [64]), [16]
	*($0 + [20]) = $5)
	$2 = (($4 + [16]) + [16])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$5 }
	*($2) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$5
	*($4 + [80]) = $0
	$1 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8
	*($4 + [64]) = $1)
	*($4 + [60]) = $5
	$6 = ($4 + [44])
	$2 = *($6)
	if ( ((uint_32)$2 >= (uint_32)*((($4 + [16]) + [32]))) ){ goto $label$7 }
	*($2 + [8]) = $1
	*($2 + [16]) = $5
	*($4 + [80]) = [0]
	*($2) = $0
	*($6) = ($2 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $123(($4 + [40]), ($4 + [80]), ($4 + [64]), ($4 + [60]))
	
.LABEL $label$6
	$2 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	CALL $10($2)
	
.LABEL $label$1
	CALL $124(($4 + [40]))
	$global$0 = ($4 + [96])
}

void .FUNC $104 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$6 = *($1 + [8])
	CALL $154($1, *($3))
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)$6) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)) ){ goto $label$3 }
	CALL eosio_assert([0], [11863])
	
.LABEL $label$3
	$3 = $4
	$4 = ($3 + [-48])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-8])
	*($5 + [24]) = ($5 + [8])
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [16])
	*($5 + [40]) = ($1 + [32])
	CALL $99(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$4
	$global$0 = ($5 + [48])
}

void .FUNC $107 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $201($1, $0)
	$0 = *($1)
	CALL send_inline($0, (*($1 + [4]) - $0))
	$0 = *($1)
	if ( ($0 == 0) ){ goto $label$1 }
	*($1 + [4]) = $0
	CALL $10($0)
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

int_32 .FUNC $106 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$6 = CALL $8([16])
	*($0 + [16]) = $6
	*(($7 = ($0 + [20]))) = $6
	$8 = ($6 + [16])
	*($5) = $8
	*(($6 + [8])) = *(($1 + [8]))
	*($6) = *($1)
	*($7) = $8
	CALL $200(($0 + [28]), $4)
	return $0
}

void .FUNC $109 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL $111(($3 + [64]), $0, $1, $1, [1])
	*(($3 + [56])) = [0]
	*($3 + [32]) = $1
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	*($3 + [24]) = *($0)
	CALL $108(($3 + [16]), ($3 + [24]), $1)
	if ( (*($3 + [20]) == 0) ){ goto $label$2 }
	$0 = *($3 + [20])
	*($3 + [80]) = ($3 + [64])
	if ( $0 ){ goto $label$3 }
	CALL eosio_assert([0], [12005])
	
.LABEL $label$3
	CALL $203(($3 + [24]), $0, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL $37()
	CALL $121($3, (int_64)0, *($3 + [72]))
	if ( ((int_64)CALL current_receiver() == (int_64)*($3 + [24])) ){ goto $label$4 }
	CALL eosio_assert([0], [11715])
	
.LABEL $label$4
	*(($0 = CALL $8([96])) + [80]) = ($3 + [24])
	*($0 + [56]) = $4
	*($0) = $1
	*($0 + [8]) = [0]
	*($0 + [48]) = $4
	$1 = *($3)
	*($0 + [16]) = $1
	$4 = *(($3 + [8]))
	*(($0 + [24])) = $4
	*($0 + [32]) = $1
	*(($0 + [40])) = $4
	*($0 + [64]) = *($3 + [64])
	*(($0 + [72])) = *((($3 + [64]) + [8]))
	*($3 + [176]) = (($3 + [80]) + [76])
	*($3 + [172]) = ($3 + [80])
	*($3 + [168]) = ($3 + [80])
	*($3 + [184]) = ($3 + [168])
	*($3 + [196]) = ($0 + [8])
	*($3 + [192]) = $0
	*($3 + [200]) = ($0 + [16])
	*($3 + [204]) = ($0 + [32])
	*($3 + [208]) = ($0 + [48])
	*($3 + [212]) = ($0 + [56])
	*($3 + [216]) = ($0 + [64])
	CALL $174(($3 + [192]), ($3 + [184]))
	$1 = *($0)
	$5 = CALL db_store_i64(*((($3 + [24]) + [8])), (int_64)-5964828727891197952, $2, $1, ($3 + [80]), [76])
	*($0 + [84]) = $5
	$6 = (($3 + [24]) + [16])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$5 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($3 + [192]) = $0
	$1 = *($0)
	*($3 + [80]) = $1
	*($3 + [168]) = $5
	$7 = ($3 + [52])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*((($3 + [24]) + [32]))) ){ goto $label$7 }
	*($6 + [8]) = $1
	*($6 + [16]) = $5
	*($3 + [192]) = [0]
	*($6) = $0
	*($7) = ($6 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $175(($3 + [48]), ($3 + [192]), ($3 + [80]), ($3 + [168]))
	
.LABEL $label$6
	$0 = *($3 + [192])
	*($3 + [192]) = [0]
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $10($0)
	
.LABEL $label$1
	CALL $115(($3 + [48]))
	$global$0 = ($3 + [224])
}

void .FUNC $108 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	if ( ((int_64)*(*($5)) == (int_64)$2) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$5 = *(($4 + [-24]))
	if ( ((int_32)*($5 + [80]) == (int_32)$1) ){ goto $label$5 }
	CALL eosio_assert([0], [11636])
	
.LABEL $label$5
	*($0 + [4]) = $5
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-5964828727891197952, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	$5 = CALL $202($1, $5)
	if ( ((int_32)*($5 + [80]) == (int_32)$1) ){ goto $label$7 }
	CALL eosio_assert([0], [11636])
	
.LABEL $label$7
	*($0 + [4]) = $5
	goto $label$1 
	
.LABEL $label$6
	*($0 + [4]) = [0]
	
.LABEL $label$1
	*($0) = $1
}

void .FUNC $212 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$5 = *($0)
	if ( (*(*($4 + [8])) == 0) ){ goto $label$2 }
	*($1 + [56]) = *(*($4 + [12]))
	$6 = *($4 + [16])
	*(($1 + [48])) = *(($6 + [8]))
	*($1 + [40]) = *($6)
	$4 = *($4 + [20])
	*($1 + [16]) = *($4)
	*(($1 + [24])) = *(($4 + [8]))
	$6 = ($1 + [16])
	$7 = ($1 + [40])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($4 + [16])
	*($1 + [16]) = *($6)
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [32]) = *(*($4 + [12]))
	$4 = *($4 + [20])
	*(($1 + [48])) = *(($4 + [8]))
	*($1 + [40]) = *($4)
	$7 = ($1 + [40])
	$6 = ($1 + [16])
	
.LABEL $label$1
	$2 = $2
	$4 = ($2 + [-64])
	$global$0 = $4
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = $2
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = $6
	*($3 + [36]) = ($1 + [32])
	*($3 + [40]) = $7
	*($3 + [44]) = ($1 + [56])
	CALL $324(($3 + [24]), ($3 + [16]))
	$8 = *($1 + [8])
	*($1 + [68]) = CALL db_store_i64(*($5 + [8]), (int_64)5378043540710670336, *(*($0 + [8])), $8, $4, [64])
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$3 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [48])
}

int_32 .FUNC $318 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($1 + [24])
	$0 = *($1 + [4])
	$1 = CALL $95(CALL $94($0, $1), ($1 + [8]))
	if ( ((int_32)*($1 + [8]) != (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11710])
	$0 = *(($1 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $0, [1])
	*(($0 = ($1 + [4]))) = (*($0) + [1])
	return $1
}

void .FUNC $231 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [96]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$5 = *($1)
	*(($1 + ( [80] ? [48] : *(*($2)) ))) = *(*($2 + [4]))
	$3 = $3
	$2 = ($3 + [-96])
	$global$0 = $2
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = $3
	*($4 + [16]) = $4
	*($4 + [28]) = ($1 + [8])
	*($4 + [24]) = $1
	*($4 + [32]) = ($1 + [16])
	*($4 + [36]) = ($1 + [32])
	*($4 + [40]) = ($1 + [48])
	*($4 + [44]) = ($1 + [56])
	*($4 + [48]) = ($1 + [64])
	*($4 + [52]) = ($1 + [80])
	*($4 + [56]) = ($1 + [88])
	CALL $323(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [100]), (int_64)0, $2, [96])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($4 + [64])
}

void .FUNC $319 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $320(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $321($0, $9)
	CALL $322($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

int_32 .FUNC $219 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$3 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$7 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$5 
	
.LABEL $label$7
	CALL eosio_assert([0], [11687])
	
.LABEL $label$6
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $8([80])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [56])
	CALL $311(($3 + [40]), ($3 + [32]))
	*($5 + [68]) = $1
	*($3 + [32]) = $5
	$7 = *($5 + [8])
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $213(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $2($4)
	
.LABEL $label$8
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $10($1)
	
.LABEL $label$1
	$global$0 = ($3 + [64])
	return $5
}

int_64 .FUNC $38 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

int_64 .FUNC $39 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $38($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $18($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [8432])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [8416]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [8448]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $17($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

void .FUNC $36 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_64 .FUNC $37 ()
{
	int_64 $0
	if ( (*([0] + [8220]) == 0) ){ goto $label$1 }
	return *([0] + [8224])
	
.LABEL $label$1
	$0 = CALL current_time()
	*([0] + [8220]) = [1]
	*([0] + [8224]) = $0
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $33($0, $1, $2, CALL $16($2))
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $29(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $23(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8368], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $29(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $29(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $26($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $26($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $8($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $10($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $16($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $26($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $215 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $307(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $308($0, $9)
	CALL $309($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $214 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$5 = *($0)
	$6 = *($4 + [8])
	*(($1 + [40])) = *(($6 + [8]))
	*($1 + [32]) = *($6)
	$6 = ($1 + [32])
	if ( (*(*($4 + [12])) == 0) ){ goto $label$2 }
	$7 = *(($4 + [8]))
	*($1 + [16]) = *($7)
	*(($1 + [24])) = *(($7 + [8]))
	$7 = *($4 + [16])
	*($1 + [56]) = *($7)
	*($1 + [48]) = *($7)
	$7 = *($4 + [20])
	*(($1 + [72])) = *(($7 + [8]))
	*($1 + [64]) = *($7)
	$7 = ($1 + [64])
	$8 = ($1 + [16])
	$9 = *($4 + [28])
	$4 = *($4 + [24])
	goto $label$1 
	
.LABEL $label$2
	$7 = *($4 + [20])
	*($1 + [16]) = *($7)
	*(($1 + [24])) = *(($7 + [8]))
	*($1 + [48]) = *(*($4 + [24]))
	*($1 + [56]) = *(*($4 + [28]))
	$7 = *(($4 + [8]))
	*(($1 + [72])) = *(($7 + [8]))
	*($1 + [64]) = *($7)
	$7 = ($1 + [64])
	$8 = ($1 + [16])
	$4 = *($4 + [16])
	$9 = $4
	
.LABEL $label$1
	*($1 + [80]) = *($4)
	*($1 + [88]) = *($9)
	$2 = $2
	$4 = ($2 + [-96])
	$global$0 = $4
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = $2
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = $8
	*($3 + [36]) = $6
	*($3 + [40]) = ($1 + [48])
	*($3 + [44]) = ($1 + [56])
	*($3 + [48]) = $7
	*($3 + [52]) = ($1 + [80])
	*($3 + [56]) = ($1 + [88])
	CALL $323(($3 + [24]), ($3 + [16]))
	$10 = *($1)
	*($1 + [100]) = CALL db_store_i64(*($5 + [8]), (int_64)-4157661228816138240, *(*($0 + [8])), $10, $4, [96])
	if ( (uint_64)($10 <= *($5 + [16])) ){ goto $label$3 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $217 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [196]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$6 = *($1)
	CALL $154(($1 + [64]), *($3))
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [11863])
	
.LABEL $label$3
	$3 = $4
	$4 = ($3 + [-192])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-15])
	*($5 + [24]) = ($5 + [8])
	CALL $166($1, ($5 + [24]))
	CALL db_update_i64(*($1 + [200]), $2, $4, [177])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($5 + [32])
}

void .FUNC $216 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [196]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	*($1 + [56]) = (*($1 + [56]) + [1])
	$5 = *($1)
	$6 = $3
	$3 = ($6 + [-192])
	$global$0 = $3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($6 + [-15])
	*($4 + [24]) = ($4 + [8])
	CALL $166($1, ($4 + [24]))
	CALL db_update_i64(*($1 + [200]), $2, $3, [177])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($4 + [32])
}

void .FUNC $211 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [96]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$5 = *($2 + [4])
	$6 = *($1)
	if ( (*(*($2)) == 0) ){ goto $label$4 }
	CALL $154(($1 + [64]), $5)
	*($1 + [80]) = *(*($2 + [8]))
	if ( ((int_64)*($1 + [88]) != (int_64)*(*($2 + [12]))) ){ goto $label$3 }
	*(($1 + [88])) = *(*($2 + [16]))
	goto $label$3 
	
.LABEL $label$4
	CALL $154(($1 + [16]), $5)
	*($1 + [48]) = *(*($2 + [8]))
	if ( ((int_64)*($1 + [56]) != (int_64)*(*($2 + [12]))) ){ goto $label$3 }
	*(($1 + [56])) = *(*($2 + [16]))
	
.LABEL $label$3
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$5 }
	CALL eosio_assert([0], [11863])
	
.LABEL $label$5
	$3 = $3
	$2 = ($3 + [-96])
	$global$0 = $2
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = $3
	*($4 + [16]) = $4
	*($4 + [24]) = $1
	*($4 + [28]) = ($1 + [8])
	*($4 + [32]) = ($1 + [16])
	*($4 + [36]) = ($1 + [32])
	*($4 + [40]) = ($1 + [48])
	*($4 + [44]) = ($1 + [56])
	*($4 + [48]) = ($1 + [64])
	*($4 + [52]) = ($1 + [80])
	*($4 + [56]) = ($1 + [88])
	CALL $323(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [100]), (int_64)0, $2, [96])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$global$0 = ($4 + [64])
}

void .FUNC $210 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [64]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$5 = *($1 + [8])
	if ( (*(*($2)) == 0) ){ goto $label$4 }
	*($1 + [56]) = *(*($2 + [4]))
	CALL $154(($1 + [40]), *($2 + [8]))
	goto $label$3 
	
.LABEL $label$4
	CALL $154(($1 + [16]), *($2 + [8]))
	*($1 + [32]) = *(*($2 + [4]))
	
.LABEL $label$3
	$6 = ($1 + [8])
	if ( ((int_64)$5 == (int_64)*($6)) ){ goto $label$5 }
	CALL eosio_assert([0], [11863])
	
.LABEL $label$5
	$3 = $3
	$2 = ($3 + [-64])
	$global$0 = $2
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = $3
	*($4 + [16]) = $4
	*($4 + [24]) = $1
	*($4 + [28]) = $6
	*($4 + [32]) = ($1 + [16])
	*($4 + [36]) = ($1 + [32])
	*($4 + [40]) = ($1 + [40])
	*($4 + [44]) = ($1 + [56])
	CALL $324(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [68]), (int_64)0, $2, [64])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$global$0 = ($4 + [48])
}

int_32 .FUNC $198 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$3 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$7 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$5 
	
.LABEL $label$7
	CALL eosio_assert([0], [11687])
	
.LABEL $label$6
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $8([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $292(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$7 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $7)
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $100(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $2($4)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $10($1)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $199 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$5 = *($1 + [8])
	CALL $154($1, *($2))
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)) ){ goto $label$3 }
	CALL eosio_assert([0], [11863])
	
.LABEL $label$3
	$2 = $3
	$3 = ($2 + [-16])
	$global$0 = $3
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = $2
	CALL $122($4, $1)
	CALL db_update_i64(*($1 + [20]), (int_64)0, $3, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$4
	$global$0 = ($4 + [16])
}

void .FUNC $196 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $94(*($1), *($0))
	$3 = *($0)
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)*($0 + [8]) != (int_32)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [11710])
	$1 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy(($2 + [15]), $1, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
	*(($3 + [8])) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $197 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	if ( ((int_32)*($1 + [80]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	*($1 + [48]) = (int_64)0
	*($1 + [56]) = (int_64)0
	$4 = *($1)
	$5 = $2
	$2 = ($5 + [-80])
	$global$0 = $2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($5 + [-4])
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = ($1 + [32])
	*($3 + [48]) = ($1 + [48])
	*($3 + [52]) = ($1 + [56])
	*($3 + [56]) = ($1 + [64])
	CALL $174(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [84]), (int_64)0, $2, [76])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $194 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [196]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	*($1 + [192]) = *(*($3))
	$6 = *($1)
	$3 = $4
	$4 = ($3 + [-192])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-15])
	*($5 + [24]) = ($5 + [8])
	CALL $166($1, ($5 + [24]))
	CALL db_update_i64(*($1 + [200]), $2, $4, [177])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [32])
}

void .FUNC $195 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [80]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$5 = *($1)
	CALL $121(($4 + [32]), (int_64)0, *(*($2)))
	$6 = (($4 + [32]) + [8])
	*(($1 + [24])) = *($6)
	*($1 + [16]) = *($4 + [32])
	CALL $121(($4 + [32]), (int_64)0, *(*($2)))
	*(($1 + [40])) = *($6)
	*($1 + [32]) = *($4 + [32])
	$6 = ($1 + [32])
	$7 = ($1 + [16])
	if ( ((int_64)$5 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [11863])
	
.LABEL $label$3
	$3 = $3
	$2 = ($3 + [-80])
	$global$0 = $2
	*($4 + [12]) = $2
	*($4 + [8]) = $2
	*($4 + [16]) = ($3 + [-4])
	*($4 + [24]) = ($4 + [8])
	*($4 + [40]) = $7
	*($4 + [44]) = $6
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [48]) = ($1 + [48])
	*($4 + [52]) = ($1 + [56])
	*($4 + [56]) = ($1 + [64])
	CALL $174(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [84]), (int_64)0, $2, [76])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($4 + [64])
}

void .FUNC $192 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [196]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	*($1 + [184]) = *(*($3))
	$6 = *($1)
	$3 = $4
	$4 = ($3 + [-192])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-15])
	*($5 + [24]) = ($5 + [8])
	CALL $166($1, ($5 + [24]))
	CALL db_update_i64(*($1 + [200]), $2, $4, [177])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [32])
}

void .FUNC $193 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [196]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	*($1 + [188]) = *(*($3))
	$6 = *($1)
	$3 = $4
	$4 = ($3 + [-192])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-15])
	*($5 + [24]) = ($5 + [8])
	CALL $166($1, ($5 + [24]))
	CALL db_update_i64(*($1 + [200]), $2, $4, [177])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [32])
}

void .FUNC $190 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$6 = *($1 + [8])
	CALL $112($1, (*(*($3) + [4]) + [160]))
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)*($1) > (int_64)-1) ){ goto $label$3 }
	CALL prints([11922])
	CALL $121(($5 + [32]), (int_64)0, *(*($3 + [4])))
	*(($1 + [8])) = *((($5 + [32]) + [8]))
	*($1) = *($5 + [32])
	
.LABEL $label$3
	if ( ((int_64)$6 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)) ){ goto $label$4 }
	CALL eosio_assert([0], [11863])
	
.LABEL $label$4
	$3 = $4
	$4 = ($3 + [-48])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-8])
	*($5 + [24]) = ($5 + [8])
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [16])
	*($5 + [40]) = ($1 + [32])
	CALL $99(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$5
	$global$0 = ($5 + [48])
}

void .FUNC $191 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [196]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11766])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [11812])
	
.LABEL $label$2
	$5 = *($1)
	$6 = ($1 + [160])
	CALL $112($6, $6)
	if ( ((int_64)$5 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [11863])
	
.LABEL $label$3
	$6 = $3
	$3 = ($6 + [-192])
	$global$0 = $3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($6 + [-15])
	*($4 + [24]) = ($4 + [8])
	CALL $166($1, ($4 + [24]))
	CALL db_update_i64(*($1 + [200]), $2, $3, [177])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}