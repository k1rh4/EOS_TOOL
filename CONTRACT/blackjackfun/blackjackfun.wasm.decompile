(data (i32.const 4) "\00h\00\00")
(data (i32.const 16) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 80) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 144) "cannot pass end iterator to erase\00")
(data (i32.const 192) "cannot increment end iterator\00")
(data (i32.const 224) "object passed to modify is not in multi_index\00")
(data (i32.const 272) "cannot modify objects in table of another contract\00")
(data (i32.const 336) "attempt to subtract asset with different symbol\00")
(data (i32.const 384) "subtraction underflow\00")
(data (i32.const 416) "subtraction overflow\00")
(data (i32.const 448) "updater cannot change primary key when modifying an object\00")
(data (i32.const 512) "write\00")
(data (i32.const 528) "no enough balance\00")
(data (i32.const 560) "cant not found account\00")
(data (i32.const 592) "object passed to erase is not in multi_index\00")
(data (i32.const 640) "cannot erase objects in table of another contract\00")
(data (i32.const 704) "attempt to remove object that was not in multi_index\00")
(data (i32.const 768) "error reading iterator\00")
(data (i32.const 800) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 864) "invalid symbol name\00")
(data (i32.const 896) "read\00")
(data (i32.const 912) "attempt to add asset with different symbol\00")
(data (i32.const 960) "addition underflow\00")
(data (i32.const 992) "addition overflow\00")
(data (i32.const 1024) "cannot create objects in table of another contract\00")
(data (i32.const 1088) "invalid capacity\00")
(data (i32.const 1120) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1184) "active\00")
(data (i32.const 1200) "banker\00")
(data (i32.const 1216) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1280) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1328) "get\00")
(data (i32.const 1344) "player\00")
(data (i32.const 1360) "invalid role\00")
(data (i32.const 1376) "cannot find room\00")
(data (i32.const 1408) "room is full\00")
(data (i32.const 1424) "player has already in the room\00")
(data (i32.const 1456) "there is a banker in the room\00")
(data (i32.const 1488) "deposit error\00")
(data (i32.const 1504) "no banker in the room\00")
(data (i32.const 1536) "invalid token_contract\00")
(data (i32.const 1568) "invalid token_symbol\00")
(data (i32.const 1600) "player is not in the room\00")
(data (i32.const 1632) "invalid quantity\00")
(data (i32.const 1664) "eosio.token\00")
(data (i32.const 1680) "chessgameeos\00")
(data (i32.const 1696) "deposit\00")
(data (i32.const 1712) "invalid token\00")
(data (i32.const 1728) "transfer\00")
(data (i32.const 10144) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$10 (param i32)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$13 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$14 (param i32)))
(import "env" "memcpy" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$18 (param i64)))
(import "env" "require_auth2" (func $fimport$19 (param i64 i64)))
(import "env" "send_inline" (func $fimport$20 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z13num_to_stringy" (func $5))
(export "_ZN9blackjackC2Ey" (func $6))
(export "_ZN9blackjack11sub_balanceEyyN5eosio5assetE" (func $7))
(export "_ZN9blackjack11add_balanceEyyN5eosio5assetE" (func $12))
(export "_ZN9blackjack10createroomENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEmS6_S6_xxS6_S6_" (func $13))
(export "_ZN9blackjack8joinroomENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_yS6_S6_xS6_S6_" (func $37))
(export "_ZN9blackjack9leaveroomENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEy" (func $39))
(export "_ZN9blackjack13createroomlogENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_S6_S6_S6_" (func $42))
(export "_ZN9blackjack11joinroomlogENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_S6_S6_S6_S6_S6_S6_" (func $43))
(export "_ZN9blackjack4testEv" (func $44))
(export "_ZN9blackjack10clear_dataEv" (func $45))
(export "_ZN9blackjack11on_transferERKN5eosio8currency8transferEy" (func $47))
(export "_ZN9blackjack5applyEyy" (func $48))
(export "apply" (func $70))
(export "malloc" (func $71))
(export "free" (func $74))
(export "memcmp" (func $85))
(export "strlen" (func $86))
(table $0 7 7 anyfunc)
(elem (i32.const 0) $87 $13 $43 $39 $44 $42 $37)



void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [224])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [272])
	$4 = *($1)
	$8 = *(*($3))
	*(($10 = $9) + [8]) = *(*(($3 + [4])))
	*($10) = $8
	$3 = ($1 + [48])
	$5 = *($3)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [52]))) ){ goto $label$2 }
	*($5) = *($10)
	*(($5 + [8])) = *(($10 + [8]))
	*($3) = (*($3) + [16])
	$3 = ($1 + [44])
	goto $label$1 
	
.LABEL $label$2
	$3 = ($1 + [44])
	CALL $31($3, $10)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [448])
	$6 = *($3)
	$5 = *(($1 + [48]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	$3 = [44]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$3 = ((((int_32)uint_32(($7 + [-16]) >> [4]) * (int_32)[12]) + $3) + [12])
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$9 = CALL malloc($3)
	goto $label$5 
	
.LABEL $label$6
	$9 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$5
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $3)
	CALL $32($10, $1)
	CALL db_update_i64(*($1 + [60]), $2, $9, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL free($9)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $49 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [800])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [864])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $69($6, $0)
	if ( ($1 <= [513]) ){ goto $label$8 }
	CALL free($2)
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
}

void .FUNC _ZN9blackjack5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [144])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1728]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $49(($9 + [96]))
	CALL _ZN9blackjack11on_transferERKN5eosio8currency8transferEy($0, ($9 + [96]), $1)
	if ( ((*($9 + [128]) & [1]) == 0) ){ goto $label$7 }
	CALL $76(*(($9 + [136])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_64)$2 > (int_64)5031766165184357195) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)-8462908706935275520) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)-3841130677495922688) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)5031766165184348160) ){ goto $label$7 }
	*($9 + [92]) = [0]
	*($9 + [88]) = [1]
	*($9) = *($9 + [88])
	CALL $50($0, $9)
	goto $label$7 
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)5031766165184357196) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)9015427804644245504) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)9015427804653492224) ){ goto $label$7 }
	*($9 + [60]) = [0]
	*($9 + [56]) = [2]
	*($9 + [32 align=4]) = *($9 + [56])
	CALL $54($0, ($9 + [32]))
	goto $label$7 
	
.LABEL $label$12
	*($9 + [76]) = [0]
	*($9 + [72]) = [3]
	*($9 + [16 align=4]) = *($9 + [72])
	CALL $52($0, ($9 + [16]))
	goto $label$7 
	
.LABEL $label$11
	*($9 + [52]) = [0]
	*($9 + [48]) = [4]
	*($9 + [40 align=4]) = *($9 + [48])
	CALL $55($0, ($9 + [40]))
	goto $label$7 
	
.LABEL $label$10
	*($9 + [68]) = [0]
	*($9 + [64]) = [5]
	*($9 + [24 align=4]) = *($9 + [64])
	CALL $53($0, ($9 + [24]))
	goto $label$7 
	
.LABEL $label$9
	*($9 + [84]) = [0]
	*($9 + [80]) = [6]
	*($9 + [8 align=4]) = *($9 + [80])
	CALL $51($0, ($9 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [144])
}

void .FUNC _ZN9blackjack11joinroomlogENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_S6_S6_S6_S6_S6_S6_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	CALL require_auth(*($0))
}

void .FUNC _ZN9blackjack13createroomlogENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_S6_S6_S6_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	CALL require_auth(*($0))
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [4])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $76($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$1 }
	$5 = [268435455]
	if ( ((uint_32)int_32($8 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [3])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[268435456]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [4])
	$5 = CALL $75($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [4])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [4])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [4]))
	return (unreachable)
	
.LABEL $label$1
	CALL $83($0)
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [224])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [272])
	$6 = [44]
	$4 = *($1)
	$7 = $4
	$3 = *($3)
	$8 = ($1 + [44])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$1 }
	CALL $41($8, *($3), *($3 + [4]))
	$7 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$7), [448])
	$8 = *($8)
	$3 = *(($1 + [48]))
	$5 = ($3 - $8)
	$7 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$3 }
	$6 = ((((int_32)uint_32(($5 + [-16]) >> [4]) * (int_32)[12]) + $6) + [12])
	
.LABEL $label$3
	if ( ($6 <= [513]) ){ goto $label$5 }
	$8 = CALL malloc($6)
	goto $label$4 
	
.LABEL $label$5
	$8 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$4
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL $32($9, $1)
	CALL db_update_i64(*($1 + [60]), $2, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$6 }
	CALL free($8)
	
.LABEL $label$6
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [16])
}

void .FUNC _ZN9blackjack11on_transferERKN5eosio8currency8transferEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	CALL require_auth(*($1))
	$7 = *($0)
	if ( ((int_64)*($1) == (int_64)$7) ){ goto $label$1 }
	if ( ((int_64)*($1 + [8]) != (int_64)$7) ){ goto $label$1 }
	$4 = [0]
	if ( ((uint_64)((int_64)*($1 + [16]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$7 = (uint_64)*(($1 + [24])) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	$3 = ($1 + [16])
	CALL eosio_assert($4, [1632])
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [1664]
	$8 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$12 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$4 = ($4 + [165])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$5 = ($5 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$7 }
	if ( ((int_64)$8 != (int_64)$2) ){ goto $label$15 }
	if ( ((int_64)*(($1 + [24])) == (int_64)1397703940) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (int_64)0
	$9 = (int_64)59
	$5 = [1680]
	$8 = (int_64)0
	
.LOOP $label$16:
	$6 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$17 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$4 = ($4 + [165])
	goto $label$18 
	
.LABEL $label$19
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$17
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$6 | (int_64)$8)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$8 != (int_64)$2) ){ goto $label$13 }
	if ( ((int_64)*(($1 + [24])) != (int_64)1162298116) ){ goto $label$13 }
	
.LABEL $label$14
	$5 = *($1 + [32])
	$4 = CALL strlen([1696])
	if ( ((int_32)$4 != (int_32)( *(($1 + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$1 }
	if ( CALL $79(($1 + [32]), [0], [-1], [1696], $4) ){ goto $label$1 }
	*(($5 = (($10 + [16]) + [12]))) = *(($3 + [12]))
	*(($4 = (($10 + [16]) + [8]))) = *(($3 + [8]))
	*($10 + [16]) = *($3)
	*($10 + [20]) = *(($3 + [4]))
	$7 = *($1)
	*(($10 + [12])) = *($5)
	*(($10 + [8])) = *($4)
	*($10 + [4]) = *($10 + [20])
	*($10) = *($10 + [16])
	CALL _ZN9blackjack11add_balanceEyyN5eosio5assetE($0, $7, $2, $10)
	goto $label$1 
	
.LABEL $label$13
	CALL eosio_assert([0], [1712])
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [32])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [640])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [704])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [44])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [48])) = $6
	CALL $76($6)
	
.LABEL $label$7
	CALL $76($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [44])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [48])) = $6
	CALL $76($6)
	
.LABEL $label$10
	CALL $76($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
}

void .FUNC _ZN9blackjack10clear_dataEv (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	*((($6 + [48]) + [32])) = [0]
	*($6 + [64]) = (int_64)-1
	$2 = *($0)
	*($6 + [48]) = $2
	*($6 + [56]) = $2
	*($6 + [72]) = (int_64)0
	$5 = CALL db_lowerbound_i64($2, $2, (int_64)-4816269947984412672, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $14(($6 + [48]), $5)
	
.LOOP $label$2:
	CALL eosio_assert([1], [144])
	CALL eosio_assert([1], [192])
	$5 = [0]
	$1 = CALL db_next_i64(*($4 + [60]), ($6 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $14(($6 + [48]), $1)
	
.LABEL $label$3
	CALL $46(($6 + [48]), $4)
	$4 = $5
	if ( $5 ){ goto $label$2 }
	
.LABEL $label$1
	*((($6 + [8]) + [32])) = [0]
	*($6 + [24]) = (int_64)-1
	$2 = *($0)
	*($6 + [8]) = $2
	*($6 + [16]) = $2
	*($6 + [32]) = (int_64)0
	$5 = CALL db_lowerbound_i64($2, $2, (int_64)3607749779137757184, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $8(($6 + [8]), $5)
	
.LOOP $label$5:
	CALL eosio_assert([1], [144])
	CALL eosio_assert([1], [192])
	$5 = [0]
	$1 = CALL db_next_i64(*($4 + [36]), ($6 + [88]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$6 }
	$5 = CALL $8(($6 + [8]), $1)
	
.LABEL $label$6
	CALL $9(($6 + [8]), $4)
	$4 = $5
	if ( $5 ){ goto $label$5 }
	
.LABEL $label$4
	$1 = *($6 + [32])
	if ( ($1 == 0) ){ goto $label$7 }
	$0 = ($6 + [36])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $76($4)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$10 }
	$5 = *(($6 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$5 = $1
	
.LABEL $label$8
	*($0) = $1
	CALL $76($5)
	
.LABEL $label$7
	$0 = *($6 + [72])
	if ( ($0 == 0) ){ goto $label$12 }
	$3 = ($6 + [76])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$14 }
	
.LOOP $label$15:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$16 }
	$1 = *($4 + [44])
	if ( ($1 == 0) ){ goto $label$17 }
	*(($4 + [48])) = $1
	CALL $76($1)
	
.LABEL $label$17
	CALL $76($4)
	
.LABEL $label$16
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$15 }
	$5 = *(($6 + [72]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $0
	
.LABEL $label$13
	*($3) = $0
	CALL $76($5)
	
.LABEL $label$12
	*([0] + [4]) = ($6 + [96])
}

void .FUNC _ZN9blackjack4testEv (int_32 $0)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [768])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $75([48])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [800])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [864])
	*($4 + [32]) = $0
	CALL $10(($8 + [32]), $4)
	*($4 + [36]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [36])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $11($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $76($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [640])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [704])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $76($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $76($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

int_32 .FUNC _ZN9blackjackC2Ey (int_32 $0, int_64 $1)
{
	*($0) = $1
	return $0
}

void .FUNC _ZN9blackjack11sub_balanceEyyN5eosio5assetE (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	*(($9 + [40])) = [0]
	*($9 + [24]) = (int_64)-1
	*($9 + [32]) = (int_64)0
	$4 = *($0)
	*($9 + [8]) = $4
	*($9 + [16]) = $4
	$8 = CALL db_find_i64($4, $4, (int_64)3607749779137757184, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $8(($9 + [8]), $8)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)($9 + [8])), [16])
	
.LOOP $label$6:
	if ( ((int_64)*($8 + [8]) != (int_64)$2) ){ goto $label$7 }
	$6 = ($8 + [24])
	$4 = *($6)
	if ( ((int_64)$4 == (int_64)*(($3 + [8]))) ){ goto $label$4 }
	
.LABEL $label$7
	CALL eosio_assert([1], [192])
	$8 = CALL db_next_i64(*($8 + [36]), ($9 + [48]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $8(($9 + [8]), $8)
	goto $label$6 
	
.LABEL $label$5
	CALL eosio_assert([0], [560])
	goto $label$3 
	
.LABEL $label$4
	CALL eosio_assert([1], [80])
	$2 = *($3)
	if ( ((int_64)*($8 + [16]) != (int_64)$2) ){ goto $label$8 }
	CALL eosio_assert([1], [144])
	CALL eosio_assert([1], [192])
	$3 = CALL db_next_i64(*($8 + [36]), ($9 + [48]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$9 }
	CALL $8(($9 + [8]), $3)
	
.LABEL $label$9
	CALL $9(($9 + [8]), $8)
	$6 = *($9 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$8
	$3 = ($8 + [24])
	CALL eosio_assert(((int_64)*($3) == (int_64)$4), [80])
	$5 = ($8 + [16])
	if ( ((int_64)*($5) != (int_64)$2) ){ goto $label$10 }
	$7 = *($0)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)($9 + [8])), [224])
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)CALL $fimport$2()), [272])
	$1 = *($8)
	CALL eosio_assert(((int_64)$4 == (int_64)*($3)), [336])
	$2 = (int_64)
	*($8 + [16]) = $2(*($8 + [16]) - $2))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [384])
	CALL eosio_assert(((int_64)*($8 + [16]) < (int_64)4611686018427387904), [416])
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [448])
	CALL eosio_assert([1], [512])
	CALL memcpy(($9 + [48]), $8, [8])
	CALL eosio_assert([1], [512])
	CALL memcpy((($9 + [48]) | [8]), ($8 + [8]), [8])
	CALL eosio_assert([1], [512])
	CALL memcpy((($9 + [48]) + [16]), $5, [8])
	CALL eosio_assert([1], [512])
	CALL memcpy((($9 + [48]) + [24]), $6, [8])
	CALL db_update_i64(*($8 + [36]), $7, ($9 + [48]), [32])
	$8 = (($9 + [8]) + [16])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$3 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$6 = *($9 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$10
	CALL eosio_assert([0], [528])
	$6 = *($9 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = *($9 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$0 = ($9 + [36])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$12 }
	
.LOOP $label$13:
	$8 = ($8 + [-24])
	$3 = *($8)
	*($8) = [0]
	if ( ($3 == 0) ){ goto $label$14 }
	CALL $76($3)
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$13 }
	$8 = *(($9 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$8 = $6
	
.LABEL $label$11
	*($0) = $6
	CALL $76($8)
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [80])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _Z13num_to_stringy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [4])
	
.LOOP $label$2:
	*((($4 + [14]) + [1])) = [0]
	*($4 + [14]) = ((int_64)((uint_64)$1 % (uint_64)(int_64)10) | (int_64)48)
	CALL $80($4, ($4 + [14]), $0)
	if ( (*($0) & [1]) ){ goto $label$4 }
	*($0) = [0]
	goto $label$3 
	
.LABEL $label$4
	*(*(($0 + [8]))) = [0]
	*($2) = [0]
	
.LABEL $label$3
	CALL $78($0, [0])
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	$3 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = ((uint_64)$1 / (uint_64)(int_64)10)
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [768])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $75([72])) + [32]) = (int_64)1398362884
	*($4 + [24]) = (int_64)0
	CALL eosio_assert([1], [800])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [864])
	*($4 + [52]) = [0]
	*($4 + [44 align=4]) = (int_64)0
	*($4 + [56]) = $0
	CALL $34(($8 + [32]), $4)
	*($4 + [60]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [60])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $17($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = *($5 + [44])
	if ( ($6 == 0) ){ goto $label$15 }
	*(($5 + [48])) = $6
	CALL $76($6)
	
.LABEL $label$15
	CALL $76($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [60]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1280])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-4816269947984412672)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1216])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1216])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $14(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$5 = *($0 + [4])
	*($1) = *(*($5))
	*($1 + [8]) = *(*($5 + [4]))
	$2 = *($0)
	*($1 + [16]) = *(*($5 + [8]))
	$8 = *($5 + [12])
	*($1 + [24]) = *($8)
	*(($1 + [32])) = *(($8 + [8]))
	*($1 + [40]) = *(*($5 + [16]))
	$5 = *($5 + [4])
	*(($8 = $9) + [8]) = [1]
	*($8) = *($5)
	$5 = ($1 + [48])
	$7 = *($5)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [52]))) ){ goto $label$2 }
	*($7) = *($8)
	*(($7 + [8])) = *(($8 + [8]))
	$7 = (*($5) + [16])
	*($5) = $7
	$4 = ($1 + [44])
	goto $label$1 
	
.LABEL $label$2
	$4 = ($1 + [44])
	CALL $31($4, $8)
	$7 = *($5)
	
.LABEL $label$1
	$4 = *($4)
	$3 = ($7 - $4)
	$6 = (CASTING uint_64)(uint_32 int_32($3 >> [4]))
	$5 = [44]
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$4 }
	$5 = ((((int_32)uint_32(($3 + [-16]) >> [4]) * (int_32)[12]) + $5) + [12])
	
.LABEL $label$4
	if ( ($5 <= [513]) ){ goto $label$6 }
	$7 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$5
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $5)
	CALL $32($8, $1)
	$6 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)-4816269947984412672, *(*($0 + [8])), $6, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($7)
	
.LABEL $label$7
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $75(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $83($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [44])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [48])) = $6
	CALL $76($6)
	
.LABEL $label$11
	CALL $76($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $76($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [896])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [896])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [896])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [896])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $75(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $83($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $76($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $76($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN9blackjack11add_balanceEyyN5eosio5assetE (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [96])
	*([0] + [4]) = $10
	$9 = [0]
	*(($10 + [40])) = [0]
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	$8 = *($0)
	*($10 + [8]) = $8
	*($10 + [16]) = $8
	$7 = CALL db_find_i64($8, $8, (int_64)3607749779137757184, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$7 = CALL $8(($10 + [8]), $7)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)($10 + [8])), [16])
	if ( ((int_64)*($7 + [8]) != (int_64)$2) ){ goto $label$5 }
	$6 = ($7 + [8])
	$8 = *(($3 + [8]))
	
.LOOP $label$6:
	$5 = ($7 + [24])
	$4 = *($5)
	if ( ((int_64)$4 == (int_64)$8) ){ goto $label$4 }
	CALL eosio_assert([1], [192])
	$7 = CALL db_next_i64(*($7 + [36]), ($10 + [64]))
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$5 }
	$7 = CALL $8(($10 + [8]), $7)
	$6 = ($7 + [8])
	if ( ((int_64)*($7 + [8]) == (int_64)$2) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = *($0)
	CALL eosio_assert(((int_64)*($10 + [8]) == (int_64)CALL $fimport$2()), [1024])
	*(($7 = CALL $75([48])) + [24]) = (int_64)1398362884
	*($7 + [16]) = (int_64)0
	CALL eosio_assert([1], [800])
	$0 = ($7 + [24])
	$5 = ($7 + [16])
	$8 = (int_64)5462355
	
.LOOP $label$8:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$6 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert($6, [864])
	*($7 + [32]) = ($10 + [8])
	*($7 + [8]) = $2
	*($7) = $1
	*(($5 + [12])) = *(($3 + [12]))
	*(($5 + [8])) = *(($3 + [8]))
	*(($5 + [4])) = *(($3 + [4]))
	*($5) = *($3)
	CALL eosio_assert([1], [512])
	CALL memcpy(($10 + [64]), $7, [8])
	CALL eosio_assert([1], [512])
	CALL memcpy((($10 + [64]) | [8]), ($7 + [8]), [8])
	CALL eosio_assert([1], [512])
	CALL memcpy((($10 + [64]) + [16]), $5, [8])
	CALL eosio_assert([1], [512])
	CALL memcpy(($10 + [88]), $0, [8])
	$8 = *($7)
	$6 = CALL db_store_i64(*((($10 + [8]) + [8])), (int_64)3607749779137757184, $4, $8, ($10 + [64]), [32])
	*($7 + [36]) = $6
	$9 = (($10 + [8]) + [16])
	if ( (uint_64)($8 <= *($9)) ){ goto $label$11 }
	*($9) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($10 + [56]) = $7
	$8 = *($7)
	*($10 + [64]) = $8
	*($10 + [52]) = $6
	$5 = ($10 + [36])
	$9 = *($5)
	if ( ((uint_32)$9 >= (uint_32)*((($10 + [8]) + [32]))) ){ goto $label$13 }
	*($9 + [8]) = $8
	*($9 + [16]) = $6
	*($10 + [56]) = [0]
	*($9) = $7
	*($5) = ($9 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $11(($10 + [32]), ($10 + [56]), ($10 + [64]), ($10 + [52]))
	
.LABEL $label$12
	$9 = *($10 + [56])
	*($10 + [56]) = [0]
	if ( ($9 == 0) ){ goto $label$3 }
	CALL $76($9)
	goto $label$3 
	
.LABEL $label$4
	$2 = *($0)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)($10 + [8])), [224])
	CALL eosio_assert(((int_64)*($10 + [8]) == (int_64)CALL $fimport$2()), [272])
	$8 = *($7)
	CALL eosio_assert(((int_64)$4 == (int_64)*(($7 + [24]))), [912])
	$4 = ((int_64)*($7 + [16]) + (int_64)*($3))
	*($7 + [16]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [960])
	CALL eosio_assert(((int_64)*($7 + [16]) < (int_64)4611686018427387904), [992])
	CALL eosio_assert(((int_64)$8 == (int_64)*($7)), [448])
	CALL eosio_assert([1], [512])
	CALL memcpy(($10 + [64]), $7, [8])
	CALL eosio_assert([1], [512])
	CALL memcpy((($10 + [64]) | [8]), $6, [8])
	CALL eosio_assert([1], [512])
	CALL memcpy((($10 + [64]) + [16]), ($7 + [16]), [8])
	CALL eosio_assert([1], [512])
	CALL memcpy((($10 + [64]) + [24]), $5, [8])
	CALL db_update_i64(*($7 + [36]), $2, ($10 + [64]), [32])
	$9 = (($10 + [8]) + [16])
	if ( (uint_64)($8 <= *($9)) ){ goto $label$3 }
	*($9) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$6 = *($10 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = *($10 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($10 + [36])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$15 }
	
.LOOP $label$16:
	$9 = ($9 + [-24])
	$7 = *($9)
	*($9) = [0]
	if ( ($7 == 0) ){ goto $label$17 }
	CALL $76($7)
	
.LABEL $label$17
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$16 }
	$9 = *(($10 + [32]))
	goto $label$14 
	
.LABEL $label$15
	$9 = $6
	
.LABEL $label$14
	*($5) = $6
	CALL $76($9)
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [96])
}

void .FUNC _ZN9blackjack10createroomENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEmS6_S6_xxS6_S6_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_64 $5, int_64 $6, int_32 $7, int_32 $8)
{
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	$19 = (*([0] + [4]) - [448])
	*([0] + [4]) = $19
	*($19 + [328]) = $2
	if ( (*($1) & [1]) ){ goto $label$2 }
	$13 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$13 = *($1 + [8])
	
.LABEL $label$1
	$12 = [-1]
	
.LOOP $label$3:
	$11 = ($13 + $12)
	$10 = ($12 + [1])
	$12 = $10
	if ( *(($11 + [1])) ){ goto $label$3 }
	$16 = (CASTING uint_64)(uint_32 $10)
	$14 = (int_64)0
	$18 = (int_64)59
	$15 = (int_64)0
	
.LOOP $label$4:
	$17 = (int_64)0
	if ( ((uint_64)$14 >= (uint_64)$16) ){ goto $label$5 }
	$12 = *($13)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$12 = ($12 + [165])
	goto $label$6 
	
.LABEL $label$7
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$9 }
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$17 = ((int_64)$17 & (int_64)15)
	
.LABEL $label$8
	$13 = ($13 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$17 | (int_64)$15)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$4 }
	*($19 + [320]) = $15
	if ( (*($3) & [1]) ){ goto $label$11 }
	$13 = ($3 + [1])
	goto $label$10 
	
.LABEL $label$11
	$13 = *($3 + [8])
	
.LABEL $label$10
	$12 = [-1]
	
.LOOP $label$12:
	$11 = ($13 + $12)
	$10 = ($12 + [1])
	$12 = $10
	if ( *(($11 + [1])) ){ goto $label$12 }
	$9 = (CASTING uint_64)(uint_32 $10)
	$14 = (int_64)0
	$18 = (int_64)59
	$16 = (int_64)0
	
.LOOP $label$13:
	$17 = (int_64)0
	if ( ((uint_64)$14 >= (uint_64)$9) ){ goto $label$14 }
	$12 = *($13)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$12 = ($12 + [165])
	goto $label$15 
	
.LABEL $label$16
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$18 }
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	goto $label$17 
	
.LABEL $label$18
	$17 = ((int_64)$17 & (int_64)15)
	
.LABEL $label$17
	$13 = ($13 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$13 }
	*($19 + [312]) = $16
	if ( (*($4) & [1]) ){ goto $label$20 }
	$12 = ($4 + [1])
	goto $label$19 
	
.LABEL $label$20
	$12 = *($4 + [8])
	
.LABEL $label$19
	$13 = [-1]
	
.LOOP $label$21:
	$11 = ($12 + $13)
	$10 = ($13 + [1])
	$13 = $10
	if ( *(($11 + [1])) ){ goto $label$21 }
	$17 = (int_64)0
	if ( ($10 == 0) ){ goto $label$22 }
	$18 = (CASTING uint_64)(uint_32 $10)
	$14 = (int_64)8
	$17 = (int_64)0
	
.LOOP $label$23:
	$13 = *($12)
	if ( ((uint_32)(($13 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$17 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$14 & (int_64)4294967288)) | (int_64)$17)
	
.LABEL $label$24
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)8)
	$18 = ((int_64)$18 + (int_64)-1)
	if ( ((int_64)$18 != (int_64)0) ){ goto $label$23 }
	
.LABEL $label$22
	$9 = ((int_64)$17 | (int_64)4)
	*($19 + [304]) = $9
	*($19 + [296]) = $5
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [800])
	$13 = [0]
	$14 = (uint_64)$17 >> (uint_64)(int_64)8
	$18 = $14)
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	
.LOOP $label$29:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$29 }
	
.LABEL $label$28
	$12 = [1]
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$12 = [0]
	
.LABEL $label$25
	CALL eosio_assert($12, [864])
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [800])
	$13 = [0]
	
.LOOP $label$32:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$33 }
	
.LOOP $label$34:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$31 }
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$34 }
	
.LABEL $label$33
	$12 = [1]
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$12 = [0]
	
.LABEL $label$30
	CALL eosio_assert($12, [864])
	CALL require_auth($15)
	CALL eosio_assert((($2 + [-2]) <= [3]), [1088])
	*($19 + [288]) = $9
	*(($19 + [16])) = $9
	*($19 + [280]) = $6
	*($19 + [8]) = $6
	CALL _ZN9blackjack11sub_balanceEyyN5eosio5assetE($0, $15, $16, ($19 + [8]))
	$13 = [0]
	*(($19 + [272])) = [0]
	*($19 + [256]) = (int_64)-1
	*($19 + [264]) = (int_64)0
	$14 = *($0)
	*($19 + [240]) = $14
	*($19 + [248]) = $14
	$18 = (int_64)0
	$12 = CALL db_lowerbound_i64($14, $14, (int_64)-4816269947984412672, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$35 }
	CALL $14(($19 + [240]), $12)
	*($19 + [340]) = [0]
	*($19 + [336]) = ($19 + [240])
	$14 = *(*(CALL $15(($19 + [336])) + [4]))
	$18 = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$35
	*(($12 = ($19 + [256]))) = $18
	CALL eosio_assert((uint_64)($18 <= (int_64)-2), [1120])
	$14 = *($12)
	*($19 + [232]) = ( (int_64)1 ? $14 : (int_64)($14 == 0) )
	$14 = *($0)
	*($19 + [340]) = ($19 + [320])
	*($19 + [336]) = ($19 + [232])
	*($19 + [344]) = ($19 + [312])
	*($19 + [348]) = ($19 + [296])
	*($19 + [352]) = ($19 + [328])
	*($19 + [152]) = $14
	CALL eosio_assert(((int_64)*($19 + [240]) == (int_64)CALL $fimport$2()), [1024])
	*($19 + [436]) = ($19 + [336])
	*($19 + [432]) = ($19 + [240])
	*($19 + [440]) = ($19 + [152])
	*(($12 = CALL $75([72])) + [32]) = (int_64)1398362884
	*($12 + [24]) = (int_64)0
	CALL eosio_assert([1], [800])
	$14 = (int_64)5462355
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$39 }
	
.LOOP $label$40:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$37 }
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$40 }
	
.LABEL $label$39
	$11 = [1]
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$11 = [0]
	
.LABEL $label$36
	CALL eosio_assert($11, [864])
	*($12 + [52]) = [0]
	*($12 + [44 align=4]) = (int_64)0
	*($12 + [56]) = ($19 + [240])
	CALL $16(($19 + [432]), $12)
	*($19 + [136]) = $12
	$14 = *($12)
	*($19 + [432]) = $14
	$11 = *($12 + [60])
	*($19 + [120]) = $11
	$10 = ($19 + [268])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($19 + [272]))) ){ goto $label$42 }
	*($13 + [8]) = $14
	*($13 + [16]) = $11
	*($19 + [136]) = [0]
	*($13) = $12
	*($10) = ($13 + [24])
	goto $label$41 
	
.LABEL $label$42
	CALL $17(($19 + [264]), ($19 + [136]), ($19 + [432]), ($19 + [120]))
	
.LABEL $label$41
	$13 = *($19 + [136])
	*($19 + [136]) = [0]
	if ( ($13 == 0) ){ goto $label$43 }
	$12 = *($13 + [44])
	if ( ($12 == 0) ){ goto $label$44 }
	*(($13 + [48])) = $12
	CALL $76($12)
	
.LABEL $label$44
	CALL $76($13)
	
.LABEL $label$43
	$16 = *($0)
	$14 = (int_64)0
	$17 = (int_64)59
	$13 = [1184]
	$15 = (int_64)0
	
.LOOP $label$45:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$50 }
	$12 = *($13)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$49 }
	$12 = ($12 + [165])
	goto $label$48 
	
.LABEL $label$50
	$18 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$49
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$48
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$47
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$46
	$13 = ($13 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$18 | (int_64)$15)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$45 }
	*($19 + [344]) = $15
	*($19 + [336]) = $16
	*($19 + [160]) = [0]
	$14 = *($19 + [232])
	*($19 + [152]) = (int_64)0
	if ( (int_64)($14 == 0) ){ goto $label$51 }
	
.LOOP $label$52:
	*((($19 + [334]) + [1])) = [0]
	*($19 + [334]) = ((int_64)((uint_64)$14 % (uint_64)(int_64)10) | (int_64)48)
	CALL $80(($19 + [432]), ($19 + [334]), ($19 + [152]))
	if ( (*($19 + [152]) & [1]) ){ goto $label$54 }
	*($19 + [152]) = [0]
	goto $label$53 
	
.LABEL $label$54
	*(*((($19 + [152]) + [8]))) = [0]
	*($19 + [156]) = [0]
	
.LABEL $label$53
	CALL $78(($19 + [152]), [0])
	*((($19 + [152]) + [8])) = *((($19 + [432]) + [8]))
	*($19 + [152]) = *($19 + [432])
	$13 = ((uint_64)$14 > (uint_64)(int_64)9)
	$14 = ((uint_64)$14 / (uint_64)(int_64)10)
	if ( $13 ){ goto $label$52 }
	
.LABEL $label$51
	*($19 + [140 align=4]) = (int_64)0
	$13 = *($19 + [328])
	*($19 + [136]) = [0]
	if ( ($13 == 0) ){ goto $label$55 }
	$14 = (CASTING uint_64)(uint_32 $13)
	
.LOOP $label$56:
	*((($19 + [334]) + [1])) = [0]
	*($19 + [334]) = ((int_64)((uint_64)$14 % (uint_64)(int_64)10) | (int_64)48)
	CALL $80(($19 + [432]), ($19 + [334]), ($19 + [136]))
	if ( (*($19 + [136]) & [1]) ){ goto $label$58 }
	*($19 + [136]) = [0]
	goto $label$57 
	
.LABEL $label$58
	*(*((($19 + [136]) + [8]))) = [0]
	*($19 + [140]) = [0]
	
.LABEL $label$57
	CALL $78(($19 + [136]), [0])
	*((($19 + [136]) + [8])) = *((($19 + [432]) + [8]))
	*($19 + [136]) = *($19 + [432])
	$13 = ((uint_64)$14 > (uint_64)(int_64)9)
	$14 = ((uint_64)$14 / (uint_64)(int_64)10)
	if ( $13 ){ goto $label$56 }
	
.LABEL $label$55
	*($19 + [128]) = [0]
	*($19 + [120]) = (int_64)0
	if ( (int_64)($5 == 0) ){ goto $label$59 }
	
.LOOP $label$60:
	*((($19 + [334]) + [1])) = [0]
	*($19 + [334]) = ((int_64)((uint_64)$5 % (uint_64)(int_64)10) | (int_64)48)
	CALL $80(($19 + [432]), ($19 + [334]), ($19 + [120]))
	if ( (*($19 + [120]) & [1]) ){ goto $label$62 }
	*($19 + [120]) = [0]
	goto $label$61 
	
.LABEL $label$62
	*(*((($19 + [120]) + [8]))) = [0]
	*($19 + [124]) = [0]
	
.LABEL $label$61
	CALL $78(($19 + [120]), [0])
	*((($19 + [120]) + [8])) = *((($19 + [432]) + [8]))
	*($19 + [120]) = *($19 + [432])
	$13 = ((uint_64)$5 > (uint_64)(int_64)9)
	$5 = ((uint_64)$5 / (uint_64)(int_64)10)
	if ( $13 ){ goto $label$60 }
	
.LABEL $label$59
	$13 = (($19 + [152]) + [8])
	*((($19 + [168]) + [8])) = *($13)
	*($19 + [168]) = *($19 + [152])
	*($19 + [152]) = [0]
	*($19 + [156]) = [0]
	*($13) = [0]
	$13 = (($19 + [136]) + [8])
	*(($19 + [188])) = *($13)
	*($19 + [180 align=4]) = *($19 + [136])
	*($19 + [136]) = [0]
	*($19 + [140]) = [0]
	*($13) = [0]
	CALL $84(($19 + [192]), $3)
	CALL $84(($19 + [204]), $4)
	$13 = (($19 + [120]) + [8])
	*(($12 = ($19 + [224]))) = *($13)
	*($13) = [0]
	*($19 + [216]) = *($19 + [120])
	*($19 + [120]) = (int_64)0
	CALL $18($16, ($19 + [336]), ($19 + [168]))
	if ( ((*($19 + [216]) & [1]) == 0) ){ goto $label$63 }
	CALL $76(*($12))
	
.LABEL $label$63
	if ( ((*($19 + [204]) & [1]) == 0) ){ goto $label$64 }
	CALL $76(*(($19 + [212])))
	
.LABEL $label$64
	if ( ((*($19 + [192]) & [1]) == 0) ){ goto $label$65 }
	CALL $76(*(($19 + [200])))
	
.LABEL $label$65
	if ( ((*(($19 + [180])) & [1]) == 0) ){ goto $label$66 }
	CALL $76(*(($19 + [188])))
	
.LABEL $label$66
	if ( ((*($19 + [168]) & [1]) == 0) ){ goto $label$67 }
	CALL $76(*($19 + [176]))
	
.LABEL $label$67
	if ( ((*($19 + [120]) & [1]) == 0) ){ goto $label$68 }
	CALL $76(*(($19 + [128])))
	
.LABEL $label$68
	if ( ((*($19 + [136]) & [1]) == 0) ){ goto $label$69 }
	CALL $76(*(($19 + [144])))
	
.LABEL $label$69
	if ( ((*($19 + [152]) & [1]) == 0) ){ goto $label$70 }
	CALL $76(*(($19 + [160])))
	
.LABEL $label$70
	$15 = *($0)
	$14 = (int_64)0
	$17 = (int_64)59
	$13 = [1184]
	$5 = (int_64)0
	
.LOOP $label$71:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$76 }
	$12 = *($13)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$75 }
	$12 = ($12 + [165])
	goto $label$74 
	
.LABEL $label$76
	$18 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$75
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$74
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$73
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$72
	$13 = ($13 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$5 = ((int_64)$18 | (int_64)$5)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$71 }
	*($19 + [160]) = [0]
	$14 = *($19 + [232])
	*($19 + [152]) = (int_64)0
	if ( (int_64)($14 == 0) ){ goto $label$77 }
	
.LOOP $label$78:
	*((($19 + [334]) + [1])) = [0]
	*($19 + [334]) = ((int_64)((uint_64)$14 % (uint_64)(int_64)10) | (int_64)48)
	CALL $80(($19 + [336]), ($19 + [334]), ($19 + [152]))
	if ( (*($19 + [152]) & [1]) ){ goto $label$80 }
	*($19 + [152]) = [0]
	goto $label$79 
	
.LABEL $label$80
	*(*((($19 + [152]) + [8]))) = [0]
	*($19 + [156]) = [0]
	
.LABEL $label$79
	CALL $78(($19 + [152]), [0])
	*((($19 + [152]) + [8])) = *((($19 + [336]) + [8]))
	*($19 + [152]) = *($19 + [336])
	$13 = ((uint_64)$14 > (uint_64)(int_64)9)
	$14 = ((uint_64)$14 / (uint_64)(int_64)10)
	if ( $13 ){ goto $label$78 }
	
.LABEL $label$77
	*(($19 + [144])) = [0]
	*($19 + [136]) = (int_64)0
	$13 = CALL strlen([1200])
	if ( ((uint_32)$13 >= (uint_32)[-16]) ){ goto $label$81 }
	if ( ((uint_32)$13 >= (uint_32)[11]) ){ goto $label$84 }
	*($19 + [136]) = ($13 << [1])
	$12 = (($19 + [136]) | [1])
	if ( $13 ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$84
	$11 = (($13 + [16]) & [-16])
	$12 = CALL $75($11)
	*($19 + [136]) = ($11 | [1])
	*($19 + [144]) = $12
	*($19 + [140]) = $13
	
.LABEL $label$83
	CALL memcpy($12, [1200], $13)
	
.LABEL $label$82
	*(($12 + $13)) = [0]
	*($19 + [128]) = [0]
	*($19 + [120]) = (int_64)0
	if ( (int_64)($6 == 0) ){ goto $label$85 }
	
.LOOP $label$86:
	*((($19 + [334]) + [1])) = [0]
	*($19 + [334]) = ((int_64)((uint_64)$6 % (uint_64)(int_64)10) | (int_64)48)
	CALL $80(($19 + [336]), ($19 + [334]), ($19 + [120]))
	if ( (*($19 + [120]) & [1]) ){ goto $label$88 }
	*($19 + [120]) = [0]
	goto $label$87 
	
.LABEL $label$88
	*(*((($19 + [120]) + [8]))) = [0]
	*($19 + [124]) = [0]
	
.LABEL $label$87
	CALL $78(($19 + [120]), [0])
	*((($19 + [120]) + [8])) = *((($19 + [336]) + [8]))
	*($19 + [120]) = *($19 + [336])
	$13 = ((uint_64)$6 > (uint_64)(int_64)9)
	$6 = ((uint_64)$6 / (uint_64)(int_64)10)
	if ( $13 ){ goto $label$86 }
	
.LABEL $label$85
	$13 = (($19 + [152]) + [8])
	*(($12 = (($19 + [24]) + [8]))) = *($13)
	*($13) = [0]
	*($19 + [24]) = *($19 + [152])
	*($19 + [152]) = (int_64)0
	CALL $84(($19 + [36]), $1)
	$13 = (($19 + [136]) + [8])
	*(($11 = (($19 + [24]) + [32]))) = *($13)
	*($13) = [0]
	*($19 + [48]) = *($19 + [136])
	*($19 + [136]) = (int_64)0
	CALL $84(($19 + [60]), $3)
	CALL $84(($19 + [72]), $4)
	$13 = (($19 + [120]) + [8])
	*(($10 = (($19 + [24]) + [68]))) = *($13)
	*($13) = [0]
	*($19 + [84 align=4]) = *($19 + [120])
	*($19 + [120]) = (int_64)0
	CALL $84(($19 + [96]), $7)
	CALL $84(($19 + [108]), $8)
	*(($13 = CALL $75([16]))) = $15
	*($13 + [8]) = $5
	$0 = ($13 + [16])
	*($19 + [440]) = $0
	*((($19 + [336]) + [8])) = *($12)
	*($19 + [432]) = $13
	*($19 + [436]) = $0
	*($19 + [340]) = *($19 + [28])
	*($19 + [336]) = *($19 + [24])
	*($19 + [28]) = [0]
	*($19 + [24]) = [0]
	*($12) = [0]
	$13 = (($19 + [24]) + [20])
	*((($19 + [336]) + [20])) = *($13)
	*($19 + [348 align=4]) = *($19 + [36 align=4])
	*($19 + [36]) = [0]
	*((($19 + [24]) + [16])) = [0]
	*($13) = [0]
	*((($19 + [336]) + [32])) = *($11)
	*($19 + [360]) = *($19 + [48])
	*($19 + [48]) = [0]
	*(($19 + [52])) = [0]
	*($11) = [0]
	$13 = (($19 + [24]) + [44])
	*((($19 + [336]) + [44])) = *($13)
	*($19 + [372 align=4]) = *($19 + [60 align=4])
	*($19 + [60]) = [0]
	*(($19 + [64])) = [0]
	*($13) = [0]
	$13 = (($19 + [24]) + [56])
	*((($19 + [336]) + [56])) = *($13)
	*($19 + [384]) = *($19 + [72])
	*($19 + [72]) = [0]
	*(($19 + [76])) = [0]
	*($13) = [0]
	*((($19 + [336]) + [68])) = *($10)
	*($19 + [396 align=4]) = *($19 + [84 align=4])
	*($19 + [84]) = [0]
	*(($19 + [88])) = [0]
	*($10) = [0]
	$13 = (($19 + [24]) + [80])
	*((($19 + [336]) + [80])) = *($13)
	*($19 + [408]) = *($19 + [96])
	*($19 + [96]) = [0]
	*(($19 + [100])) = [0]
	*($13) = [0]
	$13 = (($19 + [24]) + [92])
	*((($19 + [336]) + [92])) = *($13)
	*($19 + [420 align=4]) = *($19 + [108 align=4])
	*($19 + [108]) = [0]
	*(($19 + [112])) = [0]
	*($13) = [0]
	CALL $19($15, (int_64)9015427804653492224, ($19 + [432]), ($19 + [336]))
	CALL $20(($19 + [336]))
	$13 = *($19 + [432])
	if ( ($13 == 0) ){ goto $label$89 }
	*($19 + [436]) = $13
	CALL $76($13)
	
.LABEL $label$89
	CALL $20(($19 + [24]))
	if ( ((*($19 + [120]) & [1]) == 0) ){ goto $label$90 }
	CALL $76(*(($19 + [128])))
	
.LABEL $label$90
	if ( ((*($19 + [136]) & [1]) == 0) ){ goto $label$91 }
	CALL $76(*(($19 + [144])))
	
.LABEL $label$91
	if ( ((*($19 + [152]) & [1]) == 0) ){ goto $label$92 }
	CALL $76(*(($19 + [160])))
	
.LABEL $label$92
	$10 = *($19 + [264])
	if ( ($10 == 0) ){ goto $label$93 }
	$0 = ($19 + [268])
	$13 = *($0)
	if ( ((int_32)$13 == (int_32)$10) ){ goto $label$95 }
	
.LOOP $label$96:
	$13 = ($13 + [-24])
	$12 = *($13)
	*($13) = [0]
	if ( ($12 == 0) ){ goto $label$97 }
	$11 = *($12 + [44])
	if ( ($11 == 0) ){ goto $label$98 }
	*(($12 + [48])) = $11
	CALL $76($11)
	
.LABEL $label$98
	CALL $76($12)
	
.LABEL $label$97
	if ( ((int_32)$10 != (int_32)$13) ){ goto $label$96 }
	$13 = *(($19 + [264]))
	goto $label$94 
	
.LABEL $label$95
	$13 = $10
	
.LABEL $label$94
	*($0) = $10
	CALL $76($13)
	
.LABEL $label$93
	*([0] + [4]) = ($19 + [448])
	return (unreachable)
	
.LABEL $label$81
	CALL $77(($19 + [136]))
}

int_32 .FUNC $75 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10236])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $18 (int_64 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [80])
	*([0] + [4]) = $4
	*((($3 = CALL $75([16])) + [12])) = *(($1 + [12]))
	*(($3 + [8])) = *(($1 + [8]))
	*(($3 + [4])) = *(($1 + [4]))
	*($3) = *($1)
	*($4 + [64]) = $3
	$3 = ($3 + [16])
	*($4 + [72]) = $3
	*($4 + [68]) = $3
	$3 = ($2 + [8])
	*(($4 + [8])) = *($3)
	*($4) = *($2)
	*($2) = [0]
	*(($2 + [4])) = [0]
	*($3) = [0]
	$3 = ($2 + [20])
	*(($4 + [20])) = *($3)
	*($4 + [12 align=4]) = *($2 + [12 align=4])
	*($2 + [12]) = [0]
	*(($2 + [16])) = [0]
	*($3) = [0]
	$3 = ($2 + [32])
	*(($4 + [32])) = *($3)
	*($4 + [24]) = *($2 + [24 align=4])
	*($2 + [24]) = [0]
	*(($2 + [28])) = [0]
	*($3) = [0]
	$3 = ($2 + [44])
	*(($4 + [44])) = *($3)
	*($4 + [36 align=4]) = *($2 + [36 align=4])
	*($2 + [36]) = [0]
	*(($2 + [40])) = [0]
	*($3) = [0]
	$3 = ($2 + [56])
	*(($1 = ($4 + [56]))) = *($3)
	*($4 + [48]) = *($2 + [48 align=4])
	*($2 + [48]) = [0]
	*(($2 + [52])) = [0]
	*($3) = [0]
	CALL $28($0, (int_64)5031766165184357196, ($4 + [64]), $4)
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$1 }
	CALL $76(*($1))
	
.LABEL $label$1
	if ( ((*(($4 + [36])) & [1]) == 0) ){ goto $label$2 }
	CALL $76(*(($4 + [44])))
	
.LABEL $label$2
	if ( ((*(($4 + [24])) & [1]) == 0) ){ goto $label$3 }
	CALL $76(*(($4 + [32])))
	
.LABEL $label$3
	if ( ((*(($4 + [12])) & [1]) == 0) ){ goto $label$4 }
	CALL $76(*(($4 + [20])))
	
.LABEL $label$4
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	CALL $76(*($4 + [8]))
	
.LABEL $label$5
	$2 = *($4 + [64])
	if ( ($2 == 0) ){ goto $label$6 }
	*($4 + [68]) = $2
	CALL $76($2)
	
.LABEL $label$6
	*([0] + [4]) = ($4 + [80])
}

void .FUNC $19 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [96])
	*([0] + [4]) = $10
	$9 = [0]
	*($10 + [16]) = [0]
	*($10 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $75($4)
	$6 = ($8 + ($5 << [4]))
	*(($10 + [16])) = $6
	*($10 + [8]) = $8
	*($10 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($10 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($10 + [44])) = $7
	*($10 + [32]) = $1
	*(($10 + [16])) = [0]
	*((($10 + [24]) + [24])) = $6
	*($10 + [24]) = $0
	*($10 + [40]) = $8
	*($10 + [8]) = (int_64)0
	*($10 + [52]) = [0]
	*(($8 = ($10 + [56]))) = [0]
	*((($10 + [24]) + [36])) = [0]
	*($10 + [64]) = [0]
	*($10 + [72]) = ($10 + [64])
	*($10 + [80]) = $3
	CALL $21(($10 + [80]), ($10 + [72]))
	$2 = *($10 + [64])
	if ( ($2 == 0) ){ goto $label$5 }
	$6 = ($10 + [52])
	CALL $22($6, $2)
	$9 = *($8)
	$8 = *($6)
	goto $label$4 
	
.LABEL $label$5
	$8 = [0]
	
.LABEL $label$4
	*($10 + [84]) = $8
	*($10 + [80]) = $8
	*($10 + [88]) = $9
	CALL $23(($10 + [80]), $3)
	CALL $23(($10 + [80]), ($3 + [12]))
	CALL $23(($10 + [80]), ($3 + [24]))
	CALL $23(($10 + [80]), ($3 + [36]))
	CALL $23(($10 + [80]), ($3 + [48]))
	CALL $23(($10 + [80]), ($3 + [60]))
	CALL $23(($10 + [80]), ($3 + [72]))
	CALL $23(($10 + [80]), ($3 + [84]))
	CALL $24(($10 + [80]), ($10 + [24]))
	$3 = *($10 + [80])
	CALL send_inline($3, (*($10 + [84]) - $3))
	$3 = *($10 + [80])
	if ( ($3 == 0) ){ goto $label$6 }
	*($10 + [84]) = $3
	CALL $76($3)
	
.LABEL $label$6
	$3 = *($10 + [52])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($10 + [56])) = $3
	CALL $76($3)
	
.LABEL $label$7
	$3 = *($10 + [40])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($10 + [44])) = $3
	CALL $76($3)
	
.LABEL $label$8
	$3 = *($10 + [8])
	if ( ($3 == 0) ){ goto $label$9 }
	*($10 + [12]) = $3
	CALL $76($3)
	
.LABEL $label$9
	*([0] + [4]) = ($10 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $83(($10 + [8]))
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [128])
	*([0] + [4]) = $11
	$0 = *($0 + [4])
	$10 = *($0 + [4])
	$9 = (*(*($0)) + int_32($10 >> [1]))
	$0 = *($0)
	if ( (($10 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($9) + $0))
	
.LABEL $label$1
	CALL $84(($11 + [112]), $1)
	CALL $84(($11 + [96]), $2)
	CALL $84(($11 + [80]), $3)
	CALL $84(($11 + [64]), $4)
	CALL $84(($11 + [48]), $5)
	CALL $84(($11 + [32]), $6)
	CALL $84(($11 + [16]), $7)
	CALL $84($11, $8)
	CALL void $9((int_32 ($11 + [112])), (int_32 ($11 + [96])), (int_32 ($11 + [80])), (int_32 ($11 + [64])), (int_32 ($11 + [48])), (int_32 ($11 + [32])), (int_32 ($11 + [16])), (int_32 $11), (int_32 $0))
	if ( ((*($11) & [1]) == 0) ){ goto $label$2 }
	CALL $76(*($11 + [8]))
	
.LABEL $label$2
	if ( ((*($11 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $76(*($11 + [24]))
	
.LABEL $label$3
	if ( ((*($11 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $76(*($11 + [40]))
	
.LABEL $label$4
	if ( ((*($11 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $76(*($11 + [56]))
	
.LABEL $label$5
	if ( ((*($11 + [64]) & [1]) == 0) ){ goto $label$6 }
	CALL $76(*($11 + [72]))
	
.LABEL $label$6
	if ( ((*($11 + [80]) & [1]) == 0) ){ goto $label$7 }
	CALL $76(*($11 + [88]))
	
.LABEL $label$7
	if ( ((*($11 + [96]) & [1]) == 0) ){ goto $label$8 }
	CALL $76(*($11 + [104]))
	
.LABEL $label$8
	if ( ((*($11 + [112]) & [1]) == 0) ){ goto $label$9 }
	CALL $76(*($11 + [120]))
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [128])
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1328])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $22($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [896])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [128])
	*([0] + [4]) = $3
	*(($2 = $3) + [92]) = $0
	*($2 + [80]) = *($1)
	*($2 + [84]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = (int_64)0
	*(($2 + [32])) = (int_64)0
	*($2) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [48]) = (int_64)0
	*($2 + [56]) = [0]
	*(($2 + [60])) = [0]
	*(($2 + [64])) = [0]
	*($2 + [68]) = [0]
	*(($2 + [72])) = [0]
	*(($2 + [76])) = [0]
	*($2 + [100]) = $1
	*($2 + [96]) = $1
	*($2 + [104]) = ($1 + $0)
	*($2 + [112]) = ($2 + [96])
	*($2 + [120]) = $2
	CALL $66(($2 + [120]), ($2 + [112]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [100]) = ($2 + [80])
	*($2 + [96]) = ($2 + [92])
	CALL $67(($2 + [96]), $2)
	if ( ((*($2 + [68]) & [1]) == 0) ){ goto $label$5 }
	CALL $76(*(($2 + [76])))
	
.LABEL $label$5
	if ( ((*($2 + [56]) & [1]) == 0) ){ goto $label$6 }
	CALL $76(*(($2 + [64])))
	
.LABEL $label$6
	if ( ((*($2 + [28]) & [1]) == 0) ){ goto $label$7 }
	CALL $76(*(($2 + [36])))
	
.LABEL $label$7
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$8 }
	CALL $76(*(($2 + [24])))
	
.LABEL $label$8
	if ( ((*($2) & [1]) == 0) ){ goto $label$9 }
	CALL $76(*(($2 + [8])))
	
.LABEL $label$9
	*([0] + [4]) = ($2 + [128])
	return [1]
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [144])
	*([0] + [4]) = $3
	*(($2 = $3) + [108]) = $0
	*($2 + [96]) = *($1)
	*($2 + [100]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = (int_64)0
	*(($2 + [48])) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [52]) = [0]
	*(($2 + [56])) = [0]
	*(($2 + [60])) = [0]
	*($2 + [64]) = (int_64)0
	*($2 + [72]) = [0]
	*(($2 + [76])) = [0]
	*(($2 + [80])) = [0]
	*($2 + [84]) = [0]
	*(($2 + [88])) = [0]
	*(($2 + [92])) = [0]
	*($2 + [116]) = $1
	*($2 + [112]) = $1
	*($2 + [120]) = ($1 + $0)
	*($2 + [128]) = ($2 + [112])
	*($2 + [136]) = ($2 + [8])
	CALL $63(($2 + [136]), ($2 + [128]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [116]) = ($2 + [96])
	*($2 + [112]) = ($2 + [108])
	CALL $64(($2 + [112]), ($2 + [8]))
	if ( ((*($2 + [84]) & [1]) == 0) ){ goto $label$5 }
	CALL $76(*(($2 + [92])))
	
.LABEL $label$5
	if ( ((*($2 + [72]) & [1]) == 0) ){ goto $label$6 }
	CALL $76(*(($2 + [80])))
	
.LABEL $label$6
	if ( ((*($2 + [52]) & [1]) == 0) ){ goto $label$7 }
	CALL $76(*(($2 + [60])))
	
.LABEL $label$7
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$8 }
	CALL $76(*(($2 + [48])))
	
.LABEL $label$8
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$9 }
	CALL $76(*(($2 + [28])))
	
.LABEL $label$9
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $76(*(($2 + [16])))
	
.LABEL $label$10
	*([0] + [4]) = ($2 + [144])
	return [1]
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*($2 + [16]) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [52]) = $1
	*($2 + [48]) = $1
	*($2 + [56]) = ($1 + $0)
	CALL $56(($2 + [48]), ($2 + [8]))
	CALL eosio_assert(((uint_32)(*($2 + [56]) - *($2 + [52])) > (uint_32)[7]), [896])
	CALL memcpy(($2 + [24]), *($2 + [52]), [8])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $62(($2 + [48]), ($2 + [8]))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL $76(*(($2 + [16])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [96])
	*([0] + [4]) = $3
	*(($2 = $3) + [76]) = $0
	*($2 + [64]) = *($1)
	*($2 + [68]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [16])) = (int_64)0
	*(($2 + [32])) = (int_64)0
	*(($2 + [40])) = [0]
	*($2) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*(($2 + [44])) = [0]
	*($2 + [48]) = [0]
	*(($2 + [52])) = [0]
	*(($2 + [56])) = [0]
	*($2 + [84]) = $1
	*($2 + [80]) = $1
	*($2 + [88]) = ($1 + $0)
	CALL $56(($2 + [80]), $2)
	CALL $56(($2 + [80]), ($2 + [12]))
	CALL $56(($2 + [80]), ($2 + [24]))
	CALL $56(($2 + [80]), ($2 + [36]))
	CALL $56(($2 + [80]), ($2 + [48]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [84]) = ($2 + [64])
	*($2 + [80]) = ($2 + [76])
	CALL $60(($2 + [80]), $2)
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $76(*(($2 + [56])))
	
.LABEL $label$5
	if ( ((*($2 + [36]) & [1]) == 0) ){ goto $label$6 }
	CALL $76(*(($2 + [44])))
	
.LABEL $label$6
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$7 }
	CALL $76(*(($2 + [32])))
	
.LABEL $label$7
	if ( ((*($2 + [12]) & [1]) == 0) ){ goto $label$8 }
	CALL $76(*(($2 + [20])))
	
.LABEL $label$8
	if ( ((*($2) & [1]) == 0) ){ goto $label$9 }
	CALL $76(*(($2 + [8])))
	
.LABEL $label$9
	*([0] + [4]) = ($2 + [96])
	return [1]
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [128])
	*([0] + [4]) = $3
	*(($2 = $3) + [108]) = $0
	*($2 + [96]) = *($1)
	*($2 + [100]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [16])) = (int_64)0
	*(($2 + [32])) = (int_64)0
	*(($2 + [40])) = [0]
	*($2) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*(($2 + [44])) = [0]
	*($2 + [48]) = [0]
	*(($2 + [52])) = [0]
	*(($2 + [56])) = [0]
	*($2 + [60]) = [0]
	*(($2 + [64])) = [0]
	*(($2 + [68])) = [0]
	*($2 + [72]) = [0]
	*(($2 + [76])) = [0]
	*(($2 + [80])) = [0]
	*($2 + [84]) = [0]
	*(($2 + [88])) = [0]
	*(($2 + [92])) = [0]
	*($2 + [116]) = $1
	*($2 + [112]) = $1
	*($2 + [120]) = ($1 + $0)
	CALL $56(($2 + [112]), $2)
	CALL $56(($2 + [112]), ($2 + [12]))
	CALL $56(($2 + [112]), ($2 + [24]))
	CALL $56(($2 + [112]), ($2 + [36]))
	CALL $56(($2 + [112]), ($2 + [48]))
	CALL $56(($2 + [112]), ($2 + [60]))
	CALL $56(($2 + [112]), ($2 + [72]))
	CALL $56(($2 + [112]), ($2 + [84]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [116]) = ($2 + [96])
	*($2 + [112]) = ($2 + [108])
	CALL $57(($2 + [112]), $2)
	CALL $20($2)
	*([0] + [4]) = ($2 + [128])
	return [1]
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $35($0, ($1 + [44]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [896])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [896])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [896])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [896])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [896])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [896])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $59($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $78($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $75($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $78($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $76($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $77($7)
	return (unreachable)
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = (*([0] + [4]) - [128])
	*([0] + [4]) = $2
	CALL $84(($2 + [112]), $1)
	CALL $84(($2 + [96]), ($1 + [12]))
	CALL $84(($2 + [80]), ($1 + [24]))
	CALL $84(($2 + [64]), ($1 + [36]))
	CALL $84(($2 + [48]), ($1 + [48]))
	CALL $84(($2 + [32]), ($1 + [60]))
	CALL $84(($2 + [16]), ($1 + [72]))
	CALL $84($2, ($1 + [84]))
	CALL $58($0, ($2 + [112]), ($2 + [96]), ($2 + [80]), ($2 + [64]), ($2 + [48]), ($2 + [32]), ($2 + [16]), $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL $76(*($2 + [8]))
	
.LABEL $label$1
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $76(*($2 + [24]))
	
.LABEL $label$2
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $76(*($2 + [40]))
	
.LABEL $label$3
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL $76(*($2 + [56]))
	
.LABEL $label$4
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$5 }
	CALL $76(*($2 + [72]))
	
.LABEL $label$5
	if ( ((*($2 + [80]) & [1]) == 0) ){ goto $label$6 }
	CALL $76(*($2 + [88]))
	
.LABEL $label$6
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$7 }
	CALL $76(*($2 + [104]))
	
.LABEL $label$7
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$8 }
	CALL $76(*($2 + [120]))
	
.LABEL $label$8
	*([0] + [4]) = ($2 + [128])
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1328])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $36($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [896])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[3]), [896])
	CALL memcpy(($7 + [8]), *($4), [4])
	$6 = (*($4) + [4])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4 + [16]) = [0]
	*($4 + [24]) = ($4 + [16])
	*($4) = $1
	CALL $30($4, ($4 + [24]))
	$2 = *($4 + [16])
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $22($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $23($4, $1)
	CALL $23($4, ($1 + [12]))
	CALL $23($4, ($1 + [24]))
	CALL $23($4, ($1 + [36]))
	CALL $23($4, ($1 + [48]))
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $28 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $75($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	CALL $29(($9 + [52]), $3)
	CALL $24(($9 + [64]), ($9 + [24]))
	$8 = *($9 + [64])
	CALL send_inline($8, (*($9 + [68]) - $8))
	$8 = *($9 + [64])
	if ( ($8 == 0) ){ goto $label$4 }
	*($9 + [68]) = $8
	CALL $76($8)
	
.LABEL $label$4
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$5 }
	*(($9 + [56])) = $8
	CALL $76($8)
	
.LABEL $label$5
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($9 + [44])) = $8
	CALL $76($8)
	
.LABEL $label$6
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [12]) = $8
	CALL $76($8)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $83(($9 + [8]))
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$4 = *($3)
	$3 = *($0)
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$2 = *($1)
	$4 = *($2)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $4
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	*($2) = ($3 + $4)
	
.LABEL $label$2
	$4 = *($3 + [12])
	$3 = *($0)
	$5 = (CASTING uint_64)(uint_32 ( *(($3 + [16])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$0 = *($1)
	$4 = *($0)
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($0) = $4
	$2 = *(($3 + [12]))
	$2 = ( *(($3 + [16])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	*($0) = ($2 + $4)
	
.LABEL $label$4
	$4 = *($3 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *(($3 + [28])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$0 = *($1)
	$4 = *($0)
	
.LOOP $label$5:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($0) = $4
	$2 = *(($3 + [24]))
	$2 = ( *(($3 + [28])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$6 }
	*($0) = ($2 + $4)
	
.LABEL $label$6
	$4 = *($3 + [36])
	$5 = (CASTING uint_64)(uint_32 ( *(($3 + [40])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$0 = *($1)
	$4 = *($0)
	
.LOOP $label$7:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($0) = $4
	$2 = *(($3 + [36]))
	$2 = ( *(($3 + [40])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$8 }
	*($0) = ($2 + $4)
	
.LABEL $label$8
	*($6 + [8]) = $3
	CALL $27(($6 + [8]), $1)
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $20 (int_32 $0)
{
	if ( ((*($0 + [84]) & [1]) == 0) ){ goto $label$1 }
	CALL $76(*(($0 + [92])))
	
.LABEL $label$1
	if ( ((*($0 + [72]) & [1]) == 0) ){ goto $label$2 }
	CALL $76(*(($0 + [80])))
	
.LABEL $label$2
	if ( ((*($0 + [60]) & [1]) == 0) ){ goto $label$3 }
	CALL $76(*(($0 + [68])))
	
.LABEL $label$3
	if ( ((*($0 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL $76(*(($0 + [56])))
	
.LABEL $label$4
	if ( ((*($0 + [36]) & [1]) == 0) ){ goto $label$5 }
	CALL $76(*(($0 + [44])))
	
.LABEL $label$5
	if ( ((*($0 + [24]) & [1]) == 0) ){ goto $label$6 }
	CALL $76(*(($0 + [32])))
	
.LABEL $label$6
	if ( ((*($0 + [12]) & [1]) == 0) ){ goto $label$7 }
	CALL $76(*(($0 + [20])))
	
.LABEL $label$7
	if ( ((*($0) & [1]) == 0) ){ goto $label$8 }
	CALL $76(*($0 + [8]))
	
.LABEL $label$8
	return $0
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [512])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [512])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $75($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $83($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $76($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [512])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [512])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [512])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $22($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [512])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [512])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $26(CALL $25($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$4 = *($3 + [48])
	$3 = *($0)
	$5 = (CASTING uint_64)(uint_32 ( *(($3 + [52])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$2 = *($1)
	$4 = *($2)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $4
	$3 = *(($3 + [48]))
	$3 = ( *(($3 + [52])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	*($2) = ($3 + $4)
	
.LABEL $label$2
	$4 = *($3 + [60])
	$3 = *($0)
	$5 = (CASTING uint_64)(uint_32 ( *(($3 + [64])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$0 = *($1)
	$4 = *($0)
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($0) = $4
	$2 = *(($3 + [60]))
	$2 = ( *(($3 + [64])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	*($0) = ($2 + $4)
	
.LABEL $label$4
	$4 = *($3 + [72])
	$5 = (CASTING uint_64)(uint_32 ( *(($3 + [76])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$0 = *($1)
	$4 = *($0)
	
.LOOP $label$5:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($0) = $4
	$2 = *(($3 + [72]))
	$2 = ( *(($3 + [76])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$6 }
	*($0) = ($2 + $4)
	
.LABEL $label$6
	$4 = *($3 + [84])
	$5 = (CASTING uint_64)(uint_32 ( *(($3 + [88])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$1 = *($1)
	$4 = *($1)
	
.LOOP $label$7:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($1) = $4
	$3 = *(($3 + [84]))
	$3 = ( *(($3 + [88])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$8 }
	*($1) = ($3 + $4)
	
.LABEL $label$8
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [512])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [512])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $56($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [896])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [896])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [896])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [896])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_64 $5, int_64 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [80])
	*([0] + [4]) = $11
	$0 = *($0 + [4])
	$10 = *($0 + [4])
	$9 = (*(*($0)) + int_32($10 >> [1]))
	$0 = *($0)
	if ( (($10 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($9) + $0))
	
.LABEL $label$1
	CALL $84(($11 + [64]), $1)
	CALL $84(($11 + [48]), $3)
	CALL $84(($11 + [32]), $4)
	CALL $84(($11 + [16]), $7)
	CALL $84($11, $8)
	CALL void $9((int_32 ($11 + [64])), (int_32 $2), (int_32 ($11 + [48])), (int_32 ($11 + [32])), (int_32 $5), (int_64 $6), (int_64 ($11 + [16])), (int_32 $11), (int_32 $0))
	if ( ((*($11) & [1]) == 0) ){ goto $label$2 }
	CALL $76(*($11 + [8]))
	
.LABEL $label$2
	if ( ((*($11 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $76(*($11 + [24]))
	
.LABEL $label$3
	if ( ((*($11 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $76(*($11 + [40]))
	
.LABEL $label$4
	if ( ((*($11 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $76(*($11 + [56]))
	
.LABEL $label$5
	if ( ((*($11 + [64]) & [1]) == 0) ){ goto $label$6 }
	CALL $76(*($11 + [72]))
	
.LABEL $label$6
	*([0] + [4]) = ($11 + [80])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5, int_64 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	$0 = *($0 + [4])
	$10 = *($0 + [4])
	$9 = (*(*($0)) + int_32($10 >> [1]))
	$0 = *($0)
	if ( (($10 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($9) + $0))
	
.LABEL $label$1
	CALL $84(($11 + [80]), $1)
	CALL $84(($11 + [64]), $2)
	CALL $84(($11 + [48]), $4)
	CALL $84(($11 + [32]), $5)
	CALL $84(($11 + [16]), $7)
	CALL $84($11, $8)
	CALL void $9((int_32 ($11 + [80])), (int_32 ($11 + [64])), (int_32 $3), (int_64 ($11 + [48])), (int_32 ($11 + [32])), (int_32 $6), (int_64 ($11 + [16])), (int_32 $11), (int_32 $0))
	if ( ((*($11) & [1]) == 0) ){ goto $label$2 }
	CALL $76(*($11 + [8]))
	
.LABEL $label$2
	if ( ((*($11 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $76(*($11 + [24]))
	
.LABEL $label$3
	if ( ((*($11 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $76(*($11 + [40]))
	
.LABEL $label$4
	if ( ((*($11 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $76(*($11 + [56]))
	
.LABEL $label$5
	if ( ((*($11 + [64]) & [1]) == 0) ){ goto $label$6 }
	CALL $76(*($11 + [72]))
	
.LABEL $label$6
	if ( ((*($11 + [80]) & [1]) == 0) ){ goto $label$7 }
	CALL $76(*($11 + [88]))
	
.LABEL $label$7
	*([0] + [4]) = ($11 + [96])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	CALL $84(($4 + [80]), $1)
	CALL $84(($4 + [64]), ($1 + [12]))
	$2 = *($1 + [24])
	CALL $84(($4 + [48]), ($1 + [32]))
	CALL $84(($4 + [32]), ($1 + [44]))
	$3 = *($1 + [56])
	CALL $84(($4 + [16]), ($1 + [64]))
	CALL $84($4, ($1 + [76]))
	CALL $65($0, ($4 + [80]), ($4 + [64]), $2, ($4 + [48]), ($4 + [32]), $3, ($4 + [16]), $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	CALL $76(*($4 + [8]))
	
.LABEL $label$1
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $76(*($4 + [24]))
	
.LABEL $label$2
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $76(*($4 + [40]))
	
.LABEL $label$3
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL $76(*($4 + [56]))
	
.LABEL $label$4
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$5 }
	CALL $76(*($4 + [72]))
	
.LABEL $label$5
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$6 }
	CALL $76(*($4 + [88]))
	
.LABEL $label$6
	*([0] + [4]) = ($4 + [96])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL $84(($5 + [64]), $1)
	$2 = *($1 + [12])
	CALL $84(($5 + [48]), ($1 + [16]))
	CALL $84(($5 + [32]), ($1 + [28]))
	$3 = *($1 + [48])
	$4 = *($1 + [40])
	CALL $84(($5 + [16]), ($1 + [56]))
	CALL $84($5, ($1 + [68]))
	CALL $68($0, ($5 + [64]), $2, ($5 + [48]), ($5 + [32]), $4, $3, ($5 + [16]), $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$1 }
	CALL $76(*($5 + [8]))
	
.LABEL $label$1
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $76(*($5 + [24]))
	
.LABEL $label$2
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $76(*($5 + [40]))
	
.LABEL $label$3
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL $76(*($5 + [56]))
	
.LABEL $label$4
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$5 }
	CALL $76(*($5 + [72]))
	
.LABEL $label$5
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $56(*($1), *($0))
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [896])
	CALL memcpy(($0 + [12]), *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	CALL $56(*($1), ($0 + [16]))
	CALL $56(*($1), ($0 + [28]))
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [896])
	CALL memcpy(($0 + [40]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [896])
	CALL memcpy(($0 + [48]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $56(*($1), ($0 + [56]))
	CALL $56(*($1), ($0 + [68]))
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [80])
	*([0] + [4]) = $8
	$0 = *($0 + [4])
	$7 = *($0 + [4])
	$6 = (*(*($0)) + int_32($7 >> [1]))
	$0 = *($0)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	CALL $84(($8 + [64]), $1)
	CALL $84(($8 + [48]), $2)
	CALL $84(($8 + [32]), $3)
	CALL $84(($8 + [16]), $4)
	CALL $84($8, $5)
	CALL void $6((int_32 ($8 + [64])), (int_32 ($8 + [48])), (int_32 ($8 + [32])), (int_32 ($8 + [16])), (int_32 $8), (int_32 $0))
	if ( ((*($8) & [1]) == 0) ){ goto $label$2 }
	CALL $76(*($8 + [8]))
	
.LABEL $label$2
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $76(*($8 + [24]))
	
.LABEL $label$3
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $76(*($8 + [40]))
	
.LABEL $label$4
	if ( ((*($8 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $76(*($8 + [56]))
	
.LABEL $label$5
	if ( ((*($8 + [64]) & [1]) == 0) ){ goto $label$6 }
	CALL $76(*($8 + [72]))
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [80])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = (*([0] + [4]) - [80])
	*([0] + [4]) = $2
	CALL $84(($2 + [64]), $1)
	CALL $84(($2 + [48]), ($1 + [12]))
	CALL $84(($2 + [32]), ($1 + [24]))
	CALL $84(($2 + [16]), ($1 + [36]))
	CALL $84($2, ($1 + [48]))
	CALL $61($0, ($2 + [64]), ($2 + [48]), ($2 + [32]), ($2 + [16]), $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL $76(*($2 + [8]))
	
.LABEL $label$1
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $76(*($2 + [24]))
	
.LABEL $label$2
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $76(*($2 + [40]))
	
.LABEL $label$3
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL $76(*($2 + [56]))
	
.LABEL $label$4
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$5 }
	CALL $76(*($2 + [72]))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [80])
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $56(*($1), *($0))
	$0 = *($0)
	CALL $56(*($1), ($0 + [12]))
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [896])
	CALL memcpy(($0 + [24]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $56(*($1), ($0 + [32]))
	CALL $56(*($1), ($0 + [44]))
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [896])
	CALL memcpy(($0 + [56]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $56(*($1), ($0 + [64]))
	CALL $56(*($1), ($0 + [76]))
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	CALL $84($4, $1)
	$2 = *($1 + [16])
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$1 = (*(*($0)) + int_32($3 >> [1]))
	$0 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	CALL $84(($4 + [16]), $4)
	CALL void $1((int_32 ($4 + [16])), (int_32 $2), (int_64 $0))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $76(*($4 + [24]))
	
.LABEL $label$2
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	CALL $76(*($4 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $87 ()
{
	(unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $75($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $83 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $75($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $76($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $81 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $82($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = CALL strlen($1)
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$6 = ($4 + $3)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$6 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($6 + [16]) & [-16])
	$6 = CALL $75($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $6
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($6, $1, $3)
	
.LABEL $label$2
	*(($6 + $3)) = [0]
	CALL $81($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $73($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10144])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $73 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10230]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10232])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10230]) = [1]
	$7 = ($7 << [16])
	*([0] + [10232]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10232])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10232]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10230]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10230]) = [1]
	$3 = ($3 << [16])
	*([0] + [10232]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10232])
	
.LABEL $label$8
	*([0] + [10232]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [8]) = $0
	CALL _ZN9blackjack5applyEyy(($3 + [8]), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $72([1740], $0)
}

void .FUNC $76 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $77 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10124])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9932]
	$1 = (((int_32)$2 * (int_32)[12]) + [9932])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC _ZN9blackjack9leaveroomENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	CALL require_auth(*($0))
	if ( (*($1) & [1]) ){ goto $label$2 }
	$1 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($1 + [8])
	
.LABEL $label$1
	$7 = [-1]
	
.LOOP $label$3:
	$5 = ($1 + $7)
	$3 = ($7 + [1])
	$7 = $3
	if ( *(($5 + [1])) ){ goto $label$3 }
	$4 = (CASTING uint_64)(uint_32 $3)
	$9 = (int_64)0
	$8 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$4:
	$11 = (int_64)0
	if ( ((uint_64)$9 >= (uint_64)$4) ){ goto $label$5 }
	$7 = *($1)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$7 = ($7 + [165])
	goto $label$6 
	
.LABEL $label$7
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$9 }
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$11 = ((int_64)$11 & (int_64)15)
	
.LABEL $label$8
	$1 = ($1 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$4 }
	$7 = [0]
	*(($13 + [72])) = [0]
	*($13 + [56]) = (int_64)-1
	*($13 + [64]) = (int_64)0
	$9 = *($0)
	*($13 + [40]) = $9
	*($13 + [48]) = $9
	$12 = [0]
	$1 = CALL db_find_i64($9, $9, (int_64)-4816269947984412672, $2)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$10 }
	$12 = CALL $14(($13 + [40]), $1)
	CALL eosio_assert(((int_32)*($12 + [56]) == (int_32)($13 + [40])), [16])
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [1376])
	*($13 + [32]) = [0]
	*($13 + [24]) = (int_64)0
	$3 = *(($12 + [48]))
	$1 = *($12 + [44])
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$11 }
	$5 = [0]
	
.LOOP $label$12:
	$7 = [1]
	$9 = *($1)
	if ( ((int_64)$9 == (int_64)$10) ){ goto $label$13 }
	*(($6 = (($13 + [8]) + [8]))) = *(($1 + [8]))
	*($13 + [8]) = $9
	$7 = *($13 + [28])
	if ( ((uint_32)$7 >= (uint_32)*((($13 + [24]) + [8]))) ){ goto $label$15 }
	*($7) = *($13 + [8])
	*(($7 + [8])) = *($6)
	*($13 + [28]) = ($7 + [16])
	goto $label$14 
	
.LABEL $label$15
	CALL $31(($13 + [24]), ($13 + [8]))
	
.LABEL $label$14
	$7 = $5
	
.LABEL $label$13
	$5 = $7
	$1 = ($1 + [16])
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$12 }
	
.LABEL $label$11
	CALL eosio_assert(($7 & [1]), [1600])
	$9 = *($0)
	*($13 + [8]) = ($13 + [24])
	CALL $40(($13 + [40]), $12, $9, ($13 + [8]))
	$1 = *($13 + [24])
	if ( ($1 == 0) ){ goto $label$16 }
	*($13 + [28]) = $1
	CALL $76($1)
	
.LABEL $label$16
	$3 = *($13 + [64])
	if ( ($3 == 0) ){ goto $label$17 }
	$6 = ($13 + [68])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = ($1 + [-24])
	$7 = *($1)
	*($1) = [0]
	if ( ($7 == 0) ){ goto $label$21 }
	$5 = *($7 + [44])
	if ( ($5 == 0) ){ goto $label$22 }
	*(($7 + [48])) = $5
	CALL $76($5)
	
.LABEL $label$22
	CALL $76($7)
	
.LABEL $label$21
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$20 }
	$1 = *(($13 + [64]))
	goto $label$18 
	
.LABEL $label$19
	$1 = $3
	
.LABEL $label$18
	*($6) = $3
	CALL $76($1)
	
.LABEL $label$17
	*([0] + [4]) = ($13 + [80])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$3 = int_32(($6 - $5) >> [4])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$2 = ($2 - $5)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($2 >> [3])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $75(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = (*($0) + [16])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $83($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($6 << [4]))
	$5 = ($2 + ($3 << [4]))
	$6 = $5
	
.LOOP $label$9:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $76($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC _ZN9blackjack8joinroomENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_yS6_S6_xS6_S6_ (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5, int_64 $6, int_32 $7, int_32 $8)
{
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_32 $20
	$20 = (*([0] + [4]) - [336])
	*([0] + [4]) = $20
	if ( (*($1) & [1]) ){ goto $label$2 }
	$14 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$14 = *($1 + [8])
	
.LABEL $label$1
	$13 = [-1]
	
.LOOP $label$3:
	$11 = ($14 + $13)
	$12 = ($13 + [1])
	$13 = $12
	if ( *(($11 + [1])) ){ goto $label$3 }
	$9 = (CASTING uint_64)(uint_32 $12)
	$15 = (int_64)0
	$19 = (int_64)59
	$16 = (int_64)0
	
.LOOP $label$4:
	$18 = (int_64)0
	if ( ((uint_64)$15 >= (uint_64)$9) ){ goto $label$5 }
	$13 = *($14)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$13 = ($13 + [165])
	goto $label$6 
	
.LABEL $label$7
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$15 > (uint_64)(int_64)11) ){ goto $label$9 }
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$18 = ((int_64)$18 & (int_64)15)
	
.LABEL $label$8
	$14 = ($14 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$18 | (int_64)$16)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$4 }
	*($20 + [216]) = $16
	CALL require_auth($16)
	$14 = [1]
	$13 = *($2)
	$11 = CALL strlen([1200])
	if ( ((int_32)$11 != (int_32)( *($2 + [4]) ? uint_32($13 >> [1]) : ($13 & [1]) )) ){ goto $label$11 }
	if ( (CALL $79($2, [0], [-1], [1200], $11) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$14 = *($2)
	$13 = ($14 & [1])
	$11 = uint_32($14 >> [1])
	$14 = [0]
	$12 = CALL strlen([1344])
	if ( ((int_32)$12 != (int_32)( *(($2 + [4])) ? $11 : $13 )) ){ goto $label$10 }
	$14 = (CALL $79($2, [0], [-1], [1344], $12) == 0)
	
.LABEL $label$10
	CALL eosio_assert($14, [1360])
	*($20 + [212]) = [2]
	$14 = *($2)
	$13 = CALL strlen([1200])
	if ( ((int_32)$13 != (int_32)( *(($2 + [4])) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$12 }
	if ( CALL $79($2, [0], [-1], [1200], $13) ){ goto $label$12 }
	*($20 + [212]) = [1]
	
.LABEL $label$12
	$13 = [0]
	*(($20 + [200])) = [0]
	*($20 + [184]) = (int_64)-1
	*($20 + [192]) = (int_64)0
	$15 = *($0)
	*($20 + [168]) = $15
	*($20 + [176]) = $15
	$17 = [0]
	$14 = CALL db_find_i64($15, $15, (int_64)-4816269947984412672, $3)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$13 }
	$17 = CALL $14(($20 + [168]), $14)
	CALL eosio_assert(((int_32)*($17 + [56]) == (int_32)($20 + [168])), [16])
	
.LABEL $label$13
	CALL eosio_assert(((int_32)$17 != (int_32)[0]), [1376])
	$12 = ($17 + [48])
	CALL eosio_assert((int_32((*($12) - *($17 + [44])) >> [4]) <= *($17 + [40])), [1408])
	$11 = [0]
	$10 = *($12)
	$14 = *($17 + [44])
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$14 }
	$11 = [0]
	$13 = [0]
	
.LOOP $label$15:
	CALL eosio_assert(((int_64)*($14) != (int_64)*($20 + [216])), [1424])
	$12 = *(($14 + [8]))
	$11 = (((int_32)$12 == (int_32)[2]) + $11)
	$13 = (((int_32)$12 != (int_32)[2]) + $13)
	$14 = ($14 + [16])
	if ( ((int_32)$14 != (int_32)$10) ){ goto $label$15 }
	
.LABEL $label$14
	$14 = *($20 + [212])
	if ( ((int_32)$14 != (int_32)[1]) ){ goto $label$16 }
	CALL eosio_assert(($13 == 0), [1456])
	CALL eosio_assert(((int_64)((int_64)((int_64)*($17 + [24]) * (int_64)(CASTING uint_64)(uint_32 (*(($17 + [40])) + [-1]))) << (int_64)1) <= (int_64)$6), [1488])
	$14 = *($20 + [212])
	
.LABEL $label$16
	if ( ((int_32)$14 != (int_32)[2]) ){ goto $label$17 }
	CALL eosio_assert(($11 <= (*(($17 + [40])) + [-1])), [1504])
	CALL eosio_assert(((int_64)*($17 + [24]) <= (int_64)$6), [1488])
	
.LABEL $label$17
	if ( (*($4) & [1]) ){ goto $label$19 }
	$14 = ($4 + [1])
	goto $label$18 
	
.LABEL $label$19
	$14 = *($4 + [8])
	
.LABEL $label$18
	$13 = [-1]
	
.LOOP $label$20:
	$11 = ($14 + $13)
	$12 = ($13 + [1])
	$13 = $12
	if ( *(($11 + [1])) ){ goto $label$20 }
	$9 = (CASTING uint_64)(uint_32 $12)
	$15 = (int_64)0
	$19 = (int_64)59
	$16 = (int_64)0
	
.LOOP $label$21:
	$18 = (int_64)0
	if ( ((uint_64)$15 >= (uint_64)$9) ){ goto $label$22 }
	$13 = *($14)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$13 = ($13 + [165])
	goto $label$23 
	
.LABEL $label$24
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	if ( ((uint_64)$15 > (uint_64)(int_64)11) ){ goto $label$26 }
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	goto $label$25 
	
.LABEL $label$26
	$18 = ((int_64)$18 & (int_64)15)
	
.LABEL $label$25
	$14 = ($14 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$18 | (int_64)$16)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$21 }
	CALL eosio_assert(((int_64)$16 == (int_64)*($17 + [16])), [1536])
	if ( (*($5) & [1]) ){ goto $label$28 }
	$13 = ($5 + [1])
	goto $label$27 
	
.LABEL $label$28
	$13 = *($5 + [8])
	
.LABEL $label$27
	$14 = [-1]
	
.LOOP $label$29:
	$11 = ($13 + $14)
	$12 = ($14 + [1])
	$14 = $12
	if ( *(($11 + [1])) ){ goto $label$29 }
	$15 = (int_64)0
	$16 = (int_64)0
	if ( ($12 == 0) ){ goto $label$30 }
	$18 = (CASTING uint_64)(uint_32 $12)
	$19 = (int_64)8
	$16 = (int_64)0
	
.LOOP $label$31:
	$14 = *($13)
	if ( ((uint_32)(($14 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$16 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$19 & (int_64)4294967288)) | (int_64)$16)
	
.LABEL $label$32
	$13 = ($13 + [1])
	$19 = ((int_64)$19 + (int_64)8)
	$18 = ((int_64)$18 + (int_64)-1)
	if ( ((int_64)$18 != (int_64)0) ){ goto $label$31 }
	
.LABEL $label$30
	$14 = ($17 + [32])
	CALL eosio_assert(((int_64)((int_64)$16 | (int_64)4) == (int_64)*($14)), [1568])
	$19 = *(($17 + [16]))
	*($20 + [160]) = *($14)
	*(($20 + [16])) = *($20 + [160])
	$18 = *($20 + [216])
	*($20 + [152]) = $6
	*($20 + [8]) = *($20 + [152])
	CALL _ZN9blackjack11sub_balanceEyyN5eosio5assetE($0, $18, $19, ($20 + [8]))
	$19 = *($0)
	*($20 + [228]) = ($20 + [212])
	*($20 + [224]) = ($20 + [216])
	CALL $38(($20 + [168]), $17, $19, ($20 + [224]))
	$9 = *($0)
	$18 = (int_64)59
	$14 = [1184]
	$16 = (int_64)0
	
.LOOP $label$33:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$38 }
	$13 = *($14)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$37 }
	$13 = ($13 + [165])
	goto $label$36 
	
.LABEL $label$38
	$19 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$37
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$36
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$35
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$34
	$14 = ($14 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$19 | (int_64)$16)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$33 }
	*($20 + [48]) = [0]
	*($20 + [40]) = (int_64)0
	if ( (int_64)($3 == 0) ){ goto $label$39 }
	
.LOOP $label$40:
	*((($20 + [320]) + [1])) = [0]
	*($20 + [320]) = ((int_64)((uint_64)$3 % (uint_64)(int_64)10) | (int_64)48)
	CALL $80(($20 + [224]), ($20 + [320]), ($20 + [40]))
	if ( (*($20 + [40]) & [1]) ){ goto $label$42 }
	*($20 + [40]) = [0]
	goto $label$41 
	
.LABEL $label$42
	*(*((($20 + [40]) + [8]))) = [0]
	*($20 + [44]) = [0]
	
.LABEL $label$41
	CALL $78(($20 + [40]), [0])
	*((($20 + [40]) + [8])) = *((($20 + [224]) + [8]))
	*($20 + [40]) = *($20 + [224])
	$14 = ((uint_64)$3 > (uint_64)(int_64)9)
	$3 = ((uint_64)$3 / (uint_64)(int_64)10)
	if ( $14 ){ goto $label$40 }
	
.LABEL $label$39
	*($20 + [32]) = [0]
	*($20 + [24]) = (int_64)0
	if ( (int_64)($6 == 0) ){ goto $label$43 }
	
.LOOP $label$44:
	*((($20 + [320]) + [1])) = [0]
	*($20 + [320]) = ((int_64)((uint_64)$6 % (uint_64)(int_64)10) | (int_64)48)
	CALL $80(($20 + [224]), ($20 + [320]), ($20 + [24]))
	if ( (*($20 + [24]) & [1]) ){ goto $label$46 }
	*($20 + [24]) = [0]
	goto $label$45 
	
.LABEL $label$46
	*(*((($20 + [24]) + [8]))) = [0]
	*($20 + [28]) = [0]
	
.LABEL $label$45
	CALL $78(($20 + [24]), [0])
	*((($20 + [24]) + [8])) = *((($20 + [224]) + [8]))
	*($20 + [24]) = *($20 + [224])
	$14 = ((uint_64)$6 > (uint_64)(int_64)9)
	$6 = ((uint_64)$6 / (uint_64)(int_64)10)
	if ( $14 ){ goto $label$44 }
	
.LABEL $label$43
	$14 = (($20 + [40]) + [8])
	*(($13 = (($20 + [56]) + [8]))) = *($14)
	*($14) = [0]
	*($20 + [56]) = *($20 + [40])
	*($20 + [40]) = (int_64)0
	CALL $84(($20 + [68]), $1)
	CALL $84(($20 + [80]), $2)
	CALL $84(($20 + [92]), $4)
	CALL $84(($20 + [104]), $5)
	$14 = (($20 + [24]) + [8])
	*(($11 = (($20 + [56]) + [68]))) = *($14)
	*($14) = [0]
	*($20 + [116 align=4]) = *($20 + [24])
	*($20 + [24]) = (int_64)0
	CALL $84(($20 + [128]), $7)
	CALL $84(($20 + [140]), $8)
	*(($14 = CALL $75([16]))) = $9
	*($14 + [8]) = $16
	$12 = ($14 + [16])
	*($20 + [328]) = $12
	*((($20 + [224]) + [8])) = *($13)
	*($20 + [320]) = $14
	*($20 + [324]) = $12
	*($20 + [228]) = *($20 + [60])
	*($20 + [224]) = *($20 + [56])
	*($20 + [60]) = [0]
	*($20 + [56]) = [0]
	*($13) = [0]
	$14 = (($20 + [56]) + [20])
	*((($20 + [224]) + [20])) = *($14)
	*($20 + [236 align=4]) = *($20 + [68 align=4])
	*($20 + [68]) = [0]
	*((($20 + [56]) + [16])) = [0]
	*($14) = [0]
	$14 = (($20 + [56]) + [32])
	*((($20 + [224]) + [32])) = *($14)
	*($20 + [248]) = *($20 + [80])
	*($20 + [80]) = [0]
	*(($20 + [84])) = [0]
	*($14) = [0]
	$14 = (($20 + [56]) + [44])
	*((($20 + [224]) + [44])) = *($14)
	*($20 + [260 align=4]) = *($20 + [92 align=4])
	*($20 + [92]) = [0]
	*(($20 + [96])) = [0]
	*($14) = [0]
	$14 = (($20 + [56]) + [56])
	*((($20 + [224]) + [56])) = *($14)
	*($20 + [272]) = *($20 + [104])
	*($20 + [104]) = [0]
	*(($20 + [108])) = [0]
	*($14) = [0]
	*((($20 + [224]) + [68])) = *($11)
	*($20 + [284 align=4]) = *($20 + [116 align=4])
	*($20 + [116]) = [0]
	*(($20 + [120])) = [0]
	*($11) = [0]
	$14 = (($20 + [56]) + [80])
	*((($20 + [224]) + [80])) = *($14)
	*($20 + [296]) = *($20 + [128])
	*($20 + [128]) = [0]
	*(($20 + [132])) = [0]
	*($14) = [0]
	$14 = (($20 + [56]) + [92])
	*((($20 + [224]) + [92])) = *($14)
	*($20 + [308 align=4]) = *($20 + [140 align=4])
	*($20 + [140]) = [0]
	*(($20 + [144])) = [0]
	*($14) = [0]
	CALL $19($9, (int_64)9015427804653492224, ($20 + [320]), ($20 + [224]))
	CALL $20(($20 + [224]))
	$14 = *($20 + [320])
	if ( ($14 == 0) ){ goto $label$47 }
	*($20 + [324]) = $14
	CALL $76($14)
	
.LABEL $label$47
	CALL $20(($20 + [56]))
	if ( ((*($20 + [24]) & [1]) == 0) ){ goto $label$48 }
	CALL $76(*(($20 + [32])))
	
.LABEL $label$48
	if ( ((*($20 + [40]) & [1]) == 0) ){ goto $label$49 }
	CALL $76(*(($20 + [48])))
	
.LABEL $label$49
	$12 = *($20 + [192])
	if ( ($12 == 0) ){ goto $label$50 }
	$10 = ($20 + [196])
	$14 = *($10)
	if ( ((int_32)$14 == (int_32)$12) ){ goto $label$52 }
	
.LOOP $label$53:
	$14 = ($14 + [-24])
	$13 = *($14)
	*($14) = [0]
	if ( ($13 == 0) ){ goto $label$54 }
	$11 = *($13 + [44])
	if ( ($11 == 0) ){ goto $label$55 }
	*(($13 + [48])) = $11
	CALL $76($11)
	
.LABEL $label$55
	CALL $76($13)
	
.LABEL $label$54
	if ( ((int_32)$12 != (int_32)$14) ){ goto $label$53 }
	$14 = *(($20 + [192]))
	goto $label$51 
	
.LABEL $label$52
	$14 = $12
	
.LABEL $label$51
	*($10) = $12
	CALL $76($14)
	
.LABEL $label$50
	*([0] + [4]) = ($20 + [336])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $75(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $76($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $33($0, ($1 + [44]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [512])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [512])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [512])
	$3 = ($0 + [4])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[3]), [512])
	CALL memcpy(*($3), ($6 + [8]), [4])
	$5 = (*($3) + [4])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$4 = *($3)
	$3 = *($0)
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$2 = *($1)
	$4 = *($2)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $4
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	*($2) = ($3 + $4)
	
.LABEL $label$2
	$4 = *($3 + [12])
	$3 = *($0)
	$5 = (CASTING uint_64)(uint_32 ( *(($3 + [16])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$0 = *($1)
	$4 = *($0)
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($0) = $4
	$2 = *(($3 + [12]))
	$2 = ( *(($3 + [16])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	*($0) = ($2 + $4)
	
.LABEL $label$4
	$4 = *($3 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *(($3 + [28])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$0 = *($1)
	$4 = *($0)
	
.LOOP $label$5:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($0) = $4
	$2 = *(($3 + [24]))
	$2 = ( *(($3 + [28])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$6 }
	*($0) = ($2 + $4)
	
.LABEL $label$6
	$4 = *($3 + [36])
	$5 = (CASTING uint_64)(uint_32 ( *(($3 + [40])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$0 = *($1)
	$4 = *($0)
	
.LOOP $label$7:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($0) = $4
	$2 = *(($3 + [36]))
	$2 = ( *(($3 + [40])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$8 }
	*($0) = ($2 + $4)
	
.LABEL $label$8
	$4 = *($3 + [48])
	$5 = (CASTING uint_64)(uint_32 ( *(($3 + [52])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$1 = *($1)
	$4 = *($1)
	
.LOOP $label$9:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$9 }
	*($1) = $4
	$3 = *(($3 + [48]))
	$3 = ( *(($3 + [52])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$10 }
	*($1) = ($3 + $4)
	
.LABEL $label$10
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $75(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $83($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $76($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}