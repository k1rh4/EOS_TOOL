(data (i32.const 8192) "Invalid hex character\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8223) "invalid sha256\00")
(data (i32.const 8238) "invalid first pos\00")
(data (i32.const 8256) "parse memo error\00")
(data (i32.const 8273) "EOS\00")
(data (i32.const 8277) "eosio.token\00")
(data (i32.const 8289) "transfer\00")
(data (i32.const 8298) "enter\00: no conversion\00")
(data (i32.const 8320) "exit\00: out of range\00")
(data (i32.const 8340) "auth\00")
(data (i32.const 8345) "login\00")
(data (i32.const 8351) "rmplayer\00")
(data (i32.const 8360) "updaterebate\00")
(data (i32.const 8373) "updatereftype\00")
(data (i32.const 8387) "refund\00")
(data (i32.const 8394) "addpartner\00")
(data (i32.const 8405) "rmpartner\00")
(data (i32.const 8415) "sngresult\00")
(data (i32.const 8425) "sngexit\00")
(data (i32.const 8433) "extend pool\00")
(data (i32.const 8445) "referrer can not be self\00")
(data (i32.const 8470) "need more than 0.5 EOS\00")
(data (i32.const 8493) "need more than 5 EOS\00")
(data (i32.const 8514) "need more than 50 EOS\00")
(data (i32.const 8536) "need more than 12.5 EOS\00")
(data (i32.const 8560) "need more than 10 EOS\00")
(data (i32.const 8582) "buyin should 10 EOS\00")
(data (i32.const 8602) "roomId must 0\00")
(data (i32.const 8616) "not open this buyin\00")
(data (i32.const 8636) "symbol not match\00")
(data (i32.const 8653) "room not match\00")
(data (i32.const 8668) "buyin type not match\00")
(data (i32.const 8689) "roomId more than zero\00")
(data (i32.const 8711) "player exist\00")
(data (i32.const 8724) "no buyin record\00")
(data (i32.const 8740) "blance not enough\00")
(data (i32.const 8758) "buyin not right\00")
(data (i32.const 8774) "balance not right\00")
(data (i32.const 8792) "bet not right\00")
(data (i32.const 8806) "just EOS token allowed\00")
(data (i32.const 8829) "player not exist\00")
(data (i32.const 8846) "the player is not buyin\00")
(data (i32.const 8870) "the player buy is not match\00")
(data (i32.const 8898) "the gametype is not right\00")
(data (i32.const 8924) "the roomId is not right\00")
(data (i32.const 8948) "no referrer info in _refarray\00")
(data (i32.const 8978) "can\'t ref_rebate_scale more than ref_scale\00")
(data (i32.const 9021) "divs\00")
(data (i32.const 9026) "team\00")
(data (i32.const 9031) "buyback\00")
(data (i32.const 9039) "https://pokerking.one -- team\00")
(data (i32.const 9069) "reabte must more than zero\00")
(data (i32.const 9096) "no invite the player\00")
(data (i32.const 9117) "referrer not match\00")
(data (i32.const 9136) "not find the referrer\00")
(data (i32.const 9158) "player rebate must less than referrer rebate\00")
(data (i32.const 9203) "pokerking.one -- refund\00")
(data (i32.const 9227) " SNG exit room -- https://pokerking.one\00")
(data (i32.const 9267) "string is too long to be a valid name\00")
(data (i32.const 9305) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9372) "character is not in allowed character set for names\00")
(data (i32.const 9424) "quantity invalid\00")
(data (i32.const 9441) "more than 0.5 EOS\00")
(data (i32.const 9459) "invalid memo\00")
(data (i32.const 9472) "no game type\00")
(data (i32.const 9485) "no room id\00")
(data (i32.const 9496) "no user hash\00")
(data (i32.const 9512) ",%\00\00")
(data (i32.const 9516) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9549) "attempt to add asset with different symbol\00")
(data (i32.const 9592) "addition underflow\00")
(data (i32.const 9611) "addition overflow\00")
(data (i32.const 9629) "string is too long to be a valid symbol_code\00")
(data (i32.const 9674) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9727) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9776) "invalid symbol name\00")
(data (i32.const 9796) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9855) "no the referral rank\00")
(data (i32.const 9876) "roomId: \00")
(data (i32.const 9885) " player: \00")
(data (i32.const 9895) " withdraw - https://pokerking.one\00")
(data (i32.const 9929) "write\00")
(data (i32.const 9935) "divide by zero\00")
(data (i32.const 9950) "signed division overflow\00")
(data (i32.const 9975) "multiplication overflow\00")
(data (i32.const 9999) "multiplication underflow\00")
(data (i32.const 10024) " fee - https://pokerking.one\00")
(data (i32.const 10053) " referral reward! - https://pokerking.one\00")
(data (i32.const 10095) " player rebate! - https://pokerking.one\00")
(data (i32.const 10135) "attempt to subtract asset with different symbol\00")
(data (i32.const 10183) "subtraction underflow\00")
(data (i32.const 10205) "subtraction overflow\00")
(data (i32.const 10226) "no that vip level\00")
(data (i32.const 10244) " VIP rewards - https://pokerking.one\00")
(data (i32.const 10281) " \00")
(data (i32.const 10283) " - https://pokerking.one\00")
(data (i32.const 10308) "KING\00")
(data (i32.const 10313) "unable to find key\00")
(data (i32.const 10332) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 10383) "error reading iterator\00")
(data (i32.const 10406) "read\00")
(data (i32.const 10411) " issue - https://pokerking.one\00")
(data (i32.const 10442) " rank: #\00")
(data (i32.const 10451) " SNG bouns - https://pokerking.one\00")
(data (i32.const 10486) "get\00")
(data (i32.const 10490) "cannot create objects in table of another contract\00")
(data (i32.const 10541) "cannot pass end iterator to modify\00")
(data (i32.const 10576) "object passed to modify is not in multi_index\00")
(data (i32.const 10622) "cannot modify objects in table of another contract\00")
(data (i32.const 10673) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10732) "cannot pass end iterator to erase\00")
(data (i32.const 10766) "cannot increment end iterator\00")
(data (i32.const 10796) "object passed to erase is not in multi_index\00")
(data (i32.const 10841) "cannot erase objects in table of another contract\00")
(data (i32.const 10891) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10944) "\9a\99\99\99\99\99\b9?\b8\1e\85\ebQ\b8\be?\ecQ\b8\1e\85\eb\c1?{\14\aeG\e1z\c4?\n\d7\a3p=\n\c7?\9a\99\99\99\99\99\c9?")
(data (i32.const 19408) "stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 19504) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "sha256" (func $fimport$2 (param i32 i32 i32)))
(import "env" "memset" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "ripemd160" (func $fimport$5 (param i32 i32 i32)))
(import "env" "action_data_size" (func $fimport$6 (result i32)))
(import "env" "read_action_data" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$8 (param i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$10 (result i64)))
(import "env" "current_time" (func $fimport$11 (result i64)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$13 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$14 (param i32 i64 i32)))
(import "env" "db_next_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$16 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$17 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "require_auth" (func $fimport$18 (param i64)))
(import "env" "require_recipient" (func $fimport$19 (param i64)))
(import "env" "send_inline" (func $fimport$20 (param i32 i32)))
(import "env" "__multi3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "db_get_i64" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$23 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$24 (param i32)))
(import "env" "abort" (func $fimport$25))
(import "env" "prints_l" (func $fimport$26 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$37 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$38 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$41 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$43 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$44 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$45 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $5))
(export "_Znwj" (func $107))
(export "_ZdlPv" (func $109))
(export "_Znaj" (func $108))
(export "_ZdaPv" (func $110))
(export "_ZnwjSt11align_val_t" (func $111))
(export "_ZnajSt11align_val_t" (func $112))
(export "_ZdlPvSt11align_val_t" (func $113))
(export "_ZdaPvSt11align_val_t" (func $114))
(table $0 14 14 anyfunc)
(elem (i32.const 1) $7 $9 $11 $13 $15 $17 $19 $21 $23 $24 $25 $26 $28)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19761))
(global $global$2 i32 (i32.const 19761))


void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10406])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10406])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($0, *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [10406])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10406])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $131($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10486])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $86($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [10406])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy(($3 + [32]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10406])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($3 + [40])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy(($0 + [48]), *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [10406])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [56])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10406])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9929])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9929])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9929])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9929])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9929])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10383])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $146($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $93(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $94(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $149($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10406])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10406])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $138 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $136($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_32 .FUNC $123 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $141(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

void .FUNC $115 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $122 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $130 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $131 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $132 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC $133 ()
{
	return [10996]
}

void .FUNC $134 (int_32 $0)
{
}

int_32 .FUNC $121 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $118($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $136 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $135($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $137 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $143($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $118($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10383])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $146($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [16]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [64]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [40])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [56])
	CALL $99(($3 + [32]), ($3 + [24]))
	*($5 + [68]) = $1
	*($5 + [72 align=4]) = (int_64)-1
	*($5 + [80]) = [-1]
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $41(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $149($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $126 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $128($1, $0, [8325])
	CALL $129()
	(unreachable)
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $131($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $125 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $143([19408])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [19408], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $133())
	*(CALL $133()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $140($4, ($3 + [12]), $2)
	$5 = CALL $133()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $126($3)
	
.LABEL $label$1
	CALL $127($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10383])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $146($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [24]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [40])
	CALL $100(($3 + [40]), ($3 + [32]))
	*($5 + [56]) = [-1]
	*($5 + [52]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $50(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $149($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_64 .FUNC $42 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$4 }
	$4 = [0]
	$5 = *([0] + [9512])
	
.LOOP $label$6:
	*((($3 + [32]) + ($6 = $4))) = *(($5 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$4 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$5 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$3 }
	*($3 + [16]) = ($4 << [1])
	$5 = (($3 + [16]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [16]) = [0]
	$6 = (($3 + [16]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$7 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($7)
	*($3 + [16]) = ($7 | [1])
	*($3 + [24]) = $5
	*($3 + [20]) = $4
	
.LABEL $label$2
	$7 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$7:
	*(($5 + $6)) = *((($3 + [32]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$7 }
	$6 = ($5 + $4)
	
.LABEL $label$1
	*($6) = [0]
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	$4 = ($3 | [1])
	
.LOOP $label$8:
	$1 = ((uint_64)$2 / (uint_64)(int_64)10)
	$6 = (CASTING uint_32)(uint_64 (int_64))($2 - ((int_64)$1 * (int_64)10))
	CALL $1(($3 + [32]), int_32((( ($6) | [48]) ? ($6 + [55]) : ($6 <= [10]) ) << [24]) >> [24]), $3)
	if ( (*($3) & [1]) ){ goto $label$10 }
	*($3) = [0]
	goto $label$9 
	
.LABEL $label$10
	*(*(($3 + [8]))) = [0]
	*($3 + [4]) = [0]
	
.LABEL $label$9
	CALL $119($3, [0])
	*(($3 + [8])) = *((($3 + [32]) + [8]))
	*($3) = *($3 + [32])
	$6 = ((uint_64)$2 > (uint_64)(int_64)9)
	$2 = $1
	if ( $6 ){ goto $label$8 }
	$6 = *($3)
	$5 = ($6 & [1])
	$7 = ($3 + [8])
	CALL $121(($3 + [16]), ( *($7) ? $4 : $5 ), ( *($3 + [4]) ? uint_32($6 >> [1]) : $5 ))
	$2 = CALL $3(($3 + [16]))
	if ( (*($3) & [1]) ){ goto $label$13 }
	if ( (*($3 + [16]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*($7))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*($3 + [24]))
	$global$0 = ($3 + [48])
	return $2
	
.LABEL $label$11
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $131($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	*($1 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = CALL $143([8273])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9629])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8272]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$9 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)4
	
.LABEL $label$1
	$10 = ($1 + [8])
	CALL eosio_assert([1], [9727])
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$11 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $11
	$8 = [1]
	$12 = $6
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $11
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $8 ){ goto $label$11 }
	$8 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	
.LABEL $label$7
	CALL eosio_assert($8, [9776])
	*(($1 + [24])) = $9
	*($1 + [16]) = (int_64)0
	*($1 + [32]) = (int_64)1
	*($1 + [40]) = *(*($4 + [4]))
	*($1 + [48]) = (int_64)0
	*($1 + [56]) = (int_64)0
	$8 = $2
	$6 = ($8 + [-64])
	$global$0 = $6
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = $8
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $10
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = ($1 + [32])
	$12 = ($1 + [40])
	*($3 + [48]) = $12
	$2 = ($1 + [48])
	*($3 + [52]) = $2
	*($3 + [56]) = ($1 + [56])
	CALL $39(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($5 + [8]), (int_64)-5001503146665574400, *(*($0 + [8])), $7, $6, [64])
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$12 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$6 = ($5 + [8])
	$7 = *($6)
	$8 = *(($0 + [8]))
	$11 = *($8)
	$9 = *($1)
	*($3 + [32]) = *(($1 + [8]))
	*($1 + [72]) = CALL db_idx64_store($7, (int_64)-5001503146665574400, $11, $9, ($3 + [32]))
	$7 = *($8)
	$11 = *($6)
	$9 = *($1)
	*($3 + [32]) = *($2)
	*(($1 + [76])) = CALL db_idx64_store($11, (int_64)-5001503146665574399, $7, $9, ($3 + [32]))
	$7 = *($8)
	$11 = *($6)
	$9 = *($1)
	*($3 + [32]) = *($12)
	*(($1 + [80])) = CALL db_idx64_store($11, (int_64)-5001503146665574398, $7, $9, ($3 + [32]))
	$global$0 = ($3 + [64])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10383])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $146($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [24]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [40])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [56])
	CALL $101(($3 + [32]), ($3 + [24]))
	*($5 + [72]) = [-1]
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $49(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $149($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_64 .FUNC $45 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$4 }
	$4 = [0]
	$5 = *([0] + [9512])
	
.LOOP $label$6:
	*((($3 + [32]) + ($6 = $4))) = *(($5 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$4 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$5 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$3 }
	*($3 + [16]) = ($4 << [1])
	$5 = (($3 + [16]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [16]) = [0]
	$6 = (($3 + [16]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$7 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($7)
	*($3 + [16]) = ($7 | [1])
	*($3 + [24]) = $5
	*($3 + [20]) = $4
	
.LABEL $label$2
	$7 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$7:
	*(($5 + $6)) = *((($3 + [32]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$7 }
	$6 = ($5 + $4)
	
.LABEL $label$1
	*($6) = [0]
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	$4 = ($3 | [1])
	
.LOOP $label$8:
	$1 = ((uint_64)$2 / (uint_64)(int_64)10)
	$6 = (CASTING uint_32)(uint_64 (int_64))($2 - ((int_64)$1 * (int_64)10))
	CALL $1(($3 + [32]), int_32((( ($6) | [48]) ? ($6 + [55]) : ($6 <= [10]) ) << [24]) >> [24]), $3)
	if ( (*($3) & [1]) ){ goto $label$10 }
	*($3) = [0]
	goto $label$9 
	
.LABEL $label$10
	*(*(($3 + [8]))) = [0]
	*($3 + [4]) = [0]
	
.LABEL $label$9
	CALL $119($3, [0])
	*(($3 + [8])) = *((($3 + [32]) + [8]))
	*($3) = *($3 + [32])
	$6 = ((uint_64)$2 > (uint_64)(int_64)9)
	$2 = $1
	if ( $6 ){ goto $label$8 }
	$6 = *($3)
	$5 = ($6 & [1])
	$7 = ($3 + [8])
	CALL $121(($3 + [16]), ( *($7) ? $4 : $5 ), ( *($3 + [4]) ? uint_32($6 >> [1]) : $5 ))
	$2 = CALL $3(($3 + [16]))
	if ( (*($3) & [1]) ){ goto $label$13 }
	if ( (*($3 + [16]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*($7))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*($3 + [24]))
	$global$0 = ($3 + [48])
	return $2
	
.LABEL $label$11
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [10796])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [10841])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10891])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [52]))
	$6 = *(($1 + [56]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4520745262589006720, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

int_32 .FUNC $124 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $142(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $128 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $143($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $118($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [528])
	$global$0 = $3
	*(($4 = $3) + [472]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $146($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [424]) + [24])) = (int_64)0
	*((($4 + [424]) + [40])) = [0]
	*($4 + [432]) = (int_64)0
	*($4 + [424]) = (int_64)0
	*($4 + [440]) = (int_64)0
	*($4 + [456]) = (int_64)0
	*($4 + [412]) = $2
	*($4 + [408]) = $2
	*($4 + [416]) = ($2 + $5)
	*($4 + [512]) = ($4 + [408])
	*($4 + [16]) = ($4 + [424])
	CALL $29(($4 + [16]), ($4 + [512]))
	*(($3 = ($4 + [8]))) = *($4 + [416])
	*($4) = *($4 + [408])
	$3 = *($3)
	*((($4 + [480]) + [8])) = $3
	*(($6 = (($4 + [496]) + [8]))) = $3
	$7 = *($4)
	*($4 + [496]) = $7
	*($4 + [480]) = $7
	$3 = *($6)
	*((($4 + [512]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [496])
	*($4 + [32]) = $1
	*($4 + [512]) = $1
	*((($4 + [16]) + [40])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = (int_64)0
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [164])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [184])) = (int_64)-1
	*(($4 + [176])) = $0
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*(($4 + [204])) = [0]
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [244])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*(($4 + [286])) = [0]
	*(($4 + [284])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $0
	*(($4 + [296])) = $0
	*(($4 + [304])) = (int_64)-1
	*(($4 + [312])) = (int_64)0
	*(($4 + [320])) = [0]
	*(($4 + [326])) = [0]
	*(($4 + [324])) = [0]
	*(($4 + [336])) = $0
	*(($4 + [344])) = (int_64)-1
	*(($4 + [352])) = (int_64)0
	*(($4 + [360])) = [0]
	*(($4 + [376])) = $0
	*(($4 + [384])) = (int_64)-1
	*(($4 + [392])) = (int_64)0
	*(($4 + [400])) = [0]
	*($4 + [288]) = $0
	*($4 + [328]) = $0
	*($4 + [368]) = $0
	*(($4 + [404])) = [0]
	*($4 + [516]) = ($4 + [472])
	*($4 + [512]) = ($4 + [16])
	CALL $30(($4 + [512]), ($4 + [424]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $149($2)
	
.LABEL $label$4
	CALL $31(($4 + [16]))
	if ( ((*($4 + [456]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [464])))
	
.LABEL $label$5
	$global$0 = ($4 + [528])
	return [1]
}

void .FUNC $9 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_64 $16
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL require_auth(*($0))
	CALL require_recipient($1)
	CALL eosio_assert(((int_64)$3 != (int_64)0), [8689])
	$5 = ($0 + [192])
	$7 = *(($0 + [220]))
	$6 = *(($0 + [216]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$10 }
	
.LOOP $label$12:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$11 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$5), [10332])
	goto $label$9 
	
.LABEL $label$10
	$8 = CALL db_find_i64(*($5), *(($0 + [200])), (int_64)-5003134530400288768, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$8 }
	$9 = CALL $54($5, $8)
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$5), [10332])
	
.LABEL $label$9
	$10 = CALL $45($0, $1, $3)
	$11 = ($0 + [112])
	$7 = *(($0 + [140]))
	$6 = *(($0 + [136]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$13:
	$8 = ($7 + [-24])
	$12 = *($8)
	if ( ((int_64)*($12) == (int_64)$10) ){ goto $label$7 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$13 }
	goto $label$6 
	
.LABEL $label$8
	$10 = CALL $42($0, $1, $2)
	$5 = ($0 + [352])
	$7 = *(($0 + [380]))
	$6 = *(($0 + [376]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$14:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$10) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$14 }
	goto $label$2 
	
.LABEL $label$7
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($12 + [64]) == (int_32)$11), [10332])
	if ( $12 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = CALL db_find_i64(*($11), *(($0 + [120])), (int_64)-4800152022483468288, $10)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(CALL $47($11, $8) + [64]) == (int_32)$11), [10332])
	
.LABEL $label$5
	CALL eosio_assert([0], [8711])
	$global$0 = ($4 + [128])
	return 
	
.LABEL $label$4
	$13 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [112])) == (int_64)CALL eosio_assert0()), [10490])
	*(($8 = CALL _Znwj([80])) + [32]) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [56]) = (int_64)0
	*($8 + [64]) = $11
	*($8 + [8]) = $1
	*($8) = $10
	$1 = CALL current_time()
	*($8 + [16]) = $2
	*($8 + [48]) = ((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($8 + [32]) = *(($9 + [24]))
	*($8 + [24]) = *($9 + [16])
	*($8 + [40]) = $3
	*($4 + [88]) = (($4 + [16]) + [64])
	*($4 + [84]) = ($4 + [16])
	*($4 + [80]) = ($4 + [16])
	*($4 + [8]) = ($4 + [80])
	*($4 + [100]) = ($8 + [8])
	*($4 + [96]) = $8
	*($4 + [104]) = ($8 + [16])
	*($4 + [108]) = ($8 + [24])
	*($4 + [112]) = ($8 + [40])
	$7 = ($8 + [48])
	*($4 + [116]) = $7
	*($4 + [120]) = ($8 + [56])
	CALL $48(($4 + [96]), ($4 + [8]))
	$1 = *($8)
	$6 = ($0 + [120])
	*($8 + [68]) = CALL db_store_i64(*($6), (int_64)-4800152022483468288, $13, $1, ($4 + [16]), [64])
	$12 = ($0 + [128])
	if ( (uint_64)($1 <= *($12)) ){ goto $label$15 }
	*($12) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	$1 = *($6)
	$10 = *($8)
	*($4 + [96]) = *($7)
	*($8 + [72]) = CALL db_idx64_store($1, (int_64)-4800152022483468288, $13, $10, ($4 + [96]))
	*($4 + [96]) = $8
	$1 = *($8)
	*($4 + [16]) = $1
	$6 = *(($8 + [68]))
	*($4 + [80]) = $6
	$12 = ($0 + [140])
	$7 = *($12)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [144]))) ){ goto $label$18 }
	*($7 + [8]) = $1
	*($7 + [16]) = $6
	*($4 + [96]) = [0]
	*($7) = $8
	*($12) = ($7 + [24])
	$8 = *($4 + [96])
	$7 = [0]
	*($4 + [96]) = [0]
	if ( $8 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL $49(($0 + [136]), ($4 + [96]), ($4 + [16]), ($4 + [80]))
	$8 = *($4 + [96])
	$7 = [0]
	*($4 + [96]) = [0]
	if ( ($8 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv($8)
	
.LABEL $label$16
	CALL eosio_assert([1], [10732])
	CALL eosio_assert([1], [10766])
	$8 = CALL db_next_i64(*($9 + [52]), ($4 + [16]))
	if ( ((int_32)$8 < (int_32)$7) ){ goto $label$19 }
	CALL $54($5, $8)
	
.LABEL $label$19
	CALL $55($5, $9)
	$global$0 = ($4 + [128])
	return 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$5), [10332])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [360])), (int_64)4520745262589006720, $10)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $43($5, $8)
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$5), [10332])
	
.LABEL $label$1
	$14 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($14, [8724])
	if ( ((int_64)$2 != (int_64)884000010) ){ goto $label$25 }
	$8 = CALL $143([8273])
	if ( ($8 <= [8]) ){ goto $label$24 }
	CALL eosio_assert([0], [9629])
	goto $label$23 
	
.LABEL $label$25
	$15 = *(($9 + [32]))
	$13 = *($9 + [24])
	goto $label$20 
	
.LABEL $label$24
	if ( ($8 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	$10 = (int_64)0
	
.LOOP $label$26:
	$7 = *(($8 + [8272]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$27 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$27
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$26 }
	$15 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)4)
	goto $label$21 
	
.LABEL $label$22
	$15 = (int_64)4
	
.LABEL $label$21
	CALL eosio_assert([1], [9727])
	$10 = (uint_64)$15 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$30:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$13 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$31 }
	$10 = $13
	$7 = [1]
	$6 = $8
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$31
	$10 = $13
	
.LOOP $label$32:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$29 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$6 = ($8 + [1])
	$8 = $6
	if ( $7 ){ goto $label$32 }
	$7 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	$7 = [0]
	
.LABEL $label$28
	CALL eosio_assert($7, [9776])
	$13 = (int_64)100000
	
.LABEL $label$20
	$10 = CALL $45($0, $1, $3)
	$11 = ($0 + [112])
	$7 = *(($0 + [140]))
	$6 = *(($0 + [136]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$35 }
	
.LOOP $label$37:
	$8 = ($7 + [-24])
	$12 = *($8)
	if ( ((int_64)*($12) == (int_64)$10) ){ goto $label$36 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$36
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$35 }
	CALL eosio_assert(((int_32)*($12 + [64]) == (int_32)$11), [10332])
	if ( $12 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$8 = CALL db_find_i64(*($11), *(($0 + [120])), (int_64)-4800152022483468288, $10)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$33 }
	CALL eosio_assert(((int_32)*(CALL $47($11, $8) + [64]) == (int_32)$11), [10332])
	
.LABEL $label$34
	CALL eosio_assert([0], [8711])
	$global$0 = ($4 + [128])
	return 
	
.LABEL $label$33
	$16 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [112])) == (int_64)CALL eosio_assert0()), [10490])
	*(($8 = CALL _Znwj([80])) + [64]) = $11
	*($8 + [56]) = (int_64)0
	*($8 + [8]) = $1
	*($8) = $10
	$1 = CALL current_time()
	*($8 + [16]) = $2
	*($8 + [24]) = $13
	*($8 + [32]) = $15
	*($8 + [40]) = $3
	*($8 + [48]) = ((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($4 + [88]) = (($4 + [16]) + [64])
	*($4 + [84]) = ($4 + [16])
	*($4 + [80]) = ($4 + [16])
	*($4 + [8]) = ($4 + [80])
	*($4 + [100]) = ($8 + [8])
	*($4 + [96]) = $8
	*($4 + [104]) = ($8 + [16])
	*($4 + [108]) = ($8 + [24])
	*($4 + [112]) = ($8 + [40])
	$7 = ($8 + [48])
	*($4 + [116]) = $7
	*($4 + [120]) = ($8 + [56])
	CALL $48(($4 + [96]), ($4 + [8]))
	$1 = *($8)
	$6 = ($0 + [120])
	*($8 + [68]) = CALL db_store_i64(*($6), (int_64)-4800152022483468288, $16, $1, ($4 + [16]), [64])
	$12 = ($0 + [128])
	if ( (uint_64)($1 <= *($12)) ){ goto $label$38 }
	*($12) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$38
	$1 = *($6)
	$10 = *($8)
	*($4 + [96]) = *($7)
	*($8 + [72]) = CALL db_idx64_store($1, (int_64)-4800152022483468288, $16, $10, ($4 + [96]))
	*($4 + [96]) = $8
	$1 = *($8)
	*($4 + [16]) = $1
	$6 = *(($8 + [68]))
	*($4 + [80]) = $6
	$12 = ($0 + [140])
	$7 = *($12)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [144]))) ){ goto $label$41 }
	*($7 + [8]) = $1
	*($7 + [16]) = $6
	*($4 + [96]) = [0]
	*($7) = $8
	*($12) = ($7 + [24])
	$8 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( $8 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	CALL $49(($0 + [136]), ($4 + [96]), ($4 + [16]), ($4 + [80]))
	$8 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($8 == 0) ){ goto $label$39 }
	
.LABEL $label$40
	CALL _ZdlPv($8)
	
.LABEL $label$39
	$8 = ($9 + [32])
	CALL eosio_assert(((int_64)*($8) == (int_64)$15), [9796])
	$7 = ($9 + [24])
	if ( ((int_64)*($7) != (int_64)$13) ){ goto $label$42 }
	CALL eosio_assert($14, [10732])
	CALL eosio_assert($14, [10766])
	$8 = CALL db_next_i64(*($9 + [52]), ($4 + [16]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$43 }
	CALL $43($5, $8)
	
.LABEL $label$43
	CALL $44($5, $9)
	$global$0 = ($4 + [128])
	return 
	
.LABEL $label$42
	CALL eosio_assert(((int_64)*($8) == (int_64)$15), [9796])
	if ( ((int_64)*($7) <= (int_64)$13) ){ goto $label$45 }
	$10 = *($0)
	CALL eosio_assert($14, [10541])
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$5), [10576])
	CALL eosio_assert(((int_64)*(($0 + [352])) == (int_64)CALL eosio_assert0()), [10622])
	$8 = ($9 + [40])
	*($4) = *($8)
	$1 = *($9)
	CALL eosio_assert(((int_64)$15 == (int_64)*(($9 + [32]))), [10135])
	$3 = (int_64)
	*($9 + [24]) = $3(*($9 + [24]) - $13))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [10183])
	CALL eosio_assert(((int_64)*($9 + [24]) < (int_64)4611686018427387904), [10205])
	*($8) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$1 == (int_64)*($9)), [10673])
	*($4 + [88]) = (($4 + [16]) + [48])
	*($4 + [84]) = ($4 + [16])
	*($4 + [80]) = ($4 + [16])
	*($4 + [8]) = ($4 + [80])
	*($4 + [100]) = ($9 + [8])
	*($4 + [96]) = $9
	*($4 + [104]) = ($9 + [16])
	*($4 + [108]) = ($9 + [24])
	*($4 + [112]) = $8
	CALL $46(($4 + [96]), ($4 + [8]))
	CALL db_update_i64(*($9 + [52]), $10, ($4 + [16]), [48])
	$7 = ($0 + [368])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$46 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$46
	*($4 + [96]) = *($8)
	if ( (CALL $142($4, ($4 + [96]), [8]) == 0) ){ goto $label$44 }
	$7 = ($9 + [56])
	$8 = *($7)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$47 }
	$8 = CALL db_idx64_find_primary(*(($0 + [352])), *(($0 + [360])), (int_64)4520745262589006720, ($4 + [8]), $1)
	*($7) = $8
	
.LABEL $label$47
	CALL db_idx64_update($8, $10, ($4 + [96]))
	$global$0 = ($4 + [128])
	return 
	
.LABEL $label$45
	CALL eosio_assert([0], [8740])
	
.LABEL $label$44
	$global$0 = ($4 + [128])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9267])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9372])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9305])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9372])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$5 = ($global$0 - [240])
	$global$0 = $5
	*($5 + [88]) = $1
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	$8 = *($4)
	$7 = CALL $143([8433])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$2 }
	if ( (CALL $124($4, [0], [-1], [8433], $7) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $32($0, $3)
	*($5 + [40]) = (int_64)0
	$4 = CALL $116(($5 + [16]), $4)
	CALL $33($0, $4, ($5 + [80]), ($5 + [48]), ($5 + [32]), ($5 + [40]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$3
	CALL eosio_assert(((int_64)*($5 + [40]) != (int_64)*($5 + [88])), [8445])
	$1 = *($5 + [80])
	if ( ((int_64)$1 <= (int_64)992000024) ){ goto $label$18 }
	if ( ((int_64)$1 <= (int_64)996000009) ){ goto $label$17 }
	if ( ((int_64)$1 > (int_64)996000099) ){ goto $label$15 }
	if ( ((int_64)$1 == (int_64)996000010) ){ goto $label$14 }
	if ( ((int_64)$1 != (int_64)996000025) ){ goto $label$6 }
	CALL eosio_assert(((int_64)*($3) > (int_64)124999), [8536])
	if ( CALL is_account(*($5 + [40])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$18
	if ( ((int_64)$1 > (int_64)884000009) ){ goto $label$16 }
	if ( ((int_64)$1 == (int_64)102000001) ){ goto $label$13 }
	if ( ((int_64)$1 == (int_64)102000010) ){ goto $label$12 }
	if ( ((int_64)$1 != (int_64)102000100) ){ goto $label$6 }
	CALL eosio_assert(((int_64)*($3) > (int_64)499999), [8514])
	if ( CALL is_account(*($5 + [40])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$17
	if ( ((int_64)$1 == (int_64)992000025) ){ goto $label$11 }
	if ( ((int_64)$1 == (int_64)992000100) ){ goto $label$10 }
	if ( ((int_64)$1 != (int_64)996000001) ){ goto $label$6 }
	CALL eosio_assert(((int_64)*($3) > (int_64)4999), [8470])
	if ( CALL is_account(*($5 + [40])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$16
	if ( ((int_64)$1 == (int_64)884000010) ){ goto $label$9 }
	if ( ((int_64)$1 == (int_64)992000001) ){ goto $label$8 }
	if ( ((int_64)$1 != (int_64)992000010) ){ goto $label$6 }
	CALL eosio_assert(((int_64)*($3) > (int_64)49999), [8493])
	if ( CALL is_account(*($5 + [40])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$15
	if ( ((int_64)$1 == (int_64)996000100) ){ goto $label$7 }
	if ( ((int_64)$1 != (int_64)998000020) ){ goto $label$6 }
	CALL eosio_assert(((int_64)*($3) > (int_64)99999), [8560])
	if ( CALL is_account(*($5 + [40])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$14
	CALL eosio_assert(((int_64)*($3) > (int_64)49999), [8493])
	if ( CALL is_account(*($5 + [40])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$13
	CALL eosio_assert(((int_64)*($3) > (int_64)4999), [8470])
	if ( CALL is_account(*($5 + [40])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$12
	CALL eosio_assert(((int_64)*($3) > (int_64)49999), [8493])
	if ( CALL is_account(*($5 + [40])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$11
	CALL eosio_assert(((int_64)*($3) > (int_64)124999), [8536])
	if ( CALL is_account(*($5 + [40])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$10
	CALL eosio_assert(((int_64)*($3) > (int_64)499999), [8514])
	if ( CALL is_account(*($5 + [40])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$9
	CALL eosio_assert(((int_64)*($3) == (int_64)100000), [8582])
	CALL eosio_assert((int_64)(*($5 + [32]) == 0), [8602])
	if ( CALL is_account(*($5 + [40])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	CALL eosio_assert(((int_64)*($3) > (int_64)4999), [8470])
	if ( CALL is_account(*($5 + [40])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	CALL eosio_assert(((int_64)*($3) > (int_64)499999), [8514])
	if ( CALL is_account(*($5 + [40])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8616])
	if ( (CALL is_account(*($5 + [40])) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$9 = ($0 + [232])
	$1 = *($5 + [88])
	$8 = *(($0 + [260]))
	$7 = *(($0 + [256]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$20 }
	
.LOOP $label$22:
	$4 = ($8 + [-24])
	$10 = *($4)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$21 }
	$8 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$20 }
	CALL eosio_assert(((int_32)*($10 + [48]) == (int_32)$9), [10332])
	if ( $10 ){ goto $label$4 }
	goto $label$19 
	
.LABEL $label$20
	$4 = CALL db_find_i64(*($9), *(($0 + [240])), (int_64)8428183964630790656, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$19 }
	CALL eosio_assert(((int_32)*(CALL $34($9, $4) + [48]) == (int_32)$9), [10332])
	goto $label$4 
	
.LABEL $label$19
	$1 = *($0)
	*($5 + [180]) = ($5 + [40])
	*($5 + [176]) = ($5 + [88])
	*($5 + [208]) = $1
	CALL eosio_assert(((int_64)*(($0 + [232])) == (int_64)CALL eosio_assert0()), [10490])
	*($5 + [96]) = $9
	*($5 + [100]) = ($5 + [176])
	*($5 + [104]) = ($5 + [208])
	*(($4 = CALL _Znwj([72])) + [16]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [48]) = $9
	CALL $35(($5 + [96]), $4)
	*($5 + [160]) = $4
	$1 = *($4)
	*($5 + [96]) = $1
	$7 = *($4 + [52])
	*($5 + [200]) = $7
	$10 = ($0 + [260])
	$8 = *($10)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [264]))) ){ goto $label$25 }
	*($8 + [8]) = $1
	*($8 + [16]) = $7
	*($5 + [160]) = [0]
	*($8) = $4
	*($10) = ($8 + [24])
	$4 = *($5 + [160])
	*($5 + [160]) = [0]
	if ( $4 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL $36(($0 + [256]), ($5 + [160]), ($5 + [96]), ($5 + [200]))
	$4 = *($5 + [160])
	*($5 + [160]) = [0]
	if ( ($4 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv($4)
	
.LABEL $label$23
	$9 = ($0 + [72])
	$1 = *($5 + [88])
	$8 = *(($0 + [100]))
	$10 = *(($0 + [96]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$29 }
	
.LOOP $label$31:
	$4 = ($8 + [-24])
	$7 = *($4)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$30 }
	$8 = $4
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$29 }
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$9), [10332])
	*($5 + [8]) = (int_64)0
	if ( $7 ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$29
	$4 = CALL db_find_i64(*($9), *(($0 + [80])), (int_64)-4157500428759203840, $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$27 }
	$7 = CALL $37($9, $4)
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$9), [10332])
	*($5 + [8]) = (int_64)0
	
.LABEL $label$28
	if ( (int_64)(*($7 + [8]) == 0) ){ goto $label$26 }
	*($5 + [8]) = (int_64)1
	goto $label$26 
	
.LABEL $label$27
	*($5 + [8]) = (int_64)0
	
.LABEL $label$26
	$9 = ($0 + [272])
	$1 = *($5 + [40])
	$7 = *(($0 + [300]))
	$10 = *(($0 + [296]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$37 }
	
.LOOP $label$39:
	$4 = ($7 + [-24])
	$8 = *($4)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$38 }
	$7 = $4
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$38
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$37 }
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$9), [10332])
	goto $label$36 
	
.LABEL $label$37
	$4 = CALL db_find_i64(*($9), *(($0 + [280])), (int_64)-5001503146665574400, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$35 }
	$8 = CALL $38($9, $4)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$9), [10332])
	
.LABEL $label$36
	$2 = (int_64)0
	$4 = ($8 + [40])
	$1 = ((int_64)*($5 + [8]) + (int_64)*($4))
	if ( (uint_64)($1 <= (int_64)5) ){ goto $label$40 }
	$2 = (int_64)1
	if ( (uint_64)($1 <= (int_64)10) ){ goto $label$40 }
	$2 = (int_64)2
	if ( (uint_64)($1 <= (int_64)30) ){ goto $label$40 }
	$2 = (int_64)3
	if ( (uint_64)($1 <= (int_64)80) ){ goto $label$40 }
	$2 = ( (int_64)4 ? (int_64)5 : (uint_64)($1 <= (int_64)150) )
	
.LABEL $label$40
	$1 = *($0)
	$6 = *($8 + [56])
	CALL eosio_assert([1], [10541])
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$9), [10576])
	CALL eosio_assert(((int_64)*(($0 + [272])) == (int_64)CALL eosio_assert0()), [10622])
	$10 = ($8 + [56])
	if ( ((int_64)$6 == (int_64)0) ){ goto $label$34 }
	*($8 + [32]) = ((int_64)*($8 + [32]) + (int_64)1)
	$2 = *($7)
	*(($7 = ($8 + [40]))) = ((int_64)*($5 + [8]) + (int_64)$2)
	$7 = ($8 + [8])
	*($5 + [176]) = *($7)
	$9 = ($8 + [48])
	*($5 + [184]) = *($9)
	*($5 + [192]) = $2
	$2 = *($8)
	*($7) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$2 == (int_64)*($8)), [10673])
	*($5 + [168]) = (($5 + [96]) + [64])
	*($5 + [164]) = ($5 + [96])
	*($5 + [160]) = ($5 + [96])
	*($5 + [200]) = ($5 + [160])
	*($5 + [212]) = $7
	*($5 + [208]) = $8
	*($5 + [216]) = ($8 + [16])
	*($5 + [220]) = ($8 + [32])
	*($5 + [224]) = $4
	*($5 + [228]) = $9
	*($5 + [232]) = $10
	CALL $39(($5 + [208]), ($5 + [200]))
	CALL db_update_i64(*($8 + [68]), $1, ($5 + [96]), [64])
	$10 = ($0 + [288])
	if ( (uint_64)($2 <= *($10)) ){ goto $label$41 }
	*($10) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$41
	$10 = (($5 + [176]) + [8])
	*($5 + [208]) = *($7)
	if ( (CALL $142(($5 + [176]), ($5 + [208]), [8]) == 0) ){ goto $label$42 }
	$12 = ($8 + [72])
	$7 = *($12)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$43 }
	$7 = CALL db_idx64_find_primary(*(($0 + [272])), *(($0 + [280])), (int_64)-5001503146665574400, ($5 + [200]), $2)
	*($12) = $7
	
.LABEL $label$43
	CALL db_idx64_update($7, $1, ($5 + [208]))
	
.LABEL $label$42
	$7 = (($5 + [176]) + [16])
	*($5 + [208]) = *($9)
	if ( (CALL $142($10, ($5 + [208]), [8]) == 0) ){ goto $label$44 }
	$9 = ($8 + [76])
	$10 = *($9)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$45 }
	$10 = CALL db_idx64_find_primary(*(($0 + [272])), *(($0 + [280])), (int_64)-5001503146665574399, ($5 + [200]), $2)
	*($9) = $10
	
.LABEL $label$45
	CALL db_idx64_update($10, $1, ($5 + [208]))
	
.LABEL $label$44
	*($5 + [208]) = *($4)
	if ( (CALL $142($7, ($5 + [208]), [8]) == 0) ){ goto $label$4 }
	$8 = ($8 + [80])
	$4 = *($8)
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$46 }
	$4 = CALL db_idx64_find_primary(*(($0 + [272])), *(($0 + [280])), (int_64)-5001503146665574398, ($5 + [200]), $2)
	*($8) = $4
	
.LABEL $label$46
	CALL db_idx64_update($4, $1, ($5 + [208]))
	goto $label$4 
	
.LABEL $label$35
	$1 = *($0)
	*($5 + [180]) = ($5 + [8])
	*($5 + [176]) = ($5 + [40])
	*($5 + [208]) = $1
	CALL eosio_assert(((int_64)*(($0 + [272])) == (int_64)CALL eosio_assert0()), [10490])
	*($5 + [96]) = $9
	*($5 + [100]) = ($5 + [176])
	*($5 + [104]) = ($5 + [208])
	*(($4 = CALL _Znwj([88])) + [16]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [64]) = $9
	CALL $40(($5 + [96]), $4)
	*($5 + [160]) = $4
	$1 = *($4)
	*($5 + [96]) = $1
	$7 = *($4 + [68])
	*($5 + [200]) = $7
	$10 = ($0 + [300])
	$8 = *($10)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [304]))) ){ goto $label$33 }
	*($8 + [8]) = $1
	*($8 + [16]) = $7
	*($5 + [160]) = [0]
	*($8) = $4
	*($10) = ($8 + [24])
	$4 = *($5 + [160])
	*($5 + [160]) = [0]
	if ( $4 ){ goto $label$32 }
	goto $label$4 
	
.LABEL $label$34
	*($8 + [32]) = ((int_64)*($8 + [32]) + (int_64)1)
	$7 = ($8 + [48])
	$6 = *($7)
	$11 = *($5 + [8])
	*($7) = $2
	$2 = *($9)
	*(($9 = ($8 + [40]))) = ((int_64)$11 + (int_64)$2)
	$9 = ($8 + [8])
	*($5 + [176]) = *($9)
	*($5 + [184]) = $6
	*($5 + [192]) = $2
	$2 = *($8)
	*($9) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$2 == (int_64)*($8)), [10673])
	*($5 + [168]) = (($5 + [96]) + [64])
	*($5 + [164]) = ($5 + [96])
	*($5 + [160]) = ($5 + [96])
	*($5 + [200]) = ($5 + [160])
	*($5 + [212]) = $9
	*($5 + [208]) = $8
	*($5 + [216]) = ($8 + [16])
	*($5 + [220]) = ($8 + [32])
	*($5 + [224]) = $4
	*($5 + [228]) = $7
	*($5 + [232]) = $10
	CALL $39(($5 + [208]), ($5 + [200]))
	CALL db_update_i64(*($8 + [68]), $1, ($5 + [96]), [64])
	$10 = ($0 + [288])
	if ( (uint_64)($2 <= *($10)) ){ goto $label$47 }
	*($10) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$47
	$10 = (($5 + [176]) + [8])
	*($5 + [208]) = *($9)
	if ( (CALL $142(($5 + [176]), ($5 + [208]), [8]) == 0) ){ goto $label$48 }
	$12 = ($8 + [72])
	$9 = *($12)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$49 }
	$9 = CALL db_idx64_find_primary(*(($0 + [272])), *(($0 + [280])), (int_64)-5001503146665574400, ($5 + [200]), $2)
	*($12) = $9
	
.LABEL $label$49
	CALL db_idx64_update($9, $1, ($5 + [208]))
	
.LABEL $label$48
	$9 = (($5 + [176]) + [16])
	*($5 + [208]) = *($7)
	if ( (CALL $142($10, ($5 + [208]), [8]) == 0) ){ goto $label$50 }
	$10 = ($8 + [76])
	$7 = *($10)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$51 }
	$7 = CALL db_idx64_find_primary(*(($0 + [272])), *(($0 + [280])), (int_64)-5001503146665574399, ($5 + [200]), $2)
	*($10) = $7
	
.LABEL $label$51
	CALL db_idx64_update($7, $1, ($5 + [208]))
	
.LABEL $label$50
	*($5 + [208]) = *($4)
	if ( (CALL $142($9, ($5 + [208]), [8]) == 0) ){ goto $label$4 }
	$8 = ($8 + [80])
	$4 = *($8)
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$52 }
	$4 = CALL db_idx64_find_primary(*(($0 + [272])), *(($0 + [280])), (int_64)-5001503146665574398, ($5 + [200]), $2)
	*($8) = $4
	
.LABEL $label$52
	CALL db_idx64_update($4, $1, ($5 + [208]))
	goto $label$4 
	
.LABEL $label$33
	CALL $41(($0 + [296]), ($5 + [160]), ($5 + [96]), ($5 + [200]))
	$4 = *($5 + [160])
	*($5 + [160]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	
.LABEL $label$32
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$1 = CALL $42($0, *($5 + [88]), *($5 + [80]))
	$9 = ($0 + [352])
	$8 = *(($0 + [380]))
	$10 = *(($0 + [376]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$65 }
	
.LOOP $label$67:
	$4 = ($8 + [-24])
	$7 = *($4)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$66 }
	$8 = $4
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$67 }
	goto $label$65 
	
.LABEL $label$66
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$65 }
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$9), [10332])
	$11 = *($5 + [32])
	if ( ((int_64)$11 != (int_64)0) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$65
	$7 = [0]
	$4 = CALL db_find_i64(*($9), *(($0 + [360])), (int_64)4520745262589006720, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$68 }
	$7 = CALL $43($9, $4)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$9), [10332])
	
.LABEL $label$68
	$11 = *($5 + [32])
	if ( ((int_64)$11 == (int_64)0) ){ goto $label$63 }
	
.LABEL $label$64
	$2 = *($3 + [8])
	$6 = *($3)
	if ( ($7 == 0) ){ goto $label$69 }
	if ( ((int_64)*(($7 + [32])) != (int_64)$2) ){ goto $label$69 }
	CALL eosio_assert([1], [9549])
	$6 = ((int_64)*($7 + [24]) + (int_64)$6)
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9592])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9611])
	CALL eosio_assert([1], [10732])
	CALL eosio_assert([1], [10766])
	$4 = CALL db_next_i64(*($7 + [52]), ($5 + [96]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$70 }
	CALL $43($9, $4)
	
.LABEL $label$70
	CALL $44($9, $7)
	$11 = *($5 + [32])
	
.LABEL $label$69
	$1 = CALL $45($0, *($5 + [88]), $11)
	$3 = ($0 + [112])
	$7 = *(($0 + [140]))
	$10 = *(($0 + [136]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$61 }
	
.LOOP $label$71:
	$4 = ($7 + [-24])
	$8 = *($4)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$62 }
	$7 = $4
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$71 }
	goto $label$61 
	
.LABEL $label$63
	if ( ($7 == 0) ){ goto $label$58 }
	$8 = ($7 + [32])
	CALL eosio_assert(((int_64)*($8) == (int_64)*($3 + [8])), [8636])
	$2 = *($0)
	CALL eosio_assert([1], [10541])
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$9), [10576])
	CALL eosio_assert(((int_64)*(($0 + [352])) == (int_64)CALL eosio_assert0()), [10622])
	$4 = ($7 + [40])
	*($5 + [200]) = *($4)
	$1 = *($7)
	*($4) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($8)), [9549])
	$6 = ((int_64)*($7 + [24]) + (int_64)*($3))
	*($7 + [24]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9592])
	CALL eosio_assert(((int_64)*($7 + [24]) < (int_64)4611686018427387904), [9611])
	CALL eosio_assert(((int_64)$1 == (int_64)*($7)), [10673])
	*($5 + [184]) = (($5 + [96]) + [48])
	*($5 + [180]) = ($5 + [96])
	*($5 + [176]) = ($5 + [96])
	*($5 + [160]) = ($5 + [176])
	*($5 + [212]) = ($7 + [8])
	*($5 + [208]) = $7
	*($5 + [216]) = ($7 + [16])
	*($5 + [220]) = ($7 + [24])
	*($5 + [224]) = $4
	CALL $46(($5 + [208]), ($5 + [160]))
	CALL db_update_i64(*($7 + [52]), $2, ($5 + [96]), [48])
	$8 = ($0 + [368])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$72 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$72
	*($5 + [208]) = *($4)
	if ( (CALL $142(($5 + [200]), ($5 + [208]), [8]) == 0) ){ goto $label$53 }
	$8 = ($7 + [56])
	$4 = *($8)
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$73 }
	$4 = CALL db_idx64_find_primary(*(($0 + [352])), *(($0 + [360])), (int_64)4520745262589006720, ($5 + [160]), $1)
	*($8) = $4
	
.LABEL $label$73
	CALL db_idx64_update($4, $2, ($5 + [208]))
	goto $label$53 
	
.LABEL $label$62
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$61 }
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$3), [10332])
	goto $label$60 
	
.LABEL $label$61
	$8 = ($0 + [120])
	$4 = CALL db_find_i64(*($3), *($8), (int_64)-4800152022483468288, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$59 }
	$8 = CALL $47($3, $4)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$3), [10332])
	
.LABEL $label$60
	CALL eosio_assert(((int_64)*($5 + [32]) == (int_64)*($8 + [40])), [8653])
	CALL eosio_assert(((int_64)*($5 + [80]) == (int_64)*($8 + [16])), [8668])
	$7 = ($8 + [32])
	CALL eosio_assert(((int_64)*($7) == (int_64)$2), [8636])
	$11 = *($0)
	CALL eosio_assert([1], [10541])
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$3), [10576])
	CALL eosio_assert(((int_64)*(($0 + [112])) == (int_64)CALL eosio_assert0()), [10622])
	$4 = ($8 + [48])
	*($5 + [200]) = *($4)
	$1 = *($8)
	*($4) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($8 + [16]) = *($5 + [80])
	CALL eosio_assert(((int_64)$2 == (int_64)*($7)), [9549])
	$2 = ((int_64)*($8 + [24]) + (int_64)$6)
	*($8 + [24]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9592])
	CALL eosio_assert(((int_64)*($8 + [24]) < (int_64)4611686018427387904), [9611])
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [10673])
	*($5 + [184]) = (($5 + [96]) + [64])
	*($5 + [180]) = ($5 + [96])
	*($5 + [176]) = ($5 + [96])
	*($5 + [160]) = ($5 + [176])
	*($5 + [212]) = ($8 + [8])
	*($5 + [208]) = $8
	*($5 + [216]) = ($8 + [16])
	*($5 + [220]) = ($8 + [24])
	*($5 + [224]) = ($8 + [40])
	*($5 + [228]) = $4
	*($5 + [232]) = ($8 + [56])
	CALL $48(($5 + [208]), ($5 + [160]))
	CALL db_update_i64(*($8 + [68]), $11, ($5 + [96]), [64])
	$7 = ($0 + [128])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$74 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$74
	*($5 + [208]) = *($4)
	if ( (CALL $142(($5 + [200]), ($5 + [208]), [8]) == 0) ){ goto $label$53 }
	$8 = ($8 + [72])
	$4 = *($8)
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$75 }
	$4 = CALL db_idx64_find_primary(*(($0 + [112])), *(($0 + [120])), (int_64)-4800152022483468288, ($5 + [160]), $1)
	*($8) = $4
	
.LABEL $label$75
	CALL db_idx64_update($4, $11, ($5 + [208]))
	goto $label$53 
	
.LABEL $label$59
	$11 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [112])) == (int_64)CALL eosio_assert0()), [10490])
	*(($4 = CALL _Znwj([80])) + [32]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [56]) = (int_64)0
	*($4 + [64]) = $3
	*($4) = $1
	*($4 + [8]) = *($5 + [88])
	$1 = CALL current_time()
	*($4 + [24]) = $6
	*($4 + [32]) = $2
	*($4 + [16]) = *($5 + [80])
	*($4 + [40]) = *($5 + [32])
	*($4 + [48]) = ((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($5 + [184]) = (($5 + [96]) + [64])
	*($5 + [180]) = ($5 + [96])
	*($5 + [176]) = ($5 + [96])
	*($5 + [160]) = ($5 + [176])
	*($5 + [212]) = ($4 + [8])
	*($5 + [208]) = $4
	*($5 + [216]) = ($4 + [16])
	*($5 + [220]) = ($4 + [24])
	*($5 + [224]) = ($4 + [40])
	$7 = ($4 + [48])
	*($5 + [228]) = $7
	*($5 + [232]) = ($4 + [56])
	CALL $48(($5 + [208]), ($5 + [160]))
	$1 = *($4)
	*($4 + [68]) = CALL db_store_i64(*($8), (int_64)-4800152022483468288, $11, $1, ($5 + [96]), [64])
	$8 = ($0 + [128])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$76 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$76
	$1 = *(($0 + [120]))
	$2 = *($4)
	*($5 + [208]) = *($7)
	*($4 + [72]) = CALL db_idx64_store($1, (int_64)-4800152022483468288, $11, $2, ($5 + [208]))
	*($5 + [208]) = $4
	$1 = *($4)
	*($5 + [96]) = $1
	$7 = *(($4 + [68]))
	*($5 + [176]) = $7
	$10 = ($0 + [140])
	$8 = *($10)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [144]))) ){ goto $label$57 }
	*($8 + [8]) = $1
	*($8 + [16]) = $7
	*($5 + [208]) = [0]
	*($8) = $4
	*($10) = ($8 + [24])
	$4 = *($5 + [208])
	*($5 + [208]) = [0]
	if ( $4 ){ goto $label$56 }
	goto $label$53 
	
.LABEL $label$58
	$2 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [352])) == (int_64)CALL eosio_assert0()), [10490])
	*(($4 = CALL _Znwj([64])) + [32]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [48]) = $9
	*($4) = $1
	*($4 + [8]) = *($5 + [88])
	*($4 + [16]) = *($5 + [80])
	$1 = CALL current_time()
	*($4 + [24]) = *($3)
	*($4 + [32]) = *(($3 + [8]))
	*($4 + [40]) = ((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($5 + [184]) = (($5 + [96]) + [48])
	*($5 + [180]) = ($5 + [96])
	*($5 + [176]) = ($5 + [96])
	*($5 + [160]) = ($5 + [176])
	*($5 + [212]) = ($4 + [8])
	*($5 + [208]) = $4
	*($5 + [216]) = ($4 + [16])
	*($5 + [220]) = ($4 + [24])
	$8 = ($4 + [40])
	*($5 + [224]) = $8
	CALL $46(($5 + [208]), ($5 + [160]))
	$1 = *($4)
	$7 = ($0 + [360])
	*($4 + [52]) = CALL db_store_i64(*($7), (int_64)4520745262589006720, $2, $1, ($5 + [96]), [48])
	$10 = ($0 + [368])
	if ( (uint_64)($1 <= *($10)) ){ goto $label$77 }
	*($10) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$77
	$1 = *($7)
	$6 = *($4)
	*($5 + [208]) = *($8)
	*($4 + [56]) = CALL db_idx64_store($1, (int_64)4520745262589006720, $2, $6, ($5 + [208]))
	*($5 + [208]) = $4
	$1 = *($4)
	*($5 + [96]) = $1
	$7 = *(($4 + [52]))
	*($5 + [176]) = $7
	$10 = ($0 + [380])
	$8 = *($10)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [384]))) ){ goto $label$55 }
	*($8 + [8]) = $1
	*($8 + [16]) = $7
	*($5 + [208]) = [0]
	*($8) = $4
	*($10) = ($8 + [24])
	$4 = *($5 + [208])
	*($5 + [208]) = [0]
	if ( $4 ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$57
	CALL $49(($0 + [136]), ($5 + [208]), ($5 + [96]), ($5 + [176]))
	$4 = *($5 + [208])
	*($5 + [208]) = [0]
	if ( ($4 == 0) ){ goto $label$53 }
	
.LABEL $label$56
	CALL _ZdlPv($4)
	goto $label$53 
	
.LABEL $label$55
	CALL $50(($0 + [376]), ($5 + [208]), ($5 + [96]), ($5 + [176]))
	$4 = *($5 + [208])
	*($5 + [208]) = [0]
	if ( ($4 == 0) ){ goto $label$53 }
	
.LABEL $label$54
	CALL _ZdlPv($4)
	
.LABEL $label$53
	$3 = ($0 + [152])
	$1 = *($5 + [88])
	$8 = *(($0 + [180]))
	$10 = *(($0 + [176]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$80 }
	
.LOOP $label$82:
	$4 = ($8 + [-24])
	$7 = *($4)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$81 }
	$8 = $4
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$82 }
	goto $label$80 
	
.LABEL $label$81
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$80 }
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$3), [10332])
	goto $label$79 
	
.LABEL $label$80
	$8 = ($0 + [160])
	$4 = CALL db_find_i64(*($3), *($8), (int_64)-6030912134838407168, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$78 }
	$7 = CALL $51($3, $4)
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$3), [10332])
	
.LABEL $label$79
	$2 = *($0)
	CALL eosio_assert([1], [10541])
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$3), [10576])
	CALL eosio_assert(((int_64)*(($0 + [152])) == (int_64)CALL eosio_assert0()), [10622])
	*($7 + [16]) = *($5 + [48])
	*(($7 + [24])) = *($5 + [56])
	*(($7 + [32])) = *((($5 + [48]) + [16]))
	*(($7 + [40])) = *((($5 + [48]) + [24]))
	$4 = ($7 + [48])
	*($5 + [200]) = *($4)
	$1 = *($7)
	*($4) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$1 == (int_64)*($7)), [10673])
	*($5 + [184]) = (($5 + [96]) + [56])
	*($5 + [180]) = ($5 + [96])
	*($5 + [176]) = ($5 + [96])
	*($5 + [160]) = ($5 + [176])
	*($5 + [212]) = ($7 + [16])
	*($5 + [208]) = $7
	*($5 + [216]) = $4
	*($5 + [220]) = ($7 + [56])
	CALL $52(($5 + [208]), ($5 + [160]))
	CALL db_update_i64(*($7 + [68]), $2, ($5 + [96]), [56])
	$8 = ($0 + [168])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$83 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$83
	*($5 + [208]) = *($4)
	if ( (CALL $142(($5 + [200]), ($5 + [208]), [8]) == 0) ){ goto $label$1 }
	$8 = ($7 + [72])
	$4 = *($8)
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$84 }
	$4 = CALL db_idx64_find_primary(*(($0 + [152])), *(($0 + [160])), (int_64)-6030912134838407168, ($5 + [160]), $1)
	*($8) = $4
	
.LABEL $label$84
	CALL db_idx64_update($4, $2, ($5 + [208]))
	$global$0 = ($5 + [240])
	return 
	
.LABEL $label$78
	$1 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [152])) == (int_64)CALL eosio_assert0()), [10490])
	*(($4 = CALL _Znwj([80])) + [64]) = $3
	*($4 + [56]) = (int_64)0
	*($4) = *($5 + [88])
	*($4 + [16]) = *($5 + [48])
	*(($4 + [24])) = *($5 + [56])
	*(($4 + [32])) = *((($5 + [48]) + [16]))
	*(($4 + [40])) = *((($5 + [48]) + [24]))
	*($4 + [48]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($5 + [184]) = (($5 + [96]) + [56])
	*($5 + [180]) = ($5 + [96])
	*($5 + [176]) = ($5 + [96])
	*($5 + [160]) = ($5 + [176])
	*($5 + [212]) = ($4 + [16])
	*($5 + [208]) = $4
	$7 = ($4 + [48])
	*($5 + [216]) = $7
	*($5 + [220]) = ($4 + [56])
	CALL $52(($5 + [208]), ($5 + [160]))
	$2 = *($4)
	*($4 + [68]) = CALL db_store_i64(*($8), (int_64)-6030912134838407168, $1, $2, ($5 + [96]), [56])
	$8 = ($0 + [168])
	if ( (uint_64)($2 <= *($8)) ){ goto $label$85 }
	*($8) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$85
	$2 = *(($0 + [160]))
	$6 = *($4)
	*($5 + [208]) = *($7)
	*($4 + [72]) = CALL db_idx64_store($2, (int_64)-6030912134838407168, $1, $6, ($5 + [208]))
	*($5 + [208]) = $4
	$1 = *($4)
	*($5 + [96]) = $1
	$7 = *(($4 + [68]))
	*($5 + [176]) = $7
	$10 = ($0 + [180])
	$8 = *($10)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [184]))) ){ goto $label$87 }
	*($8 + [8]) = $1
	*($8 + [16]) = $7
	*($5 + [208]) = [0]
	*($8) = $4
	*($10) = ($8 + [24])
	$0 = *($5 + [208])
	*($5 + [208]) = [0]
	if ( $0 ){ goto $label$86 }
	goto $label$1 
	
.LABEL $label$87
	CALL $53(($0 + [176]), ($5 + [208]), ($5 + [96]), ($5 + [176]))
	$0 = *($5 + [208])
	*($5 + [208]) = [0]
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$86
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($5 + [240])
}

int_32 .FUNC $4 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [16])
	$global$0 = $5
	CALL eosio_assert(((int_32)*($3) != (int_32)[-1]), [8238])
	$2 = CALL $123($0, *($2), *($3))
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	$3 = *($3)
	CALL $117($5, $0, $3, ($2 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$2 }
	*($1) = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)*($4) ^ (int_32)[1]), [8256])
	$global$0 = ($5 + [16])
	return $2
	
.LABEL $label$2
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$1
	CALL $119($1, [0])
	*(($1 + [8])) = *(($5 + [8]))
	*($1) = *($5)
	$global$0 = ($5 + [16])
	return $2
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [448])
	$global$0 = $3
	CALL memory()
	*($3 + [432]) = [8277]
	*($3 + [436]) = CALL $143([8277])
	*($3 + [208]) = *($3 + [432])
	CALL $6(($3 + [440]), ($3 + [208]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$2 }
	*($3 + [416]) = [8289]
	*($3 + [420]) = CALL $143([8289])
	*($3 + [200]) = *($3 + [416])
	CALL $6(($3 + [424]), ($3 + [200]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [412]) = [0]
	*($3 + [408]) = [1]
	*($3) = *($3 + [408])
	CALL $8($0, (int_64)6138663591592764928, $3)
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	*($3 + [400]) = [8298]
	*($3 + [404]) = CALL $143([8298])
	*($3 + [192]) = *($3 + [400])
	CALL $6(($3 + [440]), ($3 + [192]))
	if ( ((int_64)$2 != (int_64)6121143409794088960) ){ goto $label$3 }
	*($3 + [396]) = [0]
	*($3 + [392]) = [2]
	*($3 + [184]) = *($3 + [392])
	CALL $10($1, $1, ($3 + [184]))
	
.LABEL $label$3
	*($3 + [384]) = [8320]
	*($3 + [388]) = CALL $143([8320])
	*($3 + [176]) = *($3 + [384])
	CALL $6(($3 + [440]), ($3 + [176]))
	if ( ((int_64)$2 != (int_64)6295346183808221184) ){ goto $label$4 }
	*($3 + [380]) = [0]
	*($3 + [376]) = [3]
	*($3 + [8]) = *($3 + [376])
	CALL $12($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [368]) = [8340]
	*($3 + [372]) = CALL $143([8340])
	*($3 + [168]) = *($3 + [368])
	CALL $6(($3 + [440]), ($3 + [168]))
	if ( ((int_64)$2 != (int_64)3941441322321182720) ){ goto $label$5 }
	*($3 + [364]) = [0]
	*($3 + [360]) = [4]
	*($3 + [16]) = *($3 + [360])
	CALL $14($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [352]) = [8345]
	*($3 + [356]) = CALL $143([8345])
	*($3 + [160]) = *($3 + [352])
	CALL $6(($3 + [440]), ($3 + [160]))
	if ( ((int_64)$2 != (int_64)-8279611178955571200) ){ goto $label$6 }
	*($3 + [348]) = [0]
	*($3 + [344]) = [5]
	*($3 + [24]) = *($3 + [344])
	CALL $16($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [336]) = [8351]
	*($3 + [340]) = CALL $143([8351])
	*($3 + [152]) = *($3 + [336])
	CALL $6(($3 + [440]), ($3 + [152]))
	if ( ((int_64)$2 != (int_64)-4851762761689989120) ){ goto $label$7 }
	*($3 + [332]) = [0]
	*($3 + [328]) = [6]
	*($3 + [32]) = *($3 + [328])
	CALL $18($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [320]) = [8360]
	*($3 + [324]) = CALL $143([8360])
	*($3 + [144]) = *($3 + [320])
	CALL $6(($3 + [440]), ($3 + [144]))
	if ( ((int_64)$2 != (int_64)-3075276114210737504) ){ goto $label$8 }
	*($3 + [316]) = [0]
	*($3 + [312]) = [7]
	*($3 + [40]) = *($3 + [312])
	CALL $20($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [304]) = [8373]
	*($3 + [308]) = CALL $143([8373])
	*($3 + [136]) = *($3 + [304])
	CALL $6(($3 + [440]), ($3 + [136]))
	if ( ((int_64)$2 != (int_64)-3075276114208326310) ){ goto $label$9 }
	*($3 + [300]) = [0]
	*($3 + [296]) = [8]
	*($3 + [48]) = *($3 + [296])
	CALL $22($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [288]) = [8387]
	*($3 + [292]) = CALL $143([8387])
	*($3 + [128]) = *($3 + [288])
	CALL $6(($3 + [440]), ($3 + [128]))
	if ( ((int_64)$2 != (int_64)-5001342339331915776) ){ goto $label$10 }
	*($3 + [284]) = [0]
	*($3 + [280]) = [9]
	*($3 + [56]) = *($3 + [280])
	CALL $22($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$10
	*($3 + [272]) = [8394]
	*($3 + [276]) = CALL $143([8394])
	*($3 + [120]) = *($3 + [272])
	CALL $6(($3 + [440]), ($3 + [120]))
	if ( ((int_64)$2 != (int_64)3626333793311637504) ){ goto $label$11 }
	*($3 + [268]) = [0]
	*($3 + [264]) = [10]
	*($3 + [64]) = *($3 + [264])
	CALL $18($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$11
	*($3 + [256]) = [8405]
	*($3 + [260]) = CALL $143([8405])
	*($3 + [112]) = *($3 + [256])
	CALL $6(($3 + [440]), ($3 + [112]))
	if ( ((int_64)$2 != (int_64)-4851947011161194496) ){ goto $label$12 }
	*($3 + [252]) = [0]
	*($3 + [248]) = [11]
	*($3 + [72]) = *($3 + [248])
	CALL $18($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$12
	*($3 + [240]) = [8415]
	*($3 + [244]) = CALL $143([8415])
	*($3 + [104]) = *($3 + [240])
	CALL $6(($3 + [440]), ($3 + [104]))
	if ( ((int_64)$2 != (int_64)-4262246502895190016) ){ goto $label$13 }
	*($3 + [236]) = [0]
	*($3 + [232]) = [12]
	*($3 + [80]) = *($3 + [232])
	CALL $27($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$13
	*($3 + [224]) = [8425]
	*($3 + [228]) = CALL $143([8425])
	*($3 + [96]) = *($3 + [224])
	CALL $6(($3 + [440]), ($3 + [96]))
	if ( ((int_64)$2 != (int_64)-4262464928587186176) ){ goto $label$1 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [13]
	*($3 + [88]) = *($3 + [216])
	CALL $10($1, $1, ($3 + [88]))
	
.LABEL $label$1
	CALL $134([0])
	$global$0 = ($3 + [448])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = $1
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = $1
	$4 = ($4 & [1])
	$4 = *($0)
	if ( (( *($0 + [4]) ? uint_32($4 >> [1]) : $4 ) == 0) ){ goto $label$1 }
	$6 = ($0 + [1])
	$5 = ($0 + [8])
	$4 = ( *($5) ? $6 : $4 )
	$7 = ($2 + [-1])
	$3 = $1
	
.LOOP $label$2:
	$8 = *($4)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$3 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$4 }
	$2 = ($8 + [-87])
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$5 }
	$2 = ($8 + [-55])
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	CALL eosio_assert([0], [8192])
	
.LABEL $label$3
	$9 = ($2 << [4])
	*($3) = $9
	$11 = uint_32($11 >> [1])
	$12 = ($0 + [4])
	$13 = *($12)
	$11 = *($0)
	$2 = ($11 & [1])
	$8 = *($5)
	$10 = ($4 + [1])
	if ( ((int_32)$10 == (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$9 }
	$8 = *($10)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$7 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$8 }
	$2 = ($8 + [-87])
	goto $label$7 
	
.LABEL $label$9
	$4 = $10
	$3 = ($3 + [1])
	if ( $7 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$8
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$10 }
	$2 = ($8 + [-55])
	goto $label$7 
	
.LABEL $label$10
	$2 = [0]
	CALL eosio_assert([0], [8192])
	$9 = *($3)
	
.LABEL $label$7
	*($3) = ($9 | $2)
	$4 = ($4 + [2])
	$2 = *($0)
	$11 = uint_32($2 >> [1])
	$2 = ($2 & [1])
	$13 = *($12)
	$8 = *($5)
	$3 = ($3 + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	$7 = ($7 + [-1])
	if ( ((int_32)$4 != (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$2 }
	
.LABEL $label$1
	return ($3 - $1)
}

int_64 .FUNC $3 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0)
	$3 = ($2 & [1])
	$4 = ( *($0 + [8]) ? ($0 + [1]) : $3 )
	$3 = ( *($0 + [4]) ? uint_32($2 >> [1]) : $3 )
	if ( ($3 <= [4]) ){ goto $label$4 }
	$5 = ($3 + [-4])
	$0 = $4
	$2 = $3
	
.LOOP $label$5:
	CALL memcpy(($1 + [12]), $0, [4])
	$6 = ((int_32)*($1 + [12]) * (int_32)[1540483477])
	$2 = ((int_32)((int_32)((int_32)uint_32($6 >> [24]) ^ (int_32)$6) * (int_32)[1540483477]) ^ (int_32)((int_32)$2 * (int_32)[1540483477]))
	$0 = ($0 + [4])
	$3 = ($3 + [-4])
	if ( ((uint_32)$3 > (uint_32)[3]) ){ goto $label$5 }
	$0 = ($5 & [-4])
	$4 = (($4 + $0) + [4])
	$3 = ($5 - $0)
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$2 = $3
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$6 }
	if ( ((int_32)$3 != (int_32)[3]) ){ goto $label$1 }
	$2 = ((int_32)(*($4 + [2]) << [16]) ^ (int_32)$2)
	
.LABEL $label$6
	$2 = ((int_32)(*($4 + [1]) << [8]) ^ (int_32)$2)
	
.LABEL $label$2
	$2 = ((int_32)((int_32)$2 ^ (int_32)*($4)) * (int_32)[1540483477])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	$0 = ((int_32)((int_32)uint_32($2 >> [13]) ^ (int_32)$2) * (int_32)[1540483477])
	return (CASTING uint_64)(uint_32 ((int_32)uint_32($0 >> [15]) ^ (int_32)$0))
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($3 + [15]) = $1
	$1 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($4 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = (($4 + [17]) & [-16])
	$1 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($3 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $121($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $115($0)
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [496])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $146($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [440])) = [0]
	*($4 + [424]) = (int_64)0
	*($4 + [432]) = (int_64)0
	*($4 + [416]) = ($2 + $7)
	*($4 + [408]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10406])
	CALL memcpy(($4 + [424]), $2, [8])
	*($4 + [412]) = ($2 + [8])
	$8 = (($4 + [424]) + [8])
	CALL $75(($4 + [408]), $8)
	*(($3 = ($4 + [8]))) = *($4 + [416])
	*($4) = *($4 + [408])
	$3 = *($3)
	*((($4 + [448]) + [8])) = $3
	*(($9 = (($4 + [464]) + [8]))) = $3
	$10 = *($4)
	*($4 + [464]) = $10
	*($4 + [448]) = $10
	$3 = *($9)
	*((($4 + [480]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [464])
	*($4 + [32]) = $1
	*($4 + [480]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = (int_64)0
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [164])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [184])) = (int_64)-1
	*(($4 + [176])) = $0
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*(($4 + [204])) = [0]
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [244])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*(($4 + [286])) = [0]
	*(($4 + [284])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $0
	*(($4 + [296])) = $0
	*(($4 + [304])) = (int_64)-1
	*(($4 + [312])) = (int_64)0
	*(($4 + [320])) = [0]
	*(($4 + [326])) = [0]
	*(($4 + [324])) = [0]
	*(($4 + [336])) = $0
	*(($4 + [344])) = (int_64)-1
	*(($4 + [352])) = (int_64)0
	*(($4 + [360])) = [0]
	*(($4 + [376])) = $0
	*(($4 + [384])) = (int_64)-1
	*(($4 + [392])) = (int_64)0
	*(($4 + [400])) = [0]
	*($4 + [288]) = $0
	*($4 + [328]) = $0
	*($4 + [368]) = $0
	*(($4 + [404])) = [0]
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($4 + [424])
	$8 = CALL $116(($4 + [464]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $116(($4 + [480]), $8)
	CALL void $3((int_32 $0), (int_64 $5), (int_32 $6))
	if ( (*($4 + [480]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [464]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [464]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($8 + [8]))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $149($2)
	
.LABEL $label$5
	CALL $31(($4 + [16]))
	if ( ((*($4 + [432]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [440])))
	
.LABEL $label$10
	$global$0 = ($4 + [496])
	return [1]
}

void .FUNC $15 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$3 = ($global$0 - [112])
	$global$0 = $3
	CALL require_auth($1)
	$4 = ($0 + [152])
	$6 = *(($0 + [180]))
	$5 = *(($0 + [176]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$6:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$5 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$4), [10332])
	goto $label$3 
	
.LABEL $label$4
	$6 = ($0 + [160])
	$7 = CALL db_find_i64(*($4), *($6), (int_64)-6030912134838407168, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $51($4, $7)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$4), [10332])
	
.LABEL $label$3
	$9 = *($0)
	CALL eosio_assert([1], [10541])
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$4), [10576])
	CALL eosio_assert(((int_64)*(($0 + [152])) == (int_64)CALL eosio_assert0()), [10622])
	*($8 + [16]) = *($2)
	*(($8 + [24])) = *(($2 + [8]))
	*(($8 + [32])) = *(($2 + [16]))
	*(($8 + [40])) = *(($2 + [24]))
	$7 = ($8 + [48])
	*($3 + [80]) = *($7)
	$1 = *($8)
	*($7) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [10673])
	*($3 + [72]) = ($3 + [56])
	*($3 + [68]) = $3
	*($3 + [64]) = $3
	*($3 + [88]) = ($3 + [64])
	*($3 + [100]) = ($8 + [16])
	*($3 + [96]) = $8
	*($3 + [104]) = $7
	*($3 + [108]) = ($8 + [56])
	CALL $52(($3 + [96]), ($3 + [88]))
	CALL db_update_i64(*($8 + [68]), $9, $3, [56])
	$6 = ($0 + [168])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$7 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($3 + [96]) = *($7)
	if ( (CALL $142(($3 + [80]), ($3 + [96]), [8]) == 0) ){ goto $label$1 }
	$6 = ($8 + [72])
	$7 = *($6)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$8 }
	$7 = CALL db_idx64_find_primary(*(($0 + [152])), *(($0 + [160])), (int_64)-6030912134838407168, ($3 + [88]), $1)
	*($6) = $7
	
.LABEL $label$8
	CALL db_idx64_update($7, $9, ($3 + [96]))
	$global$0 = ($3 + [112])
	return 
	
.LABEL $label$2
	$9 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [152])) == (int_64)CALL eosio_assert0()), [10490])
	*(($7 = CALL _Znwj([80])) + [64]) = $4
	*($7 + [56]) = (int_64)0
	*($7) = $1
	*($7 + [16]) = *($2)
	*(($7 + [24])) = *(($2 + [8]))
	*(($7 + [32])) = *(($2 + [16]))
	*(($7 + [40])) = *(($2 + [24]))
	*($7 + [48]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($3 + [72]) = ($3 + [56])
	*($3 + [68]) = $3
	*($3 + [64]) = $3
	*($3 + [88]) = ($3 + [64])
	*($3 + [100]) = ($7 + [16])
	*($3 + [96]) = $7
	$8 = ($7 + [48])
	*($3 + [104]) = $8
	*($3 + [108]) = ($7 + [56])
	CALL $52(($3 + [96]), ($3 + [88]))
	$1 = *($7)
	*($7 + [68]) = CALL db_store_i64(*($6), (int_64)-6030912134838407168, $9, $1, $3, [56])
	$6 = ($0 + [168])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$9 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$1 = *(($0 + [160]))
	$10 = *($7)
	*($3 + [96]) = *($8)
	*($7 + [72]) = CALL db_idx64_store($1, (int_64)-6030912134838407168, $9, $10, ($3 + [96]))
	*($3 + [96]) = $7
	$1 = *($7)
	*($3) = $1
	$8 = *(($7 + [68]))
	*($3 + [64]) = $8
	$5 = ($0 + [180])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [184]))) ){ goto $label$11 }
	*($6 + [8]) = $1
	*($6 + [16]) = $8
	*($3 + [96]) = [0]
	*($6) = $7
	*($5) = ($6 + [24])
	$7 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( $7 ){ goto $label$10 }
	goto $label$1 
	
.LABEL $label$11
	CALL $53(($0 + [176]), ($3 + [96]), $3, ($3 + [64]))
	$7 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$10
	CALL _ZdlPv($7)
	
.LABEL $label$1
	$global$0 = ($3 + [112])
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [576])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $146($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [432]) + [40]))) = (int_64)0
	*(($8 = (($4 + [432]) + [32]))) = (int_64)0
	*(($9 = (($4 + [432]) + [24]))) = (int_64)0
	*($4 + [448]) = (int_64)0
	*($4 + [432]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10406])
	CALL memcpy(($4 + [432]), $2, [8])
	CALL eosio_assert(((uint_32)($7 + [-8]) > (uint_32)[31]), [10406])
	CALL memcpy((($4 + [432]) + [16]), ($2 + [8]), [32])
	*(($4 + [60])) = ($2 + [40])
	*((($4 + [40]) + [24])) = ($2 + $7)
	*((($4 + [40]) + [40])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [108])) = [0]
	*(($4 + [120])) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = (int_64)0
	*(($4 + [160])) = $0
	*($4 + [48]) = $1
	*($4 + [40]) = $0
	*($4 + [56]) = $2
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*($4 + [152]) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [188])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [228])) = [0]
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = (int_64)0
	*(($4 + [264])) = [0]
	*(($4 + [268])) = [0]
	*(($4 + [280])) = $0
	*($4 + [192]) = $0
	*($4 + [232]) = $0
	*($4 + [272]) = $0
	*(($4 + [288])) = (int_64)-1
	*(($4 + [296])) = (int_64)0
	*(($4 + [304])) = [0]
	*(($4 + [310])) = [0]
	*(($4 + [308])) = [0]
	*(($4 + [320])) = $0
	*(($4 + [328])) = (int_64)-1
	*(($4 + [336])) = (int_64)0
	*(($4 + [344])) = [0]
	*(($4 + [350])) = [0]
	*(($4 + [348])) = [0]
	*(($4 + [360])) = $0
	*(($4 + [368])) = (int_64)-1
	*(($4 + [376])) = (int_64)0
	*(($4 + [384])) = [0]
	*($4 + [312]) = $0
	*($4 + [352]) = $0
	*(($4 + [400])) = $0
	*(($4 + [408])) = (int_64)-1
	*(($4 + [416])) = (int_64)0
	*(($4 + [424])) = [0]
	*(($4 + [428])) = [0]
	*($4 + [392]) = $0
	*(($10 = (($4 + [480]) + [16]))) = *($8)
	*(($8 = (($4 + [480]) + [24]))) = *($3)
	*($4 + [480]) = *($4 + [448])
	*($4 + [488]) = *($9)
	$0 = *($4 + [432])
	*((($4 + [512]) + [24])) = *($8)
	*((($4 + [512]) + [16])) = *($10)
	*($4 + [520]) = *($4 + [488])
	*($4 + [512]) = *($4 + [480])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$1 = *((($4 + [512]) + [24]))
	*((($4 + [544]) + [24])) = $1
	$11 = *((($4 + [512]) + [16]))
	*((($4 + [544]) + [16])) = $11
	*(($4 + [16])) = $11
	*(($4 + [24])) = $1
	$1 = *($4 + [520])
	*($4 + [552]) = $1
	$11 = *($4 + [512])
	*($4) = $11
	*($4 + [544]) = $11
	*($4 + [8]) = $1
	CALL void $3((int_32 $0), (int_64 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $149($2)
	
.LABEL $label$5
	CALL $31(($4 + [40]))
	$global$0 = ($4 + [576])
	return [1]
}

void .FUNC $17 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [32])
	$5 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)$3), [10332])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)7035936280380043264, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $76($3, $6)
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)$3), [10332])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [8829])
	CALL eosio_assert($6, [10732])
	CALL eosio_assert($6, [10766])
	$6 = CALL db_next_i64(*($7 + [108]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $76($3, $6)
	
.LABEL $label$5
	CALL $77($3, $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [416])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $146($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [400]) = (int_64)0
	*($4 + [392]) = (int_64)0
	*($4 + [408]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10406])
	CALL memcpy(($4 + [392]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [10406])
	CALL memcpy((($4 + [392]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [10406])
	CALL memcpy((($4 + [392]) + [16]), ($2 + [16]), [8])
	*(($4 + [20])) = ($2 + [24])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = (int_64)0
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [148])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [188])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [228])) = [0]
	*(($4 + [240])) = $0
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*($4 + [232]) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = (int_64)0
	*(($4 + [264])) = [0]
	*(($4 + [270])) = [0]
	*(($4 + [268])) = [0]
	*(($4 + [280])) = $0
	*(($4 + [288])) = (int_64)-1
	*(($4 + [296])) = (int_64)0
	*(($4 + [304])) = [0]
	*(($4 + [310])) = [0]
	*(($4 + [308])) = [0]
	*(($4 + [320])) = $0
	*(($4 + [328])) = (int_64)-1
	*(($4 + [336])) = (int_64)0
	*(($4 + [344])) = [0]
	*($4 + [272]) = $0
	*($4 + [312]) = $0
	*(($4 + [360])) = $0
	*(($4 + [368])) = (int_64)-1
	*(($4 + [376])) = (int_64)0
	*(($4 + [384])) = [0]
	*(($4 + [388])) = [0]
	*($4 + [352]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [408])
	$1 = *($4 + [400])
	$8 = *($4 + [392])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $8), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $149($2)
	
.LABEL $label$5
	CALL $31($4)
	$global$0 = ($4 + [416])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4, int_64 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	float_64 $19
	float_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_64 $25
	float_64 $26
	int_64 $27
	int_64 $28
	int_64 $29
	$7 = ($global$0 - [352])
	$global$0 = $7
	CALL require_auth(*($0))
	CALL require_recipient($1)
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($2) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8758])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($3) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8774])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($6) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8792])
	$8 = CALL $143([8273])
	if ( ($8 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9629])
	goto $label$3 
	
.LABEL $label$4
	if ( ($8 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = (int_64)0
	
.LOOP $label$5:
	$10 = *(($8 + [8272]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$6
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$5 }
	$9 = ((int_64)$9 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)((int_64)$9 | (int_64)4)), [8806])
	$8 = CALL $143([8273])
	if ( ($8 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [9629])
	goto $label$9 
	
.LABEL $label$10
	if ( ($8 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$9 = (int_64)0
	
.LOOP $label$11:
	$10 = *(($8 + [8272]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$12
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$11 }
	$9 = ((int_64)$9 << (int_64)8)
	goto $label$7 
	
.LABEL $label$8
	$9 = (int_64)0
	
.LABEL $label$7
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)((int_64)$9 | (int_64)4)), [8806])
	$8 = CALL $143([8273])
	if ( ($8 <= [8]) ){ goto $label$16 }
	CALL eosio_assert([0], [9629])
	goto $label$15 
	
.LABEL $label$16
	if ( ($8 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$9 = (int_64)0
	
.LOOP $label$17:
	$10 = *(($8 + [8272]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$18 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$18
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$17 }
	$9 = ((int_64)$9 << (int_64)8)
	goto $label$13 
	
.LABEL $label$14
	$9 = (int_64)0
	
.LABEL $label$13
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)((int_64)$9 | (int_64)4)), [8806])
	$9 = CALL $45($0, $1, $4)
	$11 = ($0 + [112])
	$10 = *(($0 + [140]))
	$12 = *(($0 + [136]))
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$20 }
	
.LOOP $label$22:
	$8 = ($10 + [-24])
	$13 = *($8)
	if ( ((int_64)*($13) == (int_64)$9) ){ goto $label$21 }
	$10 = $8
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$20 }
	CALL eosio_assert(((int_32)*($13 + [64]) == (int_32)$11), [10332])
	goto $label$19 
	
.LABEL $label$20
	$13 = [0]
	$8 = CALL db_find_i64(*($11), *(($0 + [120])), (int_64)-4800152022483468288, $9)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$19 }
	$13 = CALL $47($11, $8)
	CALL eosio_assert(((int_32)*($13 + [64]) == (int_32)$11), [10332])
	
.LABEL $label$19
	$14 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($14, [8829])
	CALL eosio_assert(((int_64)*($13 + [24]) > (int_64)0), [8846])
	CALL eosio_assert(((int_64)*(($13 + [32])) == (int_64)*(($2 + [8]))), [9796])
	CALL eosio_assert(((int_64)*($13 + [24]) == (int_64)*($2)), [8870])
	CALL eosio_assert(((int_64)*($13 + [16]) == (int_64)$5), [8898])
	CALL eosio_assert(((int_64)*($13 + [40]) == (int_64)$4), [8924])
	$15 = ($0 + [232])
	$10 = *(($0 + [260]))
	$16 = *(($0 + [256]))
	if ( ((int_32)$16 == (int_32)$10) ){ goto $label$29 }
	
.LOOP $label$31:
	$8 = ($10 + [-24])
	$12 = *($8)
	if ( ((int_64)*($12) == (int_64)$1) ){ goto $label$30 }
	$10 = $8
	if ( ((int_32)$16 != (int_32)$8) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	if ( ((int_32)$16 == (int_32)$10) ){ goto $label$29 }
	CALL eosio_assert(((int_32)*($12 + [48]) == (int_32)$15), [10332])
	goto $label$28 
	
.LABEL $label$29
	$8 = CALL db_find_i64(*($15), *(($0 + [240])), (int_64)8428183964630790656, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$27 }
	$12 = CALL $34($15, $8)
	CALL eosio_assert(((int_32)*($12 + [48]) == (int_32)$15), [10332])
	
.LABEL $label$28
	$17 = ($0 + [272])
	$5 = *($12 + [16])
	$10 = *(($0 + [300]))
	$18 = *(($0 + [296]))
	if ( ((int_32)$18 == (int_32)$10) ){ goto $label$25 }
	
.LOOP $label$32:
	$8 = ($10 + [-24])
	$16 = *($8)
	if ( ((int_64)*($16) == (int_64)$5) ){ goto $label$26 }
	$10 = $8
	if ( ((int_32)$18 != (int_32)$8) ){ goto $label$32 }
	goto $label$25 
	
.LABEL $label$27
	$5 = *($13 + [56])
	$19 = (float_64)0.1
	$20 = (float_64)0
	$12 = [0]
	goto $label$23 
	
.LABEL $label$26
	if ( ((int_32)$18 == (int_32)$10) ){ goto $label$25 }
	CALL eosio_assert(((int_32)*($16 + [64]) == (int_32)$17), [10332])
	goto $label$24 
	
.LABEL $label$25
	$16 = [0]
	$8 = CALL db_find_i64(*($17), *(($0 + [280])), (int_64)-5001503146665574400, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$24 }
	$16 = CALL $38($17, $8)
	CALL eosio_assert(((int_32)*($16 + [64]) == (int_32)$17), [10332])
	
.LABEL $label$24
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [8948])
	$9 = *($16 + [48])
	if ( ((uint_64)$9 >= (uint_64)(int_64)6) ){ goto $label$34 }
	$19 = *((((CASTING uint_32)(uint_64 $9) << [3]) + [10944]))
	goto $label$33 
	
.LABEL $label$34
	CALL eosio_assert([0], [9855])
	$19 = (float_64)0.1
	
.LABEL $label$33
	$20 = *($12 + [40])
	CALL eosio_assert(((float_64)$19 >= (float_64)$20), [8978])
	
.LABEL $label$23
	CALL eosio_assert($14, [10732])
	CALL eosio_assert($14, [10766])
	$8 = CALL db_next_i64(*($13 + [68]), ($7 + [256]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$35 }
	CALL $47($11, $8)
	
.LABEL $label$35
	CALL $57($11, $13)
	if ( ((int_64)*($3) < (int_64)1) ){ goto $label$36 }
	*($7 + [336]) = (int_64)3617214756542218240
	*($7 + [328]) = *($0)
	CALL $58(($7 + [80]), $0, $1, $4)
	*(($7 + [280])) = *(($3 + [8]))
	$8 = (($7 + [80]) + [8])
	*(($7 + [296])) = *($8)
	*($8) = [0]
	*($7 + [264]) = $1
	*($7 + [256]) = *($0)
	*($7 + [272]) = *($3)
	*($7 + [288]) = *($7 + [80])
	*($7 + [80]) = (int_64)0
	$8 = CALL $59(($7 + [200]), ($7 + [328]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($7 + [256]))
	CALL $60(($7 + [184]), $8)
	$10 = *($7 + [184])
	CALL send_inline($10, (*($7 + [188]) - $10))
	$10 = *($7 + [184])
	if ( ($10 == 0) ){ goto $label$37 }
	*($7 + [188]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$37
	$10 = *($8 + [28])
	if ( ($10 == 0) ){ goto $label$38 }
	*(($8 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$38
	$10 = *($8 + [16])
	if ( ($10 == 0) ){ goto $label$39 }
	*(($8 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$39
	if ( ((*(($7 + [288])) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*(($7 + [296])))
	
.LABEL $label$40
	if ( ((*($7 + [80]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($7 + [88])))
	
.LABEL $label$36
	$9 = *($6)
	CALL __multi3(($7 + [48]), $9, (int_64)$9 >> (int_64)63), (int_64)3, (int_64)0)
	$21 = *(($6 + [8]))
	$9 = *((($7 + [48]) + [8]))
	$22 = *($7 + [48])
	CALL eosio_assert(( (uint_64)($22 <= (int_64)4611686018427387904) ? ((int_64)$9 < (int_64)0) : (int_64)($9 == 0) ), [9975])
	CALL eosio_assert(( ((uint_64)$22 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$9 > (int_64)-1) : ((int_64)$9 == (int_64)-1) ), [9999])
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9950])
	$18 = ($0 + [312])
	$23 = ((int_64)$22 / (int_64)200)
	$10 = *(($0 + [340]))
	$13 = *(($0 + [336]))
	if ( ((int_32)$13 == (int_32)$10) ){ goto $label$44 }
	
.LOOP $label$46:
	$8 = ($10 + [-24])
	$16 = *($8)
	if ( ((int_64)*($16) == (int_64)$1) ){ goto $label$45 }
	$10 = $8
	if ( ((int_32)$13 != (int_32)$8) ){ goto $label$46 }
	goto $label$44 
	
.LABEL $label$45
	if ( ((int_32)$13 == (int_32)$10) ){ goto $label$44 }
	CALL eosio_assert(((int_32)*($16 + [24]) == (int_32)$18), [10332])
	if ( ($16 == 0) ){ goto $label$42 }
	if ( ((int_64)$22 < (int_64)200) ){ goto $label$41 }
	goto $label$43 
	
.LABEL $label$44
	$8 = CALL db_find_i64(*($18), *(($0 + [320])), (int_64)-6219583600791126016, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$42 }
	CALL eosio_assert(((int_32)*(CALL $61($18, $8) + [24]) == (int_32)$18), [10332])
	if ( ((int_64)$22 < (int_64)200) ){ goto $label$41 }
	
.LABEL $label$43
	*($7 + [336]) = (int_64)3617214756542218240
	*($7 + [328]) = *($0)
	CALL $62(($7 + [80]), $0, $1, $4)
	*(($7 + [280])) = $21
	$8 = ($7 + [88])
	*(($7 + [296])) = *($8)
	*($8) = [0]
	*($7 + [264]) = $1
	*($7 + [272]) = $23
	*($7 + [256]) = *($0)
	*($7 + [288]) = *($7 + [80])
	*($7 + [80]) = (int_64)0
	$8 = CALL $59(($7 + [200]), ($7 + [328]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($7 + [256]))
	CALL $60(($7 + [184]), $8)
	$10 = *($7 + [184])
	CALL send_inline($10, (*($7 + [188]) - $10))
	$10 = *($7 + [184])
	if ( ($10 == 0) ){ goto $label$47 }
	*($7 + [188]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$47
	$10 = *($8 + [28])
	if ( ($10 == 0) ){ goto $label$48 }
	*(($8 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$48
	$10 = *($8 + [16])
	if ( ($10 == 0) ){ goto $label$49 }
	*(($8 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$49
	if ( ((*(($7 + [288])) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*(($7 + [296])))
	
.LABEL $label$50
	if ( ((*($7 + [80]) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*(($7 + [88])))
	$global$0 = ($7 + [352])
	return (unreachable)
	
.LABEL $label$42
	$8 = CALL $143([8273])
	if ( ($8 <= [8]) ){ goto $label$54 }
	CALL eosio_assert([0], [9629])
	goto $label$53 
	
.LABEL $label$54
	if ( ($8 == 0) ){ goto $label$52 }
	
.LABEL $label$53
	$9 = (int_64)0
	
.LOOP $label$55:
	$10 = *(($8 + [8272]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$56 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$56
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$55 }
	$22 = ((int_64)$9 << (int_64)8)
	goto $label$51 
	
.LABEL $label$52
	$22 = (int_64)0
	
.LABEL $label$51
	CALL eosio_assert([1], [9727])
	$9 = (uint_64)$22 >> (uint_64)(int_64)8)
	$24 = ((int_64)$22 | (int_64)4)
	$8 = [0]
	
.LOOP $label$59:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$58 }
	$22 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$60 }
	$9 = $22
	$10 = [1]
	$13 = $8
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$60
	$9 = $22
	
.LOOP $label$61:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$58 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$13 = ($8 + [1])
	$8 = $13
	if ( $10 ){ goto $label$61 }
	$10 = [1]
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$58
	$10 = [0]
	
.LABEL $label$57
	CALL eosio_assert($10, [9776])
	$25 = (int_64)0
	if ( ((int_64)$5 != (int_64)*($0)) ){ goto $label$63 }
	$22 = $23
	goto $label$62 
	
.LABEL $label$63
	$22 = $23
	if ( (CALL is_account($5) == 0) ){ goto $label$62 }
	$8 = CALL $143([8273])
	$10 = ($8 <= [8])
	$19 = (CASTING float_64)(int_64 $23)
	$26 = ((float_64)(float_64))($19 - $20) * (float_64)$19
	if ( ((float_64)(float_64)|$26)| < (float_64)(float_64)9223372036854775808) ){ goto $label$68 }
	$25 = (int_64)-9223372036854775808
	if ( ($10 == 0) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$68
	$25 = (Rounds 0)($26)
	if ( $10 ){ goto $label$66 }
	
.LABEL $label$67
	CALL eosio_assert([0], [9629])
	goto $label$65 
	
.LABEL $label$66
	if ( $8 ){ goto $label$65 }
	$22 = (int_64)0
	goto $label$64 
	
.LABEL $label$65
	$9 = (int_64)0
	
.LOOP $label$69:
	$10 = *(($8 + [8272]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$70 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$70
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$69 }
	$22 = ((int_64)$9 << (int_64)8)
	
.LABEL $label$64
	CALL eosio_assert((uint_64)(((int_64)$25 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$9 = (uint_64)$22 >> (uint_64)(int_64)8)
	$24 = ((int_64)$22 | (int_64)4)
	$8 = [0]
	
.LOOP $label$73:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$72 }
	$22 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$74 }
	$9 = $22
	$10 = [1]
	$13 = $8
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$74
	$9 = $22
	
.LOOP $label$75:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$72 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$13 = ($8 + [1])
	$8 = $13
	if ( $10 ){ goto $label$75 }
	$10 = [1]
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$72
	$10 = [0]
	
.LABEL $label$71
	CALL eosio_assert($10, [9776])
	if ( ((int_64)$25 < (int_64)1) ){ goto $label$76 }
	*($7 + [336]) = (int_64)3617214756542218240
	*($7 + [328]) = *($0)
	CALL $63(($7 + [80]), $0, $1, $4)
	*(($7 + [280])) = $24
	$8 = ($7 + [88])
	*(($7 + [296])) = *($8)
	*($8) = [0]
	*($7 + [264]) = $5
	*($7 + [272]) = $25
	*($7 + [256]) = *($0)
	*($7 + [288]) = *($7 + [80])
	*($7 + [80]) = (int_64)0
	$8 = CALL $59(($7 + [200]), ($7 + [328]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($7 + [256]))
	CALL $60(($7 + [184]), $8)
	$10 = *($7 + [184])
	CALL send_inline($10, (*($7 + [188]) - $10))
	$10 = *($7 + [184])
	if ( ($10 == 0) ){ goto $label$77 }
	*($7 + [188]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$77
	$10 = *($8 + [28])
	if ( ($10 == 0) ){ goto $label$78 }
	*(($8 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$78
	$10 = *($8 + [16])
	if ( ($10 == 0) ){ goto $label$79 }
	*(($8 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$79
	if ( ((*(($7 + [288])) & [1]) == 0) ){ goto $label$80 }
	CALL _ZdlPv(*(($7 + [296])))
	
.LABEL $label$80
	if ( ((*($7 + [80]) & [1]) == 0) ){ goto $label$76 }
	CALL _ZdlPv(*(($7 + [88])))
	
.LABEL $label$76
	$8 = CALL $143([8273])
	$10 = ($8 <= [8])
	$19 = ((float_64)$20 * (float_64)$19)
	if ( ((float_64)(float_64)|$19| < (float_64)(float_64)9223372036854775808) ){ goto $label$85 }
	$22 = (int_64)-9223372036854775808
	if ( ($10 == 0) ){ goto $label$84 }
	goto $label$83 
	
.LABEL $label$85
	$22 = (Rounds 0)($19)
	if ( $10 ){ goto $label$83 }
	
.LABEL $label$84
	CALL eosio_assert([0], [9629])
	goto $label$82 
	
.LABEL $label$83
	if ( $8 ){ goto $label$82 }
	$5 = (int_64)0
	goto $label$81 
	
.LABEL $label$82
	$9 = (int_64)0
	
.LOOP $label$86:
	$10 = *(($8 + [8272]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$87 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$87
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$86 }
	$5 = ((int_64)$9 << (int_64)8)
	
.LABEL $label$81
	CALL eosio_assert((uint_64)(((int_64)$22 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$9 = (uint_64)$5 >> (uint_64)(int_64)8)
	$27 = ((int_64)$5 | (int_64)4)
	$8 = [0]
	
.LOOP $label$90:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$89 }
	$5 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$91 }
	$9 = $5
	$10 = [1]
	$13 = $8
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$90 }
	goto $label$88 
	
.LABEL $label$91
	$9 = $5
	
.LOOP $label$92:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$89 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$13 = ($8 + [1])
	$8 = $13
	if ( $10 ){ goto $label$92 }
	$10 = [1]
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$90 }
	goto $label$88 
	
.LABEL $label$89
	$10 = [0]
	
.LABEL $label$88
	CALL eosio_assert($10, [9776])
	if ( ((int_64)$22 < (int_64)1) ){ goto $label$93 }
	*($7 + [336]) = (int_64)3617214756542218240
	*($7 + [328]) = *($0)
	CALL $64(($7 + [80]), $0, $1, $4)
	*(($7 + [280])) = $27
	$8 = ($7 + [88])
	*(($7 + [296])) = *($8)
	*($8) = [0]
	*($7 + [264]) = $1
	*($7 + [272]) = $22
	*($7 + [256]) = *($0)
	*($7 + [288]) = *($7 + [80])
	*($7 + [80]) = (int_64)0
	$8 = CALL $59(($7 + [200]), ($7 + [328]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($7 + [256]))
	CALL $60(($7 + [184]), $8)
	$10 = *($7 + [184])
	CALL send_inline($10, (*($7 + [188]) - $10))
	$10 = *($7 + [184])
	if ( ($10 == 0) ){ goto $label$94 }
	*($7 + [188]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$94
	$10 = *($8 + [28])
	if ( ($10 == 0) ){ goto $label$95 }
	*(($8 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$95
	$10 = *($8 + [16])
	if ( ($10 == 0) ){ goto $label$96 }
	*(($8 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$96
	if ( ((*(($7 + [288])) & [1]) == 0) ){ goto $label$97 }
	CALL _ZdlPv(*(($7 + [296])))
	
.LABEL $label$97
	if ( ((*($7 + [80]) & [1]) == 0) ){ goto $label$93 }
	CALL _ZdlPv(*(($7 + [88])))
	
.LABEL $label$93
	CALL eosio_assert(((int_64)$24 == (int_64)$21), [10135])
	$9 = (int_64)
	CALL eosio_assert(((int_64)$9($23 - $25)) > (int_64)-4611686018427387904), [10183])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [10205])
	CALL eosio_assert(((int_64)$27 == (int_64)$21), [10135])
	$22 = (int_64)
	CALL eosio_assert(((int_64)$22($9 - $22)) > (int_64)-4611686018427387904), [10183])
	CALL eosio_assert(((int_64)$22 < (int_64)4611686018427387904), [10205])
	
.LABEL $label$62
	$18 = ($0 + [72])
	$10 = *(($0 + [100]))
	$16 = *(($0 + [96]))
	if ( ((int_32)$16 == (int_32)$10) ){ goto $label$99 }
	
.LOOP $label$101:
	$8 = ($10 + [-24])
	$13 = *($8)
	if ( ((int_64)*($13) == (int_64)$1) ){ goto $label$100 }
	$10 = $8
	if ( ((int_32)$16 != (int_32)$8) ){ goto $label$101 }
	goto $label$99 
	
.LABEL $label$100
	if ( ((int_32)$16 == (int_32)$10) ){ goto $label$99 }
	CALL eosio_assert(((int_32)*($13 + [72]) == (int_32)$18), [10332])
	goto $label$98 
	
.LABEL $label$99
	$13 = [0]
	$8 = CALL db_find_i64(*($18), *(($0 + [80])), (int_64)-4157500428759203840, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$98 }
	$13 = CALL $37($18, $8)
	CALL eosio_assert(((int_32)*($13 + [72]) == (int_32)$18), [10332])
	
.LABEL $label$98
	$8 = CALL $143([8273])
	if ( ($8 <= [8]) ){ goto $label$106 }
	CALL eosio_assert([0], [9629])
	goto $label$105 
	
.LABEL $label$106
	if ( ($8 == 0) ){ goto $label$104 }
	
.LABEL $label$105
	$9 = (int_64)0
	
.LOOP $label$107:
	$10 = *(($8 + [8272]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$108 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$108
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$107 }
	$9 = ((int_64)$9 << (int_64)8)
	$8 = [8]
	$5 = (int_64)0
	if ( ($13 == 0) ){ goto $label$102 }
	goto $label$103 
	
.LABEL $label$104
	$9 = (int_64)0
	$8 = [8]
	$5 = (int_64)0
	if ( ($13 == 0) ){ goto $label$102 }
	
.LABEL $label$103
	if ( ((int_64)*(($2 + $8)) != (int_64)((int_64)$9 | (int_64)4)) ){ goto $label$102 }
	$5 = *($13 + [8])
	
.LABEL $label$102
	*((($7 + [32]) + $8)) = $21
	*($7 + [176]) = $21
	*($7 + [32]) = $23
	*($7 + [168]) = $23
	CALL $65(($7 + [184]), $0, ($7 + [32]), ((CASTING uint_32)(uint_64 $5) & [255]))
	if ( ((int_64)*($7 + [184]) < (int_64)1) ){ goto $label$109 }
	CALL eosio_assert(((int_64)*($7 + [192]) == (int_64)$21), [10135])
	$22 = (int_64)
	CALL eosio_assert(((int_64)$22($22 - *($7 + [184]))) > (int_64)-4611686018427387904), [10183])
	CALL eosio_assert(((int_64)$22 < (int_64)4611686018427387904), [10205])
	*($7 + [336]) = (int_64)3617214756542218240
	*($7 + [328]) = *($0)
	CALL $66(($7 + [240]), $0, $1, $4)
	*(($7 + [280])) = *($7 + [192])
	$8 = ($7 + [248])
	*(($7 + [296])) = *($8)
	*($8) = [0]
	*($7 + [264]) = $1
	*($7 + [256]) = *($0)
	*($7 + [272]) = *($7 + [184])
	*($7 + [288]) = *($7 + [240])
	*($7 + [240]) = (int_64)0
	$8 = CALL $59(($7 + [200]), ($7 + [328]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($7 + [256]))
	CALL $60(($7 + [80]), $8)
	$10 = *($7 + [80])
	CALL send_inline($10, (*($7 + [84]) - $10))
	$10 = *($7 + [80])
	if ( ($10 == 0) ){ goto $label$110 }
	*($7 + [84]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$110
	$10 = *($8 + [28])
	if ( ($10 == 0) ){ goto $label$111 }
	*(($8 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$111
	$10 = *($8 + [16])
	if ( ($10 == 0) ){ goto $label$112 }
	*(($8 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$112
	if ( ((*(($7 + [288])) & [1]) == 0) ){ goto $label$113 }
	CALL _ZdlPv(*(($7 + [296])))
	
.LABEL $label$113
	if ( ((*($7 + [240]) & [1]) == 0) ){ goto $label$109 }
	CALL _ZdlPv(*(($7 + [248])))
	
.LABEL $label$109
	CALL __multi3(($7 + [16]), $22, (int_64)$22 >> (int_64)63), (int_64)5, (int_64)0)
	$23 = *((($7 + [16]) + [8]))
	$9 = *($7 + [16])
	CALL eosio_assert(( (uint_64)($9 <= (int_64)4611686018427387904) ? ((int_64)$23 < (int_64)0) : (int_64)($23 == 0) ), [9975])
	CALL eosio_assert(( ((uint_64)$9 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$23 > (int_64)-1) : ((int_64)$23 == (int_64)-1) ), [9999])
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9950])
	CALL eosio_assert(((int_64)$22 < (int_64)1152921504606846976), [9975])
	CALL eosio_assert(((int_64)$22 > (int_64)-1152921504606846976), [9999])
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9950])
	CALL eosio_assert(((int_64)$22 < (int_64)4611686018427387904), [9975])
	CALL eosio_assert(((int_64)$22 > (int_64)-4611686018427387904), [9999])
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9950])
	$27 = ((int_64)$22 / (int_64)10)
	$23 = ((int_64)$22 << (int_64)2)
	$28 = ((int_64)$23 / (int_64)10)
	$29 = ((int_64)$9 / (int_64)10)
	if ( ((int_64)$9 < (int_64)10) ){ goto $label$114 }
	*($7 + [336]) = (int_64)3617214756542218240
	*($7 + [328]) = *($0)
	*((($7 + [152]) + [8])) = [0]
	*($7 + [152]) = (int_64)0
	$8 = CALL $143([9021])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$117 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$120 }
	*($7 + [152]) = ($8 << [1])
	$10 = (($7 + [152]) | [1])
	if ( $8 ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$120
	$16 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($16)
	*($7 + [152]) = ($16 | [1])
	*($7 + [160]) = $10
	*($7 + [156]) = $8
	
.LABEL $label$119
	CALL memcpy($10, [9021], $8)
	
.LABEL $label$118
	*(($10 + $8)) = [0]
	CALL $67(($7 + [240]), $0, $1, $4, ($7 + [152]))
	*(($7 + [280])) = $21
	$8 = ($7 + [248])
	*(($7 + [296])) = *($8)
	*($8) = [0]
	*($7 + [264]) = (int_64)-5971584259689938416
	*($7 + [272]) = $29
	*($7 + [256]) = *($0)
	*($7 + [288]) = *($7 + [240])
	*($7 + [240]) = (int_64)0
	$8 = CALL $59(($7 + [200]), ($7 + [328]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($7 + [256]))
	CALL $60(($7 + [80]), $8)
	$10 = *($7 + [80])
	CALL send_inline($10, (*($7 + [84]) - $10))
	$10 = *($7 + [80])
	if ( ($10 == 0) ){ goto $label$121 }
	*($7 + [84]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$121
	$10 = *($8 + [28])
	if ( ($10 == 0) ){ goto $label$122 }
	*(($8 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$122
	$10 = *($8 + [16])
	if ( ($10 == 0) ){ goto $label$123 }
	*(($8 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$123
	if ( (*(($7 + [288])) & [1]) ){ goto $label$125 }
	if ( (*($7 + [240]) & [1]) ){ goto $label$124 }
	goto $label$116 
	
.LABEL $label$125
	CALL _ZdlPv(*(($7 + [296])))
	if ( ((*($7 + [240]) & [1]) == 0) ){ goto $label$116 }
	
.LABEL $label$124
	CALL _ZdlPv(*(($7 + [248])))
	if ( (*($7 + [152]) & [1]) ){ goto $label$115 }
	goto $label$114 
	
.LABEL $label$117
	CALL $115(($7 + [152]))
	
.LABEL $label$116
	if ( ((*($7 + [152]) & [1]) == 0) ){ goto $label$114 }
	
.LABEL $label$115
	CALL _ZdlPv(*($7 + [160]))
	
.LABEL $label$114
	if ( ((int_64)$23 < (int_64)10) ){ goto $label$126 }
	*($7 + [336]) = (int_64)3617214756542218240
	*($7 + [328]) = *($0)
	*(($7 + [144])) = [0]
	*($7 + [136]) = (int_64)0
	$8 = CALL $143([9026])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$129 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$132 }
	*($7 + [136]) = ($8 << [1])
	$10 = (($7 + [136]) | [1])
	if ( $8 ){ goto $label$131 }
	goto $label$130 
	
.LABEL $label$132
	$16 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($16)
	*($7 + [136]) = ($16 | [1])
	*($7 + [144]) = $10
	*($7 + [140]) = $8
	
.LABEL $label$131
	CALL memcpy($10, [9026], $8)
	
.LABEL $label$130
	*(($10 + $8)) = [0]
	CALL $67(($7 + [240]), $0, $1, $4, ($7 + [136]))
	*(($7 + [280])) = $21
	$8 = ($7 + [248])
	*(($7 + [296])) = *($8)
	*($8) = [0]
	*($7 + [264]) = (int_64)-5971584259757047280
	*($7 + [272]) = $28
	*($7 + [256]) = *($0)
	*($7 + [288]) = *($7 + [240])
	*($7 + [240]) = (int_64)0
	$8 = CALL $59(($7 + [200]), ($7 + [328]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($7 + [256]))
	CALL $60(($7 + [80]), $8)
	$10 = *($7 + [80])
	CALL send_inline($10, (*($7 + [84]) - $10))
	$10 = *($7 + [80])
	if ( ($10 == 0) ){ goto $label$133 }
	*($7 + [84]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$133
	$10 = *($8 + [28])
	if ( ($10 == 0) ){ goto $label$134 }
	*(($8 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$134
	$10 = *($8 + [16])
	if ( ($10 == 0) ){ goto $label$135 }
	*(($8 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$135
	if ( (*(($7 + [288])) & [1]) ){ goto $label$137 }
	if ( (*($7 + [240]) & [1]) ){ goto $label$136 }
	goto $label$128 
	
.LABEL $label$137
	CALL _ZdlPv(*(($7 + [296])))
	if ( ((*($7 + [240]) & [1]) == 0) ){ goto $label$128 }
	
.LABEL $label$136
	CALL _ZdlPv(*(($7 + [248])))
	if ( (*($7 + [136]) & [1]) ){ goto $label$127 }
	goto $label$126 
	
.LABEL $label$129
	CALL $115(($7 + [136]))
	
.LABEL $label$128
	if ( ((*($7 + [136]) & [1]) == 0) ){ goto $label$126 }
	
.LABEL $label$127
	CALL _ZdlPv(*($7 + [144]))
	
.LABEL $label$126
	if ( ((int_64)$22 < (int_64)10) ){ goto $label$138 }
	*($7 + [336]) = (int_64)3617214756542218240
	*($7 + [328]) = *($0)
	*(($7 + [128])) = [0]
	*($7 + [120]) = (int_64)0
	$8 = CALL $143([9031])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$141 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$144 }
	*($7 + [120]) = ($8 << [1])
	$10 = (($7 + [120]) | [1])
	if ( $8 ){ goto $label$143 }
	goto $label$142 
	
.LABEL $label$144
	$16 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($16)
	*($7 + [120]) = ($16 | [1])
	*($7 + [128]) = $10
	*($7 + [124]) = $8
	
.LABEL $label$143
	CALL memcpy($10, [9031], $8)
	
.LABEL $label$142
	*(($10 + $8)) = [0]
	CALL $67(($7 + [240]), $0, $1, $4, ($7 + [120]))
	*(($7 + [280])) = $21
	$8 = ($7 + [248])
	*(($7 + [296])) = *($8)
	*($8) = [0]
	*($7 + [264]) = (int_64)-5971584260561056640
	*($7 + [272]) = $27
	*($7 + [256]) = *($0)
	*($7 + [288]) = *($7 + [240])
	*($7 + [240]) = (int_64)0
	$8 = CALL $59(($7 + [200]), ($7 + [328]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($7 + [256]))
	CALL $60(($7 + [80]), $8)
	$10 = *($7 + [80])
	CALL send_inline($10, (*($7 + [84]) - $10))
	$10 = *($7 + [80])
	if ( ($10 == 0) ){ goto $label$145 }
	*($7 + [84]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$145
	$10 = *($8 + [28])
	if ( ($10 == 0) ){ goto $label$146 }
	*(($8 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$146
	$10 = *($8 + [16])
	if ( ($10 == 0) ){ goto $label$147 }
	*(($8 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$147
	if ( (*(($7 + [288])) & [1]) ){ goto $label$149 }
	if ( (*($7 + [240]) & [1]) ){ goto $label$148 }
	goto $label$140 
	
.LABEL $label$149
	CALL _ZdlPv(*(($7 + [296])))
	if ( ((*($7 + [240]) & [1]) == 0) ){ goto $label$140 }
	
.LABEL $label$148
	CALL _ZdlPv(*(($7 + [248])))
	if ( (*($7 + [120]) & [1]) ){ goto $label$139 }
	goto $label$138 
	
.LABEL $label$141
	CALL $115(($7 + [120]))
	
.LABEL $label$140
	if ( ((*($7 + [120]) & [1]) == 0) ){ goto $label$138 }
	
.LABEL $label$139
	CALL _ZdlPv(*($7 + [128]))
	
.LABEL $label$138
	*($7 + [112]) = $5
	if ( ((int_64)*($6) < (int_64)1) ){ goto $label$151 }
	$22 = *(($6 + [8]))
	*((($7 + [96]) + [8])) = $22
	$9 = *($6)
	*(($7 + [8])) = $22
	*($7 + [96]) = $9
	*($7) = $9
	CALL $68(($7 + [328]), $0, $7)
	*($7 + [88]) = (int_64)3617214756542218240
	*($7 + [80]) = *($0)
	CALL $69(($7 + [64]), $0, $1, $4)
	*(($7 + [216])) = *((($7 + [328]) + [8]))
	$8 = (($7 + [64]) + [8])
	*(($7 + [232])) = *($8)
	*($8) = [0]
	*($7 + [200]) = $1
	*($7 + [208]) = *($7 + [328])
	*($7 + [224]) = *($7 + [64])
	*($7 + [64]) = (int_64)0
	$8 = CALL $70(($7 + [256]), ($7 + [80]), (int_64)-5971584251005327856, (int_64)8516769789752901632, ($7 + [200]))
	CALL $60(($7 + [240]), $8)
	$10 = *($7 + [240])
	CALL send_inline($10, (*($7 + [244]) - $10))
	$10 = *($7 + [240])
	if ( ($10 == 0) ){ goto $label$152 }
	*($7 + [244]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$152
	$10 = *($8 + [28])
	if ( ($10 == 0) ){ goto $label$153 }
	*(($8 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$153
	$10 = *($8 + [16])
	if ( ($10 == 0) ){ goto $label$154 }
	*(($8 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$154
	if ( ((*(($7 + [224])) & [1]) == 0) ){ goto $label$155 }
	CALL _ZdlPv(*(($7 + [232])))
	
.LABEL $label$155
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$156 }
	CALL _ZdlPv(*(($7 + [72])))
	
.LABEL $label$156
	*($7 + [88]) = (int_64)3617214756542218240
	*($7 + [80]) = *($0)
	$9 = *($7 + [336])
	$4 = *($7 + [328])
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9950])
	*(($7 + [72])) = [0]
	*($7 + [64]) = (int_64)0
	$4 = ((int_64)$4 / (int_64)4)
	$8 = CALL $143([9039])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$158 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$161 }
	*($7 + [64]) = ($8 << [1])
	$10 = (($7 + [64]) | [1])
	if ( $8 ){ goto $label$160 }
	goto $label$159 
	
.LABEL $label$161
	$16 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($16)
	*($7 + [64]) = ($16 | [1])
	*($7 + [72]) = $10
	*($7 + [68]) = $8
	
.LABEL $label$160
	CALL memcpy($10, [9039], $8)
	
.LABEL $label$159
	*(($10 + $8)) = [0]
	*(($7 + [216])) = $9
	$8 = ($7 + [72])
	*(($7 + [232])) = *($8)
	*($8) = [0]
	*($7 + [208]) = $4
	*($7 + [200]) = (int_64)-5971584259757047280
	*($7 + [224]) = *($7 + [64])
	*($7 + [64]) = (int_64)0
	$8 = CALL $70(($7 + [256]), ($7 + [80]), (int_64)-5971584251005327856, (int_64)8516769789752901632, ($7 + [200]))
	CALL $60(($7 + [240]), $8)
	$10 = *($7 + [240])
	CALL send_inline($10, (*($7 + [244]) - $10))
	$10 = *($7 + [240])
	if ( ($10 == 0) ){ goto $label$162 }
	*($7 + [244]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$162
	$10 = *($8 + [28])
	if ( ($10 == 0) ){ goto $label$163 }
	*(($8 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$163
	$10 = *($8 + [16])
	if ( ($10 == 0) ){ goto $label$164 }
	*(($8 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$164
	if ( ((*(($7 + [224])) & [1]) == 0) ){ goto $label$165 }
	CALL _ZdlPv(*(($7 + [232])))
	
.LABEL $label$165
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$166 }
	CALL _ZdlPv(*(($7 + [72])))
	
.LABEL $label$166
	$8 = CALL $143([8273])
	if ( ($8 <= [8]) ){ goto $label$169 }
	CALL eosio_assert([0], [9629])
	goto $label$168 
	
.LABEL $label$169
	if ( ($8 == 0) ){ goto $label$167 }
	
.LABEL $label$168
	$9 = (int_64)0
	
.LOOP $label$170:
	$10 = *(($8 + [8272]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$171 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$171
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$170 }
	$9 = ((int_64)$9 << (int_64)8)
	goto $label$157 
	
.LABEL $label$167
	$9 = (int_64)0
	goto $label$157 
	
.LABEL $label$158
	CALL $115(($7 + [64]))
	
.LABEL $label$157
	if ( ((int_64)*(($2 + [8])) != (int_64)((int_64)$9 | (int_64)4)) ){ goto $label$151 }
	if ( ($13 == 0) ){ goto $label$172 }
	$9 = *($0)
	*($7 + [260]) = $0
	*($7 + [256]) = $6
	*($7 + [264]) = $2
	*($7 + [268]) = $3
	*($7 + [272]) = ($7 + [112])
	CALL eosio_assert([1], [10541])
	CALL $71($18, $13, $9, ($7 + [256]))
	if ( ($12 == 0) ){ goto $label$41 }
	goto $label$150 
	
.LABEL $label$172
	$9 = (int_64)0
	$4 = ((int_64)*($6) / (int_64)10000)
	if ( (uint_64)($4 <= (int_64)100) ){ goto $label$173 }
	$9 = (int_64)1
	if ( (uint_64)($4 <= (int_64)500) ){ goto $label$173 }
	$9 = (int_64)2
	if ( (uint_64)($4 <= (int_64)1000) ){ goto $label$173 }
	$9 = (int_64)3
	if ( (uint_64)($4 <= (int_64)5000) ){ goto $label$173 }
	$9 = (int_64)4
	if ( (uint_64)($4 <= (int_64)10000) ){ goto $label$173 }
	$9 = (int_64)5
	if ( (uint_64)($4 <= (int_64)50000) ){ goto $label$173 }
	$9 = (int_64)6
	if ( (uint_64)($4 <= (int_64)100000) ){ goto $label$173 }
	$9 = (int_64)7
	if ( (uint_64)($4 <= (int_64)500000) ){ goto $label$173 }
	$9 = (int_64)8
	if ( (uint_64)($4 <= (int_64)1000000) ){ goto $label$173 }
	$9 = (int_64)9
	if ( (uint_64)($4 <= (int_64)5000000) ){ goto $label$173 }
	$9 = (int_64)10
	if ( (uint_64)($4 <= (int_64)10000000) ){ goto $label$173 }
	$9 = ( (int_64)11 ? (int_64)12 : (uint_64)($4 <= (int_64)50000000) )
	
.LABEL $label$173
	*($7 + [112]) = $9
	$9 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL eosio_assert0()), [10490])
	*(($8 = CALL _Znwj([96])) + [48]) = (int_64)0
	*($8 + [40]) = (int_64)0
	*($8 + [56]) = (int_64)0
	*($8 + [64]) = (int_64)0
	*($8 + [72]) = $18
	*($8) = $1
	*($8 + [8]) = *($7 + [112])
	*($8 + [16]) = *($6)
	*(($8 + [24])) = *(($6 + [8]))
	$1 = CALL current_time()
	*($8 + [40]) = *($2)
	*($8 + [48]) = *(($2 + [8]))
	*($8 + [56]) = *($3)
	*($8 + [64]) = *(($3 + [8]))
	*($8 + [32]) = ((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($7 + [88]) = (($7 + [256]) + [72])
	*($7 + [84]) = ($7 + [256])
	*($7 + [80]) = ($7 + [256])
	*($7 + [240]) = ($7 + [80])
	$13 = ($8 + [8])
	*($7 + [204]) = $13
	*($7 + [200]) = $8
	$16 = ($8 + [16])
	*($7 + [208]) = $16
	$18 = ($8 + [32])
	*($7 + [212]) = $18
	*($7 + [216]) = ($8 + [40])
	$6 = ($8 + [56])
	*($7 + [220]) = $6
	CALL $72(($7 + [200]), ($7 + [240]))
	$1 = *($8)
	$10 = ($0 + [80])
	*($8 + [76]) = CALL db_store_i64(*($10), (int_64)-4157500428759203840, $9, $1, ($7 + [256]), [72])
	$2 = ($0 + [88])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$174 }
	*($2) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$174
	$1 = *($10)
	$4 = *($8)
	*($7 + [200]) = *($18)
	*($8 + [80]) = CALL db_idx64_store($1, (int_64)-4157500428759203840, $9, $4, ($7 + [200]))
	$1 = *($10)
	$4 = *($8)
	*($7 + [200]) = *($13)
	*($8 + [84]) = CALL db_idx64_store($1, (int_64)-4157500428759203839, $9, $4, ($7 + [200]))
	$1 = *($10)
	$4 = *($8)
	*($7 + [200]) = *($6)
	*($8 + [88]) = CALL db_idx64_store($1, (int_64)-4157500428759203838, $9, $4, ($7 + [200]))
	$1 = *($10)
	$4 = *($8)
	*($7 + [200]) = *($16)
	*($8 + [92]) = CALL db_idx64_store($1, (int_64)-4157500428759203837, $9, $4, ($7 + [200]))
	*($7 + [200]) = $8
	$9 = *($8)
	*($7 + [256]) = $9
	$13 = *(($8 + [76]))
	*($7 + [80]) = $13
	$16 = ($0 + [100])
	$10 = *($16)
	if ( ((uint_32)$10 >= (uint_32)*(($0 + [104]))) ){ goto $label$176 }
	*($10 + [8]) = $9
	*($10 + [16]) = $13
	*($7 + [200]) = [0]
	*($10) = $8
	*($16) = ($10 + [24])
	$8 = *($7 + [200])
	*($7 + [200]) = [0]
	if ( ($8 == 0) ){ goto $label$151 }
	goto $label$175 
	
.LABEL $label$176
	CALL $73(($0 + [96]), ($7 + [200]), ($7 + [256]), ($7 + [80]))
	$8 = *($7 + [200])
	*($7 + [200]) = [0]
	if ( ($8 == 0) ){ goto $label$151 }
	
.LABEL $label$175
	CALL _ZdlPv($8)
	
.LABEL $label$151
	if ( ($12 == 0) ){ goto $label$41 }
	
.LABEL $label$150
	if ( ((int_64)$25 < (int_64)1) ){ goto $label$178 }
	$1 = *($0)
	CALL eosio_assert([1], [10541])
	CALL eosio_assert(((int_32)*($12 + [48]) == (int_32)$15), [10576])
	CALL eosio_assert(((int_64)*(($0 + [232])) == (int_64)CALL eosio_assert0()), [10622])
	$10 = ($12 + [8])
	*($7 + [200]) = *($10)
	$13 = ($12 + [16])
	*($7 + [208]) = *($13)
	$8 = ($12 + [24])
	*($7 + [216]) = *($8)
	$9 = *($12)
	CALL eosio_assert(((int_64)$24 == (int_64)*(($12 + [32]))), [9549])
	$4 = ((int_64)*($8) + (int_64)$25)
	*($8) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9592])
	CALL eosio_assert(((int_64)*($8) < (int_64)4611686018427387904), [9611])
	*($10) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$9 == (int_64)*($12)), [10673])
	*($7 + [88]) = (($7 + [256]) + [48])
	*($7 + [84]) = ($7 + [256])
	*($7 + [80]) = ($7 + [256])
	*($7 + [240]) = ($7 + [80])
	*($7 + [332]) = $10
	*($7 + [328]) = $12
	*($7 + [336]) = $13
	*($7 + [340]) = $8
	*($7 + [344]) = ($12 + [40])
	CALL $74(($7 + [328]), ($7 + [240]))
	CALL db_update_i64(*($12 + [52]), $1, ($7 + [256]), [48])
	$8 = ($0 + [248])
	if ( (uint_64)($9 <= *($8)) ){ goto $label$179 }
	*($8) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$179
	$8 = (($7 + [200]) + [8])
	*($7 + [328]) = *($10)
	if ( (CALL $142(($7 + [200]), ($7 + [328]), [8]) == 0) ){ goto $label$180 }
	$13 = ($12 + [56])
	$10 = *($13)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$181 }
	$10 = CALL db_idx64_find_primary(*(($0 + [232])), *(($0 + [240])), (int_64)8428183964630790656, ($7 + [240]), $9)
	*($13) = $10
	
.LABEL $label$181
	CALL db_idx64_update($10, $1, ($7 + [328]))
	
.LABEL $label$180
	$10 = (($7 + [200]) + [16])
	*($7 + [328]) = *(($12 + [16]))
	if ( (CALL $142($8, ($7 + [328]), [8]) == 0) ){ goto $label$182 }
	$13 = ($12 + [60])
	$8 = *($13)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$183 }
	$8 = CALL db_idx64_find_primary(*(($0 + [232])), *(($0 + [240])), (int_64)8428183964630790657, ($7 + [240]), $9)
	*($13) = $8
	
.LABEL $label$183
	CALL db_idx64_update($8, $1, ($7 + [328]))
	
.LABEL $label$182
	*($7 + [328]) = *(($12 + [24]))
	if ( (CALL $142($10, ($7 + [328]), [8]) == 0) ){ goto $label$184 }
	$10 = ($12 + [64])
	$8 = *($10)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$185 }
	$8 = CALL db_idx64_find_primary(*(($0 + [232])), *(($0 + [240])), (int_64)8428183964630790658, ($7 + [240]), $9)
	*($10) = $8
	
.LABEL $label$185
	CALL db_idx64_update($8, $1, ($7 + [328]))
	
.LABEL $label$184
	$8 = ((int_64)($5 == 0) & ((int_64)*($7 + [112]) != (int_64)0))
	goto $label$177 
	
.LABEL $label$178
	if ( ((int_64)$5 != (int_64)0) ){ goto $label$41 }
	$8 = [1]
	if ( (int_64)(*($7 + [112]) == 0) ){ goto $label$41 }
	
.LABEL $label$177
	$16 = ($0 + [272])
	$9 = *($12 + [16])
	$1 = (CASTING uint_64)(uint_32 $8)
	$13 = *(($0 + [300]))
	$12 = *(($0 + [296]))
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$187 }
	
.LOOP $label$189:
	$10 = ($13 + [-24])
	$8 = *($10)
	if ( ((int_64)*($8) == (int_64)$9) ){ goto $label$188 }
	$13 = $10
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$189 }
	goto $label$187 
	
.LABEL $label$188
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$187 }
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$16), [10332])
	goto $label$186 
	
.LABEL $label$187
	$8 = [0]
	$10 = CALL db_find_i64(*($16), *(($0 + [280])), (int_64)-5001503146665574400, $9)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$186 }
	$8 = CALL $38($16, $10)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$16), [10332])
	
.LABEL $label$186
	$5 = (int_64)0
	$9 = ((int_64)*($8 + [40]) + (int_64)$1)
	if ( (uint_64)($9 <= (int_64)5) ){ goto $label$190 }
	$5 = (int_64)1
	if ( (uint_64)($9 <= (int_64)10) ){ goto $label$190 }
	$5 = (int_64)2
	if ( (uint_64)($9 <= (int_64)30) ){ goto $label$190 }
	$5 = (int_64)3
	if ( (uint_64)($9 <= (int_64)80) ){ goto $label$190 }
	$5 = ( (int_64)4 ? (int_64)5 : (uint_64)($9 <= (int_64)150) )
	
.LABEL $label$190
	$9 = *($0)
	$4 = *($8 + [56])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [10541])
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$16), [10576])
	CALL eosio_assert(((int_64)*(($0 + [272])) == (int_64)CALL eosio_assert0()), [10622])
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$191 }
	$5 = *($10)
	*(($10 = ($8 + [40]))) = ((int_64)$5 + (int_64)$1)
	$13 = ($8 + [8])
	*($7 + [328]) = *($13)
	$12 = ($8 + [48])
	*($7 + [336]) = *($12)
	*($7 + [344]) = $5
	$1 = *($8)
	CALL eosio_assert(((int_64)$24 == (int_64)*(($8 + [24]))), [9549])
	$5 = ((int_64)*($8 + [16]) + (int_64)$25)
	*($8 + [16]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9592])
	CALL eosio_assert(((int_64)*($8 + [16]) < (int_64)4611686018427387904), [9611])
	*($13) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [10673])
	*($7 + [88]) = (($7 + [256]) + [64])
	*($7 + [84]) = ($7 + [256])
	*($7 + [80]) = ($7 + [256])
	*($7 + [240]) = ($7 + [80])
	*($7 + [204]) = $13
	*($7 + [200]) = $8
	*($7 + [208]) = ($8 + [16])
	*($7 + [212]) = ($8 + [32])
	*($7 + [216]) = $10
	*($7 + [220]) = $12
	*($7 + [224]) = ($8 + [56])
	CALL $39(($7 + [200]), ($7 + [240]))
	CALL db_update_i64(*($8 + [68]), $9, ($7 + [256]), [64])
	$16 = ($0 + [288])
	if ( (uint_64)($1 <= *($16)) ){ goto $label$192 }
	*($16) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$192
	$16 = (($7 + [328]) + [8])
	*($7 + [200]) = *($13)
	if ( (CALL $142(($7 + [328]), ($7 + [200]), [8]) == 0) ){ goto $label$193 }
	$18 = ($8 + [72])
	$13 = *($18)
	if ( ((int_32)$13 > (int_32)[-1]) ){ goto $label$194 }
	$13 = CALL db_idx64_find_primary(*(($0 + [272])), *(($0 + [280])), (int_64)-5001503146665574400, ($7 + [240]), $1)
	*($18) = $13
	
.LABEL $label$194
	CALL db_idx64_update($13, $9, ($7 + [200]))
	
.LABEL $label$193
	$13 = (($7 + [328]) + [16])
	*($7 + [200]) = *($12)
	if ( (CALL $142($16, ($7 + [200]), [8]) == 0) ){ goto $label$195 }
	$16 = ($8 + [76])
	$12 = *($16)
	if ( ((int_32)$12 > (int_32)[-1]) ){ goto $label$196 }
	$12 = CALL db_idx64_find_primary(*(($0 + [272])), *(($0 + [280])), (int_64)-5001503146665574399, ($7 + [240]), $1)
	*($16) = $12
	
.LABEL $label$196
	CALL db_idx64_update($12, $9, ($7 + [200]))
	
.LABEL $label$195
	*($7 + [200]) = *($10)
	if ( (CALL $142($13, ($7 + [200]), [8]) == 0) ){ goto $label$41 }
	$10 = ($8 + [80])
	$8 = *($10)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$197 }
	$8 = CALL db_idx64_find_primary(*(($0 + [272])), *(($0 + [280])), (int_64)-5001503146665574398, ($7 + [240]), $1)
	*($10) = $8
	
.LABEL $label$197
	CALL db_idx64_update($8, $9, ($7 + [200]))
	$global$0 = ($7 + [352])
	return 
	
.LABEL $label$191
	$10 = ($8 + [48])
	$4 = *($10)
	*($10) = $5
	$5 = *($13)
	*(($13 = ($8 + [40]))) = ((int_64)$5 + (int_64)$1)
	$12 = ($8 + [8])
	*($7 + [328]) = *($12)
	*($7 + [336]) = $4
	*($7 + [344]) = $5
	$1 = *($8)
	CALL eosio_assert(((int_64)$24 == (int_64)*(($8 + [24]))), [9549])
	$5 = ((int_64)*($8 + [16]) + (int_64)$25)
	*($8 + [16]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9592])
	CALL eosio_assert(((int_64)*($8 + [16]) < (int_64)4611686018427387904), [9611])
	*($12) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [10673])
	*($7 + [88]) = (($7 + [256]) + [64])
	*($7 + [84]) = ($7 + [256])
	*($7 + [80]) = ($7 + [256])
	*($7 + [240]) = ($7 + [80])
	*($7 + [204]) = $12
	*($7 + [200]) = $8
	*($7 + [208]) = ($8 + [16])
	*($7 + [212]) = ($8 + [32])
	*($7 + [216]) = $13
	*($7 + [220]) = $10
	*($7 + [224]) = ($8 + [56])
	CALL $39(($7 + [200]), ($7 + [240]))
	CALL db_update_i64(*($8 + [68]), $9, ($7 + [256]), [64])
	$16 = ($0 + [288])
	if ( (uint_64)($1 <= *($16)) ){ goto $label$198 }
	*($16) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$198
	$16 = (($7 + [328]) + [8])
	*($7 + [200]) = *($12)
	if ( (CALL $142(($7 + [328]), ($7 + [200]), [8]) == 0) ){ goto $label$199 }
	$18 = ($8 + [72])
	$12 = *($18)
	if ( ((int_32)$12 > (int_32)[-1]) ){ goto $label$200 }
	$12 = CALL db_idx64_find_primary(*(($0 + [272])), *(($0 + [280])), (int_64)-5001503146665574400, ($7 + [240]), $1)
	*($18) = $12
	
.LABEL $label$200
	CALL db_idx64_update($12, $9, ($7 + [200]))
	
.LABEL $label$199
	$12 = (($7 + [328]) + [16])
	*($7 + [200]) = *($10)
	if ( (CALL $142($16, ($7 + [200]), [8]) == 0) ){ goto $label$201 }
	$16 = ($8 + [76])
	$10 = *($16)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$202 }
	$10 = CALL db_idx64_find_primary(*(($0 + [272])), *(($0 + [280])), (int_64)-5001503146665574399, ($7 + [240]), $1)
	*($16) = $10
	
.LABEL $label$202
	CALL db_idx64_update($10, $9, ($7 + [200]))
	
.LABEL $label$201
	*($7 + [200]) = *($13)
	if ( (CALL $142($12, ($7 + [200]), [8]) == 0) ){ goto $label$41 }
	$10 = ($8 + [80])
	$8 = *($10)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$203 }
	$8 = CALL db_idx64_find_primary(*(($0 + [272])), *(($0 + [280])), (int_64)-5001503146665574398, ($7 + [240]), $1)
	*($10) = $8
	
.LABEL $label$203
	CALL db_idx64_update($8, $9, ($7 + [200]))
	$global$0 = ($7 + [352])
	return 
	
.LABEL $label$41
	$global$0 = ($7 + [352])
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$3 = ($global$0 - [688])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $146($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [488]))) = (int_64)0
	*(($8 = ($4 + [504]))) = (int_64)0
	*(($9 = (($4 + [472]) + [64]))) = (int_64)0
	*($4 + [480]) = (int_64)0
	*($4 + [472]) = (int_64)0
	*($4 + [496]) = (int_64)0
	*($4 + [512]) = (int_64)0
	*($4 + [520]) = (int_64)0
	*($4 + [528]) = (int_64)0
	*($4 + [460]) = $2
	*($4 + [456]) = $2
	*($4 + [464]) = ($2 + $7)
	*($4 + [672]) = ($4 + [456])
	*($4 + [64]) = ($4 + [472])
	CALL $56(($4 + [64]), ($4 + [672]))
	*(($10 = (($4 + [48]) + [8]))) = *($4 + [464])
	*($4 + [48]) = *($4 + [456])
	$10 = *($10)
	*((($4 + [640]) + [8])) = $10
	*(($11 = (($4 + [656]) + [8]))) = $10
	$12 = *($4 + [48])
	*($4 + [656]) = $12
	*($4 + [640]) = $12
	$10 = *($11)
	*((($4 + [672]) + [8])) = $10
	*(($4 + [88])) = $10
	*($4 + [64]) = $0
	*($4 + [72]) = $1
	$1 = *($4 + [656])
	*($4 + [80]) = $1
	*($4 + [672]) = $1
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*((($4 + [64]) + [64])) = [0]
	*(($4 + [132])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = (int_64)0
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*(($4 + [212])) = [0]
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*($4 + [216]) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [224])) = $0
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [252])) = [0]
	*(($4 + [264])) = $0
	*(($4 + [272])) = (int_64)-1
	*(($4 + [280])) = (int_64)0
	*(($4 + [288])) = [0]
	*(($4 + [292])) = [0]
	*(($4 + [304])) = $0
	*(($4 + [312])) = (int_64)-1
	*(($4 + [320])) = (int_64)0
	*(($4 + [328])) = [0]
	*(($4 + [334])) = [0]
	*(($4 + [332])) = [0]
	*($4 + [256]) = $0
	*($4 + [296]) = $0
	*(($4 + [344])) = $0
	*(($4 + [352])) = (int_64)-1
	*(($4 + [360])) = (int_64)0
	*(($4 + [368])) = [0]
	*(($4 + [374])) = [0]
	*(($4 + [372])) = [0]
	*(($4 + [384])) = $0
	*(($4 + [392])) = (int_64)-1
	*(($4 + [400])) = (int_64)0
	*(($4 + [408])) = [0]
	*(($4 + [424])) = $0
	*(($4 + [432])) = (int_64)-1
	*(($4 + [440])) = (int_64)0
	*(($4 + [448])) = [0]
	*($4 + [336]) = $0
	*($4 + [376]) = $0
	*($4 + [416]) = $0
	*(($4 + [452])) = [0]
	*(($10 = (($4 + [576]) + [8]))) = *($3)
	*(($3 = (($4 + [560]) + [8]))) = *($8)
	*(($8 = (($4 + [544]) + [8]))) = *($9)
	*($4 + [576]) = *($4 + [480])
	*($4 + [560]) = *($4 + [496])
	*($4 + [544]) = *($4 + [528])
	$0 = *($4 + [472])
	$1 = *($4 + [512])
	$12 = *($4 + [520])
	*((($4 + [624]) + [8])) = *($8)
	*((($4 + [608]) + [8])) = *($3)
	*((($4 + [592]) + [8])) = *($10)
	*($4 + [624]) = *($4 + [544])
	*($4 + [608]) = *($4 + [560])
	*($4 + [592]) = *($4 + [576])
	$3 = (($4 + [64]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$13 = *((($4 + [592]) + [8]))
	*((($4 + [672]) + [8])) = $13
	$14 = *((($4 + [608]) + [8]))
	*((($4 + [656]) + [8])) = $14
	$15 = *((($4 + [624]) + [8]))
	*((($4 + [640]) + [8])) = $15
	*((($4 + [32]) + [8])) = $13
	*((($4 + [16]) + [8])) = $14
	*(($4 + [8])) = $15
	$13 = *($4 + [592])
	*($4 + [672]) = $13
	$14 = *($4 + [608])
	*($4 + [656]) = $14
	*($4 + [32]) = $13
	*($4 + [16]) = $14
	$13 = *($4 + [624])
	*($4) = $13
	*($4 + [640]) = $13
	CALL void $3((int_32 $0), (int_64 ($4 + [32])), (int_32 ($4 + [16])), (int_32 $1), (int_64 $12), (int_64 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $149($2)
	
.LABEL $label$5
	CALL $31(($4 + [64]))
	$global$0 = ($4 + [688])
	return [1]
}

void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL require_auth($1)
	$4 = *($2)
	CALL eosio_assert(((int_32)( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ) == (int_32)[64]), [8223])
	CALL $2($2, $3, [32])
	$5 = ($0 + [152])
	$4 = *(($0 + [180]))
	$6 = *(($0 + [176]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$6:
	$2 = ($4 + [-24])
	$7 = *($2)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$5 }
	$4 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$5), [10332])
	goto $label$3 
	
.LABEL $label$4
	$4 = ($0 + [160])
	$2 = CALL db_find_i64(*($5), *($4), (int_64)-6030912134838407168, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $51($5, $2)
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$5), [10332])
	
.LABEL $label$3
	$8 = *($0)
	CALL eosio_assert([1], [10541])
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$5), [10576])
	CALL eosio_assert(((int_64)*(($0 + [152])) == (int_64)CALL eosio_assert0()), [10622])
	*($7 + [16]) = *($3)
	*(($7 + [24])) = *($3 + [8])
	*(($7 + [32])) = *(($3 + [16]))
	*(($7 + [40])) = *(($3 + [24]))
	$2 = ($7 + [48])
	*($3 + [112]) = *($2)
	$1 = *($7)
	*($2) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$1 == (int_64)*($7)), [10673])
	*($3 + [104]) = (($3 + [32]) + [56])
	*($3 + [100]) = ($3 + [32])
	*($3 + [96]) = ($3 + [32])
	*($3 + [120]) = ($3 + [96])
	*($3 + [132]) = ($7 + [16])
	*($3 + [128]) = $7
	*($3 + [136]) = $2
	*($3 + [140]) = ($7 + [56])
	CALL $52(($3 + [128]), ($3 + [120]))
	CALL db_update_i64(*($7 + [68]), $8, ($3 + [32]), [56])
	$4 = ($0 + [168])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$7 }
	*($4) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($3 + [128]) = *($2)
	if ( (CALL $142(($3 + [112]), ($3 + [128]), [8]) == 0) ){ goto $label$1 }
	$4 = ($7 + [72])
	$2 = *($4)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$2 = CALL db_idx64_find_primary(*(($0 + [152])), *(($0 + [160])), (int_64)-6030912134838407168, ($3 + [120]), $1)
	*($4) = $2
	
.LABEL $label$8
	CALL db_idx64_update($2, $8, ($3 + [128]))
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$2
	$8 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [152])) == (int_64)CALL eosio_assert0()), [10490])
	*(($2 = CALL _Znwj([80])) + [64]) = $5
	*($2 + [56]) = (int_64)0
	*($2) = $1
	*($2 + [16]) = *($3)
	*(($2 + [24])) = *($3 + [8])
	*(($2 + [32])) = *(($3 + [16]))
	*(($2 + [40])) = *(($3 + [24]))
	*($2 + [48]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($3 + [104]) = (($3 + [32]) + [56])
	*($3 + [100]) = ($3 + [32])
	*($3 + [96]) = ($3 + [32])
	*($3 + [120]) = ($3 + [96])
	*($3 + [132]) = ($2 + [16])
	*($3 + [128]) = $2
	$7 = ($2 + [48])
	*($3 + [136]) = $7
	*($3 + [140]) = ($2 + [56])
	CALL $52(($3 + [128]), ($3 + [120]))
	$1 = *($2)
	*($2 + [68]) = CALL db_store_i64(*($4), (int_64)-6030912134838407168, $8, $1, ($3 + [32]), [56])
	$4 = ($0 + [168])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$9 }
	*($4) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$1 = *(($0 + [160]))
	$9 = *($2)
	*($3 + [128]) = *($7)
	*($2 + [72]) = CALL db_idx64_store($1, (int_64)-6030912134838407168, $8, $9, ($3 + [128]))
	*($3 + [128]) = $2
	$1 = *($2)
	*($3 + [32]) = $1
	$7 = *(($2 + [68]))
	*($3 + [96]) = $7
	$6 = ($0 + [180])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [184]))) ){ goto $label$11 }
	*($4 + [8]) = $1
	*($4 + [16]) = $7
	*($3 + [128]) = [0]
	*($4) = $2
	*($6) = ($4 + [24])
	$2 = *($3 + [128])
	*($3 + [128]) = [0]
	if ( $2 ){ goto $label$10 }
	goto $label$1 
	
.LABEL $label$11
	CALL $53(($0 + [176]), ($3 + [128]), ($3 + [32]), ($3 + [96]))
	$2 = *($3 + [128])
	*($3 + [128]) = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$10
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$global$0 = ($3 + [144])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $95($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $119($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $119($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $115($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [400])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $146($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [392]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10406])
	CALL memcpy(($4 + [392]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = (int_64)0
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [148])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [188])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [228])) = [0]
	*(($4 + [240])) = $0
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*($4 + [232]) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = (int_64)0
	*(($4 + [264])) = [0]
	*(($4 + [270])) = [0]
	*(($4 + [268])) = [0]
	*(($4 + [280])) = $0
	*(($4 + [288])) = (int_64)-1
	*(($4 + [296])) = (int_64)0
	*(($4 + [304])) = [0]
	*(($4 + [310])) = [0]
	*(($4 + [308])) = [0]
	*(($4 + [320])) = $0
	*(($4 + [328])) = (int_64)-1
	*(($4 + [336])) = (int_64)0
	*(($4 + [344])) = [0]
	*($4 + [272]) = $0
	*($4 + [312]) = $0
	*(($4 + [360])) = $0
	*(($4 + [368])) = (int_64)-1
	*(($4 + [376])) = (int_64)0
	*(($4 + [384])) = [0]
	*(($4 + [388])) = [0]
	*($4 + [352]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [392])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $149($2)
	
.LABEL $label$5
	CALL $31($4)
	$global$0 = ($4 + [400])
	return [1]
}

void .FUNC $19 (int_32 $0, int_64 $1, int_64 $2, float_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	float_64 $14
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL require_auth($1)
	CALL require_recipient($2)
	CALL eosio_assert(((float_64)$3 >= (float_64)(float_64)0), [9069])
	$5 = ($0 + [232])
	$7 = *(($0 + [260]))
	$6 = *(($0 + [256]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$5), [10332])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [240])), (int_64)8428183964630790656, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $34($5, $8)
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$5), [10332])
	
.LABEL $label$1
	$10 = [0]
	$11 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($11, [9096])
	CALL eosio_assert(((int_64)*($9 + [16]) == (int_64)$1), [9117])
	$12 = ($0 + [272])
	$7 = *(($0 + [300]))
	$6 = *(($0 + [296]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$8:
	$8 = ($7 + [-24])
	$13 = *($8)
	if ( ((int_64)*($13) == (int_64)$1) ){ goto $label$7 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($13 + [64]) == (int_32)$12), [10332])
	$10 = $13
	goto $label$5 
	
.LABEL $label$6
	$8 = CALL db_find_i64(*($12), *(($0 + [280])), (int_64)-5001503146665574400, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$10 = CALL $38($12, $8)
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$12), [10332])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [9136])
	$1 = *($10 + [48])
	if ( ((uint_64)$1 >= (uint_64)(int_64)6) ){ goto $label$10 }
	$14 = *((((CASTING uint_32)(uint_64 $1) << [3]) + [10944]))
	goto $label$9 
	
.LABEL $label$10
	CALL eosio_assert([0], [9855])
	$14 = (float_64)0.1
	
.LABEL $label$9
	CALL eosio_assert(((float_64)$14 >= (float_64)$3), [9158])
	$2 = *($0)
	CALL eosio_assert($11, [10541])
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$5), [10576])
	CALL eosio_assert(((int_64)*(($0 + [232])) == (int_64)CALL eosio_assert0()), [10622])
	*($9 + [40]) = $3
	$8 = ($9 + [8])
	*($4 + [72]) = *($8)
	$7 = ($9 + [16])
	*($4 + [80]) = *($7)
	$6 = ($9 + [24])
	*($4 + [88]) = *($6)
	$1 = *($9)
	*($8) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$1 == (int_64)*($9)), [10673])
	*($4 + [64]) = ($4 + [48])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	*($4 + [96]) = ($4 + [56])
	*($4 + [108]) = $8
	*($4 + [104]) = $9
	*($4 + [112]) = $7
	*($4 + [116]) = $6
	*($4 + [120]) = ($9 + [40])
	CALL $74(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*($9 + [52]), $2, $4, [48])
	$7 = ($0 + [248])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$11 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$7 = (($4 + [72]) + [8])
	*($4 + [104]) = *($8)
	if ( (CALL $142(($4 + [72]), ($4 + [104]), [8]) == 0) ){ goto $label$12 }
	$6 = ($9 + [56])
	$8 = *($6)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$13 }
	$8 = CALL db_idx64_find_primary(*(($0 + [232])), *(($0 + [240])), (int_64)8428183964630790656, ($4 + [96]), $1)
	*($6) = $8
	
.LABEL $label$13
	CALL db_idx64_update($8, $2, ($4 + [104]))
	
.LABEL $label$12
	$8 = (($4 + [72]) + [16])
	*($4 + [104]) = *(($9 + [16]))
	if ( (CALL $142($7, ($4 + [104]), [8]) == 0) ){ goto $label$14 }
	$6 = ($9 + [60])
	$7 = *($6)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$15 }
	$7 = CALL db_idx64_find_primary(*(($0 + [232])), *(($0 + [240])), (int_64)8428183964630790657, ($4 + [96]), $1)
	*($6) = $7
	
.LABEL $label$15
	CALL db_idx64_update($7, $2, ($4 + [104]))
	
.LABEL $label$14
	*($4 + [104]) = *(($9 + [24]))
	if ( (CALL $142($8, ($4 + [104]), [8]) == 0) ){ goto $label$16 }
	$9 = ($9 + [64])
	$8 = *($9)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$17 }
	$8 = CALL db_idx64_find_primary(*(($0 + [232])), *(($0 + [240])), (int_64)8428183964630790658, ($4 + [96]), $1)
	*($9) = $8
	
.LABEL $label$17
	CALL db_idx64_update($8, $2, ($4 + [104]))
	
.LABEL $label$16
	$global$0 = ($4 + [128])
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL $143([9876])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$4
	CALL memcpy($6, [9876], $5)
	
.LABEL $label$3
	*(($6 + $5)) = [0]
	*($4 + [24]) = [0]
	*($4 + [16]) = (int_64)0
	$6 = (($4 + [16]) | [1])
	
.LOOP $label$6:
	$8 = ((uint_64)$3 / (uint_64)(int_64)10)
	$5 = (CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$8 * (int_64)10))
	CALL $1(($4 + [32]), int_32((( ($5) | [48]) ? ($5 + [55]) : ($5 <= [10]) ) << [24]) >> [24]), ($4 + [16]))
	if ( (*($4 + [16]) & [1]) ){ goto $label$8 }
	*($4 + [16]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*((($4 + [16]) + [8]))) = [0]
	*($4 + [20]) = [0]
	
.LABEL $label$7
	CALL $119(($4 + [16]), [0])
	*((($4 + [16]) + [8])) = *((($4 + [32]) + [8]))
	*($4 + [16]) = *($4 + [32])
	$5 = ((uint_64)$3 > (uint_64)(int_64)9)
	$3 = $8
	if ( $5 ){ goto $label$6 }
	$5 = *($4 + [16])
	$7 = ($5 & [1])
	CALL $121($0, ( *((($4 + [16]) + [8])) ? $6 : $7 ), ( *($4 + [20]) ? uint_32($5 >> [1]) : $7 ))
	CALL $120($0, [9885])
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$12 }
	$6 = [0]
	$7 = *([0] + [9512])
	
.LOOP $label$14:
	*((($4 + [32]) + ($5 = $6))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$6 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$13 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$14 }
	
.LABEL $label$13
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$11 }
	*($4) = ($6 << [1])
	$7 = ($4 | [1])
	goto $label$10 
	
.LABEL $label$12
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	*($4) = [0]
	$5 = ($4 | [1])
	$6 = $5
	goto $label$9 
	
.LABEL $label$11
	$9 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($4) = ($9 | [1])
	*($4 + [8]) = $7
	*($4 + [4]) = $6
	
.LABEL $label$10
	$9 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$15:
	*(($7 + $5)) = *((($4 + [32]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$15 }
	$6 = ($7 + $6)
	$5 = ($4 | [1])
	
.LABEL $label$9
	*($6) = [0]
	$6 = *($4)
	$7 = ($6 & [1])
	CALL $121($0, ( *($4 + [8]) ? $5 : $7 ), ( *($4 + [4]) ? uint_32($6 >> [1]) : $7 ))
	CALL $120($0, [9895])
	if ( (*($4) & [1]) ){ goto $label$17 }
	if ( (*($4 + [16]) & [1]) ){ goto $label$16 }
	goto $label$1 
	
.LABEL $label$17
	CALL _ZdlPv(*(($4 + [8])))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($4 + [24])))
	$global$0 = ($4 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

int_32 .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $86($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $87(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $131($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10383])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $146($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [56]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [64]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [48])
	*($3 + [44]) = ($5 + [56])
	CALL $102(($3 + [32]), ($3 + [24]))
	*($5 + [72]) = [-1]
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $53(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $149($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [9929])
	CALL memcpy(*($3 + [4]), $2, [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $131($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10383])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $146($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [16]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [40])
	CALL $103(($3 + [40]), ($3 + [32]))
	*($5 + [56]) = [-1]
	*($5 + [52]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $104(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $149($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10383])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $146($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [16]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [40])
	CALL $97(($3 + [40]), ($3 + [32]))
	*($5 + [52]) = $1
	*($5 + [56 align=4]) = (int_64)-1
	*($5 + [64]) = [-1]
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $36(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $149($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10406])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [16])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy(($4 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [10406])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [32])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy(($4 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy(($4 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy(($4 + [56]), *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [10406])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [64])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [10796])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [10841])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10891])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [68]))
	$6 = *(($1 + [72]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4800152022483468288, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $117 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [16]) = *(*($4 + [4]))
	$5 = *($0)
	*($1 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$4 = CALL $143([8273])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9629])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($4 + [8272]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	$9 = ($1 + [8])
	CALL eosio_assert([1], [9727])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $10
	$7 = [1]
	$11 = $4
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $10
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$11 = ($4 + [1])
	$4 = $11
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [9776])
	*(($1 + [32])) = $8
	*($1 + [24]) = (int_64)0
	*($1 + [40]) = (int_64)0
	$7 = $2
	$4 = ($7 + [-48])
	$global$0 = $4
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = $7
	*($3 + [16]) = $3
	*($3 + [28]) = $9
	*($3 + [24]) = $1
	$11 = ($1 + [16])
	*($3 + [32]) = $11
	$2 = ($1 + [24])
	*($3 + [36]) = $2
	*($3 + [40]) = ($1 + [40])
	CALL $74(($3 + [24]), ($3 + [16]))
	$6 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($5 + [8]), (int_64)8428183964630790656, *(*($0 + [8])), $6, $4, [48])
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$12 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$4 = ($5 + [8])
	$6 = *($4)
	$7 = *(($0 + [8]))
	$10 = *($7)
	$8 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [56]) = CALL db_idx64_store($6, (int_64)8428183964630790656, $10, $8, ($3 + [24]))
	$6 = *($7)
	$10 = *($4)
	$8 = *($1)
	*($3 + [24]) = *($11)
	*(($1 + [60])) = CALL db_idx64_store($10, (int_64)8428183964630790657, $6, $8, ($3 + [24]))
	$6 = *($7)
	$10 = *($4)
	$8 = *($1)
	*($3 + [24]) = *($2)
	*(($1 + [64])) = CALL db_idx64_store($10, (int_64)8428183964630790658, $6, $8, ($3 + [24]))
	$global$0 = ($3 + [48])
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $149($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $144(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10992])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $144(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_64 .FUNC $139 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $138($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $133()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $138($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [19505]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $137($0, (int_64)0)
	*(CALL $133()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $138($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $138($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $138($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $138($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [19505])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $138($0)
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $138($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8214]))
	$8 = (int_64)0
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $138($0)
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $138($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $137($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [19505]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [19505]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $138($0) + [19505]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $133()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $133()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $133()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

void .FUNC $118 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [10406])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $75(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $28 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL require_auth(*($0))
	CALL require_recipient($1)
	$5 = CALL $45($0, $1, $2)
	$6 = ($0 + [112])
	$8 = *(($0 + [140]))
	$7 = *(($0 + [136]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$4:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$5) ){ goto $label$3 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$6), [10332])
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	$9 = CALL db_find_i64(*($6), *(($0 + [120])), (int_64)-4800152022483468288, $5)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $47($6, $9)
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$6), [10332])
	
.LABEL $label$1
	$7 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($7, [8829])
	CALL eosio_assert(((int_64)*($10 + [24]) > (int_64)0), [8846])
	CALL eosio_assert(((int_64)*($10 + [16]) == (int_64)$3), [8898])
	CALL eosio_assert(((int_64)*($10 + [40]) == (int_64)$2), [8924])
	*($4 + [80]) = (int_64)3617214756542218240
	*($4 + [72]) = *($0)
	*(($4 + [16])) = [0]
	*($4 + [8]) = (int_64)0
	$9 = CALL $143([9227])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$5 }
	$11 = ($10 + [24])
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$8 }
	*($4 + [8]) = ($9 << [1])
	$8 = (($4 + [8]) | [1])
	if ( $9 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$12 = (($9 + [16]) & [-16])
	$8 = CALL _Znwj($12)
	*($4 + [8]) = ($12 | [1])
	*($4 + [16]) = $8
	*($4 + [12]) = $9
	
.LABEL $label$7
	CALL memcpy($8, [9227], $9)
	
.LABEL $label$6
	*(($8 + $9)) = [0]
	*(($4 + [48])) = *(($11 + [8]))
	$5 = *($11)
	$9 = (($4 + [8]) + [8])
	*(($4 + [64])) = *($9)
	*($9) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = *($0)
	*($4 + [40]) = $5
	*($4 + [56]) = *($4 + [8])
	*($4 + [8]) = (int_64)0
	$9 = CALL $59(($4 + [88]), ($4 + [72]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($4 + [24]))
	CALL $60(($4 + [128]), $9)
	$8 = *($4 + [128])
	CALL send_inline($8, (*($4 + [132]) - $8))
	$8 = *($4 + [128])
	if ( ($8 == 0) ){ goto $label$9 }
	*($4 + [132]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$8 = *($9 + [28])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($9 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = *($9 + [16])
	if ( ($8 == 0) ){ goto $label$11 }
	*(($9 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$11
	if ( ((*(($4 + [56])) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$12
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$13
	CALL eosio_assert($7, [10732])
	CALL eosio_assert($7, [10766])
	$9 = CALL db_next_i64(*($10 + [68]), ($4 + [24]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$14 }
	CALL $47($6, $9)
	
.LABEL $label$14
	CALL $57($6, $10)
	$global$0 = ($4 + [144])
	return (unreachable)
	
.LABEL $label$5
	CALL $115(($4 + [8]))
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [10796])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [10841])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10891])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [52]))
	$6 = *(($1 + [56]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5003134530400288768, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $146($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10992])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $146($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $131($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [160])
	$global$0 = $3
	*($3 + [8]) = $1
	CALL require_auth(*($0))
	$4 = ($0 + [272])
	$6 = *(($0 + [300]))
	$5 = *(($0 + [296]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$6:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$5 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$4), [10332])
	goto $label$3 
	
.LABEL $label$4
	$7 = CALL db_find_i64(*($4), *(($0 + [280])), (int_64)-5001503146665574400, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $38($4, $7)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$4), [10332])
	
.LABEL $label$3
	*($3 + [4]) = $8
	*($3) = $4
	$1 = *($0)
	if ( ((int_64)$2 != (int_64)1) ){ goto $label$7 }
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [10541])
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$4), [10576])
	CALL eosio_assert(((int_64)*(($0 + [272])) == (int_64)CALL eosio_assert0()), [10622])
	*($8 + [56]) = (int_64)1
	$7 = ($8 + [48])
	$2 = *($7)
	*($7) = (int_64)5
	$6 = ($8 + [8])
	*($3 + [96]) = *($6)
	*($3 + [104]) = $2
	$5 = ($8 + [40])
	*($3 + [112]) = *($5)
	$2 = *($8)
	*($6) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$2 == (int_64)*($8)), [10673])
	*($3 + [88]) = (($3 + [16]) + [64])
	*($3 + [84]) = ($3 + [16])
	*($3 + [80]) = ($3 + [16])
	*($3 + [120]) = ($3 + [80])
	*($3 + [132]) = $6
	*($3 + [128]) = $8
	*($3 + [136]) = ($8 + [16])
	*($3 + [140]) = ($8 + [32])
	*($3 + [144]) = $5
	*($3 + [148]) = $7
	*($3 + [152]) = ($8 + [56])
	CALL $39(($3 + [128]), ($3 + [120]))
	CALL db_update_i64(*($8 + [68]), $1, ($3 + [16]), [64])
	$4 = ($0 + [288])
	if ( (uint_64)($2 <= *($4)) ){ goto $label$8 }
	*($4) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$4 = (($3 + [96]) + [8])
	*($3 + [128]) = *($6)
	if ( (CALL $142(($3 + [96]), ($3 + [128]), [8]) == 0) ){ goto $label$9 }
	$9 = ($8 + [72])
	$6 = *($9)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$10 }
	$6 = CALL db_idx64_find_primary(*(($0 + [272])), *(($0 + [280])), (int_64)-5001503146665574400, ($3 + [120]), $2)
	*($9) = $6
	
.LABEL $label$10
	CALL db_idx64_update($6, $1, ($3 + [128]))
	
.LABEL $label$9
	$6 = (($3 + [96]) + [16])
	*($3 + [128]) = *($7)
	if ( (CALL $142($4, ($3 + [128]), [8]) == 0) ){ goto $label$11 }
	$4 = ($8 + [76])
	$7 = *($4)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$12 }
	$7 = CALL db_idx64_find_primary(*(($0 + [272])), *(($0 + [280])), (int_64)-5001503146665574399, ($3 + [120]), $2)
	*($4) = $7
	
.LABEL $label$12
	CALL db_idx64_update($7, $1, ($3 + [128]))
	
.LABEL $label$11
	*($3 + [128]) = *($5)
	if ( (CALL $142($6, ($3 + [128]), [8]) == 0) ){ goto $label$1 }
	$6 = ($8 + [80])
	$7 = *($6)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$13 }
	$7 = CALL db_idx64_find_primary(*(($0 + [272])), *(($0 + [280])), (int_64)-5001503146665574398, ($3 + [120]), $2)
	*($6) = $7
	
.LABEL $label$13
	CALL db_idx64_update($7, $1, ($3 + [128]))
	$global$0 = ($3 + [160])
	return 
	
.LABEL $label$7
	*($3 + [16]) = $0
	*($3 + [20]) = $3
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [10541])
	CALL $78($4, $8, $1, ($3 + [16]))
	$global$0 = ($3 + [160])
	return 
	
.LABEL $label$2
	*($3 + [4]) = [0]
	*($3) = $4
	$1 = *($0)
	if ( ((int_64)$2 != (int_64)1) ){ goto $label$18 }
	*($3 + [120]) = ($3 + [8])
	*($3 + [128]) = $1
	CALL eosio_assert(((int_64)*(($0 + [272])) == (int_64)CALL eosio_assert0()), [10490])
	*($3 + [16]) = $4
	*($3 + [20]) = ($3 + [120])
	*($3 + [24]) = ($3 + [128])
	*(($7 = CALL _Znwj([88])) + [16]) = (int_64)0
	*($7) = (int_64)0
	*($7 + [24]) = (int_64)0
	*($7 + [64]) = $4
	CALL $79(($3 + [16]), $7)
	*($3 + [96]) = $7
	$1 = *($7)
	*($3 + [16]) = $1
	$8 = *($7 + [68])
	*($3 + [80]) = $8
	$5 = ($0 + [300])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [304]))) ){ goto $label$17 }
	*($6 + [8]) = $1
	*($6 + [16]) = $8
	*($3 + [96]) = [0]
	*($6) = $7
	*($5) = ($6 + [24])
	$7 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( $7 ){ goto $label$16 }
	goto $label$1 
	
.LABEL $label$18
	*($3 + [120]) = ($3 + [8])
	*($3 + [128]) = $1
	CALL eosio_assert(((int_64)*(($0 + [272])) == (int_64)CALL eosio_assert0()), [10490])
	*($3 + [16]) = $4
	*($3 + [20]) = ($3 + [120])
	*($3 + [24]) = ($3 + [128])
	*(($7 = CALL _Znwj([88])) + [16]) = (int_64)0
	*($7) = (int_64)0
	*($7 + [24]) = (int_64)0
	*($7 + [64]) = $4
	CALL $80(($3 + [16]), $7)
	*($3 + [96]) = $7
	$1 = *($7)
	*($3 + [16]) = $1
	$8 = *($7 + [68])
	*($3 + [80]) = $8
	$5 = ($0 + [300])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [304]))) ){ goto $label$15 }
	*($6 + [8]) = $1
	*($6 + [16]) = $8
	*($3 + [96]) = [0]
	*($6) = $7
	*($5) = ($6 + [24])
	$7 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( $7 ){ goto $label$14 }
	goto $label$1 
	
.LABEL $label$17
	CALL $41(($0 + [296]), ($3 + [96]), ($3 + [16]), ($3 + [80]))
	$7 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$16
	CALL _ZdlPv($7)
	$global$0 = ($3 + [160])
	return 
	
.LABEL $label$15
	CALL $41(($0 + [296]), ($3 + [96]), ($3 + [16]), ($3 + [80]))
	$7 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$14
	CALL _ZdlPv($7)
	
.LABEL $label$1
	$global$0 = ($3 + [160])
}

int_32 .FUNC $20 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	float_64 $8
	$3 = ($global$0 - [416])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $146($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [400]) = (int_64)0
	*($4 + [392]) = (int_64)0
	*($4 + [408]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10406])
	CALL memcpy(($4 + [392]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [10406])
	CALL memcpy((($4 + [392]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [10406])
	CALL memcpy((($4 + [392]) + [16]), ($2 + [16]), [8])
	*(($4 + [20])) = ($2 + [24])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = (int_64)0
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [148])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [188])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [228])) = [0]
	*(($4 + [240])) = $0
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*($4 + [232]) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = (int_64)0
	*(($4 + [264])) = [0]
	*(($4 + [270])) = [0]
	*(($4 + [268])) = [0]
	*(($4 + [280])) = $0
	*(($4 + [288])) = (int_64)-1
	*(($4 + [296])) = (int_64)0
	*(($4 + [304])) = [0]
	*(($4 + [310])) = [0]
	*(($4 + [308])) = [0]
	*(($4 + [320])) = $0
	*(($4 + [328])) = (int_64)-1
	*(($4 + [336])) = (int_64)0
	*(($4 + [344])) = [0]
	*($4 + [272]) = $0
	*($4 + [312]) = $0
	*(($4 + [360])) = $0
	*(($4 + [368])) = (int_64)-1
	*(($4 + [376])) = (int_64)0
	*(($4 + [384])) = [0]
	*(($4 + [388])) = [0]
	*($4 + [352]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$8 = *($4 + [408])
	$0 = *($4 + [400])
	$1 = *($4 + [392])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $8), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $149($2)
	
.LABEL $label$5
	CALL $31($4)
	$global$0 = ($4 + [416])
	return [1]
}

void .FUNC $23 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = ($0 + [192])
	$6 = *(($0 + [220]))
	$5 = *(($0 + [216]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$7:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$6 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$4), [10332])
	goto $label$4 
	
.LABEL $label$5
	$7 = CALL db_find_i64(*($4), *(($0 + [200])), (int_64)-5003134530400288768, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $54($4, $7)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$4), [10332])
	
.LABEL $label$4
	*($3 + [80]) = (int_64)3617214756542218240
	*($3 + [72]) = *($0)
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$7 = CALL $143([9203])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$2 }
	$5 = ($8 + [16])
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$10 }
	*($3 + [8]) = ($7 << [1])
	$6 = (($3 + [8]) | [1])
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$9 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($9)
	*($3 + [8]) = ($9 | [1])
	*($3 + [16]) = $6
	*($3 + [12]) = $7
	
.LABEL $label$9
	CALL memcpy($6, [9203], $7)
	
.LABEL $label$8
	*(($6 + $7)) = [0]
	*(($3 + [48])) = *(($5 + [8]))
	$2 = *($5)
	$7 = (($3 + [8]) + [8])
	*(($3 + [64])) = *($7)
	*($7) = [0]
	*($3 + [32]) = $1
	*($3 + [24]) = *($0)
	*($3 + [40]) = $2
	*($3 + [56]) = *($3 + [8])
	*($3 + [8]) = (int_64)0
	$7 = CALL $59(($3 + [88]), ($3 + [72]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($3 + [24]))
	CALL $60(($3 + [128]), $7)
	$6 = *($3 + [128])
	CALL send_inline($6, (*($3 + [132]) - $6))
	$6 = *($3 + [128])
	if ( ($6 == 0) ){ goto $label$11 }
	*($3 + [132]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$11
	$6 = *($7 + [28])
	if ( ($6 == 0) ){ goto $label$12 }
	*(($7 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$6 = *($7 + [16])
	if ( ($6 == 0) ){ goto $label$13 }
	*(($7 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$13
	if ( ((*(($3 + [56])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [64])))
	
.LABEL $label$14
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$15
	CALL eosio_assert([1], [10732])
	CALL eosio_assert([1], [10766])
	$7 = CALL db_next_i64(*($8 + [52]), ($3 + [24]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$16 }
	CALL $54($4, $7)
	
.LABEL $label$16
	CALL $55($4, $8)
	$global$0 = ($3 + [144])
	return (unreachable)
	
.LABEL $label$3
	$2 = CALL $42($0, $1, $2)
	$4 = ($0 + [352])
	$6 = *(($0 + [380]))
	$5 = *(($0 + [376]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$18 }
	
.LOOP $label$20:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$19 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$18 }
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$4), [10332])
	goto $label$17 
	
.LABEL $label$18
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [360])), (int_64)4520745262589006720, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$17 }
	$8 = CALL $43($4, $7)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$4), [10332])
	
.LABEL $label$17
	$5 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($5, [8724])
	*($3 + [80]) = (int_64)3617214756542218240
	*($3 + [72]) = *($0)
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$7 = CALL $143([9203])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$1 }
	$9 = ($8 + [24])
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$23 }
	*($3 + [8]) = ($7 << [1])
	$6 = (($3 + [8]) | [1])
	if ( $7 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$10 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($3 + [8]) = ($10 | [1])
	*($3 + [16]) = $6
	*($3 + [12]) = $7
	
.LABEL $label$22
	CALL memcpy($6, [9203], $7)
	
.LABEL $label$21
	*(($6 + $7)) = [0]
	*(($3 + [48])) = *(($9 + [8]))
	$2 = *($9)
	$7 = (($3 + [8]) + [8])
	*(($3 + [64])) = *($7)
	*($7) = [0]
	*($3 + [32]) = $1
	*($3 + [24]) = *($0)
	*($3 + [40]) = $2
	*($3 + [56]) = *($3 + [8])
	*($3 + [8]) = (int_64)0
	$7 = CALL $59(($3 + [88]), ($3 + [72]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($3 + [24]))
	CALL $60(($3 + [128]), $7)
	$6 = *($3 + [128])
	CALL send_inline($6, (*($3 + [132]) - $6))
	$6 = *($3 + [128])
	if ( ($6 == 0) ){ goto $label$24 }
	*($3 + [132]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$24
	$6 = *($7 + [28])
	if ( ($6 == 0) ){ goto $label$25 }
	*(($7 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$25
	$6 = *($7 + [16])
	if ( ($6 == 0) ){ goto $label$26 }
	*(($7 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$26
	if ( ((*(($3 + [56])) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($3 + [64])))
	
.LABEL $label$27
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$28
	CALL eosio_assert($5, [10732])
	CALL eosio_assert($5, [10766])
	$7 = CALL db_next_i64(*($8 + [52]), ($3 + [24]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$29 }
	CALL $43($4, $7)
	
.LABEL $label$29
	CALL $44($4, $8)
	$global$0 = ($3 + [144])
	return (unreachable)
	
.LABEL $label$2
	CALL $115(($3 + [8]))
	
.LABEL $label$1
	CALL $115(($3 + [8]))
}

int_32 .FUNC $22 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [416])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $146($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [408]) = (int_64)0
	*($4 + [400]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10406])
	CALL memcpy(($4 + [400]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [10406])
	CALL memcpy((($4 + [400]) + [8]), ($2 + [8]), [8])
	*(($4 + [28])) = ($2 + [16])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [76])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = (int_64)0
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [156])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [196])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*(($4 + [236])) = [0]
	*(($4 + [248])) = $0
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	*($4 + [240]) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [264])) = (int_64)0
	*(($4 + [272])) = [0]
	*(($4 + [278])) = [0]
	*(($4 + [276])) = [0]
	*(($4 + [288])) = $0
	*(($4 + [296])) = (int_64)-1
	*(($4 + [304])) = (int_64)0
	*(($4 + [312])) = [0]
	*(($4 + [318])) = [0]
	*(($4 + [316])) = [0]
	*(($4 + [328])) = $0
	*(($4 + [336])) = (int_64)-1
	*(($4 + [344])) = (int_64)0
	*(($4 + [352])) = [0]
	*($4 + [280]) = $0
	*($4 + [320]) = $0
	*(($4 + [368])) = $0
	*(($4 + [376])) = (int_64)-1
	*(($4 + [384])) = (int_64)0
	*(($4 + [392])) = [0]
	*(($4 + [396])) = [0]
	*($4 + [360]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [408])
	$1 = *($4 + [400])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $149($2)
	
.LABEL $label$5
	CALL $31(($4 + [8]))
	$global$0 = ($4 + [416])
	return [1]
}

void .FUNC $25 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [312])
	$5 = *(($0 + [340]))
	$4 = *(($0 + [336]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [10332])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [320])), (int_64)-6219583600791126016, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $61($3, $6)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [10332])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [8829])
	CALL eosio_assert($6, [10732])
	CALL eosio_assert($6, [10766])
	$6 = CALL db_next_i64(*($7 + [28]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $61($3, $6)
	
.LABEL $label$5
	CALL $82($3, $7)
	$global$0 = ($2 + [16])
}

void .FUNC $24 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [312])
	$5 = *(($0 + [340]))
	$4 = *(($0 + [336]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [10332])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [320])), (int_64)-6219583600791126016, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $61($3, $6)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [10332])
	
.LABEL $label$1
	CALL eosio_assert(($7 == 0), [8711])
	$8 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [312])) == (int_64)CALL eosio_assert0()), [10490])
	*(($6 = CALL _Znwj([40])) + [24]) = $3
	*($6 + [8]) = (int_64)1
	*($6) = $1
	*($6 + [16]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [9929])
	CALL memcpy(($2 + [16]), $6, [8])
	CALL eosio_assert([1], [9929])
	CALL memcpy((($2 + [16]) | [8]), ($6 + [8]), [8])
	CALL eosio_assert([1], [9929])
	CALL memcpy((($2 + [16]) + [16]), ($6 + [16]), [8])
	$1 = *($6)
	$7 = CALL db_store_i64(*(($0 + [320])), (int_64)-6219583600791126016, $8, $1, ($2 + [16]), [24])
	*($6 + [28]) = $7
	$5 = ($0 + [328])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$5 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($2 + [8]) = $6
	$1 = *($6)
	*($2 + [16]) = $1
	*($2 + [4]) = $7
	$4 = ($0 + [340])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [344]))) ){ goto $label$8 }
	*($5 + [8]) = $1
	*($5 + [16]) = $7
	*($2 + [8]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	$6 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $81(($0 + [336]), ($2 + [8]), ($2 + [16]), ($2 + [4]))
	$6 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( ($6 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($2 + [48])
}

int_32 .FUNC $27 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$3 = ($global$0 - [624])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $146($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [464]) + [40]))) = (int_64)0
	*(($8 = (($4 + [464]) + [56]))) = (int_64)0
	*($4 + [472]) = (int_64)0
	*($4 + [464]) = (int_64)0
	*($4 + [480]) = (int_64)0
	*($4 + [488]) = (int_64)0
	*($4 + [496]) = (int_64)0
	*($4 + [512]) = (int_64)0
	*($4 + [452]) = $2
	*($4 + [448]) = $2
	*($4 + [456]) = ($2 + $7)
	*($4 + [608]) = ($4 + [448])
	*($4 + [56]) = ($4 + [464])
	CALL $83(($4 + [56]), ($4 + [608]))
	*(($9 = (($4 + [40]) + [8]))) = *($4 + [456])
	*($4 + [40]) = *($4 + [448])
	$9 = *($9)
	*(($10 = (($4 + [576]) + [8]))) = $9
	*(($11 = (($4 + [592]) + [8]))) = $9
	$12 = *($4 + [40])
	*($4 + [592]) = $12
	*($4 + [576]) = $12
	$9 = *($11)
	*((($4 + [608]) + [8])) = $9
	*(($4 + [80])) = $9
	*($4 + [56]) = $0
	*($4 + [64]) = $1
	$1 = *($4 + [592])
	*($4 + [72]) = $1
	*($4 + [608]) = $1
	*((($4 + [56]) + [40])) = $0
	*(($4 + [104])) = (int_64)-1
	*((($4 + [56]) + [56])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [124])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = (int_64)0
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*(($4 + [204])) = [0]
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*($4 + [208]) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [216])) = $0
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [244])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*(($4 + [284])) = [0]
	*(($4 + [296])) = $0
	*(($4 + [304])) = (int_64)-1
	*(($4 + [312])) = (int_64)0
	*(($4 + [320])) = [0]
	*(($4 + [326])) = [0]
	*(($4 + [324])) = [0]
	*($4 + [248]) = $0
	*($4 + [288]) = $0
	*(($4 + [336])) = $0
	*(($4 + [344])) = (int_64)-1
	*(($4 + [352])) = (int_64)0
	*(($4 + [360])) = [0]
	*(($4 + [366])) = [0]
	*(($4 + [364])) = [0]
	*(($4 + [376])) = $0
	*(($4 + [384])) = (int_64)-1
	*(($4 + [392])) = (int_64)0
	*(($4 + [400])) = [0]
	*(($4 + [416])) = $0
	*(($4 + [424])) = (int_64)-1
	*(($4 + [432])) = (int_64)0
	*(($4 + [440])) = [0]
	*($4 + [328]) = $0
	*($4 + [368]) = $0
	*($4 + [408]) = $0
	*(($4 + [444])) = [0]
	*(($9 = (($4 + [544]) + [8]))) = *($3)
	*(($3 = (($4 + [528]) + [8]))) = *($8)
	*($4 + [544]) = *($4 + [496])
	*($4 + [528]) = *($4 + [512])
	$0 = *($4 + [488])
	$1 = *($4 + [480])
	$12 = *($4 + [472])
	$13 = *($4 + [464])
	*($10) = *($3)
	*((($4 + [560]) + [8])) = *($9)
	*($4 + [576]) = *($4 + [528])
	*($4 + [560]) = *($4 + [544])
	$3 = (($4 + [56]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$14 = *((($4 + [560]) + [8]))
	*((($4 + [608]) + [8])) = $14
	$15 = *((($4 + [576]) + [8]))
	*((($4 + [592]) + [8])) = $15
	*((($4 + [24]) + [8])) = $14
	*((($4 + [8]) + [8])) = $15
	$14 = *($4 + [560])
	*($4 + [608]) = $14
	$15 = *($4 + [576])
	*($4 + [592]) = $15
	*($4 + [24]) = $14
	*($4 + [8]) = $15
	CALL void $3((int_32 $13), (int_64 $12), (int_64 $1), (int_64 $0), (int_64 ($4 + [24])), (int_32 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $149($2)
	
.LABEL $label$5
	CALL $31(($4 + [56]))
	$global$0 = ($4 + [624])
	return [1]
}

void .FUNC $26 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	float_64 $19
	float_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	float_64 $25
	int_64 $26
	int_64 $27
	int_64 $28
	$7 = ($global$0 - [368])
	$global$0 = $7
	CALL require_auth(*($0))
	CALL require_recipient($1)
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($5) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8758])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($6) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8774])
	$8 = CALL $143([8273])
	if ( ($8 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9629])
	goto $label$3 
	
.LABEL $label$4
	if ( ($8 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = (int_64)0
	
.LOOP $label$5:
	$10 = *(($8 + [8272]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$6
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$5 }
	$9 = ((int_64)$9 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)((int_64)$9 | (int_64)4)), [8806])
	$8 = CALL $143([8273])
	if ( ($8 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [9629])
	goto $label$9 
	
.LABEL $label$10
	if ( ($8 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$9 = (int_64)0
	
.LOOP $label$11:
	$10 = *(($8 + [8272]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$12
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$11 }
	$9 = ((int_64)$9 << (int_64)8)
	goto $label$7 
	
.LABEL $label$8
	$9 = (int_64)0
	
.LABEL $label$7
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)((int_64)$9 | (int_64)4)), [8806])
	$9 = CALL $45($0, $1, $2)
	$11 = ($0 + [112])
	$10 = *(($0 + [140]))
	$12 = *(($0 + [136]))
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$14 }
	
.LOOP $label$16:
	$8 = ($10 + [-24])
	$13 = *($8)
	if ( ((int_64)*($13) == (int_64)$9) ){ goto $label$15 }
	$10 = $8
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*($13 + [64]) == (int_32)$11), [10332])
	goto $label$13 
	
.LABEL $label$14
	$13 = [0]
	$8 = CALL db_find_i64(*($11), *(($0 + [120])), (int_64)-4800152022483468288, $9)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$13 }
	$13 = CALL $47($11, $8)
	CALL eosio_assert(((int_32)*($13 + [64]) == (int_32)$11), [10332])
	
.LABEL $label$13
	$14 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($14, [8829])
	CALL eosio_assert(((int_64)*($13 + [24]) > (int_64)0), [8846])
	CALL eosio_assert(((int_64)*(($13 + [32])) == (int_64)*(($5 + [8]))), [9796])
	CALL eosio_assert(((int_64)*($13 + [24]) == (int_64)*($5)), [8870])
	CALL eosio_assert(((int_64)*($13 + [16]) == (int_64)$3), [8898])
	CALL eosio_assert(((int_64)*($13 + [40]) == (int_64)$2), [8924])
	$15 = ($0 + [232])
	$10 = *(($0 + [260]))
	$16 = *(($0 + [256]))
	if ( ((int_32)$16 == (int_32)$10) ){ goto $label$23 }
	
.LOOP $label$25:
	$8 = ($10 + [-24])
	$12 = *($8)
	if ( ((int_64)*($12) == (int_64)$1) ){ goto $label$24 }
	$10 = $8
	if ( ((int_32)$16 != (int_32)$8) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	if ( ((int_32)$16 == (int_32)$10) ){ goto $label$23 }
	CALL eosio_assert(((int_32)*($12 + [48]) == (int_32)$15), [10332])
	goto $label$22 
	
.LABEL $label$23
	$8 = CALL db_find_i64(*($15), *(($0 + [240])), (int_64)8428183964630790656, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$21 }
	$12 = CALL $34($15, $8)
	CALL eosio_assert(((int_32)*($12 + [48]) == (int_32)$15), [10332])
	
.LABEL $label$22
	$17 = ($0 + [272])
	$3 = *($12 + [16])
	$10 = *(($0 + [300]))
	$18 = *(($0 + [296]))
	if ( ((int_32)$18 == (int_32)$10) ){ goto $label$19 }
	
.LOOP $label$26:
	$8 = ($10 + [-24])
	$16 = *($8)
	if ( ((int_64)*($16) == (int_64)$3) ){ goto $label$20 }
	$10 = $8
	if ( ((int_32)$18 != (int_32)$8) ){ goto $label$26 }
	goto $label$19 
	
.LABEL $label$21
	$3 = *($13 + [56])
	$19 = (float_64)0.1
	$20 = (float_64)0
	$12 = [0]
	goto $label$17 
	
.LABEL $label$20
	if ( ((int_32)$18 == (int_32)$10) ){ goto $label$19 }
	CALL eosio_assert(((int_32)*($16 + [64]) == (int_32)$17), [10332])
	goto $label$18 
	
.LABEL $label$19
	$16 = [0]
	$8 = CALL db_find_i64(*($17), *(($0 + [280])), (int_64)-5001503146665574400, $3)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$18 }
	$16 = CALL $38($17, $8)
	CALL eosio_assert(((int_32)*($16 + [64]) == (int_32)$17), [10332])
	
.LABEL $label$18
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [8948])
	$9 = *($16 + [48])
	if ( ((uint_64)$9 >= (uint_64)(int_64)6) ){ goto $label$28 }
	$19 = *((((CASTING uint_32)(uint_64 $9) << [3]) + [10944]))
	goto $label$27 
	
.LABEL $label$28
	CALL eosio_assert([0], [9855])
	$19 = (float_64)0.1
	
.LABEL $label$27
	$20 = *($12 + [40])
	CALL eosio_assert(((float_64)$19 >= (float_64)$20), [8978])
	
.LABEL $label$17
	CALL eosio_assert($14, [10732])
	CALL eosio_assert($14, [10766])
	$8 = CALL db_next_i64(*($13 + [68]), ($7 + [272]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$29 }
	CALL $47($11, $8)
	
.LABEL $label$29
	CALL $57($11, $13)
	if ( ((int_64)*($6) < (int_64)1) ){ goto $label$30 }
	*($7 + [352]) = (int_64)3617214756542218240
	*($7 + [344]) = *($0)
	CALL $84(($7 + [184]), $0, $1, $2, $4)
	*(($7 + [296])) = *(($6 + [8]))
	$8 = (($7 + [184]) + [8])
	*(($7 + [312])) = *($8)
	*($8) = [0]
	*($7 + [280]) = $1
	*($7 + [272]) = *($0)
	*($7 + [288]) = *($6)
	*($7 + [304]) = *($7 + [184])
	*($7 + [184]) = (int_64)0
	$8 = CALL $59(($7 + [216]), ($7 + [344]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($7 + [272]))
	CALL $60(($7 + [200]), $8)
	$10 = *($7 + [200])
	CALL send_inline($10, (*($7 + [204]) - $10))
	$10 = *($7 + [200])
	if ( ($10 == 0) ){ goto $label$31 }
	*($7 + [204]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$31
	$10 = *($8 + [28])
	if ( ($10 == 0) ){ goto $label$32 }
	*(($8 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$32
	$10 = *($8 + [16])
	if ( ($10 == 0) ){ goto $label$33 }
	*(($8 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$33
	if ( ((*(($7 + [304])) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*(($7 + [312])))
	
.LABEL $label$34
	if ( ((*($7 + [184]) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*(($7 + [192])))
	
.LABEL $label$30
	$4 = (int_64)0
	$21 = ((int_64)*($5) / (int_64)10)
	CALL __multi3(($7 + [48]), $21, (int_64)$21 >> (int_64)63), (int_64)200, (int_64)0)
	$22 = *(($5 + [8]))
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9950])
	$9 = *((($7 + [48]) + [8]))
	$23 = *($7 + [48])
	CALL eosio_assert(( (uint_64)($23 <= (int_64)4611686018427387904) ? ((int_64)$9 < (int_64)0) : (int_64)($9 == 0) ), [9975])
	CALL eosio_assert(( ((uint_64)$23 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$9 > (int_64)-1) : ((int_64)$9 == (int_64)-1) ), [9999])
	*($7 + [208]) = $22
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9950])
	*($7 + [200]) = ((int_64)$23 / (int_64)3)
	$8 = CALL $143([8273])
	if ( ($8 <= [8]) ){ goto $label$37 }
	CALL eosio_assert([0], [9629])
	goto $label$36 
	
.LABEL $label$37
	if ( ($8 == 0) ){ goto $label$35 }
	
.LABEL $label$36
	$9 = (int_64)0
	
.LOOP $label$38:
	$10 = *(($8 + [8272]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$39 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$39
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$38 }
	$4 = ((int_64)$9 << (int_64)8)
	
.LABEL $label$35
	CALL eosio_assert([1], [9727])
	$9 = (uint_64)$4 >> (uint_64)(int_64)8)
	$24 = ((int_64)$4 | (int_64)4)
	$8 = [0]
	
.LOOP $label$42:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$41 }
	$4 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$43 }
	$9 = $4
	$10 = [1]
	$13 = $8
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$43
	$9 = $4
	
.LOOP $label$44:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$41 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$13 = ($8 + [1])
	$8 = $13
	if ( $10 ){ goto $label$44 }
	$10 = [1]
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$41
	$10 = [0]
	
.LABEL $label$40
	CALL eosio_assert($10, [9776])
	$23 = (int_64)0
	if ( ((int_64)$3 != (int_64)*($0)) ){ goto $label$46 }
	$9 = $21
	goto $label$45 
	
.LABEL $label$46
	$9 = $21
	if ( (CALL is_account($3) == 0) ){ goto $label$45 }
	$8 = CALL $143([8273])
	$10 = ($8 <= [8])
	$19 = (CASTING float_64)(int_64 $21)
	$25 = ((float_64)(float_64))($19 - $20) * (float_64)$19
	if ( ((float_64)(float_64)|$25)| < (float_64)(float_64)9223372036854775808) ){ goto $label$51 }
	$23 = (int_64)-9223372036854775808
	if ( ($10 == 0) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	$23 = (Rounds 0)($25)
	if ( $10 ){ goto $label$49 }
	
.LABEL $label$50
	CALL eosio_assert([0], [9629])
	goto $label$48 
	
.LABEL $label$49
	if ( $8 ){ goto $label$48 }
	$4 = (int_64)0
	goto $label$47 
	
.LABEL $label$48
	$9 = (int_64)0
	
.LOOP $label$52:
	$10 = *(($8 + [8272]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$53 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$53
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$52 }
	$4 = ((int_64)$9 << (int_64)8)
	
.LABEL $label$47
	CALL eosio_assert((uint_64)(((int_64)$23 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$9 = (uint_64)$4 >> (uint_64)(int_64)8)
	$24 = ((int_64)$4 | (int_64)4)
	$8 = [0]
	
.LOOP $label$56:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$55 }
	$4 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$57 }
	$9 = $4
	$10 = [1]
	$13 = $8
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$56 }
	goto $label$54 
	
.LABEL $label$57
	$9 = $4
	
.LOOP $label$58:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$55 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$13 = ($8 + [1])
	$8 = $13
	if ( $10 ){ goto $label$58 }
	$10 = [1]
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$56 }
	goto $label$54 
	
.LABEL $label$55
	$10 = [0]
	
.LABEL $label$54
	CALL eosio_assert($10, [9776])
	if ( ((int_64)$23 < (int_64)1) ){ goto $label$59 }
	*($7 + [352]) = (int_64)3617214756542218240
	*($7 + [344]) = *($0)
	CALL $63(($7 + [80]), $0, $1, $2)
	*(($7 + [296])) = $24
	$8 = ($7 + [88])
	*(($7 + [312])) = *($8)
	*($8) = [0]
	*($7 + [280]) = $3
	*($7 + [288]) = $23
	*($7 + [272]) = *($0)
	*($7 + [304]) = *($7 + [80])
	*($7 + [80]) = (int_64)0
	$8 = CALL $59(($7 + [216]), ($7 + [344]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($7 + [272]))
	CALL $60(($7 + [184]), $8)
	$10 = *($7 + [184])
	CALL send_inline($10, (*($7 + [188]) - $10))
	$10 = *($7 + [184])
	if ( ($10 == 0) ){ goto $label$60 }
	*($7 + [188]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$60
	$10 = *($8 + [28])
	if ( ($10 == 0) ){ goto $label$61 }
	*(($8 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$61
	$10 = *($8 + [16])
	if ( ($10 == 0) ){ goto $label$62 }
	*(($8 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$62
	if ( ((*(($7 + [304])) & [1]) == 0) ){ goto $label$63 }
	CALL _ZdlPv(*(($7 + [312])))
	
.LABEL $label$63
	if ( ((*($7 + [80]) & [1]) == 0) ){ goto $label$59 }
	CALL _ZdlPv(*(($7 + [88])))
	
.LABEL $label$59
	$8 = CALL $143([8273])
	$10 = ($8 <= [8])
	$19 = ((float_64)$20 * (float_64)$19)
	if ( ((float_64)(float_64)|$19| < (float_64)(float_64)9223372036854775808) ){ goto $label$68 }
	$4 = (int_64)-9223372036854775808
	if ( ($10 == 0) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$68
	$4 = (Rounds 0)($19)
	if ( $10 ){ goto $label$66 }
	
.LABEL $label$67
	CALL eosio_assert([0], [9629])
	goto $label$65 
	
.LABEL $label$66
	if ( $8 ){ goto $label$65 }
	$3 = (int_64)0
	goto $label$64 
	
.LABEL $label$65
	$9 = (int_64)0
	
.LOOP $label$69:
	$10 = *(($8 + [8272]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$70 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$70
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$69 }
	$3 = ((int_64)$9 << (int_64)8)
	
.LABEL $label$64
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$9 = (uint_64)$3 >> (uint_64)(int_64)8)
	$26 = ((int_64)$3 | (int_64)4)
	$8 = [0]
	
.LOOP $label$73:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$72 }
	$3 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$74 }
	$9 = $3
	$10 = [1]
	$13 = $8
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$74
	$9 = $3
	
.LOOP $label$75:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$72 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$13 = ($8 + [1])
	$8 = $13
	if ( $10 ){ goto $label$75 }
	$10 = [1]
	$8 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$72
	$10 = [0]
	
.LABEL $label$71
	CALL eosio_assert($10, [9776])
	if ( ((int_64)$4 < (int_64)1) ){ goto $label$76 }
	*($7 + [352]) = (int_64)3617214756542218240
	*($7 + [344]) = *($0)
	CALL $64(($7 + [80]), $0, $1, $2)
	*(($7 + [296])) = $26
	$8 = ($7 + [88])
	*(($7 + [312])) = *($8)
	*($8) = [0]
	*($7 + [280]) = $1
	*($7 + [288]) = $4
	*($7 + [272]) = *($0)
	*($7 + [304]) = *($7 + [80])
	*($7 + [80]) = (int_64)0
	$8 = CALL $59(($7 + [216]), ($7 + [344]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($7 + [272]))
	CALL $60(($7 + [184]), $8)
	$10 = *($7 + [184])
	CALL send_inline($10, (*($7 + [188]) - $10))
	$10 = *($7 + [184])
	if ( ($10 == 0) ){ goto $label$77 }
	*($7 + [188]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$77
	$10 = *($8 + [28])
	if ( ($10 == 0) ){ goto $label$78 }
	*(($8 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$78
	$10 = *($8 + [16])
	if ( ($10 == 0) ){ goto $label$79 }
	*(($8 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$79
	if ( ((*(($7 + [304])) & [1]) == 0) ){ goto $label$80 }
	CALL _ZdlPv(*(($7 + [312])))
	
.LABEL $label$80
	if ( ((*($7 + [80]) & [1]) == 0) ){ goto $label$76 }
	CALL _ZdlPv(*(($7 + [88])))
	
.LABEL $label$76
	CALL eosio_assert(((int_64)$24 == (int_64)$22), [10135])
	$9 = (int_64)
	CALL eosio_assert(((int_64)$9($21 - $23)) > (int_64)-4611686018427387904), [10183])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [10205])
	CALL eosio_assert(((int_64)$26 == (int_64)$22), [10135])
	$9 = (int_64)
	CALL eosio_assert(((int_64)$9($9 - $4)) > (int_64)-4611686018427387904), [10183])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [10205])
	
.LABEL $label$45
	$18 = ($0 + [72])
	$10 = *(($0 + [100]))
	$16 = *(($0 + [96]))
	if ( ((int_32)$16 == (int_32)$10) ){ goto $label$84 }
	
.LOOP $label$86:
	$8 = ($10 + [-24])
	$13 = *($8)
	if ( ((int_64)*($13) == (int_64)$1) ){ goto $label$85 }
	$10 = $8
	if ( ((int_32)$16 != (int_32)$8) ){ goto $label$86 }
	goto $label$84 
	
.LABEL $label$85
	if ( ((int_32)$16 == (int_32)$10) ){ goto $label$84 }
	CALL eosio_assert(((int_32)*($13 + [72]) == (int_32)$18), [10332])
	goto $label$83 
	
.LABEL $label$84
	$13 = [0]
	$8 = CALL db_find_i64(*($18), *(($0 + [80])), (int_64)-4157500428759203840, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$82 }
	$13 = CALL $37($18, $8)
	CALL eosio_assert(((int_32)*($13 + [72]) == (int_32)$18), [10332])
	
.LABEL $label$83
	$26 = *($13 + [8])
	goto $label$81 
	
.LABEL $label$82
	$26 = (int_64)0
	
.LABEL $label$81
	*((($7 + [32]) + [8])) = $22
	*($7 + [176]) = $22
	*($7 + [32]) = $21
	*($7 + [168]) = $21
	CALL $65(($7 + [184]), $0, ($7 + [32]), ((CASTING uint_32)(uint_64 $26) & [255]))
	if ( ((int_64)*($7 + [184]) < (int_64)1) ){ goto $label$87 }
	CALL eosio_assert(((int_64)*($7 + [192]) == (int_64)$22), [10135])
	$9 = (int_64)
	CALL eosio_assert(((int_64)$9($9 - *($7 + [184]))) > (int_64)-4611686018427387904), [10183])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [10205])
	*($7 + [352]) = (int_64)3617214756542218240
	*($7 + [344]) = *($0)
	CALL $66(($7 + [256]), $0, $1, $2)
	*(($7 + [296])) = *($7 + [192])
	$8 = (($7 + [256]) + [8])
	*(($7 + [312])) = *($8)
	*($8) = [0]
	*($7 + [280]) = $1
	*($7 + [272]) = *($0)
	*($7 + [288]) = *($7 + [184])
	*($7 + [304]) = *($7 + [256])
	*($7 + [256]) = (int_64)0
	$8 = CALL $59(($7 + [216]), ($7 + [344]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($7 + [272]))
	CALL $60(($7 + [80]), $8)
	$10 = *($7 + [80])
	CALL send_inline($10, (*($7 + [84]) - $10))
	$10 = *($7 + [80])
	if ( ($10 == 0) ){ goto $label$88 }
	*($7 + [84]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$88
	$10 = *($8 + [28])
	if ( ($10 == 0) ){ goto $label$89 }
	*(($8 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$89
	$10 = *($8 + [16])
	if ( ($10 == 0) ){ goto $label$90 }
	*(($8 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$90
	if ( ((*(($7 + [304])) & [1]) == 0) ){ goto $label$91 }
	CALL _ZdlPv(*(($7 + [312])))
	
.LABEL $label$91
	if ( ((*($7 + [256]) & [1]) == 0) ){ goto $label$87 }
	CALL _ZdlPv(*(($7 + [264])))
	
.LABEL $label$87
	CALL __multi3(($7 + [16]), $9, (int_64)$9 >> (int_64)63), (int_64)5, (int_64)0)
	$4 = *((($7 + [16]) + [8]))
	$3 = *($7 + [16])
	CALL eosio_assert(( (uint_64)($3 <= (int_64)4611686018427387904) ? ((int_64)$4 < (int_64)0) : (int_64)($4 == 0) ), [9975])
	CALL eosio_assert(( ((uint_64)$3 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$4 > (int_64)-1) : ((int_64)$4 == (int_64)-1) ), [9999])
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9950])
	CALL eosio_assert(((int_64)$9 < (int_64)1152921504606846976), [9975])
	CALL eosio_assert(((int_64)$9 > (int_64)-1152921504606846976), [9999])
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9950])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [9975])
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [9999])
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9950])
	$21 = ((int_64)$9 / (int_64)10)
	$4 = ((int_64)$9 << (int_64)2)
	$27 = ((int_64)$4 / (int_64)10)
	$28 = ((int_64)$3 / (int_64)10)
	if ( ((int_64)$3 < (int_64)10) ){ goto $label$92 }
	*($7 + [352]) = (int_64)3617214756542218240
	*($7 + [344]) = *($0)
	*(($7 + [160])) = [0]
	*($7 + [152]) = (int_64)0
	$8 = CALL $143([9021])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$95 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$98 }
	*($7 + [152]) = ($8 << [1])
	$10 = (($7 + [152]) | [1])
	if ( $8 ){ goto $label$97 }
	goto $label$96 
	
.LABEL $label$98
	$16 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($16)
	*($7 + [152]) = ($16 | [1])
	*($7 + [160]) = $10
	*($7 + [156]) = $8
	
.LABEL $label$97
	CALL memcpy($10, [9021], $8)
	
.LABEL $label$96
	*(($10 + $8)) = [0]
	CALL $67(($7 + [256]), $0, $1, $2, ($7 + [152]))
	*(($7 + [296])) = $22
	$8 = ($7 + [264])
	*(($7 + [312])) = *($8)
	*($8) = [0]
	*($7 + [280]) = (int_64)-5971584259689938416
	*($7 + [288]) = $28
	*($7 + [272]) = *($0)
	*($7 + [304]) = *($7 + [256])
	*($7 + [256]) = (int_64)0
	$8 = CALL $59(($7 + [216]), ($7 + [344]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($7 + [272]))
	CALL $60(($7 + [80]), $8)
	$10 = *($7 + [80])
	CALL send_inline($10, (*($7 + [84]) - $10))
	$10 = *($7 + [80])
	if ( ($10 == 0) ){ goto $label$99 }
	*($7 + [84]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$99
	$10 = *($8 + [28])
	if ( ($10 == 0) ){ goto $label$100 }
	*(($8 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$100
	$10 = *($8 + [16])
	if ( ($10 == 0) ){ goto $label$101 }
	*(($8 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$101
	if ( (*(($7 + [304])) & [1]) ){ goto $label$103 }
	if ( (*($7 + [256]) & [1]) ){ goto $label$102 }
	goto $label$94 
	
.LABEL $label$103
	CALL _ZdlPv(*(($7 + [312])))
	if ( ((*($7 + [256]) & [1]) == 0) ){ goto $label$94 }
	
.LABEL $label$102
	CALL _ZdlPv(*(($7 + [264])))
	if ( (*($7 + [152]) & [1]) ){ goto $label$93 }
	goto $label$92 
	
.LABEL $label$95
	CALL $115(($7 + [152]))
	
.LABEL $label$94
	if ( ((*($7 + [152]) & [1]) == 0) ){ goto $label$92 }
	
.LABEL $label$93
	CALL _ZdlPv(*($7 + [160]))
	
.LABEL $label$92
	if ( ((int_64)$4 < (int_64)10) ){ goto $label$104 }
	*($7 + [352]) = (int_64)3617214756542218240
	*($7 + [344]) = *($0)
	*(($7 + [144])) = [0]
	*($7 + [136]) = (int_64)0
	$8 = CALL $143([9026])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$107 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$110 }
	*($7 + [136]) = ($8 << [1])
	$10 = (($7 + [136]) | [1])
	if ( $8 ){ goto $label$109 }
	goto $label$108 
	
.LABEL $label$110
	$16 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($16)
	*($7 + [136]) = ($16 | [1])
	*($7 + [144]) = $10
	*($7 + [140]) = $8
	
.LABEL $label$109
	CALL memcpy($10, [9026], $8)
	
.LABEL $label$108
	*(($10 + $8)) = [0]
	CALL $67(($7 + [256]), $0, $1, $2, ($7 + [136]))
	*(($7 + [296])) = $22
	$8 = ($7 + [264])
	*(($7 + [312])) = *($8)
	*($8) = [0]
	*($7 + [280]) = (int_64)-5971584259757047280
	*($7 + [288]) = $27
	*($7 + [272]) = *($0)
	*($7 + [304]) = *($7 + [256])
	*($7 + [256]) = (int_64)0
	$8 = CALL $59(($7 + [216]), ($7 + [344]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($7 + [272]))
	CALL $60(($7 + [80]), $8)
	$10 = *($7 + [80])
	CALL send_inline($10, (*($7 + [84]) - $10))
	$10 = *($7 + [80])
	if ( ($10 == 0) ){ goto $label$111 }
	*($7 + [84]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$111
	$10 = *($8 + [28])
	if ( ($10 == 0) ){ goto $label$112 }
	*(($8 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$112
	$10 = *($8 + [16])
	if ( ($10 == 0) ){ goto $label$113 }
	*(($8 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$113
	if ( (*(($7 + [304])) & [1]) ){ goto $label$115 }
	if ( (*($7 + [256]) & [1]) ){ goto $label$114 }
	goto $label$106 
	
.LABEL $label$115
	CALL _ZdlPv(*(($7 + [312])))
	if ( ((*($7 + [256]) & [1]) == 0) ){ goto $label$106 }
	
.LABEL $label$114
	CALL _ZdlPv(*(($7 + [264])))
	if ( (*($7 + [136]) & [1]) ){ goto $label$105 }
	goto $label$104 
	
.LABEL $label$107
	CALL $115(($7 + [136]))
	
.LABEL $label$106
	if ( ((*($7 + [136]) & [1]) == 0) ){ goto $label$104 }
	
.LABEL $label$105
	CALL _ZdlPv(*($7 + [144]))
	
.LABEL $label$104
	if ( ((int_64)$9 < (int_64)10) ){ goto $label$116 }
	*($7 + [352]) = (int_64)3617214756542218240
	*($7 + [344]) = *($0)
	*(($7 + [128])) = [0]
	*($7 + [120]) = (int_64)0
	$8 = CALL $143([9031])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$119 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$122 }
	*($7 + [120]) = ($8 << [1])
	$10 = (($7 + [120]) | [1])
	if ( $8 ){ goto $label$121 }
	goto $label$120 
	
.LABEL $label$122
	$16 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($16)
	*($7 + [120]) = ($16 | [1])
	*($7 + [128]) = $10
	*($7 + [124]) = $8
	
.LABEL $label$121
	CALL memcpy($10, [9031], $8)
	
.LABEL $label$120
	*(($10 + $8)) = [0]
	CALL $67(($7 + [256]), $0, $1, $2, ($7 + [120]))
	*(($7 + [296])) = $22
	$8 = ($7 + [264])
	*(($7 + [312])) = *($8)
	*($8) = [0]
	*($7 + [280]) = (int_64)-5971584260561056640
	*($7 + [288]) = $21
	*($7 + [272]) = *($0)
	*($7 + [304]) = *($7 + [256])
	*($7 + [256]) = (int_64)0
	$8 = CALL $59(($7 + [216]), ($7 + [344]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($7 + [272]))
	CALL $60(($7 + [80]), $8)
	$10 = *($7 + [80])
	CALL send_inline($10, (*($7 + [84]) - $10))
	$10 = *($7 + [80])
	if ( ($10 == 0) ){ goto $label$123 }
	*($7 + [84]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$123
	$10 = *($8 + [28])
	if ( ($10 == 0) ){ goto $label$124 }
	*(($8 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$124
	$10 = *($8 + [16])
	if ( ($10 == 0) ){ goto $label$125 }
	*(($8 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$125
	if ( (*(($7 + [304])) & [1]) ){ goto $label$127 }
	if ( (*($7 + [256]) & [1]) ){ goto $label$126 }
	goto $label$118 
	
.LABEL $label$127
	CALL _ZdlPv(*(($7 + [312])))
	if ( ((*($7 + [256]) & [1]) == 0) ){ goto $label$118 }
	
.LABEL $label$126
	CALL _ZdlPv(*(($7 + [264])))
	if ( (*($7 + [120]) & [1]) ){ goto $label$117 }
	goto $label$116 
	
.LABEL $label$119
	CALL $115(($7 + [120]))
	
.LABEL $label$118
	if ( ((*($7 + [120]) & [1]) == 0) ){ goto $label$116 }
	
.LABEL $label$117
	CALL _ZdlPv(*($7 + [128]))
	
.LABEL $label$116
	*($7 + [112]) = $26
	if ( ((int_64)*($7 + [200]) < (int_64)1) ){ goto $label$130 }
	$9 = *((($7 + [200]) + [8]))
	*((($7 + [96]) + [8])) = $9
	*(($7 + [8])) = $9
	$9 = *($7 + [200])
	*($7) = $9
	*($7 + [96]) = $9
	CALL $68(($7 + [344]), $0, $7)
	*($7 + [88]) = (int_64)3617214756542218240
	*($7 + [80]) = *($0)
	CALL $69(($7 + [64]), $0, $1, $2)
	*(($7 + [232])) = *((($7 + [344]) + [8]))
	$8 = (($7 + [64]) + [8])
	*(($7 + [248])) = *($8)
	*($8) = [0]
	*($7 + [216]) = $1
	*($7 + [224]) = *($7 + [344])
	*($7 + [240]) = *($7 + [64])
	*($7 + [64]) = (int_64)0
	$8 = CALL $70(($7 + [272]), ($7 + [80]), (int_64)-5971584251005327856, (int_64)8516769789752901632, ($7 + [216]))
	CALL $60(($7 + [256]), $8)
	$10 = *($7 + [256])
	CALL send_inline($10, (*($7 + [260]) - $10))
	$10 = *($7 + [256])
	if ( ($10 == 0) ){ goto $label$131 }
	*($7 + [260]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$131
	$10 = *($8 + [28])
	if ( ($10 == 0) ){ goto $label$132 }
	*(($8 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$132
	$10 = *($8 + [16])
	if ( ($10 == 0) ){ goto $label$133 }
	*(($8 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$133
	if ( ((*(($7 + [240])) & [1]) == 0) ){ goto $label$134 }
	CALL _ZdlPv(*(($7 + [248])))
	
.LABEL $label$134
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$135 }
	CALL _ZdlPv(*(($7 + [72])))
	
.LABEL $label$135
	*($7 + [88]) = (int_64)3617214756542218240
	*($7 + [80]) = *($0)
	$9 = *($7 + [352])
	$3 = *($7 + [344])
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9950])
	*(($7 + [72])) = [0]
	*($7 + [64]) = (int_64)0
	$3 = ((int_64)$3 / (int_64)4)
	$8 = CALL $143([9039])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$137 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$140 }
	*($7 + [64]) = ($8 << [1])
	$10 = (($7 + [64]) | [1])
	if ( $8 ){ goto $label$139 }
	goto $label$138 
	
.LABEL $label$140
	$16 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($16)
	*($7 + [64]) = ($16 | [1])
	*($7 + [72]) = $10
	*($7 + [68]) = $8
	
.LABEL $label$139
	CALL memcpy($10, [9039], $8)
	
.LABEL $label$138
	*(($10 + $8)) = [0]
	*(($7 + [232])) = $9
	$8 = ($7 + [72])
	*(($7 + [248])) = *($8)
	*($8) = [0]
	*($7 + [224]) = $3
	*($7 + [216]) = (int_64)-5971584259757047280
	*($7 + [240]) = *($7 + [64])
	*($7 + [64]) = (int_64)0
	$8 = CALL $70(($7 + [272]), ($7 + [80]), (int_64)-5971584251005327856, (int_64)8516769789752901632, ($7 + [216]))
	CALL $60(($7 + [256]), $8)
	$10 = *($7 + [256])
	CALL send_inline($10, (*($7 + [260]) - $10))
	$10 = *($7 + [256])
	if ( ($10 == 0) ){ goto $label$141 }
	*($7 + [260]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$141
	$10 = *($8 + [28])
	if ( ($10 == 0) ){ goto $label$142 }
	*(($8 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$142
	$10 = *($8 + [16])
	if ( ($10 == 0) ){ goto $label$143 }
	*(($8 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$143
	if ( ((*(($7 + [240])) & [1]) == 0) ){ goto $label$144 }
	CALL _ZdlPv(*(($7 + [248])))
	
.LABEL $label$144
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$145 }
	CALL _ZdlPv(*(($7 + [72])))
	
.LABEL $label$145
	$8 = CALL $143([8273])
	if ( ($8 <= [8]) ){ goto $label$148 }
	CALL eosio_assert([0], [9629])
	goto $label$147 
	
.LABEL $label$148
	if ( ($8 == 0) ){ goto $label$146 }
	
.LABEL $label$147
	$9 = (int_64)0
	
.LOOP $label$149:
	$10 = *(($8 + [8272]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$150 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$150
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$149 }
	$9 = ((int_64)$9 << (int_64)8)
	goto $label$136 
	
.LABEL $label$146
	$9 = (int_64)0
	goto $label$136 
	
.LABEL $label$137
	CALL $115(($7 + [64]))
	
.LABEL $label$136
	if ( ((int_64)*(($5 + [8])) != (int_64)((int_64)$9 | (int_64)4)) ){ goto $label$130 }
	if ( ($13 == 0) ){ goto $label$151 }
	$9 = *($0)
	*($7 + [276]) = $0
	*($7 + [280]) = $5
	*($7 + [284]) = $6
	*($7 + [272]) = ($7 + [200])
	*($7 + [288]) = ($7 + [112])
	CALL eosio_assert([1], [10541])
	CALL $85($18, $13, $9, ($7 + [272]))
	if ( ($12 == 0) ){ goto $label$128 }
	goto $label$129 
	
.LABEL $label$151
	$9 = (int_64)0
	$3 = ((int_64)*($7 + [200]) / (int_64)10000)
	if ( (uint_64)($3 <= (int_64)100) ){ goto $label$152 }
	$9 = (int_64)1
	if ( (uint_64)($3 <= (int_64)500) ){ goto $label$152 }
	$9 = (int_64)2
	if ( (uint_64)($3 <= (int_64)1000) ){ goto $label$152 }
	$9 = (int_64)3
	if ( (uint_64)($3 <= (int_64)5000) ){ goto $label$152 }
	$9 = (int_64)4
	if ( (uint_64)($3 <= (int_64)10000) ){ goto $label$152 }
	$9 = (int_64)5
	if ( (uint_64)($3 <= (int_64)50000) ){ goto $label$152 }
	$9 = (int_64)6
	if ( (uint_64)($3 <= (int_64)100000) ){ goto $label$152 }
	$9 = (int_64)7
	if ( (uint_64)($3 <= (int_64)500000) ){ goto $label$152 }
	$9 = (int_64)8
	if ( (uint_64)($3 <= (int_64)1000000) ){ goto $label$152 }
	$9 = (int_64)9
	if ( (uint_64)($3 <= (int_64)5000000) ){ goto $label$152 }
	$9 = (int_64)10
	if ( (uint_64)($3 <= (int_64)10000000) ){ goto $label$152 }
	$9 = ( (int_64)11 ? (int_64)12 : (uint_64)($3 <= (int_64)50000000) )
	
.LABEL $label$152
	*($7 + [112]) = $9
	$9 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL eosio_assert0()), [10490])
	*(($8 = CALL _Znwj([96])) + [48]) = (int_64)0
	*($8 + [40]) = (int_64)0
	*($8 + [56]) = (int_64)0
	*($8 + [64]) = (int_64)0
	*($8 + [72]) = $18
	*($8) = $1
	*($8 + [8]) = *($7 + [112])
	*($8 + [16]) = *($7 + [200])
	*(($8 + [24])) = *((($7 + [200]) + [8]))
	$1 = CALL current_time()
	*($8 + [40]) = *($5)
	*($8 + [48]) = *(($5 + [8]))
	*($8 + [56]) = *($6)
	*($8 + [64]) = *(($6 + [8]))
	*($8 + [32]) = ((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($7 + [88]) = (($7 + [272]) + [72])
	*($7 + [84]) = ($7 + [272])
	*($7 + [80]) = ($7 + [272])
	*($7 + [256]) = ($7 + [80])
	$13 = ($8 + [8])
	*($7 + [220]) = $13
	*($7 + [216]) = $8
	$16 = ($8 + [16])
	*($7 + [224]) = $16
	$5 = ($8 + [32])
	*($7 + [228]) = $5
	*($7 + [232]) = ($8 + [40])
	$18 = ($8 + [56])
	*($7 + [236]) = $18
	CALL $72(($7 + [216]), ($7 + [256]))
	$1 = *($8)
	$10 = ($0 + [80])
	*($8 + [76]) = CALL db_store_i64(*($10), (int_64)-4157500428759203840, $9, $1, ($7 + [272]), [72])
	$6 = ($0 + [88])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$153 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$153
	$1 = *($10)
	$3 = *($8)
	*($7 + [216]) = *($5)
	*($8 + [80]) = CALL db_idx64_store($1, (int_64)-4157500428759203840, $9, $3, ($7 + [216]))
	$1 = *($10)
	$3 = *($8)
	*($7 + [216]) = *($13)
	*($8 + [84]) = CALL db_idx64_store($1, (int_64)-4157500428759203839, $9, $3, ($7 + [216]))
	$1 = *($10)
	$3 = *($8)
	*($7 + [216]) = *($18)
	*($8 + [88]) = CALL db_idx64_store($1, (int_64)-4157500428759203838, $9, $3, ($7 + [216]))
	$1 = *($10)
	$3 = *($8)
	*($7 + [216]) = *($16)
	*($8 + [92]) = CALL db_idx64_store($1, (int_64)-4157500428759203837, $9, $3, ($7 + [216]))
	*($7 + [216]) = $8
	$9 = *($8)
	*($7 + [272]) = $9
	$13 = *(($8 + [76]))
	*($7 + [80]) = $13
	$16 = ($0 + [100])
	$10 = *($16)
	if ( ((uint_32)$10 >= (uint_32)*(($0 + [104]))) ){ goto $label$155 }
	*($10 + [8]) = $9
	*($10 + [16]) = $13
	*($7 + [216]) = [0]
	*($10) = $8
	*($16) = ($10 + [24])
	$8 = *($7 + [216])
	*($7 + [216]) = [0]
	if ( $8 ){ goto $label$154 }
	goto $label$130 
	
.LABEL $label$155
	CALL $73(($0 + [96]), ($7 + [216]), ($7 + [272]), ($7 + [80]))
	$8 = *($7 + [216])
	*($7 + [216]) = [0]
	if ( ($8 == 0) ){ goto $label$130 }
	
.LABEL $label$154
	CALL _ZdlPv($8)
	
.LABEL $label$130
	if ( ($12 == 0) ){ goto $label$128 }
	
.LABEL $label$129
	if ( ((int_64)$23 < (int_64)1) ){ goto $label$157 }
	$1 = *($0)
	CALL eosio_assert([1], [10541])
	CALL eosio_assert(((int_32)*($12 + [48]) == (int_32)$15), [10576])
	CALL eosio_assert(((int_64)*(($0 + [232])) == (int_64)CALL eosio_assert0()), [10622])
	$10 = ($12 + [8])
	*($7 + [216]) = *($10)
	$13 = ($12 + [16])
	*($7 + [224]) = *($13)
	$8 = ($12 + [24])
	*($7 + [232]) = *($8)
	$9 = *($12)
	CALL eosio_assert(((int_64)$24 == (int_64)*(($12 + [32]))), [9549])
	$3 = ((int_64)*($8) + (int_64)$23)
	*($8) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9592])
	CALL eosio_assert(((int_64)*($8) < (int_64)4611686018427387904), [9611])
	*($10) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$9 == (int_64)*($12)), [10673])
	*($7 + [88]) = (($7 + [272]) + [48])
	*($7 + [84]) = ($7 + [272])
	*($7 + [80]) = ($7 + [272])
	*($7 + [256]) = ($7 + [80])
	*($7 + [348]) = $10
	*($7 + [344]) = $12
	*($7 + [352]) = $13
	*($7 + [356]) = $8
	*($7 + [360]) = ($12 + [40])
	CALL $74(($7 + [344]), ($7 + [256]))
	CALL db_update_i64(*($12 + [52]), $1, ($7 + [272]), [48])
	$8 = ($0 + [248])
	if ( (uint_64)($9 <= *($8)) ){ goto $label$158 }
	*($8) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$158
	$8 = (($7 + [216]) + [8])
	*($7 + [344]) = *($10)
	if ( (CALL $142(($7 + [216]), ($7 + [344]), [8]) == 0) ){ goto $label$159 }
	$13 = ($12 + [56])
	$10 = *($13)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$160 }
	$10 = CALL db_idx64_find_primary(*(($0 + [232])), *(($0 + [240])), (int_64)8428183964630790656, ($7 + [256]), $9)
	*($13) = $10
	
.LABEL $label$160
	CALL db_idx64_update($10, $1, ($7 + [344]))
	
.LABEL $label$159
	$10 = (($7 + [216]) + [16])
	*($7 + [344]) = *(($12 + [16]))
	if ( (CALL $142($8, ($7 + [344]), [8]) == 0) ){ goto $label$161 }
	$13 = ($12 + [60])
	$8 = *($13)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$162 }
	$8 = CALL db_idx64_find_primary(*(($0 + [232])), *(($0 + [240])), (int_64)8428183964630790657, ($7 + [256]), $9)
	*($13) = $8
	
.LABEL $label$162
	CALL db_idx64_update($8, $1, ($7 + [344]))
	
.LABEL $label$161
	*($7 + [344]) = *(($12 + [24]))
	if ( (CALL $142($10, ($7 + [344]), [8]) == 0) ){ goto $label$163 }
	$10 = ($12 + [64])
	$8 = *($10)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$164 }
	$8 = CALL db_idx64_find_primary(*(($0 + [232])), *(($0 + [240])), (int_64)8428183964630790658, ($7 + [256]), $9)
	*($10) = $8
	
.LABEL $label$164
	CALL db_idx64_update($8, $1, ($7 + [344]))
	
.LABEL $label$163
	$8 = ((int_64)($26 == 0) & ((int_64)*($7 + [112]) != (int_64)0))
	goto $label$156 
	
.LABEL $label$157
	if ( ((int_64)$26 != (int_64)0) ){ goto $label$128 }
	$8 = [1]
	if ( (int_64)(*($7 + [112]) == 0) ){ goto $label$128 }
	
.LABEL $label$156
	$16 = ($0 + [272])
	$9 = *($12 + [16])
	$1 = (CASTING uint_64)(uint_32 $8)
	$13 = *(($0 + [300]))
	$12 = *(($0 + [296]))
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$166 }
	
.LOOP $label$168:
	$10 = ($13 + [-24])
	$8 = *($10)
	if ( ((int_64)*($8) == (int_64)$9) ){ goto $label$167 }
	$13 = $10
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$168 }
	goto $label$166 
	
.LABEL $label$167
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$166 }
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$16), [10332])
	goto $label$165 
	
.LABEL $label$166
	$8 = [0]
	$10 = CALL db_find_i64(*($16), *(($0 + [280])), (int_64)-5001503146665574400, $9)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$165 }
	$8 = CALL $38($16, $10)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$16), [10332])
	
.LABEL $label$165
	$3 = (int_64)0
	$9 = ((int_64)*($8 + [40]) + (int_64)$1)
	if ( (uint_64)($9 <= (int_64)5) ){ goto $label$169 }
	$3 = (int_64)1
	if ( (uint_64)($9 <= (int_64)10) ){ goto $label$169 }
	$3 = (int_64)2
	if ( (uint_64)($9 <= (int_64)30) ){ goto $label$169 }
	$3 = (int_64)3
	if ( (uint_64)($9 <= (int_64)80) ){ goto $label$169 }
	$3 = ( (int_64)4 ? (int_64)5 : (uint_64)($9 <= (int_64)150) )
	
.LABEL $label$169
	$9 = *($0)
	$4 = *($8 + [56])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [10541])
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$16), [10576])
	CALL eosio_assert(((int_64)*(($0 + [272])) == (int_64)CALL eosio_assert0()), [10622])
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$170 }
	$3 = *($10)
	*(($10 = ($8 + [40]))) = ((int_64)$3 + (int_64)$1)
	$13 = ($8 + [8])
	*($7 + [344]) = *($13)
	$12 = ($8 + [48])
	*($7 + [352]) = *($12)
	*($7 + [360]) = $3
	$1 = *($8)
	CALL eosio_assert(((int_64)$24 == (int_64)*(($8 + [24]))), [9549])
	$3 = ((int_64)*($8 + [16]) + (int_64)$23)
	*($8 + [16]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9592])
	CALL eosio_assert(((int_64)*($8 + [16]) < (int_64)4611686018427387904), [9611])
	*($13) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [10673])
	*($7 + [88]) = (($7 + [272]) + [64])
	*($7 + [84]) = ($7 + [272])
	*($7 + [80]) = ($7 + [272])
	*($7 + [256]) = ($7 + [80])
	*($7 + [220]) = $13
	*($7 + [216]) = $8
	*($7 + [224]) = ($8 + [16])
	*($7 + [228]) = ($8 + [32])
	*($7 + [232]) = $10
	*($7 + [236]) = $12
	*($7 + [240]) = ($8 + [56])
	CALL $39(($7 + [216]), ($7 + [256]))
	CALL db_update_i64(*($8 + [68]), $9, ($7 + [272]), [64])
	$16 = ($0 + [288])
	if ( (uint_64)($1 <= *($16)) ){ goto $label$171 }
	*($16) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$171
	$16 = (($7 + [344]) + [8])
	*($7 + [216]) = *($13)
	if ( (CALL $142(($7 + [344]), ($7 + [216]), [8]) == 0) ){ goto $label$172 }
	$5 = ($8 + [72])
	$13 = *($5)
	if ( ((int_32)$13 > (int_32)[-1]) ){ goto $label$173 }
	$13 = CALL db_idx64_find_primary(*(($0 + [272])), *(($0 + [280])), (int_64)-5001503146665574400, ($7 + [256]), $1)
	*($5) = $13
	
.LABEL $label$173
	CALL db_idx64_update($13, $9, ($7 + [216]))
	
.LABEL $label$172
	$13 = (($7 + [344]) + [16])
	*($7 + [216]) = *($12)
	if ( (CALL $142($16, ($7 + [216]), [8]) == 0) ){ goto $label$174 }
	$16 = ($8 + [76])
	$12 = *($16)
	if ( ((int_32)$12 > (int_32)[-1]) ){ goto $label$175 }
	$12 = CALL db_idx64_find_primary(*(($0 + [272])), *(($0 + [280])), (int_64)-5001503146665574399, ($7 + [256]), $1)
	*($16) = $12
	
.LABEL $label$175
	CALL db_idx64_update($12, $9, ($7 + [216]))
	
.LABEL $label$174
	*($7 + [216]) = *($10)
	if ( (CALL $142($13, ($7 + [216]), [8]) == 0) ){ goto $label$128 }
	$10 = ($8 + [80])
	$8 = *($10)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$176 }
	$8 = CALL db_idx64_find_primary(*(($0 + [272])), *(($0 + [280])), (int_64)-5001503146665574398, ($7 + [256]), $1)
	*($10) = $8
	
.LABEL $label$176
	CALL db_idx64_update($8, $9, ($7 + [216]))
	$global$0 = ($7 + [368])
	return 
	
.LABEL $label$170
	$10 = ($8 + [48])
	$4 = *($10)
	*($10) = $3
	$3 = *($13)
	*(($13 = ($8 + [40]))) = ((int_64)$3 + (int_64)$1)
	$12 = ($8 + [8])
	*($7 + [344]) = *($12)
	*($7 + [352]) = $4
	*($7 + [360]) = $3
	$1 = *($8)
	CALL eosio_assert(((int_64)$24 == (int_64)*(($8 + [24]))), [9549])
	$3 = ((int_64)*($8 + [16]) + (int_64)$23)
	*($8 + [16]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9592])
	CALL eosio_assert(((int_64)*($8 + [16]) < (int_64)4611686018427387904), [9611])
	*($12) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [10673])
	*($7 + [88]) = (($7 + [272]) + [64])
	*($7 + [84]) = ($7 + [272])
	*($7 + [80]) = ($7 + [272])
	*($7 + [256]) = ($7 + [80])
	*($7 + [220]) = $12
	*($7 + [216]) = $8
	*($7 + [224]) = ($8 + [16])
	*($7 + [228]) = ($8 + [32])
	*($7 + [232]) = $13
	*($7 + [236]) = $10
	*($7 + [240]) = ($8 + [56])
	CALL $39(($7 + [216]), ($7 + [256]))
	CALL db_update_i64(*($8 + [68]), $9, ($7 + [272]), [64])
	$16 = ($0 + [288])
	if ( (uint_64)($1 <= *($16)) ){ goto $label$177 }
	*($16) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$177
	$16 = (($7 + [344]) + [8])
	*($7 + [216]) = *($12)
	if ( (CALL $142(($7 + [344]), ($7 + [216]), [8]) == 0) ){ goto $label$178 }
	$5 = ($8 + [72])
	$12 = *($5)
	if ( ((int_32)$12 > (int_32)[-1]) ){ goto $label$179 }
	$12 = CALL db_idx64_find_primary(*(($0 + [272])), *(($0 + [280])), (int_64)-5001503146665574400, ($7 + [256]), $1)
	*($5) = $12
	
.LABEL $label$179
	CALL db_idx64_update($12, $9, ($7 + [216]))
	
.LABEL $label$178
	$12 = (($7 + [344]) + [16])
	*($7 + [216]) = *($10)
	if ( (CALL $142($16, ($7 + [216]), [8]) == 0) ){ goto $label$180 }
	$16 = ($8 + [76])
	$10 = *($16)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$181 }
	$10 = CALL db_idx64_find_primary(*(($0 + [272])), *(($0 + [280])), (int_64)-5001503146665574399, ($7 + [256]), $1)
	*($16) = $10
	
.LABEL $label$181
	CALL db_idx64_update($10, $9, ($7 + [216]))
	
.LABEL $label$180
	*($7 + [216]) = *($13)
	if ( (CALL $142($12, ($7 + [216]), [8]) == 0) ){ goto $label$128 }
	$10 = ($8 + [80])
	$8 = *($10)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$182 }
	$8 = CALL db_idx64_find_primary(*(($0 + [272])), *(($0 + [280])), (int_64)-5001503146665574398, ($7 + [256]), $1)
	*($10) = $8
	
.LABEL $label$182
	CALL db_idx64_update($8, $9, ($7 + [216]))
	$global$0 = ($7 + [368])
	return 
	
.LABEL $label$128
	$global$0 = ($7 + [368])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $149($0)
	
.LABEL $label$1
}

int_32 .FUNC $135 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL $143([9876])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$4
	CALL memcpy($6, [9876], $5)
	
.LABEL $label$3
	*(($6 + $5)) = [0]
	*($4 + [24]) = [0]
	*($4 + [16]) = (int_64)0
	$6 = (($4 + [16]) | [1])
	
.LOOP $label$6:
	$8 = ((uint_64)$3 / (uint_64)(int_64)10)
	$5 = (CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$8 * (int_64)10))
	CALL $1(($4 + [32]), int_32((( ($5) | [48]) ? ($5 + [55]) : ($5 <= [10]) ) << [24]) >> [24]), ($4 + [16]))
	if ( (*($4 + [16]) & [1]) ){ goto $label$8 }
	*($4 + [16]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*((($4 + [16]) + [8]))) = [0]
	*($4 + [20]) = [0]
	
.LABEL $label$7
	CALL $119(($4 + [16]), [0])
	*((($4 + [16]) + [8])) = *((($4 + [32]) + [8]))
	*($4 + [16]) = *($4 + [32])
	$5 = ((uint_64)$3 > (uint_64)(int_64)9)
	$3 = $8
	if ( $5 ){ goto $label$6 }
	$5 = *($4 + [16])
	$7 = ($5 & [1])
	CALL $121($0, ( *((($4 + [16]) + [8])) ? $6 : $7 ), ( *($4 + [20]) ? uint_32($5 >> [1]) : $7 ))
	CALL $120($0, [9885])
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$12 }
	$6 = [0]
	$7 = *([0] + [9512])
	
.LOOP $label$14:
	*((($4 + [32]) + ($5 = $6))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$6 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$13 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$14 }
	
.LABEL $label$13
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$11 }
	*($4) = ($6 << [1])
	$7 = ($4 | [1])
	goto $label$10 
	
.LABEL $label$12
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	*($4) = [0]
	$5 = ($4 | [1])
	$6 = $5
	goto $label$9 
	
.LABEL $label$11
	$9 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($4) = ($9 | [1])
	*($4 + [8]) = $7
	*($4 + [4]) = $6
	
.LABEL $label$10
	$9 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$15:
	*(($7 + $5)) = *((($4 + [32]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$15 }
	$6 = ($7 + $6)
	$5 = ($4 | [1])
	
.LABEL $label$9
	*($6) = [0]
	$6 = *($4)
	$7 = ($6 & [1])
	CALL $121($0, ( *($4 + [8]) ? $5 : $7 ), ( *($4 + [4]) ? uint_32($6 >> [1]) : $7 ))
	CALL $120($0, [10411])
	if ( (*($4) & [1]) ){ goto $label$17 }
	if ( (*($4 + [16]) & [1]) ){ goto $label$16 }
	goto $label$1 
	
.LABEL $label$17
	CALL _ZdlPv(*(($4 + [8])))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($4 + [24])))
	$global$0 = ($4 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = CALL $143([10308])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9629])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($4 + [10307]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$5 = ((int_64)$5 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)0
	
.LABEL $label$1
	*(($3 + [40])) = [0]
	*($3 + [8]) = (int_64)-5971584251005327856
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [16]) = $5
	$4 = CALL $88(($3 + [8]), $5, [10313])
	$7 = *($4 + [8])
	$8 = *($4)
	$9 = *($3 + [32])
	if ( ($9 == 0) ){ goto $label$7 }
	$10 = ($3 + [36])
	$4 = *($10)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($3 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $9
	
.LABEL $label$8
	*($10) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$7
	$4 = CALL $143([10308])
	if ( ($4 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [9629])
	goto $label$14 
	
.LABEL $label$15
	if ( ($4 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$5 = (int_64)0
	
.LOOP $label$16:
	$6 = *(($4 + [10307]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$17
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$16 }
	$11 = ((int_64)$5 << (int_64)8)
	goto $label$12 
	
.LABEL $label$13
	$11 = (int_64)0
	
.LABEL $label$12
	CALL eosio_assert([1], [9727])
	$5 = (uint_64)$11 >> (uint_64)(int_64)8)
	$12 = ((int_64)$11 | (int_64)4)
	$4 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$11 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$5 = $11
	$6 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$5 = $11
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $6 ){ goto $label$22 }
	$6 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$6 = [0]
	
.LABEL $label$18
	CALL eosio_assert($6, [9776])
	CALL eosio_assert([1], [9975])
	CALL eosio_assert([1], [9999])
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	CALL eosio_assert([1], [9975])
	CALL eosio_assert([1], [9999])
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9950])
	$4 = ((int_64)$7 == (int_64)$12)
	CALL eosio_assert($4, [9796])
	if ( ((int_64)$8 > (int_64)4999999999999) ){ goto $label$83 }
	$8 = ((int_64)*($2) * (int_64)200)
	$4 = CALL $143([10308])
	if ( ($4 <= [8]) ){ goto $label$82 }
	CALL eosio_assert([0], [9629])
	goto $label$81 
	
.LABEL $label$83
	CALL eosio_assert([1], [9975])
	CALL eosio_assert([1], [9999])
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9950])
	CALL eosio_assert($4, [9796])
	if ( ((int_64)$8 > (int_64)9999999999999) ){ goto $label$80 }
	$8 = ((int_64)*($2) * (int_64)100)
	$4 = CALL $143([10308])
	if ( ($4 <= [8]) ){ goto $label$79 }
	CALL eosio_assert([0], [9629])
	goto $label$78 
	
.LABEL $label$82
	if ( ($4 == 0) ){ goto $label$76 }
	
.LABEL $label$81
	$5 = (int_64)0
	
.LOOP $label$84:
	$6 = *(($4 + [10307]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$85 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$85
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$84 }
	$12 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$25 
	
.LABEL $label$80
	CALL eosio_assert([1], [9975])
	CALL eosio_assert([1], [9999])
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9950])
	CALL eosio_assert($4, [9796])
	if ( ((int_64)$8 > (int_64)19999999999999) ){ goto $label$77 }
	$8 = ((int_64)*($2) * (int_64)80)
	$4 = CALL $143([10308])
	if ( ($4 <= [8]) ){ goto $label$75 }
	CALL eosio_assert([0], [9629])
	goto $label$74 
	
.LABEL $label$79
	if ( ($4 == 0) ){ goto $label$72 }
	
.LABEL $label$78
	$5 = (int_64)0
	
.LOOP $label$86:
	$6 = *(($4 + [10307]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$87 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$87
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$86 }
	$12 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$26 
	
.LABEL $label$77
	CALL eosio_assert([1], [9975])
	CALL eosio_assert([1], [9999])
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9950])
	CALL eosio_assert($4, [9796])
	if ( ((int_64)$8 > (int_64)29999999999999) ){ goto $label$73 }
	$8 = ((int_64)*($2) * (int_64)70)
	$4 = CALL $143([10308])
	if ( ($4 <= [8]) ){ goto $label$71 }
	CALL eosio_assert([0], [9629])
	goto $label$70 
	
.LABEL $label$76
	$12 = (int_64)4
	goto $label$25 
	
.LABEL $label$75
	if ( ($4 == 0) ){ goto $label$68 }
	
.LABEL $label$74
	$5 = (int_64)0
	
.LOOP $label$88:
	$6 = *(($4 + [10307]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$89 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$89
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$88 }
	$12 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$27 
	
.LABEL $label$73
	CALL eosio_assert([1], [9975])
	CALL eosio_assert([1], [9999])
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9950])
	CALL eosio_assert($4, [9796])
	if ( ((int_64)$8 > (int_64)39999999999999) ){ goto $label$69 }
	$8 = ((int_64)*($2) * (int_64)60)
	$4 = CALL $143([10308])
	if ( ($4 <= [8]) ){ goto $label$67 }
	CALL eosio_assert([0], [9629])
	goto $label$66 
	
.LABEL $label$72
	$12 = (int_64)4
	goto $label$26 
	
.LABEL $label$71
	if ( ($4 == 0) ){ goto $label$64 }
	
.LABEL $label$70
	$5 = (int_64)0
	
.LOOP $label$90:
	$6 = *(($4 + [10307]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$91 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$91
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$90 }
	$12 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$28 
	
.LABEL $label$69
	CALL eosio_assert([1], [9975])
	CALL eosio_assert([1], [9999])
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9950])
	CALL eosio_assert($4, [9796])
	if ( ((int_64)$8 > (int_64)49999999999999) ){ goto $label$65 }
	$8 = ((int_64)*($2) * (int_64)50)
	$4 = CALL $143([10308])
	if ( ($4 <= [8]) ){ goto $label$63 }
	CALL eosio_assert([0], [9629])
	goto $label$62 
	
.LABEL $label$68
	$12 = (int_64)4
	goto $label$27 
	
.LABEL $label$67
	if ( ($4 == 0) ){ goto $label$60 }
	
.LABEL $label$66
	$5 = (int_64)0
	
.LOOP $label$92:
	$6 = *(($4 + [10307]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$93 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$93
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$92 }
	$12 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$29 
	
.LABEL $label$65
	CALL eosio_assert([1], [9975])
	CALL eosio_assert([1], [9999])
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9950])
	CALL eosio_assert($4, [9796])
	if ( ((int_64)$8 > (int_64)59999999999999) ){ goto $label$61 }
	$8 = ((int_64)*($2) * (int_64)40)
	$4 = CALL $143([10308])
	if ( ($4 <= [8]) ){ goto $label$59 }
	CALL eosio_assert([0], [9629])
	goto $label$58 
	
.LABEL $label$64
	$12 = (int_64)4
	goto $label$28 
	
.LABEL $label$63
	if ( ($4 == 0) ){ goto $label$56 }
	
.LABEL $label$62
	$5 = (int_64)0
	
.LOOP $label$94:
	$6 = *(($4 + [10307]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$95 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$95
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$94 }
	$12 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$30 
	
.LABEL $label$61
	CALL eosio_assert([1], [9975])
	CALL eosio_assert([1], [9999])
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9950])
	CALL eosio_assert($4, [9796])
	if ( ((int_64)$8 > (int_64)69999999999999) ){ goto $label$57 }
	$8 = ((int_64)*($2) * (int_64)30)
	$4 = CALL $143([10308])
	if ( ($4 <= [8]) ){ goto $label$55 }
	CALL eosio_assert([0], [9629])
	goto $label$54 
	
.LABEL $label$60
	$12 = (int_64)4
	goto $label$29 
	
.LABEL $label$59
	if ( ($4 == 0) ){ goto $label$52 }
	
.LABEL $label$58
	$5 = (int_64)0
	
.LOOP $label$96:
	$6 = *(($4 + [10307]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$97 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$97
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$96 }
	$12 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$31 
	
.LABEL $label$57
	CALL eosio_assert([1], [9975])
	CALL eosio_assert([1], [9999])
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9950])
	CALL eosio_assert($4, [9796])
	if ( ((int_64)$8 > (int_64)79999999999999) ){ goto $label$53 }
	$8 = ((int_64)*($2) * (int_64)20)
	$4 = CALL $143([10308])
	if ( ($4 <= [8]) ){ goto $label$51 }
	CALL eosio_assert([0], [9629])
	goto $label$50 
	
.LABEL $label$56
	$12 = (int_64)4
	goto $label$30 
	
.LABEL $label$55
	if ( ($4 == 0) ){ goto $label$48 }
	
.LABEL $label$54
	$5 = (int_64)0
	
.LOOP $label$98:
	$6 = *(($4 + [10307]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$99 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$99
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$98 }
	$12 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$32 
	
.LABEL $label$53
	CALL eosio_assert([1], [9975])
	CALL eosio_assert([1], [9999])
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9950])
	CALL eosio_assert($4, [9796])
	if ( ((int_64)$8 > (int_64)89999999999999) ){ goto $label$49 }
	$8 = ((int_64)*($2) * (int_64)10)
	$4 = CALL $143([10308])
	if ( ($4 <= [8]) ){ goto $label$47 }
	CALL eosio_assert([0], [9629])
	goto $label$46 
	
.LABEL $label$52
	$12 = (int_64)4
	goto $label$31 
	
.LABEL $label$51
	if ( ($4 == 0) ){ goto $label$44 }
	
.LABEL $label$50
	$5 = (int_64)0
	
.LOOP $label$100:
	$6 = *(($4 + [10307]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$101 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$101
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$100 }
	$12 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$33 
	
.LABEL $label$49
	CALL eosio_assert($4, [9796])
	if ( ((int_64)$8 > (int_64)100000000000000) ){ goto $label$45 }
	$7 = *($2)
	$6 = CALL $143([10308])
	if ( ($6 <= [8]) ){ goto $label$43 }
	CALL eosio_assert([0], [9629])
	goto $label$42 
	
.LABEL $label$48
	$12 = (int_64)4
	goto $label$32 
	
.LABEL $label$47
	if ( ($4 == 0) ){ goto $label$39 }
	
.LABEL $label$46
	$5 = (int_64)0
	
.LOOP $label$102:
	$6 = *(($4 + [10307]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$103 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$103
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$102 }
	$12 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$34 
	
.LABEL $label$45
	$4 = CALL $143([10308])
	if ( ($4 <= [8]) ){ goto $label$41 }
	CALL eosio_assert([0], [9629])
	goto $label$40 
	
.LABEL $label$44
	$12 = (int_64)4
	goto $label$33 
	
.LABEL $label$43
	if ( ($6 == 0) ){ goto $label$38 }
	
.LABEL $label$42
	$5 = (int_64)0
	
.LOOP $label$104:
	$9 = *(($6 + [10307]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$105 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$105
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$104 }
	$13 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$35 
	
.LABEL $label$41
	if ( ($4 == 0) ){ goto $label$37 }
	
.LABEL $label$40
	$5 = (int_64)0
	
.LOOP $label$106:
	$6 = *(($4 + [10307]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$107 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$107
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$106 }
	$12 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$36 
	
.LABEL $label$39
	$12 = (int_64)4
	goto $label$34 
	
.LABEL $label$38
	$13 = (int_64)4
	goto $label$35 
	
.LABEL $label$37
	$12 = (int_64)4
	
.LABEL $label$36
	CALL eosio_assert([1], [9727])
	$5 = (uint_64)$12 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$110:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$109 }
	$11 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$111 }
	$5 = $11
	$6 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$110 }
	goto $label$108 
	
.LABEL $label$111
	$5 = $11
	
.LOOP $label$112:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$109 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $6 ){ goto $label$112 }
	$6 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$110 }
	goto $label$108 
	
.LABEL $label$109
	$6 = [0]
	
.LABEL $label$108
	CALL eosio_assert($6, [9776])
	$8 = (int_64)0
	goto $label$24 
	
.LABEL $label$35
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$5 = (uint_64)$13 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$115:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$114 }
	$11 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$116 }
	$5 = $11
	$9 = [1]
	$2 = $6
	$6 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$115 }
	goto $label$113 
	
.LABEL $label$116
	$5 = $11
	
.LOOP $label$117:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$114 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$2 = ($6 + [1])
	$6 = $2
	if ( $9 ){ goto $label$117 }
	$9 = [1]
	$6 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$115 }
	goto $label$113 
	
.LABEL $label$114
	$9 = [0]
	
.LABEL $label$113
	CALL eosio_assert($9, [9776])
	*(($0 + [8])) = $13
	*($0) = $7
	CALL eosio_assert($4, [10135])
	$8 = (int_64)
	CALL eosio_assert(((int_64)$8((int_64)100000000000000 - $8)) > (int_64)-4611686018427387904), [10183])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [10205])
	CALL eosio_assert(((int_64)$13 == (int_64)$12), [9796])
	if ( ((int_64)$7 > (int_64)$8) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$34
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$5 = (uint_64)$12 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$120:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$119 }
	$11 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$121 }
	$5 = $11
	$6 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$120 }
	goto $label$118 
	
.LABEL $label$121
	$5 = $11
	
.LOOP $label$122:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$119 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $6 ){ goto $label$122 }
	$6 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$120 }
	goto $label$118 
	
.LABEL $label$119
	$6 = [0]
	
.LABEL $label$118
	CALL eosio_assert($6, [9776])
	goto $label$24 
	
.LABEL $label$33
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$5 = (uint_64)$12 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$125:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$124 }
	$11 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$126 }
	$5 = $11
	$6 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$125 }
	goto $label$123 
	
.LABEL $label$126
	$5 = $11
	
.LOOP $label$127:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$124 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $6 ){ goto $label$127 }
	$6 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$125 }
	goto $label$123 
	
.LABEL $label$124
	$6 = [0]
	
.LABEL $label$123
	CALL eosio_assert($6, [9776])
	goto $label$24 
	
.LABEL $label$32
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$5 = (uint_64)$12 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$130:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$129 }
	$11 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$131 }
	$5 = $11
	$6 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$130 }
	goto $label$128 
	
.LABEL $label$131
	$5 = $11
	
.LOOP $label$132:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$129 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $6 ){ goto $label$132 }
	$6 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$130 }
	goto $label$128 
	
.LABEL $label$129
	$6 = [0]
	
.LABEL $label$128
	CALL eosio_assert($6, [9776])
	goto $label$24 
	
.LABEL $label$31
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$5 = (uint_64)$12 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$135:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$134 }
	$11 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$136 }
	$5 = $11
	$6 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$135 }
	goto $label$133 
	
.LABEL $label$136
	$5 = $11
	
.LOOP $label$137:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$134 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $6 ){ goto $label$137 }
	$6 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$135 }
	goto $label$133 
	
.LABEL $label$134
	$6 = [0]
	
.LABEL $label$133
	CALL eosio_assert($6, [9776])
	goto $label$24 
	
.LABEL $label$30
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$5 = (uint_64)$12 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$140:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$139 }
	$11 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$141 }
	$5 = $11
	$6 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$140 }
	goto $label$138 
	
.LABEL $label$141
	$5 = $11
	
.LOOP $label$142:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$139 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $6 ){ goto $label$142 }
	$6 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$140 }
	goto $label$138 
	
.LABEL $label$139
	$6 = [0]
	
.LABEL $label$138
	CALL eosio_assert($6, [9776])
	goto $label$24 
	
.LABEL $label$29
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$5 = (uint_64)$12 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$145:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$144 }
	$11 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$146 }
	$5 = $11
	$6 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$146
	$5 = $11
	
.LOOP $label$147:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$144 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $6 ){ goto $label$147 }
	$6 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$144
	$6 = [0]
	
.LABEL $label$143
	CALL eosio_assert($6, [9776])
	goto $label$24 
	
.LABEL $label$28
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$5 = (uint_64)$12 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$150:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$149 }
	$11 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$151 }
	$5 = $11
	$6 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$150 }
	goto $label$148 
	
.LABEL $label$151
	$5 = $11
	
.LOOP $label$152:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$149 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $6 ){ goto $label$152 }
	$6 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$150 }
	goto $label$148 
	
.LABEL $label$149
	$6 = [0]
	
.LABEL $label$148
	CALL eosio_assert($6, [9776])
	goto $label$24 
	
.LABEL $label$27
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$5 = (uint_64)$12 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$155:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$154 }
	$11 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$156 }
	$5 = $11
	$6 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$155 }
	goto $label$153 
	
.LABEL $label$156
	$5 = $11
	
.LOOP $label$157:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$154 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $6 ){ goto $label$157 }
	$6 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$155 }
	goto $label$153 
	
.LABEL $label$154
	$6 = [0]
	
.LABEL $label$153
	CALL eosio_assert($6, [9776])
	goto $label$24 
	
.LABEL $label$26
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$5 = (uint_64)$12 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$160:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$159 }
	$11 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$161 }
	$5 = $11
	$6 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$160 }
	goto $label$158 
	
.LABEL $label$161
	$5 = $11
	
.LOOP $label$162:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$159 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $6 ){ goto $label$162 }
	$6 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$160 }
	goto $label$158 
	
.LABEL $label$159
	$6 = [0]
	
.LABEL $label$158
	CALL eosio_assert($6, [9776])
	goto $label$24 
	
.LABEL $label$25
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$5 = (uint_64)$12 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$165:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$164 }
	$11 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$166 }
	$5 = $11
	$6 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$165 }
	goto $label$163 
	
.LABEL $label$166
	$5 = $11
	
.LOOP $label$167:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$164 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $6 ){ goto $label$167 }
	$6 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$165 }
	goto $label$163 
	
.LABEL $label$164
	$6 = [0]
	
.LABEL $label$163
	CALL eosio_assert($6, [9776])
	
.LABEL $label$24
	*($0) = $8
	*(($0 + [8])) = $12
	
.LABEL $label$23
	$global$0 = ($3 + [48])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	float_64 $7
	if ( ((uint_32)$3 > (uint_32)[12]) ){ goto $label$55 }
	goto $label$56 
	
.LABEL $label$56
	*($0) = (int_64)0
	*($0 + [8]) = *($2 + [8])
	CALL eosio_assert([1], [9727])
	$4 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$57:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$58 }
	$4 = $5
	$6 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$57 }
	goto $label$41 
	
.LABEL $label$58
	$4 = $5
	
.LOOP $label$59:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$42 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$2 = ($0 + [1])
	$0 = $2
	if ( $3 ){ goto $label$59 }
	$6 = [1]
	$0 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$57 }
	goto $label$41 
	
.LABEL $label$55
	CALL eosio_assert([0], [10226])
	*($0) = (int_64)0
	*($0 + [8]) = *($2 + [8])
	CALL eosio_assert([1], [9727])
	$4 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$60:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$61 }
	$4 = $5
	$6 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$60 }
	goto $label$39 
	
.LABEL $label$61
	$4 = $5
	
.LOOP $label$62:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$40 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$2 = ($0 + [1])
	$0 = $2
	if ( $3 ){ goto $label$62 }
	$6 = [1]
	$0 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$60 }
	goto $label$39 
	
.LABEL $label$54
	*($0 + [8]) = *($2 + [8])
	$7 = ((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)0.03)
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$38 }
	$4 = (int_64)-9223372036854775808
	goto $label$37 
	
.LABEL $label$53
	*($0 + [8]) = *($2 + [8])
	$7 = ((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)0.06)
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$36 }
	$4 = (int_64)-9223372036854775808
	goto $label$35 
	
.LABEL $label$52
	*($0 + [8]) = *($2 + [8])
	$7 = ((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)0.09)
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$34 }
	$4 = (int_64)-9223372036854775808
	goto $label$33 
	
.LABEL $label$51
	*($0 + [8]) = *($2 + [8])
	$7 = ((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)0.12)
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$32 }
	$4 = (int_64)-9223372036854775808
	goto $label$31 
	
.LABEL $label$50
	*($0 + [8]) = *($2 + [8])
	$7 = ((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)0.15)
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$30 }
	$4 = (int_64)-9223372036854775808
	goto $label$29 
	
.LABEL $label$49
	*($0 + [8]) = *($2 + [8])
	$7 = ((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)0.18)
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$28 }
	$4 = (int_64)-9223372036854775808
	goto $label$27 
	
.LABEL $label$48
	*($0 + [8]) = *($2 + [8])
	$7 = ((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)0.21)
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$26 }
	$4 = (int_64)-9223372036854775808
	goto $label$25 
	
.LABEL $label$47
	*($0 + [8]) = *($2 + [8])
	$7 = ((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)0.3)
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$24 }
	$4 = (int_64)-9223372036854775808
	goto $label$23 
	
.LABEL $label$46
	*($0 + [8]) = *($2 + [8])
	$7 = ((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)0.4)
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$22 }
	$4 = (int_64)-9223372036854775808
	goto $label$21 
	
.LABEL $label$45
	*($0 + [8]) = *($2 + [8])
	$7 = ((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)0.5)
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$20 }
	$4 = (int_64)-9223372036854775808
	goto $label$19 
	
.LABEL $label$44
	*($0 + [8]) = *($2 + [8])
	$7 = ((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)0.6)
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$18 }
	$4 = (int_64)-9223372036854775808
	goto $label$17 
	
.LABEL $label$43
	*($0 + [8]) = *($2 + [8])
	$7 = ((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)0.7)
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$16 }
	$4 = (int_64)-9223372036854775808
	goto $label$15 
	
.LABEL $label$42
	$6 = [0]
	
.LABEL $label$41
	CALL eosio_assert($6, [9776])
	return 
	
.LABEL $label$40
	$6 = [0]
	
.LABEL $label$39
	CALL eosio_assert($6, [9776])
	return 
	
.LABEL $label$38
	$4 = (Rounds 0)($7)
	
.LABEL $label$37
	*($0) = $4
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$4 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$64:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$65 }
	$4 = $5
	$6 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$65
	$4 = $5
	
.LOOP $label$67:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$66 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$2 = ($0 + [1])
	$0 = $2
	if ( $3 ){ goto $label$67 }
	$6 = [1]
	$0 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$66
	$6 = [0]
	
.LABEL $label$63
	CALL eosio_assert($6, [9776])
	return 
	
.LABEL $label$36
	$4 = (Rounds 0)($7)
	
.LABEL $label$35
	*($0) = $4
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$4 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$69:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$70 }
	$4 = $5
	$6 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$70
	$4 = $5
	
.LOOP $label$72:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$71 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$2 = ($0 + [1])
	$0 = $2
	if ( $3 ){ goto $label$72 }
	$6 = [1]
	$0 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$71
	$6 = [0]
	
.LABEL $label$68
	CALL eosio_assert($6, [9776])
	return 
	
.LABEL $label$34
	$4 = (Rounds 0)($7)
	
.LABEL $label$33
	*($0) = $4
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$4 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$74:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$75 }
	$4 = $5
	$6 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$75
	$4 = $5
	
.LOOP $label$77:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$76 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$2 = ($0 + [1])
	$0 = $2
	if ( $3 ){ goto $label$77 }
	$6 = [1]
	$0 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$76
	$6 = [0]
	
.LABEL $label$73
	CALL eosio_assert($6, [9776])
	return 
	
.LABEL $label$32
	$4 = (Rounds 0)($7)
	
.LABEL $label$31
	*($0) = $4
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$4 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$79:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$80 }
	$4 = $5
	$6 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$79 }
	goto $label$78 
	
.LABEL $label$80
	$4 = $5
	
.LOOP $label$82:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$81 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$2 = ($0 + [1])
	$0 = $2
	if ( $3 ){ goto $label$82 }
	$6 = [1]
	$0 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$79 }
	goto $label$78 
	
.LABEL $label$81
	$6 = [0]
	
.LABEL $label$78
	CALL eosio_assert($6, [9776])
	return 
	
.LABEL $label$30
	$4 = (Rounds 0)($7)
	
.LABEL $label$29
	*($0) = $4
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$4 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$84:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$85 }
	$4 = $5
	$6 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$84 }
	goto $label$83 
	
.LABEL $label$85
	$4 = $5
	
.LOOP $label$87:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$86 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$2 = ($0 + [1])
	$0 = $2
	if ( $3 ){ goto $label$87 }
	$6 = [1]
	$0 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$84 }
	goto $label$83 
	
.LABEL $label$86
	$6 = [0]
	
.LABEL $label$83
	CALL eosio_assert($6, [9776])
	return 
	
.LABEL $label$28
	$4 = (Rounds 0)($7)
	
.LABEL $label$27
	*($0) = $4
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$4 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$89:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$90 }
	$4 = $5
	$6 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$89 }
	goto $label$88 
	
.LABEL $label$90
	$4 = $5
	
.LOOP $label$92:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$91 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$2 = ($0 + [1])
	$0 = $2
	if ( $3 ){ goto $label$92 }
	$6 = [1]
	$0 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$89 }
	goto $label$88 
	
.LABEL $label$91
	$6 = [0]
	
.LABEL $label$88
	CALL eosio_assert($6, [9776])
	return 
	
.LABEL $label$26
	$4 = (Rounds 0)($7)
	
.LABEL $label$25
	*($0) = $4
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$4 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$94:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$95 }
	$4 = $5
	$6 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$94 }
	goto $label$93 
	
.LABEL $label$95
	$4 = $5
	
.LOOP $label$97:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$96 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$2 = ($0 + [1])
	$0 = $2
	if ( $3 ){ goto $label$97 }
	$6 = [1]
	$0 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$94 }
	goto $label$93 
	
.LABEL $label$96
	$6 = [0]
	
.LABEL $label$93
	CALL eosio_assert($6, [9776])
	return 
	
.LABEL $label$24
	$4 = (Rounds 0)($7)
	
.LABEL $label$23
	*($0) = $4
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$4 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$99:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$100 }
	$4 = $5
	$6 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$99 }
	goto $label$98 
	
.LABEL $label$100
	$4 = $5
	
.LOOP $label$102:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$101 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$2 = ($0 + [1])
	$0 = $2
	if ( $3 ){ goto $label$102 }
	$6 = [1]
	$0 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$99 }
	goto $label$98 
	
.LABEL $label$101
	$6 = [0]
	
.LABEL $label$98
	CALL eosio_assert($6, [9776])
	return 
	
.LABEL $label$22
	$4 = (Rounds 0)($7)
	
.LABEL $label$21
	*($0) = $4
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$4 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$104:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$105 }
	$4 = $5
	$6 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$104 }
	goto $label$103 
	
.LABEL $label$105
	$4 = $5
	
.LOOP $label$107:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$106 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$2 = ($0 + [1])
	$0 = $2
	if ( $3 ){ goto $label$107 }
	$6 = [1]
	$0 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$104 }
	goto $label$103 
	
.LABEL $label$106
	$6 = [0]
	
.LABEL $label$103
	CALL eosio_assert($6, [9776])
	return 
	
.LABEL $label$20
	$4 = (Rounds 0)($7)
	
.LABEL $label$19
	*($0) = $4
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$4 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$109:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$110 }
	$4 = $5
	$6 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$109 }
	goto $label$108 
	
.LABEL $label$110
	$4 = $5
	
.LOOP $label$112:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$111 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$2 = ($0 + [1])
	$0 = $2
	if ( $3 ){ goto $label$112 }
	$6 = [1]
	$0 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$109 }
	goto $label$108 
	
.LABEL $label$111
	$6 = [0]
	
.LABEL $label$108
	CALL eosio_assert($6, [9776])
	return 
	
.LABEL $label$18
	$4 = (Rounds 0)($7)
	
.LABEL $label$17
	*($0) = $4
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$4 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$114:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$115 }
	$4 = $5
	$6 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$114 }
	goto $label$113 
	
.LABEL $label$115
	$4 = $5
	
.LOOP $label$117:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$116 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$2 = ($0 + [1])
	$0 = $2
	if ( $3 ){ goto $label$117 }
	$6 = [1]
	$0 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$114 }
	goto $label$113 
	
.LABEL $label$116
	$6 = [0]
	
.LABEL $label$113
	CALL eosio_assert($6, [9776])
	return 
	
.LABEL $label$16
	$4 = (Rounds 0)($7)
	
.LABEL $label$15
	*($0) = $4
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9727])
	$4 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$119:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$1 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$120 }
	$4 = $5
	$6 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$120
	$4 = $5
	
.LOOP $label$122:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$121 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$2 = ($0 + [1])
	$0 = $2
	if ( $3 ){ goto $label$122 }
	$6 = [1]
	$0 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$121
	$6 = [0]
	
.LABEL $label$118
	CALL eosio_assert($6, [9776])
	return 
	
.LABEL $label$14
	CALL eosio_assert([0], [9776])
	return 
	
.LABEL $label$13
	CALL eosio_assert([0], [9776])
	return 
	
.LABEL $label$12
	CALL eosio_assert([0], [9776])
	return 
	
.LABEL $label$11
	CALL eosio_assert([0], [9776])
	return 
	
.LABEL $label$10
	CALL eosio_assert([0], [9776])
	return 
	
.LABEL $label$9
	CALL eosio_assert([0], [9776])
	return 
	
.LABEL $label$8
	CALL eosio_assert([0], [9776])
	return 
	
.LABEL $label$7
	CALL eosio_assert([0], [9776])
	return 
	
.LABEL $label$6
	CALL eosio_assert([0], [9776])
	return 
	
.LABEL $label$5
	CALL eosio_assert([0], [9776])
	return 
	
.LABEL $label$4
	CALL eosio_assert([0], [9776])
	return 
	
.LABEL $label$3
	CALL eosio_assert([0], [9776])
	return 
	
.LABEL $label$2
	CALL eosio_assert([0], [9776])
	return 
	
.LABEL $label$1
	CALL eosio_assert([0], [9776])
	$3
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL $143([9876])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$4
	CALL memcpy($6, [9876], $5)
	
.LABEL $label$3
	*(($6 + $5)) = [0]
	*($4 + [24]) = [0]
	*($4 + [16]) = (int_64)0
	$6 = (($4 + [16]) | [1])
	
.LOOP $label$6:
	$8 = ((uint_64)$3 / (uint_64)(int_64)10)
	$5 = (CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$8 * (int_64)10))
	CALL $1(($4 + [32]), int_32((( ($5) | [48]) ? ($5 + [55]) : ($5 <= [10]) ) << [24]) >> [24]), ($4 + [16]))
	if ( (*($4 + [16]) & [1]) ){ goto $label$8 }
	*($4 + [16]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*((($4 + [16]) + [8]))) = [0]
	*($4 + [20]) = [0]
	
.LABEL $label$7
	CALL $119(($4 + [16]), [0])
	*((($4 + [16]) + [8])) = *((($4 + [32]) + [8]))
	*($4 + [16]) = *($4 + [32])
	$5 = ((uint_64)$3 > (uint_64)(int_64)9)
	$3 = $8
	if ( $5 ){ goto $label$6 }
	$5 = *($4 + [16])
	$7 = ($5 & [1])
	CALL $121($0, ( *((($4 + [16]) + [8])) ? $6 : $7 ), ( *($4 + [20]) ? uint_32($5 >> [1]) : $7 ))
	CALL $120($0, [9885])
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$12 }
	$6 = [0]
	$7 = *([0] + [9512])
	
.LOOP $label$14:
	*((($4 + [32]) + ($5 = $6))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$6 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$13 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$14 }
	
.LABEL $label$13
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$11 }
	*($4) = ($6 << [1])
	$7 = ($4 | [1])
	goto $label$10 
	
.LABEL $label$12
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	*($4) = [0]
	$5 = ($4 | [1])
	$6 = $5
	goto $label$9 
	
.LABEL $label$11
	$9 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($4) = ($9 | [1])
	*($4 + [8]) = $7
	*($4 + [4]) = $6
	
.LABEL $label$10
	$9 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$15:
	*(($7 + $5)) = *((($4 + [32]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$15 }
	$6 = ($7 + $6)
	$5 = ($4 | [1])
	
.LABEL $label$9
	*($6) = [0]
	$6 = *($4)
	$7 = ($6 & [1])
	CALL $121($0, ( *($4 + [8]) ? $5 : $7 ), ( *($4 + [4]) ? uint_32($6 >> [1]) : $7 ))
	CALL $120($0, [10095])
	if ( (*($4) & [1]) ){ goto $label$17 }
	if ( (*($4 + [16]) & [1]) ){ goto $label$16 }
	goto $label$1 
	
.LABEL $label$17
	CALL _ZdlPv(*(($4 + [8])))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($4 + [24])))
	$global$0 = ($4 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$5 = ($global$0 - [48])
	$global$0 = $5
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = CALL $143([9876])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($6 << [1])
	$7 = ($0 + [1])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $7
	*($0 + [4]) = $6
	
.LABEL $label$4
	CALL memcpy($7, [9876], $6)
	
.LABEL $label$3
	*(($7 + $6)) = [0]
	*($5 + [24]) = [0]
	*($5 + [16]) = (int_64)0
	$7 = (($5 + [16]) | [1])
	
.LOOP $label$6:
	$9 = ((uint_64)$3 / (uint_64)(int_64)10)
	$6 = (CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$9 * (int_64)10))
	CALL $1(($5 + [32]), int_32((( ($6) | [48]) ? ($6 + [55]) : ($6 <= [10]) ) << [24]) >> [24]), ($5 + [16]))
	if ( (*($5 + [16]) & [1]) ){ goto $label$8 }
	*($5 + [16]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*((($5 + [16]) + [8]))) = [0]
	*($5 + [20]) = [0]
	
.LABEL $label$7
	CALL $119(($5 + [16]), [0])
	*((($5 + [16]) + [8])) = *((($5 + [32]) + [8]))
	*($5 + [16]) = *($5 + [32])
	$6 = ((uint_64)$3 > (uint_64)(int_64)9)
	$3 = $9
	if ( $6 ){ goto $label$6 }
	$6 = *($5 + [16])
	$8 = ($6 & [1])
	CALL $121($0, ( *((($5 + [16]) + [8])) ? $7 : $8 ), ( *($5 + [20]) ? uint_32($6 >> [1]) : $8 ))
	CALL $120($0, [9885])
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$12 }
	$7 = [0]
	$8 = *([0] + [9512])
	
.LOOP $label$14:
	*((($5 + [32]) + ($6 = $7))) = *(($8 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$7 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$13 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$14 }
	
.LABEL $label$13
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$11 }
	*($5) = ($7 << [1])
	$8 = ($5 | [1])
	goto $label$10 
	
.LABEL $label$12
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	*($5) = [0]
	$6 = ($5 | [1])
	$7 = $6
	goto $label$9 
	
.LABEL $label$11
	$10 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($10)
	*($5) = ($10 | [1])
	*($5 + [8]) = $8
	*($5 + [4]) = $7
	
.LABEL $label$10
	$10 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$15:
	*(($8 + $6)) = *((($5 + [32]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$15 }
	$7 = ($8 + $7)
	$6 = ($5 | [1])
	
.LABEL $label$9
	*($7) = [0]
	$7 = *($5)
	$8 = ($7 & [1])
	CALL $121($0, ( *($5 + [8]) ? $6 : $8 ), ( *($5 + [4]) ? uint_32($7 >> [1]) : $8 ))
	CALL $120($0, [10281])
	$6 = *($4)
	$7 = ($6 & [1])
	CALL $121($0, ( *($4 + [8]) ? ($4 + [1]) : $7 ), ( *($4 + [4]) ? uint_32($6 >> [1]) : $7 ))
	CALL $120($0, [10283])
	if ( (*($5) & [1]) ){ goto $label$17 }
	if ( (*($5 + [16]) & [1]) ){ goto $label$16 }
	goto $label$1 
	
.LABEL $label$17
	CALL _ZdlPv(*(($5 + [8])))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($5 + [24])))
	$global$0 = ($5 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$global$0 = ($5 + [48])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL $143([9876])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$4
	CALL memcpy($6, [9876], $5)
	
.LABEL $label$3
	*(($6 + $5)) = [0]
	*($4 + [24]) = [0]
	*($4 + [16]) = (int_64)0
	$6 = (($4 + [16]) | [1])
	
.LOOP $label$6:
	$8 = ((uint_64)$3 / (uint_64)(int_64)10)
	$5 = (CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$8 * (int_64)10))
	CALL $1(($4 + [32]), int_32((( ($5) | [48]) ? ($5 + [55]) : ($5 <= [10]) ) << [24]) >> [24]), ($4 + [16]))
	if ( (*($4 + [16]) & [1]) ){ goto $label$8 }
	*($4 + [16]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*((($4 + [16]) + [8]))) = [0]
	*($4 + [20]) = [0]
	
.LABEL $label$7
	CALL $119(($4 + [16]), [0])
	*((($4 + [16]) + [8])) = *((($4 + [32]) + [8]))
	*($4 + [16]) = *($4 + [32])
	$5 = ((uint_64)$3 > (uint_64)(int_64)9)
	$3 = $8
	if ( $5 ){ goto $label$6 }
	$5 = *($4 + [16])
	$7 = ($5 & [1])
	CALL $121($0, ( *((($4 + [16]) + [8])) ? $6 : $7 ), ( *($4 + [20]) ? uint_32($5 >> [1]) : $7 ))
	CALL $120($0, [9885])
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$12 }
	$6 = [0]
	$7 = *([0] + [9512])
	
.LOOP $label$14:
	*((($4 + [32]) + ($5 = $6))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$6 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$13 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$14 }
	
.LABEL $label$13
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$11 }
	*($4) = ($6 << [1])
	$7 = ($4 | [1])
	goto $label$10 
	
.LABEL $label$12
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	*($4) = [0]
	$5 = ($4 | [1])
	$6 = $5
	goto $label$9 
	
.LABEL $label$11
	$9 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($4) = ($9 | [1])
	*($4 + [8]) = $7
	*($4 + [4]) = $6
	
.LABEL $label$10
	$9 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$15:
	*(($7 + $5)) = *((($4 + [32]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$15 }
	$6 = ($7 + $6)
	$5 = ($4 | [1])
	
.LABEL $label$9
	*($6) = [0]
	$6 = *($4)
	$7 = ($6 & [1])
	CALL $121($0, ( *($4 + [8]) ? $5 : $7 ), ( *($4 + [4]) ? uint_32($6 >> [1]) : $7 ))
	CALL $120($0, [10244])
	if ( (*($4) & [1]) ){ goto $label$17 }
	if ( (*($4 + [16]) & [1]) ){ goto $label$16 }
	goto $label$1 
	
.LABEL $label$17
	CALL _ZdlPv(*(($4 + [8])))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($4 + [24])))
	$global$0 = ($4 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10383])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $146($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10406])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [10406])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [10406])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $81(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $149($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $86($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9929])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9929])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $91(CALL $90($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL $143([9876])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$4
	CALL memcpy($6, [9876], $5)
	
.LABEL $label$3
	*(($6 + $5)) = [0]
	*($4 + [24]) = [0]
	*($4 + [16]) = (int_64)0
	$6 = (($4 + [16]) | [1])
	
.LOOP $label$6:
	$8 = ((uint_64)$3 / (uint_64)(int_64)10)
	$5 = (CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$8 * (int_64)10))
	CALL $1(($4 + [32]), int_32((( ($5) | [48]) ? ($5 + [55]) : ($5 <= [10]) ) << [24]) >> [24]), ($4 + [16]))
	if ( (*($4 + [16]) & [1]) ){ goto $label$8 }
	*($4 + [16]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*((($4 + [16]) + [8]))) = [0]
	*($4 + [20]) = [0]
	
.LABEL $label$7
	CALL $119(($4 + [16]), [0])
	*((($4 + [16]) + [8])) = *((($4 + [32]) + [8]))
	*($4 + [16]) = *($4 + [32])
	$5 = ((uint_64)$3 > (uint_64)(int_64)9)
	$3 = $8
	if ( $5 ){ goto $label$6 }
	$5 = *($4 + [16])
	$7 = ($5 & [1])
	CALL $121($0, ( *((($4 + [16]) + [8])) ? $6 : $7 ), ( *($4 + [20]) ? uint_32($5 >> [1]) : $7 ))
	CALL $120($0, [9885])
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$12 }
	$6 = [0]
	$7 = *([0] + [9512])
	
.LOOP $label$14:
	*((($4 + [32]) + ($5 = $6))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$6 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$13 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$14 }
	
.LABEL $label$13
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$11 }
	*($4) = ($6 << [1])
	$7 = ($4 | [1])
	goto $label$10 
	
.LABEL $label$12
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	*($4) = [0]
	$5 = ($4 | [1])
	$6 = $5
	goto $label$9 
	
.LABEL $label$11
	$9 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($4) = ($9 | [1])
	*($4 + [8]) = $7
	*($4 + [4]) = $6
	
.LABEL $label$10
	$9 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$15:
	*(($7 + $5)) = *((($4 + [32]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$15 }
	$6 = ($7 + $6)
	$5 = ($4 | [1])
	
.LABEL $label$9
	*($6) = [0]
	$6 = *($4)
	$7 = ($6 & [1])
	CALL $121($0, ( *($4 + [8]) ? $5 : $7 ), ( *($4 + [4]) ? uint_32($6 >> [1]) : $7 ))
	CALL $120($0, [10053])
	if ( (*($4) & [1]) ){ goto $label$17 }
	if ( (*($4 + [16]) & [1]) ){ goto $label$16 }
	goto $label$1 
	
.LABEL $label$17
	CALL _ZdlPv(*(($4 + [8])))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($4 + [24])))
	$global$0 = ($4 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL $143([9876])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$4
	CALL memcpy($6, [9876], $5)
	
.LABEL $label$3
	*(($6 + $5)) = [0]
	*($4 + [24]) = [0]
	*($4 + [16]) = (int_64)0
	$6 = (($4 + [16]) | [1])
	
.LOOP $label$6:
	$8 = ((uint_64)$3 / (uint_64)(int_64)10)
	$5 = (CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$8 * (int_64)10))
	CALL $1(($4 + [32]), int_32((( ($5) | [48]) ? ($5 + [55]) : ($5 <= [10]) ) << [24]) >> [24]), ($4 + [16]))
	if ( (*($4 + [16]) & [1]) ){ goto $label$8 }
	*($4 + [16]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*((($4 + [16]) + [8]))) = [0]
	*($4 + [20]) = [0]
	
.LABEL $label$7
	CALL $119(($4 + [16]), [0])
	*((($4 + [16]) + [8])) = *((($4 + [32]) + [8]))
	*($4 + [16]) = *($4 + [32])
	$5 = ((uint_64)$3 > (uint_64)(int_64)9)
	$3 = $8
	if ( $5 ){ goto $label$6 }
	$5 = *($4 + [16])
	$7 = ($5 & [1])
	CALL $121($0, ( *((($4 + [16]) + [8])) ? $6 : $7 ), ( *($4 + [20]) ? uint_32($5 >> [1]) : $7 ))
	CALL $120($0, [9885])
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$12 }
	$6 = [0]
	$7 = *([0] + [9512])
	
.LOOP $label$14:
	*((($4 + [32]) + ($5 = $6))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$6 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$13 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$14 }
	
.LABEL $label$13
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$11 }
	*($4) = ($6 << [1])
	$7 = ($4 | [1])
	goto $label$10 
	
.LABEL $label$12
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	*($4) = [0]
	$5 = ($4 | [1])
	$6 = $5
	goto $label$9 
	
.LABEL $label$11
	$9 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($4) = ($9 | [1])
	*($4 + [8]) = $7
	*($4 + [4]) = $6
	
.LABEL $label$10
	$9 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$15:
	*(($7 + $5)) = *((($4 + [32]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$15 }
	$6 = ($7 + $6)
	$5 = ($4 | [1])
	
.LABEL $label$9
	*($6) = [0]
	$6 = *($4)
	$7 = ($6 & [1])
	CALL $121($0, ( *($4 + [8]) ? $5 : $7 ), ( *($4 + [4]) ? uint_32($6 >> [1]) : $7 ))
	CALL $120($0, [10024])
	if ( (*($4) & [1]) ){ goto $label$17 }
	if ( (*($4 + [16]) & [1]) ){ goto $label$16 }
	goto $label$1 
	
.LABEL $label$17
	CALL _ZdlPv(*(($4 + [8])))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($4 + [24])))
	$global$0 = ($4 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10406])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10406])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10406])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [10406])
	CALL memcpy($2, *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [10406])
	CALL memcpy($3, *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [10406])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10406])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($4, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $104 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $131($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9929])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9929])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $88 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [10332])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $92($0, $4)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$0), [10332])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $89(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $131($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $85 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [10576])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [10622])
	$6 = ($1 + [32])
	*(($5 = $4) + [16]) = *($6)
	$7 = ($1 + [8])
	*($5 + [24]) = *($7)
	$8 = ($1 + [56])
	*($5 + [32]) = *($8)
	$9 = ($1 + [16])
	*($5 + [40]) = *($9)
	$10 = *($1)
	$11 = *($3)
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)*(($1 + [24]))), [9549])
	$12 = ((int_64)*($9) + (int_64)*($11))
	*($9) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [9592])
	CALL eosio_assert(((int_64)*($9) < (int_64)4611686018427387904), [9611])
	$12 = (int_64)0
	$13 = ((int_64)*($9) / (int_64)10000)
	if ( (uint_64)($13 <= (int_64)100) ){ goto $label$1 }
	$12 = (int_64)1
	if ( (uint_64)($13 <= (int_64)500) ){ goto $label$1 }
	$12 = (int_64)2
	if ( (uint_64)($13 <= (int_64)1000) ){ goto $label$1 }
	$12 = (int_64)3
	if ( (uint_64)($13 <= (int_64)5000) ){ goto $label$1 }
	$12 = (int_64)4
	if ( (uint_64)($13 <= (int_64)10000) ){ goto $label$1 }
	$12 = (int_64)5
	if ( (uint_64)($13 <= (int_64)50000) ){ goto $label$1 }
	$12 = (int_64)6
	if ( (uint_64)($13 <= (int_64)100000) ){ goto $label$1 }
	$12 = (int_64)7
	if ( (uint_64)($13 <= (int_64)500000) ){ goto $label$1 }
	$12 = (int_64)8
	if ( (uint_64)($13 <= (int_64)1000000) ){ goto $label$1 }
	$12 = (int_64)9
	if ( (uint_64)($13 <= (int_64)5000000) ){ goto $label$1 }
	$12 = (int_64)10
	if ( (uint_64)($13 <= (int_64)10000000) ){ goto $label$1 }
	$12 = ( (int_64)11 ? (int_64)12 : (uint_64)($13 <= (int_64)50000000) )
	
.LABEL $label$1
	*($7) = $12
	*($6) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$11 = *($3 + [8])
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)*(($1 + [48]))), [9549])
	$12 = ((int_64)*($1 + [40]) + (int_64)*($11))
	*($1 + [40]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [9592])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [9611])
	$11 = *($3 + [12])
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)*(($1 + [64]))), [9549])
	$12 = ((int_64)*($1 + [56]) + (int_64)*($11))
	*($1 + [56]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [9592])
	CALL eosio_assert(((int_64)*($1 + [56]) < (int_64)4611686018427387904), [9611])
	*(*($3 + [16])) = *($7)
	CALL eosio_assert(((int_64)$10 == (int_64)*($1)), [10673])
	$4 = $4
	$3 = ($4 + [-80])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($4 + [-8])
	*($5 + [48]) = $5
	*($5 + [60]) = $7
	*($5 + [56]) = $1
	*($5 + [64]) = $9
	*($5 + [68]) = $6
	*($5 + [72]) = ($1 + [40])
	*($5 + [76]) = $8
	CALL $72(($5 + [56]), ($5 + [48]))
	CALL db_update_i64(*($1 + [76]), $2, $3, [72])
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$9 = (($5 + [16]) + [8])
	*($5 + [56]) = *($6)
	if ( (CALL $142(($5 + [16]), ($5 + [56]), [8]) == 0) ){ goto $label$3 }
	$6 = ($1 + [80])
	$3 = *($6)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$4 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157500428759203840, ($5 + [48]), $10)
	*($6) = $3
	
.LABEL $label$4
	CALL db_idx64_update($3, $2, ($5 + [56]))
	
.LABEL $label$3
	$3 = (($5 + [16]) + [16])
	*($5 + [56]) = *($7)
	if ( (CALL $142($9, ($5 + [56]), [8]) == 0) ){ goto $label$5 }
	$7 = ($1 + [84])
	$9 = *($7)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$6 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157500428759203839, ($5 + [48]), $10)
	*($7) = $9
	
.LABEL $label$6
	CALL db_idx64_update($9, $2, ($5 + [56]))
	
.LABEL $label$5
	$9 = (($5 + [16]) + [24])
	*($5 + [56]) = *(($1 + [56]))
	if ( (CALL $142($3, ($5 + [56]), [8]) == 0) ){ goto $label$7 }
	$7 = ($1 + [88])
	$3 = *($7)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157500428759203838, ($5 + [48]), $10)
	*($7) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, $2, ($5 + [56]))
	
.LABEL $label$7
	*($5 + [56]) = *(($1 + [16]))
	if ( (CALL $142($9, ($5 + [56]), [8]) == 0) ){ goto $label$9 }
	$9 = ($1 + [92])
	$1 = *($9)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$10 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157500428759203837, ($5 + [48]), $10)
	*($9) = $1
	
.LABEL $label$10
	CALL db_idx64_update($1, $2, ($5 + [56]))
	
.LABEL $label$9
	$global$0 = ($5 + [80])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$5 = ($global$0 - [64])
	$global$0 = $5
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = CALL $143([9876])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($6 << [1])
	$7 = ($0 + [1])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $7
	*($0 + [4]) = $6
	
.LABEL $label$4
	CALL memcpy($7, [9876], $6)
	
.LABEL $label$3
	*(($7 + $6)) = [0]
	*($5 + [40]) = [0]
	*($5 + [32]) = (int_64)0
	$7 = (($5 + [32]) | [1])
	
.LOOP $label$6:
	$9 = ((uint_64)$3 / (uint_64)(int_64)10)
	$6 = (CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$9 * (int_64)10))
	CALL $1(($5 + [48]), int_32((( ($6) | [48]) ? ($6 + [55]) : ($6 <= [10]) ) << [24]) >> [24]), ($5 + [32]))
	if ( (*($5 + [32]) & [1]) ){ goto $label$8 }
	*($5 + [32]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*((($5 + [32]) + [8]))) = [0]
	*($5 + [36]) = [0]
	
.LABEL $label$7
	CALL $119(($5 + [32]), [0])
	*((($5 + [32]) + [8])) = *((($5 + [48]) + [8]))
	*($5 + [32]) = *($5 + [48])
	$6 = ((uint_64)$3 > (uint_64)(int_64)9)
	$3 = $9
	if ( $6 ){ goto $label$6 }
	$6 = *($5 + [32])
	$8 = ($6 & [1])
	CALL $121($0, ( *((($5 + [32]) + [8])) ? $7 : $8 ), ( *($5 + [36]) ? uint_32($6 >> [1]) : $8 ))
	CALL $120($0, [9885])
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$12 }
	$7 = [0]
	$8 = *([0] + [9512])
	
.LOOP $label$14:
	*((($5 + [48]) + ($6 = $7))) = *(($8 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$7 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$13 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$14 }
	
.LABEL $label$13
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$11 }
	*($5 + [16]) = ($7 << [1])
	$8 = (($5 + [16]) | [1])
	goto $label$10 
	
.LABEL $label$12
	*((($5 + [16]) + [8])) = [0]
	*($5 + [16]) = (int_64)0
	*($5 + [16]) = [0]
	$6 = (($5 + [16]) | [1])
	$7 = $6
	goto $label$9 
	
.LABEL $label$11
	$10 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($10)
	*($5 + [16]) = ($10 | [1])
	*($5 + [24]) = $8
	*($5 + [20]) = $7
	
.LABEL $label$10
	$10 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$15:
	*(($8 + $6)) = *((($5 + [48]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$15 }
	$7 = ($8 + $7)
	$6 = (($5 + [16]) | [1])
	
.LABEL $label$9
	*($7) = [0]
	$7 = *($5 + [16])
	$8 = ($7 & [1])
	CALL $121($0, ( *($5 + [24]) ? $6 : $8 ), ( *($5 + [20]) ? uint_32($7 >> [1]) : $8 ))
	CALL $120($0, [10442])
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	$7 = ($5 | [1])
	
.LOOP $label$16:
	$3 = ((uint_64)$4 / (uint_64)(int_64)10)
	$6 = (CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$3 * (int_64)10))
	CALL $1(($5 + [48]), int_32((( ($6) | [48]) ? ($6 + [55]) : ($6 <= [10]) ) << [24]) >> [24]), $5)
	if ( (*($5) & [1]) ){ goto $label$18 }
	*($5) = [0]
	goto $label$17 
	
.LABEL $label$18
	*(*(($5 + [8]))) = [0]
	*($5 + [4]) = [0]
	
.LABEL $label$17
	CALL $119($5, [0])
	*(($5 + [8])) = *((($5 + [48]) + [8]))
	*($5) = *($5 + [48])
	$6 = ((uint_64)$4 > (uint_64)(int_64)9)
	$4 = $3
	if ( $6 ){ goto $label$16 }
	$6 = *($5)
	$8 = ($6 & [1])
	$10 = ($5 + [8])
	CALL $121($0, ( *($10) ? $7 : $8 ), ( *($5 + [4]) ? uint_32($6 >> [1]) : $8 ))
	if ( ((*($5) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$19
	CALL $120($0, [10451])
	if ( (*($5 + [16]) & [1]) ){ goto $label$21 }
	if ( (*($5 + [32]) & [1]) ){ goto $label$20 }
	goto $label$1 
	
.LABEL $label$21
	CALL _ZdlPv(*(($5 + [24])))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($5 + [40])))
	$global$0 = ($5 + [64])
	return (unreachable)
	
.LABEL $label$2
	CALL $115($0)
	
.LABEL $label$1
	$global$0 = ($5 + [64])
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10406])
	CALL memcpy(($4 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($2 + [8]) = $4
	CALL $96(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10796])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [10841])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10891])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $131($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	*($1) = *(*(*($0 + [4])))
	$4 = *($0)
	*($1 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$5 = CALL $143([8273])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9629])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [8272]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	$9 = ($1 + [8])
	CALL eosio_assert([1], [9727])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $10
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $10
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [9776])
	*(($1 + [24])) = $8
	*($1 + [16]) = (int_64)0
	*($1 + [32]) = (int_64)0
	*($1 + [40]) = (int_64)0
	*($1 + [48]) = (int_64)0
	*($1 + [56]) = (int_64)0
	$7 = $2
	$5 = ($7 + [-64])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = $7
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $9
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = ($1 + [32])
	$11 = ($1 + [40])
	*($3 + [48]) = $11
	$2 = ($1 + [48])
	*($3 + [52]) = $2
	*($3 + [56]) = ($1 + [56])
	CALL $39(($3 + [32]), ($3 + [24]))
	$6 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($4 + [8]), (int_64)-5001503146665574400, *(*($0 + [8])), $6, $5, [64])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$12 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$5 = ($4 + [8])
	$6 = *($5)
	$7 = *(($0 + [8]))
	$10 = *($7)
	$8 = *($1)
	*($3 + [32]) = *(($1 + [8]))
	*($1 + [72]) = CALL db_idx64_store($6, (int_64)-5001503146665574400, $10, $8, ($3 + [32]))
	$6 = *($7)
	$10 = *($5)
	$8 = *($1)
	*($3 + [32]) = *($2)
	*(($1 + [76])) = CALL db_idx64_store($10, (int_64)-5001503146665574399, $6, $8, ($3 + [32]))
	$6 = *($7)
	$10 = *($5)
	$8 = *($1)
	*($3 + [32]) = *($11)
	*(($1 + [80])) = CALL db_idx64_store($10, (int_64)-5001503146665574398, $6, $8, ($3 + [32]))
	$global$0 = ($3 + [64])
}

void .FUNC $149 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19396])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19204]
	$3 = (((int_32)$1 * (int_32)[12]) + [19204])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $148 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11004]) == 0) ){ goto $label$2 }
	$2 = *([0] + [11008])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [11004]) = [1]
	$2 = ($2 << [16])
	*([0] + [11008]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11008])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [11008]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [11004]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [11004]) = [1]
	$3 = ($3 << [16])
	*([0] + [11008]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11008])
	
.LABEL $label$10
	*([0] + [11008]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $146($1)
	
.LABEL $label$2
	*(CALL $133()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $146(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $149($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $144 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $133())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $145($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $148($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [19413])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $146 (int_32 $0)
{
	return CALL $147([11012], $0)
}

int_32 .FUNC $141 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $140 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $137($3, (int_64)0)
	$4 = CALL $139($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $143 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $142 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $0, [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *($0 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $131($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [24])
	$1 = ( *(($4 + [28])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [24])
	$2 = (CASTING uint_64)(uint_32 $1)
	$6 = ($4 + [24])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $86($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [8]) = $7
	*($5 + [16]) = $1
	$1 = ($1 - $7)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [9929])
	CALL memcpy($7, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [9929])
	CALL memcpy(($7 + [8]), ($4 + [8]), [8])
	*($5 + [24]) = *(($4 + [16]))
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [9929])
	CALL memcpy(($7 + [16]), ($5 + [24]), [8])
	*($5 + [12]) = ($7 + [24])
	CALL $89(($5 + [8]), $6)
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $71 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [10576])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [10622])
	$6 = ($1 + [32])
	*(($5 = $4) + [16]) = *($6)
	$7 = ($1 + [8])
	*($5 + [24]) = *($7)
	$8 = ($1 + [56])
	*($5 + [32]) = *($8)
	$9 = ($1 + [16])
	*($5 + [40]) = *($9)
	$10 = *($1)
	$11 = *($3)
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)*(($1 + [24]))), [9549])
	$12 = ((int_64)*($9) + (int_64)*($11))
	*($9) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [9592])
	CALL eosio_assert(((int_64)*($9) < (int_64)4611686018427387904), [9611])
	$12 = (int_64)0
	$13 = ((int_64)*($9) / (int_64)10000)
	if ( (uint_64)($13 <= (int_64)100) ){ goto $label$1 }
	$12 = (int_64)1
	if ( (uint_64)($13 <= (int_64)500) ){ goto $label$1 }
	$12 = (int_64)2
	if ( (uint_64)($13 <= (int_64)1000) ){ goto $label$1 }
	$12 = (int_64)3
	if ( (uint_64)($13 <= (int_64)5000) ){ goto $label$1 }
	$12 = (int_64)4
	if ( (uint_64)($13 <= (int_64)10000) ){ goto $label$1 }
	$12 = (int_64)5
	if ( (uint_64)($13 <= (int_64)50000) ){ goto $label$1 }
	$12 = (int_64)6
	if ( (uint_64)($13 <= (int_64)100000) ){ goto $label$1 }
	$12 = (int_64)7
	if ( (uint_64)($13 <= (int_64)500000) ){ goto $label$1 }
	$12 = (int_64)8
	if ( (uint_64)($13 <= (int_64)1000000) ){ goto $label$1 }
	$12 = (int_64)9
	if ( (uint_64)($13 <= (int_64)5000000) ){ goto $label$1 }
	$12 = (int_64)10
	if ( (uint_64)($13 <= (int_64)10000000) ){ goto $label$1 }
	$12 = ( (int_64)11 ? (int_64)12 : (uint_64)($13 <= (int_64)50000000) )
	
.LABEL $label$1
	*($7) = $12
	*($6) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$11 = *($3 + [8])
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)*(($1 + [48]))), [9549])
	$12 = ((int_64)*($1 + [40]) + (int_64)*($11))
	*($1 + [40]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [9592])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [9611])
	$11 = *($3 + [12])
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)*(($1 + [64]))), [9549])
	$12 = ((int_64)*($1 + [56]) + (int_64)*($11))
	*($1 + [56]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [9592])
	CALL eosio_assert(((int_64)*($1 + [56]) < (int_64)4611686018427387904), [9611])
	*(*($3 + [16])) = *($7)
	CALL eosio_assert(((int_64)$10 == (int_64)*($1)), [10673])
	$4 = $4
	$3 = ($4 + [-80])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($4 + [-8])
	*($5 + [48]) = $5
	*($5 + [60]) = $7
	*($5 + [56]) = $1
	*($5 + [64]) = $9
	*($5 + [68]) = $6
	*($5 + [72]) = ($1 + [40])
	*($5 + [76]) = $8
	CALL $72(($5 + [56]), ($5 + [48]))
	CALL db_update_i64(*($1 + [76]), $2, $3, [72])
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$9 = (($5 + [16]) + [8])
	*($5 + [56]) = *($6)
	if ( (CALL $142(($5 + [16]), ($5 + [56]), [8]) == 0) ){ goto $label$3 }
	$6 = ($1 + [80])
	$3 = *($6)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$4 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157500428759203840, ($5 + [48]), $10)
	*($6) = $3
	
.LABEL $label$4
	CALL db_idx64_update($3, $2, ($5 + [56]))
	
.LABEL $label$3
	$3 = (($5 + [16]) + [16])
	*($5 + [56]) = *($7)
	if ( (CALL $142($9, ($5 + [56]), [8]) == 0) ){ goto $label$5 }
	$7 = ($1 + [84])
	$9 = *($7)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$6 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157500428759203839, ($5 + [48]), $10)
	*($7) = $9
	
.LABEL $label$6
	CALL db_idx64_update($9, $2, ($5 + [56]))
	
.LABEL $label$5
	$9 = (($5 + [16]) + [24])
	*($5 + [56]) = *(($1 + [56]))
	if ( (CALL $142($3, ($5 + [56]), [8]) == 0) ){ goto $label$7 }
	$7 = ($1 + [88])
	$3 = *($7)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157500428759203838, ($5 + [48]), $10)
	*($7) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, $2, ($5 + [56]))
	
.LABEL $label$7
	*($5 + [56]) = *(($1 + [16]))
	if ( (CALL $142($9, ($5 + [56]), [8]) == 0) ){ goto $label$9 }
	$9 = ($1 + [92])
	$1 = *($9)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$10 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157500428759203837, ($5 + [48]), $10)
	*($9) = $1
	
.LABEL $label$10
	CALL db_idx64_update($1, $2, ($5 + [56]))
	
.LABEL $label$9
	$global$0 = ($5 + [80])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10383])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $146($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([128])) + [64]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [48])
	*($3 + [44]) = ($5 + [56])
	*($3 + [48]) = ($5 + [64])
	*($3 + [52]) = ($5 + [80])
	*($3 + [56]) = ($5 + [88])
	*($3 + [60]) = ($5 + [96])
	CALL $105(($3 + [32]), ($3 + [24]))
	*($5 + [112]) = [-1]
	*($5 + [108]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $106(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $149($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [10796])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [10841])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10891])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*(($1 + [108])))
	$6 = *($1 + [112])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035936280380043264, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9929])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $131($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10383])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $146($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [56])
	CALL $98(($3 + [40]), ($3 + [32]))
	*($5 + [76]) = $1
	*($5 + [80 align=4]) = (int_64)-1
	*($5 + [88 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $73(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $149($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [10576])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [10622])
	$6 = ($1 + [8])
	*(($5 = $4) + [16]) = *($6)
	$7 = ($1 + [48])
	*($5 + [24]) = *($7)
	$8 = ($1 + [40])
	*($5 + [32]) = *($8)
	$9 = *($1)
	$10 = (int_64)0
	$11 = *(*(*(($3 + [4])) + [4]) + [40])
	if ( (uint_64)($11 <= (int_64)5) ){ goto $label$1 }
	$10 = (int_64)1
	if ( (uint_64)($11 <= (int_64)10) ){ goto $label$1 }
	$10 = (int_64)2
	if ( (uint_64)($11 <= (int_64)30) ){ goto $label$1 }
	$10 = (int_64)3
	if ( (uint_64)($11 <= (int_64)80) ){ goto $label$1 }
	$10 = ( (int_64)4 ? (int_64)5 : (uint_64)($11 <= (int_64)150) )
	
.LABEL $label$1
	*($1 + [56]) = (int_64)0
	*($7) = $10
	*($6) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$9 == (int_64)*($1)), [10673])
	$3 = $4
	$4 = ($3 + [-64])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = $3
	*($5 + [40]) = $5
	*($5 + [52]) = $6
	*($5 + [48]) = $1
	*($5 + [56]) = ($1 + [16])
	*($5 + [60]) = ($1 + [32])
	*($5 + [64]) = $8
	*($5 + [68]) = $7
	*($5 + [72]) = ($1 + [56])
	CALL $39(($5 + [48]), ($5 + [40]))
	CALL db_update_i64(*($1 + [68]), $2, $4, [64])
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$4 = (($5 + [16]) + [8])
	*($5 + [48]) = *($6)
	if ( (CALL $142(($5 + [16]), ($5 + [48]), [8]) == 0) ){ goto $label$3 }
	$3 = ($1 + [72])
	$6 = *($3)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5001503146665574400, ($5 + [40]), $9)
	*($3) = $6
	
.LABEL $label$4
	CALL db_idx64_update($6, $2, ($5 + [48]))
	
.LABEL $label$3
	$6 = (($5 + [16]) + [16])
	*($5 + [48]) = *($7)
	if ( (CALL $142($4, ($5 + [48]), [8]) == 0) ){ goto $label$5 }
	$4 = ($1 + [76])
	$7 = *($4)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$6 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5001503146665574399, ($5 + [40]), $9)
	*($4) = $7
	
.LABEL $label$6
	CALL db_idx64_update($7, $2, ($5 + [48]))
	
.LABEL $label$5
	*($5 + [48]) = *($8)
	if ( (CALL $142($6, ($5 + [48]), [8]) == 0) ){ goto $label$7 }
	$6 = ($1 + [80])
	$1 = *($6)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5001503146665574398, ($5 + [40]), $9)
	*($6) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($5 + [48]))
	
.LABEL $label$7
	$global$0 = ($5 + [80])
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	*($1) = *(*(*($0 + [4])))
	$4 = *($0)
	*($1 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$5 = CALL $143([8273])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9629])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [8272]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	$9 = ($1 + [8])
	CALL eosio_assert([1], [9727])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $10
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $10
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [9776])
	*(($1 + [24])) = $8
	*($1 + [16]) = (int_64)0
	*($1 + [32]) = (int_64)0
	*($1 + [40]) = (int_64)0
	*($1 + [48]) = (int_64)5
	*($1 + [56]) = (int_64)1
	$7 = $2
	$5 = ($7 + [-64])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = $7
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $9
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = ($1 + [32])
	$11 = ($1 + [40])
	*($3 + [48]) = $11
	$2 = ($1 + [48])
	*($3 + [52]) = $2
	*($3 + [56]) = ($1 + [56])
	CALL $39(($3 + [32]), ($3 + [24]))
	$6 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($4 + [8]), (int_64)-5001503146665574400, *(*($0 + [8])), $6, $5, [64])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$12 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$5 = ($4 + [8])
	$6 = *($5)
	$7 = *(($0 + [8]))
	$10 = *($7)
	$8 = *($1)
	*($3 + [32]) = *(($1 + [8]))
	*($1 + [72]) = CALL db_idx64_store($6, (int_64)-5001503146665574400, $10, $8, ($3 + [32]))
	$6 = *($7)
	$10 = *($5)
	$8 = *($1)
	*($3 + [32]) = *($2)
	*(($1 + [76])) = CALL db_idx64_store($10, (int_64)-5001503146665574399, $6, $8, ($3 + [32]))
	$6 = *($7)
	$10 = *($5)
	$8 = *($1)
	*($3 + [32]) = *($11)
	*(($1 + [80])) = CALL db_idx64_store($10, (int_64)-5001503146665574398, $6, $8, ($3 + [32]))
	$global$0 = ($3 + [64])
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = CALL $143([8273])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9629])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8272]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9674])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)$3), [8806])
	$4 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$3 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$3 = $5
	$4 = [1]
	$6 = $2
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$3 = $5
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$6 = ($2 + [1])
	$2 = $6
	if ( $4 ){ goto $label$11 }
	$4 = [1]
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [9424])
	CALL eosio_assert(((int_64)*($1) > (int_64)4999), [9441])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$6 = ($global$0 - [80])
	$global$0 = $6
	$7 = *($1)
	if ( ($7 & [1]) ){ goto $label$6 }
	$7 = uint_32($7 >> [1])
	$8 = ($1 + [1])
	$9 = ($8 + $7)
	if ( $7 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$7 = *($1 + [4])
	$8 = *($1 + [8])
	$9 = ($8 + $7)
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	
.LOOP $label$7:
	if ( CALL $132(*($8)) ){ goto $label$4 }
	$8 = ($8 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	$8 = $9
	$7 = [1]
	$10 = *($1)
	if ( (($10 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$7 = ($8 + [1])
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( (CALL $132(*($7)) == 0) ){ goto $label$10 }
	$7 = ($7 + [1])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($8) = *($7)
	$8 = ($8 + [1])
	$7 = ($7 + [1])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	$7 = [1]
	$10 = *($1)
	if ( ($10 & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = ($1 + $7)
	$7 = ($9 + uint_32($10 >> $7))
	goto $label$1 
	
.LABEL $label$2
	$9 = *($1 + [8])
	$7 = ($9 + *($1 + [4]))
	
.LABEL $label$1
	CALL $122($1, ($8 - $9), ($7 - $8))
	$9 = *($1)
	if ( ($9 & [1]) ){ goto $label$13 }
	$8 = ($1 + [1])
	$10 = [0]
	$7 = [0]
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$8 = *($1 + [8])
	$10 = [0]
	$7 = [0]
	$9 = *($1 + [4])
	if ( ($9 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$7 = [0]
	
.LOOP $label$14:
	$7 = ($7 + ((int_32)*($8) == (int_32)[45]))
	$8 = ($8 + [1])
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$14 }
	$7 = ((int_32)$7 == (int_32)[3])
	
.LABEL $label$11
	CALL eosio_assert($7, [9459])
	*($6 + [72]) = $10
	*($6 + [64]) = (int_64)0
	*($6 + [76]) = [45]
	*($6 + [16]) = $10
	*($6 + [63]) = [1]
	$8 = CALL $4($1, ($6 + [64]), ($6 + [76]), ($6 + [16]), ($6 + [63]))
	$7 = *($6 + [64])
	CALL eosio_assert(((int_32)( *($6 + [68]) ? uint_32($7 >> [1]) : ($7 & [1]) ) != (int_32)$10), [9472])
	*($2) = (CASTING int_64)(int_32 CALL $125(($6 + [64]), $10, [10]))
	*($6 + [76]) = ($8 + [1])
	*($6 + [16]) = [45]
	*($6 + [63]) = [1]
	$8 = CALL $4($1, ($6 + [64]), ($6 + [16]), ($6 + [76]), ($6 + [63]))
	$7 = *($6 + [64])
	CALL eosio_assert(((int_32)( *($6 + [68]) ? uint_32($7 >> [1]) : ($7 & [1]) ) != (int_32)$10), [9485])
	*($4) = (CASTING int_64)(int_32 CALL $125(($6 + [64]), $10, [10]))
	*($6 + [76]) = ($8 + [1])
	*($6 + [16]) = [45]
	*($6 + [63]) = [1]
	$8 = CALL $4($1, ($6 + [64]), ($6 + [16]), ($6 + [76]), ($6 + [63]))
	$7 = *($6 + [64])
	CALL eosio_assert(((int_32)( *($6 + [68]) ? uint_32($7 >> [1]) : ($7 & [1]) ) != (int_32)$10), [9496])
	$7 = *($6 + [64])
	CALL eosio_assert(((int_32)( *($6 + [68]) ? uint_32($7 >> [1]) : ($7 & [1]) ) == (int_32)[64]), [8223])
	CALL $2(($6 + [64]), ($6 + [16]), [32])
	*(($3 + [24])) = *((($6 + [16]) + [24]))
	*(($3 + [16])) = *((($6 + [16]) + [16]))
	*(($3 + [8])) = *($6 + [24])
	*($3) = *($6 + [16])
	$8 = ($8 + [1])
	*($6 + [76]) = $8
	CALL $117(($6 + [16]), $1, $8, [-1], $1)
	if ( (*($6 + [64]) & [1]) ){ goto $label$16 }
	*($6 + [64]) = [0]
	goto $label$15 
	
.LABEL $label$16
	*(*((($6 + [64]) + [8]))) = [0]
	*($6 + [68]) = [0]
	
.LABEL $label$15
	CALL $119(($6 + [64]), [0])
	$8 = *((($6 + [16]) + [8]))
	*(($7 = (($6 + [64]) + [8]))) = $8
	*($6 + [64]) = *($6 + [16])
	$8 = ( $8 ? (($6 + [64]) | [1]) : (*($6 + [64]) & [1]) )
	*($6 + [8]) = $8
	*($6 + [12]) = CALL $143($8)
	*($6) = *($6 + [8])
	*($5) = *(CALL $6(($6 + [16]), $6))
	if ( ((*($6 + [64]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($7))
	
.LABEL $label$17
	$global$0 = ($6 + [80])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $116(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $116(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $31 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [376]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [380])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [376]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [336]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [340])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [336]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [296]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [300])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [296]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [256]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [260])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [256]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [216]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [220])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [216]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$26 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$28 }
	
.LOOP $label$29:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$30 }
	CALL _ZdlPv($4)
	
.LABEL $label$30
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$29 }
	$3 = *(($0 + [176]))
	goto $label$27 
	
.LABEL $label$28
	$3 = $1
	
.LABEL $label$27
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$26
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$31 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$33 }
	
.LOOP $label$34:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$35 }
	CALL _ZdlPv($4)
	
.LABEL $label$35
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$34 }
	$3 = *(($0 + [136]))
	goto $label$32 
	
.LABEL $label$33
	$3 = $1
	
.LABEL $label$32
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$31
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$36 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$38 }
	
.LOOP $label$39:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$40 }
	CALL _ZdlPv($4)
	
.LABEL $label$40
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$39 }
	$3 = *(($0 + [96]))
	goto $label$37 
	
.LABEL $label$38
	$3 = $1
	
.LABEL $label$37
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$36
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$41 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$43 }
	
.LOOP $label$44:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$45 }
	CALL _ZdlPv($4)
	
.LABEL $label$45
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$44 }
	$3 = *(($0 + [56]))
	goto $label$42 
	
.LABEL $label$43
	$3 = $1
	
.LABEL $label$42
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$41
	return $0
}

void .FUNC $129 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $127 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $128($1, $0, [8304])
	CALL $130()
	(unreachable)
}