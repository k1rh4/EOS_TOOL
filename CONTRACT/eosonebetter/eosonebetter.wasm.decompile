(data (i32.const 4) "\c0e\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "voteproducer\00")
(data (i32.const 128) "read\00")
(data (i32.const 144) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 208) "user dit not stake\00")
(data (i32.const 240) "user did not vote for eosonebetter\00")
(data (i32.const 288) "cannot pass end iterator to modify\00")
(data (i32.const 336) "object passed to modify is not in multi_index\00")
(data (i32.const 384) "cannot modify objects in table of another contract\00")
(data (i32.const 448) "updater cannot change primary key when modifying an object\00")
(data (i32.const 512) "cannot pass end iterator to erase\00")
(data (i32.const 560) "cannot increment end iterator\00")
(data (i32.const 592) "active\00")
(data (i32.const 608) "transfer\00")
(data (i32.const 624) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 688) "invalid symbol name\00")
(data (i32.const 720) "Welcome to vote for eosonebetter again\00")
(data (i32.const 768) "checkvote\00")
(data (i32.const 784) "write\00")
(data (i32.const 800) "object passed to erase is not in multi_index\00")
(data (i32.const 848) "cannot erase objects in table of another contract\00")
(data (i32.const 912) "attempt to remove object that was not in multi_index\00")
(data (i32.const 976) "error reading iterator\00")
(data (i32.const 1008) "get\00")
(data (i32.const 1024) "need to specify proxy\00")
(data (i32.const 1056) "cannot vote for producers and proxy at same time\00")
(data (i32.const 1120) "cannot create objects in table of another contract\00")
(data (i32.const 9568) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "cancel_deferred" (func $fimport$2 (param i32) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$8 (param i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$14 (param i64)))
(import "env" "require_auth2" (func $fimport$15 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$16 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$17 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN12voteproxyeos12voteproducerEyyRKNSt3__16vectorIyNS0_9allocatorIyEEEE" (func $6))
(export "_ZN12voteproxyeos8withdrawEy" (func $8))
(export "_ZN12voteproxyeos9checkvoteEyb" (func $10))
(export "malloc" (func $37))
(export "free" (func $40))
(export "memcmp" (func $45))
(export "strlen" (func $46))
(table $0 4 4 anyfunc)
(elem (i32.const 0) $47 $6 $10 $8)



void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $16($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [784])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [784])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $26(CALL $27($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $41(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $44($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $41([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $16(($8 + [28]), [9])
	$2 = *($8 + [28])
	$1 = (*($2) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [784])
	CALL memcpy($2, $4, [8])
	*($9 + [15]) = *($4 + [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[0]), [784])
	CALL memcpy(($2 + [8]), ($9 + [15]), [1])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($7 = ($8 + [-16]))) = [0]
	$4 = ($2 + [-4])
	*($1) = *($4)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($7) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($4) = (int_64)0
	*(($7 = ($8 + [-4]))) = [0]
	$4 = ($2 + [8])
	*($1) = *($4)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($7) = *($1)
	*($1) = [0]
	*($4) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$8 }
	$1 = ([0] - $7)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $42($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $42($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$12 }
	CALL $42($7)
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [16])
	(unreachable)
}

int_32 .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9654]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9656])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9654]) = [1]
	$7 = ($7 << [16])
	*([0] + [9656]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9656])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9656]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9654]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9654]) = [1]
	$3 = ($3 << [16])
	*([0] + [9656]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9656])
	
.LABEL $label$8
	*([0] + [9656]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [784])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [784])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $21 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $42($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $42($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $42($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $42($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $42($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $42($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $42($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $42($5)
	
.LABEL $label$12
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $22($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $16($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $23($4, $1)
	CALL $25(CALL $24(CALL $24($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [784])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [784])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [784])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [784])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [784])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [784])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $26($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [784])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [784])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [784])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $26(CALL $27($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [784])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [784])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [784])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [784])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [784])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $43 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $42 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $41 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9660])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9556])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9364]
	$1 = (((int_32)$2 * (int_32)[12]) + [9364])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $47 ()
{
	(unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $44 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZN12voteproxyeos8withdrawEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL require_auth($1)
	$2 = *(($0 + [72]))
	$6 = *(($0 + [76]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [48])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [56]) == (int_32)$4), [144])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-3100925521232396288, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $13($4, $6)
	CALL eosio_assert(((int_32)*($5 + [56]) == (int_32)$4), [144])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [240])
	*($7 + [8]) = (int_64)0
	*($7) = $1
	CALL cancel_deferred($7)
	CALL _ZN12voteproxyeos9checkvoteEyb($0, $1, [1])
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [128])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN12voteproxyeos12voteproducerEyyRKNSt3__16vectorIyNS0_9allocatorIyEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [96])
	*([0] + [4]) = $10
	CALL require_auth($1)
	CALL eosio_assert(((int_64)$2 != (int_64)0), [1024])
	CALL eosio_assert(((int_32)*($3 + [4]) == (int_32)*($3)), [1056])
	$2 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$4 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$3 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($3)) == (int_64)$1) ){ goto $label$1 }
	$8 = $3
	$6 = ($3 + [-24])
	$3 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [8])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$9 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [88]) == (int_32)$3), [144])
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-2507753063930920960, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $12($3, $6)
	CALL eosio_assert(((int_32)*($9 + [88]) == (int_32)$3), [144])
	
.LABEL $label$3
	$4 = *(($0 + [72]))
	$8 = *(($0 + [76]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$5 }
	$3 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($3)) == (int_64)$1) ){ goto $label$5 }
	$8 = $3
	$6 = ($3 + [-24])
	$3 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [48])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$9 }
	$3 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [56]) == (int_32)$6), [144])
	if ( $3 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	$3 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-3100925521232396288, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*(CALL $13($6, $3) + [56]) == (int_32)$6), [144])
	goto $label$7 
	
.LABEL $label$8
	$7 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$3()), [1120])
	*(($3 = CALL $41([72])) + [48]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [56]) = $6
	*($3) = $1
	$2 = ((int_64)$2 & (int_64)4294967295)
	*($3 + [16]) = $2
	*($3 + [24]) = $2
	*($3 + [32]) = $2
	*($3 + [8]) = *($9 + [32])
	*($10 + [88]) = (($10 + [16]) + [56])
	*($10 + [84]) = ($10 + [16])
	*($10 + [80]) = ($10 + [16])
	CALL $14(($10 + [80]), $3)
	$2 = *($3)
	$8 = CALL db_store_i64(*(($0 + [56])), (int_64)-3100925521232396288, $7, $2, ($10 + [16]), [56])
	*($3 + [60]) = $8
	$6 = ($0 + [64])
	if ( (uint_64)($2 <= *($6)) ){ goto $label$10 }
	*($6) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($10 + [80]) = $3
	$2 = *($3)
	*($10 + [16]) = $2
	*($10 + [12]) = $8
	$5 = ($0 + [76])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [80]))) ){ goto $label$12 }
	*($6 + [8]) = $2
	*($6 + [16]) = $8
	*($10 + [80]) = [0]
	*($6) = $3
	*($5) = ($6 + [24])
	goto $label$11 
	
.LABEL $label$12
	CALL $30(($0 + [72]), ($10 + [80]), ($10 + [16]), ($10 + [12]))
	
.LABEL $label$11
	$3 = *($10 + [80])
	*($10 + [80]) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $42($3)
	
.LABEL $label$7
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = $1
	CALL cancel_deferred(($10 + [16]))
	CALL _ZN12voteproxyeos9checkvoteEyb($0, $1, [0])
	*([0] + [4]) = ($10 + [96])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($3 = $4) + [44]) = $0
	*($3 + [32]) = *($1)
	*($3 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [48]) = $1
	$4 = ($1 + $0)
	*($3 + [56]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [128])
	CALL memcpy($3, $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[7]), [128])
	CALL memcpy(($3 + [8]), $2, [8])
	*($3 + [52]) = ($1 + [16])
	$4 = ($3 + [16])
	CALL $34(($3 + [48]), $4)
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $36(($3 + [48]), $3)
	$1 = *($4)
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [20])) = $1
	CALL $42($1)
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [64])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [144])
	*([0] + [4]) = $12
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [16]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$7 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [32]
	$10 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$9 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$9
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$10 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$16 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [112]
	$10 = (int_64)0
	
.LOOP $label$17:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$18 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$18
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$17 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$16
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [16]
	$10 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$9 > (uint_64)(int_64)6) ){ goto $label$26 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$3 = ($3 + [165])
	goto $label$24 
	
.LABEL $label$26
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$22
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$21 }
	if ( ((int_64)$10 == (int_64)$2) ){ goto $label$15 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [32]
	$10 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$9 > (uint_64)(int_64)4) ){ goto $label$32 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$3 = ($3 + [165])
	goto $label$30 
	
.LABEL $label$32
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$28
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$27 }
	if ( ((int_64)$10 != (int_64)$1) ){ goto $label$14 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [112]
	$10 = (int_64)0
	
.LOOP $label$33:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$34 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$3 = ($3 + [165])
	goto $label$35 
	
.LABEL $label$36
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$34
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$33 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*($12 + [56]) = $0
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [32]
	$10 = (int_64)0
	
.LOOP $label$37:
	if ( ((uint_64)$9 > (uint_64)(int_64)4) ){ goto $label$42 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$3 = ($3 + [165])
	goto $label$40 
	
.LABEL $label$42
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$41
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$39
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$38
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$37 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [32]
	$1 = (int_64)0
	
.LOOP $label$43:
	if ( ((uint_64)$9 > (uint_64)(int_64)4) ){ goto $label$48 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$47 }
	$3 = ($3 + [165])
	goto $label$46 
	
.LABEL $label$48
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$47
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$46
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$45
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$44
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$1 = ((int_64)$11 | (int_64)$1)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$43 }
	*(($12 + [72])) = $1
	*(($12 + [80])) = (int_64)-1
	*(($12 + [88])) = (int_64)0
	*(($12 + [96])) = [0]
	*($12 + [64]) = $10
	*($12 + [104]) = $0
	*(($12 + [112])) = $0
	*(($12 + [120])) = (int_64)-1
	*(($12 + [128])) = [0]
	*(($12 + [132])) = [0]
	*(($12 + [136])) = [0]
	if ( ((int_64)$2 == (int_64)4851652707184803840) ){ goto $label$51 }
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$50 }
	if ( ((int_64)$2 != (int_64)-2507754169720236688) ){ goto $label$49 }
	*($12 + [52]) = [0]
	*($12 + [48]) = [1]
	*($12 + [8 align=4]) = *($12 + [48])
	CALL $7(($12 + [56]), ($12 + [8]))
	goto $label$49 
	
.LABEL $label$51
	*($12 + [36]) = [0]
	*($12 + [32]) = [2]
	*($12 + [24 align=4]) = *($12 + [32])
	CALL $11(($12 + [56]), ($12 + [24]))
	goto $label$49 
	
.LABEL $label$50
	*($12 + [44]) = [0]
	*($12 + [40]) = [3]
	*($12 + [16 align=4]) = *($12 + [40])
	CALL $9(($12 + [56]), ($12 + [16]))
	
.LABEL $label$49
	$5 = *(($12 + [128]))
	if ( ($5 == 0) ){ goto $label$52 }
	$4 = ($12 + [132])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$54 }
	
.LOOP $label$55:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$56 }
	CALL $42($3)
	
.LABEL $label$56
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$55 }
	$7 = *(($12 + [128]))
	goto $label$53 
	
.LABEL $label$54
	$7 = $5
	
.LABEL $label$53
	*($4) = $5
	CALL $42($7)
	
.LABEL $label$52
	$4 = *(($12 + [88]))
	if ( ($4 == 0) ){ goto $label$14 }
	$6 = ($12 + [92])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$58 }
	
.LOOP $label$59:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$60 }
	$5 = *($3 + [16])
	if ( ($5 == 0) ){ goto $label$61 }
	*(($3 + [20])) = $5
	CALL $42($5)
	
.LABEL $label$61
	CALL $42($3)
	
.LABEL $label$60
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$59 }
	$7 = *(($12 + [88]))
	goto $label$57 
	
.LABEL $label$58
	$7 = $4
	
.LABEL $label$57
	*($6) = $4
	CALL $42($7)
	
.LABEL $label$14
	*([0] + [4]) = ($12 + [144])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [800])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [848])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [912])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $42($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $42($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $41($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $44($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $42($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $28(*($1), ($0 + [32]))
}

void .FUNC _ZN12voteproxyeos9checkvoteEyb (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [160])
	*([0] + [4]) = $15
	CALL require_auth($1)
	$8 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$1 }
	$9 = ($7 + [-24])
	$3 = ([0] - $8)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$1 }
	$7 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$9 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [88]) == (int_32)$9), [144])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-2507753063930920960, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $12($9, $6)
	CALL eosio_assert(((int_32)*($8 + [88]) == (int_32)$9), [144])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [208])
	$4 = *(($0 + [72]))
	$7 = *(($0 + [76]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$5 }
	$9 = ($7 + [-24])
	$3 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$5 }
	$7 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $3) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [48])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$9 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [56]) == (int_32)$6), [144])
	goto $label$7 
	
.LABEL $label$8
	$9 = [0]
	$7 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-3100925521232396288, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	$9 = CALL $13($6, $7)
	CALL eosio_assert(((int_32)*($9 + [56]) == (int_32)$6), [144])
	
.LABEL $label$7
	$7 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($7, [240])
	$14 = *($9 + [32])
	$11 = *($9 + [16])
	$13 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$10 = (int_64)
	$3 = ((CASTING uint_32)(uint_64 ((uint_64)$10($13 - $11)) / (uint_64)(int_64)2592000)) - (CASTING uint_32)(uint_64 ((int_64))($14 - $11) / (int_64)2592000)))
	$5 = *($9 + [24])
	$4 = ((CASTING uint_32)(uint_64 ((uint_64)$10 / (uint_64)(int_64)86400)) - (CASTING uint_32)(uint_64 ((int_64))($5 - $11) / (int_64)86400)))
	if ( $2 ){ goto $label$11 }
	if ( ((int_64)*($8 + [8]) != (int_64)*($0)) ){ goto $label$11 }
	if ( ((int_32)$3 > (int_32)[0]) ){ goto $label$11 }
	if ( ((int_32)$4 > (int_32)[0]) ){ goto $label$11 }
	if ( ((int_64)*($8 + [32]) != (int_64)*($9 + [8])) ){ goto $label$11 }
	$7 = ($8 + [8])
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$13 }
	$11 = ((int_64)((int_64)*($9 + [8]) * (int_64)(CASTING int_64)(int_32 $4)) / (int_64)100)
	goto $label$12 
	
.LABEL $label$13
	$11 = (int_64)0
	
.LABEL $label$12
	if ( ((int_32)$3 <= (int_32)[0]) ){ goto $label$15 }
	$4 = ($9 + [8])
	$12 = *($9 + [8])
	$10 = ((int_64)((int_64)((int_64)(CASTING int_64)(int_32 $3) * (int_64)$12) * (int_64)5) / (int_64)12)
	goto $label$14 
	
.LABEL $label$15
	$4 = ($9 + [8])
	$12 = *($9 + [8])
	$10 = (int_64)0
	
.LABEL $label$14
	if ( ((int_64)*($8 + [32]) == (int_64)$12) ){ goto $label$16 }
	$14 = ((uint_64)(int_64))($13 - $14) / (uint_64)(int_64)86400
	$3 = (CASTING uint_32)(uint_64 $14))
	$5 = ((uint_64)(int_64))($13 - $5) / (uint_64)(int_64)3600
	if ( ((int_32)(CASTING uint_32)(uint_64 $5)) < (int_32)[1]) ){ goto $label$17 }
	$11 = ((int_64)((int_64)((int_64)$5 << (int_64)32) >> (int_64)32) * (int_64)$12) / (int_64)2400)
	
.LABEL $label$17
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$16 }
	$10 = ((int_64)((int_64)$12 * (int_64)((int_64)$14 << (int_64)32) >> (int_64)32)) / (int_64)72)
	
.LABEL $label$16
	if ( (int_64)($11 == 0) ){ goto $label$18 }
	CALL eosio_assert($7, [288])
	CALL eosio_assert(((int_32)*($9 + [56]) == (int_32)$6), [336])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$3()), [384])
	*($9 + [24]) = $13
	$12 = *($9)
	CALL eosio_assert([1], [448])
	*($15 + [104]) = (($15 + [16]) + [56])
	*($15 + [100]) = ($15 + [16])
	*($15 + [96]) = ($15 + [16])
	CALL $14(($15 + [96]), $9)
	CALL db_update_i64(*($9 + [60]), (int_64)0, ($15 + [16]), [56])
	$3 = ($0 + [64])
	if ( (uint_64)($12 <= *($3)) ){ goto $label$18 }
	*($3) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$18
	if ( (int_64)($10 == 0) ){ goto $label$19 }
	CALL eosio_assert($7, [288])
	CALL eosio_assert(((int_32)*($9 + [56]) == (int_32)$6), [336])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$3()), [384])
	*($9 + [32]) = $13
	$13 = *($9)
	CALL eosio_assert([1], [448])
	*($15 + [104]) = (($15 + [16]) + [56])
	*($15 + [100]) = ($15 + [16])
	*($15 + [96]) = ($15 + [16])
	CALL $14(($15 + [96]), $9)
	CALL db_update_i64(*($9 + [60]), (int_64)0, ($15 + [16]), [56])
	$3 = ($0 + [64])
	if ( (uint_64)($13 <= *($3)) ){ goto $label$19 }
	*($3) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$19
	if ( ((int_64)*($8 + [8]) != (int_64)*($0)) ){ goto $label$21 }
	$3 = ($8 + [32])
	if ( ((int_64)*($3) == (int_64)*($4)) ){ goto $label$20 }
	CALL eosio_assert($7, [288])
	CALL eosio_assert(((int_32)*($9 + [56]) == (int_32)$6), [336])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$3()), [384])
	*($9 + [8]) = *($3)
	$13 = *($9)
	CALL eosio_assert([1], [448])
	*($15 + [104]) = (($15 + [16]) + [56])
	*($15 + [100]) = ($15 + [16])
	*($15 + [96]) = ($15 + [16])
	CALL $14(($15 + [96]), $9)
	CALL db_update_i64(*($9 + [60]), (int_64)0, ($15 + [16]), [56])
	$9 = ($0 + [64])
	if ( (uint_64)($13 <= *($9)) ){ goto $label$20 }
	*($9) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	goto $label$20 
	
.LABEL $label$21
	CALL eosio_assert($7, [512])
	CALL eosio_assert($7, [560])
	$7 = CALL db_next_i64(*($9 + [60]), ($15 + [16]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$22 }
	CALL $13($6, $7)
	
.LABEL $label$22
	CALL $15($6, $9)
	
.LABEL $label$20
	$7 = ($8 + [8])
	$5 = ((int_64)$11 + (int_64)$10)
	if ( (int_64)($5 == 0) ){ goto $label$10 }
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [592]
	$12 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$28 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$6 = ($6 + [165])
	goto $label$26 
	
.LABEL $label$28
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$24
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$23 }
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [608]
	$14 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$11 > (uint_64)(int_64)7) ){ goto $label$34 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$6 = ($6 + [165])
	goto $label$32 
	
.LABEL $label$34
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$30
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$29 }
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [624])
	$11 = (int_64)76202640625477
	$9 = [0]
	
.LOOP $label$37:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$36 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$38 }
	
.LOOP $label$39:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$36 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$39 }
	
.LABEL $label$38
	$6 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$36
	$6 = [0]
	
.LABEL $label$35
	CALL eosio_assert($6, [688])
	*(($15 + [88])) = [0]
	*($15 + [80]) = (int_64)0
	$9 = CALL strlen([720])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$42 }
	*($15 + [80]) = ($9 << [1])
	$6 = (($15 + [80]) | [1])
	if ( $9 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$3 = (($9 + [16]) & [-16])
	$6 = CALL $41($3)
	*($15 + [80]) = ($3 | [1])
	*($15 + [88]) = $6
	*($15 + [84]) = $9
	
.LABEL $label$41
	CALL memcpy($6, [720], $9)
	
.LABEL $label$40
	*(($6 + $9)) = [0]
	*((($15 + [16]) + [24])) = (int_64)19507876000122116
	*(($6 = (($15 + [16]) + [36]))) = *($15 + [84])
	*($15 + [24]) = $1
	$9 = ($15 + [88])
	*(($15 + [56])) = *($9)
	*($15 + [16]) = (int_64)6138768756925420912
	*($15 + [32]) = $5
	*($15 + [48]) = *($15 + [80])
	*($15 + [80]) = [0]
	*($15 + [84]) = [0]
	*($9) = [0]
	*($15 + [96]) = (int_64)6138768766008611808
	*($15 + [104]) = $14
	*($15 + [112]) = [0]
	*(($3 = ($15 + [116]))) = [0]
	*(($8 = (($15 + [96]) + [24]))) = [0]
	*(($9 = CALL $41([16]))) = (int_64)6138768756925420912
	*($9 + [8]) = $12
	*((($15 + [96]) + [32])) = [0]
	$4 = ($9 + [16])
	*($8) = $4
	*($3) = $4
	*($15 + [112]) = $9
	*($15 + [124]) = [0]
	*((($15 + [96]) + [36])) = [0]
	$9 = *($15 + [48])
	$6 = ( *($6) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($6 + [32])
	$11 = (CASTING uint_64)(uint_32 $6)
	$6 = ($15 + [124])
	
.LOOP $label$43:
	$9 = ($9 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$43 }
	if ( ($9 == 0) ){ goto $label$45 }
	CALL $16($6, $9)
	$6 = *(($15 + [128]))
	$9 = *(($15 + [124]))
	goto $label$44 
	
.LABEL $label$45
	$6 = [0]
	$9 = [0]
	
.LABEL $label$44
	*($15 + [4]) = $9
	*($15) = $9
	*($15 + [8]) = $6
	*($15 + [144]) = $15
	*($15 + [152]) = ($15 + [16])
	CALL $17(($15 + [152]), ($15 + [144]))
	CALL $18($15, ($15 + [96]))
	$9 = *($15)
	CALL send_inline($9, (*($15 + [4]) - $9))
	$9 = *($15)
	if ( ($9 == 0) ){ goto $label$46 }
	*($15 + [4]) = $9
	CALL $42($9)
	
.LABEL $label$46
	$9 = *($15 + [124])
	if ( ($9 == 0) ){ goto $label$47 }
	*(($15 + [128])) = $9
	CALL $42($9)
	
.LABEL $label$47
	$9 = *($15 + [112])
	if ( ($9 == 0) ){ goto $label$48 }
	*(($15 + [116])) = $9
	CALL $42($9)
	
.LABEL $label$48
	if ( ((*(($15 + [48])) & [1]) == 0) ){ goto $label$49 }
	CALL $42(*(($15 + [56])))
	
.LABEL $label$49
	if ( ((*($15 + [80]) & [1]) == 0) ){ goto $label$10 }
	CALL $42(*(($15 + [88])))
	
.LABEL $label$10
	if ( ((int_64)*($7) != (int_64)*($0)) ){ goto $label$50 }
	$11 = CALL current_time()
	*(($15 + [44])) = [0]
	*(($15 + [48])) = [0]
	*($15 + [28]) = [0]
	*($15 + [32]) = [0]
	*($15 + [36]) = [0]
	*($15 + [40]) = [0]
	*($15 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$11 / (uint_64)(int_64)1000000)) + [60])
	*($15 + [52]) = [0]
	*(($15 + [56])) = [0]
	*(($15 + [60])) = [0]
	*($15 + [64]) = [0]
	*(($15 + [68])) = [0]
	*(($15 + [72])) = [0]
	$7 = ($15 + [52])
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [592]
	$12 = (int_64)0
	
.LOOP $label$51:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$56 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$55 }
	$6 = ($6 + [165])
	goto $label$54 
	
.LABEL $label$56
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$55
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$54
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$53
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$52
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$51 }
	*($15 + [104]) = $12
	*($15 + [96]) = $1
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [768]
	$12 = (int_64)0
	
.LOOP $label$57:
	if ( ((uint_64)$11 > (uint_64)(int_64)8) ){ goto $label$62 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$61 }
	$6 = ($6 + [165])
	goto $label$60 
	
.LABEL $label$62
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$61
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$60
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$59
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$58
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$57 }
	*($15 + [80]) = $12
	*($15 + [8]) = [0]
	*($15) = $1
	CALL $19($7, ($15 + [96]), $0, ($15 + [80]), $15)
	*(($15 + [36])) = [3600]
	*($15 + [104]) = (int_64)0
	*($15 + [96]) = $1
	CALL cancel_deferred(($15 + [96]))
	*($15 + [104]) = (int_64)0
	*($15 + [96]) = $1
	$11 = *($0)
	CALL $20($15, ($15 + [16]))
	$9 = *($15)
	CALL send_deferred(($15 + [96]), $11, $9, (*($15 + [4]) - $9), [1])
	$9 = *($15)
	if ( ($9 == 0) ){ goto $label$63 }
	*($15 + [4]) = $9
	CALL $42($9)
	
.LABEL $label$63
	CALL $21(($15 + [16]))
	
.LABEL $label$50
	*([0] + [4]) = ($15 + [160])
	return (unreachable)
	
.LABEL $label$9
	CALL $43(($15 + [80]))
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [32])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$4 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($5 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($7 + [8]) = (int_64)0
	*($7 + [16]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [128])
	CALL memcpy(($7 + [8]), $4, [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [128])
	CALL memcpy(($7 + [31]), ($4 + [8]), [1])
	$5 = ((int_32)*($7 + [31]) != (int_32)[0])
	*($7 + [16]) = $5
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($4)
	$5 = *((($7 + [8]) + [8]))
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *($7 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($1) + $6))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 ((int_32)($5 & [255]) != (int_32)[0])), (int_32 $6))
	*([0] + [4]) = ($7 + [32])
	return [1]
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [976])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $41([104])
	$6 = CALL $31($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [92])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $32(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [16])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [20])) = $7
	CALL $42($7)
	
.LABEL $label$10
	CALL $42($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [976])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $41([72])) + [8]) = (int_64)0
	*($6) = (int_64)0
	*($6 + [16]) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = (int_64)0
	*($6 + [40]) = (int_64)0
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = $0
	CALL $29(($8 + [32]), $6)
	*($6 + [60]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [60])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $30(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $42($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*($6) = (int_64)0
	*($6 + [8]) = [0]
	$3 = *($1 + [8])
	$2 = *($1)
	$5 = (*(($1 + [20])) - *($1 + [16]))
	$4 = int_32($5 >> [3])
	if ( ($4 == 0) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = CALL $41($5)
	*(($6 + [8])) = ($5 + ($4 << [3]))
	*($6) = $5
	*($6 + [4]) = $5
	$4 = *(($1 + [16]))
	$1 = (*(($1 + [20])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $4, $1)
	*($6 + [4]) = ($5 + $1)
	
.LABEL $label$2
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*(*($0)) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($0) + $1))
	
.LABEL $label$3
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $6), (int_32 $1))
	$1 = *($6)
	if ( ($1 == 0) ){ goto $label$4 }
	*($6 + [4]) = $1
	CALL $42($1)
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $44($6)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $38([1172], $0)
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1008])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [3])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $35($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [3]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $7) > (uint_32)[7]), [128])
	CALL memcpy($4, *($5), [8])
	$7 = (*($5) + [8])
	*($5) = $7
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [3])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($7 >> [2])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $41(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $44($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [3]))
	$2 = ($7 + ($4 << [3]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [3]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $42($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $41(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $44($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [16])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [20])) = $6
	CALL $42($6)
	
.LABEL $label$11
	CALL $42($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $42($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $34($0, ($1 + [16]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [128])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [56]) = ((int_32)*($3 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [128])
	CALL memcpy(($1 + [60]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [128])
	CALL memcpy(($1 + [64]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $41(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $44($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $42($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $42($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $31 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16 align=4]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [40]) = (int_64)0
	$4 = [0]
	*(($0 + [24])) = [0]
	*($0 + [48]) = (int_64)0
	*($0 + [56]) = [0]
	*($0 + [60]) = [0]
	*($0 + [64]) = [0]
	*($0 + [72]) = (int_64)0
	*(($5 = ($0 + [80]))) = (int_64)1397703940
	CALL eosio_assert([1], [624])
	$3 = (uint_64)*($5) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [688])
	*($0 + [88]) = $1
	CALL $33(*($2 + [4]), $0)
	*($0 + [92]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $39($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9568])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}