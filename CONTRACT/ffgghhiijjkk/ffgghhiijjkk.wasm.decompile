(data (i32.const 8192) "transfer\00")
(data (i32.const 8201) "betreceipt\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8298) "luckbetadmin\00")
(data (i32.const 8311) "string is too long to be a valid name\00")
(data (i32.const 8349) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8416) "character is not in allowed character set for names\00")
(data (i32.const 8468) "active\00")
(data (i32.const 8475) "write\00")
(data (i32.const 8481) " \00")
(data (i32.const 8483) "log\00")
(data (i32.const 8487) "error\00")
(data (i32.const 8493) "0123456789\00")
(data (i32.const 8504) "joygame53521\00")
(data (i32.const 8517) "!!! no result !!!\00")
(data (i32.const 8535) "roll back action \00")
(data (i32.const 8553) "roll back fail.\00")
(data (i32.const 8569) "~~~~~ Be happy ~~~~~~~~\00")
(data (i32.const 8593) "!!!! No result !!!!\00")
(data (i32.const 8613) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 8667) "cannot decrement iterator at beginning of table\00")
(data (i32.const 8715) "error reading iterator\00")
(data (i32.const 8738) "read\00")
(data (i32.const 8743) "unexpected error in fixed_bytes constructor\00")
(data (i32.const 8787) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8840) "\8c\"\00\00")
(data (i32.const 8844) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 8877) "5KJmkA3LA1d7nKwxjGAHpRUgiArJiF3Vy4g7jBcb68AxAk8A7WJ\00")
(data (i32.const 8936) "\00\00\00\00\00\00\10@\00\00\00\00\00\a08@\00\00\00\00\00\80R@\b2\9d\ef\a7\c6K\f5?\00\00\00\00\00\c0W@{\14\aeG\e1z\f0?\00\00\00\00\00\80H@\14\aeG\e1z\14\00@\00\00\00\00\00\008@\d1\"\db\f9~j\10@")
(data (i32.const 9016) "get\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$4 (param i64)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "cancel_deferred" (func $fimport$6 (param i32) (result i32)))
(import "env" "prints" (func $fimport$7 (param i32)))
(import "env" "eosio_exit" (func $fimport$8 (param i32)))
(import "env" "current_time" (func $fimport$9 (result i64)))
(import "env" "send_deferred" (func $fimport$10 (param i32 i64 i32 i32 i32)))
(import "env" "db_previous_i64" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$12 (param i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "__ashlti3" (func $fimport$14 (param i32 i64 i64 i32)))
(import "env" "abort" (func $fimport$15))
(import "env" "memset" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$18 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$25 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$26 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$27 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$28 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$29 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$30 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$33 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$35 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$36 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$37 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $16))
(export "_ZdlPv" (func $33))
(export "_Znwj" (func $31))
(export "_Znaj" (func $32))
(export "_ZdaPv" (func $34))
(export "_ZnwjSt11align_val_t" (func $35))
(export "_ZnajSt11align_val_t" (func $36))
(export "_ZdlPvSt11align_val_t" (func $37))
(export "_ZdaPvSt11align_val_t" (func $38))
(table $0 4 4 anyfunc)
(elem (i32.const 1) $5 $7 $4)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17436))
(global $global$2 i32 (i32.const 17436))


int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8475])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8475])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8475])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8475])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $39 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $47($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [128])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8738])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8738])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8738])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8738])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	$6 = (int_64)0
	*($2 + [96]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8738])
	CALL memcpy(($2 + [96]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [96])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8738])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8738])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$7 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [8738])
	CALL memcpy(($2 + [96]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = [16]
	$3 = [0]
	$8 = ($2 + [64])
	$9 = (int_64)0
	
.LOOP $label$2:
	$5 = (($2 + [96]) + $3)
	if ( ($4 <= [2]) ){ goto $label$3 }
	$6 = ((int_64)$6 | (int_64)*($5))
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56))
	$4 = ($4 + [-1])
	$6 = ((int_64)$6 << (int_64)8)
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$4 == (int_32)[1]), [8743])
	*($8 + [8]) = $9
	*($8) = ((int_64)$6 | (int_64)*($5))
	$4 = [16]
	$8 = ($8 + [16])
	$6 = (int_64)0
	$9 = (int_64)0
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = [16]
	if ( ((int_32)$4 == (int_32)[16]) ){ goto $label$4 }
	if ( ($4 <= [2]) ){ goto $label$5 }
	CALL __ashlti3(($2 + [48]), $6, $9, (($4 << [3]) + [-8]))
	$9 = *(($2 + [56]))
	$6 = *($2 + [48])
	
.LABEL $label$5
	*($8) = $6
	*($8 + [8]) = $9
	
.LABEL $label$4
	*($7) = *($2 + [64])
	*(($7 + [8])) = *($2 + [72])
	*(($7 + [24])) = *((($2 + [64]) + [24]))
	*(($7 + [16])) = *((($2 + [64]) + [16]))
	$7 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [8738])
	CALL memcpy(($2 + [96]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$6 = (int_64)0
	$4 = [0]
	$8 = ($2 + [64])
	$9 = (int_64)0
	
.LOOP $label$7:
	$5 = (($2 + [96]) + $4)
	if ( ($3 <= [2]) ){ goto $label$8 }
	$6 = ((int_64)$6 | (int_64)*($5))
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56))
	$3 = ($3 + [-1])
	$6 = ((int_64)$6 << (int_64)8)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$3 == (int_32)[1]), [8743])
	*($8 + [8]) = $9
	*($8) = ((int_64)$6 | (int_64)*($5))
	$3 = [16]
	$8 = ($8 + [16])
	$6 = (int_64)0
	$9 = (int_64)0
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$7 }
	
.LABEL $label$6
	$4 = [16]
	if ( ((int_32)$3 == (int_32)[16]) ){ goto $label$9 }
	if ( ($3 <= [2]) ){ goto $label$10 }
	CALL __ashlti3(($2 + [32]), $6, $9, (($3 << [3]) + [-8]))
	$9 = *(($2 + [40]))
	$6 = *($2 + [32])
	
.LABEL $label$10
	*($8) = $6
	*($8 + [8]) = $9
	
.LABEL $label$9
	*($7) = *($2 + [64])
	*(($7 + [8])) = *($2 + [72])
	*(($7 + [24])) = *((($2 + [64]) + [24]))
	*(($7 + [16])) = *((($2 + [64]) + [16]))
	$7 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[19]), [8738])
	CALL memcpy(($2 + [64]), *($3 + [4]), [20])
	*($3 + [4]) = (*($3 + [4]) + [20])
	$6 = (int_64)0
	$3 = [0]
	$8 = ($2 + [96])
	$9 = (int_64)0
	
.LOOP $label$12:
	$5 = (($2 + [64]) + $3)
	if ( ($4 <= [2]) ){ goto $label$13 }
	$6 = ((int_64)$6 | (int_64)*($5))
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56))
	$4 = ($4 + [-1])
	$6 = ((int_64)$6 << (int_64)8)
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[20]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert(((int_32)$4 == (int_32)[1]), [8743])
	*($8 + [8]) = $9
	*($8) = ((int_64)$6 | (int_64)*($5))
	$4 = [16]
	$8 = ($8 + [16])
	$6 = (int_64)0
	$9 = (int_64)0
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[20]) ){ goto $label$12 }
	
.LABEL $label$11
	$3 = [16]
	if ( ((int_32)$4 == (int_32)[16]) ){ goto $label$14 }
	if ( ($4 <= [2]) ){ goto $label$15 }
	CALL __ashlti3(($2 + [16]), $6, $9, (($4 << [3]) + [-8]))
	$9 = *(($2 + [24]))
	$6 = *($2 + [16])
	
.LABEL $label$15
	*($8) = $6
	*($8 + [8]) = $9
	
.LABEL $label$14
	*($7) = *($2 + [96])
	*(($7 + [8])) = *($2 + [104])
	*(($7 + [24])) = *((($2 + [96]) + [24]))
	*(($7 + [16])) = *((($2 + [96]) + [16]))
	$7 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [8738])
	CALL memcpy(($2 + [96]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$6 = (int_64)0
	$4 = [0]
	$8 = ($2 + [64])
	$9 = (int_64)0
	
.LOOP $label$17:
	$5 = (($2 + [96]) + $4)
	if ( ($3 <= [2]) ){ goto $label$18 }
	$6 = ((int_64)$6 | (int_64)*($5))
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56))
	$3 = ($3 + [-1])
	$6 = ((int_64)$6 << (int_64)8)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL eosio_assert(((int_32)$3 == (int_32)[1]), [8743])
	*($8 + [8]) = $9
	*($8) = ((int_64)$6 | (int_64)*($5))
	$3 = [16]
	$8 = ($8 + [16])
	$6 = (int_64)0
	$9 = (int_64)0
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$17 }
	
.LABEL $label$16
	if ( ((int_32)$3 == (int_32)[16]) ){ goto $label$19 }
	if ( ($3 <= [2]) ){ goto $label$20 }
	CALL __ashlti3($2, $6, $9, (($3 << [3]) + [-8]))
	$9 = *(($2 + [8]))
	$6 = *($2)
	
.LABEL $label$20
	*($8) = $6
	*($8 + [8]) = $9
	
.LABEL $label$19
	*($7) = *($2 + [64])
	*(($7 + [8])) = *($2 + [72])
	*(($7 + [24])) = *((($2 + [64]) + [24]))
	*(($7 + [16])) = *((($2 + [64]) + [16]))
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8738])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [96]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8738])
	CALL memcpy(($2 + [96]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [96])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8738])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8738])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [128])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [16])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $47($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4)
	$2 = ( *($4 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$10 = (CASTING uint_64)(uint_32 $2)
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$1 = ($7 + [32])
	$9 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $17($9, $2)
	$1 = *($1)
	$2 = *($9)
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $1
	CALL $18($5, $4)
	$12 = ($7 + [40])
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($5 + [16])
	(unreachable)
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8475])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8475])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8475])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $23 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $24($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $17($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $25($2, $1)
	CALL $27(CALL $26(CALL $26($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8475])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8475])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8475])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [8475])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8475])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8475])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8475])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [8475])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $19($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8475])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8475])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8475])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $19(CALL $20($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $49 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $48 ()
{
	return [9024]
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $47 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $41($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $43($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $49($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $41($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $52($1)
	
.LABEL $label$2
	*(CALL $48()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $52(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $55($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $52($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [232]) = [0]
	*($4 + [224]) = (int_64)0
	*($4 + [212]) = $2
	*($4 + [208]) = $2
	*($4 + [216]) = ($2 + $7)
	CALL $15(($4 + [208]), ($4 + [224]))
	$3 = *($4 + [216])
	*((($4 + [16]) + [8])) = $3
	*(($4 + [8])) = $3
	$8 = *($4 + [208])
	*($4) = $8
	*($4 + [16]) = $8
	$3 = CALL $12(($4 + [32]), $0, $1, $4)
	$9 = (($4 + [32]) + int_32($5 >> [1]))
	$10 = CALL $40(($4 + [240]), ($4 + [224]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($9) + $6))
	
.LABEL $label$4
	$5 = CALL $40(($4 + [256]), $10)
	CALL void $9((int_32 $5), (int_32 $6))
	if ( (*($4 + [256]) & [1]) ){ goto $label$15 }
	if ( (*($4 + [240]) & [1]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*($10 + [8]))
	if ( ($7 <= [513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$11 }
	
.LABEL $label$12
	if ( (*($3 + [80]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $55($2)
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($3 + [88])))
	$5 = *(($3 + [56]))
	if ( ($5 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$5 = *(($3 + [56]))
	if ( $5 ){ goto $label$7 }
	
.LABEL $label$8
	$2 = [1]
	if ( ((*($4 + [224]) & [1]) == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$6 = ($3 + [60])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$18:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$19 }
	CALL _ZdlPv($7)
	
.LABEL $label$19
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$18 }
	$2 = *(($3 + [56]))
	goto $label$16 
	
.LABEL $label$17
	$2 = $5
	
.LABEL $label$16
	*($6) = $5
	CALL _ZdlPv($2)
	$2 = [1]
	if ( ((*($4 + [224]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [232])))
	
.LABEL $label$5
	$global$0 = ($4 + [272])
	return $2
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [224])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $52($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [216]) = (int_64)0
	*($4 + [208]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8738])
	CALL memcpy(($4 + [208]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8738])
	CALL memcpy((($4 + [208]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$3 = CALL $12(($4 + [32]), $0, $1, $4)
	$8 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [216])
	$1 = *($4 + [208])
	if ( ($5 & [1]) ){ goto $label$11 }
	CALL void $8((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL void $8((int_32 $1), (int_64 $0), (int_64 *((*($8) + $6))))
	if ( ($7 <= [513]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $55($2)
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( (*($3 + [80]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	$5 = *(($3 + [56]))
	if ( $5 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [88])))
	$5 = *(($3 + [56]))
	if ( ($5 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($3 + [60])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	CALL _ZdlPv($7)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($3 + [56]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $5
	
.LABEL $label$12
	*($8) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [224])
	return [1]
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [240])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $52($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [208]) + [24]))) = (int_64)0
	*($4 + [224]) = (int_64)0
	*($4 + [208]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8738])
	CALL memcpy(($4 + [208]), $2, [8])
	CALL eosio_assert(((uint_32)($7 + [-8]) > (uint_32)[15]), [8738])
	CALL memcpy((($4 + [208]) + [16]), ($2 + [8]), [16])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [24])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$3 = CALL $12(($4 + [32]), $0, $1, $4)
	$9 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($8)
	$1 = *($4 + [224])
	$10 = *($4 + [208])
	if ( ($5 & [1]) ){ goto $label$11 }
	CALL void $9((int_32 $10), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL void $9((int_32 $10), (int_64 $1), (int_64 $0), (int_64 *((*($9) + $6))))
	if ( ($7 <= [513]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $55($2)
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( (*($3 + [80]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	$5 = *(($3 + [56]))
	if ( $5 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [88])))
	$5 = *(($3 + [56]))
	if ( ($5 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$9 = ($3 + [60])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	CALL _ZdlPv($7)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($3 + [56]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $5
	
.LABEL $label$12
	*($9) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [240])
	return [1]
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
}

void .FUNC $4 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [128])
	$global$0 = $3
	*($3 + [104]) = [0]
	*($3 + [96]) = (int_64)0
	CALL $42(($3 + [96]), [40])
	$4 = $1
	
.LOOP $label$1:
	$5 = ((uint_64)$4 / (uint_64)(int_64)10)
	CALL $45(($3 + [96]), *(((CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$5 * (int_64)10))) + [8493])))
	$6 = ((uint_64)$4 > (uint_64)(int_64)9)
	$4 = $5
	if ( $6 ){ goto $label$1 }
	$6 = ($6 & [1])
	$6 = *($3 + [96])
	$7 = ( *($3 + [100]) ? uint_32($6 >> [1]) : $6 )
	if ( ($7 == 0) ){ goto $label$2 }
	$6 = ( *((($3 + [96]) + [8])) ? (($3 + [96]) | [1]) : $6 )
	$7 = (($6 + $7) + [-1])
	if ( ((uint_32)$7 <= (uint_32)$6) ){ goto $label$2 }
	
.LOOP $label$3:
	$8 = *($6)
	*($6) = *($7)
	*($7) = $8
	$7 = ($7 + [-1])
	$6 = ($6 + [1])
	if ( ($6 <= $7) ){ goto $label$3 }
	
.LABEL $label$2
	$6 = CALL $44(($3 + [96]), [8481])
	$7 = ($6 + [8])
	*((($3 + [64]) + [8])) = *($7)
	*($3 + [64]) = *($6)
	*($6) = (int_64)0
	*($7) = [0]
	*($3 + [88]) = [0]
	*($3 + [80]) = (int_64)0
	CALL $42(($3 + [80]), [40])
	$4 = $2
	
.LOOP $label$4:
	$5 = ((uint_64)$4 / (uint_64)(int_64)10)
	CALL $45(($3 + [80]), *(((CASTING uint_32)(uint_64 (int_64))($4 - ((int_64)$5 * (int_64)10))) + [8493])))
	$6 = ((uint_64)$4 > (uint_64)(int_64)9)
	$4 = $5
	if ( $6 ){ goto $label$4 }
	$9 = (($3 + [80]) | [1])
	$10 = *((($3 + [80]) + [8]))
	$8 = ($6 & [1])
	$6 = *($3 + [80])
	$12 = uint_32($6 >> [1])
	$11 = *($3 + [84])
	$7 = ( $11 ? $12 : $8 )
	if ( ($7 == 0) ){ goto $label$5 }
	$6 = ( $10 ? $9 : $8 )
	$7 = (($6 + $7) + [-1])
	if ( ((uint_32)$7 <= (uint_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	$8 = *($6)
	*($6) = *($7)
	*($7) = $8
	$7 = ($7 + [-1])
	$6 = ($6 + [1])
	if ( ($6 <= $7) ){ goto $label$6 }
	$6 = *($3 + [80])
	$12 = uint_32($6 >> [1])
	$8 = ($6 & [1])
	$10 = *(($3 + [88]))
	$11 = *($3 + [84])
	
.LABEL $label$5
	$6 = CALL $46(($3 + [64]), ( $10 ? $9 : $8 ), ( $11 ? $12 : $8 ))
	$7 = ($6 + [8])
	*((($3 + [112]) + [8])) = *($7)
	*($3 + [112]) = *($6)
	*($6) = (int_64)0
	*($7) = [0]
	if ( (*($3 + [80]) & [1]) ){ goto $label$11 }
	$6 = [1]
	if ( (*($3 + [64]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [88])))
	$6 = [1]
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($3 + [72]))
	if ( (*($3 + [96]) & $6) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((*($3 + [96]) & $6) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [104])))
	
.LABEL $label$7
	$4 = *($0)
	*($3 + [48]) = [8468]
	*($3 + [52]) = CALL $49([8468])
	*($3 + [32]) = *($3 + [48])
	$6 = CALL $2(($3 + [56]), ($3 + [32]))
	*($3 + [64]) = $4
	*($3 + [72]) = *($6)
	*($3 + [40]) = [8483]
	*($3 + [44]) = CALL $49([8483])
	*($3 + [24]) = *($3 + [40])
	$6 = CALL $2(($3 + [80]), ($3 + [24]))
	CALL $40(($3 + [96]), ($3 + [112]))
	CALL $11(($3 + [8]), $0, ($3 + [64]), $0, $6, ($3 + [96]))
	if ( (*($3 + [96]) & [1]) ){ goto $label$16 }
	if ( ((uint_64)$2 >= (uint_64)$1) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*($3 + [104]))
	if ( (uint_64)($2 <= $1) ){ goto $label$14 }
	
.LABEL $label$15
	CALL eosio_assert([0], [8487])
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	if ( (*($3 + [112]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	$global$0 = ($3 + [128])
	return 
	
.LABEL $label$12
	CALL _ZdlPv(*($3 + [120]))
	$global$0 = ($3 + [128])
}

void .FUNC $5 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$4 = ($global$0 - [400])
	$global$0 = $4
	*($4 + [376]) = $3
	*($4 + [368]) = $2
	CALL require_auth(*($0))
	*($4 + [312]) = [8298]
	*($4 + [316]) = CALL $49([8298])
	*($4 + [24]) = *($4 + [312])
	$5 = CALL $2(($4 + [320]), ($4 + [24]))
	*($4 + [304]) = [8298]
	*($4 + [308]) = CALL $49([8298])
	*($4 + [16]) = *($4 + [304])
	CALL $2(($4 + [280]), ($4 + [16]))
	$6 = [0]
	*(($4 + [360])) = [0]
	*($4 + [336]) = (int_64)-8173747815083893456
	*($4 + [344]) = (int_64)-1
	*($4 + [352]) = (int_64)0
	*($4 + [328]) = *($5)
	*(($4 + [288])) = [0]
	*(($4 + [296])) = [0]
	*($4 + [284]) = ($4 + [328])
	*($4 + [292]) = ($4 + [328])
	$5 = ($4 + [292])
	
.LOOP $label$3:
	*($4 + [384]) = *($5)
	$7 = *(CALL $13(($4 + [384])) + [4])
	*($4 + [272]) = [8504]
	*($4 + [276]) = CALL $49([8504])
	*($4 + [8]) = *($4 + [272])
	CALL $2(($4 + [384]), ($4 + [8]))
	if ( ((int_64)*($7 + [8]) == (int_64)*($4 + [384])) ){ goto $label$2 }
	CALL $13($5)
	$6 = ($6 + [1])
	if ( ($6 <= [200]) ){ goto $label$3 }
	$8 = [0]
	$2 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$5 = ($4 + [292])
	*($4 + [384]) = *($5)
	$2 = *(*(CALL $13(($4 + [384])) + [4]))
	*($4 + [384]) = *($5)
	CALL $13(($4 + [384]))
	*($4 + [384]) = *($5)
	CALL $13(($4 + [384]))
	$8 = [1]
	
.LABEL $label$1
	CALL eosio_assert($8, [8517])
	$9 = ($0 + [32])
	$10 = (($4 + [256]) | [1])
	$11 = (($4 + [32]) | [1])
	$12 = (($4 + [48]) | [1])
	$13 = (($4 + [64]) | [1])
	$14 = (($4 + [80]) | [1])
	$15 = (($4 + [112]) | [1])
	$16 = (($4 + [96]) | [1])
	$17 = (($4 + [128]) | [1])
	$18 = ($0 + [60])
	$19 = ($0 + [56])
	$20 = ($0 + [40])
	
.LOOP $label$5:
	$7 = *($18)
	$0 = *($19)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$8:
	$5 = ($7 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$2) ){ goto $label$7 }
	$7 = $5
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($6 + [208]) == (int_32)$9), [8787])
	$5 = *($6 + [41])
	if ( ((int_32)$5 == (int_32)[255]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = [0]
	$5 = CALL db_find_i64(*($9), *($20), (int_64)4229865212519383040, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $14($9, $5)
	CALL eosio_assert(((int_32)*($6 + [208]) == (int_32)$9), [8787])
	
.LABEL $label$9
	$5 = *($6 + [41])
	if ( ((int_32)$5 == (int_32)[255]) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ($5 <= *($6 + [40])) ){ goto $label$10 }
	*(($4 + [136])) = [0]
	*($4 + [128]) = (int_64)0
	$5 = CALL $49([8535])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$41 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$44 }
	*($4 + [128]) = ($5 << [1])
	if ( $5 ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$44
	$7 = (($5 + [16]) & [-16])
	$17 = CALL _Znwj($7)
	*(($4 + [136])) = $17
	*($4 + [128]) = ($7 | [1])
	*($4 + [132]) = $5
	
.LABEL $label$43
	CALL memcpy($17, [8535], $5)
	
.LABEL $label$42
	$7 = [0]
	*(($17 + $5)) = [0]
	$2 = *($6 + [8])
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$48 }
	$0 = *([0] + [8840])
	
.LOOP $label$50:
	*((($4 + [384]) + ($5 = $7))) = *(($0 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$7 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$49 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$50 }
	
.LABEL $label$49
	*(($9 = ($4 + [104]))) = [0]
	*($4 + [96]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$47 }
	*($4 + [96]) = ($7 << [1])
	$0 = $16
	goto $label$46 
	
.LABEL $label$48
	*(($4 + [104])) = [0]
	*($4 + [96]) = (int_64)0
	*($4 + [96]) = [0]
	$5 = $16
	goto $label$45 
	
.LABEL $label$47
	$18 = (($7 + [16]) & [-16])
	$0 = CALL _Znwj($18)
	*($9) = $0
	*($4 + [96]) = ($18 | [1])
	*($4 + [100]) = $7
	
.LABEL $label$46
	$9 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$51:
	*(($0 + $5)) = *((($4 + [384]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$51 }
	$5 = ($0 + $7)
	
.LABEL $label$45
	*($5) = [0]
	*((($4 + [112]) + [8])) = [0]
	*($4 + [112]) = (int_64)0
	$0 = ( *((($4 + [96]) + [8])) ? $16 : (*($4 + [96]) & [1]) )
	$5 = CALL $49($0)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$40 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$54 }
	*($4 + [112]) = ($5 << [1])
	$7 = $15
	if ( $5 ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	$9 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*(($4 + [120])) = $7
	*($4 + [112]) = ($9 | [1])
	*($4 + [116]) = $5
	
.LABEL $label$53
	CALL memcpy($7, $0, $5)
	
.LABEL $label$52
	*(($7 + $5)) = [0]
	$5 = *($4 + [112])
	$7 = ($5 & [1])
	$5 = CALL $46(($4 + [128]), ( *((($4 + [112]) + [8])) ? $15 : $7 ), ( *($4 + [116]) ? uint_32($5 >> [1]) : $7 ))
	$7 = ($5 + [8])
	*((($4 + [144]) + [8])) = *($7)
	*($4 + [144]) = *($5)
	*($5) = (int_64)0
	*($7) = [0]
	$5 = CALL $44(($4 + [144]), [8481])
	$7 = ($5 + [8])
	*((($4 + [160]) + [8])) = *($7)
	*($4 + [160]) = *($5)
	*($5) = (int_64)0
	*($7) = [0]
	*((($4 + [80]) + [8])) = [0]
	*($4 + [80]) = (int_64)0
	CALL $42(($4 + [80]), [40])
	$2 = *($6)
	
.LOOP $label$55:
	$3 = ((uint_64)$2 / (uint_64)(int_64)10)
	CALL $45(($4 + [80]), *(((CASTING uint_32)(uint_64 (int_64))($2 - ((int_64)$3 * (int_64)10))) + [8493])))
	$5 = ((uint_64)$2 > (uint_64)(int_64)9)
	$2 = $3
	if ( $5 ){ goto $label$55 }
	$9 = *((($4 + [80]) + [8]))
	$0 = ($5 & [1])
	$5 = *($4 + [80])
	$19 = uint_32($5 >> [1])
	$18 = *($4 + [84])
	$7 = ( $18 ? $19 : $0 )
	if ( ($7 == 0) ){ goto $label$56 }
	$5 = ( $9 ? $14 : $0 )
	$7 = (($5 + $7) + [-1])
	if ( ((uint_32)$7 <= (uint_32)$5) ){ goto $label$56 }
	
.LOOP $label$57:
	$0 = *($5)
	*($5) = *($7)
	*($7) = $0
	$7 = ($7 + [-1])
	$5 = ($5 + [1])
	if ( ($5 <= $7) ){ goto $label$57 }
	$5 = *($4 + [80])
	$19 = uint_32($5 >> [1])
	$0 = ($5 & [1])
	$9 = *(($4 + [88]))
	$18 = *($4 + [84])
	
.LABEL $label$56
	$5 = CALL $46(($4 + [160]), ( $9 ? $14 : $0 ), ( $18 ? $19 : $0 ))
	$7 = ($5 + [8])
	*((($4 + [176]) + [8])) = *($7)
	*($4 + [176]) = *($5)
	*($5) = (int_64)0
	*($7) = [0]
	$5 = CALL $44(($4 + [176]), [8481])
	$7 = ($5 + [8])
	*((($4 + [192]) + [8])) = *($7)
	*($4 + [192]) = *($5)
	*($5) = (int_64)0
	*($7) = [0]
	*((($4 + [64]) + [8])) = [0]
	*($4 + [64]) = (int_64)0
	CALL $42(($4 + [64]), [40])
	$2 = *($6 + [192])
	
.LOOP $label$58:
	$3 = ((uint_64)$2 / (uint_64)(int_64)10)
	CALL $45(($4 + [64]), *(((CASTING uint_32)(uint_64 (int_64))($2 - ((int_64)$3 * (int_64)10))) + [8493])))
	$5 = ((uint_64)$2 > (uint_64)(int_64)9)
	$2 = $3
	if ( $5 ){ goto $label$58 }
	$9 = *((($4 + [64]) + [8]))
	$0 = ($5 & [1])
	$5 = *($4 + [64])
	$19 = uint_32($5 >> [1])
	$18 = *($4 + [68])
	$7 = ( $18 ? $19 : $0 )
	if ( ($7 == 0) ){ goto $label$59 }
	$5 = ( $9 ? $13 : $0 )
	$7 = (($5 + $7) + [-1])
	if ( ((uint_32)$7 <= (uint_32)$5) ){ goto $label$59 }
	
.LOOP $label$60:
	$0 = *($5)
	*($5) = *($7)
	*($7) = $0
	$7 = ($7 + [-1])
	$5 = ($5 + [1])
	if ( ($5 <= $7) ){ goto $label$60 }
	$5 = *($4 + [64])
	$19 = uint_32($5 >> [1])
	$0 = ($5 & [1])
	$9 = *(($4 + [72]))
	$18 = *($4 + [68])
	
.LABEL $label$59
	$5 = CALL $46(($4 + [192]), ( $9 ? $13 : $0 ), ( $18 ? $19 : $0 ))
	$7 = ($5 + [8])
	*((($4 + [208]) + [8])) = *($7)
	*($4 + [208]) = *($5)
	*($5) = (int_64)0
	*($7) = [0]
	$5 = CALL $44(($4 + [208]), [8481])
	$7 = ($5 + [8])
	*((($4 + [224]) + [8])) = *($7)
	*($4 + [224]) = *($5)
	*($5) = (int_64)0
	*($7) = [0]
	*((($4 + [48]) + [8])) = [0]
	*($4 + [48]) = (int_64)0
	CALL $42(($4 + [48]), [40])
	$5 = *(($6 + [40]))
	
.LOOP $label$61:
	$7 = ($5 & [255])
	$0 = ((uint_32)$7 / (uint_32)[10])
	CALL $45(($4 + [48]), *(((($5 - ((int_32)$0 * (int_32)[10])) & [255]) + [8493])))
	$5 = $0
	if ( ((uint_32)$7 > (uint_32)[9]) ){ goto $label$61 }
	$9 = *((($4 + [48]) + [8]))
	$0 = ($5 & [1])
	$5 = *($4 + [48])
	$19 = uint_32($5 >> [1])
	$18 = *($4 + [52])
	$7 = ( $18 ? $19 : $0 )
	if ( ($7 == 0) ){ goto $label$62 }
	$5 = ( $9 ? $12 : $0 )
	$7 = (($5 + $7) + [-1])
	if ( ((uint_32)$7 <= (uint_32)$5) ){ goto $label$62 }
	
.LOOP $label$63:
	$0 = *($5)
	*($5) = *($7)
	*($7) = $0
	$7 = ($7 + [-1])
	$5 = ($5 + [1])
	if ( ($5 <= $7) ){ goto $label$63 }
	$5 = *($4 + [48])
	$19 = uint_32($5 >> [1])
	$0 = ($5 & [1])
	$9 = *(($4 + [56]))
	$18 = *($4 + [52])
	
.LABEL $label$62
	$5 = CALL $46(($4 + [224]), ( $9 ? $12 : $0 ), ( $18 ? $19 : $0 ))
	$7 = ($5 + [8])
	*((($4 + [240]) + [8])) = *($7)
	*($4 + [240]) = *($5)
	*($5) = (int_64)0
	*($7) = [0]
	$5 = CALL $44(($4 + [240]), [8481])
	$7 = ($5 + [8])
	*((($4 + [384]) + [8])) = *($7)
	*($4 + [384]) = *($5)
	*($5) = (int_64)0
	*($7) = [0]
	*((($4 + [32]) + [8])) = [0]
	*($4 + [32]) = (int_64)0
	CALL $42(($4 + [32]), [40])
	$5 = *(($6 + [41]))
	
.LOOP $label$64:
	$7 = ($5 & [255])
	$6 = ((uint_32)$7 / (uint_32)[10])
	CALL $45(($4 + [32]), *(((($5 - ((int_32)$6 * (int_32)[10])) & [255]) + [8493])))
	$5 = $6
	if ( ((uint_32)$7 > (uint_32)[9]) ){ goto $label$64 }
	$0 = *((($4 + [32]) + [8]))
	$6 = ($5 & [1])
	$5 = *($4 + [32])
	$18 = uint_32($5 >> [1])
	$9 = *($4 + [36])
	$7 = ( $9 ? $18 : $6 )
	if ( ($7 == 0) ){ goto $label$65 }
	$5 = ( $0 ? $11 : $6 )
	$7 = (($5 + $7) + [-1])
	if ( ((uint_32)$7 <= (uint_32)$5) ){ goto $label$65 }
	
.LOOP $label$66:
	$6 = *($5)
	*($5) = *($7)
	*($7) = $6
	$7 = ($7 + [-1])
	$5 = ($5 + [1])
	if ( ($5 <= $7) ){ goto $label$66 }
	$5 = *($4 + [32])
	$18 = uint_32($5 >> [1])
	$6 = ($5 & [1])
	$0 = *(($4 + [40]))
	$9 = *($4 + [36])
	
.LABEL $label$65
	$5 = CALL $46(($4 + [384]), ( $0 ? $11 : $6 ), ( $9 ? $18 : $6 ))
	$7 = ($5 + [8])
	*((($4 + [256]) + [8])) = *($7)
	*($4 + [256]) = *($5)
	*($5) = (int_64)0
	*($7) = [0]
	if ( (*($4 + [32]) & [1]) ){ goto $label$68 }
	$5 = [1]
	if ( (*($4 + [384]) & [1]) ){ goto $label$67 }
	goto $label$39 
	
.LABEL $label$68
	CALL _ZdlPv(*(($4 + [40])))
	$5 = [1]
	if ( ((*($4 + [384]) & [1]) == 0) ){ goto $label$39 }
	
.LABEL $label$67
	CALL _ZdlPv(*(($4 + [392])))
	if ( ((*($4 + [240]) & $5) == 0) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$41
	CALL $39(($4 + [128]))
	
.LABEL $label$40
	CALL $39(($4 + [112]))
	
.LABEL $label$39
	if ( (*($4 + [240]) & $5) ){ goto $label$37 }
	
.LABEL $label$38
	$5 = [1]
	if ( (*($4 + [48]) & [1]) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	CALL _ZdlPv(*(($4 + [248])))
	$5 = [1]
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$35 }
	
.LABEL $label$36
	CALL _ZdlPv(*(($4 + [56])))
	if ( ((*($4 + [224]) & $5) == 0) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	if ( (*($4 + [224]) & $5) ){ goto $label$33 }
	
.LABEL $label$34
	$5 = [1]
	if ( (*($4 + [208]) & [1]) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	CALL _ZdlPv(*(($4 + [232])))
	$5 = [1]
	if ( ((*($4 + [208]) & [1]) == 0) ){ goto $label$31 }
	
.LABEL $label$32
	CALL _ZdlPv(*(($4 + [216])))
	if ( ((*($4 + [64]) & $5) == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	if ( (*($4 + [64]) & $5) ){ goto $label$29 }
	
.LABEL $label$30
	$5 = [1]
	if ( (*($4 + [192]) & [1]) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	CALL _ZdlPv(*(($4 + [72])))
	$5 = [1]
	if ( ((*($4 + [192]) & [1]) == 0) ){ goto $label$27 }
	
.LABEL $label$28
	CALL _ZdlPv(*(($4 + [200])))
	if ( ((*($4 + [176]) & $5) == 0) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	if ( (*($4 + [176]) & $5) ){ goto $label$25 }
	
.LABEL $label$26
	$5 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL _ZdlPv(*(($4 + [184])))
	$5 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($4 + [88])))
	if ( ((*($4 + [160]) & $5) == 0) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	if ( (*($4 + [160]) & $5) ){ goto $label$21 }
	
.LABEL $label$22
	$5 = [1]
	if ( (*($4 + [144]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL _ZdlPv(*(($4 + [168])))
	$5 = [1]
	if ( ((*($4 + [144]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($4 + [152])))
	if ( ((*($4 + [112]) & $5) == 0) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	if ( (*($4 + [112]) & $5) ){ goto $label$17 }
	
.LABEL $label$18
	$5 = [1]
	if ( (*($4 + [96]) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL _ZdlPv(*(($4 + [120])))
	$5 = [1]
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($4 + [104])))
	if ( ((*($4 + [128]) & $5) == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	if ( (*($4 + [128]) & $5) ){ goto $label$13 }
	
.LABEL $label$14
	if ( (CALL cancel_deferred(($4 + [368])) == 0) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	CALL _ZdlPv(*(($4 + [136])))
	if ( (CALL cancel_deferred(($4 + [368])) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL eosio_assert([0], ( *(($4 + [264])) ? $10 : (*($4 + [256]) & [1]) ))
	
.LABEL $label$11
	CALL eosio_assert([0], [8553])
	if ( ((*($4 + [256]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [264])))
	
.LABEL $label$10
	if ( ($8 == 0) ){ goto $label$71 }
	CALL prints([8569])
	$6 = *($4 + [352])
	if ( $6 ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$71
	CALL eosio_assert([0], [8593])
	$6 = *($4 + [352])
	if ( ($6 == 0) ){ goto $label$69 }
	
.LABEL $label$70
	$0 = ($4 + [356])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$73 }
	
.LOOP $label$74:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$75 }
	CALL _ZdlPv($7)
	
.LABEL $label$75
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$74 }
	$5 = *(($4 + [352]))
	goto $label$72 
	
.LABEL $label$73
	$5 = $6
	
.LABEL $label$72
	*($0) = $6
	CALL _ZdlPv($5)
	$global$0 = ($4 + [400])
	return 
	
.LABEL $label$69
	$global$0 = ($4 + [400])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8311])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8416])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8349])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8416])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $3 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [80])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $52($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [16]) = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*(($0 + [40])) = (int_64)0
	*($0 + [48]) = (int_64)0
	*(($0 + [56])) = (int_64)0
	*($0 + [64]) = (int_64)0
	*(($0 + [72])) = [0]
	*($0 + [80]) = [0]
	*(($0 + [200])) = (int_64)0
	*(($0 + [192])) = (int_64)0
	*(($0 + [184])) = (int_64)0
	*($0 + [176]) = (int_64)0
	*(($0 + [232])) = (int_64)0
	*(($0 + [224])) = (int_64)0
	*(($0 + [216])) = (int_64)0
	*($0 + [208]) = (int_64)0
	*($0 + [240]) = [0]
	*($2 + [4]) = $1
	*($2) = $1
	*($2 + [8]) = ($1 + $3)
	*($2 + [16]) = $2
	*($2 + [28]) = ($0 + [8])
	*($2 + [24]) = $0
	*($2 + [32]) = ($0 + [16])
	*($2 + [36]) = ($0 + [24])
	*($2 + [40]) = ($0 + [32])
	*($2 + [44]) = ($0 + [48])
	*($2 + [48]) = ($0 + [64])
	*($2 + [52]) = ($0 + [76])
	*($2 + [56]) = ($0 + [80])
	*($2 + [60]) = ($0 + [152])
	*($2 + [64]) = ($0 + [160])
	*($2 + [68]) = ($0 + [176])
	*($2 + [72]) = ($0 + [208])
	*($2 + [76]) = ($0 + [240])
	CALL $10(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [80])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [400])
	$global$0 = $3
	*($3 + [392]) = [8192]
	*($3 + [396]) = CALL $49([8192])
	*($3 + [48]) = *($3 + [392])
	CALL $2(($3 + [80]), ($3 + [48]))
	*($3 + [384]) = [8201]
	*($3 + [388]) = CALL $49([8201])
	*($3 + [40]) = *($3 + [384])
	if ( ((int_64)*(CALL $2(($3 + [80]), ($3 + [40]))) != (int_64)$2) ){ goto $label$4 }
	*($3 + [368]) = [8298]
	*($3 + [372]) = CALL $49([8298])
	*($3 + [32]) = *($3 + [368])
	if ( ((int_64)*(CALL $2(($3 + [376]), ($3 + [32]))) != (int_64)$1) ){ goto $label$4 }
	CALL $3(($3 + [80]))
	CALL $4($0, *($3 + [232]), *($3 + [240]))
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($3 + [152])))
	$global$0 = ($3 + [400])
	return 
	
.LABEL $label$4
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-8279867914920656896) ){ goto $label$2 }
	if ( ((int_64)$2 == (int_64)-5003315193367756800) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-3841130677495922688) ){ goto $label$3 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [1]
	*($3 + [8]) = *($3 + [72])
	CALL $6($1, $1, ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [400])
	return 
	
.LABEL $label$2
	*($3 + [60]) = [0]
	*($3 + [56]) = [2]
	*($3 + [24]) = *($3 + [56])
	CALL $8($1, $1, ($3 + [24]))
	$global$0 = ($3 + [400])
	return 
	
.LABEL $label$1
	*($3 + [68]) = [0]
	*($3 + [64]) = [3]
	*($3 + [16]) = *($3 + [64])
	CALL $9($1, $1, ($3 + [16]))
	$global$0 = ($3 + [400])
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8715])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $52($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([224])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [112]) = (int_64)0
	*($5 + [144]) = (int_64)0
	*(($5 + [72])) = (int_64)0
	*(($5 + [64])) = (int_64)0
	*(($5 + [56])) = (int_64)0
	*(($5 + [104])) = (int_64)0
	*(($5 + [96])) = (int_64)0
	*(($5 + [88])) = (int_64)0
	*(($5 + [136])) = (int_64)0
	*(($5 + [128])) = (int_64)0
	*(($5 + [120])) = (int_64)0
	*(($5 + [168])) = (int_64)0
	*(($5 + [160])) = (int_64)0
	*(($5 + [152])) = (int_64)0
	*($5 + [176]) = (int_64)0
	*($5 + [184]) = (int_64)0
	*($5 + [208]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [41])
	*($3 + [64]) = ($5 + [48])
	*($3 + [68]) = ($5 + [80])
	*($3 + [72]) = ($5 + [112])
	*($3 + [76]) = ($5 + [144])
	*($3 + [80]) = ($5 + [176])
	*($3 + [84]) = ($5 + [192])
	*($3 + [88]) = ($5 + [200])
	CALL $28(($3 + [40]), ($3 + [32]))
	*($5 + [212]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $29(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $55($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $30($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $42($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $42($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $39($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [208])
	$global$0 = $3
	CALL memory()
	*(($3 + [8])) = [0]
	*($3 + [24]) = [0]
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL $1(CALL $12(($3 + [32]), $0, $1, $3), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $47($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8738])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8738])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8738])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8738])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8738])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	$6 = (int_64)0
	*($2 + [64]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8738])
	CALL memcpy(($2 + [64]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [64])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8738])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [64]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8738])
	CALL memcpy(($2 + [64]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [64])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $15(*($1), *($0 + [24]))
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8738])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$7 = *($0 + [32])
	$3 = *($1)
	$5 = *($3 + [4])
	$8 = [0]
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *(($3 + [8]))), [9016])
	$9 = ($3 + [4])
	$5 = *($9)
	$4 = *($5)
	$5 = ($5 + [1])
	*($9) = $5
	$8 = ($8 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $8)))
	$8 = ($8 + [7])
	if ( ($4 & [128]) ){ goto $label$1 }
	*($7) = $6
	CALL eosio_assert(((uint_32)(*(($3 + [8])) - $5) > (uint_32)[64]), [8738])
	$4 = ($3 + [4])
	CALL memcpy(($7 + [4]), *($4), [65])
	*($4) = (*($4) + [65])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8738])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8738])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$9 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [8738])
	CALL memcpy(($2 + [64]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$6 = (int_64)0
	$4 = [16]
	$3 = [0]
	$8 = ($2 + [32])
	$10 = (int_64)0
	
.LOOP $label$3:
	$5 = (($2 + [64]) + $3)
	if ( ($4 <= [2]) ){ goto $label$4 }
	$6 = ((int_64)$6 | (int_64)*($5))
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56))
	$4 = ($4 + [-1])
	$6 = ((int_64)$6 << (int_64)8)
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$4 == (int_32)[1]), [8743])
	*($8 + [8]) = $10
	*($8) = ((int_64)$6 | (int_64)*($5))
	$4 = [16]
	$8 = ($8 + [16])
	$6 = (int_64)0
	$10 = (int_64)0
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$3 }
	
.LABEL $label$2
	$3 = [16]
	if ( ((int_32)$4 == (int_32)[16]) ){ goto $label$5 }
	if ( ($4 <= [2]) ){ goto $label$6 }
	CALL __ashlti3(($2 + [16]), $6, $10, (($4 << [3]) + [-8]))
	$10 = *(($2 + [24]))
	$6 = *($2 + [16])
	
.LABEL $label$6
	*($8) = $6
	*($8 + [8]) = $10
	
.LABEL $label$5
	*($9) = *($2 + [32])
	*(($9 + [8])) = *($2 + [40])
	*(($9 + [24])) = *((($2 + [32]) + [24]))
	*(($9 + [16])) = *((($2 + [32]) + [16]))
	$9 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [8738])
	CALL memcpy(($2 + [64]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$6 = (int_64)0
	$4 = [0]
	$8 = ($2 + [32])
	$10 = (int_64)0
	
.LOOP $label$8:
	$5 = (($2 + [64]) + $4)
	if ( ($3 <= [2]) ){ goto $label$9 }
	$6 = ((int_64)$6 | (int_64)*($5))
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56))
	$3 = ($3 + [-1])
	$6 = ((int_64)$6 << (int_64)8)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL eosio_assert(((int_32)$3 == (int_32)[1]), [8743])
	*($8 + [8]) = $10
	*($8) = ((int_64)$6 | (int_64)*($5))
	$3 = [16]
	$8 = ($8 + [16])
	$6 = (int_64)0
	$10 = (int_64)0
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ((int_32)$3 == (int_32)[16]) ){ goto $label$10 }
	if ( ($3 <= [2]) ){ goto $label$11 }
	CALL __ashlti3($2, $6, $10, (($3 << [3]) + [-8]))
	$10 = *(($2 + [8]))
	$6 = *($2)
	
.LABEL $label$11
	*($8) = $6
	*($8 + [8]) = $10
	
.LABEL $label$10
	*($9) = *($2 + [32])
	*(($9 + [8])) = *($2 + [40])
	*(($9 + [24])) = *((($2 + [32]) + [24]))
	*(($9 + [16])) = *((($2 + [32]) + [16]))
	$0 = *($0 + [52])
	$9 = *($1)
	$3 = *($9 + [4])
	$5 = [0]
	$6 = (int_64)0
	$8 = ($9 + [4])
	
.LOOP $label$12:
	CALL eosio_assert(($3 <= *(($9 + [8]))), [9016])
	$3 = *($8)
	$4 = *($3)
	$3 = ($3 + [1])
	*($8) = $3
	$5 = ($5 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $5)))
	$5 = ($5 + [7])
	if ( ($4 & [128]) ){ goto $label$12 }
	*($0) = $6
	CALL eosio_assert(((uint_32)(*(($9 + [8])) - $3) > (uint_32)[32]), [8738])
	$4 = ($9 + [4])
	CALL memcpy(($0 + [4]), *($4), [33])
	*($4) = (*($4) + [33])
	$global$0 = ($2 + [96])
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_64 $8
	$6 = ($global$0 - [96])
	$global$0 = $6
	$7 = CALL current_time()
	*($6 + [72]) = (int_64)0
	*($6 + [64]) = ((int_64)((uint_64)$7 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$7 = CALL current_time()
	*(($6 + [28])) = (int_64)0
	*(($6 + [44])) = (int_64)0
	*(($6 + [52])) = (int_64)0
	*($6 + [12]) = [0]
	*($6 + [16]) = [0]
	*($6 + [20 align=4]) = (int_64)0
	*($6 + [36 align=4]) = (int_64)0
	*($6) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	CALL $21(($6 + [36]), $2, $3, $4, $5)
	*($6 + [20]) = [0]
	$7 = *($1)
	CALL $22(($6 + [80]), $6)
	$1 = *($6 + [80])
	CALL send_deferred(($6 + [64]), $7, $1, (*($6 + [84]) - $1), [0])
	$1 = *($6 + [80])
	if ( ($1 == 0) ){ goto $label$1 }
	*($6 + [84]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$7 = *($6 + [64])
	$8 = *($6 + [72])
	CALL $23($6)
	*($0 + [8]) = $8
	*($0) = $7
	$global$0 = ($6 + [96])
}

int_32 .FUNC $12 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [96])
	$global$0 = $4
	*(($5 = (($4 + [80]) + [8]))) = *(($3 + [8]))
	*($4 + [80]) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*((($4 + [24]) + [8])) = $3
	$1 = *($4 + [80])
	*($0 + [16]) = $1
	*(($0 + [24])) = $3
	*($4 + [24]) = $1
	*($4 + [64]) = [8298]
	*($4 + [68]) = CALL $49([8298])
	*($4 + [16]) = *($4 + [64])
	$3 = CALL $2(($4 + [72]), ($4 + [16]))
	*($4 + [56]) = [8298]
	*($4 + [60]) = CALL $49([8298])
	*($4 + [8]) = *($4 + [56])
	CALL $2(($4 + [24]), ($4 + [8]))
	*(($0 + [40])) = (int_64)-8173747815083893456
	*(($0 + [48])) = (int_64)-1
	*(($0 + [56])) = (int_64)0
	*(($0 + [64])) = [0]
	*($0 + [32]) = *($3)
	*(($0 + [88])) = [0]
	*($0 + [80 align=4]) = (int_64)0
	*($0 + [72]) = $2
	$5 = ($0 + [80])
	$3 = CALL $49([8877])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($5) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0 + [80]) = ($6 | [1])
	*(($0 + [88])) = $5
	*(($0 + [84])) = $3
	
.LABEL $label$3
	CALL memcpy($5, [8877], $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	CALL memcpy(($0 + [96]), [8936], [80])
	*($0 + [28]) = ($4 + [24])
	$global$0 = ($4 + [96])
	return $0
	
.LABEL $label$1
	CALL $39($5)
	return (unreachable)
}

int_32 .FUNC $13 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [212]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8667])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4229865212519383040)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8613])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8613])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $14(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $55($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $50(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9020])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $50(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $55($0)
	
.LABEL $label$1
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9016])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $17($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8738])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $52($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9020])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $52($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $50 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $48())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $51($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $52 (int_32 $0)
{
	return CALL $53([9040], $0)
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $54($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8212])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9032]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9036])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9032]) = [1]
	$2 = ($2 << [16])
	*([0] + [9036]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9036])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9036]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9032]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9032]) = [1]
	$3 = ($3 << [16])
	*([0] + [9036]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9036])
	
.LABEL $label$10
	*([0] + [9036]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17424])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17232]
	$3 = (((int_32)$1 * (int_32)[12]) + [17232])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}