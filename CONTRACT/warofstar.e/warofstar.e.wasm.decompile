(data (i32.const 8192) "eosio.stake\00")
(data (i32.const 8204) "Invalid transfer amount.\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8315) "Transfer amount not positive\00")
(data (i32.const 8344) "Memo is required\00")
(data (i32.const 8361) "transfer\00")
(data (i32.const 8370) "Contract not allowed\00")
(data (i32.const 8391) "active\00")
(data (i32.const 8398) "houseaccount\00")
(data (i32.const 8411) "pay\00")
(data (i32.const 8415) "token is not supported\00")
(data (i32.const 8438) "amount not within the bet limit\00")
(data (i32.const 8470) "eosio.token\00")
(data (i32.const 8482) "eosio\00")
(data (i32.const 8488) "onerror\00")
(data (i32.const 8496) "\e2\99\a0\00")
(data (i32.const 8500) "\e2\99\a5\00")
(data (i32.const 8504) "\e2\99\a6\00")
(data (i32.const 8508) "\e2\99\a3\00")
(data (i32.const 8512) "A\00")
(data (i32.const 8514) "2\00")
(data (i32.const 8516) "3\00")
(data (i32.const 8518) "4\00")
(data (i32.const 8520) "5\00")
(data (i32.const 8522) "6\00")
(data (i32.const 8524) "7\00")
(data (i32.const 8526) "8\00")
(data (i32.const 8528) "9\00")
(data (i32.const 8530) "10\00")
(data (i32.const 8533) "J\00")
(data (i32.const 8535) "Q\00")
(data (i32.const 8537) "K\00")
(data (i32.const 8539) ";\00")
(data (i32.const 8541) "EOS\00")
(data (i32.const 8545) "Round already started\00")
(data (i32.const 8567) "Game resolving, please wait\00")
(data (i32.const 8595) "Game ID cannot be empty!\00")
(data (i32.const 8620) "Game is no longer active\00")
(data (i32.const 8645) "Game already finished, please wait for next round\00")
(data (i32.const 8695) "Invalid game state\00")
(data (i32.const 8714) "Bet type cannot be empty!\00")
(data (i32.const 8740) "Bet amount cannot be empty!\00")
(data (i32.const 8768) "Bet amount must be positive\00")
(data (i32.const 8796) "bet amount does not match transfer amount\00")
(data (i32.const 8838) "reveal: game id does\'t exist!\00")
(data (i32.const 8868) "Can not reveal yet\00")
(data (i32.const 8887) "random key is not set\00")
(data (i32.const 8909) "newround\00")
(data (i32.const 8918) "[Dapp365] Red Vs Blue win!\00")
(data (i32.const 8945) "[Dapp365] Red Vs Blue lose!\00")
(data (i32.const 8973) "string is too long to be a valid name\00")
(data (i32.const 9011) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9078) "character is not in allowed character set for names\00")
(data (i32.const 9130) "get_action size failed\00")
(data (i32.const 9153) "get_action failed\00")
(data (i32.const 9171) "get\00")
(data (i32.const 9175) "read\00")
(data (i32.const 9180) "write\00")
(data (i32.const 9188) "\e8#\00\00")
(data (i32.const 9192) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9225) "string is too long to be a valid symbol_code\00")
(data (i32.const 9270) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9323) "attempt to add asset with different symbol\00")
(data (i32.const 9366) "addition underflow\00")
(data (i32.const 9385) "addition overflow\00")
(data (i32.const 9403) "referrer is missing\00")
(data (i32.const 9423) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9472) "invalid symbol name\00")
(data (i32.const 9492) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9551) "multiplication overflow\00")
(data (i32.const 9575) "multiplication underflow\00")
(data (i32.const 9600) "divide by zero\00")
(data (i32.const 9615) "signed division overflow\00")
(data (i32.const 9640) "Red Win\00")
(data (i32.const 9648) "Blue Win\00")
(data (i32.const 9657) "Tie\00")
(data (i32.const 9661) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9712) "error reading iterator\00")
(data (i32.const 9735) "cannot create objects in table of another contract\00")
(data (i32.const 9786) "cannot pass end iterator to modify\00")
(data (i32.const 9821) "object passed to modify is not in multi_index\00")
(data (i32.const 9867) "cannot modify objects in table of another contract\00")
(data (i32.const 9918) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9977) "cannot increment end iterator\00")
(data (i32.const 10007) "cannot pass end iterator to erase\00")
(data (i32.const 10041) "object passed to erase is not in multi_index\00")
(data (i32.const 10086) "cannot erase objects in table of another contract\00")
(data (i32.const 10136) "attempt to remove object that was not in multi_index\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "get_action" (func $fimport$2 (param i32 i32 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "send_deferred" (func $fimport$5 (param i32 i64 i32 i32 i32)))
(import "env" "sha256" (func $fimport$6 (param i32 i32 i32)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "tapos_block_num" (func $fimport$8 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$9 (result i32)))
(import "env" "assert_recover_key" (func $fimport$10 (param i32 i32 i32 i32 i32)))
(import "env" "action_data_size" (func $fimport$11 (result i32)))
(import "env" "read_action_data" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$14 (result i64)))
(import "env" "db_update_i64" (func $fimport$15 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$16 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$17 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "require_recipient" (func $fimport$18 (param i64)))
(import "env" "is_account" (func $fimport$19 (param i64) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$21 (param i32 i32) (result i32)))
(import "env" "__multi3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$23))
(import "env" "send_inline" (func $fimport$24 (param i32 i32)))
(import "env" "db_get_i64" (func $fimport$25 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$26 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$27 (param i32 i64 i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$28 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$29 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$30 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$31 (param i32)))
(import "env" "memmove" (func $fimport$32 (param i32 i32 i32) (result i32)))
(import "env" "__lttf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "prints_l" (func $fimport$34 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$41 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$42 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$43 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$44 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$45 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$46 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$47 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$48 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$49 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$50 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$51 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$52 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$53 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $13))
(export "_ZdlPv" (func $124))
(export "_Znwj" (func $122))
(export "_Znaj" (func $123))
(export "_ZdaPv" (func $125))
(export "_ZnwjSt11align_val_t" (func $126))
(export "_ZnajSt11align_val_t" (func $127))
(export "_ZdlPvSt11align_val_t" (func $128))
(export "_ZdaPvSt11align_val_t" (func $129))
(table $0 8 8 anyfunc)
(elem (i32.const 1) $14 $16 $18 $20 $22 $24 $26)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18608))
(global $global$2 i32 (i32.const 18608))


void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $87($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9180])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9180])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $93(CALL $94($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9180])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9180])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9180])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9180])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9180])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $95 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [96])
	$global$0 = $4
	$5 = [0]
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$9 = (*($2 + [4]) - *($2))
	if ( ($9 == 0) ){ goto $label$2 }
	$6 = int_32($9 >> [4])
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL _Znwj($9)
	$6 = ($8 + ($6 << [4]))
	*(($4 + [16])) = $6
	*($4 + [8]) = $8
	*($4 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($4 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($4 + [44])) = $7
	*(($4 + [48])) = $6
	*(($4 + [16])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $8
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	*($4 + [64]) = [0]
	*($4 + [72]) = ($4 + [64])
	*($4 + [80]) = $3
	CALL $96(($4 + [80]), ($4 + [72]))
	$8 = *($4 + [64])
	if ( ($8 == 0) ){ goto $label$5 }
	$2 = ($4 + [52])
	CALL $87($2, $8)
	$5 = *(($4 + [56]))
	$8 = *($2)
	goto $label$4 
	
.LABEL $label$5
	$8 = [0]
	
.LABEL $label$4
	*($4 + [84]) = $8
	*($4 + [80]) = $8
	*($4 + [88]) = $5
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $97(($4 + [72]), ($4 + [64]))
	CALL $98(($4 + [80]), ($4 + [24]))
	$8 = *($4 + [80])
	CALL send_inline($8, (*($4 + [84]) - $8))
	$8 = *($4 + [80])
	if ( ($8 == 0) ){ goto $label$6 }
	*($4 + [84]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$6
	$8 = *($4 + [52])
	if ( ($8 == 0) ){ goto $label$7 }
	*(($4 + [56])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$7
	$8 = *($4 + [40])
	if ( ($8 == 0) ){ goto $label$8 }
	*(($4 + [44])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$8
	$8 = *($4 + [8])
	if ( ($8 == 0) ){ goto $label$9 }
	*($4 + [12]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $138(($4 + [8]))
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = (*($2) + [40])
	*(($2 = *($1))) = $1
	$3 = *($0 + [48])
	$0 = *($0)
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [52])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *(($0 + [48]))
	$3 = ( *(($0 + [52])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$3 = *($0 + [60])
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [64])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *(($0 + [60]))
	$3 = ( *(($0 + [64])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$3 = *($0 + [72])
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [76])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *(($0 + [72]))
	$0 = ( *(($0 + [76])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	$1 = ($0 + $1)
	*($2) = $1
	
.LABEL $label$6
	*($2) = ($1 + [1])
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [9180])
	CALL memcpy(*($0 + [4]), ($4 + [16]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	CALL $99(*($1), ($4 + [48]))
	CALL $99(*($1), ($4 + [60]))
	CALL $99(*($1), ($4 + [72]))
	$1 = *($1)
	*($2 + [15]) = *($4 + [84])
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[0]), [9180])
	CALL memcpy(*($1 + [4]), ($2 + [15]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9180])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [9180])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9180])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [9180])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9180])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9180])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9180])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9180])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9180])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $93(CALL $94($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9180])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9180])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $93($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9180])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9180])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $138 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9175])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9175])
	CALL memcpy($0, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $148($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10192])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $148($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $130 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $132 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $133 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $121 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = [1]
	$4 = ($1 - $0)
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$30 }
	goto $label$12 
	
.LABEL $label$31
	$5 = *($0)
	$4 = ($1 + [-1])
	$2 = *($4)
	if ( ((uint_32)$2 >= (uint_32)$5) ){ goto $label$4 }
	*($0) = $2
	*($4) = $5
	return [1]
	
.LABEL $label$30
	$2 = *($0 + [2])
	$5 = *($0)
	$4 = *($0 + [1])
	if ( ((uint_32)$4 >= (uint_32)$5) ){ goto $label$26 }
	$6 = ($2 & [255])
	if ( ((uint_32)$6 >= (uint_32)$4) ){ goto $label$23 }
	*($0) = $2
	*(($0 + [2])) = $5
	goto $label$22 
	
.LABEL $label$29
	$5 = ($1 + [-1])
	$2 = *($5)
	$6 = *($0)
	$4 = *($0 + [1])
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$25 }
	if ( ((uint_32)($2 & [255]) >= (uint_32)$4) ){ goto $label$18 }
	*($0) = $2
	*($5) = $6
	return [1]
	
.LABEL $label$28
	CALL $120($0, ($0 + [1]), ($0 + [2]), ($0 + [3]), ($1 + [-1]), $2)
	return [1]
	
.LABEL $label$27
	$6 = ($1 + [-1])
	$2 = *($0 + [2])
	$5 = *($0)
	$4 = *($0 + [1])
	if ( ((uint_32)$4 >= (uint_32)$5) ){ goto $label$24 }
	$7 = ($2 & [255])
	if ( ((uint_32)$7 >= (uint_32)$4) ){ goto $label$17 }
	*($0) = $2
	*(($0 + [2])) = $5
	goto $label$16 
	
.LABEL $label$26
	$6 = ($2 & [255])
	if ( ((uint_32)$6 >= (uint_32)$4) ){ goto $label$20 }
	*(($0 + [2])) = $4
	*(($7 = ($0 + [1]))) = $2
	if ( ((uint_32)$6 >= (uint_32)$5) ){ goto $label$21 }
	*($0) = $2
	*($7) = $5
	$6 = [3]
	$7 = ($0 + [3])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$19 }
	goto $label$3 
	
.LABEL $label$25
	if ( ((uint_32)($2 & [255]) >= (uint_32)$4) ){ goto $label$8 }
	$3 = [1]
	*(($6 = ($0 + [1]))) = $2
	*($5) = $4
	$2 = *($0)
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$7 }
	*($0) = $4
	*(($0 + [1])) = $2
	return [1]
	
.LABEL $label$24
	$7 = ($2 & [255])
	if ( ((uint_32)$7 >= (uint_32)$4) ){ goto $label$15 }
	*(($0 + [2])) = $4
	*(($8 = ($0 + [1]))) = $2
	if ( ((uint_32)$7 >= (uint_32)$5) ){ goto $label$14 }
	*($0) = $2
	*($8) = $5
	goto $label$14 
	
.LABEL $label$23
	*($0) = $4
	*(($4 = ($0 + [1]))) = $5
	if ( ((uint_32)$6 >= (uint_32)$5) ){ goto $label$20 }
	*(($0 + [2])) = $5
	*($4) = $2
	
.LABEL $label$22
	$4 = $5
	
.LABEL $label$21
	$6 = [3]
	$7 = ($0 + [3])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$19 }
	goto $label$5 
	
.LABEL $label$20
	$4 = $2
	$6 = [3]
	$7 = ($0 + [3])
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$19
	$8 = [0]
	$9 = [0]
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)($4 & [255])) ){ goto $label$13 }
	$10 = [2]
	goto $label$1 
	
.LABEL $label$18
	*($0) = $4
	$3 = [1]
	*(($0 + [1])) = $6
	$4 = *($5)
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$6 }
	*(($0 + [1])) = $4
	*($5) = $6
	return [1]
	
.LABEL $label$17
	*($0) = $4
	*(($4 = ($0 + [1]))) = $5
	if ( ((uint_32)$7 >= (uint_32)$5) ){ goto $label$15 }
	*(($0 + [2])) = $5
	*($4) = $2
	
.LABEL $label$16
	$4 = $5
	goto $label$14 
	
.LABEL $label$15
	$4 = $2
	
.LABEL $label$14
	$2 = *($6)
	if ( ((uint_32)$2 >= (uint_32)($4 & [255])) ){ goto $label$11 }
	*(($5 = ($0 + [2]))) = $2
	*($6) = $4
	$3 = [1]
	$2 = *(($0 + [1]))
	$4 = *($5)
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$10 }
	*($5) = $2
	$3 = [1]
	*(($0 + [1])) = $4
	$2 = *($0)
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$9 }
	*($0) = $4
	*(($0 + [1])) = $2
	return [1]
	
.LABEL $label$13
	$10 = [0]
	goto $label$1 
	
.LABEL $label$12
	$10 = [7]
	goto $label$1 
	
.LABEL $label$11
	$10 = [7]
	goto $label$1 
	
.LABEL $label$10
	$10 = [7]
	goto $label$1 
	
.LABEL $label$9
	$10 = [7]
	goto $label$1 
	
.LABEL $label$8
	$10 = [7]
	goto $label$1 
	
.LABEL $label$7
	$10 = [7]
	goto $label$1 
	
.LABEL $label$6
	$10 = [7]
	goto $label$1 
	
.LABEL $label$5
	$10 = [7]
	goto $label$1 
	
.LABEL $label$4
	$10 = [7]
	goto $label$1 
	
.LABEL $label$3
	$10 = [7]
	goto $label$1 
	
.LABEL $label$2
	$10 = [7]
	
.LABEL $label$1
	
.LOOP $label$32:
	goto $label$44 
	
.LABEL $label$50
	$3 = $8
	$10 = [3]
	goto $label$32 
	
.LABEL $label$49
	*((($2 = ($0 + $3)) + $6)) = $4
	if ( ((int_32)$3 == (int_32)[-2]) ){ goto $label$33 }
	$10 = [4]
	goto $label$32 
	
.LABEL $label$48
	$3 = ($3 + [-1])
	$4 = *(($2 + [1]))
	if ( ($5 <= $4) ){ goto $label$34 }
	$10 = [5]
	goto $label$32 
	
.LABEL $label$47
	*((($0 + $3) + $6)) = $5
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)[8]) ){ goto $label$37 }
	goto $label$38 
	
.LABEL $label$46
	*($0) = $5
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)[8]) ){ goto $label$35 }
	goto $label$36 
	
.LABEL $label$45
	$8 = ($8 + [1])
	$4 = *($7)
	$7 = $2
	$5 = *($7)
	if ( ($5 <= ($4 & [255])) ){ goto $label$39 }
	$10 = [0]
	goto $label$32 
	
.LABEL $label$44
	$3 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$40 }
	goto $label$41 
	
.LABEL $label$43
	$3 = ((int_32)($7 + [1]) == (int_32)$1)
	$10 = [7]
	goto $label$32 
	
.LABEL $label$42
	return $3
	
.LABEL $label$41
	$10 = [7]
	goto $label$32 
	
.LABEL $label$40
	$10 = [1]
	goto $label$32 
	
.LABEL $label$39
	$10 = [2]
	goto $label$32 
	
.LABEL $label$38
	$10 = [6]
	goto $label$32 
	
.LABEL $label$37
	$10 = [0]
	goto $label$32 
	
.LABEL $label$36
	$10 = [6]
	goto $label$32 
	
.LABEL $label$35
	$10 = [0]
	goto $label$32 
	
.LABEL $label$34
	$10 = [3]
	goto $label$32 
	
.LABEL $label$33
	$10 = [8]
	goto $label$32 
	$4
	return $10
}

int_32 .FUNC $136 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $133($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $143(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

int_32 .FUNC $120 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = *($2)
	$8 = *($0)
	$7 = *($1)
	if ( ((uint_32)$7 >= (uint_32)$8) ){ goto $label$5 }
	if ( ((uint_32)($6 & [255]) >= (uint_32)$7) ){ goto $label$4 }
	*($0) = $6
	*($2) = $8
	$9 = [1]
	goto $label$3 
	
.LABEL $label$5
	$9 = [0]
	if ( ((uint_32)($6 & [255]) >= (uint_32)$7) ){ goto $label$2 }
	*($1) = $6
	*($2) = $7
	$9 = [1]
	$8 = *($0)
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)$8) ){ goto $label$1 }
	*($0) = $6
	*($1) = $8
	$7 = *($2)
	$9 = [2]
	goto $label$1 
	
.LABEL $label$4
	*($0) = $7
	*($1) = $8
	$9 = [1]
	$7 = *($2)
	if ( ((uint_32)$7 >= (uint_32)$8) ){ goto $label$1 }
	*($1) = $7
	*($2) = $8
	$9 = [2]
	
.LABEL $label$3
	$7 = $8
	goto $label$1 
	
.LABEL $label$2
	$7 = $6
	
.LABEL $label$1
	$6 = *($3)
	if ( ((uint_32)$6 >= (uint_32)($7 & [255])) ){ goto $label$10 }
	*($2) = $6
	*($3) = $7
	$6 = *($1)
	$7 = *($2)
	if ( ((uint_32)$7 >= (uint_32)$6) ){ goto $label$9 }
	*($1) = $7
	*($2) = $6
	$6 = *($0)
	$7 = *($1)
	if ( ((uint_32)$7 >= (uint_32)$6) ){ goto $label$8 }
	*($0) = $7
	*($1) = $6
	$9 = ($9 + [3])
	
.LABEL $label$10
	$6 = *($3)
	$7 = *($4)
	if ( ((uint_32)$7 >= (uint_32)$6) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$9 = ($9 + [1])
	$6 = *($3)
	$7 = *($4)
	if ( ($7 <= $6) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$9 = ($9 + [2])
	$6 = *($3)
	$7 = *($4)
	if ( ($7 <= $6) ){ goto $label$6 }
	
.LABEL $label$7
	return $9
	
.LABEL $label$6
	*($3) = $7
	*($4) = $6
	$6 = *($2)
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)$6) ){ goto $label$13 }
	*($2) = $7
	*($3) = $6
	$3 = *($1)
	$7 = *($2)
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$12 }
	*($1) = $7
	*($2) = $3
	$7 = *($0)
	$2 = *($1)
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$11 }
	*($0) = $2
	*($1) = $7
	return ($9 + [4])
	
.LABEL $label$13
	return ($9 + [1])
	
.LABEL $label$12
	return ($9 + [2])
	
.LABEL $label$11
	return ($9 + [3])
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $146(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10192])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $146(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [224])
	$global$0 = $2
	*(($3 = (($2 + [80]) + [16]))) = *(($1 + [32]))
	*(($4 = (($2 + [80]) + [24]))) = *(($1 + [40]))
	*($2 + [80]) = *($1 + [16])
	*($2 + [88]) = *(($1 + [24]))
	$5 = *($1)
	$6 = CALL $131(($2 + [64]), ($1 + [48]))
	$7 = CALL $131(($2 + [48]), ($1 + [60]))
	$8 = CALL $131(($2 + [32]), ($1 + [72]))
	$9 = *($1 + [84])
	*((($2 + [112]) + [24])) = *($4)
	*((($2 + [112]) + [16])) = *($3)
	*($2 + [120]) = *($2 + [88])
	*($2 + [112]) = *($2 + [80])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($10 = (($2 + [192]) + [24]))) = *((($2 + [112]) + [24]))
	*(($11 = (($2 + [192]) + [16]))) = *((($2 + [112]) + [16]))
	*($2 + [200]) = *($2 + [120])
	*($2 + [192]) = *($2 + [112])
	$3 = CALL $131(($2 + [176]), $6)
	$4 = CALL $131(($2 + [160]), $7)
	$12 = CALL $131(($2 + [144]), $8)
	*(($2 + [24])) = *($10)
	*(($2 + [16])) = *($11)
	*($2 + [8]) = *($2 + [200])
	*($2) = *($2 + [192])
	CALL void $0((int_32 $5), (int_64 $2), (int_32 $3), (int_32 $4), (int_32 $12), (int_32 ((int_32)($9 & [255]) != (int_32)[0])), (int_32 $1))
	if ( (*($2 + [144]) & [1]) ){ goto $label$12 }
	if ( (*($2 + [160]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*($12 + [8]))
	if ( ((*($2 + [160]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($4 + [8]))
	$1 = [1]
	if ( ((*($2 + [176]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$1 = [1]
	if ( (*($2 + [176]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($8) & $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($8) & $1) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($8 + [8]))
	$1 = [1]
	if ( ((*($7) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($7) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($6) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($6) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($2 + [224])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [224])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [9175])
	CALL memcpy(($4 + [16]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	CALL $104(*($1), ($4 + [48]))
	CALL $104(*($1), ($4 + [60]))
	CALL $104(*($1), ($4 + [72]))
	$1 = *($1)
	CALL eosio_assert(((int_32)*($1 + [8]) != (int_32)*($1 + [4])), [9175])
	CALL memcpy(($2 + [15]), *($1 + [4]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	*($4 + [84]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9180])
	CALL memcpy(*($4 + [4]), $0, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

int_64 .FUNC $42 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = $1
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$6:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$5 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9661])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159550150574080, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $58($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9661])
	
.LABEL $label$3
	*($2 + [16]) = ((int_64)*($6 + [8]) + (int_64)1)
	$1 = *($0)
	*($2 + [8]) = ($2 + [16])
	CALL eosio_assert([1], [9786])
	CALL $61($0, $6, $1, ($2 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($2 + [16]) = (int_64)1
	$1 = *($0)
	*($2 + [12]) = ($2 + [16])
	*($2 + [8]) = ($2 + [24])
	CALL $62($2, $0, $1, ($2 + [8]))
	
.LABEL $label$1
	$1 = *($2 + [16])
	$global$0 = ($2 + [32])
	return $1
}

void .FUNC $41 (int_64 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*((($4 + [8]) + [8])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	CALL $87(($4 + [52]), [8])
	$2 = *(($4 + [56]))
	$7 = *($4 + [52])
	*($4 + [64]) = $3
	CALL eosio_assert(((int_32)($2 - $7) > (int_32)[7]), [9180])
	CALL memcpy($7, ($4 + [64]), [8])
	CALL $98(($4 + [64]), ($4 + [24]))
	$7 = *($4 + [64])
	CALL send_inline($7, (*($4 + [68]) - $7))
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$4 }
	*($4 + [68]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$5 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$5
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($4 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $138(($4 + [8]))
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9712])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $148($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([128])) + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [112]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [28])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [48])
	*($3 + [64]) = ($5 + [56])
	*($3 + [68]) = ($5 + [64])
	*($3 + [72]) = ($5 + [80])
	CALL $107(($3 + [40]), ($3 + [32]))
	*($5 + [120]) = [-1]
	*($5 + [116]) = $1
	*($3 + [32]) = $5
	$6 = *($5 + [40])
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $57(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $151($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [28])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = *($1 + [16])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($1 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [9821])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9867])
	*($1 + [48]) = [1]
	*(($5 = $4) + [24]) = *($1)
	*($1) = *(*($3))
	$6 = *($1 + [40])
	*($1 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1 + [40])), [9918])
	$3 = [16]
	$7 = ($1 + [16])
	$8 = ($1 + [8])
	$9 = ($1 + [48])
	$11 = *($1 + [16])
	$10 = *(($1 + [20]))
	$12 = ($10 - $11)
	$13 = (CASTING uint_64)(uint_32 $12)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$1 }
	$3 = ( $3 ? ($12 + $3) : ((int_32)$11 == (int_32)$10) )
	$11 = ($1 + [28])
	$12 = *($1 + [28])
	$10 = *(($1 + [32]))
	$14 = ($10 - $12)
	$13 = (CASTING uint_64)(uint_32 $14)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$2 }
	$10 = (( $3 ? ($14 + $3) : ((int_32)$12 == (int_32)$10) ) + [65])
	if ( ($10 <= [513]) ){ goto $label$4 }
	$3 = CALL $148($10)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($10 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $10)
	*($5 + [32]) = ($5 + [8])
	*($5 + [44]) = $8
	*($5 + [48]) = $7
	*($5 + [52]) = $11
	*($5 + [60]) = $9
	*($5 + [40]) = $1
	*($5 + [56]) = ($1 + [40])
	*($5 + [64]) = ($1 + [56])
	*($5 + [68]) = ($1 + [64])
	*($5 + [72]) = ($1 + [80])
	CALL $110(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [116]), $2, $3, $10)
	if ( ($10 <= [513]) ){ goto $label$5 }
	CALL $151($3)
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [40]) = *($1)
	if ( (CALL $144(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$7 }
	$1 = ($1 + [120])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3617214763094933504, ($5 + [32]), $6)
	*($1) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$7
	$global$0 = ($5 + [80])
}

void .FUNC $46 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [8]) = $2
	*($3 + [16]) = $1
	$2 = *($0)
	$4 = *(($0 + [28]))
	$5 = *($0 + [24])
	*($3 + [4]) = ($3 + [8])
	*($3) = ($3 + [16])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($4 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$4 = $6
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$0), [9661])
	goto $label$2 
	
.LABEL $label$3
	$6 = CALL db_find_i64($2, *($0 + [8]), (int_64)7235159550150574080, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $58($0, $6)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$0), [9661])
	
.LABEL $label$2
	CALL eosio_assert([1], [9786])
	CALL $59($0, $7, $2, $3)
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$1
	CALL $60(($3 + [24]), $0, $2, $3)
	$global$0 = ($3 + [32])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [9821])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9867])
	$6 = *($1)
	*(($5 = $4) + [8]) = $6
	*($1 + [8]) = (CASTING uint_64)(uint_32 (*(*($3)) + [40]))
	$7 = *($1 + [40])
	$8 = *(*($3 + [4]))
	*($5 + [32]) = $6
	*($5 + [24]) = $8
	*($5 + [40]) = CALL tapos_block_num()
	*($5 + [44]) = CALL tapos_block_prefix()
	CALL sha256(($5 + [24]), [24], ($5 + [48]))
	*(($1 + [104])) = *((($5 + [48]) + [24]))
	$3 = [16]
	*(($1 + [96])) = *((($5 + [48]) + [16]))
	*(($1 + [88])) = *($5 + [56])
	*($1 + [80]) = *($5 + [48])
	*($1 + [48]) = [2]
	CALL eosio_assert(((int_64)$7 == (int_64)*($1 + [40])), [9918])
	$9 = ($1 + [16])
	$10 = ($1 + [48])
	$11 = ($1 + [80])
	$12 = ($1 + [8])
	$14 = *($1 + [16])
	$13 = *(($1 + [20]))
	$15 = ($13 - $14)
	$6 = (CASTING uint_64)(uint_32 $15)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$3 = ( $3 ? ($15 + $3) : ((int_32)$14 == (int_32)$13) )
	$14 = ($1 + [28])
	$15 = *($1 + [28])
	$13 = *(($1 + [32]))
	$16 = ($13 - $15)
	$6 = (CASTING uint_64)(uint_32 $16)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	$13 = (( $3 ? ($16 + $3) : ((int_32)$15 == (int_32)$13) ) + [65])
	if ( ($13 <= [513]) ){ goto $label$4 }
	$3 = CALL $148($13)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($13 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5 + [28]) = $3
	*($5 + [24]) = $3
	*($5 + [32]) = ($3 + $13)
	*($5 + [16]) = ($5 + [24])
	*($5 + [52]) = $12
	*($5 + [56]) = $9
	*($5 + [60]) = $14
	*($5 + [68]) = $10
	*($5 + [80]) = $11
	*($5 + [48]) = $1
	*($5 + [64]) = ($1 + [40])
	*($5 + [72]) = ($1 + [56])
	*($5 + [76]) = ($1 + [64])
	CALL $110(($5 + [48]), ($5 + [16]))
	CALL db_update_i64(*($1 + [116]), $2, $3, $13)
	if ( ($13 <= [513]) ){ goto $label$5 }
	CALL $151($3)
	
.LABEL $label$5
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [48]) = *($1)
	if ( (CALL $144(($5 + [8]), ($5 + [48]), [8]) == 0) ){ goto $label$7 }
	$1 = ($1 + [120])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3617214763094933504, ($5 + [16]), $7)
	*($1) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, $2, ($5 + [48]))
	
.LABEL $label$7
	$global$0 = ($5 + [96])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $151($0)
	
.LABEL $label$1
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $151($0)
	
.LABEL $label$1
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $89($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $87($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $90($2, $1)
	CALL $92(CALL $91(CALL $91($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $6 (int_64 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$6 = ($global$0 - [240])
	$global$0 = $6
	$7 = CALL current_time()
	*(($6 + [204])) = (int_64)0
	*(($6 + [220])) = (int_64)0
	*(($6 + [228])) = (int_64)0
	*($6 + [188]) = [0]
	*($6 + [192]) = [0]
	*($6 + [196 align=4]) = (int_64)0
	*($6 + [212 align=4]) = (int_64)0
	*($6 + [176]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	*($6 + [144]) = [8391]
	*($6 + [148]) = CALL $145([8391])
	*($6 + [24]) = *($6 + [144])
	$8 = CALL $2(($6 + [152]), ($6 + [24]))
	*($6 + [160]) = $0
	*($6 + [168]) = *($8)
	*($6 + [128]) = [8398]
	*($6 + [132]) = CALL $145([8398])
	*($6 + [16]) = *($6 + [128])
	$8 = CALL $2(($6 + [136]), ($6 + [16]))
	*($6 + [112]) = [8411]
	*($6 + [116]) = CALL $145([8411])
	*($6 + [8]) = *($6 + [112])
	$9 = CALL $2(($6 + [120]), ($6 + [8]))
	*(($6 + [56])) = *(($2 + [8]))
	*(($6 + [72])) = *(($3 + [8]))
	*($6 + [40]) = $1
	*($6 + [32]) = $0
	*($6 + [48]) = *($2)
	*($6 + [64]) = *($3)
	CALL $131(($6 + [80]), $5)
	*($6 + [96]) = $4
	CALL $7(($6 + [212]), ($6 + [160]), $8, $9, ($6 + [32]))
	if ( ((*($6 + [80]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($6 + [88])))
	
.LABEL $label$1
	*(($6 + [196])) = [0]
	*($6 + [40]) = (int_64)0
	*($6 + [32]) = $1
	CALL $8(($6 + [160]), ($6 + [176]))
	$3 = *($6 + [160])
	CALL send_deferred(($6 + [32]), $0, $3, (*($6 + [164]) - $3), [0])
	$3 = *($6 + [160])
	if ( ($3 == 0) ){ goto $label$2 }
	*($6 + [164]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	CALL $9(($6 + [176]))
	$global$0 = ($6 + [240])
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4 + [48])
	$1 = ( *(($4 + [52])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [56])
	$10 = (CASTING uint_64)(uint_32 $1)
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$1 = ($7 + [32])
	$9 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $87($9, $2)
	$1 = *($1)
	$2 = *($9)
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $100(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($5 + [32])
	(unreachable)
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9171])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $2) >> [4])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $88($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ($7 << [4]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$3 = *($7)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [9175])
	CALL memcpy($2, *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [9175])
	CALL memcpy(($2 + [8]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	$2 = ($2 + [16])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9171])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $87($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9175])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8973])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9078])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9011])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9078])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $3 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	$5 = CALL get_action($1, $2, [0], [0])
	CALL eosio_assert(((int_32)$5 > (int_32)[0]), [9130])
	if ( ($5 <= [513]) ){ goto $label$2 }
	$3 = CALL $148($5)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 == (int_32)CALL $fimport$2($1, $2, $3, $5)), [9153])
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*($4 + [8]) = ($3 + $5)
	*($4) = $3
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9175])
	CALL memcpy($0, $3, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [9175])
	CALL memcpy(($0 + [8]), ($3 + [8]), [8])
	*($4 + [4]) = ($3 + [16])
	CALL $5(CALL $4($4, ($0 + [16])), ($0 + [28]))
	$global$0 = ($4 + [16])
}

void .FUNC memory ()
{
}

int_32 .FUNC $1 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$6 = ($global$0 - [80])
	$global$0 = $6
	$7 = [0]
	$8 = *($0)
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$8 != (int_64)$2) ){ goto $label$1 }
	*($6 + [72]) = [8192]
	*($6 + [76]) = CALL $145([8192])
	*($6 + [8]) = *($6 + [72])
	if ( ((int_64)*(CALL $2(($6 + [32]), ($6 + [8]))) == (int_64)$1) ){ goto $label$1 }
	CALL require_auth($1)
	$0 = [0]
	$9 = *($3)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$8 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$2 = $8
	$0 = [1]
	$3 = $7
	$7 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$2 = $8
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$0 = ((int_32)$7 < (int_32)[6])
	$3 = ($7 + [1])
	$7 = $3
	if ( $0 ){ goto $label$6 }
	$0 = [1]
	$7 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$0 = [0]
	
.LABEL $label$2
	CALL eosio_assert($0, [8204])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [8315])
	$7 = [1]
	$0 = *($4)
	CALL eosio_assert(((int_32)( *($4 + [4]) ? uint_32($0 >> [1]) : ($0 & [1]) ) != (int_32)[0]), [8344])
	if ( ($5 == 0) ){ goto $label$1 }
	$7 = [0]
	CALL $3(($6 + [32]), [1], [0])
	*($6 + [16]) = [8361]
	*($6 + [20]) = CALL $145([8361])
	*($6) = *($6 + [16])
	$0 = CALL $2(($6 + [24]), $6)
	if ( ((int_64)*($6 + [40]) != (int_64)*($0)) ){ goto $label$7 }
	$7 = ((int_64)*(*($6 + [48])) == (int_64)$1)
	
.LABEL $label$7
	CALL eosio_assert($7, [8370])
	$7 = *($6 + [60])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($6 + [64])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($6 + [48])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($6 + [52])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = [1]
	
.LABEL $label$1
	$global$0 = ($6 + [80])
	return $7
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	$5 = ($global$0 - [240])
	$global$0 = $5
	$6 = *(($3 + [8]))
	*((($5 + [112]) + [8])) = $6
	$7 = *($3)
	*((($5 + [40]) + [8])) = $6
	*($5 + [112]) = $7
	*($5 + [40]) = $7
	if ( (CALL $1($0, $1, $2, ($5 + [40]), $4, [1]) == 0) ){ goto $label$1 }
	$8 = ($0 + [192])
	$9 = *($3 + [8])
	$10 = *($3)
	$12 = *(($0 + [220]))
	$11 = *(($0 + [216]))
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$4 }
	
.LOOP $label$6:
	$13 = ($12 + [-24])
	$14 = *($13)
	if ( ((int_64)*($14) == (int_64)$1) ){ goto $label$5 }
	$12 = $13
	if ( ((int_32)$11 != (int_32)$13) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$8), [9661])
	$7 = $10
	if ( $14 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = $10
	$13 = CALL db_find_i64(*($8), *(($0 + [200])), (int_64)4229558806663135232, $1)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$2 }
	$14 = CALL $37($8, $13)
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$8), [9661])
	
.LABEL $label$3
	CALL eosio_assert(((int_64)*(($14 + [16])) == (int_64)$9), [9323])
	$7 = ((int_64)*($14 + [8]) + (int_64)$10)
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9366])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9385])
	
.LABEL $label$2
	$12 = *(($0 + [220]))
	$11 = *(($0 + [216]))
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$10 }
	
.LOOP $label$12:
	$13 = ($12 + [-24])
	$14 = *($13)
	if ( ((int_64)*($14) == (int_64)$1) ){ goto $label$11 }
	$12 = $13
	if ( ((int_32)$11 != (int_32)$13) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$8), [9661])
	goto $label$9 
	
.LABEL $label$10
	$14 = ($0 + [200])
	$12 = ($0 + [192])
	$13 = CALL db_find_i64(*($12), *($14), (int_64)4229558806663135232, $1)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$8 }
	$14 = CALL $37($8, $13)
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$8), [9661])
	
.LABEL $label$9
	$6 = *($0)
	CALL eosio_assert([1], [9786])
	CALL eosio_assert(((int_32)*(($14 + [24])) == (int_32)$8), [9821])
	CALL eosio_assert(((int_64)*(($0 + [192])) == (int_64)CALL eosio_assert4()), [9867])
	*($14 + [8]) = $7
	*(($13 = ($14 + [16]))) = $9
	$2 = *($14)
	*($14) = $1
	CALL eosio_assert(((int_64)$2 == (int_64)$1), [9918])
	CALL eosio_assert([1], [9180])
	CALL memcpy(($5 + [128]), $14, [8])
	CALL eosio_assert([1], [9180])
	CALL memcpy((($5 + [128]) | [8]), ($14 + [8]), [8])
	*($5 + [216]) = *($13)
	CALL eosio_assert([1], [9180])
	CALL memcpy((($5 + [128]) + [16]), ($5 + [216]), [8])
	CALL db_update_i64(*($14 + [28]), $6, ($5 + [128]), [24])
	$13 = ($0 + [208])
	if ( (uint_64)($2 <= *($13)) ){ goto $label$7 }
	*($13) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	goto $label$7 
	
.LABEL $label$8
	$6 = *($0)
	CALL eosio_assert(((int_64)*($12) == (int_64)CALL eosio_assert4()), [9735])
	*(($13 = CALL _Znwj([40])) + [24]) = $8
	*($13 + [8]) = $7
	*($13) = $1
	*($13 + [16]) = $9
	CALL eosio_assert([1], [9180])
	CALL memcpy(($5 + [128]), $13, [8])
	CALL eosio_assert([1], [9180])
	CALL memcpy((($5 + [128]) | [8]), ($13 + [8]), [8])
	*($5 + [216]) = *($13 + [16])
	CALL eosio_assert([1], [9180])
	CALL memcpy(($5 + [144]), ($5 + [216]), [8])
	$2 = *($13)
	$14 = CALL db_store_i64(*($14), (int_64)4229558806663135232, $6, $2, ($5 + [128]), [24])
	*($13 + [28]) = $14
	$12 = ($0 + [208])
	if ( (uint_64)($2 <= *($12)) ){ goto $label$13 }
	*($12) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($5 + [216]) = $13
	$2 = *($13)
	*($5 + [128]) = $2
	*($5 + [192]) = $14
	$11 = ($0 + [220])
	$12 = *($11)
	if ( ((uint_32)$12 >= (uint_32)*(($0 + [224]))) ){ goto $label$15 }
	*($12 + [8]) = $2
	*($12 + [16]) = $14
	*($5 + [216]) = [0]
	*($12) = $13
	*($11) = ($12 + [24])
	$13 = *($5 + [216])
	*($5 + [216]) = [0]
	if ( $13 ){ goto $label$14 }
	goto $label$7 
	
.LABEL $label$15
	CALL $38(($0 + [216]), ($5 + [216]), ($5 + [128]), ($5 + [192]))
	$13 = *($5 + [216])
	*($5 + [216]) = [0]
	if ( ($13 == 0) ){ goto $label$7 }
	
.LABEL $label$14
	CALL _ZdlPv($13)
	
.LABEL $label$7
	$6 = *(($3 + [8]))
	*((($5 + [96]) + [8])) = $6
	$15 = *($0)
	$2 = *($3)
	*((($5 + [24]) + [8])) = $6
	*($5 + [96]) = $2
	*($5 + [24]) = $2
	CALL $10($15, ($5 + [24]), $1, $7)
	*($5 + [92]) = [0]
	*($5 + [88]) = $4
	$12 = CALL $137($4, [44], [0])
	CALL eosio_assert([1], [8595])
	$14 = *($5 + [92])
	$13 = *($5 + [88])
	$13 = CALL $132(($5 + [128]), $13, $14, ($12 - $14), $13)
	*($5 + [92]) = ($12 + [1])
	$12 = CALL $142(( *($13 + [8]) ? ($13 + [1]) : (*($5 + [128]) & [1]) ))
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($13 + [8])))
	
.LABEL $label$16
	$16 = (CASTING int_64)(int_32 $12)
	*($5 + [72]) = [8398]
	*($5 + [76]) = CALL $145([8398])
	*($5 + [16]) = *($5 + [72])
	$17 = CALL $39(($5 + [88]), $1, *(CALL $2(($5 + [80]), ($5 + [16]))))
	$3 = ($0 + [72])
	$12 = *(($0 + [100]))
	$11 = *(($0 + [96]))
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$18 }
	
.LOOP $label$20:
	$13 = ($12 + [-24])
	$14 = *($13)
	if ( ((int_64)*($14 + [40]) == (int_64)$9) ){ goto $label$19 }
	$12 = $13
	if ( ((int_32)$11 != (int_32)$13) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$18 }
	CALL eosio_assert(((int_32)*($14 + [112]) == (int_32)$3), [9661])
	goto $label$17 
	
.LABEL $label$18
	$14 = [0]
	$13 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)3617214763094933504, $9)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$17 }
	$14 = CALL $40($3, $13)
	CALL eosio_assert(((int_32)*($14 + [112]) == (int_32)$3), [9661])
	
.LABEL $label$17
	CALL eosio_assert(((int_64)*($14) == (int_64)$16), [8620])
	$7 = CALL current_time()
	$13 = *($14 + [48])
	if ( ((int_32)$13 == (int_32)[2]) ){ goto $label$23 }
	if ( ((int_32)$13 != (int_32)[1]) ){ goto $label$22 }
	$7 = *($0)
	*($5 + [56]) = [8391]
	*($5 + [60]) = CALL $145([8391])
	*($5 + [8]) = *($5 + [56])
	$2 = *(CALL $2(($5 + [64]), ($5 + [8])))
	*(($13 = CALL _Znwj([16]))) = $7
	*($13 + [8]) = $2
	*($5 + [128]) = $13
	$13 = ($13 + [16])
	*($5 + [136]) = $13
	*($5 + [132]) = $13
	CALL $41($7, (int_64)-7297667123730448384, ($5 + [128]), $9)
	$13 = *($5 + [128])
	if ( ($13 == 0) ){ goto $label$21 }
	*($5 + [132]) = $13
	CALL _ZdlPv($13)
	goto $label$21 
	
.LABEL $label$23
	CALL eosio_assert(((uint_64)*($14 + [8]) > (uint_64)((int_64)((int_64)((uint_64)$7 / (uint_64)(int_64)1000000) + (int_64)5) & (int_64)4294967295)), [8645])
	goto $label$21 
	
.LABEL $label$22
	CALL eosio_assert([0], [8695])
	
.LABEL $label$21
	CALL eosio_assert([1], [9423])
	$13 = [0]
	$18 = (uint_64)$9 >> (uint_64)(int_64)8
	$7 = $18)
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$2 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$27 }
	$7 = $2
	$12 = [1]
	$14 = $13
	$13 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$7 = $2
	
.LOOP $label$28:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$25 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$12 = ((int_32)$13 < (int_32)[6])
	$14 = ($13 + [1])
	$13 = $14
	if ( $12 ){ goto $label$28 }
	$12 = [1]
	$13 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$12 = [0]
	
.LABEL $label$24
	CALL eosio_assert($12, [9472])
	$19 = ($0 + [136])
	$3 = ($0 + [112])
	$20 = ($0 + [32])
	$21 = (($5 + [128]) + [49])
	$4 = (($5 + [128]) | [1])
	$11 = (($5 + [128]) + [8])
	$22 = ($5 + [228])
	$23 = ($5 + [236])
	$8 = ($0 + [120])
	$24 = ($0 + [128])
	$25 = ($0 + [144])
	$26 = ($0 + [140])
	$15 = (int_64)0
	
.LOOP $label$30:
	$13 = *($5 + [92])
	$12 = *($5 + [88])
	$14 = *($12)
	if ( ($14 & [1]) ){ goto $label$32 }
	if ( ($13 <= uint_32($14 >> [1])) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	if ( ((uint_32)$13 >= (uint_32)*($12 + [4])) ){ goto $label$29 }
	
.LABEL $label$31
	$13 = CALL $137($12, [44], $13)
	CALL eosio_assert([1], [8714])
	$14 = *($5 + [92])
	$12 = *($5 + [88])
	CALL $132(($5 + [128]), $12, $14, ($13 - $14), $12)
	*($5 + [92]) = ($13 + [1])
	$27 = CALL $141(( *($11) ? $4 : (*($5 + [128]) & [1]) ))
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$33
	$13 = CALL $137(*($5 + [88]), [44], *($5 + [92]))
	CALL eosio_assert([1], [8740])
	$14 = *($5 + [92])
	$12 = *($5 + [88])
	CALL $132(($5 + [128]), $12, $14, ($13 - $14), $12)
	*($5 + [92]) = ($13 + [1])
	$28 = CALL $141(( *($11) ? $4 : (*($5 + [128]) & [1]) ))
	$6 = (CASTING int_64)(int_32 $28)
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$34
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9423])
	$13 = [0]
	$7 = $18
	
.LOOP $label$37:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$36 }
	$2 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$38 }
	$7 = $2
	$12 = [1]
	$14 = $13
	$13 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$38
	$7 = $2
	
.LOOP $label$39:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$36 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$12 = ((int_32)$13 < (int_32)[6])
	$14 = ($13 + [1])
	$13 = $14
	if ( $12 ){ goto $label$39 }
	$12 = [1]
	$13 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$36
	$12 = [0]
	
.LABEL $label$35
	CALL eosio_assert($12, [9472])
	CALL eosio_assert(((int_32)$28 > (int_32)[0]), [8768])
	CALL eosio_assert([1], [9323])
	$15 = ((int_64)$15 + (int_64)$6)
	CALL eosio_assert(((int_64)$15 > (int_64)-4611686018427387904), [9366])
	CALL eosio_assert(((int_64)$15 < (int_64)4611686018427387904), [9385])
	$7 = CALL $42($20, (int_64)103)
	$2 = *($0)
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL eosio_assert4()), [9735])
	*(($13 = CALL _Znwj([64])) + [52]) = $3
	*($13 + [8]) = $16
	*($13) = $7
	*($13 + [16]) = $1
	*($13 + [24]) = $17
	*($13 + [32]) = $6
	*($13 + [40]) = $9
	*($13 + [48]) = $27
	*((($5 + [192]) + [8])) = $21
	*($5 + [196]) = ($5 + [128])
	*($5 + [192]) = ($5 + [128])
	*($5 + [208]) = ($5 + [192])
	*((($5 + [216]) + [8])) = ($13 + [16])
	*($22) = ($13 + [24])
	*((($5 + [216]) + [16])) = ($13 + [32])
	*($23) = ($13 + [48])
	$12 = ($13 + [8])
	*($5 + [220]) = $12
	*($5 + [216]) = $13
	CALL $43(($5 + [216]), ($5 + [208]))
	$7 = *($13)
	*($13 + [56]) = CALL db_store_i64(*($8), (int_64)4229865212519383040, $2, $7, ($5 + [128]), [49])
	if ( (uint_64)($7 <= *($24)) ){ goto $label$40 }
	*($24) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$40
	$7 = *($8)
	$6 = *($13)
	*($5 + [216]) = *($12)
	*($13 + [60]) = CALL db_idx64_store($7, (int_64)4229865212519383040, $2, $6, ($5 + [216]))
	*($5 + [216]) = $13
	$7 = *($13)
	*($5 + [128]) = $7
	$14 = *(($13 + [56]))
	*($5 + [192]) = $14
	$12 = *($26)
	if ( ($12 <= *($25)) ){ goto $label$42 }
	CALL $44($19, ($5 + [216]), ($5 + [128]), ($5 + [192]))
	$13 = *($5 + [216])
	*($5 + [216]) = [0]
	if ( $13 ){ goto $label$41 }
	goto $label$30 
	
.LABEL $label$42
	*($12 + [8]) = $7
	*($12 + [16]) = $14
	*($5 + [216]) = [0]
	*($12) = $13
	*($26) = ($12 + [24])
	$13 = *($5 + [216])
	*($5 + [216]) = [0]
	if ( ($13 == 0) ){ goto $label$30 }
	
.LABEL $label$41
	CALL _ZdlPv($13)
	goto $label$30 
	
.LABEL $label$29
	CALL eosio_assert([1], [9492])
	CALL eosio_assert(((int_64)$10 == (int_64)$15), [8796])
	
.LABEL $label$1
	$global$0 = ($5 + [240])
}

int_32 .FUNC $15 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [368])
	$global$0 = $3
	*(($4 = $3) + [312]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $148($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [264]) + [24])) = (int_64)0
	*((($4 + [264]) + [40])) = [0]
	*($4 + [272]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [252]) = $2
	*($4 + [248]) = $2
	*($4 + [256]) = ($2 + $5)
	*($4 + [352]) = ($4 + [248])
	*($4 + [16]) = ($4 + [264])
	CALL $35(($4 + [16]), ($4 + [352]))
	*(($3 = ($4 + [8]))) = *($4 + [256])
	*($4) = *($4 + [248])
	$3 = *($3)
	*((($4 + [320]) + [8])) = $3
	*(($6 = (($4 + [336]) + [8]))) = $3
	$7 = *($4)
	*($4 + [336]) = $7
	*($4 + [320]) = $7
	$3 = *($6)
	*((($4 + [352]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [336])
	*($4 + [32]) = $1
	*($4 + [352]) = $1
	*((($4 + [16]) + [40])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [124])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [164])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [184])) = (int_64)-1
	*(($4 + [176])) = $0
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*($4 + [208]) = $0
	*($4 + [356]) = ($4 + [312])
	*($4 + [352]) = ($4 + [16])
	CALL $36(($4 + [352]), ($4 + [264]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $151($2)
	
.LABEL $label$4
	CALL $28(($4 + [16]))
	if ( ((*($4 + [296]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [304])))
	
.LABEL $label$5
	$global$0 = ($4 + [368])
	return [1]
}

void .FUNC $16 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [624])
	$global$0 = $3
	*($3 + [368]) = $1
	*($3 + [360]) = ($0 + [72])
	CALL $31(($3 + [456]), ($3 + [360]), ($3 + [368]))
	$4 = [0]
	$5 = [0]
	$6 = *($3 + [460])
	if ( ($6 == 0) ){ goto $label$1 }
	$5 = ( $6 ? [0] : ((int_64)*($3 + [368]) == (int_64)*($6)) )
	
.LABEL $label$1
	$1 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	if ( ($5 == 0) ){ goto $label$2 }
	$4 = ((int_64)*($5) == (int_64)*($3 + [368]))
	
.LABEL $label$2
	CALL eosio_assert($4, [8838])
	$4 = [0]
	if ( ((int_32)*($5 + [48]) != (int_32)[2]) ){ goto $label$3 }
	$4 = ((uint_64)*($5 + [8]) <= (uint_64)((int_64)((int_64)$1 + (int_64)5) & (int_64)4294967295))
	
.LABEL $label$3
	CALL eosio_assert($4, [8868])
	*($3 + [304]) = [8398]
	*($3 + [308]) = CALL $145([8398])
	*($3 + [16]) = *($3 + [304])
	$4 = CALL $2(($3 + [312]), ($3 + [16]))
	*($3 + [296]) = [8398]
	*($3 + [300]) = CALL $145([8398])
	*($3 + [8]) = *($3 + [296])
	CALL $2(($3 + [456]), ($3 + [8]))
	*((($3 + [320]) + [32])) = [0]
	*($3 + [328]) = (int_64)7869342266465626000
	*($3 + [336]) = (int_64)-1
	*($3 + [320]) = *($4)
	*($3 + [344]) = (int_64)0
	$4 = CALL $32(($3 + [320]), (int_64)0, [8887])
	*(($6 = (($3 + [256]) + [32]))) = *(($4 + [40]))
	*(($7 = (($3 + [256]) + [24]))) = *(($4 + [32]))
	*(($8 = (($3 + [256]) + [16]))) = *(($4 + [24]))
	*(($9 = (($3 + [256]) + [8]))) = *(($4 + [16]))
	*($3 + [256]) = *($4 + [8 align=1])
	*(($4 = (($3 + [152]) + [32]))) = *($6)
	*(($6 = (($3 + [152]) + [24]))) = *($7)
	*(($7 = (($3 + [152]) + [16]))) = *($8)
	*(($8 = (($3 + [152]) + [8]))) = *($9)
	*(($9 = (($3 + [112]) + [16]))) = *(($5 + [96]))
	*(($10 = (($3 + [112]) + [24]))) = *(($5 + [104]))
	*($3 + [152]) = *($3 + [256])
	*($3 + [112]) = *($5 + [80])
	*($3 + [120]) = *(($5 + [88]))
	CALL memcpy(($3 + [46]), $2, [66])
	CALL memcpy(($3 + [456]), ($3 + [46]), [66])
	*((($3 + [416]) + [24])) = *($10)
	*((($3 + [416]) + [16])) = *($9)
	*((($3 + [376]) + [8])) = *($8)
	*((($3 + [376]) + [16])) = *($7)
	*((($3 + [376]) + [24])) = *($6)
	*((($3 + [376]) + [32])) = *($4)
	*($3 + [424]) = *($3 + [120])
	*($3 + [416]) = *($3 + [112])
	*($3 + [376]) = *($3 + [152])
	CALL assert_recover_key(($3 + [416]), ($3 + [456]), [66], ($3 + [376]), [34])
	CALL sha256(($3 + [456]), [66], ($3 + [560]))
	*(($4 = (($3 + [528]) + [24]))) = *((($3 + [560]) + [24]))
	*(($6 = (($3 + [528]) + [16]))) = *((($3 + [560]) + [16]))
	*($3 + [536]) = *($3 + [568])
	*($3 + [528]) = *($3 + [560])
	$1 = *($4)
	*((($3 + [592]) + [24])) = $1
	$11 = *($6)
	*((($3 + [592]) + [16])) = $11
	$12 = *($3 + [536])
	*((($3 + [192]) + [40])) = $12
	*(($3 + [240])) = $11
	*(($3 + [248])) = $1
	*((($3 + [192]) + [16])) = $11
	*((($3 + [192]) + [24])) = $1
	*($3 + [600]) = $12
	$1 = *($3 + [528])
	*($3 + [224]) = $1
	*($3 + [592]) = $1
	*($3 + [192]) = $1
	*($3 + [200]) = $12
	if ( CALL $33($0, *($3 + [368]), ($3 + [192]), [0]) ){ goto $label$4 }
	CALL $33($0, *($3 + [368]), ($3 + [192]), [1])
	
.LABEL $label$4
	$1 = *($0)
	*($3 + [24]) = [8909]
	*($3 + [28]) = CALL $145([8909])
	*($3) = *($3 + [24])
	$4 = CALL $2(($3 + [32]), $3)
	*($3 + [456]) = *($5 + [40])
	CALL $34($1, $1, *($4), ($3 + [456]), [15])
	$0 = *($3 + [344])
	if ( ($0 == 0) ){ goto $label$5 }
	$6 = ($3 + [348])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$8 }
	$5 = *(($3 + [344]))
	goto $label$6 
	
.LABEL $label$7
	$5 = $0
	
.LABEL $label$6
	*($6) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$global$0 = ($3 + [624])
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [672])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$7 = CALL $148($2)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$2
	CALL read_action_data($7, $2)
	
.LABEL $label$1
	*($4 + [112]) = (int_64)0
	$3 = CALL memset((($4 + [112]) + [8]), [0], [66])
	*($4 + [100]) = $7
	*($4 + [96]) = $7
	*($4 + [104]) = ($7 + $2)
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [9175])
	CALL memcpy(($4 + [112]), *($4 + [100]), [8])
	*($4 + [100]) = (*($4 + [100]) + [8])
	*($4 + [336]) = ($4 + [96])
	*($4 + [412]) = ($4 + [121])
	*($4 + [408]) = $3
	*($4 + [416]) = ($4 + [122])
	*($4 + [420]) = ($4 + [123])
	*($4 + [424]) = ($4 + [124])
	*($4 + [428]) = ($4 + [125])
	*($4 + [432]) = ($4 + [126])
	*($4 + [436]) = ($4 + [127])
	*($4 + [440]) = ($4 + [128])
	*($4 + [444]) = ($4 + [129])
	*($4 + [448]) = ($4 + [130])
	*($4 + [452]) = ($4 + [131])
	*($4 + [456]) = ($4 + [132])
	*($4 + [460]) = ($4 + [133])
	*($4 + [464]) = ($4 + [134])
	*($4 + [468]) = ($4 + [135])
	*($4 + [472]) = (($4 + [112]) + [24])
	*($4 + [476]) = ($4 + [137])
	*($4 + [480]) = ($4 + [138])
	*($4 + [488]) = ($4 + [140])
	*($4 + [484]) = ($4 + [139])
	*($4 + [492]) = ($4 + [141])
	*($4 + [496]) = ($4 + [142])
	*($4 + [500]) = ($4 + [143])
	*($4 + [504]) = ($4 + [144])
	*($4 + [508]) = ($4 + [145])
	*($4 + [512]) = ($4 + [146])
	*($4 + [516]) = ($4 + [147])
	*($4 + [520]) = ($4 + [148])
	*($4 + [524]) = ($4 + [149])
	*($4 + [528]) = ($4 + [150])
	*($4 + [532]) = ($4 + [151])
	*($4 + [536]) = (($4 + [112]) + [40])
	*($4 + [540]) = ($4 + [153])
	*($4 + [544]) = ($4 + [154])
	*($4 + [548]) = ($4 + [155])
	*($4 + [552]) = ($4 + [156])
	*($4 + [556]) = ($4 + [157])
	*($4 + [564]) = ($4 + [159])
	*($4 + [560]) = ($4 + [158])
	*($4 + [568]) = (($4 + [112]) + [48])
	*($4 + [572]) = ($4 + [161])
	*($4 + [576]) = ($4 + [162])
	*($4 + [580]) = ($4 + [163])
	*($4 + [584]) = ($4 + [164])
	*($4 + [588]) = ($4 + [165])
	*($4 + [592]) = ($4 + [166])
	*($4 + [596]) = ($4 + [167])
	*($4 + [600]) = (($4 + [112]) + [56])
	*($4 + [604]) = ($4 + [169])
	*($4 + [608]) = ($4 + [170])
	*($4 + [612]) = ($4 + [171])
	*($4 + [616]) = ($4 + [172])
	*($4 + [620]) = ($4 + [173])
	*($4 + [624]) = ($4 + [174])
	*($4 + [628]) = ($4 + [175])
	*($4 + [632]) = (($4 + [112]) + [64])
	*($4 + [640]) = (($4 + [112]) + [66])
	*($4 + [636]) = ($4 + [177])
	*($4 + [644]) = ($4 + [179])
	*($4 + [648]) = ($4 + [180])
	*($4 + [652]) = ($4 + [181])
	*($4 + [656]) = ($4 + [182])
	*($4 + [660]) = ($4 + [183])
	*($4 + [664]) = ($4 + [184])
	*($4 + [668]) = ($4 + [185])
	CALL $30(($4 + [408]), ($4 + [336]))
	*(($8 = (($4 + [80]) + [8]))) = *($4 + [104])
	*($4 + [80]) = *($4 + [96])
	$8 = *($8)
	*((($4 + [192]) + [8])) = $8
	*(($9 = (($4 + [264]) + [8]))) = $8
	$10 = *($4 + [80])
	*($4 + [264]) = $10
	*($4 + [192]) = $10
	$8 = *($9)
	*((($4 + [336]) + [8])) = $8
	*((($4 + [408]) + [24])) = $8
	*($4 + [408]) = $0
	*($4 + [416]) = $1
	$1 = *($4 + [264])
	*($4 + [424]) = $1
	*($4 + [336]) = $1
	*((($4 + [408]) + [40])) = $0
	*((($4 + [408]) + [48])) = (int_64)-1
	*((($4 + [408]) + [56])) = (int_64)0
	*((($4 + [408]) + [64])) = [0]
	*(($4 + [488])) = $0
	*(($4 + [496])) = (int_64)-1
	*(($4 + [504])) = (int_64)0
	*(($4 + [512])) = [0]
	*(($4 + [516])) = [0]
	*(($4 + [528])) = $0
	*(($4 + [536])) = (int_64)-1
	*(($4 + [544])) = (int_64)0
	*(($4 + [552])) = [0]
	*(($4 + [556])) = [0]
	*($4 + [440]) = $0
	*($4 + [480]) = $0
	*($4 + [520]) = $0
	*($4 + [560]) = $0
	*(($4 + [576])) = (int_64)-1
	*(($4 + [568])) = $0
	*(($4 + [584])) = (int_64)0
	*(($4 + [592])) = [0]
	*(($4 + [608])) = $0
	*(($4 + [616])) = (int_64)-1
	*(($4 + [624])) = (int_64)0
	*(($4 + [632])) = [0]
	*($4 + [600]) = $0
	$0 = *($4 + [112])
	CALL memcpy(($4 + [192]), $3, [66])
	CALL memcpy(($4 + [264]), ($4 + [192]), [66])
	$3 = (($4 + [408]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL memcpy(($4 + [336]), ($4 + [264]), [66])
	CALL memcpy(($4 + [14]), ($4 + [336]), [66])
	CALL void $3((int_32 $0), (int_64 ($4 + [14])), (int_32 $6))
	if ( ($2 <= [513]) ){ goto $label$5 }
	CALL $151($7)
	
.LABEL $label$5
	CALL $28(($4 + [408]))
	$global$0 = ($4 + [672])
	return [1]
}

void .FUNC $10 (int_64 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$4 = ($global$0 - [240])
	$global$0 = $4
	*($4 + [120]) = [8398]
	*($4 + [124]) = CALL $145([8398])
	*($4 + [32]) = *($4 + [120])
	$5 = CALL $2(($4 + [128]), ($4 + [32]))
	$6 = [0]
	*(($4 + [168])) = [0]
	*($4 + [144]) = $0
	*($4 + [152]) = (int_64)-1
	*($4 + [160]) = (int_64)0
	$7 = *($5)
	*($4 + [136]) = $7
	$5 = [0]
	$8 = CALL db_find_i64($7, $0, (int_64)-3665743317141815296, *($1 + [8]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $11(($4 + [136]), $8)
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)($4 + [136])), [9661])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8415])
	if ( (uint_64)(*($1) <= *($5 + [40])) ){ goto $label$2 }
	$6 = ((uint_64)*($5 + [48]) >= (uint_64)$3)
	
.LABEL $label$2
	CALL eosio_assert($6, [8438])
	*($4 + [104]) = [8470]
	*($4 + [108]) = CALL $145([8470])
	*($4 + [24]) = *($4 + [104])
	$9 = CALL $2(($4 + [112]), ($4 + [24]))
	*($4 + [88]) = [8391]
	*($4 + [92]) = CALL $145([8391])
	*($4 + [16]) = *($4 + [88])
	$7 = *(CALL $2(($4 + [96]), ($4 + [16])))
	*($4 + [56]) = [8398]
	*($4 + [60]) = CALL $145([8398])
	*($4 + [8]) = *($4 + [56])
	$10 = CALL $2(($4 + [64]), ($4 + [8]))
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$6 }
	$6 = [0]
	$8 = *([0] + [9188])
	
.LOOP $label$8:
	*((($4 + [176]) + ($5 = $6))) = *(($8 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$6 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$7 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$8 }
	
.LABEL $label$7
	*(($4 + [48])) = [0]
	*($4 + [40]) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$5 }
	*($4 + [40]) = ($6 << [1])
	$8 = (($4 + [40]) | [1])
	goto $label$4 
	
.LABEL $label$6
	*(($4 + [48])) = [0]
	*($4 + [40]) = (int_64)0
	*($4 + [40]) = [0]
	$5 = (($4 + [40]) | [1])
	goto $label$3 
	
.LABEL $label$5
	$11 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($11)
	*($4 + [40]) = ($11 | [1])
	*($4 + [48]) = $8
	*($4 + [44]) = $6
	
.LABEL $label$4
	$11 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$9:
	*(($8 + $5)) = *((($4 + [176]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$9 }
	$5 = ($8 + $6)
	
.LABEL $label$3
	*($5) = [0]
	*(($6 = (($4 + [72]) + [8]))) = *(($1 + [8]))
	*($4 + [72]) = *($1)
	$8 = *($4 + [48])
	*($4 + [48]) = [0]
	$2 = *($4 + [40])
	*($4 + [40]) = (int_64)0
	$3 = *($9)
	$12 = *($10)
	*(($5 = CALL _Znwj([16]))) = $0
	*($5 + [8]) = $7
	*(($11 = ($4 + [216]))) = $8
	*(($4 + [200])) = *($6)
	*($4 + [224]) = $5
	*($4 + [176]) = $0
	*($4 + [184]) = $12
	*($4 + [208]) = $2
	$5 = ($5 + [16])
	*($4 + [232]) = $5
	*($4 + [228]) = $5
	*($4 + [192]) = *($4 + [72])
	CALL $12($3, (int_64)-3617168760277827584, ($4 + [224]), ($4 + [176]))
	if ( ((*($4 + [208]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$10
	$5 = *($4 + [224])
	if ( ($5 == 0) ){ goto $label$11 }
	*($4 + [228]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$8 = *($4 + [160])
	if ( ($8 == 0) ){ goto $label$12 }
	$11 = ($4 + [164])
	$5 = *($11)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$14 }
	
.LOOP $label$15:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$16 }
	CALL _ZdlPv($6)
	
.LABEL $label$16
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$15 }
	$5 = *(($4 + [160]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $8
	
.LABEL $label$13
	*($11) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$12
	$global$0 = ($4 + [240])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9712])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $148($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [64]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [56])
	CALL $101(($3 + [32]), ($3 + [24]))
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $102(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $151($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $12 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $87($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $103(($4 + [72]), ($4 + [64]))
	CALL $98(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $138(($4 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [240])
	$global$0 = $3
	CALL memory()
	[0]
	[0]
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$3 }
	*($3 + [224]) = [8361]
	*($3 + [228]) = CALL $145([8361])
	*($3 + [96]) = *($3 + [224])
	CALL $2(($3 + [232]), ($3 + [96]))
	[1]
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	
.LABEL $label$3
	*($3 + [208]) = [8470]
	*($3 + [212]) = CALL $145([8470])
	*($3 + [88]) = *($3 + [208])
	CALL $2(($3 + [216]), ($3 + [88]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$6 }
	*($3 + [192]) = [8361]
	*($3 + [196]) = CALL $145([8361])
	*($3 + [80]) = *($3 + [192])
	CALL $2(($3 + [200]), ($3 + [80]))
	[1]
	$4 = [1]
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$5 }
	
.LABEL $label$6
	*($3 + [176]) = [8482]
	*($3 + [180]) = CALL $145([8482])
	*($3 + [72]) = *($3 + [176])
	CALL $2(($3 + [184]), ($3 + [72]))
	if ( ((int_64)$1 != (int_64)6138663577826885632) ){ goto $label$4 }
	*($3 + [160]) = [8488]
	*($3 + [164]) = CALL $145([8488])
	*($3 + [64]) = *($3 + [160])
	$4 = ((int_64)$2 == (int_64)-6569208335818555392)
	CALL $2(($3 + [168]), ($3 + [64]))
	
.LABEL $label$5
	if ( ($4 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	if ( ([0] == 0) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ((int_64)$2 <= (int_64)-4417247484950609921) ){ goto $label$12 }
	if ( ((int_64)$2 > (int_64)7615187050854088703) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-4417247484950609920) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [1]
	*($3 + [24]) = *($3 + [136])
	CALL $15($0, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)-7297667123730448384) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-5003315193367756800) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-4992623624440512512) ){ goto $label$1 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [2]
	*($3 + [16]) = *($3 + [144])
	CALL $17($0, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)7615187050854088704) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$1 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [3]
	*($3 + [8]) = *($3 + [152])
	CALL $19($0, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$10
	*($3 + [124]) = [0]
	*($3 + [120]) = [4]
	*($3 + [40]) = *($3 + [120])
	CALL $21($0, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [132]) = [0]
	*($3 + [128]) = [5]
	*($3 + [32]) = *($3 + [128])
	CALL $23($0, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [108]) = [0]
	*($3 + [104]) = [6]
	*($3 + [56]) = *($3 + [104])
	CALL $25($0, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [116]) = [0]
	*($3 + [112]) = [7]
	*($3 + [48]) = *($3 + [112])
	CALL $27($0, $1, ($3 + [48]))
	
.LABEL $label$1
	CALL $140([0])
	$global$0 = ($3 + [240])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [9821])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9867])
	*(($5 = $4) + [24]) = *($1)
	*($1) = *(*($3))
	*($1 + [8]) = (CASTING uint_64)(uint_32 (*(*($3 + [4])) + [15]))
	*($1 + [56]) = *(*($3 + [8]))
	*($1 + [48]) = [1]
	$6 = *($1 + [40])
	$7 = *(*($3 + [12]))
	$8 = CALL $145([8541])
	if ( ($8 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9225])
	goto $label$3 
	
.LABEL $label$4
	if ( ($8 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = (int_64)0
	
.LOOP $label$5:
	$10 = *(($8 + [8540]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9270])
	
.LABEL $label$6
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$5 }
	$11 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$11 = (int_64)4
	
.LABEL $label$1
	$12 = ($1 + [8])
	$13 = ($1 + [48])
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9423])
	$9 = (uint_64)$11 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$14 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$9 = $14
	$10 = [1]
	$15 = $8
	$8 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$9 = $14
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$15 = ($8 + [1])
	$8 = $15
	if ( $10 ){ goto $label$11 }
	$10 = [1]
	$8 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$10 = [0]
	
.LABEL $label$7
	CALL eosio_assert($10, [9472])
	*(($1 + [72])) = $11
	*($1 + [64]) = $7
	$8 = *($3 + [16])
	$15 = ($1 + [16])
	if ( ((int_32)$15 == (int_32)$8) ){ goto $label$12 }
	CALL $117($15, *($8), *($8 + [4]))
	
.LABEL $label$12
	$10 = ($8 + [12])
	$3 = ($1 + [28])
	if ( ((int_32)$3 == (int_32)$10) ){ goto $label$13 }
	CALL $117($3, *($10), *(($8 + [16])))
	
.LABEL $label$13
	CALL eosio_assert(((int_64)$6 == (int_64)*(($1 + [40]))), [9918])
	$16 = *($1 + [16])
	$10 = *(($1 + [20]))
	$17 = ($10 - $16)
	$9 = (CASTING uint_64)(uint_32 $17)
	$8 = [16]
	
.LOOP $label$14:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$14 }
	$8 = ( $8 ? ($17 + $8) : ((int_32)$16 == (int_32)$10) )
	$16 = *($1 + [28])
	$10 = *(($1 + [32]))
	$17 = ($10 - $16)
	$9 = (CASTING uint_64)(uint_32 $17)
	
.LOOP $label$15:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$15 }
	$10 = (( $8 ? ($17 + $8) : ((int_32)$16 == (int_32)$10) ) + [65])
	if ( ($10 <= [513]) ){ goto $label$17 }
	$8 = CALL $148($10)
	goto $label$16 
	
.LABEL $label$17
	$8 = ($4 - (($10 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$16
	*($5 + [12]) = $8
	*($5 + [8]) = $8
	*($5 + [16]) = ($8 + $10)
	*($5 + [32]) = ($5 + [8])
	*($5 + [44]) = $12
	*($5 + [48]) = $15
	*($5 + [52]) = $3
	*($5 + [60]) = $13
	*($5 + [40]) = $1
	*($5 + [56]) = ($1 + [40])
	*($5 + [64]) = ($1 + [56])
	*($5 + [68]) = ($1 + [64])
	*($5 + [72]) = ($1 + [80])
	CALL $110(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [116]), $2, $8, $10)
	if ( ($10 <= [513]) ){ goto $label$18 }
	CALL $151($8)
	
.LABEL $label$18
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$19 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$19
	*($5 + [40]) = *($1)
	if ( (CALL $144(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$20 }
	$10 = ($1 + [120])
	$8 = *($10)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$21 }
	$8 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3617214763094933504, ($5 + [32]), $6)
	*($10) = $8
	
.LABEL $label$21
	CALL db_idx64_update($8, $2, ($5 + [40]))
	
.LABEL $label$20
	$global$0 = ($5 + [80])
}

void .FUNC $18 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [16]) = [8398]
	*($1 + [20]) = CALL $145([8398])
	*($1 + [8]) = *($1 + [16])
	CALL require_auth(*(CALL $2(($1 + [24]), ($1 + [8]))))
	$2 = CALL $145([8541])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9225])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8540]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9270])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)4
	
.LABEL $label$1
	CALL $29($0, $3)
	$global$0 = ($1 + [32])
}

int_32 .FUNC $19 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [240])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $148($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [28])) = $2
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [116])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [128])) = $0
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [156])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $151($2)
	
.LABEL $label$5
	CALL $28(($4 + [8]))
	$global$0 = ($4 + [240])
	return [1]
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9712])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $148($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9175])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9175])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $106(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $151($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9821])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9867])
	$5 = *($1)
	$6 = *(*($3))
	*($1) = $6
	*($1 + [8]) = *(*($3 + [4]))
	CALL eosio_assert(((int_64)$5 == (int_64)$6), [9918])
	CALL eosio_assert([1], [9180])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9180])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [64])
	$global$0 = $4
	$5 = *($2)
	$6 = *($2 + [4])
	*(($4 + [24])) = *(($0 + [24]))
	*(($4 + [16])) = *(($0 + [16]))
	$7 = ($0 + [40])
	*(($4 + [40])) = *($7)
	*(($4 + [48])) = *(($0 + [48]))
	*(($4 + [56])) = *(($0 + [56]))
	*($4 + [8]) = *(($0 + [8]))
	*($4) = *($0)
	*($4 + [32]) = *($0 + [32])
	CALL sha256($4, [64], ($0 + [32]))
	$8 = *($7)
	$0 = (($5 - $6) + $3)
	if ( ($0 == 0) ){ goto $label$1 }
	$8 = ((uint_64)$8 % (uint_64)(CASTING uint_64)(uint_32 $0))
	
.LABEL $label$1
	$5 = ($2 + [4])
	CALL $119(*($2), *($5), $4)
	$3 = (CASTING uint_32)(uint_64 $8)
	$5 = *($5)
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$2 }
	$7 = ($5 + [-1])
	
.LOOP $label$3:
	$6 = *($0)
	$5 = ($3 & [255])
	$3 = ($3 + ((uint_32)$5 >= (uint_32)$6))
	if ( ($5 <= $6) ){ goto $label$2 }
	$5 = ((int_32)$7 != (int_32)$0)
	$0 = ($0 + [1])
	if ( $5 ){ goto $label$3 }
	
.LABEL $label$2
	*($4) = $3
	$0 = *($1 + [4])
	if ( ((int_32)$0 == (int_32)*($1 + [8])) ){ goto $label$5 }
	*($0) = $3
	*(($0 = ($1 + [4]))) = (*($0) + [1])
	goto $label$4 
	
.LABEL $label$5
	CALL $51($1, $4)
	
.LABEL $label$4
	$0 = ($2 + [4])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)*($2 + [8])) ){ goto $label$7 }
	*($3) = *($4)
	*($0) = (*($0) + [1])
	goto $label$6 
	
.LABEL $label$7
	CALL $51($2, $4)
	
.LABEL $label$6
	$0 = *($4)
	$global$0 = ($4 + [64])
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$1 = (((uint_32)$1 / (uint_32)[13]) & [3])
	if ( ($1 == 0) ){ goto $label$15 }
	if ( ((int_32)$1 == (int_32)[2]) ){ goto $label$16 }
	if ( ((int_32)$1 != (int_32)[3]) ){ goto $label$14 }
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $145([8496])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$10 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$16
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $145([8500])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$13 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$15
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $145([8504])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$7 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$14
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $145([8508])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$13
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$12
	CALL memcpy($2, [8500], $1)
	
.LABEL $label$11
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$10
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$9
	CALL memcpy($2, [8496], $1)
	
.LABEL $label$8
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$7
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$6
	CALL memcpy($2, [8504], $1)
	
.LABEL $label$5
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$4
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$3
	CALL memcpy($2, [8508], $1)
	
.LABEL $label$2
	*(($2 + $1)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL $130($0)
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$1 = ((uint_32)$1 % (uint_32)[13])
	if ( ((uint_32)$1 > (uint_32)[11]) ){ goto $label$41 }
	goto $label$53 
	
.LABEL $label$53
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $145([8512])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$37 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$52
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $145([8535])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$40 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$51
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $145([8520])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$34 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$50
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $145([8530])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$31 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$49
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $145([8516])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$28 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$48
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $145([8514])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$25 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$47
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $145([8518])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$22 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$46
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $145([8526])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$19 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$45
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $145([8522])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$16 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$44
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $145([8524])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$13 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$43
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $145([8528])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$10 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$42
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $145([8533])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$7 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$41
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $145([8537])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$40
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$39
	CALL memcpy($2, [8535], $1)
	
.LABEL $label$38
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$37
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$36
	CALL memcpy($2, [8512], $1)
	
.LABEL $label$35
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$34
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$33
	CALL memcpy($2, [8520], $1)
	
.LABEL $label$32
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$31
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$30
	CALL memcpy($2, [8530], $1)
	
.LABEL $label$29
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$28
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$27
	CALL memcpy($2, [8516], $1)
	
.LABEL $label$26
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$25
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$24
	CALL memcpy($2, [8514], $1)
	
.LABEL $label$23
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$22
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$21
	CALL memcpy($2, [8518], $1)
	
.LABEL $label$20
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$19
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$18
	CALL memcpy($2, [8526], $1)
	
.LABEL $label$17
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$16
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$15
	CALL memcpy($2, [8522], $1)
	
.LABEL $label$14
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$13
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$12
	CALL memcpy($2, [8524], $1)
	
.LABEL $label$11
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$10
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$9
	CALL memcpy($2, [8528], $1)
	
.LABEL $label$8
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$7
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$6
	CALL memcpy($2, [8533], $1)
	
.LABEL $label$5
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$4
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$3
	CALL memcpy($2, [8537], $1)
	
.LABEL $label$2
	*(($2 + $1)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL $130($0)
	$1
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL $52(($2 + [16]), $1)
	CALL $53($2, $1)
	$1 = *($2)
	$3 = ($1 & [1])
	$1 = CALL $136(($2 + [16]), ( *($2 + [8]) ? ($2 | [1]) : $3 ), ( *($2 + [4]) ? uint_32($1 >> [1]) : $3 ))
	$4 = *($1)
	*($1) = (int_64)0
	*($0) = $4
	$0 = ($1 + [8])
	*(($0 + [8])) = *($0)
	*($0) = [0]
	if ( (*($2) & [1]) ){ goto $label$3 }
	if ( (*($2 + [16]) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*(($2 + [8])))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($2 + [24]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $34 (int_64 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = ($global$0 - [144])
	$global$0 = $5
	*($5 + [112]) = $2
	*($5 + [120]) = $0
	$2 = CALL current_time()
	*(($5 + [76])) = (int_64)0
	*(($5 + [92])) = (int_64)0
	*(($5 + [100])) = (int_64)0
	*($5 + [60]) = [0]
	*($5 + [64]) = [0]
	*($5 + [68 align=4]) = (int_64)0
	*($5 + [84 align=4]) = (int_64)0
	*($5 + [48]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	*($5 + [16]) = [8391]
	*($5 + [20]) = CALL $145([8391])
	*($5 + [8]) = *($5 + [16])
	$6 = CALL $2(($5 + [24]), ($5 + [8]))
	*($5 + [32]) = $0
	*($5 + [40]) = *($6)
	CALL $82(($5 + [84]), ($5 + [32]), ($5 + [120]), ($5 + [112]), $3)
	$0 = *($5 + [120])
	*($5 + [68]) = $4
	*($5 + [40]) = (int_64)0
	*($5 + [32]) = $1
	CALL $8(($5 + [128]), ($5 + [48]))
	$4 = *($5 + [128])
	CALL send_deferred(($5 + [32]), $0, $4, (*($5 + [132]) - $4), [0])
	$4 = *($5 + [128])
	if ( ($4 == 0) ){ goto $label$1 }
	*($5 + [132]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$1
	CALL $9(($5 + [48]))
	$global$0 = ($5 + [144])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [48]) = [1]
	*($1 + [40]) = *(*($4 + [4]))
	$4 = [16]
	$5 = ($1 + [16])
	$6 = ($1 + [48])
	$8 = *($1 + [16])
	$7 = *(($1 + [20]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 $9)
	$11 = *($0)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	$4 = ( $4 ? ($9 + $4) : ((int_32)$8 == (int_32)$7) )
	$8 = ($1 + [28])
	$9 = *($1 + [28])
	$7 = *(($1 + [32]))
	$12 = ($7 - $9)
	$10 = (CASTING uint_64)(uint_32 $12)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	$7 = (( $4 ? ($12 + $4) : ((int_32)$9 == (int_32)$7) ) + [65])
	if ( ($7 <= [513]) ){ goto $label$4 }
	$4 = CALL $148($7)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $7)
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = $5
	*($3 + [36]) = $8
	*($3 + [40]) = ($1 + [40])
	*($3 + [44]) = $6
	*($3 + [48]) = ($1 + [56])
	*($3 + [52]) = ($1 + [64])
	*($3 + [56]) = ($1 + [80])
	CALL $110(($3 + [24]), ($3 + [16]))
	$10 = *($1 + [40])
	*($1 + [116]) = CALL db_store_i64(*($11 + [8]), (int_64)3617214763094933504, *(*($0 + [8])), $10, $4, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $151($4)
	
.LABEL $label$5
	if ( (uint_64)($10 <= *($11 + [16])) ){ goto $label$6 }
	*(($11 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$10 = *(($1 + [40]))
	$13 = *(($11 + [8]))
	$14 = *(*(($0 + [8])))
	*($3 + [24]) = *($1)
	*($1 + [120]) = CALL db_idx64_store($13, (int_64)3617214763094933504, $14, $10, ($3 + [24]))
	$global$0 = ($3 + [64])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [28])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [32])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$2 = *($1 + [16])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($1 + [20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9175])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9175])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9175])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($4, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $117 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($4 - $5)) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = [2147483647]
	if ( ((uint_32)$4 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($4 << [1])
	$2 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$6
	$5 = CALL _Znwj($2)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $2)
	CALL memcpy($5, $1, $3)
	$1 = ($0 + [4])
	$0 = (*($0 + [4]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$4 = (*($0 + [4]) - $5)
	$6 = ( ($1 + $4) ? $2 : ((uint_32)$3 > (uint_32)$4) )
	$7 = ($6 - $1)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $7)
	
.LABEL $label$7
	$1 = ($0 + [4])
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$8 }
	$0 = ($2 - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(*($1), $6, $0)
	$0 = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$8
	$0 = ($5 + $7)
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $138($0)
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9712])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $148($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [52]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [48])
	CALL $115(($3 + [40]), ($3 + [32]))
	*($5 + [60]) = [-1]
	*($5 + [56]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $44(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $151($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9175])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $104(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $112 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL eosio_assert([1], [9180])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [9180])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159550150574080, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $111(*($1), *($0 + [8]))
	CALL $111(*($1), *($0 + [12]))
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [16]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9180])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [9180])
	CALL memcpy(*($0 + [4]), $4, [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9180])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9180])
	CALL memcpy(*($7), $6, [1])
	$4 = (*($7) + [1])
	*($7) = $4
	$6 = ($6 + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $139 ()
{
	return [10196]
}

int_32 .FUNC $118 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL eosio_assert([1], [9180])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [9180])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159550150574080, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $119 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	
.LOOP $label$1:
	$5 = ($1 + [-2])
	$6 = ($1 + [-1])
	$4 = $0
	$0 = ($1 - $4)
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$6 }
	
.LOOP $label$8:
	if ( ((int_32)$0 <= (int_32)[30]) ){ goto $label$20 }
	$7 = ($4 + uint_32($0 >> [1]))
	if ( ((int_32)$0 < (int_32)[1000]) ){ goto $label$21 }
	$0 = uint_32($0 >> [2])
	$8 = CALL $120($4, ($4 + $0), $7, ($7 + $0), $6, $2)
	goto $label$19 
	
.LABEL $label$21
	$0 = *($6)
	$9 = *($4)
	$10 = *($7)
	if ( ((uint_32)$10 >= (uint_32)$9) ){ goto $label$24 }
	if ( ((uint_32)($0 & [255]) >= (uint_32)$10) ){ goto $label$23 }
	*($4) = $0
	*($6) = $9
	$8 = [1]
	$9 = *($7)
	$3 = *($4)
	if ( ($3 <= $9) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$24
	$8 = [0]
	if ( ((uint_32)($0 & [255]) >= (uint_32)$10) ){ goto $label$19 }
	*($7) = $0
	*($6) = $10
	$8 = [1]
	$10 = *($4)
	$0 = *($7)
	if ( ((uint_32)$0 >= (uint_32)$10) ){ goto $label$19 }
	*($4) = $0
	*($7) = $10
	goto $label$22 
	
.LABEL $label$23
	*($4) = $10
	*($7) = $9
	$8 = [1]
	$0 = *($6)
	if ( ((uint_32)$0 >= (uint_32)$9) ){ goto $label$19 }
	*($7) = $0
	*($6) = $9
	
.LABEL $label$22
	$8 = [2]
	$9 = *($7)
	$3 = *($4)
	if ( ($3 <= $9) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$0 = *($4 + [2])
	$9 = *($4)
	$10 = *($4 + [1])
	if ( ((uint_32)$10 >= (uint_32)$9) ){ goto $label$33 }
	$11 = ($0 & [255])
	if ( ((uint_32)$11 >= (uint_32)$10) ){ goto $label$32 }
	*($4) = $0
	*(($4 + [2])) = $9
	goto $label$31 
	
.LABEL $label$33
	$11 = ($0 & [255])
	if ( ((uint_32)$11 >= (uint_32)$10) ){ goto $label$29 }
	*(($4 + [2])) = $10
	*(($12 = ($4 + [1]))) = $0
	if ( ((uint_32)$11 >= (uint_32)$9) ){ goto $label$30 }
	*($4) = $0
	*($12) = $9
	$12 = [3]
	$6 = ($4 + [3])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$32
	*($4) = $10
	*(($10 = ($4 + [1]))) = $9
	if ( ((uint_32)$11 >= (uint_32)$9) ){ goto $label$29 }
	*(($4 + [2])) = $9
	*($10) = $0
	
.LABEL $label$31
	$10 = $9
	
.LABEL $label$30
	$12 = [3]
	$6 = ($4 + [3])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$10 = $0
	$12 = [3]
	$6 = ($4 + [3])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$25 }
	
.LABEL $label$28
	$7 = [0]
	$11 = *($6)
	if ( ((uint_32)$11 >= (uint_32)($10 & [255])) ){ goto $label$34 }
	$13 = [2]
	goto $label$3 
	
.LABEL $label$34
	$13 = [0]
	goto $label$3 
	
.LABEL $label$27
	$13 = [7]
	goto $label$3 
	
.LABEL $label$26
	$13 = [7]
	goto $label$3 
	
.LABEL $label$25
	$13 = [7]
	goto $label$3 
	
.LABEL $label$19
	$9 = *($7)
	$3 = *($4)
	if ( ((uint_32)$3 >= (uint_32)$9) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = $6
	$3 = ($4 + [1])
	if ( ($3 <= $10) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$0 = $5
	
.LOOP $label$35:
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$15 }
	$10 = *($0)
	$11 = ($0 + [-1])
	$0 = $11
	if ( ((uint_32)$10 >= (uint_32)$9) ){ goto $label$35 }
	*($4) = $10
	*(($10 = ($11 + [1]))) = $3
	$8 = ($8 + [1])
	$3 = ($4 + [1])
	if ( ((uint_32)$3 >= (uint_32)$10) ){ goto $label$14 }
	
.LABEL $label$16
	
.LOOP $label$36:
	$0 = ($3 + [-1])
	$11 = *($7)
	
.LOOP $label$37:
	$9 = ($11 & [255])
	$0 = ($0 + [1])
	$12 = *($0)
	if ( ($12 <= $9) ){ goto $label$37 }
	$3 = ($0 + [1])
	
.LOOP $label$38:
	$10 = ($10 + [-1])
	$11 = *($10)
	if ( ((uint_32)$11 >= (uint_32)$9) ){ goto $label$38 }
	if ( ((uint_32)$0 > (uint_32)$10) ){ goto $label$39 }
	*($0) = $11
	*($10) = $12
	$7 = ( $10 ? $7 : ((int_32)$7 == (int_32)$0) )
	$8 = ($8 + [1])
	goto $label$36 
	
.LABEL $label$39
	$3 = $0
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$12 = ($4 + [1])
	$9 = *($6)
	if ( ($3 <= $9) ){ goto $label$44 }
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$43 }
	$12 = ($4 + [2])
	
.LOOP $label$46:
	$0 = ($12 + [-1])
	$10 = *($0)
	if ( ($3 <= $10) ){ goto $label$45 }
	$12 = ($12 + [1])
	if ( ((int_32)$1 != (int_32)$12) ){ goto $label$46 }
	goto $label$42 
	
.LABEL $label$45
	*($0) = $9
	*($6) = $10
	
.LABEL $label$44
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$41 }
	
.LOOP $label$47:
	$0 = ($12 + [-1])
	$9 = *($4)
	
.LOOP $label$48:
	$0 = ($0 + [1])
	$11 = *($0)
	$10 = ($9 & [255])
	if ( ((uint_32)$10 >= (uint_32)$11) ){ goto $label$48 }
	$12 = ($0 + [1])
	
.LOOP $label$49:
	$6 = ($6 + [-1])
	$9 = *($6)
	if ( ($10 <= $9) ){ goto $label$49 }
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$50 }
	*($0) = $9
	*($6) = $11
	goto $label$47 
	
.LABEL $label$50
	$10 = ([4] & [7])
	if ( ((uint_32)$10 > (uint_32)[4]) ){ goto $label$40 }
	goto $label$4 
	
.LABEL $label$43
	$13 = [7]
	goto $label$3 
	
.LABEL $label$42
	$13 = [7]
	goto $label$3 
	
.LABEL $label$41
	$13 = [7]
	goto $label$3 
	
.LABEL $label$40
	$13 = [7]
	goto $label$3 
	
.LABEL $label$14
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$12 }
	
.LABEL $label$13
	$10 = *($3)
	$0 = *($7)
	if ( ((uint_32)$0 >= (uint_32)$10) ){ goto $label$12 }
	*($3) = $0
	*($7) = $10
	if ( ($8 + [1]) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( $8 ){ goto $label$10 }
	
.LABEL $label$11
	$10 = CALL $121($4, $3, $2)
	$0 = ($3 + [1])
	if ( CALL $121($0, $1, $2) ){ goto $label$7 }
	if ( $10 ){ goto $label$9 }
	
.LABEL $label$10
	if ( ((int_32)($3 - $4) >= (int_32)($1 - $3)) ){ goto $label$2 }
	CALL $119($4, $3, $2)
	$0 = ($3 + [1])
	
.LABEL $label$9
	$4 = $0
	$0 = ($1 - $4)
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$6 }
	goto $label$8 
	
.LABEL $label$7
	$1 = ( $1 ? $3 : $10 )
	$0 = $4
	$10 = (( [1] ? [2] : $10 ) & [7])
	if ( ((uint_32)$10 <= (uint_32)[4]) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	goto $label$58 
	
.LABEL $label$69
	$9 = *($4)
	$0 = ($1 + [-1])
	$10 = *($0)
	if ( ((uint_32)$10 >= (uint_32)$9) ){ goto $label$51 }
	*($4) = $10
	*($0) = $9
	return 
	
.LABEL $label$68
	$9 = ($1 + [-1])
	$0 = *($9)
	$11 = *($4)
	$10 = *($4 + [1])
	if ( ((uint_32)$10 >= (uint_32)$11) ){ goto $label$65 }
	if ( ((uint_32)($0 & [255]) >= (uint_32)$10) ){ goto $label$63 }
	*($4) = $0
	*($9) = $11
	return 
	
.LABEL $label$67
	CALL $120($4, ($4 + [1]), ($4 + [2]), ($4 + [3]), ($1 + [-1]), $2)
	return 
	
.LABEL $label$66
	$11 = ($1 + [-1])
	$10 = *($4 + [2])
	$9 = *($4)
	$0 = *($4 + [1])
	if ( ((uint_32)$0 >= (uint_32)$9) ){ goto $label$64 }
	$12 = ($10 & [255])
	if ( ((uint_32)$12 >= (uint_32)$0) ){ goto $label$62 }
	*($4) = $10
	*(($4 + [2])) = $9
	goto $label$61 
	
.LABEL $label$65
	if ( ((uint_32)($0 & [255]) >= (uint_32)$10) ){ goto $label$54 }
	*(($11 = ($4 + [1]))) = $0
	*($9) = $10
	$10 = *($4)
	$0 = *($11)
	if ( ((uint_32)$0 >= (uint_32)$10) ){ goto $label$53 }
	*($4) = $0
	*($11) = $10
	return 
	
.LABEL $label$64
	$12 = ($10 & [255])
	if ( ((uint_32)$12 >= (uint_32)$0) ){ goto $label$60 }
	*(($4 + [2])) = $0
	*(($6 = ($4 + [1]))) = $10
	if ( ((uint_32)$12 >= (uint_32)$9) ){ goto $label$59 }
	*($4) = $10
	*($6) = $9
	goto $label$59 
	
.LABEL $label$63
	*($4) = $10
	*(($0 = ($4 + [1]))) = $11
	$10 = *($9)
	if ( ((uint_32)$10 >= (uint_32)$11) ){ goto $label$52 }
	*($0) = $10
	*($9) = $11
	return 
	
.LABEL $label$62
	*($4) = $0
	*(($0 = ($4 + [1]))) = $9
	if ( ((uint_32)$12 >= (uint_32)$9) ){ goto $label$60 }
	*(($4 + [2])) = $9
	*($0) = $10
	
.LABEL $label$61
	$0 = $9
	goto $label$59 
	
.LABEL $label$60
	$0 = $10
	
.LABEL $label$59
	$10 = *($11)
	if ( ((uint_32)$10 >= (uint_32)($0 & [255])) ){ goto $label$57 }
	*(($9 = ($4 + [2]))) = $10
	*($11) = $0
	$10 = ($4 + [1])
	$11 = *($10)
	$0 = *($9)
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$56 }
	*($9) = $11
	*($10) = $0
	$10 = *($4)
	if ( ((uint_32)$0 >= (uint_32)$10) ){ goto $label$55 }
	*($4) = $0
	*(($4 + [1])) = $10
	return $13
	
.LABEL $label$58
	$13 = [7]
	goto $label$3 
	
.LABEL $label$57
	$13 = [7]
	goto $label$3 
	
.LABEL $label$56
	$13 = [7]
	goto $label$3 
	
.LABEL $label$55
	$13 = [7]
	goto $label$3 
	
.LABEL $label$54
	$13 = [7]
	goto $label$3 
	
.LABEL $label$53
	$13 = [7]
	goto $label$3 
	
.LABEL $label$52
	$13 = [7]
	goto $label$3 
	
.LABEL $label$51
	$13 = [7]
	goto $label$3 
	
.LABEL $label$5
	$13 = [7]
	goto $label$3 
	
.LABEL $label$4
	if ( (([1] << $10) & [21]) ){ goto $label$1 }
	$13 = [7]
	
.LABEL $label$3
	
.LOOP $label$70:
	goto $label$78 
	
.LABEL $label$85
	$0 = $7
	$13 = [3]
	goto $label$70 
	
.LABEL $label$84
	*((($9 = ($4 + $0)) + $12)) = $10
	if ( ((int_32)$0 == (int_32)[-2]) ){ goto $label$72 }
	$13 = [4]
	goto $label$70 
	
.LABEL $label$83
	$0 = ($0 + [-1])
	$10 = *(($9 + [1]))
	if ( ($11 <= $10) ){ goto $label$73 }
	$13 = [5]
	goto $label$70 
	
.LABEL $label$82
	$0 = (($4 + $0) + $12)
	goto $label$71 
	
.LABEL $label$81
	$0 = $4
	$13 = [6]
	goto $label$70 
	
.LABEL $label$80
	*($0) = $11
	$0 = ($6 + [1])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$74 }
	$13 = [1]
	goto $label$70 
	
.LABEL $label$79
	$7 = ($7 + [1])
	$10 = *($6)
	$6 = $0
	$11 = *($6)
	if ( ($11 <= ($10 & [255])) ){ goto $label$76 }
	$13 = [0]
	goto $label$70 
	
.LABEL $label$78
	$0 = ($6 + [1])
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$75 }
	$13 = [7]
	goto $label$70 
	
.LABEL $label$77
	return 
	
.LABEL $label$76
	$13 = [2]
	goto $label$70 
	
.LABEL $label$75
	$13 = [1]
	goto $label$70 
	
.LABEL $label$74
	$13 = [7]
	goto $label$70 
	
.LABEL $label$73
	$13 = [3]
	goto $label$70 
	
.LABEL $label$72
	$13 = [8]
	goto $label$70 
	
.LABEL $label$71
	$13 = [6]
	goto $label$70 
	
.LABEL $label$2
	CALL $119(($3 + [1]), $1, $2)
	$1 = $3
	$0 = $4
	goto $label$1 
	$0
}

int_32 .FUNC $150 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10204]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10208])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10204]) = [1]
	$2 = ($2 << [16])
	*([0] + [10208]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10208])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10208]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10204]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10204]) = [1]
	$3 = ($3 << [16])
	*([0] + [10208]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10208])
	
.LABEL $label$10
	*([0] + [10208]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $151 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18596])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18404]
	$3 = (((int_32)$1 * (int_32)[12]) + [18404])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $29 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [16]) = $1
	$3 = ($0 + [72])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$6:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7 + [40]) == (int_64)$1) ){ goto $label$5 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($7 + [112]) == (int_32)$3), [9661])
	if ( $7 ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)3617214763094933504, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $40($3, $6) + [112]) == (int_32)$3), [9661])
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$3
	*($2 + [8]) = CALL $42(($0 + [32]), (int_64)102)
	$1 = *($0)
	*($2 + [4]) = ($2 + [16])
	*($2) = ($2 + [8])
	*($2 + [56]) = $1
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL eosio_assert4()), [9735])
	*($2 + [32]) = $3
	*($2 + [36]) = $2
	*($2 + [40]) = ($2 + [56])
	*(($6 = CALL _Znwj([128])) + [16 align=4]) = (int_64)0
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [32 align=4]) = (int_64)0
	*($6 + [40]) = (int_64)0
	*($6 + [56]) = (int_64)0
	*($6 + [64]) = (int_64)0
	*($6 + [72]) = (int_64)0
	*($6 + [112]) = $3
	CALL $56(($2 + [32]), $6)
	*($2 + [48]) = $6
	$1 = *($6 + [40])
	*($2 + [32]) = $1
	$4 = *($6 + [116])
	*($2 + [28]) = $4
	$7 = ($0 + [100])
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [104]))) ){ goto $label$7 }
	*($5 + [8]) = $1
	*($5 + [16]) = $4
	*($2 + [48]) = [0]
	*($5) = $6
	*($7) = ($5 + [24])
	$6 = *($2 + [48])
	*($2 + [48]) = [0]
	if ( ($6 == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	CALL $57(($0 + [96]), ($2 + [48]), ($2 + [32]), ($2 + [28]))
	$6 = *($2 + [48])
	*($2 + [48]) = [0]
	if ( $6 ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$1
	$5 = *($6 + [28])
	if ( ($5 == 0) ){ goto $label$8 }
	*(($6 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$8
	$5 = *($6 + [16])
	if ( ($5 == 0) ){ goto $label$9 }
	*(($6 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$9
	CALL _ZdlPv($6)
	$global$0 = ($2 + [64])
}

int_32 .FUNC $28 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [216]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [220])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [216]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [176]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [136]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$2 = *(($0 + [96]))
	if ( ($2 == 0) ){ goto $label$16 }
	$5 = ($0 + [100])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$18 }
	
.LOOP $label$19:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$20 }
	$1 = *($3 + [28])
	if ( ($1 == 0) ){ goto $label$21 }
	*(($3 + [32])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$21
	$1 = *($3 + [16])
	if ( ($1 == 0) ){ goto $label$22 }
	*(($3 + [20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$22
	CALL _ZdlPv($3)
	
.LABEL $label$20
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$19 }
	$3 = *(($0 + [96]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $2
	
.LABEL $label$17
	*($5) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$23 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$25 }
	
.LOOP $label$26:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$27 }
	CALL _ZdlPv($4)
	
.LABEL $label$27
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$26 }
	$3 = *(($0 + [56]))
	goto $label$24 
	
.LABEL $label$25
	$3 = $1
	
.LABEL $label$24
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$23
	return $0
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = *($1)
	$4 = *($1 + [4])
	$6 = ($4 - $5)
	if ( ($6 == 0) ){ goto $label$1 }
	$7 = (($4 + [-1]) - $5)
	$8 = ($2 | [1])
	$9 = ($2 + [8])
	
.LOOP $label$2:
	CALL $54($2, *(($5 + $3)))
	$5 = *($2)
	$4 = ($5 & [1])
	CALL $136($0, ( *($9) ? $8 : $4 ), ( *($2 + [4]) ? uint_32($5 >> [1]) : $4 ))
	if ( (*($2) & [1]) ){ goto $label$6 }
	$4 = ($3 + [1])
	if ( ($4 <= $6) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($9))
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $135($0, [8539])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	
.LABEL $label$3
	$5 = *($1)
	$3 = $4
	goto $label$2 
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $108(*($1), *($0 + [8]))
	CALL $108(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9175])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9175])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [9175])
	CALL memcpy($4, *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	$global$0 = ($2 + [16])
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $21 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $148($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [248]) = (int_64)0
	*($4 + [240]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9175])
	CALL memcpy(($4 + [240]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9175])
	CALL memcpy((($4 + [240]) + [8]), ($2 + [8]), [8])
	*(($4 + [28])) = ($2 + [16])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [116])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [128])) = $0
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [156])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [248])
	$1 = *($4 + [240])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $151($2)
	
.LABEL $label$5
	CALL $28(($4 + [8]))
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2)
{
	CALL require_auth(*($0))
	CALL $46(($0 + [32]), $1, $2)
}

int_32 .FUNC $23 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [240])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $148($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9175])
	CALL memcpy(($4 + [8]), $2, [8])
	$8 = *($4 + [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [116])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [128])) = $0
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [156])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $8), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $151($2)
	
.LABEL $label$5
	CALL $28(($4 + [8]))
	$global$0 = ($4 + [240])
	return [1]
}

void .FUNC $22 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($2 + [12]) = $3
	$4 = ($0 + [72])
	$6 = *(($0 + [100]))
	$5 = *(($0 + [96]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8 + [40]) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [112]) == (int_32)$4), [9661])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [80])), (int_64)3617214763094933504, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $40($4, $7)
	CALL eosio_assert(((int_32)*($8 + [112]) == (int_32)$4), [9661])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)[1]), [8545])
	CALL eosio_assert(((uint_64)*($8 + [8]) <= (uint_64)((int_64)$3 & (int_64)4294967295)), [8567])
	$1 = *($0)
	*($2 + [4]) = $0
	*($2) = ($2 + [12])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9786])
	CALL $45($4, $8, $1, $2)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $25 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [432])
	$global$0 = $3
	*(($4 = $3) + [376]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $148($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [272]) + [40])) = (int_64)0
	*(($4 + [304])) = (int_64)0
	*((($4 + [272]) + [24])) = (int_64)0
	*((($4 + [272]) + [56])) = (int_64)0
	*((($4 + [272]) + [64])) = (int_64)0
	*((($4 + [272]) + [80])) = [0]
	*($4 + [288]) = (int_64)0
	*($4 + [272]) = (int_64)0
	*($4 + [320]) = (int_64)0
	*($4 + [344]) = (int_64)0
	*($4 + [356]) = [0]
	*($4 + [260]) = $2
	*($4 + [256]) = $2
	*($4 + [264]) = ($2 + $5)
	*($4 + [416]) = ($4 + [256])
	*($4 + [24]) = ($4 + [272])
	CALL $48(($4 + [24]), ($4 + [416]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [264])
	*($4 + [8]) = *($4 + [256])
	$3 = *($3)
	*((($4 + [384]) + [8])) = $3
	*(($6 = (($4 + [400]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [400]) = $7
	*($4 + [384]) = $7
	$3 = *($6)
	*((($4 + [416]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [400])
	*($4 + [40]) = $1
	*($4 + [416]) = $1
	*((($4 + [24]) + [40])) = $0
	*(($4 + [72])) = (int_64)-1
	*((($4 + [24]) + [56])) = (int_64)0
	*((($4 + [24]) + [64])) = [0]
	*((($4 + [24]) + [80])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [132])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [172])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [184])) = $0
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*($4 + [216]) = $0
	*($4 + [420]) = ($4 + [376])
	*($4 + [416]) = ($4 + [24])
	CALL $49(($4 + [416]), ($4 + [272]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $151($2)
	
.LABEL $label$4
	CALL $28(($4 + [24]))
	if ( (*($4 + [344]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [332]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [352])))
	if ( ((*($4 + [332]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [340])))
	$2 = [1]
	if ( ((*($4 + [320]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [320]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [432])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [328])))
	$global$0 = ($4 + [432])
	return $2
}

void .FUNC $24 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	CALL require_auth(*($0))
	CALL require_recipient(*($0))
}

int_32 .FUNC $27 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [240])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $148($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [232]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9175])
	CALL memcpy(($4 + [232]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [108])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [120])) = $0
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [148])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [232])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $151($2)
	
.LABEL $label$5
	CALL $28($4)
	$global$0 = ($4 + [240])
	return [1]
}

void .FUNC $26 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [16]) = $1
	CALL require_auth(*($0))
	*($2 + [8]) = ($0 + [72])
	CALL $31(($2 + [24]), ($2 + [8]), ($2 + [16]))
	$3 = [0]
	$4 = *($2 + [28])
	if ( ($4 == 0) ){ goto $label$1 }
	$3 = [0]
	if ( ((int_64)*($2 + [16]) != (int_64)*($4)) ){ goto $label$1 }
	$3 = *($2 + [28])
	
.LABEL $label$1
	*($2 + [24]) = CALL $42(($0 + [32]), (int_64)102)
	$1 = *($0)
	*($2) = ($2 + [24])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9786])
	CALL $47(*($2 + [8]), $3, $1, $2)
	$global$0 = ($2 + [32])
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $138($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $145($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $133($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *(($2 + [40]))
	$5 = *($2 + [32])
	$2 = *($2 + [48])
	if ( ((int_32)$2 != (int_32)[4]) ){ goto $label$1 }
	CALL __multi3($3, *($1 + [52]), (int_64)0, $5, (int_64)$5 >> (int_64)63))
	*($0 + [8]) = $4
	$5 = *(($3 + [8]))
	$4 = *($3)
	CALL eosio_assert(( (uint_64)($4 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [9551])
	CALL eosio_assert(( ((uint_64)$4 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [9575])
	*($0) = $4
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$1
	if ( ((int_32)$2 != (int_32)*($1 + [50])) ){ goto $label$2 }
	CALL __multi3(($3 + [16]), $5, (int_64)$5 >> (int_64)63), (int_64)196, (int_64)0)
	$5 = *(($3 + [24]))
	$6 = *($3 + [16])
	CALL eosio_assert(( (uint_64)($6 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [9551])
	CALL eosio_assert(( ((uint_64)$6 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [9575])
	*($0 + [8]) = $4
	CALL eosio_assert([1], [9600])
	CALL eosio_assert([1], [9615])
	*($0) = ((int_64)$6 / (int_64)100)
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$2
	*($0 + [8]) = $4
	CALL eosio_assert([1], [9551])
	CALL eosio_assert([1], [9575])
	*($0) = (int_64)0
	$global$0 = ($3 + [32])
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9171])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = ($6 - $7)
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $109($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + $2)
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((int_32)*($5) != (int_32)$3), [9175])
	CALL memcpy($7, *($2), [1])
	$3 = (*($2) + [1])
	*($2) = $3
	$7 = ($7 + [1])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9712])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $148($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([64])) + [48]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9175])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((uint_32)($4 + [-8]) > (uint_32)[33]), [9175])
	CALL memcpy(($5 + [8]), ($2 + [8]), [34])
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $113(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $151($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $64 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$0 = ($0 + [-1])
	if ( ((uint_32)$0 > (uint_32)[5]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$5
	$4 = *($2)
	$2 = *($4 + [1])
	$3 = *($1)
	$1 = *($3 + [1])
	$0 = ( [1] ? (($1 <= $2) << [1]) : ((uint_32)$1 > (uint_32)$2) )
	if ( $0 ){ goto $label$1 }
	$1 = *(($4 + (((int_32)*($4) == (int_32)$2) << [1])))
	$0 = *(($3 + (((int_32)*($3) == (int_32)$1) << [1])))
	return (( [1] ? (($0 <= $1) << [1]) : ((uint_32)$0 > (uint_32)$1) ) & [255])
	
.LABEL $label$4
	$1 = *($1)
	$0 = ($1 + [2])
	if ( ((int_32)*($1) != (int_32)[2]) ){ goto $label$6 }
	$0 = ( ($1 + [1]) ? $0 : ((int_32)*($0) == (int_32)[14]) )
	
.LABEL $label$6
	$1 = *($2)
	$2 = ($1 + [2])
	$0 = *($0)
	if ( ((int_32)*($1) != (int_32)[2]) ){ goto $label$7 }
	$2 = ( ($1 + [1]) ? $2 : ((int_32)*(($1 + [2])) == (int_32)[14]) )
	
.LABEL $label$7
	$1 = *($2)
	$0 = ($0 & [255])
	return (( [1] ? (($0 <= $1) << [1]) : ((uint_32)$0 > (uint_32)$1) ) & [255])
	
.LABEL $label$3
	$2 = *($2)
	$1 = *($2 + [2])
	$3 = *($1)
	$0 = *($3 + [2])
	$0 = ( [1] ? (($0 <= $1) << [1]) : ((uint_32)$0 > (uint_32)$1) )
	if ( $0 ){ goto $label$1 }
	$1 = *($2 + [1])
	$0 = *($3 + [1])
	$0 = ( [1] ? (($0 <= $1) << [1]) : ((uint_32)$0 > (uint_32)$1) )
	if ( $0 ){ goto $label$1 }
	$1 = *($2)
	$0 = *($3)
	return ( [1] ? (($0 <= $1) << [1]) : ((uint_32)$0 > (uint_32)$1) )
	
.LABEL $label$2
	$1 = *(*($2))
	$0 = *(*($1))
	$0 = ( [1] ? (($0 <= $1) << [1]) : ((uint_32)$0 > (uint_32)$1) )
	
.LABEL $label$1
	$0
	return ($0 & [255])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4229865212519383040, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(($4 + [52])) == (int_32)$7), [9661])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $114($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)4229865212519383040, $6))
	CALL eosio_assert(((int_32)*($4 + [52]) == (int_32)$7), [9661])
	
.LABEL $label$2
	*($4 + [60]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($0) = (int_64)0
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [24 align=4]) = (int_64)0
	*(($0 + [16])) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = (int_64)0
	$3 = [0]
	*($2 + [32]) = [0]
	*($2 + [24]) = (int_64)0
	CALL $50($1, $0, ($2 + [24]), [52])
	CALL $50($1, $0, ($2 + [24]), [52])
	CALL $50($1, $0, ($2 + [24]), [52])
	$4 = ($0 + [12])
	CALL $50($1, $4, ($2 + [24]), [52])
	CALL $50($1, $4, ($2 + [24]), [52])
	CALL $50($1, $4, ($2 + [24]), [52])
	*($2 + [16]) = [0]
	*($2 + [8]) = (int_64)0
	$5 = ($0 + [24])
	$4 = [0]
	$6 = *($0 + [4])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$1 }
	$7 = ($6 + [-1])
	$3 = [0]
	$8 = ($2 + [16])
	$4 = [0]
	
.LOOP $label$3:
	$6 = ((uint_32)*($1) % (uint_32)[13])
	$6 = ( ($6 + [1]) ? [14] : $6 )
	*($2 + [40]) = $6
	if ( ((uint_32)$4 >= (uint_32)$3) ){ goto $label$5 }
	*($4) = $6
	*($2 + [12]) = (*($2 + [12]) + [1])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	CALL $63(($2 + [8]), ($2 + [40]))
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$4
	$1 = ($1 + [1])
	$3 = *($8)
	$4 = *($2 + [12])
	goto $label$3 
	
.LABEL $label$2
	$3 = *($2 + [12])
	$4 = *($2 + [8])
	
.LABEL $label$1
	CALL $119($4, $3, ($2 + [40]))
	$1 = *($5)
	if ( ($1 == 0) ){ goto $label$6 }
	*(($0 + [28])) = $1
	CALL _ZdlPv($1)
	*(($0 + [32])) = [0]
	*(($0 + [24])) = (int_64)0
	
.LABEL $label$6
	$9 = ($0 + [36])
	*(($0 + [24])) = *($2 + [8])
	$8 = ($2 + [16])
	*(($0 + [32])) = *($8)
	$4 = [0]
	*($2 + [16]) = [0]
	*($2 + [8]) = (int_64)0
	$3 = [0]
	$6 = *(($0 + [16]))
	$1 = *(($0 + [12]))
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$7 }
	$7 = ($6 + [-1])
	$3 = [0]
	$4 = [0]
	
.LOOP $label$9:
	$6 = ((uint_32)*($1) % (uint_32)[13])
	$6 = ( ($6 + [1]) ? [14] : $6 )
	*($2 + [40]) = $6
	if ( ((uint_32)$4 >= (uint_32)$3) ){ goto $label$11 }
	*($4) = $6
	*($2 + [12]) = (*($2 + [12]) + [1])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	CALL $63(($2 + [8]), ($2 + [40]))
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$8 }
	
.LABEL $label$10
	$1 = ($1 + [1])
	$3 = *($8)
	$4 = *($2 + [12])
	goto $label$9 
	
.LABEL $label$8
	$4 = *($2 + [12])
	$3 = *($2 + [8])
	
.LABEL $label$7
	CALL $119($3, $4, ($2 + [40]))
	$1 = *($9)
	if ( ($1 == 0) ){ goto $label$12 }
	*(($0 + [40])) = $1
	CALL _ZdlPv($1)
	*(($0 + [44])) = [0]
	*(($0 + [36])) = (int_64)0
	
.LABEL $label$12
	$4 = *($2 + [8])
	*(($0 + [36])) = $4
	*(($0 + [40])) = *($2 + [12 align=4])
	$8 = [0]
	$1 = *($0)
	$3 = (((uint_32)*($1) / (uint_32)[13]) & [3])
	if ( ((int_32)$3 != (int_32)(((uint_32)*($1 + [1]) / (uint_32)[13]) & [3])) ){ goto $label$13 }
	$8 = ((int_32)$3 == (int_32)(((uint_32)*($1 + [2]) / (uint_32)[13]) & [3]))
	
.LABEL $label$13
	$6 = [1]
	$7 = *($3)
	$3 = *($5)
	$1 = *($3 + [1])
	if ( ((int_32)($1 - $7) == (int_32)[1]) ){ goto $label$14 }
	$6 = (((int_32)$7 == (int_32)[3]) & ((int_32)$1 == (int_32)[14]))
	
.LABEL $label$14
	$3 = *($3 + [2])
	$11 = ((int_32)$3 == (int_32)$1)
	$10 = ((int_32)$1 == (int_32)$7)
	$7 = ($10 & $11)
	if ( ((int_32)($3 - $1) == (int_32)[1]) ){ goto $label$15 }
	$6 = ($6 & (((int_32)$1 == (int_32)[3]) & ((int_32)$3 == (int_32)[14])))
	
.LABEL $label$15
	$3 = [6]
	if ( $7 ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	$3 = ( [5] ? [3] : $8 )
	goto $label$16 
	
.LABEL $label$17
	if ( (($8 | ((int_32)($10 | $11) ^ (int_32)[1])) == 0) ){ goto $label$18 }
	$3 = ( [4] ? [0] : $8 )
	goto $label$16 
	
.LABEL $label$18
	$3 = ( [1] ? [2] : ($1 <= [9]) )
	
.LABEL $label$16
	*($0 + [48]) = $3
	$8 = [0]
	$1 = *(($0 + [12]))
	$6 = (((uint_32)*($1) / (uint_32)[13]) & [3])
	if ( ((int_32)$6 != (int_32)(((uint_32)*($1 + [1]) / (uint_32)[13]) & [3])) ){ goto $label$19 }
	$8 = ((int_32)$6 == (int_32)(((uint_32)*($1 + [2]) / (uint_32)[13]) & [3]))
	
.LABEL $label$19
	$6 = [1]
	$7 = *($4)
	$1 = *($4 + [1])
	if ( ((int_32)($1 - $7) == (int_32)[1]) ){ goto $label$20 }
	$6 = (((int_32)$7 == (int_32)[3]) & ((int_32)$1 == (int_32)[14]))
	
.LABEL $label$20
	$4 = *($4 + [2])
	$11 = ((int_32)$4 == (int_32)$1)
	$10 = ((int_32)$1 == (int_32)$7)
	$7 = ($10 & $11)
	if ( ((int_32)($4 - $1) == (int_32)[1]) ){ goto $label$21 }
	$6 = ($6 & (((int_32)$1 == (int_32)[3]) & ((int_32)$4 == (int_32)[14])))
	
.LABEL $label$21
	$4 = [6]
	if ( $7 ){ goto $label$22 }
	if ( ($6 == 0) ){ goto $label$23 }
	$4 = ( [5] ? [3] : $8 )
	goto $label$22 
	
.LABEL $label$23
	if ( (($8 | ((int_32)($10 | $11) ^ (int_32)[1])) == 0) ){ goto $label$24 }
	$4 = ( [4] ? [0] : $8 )
	goto $label$22 
	
.LABEL $label$24
	$4 = ( [1] ? [2] : ($1 <= [9]) )
	
.LABEL $label$22
	$6 = ($0 + [48])
	*($0 + [49]) = $4
	$1 = ($4 & [255])
	$3 = ($3 & [255])
	$4 = ($3 <= $1)
	$1 = ( [1] ? ($4 << [1]) : ((uint_32)$3 > (uint_32)$1) )
	*($0 + [50]) = $1
	$7 = ($0 + [49])
	if ( $1 ){ goto $label$25 }
	$1 = CALL $64($3, $5, $9)
	*(($0 + [50])) = $1
	
.LABEL $label$25
	$4 = (*(( $7 ? $6 : $4 )) + [-2])
	if ( ((uint_32)($4 & [255]) > (uint_32)[4]) ){ goto $label$28 }
	*($0 + [52]) = (uint_64)(int_64)129100874498 >> (uint_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $4) & (int_64)255) << (int_64)3))
	$1 = ($1 | [4])
	*($0 + [53]) = $1
	*($0 + [51]) = $1
	$1 = *($2 + [24])
	if ( $1 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	*($0 + [52]) = [0]
	*($0 + [53]) = $1
	*($0 + [51]) = $1
	$1 = *($2 + [24])
	if ( ($1 == 0) ){ goto $label$26 }
	
.LABEL $label$27
	*($2 + [28]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$26
	$global$0 = ($2 + [48])
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9821])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9867])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [9918])
	CALL eosio_assert([1], [9180])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9180])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert4()), [9735])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $105($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $106(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert4()), [9735])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $112($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $106(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [28])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9175])
	CALL memcpy($0, *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), ($0 + [32]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [40]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $99(*($1), ($0 + [48]))
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), ($0 + [64]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $99(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $105 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL eosio_assert([1], [9180])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [9180])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159550150574080, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $5($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $134($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $134($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $130($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $138($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [4]))
	$3 = ($2 + ($3 << [4]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [4]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $138($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $86 (int_64 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	$3 = ($global$0 - [112])
	$global$0 = $3
	*(($4 = CALL _Znwj([16]))) = *($1)
	*(($4 + [8])) = *(($1 + [8]))
	*(($3 + [24])) = *(($2 + [24]))
	*(($3 + [32])) = *(($2 + [32]))
	*(($3 + [40])) = *(($2 + [40]))
	$1 = ($2 + [56])
	*(($3 + [56])) = *($1)
	*($3 + [96]) = $4
	$4 = ($4 + [16])
	*($3 + [104]) = $4
	*($3 + [100]) = $4
	*($3) = *($2)
	*($3 + [16]) = *($2 + [16])
	*($3 + [48]) = *($2 + [48 align=4])
	*($1) = [0]
	*($2 + [48 align=4]) = (int_64)0
	$5 = *($2 + [60 align=4])
	*($2 + [60 align=4]) = (int_64)0
	$4 = ($2 + [68])
	*(($3 + [68])) = *($4)
	*($4) = [0]
	$6 = *($2 + [72 align=4])
	*($2 + [72 align=4]) = (int_64)0
	$4 = ($2 + [80])
	*(($1 = ($3 + [80]))) = *($4)
	*($4) = [0]
	*($3 + [60 align=4]) = $5
	*($3 + [72]) = $6
	*($3 + [84]) = *($2 + [84])
	CALL $95($0, (int_64)-5003315193367756800, ($3 + [96]), $3)
	if ( ((*($3 + [72]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($1))
	
.LABEL $label$1
	if ( ((*(($3 + [60])) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($3 + [68])))
	
.LABEL $label$2
	if ( ((*(($3 + [48])) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$3
	$2 = *($3 + [96])
	if ( ($2 == 0) ){ goto $label$4 }
	*($3 + [100]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$global$0 = ($3 + [112])
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$1 = *($1 + [50])
	if ( ((int_32)$1 == (int_32)[2]) ){ goto $label$12 }
	if ( ((int_32)$1 != (int_32)[1]) ){ goto $label$11 }
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $145([9640])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$10 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $145([9648])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$7 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$11
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $145([9657])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$10
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$9
	CALL memcpy($2, [9640], $1)
	
.LABEL $label$8
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$7
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$6
	CALL memcpy($2, [9648], $1)
	
.LABEL $label$5
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$4
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$3
	CALL memcpy($2, [9657], $1)
	
.LABEL $label$2
	*(($2 + $1)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL $130($0)
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert4()), [9735])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $118($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $106(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9821])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [9867])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [9918])
	CALL eosio_assert([1], [9180])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9180])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [16])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $87(($7 + [28]), [8])
	$1 = *(($7 + [32]))
	$2 = *($7 + [28])
	*($5 + [8]) = *($4)
	CALL eosio_assert(((int_32)($1 - $2) > (int_32)[7]), [9180])
	CALL memcpy($2, ($5 + [8]), [8])
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $8)
	$1 = [0]
	
.LOOP $label$7:
	$9 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($6 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($9 + [-24])
	*($6) = *($4)
	$6 = ($9 + [-16])
	*($3) = *($6)
	*($6) = [0]
	*(($6 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($9 + [-12])
	*($6) = *($3)
	*($4) = (int_64)0
	$9 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	$9 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $9
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$global$0 = ($5 + [16])
	(unreachable)
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $81($0, *($1))
	CALL $81($0, *($1 + [4]))
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [192])
	$global$0 = $4
	$5 = *($1)
	*($4 + [160]) = [8391]
	*($4 + [164]) = CALL $145([8391])
	*($4 + [8]) = *($4 + [160])
	$1 = CALL $2(($4 + [168]), ($4 + [8]))
	*($4 + [176]) = $5
	*($4 + [184]) = *($1)
	CALL $55(($4 + [48]), $0)
	CALL $55(($4 + [32]), ($0 + [12]))
	CALL $85(($4 + [16]), $0)
	*((($4 + [64]) + [24])) = *(($3 + [8]))
	*(($4 + [96])) = *(($3 + [16]))
	*(($4 + [104])) = *(($3 + [24]))
	$1 = (($4 + [48]) + [8])
	*(($4 + [120])) = *($1)
	*($1) = [0]
	$1 = (($4 + [32]) + [8])
	*(($4 + [132])) = *($1)
	*($4 + [64]) = $2
	*($4 + [80]) = *($3)
	*($4 + [112]) = *($4 + [48])
	*($4 + [48]) = (int_64)0
	*($4 + [124 align=4]) = *($4 + [32])
	$3 = *($0 + [52])
	*($1) = [0]
	$0 = (($4 + [16]) + [8])
	*(($1 = ($4 + [144]))) = *($0)
	*($0) = [0]
	*($4 + [32]) = (int_64)0
	*($4 + [148]) = ((int_32)$3 != (int_32)[0])
	*($4 + [136]) = *($4 + [16])
	*($4 + [16]) = (int_64)0
	CALL $86($5, ($4 + [176]), ($4 + [64]))
	if ( ((*($4 + [136]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($1))
	
.LABEL $label$1
	if ( ((*(($4 + [124])) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($4 + [132])))
	
.LABEL $label$2
	if ( (*(($4 + [112])) & [1]) ){ goto $label$9 }
	if ( (*($4 + [16]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [120])))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [24])))
	$3 = [1]
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$3 = [1]
	if ( (*($4 + [32]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($4 + [48]) & $3) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [40])))
	if ( ((*($4 + [48]) & $3) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*(($4 + [56])))
	$global$0 = ($4 + [192])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [192])
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $150($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8229])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $148 (int_32 $0)
{
	return CALL $149([10212], $0)
}

int_32 .FUNC $145 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $144 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $148($1)
	
.LABEL $label$2
	*(CALL $139()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $148(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $151($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $146 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $139())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $147($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $141 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

void .FUNC $140 (int_32 $0)
{
}

int_32 .FUNC $143 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $142 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9180])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9180])
	CALL memcpy(*($0 + [4]), $4, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $70 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [9977])
	$3 = *($0 + [4])
	$4 = *($3 + [60])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)4229865212519383040, ($1 + [8]), *($3))
	*(*(($0 + [4])) + [60]) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(($2 + [52])) == (int_32)$7), [9661])
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL $114($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)4229865212519383040, $6))
	CALL eosio_assert(((int_32)*($2 + [52]) == (int_32)$7), [9661])
	
.LABEL $label$3
	*($2 + [60]) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9712])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $148($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [80]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [40])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [64])
	*($3 + [60]) = ($5 + [72])
	CALL $116(($3 + [32]), ($3 + [24]))
	*($5 + [84]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $73(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $151($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10041])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [10086])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10136])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

int_64 .FUNC $77 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$6:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$5 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$0), [9661])
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159550150574080, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $58($0, $6)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$0), [9661])
	
.LABEL $label$3
	*($3 + [16]) = ((uint_64)((int_64)*($7 + [8]) + (int_64)1) % (uint_64)$2)
	$1 = *($0)
	*($3 + [8]) = ($3 + [16])
	CALL eosio_assert([1], [9786])
	CALL $83($0, $7, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [16]) = (int_64)1
	$1 = *($0)
	*($3 + [12]) = ($3 + [16])
	*($3 + [8]) = ($3 + [24])
	CALL $84($3, $0, $1, ($3 + [8]))
	
.LABEL $label$1
	$1 = *($3 + [16])
	$global$0 = ($3 + [32])
	return $1
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*(($1 + [52])) == (int_32)$0), [10041])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert4()), [10086])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10136])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [56]))
	$6 = *($1 + [60])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865212519383040, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

int_64 .FUNC $39 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($3 + [40]) = $2
	$4 = CALL $137(*($0), [44], *($0 + [4]))
	CALL eosio_assert([1], [9403])
	$6 = *($0 + [4])
	$5 = *($0)
	$5 = CALL $132(($3 + [24]), $5, $6, ($4 - $6), $5)
	*($0 + [4]) = ($4 + [1])
	$0 = ($0 & [1])
	$0 = *($3 + [24])
	$4 = ( *($5 + [4]) ? uint_32($0 >> [1]) : $0 )
	if ( ($4 == 0) ){ goto $label$1 }
	*($3 + [12]) = $4
	*($3 + [8]) = ( *($5 + [8]) ? ($5 + [1]) : $0 )
	*($3) = *($3 + [8])
	$0 = CALL $2(($3 + [16]), $3)
	$7 = *($0)
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$2 }
	$2 = *(( $0 ? ($3 + [40]) : CALL is_account($7) ))
	
.LABEL $label$2
	$0 = (*($3 + [24]) & [1])
	
.LABEL $label$1
	if ( ($0 == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $131(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $131(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9712])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $148($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9175])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [9175])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [9175])
	CALL memcpy(($3 + [24]), ($2 + [16]), [8])
	*($5 + [16]) = *($3 + [24])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$7 = *($5)
	*($3 + [24]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [16]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $38(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $151($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9712])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $148($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9175])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9175])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [9175])
	CALL memcpy(($5 + [16]), ($2 + [16]), [1])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $79(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $151($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $138($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $32 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$0), [9661])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-5069197016484020224, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $65($0, $4)
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)$0), [9661])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $33 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_64 $25
	$4 = ($global$0 - [464])
	$global$0 = $4
	*($4 + [312]) = $1
	*($4 + [304]) = ($0 + [72])
	CALL $31(($4 + [320]), ($4 + [304]), ($4 + [312]))
	$5 = *($4 + [324])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ( $5 ? [0] : ((int_64)*($4 + [312]) == (int_64)*($5)) )
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	*($4 + [300]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$7 = CALL $66(($4 + [240]), $2)
	*($4 + [232]) = ($0 + [112])
	$8 = (($4 + [216]) | [4])
	*($4 + [216]) = $8
	*($4 + [220 align=4]) = (int_64)0
	*($4 + [320]) = (int_64)0
	CALL $67(($4 + [432]), ($4 + [232]), ($4 + [320]))
	$5 = *($4 + [436])
	if ( ($5 == 0) ){ goto $label$3 }
	
.LOOP $label$4:
	$9 = *(($5 + [40]))
	$10 = *($5 + [32])
	CALL $68(($4 + [320]), $7, $5)
	$11 = *($4 + [436])
	$12 = *($4 + [220])
	if ( ($12 == 0) ){ goto $label$10 }
	$1 = *(($11 + [16]))
	$2 = $8
	$5 = $12
	
.LOOP $label$11:
	$13 = (uint_64)(*($5 + [16]) <= $1)
	$2 = ( $2 ? $5 : $13 )
	$5 = *(($5 + ($13 << [2])))
	if ( $5 ){ goto $label$11 }
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$12 }
	if ( ((uint_64)$1 >= (uint_64)*($2 + [16])) ){ goto $label$9 }
	
.LABEL $label$12
	*((($4 + [176]) + [8])) = *((($4 + [320]) + [8]))
	*($4 + [176]) = *($4 + [320])
	$14 = *($11 + [24])
	$5 = $8
	$15 = *($12 + [16])
	if ( ((uint_64)$1 >= (uint_64)$15) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$10
	*((($4 + [176]) + [8])) = *((($4 + [320]) + [8]))
	*($4 + [176]) = *($4 + [320])
	$14 = *($11 + [24])
	$12 = $8
	$5 = $8
	$16 = [3]
	goto $label$5 
	
.LABEL $label$9
	CALL eosio_assert(((int_64)$9 == (int_64)*($2 + [32])), [9323])
	$1 = ((int_64)*($2 + [24]) + (int_64)$10)
	*($2 + [24]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9366])
	CALL eosio_assert(((int_64)*($2 + [24]) < (int_64)4611686018427387904), [9385])
	CALL eosio_assert(((int_64)*((($4 + [320]) + [8])) == (int_64)*($2 + [48])), [9323])
	$1 = ((int_64)*($2 + [40]) + (int_64)*($4 + [320]))
	*($2 + [40]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9366])
	CALL eosio_assert(((int_64)*($2 + [40]) < (int_64)4611686018427387904), [9385])
	goto $label$6 
	
.LABEL $label$8
	$16 = [10]
	goto $label$5 
	
.LABEL $label$7
	$16 = [2]
	goto $label$5 
	
.LABEL $label$6
	$16 = [5]
	
.LABEL $label$5
	
.LOOP $label$13:
	goto $label$31 
	
.LABEL $label$35
	$5 = $12
	$12 = $2
	$15 = *($12 + [16])
	if ( ((uint_64)$1 >= (uint_64)$15) ){ goto $label$23 }
	$16 = [10]
	goto $label$13 
	
.LABEL $label$34
	$2 = *($12)
	if ( $2 ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$33
	if ( ((uint_64)$15 >= (uint_64)$1) ){ goto $label$18 }
	$16 = [9]
	goto $label$13 
	
.LABEL $label$32
	$5 = ($12 + [4])
	$2 = *($12 + [4])
	if ( ($2 == 0) ){ goto $label$21 }
	$16 = [0]
	goto $label$13 
	
.LABEL $label$31
	$12 = $5
	goto $label$22 
	
.LABEL $label$30
	$2 = *($5)
	if ( $2 ){ goto $label$17 }
	$16 = [6]
	goto $label$13 
	
.LABEL $label$29
	*(($2 = CALL _Znwj([64]))) = (int_64)0
	*($2 + [8]) = $12
	*($5) = $2
	$1 = *(($11 + [16]))
	*($2 + [24]) = (int_64)0
	*($2 + [16]) = $1
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [48]) = (int_64)0
	*($2 + [56]) = (int_64)0
	$13 = $2
	$12 = *(*($4 + [216]))
	if ( ($12 == 0) ){ goto $label$14 }
	$16 = [7]
	goto $label$13 
	
.LABEL $label$28
	*($4 + [216]) = $12
	$13 = *($5)
	$16 = [8]
	goto $label$13 
	
.LABEL $label$27
	CALL $69(*($4 + [220]), $13)
	*(($5 = (($4 + [216]) + [8]))) = (*($5) + [1])
	goto $label$16 
	
.LABEL $label$26
	$5 = $12
	$2 = *($5)
	if ( ($2 == 0) ){ goto $label$15 }
	$16 = [4]
	goto $label$13 
	
.LABEL $label$25
	*(($2 + [32])) = $9
	*(($2 + [24])) = $10
	*(($2 + [40])) = *($4 + [176])
	*(($2 + [56])) = $14
	*(($2 + [48])) = *((($4 + [176]) + [8]))
	$16 = [5]
	goto $label$13 
	
.LABEL $label$24
	CALL $70(($4 + [432]))
	$5 = *($4 + [436])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$23
	$16 = [2]
	goto $label$13 
	
.LABEL $label$22
	$16 = [1]
	goto $label$13 
	
.LABEL $label$21
	$16 = [3]
	goto $label$13 
	
.LABEL $label$20
	$16 = [11]
	goto $label$13 
	
.LABEL $label$19
	$16 = [1]
	goto $label$13 
	
.LABEL $label$18
	$16 = [3]
	goto $label$13 
	
.LABEL $label$17
	$16 = [4]
	goto $label$13 
	
.LABEL $label$16
	$16 = [4]
	goto $label$13 
	
.LABEL $label$15
	$16 = [6]
	goto $label$13 
	
.LABEL $label$14
	$16 = [8]
	goto $label$13 
	
.LABEL $label$3
	if ( $3 ){ goto $label$40 }
	$2 = *($4 + [216])
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$40 }
	
.LOOP $label$41:
	$15 = *($13 + [24])
	$13 = $2
	$1 = (int_64)
	if ( ((int_64)$1(*($13 + [40]) - $15)) < (int_64)500001) ){ goto $label$42 }
	$15 = ((int_64)$1 / (int_64)$15)
	if ( ((int_64)$1 > (int_64)((int_64)((int_64)( $15 ? (int_64)10 : ((int_64)$15 < (int_64)10) ) * (int_64)200000) + (int_64)500000)) ){ goto $label$39 }
	
.LABEL $label$42
	$5 = *($13 + [4])
	if ( ($5 == 0) ){ goto $label$44 }
	
.LOOP $label$45:
	$2 = $5
	$5 = *($2)
	if ( $5 ){ goto $label$45 }
	goto $label$43 
	
.LABEL $label$44
	$2 = *($13 + [8])
	if ( ((int_32)*($2) == (int_32)$13) ){ goto $label$43 }
	$13 = ($13 + [8])
	
.LOOP $label$46:
	$5 = *($13)
	$13 = ($5 + [8])
	$2 = *($5 + [8])
	if ( ((int_32)$5 != (int_32)*($2)) ){ goto $label$46 }
	
.LABEL $label$43
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$41 }
	
.LABEL $label$40
	*((($4 + [176]) + [32])) = [0]
	*($4 + [192]) = (int_64)-1
	$15 = (int_64)0
	*($4 + [200]) = (int_64)0
	$1 = *($0)
	*($4 + [176]) = $1
	*($4 + [184]) = $1
	$17 = ($0 + [32])
	$2 = *(($0 + [60]))
	$12 = *(($0 + [56]))
	if ( ((int_32)$12 == (int_32)$2) ){ goto $label$49 }
	
.LOOP $label$51:
	$5 = ($2 + [-24])
	$13 = *($5)
	if ( ((int_64)*($13) == (int_64)104) ){ goto $label$50 }
	$2 = $5
	if ( ((int_32)$12 != (int_32)$5) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$50
	if ( ((int_32)$12 == (int_32)$2) ){ goto $label$49 }
	CALL eosio_assert(((int_32)*($13 + [16]) == (int_32)$17), [9661])
	if ( $13 ){ goto $label$48 }
	$15 = (int_64)0
	goto $label$47 
	
.LABEL $label$49
	$5 = CALL db_find_i64(*($17), *(($0 + [40])), (int_64)7235159550150574080, (int_64)104)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$47 }
	$13 = CALL $58($17, $5)
	CALL eosio_assert(((int_32)*($13 + [16]) == (int_32)$17), [9661])
	
.LABEL $label$48
	$15 = *($13 + [8])
	
.LABEL $label$47
	*($4 + [320]) = (int_64)0
	CALL $67(($4 + [168]), ($4 + [232]), ($4 + [320]))
	$5 = *($4 + [172])
	if ( ($5 == 0) ){ goto $label$52 }
	$18 = (($4 + [176]) + [24])
	$19 = (($4 + [320]) + [73])
	$11 = (($4 + [152]) + [8])
	$20 = (($4 + [176]) + [28])
	$21 = ($7 + [51])
	$22 = ($4 + [444])
	$23 = ($4 + [452])
	$24 = (($4 + [176]) + [32])
	
.LOOP $label$53:
	$3 = *($5 + [48])
	*($11) = *(($5 + [40]))
	*($4 + [152]) = *($5 + [32])
	CALL $68(($4 + [136]), $7, $5)
	$15 = ((int_64)$15 + (int_64)1)
	$1 = ((uint_64)$15 % (uint_64)(int_64)40)
	$13 = *($20)
	$12 = *($18)
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$57 }
	
.LOOP $label$59:
	$5 = ($13 + [-24])
	$2 = *($5)
	if ( ((int_64)*($2) == (int_64)$1) ){ goto $label$58 }
	$13 = $5
	if ( ((int_32)$12 != (int_32)$5) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$58
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$57 }
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)($4 + [176])), [9661])
	goto $label$56 
	
.LABEL $label$57
	$2 = (($4 + [176]) + [8])
	$5 = CALL db_find_i64(*($4 + [176]), *($2), (int_64)7760153360560291840, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$55 }
	$2 = CALL $71(($4 + [176]), $5)
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)($4 + [176])), [9661])
	
.LABEL $label$56
	$10 = *($0)
	CALL eosio_assert([1], [9786])
	CALL eosio_assert(((int_32)*(($2 + [80])) == (int_32)($4 + [176])), [9821])
	CALL eosio_assert(((int_64)*($4 + [176]) == (int_64)CALL eosio_assert4()), [9867])
	*($2 + [8]) = $15
	$9 = *($2)
	*($2) = $1
	$14 = *(*($4 + [172]) + [16])
	*(($2 + [32])) = *($11)
	*($2 + [24]) = *($4 + [152])
	*($2 + [40]) = $3
	*($2 + [16]) = $14
	$14 = *($21)
	*($2 + [48]) = *($4 + [136])
	*($2 + [72]) = $14
	*(($2 + [56])) = *((($4 + [136]) + [8]))
	*($2 + [64]) = *($4 + [300])
	CALL eosio_assert(((int_64)$9 == (int_64)$1), [9918])
	*((($4 + [408]) + [8])) = $19
	*($4 + [412]) = ($4 + [320])
	*($4 + [408]) = ($4 + [320])
	*($4 + [424]) = ($4 + [408])
	*((($4 + [432]) + [8])) = ($2 + [16])
	*($22) = ($2 + [24])
	*((($4 + [432]) + [16])) = ($2 + [40])
	*($23) = ($2 + [48])
	*((($4 + [432]) + [24])) = ($2 + [64])
	*((($4 + [432]) + [28])) = ($2 + [72])
	*($4 + [436]) = ($2 + [8])
	*($4 + [432]) = $2
	CALL $72(($4 + [432]), ($4 + [424]))
	CALL db_update_i64(*($2 + [84]), $10, ($4 + [320]), [73])
	$5 = (($4 + [176]) + [16])
	if ( (uint_64)($9 <= *($5)) ){ goto $label$54 }
	*($5) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	goto $label$54 
	
.LABEL $label$55
	$9 = *($0)
	CALL eosio_assert(((int_64)*($4 + [176]) == (int_64)CALL eosio_assert4()), [9735])
	*(($5 = CALL _Znwj([96])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [80]) = ($4 + [176])
	*($5 + [8]) = $15
	*($5) = $1
	*($5 + [40]) = $3
	*($5 + [16]) = *(*($4 + [172]) + [16])
	*($5 + [24]) = *($4 + [152])
	*($5 + [32]) = *($11)
	*($5 + [72]) = *($21)
	*($5 + [48]) = *($4 + [136])
	*($5 + [56]) = *((($4 + [136]) + [8]))
	*($5 + [64]) = *($4 + [300])
	*((($4 + [408]) + [8])) = $19
	*($4 + [412]) = ($4 + [320])
	*($4 + [408]) = ($4 + [320])
	*($4 + [424]) = ($4 + [408])
	*((($4 + [432]) + [8])) = ($5 + [16])
	*($22) = ($5 + [24])
	*((($4 + [432]) + [16])) = ($5 + [40])
	*($23) = ($5 + [48])
	*((($4 + [432]) + [24])) = ($5 + [64])
	*((($4 + [432]) + [28])) = ($5 + [72])
	*($4 + [436]) = ($5 + [8])
	*($4 + [432]) = $5
	CALL $72(($4 + [432]), ($4 + [424]))
	$1 = *($5)
	$13 = CALL db_store_i64(*($2), (int_64)7760153360560291840, $9, $1, ($4 + [320]), [73])
	*($5 + [84]) = $13
	$2 = (($4 + [176]) + [16])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$60 }
	*($2) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$60
	*($4 + [432]) = $5
	$1 = *($5)
	*($4 + [320]) = $1
	*($4 + [408]) = $13
	$2 = *($20)
	if ( ((uint_32)$2 >= (uint_32)*($24)) ){ goto $label$62 }
	*($2 + [8]) = $1
	*($2 + [16]) = $13
	*($4 + [432]) = [0]
	*($2) = $5
	*($20) = ($2 + [24])
	$5 = *($4 + [432])
	*($4 + [432]) = [0]
	if ( $5 ){ goto $label$61 }
	goto $label$54 
	
.LABEL $label$62
	CALL $73($18, ($4 + [432]), ($4 + [320]), ($4 + [408]))
	$5 = *($4 + [432])
	*($4 + [432]) = [0]
	if ( ($5 == 0) ){ goto $label$54 }
	
.LABEL $label$61
	CALL _ZdlPv($5)
	
.LABEL $label$54
	$1 = *($4 + [168])
	*($4 + [320]) = $1
	$5 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$5) != (int_32)[0]), [10007])
	CALL $70(($4 + [320]))
	CALL $74(*($4 + [232]), $5)
	$1 = *($4 + [320])
	*($4 + [168]) = $1
	$5 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( $5) ){ goto $label$53 }
	
.LABEL $label$52
	CALL $46($17, (int_64)104, $15)
	*($4 + [432]) = (int_64)0
	$13 = *($4 + [216])
	if ( ((int_32)$8 == (int_32)$13) ){ goto $label$38 }
	$19 = (($4 + [320]) | [1])
	$1 = (int_64)0
	$21 = $8
	
.LOOP $label$63:
	$14 = *(($13 + [56]))
	$10 = *(($13 + [48]))
	$25 = *(($13 + [32]))
	$9 = *(($13 + [24]))
	$15 = *(($13 + [40]))
	if ( ((int_64)$15 <= (int_64)$9) ){ goto $label$64 }
	if ( ((int_64)$15 <= (int_64)$1) ){ goto $label$64 }
	$5 = CALL $145([8541])
	if ( ($5 <= [8]) ){ goto $label$68 }
	CALL eosio_assert([0], [9225])
	goto $label$67 
	
.LABEL $label$68
	if ( ($5 == 0) ){ goto $label$66 }
	
.LABEL $label$67
	$1 = (int_64)0
	
.LOOP $label$69:
	$2 = *(($5 + [8540]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$70 }
	CALL eosio_assert([0], [9270])
	
.LABEL $label$70
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$69 }
	if ( ((int_64)$10 != (int_64)((int_64)((int_64)$1 << (int_64)8) | (int_64)4)) ){ goto $label$64 }
	goto $label$65 
	
.LABEL $label$66
	if ( ((int_64)$10 != (int_64)((int_64)0 | (int_64)4)) ){ goto $label$64 }
	
.LABEL $label$65
	*($4 + [432]) = $15
	$21 = $13
	
.LABEL $label$64
	*(($12 = (($4 + [120]) + [8]))) = $25
	$1 = *($13 + [16])
	$25 = *($0)
	CALL eosio_assert([1], [9600])
	CALL eosio_assert([1], [9615])
	*(($11 = (($4 + [104]) + [8]))) = $10
	*($4 + [104]) = $15
	*($4 + [120]) = $9
	*(($3 = (($4 + [320]) + [8]))) = [0]
	*($4 + [320]) = (int_64)0
	$20 = ( [8945] ? [8918] : ((int_64)$15 < (int_64)$9) )
	$5 = CALL $145($20)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$71 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$74 }
	*($4 + [320]) = ($5 << [1])
	$2 = $19
	if ( $5 ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$74
	$18 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($18)
	*($3) = $2
	*($4 + [320]) = ($18 | [1])
	*($4 + [324]) = $5
	
.LABEL $label$73
	CALL memcpy($2, $20, $5)
	
.LABEL $label$72
	*(($2 + $5)) = [0]
	*((($4 + [48]) + [8])) = *($12)
	*((($4 + [32]) + [8])) = *($11)
	*($4 + [48]) = *($4 + [120])
	*($4 + [32]) = *($4 + [104])
	CALL $6($25, $1, ($4 + [48]), ($4 + [32]), $14, ($4 + [320]))
	if ( ((*($4 + [320]) & [1]) == 0) ){ goto $label$75 }
	CALL _ZdlPv(*($3))
	
.LABEL $label$75
	$5 = *($13 + [4])
	if ( ($5 == 0) ){ goto $label$77 }
	
.LOOP $label$78:
	$2 = $5
	$5 = *($2)
	if ( $5 ){ goto $label$78 }
	goto $label$76 
	
.LABEL $label$77
	$2 = *($13 + [8])
	if ( ((int_32)*($2) == (int_32)$13) ){ goto $label$76 }
	$13 = ($13 + [8])
	
.LOOP $label$79:
	$5 = *($13)
	$13 = ($5 + [8])
	$2 = *($5 + [8])
	if ( ((int_32)$5 != (int_32)*($2)) ){ goto $label$79 }
	
.LABEL $label$76
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$37 }
	$1 = *($4 + [432])
	$13 = $2
	goto $label$63 
	
.LABEL $label$71
	CALL $130(($4 + [320]))
	
.LABEL $label$39
	$2 = [0]
	goto $label$36 
	
.LABEL $label$38
	$21 = $8
	
.LABEL $label$37
	*($4 + [152]) = CALL $42($17, (int_64)102)
	$1 = (int_64)0
	if ( ((int_32)$8 == (int_32)$21) ){ goto $label$80 }
	$1 = *($21 + [16])
	
.LABEL $label$80
	*($4 + [136]) = $1
	$1 = *($0)
	*($4 + [336]) = $7
	*($4 + [324]) = ($4 + [300])
	*($4 + [320]) = ($4 + [152])
	*($4 + [328]) = ($4 + [136])
	*($4 + [332]) = ($4 + [432])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9786])
	CALL $75(*($4 + [304]), $6, $1, ($4 + [320]))
	$5 = CALL db_lowerbound_i64(*($0 + [192]), *(($0 + [200])), (int_64)4229558806663135232, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$81 }
	$13 = ($0 + [192])
	$2 = CALL $37($13, $5)
	
.LOOP $label$82:
	CALL eosio_assert([1], [10007])
	CALL eosio_assert([1], [9977])
	$5 = [0]
	$12 = CALL db_next_i64(*($2 + [28]), ($4 + [320]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$83 }
	$5 = CALL $37($13, $12)
	
.LABEL $label$83
	CALL $76($13, $2)
	$2 = $5
	if ( $5 ){ goto $label$82 }
	
.LABEL $label$81
	$1 = CALL $77($17, (int_64)101, (int_64)60)
	$8 = ($0 + [152])
	$2 = *(($0 + [180]))
	$12 = *(($0 + [176]))
	if ( ((int_32)$12 == (int_32)$2) ){ goto $label$87 }
	
.LOOP $label$89:
	$5 = ($2 + [-24])
	$13 = *($5)
	if ( ((int_64)*($13) == (int_64)$1) ){ goto $label$88 }
	$2 = $5
	if ( ((int_32)$12 != (int_32)$5) ){ goto $label$89 }
	goto $label$87 
	
.LABEL $label$88
	if ( ((int_32)$12 == (int_32)$2) ){ goto $label$87 }
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$8), [9661])
	goto $label$86 
	
.LABEL $label$87
	$2 = ($0 + [160])
	$5 = CALL db_find_i64(*($8), *($2), (int_64)-4994024801686257664, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$85 }
	$13 = CALL $78($8, $5)
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$8), [9661])
	
.LABEL $label$86
	$9 = *($0)
	CALL eosio_assert([1], [9786])
	CALL eosio_assert(((int_32)*(($13 + [24])) == (int_32)$8), [9821])
	CALL eosio_assert(((int_64)*(($0 + [152])) == (int_64)CALL eosio_assert4()), [9867])
	$15 = *($13)
	*($13) = $1
	*($13 + [16]) = *($7 + [53])
	*($13 + [8]) = *($4 + [312])
	CALL eosio_assert(((int_64)$15 == (int_64)$1), [9918])
	CALL eosio_assert([1], [9180])
	CALL memcpy(($4 + [320]), $13, [8])
	CALL eosio_assert([1], [9180])
	CALL memcpy((($4 + [320]) | [8]), ($13 + [8]), [8])
	CALL eosio_assert([1], [9180])
	CALL memcpy((($4 + [320]) + [16]), ($13 + [16]), [1])
	CALL db_update_i64(*($13 + [28]), $9, ($4 + [320]), [17])
	$5 = ($0 + [168])
	if ( (uint_64)($15 <= *($5)) ){ goto $label$84 }
	*($5) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	goto $label$84 
	
.LABEL $label$85
	$15 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [152])) == (int_64)CALL eosio_assert4()), [9735])
	*(($5 = CALL _Znwj([40])) + [24]) = $8
	*($5) = $1
	*($5 + [8]) = *($4 + [312])
	*($5 + [16]) = *($7 + [53])
	CALL eosio_assert([1], [9180])
	CALL memcpy(($4 + [320]), $5, [8])
	CALL eosio_assert([1], [9180])
	CALL memcpy((($4 + [320]) | [8]), ($5 + [8]), [8])
	CALL eosio_assert([1], [9180])
	CALL memcpy((($4 + [320]) + [16]), ($5 + [16]), [1])
	$1 = *($5)
	$13 = CALL db_store_i64(*($2), (int_64)-4994024801686257664, $15, $1, ($4 + [320]), [17])
	*($5 + [28]) = $13
	$2 = ($0 + [168])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$90 }
	*($2) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$90
	*($4 + [408]) = $5
	$1 = *($5)
	*($4 + [320]) = $1
	*($4 + [168]) = $13
	$12 = ($0 + [180])
	$2 = *($12)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [184]))) ){ goto $label$92 }
	*($2 + [8]) = $1
	*($2 + [16]) = $13
	*($4 + [408]) = [0]
	*($2) = $5
	*($12) = ($2 + [24])
	$5 = *($4 + [408])
	*($4 + [408]) = [0]
	if ( $5 ){ goto $label$91 }
	goto $label$84 
	
.LABEL $label$92
	CALL $79(($0 + [176]), ($4 + [408]), ($4 + [320]), ($4 + [168]))
	$5 = *($4 + [408])
	*($4 + [408]) = [0]
	if ( ($5 == 0) ){ goto $label$84 }
	
.LABEL $label$91
	CALL _ZdlPv($5)
	
.LABEL $label$84
	$1 = *(($6 + [88]))
	$15 = *(($6 + [104]))
	$9 = *($6 + [80])
	$10 = *(($6 + [96]))
	*(($4 + [16])) = $10
	*((($4 + [64]) + [24])) = $15
	*((($4 + [64]) + [16])) = $10
	*(($4 + [24])) = $15
	*($4 + [64]) = $9
	*($4 + [72]) = $1
	*($4) = $9
	*($4 + [8]) = $1
	CALL $80($7, $0, *($4 + [312]), $4)
	$13 = *($4 + [200])
	if ( ($13 == 0) ){ goto $label$93 }
	$12 = ($4 + [204])
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$13) ){ goto $label$95 }
	
.LOOP $label$96:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$97 }
	CALL _ZdlPv($2)
	
.LABEL $label$97
	if ( ((int_32)$13 != (int_32)$5) ){ goto $label$96 }
	$5 = *(($4 + [200]))
	goto $label$94 
	
.LABEL $label$95
	$5 = $13
	
.LABEL $label$94
	*($12) = $13
	CALL _ZdlPv($5)
	
.LABEL $label$93
	$2 = [1]
	
.LABEL $label$36
	CALL $81(($4 + [216]), *($4 + [220]))
	$5 = *($7 + [36])
	if ( ($5 == 0) ){ goto $label$98 }
	*(($7 + [40])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$98
	$5 = *($7 + [24])
	if ( ($5 == 0) ){ goto $label$99 }
	*(($7 + [28])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$99
	$5 = *($7 + [12])
	if ( ($5 == 0) ){ goto $label$100 }
	*(($7 + [16])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$100
	$5 = *($7)
	if ( ($5 == 0) ){ goto $label$101 }
	*($7 + [4]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$101
	$global$0 = ($4 + [464])
	$16
	(unreachable)
	return $2
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [68])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [72])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [76])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [80])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [84])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [88])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [92])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [96])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [100])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [104])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [108])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [112])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [116])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [120])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [124])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [128])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [132])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [136])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [140])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [144])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [148])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [152])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [156])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [160])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [164])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [168])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [172])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [176])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [180])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [184])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [188])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [192])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [196])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [200])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [204])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [208])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [212])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [216])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [220])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [224])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [228])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [232])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [236])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [240])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [244])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [248])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [252])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [256])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9175])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9175])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)3617214763094933504, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4 + [40]) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$7), [9661])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $40($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)3617214763094933504, $6))
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$7), [9661])
	
.LABEL $label$2
	*(($4 + [120])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}