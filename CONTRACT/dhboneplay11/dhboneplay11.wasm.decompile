(data (i32.const 8192) "onerror\00")
(data (i32.const 8200) "eosio\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8292) "onerror action\'s are only valid from the eosio system account\00")
(data (i32.const 8354) "eosio.token\00")
(data (i32.const 8366) "transfer\00")
(data (i32.const 8375) "bitpietokens\00")
(data (i32.const 8388) "dhbonetokens\00")
(data (i32.const 8401) "EOS\00")
(data (i32.const 8405) "DHB\00")
(data (i32.const 8409) "EUSD\00")
(data (i32.const 8414) "overdrawn balance\00")
(data (i32.const 8432) "Withdraw Successfully! \e6\8f\90\e7\8e\b0\e6\88\90\e5\8a\9f! \e2\80\94 [https://dhb.one]\00")
(data (i32.const 8491) "group already exists\00")
(data (i32.const 8512) "lord account does not exist\00")
(data (i32.const 8540) "threshold num must bigger than 1\00")
(data (i32.const 8573) "invalid mode\00")
(data (i32.const 8586) "invalid minute range\00")
(data (i32.const 8607) "group does not exists\00")
(data (i32.const 8629) "unopened time\00")
(data (i32.const 8643) "packet exception\00")
(data (i32.const 8660) "newest packet does not complete\00")
(data (i32.const 8692) "packet key exception\00")
(data (i32.const 8713) "must use EOS, EUSD or DHB\00")
(data (i32.const 8739) "quantity too small\00")
(data (i32.const 8758) "quantity too large\00")
(data (i32.const 8777) "waiting for the last fighting to end\00")
(data (i32.const 8814) "waiting for the new hurdle to open\00")
(data (i32.const 8849) "fighting does not exists\00")
(data (i32.const 8874) "dragon\00")
(data (i32.const 8881) "tiger\00")
(data (i32.const 8887) "peace\00")
(data (i32.const 8893) "builtmining\00")
(data (i32.const 8905) "packet does not exists\00")
(data (i32.const 8928) "packet has been robbed\00")
(data (i32.const 8951) "already robbed\00")
(data (i32.const 8966) "dhboneincome\00")
(data (i32.const 8979) "packet has already lottery\00")
(data (i32.const 9006) "packet has not finished\00")
(data (i32.const 9030) "already get this day\00")
(data (i32.const 9052) "overdrawn frozen balance\00")
(data (i32.const 9077) "built account overdrawn balance\00")
(data (i32.const 9109) "firstrechar\00")
(data (i32.const 9121) "string is too long to be a valid name\00")
(data (i32.const 9159) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9226) "character is not in allowed character set for names\00")
(data (i32.const 9278) "string is too long to be a valid symbol_code\00")
(data (i32.const 9323) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9376) "write\00")
(data (i32.const 9382) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9431) "invalid symbol name\00")
(data (i32.const 9451) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9510) "divide by zero\00")
(data (i32.const 9525) "signed division overflow\00")
(data (i32.const 9550) "attempt to add asset with different symbol\00")
(data (i32.const 9593) "addition underflow\00")
(data (i32.const 9612) "addition overflow\00")
(data (i32.const 9630) "multiplication overflow\00")
(data (i32.const 9654) "multiplication underflow\00")
(data (i32.const 9679) "attempt to subtract asset with different symbol\00")
(data (i32.const 9727) "subtraction underflow\00")
(data (i32.const 9749) "subtraction overflow\00")
(data (i32.const 9770) "read\00")
(data (i32.const 9775) "get\00")
(data (i32.const 9779) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9830) "error reading iterator\00")
(data (i32.const 9853) "cannot create objects in table of another contract\00")
(data (i32.const 9904) "cannot pass end iterator to modify\00")
(data (i32.const 9939) "object passed to modify is not in multi_index\00")
(data (i32.const 9985) "cannot modify objects in table of another contract\00")
(data (i32.const 10036) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10095) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10147) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10201) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10249) "cannot pass end iterator to erase\00")
(data (i32.const 10283) "cannot increment end iterator\00")
(data (i32.const 10313) "object passed to erase is not in multi_index\00")
(data (i32.const 10358) "cannot erase objects in table of another contract\00")
(data (i32.const 10408) "attempt to remove object that was not in multi_index\00")
(data (i32.const 18880) "\03\00\00\00\04\00\00\00\04\00\00\00\06\00\00\00")
(data (i32.const 18896) "\83\f9\a2\00DNn\00\fc)\15\00\d1W\'\00\dd4\f5\00b\db\c0\00<\99\95\00A\90C\00cQ\fe\00\bb\de\ab\00\b7a\c5\00:n$\00\d2MB\00I\06\e0\00\t\ea.\00\1c\92\d1\00\eb\1d\fe\00)\b1\1c\00\e8>\a7\00\f55\82\00D\bb.\00\9c\e9\84\00\b4&p\00A~_\00\d6\919\00S\839\00\9c\f49\00\8b_\84\00(\f9\bd\00\f8\1f;\00\de\ff\97\00\0f\98\05\00\11/\ef\00\nZ\8b\00m\1fm\00\cf~6\00\t\cb\'\00FO\b7\00\9ef?\00-\ea_\00\ba\'u\00\e5\eb\c7\00={\f1\00\f79\07\00\92R\8a\00\fbk\ea\00\1f\b1_\00\08]\8d\000\03V\00{\fcF\00\f0\abk\00 \bc\cf\006\f4\9a\00\e3\a9\1d\00^a\91\00\08\1b\e6\00\85\99e\00\a0\14_\00\8d@h\00\80\d8\ff\00\'sM\00\06\061\00\caV\15\00\c9\a8s\00{\e2`\00k\8c\c0\00\19\c4G\00\cdg\c3\00\t\e8\dc\00Y\83*\00\8bv\c4\00\a6\1c\96\00D\af\dd\00\19W\d1\00\a5>\05\00\05\07\ff\003~?\00\c22\e8\00\98O\de\00\bb}2\00&=\c3\00\1ek\ef\00\9f\f8^\005\1f:\00\7f\f2\ca\00\f1\87\1d\00|\90!\00j$|\00\d5n\fa\000-w\00\15;C\00\b5\14\c6\00\c3\19\9d\00\ad\c4\c2\00,MA\00\0c\00]\00\86}F\00\e3q-\00\9b\c6\9a\003b\00\00\b4\d2|\00\b4\a7\97\007U\d5\00\d7>\f6\00\a3\10\18\00Mv\fc\00d\9d*\00p\d7\ab\00c|\f8\00z\b0W\00\17\15\e7\00\c0IV\00;\d6\d9\00\a7\848\00$#\cb\00\d6\8aw\00ZT#\00\00\1f\b9\00\f1\n\1b\00\19\ce\df\00\9f1\ff\00f\1ej\00\99Wa\00\ac\fbG\00~\7f\d8\00\"e\b7\002\e8\89\00\e6\bf`\00\ef\c4\cd\00l6\t\00]?\d4\00\16\de\d7\00X;\de\00\de\9b\92\00\d2\"(\00(\86\e8\00\e2XM\00\c6\ca2\00\08\e3\16\00\e0}\cb\00\17\c0P\00\f3\1d\a7\00\18\e0[\00.\134\00\83\12b\00\83H\01\00\f5\8e[\00\ad\b0\7f\00\1e\e9\f2\00HJC\00\10g\d3\00\aa\dd\d8\00\ae_B\00ja\ce\00\n(\a4\00\d3\99\b4\00\06\a6\f2\00\\w\7f\00\a3\c2\83\00a<\88\00\8asx\00\af\8cZ\00o\d7\bd\00-\a6c\00\f4\bf\cb\00\8d\81\ef\00&\c1g\00U\caE\00\ca\d96\00(\a8\d2\00\c2a\8d\00\12\c9w\00\04&\14\00\12F\9b\00\c4Y\c4\00\c8\c5D\00M\b2\91\00\00\17\f3\00\d4C\ad\00)I\e5\00\fd\d5\10\00\00\be\fc\00\1e\94\cc\00p\ce\ee\00\13>\f5\00\ec\f1\80\00\b3\e7\c3\00\c7\f8(\00\93\05\94\00\c1q>\00.\t\b3\00\0bE\f3\00\88\12\9c\00\ab {\00.\b5\9f\00G\92\c2\00{2/\00\0cUm\00r\a7\90\00k\e7\1f\001\cb\96\00y\16J\00Ay\e2\00\f4\df\89\00\e8\94\97\00\e2\e6\84\00\991\97\00\88\edk\00__6\00\bb\fd\0e\00H\9a\b4\00g\a4l\00qrB\00\8d]2\00\9f\15\b8\00\bc\e5\t\00\8d1%\00\f7t9\000\05\1c\00\0d\0c\01\00K\08h\00,\eeX\00G\aa\90\00t\e7\02\00\bd\d6$\00\f7}\a6\00nHr\00\9f\16\ef\00\8e\94\a6\00\b4\91\f6\00\d1SQ\00\cf\n\f2\00 \983\00\f5K~\00\b2ch\00\dd>_\00@]\03\00\85\89\7f\00UR)\007d\c0\00m\d8\10\002H2\00[Lu\00Nq\d4\00ETn\00\0b\t\c1\00*\f5i\00\14f\d5\00\'\07\9d\00]\04P\00\b4;\db\00\eav\c5\00\87\f9\17\00Ik}\00\1d\'\ba\00\96i)\00\c6\cc\ac\00\ad\14T\00\90\e2j\00\88\d9\89\00,rP\00\04\a4\be\00w\07\94\00\f30p\00\00\fc\'\00\eaq\a8\00f\c2I\00d\e0=\00\97\dd\83\00\a3?\97\00C\94\fd\00\0d\86\8c\001A\de\00\929\9d\00\ddp\8c\00\17\b7\e7\00\08\df;\00\157+\00\\\80\a0\00Z\80\93\00\10\11\92\00\0f\e8\d8\00l\80\af\00\db\ffK\008\90\0f\00Y\18v\00b\a5\15\00a\cb\bb\00\c7\89\b9\00\10@\bd\00\d2\f2\04\00Iu\'\00\eb\b6\f6\00\db\"\bb\00\n\14\aa\00\89&/\00d\83v\00\t;3\00\0e\94\1a\00Q:\aa\00\1d\a3\c2\00\af\ed\ae\00\\&\12\00m\c2M\00-z\9c\00\c0V\97\00\03?\83\00\t\f0\f6\00+@\8c\00m1\99\009\b4\07\00\0c \15\00\d8\c3[\00\f5\92\c4\00\c6\adK\00N\ca\a5\00\a77\cd\00\e6\a96\00\ab\92\94\00\ddBh\00\19c\de\00v\8c\ef\00h\8bR\00\fc\db7\00\ae\a1\ab\00\df\151\00\00\ae\a1\00\0c\fb\da\00dMf\00\ed\05\b7\00)e0\00WV\bf\00G\ff:\00j\f9\b9\00u\be\f3\00(\93\df\00\ab\800\00f\8c\f6\00\04\cb\15\00\fa\"\06\00\d9\e4\1d\00=\b3\a4\00W\1b\8f\006\cd\t\00NB\e9\00\13\be\a4\003#\b5\00\f0\aa\1a\00Oe\a8\00\d2\c1\a5\00\0b?\0f\00[x\cd\00#\f9v\00{\8b\04\00\89\17r\00\c6\a6S\00on\e2\00\ef\eb\00\00\9bJX\00\c4\da\b7\00\aaf\ba\00v\cf\cf\00\d1\02\1d\00\b1\f1-\00\8c\99\c1\00\c3\adw\00\86H\da\00\f7]\a0\00\c6\80\f4\00\ac\f0/\00\dd\ec\9a\00?\\\bc\00\d0\dem\00\90\c7\1f\00*\db\b6\00\a3%:\00\00\af\9a\00\adS\93\00\b6W\04\00)-\b4\00K\80~\00\da\07\a7\00v\aa\0e\00{Y\a1\00\16\12*\00\dc\b7-\00\fa\e5\fd\00\89\db\fe\00\89\be\fd\00\e4vl\00\06\a9\fc\00>\80p\00\85n\15\00\fd\87\ff\00(>\07\00ag3\00*\18\86\00M\bd\ea\00\b3\e7\af\00\8fmn\00\95g9\001\bf[\00\84\d7H\000\df\16\00\c7-C\00%a5\00\c9p\ce\000\cb\b8\00\bfl\fd\00\a4\00\a2\00\05l\e4\00Z\dd\a0\00!oG\00b\12\d2\00\b9\\\84\00paI\00kV\e0\00\99R\01\00PU7\00\1e\d5\b7\003\f1\c4\00\13n_\00]0\e4\00\85.\a9\00\1d\b2\c3\00\a126\00\08\b7\a4\00\ea\b1\d4\00\16\f7!\00\8fi\e4\00\'\ffw\00\0c\03\80\00\8d@-\00O\cd\a0\00 \a5\99\00\b3\a2\d3\00/]\n\00\b4\f9B\00\11\da\cb\00}\be\d0\00\9b\db\c1\00\ab\17\bd\00\ca\a2\81\00\08j\\\00.U\17\00\'\00U\00\7f\14\f0\00\e1\07\86\00\14\0bd\00\96A\8d\00\87\be\de\00\da\fd*\00k%\b6\00{\894\00\05\f3\fe\00\b9\bf\9e\00hjO\00J*\a8\00O\c4Z\00-\f8\bc\00\d7Z\98\00\f4\c7\95\00\0dM\8d\00 :\a6\00\a4W_\00\14?\b1\00\808\95\00\cc \01\00q\dd\86\00\c9\de\b6\00\bf`\f5\00Me\11\00\01\07k\00\8c\b0\ac\00\b2\c0\d0\00QUH\00\1e\fb\0e\00\95r\c3\00\a3\06;\00\c0@5\00\06\dc{\00\e0E\cc\00N)\fa\00\d6\ca\c8\00\e8\f3A\00|d\de\00\9bd\d8\00\d9\be1\00\a4\97\c3\00wX\d4\00i\e3\c5\00\f0\da\13\00\ba:<\00F\18F\00Uu_\00\d2\bd\f5\00n\92\c6\00\ac.]\00\0eD\ed\00\1c>B\00a\c4\87\00)\fd\e9\00\e7\d6\f3\00\"|\ca\00o\915\00\08\e0\c5\00\ff\d7\8d\00nj\e2\00\b0\fd\c6\00\93\08\c1\00|]t\00k\ad\b2\00\cdn\9d\00>r{\00\c6\11j\00\f7\cf\a9\00)s\df\00\b5\c9\ba\00\b7\00Q\00\e2\b2\0d\00t\ba$\00\e5}`\00t\d8\8a\00\0d\15,\00\81\18\0c\00~f\94\00\01)\16\00\9fzv\00\fd\fd\be\00VE\ef\00\d9~6\00\ec\d9\13\00\8b\ba\b9\00\c4\97\fc\001\a8\'\00\f1n\c3\00\94\c56\00\d8\a8V\00\b4\a8\b5\00\cf\cc\0e\00\12\89-\00oW4\00,V\89\00\99\ce\e3\00\d6 \b9\00k^\aa\00>*\9c\00\11_\cc\00\fd\0bJ\00\e1\f4\fb\00\8e;m\00\e2\86,\00\e9\d4\84\00\fc\b4\a9\00\ef\ee\d1\00.5\c9\00/9a\008!D\00\1b\d9\c8\00\81\fc\n\00\fbJj\00/\1c\d8\00S\b4\84\00N\99\8c\00T\"\cc\00*U\dc\00\c0\c6\d6\00\0b\19\96\00\1ap\b8\00i\95d\00&Z`\00?R\ee\00\7f\11\0f\00\f4\b5\11\00\fc\cb\f5\004\bc-\004\bc\ee\00\e8]\cc\00\dd^`\00g\8e\9b\00\923\ef\00\c9\17\b8\00aX\9b\00\e1W\bc\00Q\83\c6\00\d8>\10\00\ddqH\00-\1c\dd\00\af\18\a1\00!,F\00Y\f3\d7\00\d9z\98\00\9eT\c0\00O\86\fa\00V\06\fc\00\e5y\ae\00\89\"6\008\ad\"\00g\93\dc\00U\e8\aa\00\82&8\00\ca\e7\9b\00Q\0d\a4\00\993\b1\00\a9\d7\0e\00i\05H\00e\b2\f0\00\7f\88\a7\00\88L\97\00\f9\d16\00!\92\b3\00{\82J\00\98\cf!\00@\9f\dc\00\dcGU\00\e1t:\00g\ebB\00\fe\9d\df\00^\d4_\00{g\a4\00\ba\acz\00U\f6\a2\00+\88#\00A\baU\00Yn\08\00!*\86\009G\83\00\89\e3\e6\00\e5\9e\d4\00I\fb@\00\ffV\e9\00\1c\0f\ca\00\c5Y\8a\00\94\fa+\00\d3\c1\c5\00\0f\c5\cf\00\dbZ\ae\00G\c5\86\00\85Cb\00!\86;\00,y\94\00\10a\87\00*L{\00\80,\1a\00C\bf\12\00\88&\90\00x<\89\00\a8\c4\e4\00\e5\db{\00\c4:\c2\00&\f4\ea\00\f7g\8a\00\0d\92\bf\00e\a3+\00=\93\b1\00\bd|\0b\00\a4Q\dc\00\'\ddc\00i\e1\dd\00\9a\94\19\00\a8)\95\00h\ce(\00\t\ed\b4\00D\9f \00N\98\ca\00p\82c\00~|#\00\0f\b92\00\a7\f5\8e\00\14V\e7\00!\f1\08\00\b5\9d*\00o~M\00\a5\19Q\00\b5\f9\ab\00\82\df\d6\00\96\dda\00\166\02\00\c4:\9f\00\83\a2\a1\00r\edm\009\8dz\00\82\b8\a9\00k2\\\00F\'[\00\004\ed\00\d2\00w\00\fc\f4U\00\01YM\00\e0q\80\00")
(data (i32.const 21664) "\00\00\00@\fb!\f9?\00\00\00\00-Dt>\00\00\00\80\98F\f8<\00\00\00`Q\ccx;\00\00\00\80\83\1b\f09\00\00\00@ %z8\00\00\00\80\"\82\e36\00\00\00\00\1d\f3i5")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$4 (param i64)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "send_inline" (func $fimport$6 (param i32 i32)))
(import "env" "is_account" (func $fimport$7 (param i64) (result i32)))
(import "env" "current_receiver" (func $fimport$8 (result i64)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "current_time" (func $fimport$11 (result i64)))
(import "env" "sha256" (func $fimport$12 (param i32 i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "assert_sha256" (func $fimport$15 (param i32 i32 i32)))
(import "env" "__multi3" (func $fimport$16 (param i32 i64 i64 i64 i64)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$20 (param i64 i64 i64) (result i32)))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "abort" (func $fimport$22))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$24 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$35 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$36 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$39 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$41 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$42 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$43 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $113))
(export "_Znwj" (func $111))
(export "_Znaj" (func $112))
(export "_ZdaPv" (func $114))
(export "_ZnwjSt11align_val_t" (func $115))
(export "_ZnajSt11align_val_t" (func $116))
(export "_ZdlPvSt11align_val_t" (func $117))
(export "_ZdaPvSt11align_val_t" (func $118))
(table $0 14 14 anyfunc)
(elem (i32.const 1) $3 $5 $7 $9 $11 $13 $15 $17 $19 $21 $23 $25 $27)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 21728))
(global $global$2 i32 (i32.const 21728))


int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9376])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9376])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9770])
	CALL memcpy($2, *($4 + [4]), [8])
	*($3 + [8]) = *($2)
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9770])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9770])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9770])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9770])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [15]) != (int_32)[0])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9770])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9770])
	CALL memcpy($4, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9775])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $85($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9770])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9770])
	CALL memcpy(($3 + [33]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9770])
	CALL memcpy(($4 + [34]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9770])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4 + [35]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9770])
	CALL memcpy(($4 + [36]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [9770])
	CALL memcpy(($4 + [40]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9770])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9770])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($0, *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [9770])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9770])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($0, *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [9770])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9376])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9376])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9376])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9376])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9376])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $94($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $121($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $121($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $119($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $138 (int_32 $0)
{
	return CALL $139([10484], $0)
}

void .FUNC $123 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $136(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10464])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $136(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $122 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_64 .FUNC $130 (float_64 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = ((CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $0) >> (uint_64)(int_64)32)) & [2147483647]
	if ( ((uint_32)$2) > (uint_32)[1072243195]) ){ goto $label$3 }
	if ( ((uint_32)$2 > (uint_32)[1044816029]) ){ goto $label$2 }
	*($1) = ((float_64)$0 + (float_64)(float_64)1329227995784915872903807e12)
	$global$0 = ($1 + [16])
	return (float_64)1
	
.LABEL $label$3
	if ( ($2 <= [2146435072]) ){ goto $label$1 }
	$global$0 = ($1 + [16])
	return (float_64))($0 - $0)
	
.LABEL $label$2
	$0 = CALL $126($0, (float_64)0)
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$1
	$2 = (CALL $128($0, $1) & [3])
	if ( ((int_32)$2 == (int_32)[2]) ){ goto $label$6 }
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$5 }
	if ( $2 ){ goto $label$4 }
	$0 = CALL $126(*($1), *($1 + [8]))
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$6
	$0 = CALL $126(*($1), *($1 + [8]))
	$global$0 = ($1 + [16])
	return !(float_64)$0
	
.LABEL $label$5
	$0 = CALL $129(*($1), *($1 + [8]), [1])
	$global$0 = ($1 + [16])
	return !(float_64)$0
	
.LABEL $label$4
	$0 = CALL $129(*($1), *($1 + [8]), [1])
	$global$0 = ($1 + [16])
	return $0
}

int_64 .FUNC $131 (float_64 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	float_64 $4
	$1 = ($global$0 - [16])
	if ( ((float_64)$0 == (float_64)(float_64)0) ){ goto $label$1 }
	$2 = (CASTING int_64)(float_64 $0)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)52)) & [2047]
	if ( ((uint_32)$3) > (uint_32)[1074]) ){ goto $label$1 }
	$4 = (float_64))(( ((float_64)((float_64)$0 + (float_64)(float_64)-4503599627370496) + (float_64)(float_64)4503599627370496) ? ((float_64)((float_64)$0 + (float_64)(float_64)4503599627370496) + (float_64)(float_64)-4503599627370496) : ((int_64)$2 < (int_64)0) ) - $0)
	if ( ((uint_32)$3 > (uint_32)[1022]) ){ goto $label$2 }
	*($1 + [8]) = $4
	return (CASTING float_64)(int_32 (CASTING uint_32)(uint_64 (int_64)$2 >> (int_64)63)))
	
.LABEL $label$2
	$0 = ((float_64)$4 + (float_64)$0)
	if ( ((int_32)((float_64)$4 > (float_64)(float_64)0) ^ (int_32)[1]) ){ goto $label$1 }
	$0 = ((float_64)$0 + (float_64)(float_64)-1)
	
.LABEL $label$1
	return $0
}

int_64 .FUNC $132 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_64 $4
	float_64 $5
	float_64 $6
	$1 = (CASTING int_64)(float_64 $0)
	if ( ((int_64)$1 < (int_64)0) ){ goto $label$4 }
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((uint_32)$2) <= (uint_32)[1048575]) ){ goto $label$4 }
	if ( ((uint_32)$2 > (uint_32)[2146435071]) ){ goto $label$5 }
	$3 = [-1023]
	$1 = ((int_64)$1 & (int_64)4294967295)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$3 }
	$0 = (float_64)0
	if ( ((int_32)$2 != (int_32)[1072693248]) ){ goto $label$3 }
	
.LABEL $label$5
	return $0
	
.LABEL $label$4
	if ( ((int_64)((int_64)$1 & (int_64)9223372036854775807) == (int_64)0) ){ goto $label$2 }
	if ( ((int_64)$1 <= (int_64)-1) ){ goto $label$1 }
	$4 = (CASTING int_64)(float_64 ((float_64)$0 * (float_64)(float_64)18014398509481984))
	$1 = ((int_64)$4 & (int_64)4294967295)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32))
	$3 = [-1077]
	
.LABEL $label$3
	$5 = ((float_64)$5 * (float_64)$5)
	$0 = ((float_64)$5 * (float_64)$5)
	$6 = ((float_64)$0 * (float_64)((float_64)$0 * (float_64)(float_64)0.5))
	$5 = ((float_64)$0 / (float_64)((float_64)$0 + (float_64)(float_64)2))
	$0 = ((float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 (($2 & [1048575]) + [1072079006])) << (int_64)32) | (int_64)$1)) + (float_64)(float_64)-1)
	$2 = ($2 + [614242])
	$5 = (CASTING float_64)(int_32 ($3 + uint_32($2 >> [20])))
	return ((float_64)((float_64)$5 * (float_64)(float_64)0.6931471803691238) + (float_64)((float_64)$0 + (float_64)(float_64))(((float_64)((float_64)$5 * (float_64)(float_64)1.9082149292705877e-10) + (float_64)((float_64)$5 * (float_64)((float_64)$6 + (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.15313837699209373) + (float_64)(float_64)0.22222198432149784)) + (float_64)(float_64)0.3999999999940942)) + (float_64)((float_64)$5 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.14798198605116586) + (float_64)(float_64)0.1818357216161805)) + (float_64)(float_64)0.2857142874366239)) + (float_64)(float_64)0.6666666666666735)))))) - $6)))
	
.LABEL $label$2
	return ((float_64)(float_64)-1 / (float_64)((float_64)$0 * (float_64)$0))
	
.LABEL $label$1
	return ((float_64)(float_64))($0 - $0) / (float_64)(float_64)0)
}

int_64 .FUNC $133 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_64 .FUNC $134 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $136 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $124())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $137($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $138($1)
	
.LABEL $label$2
	*(CALL $124()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $138(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $141($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9830])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $138($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)16782341
	*($5 + [48]) = [1440]
	*($5 + [52]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [41])
	*($3 + [64]) = ($5 + [42])
	*($3 + [68]) = ($5 + [43])
	*($3 + [72]) = ($5 + [44])
	*($3 + [76]) = ($5 + [48])
	CALL $99(($3 + [40]), ($3 + [32]))
	*($5 + [56]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $40(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $141($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

int_64 .FUNC $126 (float_64 $0, float_64 $1)
{
	float_64 $2
	float_64 $3
	float_64 $4
	$3 = ((float_64)$2 * (float_64)$2)
	$2 = ((float_64)$0 * (float_64)$0)
	$3 = ((float_64)$2 * (float_64)(float_64)0.5)
	$4 = (float_64)
	return ((float_64)$4((float_64)1 - $3)) + (float_64)((float_64)(float_64))((float_64))((float_64)1 - $4) - $3) + (float_64)(float_64))(((float_64)$2 * (float_64)((float_64)((float_64)$2 * (float_64)((float_64)((float_64)$2 * (float_64)((float_64)((float_64)$2 * (float_64)(float_64)2.480158728947673e-05) + (float_64)(float_64)-0.001388888888887411)) + (float_64)(float_64)0.0416666666666666)) + (float_64)((float_64)((float_64)$3 * (float_64)$3) * (float_64)((float_64)((float_64)$2 * (float_64)((float_64)((float_64)$2 * (float_64)(float_64)-1.1359647557788195e-11) + (float_64)(float_64)2.087572321298175e-09)) + (float_64)(float_64)-2.7557314351390663e-07)))) - ((float_64)$0 * (float_64)$1))))
}

void .FUNC $49 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$3 = ($global$0 - [160])
	$global$0 = $3
	$4 = CALL $135([8401])
	if ( ($4 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [9278])
	goto $label$4 
	
.LABEL $label$5
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = (int_64)0
	
.LOOP $label$6:
	$6 = *(($4 + [8400]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$7
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$6 }
	if ( ((int_64)*($2 + [8]) != (int_64)((int_64)((int_64)$5 << (int_64)8) | (int_64)4)) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_64)*($2 + [8]) != (int_64)4) ){ goto $label$1 }
	
.LABEL $label$2
	*(($3 + [72])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$7 = *($0)
	*($3 + [40]) = $7
	$8 = *($2)
	*($3 + [48]) = $8
	$4 = CALL db_find_i64($7, $8, (int_64)3617074512601808896, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*(CALL $79(($3 + [40]), $4) + [32]) == (int_32)($3 + [40])), [9779])
	$2 = *($3 + [64])
	if ( $2 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$9
	$4 = CALL $135([8405])
	if ( ($4 <= [8]) ){ goto $label$13 }
	CALL eosio_assert([0], [9278])
	goto $label$12 
	
.LABEL $label$13
	if ( ($4 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$5 = (int_64)0
	
.LOOP $label$14:
	$6 = *(($4 + [8404]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$15
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$14 }
	$9 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$10 
	
.LABEL $label$11
	$9 = (int_64)4
	
.LABEL $label$10
	CALL eosio_assert([1], [9382])
	$5 = (uint_64)$9 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$10 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$5 = $10
	$6 = [1]
	$2 = $4
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$5 = $10
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$2 = ($4 + [1])
	$4 = $2
	if ( $6 ){ goto $label$20 }
	$6 = [1]
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$6 = [0]
	
.LABEL $label$16
	CALL eosio_assert($6, [9431])
	$11 = *($0)
	CALL eosio_assert(((int_64)$7 == (int_64)CALL $fimport$8()), [9853])
	*(($4 = CALL _Znwj([48])) + [32]) = ($3 + [40])
	*($4) = $1
	*($4 + [8]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$10 = CALL current_time()
	$5 = ((int_64)((int_64)$8 * (int_64)80) + (int_64)-420000)
	*($4 + [16]) = $5
	*($4 + [24]) = $9
	*($4 + [12]) = ((uint_64)$10 / (uint_64)(int_64)1000000)
	*($3 + [128]) = (($3 + [80]) + [32])
	*($3 + [124]) = ($3 + [80])
	*($3 + [120]) = ($3 + [80])
	*($3 + [136]) = ($3 + [120])
	*($3 + [148]) = ($4 + [8])
	*($3 + [144]) = $4
	*($3 + [152]) = ($4 + [12])
	*($3 + [156]) = ($4 + [16])
	CALL $80(($3 + [144]), ($3 + [136]))
	$10 = *($4)
	$2 = CALL db_store_i64(*((($3 + [40]) + [8])), (int_64)3617074512601808896, $11, $10, ($3 + [80]), [32])
	*($4 + [36]) = $2
	$6 = (($3 + [40]) + [16])
	if ( (uint_64)($10 <= *($6)) ){ goto $label$21 }
	*($6) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$21
	*($3 + [144]) = $4
	$10 = *($4)
	*($3 + [80]) = $10
	*($3 + [120]) = $2
	$12 = ($3 + [68])
	$6 = *($12)
	if ( ((uint_32)$6 >= (uint_32)*((($3 + [40]) + [32]))) ){ goto $label$24 }
	*($6 + [8]) = $10
	*($6 + [16]) = $2
	*($3 + [144]) = [0]
	*($6) = $4
	*($12) = ($6 + [24])
	$4 = *($3 + [144])
	*($3 + [144]) = [0]
	if ( $4 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	CALL $81(($3 + [64]), ($3 + [144]), ($3 + [80]), ($3 + [120]))
	$4 = *($3 + [144])
	*($3 + [144]) = [0]
	if ( ($4 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL _ZdlPv($4)
	
.LABEL $label$22
	*(($3 + [16])) = $9
	*($3 + [32]) = $9
	*($3 + [8]) = $5
	*($3 + [24]) = $5
	CALL $32($0, $1, ($3 + [8]))
	$2 = *($3 + [64])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$8
	$0 = ($3 + [68])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$26 }
	
.LOOP $label$27:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$28 }
	CALL _ZdlPv($6)
	
.LABEL $label$28
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$27 }
	$4 = *(($3 + [64]))
	goto $label$25 
	
.LABEL $label$26
	$4 = $2
	
.LABEL $label$25
	*($0) = $2
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$global$0 = ($3 + [160])
}

void .FUNC $48 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [128])
	$global$0 = $3
	$4 = [0]
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$5 = *($0)
	*($3 + [8]) = $5
	$6 = *($2 + [8])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [16]) = $7)
	$8 = CALL db_find_i64($5, $7, (int_64)-5859317942822371328, $1)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	$8 = CALL $33(($3 + [8]), $8)
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)($3 + [8])), [9779])
	CALL eosio_assert(((int_64)*(($8 + [16])) == (int_64)$6), [9451])
	$5 = *($2)
	$2 = ((int_64)*($8 + [8]) >= (int_64)$5)
	$4 = [1]
	$9 = $8
	goto $label$1 
	
.LABEL $label$2
	$5 = *($2)
	$8 = [0]
	$9 = [0]
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [8414])
	$7 = *($0)
	CALL eosio_assert($4, [9904])
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)($3 + [8])), [9939])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$8()), [9985])
	$1 = *($8)
	CALL eosio_assert(((int_64)$6 == (int_64)*(($8 + [16]))), [9679])
	$10 = (int_64)
	*($8 + [8]) = $10(*($8 + [8]) - $5))
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [9727])
	CALL eosio_assert(((int_64)*($8 + [8]) < (int_64)4611686018427387904), [9749])
	CALL eosio_assert(((int_64)$6 == (int_64)*(($8 + [32]))), [9550])
	$6 = ((int_64)*($8 + [24]) + (int_64)$5)
	*($8 + [24]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9593])
	CALL eosio_assert(((int_64)*($8 + [24]) < (int_64)4611686018427387904), [9612])
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [10036])
	*($3 + [96]) = (($3 + [48]) + [40])
	*($3 + [92]) = ($3 + [48])
	*($3 + [88]) = ($3 + [48])
	*($3 + [104]) = ($3 + [88])
	*($3 + [116]) = ($8 + [8])
	*($3 + [112]) = $9
	*($3 + [120]) = ($8 + [24])
	CALL $82(($3 + [112]), ($3 + [104]))
	CALL db_update_i64(*($8 + [44]), $7, ($3 + [48]), [40])
	$8 = (($3 + [8]) + [16])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$3 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$2 = *($3 + [32])
	if ( ($2 == 0) ){ goto $label$4 }
	$4 = ($3 + [36])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$8 = ($8 + [-24])
	$0 = *($8)
	*($8) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	CALL _ZdlPv($0)
	
.LABEL $label$8
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$7 }
	$8 = *(($3 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$8 = $2
	
.LABEL $label$5
	*($4) = $2
	CALL _ZdlPv($8)
	
.LABEL $label$4
	$global$0 = ($3 + [128])
}

void .FUNC $125 (int_32 $0)
{
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9830])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $138($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([224])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [208]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [64])
	*($3 + [60]) = ($5 + [128])
	*($3 + [64]) = ($5 + [192])
	*($3 + [68]) = ($5 + [196])
	*($3 + [72]) = ($5 + [200])
	*($3 + [76]) = ($5 + [204])
	CALL $100(($3 + [40]), ($3 + [32]))
	*($5 + [212]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $46(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $141($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [40])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [44])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [9770])
	CALL memcpy(($0 + [16]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[31]), [9770])
	CALL memcpy(($0 + [48]), *($1 + [4]), [32])
	*($1 + [4]) = (*($1 + [4]) + [32])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9770])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0 + [8]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9770])
	CALL memcpy(($0 + [12]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [9770])
	CALL memcpy(($0 + [16]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy(($0 + [24]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [40])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [44])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = *($4 + [4])
	*(($1 + [16])) = *(($6 + [8]))
	*($1 + [8]) = *($6)
	$6 = *($4 + [8])
	*($1 + [24]) = *($6)
	*(($1 + [32])) = *(($6 + [8]))
	$6 = *($4 + [12])
	*($1 + [64]) = *($6)
	*(($1 + [80])) = *(($6 + [16]))
	*(($1 + [88])) = *(($6 + [24]))
	*(($1 + [72])) = *(($6 + [8]))
	$6 = *($4 + [16])
	*(($1 + [96])) = *($6)
	*(($1 + [112])) = *(($6 + [16]))
	*(($1 + [120])) = *(($6 + [24]))
	*(($1 + [104])) = *(($6 + [8]))
	$4 = *($4 + [20])
	*($1 + [128]) = *($4)
	*(($1 + [144])) = *(($4 + [16]))
	*(($1 + [136])) = *(($4 + [8]))
	*(($1 + [152])) = *(($4 + [24]))
	CALL memset(($1 + [160]), [0], [32])
	*($1 + [196]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$7 = ($1 + [40])
	$8 = ($1 + [196])
	$9 = ($1 + [128])
	$10 = ($1 + [64])
	$11 = ($1 + [24])
	$12 = ($1 + [8])
	$13 = *($1 + [40])
	$6 = *(($1 + [44]))
	$14 = ($6 - $13)
	$15 = (CASTING uint_64)(uint_32 ((int_32)$14 / (int_32)[56]))
	$4 = [92]
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$15 = (uint_64)$15 >> (uint_64)(int_64)7
	if ( ((int_64)$15) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$3 }
	$4 = (((int_32)((uint_32)($14 + [-56]) / (uint_32)[56]) * (int_32)[52]) + $4)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 + [-52])
	
.LABEL $label$2
	$6 = ($4 + [141])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$4 = CALL $138($6)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	*($3 + [16]) = $3
	*($3 + [28]) = $12
	*($3 + [24]) = $1
	*($3 + [32]) = $11
	*($3 + [36]) = $7
	*($3 + [40]) = $10
	*($3 + [44]) = $9
	*($3 + [48]) = ($1 + [192])
	*($3 + [52]) = $8
	*($3 + [56]) = ($1 + [200])
	*($3 + [60]) = ($1 + [204])
	CALL $103(($3 + [24]), ($3 + [16]))
	$15 = *($1)
	*($1 + [212]) = CALL db_store_i64(*($5 + [8]), (int_64)-6228190869736914944, *(*($0 + [8])), $15, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$15 >= (uint_64)*($5 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $141($4)
	if ( (uint_64)($15 <= *($5 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [64])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	$3 = CALL $135([8401])
	if ( ($3 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9278])
	goto $label$5 
	
.LABEL $label$6
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$4 = (int_64)0
	
.LOOP $label$7:
	$5 = *(($3 + [8400]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$8
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$7 }
	$6 = *($2 + [8])
	if ( ((int_64)$6 == (int_64)((int_64)((int_64)$4 << (int_64)8) | (int_64)4)) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$6 = *($2 + [8])
	if ( ((int_64)$6 == (int_64)4) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $135([8405])
	if ( ($3 <= [8]) ){ goto $label$11 }
	CALL eosio_assert([0], [9278])
	goto $label$10 
	
.LABEL $label$11
	if ( ($3 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$4 = (int_64)0
	
.LOOP $label$12:
	$5 = *(($3 + [8404]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$13 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$13
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$12 }
	if ( ((int_64)$6 == (int_64)((int_64)((int_64)$4 << (int_64)8) | (int_64)4)) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$6 != (int_64)4) ){ goto $label$1 }
	
.LABEL $label$2
	*($0) = *($2)
	*(($0 + [8])) = *(($2 + [8]))
	CALL eosio_assert([1], [9510])
	$4 = *($0)
	CALL eosio_assert([1], [9525])
	*($0) = ((int_64)$4 / (int_64)20)
	return 
	
.LABEL $label$1
	*($0 + [8]) = $6
	*($0) = (int_64)0
	CALL eosio_assert([1], [9382])
	$4 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$4 = $6
	$2 = [1]
	$5 = $3
	$3 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$18
	$4 = $6
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$0 = ($3 + [1])
	$3 = $0
	if ( $5 ){ goto $label$19 }
	$2 = [1]
	$3 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$16 }
	
.LABEL $label$17
	CALL eosio_assert($2, [9431])
	return 
	
.LABEL $label$15
	CALL eosio_assert([0], [9431])
	return 
	
.LABEL $label$14
	CALL eosio_assert([0], [9431])
}

int_32 .FUNC $124 ()
{
	return [10468]
}

int_32 .FUNC $128 (float_64 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	float_64 $7
	float_64 $8
	float_64 $9
	int_32 $10
	float_64 $11
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = (CASTING int_64)(float_64 $0)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)63))
	$5 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$6 = ($5) & [2147483647]
	if ( ((uint_32)$6) > (uint_32)[1074752122]) ){ goto $label$13 }
	if ( ((int_32)($5 & [1048575]) == (int_32)[598523]) ){ goto $label$10 }
	if ( ((uint_32)$6 > (uint_32)[1073928572]) ){ goto $label$12 }
	if ( ($4 == 0) ){ goto $label$7 }
	$0 = ((float_64)$0 + (float_64)(float_64)1.5707963267341256)
	$7 = ((float_64)$0 + (float_64)(float_64)6.077100506506192e-11)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)6.077100506506192e-11)
	$global$0 = ($2 + [48])
	return [-1]
	
.LABEL $label$13
	if ( ((uint_32)$6 > (uint_32)[1075594811]) ){ goto $label$14 }
	if ( ((uint_32)$6 > (uint_32)[1075183036]) ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)[1074977148]) ){ goto $label$10 }
	if ( ($4 == 0) ){ goto $label$5 }
	$0 = ((float_64)$0 + (float_64)(float_64)4.712388980202377)
	$7 = ((float_64)$0 + (float_64)(float_64)1.8231301519518578e-10)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)1.8231301519518578e-10)
	$global$0 = ($2 + [48])
	return [-3]
	
.LABEL $label$14
	if ( ((uint_32)$6 <= (uint_32)[1094263290]) ){ goto $label$10 }
	if ( ($6 <= [2146435072]) ){ goto $label$9 }
	$0 = (float_64)
	*($1) = $0($0 - $0))
	*($1 + [8]) = $0
	$global$0 = ($2 + [48])
	return [0]
	
.LABEL $label$12
	if ( ($4 == 0) ){ goto $label$6 }
	$0 = ((float_64)$0 + (float_64)(float_64)3.1415926534682512)
	$7 = ((float_64)$0 + (float_64)(float_64)1.2154201013012384e-10)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)1.2154201013012384e-10)
	$global$0 = ($2 + [48])
	return [-2]
	
.LABEL $label$11
	if ( ((int_32)$6 != (int_32)[1075388923]) ){ goto $label$8 }
	
.LABEL $label$10
	$9 = ((float_64)$7 * (float_64)(float_64)6.077100506506192e-11)
	$7 = ((float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.6366197723675814) + (float_64)(float_64)6755399441055744) + (float_64)(float_64)-6755399441055744)
	$8 = ((float_64)$0 + (float_64)((float_64)$7 * (float_64)(float_64)-1.5707963267341256))
	$0 = (float_64)
	*($1) = $0($8 - $9))
	$10 = uint_32($6 >> [20])
	$5 = ((int_32)($10 - ((CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $0) >> (uint_64)(int_64)52)) & [2047])) < (int_32)[17])
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)2147483648) ){ goto $label$17 }
	$6 = [-2147483648]
	if ( ($5 == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$6 = (CASTING int_32)(float_64 $7)
	if ( $5 ){ goto $label$15 }
	
.LABEL $label$16
	$9 = (float_64)
	$0 = ((float_64)$7 * (float_64)(float_64)6.077100506303966e-11)
	$11 = (float_64)
	$0 = (float_64)
	*($1) = $0($11($8 - $0)) - $9(((float_64)$7 * (float_64)(float_64)2.0222662487959506e-21) - (float_64))((float_64))($8 - $11) - $0)))))
	if ( ((int_32)($10 - ((CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $0) >> (uint_64)(int_64)52)) & [2047])) < (int_32)[50]) ){ goto $label$18 }
	$9 = (float_64)
	$0 = ((float_64)$7 * (float_64)(float_64)2.0222662487111665e-21)
	$8 = (float_64)
	$0 = (float_64)
	*($1) = $0($8($11 - $0)) - $9(((float_64)$7 * (float_64)(float_64)8.4784276603689e-32) - (float_64))((float_64))($11 - $8) - $0)))))
	goto $label$15 
	
.LABEL $label$18
	$8 = $11
	
.LABEL $label$15
	*($1 + [8]) = (float_64))((float_64))($8 - $0) - $9)
	$global$0 = ($2 + [48])
	return $6
	
.LABEL $label$9
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)$3 & (int_64)4503599627370495) | (int_64)4710765210229538816))
	$7 = (Rounds 0)($0)
	*($2 + [16]) = $7
	$0 = ((float_64)(float_64))($0 - $7) * (float_64)(float_64)16777216
	$7 = (Rounds 0)($0)
	*($2 + [24]) = $7)
	$0 = ((float_64)(float_64))($0 - $7) * (float_64)(float_64)16777216
	*($2 + [32]) = $0)
	if ( ((float_64)$0 != (float_64)(float_64)0) ){ goto $label$4 }
	$5 = (($2 + [16]) | [8])
	$10 = [2]
	
.LOOP $label$19:
	$10 = ($10 + [-1])
	$0 = *($5)
	$5 = ($5 + [-8])
	if ( ((float_64)$0 == (float_64)(float_64)0) ){ goto $label$19 }
	goto $label$3 
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$2 }
	$0 = ((float_64)$0 + (float_64)(float_64)6.2831853069365025)
	$7 = ((float_64)$0 + (float_64)(float_64)2.430840202602477e-10)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)2.430840202602477e-10)
	$global$0 = ($2 + [48])
	return [-4]
	
.LABEL $label$7
	$0 = ((float_64)$0 + (float_64)(float_64)-1.5707963267341256)
	$7 = ((float_64)$0 + (float_64)(float_64)-6.077100506506192e-11)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)-6.077100506506192e-11)
	$global$0 = ($2 + [48])
	return [1]
	
.LABEL $label$6
	$0 = ((float_64)$0 + (float_64)(float_64)-3.1415926534682512)
	$7 = ((float_64)$0 + (float_64)(float_64)-1.2154201013012384e-10)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)-1.2154201013012384e-10)
	$global$0 = ($2 + [48])
	return [2]
	
.LABEL $label$5
	$0 = ((float_64)$0 + (float_64)(float_64)-4.712388980202377)
	$7 = ((float_64)$0 + (float_64)(float_64)-1.8231301519518578e-10)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)-1.8231301519518578e-10)
	$global$0 = ($2 + [48])
	return [3]
	
.LABEL $label$4
	$10 = [2]
	
.LABEL $label$3
	$5 = CALL $127(($2 + [16]), $2, (uint_32($6 >> [20]) + [-1046]), ($10 + [1]), [1])
	$0 = *($2)
	if ( ($4 == 0) ){ goto $label$1 }
	*($1) = !(float_64)$0
	*($1 + [8]) = !(float_64)*($2 + [8])
	$global$0 = ($2 + [48])
	return ([0] - $5)
	
.LABEL $label$2
	$0 = ((float_64)$0 + (float_64)(float_64)-6.2831853069365025)
	$7 = ((float_64)$0 + (float_64)(float_64)-2.430840202602477e-10)
	*($1) = $7
	*($1 + [8]) = ((float_64)(float_64))($0 - $7) + (float_64)(float_64)-2.430840202602477e-10)
	$global$0 = ($2 + [48])
	return [4]
	
.LABEL $label$1
	*($1) = $0
	*($1 + [8]) = *($2 + [8])
	$global$0 = ($2 + [48])
	return $5
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $138($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $141($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

void .FUNC $9 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$5 = ($global$0 - [320])
	$global$0 = $5
	*($5 + [176]) = $2
	CALL require_auth(*($0))
	$6 = [0]
	*(($5 + [168])) = [0]
	*($5 + [152]) = (int_64)-1
	*($5 + [160]) = (int_64)0
	$2 = *($0)
	*($5 + [136]) = $2
	*($5 + [144]) = $2
	$7 = [0]
	$8 = CALL db_find_i64($2, $2, (int_64)7343588546453700608, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $38(($5 + [136]), $8)
	CALL eosio_assert(((int_32)*($7 + [52]) == (int_32)($5 + [136])), [9779])
	
.LABEL $label$1
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [8607])
	if ( (*($7 + [43]) == 0) ){ goto $label$2 }
	$6 = [1]
	$10 = *($7 + [48])
	$9 = *($7 + [44])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$2 }
	$2 = CALL current_time()
	$6 = ($6 <= $10)
	$6 = (CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000))
	$6 = ((uint_32)(((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) - $6) + ((uint_32)($6 + [28800]) % (uint_32)[86400])) / (uint_32)[60])
	$11 = ((uint_32)$6 >= (uint_32)$9)
	$6 = ( ($11 | $6) ? ($11 & $6) : ((uint_32)$9 > (uint_32)$10) )
	
.LABEL $label$2
	CALL eosio_assert($6, [8629])
	$6 = [0]
	*(($9 = (($5 + [96]) + [32]))) = [0]
	*($5 + [104]) = $1
	*($5 + [112]) = (int_64)-1
	*($5 + [120]) = (int_64)0
	$2 = *($0)
	*($5 + [96]) = $2
	$12 = *($7 + [24])
	if ( (int_64)($12 == 0) ){ goto $label$4 }
	$10 = CALL db_find_i64($2, $1, (int_64)-6228190869736914944, $12)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $43(($5 + [96]), $10)
	CALL eosio_assert(((int_32)*($6 + [208]) == (int_32)($5 + [96])), [9779])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8643])
	CALL eosio_assert(((int_32)*($6 + [204]) != (int_32)[0]), [8660])
	$2 = ((int_64)*(($7 + [24])) + (int_64)1)
	goto $label$3 
	
.LABEL $label$4
	$2 = (int_64)1
	
.LABEL $label$3
	CALL eosio_assert(((int_64)*($5 + [176]) == (int_64)$2), [8692])
	*(($6 = (($5 + [80]) + [8]))) = *(($7 + [16]))
	*($5 + [80]) = *($7 + [8])
	$2 = *($6)
	*((($5 + [48]) + [8])) = $2
	*(($5 + [8])) = $2
	$2 = *($5 + [80])
	*($5) = $2
	*($5 + [48]) = $2
	CALL $44(($5 + [64]), $5, $5)
	CALL sha256($3, [32], ($5 + [16]))
	$2 = *($0)
	*($5 + [208]) = $3
	*($5 + [212]) = $4
	*($5 + [196]) = ($5 + [80])
	*($5 + [192]) = ($5 + [176])
	*($5 + [200]) = ($5 + [64])
	*($5 + [204]) = ($5 + [16])
	*($5 + [256]) = $2
	CALL eosio_assert(((int_64)*($5 + [96]) == (int_64)CALL $fimport$8()), [9853])
	*($5 + [284]) = ($5 + [192])
	*($5 + [280]) = ($5 + [96])
	*($5 + [288]) = ($5 + [256])
	*(($3 = CALL _Znwj([224])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48]) = [0]
	*($3 + [208]) = ($5 + [96])
	CALL $45(($5 + [280]), $3)
	*($5 + [272]) = $3
	$2 = *($3)
	*($5 + [280]) = $2
	$4 = *($3 + [212])
	*($5 + [188]) = $4
	$10 = ($5 + [124])
	$6 = *($10)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$8 }
	*($6 + [8]) = $2
	*($6 + [16]) = $4
	*($5 + [272]) = [0]
	*($6) = $3
	*($10) = ($6 + [24])
	$3 = *($5 + [272])
	*($5 + [272]) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	CALL $46(($5 + [120]), ($5 + [272]), ($5 + [280]), ($5 + [188]))
	$3 = *($5 + [272])
	*($5 + [272]) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$6 = *($3 + [40])
	if ( ($6 == 0) ){ goto $label$9 }
	*(($3 + [44])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$9
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0)
	CALL eosio_assert($8, [9904])
	CALL eosio_assert(((int_32)*($7 + [52]) == (int_32)($5 + [136])), [9939])
	CALL eosio_assert(((int_64)*($5 + [136]) == (int_64)CALL $fimport$8()), [9985])
	*($7 + [24]) = *($5 + [176])
	$2 = *($7)
	CALL eosio_assert([1], [10036])
	*($5 + [264]) = (($5 + [192]) + [52])
	*($5 + [260]) = ($5 + [192])
	*($5 + [256]) = ($5 + [192])
	*($5 + [272]) = ($5 + [256])
	*($5 + [284]) = ($7 + [8])
	*($5 + [280]) = $7
	*($5 + [288]) = ($7 + [24])
	*($5 + [292]) = ($7 + [32])
	*($5 + [296]) = ($7 + [40])
	*($5 + [300]) = ($7 + [41])
	*($5 + [304]) = ($7 + [42])
	*($5 + [308]) = ($7 + [43])
	*($5 + [312]) = ($7 + [44])
	*($5 + [316]) = ($7 + [48])
	CALL $39(($5 + [280]), ($5 + [272]))
	CALL db_update_i64(*($7 + [56]), $1, ($5 + [192]), [52])
	$7 = ($5 + [152])
	if ( (uint_64)($2 <= *($7)) ){ goto $label$10 }
	*($7) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	$6 = *($5 + [120])
	if ( ($6 == 0) ){ goto $label$11 }
	$4 = ($5 + [124])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	
.LOOP $label$14:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$15 }
	$0 = *($3 + [40])
	if ( ($0 == 0) ){ goto $label$16 }
	*(($3 + [44])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$16
	CALL _ZdlPv($3)
	
.LABEL $label$15
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$14 }
	$7 = *(($5 + [120]))
	goto $label$12 
	
.LABEL $label$13
	$7 = $6
	
.LABEL $label$12
	*($4) = $6
	CALL _ZdlPv($7)
	
.LABEL $label$11
	$0 = *($5 + [160])
	if ( ($0 == 0) ){ goto $label$17 }
	$6 = ($5 + [164])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$19 }
	
.LOOP $label$20:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$21 }
	CALL _ZdlPv($3)
	
.LABEL $label$21
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$20 }
	$7 = *(($5 + [160]))
	goto $label$18 
	
.LABEL $label$19
	$7 = $0
	
.LABEL $label$18
	*($6) = $0
	CALL _ZdlPv($7)
	
.LABEL $label$17
	$global$0 = ($5 + [320])
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $138($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [32]) + [24]))) = (int_64)0
	*(($8 = (($4 + [32]) + [16]))) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[31]), [9770])
	CALL memcpy(($4 + [32]), $2, [32])
	*(($4 + [20])) = ($2 + [32])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*(($9 = (($4 + [64]) + [24]))) = *($3)
	*(($3 = (($4 + [64]) + [16]))) = *($8)
	*($4 + [72]) = *($4 + [40])
	*($4 + [64]) = *($4 + [32])
	*((($4 + [96]) + [24])) = *($9)
	*((($4 + [96]) + [16])) = *($3)
	*($4 + [104]) = *($4 + [72])
	*($4 + [96]) = *($4 + [64])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [96])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $141($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [64])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = [0]
	*(($1 + [48])) = [0]
	*($1 + [32]) = (int_64)-1
	$3 = *($0)
	*($1 + [16]) = $3
	*($1 + [24]) = $3
	*($1 + [40]) = (int_64)0
	*($1 + [12]) = [0]
	*($1 + [8]) = ($1 + [16])
	CALL $76(($1 + [8]))
	$0 = CALL db_lowerbound_i64(*($1 + [16]), *($1 + [24]), (int_64)6761181073566072832, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $77(($1 + [16]), $0)
	
.LABEL $label$1
	if ( ((uint_64)*($2) >= (uint_64)((int_64)*(*($1 + [12])) + (int_64)-100)) ){ goto $label$2 }
	$4 = [0]
	
.LOOP $label$3:
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($4 & [255]) > (uint_32)[19]) ){ goto $label$2 }
	CALL eosio_assert([1], [10249])
	CALL eosio_assert([1], [10283])
	$0 = [0]
	$5 = CALL db_next_i64(*($2 + [280]), ($1 + [56]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $77(($1 + [16]), $5)
	
.LABEL $label$4
	CALL $78(($1 + [16]), $2)
	$4 = ($4 + [1])
	$2 = $0
	if ( (uint_64)(*($0) <= ((int_64)*(*($1 + [12])) + (int_64)-100)) ){ goto $label$3 }
	
.LABEL $label$2
	$4 = *($1 + [40])
	if ( ($4 == 0) ){ goto $label$5 }
	$5 = ($1 + [44])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	CALL _ZdlPv($0)
	
.LABEL $label$9
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($1 + [40]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $4
	
.LABEL $label$6
	*($5) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($1 + [64])
}

int_32 .FUNC $4 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	$3 = ($global$0 - [416])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $138($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [112]) + [24]))) = (int_64)0
	*(($9 = (($4 + [112]) + [32]))) = (int_64)0
	*(($10 = (($4 + [112]) + [40]))) = (int_64)0
	*(($11 = ($4 + [160]))) = (int_64)0
	*(($12 = ($4 + [168]))) = (int_64)0
	*(($13 = ($4 + [200]))) = (int_64)0
	*(($14 = ($4 + [192]))) = (int_64)0
	*(($15 = ($4 + [184]))) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [100]) = $2
	*($4 + [96]) = $2
	*($4 + [104]) = ($2 + $7)
	*($4 + [288]) = ($4 + [96])
	*($4 + [368]) = ($4 + [112])
	CALL $61(($4 + [368]), ($4 + [288]))
	*(($16 = (($4 + [48]) + [8]))) = *($4 + [104])
	*($4 + [48]) = *($4 + [96])
	$17 = *($16)
	*(($3 = (($4 + [240]) + [8]))) = $17
	*(($16 = (($4 + [288]) + [8]))) = $17
	$18 = *($4 + [48])
	*($4 + [288]) = $18
	*($4 + [240]) = $18
	$17 = *($16)
	*((($4 + [368]) + [8])) = $17
	*((($4 + [64]) + [24])) = $17
	*($4 + [64]) = $0
	*($4 + [72]) = $1
	$0 = *($4 + [288])
	*($4 + [80]) = $0
	*($4 + [368]) = $0
	*($3) = *($8)
	*(($8 = (($4 + [240]) + [16]))) = *($9)
	*(($9 = (($4 + [240]) + [24]))) = *($10)
	*(($10 = (($4 + [240]) + [32]))) = *($11)
	*(($11 = (($4 + [240]) + [40]))) = *($12)
	*(($12 = (($4 + [208]) + [16]))) = *($14)
	*(($14 = (($4 + [208]) + [24]))) = *($13)
	*($4 + [240]) = *($4 + [128])
	*($4 + [208]) = *($4 + [176])
	*($4 + [216]) = *($15)
	$0 = *($4 + [120])
	$1 = *($4 + [112])
	*((($4 + [336]) + [24])) = *($14)
	*((($4 + [336]) + [16])) = *($12)
	*($16) = *($3)
	*((($4 + [288]) + [16])) = *($8)
	*((($4 + [288]) + [24])) = *($9)
	*((($4 + [288]) + [32])) = *($10)
	*((($4 + [288]) + [40])) = *($11)
	*($4 + [344]) = *($4 + [216])
	*($4 + [336]) = *($4 + [208])
	*($4 + [288]) = *($4 + [240])
	$3 = (($4 + [64]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$18 = *((($4 + [288]) + [40]))
	*((($4 + [368]) + [40])) = $18
	$19 = *((($4 + [288]) + [32]))
	*((($4 + [368]) + [32])) = $19
	$20 = *((($4 + [288]) + [24]))
	*((($4 + [368]) + [24])) = $20
	$21 = *((($4 + [288]) + [16]))
	*((($4 + [368]) + [16])) = $21
	$22 = *((($4 + [288]) + [8]))
	*((($4 + [368]) + [8])) = $22
	*(($4 + [8])) = $22
	*(($4 + [16])) = $21
	*(($4 + [24])) = $20
	*(($4 + [32])) = $19
	*(($4 + [40])) = $18
	$18 = *($4 + [288])
	*($4) = $18
	*($4 + [368]) = $18
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $4), (int_32 ($4 + [336])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $141($2)
	
.LABEL $label$6
	$global$0 = ($4 + [416])
	return [1]
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($3 = ($2 + [48]))) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$4 = *($0)
	*($2 + [16]) = $4
	*($2 + [24]) = $4
	*($2 + [12]) = $1
	*($2 + [8]) = ($2 + [16])
	*($2 + [88]) = $4
	CALL eosio_assert(((int_64)$4 == (int_64)CALL $fimport$8()), [9853])
	*($2 + [68]) = ($2 + [8])
	*($2 + [64]) = ($2 + [16])
	*($2 + [72]) = ($2 + [88])
	*(($0 = CALL _Znwj([64])) + [48]) = ($2 + [16])
	CALL $67(($2 + [64]), $0)
	*($2 + [80]) = $0
	$4 = *($0)
	*($2 + [64]) = $4
	$5 = *($0 + [52])
	*($2 + [60]) = $5
	$6 = ($2 + [44])
	$1 = *($6)
	if ( ((uint_32)$1 >= (uint_32)*($3)) ){ goto $label$3 }
	*($1 + [8]) = $4
	*($1 + [16]) = $5
	*($2 + [80]) = [0]
	*($1) = $0
	*($6) = ($1 + [24])
	$0 = *($2 + [80])
	*($2 + [80]) = [0]
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $68(($2 + [40]), ($2 + [80]), ($2 + [64]), ($2 + [60]))
	$0 = *($2 + [80])
	*($2 + [80]) = [0]
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$3 = *($2 + [40])
	if ( ($3 == 0) ){ goto $label$4 }
	$5 = ($2 + [44])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$8 }
	CALL _ZdlPv($1)
	
.LABEL $label$8
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($2 + [40]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $3
	
.LABEL $label$5
	*($5) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($2 + [96])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9121])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9226])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9159])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9226])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $3 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	$5 = ($global$0 - [256])
	$global$0 = $5
	*($5 + [200]) = $2
	*($5 + [208]) = $1
	CALL require_auth(*($0))
	$2 = *($3)
	$6 = *($3 + [8])
	CALL eosio_assert(((int_64)*(($3 + [24])) == (int_64)$6), [9550])
	$2 = ((int_64)$2 + (int_64)*($3 + [16]))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9593])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [9612])
	*($5 + [192]) = $6
	CALL eosio_assert(((int_64)$6 == (int_64)*(($3 + [40]))), [9550])
	$7 = ((int_64)*($3 + [32]) + (int_64)$2)
	*($5 + [184]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9593])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9612])
	$8 = CALL $135([8401])
	if ( ($8 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9278])
	goto $label$5 
	
.LABEL $label$6
	if ( ($8 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$2 = (int_64)0
	
.LOOP $label$7:
	$9 = *(($8 + [8400]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$8
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$7 }
	if ( ((int_64)$6 != (int_64)((int_64)((int_64)$2 << (int_64)8) | (int_64)4)) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_64)$6 == (int_64)((int_64)0 | (int_64)4)) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = CALL $135([8409])
	if ( ($8 <= [8]) ){ goto $label$13 }
	CALL eosio_assert([0], [9278])
	goto $label$12 
	
.LABEL $label$13
	if ( ($8 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$2 = (int_64)0
	
.LOOP $label$14:
	$9 = *(($8 + [8408]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$15
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$14 }
	if ( ((int_64)$6 != (int_64)((int_64)((int_64)$2 << (int_64)8) | (int_64)8)) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( ((int_64)$6 == (int_64)((int_64)0 | (int_64)8)) ){ goto $label$9 }
	
.LABEL $label$10
	$8 = CALL $135([8405])
	if ( ($8 <= [8]) ){ goto $label$19 }
	CALL eosio_assert([0], [9278])
	goto $label$18 
	
.LABEL $label$19
	if ( ($8 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$2 = (int_64)0
	
.LOOP $label$20:
	$9 = *(($8 + [8404]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$21 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$21
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$20 }
	$2 = ((int_64)$2 << (int_64)8)
	goto $label$16 
	
.LABEL $label$17
	$2 = (int_64)0
	
.LABEL $label$16
	CALL eosio_assert(((int_64)$6 == (int_64)((int_64)$2 | (int_64)4)), [8713])
	goto $label$1 
	
.LABEL $label$9
	CALL eosio_assert([1], [8713])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([1], [8713])
	
.LABEL $label$1
	$8 = CALL $135([8401])
	if ( ($8 <= [8]) ){ goto $label$27 }
	CALL eosio_assert([0], [9278])
	goto $label$26 
	
.LABEL $label$27
	if ( ($8 == 0) ){ goto $label$25 }
	
.LABEL $label$26
	$2 = (int_64)0
	
.LOOP $label$28:
	$9 = *(($8 + [8400]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$29 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$29
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$28 }
	if ( ((int_64)$6 != (int_64)((int_64)((int_64)$2 << (int_64)8) | (int_64)4)) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	if ( ((int_64)$6 == (int_64)((int_64)0 | (int_64)4)) ){ goto $label$23 }
	
.LABEL $label$24
	$8 = CALL $135([8409])
	if ( ($8 <= [8]) ){ goto $label$34 }
	CALL eosio_assert([0], [9278])
	goto $label$33 
	
.LABEL $label$34
	if ( ($8 == 0) ){ goto $label$32 }
	
.LABEL $label$33
	$2 = (int_64)0
	
.LOOP $label$35:
	$9 = *(($8 + [8408]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$36 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$36
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$35 }
	if ( ((int_64)$6 != (int_64)((int_64)((int_64)$2 << (int_64)8) | (int_64)8)) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	if ( ((int_64)$6 == (int_64)((int_64)0 | (int_64)8)) ){ goto $label$30 }
	
.LABEL $label$31
	$8 = CALL $135([8405])
	if ( ($8 <= [8]) ){ goto $label$40 }
	CALL eosio_assert([0], [9278])
	goto $label$39 
	
.LABEL $label$40
	if ( ($8 == 0) ){ goto $label$38 }
	
.LABEL $label$39
	$2 = (int_64)0
	
.LOOP $label$41:
	$9 = *(($8 + [8404]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$42 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$42
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$41 }
	$14 = ((int_64)$2 << (int_64)8)
	goto $label$37 
	
.LABEL $label$38
	$14 = (int_64)0
	
.LABEL $label$37
	$10 = (int_64)0
	$13 = (int_64)0
	$2 = (int_64)0
	$11 = (int_64)0
	if ( ((int_64)$6 != (int_64)((int_64)$14 | (int_64)4)) ){ goto $label$22 }
	$8 = CALL $135([8405])
	if ( ($8 <= [8]) ){ goto $label$46 }
	CALL eosio_assert([0], [9278])
	goto $label$45 
	
.LABEL $label$46
	if ( ($8 == 0) ){ goto $label$44 }
	
.LABEL $label$45
	$2 = (int_64)0
	
.LOOP $label$47:
	$9 = *(($8 + [8404]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$48 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$48
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$47 }
	$10 = ((int_64)$2 << (int_64)8)
	goto $label$43 
	
.LABEL $label$44
	$10 = (int_64)0
	
.LABEL $label$43
	CALL eosio_assert([1], [9382])
	$2 = (uint_64)$10 >> (uint_64)(int_64)8)
	$11 = ((int_64)$10 | (int_64)4)
	$8 = [0]
	
.LOOP $label$51:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$50 }
	$10 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$52 }
	$2 = $10
	$9 = [1]
	$12 = $8
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$52
	$2 = $10
	
.LOOP $label$53:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$50 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$9 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $9 ){ goto $label$53 }
	$9 = [1]
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$50
	$9 = [0]
	
.LABEL $label$49
	CALL eosio_assert($9, [9431])
	$8 = CALL $135([8405])
	if ( ($8 <= [8]) ){ goto $label$57 }
	CALL eosio_assert([0], [9278])
	goto $label$56 
	
.LABEL $label$57
	if ( ($8 == 0) ){ goto $label$55 }
	
.LABEL $label$56
	$2 = (int_64)0
	
.LOOP $label$58:
	$9 = *(($8 + [8404]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$59 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$59
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$58 }
	$13 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$54 
	
.LABEL $label$55
	$13 = (int_64)4
	
.LABEL $label$54
	CALL eosio_assert([1], [9382])
	$2 = (uint_64)$13 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$62:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$61 }
	$10 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$63 }
	$2 = $10
	$9 = [1]
	$12 = $8
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$62 }
	goto $label$60 
	
.LABEL $label$63
	$2 = $10
	
.LOOP $label$64:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$61 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$9 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $9 ){ goto $label$64 }
	$9 = [1]
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$62 }
	goto $label$60 
	
.LABEL $label$61
	$9 = [0]
	
.LABEL $label$60
	CALL eosio_assert($9, [9431])
	$2 = (int_64)500000
	$10 = (int_64)100000000
	goto $label$22 
	
.LABEL $label$30
	$8 = CALL $135([8409])
	if ( ($8 <= [8]) ){ goto $label$68 }
	CALL eosio_assert([0], [9278])
	goto $label$67 
	
.LABEL $label$68
	if ( ($8 == 0) ){ goto $label$66 }
	
.LABEL $label$67
	$2 = (int_64)0
	
.LOOP $label$69:
	$9 = *(($8 + [8408]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$70 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$70
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$69 }
	$10 = ((int_64)$2 << (int_64)8)
	goto $label$65 
	
.LABEL $label$66
	$10 = (int_64)0
	
.LABEL $label$65
	CALL eosio_assert([1], [9382])
	$2 = (uint_64)$10 >> (uint_64)(int_64)8)
	$11 = ((int_64)$10 | (int_64)8)
	$8 = [0]
	
.LOOP $label$73:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$72 }
	$10 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$74 }
	$2 = $10
	$9 = [1]
	$12 = $8
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$74
	$2 = $10
	
.LOOP $label$75:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$72 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$9 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $9 ){ goto $label$75 }
	$9 = [1]
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$72
	$9 = [0]
	
.LABEL $label$71
	CALL eosio_assert($9, [9431])
	$8 = CALL $135([8409])
	if ( ($8 <= [8]) ){ goto $label$79 }
	CALL eosio_assert([0], [9278])
	goto $label$78 
	
.LABEL $label$79
	if ( ($8 == 0) ){ goto $label$77 }
	
.LABEL $label$78
	$2 = (int_64)0
	
.LOOP $label$80:
	$9 = *(($8 + [8408]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$81 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$81
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$80 }
	$13 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)8)
	goto $label$76 
	
.LABEL $label$77
	$13 = (int_64)8
	
.LABEL $label$76
	CALL eosio_assert([1], [9382])
	$2 = (uint_64)$13 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$84:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$83 }
	$10 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$85 }
	$2 = $10
	$9 = [1]
	$12 = $8
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$84 }
	goto $label$82 
	
.LABEL $label$85
	$2 = $10
	
.LOOP $label$86:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$83 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$9 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $9 ){ goto $label$86 }
	$9 = [1]
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$84 }
	goto $label$82 
	
.LABEL $label$83
	$9 = [0]
	
.LABEL $label$82
	CALL eosio_assert($9, [9431])
	$2 = (int_64)50000000
	$10 = (int_64)10000000000
	goto $label$22 
	
.LABEL $label$23
	$8 = CALL $135([8401])
	if ( ($8 <= [8]) ){ goto $label$90 }
	CALL eosio_assert([0], [9278])
	goto $label$89 
	
.LABEL $label$90
	if ( ($8 == 0) ){ goto $label$88 }
	
.LABEL $label$89
	$2 = (int_64)0
	
.LOOP $label$91:
	$9 = *(($8 + [8400]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$92 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$92
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$91 }
	$10 = ((int_64)$2 << (int_64)8)
	goto $label$87 
	
.LABEL $label$88
	$10 = (int_64)0
	
.LABEL $label$87
	CALL eosio_assert([1], [9382])
	$2 = (uint_64)$10 >> (uint_64)(int_64)8)
	$11 = ((int_64)$10 | (int_64)4)
	$8 = [0]
	
.LOOP $label$95:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$94 }
	$10 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$96 }
	$2 = $10
	$9 = [1]
	$12 = $8
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$95 }
	goto $label$93 
	
.LABEL $label$96
	$2 = $10
	
.LOOP $label$97:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$94 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$9 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $9 ){ goto $label$97 }
	$9 = [1]
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$95 }
	goto $label$93 
	
.LABEL $label$94
	$9 = [0]
	
.LABEL $label$93
	CALL eosio_assert($9, [9431])
	$8 = CALL $135([8401])
	if ( ($8 <= [8]) ){ goto $label$101 }
	CALL eosio_assert([0], [9278])
	goto $label$100 
	
.LABEL $label$101
	if ( ($8 == 0) ){ goto $label$99 }
	
.LABEL $label$100
	$2 = (int_64)0
	
.LOOP $label$102:
	$9 = *(($8 + [8400]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$103 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$103
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$102 }
	$13 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$98 
	
.LABEL $label$99
	$13 = (int_64)4
	
.LABEL $label$98
	CALL eosio_assert([1], [9382])
	$2 = (uint_64)$13 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$106:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$105 }
	$10 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$107 }
	$2 = $10
	$9 = [1]
	$12 = $8
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$106 }
	goto $label$104 
	
.LABEL $label$107
	$2 = $10
	
.LOOP $label$108:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$105 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$9 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $9 ){ goto $label$108 }
	$9 = [1]
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$106 }
	goto $label$104 
	
.LABEL $label$105
	$9 = [0]
	
.LABEL $label$104
	CALL eosio_assert($9, [9431])
	$2 = (int_64)5000
	$10 = (int_64)1000000
	
.LABEL $label$22
	$8 = [1]
	$9 = [1]
	if ( (int_64)(*($3) == 0) ){ goto $label$109 }
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)$11), [9451])
	$9 = ((int_64)*($3) >= (int_64)$2)
	
.LABEL $label$109
	CALL eosio_assert($9, [8739])
	$9 = ($3 + [16])
	if ( (int_64)(*($9) == 0) ){ goto $label$110 }
	CALL eosio_assert(((int_64)*(($3 + [24])) == (int_64)$11), [9451])
	$8 = ((int_64)*($9) >= (int_64)$2)
	
.LABEL $label$110
	CALL eosio_assert($8, [8739])
	$9 = [1]
	$8 = [1]
	$12 = ($3 + [32])
	if ( (int_64)(*($12) == 0) ){ goto $label$111 }
	CALL eosio_assert(((int_64)*(($3 + [40])) == (int_64)$11), [9451])
	$8 = ((int_64)*($12) >= (int_64)$2)
	
.LABEL $label$111
	CALL eosio_assert($8, [8739])
	CALL eosio_assert(((int_64)$6 == (int_64)$11), [9451])
	CALL eosio_assert(((int_64)$7 >= (int_64)$2), [8739])
	CALL eosio_assert(((int_64)$6 == (int_64)$13), [9451])
	CALL eosio_assert(((int_64)$7 <= (int_64)$10), [8758])
	$2 = *((($5 + [184]) + [8]))
	*((($5 + [168]) + [8])) = $2
	*(($5 + [8])) = $2
	$2 = *($5 + [184])
	*($5) = $2
	*($5 + [168]) = $2
	CALL $36($0, $1, $5)
	$8 = [0]
	*((($5 + [128]) + [32])) = [0]
	*($5 + [144]) = (int_64)-1
	*($5 + [152]) = (int_64)0
	$2 = *($0)
	*($5 + [128]) = $2
	*($5 + [136]) = $2
	$12 = CALL db_find_i64($2, $2, (int_64)6600267947158011904, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$112 }
	CALL eosio_assert(((int_32)*(CALL $62(($5 + [128]), $12) + [248]) == (int_32)($5 + [128])), [9779])
	$9 = [0]
	
.LABEL $label$112
	CALL eosio_assert($9, [8777])
	*((($5 + [88]) + [32])) = [0]
	*($5 + [104]) = (int_64)-1
	$2 = *($0)
	*($5 + [88]) = $2
	*($5 + [96]) = $2
	*($5 + [112]) = (int_64)0
	$9 = CALL db_lowerbound_i64($2, $2, (int_64)7975479850326556672, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$113 }
	$8 = CALL $63(($5 + [88]), $9)
	
.LABEL $label$113
	*($5 + [84]) = $8
	*($5 + [80]) = ($5 + [88])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8814])
	CALL sha256($4, [32], ($5 + [48]))
	$2 = *($0)
	*($5 + [20]) = $3
	*($5 + [24]) = $0
	*($5 + [32]) = $4
	*($5 + [16]) = ($5 + [208])
	*($5 + [28]) = ($5 + [200])
	*($5 + [36]) = ($5 + [48])
	*($5 + [40]) = ($5 + [80])
	*($5 + [44]) = ($5 + [184])
	*($5 + [248]) = $2
	CALL eosio_assert(((int_64)*($5 + [128]) == (int_64)CALL $fimport$8()), [9853])
	*($5 + [228]) = ($5 + [16])
	*($5 + [224]) = ($5 + [128])
	*($5 + [232]) = ($5 + [248])
	*(($8 = CALL _Znwj([272])) + [8]) = (int_64)0
	*($8) = (int_64)0
	*($8 + [16]) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [32]) = (int_64)0
	*($8 + [40]) = (int_64)0
	*($8 + [48]) = (int_64)0
	*($8 + [56]) = (int_64)0
	*($8 + [192]) = (int_64)0
	*($8 + [200]) = (int_64)0
	*($8 + [208]) = (int_64)0
	*($8 + [216]) = (int_64)0
	*($8 + [224]) = (int_64)0
	*($8 + [232]) = (int_64)0
	*($8 + [240]) = (int_64)0
	*($8 + [248]) = ($5 + [128])
	CALL $64(($5 + [224]), $8)
	*($5 + [240]) = $8
	$2 = *($8)
	*($5 + [224]) = $2
	$3 = *($8 + [252])
	*($5 + [220]) = $3
	$12 = ($5 + [156])
	$9 = *($12)
	if ( ((uint_32)$9 >= (uint_32)*((($5 + [128]) + [32]))) ){ goto $label$116 }
	*($9 + [8]) = $2
	*($9 + [16]) = $3
	*($5 + [240]) = [0]
	*($9) = $8
	*($12) = ($9 + [24])
	$8 = *($5 + [240])
	$9 = [0]
	*($5 + [240]) = [0]
	if ( $8 ){ goto $label$115 }
	goto $label$114 
	
.LABEL $label$116
	CALL $65(($5 + [152]), ($5 + [240]), ($5 + [224]), ($5 + [220]))
	$8 = *($5 + [240])
	$9 = [0]
	*($5 + [240]) = [0]
	if ( ($8 == 0) ){ goto $label$114 }
	
.LABEL $label$115
	CALL _ZdlPv($8)
	
.LABEL $label$114
	$2 = *($5 + [80])
	$8 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	$3 = ((int_32)$8) != (int_32)$9
	CALL eosio_assert($3), [10249])
	CALL eosio_assert($3, [10283])
	$3 = CALL db_next_i64(*($8 + [52]), ($5 + [16]))
	if ( ((int_32)$3 < (int_32)$9) ){ goto $label$117 }
	CALL $63((CASTING uint_32)(uint_64 $2), $3)
	
.LABEL $label$117
	CALL $66(($5 + [88]), $8)
	$3 = *($5 + [112])
	if ( ($3 == 0) ){ goto $label$118 }
	$12 = ($5 + [116])
	$8 = *($12)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$120 }
	
.LOOP $label$121:
	$8 = ($8 + [-24])
	$9 = *($8)
	*($8) = [0]
	if ( ($9 == 0) ){ goto $label$122 }
	CALL _ZdlPv($9)
	
.LABEL $label$122
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$121 }
	$8 = *(($5 + [112]))
	goto $label$119 
	
.LABEL $label$120
	$8 = $3
	
.LABEL $label$119
	*($12) = $3
	CALL _ZdlPv($8)
	
.LABEL $label$118
	$3 = *($5 + [152])
	if ( ($3 == 0) ){ goto $label$123 }
	$12 = ($5 + [156])
	$8 = *($12)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$125 }
	
.LOOP $label$126:
	$8 = ($8 + [-24])
	$9 = *($8)
	*($8) = [0]
	if ( ($9 == 0) ){ goto $label$127 }
	CALL _ZdlPv($9)
	
.LABEL $label$127
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$126 }
	$8 = *(($5 + [152]))
	goto $label$124 
	
.LABEL $label$125
	$8 = $3
	
.LABEL $label$124
	*($12) = $3
	CALL _ZdlPv($8)
	
.LABEL $label$123
	$global$0 = ($5 + [256])
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [416])
	$global$0 = $3
	CALL memory()
	*($3 + [400]) = [8192]
	*($3 + [404]) = CALL $135([8192])
	*($3 + [176]) = *($3 + [400])
	CALL $2(($3 + [408]), ($3 + [176]))
	if ( ((int_64)$2 != (int_64)-6569208335818555392) ){ goto $label$1 }
	*($3 + [392]) = [8200]
	*($3 + [396]) = CALL $135([8200])
	*($3 + [168]) = *($3 + [392])
	CALL $2(($3 + [408]), ($3 + [168]))
	CALL eosio_assert(((int_64)$1 == (int_64)6138663577826885632), [8292])
	
.LABEL $label$1
	*($3 + [384]) = [8354]
	*($3 + [388]) = CALL $135([8354])
	*($3 + [160]) = *($3 + [384])
	CALL $2(($3 + [408]), ($3 + [160]))
	[0]
	[0]
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$4 }
	*($3 + [368]) = [8366]
	*($3 + [372]) = CALL $135([8366])
	*($3 + [152]) = *($3 + [368])
	CALL $2(($3 + [376]), ($3 + [152]))
	[1]
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$3 }
	
.LABEL $label$4
	*($3 + [352]) = [8375]
	*($3 + [356]) = CALL $135([8375])
	*($3 + [144]) = *($3 + [352])
	CALL $2(($3 + [360]), ($3 + [144]))
	if ( ((int_64)$1 != (int_64)4301877912145143680) ){ goto $label$7 }
	*($3 + [336]) = [8366]
	*($3 + [340]) = CALL $135([8366])
	*($3 + [136]) = *($3 + [336])
	CALL $2(($3 + [344]), ($3 + [136]))
	[1]
	$4 = [1]
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$6 }
	
.LABEL $label$7
	*($3 + [320]) = [8388]
	*($3 + [324]) = CALL $135([8388])
	*($3 + [128]) = *($3 + [320])
	CALL $2(($3 + [328]), ($3 + [128]))
	$5 = [0]
	if ( ((int_64)$1 != (int_64)5426637075673950080) ){ goto $label$8 }
	*($3 + [304]) = [8366]
	*($3 + [308]) = CALL $135([8366])
	*($3 + [120]) = *($3 + [304])
	CALL $2(($3 + [312]), ($3 + [120]))
	$5 = [1]
	$4 = [1]
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$6 }
	
.LABEL $label$8
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$9 }
	*($3 + [288]) = [8366]
	*($3 + [292]) = CALL $135([8366])
	*($3 + [112]) = *($3 + [288])
	CALL $2(($3 + [296]), ($3 + [112]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$9
	$4 = [0]
	if ( $5 ){ goto $label$6 }
	$4 = [0]
	
.LABEL $label$6
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$5
	if ( ((int_64)$2 <= (int_64)-3617168760277827585) ){ goto $label$20 }
	if ( ((int_64)$2 <= (int_64)4923678854264041983) ){ goto $label$19 }
	if ( ((int_64)$2 > (int_64)7111953097169043455) ){ goto $label$17 }
	if ( ((int_64)$2 == (int_64)4923678854264041984) ){ goto $label$16 }
	if ( ((int_64)$2 != (int_64)6600267696225386496) ){ goto $label$2 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [1]
	*($3 + [72]) = *($3 + [216])
	CALL $4($0, $1, ($3 + [72]))
	goto $label$2 
	
.LABEL $label$20
	if ( ((int_64)$2 > (int_64)-6030906845374185473) ){ goto $label$18 }
	if ( ((int_64)$2 == (int_64)-8272103852073811968) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)-7297859087629287424) ){ goto $label$14 }
	if ( ((int_64)$2 != (int_64)-7297839803824865280) ){ goto $label$2 }
	*($3 + [212]) = [0]
	*($3 + [208]) = [2]
	*($3 + [80]) = *($3 + [208])
	CALL $6($0, $1, ($3 + [80]))
	goto $label$2 
	
.LABEL $label$19
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3073290672334176256) ){ goto $label$13 }
	if ( ((int_64)$2 != (int_64)4923678677852298640) ){ goto $label$2 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [3]
	*($3 + [104]) = *($3 + [184])
	CALL $8($0, $1, ($3 + [104]))
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_64)$2 == (int_64)-6030906845374185472) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)-5002754507398971392) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)-4420687654543163392) ){ goto $label$2 }
	*($3 + [252]) = [0]
	*($3 + [248]) = [4]
	*($3 + [40]) = *($3 + [248])
	CALL $10($0, $1, ($3 + [40]))
	goto $label$2 
	
.LABEL $label$17
	if ( ((int_64)$2 == (int_64)7111953097169043456) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)7335372690902368256) ){ goto $label$2 }
	*($3 + [244]) = [0]
	*($3 + [240]) = [5]
	*($3 + [48]) = *($3 + [240])
	CALL $12($0, $1, ($3 + [48]))
	goto $label$2 
	
.LABEL $label$16
	*($3 + [196]) = [0]
	*($3 + [192]) = [6]
	*($3 + [96]) = *($3 + [192])
	CALL $14($0, $1, ($3 + [96]))
	goto $label$2 
	
.LABEL $label$15
	*($3 + [236]) = [0]
	*($3 + [232]) = [7]
	*($3 + [56]) = *($3 + [232])
	CALL $16($0, $1, ($3 + [56]))
	goto $label$2 
	
.LABEL $label$14
	*($3 + [268]) = [0]
	*($3 + [264]) = [8]
	*($3 + [24]) = *($3 + [264])
	CALL $18($0, $1, ($3 + [24]))
	goto $label$2 
	
.LABEL $label$13
	*($3 + [260]) = [0]
	*($3 + [256]) = [9]
	*($3 + [32]) = *($3 + [256])
	CALL $20($0, $1, ($3 + [32]))
	goto $label$2 
	
.LABEL $label$12
	*($3 + [204]) = [0]
	*($3 + [200]) = [10]
	*($3 + [88]) = *($3 + [200])
	CALL $22($0, $1, ($3 + [88]))
	goto $label$2 
	
.LABEL $label$11
	*($3 + [276]) = [0]
	*($3 + [272]) = [11]
	*($3 + [16]) = *($3 + [272])
	CALL $24($0, $1, ($3 + [16]))
	goto $label$2 
	
.LABEL $label$10
	*($3 + [228]) = [0]
	*($3 + [224]) = [12]
	*($3 + [64]) = *($3 + [224])
	CALL $26($0, $1, ($3 + [64]))
	goto $label$2 
	
.LABEL $label$3
	*($3 + [284]) = [0]
	*($3 + [280]) = [13]
	*($3 + [8]) = *($3 + [280])
	CALL $28($0, $1, ($3 + [8]))
	
.LABEL $label$2
	CALL $125([0])
	$global$0 = ($3 + [416])
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $138($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9770])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $141($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	float_64 $16
	$4 = ($global$0 - [624])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = [0]
	*((($4 + [584]) + [32])) = [0]
	*($4 + [600]) = (int_64)-1
	*($4 + [608]) = (int_64)0
	$6 = *($0)
	*($4 + [584]) = $6
	*($4 + [592]) = $6
	$7 = [0]
	$8 = CALL db_find_i64($6, $6, (int_64)7343588546453700608, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $38(($4 + [584]), $8)
	CALL eosio_assert(((int_32)*($7 + [52]) == (int_32)($4 + [584])), [9779])
	
.LABEL $label$1
	*($4 + [580]) = $7
	*($4 + [576]) = ($4 + [584])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8607])
	*((($4 + [536]) + [32])) = [0]
	*($4 + [552]) = (int_64)-1
	*($4 + [560]) = (int_64)0
	$6 = *($0)
	*($4 + [536]) = $6
	*($4 + [544]) = $1
	$7 = CALL db_find_i64($6, $1, (int_64)-6228190869736914944, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $43(($4 + [536]), $7)
	CALL eosio_assert(((int_32)*($5 + [208]) == (int_32)($4 + [536])), [9779])
	
.LABEL $label$2
	$7 = [0]
	$9 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($9, [8905])
	CALL eosio_assert((*($5 + [204]) == 0), [8979])
	$1 = *(($5 + [8]))
	$6 = *(($5 + [16]))
	$2 = *(($5 + [24]))
	$10 = *(($5 + [32]))
	$8 = *($4 + [580])
	$11 = *($8 + [41])
	$12 = *($8 + [40])
	$13 = *($5)
	*((($4 + [320]) + [44])) = (int_64)0
	*((($4 + [320]) + [32])) = $10
	*((($4 + [320]) + [24])) = $2
	*((($4 + [320]) + [16])) = $6
	*($4 + [360]) = [0]
	*($4 + [328]) = $1
	*($4 + [320]) = $13
	$8 = (*(($5 + [44])) - *($5 + [40]))
	$14 = ((int_32)$8 / (int_32)[56])
	if ( ($8 == 0) ){ goto $label$5 }
	if ( ((uint_32)$14 >= (uint_32)[76695845]) ){ goto $label$4 }
	$7 = CALL _Znwj($8)
	*((($4 + [320]) + [40])) = $7
	*(($4 + [368])) = ($7 + ((int_32)$14 * (int_32)[56]))
	*(($8 = (($4 + [320]) + [44]))) = $7
	$15 = *(($5 + [40]))
	$14 = (*(($5 + [44])) - $15)
	if ( ((int_32)$14 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($7, $15, $14)
	$7 = (*($8) + ((int_32)((uint_32)$14 / (uint_32)[56]) * (int_32)[56]))
	*($8) = $7
	
.LABEL $label$5
	$14 = ($5 + [64])
	CALL memcpy((($4 + [320]) + [64]), $14, [144])
	$8 = [1]
	if ( *($4 + [524]) ){ goto $label$3 }
	$7 = ((int_32)($7 - *(($4 + [360]))) / (int_32)[56])
	if ( (($7 & [254]) == 0) ){ goto $label$6 }
	if ( ((int_32)($12 & [255]) == (int_32)($7 & [255])) ){ goto $label$3 }
	$8 = ((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) - *($4 + [516])) >= (uint_32)$11)
	goto $label$3 
	
.LABEL $label$6
	$8 = [0]
	goto $label$3 
	
.LABEL $label$4
	CALL $122(($4 + [360]))
	
.LABEL $label$3
	CALL eosio_assert($8, [9006])
	$7 = *((($4 + [320]) + [40]))
	if ( ($7 == 0) ){ goto $label$7 }
	*(($4 + [364])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	CALL sha256($3, [32], ($4 + [288]))
	$1 = *($0)
	*($4 + [256]) = $3
	*($4 + [260]) = ($4 + [288])
	*($4 + [264]) = ($4 + [576])
	CALL eosio_assert($9, [9904])
	CALL $53(($4 + [536]), $5, $1, ($4 + [256]))
	CALL sha256($14, [128], ($4 + [256]))
	$7 = ((int_32)(*(($5 + [44])) - *(($5 + [40]))) / (int_32)[56])
	*($4 + [255]) = $7
	$3 = [0]
	*($4 + [248]) = [0]
	*($4 + [240]) = (int_64)0
	$14 = ($7 & [255])
	if ( ($14 == 0) ){ goto $label$8 }
	$7 = ($14 << [2])
	$3 = CALL _Znwj($7)
	$12 = ($3 + $7)
	*(($4 + [248])) = $12
	*($4 + [240]) = $3
	*($4 + [244]) = $3
	$8 = ([0] - $14)
	$7 = $3
	
.LOOP $label$9:
	*($7) = [0]
	$7 = ($7 + [4])
	$8 = ($8 + [1])
	if ( $8 ){ goto $label$9 }
	*($4 + [244]) = $12
	$7 = ($4 + [287])
	
.LOOP $label$10:
	$16 = ((float_64)(CASTING float_64)(uint_32 *(($7 + [-16]))) * (float_64)(float_64)0.00390625)
	if ( ((float_64)$16 <= (float_64)(float_64)0) ){ goto $label$12 }
	$8 = *($7)
	$16 = ((float_64)((float_64)((float_64)CALL $134(((float_64)CALL $132($16) * (float_64)(float_64)-2)) * (float_64)CALL $130(((float_64)((float_64)(CASTING float_64)(uint_32 $8) * (float_64)(float_64)0.00390625) * (float_64)(float_64)6.283185307179586))) * (float_64)(float_64)50) + (float_64)(float_64)100)
	if ( (((float_64)$16 < (float_64)(float_64)4294967296) & ((float_64)$16 >= (float_64)(float_64)0)) ){ goto $label$13 }
	$8 = [0]
	if ( [0] ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	$8 = (CASTING uint_32)(float_64 $16)
	if ( $8 ){ goto $label$11 }
	
.LABEL $label$12
	$8 = [1]
	
.LABEL $label$11
	*($3) = $8
	$3 = ($3 + [4])
	$7 = ($7 + [-1])
	$14 = ($14 + [-1])
	if ( $14 ){ goto $label$10 }
	$3 = [0]
	$8 = *($4 + [244])
	$7 = *($4 + [240])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	
.LOOP $label$14:
	$3 = (*($7) + $3)
	$7 = ($7 + [4])
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$14 }
	
.LABEL $label$8
	*($4 + [236]) = $3
	$1 = *(($5 + [16]))
	*(($7 = (($4 + [216]) + [8]))) = $1
	*($4 + [216]) = *($5 + [8])
	CALL eosio_assert(((int_64)$1 == (int_64)*(($5 + [32]))), [9679])
	$6 = (int_64)
	*($4 + [216]) = $6(*($4 + [216]) - *($5 + [24])))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9727])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9749])
	*((($4 + [200]) + [8])) = *($7)
	*($4 + [200]) = *($4 + [216])
	*($4 + [192]) = $1
	*($4 + [184]) = (int_64)100
	CALL eosio_assert([1], [9382])
	$8 = ($5 + [8])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$1 = $6
	$3 = [1]
	$14 = $7
	$7 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$1 = $6
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$7 < (int_32)[6])
	$14 = ($7 + [1])
	$7 = $14
	if ( $3 ){ goto $label$19 }
	$3 = [1]
	$7 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$3 = [0]
	
.LABEL $label$15
	CALL eosio_assert($3, [9431])
	*((($4 + [168]) + [8])) = *((($4 + [216]) + [8]))
	*($4 + [168]) = *($4 + [216])
	$1 = *($0)
	*($4 + [136]) = $0
	*($4 + [140]) = ($4 + [240])
	*($4 + [144]) = ($4 + [255])
	*($4 + [148]) = ($4 + [200])
	*($4 + [152]) = ($4 + [216])
	*($4 + [156]) = ($4 + [236])
	*($4 + [160]) = ($4 + [184])
	*($4 + [164]) = ($4 + [168])
	CALL eosio_assert($9, [9904])
	CALL $54(($4 + [536]), $5, $1, ($4 + [136]))
	$13 = *(($5 + [32]))
	$6 = *(($5 + [24]))
	$14 = ($5 + [44])
	$7 = *(($5 + [40]))
	if ( ((int_32)$7 == (int_32)*($14)) ){ goto $label$20 }
	$3 = [0]
	$5 = ($5 + [192])
	
.LOOP $label$21:
	$1 = *($7)
	if ( ((int_32)($3 & [255]) != (int_32)*($5)) ){ goto $label$23 }
	$10 = *(($8 + [8]))
	*((($4 + [120]) + [8])) = $10
	$2 = *($8)
	*((($4 + [40]) + [8])) = $10
	*($4 + [120]) = $2
	*($4 + [40]) = $2
	CALL $55($0, $1, ($4 + [40]))
	$12 = ($7 + [40])
	$9 = CALL is_account(*($12))
	if ( ((int_64)$6 < (int_64)1) ){ goto $label$22 }
	if ( ($9 == 0) ){ goto $label$22 }
	CALL eosio_assert([1], [9510])
	CALL eosio_assert([1], [9525])
	$1 = ((uint_64)$6 / (uint_64)(int_64)20)
	if ( (uint_64)($6 <= (int_64)20) ){ goto $label$24 }
	$2 = *($12)
	*((($4 + [104]) + [8])) = $13
	*((($4 + [24]) + [8])) = $13
	*($4 + [24]) = $1
	*($4 + [104]) = $1
	CALL $32($0, $2, ($4 + [24]))
	
.LABEL $label$24
	CALL eosio_assert([1], [9679])
	$6 = (int_64)
	CALL eosio_assert(((int_64)$6($6 - $1)) > (int_64)-4611686018427387904), [9727])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9749])
	goto $label$22 
	
.LABEL $label$23
	$10 = *(($8 + [8]))
	*((($4 + [88]) + [8])) = $10
	$2 = *($8)
	*((($4 + [56]) + [8])) = $10
	*($4 + [88]) = $2
	*($4 + [56]) = $2
	CALL $56($0, $1, ($4 + [56]))
	
.LABEL $label$22
	$3 = ($3 + [1])
	$7 = ($7 + [56])
	if ( ((int_32)$7 != (int_32)*($14)) ){ goto $label$21 }
	
.LABEL $label$20
	*((($4 + [8]) + [8])) = $13
	*($4 + [80]) = $13
	*($4 + [8]) = $6
	*($4 + [72]) = $6
	CALL $57($0, ($4 + [8]))
	$7 = *($4 + [240])
	if ( ($7 == 0) ){ goto $label$25 }
	*($4 + [244]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$25
	$14 = *($4 + [560])
	if ( ($14 == 0) ){ goto $label$26 }
	$0 = ($4 + [564])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$14) ){ goto $label$28 }
	
.LOOP $label$29:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$30 }
	$8 = *($3 + [40])
	if ( ($8 == 0) ){ goto $label$31 }
	*(($3 + [44])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$31
	CALL _ZdlPv($3)
	
.LABEL $label$30
	if ( ((int_32)$14 != (int_32)$7) ){ goto $label$29 }
	$7 = *(($4 + [560]))
	goto $label$27 
	
.LABEL $label$28
	$7 = $14
	
.LABEL $label$27
	*($0) = $14
	CALL _ZdlPv($7)
	
.LABEL $label$26
	$8 = *($4 + [608])
	if ( ($8 == 0) ){ goto $label$32 }
	$14 = ($4 + [612])
	$7 = *($14)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$34 }
	
.LOOP $label$35:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$36 }
	CALL _ZdlPv($3)
	
.LABEL $label$36
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$35 }
	$7 = *(($4 + [608]))
	goto $label$33 
	
.LABEL $label$34
	$7 = $8
	
.LABEL $label$33
	*($14) = $8
	CALL _ZdlPv($7)
	
.LABEL $label$32
	$global$0 = ($4 + [624])
	(unreachable)
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $138($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [72]))) = (int_64)0
	*(($8 = (($4 + [32]) + [32]))) = (int_64)0
	*(($9 = (($4 + [32]) + [24]))) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [48]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9770])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9770])
	CALL memcpy((($4 + [32]) | [8]), ($2 + [8]), [8])
	CALL eosio_assert(((uint_32)($7 + [-16]) > (uint_32)[31]), [9770])
	CALL memcpy((($4 + [32]) + [16]), ($2 + [16]), [32])
	*(($4 + [20])) = ($2 + [48])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*(($10 = (($4 + [80]) + [16]))) = *($8)
	*(($8 = (($4 + [80]) + [24]))) = *($3)
	*($4 + [80]) = *($4 + [48])
	*($4 + [88]) = *($9)
	$0 = *($4 + [40])
	$1 = *($4 + [32])
	*((($4 + [112]) + [24])) = *($8)
	*((($4 + [112]) + [16])) = *($10)
	*($4 + [120]) = *($4 + [88])
	*($4 + [112]) = *($4 + [80])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [112])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $141($2)
	
.LABEL $label$6
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $17 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9)
{
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$10 = ($global$0 - [176])
	$global$0 = $10
	CALL require_auth(*($0))
	*((($10 + [8]) + [32])) = [0]
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	$11 = *($0)
	*($10 + [8]) = $11
	*($10 + [16]) = $11
	$12 = [1]
	$13 = CALL db_find_i64($11, $11, (int_64)7343588546453700608, $1)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $38(($10 + [8]), $13) + [52]) == (int_32)($10 + [8])), [9779])
	$12 = [0]
	
.LABEL $label$1
	CALL eosio_assert($12, [8491])
	CALL eosio_assert(CALL $fimport$7($3), [8512])
	CALL eosio_assert(((uint_32)$4 > (uint_32)[1]), [8540])
	CALL eosio_assert(($6 <= [2]), [8573])
	CALL eosio_assert((($8 <= [1441]) & ($9 <= [1441])), [8586])
	$14 = *($0)
	CALL eosio_assert(((int_64)*($10 + [8]) == (int_64)CALL $fimport$8()), [9853])
	*(($0 = CALL _Znwj([64])) + [24]) = (int_64)0
	*($0 + [52]) = ($10 + [8])
	*($0) = $1
	*($0 + [32]) = $3
	*($0 + [40]) = $4
	*($0 + [41]) = $5
	*($0 + [42]) = $6
	*($0 + [43]) = $7
	*($0 + [44]) = $8
	*($0 + [48]) = $9
	*($0 + [8]) = *($2)
	*(($0 + [16])) = *(($2 + [8]))
	*($10 + [120]) = (($10 + [48]) + [52])
	*($10 + [116]) = ($10 + [48])
	*($10 + [112]) = ($10 + [48])
	*($10 + [128]) = ($10 + [112])
	*($10 + [140]) = ($0 + [8])
	*($10 + [136]) = $0
	*($10 + [144]) = ($0 + [24])
	*($10 + [148]) = ($0 + [32])
	*($10 + [152]) = ($0 + [40])
	*($10 + [156]) = ($0 + [41])
	*($10 + [160]) = ($0 + [42])
	*($10 + [164]) = ($0 + [43])
	*($10 + [168]) = ($0 + [44])
	*($10 + [172]) = ($0 + [48])
	CALL $39(($10 + [136]), ($10 + [128]))
	$11 = *($0)
	$4 = CALL db_store_i64(*((($10 + [8]) + [8])), (int_64)7343588546453700608, $14, $11, ($10 + [48]), [52])
	*($0 + [56]) = $4
	$2 = (($10 + [8]) + [16])
	if ( (uint_64)($11 <= *($2)) ){ goto $label$2 }
	*($2) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*($10 + [136]) = $0
	$11 = *($0)
	*($10 + [48]) = $11
	*($10 + [112]) = $4
	$6 = ($10 + [36])
	$2 = *($6)
	if ( ((uint_32)$2 >= (uint_32)*(($10 + [40]))) ){ goto $label$5 }
	*($2 + [8]) = $11
	*($2 + [16]) = $4
	*($10 + [136]) = [0]
	*($2) = $0
	*($6) = ($2 + [24])
	$0 = *($10 + [136])
	*($10 + [136]) = [0]
	if ( $0 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $40(($10 + [32]), ($10 + [136]), ($10 + [48]), ($10 + [112]))
	$0 = *($10 + [136])
	*($10 + [136]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$4 = *($10 + [32])
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = ($10 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL _ZdlPv($2)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($10 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $4
	
.LABEL $label$7
	*($6) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$global$0 = ($10 + [176])
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $138($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [104]))) = (int_64)0
	*(($8 = ($4 + [96]))) = (int_64)0
	*(($9 = (($4 + [64]) + [24]))) = (int_64)0
	*(($10 = ($4 + [136]))) = (int_64)0
	*(($11 = ($4 + [128]))) = (int_64)0
	*(($12 = ($4 + [120]))) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [208]) = ($4 + [48])
	*($4 + [240]) = ($4 + [64])
	CALL $42(($4 + [240]), ($4 + [208]))
	*(($13 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$13 = *($13)
	*((($4 + [176]) + [8])) = $13
	*(($14 = (($4 + [208]) + [8]))) = $13
	$15 = *($4)
	*($4 + [208]) = $15
	*($4 + [176]) = $15
	$13 = *($14)
	*((($4 + [240]) + [8])) = $13
	*((($4 + [16]) + [24])) = $13
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [208])
	*($4 + [32]) = $0
	*($4 + [240]) = $0
	*(($13 = (($4 + [176]) + [16]))) = *($8)
	*(($8 = (($4 + [176]) + [24]))) = *($3)
	*(($3 = (($4 + [144]) + [16]))) = *($11)
	*(($11 = (($4 + [144]) + [24]))) = *($10)
	*($4 + [176]) = *($4 + [80])
	*($4 + [184]) = *($9)
	*($4 + [144]) = *($4 + [112])
	*($4 + [152]) = *($12)
	$0 = *($4 + [72])
	$1 = *($4 + [64])
	*((($4 + [240]) + [24])) = *($11)
	*((($4 + [240]) + [16])) = *($3)
	*((($4 + [208]) + [16])) = *($13)
	*((($4 + [208]) + [24])) = *($8)
	*($4 + [248]) = *($4 + [152])
	*($4 + [240]) = *($4 + [144])
	*($4 + [208]) = *($4 + [176])
	*($4 + [216]) = *($4 + [184])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [208])), (int_32 ($4 + [240])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $141($2)
	
.LABEL $label$6
	$global$0 = ($4 + [272])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$5 = ($global$0 - [688])
	$global$0 = $5
	CALL require_auth(*($0))
	$6 = [0]
	*((($5 + [648]) + [32])) = [0]
	*($5 + [664]) = (int_64)-1
	*($5 + [672]) = (int_64)0
	$7 = *($0)
	*($5 + [648]) = $7
	*($5 + [656]) = $7
	$8 = [0]
	$9 = CALL db_find_i64($7, $7, (int_64)7343588546453700608, $3)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $38(($5 + [648]), $9)
	CALL eosio_assert(((int_32)*($8 + [52]) == (int_32)($5 + [648])), [9779])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8607])
	*((($5 + [608]) + [32])) = [0]
	*($5 + [624]) = (int_64)-1
	*($5 + [632]) = (int_64)0
	$7 = *($0)
	*($5 + [608]) = $7
	*($5 + [616]) = $3
	$9 = CALL db_find_i64($7, $3, (int_64)-6228190869736914944, $4)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $43(($5 + [608]), $9)
	CALL eosio_assert(((int_32)*($6 + [208]) == (int_32)($5 + [608])), [9779])
	
.LABEL $label$2
	$10 = [0]
	$11 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($11, [8905])
	$3 = *(($6 + [8]))
	$7 = *(($6 + [16]))
	$4 = *(($6 + [24]))
	$12 = *(($6 + [32]))
	$13 = *($8 + [41])
	$14 = *($8 + [40])
	$15 = *($6)
	*((($5 + [400]) + [44])) = (int_64)0
	*((($5 + [400]) + [32])) = $12
	*((($5 + [400]) + [24])) = $4
	*((($5 + [400]) + [16])) = $7
	*($5 + [440]) = [0]
	*($5 + [408]) = $3
	*($5 + [400]) = $15
	$16 = (*(($6 + [44])) - *($6 + [40]))
	$17 = ((int_32)$16 / (int_32)[56])
	$9 = [0]
	if ( ($16 == 0) ){ goto $label$5 }
	if ( ((uint_32)$17 >= (uint_32)[76695845]) ){ goto $label$4 }
	$9 = CALL _Znwj($16)
	*((($5 + [400]) + [40])) = $9
	*(($5 + [448])) = ($9 + ((int_32)$17 * (int_32)[56]))
	*(($16 = (($5 + [400]) + [44]))) = $9
	$18 = *(($6 + [40]))
	$17 = (*(($6 + [44])) - $18)
	if ( ((int_32)$17 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($9, $18, $17)
	$9 = (*($16) + ((int_32)((uint_32)$17 / (uint_32)[56]) * (int_32)[56]))
	*($16) = $9
	
.LABEL $label$5
	$17 = ($6 + [64])
	CALL memcpy((($5 + [400]) + [64]), $17, [144])
	if ( *($5 + [604]) ){ goto $label$3 }
	$9 = ((int_32)($9 - *(($5 + [440]))) / (int_32)[56])
	if ( (($9 & [254]) == 0) ){ goto $label$6 }
	if ( ((int_32)($14 & [255]) == (int_32)($9 & [255])) ){ goto $label$3 }
	$10 = (((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) - *($5 + [596])) <= $13)
	goto $label$3 
	
.LABEL $label$6
	$10 = [1]
	goto $label$3 
	
.LABEL $label$4
	CALL $122(($5 + [440]))
	
.LABEL $label$3
	CALL eosio_assert($10, [8928])
	$9 = *((($5 + [400]) + [40]))
	if ( ($9 == 0) ){ goto $label$7 }
	*(($5 + [444])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$7
	$16 = *(($6 + [44]))
	$9 = *(($6 + [40]))
	if ( ((int_32)$9 == (int_32)$16) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$8 }
	$9 = ($9 + [56])
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$9 }
	$9 = $16
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$9 == (int_32)$16), [8951])
	$7 = *(($6 + [16]))
	*((($5 + [384]) + [8])) = $7
	$3 = *($6 + [8])
	*((($5 + [48]) + [8])) = $7
	*($5 + [48]) = $3
	*($5 + [384]) = $3
	CALL $48($0, $1, ($5 + [48]))
	$9 = CALL $135([8401])
	if ( ($9 <= [8]) ){ goto $label$13 }
	CALL eosio_assert([0], [9278])
	goto $label$12 
	
.LABEL $label$13
	if ( ($9 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$3 = (int_64)0
	
.LOOP $label$14:
	$16 = *(($9 + [8400]))
	if ( ((($16 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$15
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$14 }
	$3 = ((int_64)$3 << (int_64)8)
	goto $label$10 
	
.LABEL $label$11
	$3 = (int_64)0
	
.LABEL $label$10
	$9 = ($6 + [16])
	if ( ((int_64)*($9) != (int_64)((int_64)$3 | (int_64)4)) ){ goto $label$16 }
	$16 = ($6 + [8])
	$10 = ($16 + [8])
	$7 = *($10)
	*((($5 + [368]) + [8])) = $7
	$3 = *($16)
	*((($5 + [32]) + [8])) = $7
	*($5 + [368]) = $3
	*($5 + [32]) = $3
	CALL $49($0, $1, ($5 + [32]))
	$7 = *($10)
	*((($5 + [352]) + [8])) = $7
	$3 = *($16)
	*((($5 + [16]) + [8])) = $7
	*($5 + [16]) = $3
	*($5 + [352]) = $3
	CALL $50($0, $1, $2, ($5 + [16]))
	
.LABEL $label$16
	*((($5 + [296]) + [16])) = (int_64)0
	*(($5 + [328])) = (int_64)0
	*($5 + [304]) = (int_64)0
	*($5 + [320]) = (int_64)0
	*($5 + [336]) = (int_64)0
	*($5 + [296]) = $1
	$4 = *($9)
	CALL eosio_assert([1], [9382])
	$3 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$7 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$3 = $7
	$16 = [1]
	$10 = $9
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$3 = $7
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$16 = ((int_32)$9 < (int_32)[6])
	$10 = ($9 + [1])
	$9 = $10
	if ( $16 ){ goto $label$21 }
	$16 = [1]
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$16 = [0]
	
.LABEL $label$17
	CALL eosio_assert($16, [9431])
	*(($5 + [312])) = $4
	*((($5 + [296]) + [8])) = (int_64)0
	$9 = CALL $135([8405])
	if ( ($9 <= [8]) ){ goto $label$25 }
	CALL eosio_assert([0], [9278])
	goto $label$24 
	
.LABEL $label$25
	if ( ($9 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$3 = (int_64)0
	
.LOOP $label$26:
	$16 = *(($9 + [8404]))
	if ( ((($16 + [-65]) & [255]) <= [26]) ){ goto $label$27 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$27
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$26 }
	$4 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$22 
	
.LABEL $label$23
	$4 = (int_64)4
	
.LABEL $label$22
	CALL eosio_assert([1], [9382])
	$3 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$30:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$7 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$31 }
	$3 = $7
	$16 = [1]
	$10 = $9
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$31
	$3 = $7
	
.LOOP $label$32:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$29 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$16 = ((int_32)$9 < (int_32)[6])
	$10 = ($9 + [1])
	$9 = $10
	if ( $16 ){ goto $label$32 }
	$16 = [1]
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	$16 = [0]
	
.LABEL $label$28
	CALL eosio_assert($16, [9431])
	*((($5 + [296]) + [32])) = $4
	*((($5 + [296]) + [24])) = (int_64)0
	*($5 + [344]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$9 = CALL is_account($2)
	if ( ((int_64)$2 == (int_64)$1) ){ goto $label$33 }
	if ( ($9 == 0) ){ goto $label$33 }
	if ( ((int_64)*($0) == (int_64)$2) ){ goto $label$33 }
	*($5 + [280]) = [8966]
	*($5 + [284]) = CALL $135([8966])
	*($5 + [8]) = *($5 + [280])
	if ( ((int_64)*(CALL $2(($5 + [288]), ($5 + [8]))) == (int_64)$2) ){ goto $label$33 }
	*(($5 + [336])) = $2
	
.LABEL $label$33
	$3 = *($0)
	*($5 + [288]) = ($5 + [296])
	CALL eosio_assert($11, [9904])
	CALL $51(($5 + [608]), $6, $3, ($5 + [288]))
	$13 = *(($8 + [41]))
	$14 = *(($8 + [40]))
	*((($5 + [64]) + [32])) = *(($6 + [32]))
	*((($5 + [64]) + [24])) = *(($6 + [24]))
	*((($5 + [64]) + [16])) = *(($6 + [16]))
	$3 = *(($6 + [8]))
	$1 = *($6)
	*((($5 + [64]) + [44])) = (int_64)0
	$10 = [0]
	*($5 + [104]) = [0]
	*($5 + [72]) = $3
	*($5 + [64]) = $1
	$16 = (*(($6 + [44])) - *(($6 + [40])))
	$8 = ((int_32)$16 / (int_32)[56])
	$9 = [0]
	if ( ($16 == 0) ){ goto $label$38 }
	if ( ((uint_32)$8 >= (uint_32)[76695845]) ){ goto $label$37 }
	$9 = CALL _Znwj($16)
	*((($5 + [64]) + [40])) = $9
	*(($5 + [112])) = ($9 + ((int_32)$8 * (int_32)[56]))
	*(($16 = (($5 + [64]) + [44]))) = $9
	$18 = *(($6 + [40]))
	$8 = (*(($6 + [44])) - $18)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$38 }
	CALL memcpy($9, $18, $8)
	$9 = (*($16) + ((int_32)((uint_32)$8 / (uint_32)[56]) * (int_32)[56]))
	*($16) = $9
	
.LABEL $label$38
	CALL memcpy(($5 + [128]), $17, [144])
	if ( *($5 + [268]) ){ goto $label$36 }
	$16 = *(($5 + [104]))
	$9 = ((int_32)($9 - $16) / (int_32)[56])
	if ( (($9 & [254]) == 0) ){ goto $label$39 }
	if ( ((int_32)($14 & [255]) == (int_32)($9 & [255])) ){ goto $label$36 }
	$10 = (((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) - *($5 + [260])) <= $13)
	$16 = *(($5 + [104]))
	if ( $16 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$39
	$10 = [1]
	if ( $16 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$37
	CALL $122((($5 + [64]) + [40]))
	
.LABEL $label$36
	$16 = *(($5 + [104]))
	if ( ($16 == 0) ){ goto $label$34 }
	
.LABEL $label$35
	*(($5 + [108])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$34
	if ( $10 ){ goto $label$40 }
	$3 = *($0)
	CALL eosio_assert($11, [9904])
	CALL $52(($5 + [608]), $6, $3)
	
.LABEL $label$40
	$10 = *($5 + [632])
	if ( ($10 == 0) ){ goto $label$41 }
	$0 = ($5 + [636])
	$9 = *($0)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$43 }
	
.LOOP $label$44:
	$9 = ($9 + [-24])
	$16 = *($9)
	*($9) = [0]
	if ( ($16 == 0) ){ goto $label$45 }
	$6 = *($16 + [40])
	if ( ($6 == 0) ){ goto $label$46 }
	*(($16 + [44])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$46
	CALL _ZdlPv($16)
	
.LABEL $label$45
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$44 }
	$9 = *(($5 + [632]))
	goto $label$42 
	
.LABEL $label$43
	$9 = $10
	
.LABEL $label$42
	*($0) = $10
	CALL _ZdlPv($9)
	
.LABEL $label$41
	$6 = *($5 + [672])
	if ( ($6 == 0) ){ goto $label$47 }
	$10 = ($5 + [676])
	$9 = *($10)
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$49 }
	
.LOOP $label$50:
	$9 = ($9 + [-24])
	$16 = *($9)
	*($9) = [0]
	if ( ($16 == 0) ){ goto $label$51 }
	CALL _ZdlPv($16)
	
.LABEL $label$51
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$50 }
	$9 = *(($5 + [672]))
	goto $label$48 
	
.LABEL $label$49
	$9 = $6
	
.LABEL $label$48
	*($10) = $6
	CALL _ZdlPv($9)
	
.LABEL $label$47
	$global$0 = ($5 + [688])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $138($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [128]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $47(($4 + [16]), ($4 + [128]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$3 = *($3)
	*((($4 + [96]) + [8])) = $3
	*(($8 = (($4 + [112]) + [8]))) = $3
	$9 = *($4)
	*($4 + [112]) = $9
	*($4 + [96]) = $9
	$3 = *($8)
	*((($4 + [128]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($4 + [88])
	$1 = *($4 + [80])
	$9 = *($4 + [72])
	$10 = *($4 + [64])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $10), (int_64 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $141($2)
	
.LABEL $label$6
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $13 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = [0]
	*((($2 + [48]) + [32])) = [0]
	*($2 + [64]) = (int_64)-1
	*($2 + [72]) = (int_64)0
	$4 = *($0)
	*($2 + [48]) = $4
	*($2 + [56]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)7343588546453700608, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $38(($2 + [48]), $6)
	CALL eosio_assert(((int_32)*($5 + [52]) == (int_32)($2 + [48])), [9779])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8607])
	*((($2 + [8]) + [32])) = [0]
	*($2 + [24]) = (int_64)-1
	$4 = *($0)
	*($2 + [8]) = $4
	*($2 + [16]) = $1
	*($2 + [32]) = (int_64)0
	$0 = CALL db_lowerbound_i64($4, $1, (int_64)-6228190869736914944, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $43(($2 + [8]), $0)
	
.LABEL $label$2
	if ( ((uint_64)*($3) >= (uint_64)((int_64)*($5 + [24]) + (int_64)-100)) ){ goto $label$3 }
	$0 = [0]
	$7 = ($5 + [24])
	
.LOOP $label$4:
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((uint_32)($0 & [255]) > (uint_32)[19]) ){ goto $label$3 }
	CALL eosio_assert([1], [10249])
	CALL eosio_assert([1], [10283])
	$5 = [0]
	$6 = CALL db_next_i64(*($3 + [212]), ($2 + [88]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $43(($2 + [8]), $6)
	
.LABEL $label$5
	CALL $75(($2 + [8]), $3)
	$0 = ($0 + [1])
	$3 = $5
	if ( (uint_64)(*($5) <= ((int_64)*($7) + (int_64)-100)) ){ goto $label$4 }
	
.LABEL $label$3
	$6 = *($2 + [32])
	if ( ($6 == 0) ){ goto $label$6 }
	$7 = ($2 + [36])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	$0 = *($5 + [40])
	if ( ($0 == 0) ){ goto $label$11 }
	*(($5 + [44])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$11
	CALL _ZdlPv($5)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($2 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $6
	
.LABEL $label$7
	*($7) = $6
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$0 = *($2 + [72])
	if ( ($0 == 0) ){ goto $label$12 }
	$6 = ($2 + [76])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$16 }
	CALL _ZdlPv($5)
	
.LABEL $label$16
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$15 }
	$3 = *(($2 + [72]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $0
	
.LABEL $label$13
	*($6) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$12
	$global$0 = ($2 + [96])
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [208]) == (int_32)$0), [10313])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [10358])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10408])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [40])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [44])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = *($5 + [40])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [44])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [212]))
}

int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $138($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [96]))) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = [0]
	*($4 + [68]) = $2
	*($4 + [64]) = $2
	*($4 + [72]) = ($2 + $7)
	*($4 + [160]) = ($4 + [64])
	*($4 + [32]) = ($4 + [80])
	CALL $37(($4 + [32]), ($4 + [160]))
	*(($9 = (($4 + [16]) + [8]))) = *($4 + [72])
	*($4 + [16]) = *($4 + [64])
	$10 = *($9)
	*(($3 = (($4 + [128]) + [8]))) = $10
	*(($9 = (($4 + [144]) + [8]))) = $10
	$11 = *($4 + [16])
	*($4 + [144]) = $11
	*($4 + [128]) = $11
	$10 = *($9)
	*((($4 + [160]) + [8])) = $10
	*(($4 + [56])) = $10
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$0 = *($4 + [144])
	*($4 + [48]) = $0
	*($4 + [160]) = $0
	*($3) = *($8)
	*($4 + [128]) = *($4 + [88])
	$0 = *($4 + [80])
	$1 = *($4 + [104])
	$8 = *($4 + [112])
	$10 = *($4 + [113])
	$12 = *($4 + [114])
	$13 = *($4 + [115])
	$14 = *($4 + [116])
	$15 = *($4 + [120])
	*($9) = *($3)
	*($4 + [144]) = *($4 + [128])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$11 = *((($4 + [144]) + [8]))
	*((($4 + [160]) + [8])) = $11
	*(($4 + [8])) = $11
	$11 = *($4 + [144])
	*($4) = $11
	*($4 + [160]) = $11
	CALL void $3((int_32 $0), (int_64 $4), (int_32 $1), (int_64 ($8 & [255])), (int_32 ($10 & [255])), (int_32 ($12 & [255])), (int_32 ((int_32)($13 & [255]) != (int_32)[0])), (int_32 $14), (int_32 $15), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $141($2)
	
.LABEL $label$5
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $19 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [176])
	$global$0 = $5
	CALL require_auth(*($0))
	*((($5 + [8]) + [32])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$6 = *($0)
	*($5 + [8]) = $6
	*($5 + [16]) = $6
	$7 = [0]
	$8 = CALL db_find_i64($6, $6, (int_64)7343588546453700608, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $38(($5 + [8]), $8)
	CALL eosio_assert(((int_32)*($7 + [52]) == (int_32)($5 + [8])), [9779])
	
.LABEL $label$1
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [8607])
	$1 = *($0)
	CALL eosio_assert($8, [9904])
	CALL eosio_assert(((int_32)*($7 + [52]) == (int_32)($5 + [8])), [9939])
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)CALL $fimport$8()), [9985])
	*($7 + [43]) = $2
	*($7 + [44]) = $3
	*($7 + [48]) = $4
	$6 = *($7)
	CALL eosio_assert([1], [10036])
	*($5 + [120]) = (($5 + [48]) + [52])
	*($5 + [116]) = ($5 + [48])
	*($5 + [112]) = ($5 + [48])
	*($5 + [128]) = ($5 + [112])
	*($5 + [140]) = ($7 + [8])
	*($5 + [136]) = $7
	*($5 + [144]) = ($7 + [24])
	*($5 + [148]) = ($7 + [32])
	*($5 + [152]) = ($7 + [40])
	*($5 + [156]) = ($7 + [41])
	*($5 + [160]) = ($7 + [42])
	*($5 + [164]) = ($7 + [43])
	*($5 + [168]) = ($7 + [44])
	*($5 + [172]) = ($7 + [48])
	CALL $39(($5 + [136]), ($5 + [128]))
	CALL db_update_i64(*($7 + [56]), $1, ($5 + [48]), [52])
	$7 = ($5 + [24])
	if ( (uint_64)($6 <= *($7)) ){ goto $label$2 }
	*($7) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$3 = *($5 + [32])
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = ($5 + [36])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$7 = ($7 + [-24])
	$0 = *($7)
	*($7) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$6 }
	$7 = *(($5 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$7 = $3
	
.LABEL $label$4
	*($4) = $3
	CALL _ZdlPv($7)
	
.LABEL $label$3
	$global$0 = ($5 + [176])
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9830])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $138($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [16]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	CALL $109(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $60(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $141($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9376])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $0, [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *($0 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $50 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$4 = ($global$0 - [160])
	$global$0 = $4
	$5 = CALL $135([8401])
	if ( ($5 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [9278])
	goto $label$4 
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = (int_64)0
	
.LOOP $label$6:
	$7 = *(($5 + [8400]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$7
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$6 }
	if ( ((int_64)*($3 + [8]) != (int_64)((int_64)((int_64)$6 << (int_64)8) | (int_64)4)) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_64)*($3 + [8]) != (int_64)4) ){ goto $label$1 }
	
.LABEL $label$2
	if ( (CALL is_account($2) == 0) ){ goto $label$1 }
	*(($4 + [72])) = [0]
	*($4 + [56]) = (int_64)-1
	*($4 + [64]) = (int_64)0
	$8 = *($0)
	*($4 + [40]) = $8
	*($4 + [48]) = $2
	$5 = CALL db_find_i64($8, $2, (int_64)3617074512601808896, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*(CALL $79(($4 + [40]), $5) + [32]) == (int_32)($4 + [40])), [9779])
	$3 = *($4 + [64])
	if ( $3 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$9
	$5 = CALL $135([8405])
	if ( ($5 <= [8]) ){ goto $label$13 }
	CALL eosio_assert([0], [9278])
	goto $label$12 
	
.LABEL $label$13
	if ( ($5 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$6 = (int_64)0
	
.LOOP $label$14:
	$7 = *(($5 + [8404]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$15
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$14 }
	$9 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$10 
	
.LABEL $label$11
	$9 = (int_64)4
	
.LABEL $label$10
	CALL eosio_assert([1], [9382])
	$6 = (uint_64)$9 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$10 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$6 = $10
	$7 = [1]
	$3 = $5
	$5 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$6 = $10
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$3 = ($5 + [1])
	$5 = $3
	if ( $7 ){ goto $label$20 }
	$7 = [1]
	$5 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$7 = [0]
	
.LABEL $label$16
	CALL eosio_assert($7, [9431])
	$10 = *($0)
	CALL eosio_assert(((int_64)$8 == (int_64)CALL $fimport$8()), [9853])
	*(($5 = CALL _Znwj([48])) + [32]) = ($4 + [40])
	*($5) = $1
	*($5 + [8]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$6 = CALL current_time()
	*($5 + [16]) = (int_64)2660000
	*($5 + [24]) = $9
	*($5 + [12]) = ((uint_64)$6 / (uint_64)(int_64)1000000)
	*($4 + [128]) = (($4 + [80]) + [32])
	*($4 + [124]) = ($4 + [80])
	*($4 + [120]) = ($4 + [80])
	*($4 + [136]) = ($4 + [120])
	*($4 + [148]) = ($5 + [8])
	*($4 + [144]) = $5
	*($4 + [152]) = ($5 + [12])
	*($4 + [156]) = ($5 + [16])
	CALL $80(($4 + [144]), ($4 + [136]))
	$6 = *($5)
	$3 = CALL db_store_i64(*((($4 + [40]) + [8])), (int_64)3617074512601808896, $10, $6, ($4 + [80]), [32])
	*($5 + [36]) = $3
	$7 = (($4 + [40]) + [16])
	if ( (uint_64)($6 <= *($7)) ){ goto $label$21 }
	*($7) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$21
	*($4 + [144]) = $5
	$6 = *($5)
	*($4 + [80]) = $6
	*($4 + [120]) = $3
	$11 = ($4 + [68])
	$7 = *($11)
	if ( ((uint_32)$7 >= (uint_32)*((($4 + [40]) + [32]))) ){ goto $label$24 }
	*($7 + [8]) = $6
	*($7 + [16]) = $3
	*($4 + [144]) = [0]
	*($7) = $5
	*($11) = ($7 + [24])
	$5 = *($4 + [144])
	*($4 + [144]) = [0]
	if ( ($5 == 0) ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$24
	CALL $81(($4 + [64]), ($4 + [144]), ($4 + [80]), ($4 + [120]))
	$5 = *($4 + [144])
	*($4 + [144]) = [0]
	if ( ($5 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL _ZdlPv($5)
	
.LABEL $label$22
	*(($4 + [16])) = $9
	*($4 + [32]) = $9
	*($4 + [8]) = (int_64)2660000
	*($4 + [24]) = (int_64)2660000
	CALL $32($0, $2, ($4 + [8]))
	$3 = *($4 + [64])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$8
	$0 = ($4 + [68])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$26 }
	
.LOOP $label$27:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$28 }
	CALL _ZdlPv($7)
	
.LABEL $label$28
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$27 }
	$5 = *(($4 + [64]))
	goto $label$25 
	
.LABEL $label$26
	$5 = $3
	
.LABEL $label$25
	*($0) = $3
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$global$0 = ($4 + [160])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [208]) == (int_32)$0), [9939])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [9985])
	$3 = *($3)
	$6 = *($1)
	$7 = ($1 + [44])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)*(($1 + [48]))) ){ goto $label$2 }
	*($8) = *($3)
	*(($8 + [48])) = *(($3 + [48]))
	*(($8 + [40])) = *(($3 + [40]))
	*(($8 + [32])) = *(($3 + [32]))
	*(($8 + [24])) = *(($3 + [24]))
	*(($8 + [16])) = *(($3 + [16]))
	*(($8 + [8])) = *(($3 + [8]))
	*($7) = (*($7) + [56])
	$7 = ($1 + [40])
	goto $label$1 
	
.LABEL $label$2
	$7 = ($1 + [40])
	CALL $108($7, $3)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [10036])
	$9 = *($7)
	$8 = *(($1 + [44]))
	$10 = ($8 - $9)
	$11 = (CASTING uint_64)(uint_32 ((int_32)$10 / (int_32)[56]))
	$3 = [92]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$5 }
	$3 = (((int_32)((uint_32)($10 + [-56]) / (uint_32)[56]) * (int_32)[52]) + $3)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($3 + [-52])
	
.LABEL $label$4
	$8 = ($3 + [141])
	if ( ($8 <= [513]) ){ goto $label$7 }
	$3 = CALL $138($8)
	goto $label$6 
	
.LABEL $label$7
	$3 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$6
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $8)
	*($5 + [16]) = $5
	*($5 + [36]) = $7
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [8])
	*($5 + [32]) = ($1 + [24])
	*($5 + [40]) = ($1 + [64])
	*($5 + [44]) = ($1 + [128])
	*($5 + [48]) = ($1 + [192])
	*($5 + [52]) = ($1 + [196])
	*($5 + [56]) = ($1 + [200])
	*($5 + [60]) = ($1 + [204])
	CALL $103(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [212]), $2, $3, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $141($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [64])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [208]) == (int_32)$0), [9939])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [9985])
	$5 = *($1)
	*($1 + [200]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10036])
	$6 = ($1 + [40])
	$7 = ($1 + [200])
	$9 = *($1 + [40])
	$8 = *(($1 + [44]))
	$10 = ($8 - $9)
	$11 = (CASTING uint_64)(uint_32 ((int_32)$10 / (int_32)[56]))
	$12 = [92]
	
.LOOP $label$1:
	$12 = ($12 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$3 }
	$12 = (((int_32)((uint_32)($10 + [-56]) / (uint_32)[56]) * (int_32)[52]) + $12)
	goto $label$2 
	
.LABEL $label$3
	$12 = ($12 + [-52])
	
.LABEL $label$2
	$8 = ($12 + [141])
	if ( ($8 <= [513]) ){ goto $label$5 }
	$12 = CALL $138($8)
	goto $label$4 
	
.LABEL $label$5
	$12 = ($3 - (($8 + [15]) & [-16]))
	$global$0 = $12
	
.LABEL $label$4
	*($4 + [4]) = $12
	*($4) = $12
	*($4 + [8]) = ($12 + $8)
	*($4 + [16]) = $4
	*($4 + [36]) = $6
	*($4 + [56]) = $7
	*($4 + [24]) = $1
	*($4 + [28]) = ($1 + [8])
	*($4 + [32]) = ($1 + [24])
	*($4 + [40]) = ($1 + [64])
	*($4 + [44]) = ($1 + [128])
	*($4 + [48]) = ($1 + [192])
	*($4 + [52]) = ($1 + [196])
	*($4 + [60]) = ($1 + [204])
	CALL $103(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [212]), $2, $12, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $141($12)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$6
	$global$0 = ($4 + [64])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [208]) == (int_32)$0), [9939])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [9985])
	$6 = *($1)
	*($1 + [204]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$7 = *($3)
	*(($1 + [184])) = *(($7 + [24]))
	*(($1 + [176])) = *(($7 + [16]))
	*(($1 + [168])) = *(($7 + [8]))
	*(($1 + [160])) = *($7)
	$7 = *($3 + [4])
	*($1 + [128]) = *($7)
	*(($1 + [152])) = *(($7 + [24]))
	*(($1 + [144])) = *(($7 + [16]))
	*(($1 + [136])) = *(($7 + [8]))
	$8 = ($1 + [200])
	if ( *($1 + [200]) ){ goto $label$1 }
	*($8) = (*($1 + [196]) + *(*(*($3 + [8]) + [4]) + [41]))
	
.LABEL $label$1
	$9 = ($1 + [128])
	$10 = ($1 + [204])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [10036])
	$11 = ($1 + [40])
	$12 = *($1 + [40])
	$3 = *(($1 + [44]))
	$13 = ($3 - $12)
	$14 = (CASTING uint_64)(uint_32 ((int_32)$13 / (int_32)[56]))
	$7 = [92]
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$4 }
	$7 = (((int_32)((uint_32)($13 + [-56]) / (uint_32)[56]) * (int_32)[52]) + $7)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 + [-52])
	
.LABEL $label$3
	$3 = ($7 + [141])
	if ( ($3 <= [513]) ){ goto $label$6 }
	$7 = CALL $138($3)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$5
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = ($7 + $3)
	*($5 + [16]) = $5
	*($5 + [36]) = $11
	*($5 + [44]) = $9
	*($5 + [56]) = $8
	*($5 + [60]) = $10
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [8])
	*($5 + [32]) = ($1 + [24])
	*($5 + [40]) = ($1 + [64])
	*($5 + [48]) = ($1 + [192])
	*($5 + [52]) = ($1 + [196])
	CALL $103(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [212]), $2, $7, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $141($7)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [64])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_64 $24
	int_64 $25
	int_64 $26
	int_64 $27
	int_64 $28
	int_64 $29
	$4 = ($global$0 - [368])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [208]) == (int_32)$0), [9939])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [9985])
	$5 = *($1)
	*((($6 = $4) + [176])) = [0]
	*(($7 = (($6 + [128]) + [16]))) = *(($1 + [16]))
	*((($6 + [128]) + [24])) = *(($1 + [24]))
	*((($6 + [128]) + [32])) = *(($1 + [32]))
	*($6 + [168]) = (int_64)0
	*($6 + [128]) = *($1)
	*($6 + [136]) = *(($1 + [8]))
	$8 = *($1 + [40])
	$9 = (*(($1 + [44])) - $8)
	$10 = ((int_32)$9 / (int_32)[56])
	$11 = *($3)
	if ( ($9 == 0) ){ goto $label$3 }
	if ( ((uint_32)$10 >= (uint_32)[76695845]) ){ goto $label$2 }
	$9 = CALL _Znwj($9)
	*((($6 + [128]) + [40])) = $9
	*(($12 = (($6 + [128]) + [44]))) = $9
	*(($6 + [176])) = ($9 + ((int_32)$10 * (int_32)[56]))
	$13 = *(($1 + [40]))
	$10 = (*(($1 + [44])) - $13)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($9, $13, $10)
	*($12) = ($9 + ((int_32)((uint_32)$10 / (uint_32)[56]) * (int_32)[56]))
	
.LABEL $label$3
	$14 = ($1 + [64])
	CALL memcpy((($6 + [128]) + [64]), $14, [144])
	$15 = *($7)
	*((($6 + [336]) + [8])) = $15
	*((($6 + [80]) + [8])) = $15
	$15 = *($6 + [136])
	*($6 + [80]) = $15
	*($6 + [336]) = $15
	CALL $70(($6 + [352]), $11, ($6 + [80]))
	$16 = *($6 + [360])
	$15 = *($6 + [352])
	$9 = *($6 + [168])
	$10 = (((int_32)(*((($6 + [128]) + [44])) - $9) / (int_32)[56]) & [255])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [9510])
	CALL eosio_assert([1], [9525])
	$17 = ((int_64)$15 / (int_64)(CASTING uint_64)(uint_32 $10))
	if ( ($9 == 0) ){ goto $label$4 }
	*(($6 + [172])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$4
	$18 = ($1 + [44])
	if ( ((int_32)$8 == (int_32)*($18)) ){ goto $label$6 }
	$12 = [0]
	$19 = ($3 + [4])
	$20 = ($3 + [8])
	$13 = ($3 + [12])
	$21 = ($3 + [28])
	$22 = ($1 + [192])
	$23 = ($3 + [20])
	
.LOOP $label$7:
	$10 = *($9)
	$9 = *($19)
	if ( ((uint_32)int_32((*($9 + [4]) - $10) >> [2]) <= (uint_32)$12) ){ goto $label$5 }
	if ( ((int_32)$12 != (int_32)(*(*($20)) + [-1])) ){ goto $label$9 }
	$9 = *($13)
	$24 = *($9 + [8])
	$25 = *($9)
	goto $label$8 
	
.LABEL $label$9
	$9 = *(($3 + [16]))
	$24 = *($9 + [8])
	$25 = ((int_64)((int_64)((int_64)((int_64)*($9) / (int_64)100) * (int_64)*(($10 + ($12 << [2])))) / (int_64)*(*($23))) * (int_64)100)
	CALL eosio_assert((uint_64)(((int_64)$25 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9382])
	$15 = (uint_64)$24 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$26 = (uint_64)$15 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$15 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$15 = $26
	$10 = [1]
	$7 = $9
	$9 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$15 = $26
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$15 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8)
	$10 = ((int_32)$9 < (int_32)[6])
	$7 = ($9 + [1])
	$9 = $7
	if ( $10 ){ goto $label$14 }
	$10 = [1]
	$9 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$10 = [0]
	
.LABEL $label$10
	CALL eosio_assert($10, [9431])
	$9 = ($3 + [24])
	$10 = *($9)
	CALL eosio_assert(((int_64)$24 == (int_64)*($10 + [8])), [9451])
	if ( ((int_64)$25 >= (int_64)*($10)) ){ goto $label$15 }
	$10 = *($9)
	$24 = *($10 + [8])
	$25 = *($10)
	
.LABEL $label$15
	$10 = *($13)
	$15 = *($10)
	$27 = *($10 + [8])
	CALL eosio_assert(((int_64)$24 == (int_64)$27), [9679])
	$26 = (int_64)
	CALL eosio_assert(((int_64)$26($15 - $25)) > (int_64)-4611686018427387904), [9727])
	CALL eosio_assert(((int_64)$26 < (int_64)4611686018427387904), [9749])
	$9 = *($9)
	$15 = *($9)
	$15 = (CASTING int_64)(int_32 (*(*($20)) + ((int_32)$12 ^ (int_32)[-1])))
	CALL __multi3(($6 + [64]), $15, (int_64)$15 >> (int_64)63), $15, (int_64)$15 >> (int_64)63))
	$28 = *($9 + [8])
	$15 = *((($6 + [64]) + [8]))
	$29 = *($6 + [64])
	CALL eosio_assert(( (uint_64)($29 <= (int_64)4611686018427387904) ? ((int_64)$15 < (int_64)0) : (int_64)($15 == 0) ), [9630])
	CALL eosio_assert(( ((uint_64)$29 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$15 > (int_64)-1) : ((int_64)$15 == (int_64)-1) ), [9654])
	$9 = ((int_64)$27 == (int_64)$28)
	CALL eosio_assert($9, [9451])
	if ( ((int_64)$26 >= (int_64)$29) ){ goto $label$8 }
	CALL eosio_assert($9, [9679])
	$15 = (int_64)
	CALL eosio_assert(((int_64)$15($29 - $26)) > (int_64)-4611686018427387904), [9727])
	CALL eosio_assert(((int_64)$15 < (int_64)4611686018427387904), [9749])
	CALL eosio_assert(((int_64)$28 == (int_64)$24), [9679])
	$25 = (int_64)
	CALL eosio_assert(((int_64)$25($25 - $15)) > (int_64)-4611686018427387904), [9727])
	CALL eosio_assert(((int_64)$25 < (int_64)4611686018427387904), [9749])
	
.LABEL $label$8
	$9 = *($21)
	CALL eosio_assert(((int_64)$24 == (int_64)*($9 + [8])), [9451])
	if ( ((int_64)$25 > (int_64)*($9)) ){ goto $label$16 }
	*(($9 = *($21)) + [8]) = $24
	*($9) = $25
	*($22) = $12
	
.LABEL $label$16
	$9 = *($13)
	CALL eosio_assert(((int_64)$24 == (int_64)*($9 + [8])), [9679])
	$15 = (int_64)
	*($9) = $15(*($9) - $25))
	CALL eosio_assert(((int_64)$15 > (int_64)-4611686018427387904), [9727])
	CALL eosio_assert(((int_64)*($9) < (int_64)4611686018427387904), [9749])
	*($8 + [8]) = $25
	*(($8 + [16])) = $24
	$15 = *($8)
	*(($9 = (($6 + [352]) + [8]))) = $24
	*((($6 + [48]) + [8])) = *($9)
	*($6 + [352]) = $25
	*($6 + [48]) = *($6 + [352])
	CALL $32($11, $15, ($6 + [48]))
	*(($8 + [32])) = $16
	*($8 + [24]) = $17
	$15 = *($8)
	*(($9 = (($6 + [336]) + [8]))) = $16
	*((($6 + [32]) + [8])) = *($9)
	*($6 + [336]) = $17
	*($6 + [32]) = *($6 + [336])
	CALL $32($11, $15, ($6 + [32]))
	if ( ((int_64)$17 < (int_64)1) ){ goto $label$17 }
	*($6 + [112]) = [8893]
	*($6 + [116]) = CALL $135([8893])
	*($6 + [24]) = *($6 + [112])
	CALL $2(($6 + [120]), ($6 + [24]))
	*((($6 + [96]) + [8])) = $16
	*((($6 + [8]) + [8])) = $16
	*($6 + [8]) = $17
	*($6 + [96]) = $17
	CALL $71($11, *($6 + [120]), ($6 + [8]))
	
.LABEL $label$17
	$12 = ($12 + [1])
	$8 = ($8 + [56])
	if ( ((int_32)$8 != (int_32)*($18)) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10036])
	$7 = ($1 + [40])
	$8 = *($1 + [40])
	$10 = *($18)
	$12 = ($10 - $8)
	$15 = (CASTING uint_64)(uint_32 ((int_32)$12 / (int_32)[56]))
	$9 = [92]
	
.LOOP $label$18:
	$9 = ($9 + [1])
	$15 = (uint_64)$15 >> (uint_64)(int_64)7
	if ( ((int_64)$15) != (int_64)0) ){ goto $label$18 }
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$20 }
	$9 = (((int_32)((uint_32)($12 + [-56]) / (uint_32)[56]) * (int_32)[52]) + $9)
	goto $label$19 
	
.LABEL $label$20
	$9 = ($9 + [-52])
	
.LABEL $label$19
	$10 = ($9 + [141])
	if ( ($10 <= [513]) ){ goto $label$22 }
	$9 = CALL $138($10)
	goto $label$21 
	
.LABEL $label$22
	$9 = ($4 - (($10 + [15]) & [-16]))
	$global$0 = $9
	
.LABEL $label$21
	*($6 + [356]) = $9
	*($6 + [352]) = $9
	*($6 + [360]) = ($9 + $10)
	*($6 + [336]) = ($6 + [352])
	*($6 + [140]) = $7
	*($6 + [144]) = $14
	*($6 + [128]) = $1
	*($6 + [132]) = ($1 + [8])
	*($6 + [136]) = ($1 + [24])
	*($6 + [148]) = ($1 + [128])
	*($6 + [152]) = ($1 + [192])
	*($6 + [156]) = ($1 + [196])
	*($6 + [160]) = ($1 + [200])
	*($6 + [164]) = ($1 + [204])
	CALL $103(($6 + [128]), ($6 + [336]))
	CALL db_update_i64(*($1 + [212]), $2, $9, $10)
	if ( ($10 <= [513]) ){ goto $label$24 }
	CALL $141($9)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$23 }
	goto $label$1 
	
.LABEL $label$24
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$1 }
	
.LABEL $label$23
	$global$0 = ($6 + [368])
	return (unreachable)
	
.LABEL $label$5
	CALL $123($9)
	
.LABEL $label$2
	CALL $122(($6 + [168]))
	
.LABEL $label$1
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($6 + [368])
	(unreachable)
}

int_32 .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $85($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $86(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $56 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [128])
	$global$0 = $3
	$4 = [0]
	*((($3 + [8]) + [32])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$5 = *($0)
	*($3 + [8]) = $5
	$6 = *($2 + [8])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [16]) = $7)
	$8 = CALL db_find_i64($5, $7, (int_64)-5859317942822371328, $1)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	$8 = CALL $33(($3 + [8]), $8)
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)($3 + [8])), [9779])
	CALL eosio_assert(((int_64)*(($8 + [32])) == (int_64)$6), [9451])
	$5 = *($2)
	$2 = ((int_64)*($8 + [24]) >= (int_64)$5)
	$4 = [1]
	$9 = $8
	goto $label$1 
	
.LABEL $label$2
	$5 = *($2)
	$8 = [0]
	$9 = [0]
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [9052])
	$7 = *($0)
	CALL eosio_assert($4, [9904])
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)($3 + [8])), [9939])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$8()), [9985])
	$1 = *($8)
	CALL eosio_assert(((int_64)$6 == (int_64)*(($8 + [16]))), [9550])
	$10 = ((int_64)*($8 + [8]) + (int_64)$5)
	*($8 + [8]) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [9593])
	CALL eosio_assert(((int_64)*($8 + [8]) < (int_64)4611686018427387904), [9612])
	CALL eosio_assert(((int_64)$6 == (int_64)*(($8 + [32]))), [9679])
	$6 = (int_64)
	*($8 + [24]) = $6(*($8 + [24]) - $5))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9727])
	CALL eosio_assert(((int_64)*($8 + [24]) < (int_64)4611686018427387904), [9749])
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [10036])
	*($3 + [96]) = (($3 + [48]) + [40])
	*($3 + [92]) = ($3 + [48])
	*($3 + [88]) = ($3 + [48])
	*($3 + [104]) = ($3 + [88])
	*($3 + [116]) = ($8 + [8])
	*($3 + [112]) = $9
	*($3 + [120]) = ($8 + [24])
	CALL $82(($3 + [112]), ($3 + [104]))
	CALL db_update_i64(*($8 + [44]), $7, ($3 + [48]), [40])
	$8 = (($3 + [8]) + [16])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$3 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$2 = *($3 + [32])
	if ( ($2 == 0) ){ goto $label$4 }
	$4 = ($3 + [36])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$8 = ($8 + [-24])
	$0 = *($8)
	*($8) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	CALL _ZdlPv($0)
	
.LABEL $label$8
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$7 }
	$8 = *(($3 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$8 = $2
	
.LABEL $label$5
	*($4) = $2
	CALL _ZdlPv($8)
	
.LABEL $label$4
	$global$0 = ($3 + [128])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [224])
	$global$0 = $2
	$3 = CALL $135([8401])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9278])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [8400]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$4 = ((int_64)$4 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)0
	
.LABEL $label$1
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((int_64)$7 != (int_64)((int_64)$4 | (int_64)4)) ){ goto $label$15 }
	if ( ((int_64)$6 < (int_64)1) ){ goto $label$15 }
	*($2 + [160]) = (int_64)3617214756542218240
	*($2 + [152]) = *($0)
	*($2 + [136]) = [8354]
	*($2 + [140]) = CALL $135([8354])
	*($2 + [8]) = *($2 + [136])
	$8 = CALL $2(($2 + [144]), ($2 + [8]))
	*($2 + [72]) = [8966]
	*($2 + [76]) = CALL $135([8966])
	*($2) = *($2 + [72])
	$9 = CALL $2(($2 + [80]), $2)
	*(($2 + [64])) = [0]
	*($2 + [56]) = (int_64)0
	$3 = CALL $135([9051])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$14 }
	*($2 + [56]) = ($3 << [1])
	$5 = (($2 + [56]) | [1])
	if ( $3 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$3 = CALL $135([8405])
	if ( ($3 <= [8]) ){ goto $label$17 }
	CALL eosio_assert([0], [9278])
	goto $label$16 
	
.LABEL $label$17
	if ( ($3 == 0) ){ goto $label$11 }
	
.LABEL $label$16
	$4 = (int_64)0
	
.LOOP $label$18:
	$5 = *(($3 + [8404]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$19 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$19
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$18 }
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	if ( ((int_64)$6 < (int_64)1) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$14
	$10 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($10)
	*($2 + [56]) = ($10 | [1])
	*($2 + [64]) = $5
	*($2 + [60]) = $3
	
.LABEL $label$13
	CALL memcpy($5, [9051], $3)
	
.LABEL $label$12
	*(($5 + $3)) = [0]
	*(($2 + [112])) = *(($1 + [8]))
	$3 = (($2 + [56]) + [8])
	*(($2 + [128])) = *($3)
	*($3) = [0]
	*($2 + [88]) = *($0)
	*($2 + [96]) = *($9)
	*($2 + [104]) = *($1)
	*($2 + [120]) = *($2 + [56])
	*($2 + [56]) = (int_64)0
	$3 = CALL $34(($2 + [168]), ($2 + [152]), *($8), (int_64)-3617168760277827584, ($2 + [88]))
	CALL $35(($2 + [208]), $3)
	$5 = *($2 + [208])
	CALL send_inline($5, (*($2 + [212]) - $5))
	$5 = *($2 + [208])
	if ( ($5 == 0) ){ goto $label$20 }
	*($2 + [212]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$20
	$5 = *($3 + [28])
	if ( ($5 == 0) ){ goto $label$21 }
	*(($3 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$21
	$5 = *($3 + [16])
	if ( ($5 == 0) ){ goto $label$22 }
	*(($3 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$22
	if ( ((*(($2 + [120])) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($2 + [128])))
	
.LABEL $label$23
	if ( ((*($2 + [56]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($2 + [64])))
	$global$0 = ($2 + [224])
	return (unreachable)
	
.LABEL $label$11
	$4 = (int_64)4
	if ( ((int_64)$6 >= (int_64)1) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $119(($2 + [56]))
	
.LABEL $label$9
	if ( ((int_64)$7 != (int_64)$4) ){ goto $label$8 }
	*($2 + [160]) = (int_64)3617214756542218240
	*($2 + [152]) = *($0)
	*($2 + [40]) = [8388]
	*($2 + [44]) = CALL $135([8388])
	*($2 + [24]) = *($2 + [40])
	$8 = CALL $2(($2 + [48]), ($2 + [24]))
	*($2 + [32]) = [8966]
	*($2 + [36]) = CALL $135([8966])
	*($2 + [16]) = *($2 + [32])
	$9 = CALL $2(($2 + [80]), ($2 + [16]))
	*(($2 + [64])) = [0]
	*($2 + [56]) = (int_64)0
	$3 = CALL $135([9051])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$26 }
	*($2 + [56]) = ($3 << [1])
	$5 = (($2 + [56]) | [1])
	if ( $3 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$10 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($10)
	*($2 + [56]) = ($10 | [1])
	*($2 + [64]) = $5
	*($2 + [60]) = $3
	
.LABEL $label$25
	CALL memcpy($5, [9051], $3)
	
.LABEL $label$24
	*(($5 + $3)) = [0]
	*(($2 + [112])) = *(($1 + [8]))
	$3 = (($2 + [56]) + [8])
	*(($2 + [128])) = *($3)
	*($3) = [0]
	*($2 + [88]) = *($0)
	*($2 + [96]) = *($9)
	*($2 + [104]) = *($1)
	*($2 + [120]) = *($2 + [56])
	*($2 + [56]) = (int_64)0
	$3 = CALL $34(($2 + [168]), ($2 + [152]), *($8), (int_64)-3617168760277827584, ($2 + [88]))
	CALL $35(($2 + [208]), $3)
	$5 = *($2 + [208])
	CALL send_inline($5, (*($2 + [212]) - $5))
	$5 = *($2 + [208])
	if ( ($5 == 0) ){ goto $label$27 }
	*($2 + [212]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$27
	$5 = *($3 + [28])
	if ( ($5 == 0) ){ goto $label$28 }
	*(($3 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$28
	$5 = *($3 + [16])
	if ( ($5 == 0) ){ goto $label$29 }
	*(($3 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$29
	if ( ((*(($2 + [120])) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*(($2 + [128])))
	
.LABEL $label$30
	if ( ((*($2 + [56]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$8
	$global$0 = ($2 + [224])
	return (unreachable)
	
.LABEL $label$7
	CALL $119(($2 + [56]))
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $141($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $85($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9376])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9376])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $92(CALL $91($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $141($0)
	
.LABEL $label$1
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9770])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9770])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($4, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [9770])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($4 + [8]) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $138($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10464])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $138($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $140($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8206])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $119 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9770])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $93(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $28 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $138($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [160]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $29(($4 + [24]), ($4 + [160]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [128]) + [8])) = $3
	*(($6 = (($4 + [144]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [144]) = $7
	*($4 + [128]) = $7
	$3 = *($6)
	*((($4 + [160]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [144])
	*($4 + [40]) = $0
	*($4 + [160]) = $0
	*($4 + [164]) = ($4 + [120])
	*($4 + [160]) = ($4 + [24])
	CALL $30(($4 + [160]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $141($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [176])
	return $2
}

void .FUNC $55 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [128])
	$global$0 = $3
	$4 = [0]
	*((($3 + [8]) + [32])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$5 = *($0)
	*($3 + [8]) = $5
	$6 = *($2 + [8])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [16]) = $7)
	$8 = CALL db_find_i64($5, $7, (int_64)-5859317942822371328, $1)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	$8 = CALL $33(($3 + [8]), $8)
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)($3 + [8])), [9779])
	CALL eosio_assert(((int_64)*(($8 + [32])) == (int_64)$6), [9451])
	$5 = *($2)
	$9 = ((int_64)*($8 + [24]) >= (int_64)$5)
	$4 = [1]
	$2 = $8
	goto $label$1 
	
.LABEL $label$2
	$5 = *($2)
	$8 = [0]
	$2 = [0]
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [9052])
	CALL eosio_assert(((int_64)*(($2 + [32])) == (int_64)$6), [9451])
	if ( ((int_64)*($2 + [24]) != (int_64)$5) ){ goto $label$6 }
	if ( ((int_64)*($2 + [8]) == (int_64)0) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = *($0)
	CALL eosio_assert($4, [9904])
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)($3 + [8])), [9939])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$8()), [9985])
	$1 = *($8)
	CALL eosio_assert(((int_64)$6 == (int_64)*(($8 + [32]))), [9679])
	$6 = (int_64)
	*($8 + [24]) = $6(*($8 + [24]) - $5))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9727])
	CALL eosio_assert(((int_64)*($8 + [24]) < (int_64)4611686018427387904), [9749])
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [10036])
	*($3 + [96]) = (($3 + [48]) + [40])
	*($3 + [92]) = ($3 + [48])
	*($3 + [88]) = ($3 + [48])
	*($3 + [104]) = ($3 + [88])
	*($3 + [116]) = ($8 + [8])
	*($3 + [112]) = $2
	*($3 + [120]) = ($8 + [24])
	CALL $82(($3 + [112]), ($3 + [104]))
	CALL db_update_i64(*($8 + [44]), $7, ($3 + [48]), [40])
	$8 = ($3 + [24])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$7 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$0 = *($3 + [32])
	if ( ($0 == 0) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$8 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($8, [10249])
	CALL eosio_assert($8, [10283])
	$8 = CALL db_next_i64(*($2 + [44]), ($3 + [48]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$8 }
	CALL $33(($3 + [8]), $8)
	
.LABEL $label$8
	CALL $87(($3 + [8]), $2)
	$0 = *($3 + [32])
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = ($3 + [36])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$10 }
	
.LOOP $label$11:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$11 }
	$8 = *(($3 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$8 = $0
	
.LABEL $label$9
	*($4) = $0
	CALL _ZdlPv($8)
	
.LABEL $label$3
	$global$0 = ($3 + [128])
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $0, [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *($0 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [4])
	*($2 + [8]) = *($1)
	*($2 + [20]) = ($4 + [16])
	*($2 + [16]) = $4
	*($2 + [24]) = ($4 + [32])
	CALL $96(($2 + [16]), ($2 + [8]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [9770])
	CALL memcpy($3, *($4 + [4]), [32])
	$5 = (*($4 + [4]) + [32])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[31]), [9770])
	CALL memcpy(($3 + [32]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [9770])
	CALL memcpy($3, *($4 + [4]), [32])
	$5 = (*($4 + [4]) + [32])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[31]), [9770])
	CALL memcpy(($3 + [32]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [16]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9770])
	CALL memcpy(($2 + [16]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [16])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [16]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9770])
	CALL memcpy(($2 + [16]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [16])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [16]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9770])
	CALL memcpy(($2 + [16]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [16])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($4, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [32])
}

void .FUNC $21 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$3 = ($global$0 - [672])
	$global$0 = $3
	CALL require_auth(*($0))
	*((($3 + [312]) + [32])) = [0]
	*($3 + [328]) = (int_64)-1
	*($3 + [336]) = (int_64)0
	$4 = *($0)
	*($3 + [312]) = $4
	*($3 + [320]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)6600267947158011904, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $62(($3 + [312]), $6)
	CALL eosio_assert(((int_32)*($5 + [248]) == (int_32)($3 + [312])), [9779])
	
.LABEL $label$1
	*($3 + [308]) = $5
	*($3 + [304]) = ($3 + [312])
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [8849])
	$7 = ($5 + [128])
	CALL assert_sha256($2, [32], $7)
	$8 = *($0)
	CALL eosio_assert($6, [9904])
	CALL eosio_assert(((int_32)*($5 + [248]) == (int_32)($3 + [312])), [9939])
	CALL eosio_assert(((int_64)*($3 + [312]) == (int_64)CALL $fimport$8()), [9985])
	*(($5 + [160])) = *($2)
	*(($5 + [168])) = *(($2 + [8]))
	*(($5 + [176])) = *(($2 + [16]))
	*(($5 + [184])) = *(($2 + [24]))
	$4 = *($5)
	CALL eosio_assert([1], [10036])
	$9 = (($3 + [352]) + [248])
	*($3 + [264]) = $9
	*($3 + [260]) = ($3 + [352])
	*($3 + [256]) = ($3 + [352])
	*($3 + [200]) = ($3 + [256])
	*($3 + [628]) = ($5 + [8])
	*($3 + [624]) = $5
	*($3 + [632]) = ($5 + [56])
	*($3 + [636]) = ($5 + [64])
	*($3 + [640]) = $7
	*($3 + [644]) = ($5 + [192])
	*($3 + [648]) = ($5 + [208])
	*($3 + [652]) = ($5 + [224])
	*($3 + [656]) = ($5 + [240])
	CALL $69(($3 + [624]), ($3 + [200]))
	CALL db_update_i64(*($5 + [252]), $8, ($3 + [352]), [248])
	$5 = (($3 + [312]) + [16])
	if ( (uint_64)($4 <= *($5)) ){ goto $label$2 }
	*($5) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$5 = *($3 + [308])
	$4 = *($5 + [8])
	$8 = *(($5 + [16]))
	CALL eosio_assert(((int_64)*(($5 + [32])) == (int_64)$8), [9550])
	$4 = ((int_64)$4 + (int_64)*(($5 + [24])))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9593])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [9612])
	CALL eosio_assert(((int_64)$8 == (int_64)*(($5 + [48]))), [9550])
	$10 = ((int_64)*(($5 + [40])) + (int_64)$4)
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [9593])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [9612])
	if ( (CALL is_account(*($5 + [56])) == 0) ){ goto $label$3 }
	CALL eosio_assert([1], [9510])
	CALL eosio_assert([1], [9525])
	if ( ((int_64)$10 < (int_64)400) ){ goto $label$3 }
	$4 = *(*($3 + [308]) + [56])
	*(($3 + [120])) = $8
	*($3 + [296]) = $8
	$11 = ((uint_64)$10 / (uint_64)(int_64)400)
	*($3 + [288]) = $11
	*($3 + [112]) = $11
	CALL $32($0, $4, ($3 + [112]))
	
.LABEL $label$3
	CALL sha256((*($3 + [308]) + [64]), [128], ($3 + [256]))
	$2 = (CASTING uint_32)(uint_64 $8)
	$5 = ($2 & [255])
	if ( ($5 <= [4]) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)[4]) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[5]) ){ goto $label$9 }
	$4 = (int_64)10
	goto $label$8 
	
.LABEL $label$11
	$2 = ([4] - $2)
	$5 = ($2 & [255])
	if ( ($5 == 0) ){ goto $label$7 }
	if ( ((int_32)$5 != (int_32)[1]) ){ goto $label$6 }
	$4 = (int_64)10
	goto $label$5 
	
.LABEL $label$10
	$4 = (int_64)1
	goto $label$8 
	
.LABEL $label$9
	$2 = (($2 + [-4]) & [255])
	$5 = [1]
	$4 = (int_64)10
	
.LOOP $label$12:
	$4 = ((int_64)$4 * (int_64)10)
	$5 = ($5 + [1])
	if ( (($5 & [255]) <= $2) ){ goto $label$12 }
	
.LABEL $label$8
	$4 = ((int_64)$4 * (int_64)100)
	goto $label$4 
	
.LABEL $label$7
	$4 = (int_64)1
	goto $label$5 
	
.LABEL $label$6
	$5 = [1]
	$4 = (int_64)10
	
.LOOP $label$13:
	$4 = ((int_64)$4 * (int_64)10)
	$5 = ($5 + [1])
	if ( (($5 & [255]) <= ($2 & [255])) ){ goto $label$13 }
	
.LABEL $label$5
	$4 = ((uint_64)(int_64)100 / (uint_64)$4)
	
.LABEL $label$4
	$5 = *($3 + [266])
	$2 = *($3 + [286])
	$11 = *($3 + [280])
	CALL eosio_assert([1], [9382])
	$5 = ((int_32)$5 * (int_32)[10])
	$12 = ( uint_32($5 >> [8]) ? [1] : uint_32(($2 | $5) >> [8]) )
	$2 = ((int_32)$2 * (int_32)[10])
	$7 = uint_32($2 >> [8])
	$13 = ((int_64)((int_64)((uint_64)((int_64)$4 * (int_64)(CASTING uint_64)(uint_32 $7)) / (uint_64)(int_64)10) + (int_64)((int_64)(uint_64)((int_64)$11 * (int_64)((uint_64)((int_64)$10 / (int_64)50) / (uint_64)$4)) >> (uint_64)(int_64)8) * (int_64)$4)) + (int_64)((uint_64)((int_64)$4 * (int_64)(CASTING uint_64)(uint_32 $12)) / (uint_64)(int_64)100))
	$4 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$11 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$4 = $11
	$2 = [1]
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$4 = $11
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = ((int_32)$5 < (int_32)[6])
	$6 = ($5 + [1])
	$5 = $6
	if ( $2 ){ goto $label$18 }
	$2 = [1]
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$2 = [0]
	
.LABEL $label$14
	CALL eosio_assert($2, [9431])
	$5 = ($12 & [255])
	if ( ((uint_32)$7 <= (uint_32)$5) ){ goto $label$20 }
	*($3 + [248]) = [8874]
	*($3 + [252]) = CALL $135([8874])
	*($3 + [88]) = *($3 + [248])
	$14 = *(CALL $2(($3 + [352]), ($3 + [88])))
	$5 = *($3 + [308])
	$4 = *($5 + [8])
	CALL __multi3(($3 + [72]), $4, (int_64)$4 >> (int_64)63), (int_64)9, (int_64)0)
	$15 = *(($5 + [16]))
	$4 = *((($3 + [72]) + [8]))
	$11 = *($3 + [72])
	CALL eosio_assert(( (uint_64)($11 <= (int_64)4611686018427387904) ? ((int_64)$4 < (int_64)0) : (int_64)($4 == 0) ), [9630])
	CALL eosio_assert(( ((uint_64)$11 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$4 > (int_64)-1) : ((int_64)$4 == (int_64)-1) ), [9654])
	CALL eosio_assert([1], [9510])
	CALL eosio_assert([1], [9525])
	CALL eosio_assert(((int_64)$15 == (int_64)$8), [9550])
	CALL eosio_assert([1], [9593])
	CALL eosio_assert([1], [9612])
	$4 = ((int_64)$11 / (int_64)5)
	if ( ((int_32)$7 != (int_32)[8]) ){ goto $label$19 }
	if ( ((int_32)$12 != (int_32)[6]) ){ goto $label$19 }
	CALL eosio_assert([1], [9630])
	CALL eosio_assert([1], [9654])
	$4 = ((int_64)$4 << (int_64)1)
	goto $label$19 
	
.LABEL $label$20
	if ( ((uint_32)$7 >= (uint_32)$5) ){ goto $label$21 }
	*($3 + [240]) = [8881]
	*($3 + [244]) = CALL $135([8881])
	*($3 + [96]) = *($3 + [240])
	$14 = *(CALL $2(($3 + [352]), ($3 + [96])))
	$5 = *($3 + [308])
	$4 = *(($5 + [32]))
	$11 = *(($5 + [24]))
	CALL eosio_assert(((int_64)$11 < (int_64)2305843009213693952), [9630])
	CALL eosio_assert(((int_64)$11 > (int_64)-2305843009213693952), [9654])
	CALL eosio_assert(((int_64)$4 == (int_64)$8), [9550])
	$4 = ((int_64)$11 << (int_64)1)
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9593])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [9612])
	if ( ((int_32)$7 != (int_32)[6]) ){ goto $label$19 }
	if ( ((int_32)$12 != (int_32)[8]) ){ goto $label$19 }
	CALL eosio_assert(((int_64)$4 < (int_64)2305843009213693952), [9630])
	CALL eosio_assert(((int_64)$4 > (int_64)-2305843009213693952), [9654])
	$4 = ((int_64)$11 << (int_64)2)
	goto $label$19 
	
.LABEL $label$21
	*($3 + [232]) = [8887]
	*($3 + [236]) = CALL $135([8887])
	*($3 + [104]) = *($3 + [232])
	$14 = *(CALL $2(($3 + [352]), ($3 + [104])))
	$5 = *($3 + [308])
	$4 = *(($5 + [48]))
	$11 = *(($5 + [40]))
	CALL eosio_assert(((int_64)$11 < (int_64)576460752303423488), [9630])
	CALL eosio_assert(((int_64)$11 > (int_64)-576460752303423488), [9654])
	CALL eosio_assert(((int_64)$4 == (int_64)$8), [9550])
	$4 = ((int_64)$11 << (int_64)3)
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9593])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [9612])
	if ( ((int_32)$7 != (int_32)[8]) ){ goto $label$22 }
	if ( ((int_32)$12 != (int_32)[8]) ){ goto $label$22 }
	CALL eosio_assert(((int_64)$4 < (int_64)2305843009213693952), [9630])
	CALL eosio_assert(((int_64)$4 > (int_64)-2305843009213693952), [9654])
	$4 = ((int_64)$11 << (int_64)4)
	
.LABEL $label$22
	$5 = *($3 + [308])
	CALL eosio_assert(((int_64)*(($5 + [16])) == (int_64)$8), [9550])
	$4 = ((int_64)*($5 + [8]) + (int_64)$4)
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9593])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [9612])
	
.LABEL $label$19
	*($3 + [224]) = $8
	CALL eosio_assert([1], [9550])
	$11 = ((int_64)$4 + (int_64)$13)
	*($3 + [216]) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [9593])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [9612])
	*((($3 + [56]) + [8])) = *($3 + [224])
	*($3 + [56]) = *($3 + [216])
	CALL $32($0, $1, ($3 + [56]))
	*((($3 + [40]) + [8])) = $8
	*($3 + [192]) = $8
	*($3 + [40]) = $10
	*($3 + [184]) = $10
	CALL $70(($3 + [200]), $0, ($3 + [40]))
	if ( ((int_64)*($3 + [200]) < (int_64)1) ){ goto $label$23 }
	$11 = *(*($3 + [308]))
	$5 = (($3 + [200]) + [8])
	$10 = *($5)
	*((($3 + [168]) + [8])) = $10
	*((($3 + [24]) + [8])) = $10
	$10 = *($3 + [200])
	*($3 + [168]) = $10
	*($3 + [24]) = $10
	CALL $32($0, $11, ($3 + [24]))
	*($3 + [152]) = [8893]
	*($3 + [156]) = CALL $135([8893])
	*($3 + [16]) = *($3 + [152])
	$2 = CALL $2(($3 + [160]), ($3 + [16]))
	$11 = *($5)
	*((($3 + [136]) + [8])) = $11
	$10 = *($2)
	*(($3 + [8])) = $11
	$11 = *($3 + [200])
	*($3 + [136]) = $11
	*($3) = $11
	CALL $71($0, $10, $3)
	
.LABEL $label$23
	$11 = *($0)
	$5 = *($3 + [308])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9904])
	CALL eosio_assert(((int_32)*($5 + [248]) == (int_32)($3 + [312])), [9939])
	CALL eosio_assert(((int_64)*($3 + [312]) == (int_64)CALL $fimport$8()), [9985])
	*($5 + [192]) = $13
	*(($5 + [200])) = $8
	*($5 + [208]) = $4
	*(($5 + [216])) = $8
	*($5 + [240]) = $14
	*($5 + [224]) = *($3 + [200])
	*(($5 + [232])) = *((($3 + [200]) + [8]))
	$4 = *($5)
	CALL eosio_assert([1], [10036])
	*($3 + [616]) = $9
	*($3 + [612]) = ($3 + [352])
	*($3 + [608]) = ($3 + [352])
	*($3 + [128]) = ($3 + [608])
	*($3 + [628]) = ($5 + [8])
	*($3 + [624]) = $5
	*($3 + [632]) = ($5 + [56])
	*($3 + [636]) = ($5 + [64])
	*($3 + [640]) = ($5 + [128])
	*($3 + [644]) = ($5 + [192])
	*($3 + [648]) = ($5 + [208])
	*($3 + [652]) = ($5 + [224])
	*($3 + [656]) = ($5 + [240])
	CALL $69(($3 + [624]), ($3 + [128]))
	CALL db_update_i64(*($5 + [252]), $11, ($3 + [352]), [248])
	$5 = ($3 + [328])
	if ( (uint_64)($4 <= *($5)) ){ goto $label$24 }
	*($5) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$24
	*(($6 = ($3 + [384]))) = [0]
	*($3 + [368]) = (int_64)-1
	*($3 + [376]) = (int_64)0
	$4 = *($0)
	*($3 + [352]) = $4
	*($3 + [360]) = $4
	*($3 + [132]) = ($3 + [304])
	*($3 + [128]) = ($3 + [352])
	*($3 + [608]) = $4
	CALL eosio_assert(((int_64)$4 == (int_64)CALL $fimport$8()), [9853])
	*($3 + [628]) = ($3 + [128])
	*($3 + [624]) = ($3 + [352])
	*($3 + [632]) = ($3 + [608])
	*(($5 = CALL _Znwj([288])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [208]) = (int_64)0
	*($5 + [216]) = (int_64)0
	*($5 + [224]) = (int_64)0
	*($5 + [232]) = (int_64)0
	*($5 + [240]) = (int_64)0
	*($5 + [248]) = (int_64)0
	*($5 + [256]) = (int_64)0
	*($5 + [276]) = ($3 + [352])
	CALL $72(($3 + [624]), $5)
	*($3 + [664]) = $5
	$4 = *($5)
	*($3 + [624]) = $4
	$0 = *($5 + [280])
	*($3 + [660]) = $0
	$7 = ($3 + [380])
	$2 = *($7)
	if ( ((uint_32)$2 >= (uint_32)*($6)) ){ goto $label$27 }
	*($2 + [8]) = $4
	*($2 + [16]) = $0
	*($3 + [664]) = [0]
	*($2) = $5
	*($7) = ($2 + [24])
	$2 = *($3 + [664])
	$5 = [0]
	*($3 + [664]) = [0]
	if ( $2 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	CALL $73(($3 + [376]), ($3 + [664]), ($3 + [624]), ($3 + [660]))
	$2 = *($3 + [664])
	$5 = [0]
	*($3 + [664]) = [0]
	if ( ($2 == 0) ){ goto $label$25 }
	
.LABEL $label$26
	CALL _ZdlPv($2)
	
.LABEL $label$25
	$4 = *($3 + [304])
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$6 = ((int_32)$2) != (int_32)$5
	CALL eosio_assert($6), [10249])
	CALL eosio_assert($6, [10283])
	$6 = CALL db_next_i64(*($2 + [252]), ($3 + [624]))
	if ( ((int_32)$6 < (int_32)$5) ){ goto $label$28 }
	CALL $62((CASTING uint_32)(uint_64 $4), $6)
	
.LABEL $label$28
	CALL $74(($3 + [312]), $2)
	$6 = *($3 + [376])
	if ( ($6 == 0) ){ goto $label$29 }
	$0 = ($3 + [380])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$31 }
	
.LOOP $label$32:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$33 }
	CALL _ZdlPv($2)
	
.LABEL $label$33
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$32 }
	$5 = *(($3 + [376]))
	goto $label$30 
	
.LABEL $label$31
	$5 = $6
	
.LABEL $label$30
	*($0) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$29
	$6 = *($3 + [336])
	if ( ($6 == 0) ){ goto $label$34 }
	$0 = ($3 + [340])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$36 }
	
.LOOP $label$37:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$38 }
	CALL _ZdlPv($2)
	
.LABEL $label$38
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$37 }
	$5 = *(($3 + [336]))
	goto $label$35 
	
.LABEL $label$36
	$5 = $6
	
.LABEL $label$35
	*($0) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$34
	$global$0 = ($3 + [672])
}

int_32 .FUNC $20 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $138($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [84 align=4]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [128]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $41(($4 + [24]), ($4 + [128]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [96]) + [8])) = $3
	*(($8 = (($4 + [112]) + [8]))) = $3
	$9 = *($4 + [8])
	*($4 + [112]) = $9
	*($4 + [96]) = $9
	$3 = *($8)
	*((($4 + [128]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$8 = *($4 + [88])
	$10 = *($4 + [84])
	$11 = *($4 + [80])
	$0 = *($4 + [72])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ((int_32)($11 & [255]) != (int_32)[0])), (int_32 $10), (int_32 $8), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $141($2)
	
.LABEL $label$5
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $23 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [352])
	$global$0 = $3
	CALL require_auth($1)
	$4 = [0]
	*(($3 + [328])) = [0]
	*($3 + [312]) = (int_64)-1
	*($3 + [320]) = (int_64)0
	$5 = *($0)
	*($3 + [296]) = $5
	*($3 + [304]) = $2
	$6 = CALL db_find_i64($5, $2, (int_64)-5859317942822371328, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $33(($3 + [296]), $6)
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)($3 + [296])), [9779])
	$6 = ((int_32)(CASTING uint_32)(uint_64 (uint_64)*($4 + [8]) >> (uint_64)(int_64)63)) ^ (int_32)[1])
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8414])
	$6 = CALL $135([8401])
	if ( ($6 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9278])
	goto $label$5 
	
.LABEL $label$6
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$2 = (int_64)0
	
.LOOP $label$7:
	$7 = *(($6 + [8400]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$8
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$7 }
	$2 = ((int_64)$2 << (int_64)8)
	goto $label$3 
	
.LABEL $label$4
	$2 = (int_64)0
	
.LABEL $label$3
	if ( ((int_64)*(($4 + [16])) != (int_64)((int_64)$2 | (int_64)4)) ){ goto $label$17 }
	*($3 + [248]) = (int_64)3617214756542218240
	*($3 + [240]) = *($0)
	*($3 + [224]) = [8354]
	*($3 + [228]) = CALL $135([8354])
	*($3 + [24]) = *($3 + [224])
	$8 = CALL $2(($3 + [232]), ($3 + [24]))
	*((($3 + [160]) + [8])) = [0]
	*($3 + [160]) = (int_64)0
	$6 = CALL $135([8432])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$12 }
	$7 = ($4 + [8])
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$16 }
	*($3 + [160]) = ($6 << [1])
	$4 = (($3 + [160]) | [1])
	if ( $6 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$6 = CALL $135([8405])
	if ( ($6 <= [8]) ){ goto $label$19 }
	CALL eosio_assert([0], [9278])
	goto $label$18 
	
.LABEL $label$19
	if ( ($6 == 0) ){ goto $label$13 }
	
.LABEL $label$18
	$2 = (int_64)0
	
.LOOP $label$20:
	$7 = *(($6 + [8404]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$21 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$21
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$20 }
	$2 = ((int_64)$2 << (int_64)8)
	goto $label$11 
	
.LABEL $label$16
	$9 = (($6 + [16]) & [-16])
	$4 = CALL _Znwj($9)
	*($3 + [160]) = ($9 | [1])
	*($3 + [168]) = $4
	*($3 + [164]) = $6
	
.LABEL $label$15
	CALL memcpy($4, [8432], $6)
	
.LABEL $label$14
	*(($4 + $6)) = [0]
	*($3 + [184]) = $1
	$2 = *(($7 + [8]))
	$5 = *($7)
	$6 = (($3 + [160]) + [8])
	*(($3 + [216])) = *($6)
	*($6) = [0]
	*(($3 + [200])) = $2
	*($3 + [176]) = *($0)
	$2 = *($3 + [160])
	*($3 + [160]) = (int_64)0
	*($3 + [208]) = $2
	*($3 + [192]) = $5
	$6 = CALL $34(($3 + [256]), ($3 + [240]), *($8), (int_64)-3617168760277827584, ($3 + [176]))
	CALL $35(($3 + [336]), $6)
	$4 = *($3 + [336])
	CALL send_inline($4, (*($3 + [340]) - $4))
	$4 = *($3 + [336])
	if ( ($4 == 0) ){ goto $label$22 }
	*($3 + [340]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$22
	$4 = *($6 + [28])
	if ( ($4 == 0) ){ goto $label$23 }
	*(($6 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$23
	$4 = *($6 + [16])
	if ( ($4 == 0) ){ goto $label$24 }
	*(($6 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$24
	if ( ((*(($3 + [208])) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($3 + [216])))
	
.LABEL $label$25
	if ( ((*($3 + [160]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($3 + [168])))
	
.LABEL $label$26
	$5 = *(($7 + [8]))
	*((($3 + [144]) + [8])) = $5
	$2 = *($7)
	*((($3 + [8]) + [8])) = $5
	*($3 + [8]) = $2
	*($3 + [144]) = $2
	CALL $36($0, $1, ($3 + [8]))
	$4 = *($3 + [320])
	if ( $4 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$13
	$2 = (int_64)0
	goto $label$11 
	
.LABEL $label$12
	CALL $119(($3 + [160]))
	
.LABEL $label$11
	if ( ((int_64)*(($4 + [16])) != (int_64)((int_64)$2 | (int_64)4)) ){ goto $label$38 }
	*($3 + [248]) = (int_64)3617214756542218240
	*($3 + [240]) = *($0)
	*($3 + [128]) = [8388]
	*($3 + [132]) = CALL $135([8388])
	*($3 + [48]) = *($3 + [128])
	$8 = CALL $2(($3 + [136]), ($3 + [48]))
	*((($3 + [160]) + [8])) = [0]
	*($3 + [160]) = (int_64)0
	$6 = CALL $135([8432])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$33 }
	$7 = ($4 + [8])
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$37 }
	*($3 + [160]) = ($6 << [1])
	$4 = (($3 + [160]) | [1])
	if ( $6 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$6 = CALL $135([8409])
	if ( ($6 <= [8]) ){ goto $label$40 }
	CALL eosio_assert([0], [9278])
	goto $label$39 
	
.LABEL $label$40
	if ( ($6 == 0) ){ goto $label$34 }
	
.LABEL $label$39
	$2 = (int_64)0
	
.LOOP $label$41:
	$7 = *(($6 + [8408]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$42 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$42
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$41 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)8)
	goto $label$32 
	
.LABEL $label$37
	$9 = (($6 + [16]) & [-16])
	$4 = CALL _Znwj($9)
	*($3 + [160]) = ($9 | [1])
	*($3 + [168]) = $4
	*($3 + [164]) = $6
	
.LABEL $label$36
	CALL memcpy($4, [8432], $6)
	
.LABEL $label$35
	*(($4 + $6)) = [0]
	*($3 + [184]) = $1
	$2 = *(($7 + [8]))
	$5 = *($7)
	$6 = (($3 + [160]) + [8])
	*(($3 + [216])) = *($6)
	*($6) = [0]
	*(($3 + [200])) = $2
	*($3 + [176]) = *($0)
	$2 = *($3 + [160])
	*($3 + [160]) = (int_64)0
	*($3 + [208]) = $2
	*($3 + [192]) = $5
	$6 = CALL $34(($3 + [256]), ($3 + [240]), *($8), (int_64)-3617168760277827584, ($3 + [176]))
	CALL $35(($3 + [336]), $6)
	$4 = *($3 + [336])
	CALL send_inline($4, (*($3 + [340]) - $4))
	$4 = *($3 + [336])
	if ( ($4 == 0) ){ goto $label$43 }
	*($3 + [340]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$43
	$4 = *($6 + [28])
	if ( ($4 == 0) ){ goto $label$44 }
	*(($6 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$44
	$4 = *($6 + [16])
	if ( ($4 == 0) ){ goto $label$45 }
	*(($6 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$45
	if ( ((*(($3 + [208])) & [1]) == 0) ){ goto $label$46 }
	CALL _ZdlPv(*(($3 + [216])))
	
.LABEL $label$46
	if ( ((*($3 + [160]) & [1]) == 0) ){ goto $label$47 }
	CALL _ZdlPv(*(($3 + [168])))
	
.LABEL $label$47
	$5 = *(($7 + [8]))
	*((($3 + [112]) + [8])) = $5
	$2 = *($7)
	*((($3 + [32]) + [8])) = $5
	*($3 + [32]) = $2
	*($3 + [112]) = $2
	CALL $36($0, $1, ($3 + [32]))
	goto $label$31 
	
.LABEL $label$34
	$2 = (int_64)8
	goto $label$32 
	
.LABEL $label$33
	CALL $119(($3 + [160]))
	
.LABEL $label$32
	if ( ((int_64)*(($4 + [16])) != (int_64)$2) ){ goto $label$31 }
	*($3 + [248]) = (int_64)3617214756542218240
	*($3 + [240]) = *($0)
	*($3 + [96]) = [8375]
	*($3 + [100]) = CALL $135([8375])
	*($3 + [72]) = *($3 + [96])
	$8 = CALL $2(($3 + [104]), ($3 + [72]))
	*((($3 + [160]) + [8])) = [0]
	*($3 + [160]) = (int_64)0
	$6 = CALL $135([8432])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$27 }
	$7 = ($4 + [8])
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$30 }
	*($3 + [160]) = ($6 << [1])
	$4 = (($3 + [160]) | [1])
	if ( $6 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$4 = *($3 + [320])
	if ( ($4 == 0) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$30
	$9 = (($6 + [16]) & [-16])
	$4 = CALL _Znwj($9)
	*($3 + [160]) = ($9 | [1])
	*($3 + [168]) = $4
	*($3 + [164]) = $6
	
.LABEL $label$29
	CALL memcpy($4, [8432], $6)
	
.LABEL $label$28
	*(($4 + $6)) = [0]
	*($3 + [184]) = $1
	$2 = *(($7 + [8]))
	$5 = *($7)
	$6 = (($3 + [160]) + [8])
	*(($3 + [216])) = *($6)
	*($6) = [0]
	*(($3 + [200])) = $2
	*($3 + [176]) = *($0)
	$2 = *($3 + [160])
	*($3 + [160]) = (int_64)0
	*($3 + [208]) = $2
	*($3 + [192]) = $5
	$6 = CALL $34(($3 + [256]), ($3 + [240]), *($8), (int_64)-3617168760277827584, ($3 + [176]))
	CALL $35(($3 + [336]), $6)
	$4 = *($3 + [336])
	CALL send_inline($4, (*($3 + [340]) - $4))
	$4 = *($3 + [336])
	if ( ($4 == 0) ){ goto $label$48 }
	*($3 + [340]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$48
	$4 = *($6 + [28])
	if ( ($4 == 0) ){ goto $label$49 }
	*(($6 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$49
	$4 = *($6 + [16])
	if ( ($4 == 0) ){ goto $label$50 }
	*(($6 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$50
	if ( ((*(($3 + [208])) & [1]) == 0) ){ goto $label$51 }
	CALL _ZdlPv(*(($3 + [216])))
	
.LABEL $label$51
	if ( ((*($3 + [160]) & [1]) == 0) ){ goto $label$52 }
	CALL _ZdlPv(*(($3 + [168])))
	
.LABEL $label$52
	$5 = *(($7 + [8]))
	*((($3 + [80]) + [8])) = $5
	$2 = *($7)
	*((($3 + [56]) + [8])) = $5
	*($3 + [56]) = $2
	*($3 + [80]) = $2
	CALL $36($0, $1, ($3 + [56]))
	$4 = *($3 + [320])
	if ( $4 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$27
	CALL $119(($3 + [160]))
	
.LABEL $label$10
	$0 = ($3 + [324])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$54 }
	
.LOOP $label$55:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$56 }
	CALL _ZdlPv($7)
	
.LABEL $label$56
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$55 }
	$6 = *(($3 + [320]))
	goto $label$53 
	
.LABEL $label$54
	$6 = $4
	
.LABEL $label$53
	*($0) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$9
	$global$0 = ($3 + [352])
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $22 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $138($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [32]) + [40]))) = (int_64)0
	*(($8 = (($4 + [32]) + [32]))) = (int_64)0
	*(($9 = (($4 + [32]) + [24]))) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9770])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((uint_32)($7 + [-8]) > (uint_32)[31]), [9770])
	CALL memcpy((($4 + [32]) + [16]), ($2 + [8]), [32])
	*(($4 + [20])) = ($2 + [40])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*(($10 = (($4 + [80]) + [16]))) = *($8)
	*(($8 = (($4 + [80]) + [24]))) = *($3)
	*($4 + [80]) = *($4 + [48])
	*($4 + [88]) = *($9)
	$0 = *($4 + [32])
	*((($4 + [112]) + [24])) = *($8)
	*((($4 + [112]) + [16])) = *($10)
	*($4 + [120]) = *($4 + [88])
	*($4 + [112]) = *($4 + [80])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 ($4 + [112])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $141($2)
	
.LABEL $label$6
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $25 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [160])
	$global$0 = $2
	CALL require_auth($1)
	$3 = CALL current_time()
	$4 = [0]
	*(($2 + [72])) = [0]
	*($2 + [56]) = (int_64)-1
	*($2 + [64]) = (int_64)0
	$5 = *($0)
	*($2 + [40]) = $5
	*($2 + [48]) = $5
	$6 = (CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000))
	$7 = ($6 - ((uint_32)($6 + [28800]) % (uint_32)[86400]))
	$6 = CALL db_find_i64($5, $5, (int_64)6761209613623754752, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $58(($2 + [40]), $6)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($2 + [40])), [9779])
	$6 = ((int_32)*($4 + [8]) != (int_32)$7)
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	$8 = [1]
	$6 = [1]
	
.LABEL $label$1
	CALL eosio_assert($6, [9030])
	$6 = CALL $135([8405])
	if ( ($6 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9278])
	goto $label$5 
	
.LABEL $label$6
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$5 = (int_64)0
	
.LOOP $label$7:
	$9 = *(($6 + [8404]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$8
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$7 }
	$10 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$3 
	
.LABEL $label$4
	$10 = (int_64)4
	
.LABEL $label$3
	CALL eosio_assert([1], [9382])
	$5 = (uint_64)$10 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$5 = $3
	$9 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$5 = $3
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $9 ){ goto $label$13 }
	$9 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$9 = [0]
	
.LABEL $label$9
	CALL eosio_assert($9, [9431])
	*((($2 + [8]) + [8])) = $10
	*($2 + [32]) = $10
	*($2 + [8]) = (int_64)180000
	*($2 + [24]) = (int_64)180000
	CALL $32($0, $1, ($2 + [8]))
	if ( ($8 == 0) ){ goto $label$19 }
	CALL eosio_assert(((int_64)*($2 + [40]) == (int_64)CALL $fimport$8()), [9853])
	*(($6 = CALL _Znwj([48])) + [32]) = ($2 + [40])
	*($6 + [8]) = $7
	*($6) = $1
	*($6 + [16]) = (int_64)180000
	*($6 + [24]) = $10
	*($2 + [128]) = (($2 + [80]) + [28])
	*($2 + [124]) = ($2 + [80])
	*($2 + [120]) = ($2 + [80])
	*($2 + [136]) = ($2 + [120])
	*($2 + [148]) = ($6 + [8])
	*($2 + [144]) = $6
	*($2 + [152]) = ($6 + [16])
	CALL $59(($2 + [144]), ($2 + [136]))
	$5 = *($6)
	$11 = CALL db_store_i64(*((($2 + [40]) + [8])), (int_64)6761209613623754752, $1, $5, ($2 + [80]), [28])
	*($6 + [36]) = $11
	$9 = (($2 + [40]) + [16])
	if ( (uint_64)($5 <= *($9)) ){ goto $label$20 }
	*($9) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	*($2 + [144]) = $6
	$5 = *($6)
	*($2 + [80]) = $5
	*($2 + [120]) = $11
	$9 = *((($2 + [40]) + [28]))
	if ( ((uint_32)$9 >= (uint_32)*(($2 + [72]))) ){ goto $label$18 }
	*($9 + [8]) = $5
	*($9 + [16]) = $11
	*($2 + [144]) = [0]
	*($9) = $6
	*(($2 + [68])) = ($9 + [24])
	$6 = *($2 + [144])
	*($2 + [144]) = [0]
	if ( $6 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	CALL eosio_assert([1], [9904])
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($2 + [40])), [9939])
	CALL eosio_assert(((int_64)*($2 + [40]) == (int_64)CALL $fimport$8()), [9985])
	*($4 + [8]) = $7
	*($4 + [16]) = (int_64)180000
	*(($4 + [24])) = $10
	$5 = *($4)
	CALL eosio_assert([1], [10036])
	*($2 + [128]) = (($2 + [80]) + [28])
	*($2 + [124]) = ($2 + [80])
	*($2 + [120]) = ($2 + [80])
	*($2 + [136]) = ($2 + [120])
	*($2 + [148]) = ($4 + [8])
	*($2 + [144]) = $4
	*($2 + [152]) = ($4 + [16])
	CALL $59(($2 + [144]), ($2 + [136]))
	CALL db_update_i64(*($4 + [36]), $1, ($2 + [80]), [28])
	$6 = (($2 + [40]) + [16])
	if ( (uint_64)($5 <= *($6)) ){ goto $label$16 }
	*($6) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$11 = *($2 + [64])
	if ( $11 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	CALL $60(($2 + [64]), ($2 + [144]), ($2 + [80]), ($2 + [120]))
	$6 = *($2 + [144])
	*($2 + [144]) = [0]
	if ( ($6 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv($6)
	
.LABEL $label$16
	$11 = *($2 + [64])
	if ( ($11 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$4 = ($2 + [68])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$22 }
	
.LOOP $label$23:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$24 }
	CALL _ZdlPv($9)
	
.LABEL $label$24
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$23 }
	$6 = *(($2 + [64]))
	goto $label$21 
	
.LABEL $label$22
	$6 = $11
	
.LABEL $label$21
	*($4) = $11
	CALL _ZdlPv($6)
	$global$0 = ($2 + [160])
	return 
	
.LABEL $label$14
	$global$0 = ($2 + [160])
}

int_32 .FUNC $24 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $138($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9770])
	CALL memcpy(($4 + [32]), $2, [8])
	*($4) = (int_64)0
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9770])
	CALL memcpy($4, ($2 + [8]), [8])
	$8 = *($4)
	*($4 + [40]) = $8
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $8), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $141($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $27 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [192])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	*($5 + [176]) = [8388]
	*($5 + [180]) = CALL $135([8388])
	*($5 + [80]) = *($5 + [176])
	if ( ((int_64)*(CALL $2(($5 + [184]), ($5 + [80]))) == (int_64)$1) ){ goto $label$1 }
	*($5 + [160]) = [8375]
	*($5 + [164]) = CALL $135([8375])
	*($5 + [72]) = *($5 + [160])
	if ( ((int_64)*(CALL $2(($5 + [168]), ($5 + [72]))) == (int_64)$1) ){ goto $label$1 }
	$7 = CALL $135([8401])
	if ( ($7 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [9278])
	goto $label$4 
	
.LABEL $label$5
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = (int_64)0
	
.LOOP $label$6:
	$8 = *(($7 + [8400]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$7
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$6 }
	$2 = ((int_64)$2 << (int_64)8)
	goto $label$2 
	
.LABEL $label$3
	$2 = (int_64)0
	
.LABEL $label$2
	[0]
	$6 = *($3 + [8])
	if ( ((int_64)$6 != (int_64)((int_64)$2 | (int_64)4)) ){ goto $label$9 }
	*($5 + [152]) = [8354]
	*($5 + [156]) = CALL $135([8354])
	*($5 + [64]) = *($5 + [152])
	$7 = CALL $2(($5 + [184]), ($5 + [64]))
	[1]
	if ( ((int_64)*($0 + [8]) == (int_64)*($7)) ){ goto $label$8 }
	
.LABEL $label$9
	$7 = CALL $135([8405])
	if ( ($7 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [9278])
	goto $label$13 
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$2 = (int_64)0
	
.LOOP $label$15:
	$8 = *(($7 + [8404]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$16
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$15 }
	[0]
	if ( ((int_64)$6 != (int_64)((int_64)((int_64)$2 << (int_64)8) | (int_64)4)) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	[0]
	if ( ((int_64)$6 != (int_64)4) ){ goto $label$10 }
	
.LABEL $label$11
	*($5 + [144]) = [8388]
	*($5 + [148]) = CALL $135([8388])
	*($5 + [56]) = *($5 + [144])
	$7 = CALL $2(($5 + [168]), ($5 + [56]))
	[1]
	if ( ((int_64)*($0 + [8]) == (int_64)*($7)) ){ goto $label$8 }
	
.LABEL $label$10
	$7 = CALL $135([8409])
	if ( ($7 <= [8]) ){ goto $label$21 }
	CALL eosio_assert([0], [9278])
	goto $label$20 
	
.LABEL $label$21
	if ( ($7 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$2 = (int_64)0
	
.LOOP $label$22:
	$8 = *(($7 + [8408]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$23 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$23
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$22 }
	if ( ((int_64)$6 != (int_64)((int_64)((int_64)$2 << (int_64)8) | (int_64)8)) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	if ( ((int_64)$6 == (int_64)8) ){ goto $label$17 }
	
.LABEL $label$18
	if ( ([0] == 0) ){ goto $label$1 }
	goto $label$8 
	
.LABEL $label$17
	*($5 + [128]) = [8375]
	*($5 + [132]) = CALL $135([8375])
	*($5 + [48]) = *($5 + [128])
	$7 = CALL $2(($5 + [136]), ($5 + [48]))
	if ( ((int_64)*($0 + [8]) != (int_64)*($7)) ){ goto $label$1 }
	
.LABEL $label$8
	$7 = CALL $135([8401])
	if ( ($7 <= [8]) ){ goto $label$28 }
	CALL eosio_assert([0], [9278])
	goto $label$27 
	
.LABEL $label$28
	if ( ($7 == 0) ){ goto $label$26 }
	
.LABEL $label$27
	$2 = (int_64)0
	
.LOOP $label$29:
	$8 = *(($7 + [8400]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$30 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$30
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$29 }
	if ( ((int_64)$6 != (int_64)((int_64)((int_64)$2 << (int_64)8) | (int_64)4)) ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$26
	if ( ((int_64)$6 != (int_64)4) ){ goto $label$24 }
	
.LABEL $label$25
	*($5 + [120]) = [8354]
	*($5 + [124]) = CALL $135([8354])
	*($5 + [40]) = *($5 + [120])
	$7 = CALL $2(($5 + [136]), ($5 + [40]))
	if ( ((int_64)*($0 + [8]) != (int_64)*($7)) ){ goto $label$24 }
	$6 = *(($3 + [8]))
	*((($5 + [104]) + [8])) = $6
	$2 = *($3)
	*((($5 + [24]) + [8])) = $6
	*($5 + [104]) = $2
	*($5 + [24]) = $2
	CALL $31($0, $1, ($5 + [24]))
	
.LABEL $label$24
	$6 = *(($3 + [8]))
	*((($5 + [88]) + [8])) = $6
	$2 = *($3)
	*((($5 + [8]) + [8])) = $6
	*($5 + [88]) = $2
	*($5 + [8]) = $2
	CALL $32($0, $1, ($5 + [8]))
	
.LABEL $label$1
	$global$0 = ($5 + [192])
}

int_32 .FUNC $26 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $138($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9770])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $141($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9770])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($0, *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [9770])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $135 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [4])
	*($2 + [8]) = *($1)
	*($2 + [20]) = ($4 + [16])
	*($2 + [16]) = $4
	*($2 + [24]) = ($4 + [32])
	CALL $107(($2 + [16]), ($2 + [8]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [9376])
	CALL memcpy(*($4 + [4]), $3, [32])
	$5 = (*($4 + [4]) + [32])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[31]), [9376])
	CALL memcpy(*($4 + [4]), ($3 + [32]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [9376])
	CALL memcpy(*($4 + [4]), $3, [32])
	$5 = (*($4 + [4]) + [32])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[31]), [9376])
	CALL memcpy(*($4 + [4]), ($3 + [32]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [16]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), ($2 + [16]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [16]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), ($2 + [16]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [16]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), ($2 + [16]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($0 + [4]), $4, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [32])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[56])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[76695845]) ){ goto $label$2 }
	$6 = [76695844]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[56])
	if ( ((uint_32)$7 > (uint_32)[38347921]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[56]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	*(($4 = ($5 + ((int_32)$4 * (int_32)[56])))) = *($1)
	*(($4 + [48])) = *(($1 + [48]))
	*(($4 + [40])) = *(($1 + [40]))
	*(($4 + [32])) = *(($1 + [32]))
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 + ((int_32)((int_32)$1 / (int_32)[-56]) * (int_32)[56]))
	$6 = ($5 + ((int_32)$6 * (int_32)[56]))
	$4 = ($4 + [56])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	*($1) = *(*($5))
	$6 = *($5 + [8])
	$7 = *($5 + [4])
	*(($1 + [48])) = *(($7 + [40]))
	*(($1 + [40])) = *(($7 + [32]))
	*(($1 + [32])) = *(($7 + [24]))
	*(($1 + [24])) = *(($7 + [16]))
	*(($1 + [16])) = *(($7 + [8]))
	*($1 + [8]) = *($7)
	if ( (CALL is_account(*(*($5 + [12]))) == 0) ){ goto $label$1 }
	$7 = *(($5 + [12]))
	$8 = *($7)
	if ( ((int_64)$8 == (int_64)*(*($5))) ){ goto $label$1 }
	if ( ((int_64)$8 == (int_64)*($6)) ){ goto $label$1 }
	*($3 + [16]) = [8966]
	*($3 + [20]) = CALL $135([8966])
	*($3 + [8]) = *($3 + [16])
	$6 = CALL $2(($3 + [40]), ($3 + [8]))
	if ( ((int_64)*($7) == (int_64)*($6)) ){ goto $label$1 }
	*($1 + [56]) = *(*(($5 + [12])))
	
.LABEL $label$1
	$9 = ($1 + [8])
	$7 = *($5 + [16])
	*(($1 + [96])) = *($7)
	*(($1 + [120])) = *(($7 + [24]))
	*(($1 + [112])) = *(($7 + [16]))
	*(($1 + [104])) = *(($7 + [8]))
	$7 = *($5 + [20])
	*($1 + [64]) = *($7)
	*(($1 + [88])) = *(($7 + [24]))
	*(($1 + [80])) = *(($7 + [16]))
	*(($1 + [72])) = *(($7 + [8]))
	$7 = *(*($5 + [24]) + [4])
	*($1 + [128]) = *($7 + [16])
	*(($1 + [152])) = *(($7 + [40]))
	*(($1 + [144])) = *(($7 + [32]))
	*(($1 + [136])) = *(($7 + [24]))
	CALL memset(($1 + [160]), [0], [32])
	$10 = *(*($5 + [28]) + [8])
	CALL eosio_assert([1], [9382])
	$11 = ($1 + [128])
	$12 = ($1 + [64])
	$8 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$13 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$8 = $13
	$6 = [1]
	$14 = $7
	$7 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$8 = $13
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$14 = ($7 + [1])
	$7 = $14
	if ( $6 ){ goto $label$6 }
	$6 = [1]
	$7 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$6 = [0]
	
.LABEL $label$2
	CALL eosio_assert($6, [9431])
	*(($1 + [200])) = $10
	*($1 + [192]) = (int_64)0
	$10 = *(*(($5 + [28])) + [8])
	CALL eosio_assert([1], [9382])
	$8 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$13 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$8 = $13
	$6 = [1]
	$14 = $7
	$7 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$8 = $13
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$14 = ($7 + [1])
	$7 = $14
	if ( $6 ){ goto $label$11 }
	$6 = [1]
	$7 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [9431])
	*(($1 + [216])) = $10
	*($1 + [208]) = (int_64)0
	$7 = CALL $135([8405])
	if ( ($7 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [9278])
	goto $label$14 
	
.LABEL $label$15
	if ( ($7 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$8 = (int_64)0
	
.LOOP $label$16:
	$6 = *(($7 + [8404]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$17
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$16 }
	$10 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$10 = (int_64)4
	
.LABEL $label$12
	CALL eosio_assert([1], [9382])
	$8 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$13 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$8 = $13
	$6 = [1]
	$14 = $7
	$7 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$8 = $13
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$14 = ($7 + [1])
	$7 = $14
	if ( $6 ){ goto $label$22 }
	$6 = [1]
	$7 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$6 = [0]
	
.LABEL $label$18
	CALL eosio_assert($6, [9431])
	*(($1 + [232])) = $10
	*($1 + [224]) = (int_64)0
	$6 = $2
	$7 = ($6 + [-256])
	$global$0 = $7
	*($3 + [20]) = $7
	*($3 + [16]) = $7
	*($3 + [24]) = ($6 + [-8])
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = $9
	*($3 + [40]) = $1
	*($3 + [48]) = ($1 + [56])
	*($3 + [52]) = $12
	*($3 + [56]) = $11
	*($3 + [60]) = ($1 + [192])
	*($3 + [64]) = ($1 + [208])
	*($3 + [68]) = ($1 + [224])
	*($3 + [72]) = ($1 + [240])
	CALL $69(($3 + [40]), ($3 + [32]))
	$8 = *($1)
	*($1 + [252]) = CALL db_store_i64(*($4 + [8]), (int_64)6600267947158011904, *(*($0 + [8])), $8, $7, [248])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$23 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	$global$0 = ($3 + [80])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)7975479850326556672, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $63($6, $8)
	*($3 + [12]) = [0]
	*($3 + [8]) = $6
	$7 = *(*(CALL $105(($3 + [8])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [10095])
	*($1) = *(($6 + [16]))
	$6 = *($5 + [4])
	*($1 + [16]) = *($6)
	*(($1 + [40])) = *(($6 + [24]))
	*(($1 + [32])) = *(($6 + [16]))
	*(($1 + [24])) = *(($6 + [8]))
	$2 = $2
	$6 = ($2 + [-48])
	$global$0 = $6
	CALL eosio_assert([1], [9376])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [9376])
	CALL memcpy(($2 + [-40]), ($1 + [16]), [32])
	$7 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($4 + [8]), (int_64)7975479850326556672, *(*($0 + [8])), $7, $6, [40])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [10313])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [10358])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10408])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($2 + [8]) = *($1)
	*($2 + [20]) = ($4 + [32])
	*($2 + [16]) = ($4 + [16])
	*($2 + [24]) = ($4 + [48])
	CALL $96(($2 + [16]), ($2 + [8]))
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[31]), [9770])
	CALL memcpy(($4 + [64]), *($1 + [4]), [32])
	*($1 + [4]) = (*($1 + [4]) + [32])
	$global$0 = ($2 + [32])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9830])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $138($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([64])) + [48]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9770])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((uint_32)($4 + [-8]) > (uint_32)[31]), [9770])
	CALL memcpy(($5 + [16]), ($2 + [8]), [32])
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $68(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $141($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9830])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $138($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([272])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [192]) = (int_64)0
	*($5 + [200]) = (int_64)0
	*($5 + [208]) = (int_64)0
	*($5 + [216]) = (int_64)0
	*($5 + [224]) = (int_64)0
	*($5 + [232]) = (int_64)0
	*($5 + [240]) = (int_64)0
	*($5 + [248]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [56])
	*($3 + [52]) = ($5 + [64])
	*($3 + [56]) = ($5 + [128])
	*($3 + [60]) = ($5 + [192])
	*($3 + [64]) = ($5 + [208])
	*($3 + [68]) = ($5 + [224])
	*($3 + [72]) = ($5 + [240])
	CALL $106(($3 + [40]), ($3 + [32]))
	*($5 + [252]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $65(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $141($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[56]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[56])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[76695845]) ){ goto $label$2 }
	$6 = [76695844]
	$2 = ((int_32)($2 - $4) / (int_32)[56])
	if ( ((uint_32)$2 > (uint_32)[38347921]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[56]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	*(($6 + [40])) = (int_64)0
	$6 = ($6 + [56])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[56]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$6 * (int_32)[56]))
	$3 = ($2 + ((int_32)$3 * (int_32)[56]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	*(($6 + [40])) = (int_64)0
	$6 = ($6 + [56])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$5 = ($3 + ((int_32)$1 * (int_32)[56]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 + ((int_32)((int_32)$2 / (int_32)[-56]) * (int_32)[56]))
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$8
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$9 }
	CALL _ZdlPv($6)
	
.LABEL $label$9
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	$6 = (int_64)0
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9770])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9770])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$7 = *($0 + [12])
	$8 = *($1)
	$3 = *($8 + [4])
	$5 = [0]
	$9 = ($8 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *(($8 + [8]))), [9775])
	$3 = *($9)
	$4 = *($3)
	$3 = ($3 + [1])
	*($9) = $3
	$5 = ($5 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $5)))
	$5 = ($5 + [7])
	if ( ($4 & [128]) ){ goto $label$1 }
	$5 = (CASTING uint_32)(uint_64 $6)
	$4 = *($7)
	$3 = *($7 + [4])
	$9 = ((int_32)($3 - $4) / (int_32)[56])
	if ( ((uint_32)$9 >= (uint_32)$5) ){ goto $label$4 }
	CALL $101($7, ($5 - $9))
	$3 = *(($7 + [4]))
	$4 = *($7)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$9 <= (uint_32)$5) ){ goto $label$5 }
	$3 = ($4 + ((int_32)$5 * (int_32)[56]))
	*(($7 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	CALL $102($8, $4)
	$4 = ($4 + [56])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [9770])
	CALL memcpy($3, *($4 + [4]), [32])
	$5 = (*($4 + [4]) + [32])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[31]), [9770])
	CALL memcpy(($3 + [32]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [9770])
	CALL memcpy($3, *($4 + [4]), [32])
	$5 = (*($4 + [4]) + [32])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[31]), [9770])
	CALL memcpy(($3 + [32]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9770])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9770])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9770])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9770])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$6 = *($0 + [12])
	$7 = (CASTING uint_64)(uint_32 ((int_32)(*($6 + [4]) - *($6)) / (int_32)[56]))
	$8 = *($1)
	$3 = *($8 + [4])
	$4 = ($8 + [4])
	
.LOOP $label$1:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$9 = ((int_64)$7) != (int_64)0
	*($2 + [8]) = (($9) << [7]) | ($5 & [127]))
	CALL eosio_assert(((int_32)(*(($8 + [8])) - $3) > (int_32)[0]), [9376])
	CALL memcpy(*($4), ($2 + [8]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $9 ){ goto $label$1 }
	$3 = *(($6 + [4]))
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $104($8, $4)
	$4 = ($4 + [56])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [9376])
	CALL memcpy(*($4 + [4]), $3, [32])
	$5 = (*($4 + [4]) + [32])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[31]), [9376])
	CALL memcpy(*($4 + [4]), ($3 + [32]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [9376])
	CALL memcpy(*($4 + [4]), $3, [32])
	$5 = (*($4 + [4]) + [32])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[31]), [9376])
	CALL memcpy(*($4 + [4]), ($3 + [32]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9376])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9376])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9376])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9376])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9770])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9770])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [16])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9770])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9770])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9770])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [9770])
	CALL memcpy(($1 + [48]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $105 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [52]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10201])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7975479850326556672)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10147])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10147])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $63(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9376])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9376])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9376])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9376])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9376])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9376])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	*(($4 = $2) + [16]) = [8893]
	*($4 + [20]) = CALL $135([8893])
	*($4 + [8]) = *($4 + [16])
	*($1) = *(CALL $2(($4 + [24]), ($4 + [8])))
	$5 = CALL $135([8405])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9278])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [8404]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert([1], [9382])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $9
	$7 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $9
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [9431])
	*(($10 = ($1 + [16]))) = $8
	*($1 + [8]) = (int_64)4400000000000
	$5 = $2
	$7 = ($5 + [-32])
	$global$0 = $7
	CALL eosio_assert([1], [9376])
	CALL memcpy($7, $1, [8])
	CALL eosio_assert([1], [9376])
	CALL memcpy(($5 + [-24]), ($1 + [8]), [8])
	*($4 + [24]) = *($10)
	CALL eosio_assert([1], [9376])
	CALL memcpy(($5 + [-16]), ($4 + [24]), [8])
	$6 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)4511794112911028224, *(*($0 + [8])), $6, $7, [24])
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$12 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$global$0 = ($4 + [32])
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9830])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $138($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9770])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [9770])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [9770])
	CALL memcpy(($3 + [24]), ($2 + [16]), [8])
	*($5 + [16]) = *($3 + [24])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$7 = *($5)
	*($3 + [24]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [16]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $90(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $141($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [10313])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [10358])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10408])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $98(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $122($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = *($4 + [4])
	*(($1 + [16])) = *(($6 + [8]))
	*($1 + [8]) = *($6)
	$7 = *(*($4 + [4]) + [8])
	CALL eosio_assert([1], [9382])
	$8 = ($1 + [8])
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$9 = $10
	$6 = [1]
	$11 = $4
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$9 = $10
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$11 = ($4 + [1])
	$4 = $11
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9431])
	*(($1 + [32])) = $7
	*($1 + [24]) = (int_64)0
	$6 = $2
	$4 = ($6 + [-48])
	$global$0 = $4
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($6 + [-8])
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $8
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [24])
	CALL $82(($3 + [32]), ($3 + [24]))
	$9 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($5 + [8]), (int_64)-5859317942822371328, *(*($0 + [8])), $9, $4, [40])
	if ( (uint_64)($9 <= *($5 + [16])) ){ goto $label$6 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$global$0 = ($3 + [48])
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $0, [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *($0 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9376])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9376])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($0 + [4]), $4, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = *($4 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [9376])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $141 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18868])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18676]
	$3 = (((int_32)$1 * (int_32)[12]) + [18676])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $140 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10476]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10480])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10476]) = [1]
	$2 = ($2 << [16])
	*([0] + [10480]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10480])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10480]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10476]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10476]) = [1]
	$3 = ($3 << [16])
	*([0] + [10480]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10480])
	
.LABEL $label$10
	*([0] + [10480]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)6761181073566072832, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $77($6, $8)
	*($3 + [28]) = [0]
	*($3 + [24]) = $6
	$7 = *(*(CALL $76(($3 + [24])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [10095])
	*($1) = *(($6 + [16]))
	$5 = CALL memcpy(($1 + [16]), *(*($5 + [4]) + [4]), [248])
	*($1 + [272]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$2 = $2
	$6 = ($2 + [-272])
	$global$0 = $6
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($2 + [-12])
	CALL eosio_assert([1], [9376])
	CALL memcpy(*($3 + [4]), $1, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [24])
	*($3 + [24]) = $5
	*($3 + [32]) = ($1 + [72])
	*($3 + [36]) = ($1 + [80])
	*($3 + [40]) = ($1 + [144])
	*($3 + [44]) = ($1 + [208])
	*($3 + [48]) = ($1 + [224])
	*($3 + [52]) = ($1 + [240])
	*($3 + [56]) = ($1 + [256])
	CALL $69(($3 + [24]), ($3 + [16]))
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9376])
	CALL memcpy(*($3 + [4]), ($1 + [272]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$7 = *($1)
	*($1 + [280]) = CALL db_store_i64(*($4 + [8]), (int_64)6761181073566072832, *(*($0 + [8])), $7, $6, [260])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $122($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	float_64 $12
	$3 = ($global$0 - [112])
	$global$0 = $3
	$4 = CALL $135([8401])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9278])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($4 + [8400]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$5 = ((int_64)$5 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)0
	
.LABEL $label$1
	$7 = *($2 + [8])
	if ( ((int_64)$7 == (int_64)((int_64)$5 | (int_64)4)) ){ goto $label$7 }
	$4 = CALL $135([8409])
	if ( ($4 <= [8]) ){ goto $label$11 }
	CALL eosio_assert([0], [9278])
	goto $label$10 
	
.LABEL $label$11
	if ( ($4 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$5 = (int_64)0
	
.LOOP $label$12:
	$6 = *(($4 + [8408]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$13 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$13
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$12 }
	if ( ((int_64)$7 != (int_64)((int_64)((int_64)$5 << (int_64)8) | (int_64)8)) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((int_64)$7 == (int_64)((int_64)0 | (int_64)8)) ){ goto $label$7 }
	
.LABEL $label$8
	$4 = CALL $135([8405])
	if ( ($4 <= [8]) ){ goto $label$17 }
	CALL eosio_assert([0], [9278])
	goto $label$16 
	
.LABEL $label$17
	if ( ($4 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$5 = (int_64)0
	
.LOOP $label$18:
	$6 = *(($4 + [8404]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$19 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$19
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$18 }
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$14 
	
.LABEL $label$15
	$5 = (int_64)4
	
.LABEL $label$14
	*($0 + [8]) = $5
	*($0) = (int_64)0
	CALL eosio_assert([1], [9382])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$5 = $7
	$6 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$23
	$5 = $7
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$21 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $6 ){ goto $label$24 }
	$6 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$6 = [0]
	
.LABEL $label$20
	CALL eosio_assert($6, [9431])
	$global$0 = ($3 + [112])
	return 
	
.LABEL $label$7
	$8 = *($1)
	$4 = CALL $135([8405])
	if ( ($4 <= [8]) ){ goto $label$28 }
	CALL eosio_assert([0], [9278])
	goto $label$27 
	
.LABEL $label$28
	if ( ($4 == 0) ){ goto $label$26 }
	
.LABEL $label$27
	$5 = (int_64)0
	
.LOOP $label$29:
	$6 = *(($4 + [8404]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$30 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$30
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$29 }
	$5 = ((int_64)$5 & (int_64)72057594037927935)
	goto $label$25 
	
.LABEL $label$26
	$5 = (int_64)0
	
.LABEL $label$25
	*(($3 + [64])) = [0]
	*($3 + [40]) = $5
	*($3 + [32]) = $8
	*($3 + [48]) = (int_64)-1
	*($3 + [56]) = (int_64)0
	*($3 + [24]) = [8893]
	*($3 + [28]) = CALL $135([8893])
	*($3 + [8]) = *($3 + [24])
	CALL $2(($3 + [80]), ($3 + [8]))
	$6 = *(($3 + [60]))
	$9 = *($3 + [56])
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$34 }
	
.LOOP $label$36:
	$4 = ($6 + [-24])
	$10 = *($4)
	if ( ((int_64)*($10) == (int_64)4511794054856759296) ){ goto $label$35 }
	$6 = $4
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$35
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$34 }
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)($3 + [32])), [9779])
	if ( $10 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$4 = CALL db_find_i64(*($3 + [32]), *(($3 + [40])), (int_64)4511794112911028224, (int_64)4511794054856759296)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$32 }
	$10 = CALL $88(($3 + [32]), $4)
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)($3 + [32])), [9779])
	
.LABEL $label$33
	$5 = *($10 + [8])
	goto $label$31 
	
.LABEL $label$32
	*($3 + [104]) = *($1)
	CALL eosio_assert(((int_64)*($3 + [32]) == (int_64)CALL $fimport$8()), [9853])
	*($3 + [84]) = ($3 + [16])
	*($3 + [80]) = ($3 + [32])
	*($3 + [88]) = ($3 + [104])
	*(($4 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = ($3 + [32])
	CALL $89(($3 + [80]), $4)
	*($3 + [96]) = $4
	$5 = *($4)
	*($3 + [80]) = $5
	$10 = *($4 + [28])
	*($3 + [76]) = $10
	$9 = ($3 + [60])
	$6 = *($9)
	if ( ((uint_32)$6 >= (uint_32)*(($3 + [64]))) ){ goto $label$39 }
	*($6 + [8]) = $5
	*($6 + [16]) = $10
	*($3 + [96]) = [0]
	*($6) = $4
	*($9) = ($6 + [24])
	$4 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( $4 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	CALL $90(($3 + [56]), ($3 + [96]), ($3 + [80]), ($3 + [76]))
	$4 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	CALL _ZdlPv($4)
	
.LABEL $label$37
	$4 = CALL $135([8405])
	if ( ($4 <= [8]) ){ goto $label$43 }
	CALL eosio_assert([0], [9278])
	goto $label$42 
	
.LABEL $label$43
	if ( ($4 == 0) ){ goto $label$41 }
	
.LABEL $label$42
	$5 = (int_64)0
	
.LOOP $label$44:
	$6 = *(($4 + [8404]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$45 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$45
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$44 }
	$5 = ((int_64)$5 & (int_64)72057594037927935)
	goto $label$40 
	
.LABEL $label$41
	$5 = (int_64)0
	
.LABEL $label$40
	CALL eosio_assert([1], [9382])
	$4 = [0]
	
.LOOP $label$48:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$47 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$49 }
	$5 = $8
	$6 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$49
	$5 = $8
	
.LOOP $label$50:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$47 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $6 ){ goto $label$50 }
	$6 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	$6 = [0]
	
.LABEL $label$46
	CALL eosio_assert($6, [9431])
	$5 = (int_64)4400000000000
	
.LABEL $label$31
	$11 = (int_64)100
	$4 = (CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)44000000000))
	if ( ((uint_32)$4 > (uint_32)[100]) ){ goto $label$51 }
	$11 = (CASTING uint_64)(uint_32 ((uint_32)[100] / (uint_32)([101] - $4)))
	
.LABEL $label$51
	$8 = *($2)
	$4 = (CASTING uint_32)(uint_64 $7)
	$6 = ($4 & [255])
	if ( ($6 <= [5]) ){ goto $label$53 }
	$5 = (int_64)10
	if ( ((int_32)$6 == (int_32)[5]) ){ goto $label$54 }
	$6 = (($4 + [-4]) & [255])
	$4 = [1]
	$5 = (int_64)10
	
.LOOP $label$55:
	$5 = ((int_64)$5 * (int_64)10)
	$4 = ($4 + [1])
	if ( (($4 & [255]) <= $6) ){ goto $label$55 }
	
.LABEL $label$54
	$8 = ((uint_64)$8 / (uint_64)$5)
	goto $label$52 
	
.LABEL $label$53
	$6 = ([4] - $4)
	$4 = ($6 & [255])
	if ( ($4 == 0) ){ goto $label$58 }
	if ( ((int_32)$4 != (int_32)[1]) ){ goto $label$57 }
	$5 = (int_64)10
	goto $label$56 
	
.LABEL $label$58
	$5 = (int_64)1
	goto $label$56 
	
.LABEL $label$57
	$4 = [1]
	$5 = (int_64)10
	
.LOOP $label$59:
	$5 = ((int_64)$5 * (int_64)10)
	$4 = ($4 + [1])
	if ( (($4 & [255]) <= ($6 & [255])) ){ goto $label$59 }
	
.LABEL $label$56
	$8 = ((int_64)$5 * (int_64)$8)
	
.LABEL $label$52
	$4 = CALL $135([8409])
	if ( ($4 <= [8]) ){ goto $label$64 }
	CALL eosio_assert([0], [9278])
	goto $label$63 
	
.LABEL $label$64
	if ( ($4 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	$5 = (int_64)0
	
.LOOP $label$65:
	$6 = *(($4 + [8408]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$66 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$66
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$65 }
	if ( ((int_64)$7 != (int_64)((int_64)((int_64)$5 << (int_64)8) | (int_64)8)) ){ goto $label$60 }
	goto $label$61 
	
.LABEL $label$62
	if ( ((int_64)$7 != (int_64)8) ){ goto $label$60 }
	
.LABEL $label$61
	$12 = ((float_64)(CASTING float_64)(uint_64 $8) / (float_64)(float_64)2.5)
	if ( (((float_64)$12 < (float_64)(float_64)18446744073709551615) & ((float_64)$12 >= (float_64)(float_64)0)) ){ goto $label$67 }
	$8 = (int_64)0
	goto $label$60 
	
.LABEL $label$67
	$8 = (Rounds 0)($12)
	
.LABEL $label$60
	$7 = ((int_64)$8 * (int_64)$11)
	$4 = CALL $135([8405])
	if ( ($4 <= [8]) ){ goto $label$71 }
	CALL eosio_assert([0], [9278])
	goto $label$70 
	
.LABEL $label$71
	if ( ($4 == 0) ){ goto $label$69 }
	
.LABEL $label$70
	$5 = (int_64)0
	
.LOOP $label$72:
	$6 = *(($4 + [8404]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$73 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$73
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$72 }
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$68 
	
.LABEL $label$69
	$5 = (int_64)4
	
.LABEL $label$68
	*($0 + [8]) = $5
	*($0) = $7
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9382])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$78:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$76 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$80 }
	$5 = $7
	$9 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$78 }
	goto $label$79 
	
.LABEL $label$80
	$5 = $7
	
.LOOP $label$81:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$77 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $6 ){ goto $label$81 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$78 }
	
.LABEL $label$79
	CALL eosio_assert($9, [9431])
	$10 = *($3 + [56])
	if ( ($10 == 0) ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$77
	CALL eosio_assert([0], [9431])
	$10 = *($3 + [56])
	if ( $10 ){ goto $label$74 }
	goto $label$75 
	
.LABEL $label$76
	CALL eosio_assert([0], [9431])
	$10 = *($3 + [56])
	if ( $10 ){ goto $label$74 }
	
.LABEL $label$75
	$global$0 = ($3 + [112])
	return 
	
.LABEL $label$74
	$9 = ($3 + [60])
	$4 = *($9)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$83 }
	
.LOOP $label$84:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$85 }
	CALL _ZdlPv($6)
	
.LABEL $label$85
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$84 }
	$4 = *(($3 + [56]))
	goto $label$82 
	
.LABEL $label$83
	$4 = $10
	
.LABEL $label$82
	*($9) = $10
	CALL _ZdlPv($4)
	$global$0 = ($3 + [112])
}

void .FUNC $71 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = [0]
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$5 = *($0)
	*($3 + [8]) = $5
	$6 = *($2 + [8])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [16]) = $7)
	$8 = CALL db_find_i64($5, $7, (int_64)4511794112911028224, $1)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	$8 = CALL $88(($3 + [8]), $8)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($3 + [8])), [9779])
	CALL eosio_assert(((int_64)*(($8 + [16])) == (int_64)$6), [9451])
	$7 = *($2)
	$2 = ((int_64)*($8 + [8]) >= (int_64)$7)
	$4 = [1]
	goto $label$1 
	
.LABEL $label$2
	$7 = *($2)
	$8 = [0]
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [9077])
	$5 = *($0)
	CALL eosio_assert($4, [9904])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($3 + [8])), [9939])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$8()), [9985])
	$1 = *($8)
	$0 = ($8 + [16])
	CALL eosio_assert(((int_64)$6 == (int_64)*($0)), [9679])
	$6 = (int_64)
	*($8 + [8]) = $6(*($8 + [8]) - $7))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9727])
	CALL eosio_assert(((int_64)*($8 + [8]) < (int_64)4611686018427387904), [9749])
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [10036])
	CALL eosio_assert([1], [9376])
	CALL memcpy(($3 + [48]), $8, [8])
	CALL eosio_assert([1], [9376])
	CALL memcpy((($3 + [48]) | [8]), ($8 + [8]), [8])
	*($3 + [72]) = *($0)
	CALL eosio_assert([1], [9376])
	CALL memcpy((($3 + [48]) + [16]), ($3 + [72]), [8])
	CALL db_update_i64(*($8 + [28]), $5, ($3 + [48]), [24])
	$8 = (($3 + [8]) + [16])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$3 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$2 = *($3 + [32])
	if ( ($2 == 0) ){ goto $label$4 }
	$4 = ($3 + [36])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$8 = ($8 + [-24])
	$0 = *($8)
	*($8) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	CALL _ZdlPv($0)
	
.LABEL $label$8
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$7 }
	$8 = *(($3 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$8 = $2
	
.LABEL $label$5
	*($4) = $2
	CALL _ZdlPv($8)
	
.LABEL $label$4
	$global$0 = ($3 + [80])
}

int_32 .FUNC $76 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [280]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10201])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)6761181073566072832)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10147])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10147])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $77(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9830])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $138($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([288])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [208]) = (int_64)0
	*($5 + [216]) = (int_64)0
	*($5 + [224]) = (int_64)0
	*($5 + [232]) = (int_64)0
	*($5 + [240]) = (int_64)0
	*($5 + [248]) = (int_64)0
	*($5 + [256]) = (int_64)0
	*($5 + [276]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9770])
	CALL memcpy($5, *($3 + [20]), [8])
	*($3 + [20]) = (*($3 + [20]) + [8])
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [40]) = ($5 + [16])
	*($3 + [48]) = ($5 + [72])
	*($3 + [52]) = ($5 + [80])
	*($3 + [56]) = ($5 + [144])
	*($3 + [60]) = ($5 + [208])
	*($3 + [64]) = ($5 + [224])
	*($3 + [68]) = ($5 + [240])
	*($3 + [72]) = ($5 + [256])
	CALL $106(($3 + [40]), ($3 + [32]))
	CALL eosio_assert(((uint_32)(*($3 + [24]) - *($3 + [20])) > (uint_32)[3]), [9770])
	CALL memcpy(($5 + [272]), *($3 + [20]), [4])
	*($5 + [280]) = $1
	*($3 + [32]) = $5
	*($3 + [20]) = (*($3 + [20]) + [4])
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $73(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $141($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [248]) == (int_32)$0), [10313])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [10358])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10408])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [252])))
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $2, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9376])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9376])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9376])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9376])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [15]) = *(*($0 + [28]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9376])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9376])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9376])
	CALL memcpy(*($0 + [4]), $4, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $36 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [128])
	$global$0 = $3
	$4 = [0]
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$5 = *($0)
	*($3 + [8]) = $5
	$6 = *($2 + [8])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [16]) = $7)
	$8 = CALL db_find_i64($5, $7, (int_64)-5859317942822371328, $1)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	$8 = CALL $33(($3 + [8]), $8)
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)($3 + [8])), [9779])
	CALL eosio_assert(((int_64)*(($8 + [16])) == (int_64)$6), [9451])
	$5 = *($2)
	$9 = ((int_64)*($8 + [8]) >= (int_64)$5)
	$4 = [1]
	$2 = $8
	goto $label$1 
	
.LABEL $label$2
	$5 = *($2)
	$8 = [0]
	$2 = [0]
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8414])
	CALL eosio_assert(((int_64)*(($2 + [16])) == (int_64)$6), [9451])
	if ( ((int_64)*($2 + [8]) != (int_64)$5) ){ goto $label$6 }
	if ( ((int_64)*($2 + [24]) == (int_64)0) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = *($0)
	CALL eosio_assert($4, [9904])
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)($3 + [8])), [9939])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$8()), [9985])
	$1 = *($8)
	CALL eosio_assert(((int_64)$6 == (int_64)*(($8 + [16]))), [9679])
	$6 = (int_64)
	*($8 + [8]) = $6(*($8 + [8]) - $5))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9727])
	CALL eosio_assert(((int_64)*($8 + [8]) < (int_64)4611686018427387904), [9749])
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [10036])
	*($3 + [96]) = (($3 + [48]) + [40])
	*($3 + [92]) = ($3 + [48])
	*($3 + [88]) = ($3 + [48])
	*($3 + [104]) = ($3 + [88])
	*($3 + [116]) = ($8 + [8])
	*($3 + [112]) = $2
	*($3 + [120]) = ($8 + [24])
	CALL $82(($3 + [112]), ($3 + [104]))
	CALL db_update_i64(*($8 + [44]), $7, ($3 + [48]), [40])
	if ( (uint_64)($1 <= *((($3 + [8]) + [16]))) ){ goto $label$7 }
	*(($3 + [24])) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$0 = *($3 + [32])
	if ( ($0 == 0) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$8 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($8, [10249])
	CALL eosio_assert($8, [10283])
	$8 = CALL db_next_i64(*($2 + [44]), ($3 + [48]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$8 }
	CALL $33(($3 + [8]), $8)
	
.LABEL $label$8
	CALL $87(($3 + [8]), $2)
	$0 = *($3 + [32])
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = ($3 + [36])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$10 }
	
.LOOP $label$11:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$11 }
	$8 = *(($3 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$8 = $0
	
.LABEL $label$9
	*($4) = $0
	CALL _ZdlPv($8)
	
.LABEL $label$3
	$global$0 = ($3 + [128])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9770])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9770])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9770])
	CALL memcpy(($0 + [32]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($2) = $0
	CALL $95($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [276]) == (int_32)$0), [10313])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [10358])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10408])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [280])))
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9830])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $138($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [16]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [12])
	*($3 + [44]) = ($5 + [16])
	CALL $110(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $81(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $141($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $32 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [48]) = $1
	*(($4 = ($3 + [40]))) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$5 = *($0)
	*($3 + [8]) = $5
	$6 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	*($3 + [16]) = $6)
	$7 = CALL db_find_i64($5, $6, (int_64)-5859317942822371328, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$7 = CALL $33(($3 + [8]), $7)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($3 + [8])), [9779])
	$5 = *($0)
	CALL eosio_assert([1], [9904])
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($3 + [8])), [9939])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$8()), [9985])
	$1 = *($7)
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*(($7 + [16]))), [9550])
	$6 = ((int_64)*($7 + [8]) + (int_64)*($2))
	*($7 + [8]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9593])
	CALL eosio_assert(((int_64)*($7 + [8]) < (int_64)4611686018427387904), [9612])
	CALL eosio_assert(((int_64)$1 == (int_64)*($7)), [10036])
	*($3 + [112]) = (($3 + [64]) + [40])
	*($3 + [108]) = ($3 + [64])
	*($3 + [104]) = ($3 + [64])
	*($3 + [120]) = ($3 + [104])
	*($3 + [132]) = ($7 + [8])
	*($3 + [128]) = $7
	*($3 + [136]) = ($7 + [24])
	CALL $82(($3 + [128]), ($3 + [120]))
	CALL db_update_i64(*($7 + [44]), $5, ($3 + [64]), [40])
	$7 = (($3 + [8]) + [16])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$3 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$0 = *($3 + [32])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$1 = *($0)
	*($3 + [108]) = $2
	*($3 + [104]) = ($3 + [48])
	*($3 + [128]) = $1
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$8()), [9853])
	*($3 + [68]) = ($3 + [104])
	*($3 + [64]) = ($3 + [8])
	*($3 + [72]) = ($3 + [128])
	*(($7 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($7) = (int_64)0
	*($7 + [16]) = (int_64)0
	*($7 + [24]) = (int_64)0
	*($7 + [32]) = (int_64)0
	*($7 + [40]) = ($3 + [8])
	CALL $83(($3 + [64]), $7)
	*($3 + [120]) = $7
	$1 = *($7)
	*($3 + [64]) = $1
	$0 = *($7 + [44])
	*($3 + [60]) = $0
	$8 = ($3 + [36])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*($4)) ){ goto $label$6 }
	*($2 + [8]) = $1
	*($2 + [16]) = $0
	*($3 + [120]) = [0]
	*($2) = $7
	*($8) = ($2 + [24])
	$7 = *($3 + [120])
	*($3 + [120]) = [0]
	if ( $7 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	CALL $84(($3 + [32]), ($3 + [120]), ($3 + [64]), ($3 + [60]))
	$7 = *($3 + [120])
	*($3 + [120]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	CALL _ZdlPv($7)
	
.LABEL $label$3
	$0 = *($3 + [32])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($3 + [36])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL _ZdlPv($2)
	
.LABEL $label$10
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$9 }
	$7 = *(($3 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$7 = $0
	
.LABEL $label$7
	*($4) = $0
	CALL _ZdlPv($7)
	
.LABEL $label$1
	$global$0 = ($3 + [144])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9830])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $138($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	CALL $97(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $84(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $141($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $120(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $120(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $31 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$3 = ($global$0 - [176])
	$global$0 = $3
	$4 = CALL $135([8401])
	if ( ($4 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [9278])
	goto $label$4 
	
.LABEL $label$5
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = (int_64)0
	
.LOOP $label$6:
	$6 = *(($4 + [8400]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$7
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$6 }
	if ( ((int_64)*($2 + [8]) != (int_64)((int_64)((int_64)$5 << (int_64)8) | (int_64)4)) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_64)*($2 + [8]) != (int_64)4) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = *($0)
	*($3 + [48]) = [9109]
	*($3 + [52]) = CALL $135([9109])
	*($3 + [24]) = *($3 + [48])
	CALL $2(($3 + [96]), ($3 + [24]))
	*(($3 + [88])) = [0]
	*($3 + [56]) = $5
	*($3 + [72]) = (int_64)-1
	*($3 + [80]) = (int_64)0
	*($3 + [64]) = (int_64)6606654060406353408
	$4 = CALL db_find_i64($5, (int_64)6606654060406353408, (int_64)3617074512601808896, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*(CALL $79(($3 + [56]), $4) + [32]) == (int_32)($3 + [56])), [9779])
	$7 = *($3 + [80])
	if ( $7 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$9
	$4 = CALL $135([8405])
	if ( ($4 <= [8]) ){ goto $label$13 }
	CALL eosio_assert([0], [9278])
	goto $label$12 
	
.LABEL $label$13
	if ( ($4 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$5 = (int_64)0
	
.LOOP $label$14:
	$6 = *(($4 + [8404]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [9323])
	
.LABEL $label$15
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$14 }
	$8 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$10 
	
.LABEL $label$11
	$8 = (int_64)4
	
.LABEL $label$10
	CALL eosio_assert([1], [9382])
	$5 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$9 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$5 = $9
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$5 = $9
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$20 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$6 = [0]
	
.LABEL $label$16
	CALL eosio_assert($6, [9431])
	$10 = *($0)
	$5 = *($2)
	CALL eosio_assert(((int_64)*($3 + [56]) == (int_64)CALL $fimport$8()), [9853])
	*(($4 = CALL _Znwj([48])) + [32]) = ($3 + [56])
	*($4) = $1
	*($4 + [8]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$9 = CALL current_time()
	$5 = ( (int_64)280000 ? (int_64)0 : ((uint_64)$5 > (uint_64)(int_64)19999) )
	*($4 + [16]) = $5
	*($4 + [24]) = $8
	*($4 + [12]) = ((uint_64)$9 / (uint_64)(int_64)1000000)
	*($3 + [144]) = (($3 + [96]) + [32])
	*($3 + [140]) = ($3 + [96])
	*($3 + [136]) = ($3 + [96])
	*($3 + [152]) = ($3 + [136])
	*($3 + [164]) = ($4 + [8])
	*($3 + [160]) = $4
	*($3 + [168]) = ($4 + [12])
	*($3 + [172]) = ($4 + [16])
	CALL $80(($3 + [160]), ($3 + [152]))
	$9 = *($4)
	$7 = CALL db_store_i64(*((($3 + [56]) + [8])), (int_64)3617074512601808896, $10, $9, ($3 + [96]), [32])
	*($4 + [36]) = $7
	$6 = (($3 + [56]) + [16])
	if ( (uint_64)($9 <= *($6)) ){ goto $label$21 }
	*($6) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$21
	*($3 + [160]) = $4
	$9 = *($4)
	*($3 + [96]) = $9
	*($3 + [136]) = $7
	$2 = ($3 + [84])
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*((($3 + [56]) + [32]))) ){ goto $label$24 }
	*($6 + [8]) = $9
	*($6 + [16]) = $7
	*($3 + [160]) = [0]
	*($6) = $4
	*($2) = ($6 + [24])
	$4 = *($3 + [160])
	*($3 + [160]) = [0]
	if ( $4 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	CALL $81(($3 + [80]), ($3 + [160]), ($3 + [96]), ($3 + [136]))
	$4 = *($3 + [160])
	*($3 + [160]) = [0]
	if ( ($4 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL _ZdlPv($4)
	
.LABEL $label$22
	*(($3 + [16])) = $8
	*($3 + [40]) = $8
	*($3 + [8]) = $5
	*($3 + [32]) = $5
	CALL $32($0, $1, ($3 + [8]))
	$7 = *($3 + [80])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$8
	$2 = ($3 + [84])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$26 }
	
.LOOP $label$27:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$28 }
	CALL _ZdlPv($6)
	
.LABEL $label$28
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$27 }
	$4 = *(($3 + [80]))
	goto $label$25 
	
.LABEL $label$26
	$4 = $7
	
.LABEL $label$25
	*($2) = $7
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$global$0 = ($3 + [176])
}

int_64 .FUNC $129 (float_64 $0, float_64 $1, int_32 $2)
{
	float_64 $3
	float_64 $4
	float_64 $5
	$3 = ((float_64)$0 * (float_64)$0)
	$4 = ((float_64)((float_64)((float_64)$3 * (float_64)((float_64)$3 * (float_64)$3)) * (float_64)((float_64)((float_64)$3 * (float_64)(float_64)1.58969099521155e-10) + (float_64)(float_64)-2.5050760253406863e-08)) + (float_64)((float_64)((float_64)$3 * (float_64)((float_64)((float_64)$3 * (float_64)(float_64)2.7557313707070068e-06) + (float_64)(float_64)-1.984126982985795e-04)) + (float_64)(float_64)0.00833333333332249))
	$5 = ((float_64)$3 * (float_64)$0)
	if ( ($2 == 0) ){ goto $label$1 }
	return (float_64))($0 - ((float_64)((float_64)$5 * (float_64)(float_64)0.16666666666666632) + (float_64)(float_64))(((float_64)$3 * (float_64)(float_64))(((float_64)$1 * (float_64)(float_64)0.5) - ((float_64)$5 * (float_64)$4))) - $1)))
	
.LABEL $label$1
	return ((float_64)((float_64)$5 * (float_64)((float_64)((float_64)$3 * (float_64)$4) + (float_64)(float_64)-0.16666666666666632)) + (float_64)$0)
}

int_32 .FUNC $127 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	float_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	float_64 $24
	int_32 $25
	int_32 $26
	int_32 $27
	float_64 $28
	float_64 $29
	$5 = ($global$0 - [560])
	$global$0 = $5
	$6 = ((int_32)($2 + [-3]) / (int_32)[24])
	$7 = ( $6 ? [0] : ((int_32)$6 > (int_32)[0]) )
	$8 = ($2 + ((int_32)$7 * (int_32)[-24]))
	$2 = ($3 + [-1])
	$9 = *((($4 << [2]) + [18880]))
	if ( ((int_32)($9 + $2) < (int_32)[0]) ){ goto $label$1 }
	$10 = ($9 + $3)
	$2 = ($7 - $2)
	$11 = (((($7 + [1]) - $3) << [2]) + [18896])
	$6 = ($5 + [320])
	
.LOOP $label$2:
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$12 = (CASTING float_64)(int_32 *($11))
	goto $label$3 
	
.LABEL $label$4
	$12 = (float_64)0
	
.LABEL $label$3
	*($6) = $12
	$6 = ($6 + [8])
	$11 = ($11 + [4])
	$2 = ($2 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$2 }
	
.LABEL $label$1
	$13 = ($8 + [-24])
	if ( ((int_32)$3 <= (int_32)[0]) ){ goto $label$6 }
	$14 = ((($5 + [320]) + ($3 << [3])) + [-8])
	$10 = [0]
	
.LOOP $label$7:
	$12 = (float_64)0
	$2 = $0
	$11 = $3
	$6 = $14
	
.LOOP $label$8:
	$12 = ((float_64)$12 + (float_64)((float_64)*($2) * (float_64)*($6)))
	$2 = ($2 + [8])
	$6 = ($6 + [-8])
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$8 }
	*(($5 + ($10 << [3]))) = $12
	$14 = ($14 + [8])
	$2 = ((int_32)$10 < (int_32)$9)
	$10 = ($10 + [1])
	if ( $2 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$6 = [-1]
	$2 = $5
	
.LOOP $label$9:
	*($2) = (int_64)0
	$2 = ($2 + [8])
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$5
	$15 = ([23] - $13)
	$16 = ([24] - $13)
	$17 = ((($5 + [480]) + ($9 << [2])) + [-4])
	$18 = ($5 | [8])
	$19 = (($5 + [480]) + [-4])
	$20 = ($5 + [-8])
	$21 = ((int_32)$3 > (int_32)[0])
	$11 = $9
	
.LOOP $label$10:
	$22 = ($11 << [3])
	$12 = *(($5 + $22))
	$23 = ((int_32)$11 < (int_32)[1])
	if ( $23 ){ goto $label$11 }
	$10 = ($11 + [1])
	$2 = ($20 + $22)
	$6 = ($5 + [480])
	
.LOOP $label$12:
	$24 = (Rounds 0)(((float_64)$12 * (float_64)(float_64)5.9604644775390625e-08))
	$12 = ((float_64)$12 + (float_64)((float_64)$24 * (float_64)(float_64)-16777216))
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)2147483648) ){ goto $label$14 }
	$14 = [-2147483648]
	goto $label$13 
	
.LABEL $label$14
	$14 = (CASTING int_32)(float_64 $12)
	
.LABEL $label$13
	*($6) = $14
	$6 = ($6 + [4])
	$12 = ((float_64)*($2) + (float_64)$24)
	$2 = ($2 + [-8])
	$10 = ($10 + [-1])
	if ( ((int_32)$10 > (int_32)[1]) ){ goto $label$12 }
	
.LABEL $label$11
	$12 = CALL $133($12, $13)
	$12 = ((float_64)$12 + (float_64)((float_64)CALL $131(((float_64)$12 * (float_64)(float_64)0.125)) * (float_64)(float_64)-8))
	$24 = (Rounds 0)($12)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)2147483648) ){ goto $label$23 }
	$25 = [-2147483648]
	$12 = (float_64))($12 - $24)
	$26 = ((int_32)$13 < (int_32)[1])
	if ( ($26 == 0) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$25 = (CASTING int_32)(float_64 $12)
	$12 = (float_64))($12 - $24)
	$26 = ((int_32)$13 < (int_32)[1])
	if ( $26 ){ goto $label$21 }
	
.LABEL $label$22
	$2 = int_32($2 >> $16)
	$2 = *($2)
	$6 = ($2 - ($2 << $16))
	*(($2 = ((($5 + [480]) + ($11 << [2])) + [-4]))) = $6
	$25 = ($2 + $25)
	$27 = int_32($6 >> $15)
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	if ( ($13 == 0) ){ goto $label$24 }
	$27 = [2]
	if ( (((int_32)((float_64)$12 >= (float_64)(float_64)0.5) ^ (int_32)[1]) == 0) ){ goto $label$20 }
	$27 = [0]
	if ( ((float_64)$12 != (float_64)(float_64)0) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$24
	$27 = int_32(*(((($5 + [480]) + ($11 << [2])) + [-4])) >> [23])
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$19 }
	
.LABEL $label$20
	if ( $23 ){ goto $label$26 }
	$23 = [0]
	$2 = ($5 + [480])
	$14 = $11
	
.LOOP $label$27:
	$6 = *($2)
	$10 = [16777215]
	if ( $23 ){ goto $label$29 }
	if ( ($6 == 0) ){ goto $label$28 }
	$23 = [1]
	$10 = [16777216]
	
.LABEL $label$29
	*($2) = ($10 - $6)
	$2 = ($2 + [4])
	$14 = ($14 + [-1])
	if ( $14 ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$28
	$23 = [0]
	$2 = ($2 + [4])
	$14 = ($14 + [-1])
	if ( $14 ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$23 = [0]
	
.LABEL $label$25
	if ( $26 ){ goto $label$32 }
	if ( ((int_32)$13 == (int_32)[2]) ){ goto $label$31 }
	if ( ((int_32)$13 != (int_32)[1]) ){ goto $label$32 }
	*(($2 = ((($5 + [480]) + ($11 << [2])) + [-4]))) = (*($2) & [8388607])
	
.LABEL $label$32
	$25 = ($25 + [1])
	if ( ((int_32)$27 != (int_32)[2]) ){ goto $label$19 }
	goto $label$30 
	
.LABEL $label$31
	*(($2 = ((($5 + [480]) + ($11 << [2])) + [-4]))) = (*($2) & [4194303])
	$25 = ($25 + [1])
	if ( ((int_32)$27 != (int_32)[2]) ){ goto $label$19 }
	
.LABEL $label$30
	$12 = (float_64))((float_64)1 - $12)
	$27 = [2]
	if ( ($23 == 0) ){ goto $label$19 }
	$12 = (float_64)
	if ( ((float_64)$12($12 - CALL $133((float_64)1, $13))) == (float_64)(float_64)0) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((float_64)$12 == (float_64)(float_64)0) ){ goto $label$17 }
	
.LABEL $label$18
	$12 = CALL $133($12, ([0] - $13))
	if ( (((int_32)((float_64)$12 >= (float_64)(float_64)16777216) ^ (int_32)[1]) == 0) ){ goto $label$37 }
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)2147483648) ){ goto $label$36 }
	$2 = [-2147483648]
	goto $label$33 
	
.LABEL $label$37
	$2 = (($5 + [480]) + ($11 << [2]))
	$24 = ((float_64)$12 * (float_64)(float_64)5.9604644775390625e-08)
	$12 = ((float_64)$12 + (float_64)((float_64)(Rounds 0)($24) * (float_64)(float_64)-16777216))
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)2147483648) ){ goto $label$35 }
	$6 = [-2147483648]
	goto $label$34 
	
.LABEL $label$36
	$2 = (CASTING int_32)(float_64 $12)
	goto $label$33 
	
.LABEL $label$35
	$6 = (CASTING int_32)(float_64 $12)
	
.LABEL $label$34
	*($2) = $6
	$11 = ($11 + [1])
	if ( ((float_64)(float_64)|$24| < (float_64)(float_64)2147483648) ){ goto $label$39 }
	$2 = [-2147483648]
	goto $label$38 
	
.LABEL $label$39
	$2 = (CASTING int_32)(float_64 $24)
	
.LABEL $label$38
	$13 = $8
	
.LABEL $label$33
	*((($5 + [480]) + ($11 << [2]))) = $2
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$11 <= (int_32)$9) ){ goto $label$41 }
	$2 = ($19 + ($11 << [2]))
	$6 = [0]
	$10 = $11
	
.LOOP $label$42:
	$6 = (*($2) | $6)
	$2 = ($2 + [-4])
	$10 = ($10 + [-1])
	if ( ((int_32)$10 > (int_32)$9) ){ goto $label$42 }
	if ( $6 ){ goto $label$40 }
	
.LABEL $label$41
	$2 = $17
	$14 = $11
	
.LOOP $label$43:
	$14 = ($14 + [1])
	$6 = *($2)
	$2 = ($2 + [-4])
	if ( ($6 == 0) ){ goto $label$43 }
	if ( ($21 == 0) ){ goto $label$44 }
	$2 = ($11 + [1])
	$23 = (($5 + [320]) + (($3 + $11) << [3]))
	
.LOOP $label$45:
	$10 = $2
	*((($5 + [320]) + (($11 + $3) << [3]))) = (CASTING float_64)(int_32 *(((($10 + $7) << [2]) + [18896])))
	$12 = (float_64)0
	$2 = $0
	$6 = $23
	$11 = $3
	
.LOOP $label$46:
	$12 = ((float_64)$12 + (float_64)((float_64)*($2) * (float_64)*($6)))
	$2 = ($2 + [8])
	$6 = ($6 + [-8])
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$46 }
	*(($5 + ($10 << [3]))) = $12
	$23 = ($23 + [8])
	$2 = ($10 + [1])
	$11 = $10
	if ( ((int_32)$10 < (int_32)$14) ){ goto $label$45 }
	goto $label$15 
	
.LABEL $label$44
	$2 = ($18 + $22)
	$6 = ((($7 + $11) << [2]) + [18900])
	$10 = (($5 + [320]) + (($3 + $11) << [3]))
	
.LOOP $label$47:
	*($2) = (int_64)0
	*($10) = (CASTING float_64)(int_32 *($6))
	$6 = ($6 + [4])
	$2 = ($2 + [8])
	$10 = ($10 + [8])
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)$14) ){ goto $label$47 }
	$11 = $14
	goto $label$10 
	
.LABEL $label$40
	$2 = ((($5 + [480]) + ($11 << [2])) + [-4])
	
.LOOP $label$48:
	$11 = ($11 + [-1])
	$13 = ($13 + [-24])
	$6 = *($2)
	$2 = ($2 + [-4])
	if ( ($6 == 0) ){ goto $label$48 }
	
.LABEL $label$16
	$12 = CALL $133((float_64)1, $13)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$49 }
	$10 = ($11 + [1])
	$2 = ($5 + ($11 << [3]))
	$6 = (($5 + [480]) + ($11 << [2]))
	
.LOOP $label$50:
	*($2) = ((float_64)$12 * (float_64)(CASTING float_64)(int_32 *($6)))
	$2 = ($2 + [-8])
	$6 = ($6 + [-4])
	$12 = ((float_64)$12 * (float_64)(float_64)5.9604644775390625e-08)
	$10 = ($10 + [-1])
	if ( ((int_32)$10 > (int_32)[0]) ){ goto $label$50 }
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$49 }
	$14 = ($5 + ($11 << [3]))
	$2 = $11
	
.LOOP $label$51:
	$3 = $2
	$23 = ($11 - $3)
	$12 = (float_64)0
	$2 = [0]
	$6 = [0]
	
.LOOP $label$53:
	$12 = ((float_64)$12 + (float_64)((float_64)*(($2 + [21664])) * (float_64)*(($14 + $2))))
	if ( ((int_32)$6 >= (int_32)$9) ){ goto $label$52 }
	$2 = ($2 + [8])
	$10 = ($6 <= $23)
	$6 = ($6 + [1])
	if ( $10 ){ goto $label$53 }
	
.LABEL $label$52
	*((($5 + [160]) + ($23 << [3]))) = $12
	$14 = ($14 + [-8])
	$2 = ($3 + [-1])
	if ( ((int_32)$3 > (int_32)[0]) ){ goto $label$51 }
	
.LABEL $label$49
	if ( (($4 + [-1]) <= [2]) ){ goto $label$61 }
	if ( ($4 == 0) ){ goto $label$60 }
	if ( ((int_32)$4 != (int_32)[3]) ){ goto $label$54 }
	$28 = (float_64)0
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$62 }
	$6 = ($11 + [1])
	$10 = (($5 + [160]) + ($11 << [3]))
	$2 = ($10 + [-8])
	$12 = *($10)
	
.LOOP $label$63:
	$29 = *($2)
	$24 = ((float_64)$29 + (float_64)$12)
	*($2) = $24
	*(($2 + [8])) = ((float_64)$12 + (float_64)(float_64))($29 - $24))
	$2 = ($2 + [-8])
	$12 = $24
	$6 = ($6 + [-1])
	if ( ((int_32)$6 > (int_32)[1]) ){ goto $label$63 }
	if ( ((int_32)$11 < (int_32)[2]) ){ goto $label$62 }
	$6 = ($11 + [1])
	$10 = (($5 + [160]) + ($11 << [3]))
	$2 = ($10 + [-8])
	$12 = *($10)
	
.LOOP $label$64:
	$29 = *($2)
	$24 = ((float_64)$29 + (float_64)$12)
	*($2) = $24
	*(($2 + [8])) = ((float_64)$12 + (float_64)(float_64))($29 - $24))
	$2 = ($2 + [-8])
	$12 = $24
	$6 = ($6 + [-1])
	if ( ((int_32)$6 > (int_32)[2]) ){ goto $label$64 }
	if ( ((int_32)$11 < (int_32)[2]) ){ goto $label$62 }
	$6 = ($11 + [1])
	$2 = (($5 + [160]) + ($11 << [3]))
	$28 = (float_64)0
	
.LOOP $label$65:
	$28 = ((float_64)$28 + (float_64)*($2))
	$2 = ($2 + [-8])
	$6 = ($6 + [-1])
	if ( ((int_32)$6 > (int_32)[2]) ){ goto $label$65 }
	
.LABEL $label$62
	$12 = *($5 + [160])
	if ( ($27 == 0) ){ goto $label$57 }
	*($1) = !(float_64)$12
	*($1 + [8]) = !(float_64)*($5 + [168])
	*($1 + [16]) = !(float_64)$28
	goto $label$54 
	
.LABEL $label$61
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$59 }
	$6 = ($11 + [1])
	$2 = (($5 + [160]) + ($11 << [3]))
	$12 = (float_64)0
	
.LOOP $label$66:
	$12 = ((float_64)$12 + (float_64)*($2))
	$2 = ($2 + [-8])
	$6 = ($6 + [-1])
	if ( ((int_32)$6 > (int_32)[0]) ){ goto $label$66 }
	goto $label$58 
	
.LABEL $label$60
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$56 }
	$6 = ($11 + [1])
	$2 = (($5 + [160]) + ($11 << [3]))
	$12 = (float_64)0
	
.LOOP $label$67:
	$12 = ((float_64)$12 + (float_64)*($2))
	$2 = ($2 + [-8])
	$6 = ($6 + [-1])
	if ( ((int_32)$6 > (int_32)[0]) ){ goto $label$67 }
	goto $label$55 
	
.LABEL $label$59
	$12 = (float_64)0
	
.LABEL $label$58
	*($1) = ( !(float_64)$12 ? $12 : $27 )
	$12 = (float_64))(*($5 + [160]) - $12)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$68 }
	$2 = (($5 + [160]) | [8])
	
.LOOP $label$69:
	$12 = ((float_64)$12 + (float_64)*($2))
	$2 = ($2 + [8])
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$69 }
	
.LABEL $label$68
	*($1 + [8]) = ( !(float_64)$12 ? $12 : $27 )
	goto $label$54 
	
.LABEL $label$57
	*($1) = $12
	*($1 + [8]) = *($5 + [168])
	*($1 + [16]) = $28
	goto $label$54 
	
.LABEL $label$56
	$12 = (float_64)0
	
.LABEL $label$55
	*($1) = ( !(float_64)$12 ? $12 : $27 )
	
.LABEL $label$54
	$global$0 = ($5 + [560])
	return ($25 & [7])
	
.LABEL $label$15
	$11 = $14
	return goto $label$10
}