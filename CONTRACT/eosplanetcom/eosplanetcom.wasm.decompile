(data (i32.const 8192) "eosplanetadm\00object passed to iterator_to is not in multi_index\00")
(data (i32.const 8256) "Account not found\00")
(data (i32.const 8274) "No orders!\00cannot create objects in table of another contract\00")
(data (i32.const 8336) "Out of world bounds\00write\00")
(data (i32.const 8362) "Bad inventory slot\00cannot decrement end iterator when the table is empty\00")
(data (i32.const 8435) "Material not found\00cannot decrement iterator at beginning of table\00")
(data (i32.const 8502) "Already owned\00cannot pass end iterator to modify\00cannot pass end iterator to erase\00")
(data (i32.const 8585) "eosio.ram\00object passed to modify is not in multi_index\00")
(data (i32.const 8641) "eosio.stake\00cannot modify objects in table of another contract\00")
(data (i32.const 8704) "Purchases are suspended\00updater cannot change primary key when modifying an object\00")
(data (i32.const 8787) "Invalid asset\00write\00cannot pass end iterator to modify\00")
(data (i32.const 8842) "Only EOS supported\00cannot create objects in table of another contract\00object passed to modify is not in multi_index\00")
(data (i32.const 8958) "No negs\00cannot pass end iterator to erase\00cannot modify objects in table of another contract\00")
(data (i32.const 9051) "Bad memo size\00cannot increment end iterator\00updater cannot change primary key when modifying an object\00")
(data (i32.const 9154) "Profit internal inconsistency\00object passed to iterator_to is not in multi_index\00")
(data (i32.const 9235) "Not enough EOS\00cannot increment end iterator\00")
(data (i32.const 9280) "Your profits from blocks sold! https://eosplanet.one\00")
(data (i32.const 9333) "Your referrer profit! https://eosplanet.one\00")
(data (i32.const 9377) "Out of bounds\00")
(data (i32.const 9391) "Can only mine\00")
(data (i32.const 9405) "No space left\00")
(data (i32.const 9419) "Can\'t carry more of this material!\00: no conversion\00")
(data (i32.const 9470) "No account\00: out of range\00")
(data (i32.const 9496) "No balance\00")
(data (i32.const 9507) "Your profits from https://eosplanet.one\00")
(data (i32.const 9547) "No contributions for period\00")
(data (i32.const 9575) "Period not found\00")
(data (i32.const 9592) "Period not distributing\00")
(data (i32.const 9616) "Can\'t claim current period\00")
(data (i32.const 9643) "Period spend\00")
(data (i32.const 9656) "Over distribution\00")
(data (i32.const 9674) "Your share of pot profits! https://eosplanet.one\00")
(data (i32.const 9723) "suspend\00")
(data (i32.const 9731) "purgeperiods\00")
(data (i32.const 9744) "purgecontribs\00")
(data (i32.const 9758) "purgevoxel\00")
(data (i32.const 9769) "purgechunk\00")
(data (i32.const 9780) "Contract is suspended\00")
(data (i32.const 9802) "eosio.token\00")
(data (i32.const 9814) "transfer\00")
(data (i32.const 9823) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 9887) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9936) "invalid symbol name\00")
(data (i32.const 9956) "attempt to subtract asset with different symbol\00")
(data (i32.const 10004) "subtraction underflow\00")
(data (i32.const 10026) "subtraction overflow\00")
(data (i32.const 10047) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 10106) ",\00")
(data (i32.const 10108) "Bad token size\00")
(data (i32.const 10123) "vo:\00")
(data (i32.const 10127) "Bad order data size\00")
(data (i32.const 10147) "vb:\00")
(data (i32.const 10151) "rf:\00")
(data (i32.const 10155) "Unknown token type\00")
(data (i32.const 10174) "0123456789abcdefABCDEF\00")
(data (i32.const 10197) "Invalid char\00")
(data (i32.const 10210) "Bad material type\00")
(data (i32.const 10228) "write\00")
(data (i32.const 10234) "cannot create objects in table of another contract\00")
(data (i32.const 10285) "cannot pass end iterator to modify\00")
(data (i32.const 10320) "object passed to modify is not in multi_index\00")
(data (i32.const 10366) "cannot modify objects in table of another contract\00")
(data (i32.const 10417) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10476) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 10527) "error reading iterator\00")
(data (i32.const 10550) "get\00")
(data (i32.const 10554) "read\00")
(data (i32.const 10559) "T[] size and unpacked size don\'t match\00")
(data (i32.const 10598) "attempt to add asset with different symbol\00")
(data (i32.const 10641) "addition underflow\00")
(data (i32.const 10660) "addition overflow\00")
(data (i32.const 10678) "cannot pass end iterator to erase\00")
(data (i32.const 10712) "cannot increment end iterator\00")
(data (i32.const 10742) "object passed to erase is not in multi_index\00")
(data (i32.const 10787) "cannot erase objects in table of another contract\00")
(data (i32.const 10837) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10892) "\90*\00\00")
(data (i32.const 10896) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 10929) "Voxel not found\00")
(data (i32.const 19364) "stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 19456) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 19472) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 19488) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 19504) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 19761) "\00\01\02\04\07\03\06\05\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "require_auth" (func $fimport$2 (param i64)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$6 (param i64) (result i32)))
(import "env" "action_data_size" (func $fimport$7 (result i32)))
(import "env" "read_action_data" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$9 (param i32 i32)))
(import "env" "current_time" (func $fimport$10 (result i64)))
(import "env" "db_update_i64" (func $fimport$11 (param i32 i64 i32 i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_store_i64" (func $fimport$14 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$16 (param i32)))
(import "env" "db_previous_i64" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$18 (param i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$19))
(import "env" "memmove" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$27 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$28 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$29 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$30 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$31 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$32 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$35 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$37 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$38 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$39 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $59))
(export "_Znwj" (func $104))
(export "_ZdlPv" (func $106))
(export "_Znaj" (func $105))
(export "_ZdaPv" (func $107))
(table $0 8 8 anyfunc)
(elem (i32.const 1) $46 $44 $6 $13 $64 $26 $51)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19770))
(global $global$2 i32 (i32.const 19770))


void .FUNC $98 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [80])
	$global$0 = $4
	$5 = CALL current_time()
	*($4 + [12]) = [0]
	$6 = ($0 + [176])
	*($4 + [8]) = $6
	$3 = ((uint_64)((int_64)$3 * (int_64)20) / (uint_64)(int_64)100)
	$7 = ($0 + [184])
	$8 = CALL db_lowerbound_i64(*($0 + [176]), *($7), (int_64)-6147719000974426112, (int_64)0)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$19 }
	CALL $48($6, $8)
	CALL $99(($4 + [8]))
	$8 = *($4 + [12])
	$9 = ((int_64)((int_64)*($8 + [16]) + (int_64)$3) * (int_64)200)
	$10 = *($0)
	$11 = *($8 + [24])
	if ( ((uint_64)((int_64)*($8) + (int_64)86400000000) <= (uint_64)$5) ){ goto $label$18 }
	if ( ((uint_64)$9 > (uint_64)$11) ){ goto $label$15 }
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8807])
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$6), [8912])
	CALL eosio_assert(((int_64)*(($0 + [176])) == (int_64)CALL $fimport$3()), [9000])
	*($8 + [8]) = ((int_64)*($8 + [8]) + (int_64)$2)
	*($8 + [16]) = ((int_64)*($8 + [16]) + (int_64)$3)
	$5 = *($8)
	CALL eosio_assert([1], [9095])
	*($4 + [72]) = (($4 + [16]) + [40])
	*($4 + [68]) = ($4 + [16])
	*($4 + [64]) = ($4 + [16])
	CALL $49(($4 + [64]), $8)
	CALL db_update_i64(*($8 + [44]), $10, ($4 + [16]), [40])
	$8 = ($0 + [192])
	if ( (uint_64)($5 <= *($8)) ){ goto $label$20 }
	*($8) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	CALL $100($0, $1, *(*($4 + [12])), $2)
	goto $label$7 
	
.LABEL $label$19
	$1 = *($0)
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL $fimport$3()), [8285])
	*(($8 = CALL _Znwj([56])) + [40]) = $6
	*($8 + [8]) = (int_64)0
	*($8) = $5
	*($8 + [16]) = (int_64)0
	*($8 + [24]) = $3
	*($8 + [32]) = (int_64)0
	*($4 + [72]) = (($4 + [16]) + [40])
	*($4 + [68]) = ($4 + [16])
	*($4 + [64]) = ($4 + [16])
	CALL $49(($4 + [64]), $8)
	$5 = *($8)
	$7 = CALL db_store_i64(*($7), (int_64)-6147719000974426112, $1, $5, ($4 + [16]), [40])
	*($8 + [44]) = $7
	$6 = ($0 + [192])
	if ( (uint_64)($5 <= *($6)) ){ goto $label$21 }
	*($6) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$21
	*($4 + [64]) = $8
	$5 = *($8)
	*($4 + [16]) = $5
	*($4 + [60]) = $7
	$12 = ($0 + [204])
	$6 = *($12)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [208]))) ){ goto $label$17 }
	*($6 + [8]) = $5
	*($6 + [16]) = $7
	*($4 + [64]) = [0]
	*($6) = $8
	*($12) = ($6 + [24])
	$0 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( $0 ){ goto $label$16 }
	goto $label$2 
	
.LABEL $label$18
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL $fimport$3()), [8285])
	if ( ((uint_64)$9 > (uint_64)$11) ){ goto $label$14 }
	*(($8 = CALL _Znwj([56])) + [40]) = $6
	*($8 + [8]) = $2
	*($8) = $5
	*($8 + [16]) = $3
	*($8 + [24]) = (int_64)0
	*($8 + [32]) = (int_64)0
	*($4 + [72]) = (($4 + [16]) + [40])
	*($4 + [68]) = ($4 + [16])
	*($4 + [64]) = ($4 + [16])
	CALL $49(($4 + [64]), $8)
	$3 = *($8)
	$12 = CALL db_store_i64(*(($0 + [184])), (int_64)-6147719000974426112, $10, $3, ($4 + [16]), [40])
	*($8 + [44]) = $12
	$7 = ($0 + [192])
	if ( (uint_64)($3 <= *($7)) ){ goto $label$22 }
	*($7) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$22
	*($4 + [64]) = $8
	$3 = *($8)
	*($4 + [16]) = $3
	*($4 + [60]) = $12
	$13 = ($0 + [204])
	$7 = *($13)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [208]))) ){ goto $label$13 }
	*($7 + [8]) = $3
	*($7 + [16]) = $12
	*($4 + [64]) = [0]
	*($7) = $8
	*($13) = ($7 + [24])
	$8 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( $8 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$17
	CALL $87(($0 + [200]), ($4 + [64]), ($4 + [16]), ($4 + [60]))
	$0 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$16
	CALL _ZdlPv($0)
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$15
	CALL eosio_assert(((int_64)*(($0 + [176])) == (int_64)CALL $fimport$3()), [8285])
	*(($8 = CALL _Znwj([56])) + [40]) = $6
	*($8 + [16]) = (int_64)0
	*($8 + [8]) = (int_64)0
	*($8) = $5
	*($8 + [32]) = (int_64)0
	$7 = *($4 + [12])
	*($8 + [24]) = ((int_64)((int_64)*($7 + [24]) + (int_64)$3) + (int_64)*($7 + [16]))
	*($4 + [72]) = (($4 + [16]) + [40])
	*($4 + [68]) = ($4 + [16])
	*($4 + [64]) = ($4 + [16])
	CALL $49(($4 + [64]), $8)
	$5 = *($8)
	$12 = CALL db_store_i64(*(($0 + [184])), (int_64)-6147719000974426112, $10, $5, ($4 + [16]), [40])
	*($8 + [44]) = $12
	$7 = ($0 + [192])
	if ( (uint_64)($5 <= *($7)) ){ goto $label$23 }
	*($7) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	*($4 + [64]) = $8
	$5 = *($8)
	*($4 + [16]) = $5
	*($4 + [60]) = $12
	$13 = ($0 + [204])
	$7 = *($13)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [208]))) ){ goto $label$10 }
	*($7 + [8]) = $5
	*($7 + [16]) = $12
	*($4 + [64]) = [0]
	*($7) = $8
	*($13) = ($7 + [24])
	$7 = *($4 + [64])
	$8 = [0]
	*($4 + [64]) = [0]
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$14
	*(($8 = CALL _Znwj([56])) + [40]) = $6
	*($8 + [8]) = (int_64)0
	*($8) = $5
	*($8 + [16]) = (int_64)0
	*($8 + [24]) = $3
	*($8 + [32]) = (int_64)0
	*($4 + [72]) = (($4 + [16]) + [40])
	*($4 + [68]) = ($4 + [16])
	*($4 + [64]) = ($4 + [16])
	CALL $49(($4 + [64]), $8)
	$5 = *($8)
	$12 = CALL db_store_i64(*(($0 + [184])), (int_64)-6147719000974426112, $10, $5, ($4 + [16]), [40])
	*($8 + [44]) = $12
	$7 = ($0 + [192])
	if ( (uint_64)($5 <= *($7)) ){ goto $label$24 }
	*($7) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$24
	*($4 + [64]) = $8
	$5 = *($8)
	*($4 + [16]) = $5
	*($4 + [60]) = $12
	$13 = ($0 + [204])
	$7 = *($13)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [208]))) ){ goto $label$6 }
	*($7 + [8]) = $5
	*($7 + [16]) = $12
	*($4 + [64]) = [0]
	*($7) = $8
	*($13) = ($7 + [24])
	$0 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( $0 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$13
	CALL $87(($0 + [200]), ($4 + [64]), ($4 + [16]), ($4 + [60]))
	$8 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($8 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv($8)
	
.LABEL $label$11
	CALL $100($0, $1, $5, $2)
	$0 = *($4 + [12])
	$5 = *($0 + [16])
	if ( ((int_64)($5 == 0) == 0) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$10
	CALL $87(($0 + [200]), ($4 + [64]), ($4 + [16]), ($4 + [60]))
	$7 = *($4 + [64])
	$8 = [0]
	*($4 + [64]) = [0]
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$5 = *($4 + [8])
	$7 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)
	$12 = ((int_32)$7) != (int_32)$8
	CALL eosio_assert($12), [8551])
	CALL eosio_assert($12, [9250])
	$12 = CALL db_next_i64(*($7 + [44]), ($4 + [16]))
	if ( ((int_32)$12 < (int_32)$8) ){ goto $label$25 }
	CALL $48((CASTING uint_32)(uint_64 $5), $12)
	
.LABEL $label$25
	CALL $54($6, $7)
	
.LABEL $label$7
	CALL $101($0, $1)
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$6
	CALL $87(($0 + [200]), ($4 + [64]), ($4 + [16]), ($4 + [60]))
	$0 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$0 = *($4 + [12])
	$5 = *($0 + [16])
	if ( (int_64)($5 == 0) ){ goto $label$1 }
	
.LABEL $label$3
	if ( ((int_64)((int_64)$5 * (int_64)200) >= (int_64)*($0 + [24])) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$1
	$5 = *($4 + [8])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)
	$8 = ((int_32)$0) != (int_32)[0]
	CALL eosio_assert($8), [8551])
	CALL eosio_assert($8, [9250])
	$8 = CALL db_next_i64(*($0 + [44]), ($4 + [16]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$26 }
	CALL $48((CASTING uint_32)(uint_64 $5), $8)
	
.LABEL $label$26
	CALL $54($6, $0)
	$global$0 = ($4 + [80])
}

int_32 .FUNC $99 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [44]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8454])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6147719000974426112)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8381])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8381])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $48(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $94 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($0 + [56])
	$4 = (uint_64)$1 >> (uint_64)(int_64)3)
	$6 = *(($0 + [84]))
	$5 = *(($0 + [80]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$6:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$5 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($8 + [136]) == (int_32)$3), [8205])
	if ( $8 ){ goto $label$3 }
	return [0]
	
.LABEL $label$4
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [64])), (int_64)-2505504610827894784, $4)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $55($3, $6)
	CALL eosio_assert(((int_32)*($8 + [136]) == (int_32)$3), [8205])
	
.LABEL $label$3
	$7 = ($8 + (((CASTING uint_32)(uint_64 $1) & [7]) << [4]))
	$4 = *(($7 + [8]))
	if ( (int_64)($4 == 0) ){ goto $label$1 }
	*($2) = $1
	*($2 + [16]) = $4
	*($2 + [8]) = *(($7 + [16]))
	$7 = [1]
	
.LABEL $label$2
	return $7
	
.LABEL $label$1
	return [0]
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [128])
	$global$0 = $2
	$3 = ($0 + [56])
	$4 = *($1)
	$5 = ((int_64)$4 & (int_64)7)
	$4 = (uint_64)$4 >> (uint_64)(int_64)3)
	$7 = *(($0 + [84]))
	$6 = *(($0 + [80]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$6:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$4) ){ goto $label$5 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($9 + [136]) == (int_32)$3), [8205])
	goto $label$3 
	
.LABEL $label$4
	$7 = ($0 + [64])
	$8 = CALL db_find_i64(*($3), *($7), (int_64)-2505504610827894784, $4)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $55($3, $8)
	CALL eosio_assert(((int_32)*($9 + [136]) == (int_32)$3), [8205])
	
.LABEL $label$3
	$10 = *($0)
	CALL eosio_assert([1], [8516])
	CALL eosio_assert(((int_32)*($9 + [136]) == (int_32)$3), [8595])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$3()), [8653])
	*(($7 = (($8 = ($9 + [8])) + ((CASTING uint_32)(uint_64 $5) << [4]))) + [8]) = *(($1 + [8]))
	*($7) = *(($1 + [16]))
	$4 = *($9)
	CALL eosio_assert([1], [8728])
	*($2 + [120]) = (($2 + [16]) + [81])
	*($2 + [112]) = ($2 + [16])
	CALL eosio_assert([1], [8801])
	CALL memcpy(($2 + [16]), $9, [8])
	*($2 + [116]) = (($2 + [16]) | [8])
	CALL $96(($2 + [112]), $8)
	CALL db_update_i64(*($9 + [140]), $10, ($2 + [16]), [81])
	$8 = ($0 + [72])
	if ( (uint_64)($4 <= *($8)) ){ goto $label$1 }
	*($8) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($2 + [128])
	return 
	
.LABEL $label$2
	$10 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$3()), [8861])
	*(($8 = CALL _Znwj([152])) + [136]) = $3
	*($8 + [8]) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [40]) = (int_64)0
	*($8 + [56]) = (int_64)0
	*($8 + [72]) = (int_64)0
	*($8 + [88]) = (int_64)0
	*($8 + [104]) = (int_64)0
	*($8 + [120]) = (int_64)0
	*($8) = $4
	*(($6 = (($9 = ($8 + [8])) + ((CASTING uint_32)(uint_64 $5) << [4])))) = *($1 + [16])
	*($6 + [8]) = *($1 + [8])
	*($2 + [120]) = (($2 + [16]) + [81])
	*($2 + [112]) = ($2 + [16])
	CALL eosio_assert([1], [8801])
	CALL memcpy(($2 + [16]), $8, [8])
	*($2 + [116]) = (($2 + [16]) | [8])
	CALL $96(($2 + [112]), $9)
	$4 = *($8)
	$9 = CALL db_store_i64(*($7), (int_64)-2505504610827894784, $10, $4, ($2 + [16]), [81])
	*($8 + [140]) = $9
	$7 = ($0 + [72])
	if ( (uint_64)($4 <= *($7)) ){ goto $label$7 }
	*($7) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($2 + [112]) = $8
	$4 = *($8)
	*($2 + [16]) = $4
	*($2 + [12]) = $9
	$6 = ($0 + [84])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [88]))) ){ goto $label$9 }
	*($7 + [8]) = $4
	*($7 + [16]) = $9
	*($2 + [112]) = [0]
	*($7) = $8
	*($6) = ($7 + [24])
	$8 = *($2 + [112])
	*($2 + [112]) = [0]
	if ( $8 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$9
	CALL $89(($0 + [80]), ($2 + [112]), ($2 + [16]), ($2 + [12]))
	$8 = *($2 + [112])
	*($2 + [112]) = [0]
	if ( ($8 == 0) ){ goto $label$1 }
	
.LABEL $label$8
	CALL _ZdlPv($8)
	
.LABEL $label$1
	$global$0 = ($2 + [128])
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	*($2 + [15]) = [8]
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [8801])
	CALL memcpy(*($0 + [4]), ($2 + [15]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8801])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [8801])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8801])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [8801])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8801])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [8801])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8801])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [8801])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8801])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [8801])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8801])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [8801])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8801])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [8801])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8801])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [8801])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $97 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [112])
	$global$0 = $2
	$3 = ($0 + [56])
	$4 = (uint_64)$1 >> (uint_64)(int_64)3)
	$6 = *(($0 + [84]))
	$5 = *(($0 + [80]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [136]) == (int_32)$3), [8205])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($3), *(($0 + [64])), (int_64)-2505504610827894784, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $55($3, $7)
	CALL eosio_assert(((int_32)*($8 + [136]) == (int_32)$3), [8205])
	
.LABEL $label$1
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [10929])
	$9 = *($0)
	CALL eosio_assert($7, [8516])
	CALL eosio_assert(((int_32)*($8 + [136]) == (int_32)$3), [8595])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$3()), [8653])
	*((($6 = ($8 + [8])) + (((CASTING uint_32)(uint_64 $1) & [7]) << [4]))) = (int_64)0
	$4 = *($8)
	CALL eosio_assert([1], [8728])
	*($2 + [104]) = ($2 + [81])
	*($2 + [96]) = $2
	CALL eosio_assert([1], [8801])
	CALL memcpy($2, $8, [8])
	*($2 + [100]) = ($2 | [8])
	CALL $96(($2 + [96]), $6)
	CALL db_update_i64(*($8 + [140]), $9, $2, [81])
	$6 = ($0 + [72])
	if ( (uint_64)($4 <= *($6)) ){ goto $label$5 }
	*($6) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	if ( ((int_64)*($8 + [8]) != (int_64)0) ){ goto $label$6 }
	if ( ((int_64)(*(($8 + [24])) == 0) == 0) ){ goto $label$6 }
	if ( ((int_64)*(($8 + [40])) != (int_64)0) ){ goto $label$6 }
	if ( ((int_64)*(($8 + [56])) != (int_64)0) ){ goto $label$6 }
	if ( ((int_64)*(($8 + [72])) != (int_64)0) ){ goto $label$6 }
	if ( ((int_64)*(($8 + [88])) != (int_64)0) ){ goto $label$6 }
	if ( ((int_64)*(($8 + [104])) != (int_64)0) ){ goto $label$6 }
	if ( ((int_64)*(($8 + [120])) != (int_64)0) ){ goto $label$6 }
	CALL eosio_assert($7, [8966])
	CALL eosio_assert($7, [9065])
	$7 = CALL db_next_i64(*(($8 + [140])), $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	CALL $55($3, $7)
	
.LABEL $label$7
	CALL $56($3, $8)
	
.LABEL $label$6
	$global$0 = ($2 + [112])
}

void .FUNC $90 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = $1
	CALL $91(($2 + [8]), ($2 + [24]))
	$3 = ($0 + [8])
	$8 = *($0 + [8])
	$9 = (*(($0 + [12])) - $8)
	$5 = ($5 & [1])
	$5 = *($2 + [8])
	$6 = uint_32($5 >> [1])
	$4 = *($2 + [12])
	$7 = ( $4 ? $6 : $5 )
	if ( ((uint_32)$7 <= (uint_32)$9) ){ goto $label$2 }
	CALL $41($3, ($7 - $9))
	$0 = *($2 + [8])
	$6 = uint_32($0 >> [1])
	$5 = ($0 & [1])
	$4 = *($2 + [12])
	goto $label$1 
	
.LABEL $label$2
	if ( ((uint_32)$7 >= (uint_32)$9) ){ goto $label$1 }
	*(($0 + [12])) = ($8 + $7)
	
.LABEL $label$1
	$0 = ( *($2 + [16]) ? (($2 + [8]) | [1]) : $5 )
	CALL $92($3, $0, ($0 + ( $4 ? $6 : $5 )))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$3
	$global$0 = ($2 + [32])
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = CALL _Znwj([16])
	*($0 + [8]) = $3
	*($0) = (int_64)55834574865
	CALL memset($3, [46], [13])
	*($3 + [13]) = [0]
	$5 = *($1)
	$1 = (CASTING uint_32)(uint_64 $5)
	$4 = *([0] + [10892])
	*($3 + [12]) = *(($4 + ($1 & [15])))
	*($3 + [11]) = *(($4 + (uint_32($1 >> [4]) & [31])))
	*($3 + [10]) = *(($4 + (uint_32($1 >> [9]) & [31])))
	*($3 + [9]) = *(($4 + (uint_32($1 >> [14]) & [31])))
	*($3 + [8]) = *(($4 + (uint_32($1 >> [19]) & [31])))
	*($3 + [7]) = *(($4 + (uint_32($1 >> [24]) & [31])))
	*($3 + [6]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)29)) & [31])))
	*($3 + [5]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)34)) & [31])))
	*($3 + [4]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)39)) & [31])))
	*($3 + [3]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)44)) & [31])))
	*($3 + [2]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)49)) & [31])))
	*($3 + [1]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)54)) & [31])))
	*(*($0 + [8])) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)59))))
	$4 = ($3 & [1])
	$3 = *($0)
	$3 = ( *($0 + [4]) ? uint_32($3 >> [1]) : $4 )
	$1 = ( *($0 + [8]) ? ($0 + [1]) : $4 )
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($1 + $3)
	$6 = ($3 + [-1])
	$3 = $6
	if ( ((int_32)*(($4 + [-1])) == (int_32)[46]) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$1 }
	CALL $110($2, $0, [0], ($6 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$4 }
	*($0) = [0]
	goto $label$3 
	
.LABEL $label$4
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$3
	CALL $112($0, [0])
	*(($0 + [8])) = *(($2 + [8]))
	*($0) = *($2)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($4 - $5)) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$6 = [2147483647]
	if ( ((uint_32)$4 > (uint_32)[1073741822]) ){ goto $label$6 }
	$4 = ($4 << [1])
	$6 = ( $3 ? $4 : ($4 <= $3) )
	
.LABEL $label$6
	$4 = CALL _Znwj($6)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $6)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$3 }
	$6 = ($0 + [4])
	
.LOOP $label$7:
	*($4) = *($1)
	$4 = (*($6) + [1])
	*($6) = $4
	$1 = ($1 + [1])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$7 = (*($0 + [4]) - $5)
	$8 = ($1 + $7)
	$9 = ( $8 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$8 }
	$4 = $5
	$6 = $1
	
.LOOP $label$9:
	*($4) = *($6)
	$4 = ($4 + [1])
	$6 = ($6 + [1])
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$9 }
	$5 = ($5 + ($9 - $1))
	
.LABEL $label$8
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$2 }
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$3 }
	$1 = ($0 + [4])
	$4 = *($1)
	
.LOOP $label$10:
	*($4) = *($8)
	$4 = (*($1) + [1])
	*($1) = $4
	$8 = ($8 + [1])
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$10 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = $5
	return (unreachable)
	
.LABEL $label$1
	CALL $121($0)
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [10228])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [10228])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $138 (int_32 $0)
{
	return CALL $139([10968], $0)
}

void .FUNC $123 (int_32 $0)
{
}

int_32 .FUNC $115 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $136([19364])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [19364], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $122())
	*(CALL $122()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $133($4, ($3 + [12]), $2)
	$5 = CALL $122()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $116($3)
	
.LABEL $label$1
	CALL $117($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $122 ()
{
	return [10952]
}

void .FUNC $130 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $131 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $129($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_64 .FUNC $132 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $131($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $122()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $131($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [19505]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $130($0, (int_64)0)
	*(CALL $122()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $131($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $131($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $131($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $131($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [19505])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $131($0)
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $131($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [19761]))
	$8 = (int_64)0
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $131($0)
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $131($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $130($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [19505]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [19505]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $131($0) + [19505]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $122()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $122()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $122()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $133 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $130($3, (int_64)0)
	$4 = CALL $132($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $134 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $121 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $136 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*((($2 = ($global$0 - [32])) + [24])) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$3 }
	if ( (*($1 + [1]) == 0) ){ goto $label$2 }
	$1 = ($1 + [1])
	
.LOOP $label$4:
	*(($4 = ($2 + (uint_32($3 >> [3]) & [28])))) = (*($4) | ([1] << ($3 & [31])))
	$3 = *($1)
	$1 = ($1 + [1])
	if ( $3 ){ goto $label$4 }
	$4 = $0
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$5 }
	$1 = $0
	
.LOOP $label$6:
	if ( ((*(($2 + (uint_32($3 >> [3]) & [28]))) & ([1] << ($3 & [31]))) == 0) ){ goto $label$1 }
	$3 = *($1 + [1])
	$4 = ($1 + [1])
	$1 = $4
	if ( $3 ){ goto $label$6 }
	
.LABEL $label$5
	return ($4 - $0)
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	$1 = ($0 + [-1])
	
.LOOP $label$7:
	$1 = ($1 + [1])
	if ( ((int_32)*($1) == (int_32)$3) ){ goto $label$7 }
	return ($1 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $120 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [9887])
	$4 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9936])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($3 + [12]) = $1
	*($3 + [8]) = $1
	*($3 + [16]) = ($1 + $2)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($0 + [8])
	*($3 + [32]) = $0
	*($3 + [40]) = ($0 + [16])
	*($3 + [44]) = ($0 + [32])
	CALL $84(($3 + [32]), ($3 + [24]))
	$global$0 = ($3 + [48])
}

int_64 .FUNC $126 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10228])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10228])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10228])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10228])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10228])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10527])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $138($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [40]) = $0
	CALL $86(($3 + [32]), $5)
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $87(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $141($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_64 .FUNC $125 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $127($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $124($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [19472])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [19456]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [19488]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $126($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $41($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [10228])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [10228])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $74(CALL $73($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10228])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10228])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10228])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [10228])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $93(*($1), ($0 + [32]))
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $121($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *((*($4) + [24]))
	$5 = *($0)
	CALL $90($1, *(*(($4 + [4]))))
	$7 = *($1 + [8])
	$6 = *(($1 + [12]))
	$4 = (($6 + [8]) - $7)
	$8 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$9 = CALL $138($4)
	goto $label$2 
	
.LABEL $label$3
	$9 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $9
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [10228])
	CALL memcpy($9, $1, [8])
	$8 = (CASTING uint_64)(uint_32 (*(($1 + [12])) - *(($1 + [8]))))
	$2 = ($9 + [8])
	$10 = ($9 + $4)
	
.LOOP $label$4:
	$6 = (CASTING uint_32)(uint_64 $8)
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	$7 = ((int_64)$8) != (int_64)0
	*($3 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)($10 - $2) > (int_32)[0]), [10228])
	CALL memcpy($2, ($3 + [15]), [1])
	$2 = ($2 + [1])
	if ( $7 ){ goto $label$4 }
	$6 = *(($1 + [8]))
	$7 = (*(($1 + [12])) - $6)
	CALL eosio_assert(((int_32)($10 - $2) >= (int_32)$7), [10228])
	CALL memcpy($2, $6, $7)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($5 + [8]), (int_64)4982871469126582272, *(*($0 + [8])), $8, $9, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $141($9)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10527])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $138($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10554])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [10554])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $85(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $141($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $46 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL require_auth($1)
	*(($3 + [88])) = [0]
	*($3 + [64]) = $1
	*($3 + [72]) = (int_64)-1
	*($3 + [80]) = (int_64)0
	$4 = *($0)
	*($3 + [56]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $1, (int_64)4983122731492682032, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $47(($3 + [56]), $6)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($3 + [56])), [10476])
	
.LABEL $label$1
	$7 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($7, [9547])
	$8 = ($0 + [176])
	$10 = *(($0 + [204]))
	$9 = *(($0 + [200]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($10 + [-24])
	$11 = *($6)
	if ( ((int_64)*($11) == (int_64)$2) ){ goto $label$4 }
	$10 = $6
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)$8), [10476])
	goto $label$2 
	
.LABEL $label$3
	$11 = [0]
	$6 = CALL db_find_i64(*($8), *(($0 + [184])), (int_64)-6147719000974426112, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$11 = CALL $48($8, $6)
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)$8), [10476])
	
.LABEL $label$2
	$6 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($6, [9575])
	CALL eosio_assert(((int_64)((int_64)*($11 + [16]) * (int_64)200) < (int_64)*($11 + [24])), [9592])
	$2 = CALL current_time()
	$4 = *($11)
	CALL eosio_assert((((uint_64)$4 > (uint_64)$2) | ((uint_64)((int_64)$4 + (int_64)86400000000) <= (uint_64)$2)), [9616])
	CALL eosio_assert(((int_64)*($11 + [8]) > (int_64)0), [9643])
	$4 = ((int_64)*($11 + [24]) + (int_64)*($11 + [16]))
	$2 = ((int_64)((int_64)$4 * (int_64)*($5 + [8])) / (int_64)*($11 + [8]))
	CALL eosio_assert(((int_64)((int_64)*($11 + [32]) + (int_64)$2) <= (int_64)$4), [9656])
	$12 = *($0)
	CALL eosio_assert($6, [10285])
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)$8), [10320])
	CALL eosio_assert(((int_64)*(($0 + [176])) == (int_64)CALL $fimport$3()), [10366])
	*($11 + [32]) = ((int_64)*($11 + [32]) + (int_64)$2)
	$4 = *($11)
	CALL eosio_assert([1], [10417])
	*($3 + [152]) = (($3 + [96]) + [40])
	*($3 + [148]) = ($3 + [96])
	*($3 + [144]) = ($3 + [96])
	CALL $49(($3 + [144]), $11)
	CALL db_update_i64(*($11 + [44]), $12, ($3 + [96]), [40])
	$6 = ($0 + [192])
	if ( (uint_64)($4 <= *($6)) ){ goto $label$6 }
	*($6) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	CALL eosio_assert($7, [10678])
	CALL eosio_assert($7, [10712])
	$6 = CALL db_next_i64(*($5 + [20]), ($3 + [96]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	CALL $47(($3 + [56]), $6)
	
.LABEL $label$7
	CALL $50(($3 + [56]), $5)
	if ( ((int_64)$2 < (int_64)1) ){ goto $label$9 }
	*($3 + [48]) = (int_64)1397703940
	*($3 + [40]) = $2
	$12 = *($0)
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9887])
	$2 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$2 = $4
	$11 = [1]
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$2 = $4
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$11 = ((int_32)$6 < (int_32)[6])
	$10 = ($6 + [1])
	$6 = $10
	if ( $11 ){ goto $label$14 }
	$11 = [1]
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$11 = [0]
	
.LABEL $label$10
	CALL eosio_assert($11, [9936])
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	$6 = CALL $136([9674])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$17 }
	*($3 + [24]) = ($6 << [1])
	$11 = (($3 + [24]) | [1])
	if ( $6 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$10 = (($6 + [16]) & [-16])
	$11 = CALL _Znwj($10)
	*($3 + [24]) = ($10 | [1])
	*($3 + [32]) = $11
	*($3 + [28]) = $6
	
.LABEL $label$16
	CALL memcpy($11, [9674], $6)
	
.LABEL $label$15
	*(($11 + $6)) = [0]
	*((($3 + [8]) + [8])) = *((($3 + [40]) + [8]))
	*($3 + [8]) = *($3 + [40])
	CALL $33($0, $12, $1, ($3 + [8]), ($3 + [24]))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($3 + [32]))
	
.LABEL $label$9
	$10 = *($3 + [80])
	if ( ($10 == 0) ){ goto $label$18 }
	$9 = ($3 + [84])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$20 }
	
.LOOP $label$21:
	$6 = ($6 + [-24])
	$11 = *($6)
	*($6) = [0]
	if ( ($11 == 0) ){ goto $label$22 }
	CALL _ZdlPv($11)
	
.LABEL $label$22
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$21 }
	$6 = *(($3 + [80]))
	goto $label$19 
	
.LABEL $label$20
	$6 = $10
	
.LABEL $label$19
	*($9) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$18
	$global$0 = ($3 + [160])
	return (unreachable)
	
.LABEL $label$8
	CALL $108(($3 + [24]))
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10366])
	$5 = *($1)
	CALL eosio_assert([1], [9887])
	$6 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [9936])
	*(($1 + [16])) = (int_64)1397703940
	*($1 + [8]) = (int_64)0
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10417])
	$10 = *($1 + [72])
	$9 = *(($1 + [76]))
	$7 = (($9 + [72]) - $10)
	$6 = (CASTING uint_64)(uint_32 ($9 - $10))
	
.LOOP $label$6:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$6 }
	if ( ($7 <= [513]) ){ goto $label$8 }
	$9 = CALL $138($7)
	goto $label$7 
	
.LABEL $label$8
	$9 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $9
	
.LABEL $label$7
	*($4 + [4]) = $9
	*($4) = $9
	*($4 + [8]) = ($9 + $7)
	CALL $81($4, $1)
	CALL db_update_i64(*($1 + [88]), $2, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$11 }
	CALL $141($9)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	
.LABEL $label$10
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [16])
}

void .FUNC $44 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth($1)
	$3 = ($0 + [216])
	$5 = *(($0 + [244]))
	$4 = *(($0 + [240]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [84]) == (int_32)$3), [10476])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [224])), (int_64)3607749778735104000, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $7($3, $6)
	CALL eosio_assert(((int_32)*($7 + [84]) == (int_32)$3), [10476])
	
.LABEL $label$1
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [9470])
	CALL eosio_assert([1], [9887])
	$9 = ($7 + [8])
	$10 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$10 = $11
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$10 = $11
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$9 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$5 = [0]
	
.LABEL $label$5
	CALL eosio_assert($5, [9936])
	CALL eosio_assert(((int_64)*(($7 + [16])) == (int_64)1397703940), [10047])
	CALL eosio_assert(((int_64)*($7 + [8]) > (int_64)0), [9496])
	*((($2 + [32]) + [8])) = *(($9 + [8]))
	$10 = *($9)
	*((($2 + [16]) + [8])) = [0]
	*($2 + [16]) = (int_64)0
	*($2 + [32]) = $10
	$10 = *($0)
	$6 = CALL $136([9507])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$13 }
	*($2 + [16]) = ($6 << [1])
	$5 = (($2 + [16]) | [1])
	if ( $6 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [16]) = ($4 | [1])
	*($2 + [24]) = $5
	*($2 + [20]) = $6
	
.LABEL $label$12
	CALL memcpy($5, [9507], $6)
	
.LABEL $label$11
	*(($5 + $6)) = [0]
	*(($2 + [8])) = *((($2 + [32]) + [8]))
	*($2) = *($2 + [32])
	CALL $33($0, $10, $1, $2, ($2 + [16]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($2 + [24]))
	
.LABEL $label$14
	$10 = *($0)
	CALL eosio_assert($8, [10285])
	CALL $45($3, $7, $10)
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$10
	CALL $108(($2 + [16]))
}

int_64 .FUNC $124 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_32 .FUNC $128 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $8 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10366])
	$6 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [32]))), [10598])
	$7 = ((int_64)*($1 + [24]) + (int_64)*($3))
	*($1 + [24]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [10641])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [10660])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [10417])
	$9 = *($1 + [72])
	$8 = *(($1 + [76]))
	$3 = (($8 + [72]) - $9)
	$7 = (CASTING uint_64)(uint_32 ($8 - $9))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $138($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $81($5, $1)
	CALL db_update_i64(*($1 + [88]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $141($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $9 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [16]) = $1
	$3 = ($0 + [136])
	$1 = *($0 + [40])
	$5 = *(($0 + [164]))
	$4 = *(($0 + [160]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)$3), [10476])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [144])), (int_64)4982871469126582272, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $4($3, $6)
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)$3), [10476])
	
.LABEL $label$2
	$1 = *($0)
	*($2 + [32]) = ($2 + [16])
	CALL eosio_assert([1], [10285])
	CALL $10($3, $7, $1, ($2 + [32]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($2 + [8]) = $0
	*($2 + [12]) = ($2 + [16])
	*($2 + [56]) = $1
	CALL eosio_assert(((int_64)*(($0 + [136])) == (int_64)CALL $fimport$3()), [10234])
	*($2 + [32]) = $3
	*($2 + [36]) = ($2 + [8])
	*($2 + [40]) = ($2 + [56])
	*(($6 = CALL _Znwj([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $3
	CALL $11(($2 + [32]), $6)
	*($2 + [48]) = $6
	$1 = *($6)
	*($2 + [32]) = $1
	$7 = *($6 + [24])
	*($2 + [28]) = $7
	$4 = ($0 + [164])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [168]))) ){ goto $label$8 }
	*($5 + [8]) = $1
	*($5 + [16]) = $7
	*($2 + [48]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	$6 = *($2 + [48])
	*($2 + [48]) = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $12(($0 + [160]), ($2 + [48]), ($2 + [32]), ($2 + [28]))
	$6 = *($2 + [48])
	*($2 + [48]) = [0]
	if ( $6 ){ goto $label$6 }
	
.LABEL $label$7
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$6
	$5 = *($6 + [8])
	if ( ($5 == 0) ){ goto $label$9 }
	*(($6 + [12])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$9
	CALL _ZdlPv($6)
	$global$0 = ($2 + [64])
}

void .FUNC $6 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8192]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($7)
	$10 = ($0 + [216])
	$9 = *(($0 + [244]))
	$11 = *(($0 + [240]))
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$6 }
	
.LOOP $label$8:
	$6 = ($9 + [-24])
	$12 = *($6)
	if ( ((int_64)*($12) == (int_64)$1) ){ goto $label$7 }
	$9 = $6
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($12 + [84]) == (int_32)$10), [10476])
	goto $label$5 
	
.LABEL $label$6
	$12 = [0]
	$6 = CALL db_find_i64(*($10), *(($0 + [224])), (int_64)3607749778735104000, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$12 = CALL $7($10, $6)
	CALL eosio_assert(((int_32)*($12 + [84]) == (int_32)$10), [10476])
	
.LABEL $label$5
	$6 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($6, [8256])
	$4 = *($0)
	*($3 + [8]) = $2
	CALL eosio_assert($6, [10285])
	CALL $8($10, $12, $4, ($3 + [8]))
	CALL $9($0, *($2))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10527])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $138($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	$5 = CALL _Znwj([96])
	$6 = CALL $28($5)
	*($5 + [84]) = $0
	CALL $78(($3 + [32]), $6)
	*($5 + [88]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $30(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $141($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [72])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [76])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10527])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $138($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([32])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [20]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10554])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $77(($3 + [32]), ($5 + [8]))
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $12(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $141($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $5 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	float_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL $1(($3 + [40]), $1, $2, $1)
	$4 = *(($3 + [64]))
	*(($3 + [32])) = $4
	*($3 + [24]) = *($3 + [56])
	CALL eosio_assert(((int_64)$4 == (int_64)*($3 + [48])), [9956])
	$5 = (int_64)
	*($3 + [24]) = $5(*($3 + [24]) - *($3 + [40])))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [10004])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [10026])
	$6 = CALL $125((float_64)2, (CASTING float_64)(uint_32 ((CASTING uint_32)(uint_64 ((uint_64)*($3 + [40]) / (uint_64)((uint_64)*($3 + [56]) / (uint_64)(int_64)20))) & [255])))
	*($3 + [16]) = (int_64)297666170116
	$6 = ((float_64)((float_64)(float_64)400 / (float_64)$6) * (float_64)(CASTING float_64)(int_64 $2))
	if ( ((float_64)(float_64)|$6| < (float_64)(float_64)9223372036854775808) ){ goto $label$2 }
	$7 = (int_64)-9223372036854775808
	goto $label$1 
	
.LABEL $label$2
	$7 = (Rounds 0)($6)
	
.LABEL $label$1
	*($3 + [8]) = $7
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9887])
	$2 = (int_64)1162758477
	$1 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$8 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$2 = $8
	$9 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$2 = $8
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$9 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $9 ){ goto $label$7 }
	$9 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	
.LABEL $label$3
	CALL eosio_assert($9, [9936])
	CALL eosio_assert(((int_64)$4 == (int_64)297666170116), [10047])
	$1 = ( ($3 + [8]) ? ($3 + [24]) : ((int_64)$5 > (int_64)$7) )
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	$global$0 = ($3 + [80])
}

int_32 .FUNC $2 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [9887])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9936])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [9887])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $3
	$6 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$1 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [9936])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [9936])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [9936])
	return $0
}

int_64 .FUNC $3 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($0 + [136])
	$2 = *($0 + [40])
	$4 = *(($0 + [164]))
	$3 = *(($0 + [160]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$5:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$2) ){ goto $label$4 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$1), [10476])
	if ( $6 ){ goto $label$2 }
	return (int_64)0
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *(($0 + [144])), (int_64)4982871469126582272, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $4($1, $5)
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$1), [10476])
	
.LABEL $label$2
	$2 = *(*($6 + [8]))
	return ( (int_64)0 ? ((int_64)$2 + (int_64)20000000000) : ((int_64)$2 < (int_64)0) )
	
.LABEL $label$1
	return (int_64)0
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$4 = CALL $2($0)
	$5 = CALL $3($1)
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9887])
	$6 = (int_64)1162758477
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$0 = [1]
	$8 = $1
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$0 = ((int_32)$1 < (int_32)[6])
	$8 = ($1 + [1])
	$1 = $8
	if ( $0 ){ goto $label$5 }
	$0 = [1]
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	CALL eosio_assert($0, [9936])
	*($4 + [8]) = (int_64)297666170116
	*($4) = $5
	CALL eosio_assert([1], [9887])
	$6 = (int_64)1162758477
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$6 = $7
	$0 = [1]
	$8 = $1
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$6 = $7
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$0 = ((int_32)$1 < (int_32)[6])
	$8 = ($1 + [1])
	$1 = $8
	if ( $0 ){ goto $label$10 }
	$0 = [1]
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$0 = [0]
	
.LABEL $label$6
	CALL eosio_assert($0, [9936])
	*(($4 + [24])) = (int_64)297666170116
	*($4 + [16]) = (int_64)100000000000
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$2 = ($global$0 - [80])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($2 + [72]) = [0]
	*($2 + [64]) = (int_64)0
	$3 = ($1 + [1])
	$4 = (($2 + [64]) + [8])
	$5 = ($1 + [4])
	
.LOOP $label$2:
	$6 = *($1)
	if ( ($6 & [1]) ){ goto $label$6 }
	$7 = uint_32($6 >> [1])
	$8 = $3
	$6 = CALL $136([10106])
	if ( ($6 == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$7 = *($5)
	$8 = *(($1 + [8]))
	$6 = CALL $136([10106])
	if ( $6 ){ goto $label$4 }
	
.LABEL $label$5
	$6 = [0]
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$1 }
	$9 = ($8 + $7)
	$10 = $8
	
.LOOP $label$7:
	$7 = (($7 - $6) + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	$7 = CALL $134($10, [44], $7)
	if ( ($7 == 0) ){ goto $label$1 }
	if ( (CALL $135($7, [10106], $6) == 0) ){ goto $label$8 }
	$10 = ($7 + [1])
	$7 = ($9 - $10)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$1 }
	$6 = ($7 - $8)
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$3
	$7 = CALL $110(($2 + [48]), $1, [0], $6, $1)
	$10 = *($2 + [68])
	if ( ((uint_32)$10 >= (uint_32)*($4)) ){ goto $label$10 }
	CALL $109($10, $7)
	*($2 + [68]) = (*($2 + [68]) + [12])
	goto $label$9 
	
.LABEL $label$10
	CALL $22(($2 + [64]), $7)
	
.LABEL $label$9
	CALL $113($1, [0], ($6 + [1]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*((($2 + [48]) + [8])))
	goto $label$2 
	
.LABEL $label$1
	$6 = *($1)
	if ( ($6 & [1]) ){ goto $label$20 }
	if ( uint_32($6 >> [1]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	if ( (*(($1 + [4])) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$6 = *($2 + [68])
	if ( ((uint_32)$6 >= (uint_32)*(($2 + [72]))) ){ goto $label$17 }
	CALL $109($6, $1)
	*($2 + [68]) = (*($2 + [68]) + [12])
	
.LABEL $label$18
	$8 = *($2 + [68])
	$9 = *($2 + [64])
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL $22(($2 + [64]), $1)
	$8 = *($2 + [68])
	$9 = *($2 + [64])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$15 }
	
.LABEL $label$16
	$3 = (($2 + [16]) | [1])
	$4 = ($0 + [4])
	$5 = ($0 + [16])
	
.LOOP $label$21:
	$6 = CALL $109(($2 + [48]), $9)
	$7 = *($2 + [48])
	CALL eosio_assert(((uint_32)( *($2 + [52]) ? uint_32($7 >> [1]) : ($7 & [1]) ) > (uint_32)[3]), [10108])
	$7 = CALL $110(($2 + [32]), $6, [0], [3], ($2 + [48]))
	$1 = CALL $110(($2 + [16]), $6, [3], [-1], ($2 + [48]))
	$6 = *($2 + [32])
	$10 = CALL $136([10123])
	if ( ((int_32)$10 != (int_32)( *($2 + [36]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$24 }
	if ( CALL $114($7, [0], [-1], [10123], $10) ){ goto $label$24 }
	CALL $23($2, $0, $1)
	$6 = *($0)
	if ( ($6 == 0) ){ goto $label$25 }
	*($4) = $6
	CALL _ZdlPv($6)
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$25
	$6 = *($2)
	*($0) = $6
	$7 = *($2 + [4])
	*($4) = $7
	*(($0 + [8])) = *(($2 + [8]))
	CALL eosio_assert((((uint_32)($7 - $6) % (uint_32)[7]) == 0), [10127])
	if ( (*($2 + [16]) & [1]) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$6 = *($2 + [32])
	$10 = CALL $136([10147])
	if ( ((int_32)$10 != (int_32)( *($2 + [36]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$26 }
	if ( CALL $114($7, [0], [-1], [10147], $10) ){ goto $label$26 }
	CALL $23($2, $0, $1)
	$6 = *($0)
	if ( ($6 == 0) ){ goto $label$27 }
	*($4) = $6
	CALL _ZdlPv($6)
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$27
	$6 = *($2)
	*($0) = $6
	$7 = *($2 + [4])
	*($4) = $7
	*(($0 + [8])) = *(($2 + [8]))
	CALL eosio_assert(((($7 - $6) & [7]) == 0), [10127])
	if ( (*($2 + [16]) & [1]) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$26
	$6 = *($2 + [32])
	$10 = CALL $136([10151])
	if ( ((int_32)$10 != (int_32)( *($2 + [36]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$28 }
	if ( CALL $114($7, [0], [-1], [10151], $10) ){ goto $label$28 }
	$6 = ( *((($2 + [16]) + [8])) ? $3 : (*($2 + [16]) & [1]) )
	$7 = [0]
	
.LOOP $label$29:
	$10 = ($6 + $7)
	$1 = ($7 + [1])
	$7 = $1
	if ( *($10) ){ goto $label$29 }
	$11 = (CASTING uint_64)(uint_32 ($1 + [-1]))
	$12 = (int_64)0
	$13 = (int_64)59
	$14 = (int_64)0
	
.LOOP $label$30:
	$15 = (int_64)0
	if ( ((uint_64)$12 >= (uint_64)$11) ){ goto $label$31 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$7 = ($7 + [-91])
	goto $label$32 
	
.LABEL $label$33
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$35 }
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	goto $label$34 
	
.LABEL $label$35
	$15 = ((int_64)$15 & (int_64)15)
	
.LABEL $label$34
	$6 = ($6 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)4294967291)
	if ( ((int_64)$13 != (int_64)55834574842) ){ goto $label$30 }
	*($5) = $14
	if ( (*($2 + [16]) & [1]) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$28
	CALL eosio_assert([0], [10155])
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL _ZdlPv(*((($2 + [16]) + [8])))
	
.LABEL $label$22
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*((($2 + [32]) + [8])))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$37 }
	goto $label$38 
	
.LABEL $label$39
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$37 }
	
.LABEL $label$38
	CALL _ZdlPv(*((($2 + [48]) + [8])))
	$9 = ($9 + [12])
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$21 }
	goto $label$36 
	
.LABEL $label$37
	$9 = ($9 + [12])
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$21 }
	
.LABEL $label$36
	$9 = *($2 + [64])
	if ( $9 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	if ( ($9 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$7 = *($2 + [68])
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$12 }
	
.LOOP $label$40:
	$6 = ($7 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$41
	$7 = $6
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$40 }
	$6 = *($2 + [64])
	goto $label$11 
	
.LABEL $label$13
	$global$0 = ($2 + [80])
	return $0
	
.LABEL $label$12
	$6 = $9
	
.LABEL $label$11
	*($2 + [68]) = $9
	CALL _ZdlPv($6)
	$global$0 = ($2 + [80])
	return $0
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($0 + [4 align=4]) = (int_64)0
	$3 = ($0 + [4])
	*($0) = $3
	$4 = *($1)
	if ( ((int_32)*($1 + [4]) == (int_32)$4) ){ goto $label$1 }
	$5 = ($2 + [10])
	$6 = ($2 + [12])
	$7 = ($2 + [14])
	$8 = [0]
	
.LOOP $label$2:
	$9 = ($4 + $8)
	CALL eosio_assert((*($9 + [6]) <= [16]), [10210])
	$4 = *($9 + [4 align=1])
	$12 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($9)
	$11 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($9 + [2 align=1])
	$10 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$13 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 uint_32($10 >> [21])) << (int_64)16) | (int_64)(CASTING uint_64)(uint_32 uint_32($11 >> [21]))) | (int_64)((int_64)(CASTING uint_64)(uint_32 uint_32($12 >> [21])) << (int_64)32))
	$4 = *($3)
	if ( ($4 == 0) ){ goto $label$6 }
	$14 = $3
	$15 = *($4 + [16])
	if ( ((uint_64)$13 >= (uint_64)$15) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$4 = $3
	$14 = $3
	$17 = [3]
	goto $label$3 
	
.LABEL $label$5
	$17 = [13]
	goto $label$3 
	
.LABEL $label$4
	$17 = [2]
	
.LABEL $label$3
	
.LOOP $label$7:
	goto $label$30 
	
.LABEL $label$34
	$14 = $4
	$4 = $16
	$15 = *($4 + [16])
	if ( ((uint_64)$13 >= (uint_64)$15) ){ goto $label$19 }
	$17 = [13]
	goto $label$7 
	
.LABEL $label$33
	$16 = *($4)
	if ( $16 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$32
	if ( ((uint_64)$15 >= (uint_64)$13) ){ goto $label$14 }
	$17 = [12]
	goto $label$7 
	
.LABEL $label$31
	$14 = ($4 + [4])
	$16 = *($4 + [4])
	if ( ($16 == 0) ){ goto $label$17 }
	$17 = [0]
	goto $label$7 
	
.LABEL $label$30
	$4 = $14
	goto $label$18 
	
.LABEL $label$29
	$16 = *($14)
	if ( ($16 == 0) ){ goto $label$13 }
	$17 = [4]
	goto $label$7 
	
.LABEL $label$28
	$4 = uint_32($12 >> [16])
	$14 = uint_32($10 >> [16])
	$10 = uint_32($11 >> [16])
	goto $label$11 
	
.LABEL $label$27
	$14 = $4
	$16 = *($14)
	if ( $16 ){ goto $label$12 }
	$17 = [9]
	goto $label$7 
	
.LABEL $label$26
	*(($16 = CALL _Znwj([40])) + [24 align=4]) = (int_64)0
	*($16 + [32]) = [0]
	*($16) = (int_64)0
	*($16 + [8]) = $4
	*($14) = $16
	*($16 + [16]) = $13
	$4 = $16
	$10 = *(*($0))
	if ( ($10 == 0) ){ goto $label$8 }
	$17 = [10]
	goto $label$7 
	
.LABEL $label$25
	*($0) = $10
	$4 = *($14)
	$17 = [11]
	goto $label$7 
	
.LABEL $label$24
	CALL $24(*(($0 + [4])), $4)
	*(($4 = ($0 + [8]))) = (*($4) + [1])
	$4 = *(($9 + [4]))
	$4 = uint_32((($4 << [24]) | (($4 << [8]) & [16711680])) >> [16])
	$14 = *(($9 + [2]))
	$14 = uint_32((($14 << [24]) | (($14 << [8]) & [16711680])) >> [16])
	$10 = *($9)
	$10 = uint_32((($10 << [24]) | (($10 << [8]) & [16711680])) >> [16])
	$17 = [5]
	goto $label$7 
	
.LABEL $label$23
	*(($11 = ($2 + [8]))) = $10
	*($5) = $14
	*($6) = $4
	*(($10 = ($2 + [16]))) = (int_64)0
	*(($12 = ($2 + [24]))) = (int_64)0
	*(($18 = ($2 + [32]))) = (int_64)0
	*(($19 = ($2 + [40]))) = [0]
	*($7) = *(($9 + [6]))
	*($2) = $13
	$14 = ($16 + [28])
	$4 = *($14)
	if ( ((uint_32)$4 >= (uint_32)*(($16 + [32]))) ){ goto $label$10 }
	$17 = [8]
	goto $label$7 
	
.LABEL $label$22
	*($4) = *($2)
	*(($4 + [40])) = *($19)
	*(($4 + [32])) = *($18)
	*(($4 + [24])) = *($12)
	*(($4 + [16])) = *($10)
	*(($4 + [8])) = *($11)
	*($14) = (*($14) + [48])
	goto $label$9 
	
.LABEL $label$21
	CALL $25(($16 + [24]), $2)
	$17 = [7]
	goto $label$7 
	
.LABEL $label$20
	$4 = *($1)
	$8 = ($8 + [7])
	if ( ($8 <= (*(($1 + [4])) - $4)) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$19
	$17 = [2]
	goto $label$7 
	
.LABEL $label$18
	$17 = [1]
	goto $label$7 
	
.LABEL $label$17
	$17 = [3]
	goto $label$7 
	
.LABEL $label$16
	$17 = [14]
	goto $label$7 
	
.LABEL $label$15
	$17 = [1]
	goto $label$7 
	
.LABEL $label$14
	$17 = [3]
	goto $label$7 
	
.LABEL $label$13
	$17 = [9]
	goto $label$7 
	
.LABEL $label$12
	$17 = [4]
	goto $label$7 
	
.LABEL $label$11
	$17 = [5]
	goto $label$7 
	
.LABEL $label$10
	$17 = [6]
	goto $label$7 
	
.LABEL $label$9
	$17 = [7]
	goto $label$7 
	
.LABEL $label$8
	$17 = [11]
	goto $label$7 
	
.LABEL $label$1
	$global$0 = ($2 + [48])
	$17
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10527])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $138($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([40])) + [20]) = [0]
	*($5 + [12 align=4]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10554])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [10554])
	CALL memcpy(($5 + [8]), ($2 + [8]), [1])
	*($3 + [36]) = ($2 + [9])
	CALL $77(($3 + [32]), ($5 + [12]))
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $20(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $141($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [12])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [16])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10366])
	*(($3 = (($1 + ((int_32)*(*($3)) * (int_32)[3])) + [46]))) = (*($3) + [-1])
	$6 = *($1)
	CALL eosio_assert([1], [10417])
	$8 = *($1 + [72])
	$7 = *(($1 + [76]))
	$3 = (($7 + [72]) - $8)
	$9 = (CASTING uint_64)(uint_32 ($7 - $8))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $138($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $81($5, $1)
	CALL db_update_i64(*($1 + [88]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $141($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $10 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [10320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10366])
	$6 = *($1 + [8])
	$7 = ((int_64)*($6) + (int_64)*(*($3)))
	$8 = *($1)
	$3 = (*(($1 + [12])) - $6)
	if ( ((uint_32)$3 > (uint_32)[7]) ){ goto $label$2 }
	$6 = ($1 + [8])
	CALL $41($6, ([8] - $3))
	$6 = *($6)
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)[8]) ){ goto $label$1 }
	*(($1 + [12])) = ($6 + [8])
	
.LABEL $label$1
	*($6) = $7
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [10417])
	$9 = *(($1 + [8]))
	$6 = *(($1 + [12]))
	$3 = (($6 + [8]) - $9)
	$7 = (CASTING uint_64)(uint_32 ($6 - $9))
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ($3 <= [513]) ){ goto $label$5 }
	$10 = CALL $138($3)
	goto $label$4 
	
.LABEL $label$5
	$10 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $10
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [10228])
	CALL memcpy($10, $1, [8])
	$7 = (CASTING uint_64)(uint_32 (*(($1 + [12])) - *(($1 + [8]))))
	$6 = ($10 + [8])
	$11 = ($10 + $3)
	
.LOOP $label$6:
	$4 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$9 = ((int_64)$7) != (int_64)0
	*($5 + [15]) = (($9) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)($11 - $6) > (int_32)[0]), [10228])
	CALL memcpy($6, ($5 + [15]), [1])
	$6 = ($6 + [1])
	if ( $9 ){ goto $label$6 }
	$4 = *(($1 + [8]))
	$9 = (*(($1 + [12])) - $4)
	CALL eosio_assert(((int_32)($11 - $6) >= (int_32)$9), [10228])
	CALL memcpy($6, $4, $9)
	CALL db_update_i64(*($1 + [24]), $2, $10, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $141($10)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *((*($4) + [40]))
	$5 = *(*(($4 + [4])))
	$6 = *($0)
	$4 = *($1 + [8])
	$7 = ($1 + [12])
	$8 = *($7)
	$9 = ($8 - $4)
	if ( ((uint_32)$9 > (uint_32)[7]) ){ goto $label$2 }
	$4 = ($1 + [8])
	CALL $41($4, ([8] - $9))
	$4 = *($4)
	$8 = *($7)
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)[8]) ){ goto $label$1 }
	$8 = ($4 + [8])
	*(($1 + [12])) = $8
	
.LABEL $label$1
	*($4) = $5
	$9 = (($8 + [8]) - $4)
	$5 = (CASTING uint_64)(uint_32 ($8 - $4))
	
.LOOP $label$3:
	$9 = ($9 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($9 <= [513]) ){ goto $label$5 }
	$10 = CALL $138($9)
	goto $label$4 
	
.LABEL $label$5
	$10 = ($2 - (($9 + [15]) & [-16]))
	$global$0 = $10
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [10228])
	CALL memcpy($10, $1, [8])
	$5 = (CASTING uint_64)(uint_32 (*(($1 + [12])) - *(($1 + [8]))))
	$4 = ($10 + [8])
	$7 = ($10 + $9)
	
.LOOP $label$6:
	$8 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($3 + [15]) = (($2) << [7]) | ($8 & [127]))
	CALL eosio_assert(((int_32)($7 - $4) > (int_32)[0]), [10228])
	CALL memcpy($4, ($3 + [15]), [1])
	$4 = ($4 + [1])
	if ( $2 ){ goto $label$6 }
	$8 = *(($1 + [8]))
	$2 = (*(($1 + [12])) - $8)
	CALL eosio_assert(((int_32)($7 - $4) >= (int_32)$2), [10228])
	CALL memcpy($4, $8, $2)
	$5 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($6 + [8]), (int_64)4982871469126582272, *(*($0 + [8])), $5, $10, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$5 >= (uint_64)*($6 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $141($10)
	if ( (uint_64)($5 <= *($6 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	float_64 $28
	int_64 $29
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL require_auth($1)
	$2 = CALL $109(($3 + [96]), $2)
	$4 = CALL $14(($3 + [112]), $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$1
	CALL $15(($3 + [80]), $4)
	$5 = [0]
	CALL eosio_assert(((int_32)*($3 + [88]) != (int_32)[0]), [8274])
	$6 = ($0 + [216])
	$8 = *(($0 + [244]))
	$7 = *(($0 + [240]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($8 + [-24])
	$9 = *($2)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$4 }
	$8 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($9 + [84]) == (int_32)$6), [10476])
	$5 = $9
	goto $label$2 
	
.LABEL $label$3
	$2 = CALL db_find_i64(*($6), *(($0 + [224])), (int_64)3607749778735104000, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $7($6, $2)
	CALL eosio_assert(((int_32)*($5 + [84]) == (int_32)$6), [10476])
	
.LABEL $label$2
	$10 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($10, [8256])
	*($3 + [76]) = CALL $138([32768])
	*($3 + [72]) = CALL $138([33792])
	$11 = (($3 + [80]) | [4])
	$8 = *($3 + [80])
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$6 }
	$12 = ($0 + [120])
	$13 = ($0 + [96])
	$14 = ($0 + [124])
	$15 = ($0 + [104])
	$16 = (($3 + [24]) + [12])
	$17 = (($3 + [24]) + [16])
	$18 = ($0 + [128])
	
.LOOP $label$7:
	$19 = $8
	$20 = *($19 + [16])
	*($3 + [64]) = $20
	*($3 + [62]) = [0]
	$8 = *($14)
	$7 = *($12)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$13 }
	
.LOOP $label$15:
	$2 = ($8 + [-24])
	$21 = *($2)
	if ( ((int_64)*($21) == (int_64)$20) ){ goto $label$14 }
	$8 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$13 }
	CALL eosio_assert(((int_32)*($21 + [24]) == (int_32)$13), [10476])
	goto $label$12 
	
.LABEL $label$13
	$21 = [0]
	$2 = CALL db_find_i64(*($13), *($15), (int_64)4860852945467473920, $20)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$11 }
	$21 = CALL $16($13, $2)
	CALL eosio_assert(((int_32)*($21 + [24]) == (int_32)$13), [10476])
	
.LABEL $label$12
	*(($9 = (($3 + [48]) + [8]))) = [0]
	*($3 + [48]) = (int_64)0
	$7 = *($3 + [76])
	$22 = ($21 + [16])
	$2 = (*($22) - *($21 + [12]))
	if ( ($2 == 0) ){ goto $label$16 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$10 }
	$8 = CALL _Znwj($2)
	*($9) = ($8 + $2)
	*($3 + [48]) = $8
	*($3 + [52]) = $8
	$9 = *(($21 + [12]))
	$2 = (*($22) - $9)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$16 }
	CALL memcpy($8, $9, $2)
	*($3 + [52]) = (*($3 + [52]) + $2)
	
.LABEL $label$16
	*($3 + [62]) = CALL $103($7, ($3 + [48]))
	$2 = *($3 + [48])
	if ( ($2 == 0) ){ goto $label$11 }
	*($3 + [52]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$23 = *($19 + [28])
	$2 = *(($19 + [24]))
	if ( ((int_32)$2 == (int_32)$23) ){ goto $label$17 }
	
.LOOP $label$18:
	$24 = ($2 + [12])
	$25 = *($24)
	$22 = ($2 + [8])
	$8 = *($22)
	$9 = ($2 + [10])
	$7 = *($9)
	$20 = ((int_64)((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)65535) << (int_64)16) | (int_64)(CASTING uint_64)(uint_32 $8)) | (int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $25) & (int_64)65535) << (int_64)32))
	if ( ($8 <= [32707]) ){ goto $label$20 }
	$7 = ($7 & [65535])
	if ( ($7 <= [32738]) ){ goto $label$20 }
	$25 = ($25 & [65535])
	if ( ((uint_32)$25 > (uint_32)[32829]) ){ goto $label$20 }
	if ( ((uint_32)$7 > (uint_32)[32798]) ){ goto $label$20 }
	if ( ((uint_32)$8 > (uint_32)[32829]) ){ goto $label$20 }
	if ( ((uint_32)$25 > (uint_32)[32706]) ){ goto $label$19 }
	
.LABEL $label$20
	CALL eosio_assert([0], [8336])
	
.LABEL $label$19
	$8 = *(($2 + [14]))
	*($3 + [144]) = $8
	CALL eosio_assert(($8 <= [9]), [8362])
	$8 = ($5 + ((int_32)*($3 + [144]) * (int_32)[3]))
	$7 = *(($8 + [45]))
	$25 = *(($8 + [44]))
	CALL eosio_assert(((int_32)*(($8 + [46])) != (int_32)[0]), [8435])
	if ( (CALL $94($0, $20, ($3 + [24])) == 0) ){ goto $label$21 }
	$8 = [0]
	$26 = *($22)
	$27 = uint_32(((((*($9) << [5]) & [992]) | ($26 & [30])) | ((*($24) << [10]) & [31744])) >> [1])
	if ( ((uint_32)$27 >= (uint_32)*($3 + [62])) ){ goto $label$22 }
	$8 = (((int_32)($26 << [2]) ^ (int_32)[-1]) & [4])
	$8 = uint_32((([15] << $8) & *((*($3 + [76]) + ($27 & [65535])))) >> $8)
	
.LABEL $label$22
	CALL eosio_assert((((int_32)($8 & [255]) == (int_32)[1]) | (int_64)(*($17) == 0)), [8502])
	
.LABEL $label$21
	*(($8 = ($2 + [40]))) = $7
	*(($2 + [16])) = (int_64)0
	$7 = ($7 & [255])
	if ( ($7 == 0) ){ goto $label$25 }
	$28 = CALL $125((float_64)1.5, (CASTING float_64)(uint_32 $7))
	$8 = *($8)
	$28 = ((float_64)$28 * (float_64)(float_64)200)
	if ( (((float_64)$28 < (float_64)(float_64)18446744073709551615) & ((float_64)$28 >= (float_64)(float_64)0)) ){ goto $label$24 }
	$29 = (int_64)0
	goto $label$23 
	
.LABEL $label$25
	$29 = (int_64)200
	$8 = [0]
	goto $label$23 
	
.LABEL $label$24
	$29 = (Rounds 0)($28)
	
.LABEL $label$23
	*(($2 + [32])) = $29
	*(($3 + [8])) = ( $8 ? [40] : (($8 & [255]) <= [40]) )
	*(($3 + [16])) = $1
	*($3) = $20
	CALL $95($0, $3)
	$20 = *($0)
	*($3 + [152]) = ($3 + [144])
	CALL eosio_assert($10, [10285])
	CALL $17($6, $5, $20, ($3 + [152]))
	$7 = (((int_32)($7 << [2]) ^ (int_32)[-1]) & [4])
	*(($9 = (*($3 + [76]) + ($8 = uint_32(((((*($9) << [5]) & [992]) | (($7 = *($22)) & [30])) | ((*($24) << [10]) & [31744])) >> [1]))))) = ((*($9) & ((int_32)([15] << $7) ^ (int_32)[-1])) | ($25 << $7))
	if ( ($8 <= *($3 + [62])) ){ goto $label$26 }
	*($3 + [62]) = ($8 + [1])
	
.LABEL $label$26
	$2 = ($2 + [48])
	if ( ((int_32)$23 != (int_32)$2) ){ goto $label$18 }
	
.LABEL $label$17
	$20 = *($0)
	if ( ($21 == 0) ){ goto $label$27 }
	*((($3 + [24]) + [8])) = ($3 + [62])
	*($3 + [28]) = ($3 + [76])
	*($3 + [24]) = ($3 + [72])
	CALL eosio_assert([1], [10285])
	CALL $18($13, $21, $20, ($3 + [24]))
	goto $label$8 
	
.LABEL $label$27
	*((($3 + [24]) + [8])) = ($3 + [72])
	*($16) = ($3 + [76])
	*($17) = ($3 + [62])
	*($3 + [24]) = ($3 + [64])
	*($3 + [28]) = $0
	*($3 + [152]) = $20
	CALL eosio_assert(((int_64)*($13) == (int_64)CALL $fimport$3()), [10234])
	*($3) = $13
	*(($3 + [8])) = ($3 + [152])
	*($3 + [4]) = ($3 + [24])
	*(($2 = CALL _Znwj([40])) + [20]) = [0]
	*($2 + [12 align=4]) = (int_64)0
	*($2 + [24]) = $13
	CALL $19($3, $2)
	*($3 + [144]) = $2
	$20 = *($2)
	*($3) = $20
	$7 = *($2 + [28])
	*($3 + [140]) = $7
	$8 = *($14)
	if ( ((uint_32)$8 >= (uint_32)*($18)) ){ goto $label$28 }
	*($8 + [8]) = $20
	*($8 + [16]) = $7
	*($3 + [144]) = [0]
	*($8) = $2
	*($14) = ($8 + [24])
	$2 = *($3 + [144])
	*($3 + [144]) = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$28
	CALL $20($12, ($3 + [144]), $3, ($3 + [140]))
	$2 = *($3 + [144])
	*($3 + [144]) = [0]
	if ( $2 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $121(($3 + [48]))
	
.LABEL $label$9
	$8 = *($2 + [12])
	if ( ($8 == 0) ){ goto $label$29 }
	*(($2 + [16])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$29
	CALL _ZdlPv($2)
	
.LABEL $label$8
	CALL memset(*($3 + [76]), [0], *($3 + [62]))
	$2 = *($19 + [4])
	if ( ($2 == 0) ){ goto $label$31 }
	
.LOOP $label$32:
	$8 = $2
	$2 = *($8)
	if ( $2 ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$8 = *($19 + [8])
	if ( ((int_32)*($8) == (int_32)$19) ){ goto $label$30 }
	$7 = ($19 + [8])
	
.LOOP $label$33:
	$2 = *($7)
	$7 = ($2 + [8])
	$8 = *($2 + [8])
	if ( ((int_32)$2 != (int_32)*($8)) ){ goto $label$33 }
	
.LABEL $label$30
	if ( ((int_32)$8 != (int_32)$11) ){ goto $label$7 }
	
.LABEL $label$6
	CALL $21(($3 + [80]), *($3 + [84]))
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$34 }
	*($4 + [4]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$34
	$global$0 = ($3 + [160])
	(unreachable)
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	CALL $76(*($0 + [4]), $1)
	$6 = *($1 + [12])
	$5 = *(($1 + [16]))
	$7 = (($5 + [9]) - $6)
	$8 = (CASTING uint_64)(uint_32 ($5 - $6))
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$9 = CALL $138($7)
	goto $label$2 
	
.LABEL $label$3
	$9 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $9
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [10228])
	CALL memcpy($9, $1, [8])
	CALL eosio_assert(((int_32)($7 + [-8]) > (int_32)[0]), [10228])
	CALL memcpy(($9 + [8]), ($1 + [8]), [1])
	$8 = (CASTING uint_64)(uint_32 (*(($1 + [16])) - *(($1 + [12]))))
	$2 = ($9 + [9])
	$10 = ($9 + $7)
	
.LOOP $label$4:
	$5 = (CASTING uint_32)(uint_64 $8)
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	$6 = ((int_64)$8) != (int_64)0
	*($3 + [15]) = (($6) << [7]) | ($5 & [127]))
	CALL eosio_assert(((int_32)($10 - $2) > (int_32)[0]), [10228])
	CALL memcpy($2, ($3 + [15]), [1])
	$2 = ($2 + [1])
	if ( $6 ){ goto $label$4 }
	$5 = *(($1 + [12]))
	$6 = (*(($1 + [16])) - $5)
	CALL eosio_assert(((int_32)($10 - $2) >= (int_32)$6), [10228])
	CALL memcpy($2, $5, $6)
	$8 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)4860852945467473920, *(*($0 + [8])), $8, $9, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $141($9)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10366])
	$5 = *($1)
	$6 = CALL $102(*(*($3)), *(*($3 + [4])), *(*($3 + [8])))
	$7 = *(*($3))
	*(($8 = $4)) = (int_64)0
	$3 = [0]
	*($8 + [8]) = [0]
	$9 = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$2 }
	$9 = CALL _Znwj($6)
	$3 = ($9 + $6)
	*(($8 + [8])) = $3
	*($8) = $9
	CALL memcpy($9, $7, $6)
	*($8 + [4]) = $3
	
.LABEL $label$3
	$6 = *($1 + [12])
	if ( ($6 == 0) ){ goto $label$5 }
	*(($1 + [16])) = $6
	CALL _ZdlPv($6)
	*(($6 = ($1 + [20]))) = [0]
	*($1 + [12 align=4]) = (int_64)0
	goto $label$4 
	
.LABEL $label$5
	$6 = ($1 + [20])
	
.LABEL $label$4
	*($6) = $3
	*(($6 = ($1 + [16]))) = $3
	*(($3 = ($1 + [12]))) = $9
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10417])
	$3 = *($3)
	$9 = *($6)
	$6 = (($9 + [9]) - $3)
	$10 = (CASTING uint_64)(uint_32 ($9 - $3))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$6 }
	if ( ($6 <= [513]) ){ goto $label$8 }
	$11 = CALL $138($6)
	goto $label$7 
	
.LABEL $label$8
	$11 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $11
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [10228])
	CALL memcpy($11, $1, [8])
	CALL eosio_assert(((int_32)($6 + [-8]) > (int_32)[0]), [10228])
	CALL memcpy(($11 + [8]), ($1 + [8]), [1])
	$10 = (CASTING uint_64)(uint_32 (*(($1 + [16])) - *(($1 + [12]))))
	$3 = ($11 + [9])
	$7 = ($11 + $6)
	
.LOOP $label$9:
	$9 = (CASTING uint_32)(uint_64 $10)
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	$4 = ((int_64)$10) != (int_64)0
	*($8 + [15]) = (($4) << [7]) | ($9 & [127]))
	CALL eosio_assert(((int_32)($7 - $3) > (int_32)[0]), [10228])
	CALL memcpy($3, ($8 + [15]), [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$9 }
	$9 = *(($1 + [12]))
	$4 = (*(($1 + [16])) - $9)
	CALL eosio_assert(((int_32)($7 - $3) >= (int_32)$4), [10228])
	CALL memcpy($3, $9, $4)
	CALL db_update_i64(*($1 + [28]), $2, $11, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$10 }
	goto $label$1 
	
.LABEL $label$11
	CALL $141($11)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	
.LABEL $label$10
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($8 + [16])
	return (unreachable)
	
.LABEL $label$2
	CALL $121($8)
	
.LABEL $label$1
	$global$0 = ($8 + [16])
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]) + [49])
	$4 = *($0)
	$5 = CALL $102(*(*($3 + [8])), *(*($3 + [12])), *(*($3 + [16])))
	$6 = *(*($3 + [8]))
	*(($7 = $2)) = (int_64)0
	$3 = [0]
	*($7 + [8]) = [0]
	$8 = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$8 = CALL _Znwj($5)
	$3 = ($8 + $5)
	*(($7 + [8])) = $3
	*($7) = $8
	CALL memcpy($8, $6, $5)
	*($7 + [4]) = $3
	
.LABEL $label$3
	$5 = *($1 + [12])
	if ( ($5 == 0) ){ goto $label$5 }
	*(($1 + [16])) = $5
	CALL _ZdlPv($5)
	*(($5 = ($1 + [20]))) = [0]
	*($1 + [12 align=4]) = (int_64)0
	goto $label$4 
	
.LABEL $label$5
	$5 = ($1 + [20])
	
.LABEL $label$4
	$6 = ($1 + [8])
	*($5) = $3
	*(($1 + [16])) = $3
	*(($1 + [12])) = $8
	$5 = (($3 + [9]) - $8)
	$9 = (CASTING uint_64)(uint_32 ($3 - $8))
	
.LOOP $label$6:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$6 }
	if ( ($5 <= [513]) ){ goto $label$8 }
	$10 = CALL $138($5)
	goto $label$7 
	
.LABEL $label$8
	$10 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $10
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [10228])
	CALL memcpy($10, $1, [8])
	CALL eosio_assert(((int_32)($5 + [-8]) > (int_32)[0]), [10228])
	CALL memcpy(($10 + [8]), $6, [1])
	$9 = (CASTING uint_64)(uint_32 (*(($1 + [16])) - *(($1 + [12]))))
	$3 = ($10 + [9])
	$6 = ($10 + $5)
	
.LOOP $label$9:
	$8 = (CASTING uint_32)(uint_64 $9)
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	$2 = ((int_64)$9) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($8 & [127]))
	CALL eosio_assert(((int_32)($6 - $3) > (int_32)[0]), [10228])
	CALL memcpy($3, ($7 + [15]), [1])
	$3 = ($3 + [1])
	if ( $2 ){ goto $label$9 }
	$8 = *(($1 + [12]))
	$2 = (*(($1 + [16])) - $8)
	CALL eosio_assert(((int_32)($6 - $3) >= (int_32)$2), [10228])
	CALL memcpy($3, $8, $2)
	$9 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)4860852945467473920, *(*($0 + [8])), $9, $10, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)$9 >= (uint_64)*($4 + [16])) ){ goto $label$10 }
	goto $label$1 
	
.LABEL $label$11
	CALL $141($10)
	if ( (uint_64)($9 <= *($4 + [16])) ){ goto $label$1 }
	
.LABEL $label$10
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($7 + [16])
	return (unreachable)
	
.LABEL $label$2
	CALL $121($7)
	
.LABEL $label$1
	$global$0 = ($7 + [16])
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [10742])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10787])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10837])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [8])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = *($5 + [8])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [368])
	$global$0 = $3
	CALL memory()
	$4 = (int_64)7
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$2 }
	$4 = (int_64)5
	
.LOOP $label$3:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$3 }
	CALL eosio_assert(((int_64)6138663577826885632 == (int_64)$1), [9823])
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$6 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [9814]
	$7 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$12 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$8 = ($8 + [-91])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$7 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$5 }
	
.LABEL $label$6
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [9802]
	$7 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$18 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$8 = ($8 + [-91])
	goto $label$16 
	
.LABEL $label$18
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$14
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$13 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$19 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [9814]
	$7 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$25 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$8 = ($8 + [-91])
	goto $label$23 
	
.LABEL $label$25
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$21
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$20 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$5 }
	
.LABEL $label$19
	$4 = (int_64)7
	
.LOOP $label$26:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$26 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$4 }
	
.LABEL $label$5
	*(($3 + [176])) = $0
	*(($3 + [184])) = (int_64)-1
	*(($3 + [192])) = (int_64)0
	*(($3 + [200])) = [0]
	*(($3 + [216])) = $0
	*(($3 + [224])) = (int_64)-1
	*(($3 + [232])) = (int_64)0
	*(($3 + [240])) = [0]
	*($3 + [120]) = (int_64)2
	*($3 + [112]) = $0
	*($3 + [128]) = (int_64)3
	*($3 + [136]) = (int_64)4
	*($3 + [144]) = (int_64)5
	*($3 + [152]) = (int_64)6
	*($3 + [160]) = [1]
	*($3 + [168]) = $0
	*($3 + [208]) = $0
	*($3 + [248]) = $0
	*(($3 + [264])) = (int_64)-1
	*(($3 + [256])) = $0
	*(($3 + [272])) = (int_64)0
	*(($3 + [280])) = [0]
	*(($3 + [296])) = $0
	*(($3 + [304])) = (int_64)-1
	*(($3 + [312])) = (int_64)0
	*(($3 + [320])) = [0]
	*(($3 + [336])) = $0
	*(($3 + [344])) = (int_64)-1
	*(($3 + [352])) = (int_64)0
	*(($3 + [360])) = [0]
	*($3 + [288]) = $0
	*($3 + [328]) = $0
	if ( ((int_64)$2 <= (int_64)4511784941683474431) ){ goto $label$33 }
	if ( ((int_64)$2 > (int_64)5075292897255882751) ){ goto $label$32 }
	if ( ((int_64)$2 == (int_64)4511784941683474432) ){ goto $label$31 }
	if ( ((int_64)$2 != (int_64)4921564679018381312) ){ goto $label$27 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [1]
	*($3 + [32]) = *($3 + [72])
	CALL $60(($3 + [112]), ($3 + [32]))
	goto $label$27 
	
.LABEL $label$33
	if ( ((int_64)$2 == (int_64)-5971597184032833536) ){ goto $label$30 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$29 }
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$27 }
	*($3 + [68]) = [0]
	*($3 + [64]) = [2]
	*($3 + [40]) = *($3 + [64])
	CALL $61(($3 + [112]), ($3 + [40]))
	goto $label$27 
	
.LABEL $label$32
	if ( ((int_64)$2 == (int_64)5075292897255882752) ){ goto $label$28 }
	if ( ((int_64)$2 != (int_64)8516769789752901632) ){ goto $label$27 }
	*($3 + [60]) = [0]
	*($3 + [56]) = [3]
	*($3 + [48]) = *($3 + [56])
	CALL $62(($3 + [112]), ($3 + [48]))
	goto $label$27 
	
.LABEL $label$31
	*($3 + [92]) = [0]
	*($3 + [88]) = [4]
	*($3 + [16]) = *($3 + [88])
	CALL $63(($3 + [112]), ($3 + [16]))
	goto $label$27 
	
.LABEL $label$30
	*($3 + [108]) = [0]
	*($3 + [104]) = [5]
	*($3) = *($3 + [104])
	CALL $65(($3 + [112]), $3)
	goto $label$27 
	
.LABEL $label$29
	*($3 + [84]) = [0]
	*($3 + [80]) = [6]
	*($3 + [24]) = *($3 + [80])
	CALL $60(($3 + [112]), ($3 + [24]))
	goto $label$27 
	
.LABEL $label$28
	*($3 + [100]) = [0]
	*($3 + [96]) = [7]
	*($3 + [8]) = *($3 + [96])
	CALL $65(($3 + [112]), ($3 + [8]))
	
.LABEL $label$27
	CALL $66(($3 + [112]))
	
.LABEL $label$4
	CALL $123([0])
	$global$0 = ($3 + [368])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [10742])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10787])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10837])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8192]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($7)
	$6 = *($1)
	$9 = CALL $136([9723])
	if ( ((int_32)$9 != (int_32)( *($1 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$12 }
	if ( (CALL $114($1, [0], [-1], [9723], $9) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$6 = *($1)
	$9 = ($1 + [4])
	$10 = CALL $136([9731])
	if ( ((int_32)$10 != (int_32)( *($9) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$13 }
	if ( (CALL $114($1, [0], [-1], [9731], $10) == 0) ){ goto $label$10 }
	
.LABEL $label$13
	$6 = *($1)
	$10 = CALL $136([9744])
	if ( ((int_32)$10 != (int_32)( *($9) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$14 }
	if ( (CALL $114($1, [0], [-1], [9744], $10) == 0) ){ goto $label$9 }
	
.LABEL $label$14
	$6 = *($1)
	$9 = ($1 + [4])
	$10 = CALL $136([9758])
	if ( ((int_32)$10 != (int_32)( *($9) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$15 }
	if ( (CALL $114($1, [0], [-1], [9758], $10) == 0) ){ goto $label$8 }
	
.LABEL $label$15
	$6 = *($1)
	$10 = CALL $136([9769])
	if ( ((int_32)$10 != (int_32)( *($9) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$7 }
	if ( CALL $114($1, [0], [-1], [9769], $10) ){ goto $label$7 }
	$6 = CALL db_lowerbound_i64(*($0 + [96]), *(($0 + [104])), (int_64)4860852945467473920, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$1 = ($0 + [96])
	$9 = CALL $16($1, $6)
	
.LOOP $label$16:
	CALL eosio_assert([1], [10678])
	CALL eosio_assert([1], [10712])
	$6 = [0]
	$0 = CALL db_next_i64(*($9 + [28]), $3)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$17 }
	$6 = CALL $16($1, $0)
	
.LABEL $label$17
	CALL $52($1, $9)
	$9 = $6
	if ( $6 ){ goto $label$16 }
	goto $label$7 
	
.LABEL $label$11
	CALL $53($0, ((int_64)$2 != (int_64)0))
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$10
	$6 = CALL db_lowerbound_i64(*($0 + [176]), *(($0 + [184])), (int_64)-6147719000974426112, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$1 = ($0 + [176])
	$6 = CALL $48($1, $6)
	
.LOOP $label$18:
	if ( ((int_64)*($6 + [32]) != (int_64)((int_64)*($6 + [24]) + (int_64)*($6 + [16]))) ){ goto $label$19 }
	$9 = [0]
	$0 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($0, [10678])
	CALL eosio_assert($0, [10712])
	$0 = CALL db_next_i64(*($6 + [44]), $3)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$20 }
	$9 = CALL $48($1, $0)
	
.LABEL $label$20
	CALL $54($1, $6)
	$6 = $9
	if ( $9 ){ goto $label$18 }
	goto $label$7 
	
.LABEL $label$19
	CALL eosio_assert([1], [10712])
	$9 = *($6 + [44])
	$6 = [0]
	$9 = CALL db_next_i64($9, $3)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$21 }
	$6 = CALL $48($1, $9)
	
.LABEL $label$21
	if ( $6 ){ goto $label$18 }
	goto $label$7 
	
.LABEL $label$9
	CALL eosio_assert(CALL $fimport$6($2), [8256])
	*(($3 + [32])) = [0]
	*($3 + [8]) = $2
	*($3 + [16]) = (int_64)-1
	$4 = *($0)
	*($3) = $4
	*($3 + [24]) = (int_64)0
	$6 = CALL db_lowerbound_i64($4, $2, (int_64)4983122731492682032, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$22 }
	$11 = ($0 + [176])
	$10 = CALL $47($3, $6)
	$12 = ($0 + [204])
	$13 = ($0 + [200])
	$14 = ($0 + [184])
	
.LOOP $label$23:
	$4 = *($10)
	$9 = *($12)
	$1 = *($13)
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$26 }
	
.LOOP $label$28:
	$6 = ($9 + [-24])
	$0 = *($6)
	if ( ((int_64)*($0) == (int_64)$4) ){ goto $label$27 }
	$9 = $6
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$26 }
	CALL eosio_assert(((int_32)*($0 + [40]) == (int_32)$11), [10476])
	if ( $0 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$6 = CALL db_find_i64(*($11), *($14), (int_64)-6147719000974426112, $4)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$24 }
	CALL eosio_assert(((int_32)*(CALL $48($11, $6) + [40]) == (int_32)$11), [10476])
	
.LABEL $label$25
	CALL eosio_assert([1], [10712])
	$6 = *($10 + [20])
	$10 = [0]
	$6 = CALL db_next_i64($6, ($3 + [40]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$29 }
	$10 = CALL $47($3, $6)
	
.LABEL $label$29
	if ( $10 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$6 = [0]
	$9 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($9, [10678])
	CALL eosio_assert($9, [10712])
	$9 = CALL db_next_i64(*($10 + [20]), ($3 + [40]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$30 }
	$6 = CALL $47($3, $9)
	
.LABEL $label$30
	CALL $50($3, $10)
	$10 = $6
	if ( $6 ){ goto $label$23 }
	
.LABEL $label$22
	$1 = *($3 + [24])
	if ( ($1 == 0) ){ goto $label$7 }
	$0 = ($3 + [28])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$6 }
	
.LOOP $label$31:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$32 }
	CALL _ZdlPv($9)
	
.LABEL $label$32
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$31 }
	$6 = *(($3 + [24]))
	goto $label$5 
	
.LABEL $label$8
	$6 = CALL db_lowerbound_i64(*($0 + [56]), *(($0 + [64])), (int_64)-2505504610827894784, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$10 = ($0 + [56])
	$6 = CALL $55($10, $6)
	$1 = [1]
	
.LOOP $label$33:
	$9 = [0]
	$0 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($0, [10678])
	CALL eosio_assert($0, [10712])
	$0 = CALL db_next_i64(*($6 + [140]), $3)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$34 }
	$9 = CALL $55($10, $0)
	
.LABEL $label$34
	CALL $56($10, $6)
	if ( ($9 == 0) ){ goto $label$7 }
	$0 = ($1 <= [1000])
	$1 = ($1 + [1])
	$6 = $9
	if ( $0 ){ goto $label$33 }
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$6
	$6 = $1
	
.LABEL $label$5
	*($0) = $1
	CALL _ZdlPv($6)
	$global$0 = ($3 + [48])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10742])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10787])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10837])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [12])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [16])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = *($5 + [12])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [16])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = ($0 + [136])
	$4 = *($0 + [32])
	$6 = *(($0 + [164]))
	$5 = *(($0 + [160]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$8:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$7 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)$3), [10476])
	if ( $1 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = [0]
	$7 = CALL db_find_i64(*($3), *(($0 + [144])), (int_64)4982871469126582272, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	$8 = CALL $4($3, $7)
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)$3), [10476])
	
.LABEL $label$9
	if ( ($1 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	if ( $8 ){ goto $label$1 }
	$4 = *($0)
	*($2 + [8]) = $0
	*($2 + [40]) = $4
	CALL eosio_assert(((int_64)*(($0 + [136])) == (int_64)CALL $fimport$3()), [10234])
	*($2 + [16]) = $3
	*($2 + [20]) = ($2 + [8])
	*($2 + [24]) = ($2 + [40])
	*(($7 = CALL _Znwj([32])) + [16]) = [0]
	*($7 + [8 align=4]) = (int_64)0
	*($7 + [20]) = $3
	CALL $57(($2 + [16]), $7)
	*($2 + [32]) = $7
	$4 = *($7)
	*($2 + [16]) = $4
	$8 = *($7 + [24])
	*($2 + [12]) = $8
	$5 = ($0 + [164])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [168]))) ){ goto $label$3 }
	*($6 + [8]) = $4
	*($6 + [16]) = $8
	*($2 + [32]) = [0]
	*($6) = $7
	*($5) = ($6 + [24])
	$7 = *($2 + [32])
	*($2 + [32]) = [0]
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	if ( ($8 == 0) ){ goto $label$1 }
	CALL eosio_assert([1], [10678])
	CALL eosio_assert([1], [10712])
	$7 = CALL db_next_i64(*($8 + [24]), ($2 + [16]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$10 }
	CALL $4($3, $7)
	
.LABEL $label$10
	CALL $58($3, $8)
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$3
	CALL $12(($0 + [160]), ($2 + [32]), ($2 + [16]), ($2 + [12]))
	$7 = *($2 + [32])
	*($2 + [32]) = [0]
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = *($7 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($7 + [12])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$11
	CALL _ZdlPv($7)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [10742])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10787])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10837])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10366])
	$5 = *($1)
	$6 = CALL $102(*(*($3)), *(*($3 + [4])), *(*($3 + [8])))
	$7 = *(*($3))
	*(($8 = $4)) = (int_64)0
	$3 = [0]
	*($8 + [8]) = [0]
	$9 = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$2 }
	$9 = CALL _Znwj($6)
	$3 = ($9 + $6)
	*(($8 + [8])) = $3
	*($8) = $9
	CALL memcpy($9, $7, $6)
	*($8 + [4]) = $3
	
.LABEL $label$3
	$6 = *($1 + [12])
	if ( ($6 == 0) ){ goto $label$5 }
	*(($1 + [16])) = $6
	CALL _ZdlPv($6)
	*(($6 = ($1 + [20]))) = [0]
	*($1 + [12 align=4]) = (int_64)0
	goto $label$4 
	
.LABEL $label$5
	$6 = ($1 + [20])
	
.LABEL $label$4
	*($6) = $3
	*(($6 = ($1 + [16]))) = $3
	*(($3 = ($1 + [12]))) = $9
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10417])
	$3 = *($3)
	$9 = *($6)
	$6 = (($9 + [9]) - $3)
	$10 = (CASTING uint_64)(uint_32 ($9 - $3))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$6 }
	if ( ($6 <= [513]) ){ goto $label$8 }
	$11 = CALL $138($6)
	goto $label$7 
	
.LABEL $label$8
	$11 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $11
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [10228])
	CALL memcpy($11, $1, [8])
	CALL eosio_assert(((int_32)($6 + [-8]) > (int_32)[0]), [10228])
	CALL memcpy(($11 + [8]), ($1 + [8]), [1])
	$10 = (CASTING uint_64)(uint_32 (*(($1 + [16])) - *(($1 + [12]))))
	$3 = ($11 + [9])
	$7 = ($11 + $6)
	
.LOOP $label$9:
	$9 = (CASTING uint_32)(uint_64 $10)
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	$4 = ((int_64)$10) != (int_64)0
	*($8 + [15]) = (($4) << [7]) | ($9 & [127]))
	CALL eosio_assert(((int_32)($7 - $3) > (int_32)[0]), [10228])
	CALL memcpy($3, ($8 + [15]), [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$9 }
	$9 = *(($1 + [12]))
	$4 = (*(($1 + [16])) - $9)
	CALL eosio_assert(((int_32)($7 - $3) >= (int_32)$4), [10228])
	CALL memcpy($3, $9, $4)
	CALL db_update_i64(*($1 + [28]), $2, $11, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$10 }
	goto $label$1 
	
.LABEL $label$11
	CALL $141($11)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	
.LABEL $label$10
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($8 + [16])
	return (unreachable)
	
.LABEL $label$2
	CALL $121($8)
	
.LABEL $label$1
	$global$0 = ($8 + [16])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [10742])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10787])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10837])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [140]))
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	*($1) = *((*(*($0 + [4])) + [32]))
	$5 = *($1 + [8])
	$4 = *(($1 + [12]))
	$6 = (($4 + [8]) - $5)
	$7 = (CASTING uint_64)(uint_32 ($4 - $5))
	$8 = *($0)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$9 = CALL $138($6)
	goto $label$2 
	
.LABEL $label$3
	$9 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $9
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [10228])
	CALL memcpy($9, $1, [8])
	$7 = (CASTING uint_64)(uint_32 (*(($1 + [12])) - *(($1 + [8]))))
	$2 = ($9 + [8])
	$10 = ($9 + $6)
	
.LOOP $label$4:
	$4 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$5 = ((int_64)$7) != (int_64)0
	*($3 + [15]) = (($5) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)($10 - $2) > (int_32)[0]), [10228])
	CALL memcpy($2, ($3 + [15]), [1])
	$2 = ($2 + [1])
	if ( $5 ){ goto $label$4 }
	$4 = *(($1 + [8]))
	$5 = (*(($1 + [12])) - $4)
	CALL eosio_assert(((int_32)($10 - $2) >= (int_32)$5), [10228])
	CALL memcpy($2, $4, $5)
	$7 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($8 + [8]), (int_64)4982871469126582272, *(*($0 + [8])), $7, $9, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($8 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $141($9)
	if ( (uint_64)($7 <= *($8 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($8 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $116 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $118($1, $0, [9481])
	CALL $119()
	(unreachable)
}

void .FUNC $117 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $118($1, $0, [9454])
	CALL $120()
	(unreachable)
}

int_32 .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $135(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]) + [49])
	$4 = *($0)
	$5 = CALL $102(*(*($3 + [8])), *(*($3 + [12])), *(*($3 + [16])))
	$6 = *(*($3 + [8]))
	*(($7 = $2)) = (int_64)0
	$3 = [0]
	*($7 + [8]) = [0]
	$8 = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$8 = CALL _Znwj($5)
	$3 = ($8 + $5)
	*(($7 + [8])) = $3
	*($7) = $8
	CALL memcpy($8, $6, $5)
	*($7 + [4]) = $3
	
.LABEL $label$3
	$5 = *($1 + [12])
	if ( ($5 == 0) ){ goto $label$5 }
	*(($1 + [16])) = $5
	CALL _ZdlPv($5)
	*(($5 = ($1 + [20]))) = [0]
	*($1 + [12 align=4]) = (int_64)0
	goto $label$4 
	
.LABEL $label$5
	$5 = ($1 + [20])
	
.LABEL $label$4
	$6 = ($1 + [8])
	*($5) = $3
	*(($1 + [16])) = $3
	*(($1 + [12])) = $8
	$5 = (($3 + [9]) - $8)
	$9 = (CASTING uint_64)(uint_32 ($3 - $8))
	
.LOOP $label$6:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$6 }
	if ( ($5 <= [513]) ){ goto $label$8 }
	$10 = CALL $138($5)
	goto $label$7 
	
.LABEL $label$8
	$10 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $10
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [10228])
	CALL memcpy($10, $1, [8])
	CALL eosio_assert(((int_32)($5 + [-8]) > (int_32)[0]), [10228])
	CALL memcpy(($10 + [8]), $6, [1])
	$9 = (CASTING uint_64)(uint_32 (*(($1 + [16])) - *(($1 + [12]))))
	$3 = ($10 + [9])
	$6 = ($10 + $5)
	
.LOOP $label$9:
	$8 = (CASTING uint_32)(uint_64 $9)
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	$2 = ((int_64)$9) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($8 & [127]))
	CALL eosio_assert(((int_32)($6 - $3) > (int_32)[0]), [10228])
	CALL memcpy($3, ($7 + [15]), [1])
	$3 = ($3 + [1])
	if ( $2 ){ goto $label$9 }
	$8 = *(($1 + [12]))
	$2 = (*(($1 + [16])) - $8)
	CALL eosio_assert(((int_32)($6 - $3) >= (int_32)$2), [10228])
	CALL memcpy($3, $8, $2)
	$9 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)4860852945467473920, *(*($0 + [8])), $9, $10, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)$9 >= (uint_64)*($4 + [16])) ){ goto $label$10 }
	goto $label$1 
	
.LABEL $label$11
	CALL $141($10)
	if ( (uint_64)($9 <= *($4 + [16])) ){ goto $label$1 }
	
.LABEL $label$10
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($7 + [16])
	return (unreachable)
	
.LABEL $label$2
	CALL $121($7)
	
.LABEL $label$1
	$global$0 = ($7 + [16])
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $140($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [19369])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $118 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $136($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $111($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $119 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	*($1) = *(*(*($0 + [4])))
	$4 = *($0)
	CALL eosio_assert([1], [9887])
	$5 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $7
	$8 = [1]
	$9 = $6
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [9936])
	*(($1 + [16])) = (int_64)1397703940
	*($1 + [8]) = (int_64)0
	CALL eosio_assert([1], [9887])
	$5 = (int_64)1162758477
	$6 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$5 = $7
	$8 = [1]
	$9 = $6
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$5 = $7
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $8 ){ goto $label$10 }
	$8 = [1]
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	
.LABEL $label$6
	CALL eosio_assert($8, [9936])
	*(($1 + [32])) = (int_64)297666170116
	*($1 + [24]) = (int_64)0
	$5 = CALL current_time()
	*($1 + [44 align=1]) = [0]
	*(($1 + [47])) = [1]
	*(($1 + [50])) = [2]
	*(($1 + [53])) = [3]
	*(($1 + [56])) = [4]
	*(($1 + [59])) = [5]
	*(($1 + [62])) = [6]
	*(($1 + [65])) = [7]
	*(($1 + [68])) = [8]
	*($1 + [40]) = ((uint_64)$5 / (uint_64)(int_64)1000000)
	$9 = *($1 + [72])
	$8 = *(($1 + [76]))
	$6 = (($8 + [72]) - $9)
	$5 = (CASTING uint_64)(uint_32 ($8 - $9))
	
.LOOP $label$11:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$11 }
	if ( ($6 <= [513]) ){ goto $label$13 }
	$8 = CALL $138($6)
	goto $label$12 
	
.LABEL $label$13
	$8 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$12
	*($3 + [4]) = $8
	*($3) = $8
	*($3 + [8]) = ($8 + $6)
	CALL $81($3, $1)
	$5 = *($1)
	*($1 + [88]) = CALL db_store_i64(*($4 + [8]), (int_64)3607749778735104000, *(*($0 + [8])), $5, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$16 }
	CALL $141($8)
	if ( (uint_64)($5 <= *($4 + [16])) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	if ( ((uint_64)$5 >= (uint_64)*($4 + [16])) ){ goto $label$14 }
	
.LABEL $label$15
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$14
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
}

int_32 .FUNC $28 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*(($1 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [9887])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9936])
	*(($1 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [9887])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9936])
	*(($0 + [80])) = [0]
	*($0 + [72 align=4]) = (int_64)0
	return $0
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10527])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $138($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([152])) + [136]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10554])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $88(($3 + [32]), ($5 + [8]))
	*($5 + [140]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $89(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $141($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $141($0)
	
.LABEL $label$1
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $21($0, *($1))
	CALL $21($0, *($1 + [4]))
	$0 = *(($1 + [24]))
	if ( ($0 == 0) ){ goto $label$2 }
	*(($1 + [28])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$2
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [12])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [16])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($2)
	CALL eosio_assert((((int_32)( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ) ^ (int_32)[-1]) & [1]), [9051])
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	$4 = uint_32(( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ) >> [1])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = CALL _Znwj($4)
	$6 = ($5 + $4)
	$4 = *($0)
	$7 = ($0 + [4])
	$8 = (*($7) - $4)
	$9 = ($5 - $8)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($9, $4, $8)
	$4 = *($0)
	
.LABEL $label$2
	*($0) = $9
	*($7) = $5
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$1 }
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$4 = *($2)
	$7 = ($2 + [4])
	if ( (( *($7) ? uint_32($4 >> [1]) : ($4 & [1]) ) == 0) ){ goto $label$3 }
	$10 = (($3 + [16]) | [1])
	$5 = ($0 + [4])
	$4 = [0]
	
.LOOP $label$4:
	$8 = CALL $110(($3 + [16]), $2, $4, [2], $2)
	$9 = (($3 + [16]) + [8])
	CALL eosio_assert(((int_32)CALL $137(( *($9) ? $10 : (*($3 + [16]) & [1]) ), [10174]) == (int_32)[2]), [10197])
	$8 = CALL $115($8, [0], [16])
	*($3 + [15]) = $8
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [8]))) ){ goto $label$7 }
	*($6) = $8
	*($5) = (*($5) + [1])
	if ( (*($3 + [16]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $72($0, ($3 + [15]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($9))
	
.LABEL $label$5
	$8 = *($2)
	$4 = ($4 + [2])
	if ( ($4 <= ( *($7) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($3 + [32])
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $109(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[48])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[89478486]) ){ goto $label$2 }
	$6 = [89478485]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[48])
	if ( ((uint_32)$7 > (uint_32)[44739241]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[48]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	*(($4 = ($5 + ((int_32)$4 * (int_32)[48])))) = *($1)
	*(($4 + [40])) = *(($1 + [40]))
	*(($4 + [32])) = *(($1 + [32]))
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 + ((int_32)((int_32)$1 / (int_32)[-48]) * (int_32)[48]))
	$6 = ($5 + ((int_32)$6 * (int_32)[48]))
	$4 = ($4 + [48])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

void .FUNC $27 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $global$0
	$2 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$1 }
	$1 = CALL $138($3)
	CALL read_action_data($1, $3)
	CALL $38($0, $1, $3)
	$global$0 = $2
	return 
	
.LABEL $label$1
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	CALL read_action_data($1, $3)
	CALL $38($0, $1, $3)
	$global$0 = $2
}

void .FUNC $26 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	float_64 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	int_32 $42
	int_32 $43
	int_32 $44
	int_32 $45
	int_32 $46
	$3 = ($global$0 - [384])
	$global$0 = $3
	CALL $27(($3 + [296]))
	$4 = *($3 + [296])
	*($3 + [288]) = $4
	$5 = *(($3 + [320]))
	$6 = *($3 + [304])
	$7 = *($3 + [312])
	$8 = CALL $109(($3 + [272]), ($3 + [328]))
	$9 = *($0)
	if ( ((int_64)$4 == (int_64)$9) ){ goto $label$2 }
	if ( ((int_64)$6 != (int_64)$9) ){ goto $label$2 }
	$9 = (int_64)0
	$10 = (int_64)59
	$11 = [8192]
	$12 = (int_64)0
	
.LOOP $label$3:
	$13 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$4 }
	$14 = *($11)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$14 = ($14 + [-91])
	goto $label$5 
	
.LABEL $label$6
	$14 = ( ($14 + [-48]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$13 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $14) & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$4
	$11 = ($11 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$3 }
	if ( ((int_64)$4 == (int_64)$12) ){ goto $label$2 }
	$9 = (int_64)0
	$13 = (int_64)59
	$11 = [8585]
	$12 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$9 > (uint_64)(int_64)8) ){ goto $label$12 }
	$14 = *($11)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$14 = ($14 + [-91])
	goto $label$10 
	
.LABEL $label$12
	$10 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$14 = ( ($14 + [-48]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$8
	$11 = ($11 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$12 = ((int_64)$10 | (int_64)$12)
	$13 = ((int_64)$13 + (int_64)4294967291)
	if ( ((int_64)$13 != (int_64)55834574842) ){ goto $label$7 }
	if ( ((int_64)$4 == (int_64)$12) ){ goto $label$2 }
	$9 = (int_64)0
	$13 = (int_64)59
	$11 = [8641]
	$12 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$18 }
	$14 = *($11)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$14 = ($14 + [-91])
	goto $label$16 
	
.LABEL $label$18
	$10 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$14 = ( ($14 + [-48]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$14
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)4294967291)
	$12 = ((int_64)$10 | (int_64)$12)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$13 }
	if ( ((int_64)$4 == (int_64)$12) ){ goto $label$2 }
	$15 = ($0 + [136])
	$9 = *($0 + [32])
	$14 = *(($0 + [164]))
	$16 = *(($0 + [160]))
	if ( ((int_32)$16 == (int_32)$14) ){ goto $label$20 }
	
.LOOP $label$22:
	$11 = ($14 + [-24])
	$17 = *($11)
	if ( ((int_64)*($17) == (int_64)$9) ){ goto $label$21 }
	$14 = $11
	if ( ((int_32)$16 != (int_32)$11) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((int_32)$16 == (int_32)$14) ){ goto $label$20 }
	CALL eosio_assert(((int_32)*($17 + [20]) == (int_32)$15), [10476])
	goto $label$19 
	
.LABEL $label$20
	$17 = [0]
	$11 = CALL db_find_i64(*($15), *(($0 + [144])), (int_64)4982871469126582272, $9)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$19 }
	$17 = CALL $4($15, $11)
	CALL eosio_assert(((int_32)*($17 + [20]) == (int_32)$15), [10476])
	
.LABEL $label$19
	CALL eosio_assert(($17 == 0), [8704])
	$14 = [0]
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$23 }
	$9 = (uint_64)$5 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$26 }
	$9 = $10
	$14 = [1]
	$17 = $11
	$11 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$26
	$9 = $10
	
.LOOP $label$27:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$24 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$14 = ((int_32)$11 < (int_32)[6])
	$17 = ($11 + [1])
	$11 = $17
	if ( $14 ){ goto $label$27 }
	$14 = [1]
	$11 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$14 = [0]
	
.LABEL $label$23
	CALL eosio_assert($14, [8787])
	CALL eosio_assert(((int_64)$5 == (int_64)1397703940), [8842])
	CALL eosio_assert(((int_64)$7 > (int_64)0), [8958])
	$11 = *($3 + [272])
	CALL eosio_assert(((uint_32)( *($8 + [4]) ? uint_32($11 >> [1]) : ($11 & [1]) ) > (uint_32)[3]), [9051])
	$11 = CALL $109(($3 + [232]), $8)
	$18 = CALL $14(($3 + [248]), $11)
	if ( ((*($11) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*($11 + [8]))
	
.LABEL $label$28
	$5 = *($18 + [16])
	if ( ((int_64)$5 == (int_64)$6) ){ goto $label$30 }
	if ( ((int_64)$5 == (int_64)*($3 + [288])) ){ goto $label$30 }
	if ( CALL is_account($5) ){ goto $label$29 }
	
.LABEL $label$30
	$5 = (int_64)0
	
.LABEL $label$29
	CALL $15(($3 + [216]), $18)
	CALL eosio_assert(((int_32)*($3 + [224]) != (int_32)[0]), [8274])
	$19 = ($0 + [216])
	$9 = *($3 + [288])
	$14 = *(($0 + [244]))
	$17 = *(($0 + [240]))
	if ( ((int_32)$17 == (int_32)$14) ){ goto $label$33 }
	
.LOOP $label$35:
	$11 = ($14 + [-24])
	$20 = *($11)
	if ( ((int_64)*($20) == (int_64)$9) ){ goto $label$34 }
	$14 = $11
	if ( ((int_32)$17 != (int_32)$11) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$34
	if ( ((int_32)$17 == (int_32)$14) ){ goto $label$33 }
	CALL eosio_assert(((int_32)*($20 + [84]) == (int_32)$19), [10476])
	if ( $20 ){ goto $label$31 }
	goto $label$32 
	
.LABEL $label$33
	$11 = CALL db_find_i64(*($19), *(($0 + [224])), (int_64)3607749778735104000, $9)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$32 }
	$20 = CALL $7($19, $11)
	CALL eosio_assert(((int_32)*($20 + [84]) == (int_32)$19), [10476])
	goto $label$31 
	
.LABEL $label$32
	$9 = *($0)
	*($3 + [376]) = ($3 + [288])
	*($3 + [32]) = $9
	CALL eosio_assert(((int_64)*(($0 + [216])) == (int_64)CALL $fimport$3()), [10234])
	*($3 + [80]) = $19
	*($3 + [84]) = ($3 + [376])
	*($3 + [88]) = ($3 + [32])
	$11 = CALL _Znwj([96])
	CALL $28($11)
	*($11 + [84]) = $19
	CALL $29(($3 + [80]), $11)
	*($3 + [352]) = $11
	$9 = *($11)
	*($3 + [80]) = $9
	$17 = *($11 + [88])
	*($3 + [192]) = $17
	$16 = ($0 + [244])
	$14 = *($16)
	if ( ((uint_32)$14 >= (uint_32)*(($0 + [248]))) ){ goto $label$38 }
	*($14 + [8]) = $9
	*($14 + [16]) = $17
	*($3 + [352]) = [0]
	*($14) = $11
	*($16) = ($14 + [24])
	$11 = *($3 + [352])
	*($3 + [352]) = [0]
	if ( $11 ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	CALL $30(($0 + [240]), ($3 + [352]), ($3 + [80]), ($3 + [192]))
	$11 = *($3 + [352])
	*($3 + [352]) = [0]
	if ( ($11 == 0) ){ goto $label$36 }
	
.LABEL $label$37
	$14 = *($11 + [72])
	if ( ($14 == 0) ){ goto $label$39 }
	*(($11 + [76])) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$39
	CALL _ZdlPv($11)
	
.LABEL $label$36
	$9 = *($3 + [288])
	$14 = *(($0 + [244]))
	$17 = *(($0 + [240]))
	if ( ((int_32)$17 == (int_32)$14) ){ goto $label$40 }
	
.LOOP $label$42:
	$11 = ($14 + [-24])
	$20 = *($11)
	if ( ((int_64)*($20) == (int_64)$9) ){ goto $label$41 }
	$14 = $11
	if ( ((int_32)$17 != (int_32)$11) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$41
	if ( ((int_32)$17 == (int_32)$14) ){ goto $label$40 }
	CALL eosio_assert(((int_32)*($20 + [84]) == (int_32)$19), [10476])
	goto $label$31 
	
.LABEL $label$40
	$20 = [0]
	$11 = CALL db_find_i64(*(($0 + [216])), *(($0 + [224])), (int_64)3607749778735104000, $9)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$31 }
	$20 = CALL $7($19, $11)
	CALL eosio_assert(((int_32)*($20 + [84]) == (int_32)$19), [10476])
	
.LABEL $label$31
	*($3 + [208]) = $7
	$21 = (($3 + [192]) | [4])
	*($3 + [192]) = $21
	$4 = (int_64)0
	*($3 + [196 align=4]) = (int_64)0
	$6 = (int_64)0
	$12 = (int_64)0
	$22 = (($3 + [216]) | [4])
	$14 = *($3 + [216])
	if ( ((int_32)$14 == (int_32)$22) ){ goto $label$43 }
	$23 = (($3 + [80]) + [16])
	$12 = (int_64)0
	$6 = (int_64)0
	$4 = (int_64)0
	
.LOOP $label$44:
	$15 = *($24 + [28])
	$24 = $14
	$16 = *($24 + [24])
	if ( ((int_32)$16 == (int_32)$15) ){ goto $label$45 }
	
.LOOP $label$46:
	$17 = *($16 + [12])
	$11 = *($16 + [8])
	$14 = *($16 + [10])
	$9 = ((int_64)((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $14) & (int_64)65535) << (int_64)16) | (int_64)(CASTING uint_64)(uint_32 $11)) | (int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $17) & (int_64)65535) << (int_64)32))
	if ( ($11 <= [32707]) ){ goto $label$50 }
	$14 = ($14 & [65535])
	if ( ($14 <= [32738]) ){ goto $label$50 }
	$17 = ($17 & [65535])
	if ( ((uint_32)$17 > (uint_32)[32829]) ){ goto $label$50 }
	if ( ((uint_32)$14 > (uint_32)[32798]) ){ goto $label$50 }
	if ( ((uint_32)$11 > (uint_32)[32829]) ){ goto $label$50 }
	if ( ((uint_32)$17 <= (uint_32)[32706]) ){ goto $label$50 }
	if ( (CALL $94($0, $9, ($3 + [80])) == 0) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	CALL eosio_assert([0], [8336])
	if ( CALL $94($0, $9, ($3 + [80])) ){ goto $label$48 }
	
.LABEL $label$49
	*($16 + [40]) = [2]
	$13 = (int_64)0
	*($16 + [16]) = (int_64)0
	$25 = ((float_64)CALL $125((float_64)1.5, (float_64)2) * (float_64)(float_64)200)
	if ( (((float_64)$25 < (float_64)(float_64)18446744073709551615) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$53 }
	*($16 + [32]) = (int_64)0
	if ( ((int_64)($5 == 0) == 0) ){ goto $label$51 }
	goto $label$52 
	
.LABEL $label$53
	*($16 + [32]) = (Rounds 0)($25)
	if ( ((int_64)($5 == 0) == 0) ){ goto $label$54 }
	$26 = [6]
	goto $label$47 
	
.LABEL $label$54
	$26 = [5]
	goto $label$47 
	
.LABEL $label$52
	$26 = [6]
	goto $label$47 
	
.LABEL $label$51
	$26 = [5]
	goto $label$47 
	
.LABEL $label$48
	*($16 + [16]) = *($23)
	$14 = (($3 + [80]) + [8])
	$11 = (*($14) + [1])
	*($16 + [40]) = $11
	$11 = ($11 & [255])
	if ( ($11 == 0) ){ goto $label$59 }
	$25 = ((float_64)CALL $125((float_64)1.5, (CASTING float_64)(uint_32 $11)) * (float_64)(float_64)200)
	if ( (((float_64)$25 < (float_64)(float_64)18446744073709551615) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$58 }
	$9 = (int_64)0
	*($16 + [32]) = (int_64)0
	$11 = *($14)
	if ( $11 ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$59
	$9 = (int_64)200
	*($16 + [32]) = (int_64)200
	$11 = [255]
	goto $label$57 
	
.LABEL $label$58
	$9 = (Rounds 0)($25)
	*($16 + [32]) = $9
	$11 = *($14)
	if ( ($11 == 0) ){ goto $label$56 }
	
.LABEL $label$57
	$25 = ((float_64)CALL $125((float_64)1.5, (CASTING float_64)(uint_32 $11)) * (float_64)(float_64)200)
	if ( (((float_64)$25 < (float_64)(float_64)18446744073709551615) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$60 }
	$10 = (int_64)0
	goto $label$55 
	
.LABEL $label$60
	$10 = (Rounds 0)($25)
	goto $label$55 
	
.LABEL $label$56
	$10 = (int_64)200
	
.LABEL $label$55
	CALL eosio_assert(((uint_64)$9 >= (uint_64)$10), [9154])
	$13 = ((uint_64)((int_64)$9 * (int_64)25) / (uint_64)(int_64)100)
	$9 = *(($16 + [32]))
	$7 = (int_64)
	*($16 + [24]) = $7($9 - $13))
	$11 = *($3 + [196])
	if ( ($11 == 0) ){ goto $label$62 }
	$14 = $21
	$10 = *($11 + [16])
	$9 = *(($16 + [16]))
	if ( (uint_64)($9 <= $10) ){ goto $label$61 }
	$26 = [2]
	goto $label$47 
	
.LABEL $label$62
	$11 = $21
	$14 = $21
	$26 = [3]
	goto $label$47 
	
.LABEL $label$61
	$26 = [11]
	
.LABEL $label$47
	
.LOOP $label$63:
	goto $label$83 
	
.LABEL $label$85
	if ( ((uint_64)$10 >= (uint_64)$9) ){ goto $label$69 }
	$26 = [10]
	goto $label$63 
	
.LABEL $label$84
	$14 = ($11 + [4])
	$17 = *($11 + [4])
	if ( ($17 == 0) ){ goto $label$71 }
	$26 = [0]
	goto $label$63 
	
.LABEL $label$83
	$11 = $14
	$26 = [1]
	goto $label$63 
	
.LABEL $label$82
	$14 = $11
	$11 = $17
	$10 = *($11 + [16])
	if ( ((uint_64)$9 >= (uint_64)$10) ){ goto $label$72 }
	$26 = [11]
	goto $label$63 
	
.LABEL $label$81
	$17 = *($11)
	if ( $17 ){ goto $label$70 }
	$26 = [12]
	goto $label$63 
	
.LABEL $label$80
	$14 = $11
	$17 = *($14)
	if ( $17 ){ goto $label$66 }
	goto $label$67 
	
.LABEL $label$79
	$17 = *($14)
	if ( $17 ){ goto $label$68 }
	$26 = [7]
	goto $label$63 
	
.LABEL $label$78
	*(($17 = CALL _Znwj([32]))) = (int_64)0
	*($17 + [8]) = $11
	*($14) = $17
	$9 = *(($16 + [16]))
	*($17 + [24]) = (int_64)0
	*($17 + [16]) = $9
	$11 = $17
	$27 = *(*($3 + [192]))
	if ( ($27 == 0) ){ goto $label$64 }
	$26 = [8]
	goto $label$63 
	
.LABEL $label$77
	*($3 + [192]) = $27
	$11 = *($14)
	$26 = [9]
	goto $label$63 
	
.LABEL $label$76
	CALL $24(*($3 + [196]), $11)
	*(($11 = (($3 + [192]) + [8]))) = (*($11) + [1])
	$26 = [4]
	goto $label$63 
	
.LABEL $label$75
	*(($11 = ($17 + [24]))) = ((int_64)*($11) + (int_64)$7)
	$6 = ((int_64)$13 + (int_64)$6)
	if ( (int_64)($5 == 0) ){ goto $label$65 }
	$26 = [5]
	goto $label$63 
	
.LABEL $label$74
	$4 = ((int_64)((uint_64)$13 / (uint_64)(int_64)25) + (int_64)$4)
	$26 = [6]
	goto $label$63 
	
.LABEL $label$73
	$12 = ((int_64)*($16 + [32]) + (int_64)$12)
	$16 = ($16 + [48])
	if ( ((int_32)$16 != (int_32)$15) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$72
	$26 = [2]
	goto $label$63 
	
.LABEL $label$71
	$26 = [3]
	goto $label$63 
	
.LABEL $label$70
	$26 = [1]
	goto $label$63 
	
.LABEL $label$69
	$26 = [3]
	goto $label$63 
	
.LABEL $label$68
	$26 = [4]
	goto $label$63 
	
.LABEL $label$67
	$26 = [7]
	goto $label$63 
	
.LABEL $label$66
	$26 = [4]
	goto $label$63 
	
.LABEL $label$65
	$26 = [6]
	goto $label$63 
	
.LABEL $label$64
	$26 = [9]
	goto $label$63 
	
.LABEL $label$45
	$11 = *($24 + [4])
	if ( ($11 == 0) ){ goto $label$87 }
	
.LOOP $label$88:
	$14 = $11
	$11 = *($14)
	if ( $11 ){ goto $label$88 }
	goto $label$86 
	
.LABEL $label$87
	$14 = *($24 + [8])
	if ( ((int_32)*($14) == (int_32)$24) ){ goto $label$86 }
	$17 = ($24 + [8])
	
.LOOP $label$89:
	$11 = *($17)
	$17 = ($11 + [8])
	$14 = *($11 + [8])
	if ( ((int_32)$11 != (int_32)*($14)) ){ goto $label$89 }
	
.LABEL $label$86
	if ( ((int_32)$14 != (int_32)$22) ){ goto $label$44 }
	$7 = *($3 + [208])
	
.LABEL $label$43
	CALL eosio_assert(((uint_64)$12 <= (uint_64)$7), [9235])
	CALL $98($0, *($3 + [288]), $12, $6)
	CALL $31($0, *($3 + [288]))
	$14 = *($3 + [192])
	if ( ((int_32)$14 == (int_32)$21) ){ goto $label$90 }
	$28 = (($3 + [160]) | [1])
	$23 = (($3 + [80]) + [8])
	$27 = ($0 + [244])
	$24 = ($0 + [240])
	$29 = ($0 + [224])
	$30 = ($0 + [216])
	
.LOOP $label$91:
	$15 = $14
	*($23) = *(($15 + [24]))
	$9 = *($15 + [16])
	*($3 + [80]) = $9
	$14 = *($27)
	$16 = *($24)
	if ( ((int_32)$16 == (int_32)$14) ){ goto $label$98 }
	
.LOOP $label$100:
	$11 = ($14 + [-24])
	$17 = *($11)
	if ( ((int_64)*($17) == (int_64)$9) ){ goto $label$99 }
	$14 = $11
	if ( ((int_32)$16 != (int_32)$11) ){ goto $label$100 }
	goto $label$98 
	
.LABEL $label$99
	if ( ((int_32)$16 == (int_32)$14) ){ goto $label$98 }
	CALL eosio_assert(((int_32)*($17 + [84]) == (int_32)$19), [10476])
	if ( $17 ){ goto $label$97 }
	goto $label$96 
	
.LABEL $label$98
	$11 = CALL db_find_i64(*($30), *($29), (int_64)3607749778735104000, $9)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$96 }
	$17 = CALL $7($19, $11)
	CALL eosio_assert(((int_32)*($17 + [84]) == (int_32)$19), [10476])
	
.LABEL $label$97
	$9 = *($0)
	*($3 + [32]) = ($3 + [80])
	CALL eosio_assert([1], [10285])
	CALL $32($19, $17, $9, ($3 + [32]))
	$11 = *($15 + [4])
	if ( $11 ){ goto $label$95 }
	goto $label$93 
	
.LABEL $label$96
	*(($16 = (($3 + [176]) + [8]))) = (int_64)1397703940
	$9 = *($23)
	*($3 + [176]) = $9
	$13 = *($0)
	$12 = *($3 + [80])
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9887])
	$9 = (int_64)5459781
	$11 = [0]
	
.LOOP $label$103:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$102 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$104 }
	$9 = $10
	$14 = [1]
	$17 = $11
	$11 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$103 }
	goto $label$101 
	
.LABEL $label$104
	$9 = $10
	
.LOOP $label$105:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$102 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$14 = ((int_32)$11 < (int_32)[6])
	$17 = ($11 + [1])
	$11 = $17
	if ( $14 ){ goto $label$105 }
	$14 = [1]
	$11 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$103 }
	goto $label$101 
	
.LABEL $label$102
	$14 = [0]
	
.LABEL $label$101
	CALL eosio_assert($14, [9936])
	*(($17 = (($3 + [160]) + [8]))) = [0]
	*($3 + [160]) = (int_64)0
	$11 = CALL $136([9280])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$94 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$108 }
	*($3 + [160]) = ($11 << [1])
	$14 = $28
	if ( $11 ){ goto $label$107 }
	goto $label$106 
	
.LABEL $label$108
	$31 = (($11 + [16]) & [-16])
	$14 = CALL _Znwj($31)
	*($17) = $14
	*($3 + [160]) = ($31 | [1])
	*($3 + [164]) = $11
	
.LABEL $label$107
	CALL memcpy($14, [9280], $11)
	
.LABEL $label$106
	*(($14 + $11)) = [0]
	*((($3 + [16]) + [8])) = *($16)
	*($3 + [16]) = *($3 + [176])
	CALL $33($0, $13, $12, ($3 + [16]), ($3 + [160]))
	if ( ((*($3 + [160]) & [1]) == 0) ){ goto $label$109 }
	CALL _ZdlPv(*($17))
	
.LABEL $label$109
	$11 = *($15 + [4])
	if ( ($11 == 0) ){ goto $label$93 }
	
.LABEL $label$95
	
.LOOP $label$110:
	$14 = $11
	$11 = *($14)
	if ( $11 ){ goto $label$110 }
	goto $label$92 
	
.LABEL $label$94
	CALL $108(($3 + [160]))
	
.LABEL $label$93
	$14 = *($15 + [8])
	if ( ((int_32)*($14) == (int_32)$15) ){ goto $label$92 }
	$17 = ($15 + [8])
	
.LOOP $label$111:
	$11 = *($17)
	$17 = ($11 + [8])
	$14 = *($11 + [8])
	if ( ((int_32)$11 != (int_32)*($14)) ){ goto $label$111 }
	
.LABEL $label$92
	if ( ((int_32)$14 != (int_32)$21) ){ goto $label$91 }
	
.LABEL $label$90
	if ( (int_64)($4 == 0) ){ goto $label$112 }
	*($3 + [152]) = (int_64)1397703940
	*($3 + [144]) = $4
	$13 = *($0)
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9887])
	$9 = (int_64)5459781
	$11 = [0]
	
.LOOP $label$115:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$114 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$116 }
	$9 = $10
	$14 = [1]
	$17 = $11
	$11 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$115 }
	goto $label$113 
	
.LABEL $label$116
	$9 = $10
	
.LOOP $label$117:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$114 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$14 = ((int_32)$11 < (int_32)[6])
	$17 = ($11 + [1])
	$11 = $17
	if ( $14 ){ goto $label$117 }
	$14 = [1]
	$11 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$115 }
	goto $label$113 
	
.LABEL $label$114
	$14 = [0]
	
.LABEL $label$113
	CALL eosio_assert($14, [9936])
	*(($3 + [136])) = [0]
	*($3 + [128]) = (int_64)0
	$11 = CALL $136([9333])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$120 }
	*($3 + [128]) = ($11 << [1])
	$14 = (($3 + [128]) | [1])
	if ( $11 ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$120
	$17 = (($11 + [16]) & [-16])
	$14 = CALL _Znwj($17)
	*($3 + [128]) = ($17 | [1])
	*($3 + [136]) = $14
	*($3 + [132]) = $11
	
.LABEL $label$119
	CALL memcpy($14, [9333], $11)
	
.LABEL $label$118
	*(($14 + $11)) = [0]
	*(($3 + [8])) = *((($3 + [144]) + [8]))
	*($3) = *($3 + [144])
	CALL $33($0, $13, $5, $3, ($3 + [128]))
	if ( ((*($3 + [128]) & [1]) == 0) ){ goto $label$112 }
	CALL _ZdlPv(*($3 + [136]))
	
.LABEL $label$112
	*($3 + [124]) = CALL $138([32768])
	*($3 + [120]) = CALL $138([33792])
	CALL memcpy(($3 + [80]), ($20 + [44]), [27])
	$14 = *($3 + [216])
	if ( ((int_32)$14 == (int_32)$22) ){ goto $label$121 }
	$32 = ($0 + [120])
	$28 = ($0 + [96])
	$33 = ($0 + [124])
	$34 = ($0 + [104])
	$35 = (($3 + [32]) + [12])
	$36 = (($3 + [32]) + [16])
	$37 = ($0 + [128])
	$38 = ($3 + [98])
	$39 = ($3 + [99])
	$40 = ($3 + [101])
	$41 = ($3 + [102])
	$42 = ($3 + [105])
	$43 = ($3 + [97])
	$44 = ($3 + [100])
	$45 = ($3 + [103])
	$46 = ($3 + [106])
	
.LOOP $label$122:
	$31 = $14
	$9 = *($31 + [16])
	*($3 + [72]) = $9
	*($3 + [70]) = [0]
	$14 = *($33)
	$17 = *($32)
	if ( ((int_32)$17 == (int_32)$14) ){ goto $label$127 }
	
.LOOP $label$129:
	$11 = ($14 + [-24])
	$30 = *($11)
	if ( ((int_64)*($30) == (int_64)$9) ){ goto $label$128 }
	$14 = $11
	if ( ((int_32)$17 != (int_32)$11) ){ goto $label$129 }
	goto $label$127 
	
.LABEL $label$128
	if ( ((int_32)$17 == (int_32)$14) ){ goto $label$127 }
	CALL eosio_assert(((int_32)*($30 + [24]) == (int_32)$28), [10476])
	goto $label$126 
	
.LABEL $label$127
	$30 = [0]
	$11 = CALL db_find_i64(*($28), *($34), (int_64)4860852945467473920, $9)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$125 }
	$30 = CALL $16($28, $11)
	CALL eosio_assert(((int_32)*($30 + [24]) == (int_32)$28), [10476])
	
.LABEL $label$126
	*(($16 = (($3 + [56]) + [8]))) = [0]
	*($3 + [56]) = (int_64)0
	$17 = *($3 + [124])
	$15 = ($30 + [16])
	$11 = (*($15) - *($30 + [12]))
	if ( ($11 == 0) ){ goto $label$130 }
	if ( ((int_32)$11 <= (int_32)[-1]) ){ goto $label$124 }
	$14 = CALL _Znwj($11)
	*($16) = ($14 + $11)
	*($3 + [56]) = $14
	*($3 + [60]) = $14
	$16 = *(($30 + [12]))
	$11 = (*($15) - $16)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$130 }
	CALL memcpy($14, $16, $11)
	*($3 + [60]) = (*($3 + [60]) + $11)
	
.LABEL $label$130
	*($3 + [70]) = CALL $103($17, ($3 + [56]))
	$11 = *($3 + [56])
	if ( ($11 == 0) ){ goto $label$125 }
	*($3 + [60]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$125
	$29 = *($31 + [28])
	$11 = *(($31 + [24]))
	if ( ((int_32)$11 == (int_32)$29) ){ goto $label$123 }
	
.LOOP $label$131:
	$15 = ($11 + [8])
	$14 = *($15)
	if ( ($14 <= [32707]) ){ goto $label$133 }
	$17 = *(($11 + [10]))
	if ( ($17 <= [32738]) ){ goto $label$133 }
	$16 = *(($11 + [12]))
	if ( ((uint_32)$16 > (uint_32)[32829]) ){ goto $label$133 }
	if ( ((uint_32)$17 > (uint_32)[32798]) ){ goto $label$133 }
	if ( ((uint_32)$14 > (uint_32)[32829]) ){ goto $label$133 }
	if ( ((uint_32)$16 > (uint_32)[32706]) ){ goto $label$132 }
	
.LABEL $label$133
	CALL eosio_assert([0], [9377])
	
.LABEL $label$132
	CALL eosio_assert(((int_32)*(($11 + [14])) == (int_32)[1]), [9391])
	$23 = ($11 + [12])
	$27 = *($23)
	$17 = *($15)
	$21 = ($11 + [10])
	$16 = *($21)
	$9 = ((int_64)((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $16) & (int_64)65535) << (int_64)16) | (int_64)(CASTING uint_64)(uint_32 $17)) | (int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $27) & (int_64)65535) << (int_64)32))
	$14 = [0]
	$16 = uint_32((((($16 << [5]) & [992]) | ($17 & [30])) | (($27 << [10]) & [31744])) >> [1])
	if ( ((uint_32)$16 >= (uint_32)*($3 + [70])) ){ goto $label$134 }
	$14 = (((int_32)($17 << [2]) ^ (int_32)[-1]) & [4])
	$14 = uint_32((([15] << $14) & *((*($3 + [124]) + ($16 & [65535])))) >> $14)
	
.LABEL $label$134
	$16 = *(($11 + [40]))
	if ( (CALL $94($0, $9, ($3 + [32])) == 0) ){ goto $label$136 }
	CALL $97($0, $9)
	goto $label$135 
	
.LABEL $label$136
	$16 = [2]
	$14 = ( [4] ? $14 : (($14 & [255]) <= [2]) )
	
.LABEL $label$135
	$17 = [0]
	$27 = ($14 & [255])
	if ( ((int_32)*($3 + [80]) != (int_32)$27) ){ goto $label$138 }
	if ( ((int_32)(*($3 + [81]) & [255]) == (int_32)($16 & [255])) ){ goto $label$137 }
	
.LABEL $label$138
	$17 = [1]
	if ( ((int_32)*($3 + [83]) != (int_32)$27) ){ goto $label$139 }
	if ( ((int_32)(*($3 + [84]) & [255]) == (int_32)($16 & [255])) ){ goto $label$137 }
	
.LABEL $label$139
	$17 = [2]
	if ( ((int_32)*($3 + [86]) != (int_32)$27) ){ goto $label$140 }
	if ( ((int_32)(*($3 + [87]) & [255]) == (int_32)($16 & [255])) ){ goto $label$137 }
	
.LABEL $label$140
	$17 = [3]
	if ( ((int_32)*($3 + [89]) != (int_32)$27) ){ goto $label$141 }
	if ( ((int_32)(*($3 + [90]) & [255]) == (int_32)($16 & [255])) ){ goto $label$137 }
	
.LABEL $label$141
	$17 = [4]
	if ( ((int_32)*($3 + [92]) != (int_32)$27) ){ goto $label$142 }
	if ( ((int_32)(*($3 + [93]) & [255]) == (int_32)($16 & [255])) ){ goto $label$137 }
	
.LABEL $label$142
	$17 = [5]
	if ( ((int_32)*($3 + [95]) != (int_32)$27) ){ goto $label$143 }
	if ( ((int_32)(*((($3 + [80]) + [16])) & [255]) == (int_32)($16 & [255])) ){ goto $label$137 }
	
.LABEL $label$143
	$17 = [6]
	if ( ((int_32)*($38) != (int_32)$27) ){ goto $label$144 }
	if ( ((int_32)(*($39) & [255]) == (int_32)($16 & [255])) ){ goto $label$137 }
	
.LABEL $label$144
	$17 = [7]
	if ( ((int_32)*($40) != (int_32)$27) ){ goto $label$145 }
	if ( ((int_32)(*($41) & [255]) == (int_32)($16 & [255])) ){ goto $label$137 }
	
.LABEL $label$145
	if ( ((int_32)*((($3 + [80]) + [24])) != (int_32)$27) ){ goto $label$146 }
	$17 = [8]
	if ( ((int_32)(*($42) & [255]) == (int_32)($16 & [255])) ){ goto $label$137 }
	
.LABEL $label$146
	$17 = [0]
	if ( (*($3 + [82]) == 0) ){ goto $label$137 }
	$17 = [1]
	if ( (*($3 + [85]) == 0) ){ goto $label$137 }
	$17 = [2]
	if ( (*($3 + [88]) == 0) ){ goto $label$137 }
	$17 = [3]
	if ( (*($3 + [91]) == 0) ){ goto $label$137 }
	$17 = [4]
	if ( (*($3 + [94]) == 0) ){ goto $label$137 }
	$17 = [5]
	if ( (*($43) == 0) ){ goto $label$137 }
	$17 = [6]
	if ( (*($44) == 0) ){ goto $label$137 }
	$17 = [7]
	if ( (*($45) == 0) ){ goto $label$137 }
	$17 = ( [-1] ? [8] : *($46) )
	
.LABEL $label$137
	CALL eosio_assert(((int_32)uint_32(($17 & [128]) >> [7]) ^ (int_32)[1]), [9405])
	$17 = (($3 + [80]) + ((int_32)$17 * (int_32)[3]))
	CALL eosio_assert((*($17 + [2]) <= [16]), [9419])
	$27 = ($17 + [2])
	$24 = *($17 + [2])
	if ( $24 ){ goto $label$147 }
	*($17) = $14
	*($17 + [1]) = $16
	
.LABEL $label$147
	*($27) = ($24 + [1])
	$17 = (((int_32)($17 << [2]) ^ (int_32)[-1]) & [4])
	*(($16 = (*($3 + [124]) + ($14 = uint_32(((((*($21) << [5]) & [992]) | (($17 = *($15)) & [30])) | ((*($23) << [10]) & [31744])) >> [1]))))) = ((*($16) & ((int_32)([15] << $17) ^ (int_32)[-1])) | ([1] << $17))
	if ( ($14 <= *($3 + [70])) ){ goto $label$148 }
	*($3 + [70]) = ($14 + [1])
	
.LABEL $label$148
	$11 = ($11 + [48])
	if ( ((int_32)$29 != (int_32)$11) ){ goto $label$131 }
	goto $label$123 
	
.LABEL $label$124
	CALL $121(($3 + [56]))
	
.LABEL $label$123
	$9 = *($0)
	if ( ($30 == 0) ){ goto $label$152 }
	*((($3 + [32]) + [8])) = ($3 + [70])
	*($3 + [36]) = ($3 + [124])
	*($3 + [32]) = ($3 + [120])
	CALL eosio_assert([1], [10285])
	CALL $34($28, $30, $9, ($3 + [32]))
	$11 = *($31 + [4])
	if ( $11 ){ goto $label$151 }
	goto $label$150 
	
.LABEL $label$152
	*((($3 + [32]) + [8])) = ($3 + [120])
	*($35) = ($3 + [124])
	*($36) = ($3 + [70])
	*($3 + [32]) = ($3 + [72])
	*($3 + [36]) = $0
	*($3 + [376]) = $9
	CALL eosio_assert(((int_64)*($28) == (int_64)CALL $fimport$3()), [10234])
	*($3 + [352]) = $28
	*((($3 + [352]) + [8])) = ($3 + [376])
	*($3 + [356]) = ($3 + [32])
	*(($11 = CALL _Znwj([40])) + [20]) = [0]
	*($11 + [12 align=4]) = (int_64)0
	*($11 + [24]) = $28
	CALL $35(($3 + [352]), $11)
	*($3 + [368]) = $11
	$9 = *($11)
	*($3 + [352]) = $9
	$17 = *($11 + [28])
	*($3 + [348]) = $17
	$14 = *($33)
	if ( ((uint_32)$14 >= (uint_32)*($37)) ){ goto $label$155 }
	*($14 + [8]) = $9
	*($14 + [16]) = $17
	*($3 + [368]) = [0]
	*($14) = $11
	*($33) = ($14 + [24])
	$11 = *($3 + [368])
	*($3 + [368]) = [0]
	if ( ($11 == 0) ){ goto $label$154 }
	goto $label$153 
	
.LABEL $label$155
	CALL $20($32, ($3 + [368]), ($3 + [352]), ($3 + [348]))
	$11 = *($3 + [368])
	*($3 + [368]) = [0]
	if ( $11 ){ goto $label$153 }
	
.LABEL $label$154
	$11 = *($31 + [4])
	if ( ($11 == 0) ){ goto $label$150 }
	goto $label$151 
	
.LABEL $label$153
	$14 = *($11 + [12])
	if ( ($14 == 0) ){ goto $label$156 }
	*(($11 + [16])) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$156
	CALL _ZdlPv($11)
	$11 = *($31 + [4])
	if ( ($11 == 0) ){ goto $label$150 }
	
.LABEL $label$151
	
.LOOP $label$157:
	$14 = $11
	$11 = *($14)
	if ( $11 ){ goto $label$157 }
	goto $label$149 
	
.LABEL $label$150
	$14 = *($31 + [8])
	if ( ((int_32)*($14) == (int_32)$31) ){ goto $label$149 }
	$17 = ($31 + [8])
	
.LOOP $label$158:
	$11 = *($17)
	$17 = ($11 + [8])
	$14 = *($11 + [8])
	if ( ((int_32)$11 != (int_32)*($14)) ){ goto $label$158 }
	
.LABEL $label$149
	if ( ((int_32)$14 != (int_32)$22) ){ goto $label$122 }
	
.LABEL $label$121
	$9 = *($0)
	*($3 + [36]) = $0
	*($3 + [32]) = ($3 + [80])
	*($3 + [40]) = ($3 + [208])
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [10285])
	CALL $36($19, $20, $9, ($3 + [32]))
	CALL $37(($3 + [192]), *($3 + [196]))
	CALL $21(($3 + [216]), *($3 + [220]))
	$11 = *($18)
	if ( ($11 == 0) ){ goto $label$2 }
	*($18 + [4]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$2
	if ( ((*($3 + [272]) & [1]) == 0) ){ goto $label$159 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$159
	if ( ((*(($3 + [328])) & [1]) == 0) ){ goto $label$160 }
	CALL _ZdlPv(*(($3 + [336])))
	
.LABEL $label$160
	$global$0 = ($3 + [384])
	return (unreachable)
	
.LABEL $label$1
	CALL $108(($3 + [128]))
	$26
	(unreachable)
	(unreachable)
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $135 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10366])
	$5 = *($1)
	$6 = CALL $102(*(*($3)), *(*($3 + [4])), *(*($3 + [8])))
	$7 = *(*($3))
	*(($8 = $4)) = (int_64)0
	$3 = [0]
	*($8 + [8]) = [0]
	$9 = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$2 }
	$9 = CALL _Znwj($6)
	$3 = ($9 + $6)
	*(($8 + [8])) = $3
	*($8) = $9
	CALL memcpy($9, $7, $6)
	*($8 + [4]) = $3
	
.LABEL $label$3
	$6 = *($1 + [12])
	if ( ($6 == 0) ){ goto $label$5 }
	*(($1 + [16])) = $6
	CALL _ZdlPv($6)
	*(($6 = ($1 + [20]))) = [0]
	*($1 + [12 align=4]) = (int_64)0
	goto $label$4 
	
.LABEL $label$5
	$6 = ($1 + [20])
	
.LABEL $label$4
	*($6) = $3
	*(($6 = ($1 + [16]))) = $3
	*(($3 = ($1 + [12]))) = $9
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10417])
	$3 = *($3)
	$9 = *($6)
	$6 = (($9 + [9]) - $3)
	$10 = (CASTING uint_64)(uint_32 ($9 - $3))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$6 }
	if ( ($6 <= [513]) ){ goto $label$8 }
	$11 = CALL $138($6)
	goto $label$7 
	
.LABEL $label$8
	$11 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $11
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [10228])
	CALL memcpy($11, $1, [8])
	CALL eosio_assert(((int_32)($6 + [-8]) > (int_32)[0]), [10228])
	CALL memcpy(($11 + [8]), ($1 + [8]), [1])
	$10 = (CASTING uint_64)(uint_32 (*(($1 + [16])) - *(($1 + [12]))))
	$3 = ($11 + [9])
	$7 = ($11 + $6)
	
.LOOP $label$9:
	$9 = (CASTING uint_32)(uint_64 $10)
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	$4 = ((int_64)$10) != (int_64)0
	*($8 + [15]) = (($4) << [7]) | ($9 & [127]))
	CALL eosio_assert(((int_32)($7 - $3) > (int_32)[0]), [10228])
	CALL memcpy($3, ($8 + [15]), [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$9 }
	$9 = *(($1 + [12]))
	$4 = (*(($1 + [16])) - $9)
	CALL eosio_assert(((int_32)($7 - $3) >= (int_32)$4), [10228])
	CALL memcpy($3, $9, $4)
	CALL db_update_i64(*($1 + [28]), $2, $11, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$10 }
	goto $label$1 
	
.LABEL $label$11
	CALL $141($11)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	
.LABEL $label$10
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($8 + [16])
	return (unreachable)
	
.LABEL $label$2
	CALL $121($8)
	
.LABEL $label$1
	$global$0 = ($8 + [16])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = CALL $109($2, $1)
	$4 = *($1 + [16])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$1 = (*(*($0)) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	$5 = CALL $109(($2 + [16]), $3)
	CALL void $1((int_32 $5), (int_32 $4), (int_64 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($3) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $108 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $138($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*($3 + [16]) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [52]) = $1
	*($3 + [48]) = $1
	*($3 + [56]) = ($1 + $0)
	CALL $67(($3 + [48]), ($3 + [8]))
	CALL eosio_assert(((uint_32)(*($3 + [56]) - *($3 + [52])) > (uint_32)[7]), [10554])
	CALL memcpy(($3 + [24]), *($3 + [52]), [8])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $141($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $68(($3 + [48]), ($3 + [8]))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	$3 = ($global$0 - [128])
	$global$0 = $3
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8192]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($7)
	$6 = CALL $109(($3 + [88]), $1)
	$10 = CALL $14(($3 + [104]), $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$5
	CALL $15(($3 + [72]), $10)
	CALL eosio_assert(((int_32)*($3 + [80]) != (int_32)[0]), [8274])
	*($3 + [68]) = CALL $138([32768])
	*($3 + [64]) = CALL $138([33792])
	$11 = (($3 + [72]) | [4])
	$9 = *($3 + [72])
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$6 }
	$12 = ((int_64)$2 << (int_64)1)
	$13 = ($0 + [96])
	$14 = ($0 + [124])
	$15 = ($0 + [120])
	$16 = ($0 + [104])
	$17 = (($3 + [16]) + [8])
	$18 = (($3 + [16]) + [12])
	$19 = (($3 + [16]) + [16])
	
.LOOP $label$7:
	$20 = $9
	$4 = *($20 + [16])
	*($3 + [56]) = $4
	*($3 + [54]) = [0]
	$9 = *($14)
	$1 = *($15)
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$12 }
	
.LOOP $label$14:
	$6 = ($9 + [-24])
	$21 = *($6)
	if ( ((int_64)*($21) == (int_64)$4) ){ goto $label$13 }
	$9 = $6
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$1 == (int_32)$9) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*($21 + [24]) == (int_32)$13), [10476])
	goto $label$11 
	
.LABEL $label$12
	$21 = [0]
	$6 = CALL db_find_i64(*($13), *($16), (int_64)4860852945467473920, $4)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$10 }
	$21 = CALL $16($13, $6)
	CALL eosio_assert(((int_32)*($21 + [24]) == (int_32)$13), [10476])
	
.LABEL $label$11
	*(($22 = (($3 + [40]) + [8]))) = [0]
	*($3 + [40]) = (int_64)0
	$1 = *($3 + [68])
	$23 = ($21 + [16])
	$6 = (*($23) - *($21 + [12]))
	if ( ($6 == 0) ){ goto $label$15 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$9 }
	$9 = CALL _Znwj($6)
	*($22) = ($9 + $6)
	*($3 + [40]) = $9
	*($3 + [44]) = $9
	$22 = *(($21 + [12]))
	$6 = (*($23) - $22)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$15 }
	CALL memcpy($9, $22, $6)
	*($3 + [44]) = (*($3 + [44]) + $6)
	
.LABEL $label$15
	*($3 + [54]) = CALL $103($1, ($3 + [40]))
	$6 = *($3 + [40])
	if ( ($6 == 0) ){ goto $label$10 }
	*($3 + [44]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$10
	$25 = *($20 + [28])
	$24 = *(($20 + [24]))
	if ( ((int_32)$24 == (int_32)$25) ){ goto $label$8 }
	
.LOOP $label$16:
	$6 = *($24 + [8])
	if ( ($6 <= [32707]) ){ goto $label$18 }
	$9 = *(($24 + [10]))
	if ( ($9 <= [32738]) ){ goto $label$18 }
	$1 = *($24 + [12])
	if ( ((uint_32)$1 > (uint_32)[32829]) ){ goto $label$18 }
	if ( ((uint_32)$9 > (uint_32)[32798]) ){ goto $label$18 }
	if ( ((uint_32)$6 > (uint_32)[32829]) ){ goto $label$18 }
	if ( ((uint_32)$1 > (uint_32)[32706]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL eosio_assert([0], [8336])
	$9 = *(($24 + [10]))
	$6 = *(($24 + [8]))
	$1 = *($24 + [12])
	
.LABEL $label$17
	$5 = ((int_64)$5 & (int_64)65504)
	$4 = (int_64)
	$27 = (CASTING uint_32)(uint_64 ( $4($4 - $2)) ? $5 : ((uint_64)$4 > (uint_64)$5) )
	$7 = ((int_64)(uint_64)$4 >> (uint_64)(int_64)5) * (int_64)33
	$5 = (CASTING uint_64)(uint_32 $6)
	$4 = ((int_64)$5 & (int_64)65535)
	$8 = ((int_64)$4 + (int_64)$2)
	$26 = ((CASTING uint_32)(uint_64 ( $8 ? $7) : (uint_64)($8 <= $7) )) & [65535]
	if ( ((uint_32)$26) <= (uint_32)($27) & [65535])) ){ goto $label$19 }
	$5 = ((int_64)(uint_64)$4 >> (uint_64)(int_64)5) * (int_64)33
	$28 = (CASTING uint_32)(uint_64 ( $4 ? $5) : ((uint_64)$5 > (uint_64)$4) )
	$5 = ((int_64)$5 & (int_64)65504)
	$5 = (CASTING uint_64)(uint_32 $9)
	$4 = ((int_64)$5 & (int_64)65535)
	$8 = (int_64)
	$8 = ( $8($4 - $12)) ? $5 : ((uint_64)$8 > (uint_64)$5) 
	if ( ((int_32)((CASTING uint_32)(uint_64 $8)) & [65535]) >= (int_32)$28)) ){ goto $label$20 }
	$5 = ((int_64)$5 & (int_64)65504)
	$5 = (CASTING uint_64)(uint_32 $1)
	$4 = ((int_64)$5 & (int_64)65535)
	$7 = (int_64)
	$5 = ( $7($4 - $2)) ? $5 : ((uint_64)$7 > (uint_64)$5) 
	$29 = (CASTING uint_32)(uint_64 $5))
	$30 = (CASTING uint_32)(uint_64 $8)
	$31 = ((CASTING uint_32)(uint_64 $5) & [65535])
	$4 = ((int_64)(uint_64)$4 >> (uint_64)(int_64)5) * (int_64)33
	$5 = ((int_64)$4 + (int_64)$2)
	$23 = ((CASTING uint_32)(uint_64 ( $5 ? $4) : (uint_64)($5 <= $4) )) & [65535])
	
.LOOP $label$21:
	$6 = $30
	if ( ((uint_32)$23 <= (uint_32)$31) ){ goto $label$23 }
	$32 = ($27 & [30])
	$33 = (((int_32)($27 << [2]) ^ (int_32)[-1]) & [4])
	$34 = ((int_32)([15] << $33) ^ (int_32)[-1])
	$35 = $30
	
.LOOP $label$24:
	$22 = ((($35 << [5]) & [992]) | $32)
	$6 = $29
	
.LOOP $label$25:
	*(($1 = (*($3 + [68]) + ($9 = uint_32((($22 | (($6 << [10]) & [31744])) & [65534]) >> [1]))))) = ((*($1) & $34) | (*(($24 + [14])) << $33))
	if ( ($9 <= *($3 + [54])) ){ goto $label$26 }
	*($3 + [54]) = ($9 + [1])
	
.LABEL $label$26
	$6 = ($6 + [1])
	if ( ((uint_32)$23 > (uint_32)($6 & [65535])) ){ goto $label$25 }
	$35 = ($35 + [1])
	if ( ((int_32)($35 & [65535]) < (int_32)$28) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	
.LOOP $label$27:
	$6 = ($6 + [1])
	if ( ((int_32)($6 & [65535]) < (int_32)$28) ){ goto $label$27 }
	
.LABEL $label$22
	$27 = ($27 + [1])
	if ( ((uint_32)$26 > (uint_32)($27 & [65535])) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	
.LOOP $label$28:
	$27 = ($27 + [1])
	if ( ((uint_32)$26 > (uint_32)($27 & [65535])) ){ goto $label$28 }
	
.LABEL $label$19
	$24 = ($24 + [48])
	if ( ((int_32)$24 != (int_32)$25) ){ goto $label$16 }
	goto $label$8 
	
.LABEL $label$9
	CALL $121(($3 + [40]))
	
.LABEL $label$8
	$4 = *($0)
	if ( ($21 == 0) ){ goto $label$32 }
	*($17) = ($3 + [54])
	*($3 + [20]) = ($3 + [68])
	*($3 + [16]) = ($3 + [64])
	CALL eosio_assert(((int_32)$21 != (int_32)[0]), [10285])
	CALL $69($13, $21, $4, ($3 + [16]))
	$6 = *($20 + [4])
	if ( $6 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	*($3 + [20]) = $0
	*($17) = ($3 + [64])
	*($18) = ($3 + [68])
	*($19) = ($3 + [54])
	*($3 + [16]) = ($3 + [56])
	CALL $70(($3 + [8]), $13, $4, ($3 + [16]))
	$6 = *($20 + [4])
	if ( ($6 == 0) ){ goto $label$30 }
	
.LABEL $label$31
	
.LOOP $label$33:
	$9 = $6
	$6 = *($9)
	if ( $6 ){ goto $label$33 }
	goto $label$29 
	
.LABEL $label$30
	$9 = *($20 + [8])
	if ( ((int_32)*($9) == (int_32)$20) ){ goto $label$29 }
	$1 = ($20 + [8])
	
.LOOP $label$34:
	$6 = *($1)
	$1 = ($6 + [8])
	$9 = *($6 + [8])
	if ( ((int_32)$6 != (int_32)*($9)) ){ goto $label$34 }
	
.LABEL $label$29
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$7 }
	
.LABEL $label$6
	CALL $21(($3 + [72]), *($3 + [76]))
	$6 = *($10)
	if ( ($6 == 0) ){ goto $label$35 }
	*($10 + [4]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$35
	$global$0 = ($3 + [128])
	(unreachable)
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $77($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $112($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $112($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $108($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $66 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [240]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [244])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	$5 = *($4 + [72])
	if ( ($5 == 0) ){ goto $label$6 }
	*(($4 + [76])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$6
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [240]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$5 = *(($0 + [200]))
	if ( ($5 == 0) ){ goto $label$7 }
	$1 = ($0 + [204])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$11 }
	CALL _ZdlPv($4)
	
.LABEL $label$11
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$10 }
	$3 = *(($0 + [200]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $5
	
.LABEL $label$8
	*($1) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$1 = *(($0 + [160]))
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [164])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$16 }
	$5 = *($4 + [8])
	if ( ($5 == 0) ){ goto $label$17 }
	*(($4 + [12])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	CALL _ZdlPv($4)
	
.LABEL $label$16
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$15 }
	$3 = *(($0 + [160]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	$1 = *(($0 + [120]))
	if ( ($1 == 0) ){ goto $label$18 }
	$2 = ($0 + [124])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$20 }
	
.LOOP $label$21:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$22 }
	$5 = *($4 + [12])
	if ( ($5 == 0) ){ goto $label$23 }
	*(($4 + [16])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$23
	CALL _ZdlPv($4)
	
.LABEL $label$22
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$21 }
	$3 = *(($0 + [120]))
	goto $label$19 
	
.LABEL $label$20
	$3 = $1
	
.LABEL $label$19
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$18
	$5 = *(($0 + [80]))
	if ( ($5 == 0) ){ goto $label$24 }
	$1 = ($0 + [84])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$26 }
	
.LOOP $label$27:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$28 }
	CALL _ZdlPv($4)
	
.LABEL $label$28
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$27 }
	$3 = *(($0 + [80]))
	goto $label$25 
	
.LABEL $label$26
	$3 = $5
	
.LABEL $label$25
	*($1) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$24
	return $0
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $138($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [10554])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $141($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $138($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [10554])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [10554])
	$6 = ($3 + [8])
	CALL memcpy($6, ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $141($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($6)
	$8 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $138($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [56]) = ($1 + $0)
	*($3 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [10554])
	CALL memcpy(($3 + [8]), $1, [8])
	*($3 + [52]) = ($1 + [8])
	CALL $67(($3 + [48]), (($3 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $141($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $71(($3 + [48]), ($3 + [8]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $138($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)1398362884
	*($3 + [32]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL eosio_assert([1], [9887])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [9936])
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10554])
	CALL memcpy(($3 + [24]), $6, [8])
	$2 = ($7 & [-8])
	CALL eosio_assert(((int_32)$2 != (int_32)[8]), [10554])
	$1 = (($3 + [24]) + [8])
	CALL memcpy($1, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[16]), [10554])
	CALL memcpy((($3 + [24]) + [16]), ($6 + [16]), [8])
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $141($6)
	
.LABEL $label$8
	*(($2 = (($3 + [48]) + [8]))) = *(($1 + [8]))
	*($3 + [48]) = *($1)
	$8 = *($3 + [24])
	*((($3 + [64]) + [8])) = *($2)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$10 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $10
	*((($3 + [8]) + [8])) = $10
	$10 = *($3 + [64])
	*($3 + [8]) = $10
	*($3 + [80]) = $10
	CALL void $1((int_32 $8), (int_64 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC $101 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = ($0 + [176])
	$4 = [0]
	$5 = CALL db_lowerbound_i64(*($0 + [176]), *(($0 + [184])), (int_64)-6147719000974426112, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $48($3, $5)
	
.LABEL $label$1
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	$6 = *($0)
	*($2) = $6
	*($2 + [8]) = $1
	*($2 + [24]) = (int_64)0
	$5 = CALL db_lowerbound_i64($6, $1, (int_64)4983122731492682032, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $47($2, $5)
	$8 = ($0 + [204])
	$9 = ($0 + [200])
	$10 = ($0 + [184])
	$11 = ($0 + [176])
	
.LOOP $label$3:
	if ( ($4 == 0) ){ goto $label$8 }
	$1 = *($7)
	$5 = *($8)
	$12 = *($9)
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$9:
	$0 = ($5 + [-24])
	$13 = *($0)
	if ( ((int_64)*($13) == (int_64)$1) ){ goto $label$7 }
	$5 = $0
	if ( ((int_32)$12 != (int_32)$0) ){ goto $label$9 }
	goto $label$6 
	
.LABEL $label$8
	$0 = [0]
	$5 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($5, [8551])
	CALL eosio_assert($5, [9250])
	$5 = CALL db_next_i64(*($7 + [20]), ($2 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	$0 = CALL $47($2, $5)
	
.LABEL $label$10
	CALL $50($2, $7)
	$7 = $0
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$7
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($13 + [40]) == (int_32)$3), [9184])
	if ( $13 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = CALL db_find_i64(*($11), *($10), (int_64)-6147719000974426112, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$4 }
	$13 = CALL $48($3, $0)
	CALL eosio_assert(((int_32)*($13 + [40]) == (int_32)$3), [9184])
	
.LABEL $label$5
	if ( ((int_64)((int_64)*($13 + [16]) * (int_64)200) < (int_64)*($13 + [24])) ){ goto $label$11 }
	CALL eosio_assert([1], [9250])
	$0 = CALL db_next_i64(*($13 + [44]), ($2 + [40]))
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$11 }
	CALL $48($3, $0)
	$0 = [0]
	$5 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($5, [8551])
	CALL eosio_assert($5, [9250])
	$5 = CALL db_next_i64(*($7 + [20]), ($2 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	$0 = CALL $47($2, $5)
	
.LABEL $label$12
	CALL $50($2, $7)
	$7 = $0
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$11
	CALL eosio_assert([1], [9250])
	$0 = *($7 + [20])
	$7 = [0]
	$0 = CALL db_next_i64($0, ($2 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$13 }
	$7 = CALL $47($2, $0)
	
.LABEL $label$13
	if ( $7 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$0 = [0]
	$5 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($5, [8551])
	CALL eosio_assert($5, [9250])
	$5 = CALL db_next_i64(*($7 + [20]), ($2 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$14 }
	$0 = CALL $47($2, $5)
	
.LABEL $label$14
	CALL $50($2, $7)
	$7 = $0
	if ( $0 ){ goto $label$3 }
	
.LABEL $label$2
	$13 = *($2 + [24])
	if ( ($13 == 0) ){ goto $label$15 }
	$12 = ($2 + [28])
	$0 = *($12)
	if ( ((int_32)$0 == (int_32)$13) ){ goto $label$17 }
	
.LOOP $label$18:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$19 }
	CALL _ZdlPv($5)
	
.LABEL $label$19
	if ( ((int_32)$13 != (int_32)$0) ){ goto $label$18 }
	$0 = *(($2 + [24]))
	goto $label$16 
	
.LABEL $label$17
	$0 = $13
	
.LABEL $label$16
	*($12) = $13
	CALL _ZdlPv($0)
	
.LABEL $label$15
	$global$0 = ($2 + [48])
}

void .FUNC $100 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	if ( (int_64)($3 == 0) ){ goto $label$1 }
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	*($4 + [16]) = $1
	$6 = CALL db_find_i64($5, $1, (int_64)4983122731492682032, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $47(($4 + [8]), $6)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($4 + [8])), [9184])
	$1 = *($0)
	CALL eosio_assert([1], [8807])
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($4 + [8])), [8912])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$3()), [9000])
	*($6 + [8]) = ((int_64)*($6 + [8]) + (int_64)$3)
	$3 = *($6)
	CALL eosio_assert([1], [9095])
	CALL eosio_assert([1], [8356])
	CALL memcpy(($4 + [64]), $6, [8])
	CALL eosio_assert([1], [8356])
	CALL memcpy((($4 + [64]) | [8]), ($6 + [8]), [8])
	CALL db_update_i64(*($6 + [20]), $1, ($4 + [64]), [16])
	$6 = (($4 + [8]) + [16])
	if ( (uint_64)($3 <= *($6)) ){ goto $label$3 }
	*($6) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$7 = *($4 + [32])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$1 = *($0)
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$3()), [8285])
	*(($6 = CALL _Znwj([32])) + [16]) = ($4 + [8])
	*($6 + [8]) = $3
	*($6) = $2
	CALL eosio_assert([1], [8356])
	CALL memcpy(($4 + [64]), $6, [8])
	CALL eosio_assert([1], [8356])
	CALL memcpy((($4 + [64]) | [8]), ($6 + [8]), [8])
	$3 = *($6)
	$7 = CALL db_store_i64(*((($4 + [8]) + [8])), (int_64)4983122731492682032, $1, $3, ($4 + [64]), [16])
	*($6 + [20]) = $7
	$0 = (($4 + [8]) + [16])
	if ( (uint_64)($3 <= *($0)) ){ goto $label$5 }
	*($0) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($4 + [56]) = $6
	$3 = *($6)
	*($4 + [64]) = $3
	*($4 + [52]) = $7
	$8 = ($4 + [36])
	$0 = *($8)
	if ( ((uint_32)$0 >= (uint_32)*(($4 + [40]))) ){ goto $label$7 }
	*($0 + [8]) = $3
	*($0 + [16]) = $7
	*($4 + [56]) = [0]
	*($0) = $6
	*($8) = ($0 + [24])
	$6 = *($4 + [56])
	*($4 + [56]) = [0]
	if ( $6 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $85(($4 + [32]), ($4 + [56]), ($4 + [64]), ($4 + [52]))
	$6 = *($4 + [56])
	*($4 + [56]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($6)
	
.LABEL $label$3
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [36])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL _ZdlPv($0)
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$10 }
	$6 = *(($4 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$6 = $7
	
.LABEL $label$8
	*($8) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($1 + [4])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$1 }
	$4 = [0]
	
.LOOP $label$3:
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$4 }
	*(($0 + $4)) = $1
	$4 = ($4 + [1])
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = *($2 + [1])
	if ( ($5 == 0) ){ goto $label$5 }
	$1 = ($0 + $4)
	$6 = (($5 + [-1]) & [255])
	$7 = *($2 + [2])
	
.LOOP $label$6:
	*($1) = $7
	$1 = ($1 + [1])
	$5 = ($5 + [-1])
	if ( ($5 & [255]) ){ goto $label$6 }
	$4 = (($4 + $6) + [1])
	$2 = ($2 + [3])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*(($0 + $4)) = [0]
	$4 = ($4 + [1])
	$2 = ($2 + [2])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	return $4
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $102 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	$4 = [0]
	
.LOOP $label$2:
	$5 = *($1)
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)($4 & [255]) > (uint_32)[253]) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)*(($1 + [1]))) ){ goto $label$3 }
	$4 = ($4 + [1])
	$1 = ($1 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = ($4 & [255])
	if ( ($6 == 0) ){ goto $label$6 }
	$7 = ($0 + $3)
	$8 = ($3 + [1])
	if ( ((int_32)$6 != (int_32)[1]) ){ goto $label$5 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($7) = $5
	*(($0 + $8)) = $5
	$3 = ($3 + [2])
	$4 = [0]
	$1 = ($1 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$6
	*(($0 + $3)) = $5
	$6 = ($3 + [1])
	$4 = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	$3 = $6
	$1 = ($1 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	*($7) = [0]
	*(($0 + $8)) = ($4 + [1])
	*(($7 + [2])) = $5
	$3 = ($3 + [3])
	$4 = [0]
	$1 = ($1 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	*(($0 + $6)) = [0]
	$3 = ($3 + [2])
	$1 = ($1 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
	return $3
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $138($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10948])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $138($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10550])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 $4) == (int_32)[8]), [10559])
	$7 = ($0 + [4])
	$2 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($2) - *($7)) > (uint_32)[7]), [10554])
	CALL memcpy($1, *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((int_32)*($2) != (int_32)$3), [10554])
	CALL memcpy(($1 + [8]), *($7), [1])
	$3 = (*($7) + [1])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($2) - $3) > (uint_32)[7]), [10554])
	CALL memcpy(($1 + [16]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((int_32)*($2) != (int_32)$3), [10554])
	CALL memcpy(($1 + [24]), *($7), [1])
	$3 = (*($7) + [1])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($2) - $3) > (uint_32)[7]), [10554])
	CALL memcpy(($1 + [32]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((int_32)*($2) != (int_32)$3), [10554])
	CALL memcpy(($1 + [40]), *($7), [1])
	$3 = (*($7) + [1])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($2) - $3) > (uint_32)[7]), [10554])
	CALL memcpy(($1 + [48]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((int_32)*($2) != (int_32)$3), [10554])
	CALL memcpy(($1 + [56]), *($7), [1])
	$3 = (*($7) + [1])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($2) - $3) > (uint_32)[7]), [10554])
	CALL memcpy(($1 + [64]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((int_32)*($2) != (int_32)$3), [10554])
	CALL memcpy(($1 + [72]), *($7), [1])
	$3 = (*($7) + [1])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($2) - $3) > (uint_32)[7]), [10554])
	CALL memcpy(($1 + [80]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((int_32)*($2) != (int_32)$3), [10554])
	CALL memcpy(($1 + [88]), *($7), [1])
	$3 = (*($7) + [1])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($2) - $3) > (uint_32)[7]), [10554])
	CALL memcpy(($1 + [96]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((int_32)*($2) != (int_32)$3), [10554])
	CALL memcpy(($1 + [104]), *($7), [1])
	$3 = (*($7) + [1])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($2) - $3) > (uint_32)[7]), [10554])
	CALL memcpy(($1 + [112]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((int_32)*($2) != (int_32)$3), [10554])
	CALL memcpy(($1 + [120]), *($7), [1])
	*($7) = (*($7) + [1])
	return $0
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10554])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10554])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10554])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10554])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10554])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10554])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10554])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10554])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [10554])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $67(*($1), *($0 + [12]))
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [10228])
	CALL memcpy(*($0 + [4]), $1, [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [10228])
	CALL memcpy(*($0 + [4]), ($1 + [1]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [10228])
	CALL memcpy(*($0 + [4]), ($1 + [2]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($0 + [8])
	*($2 + [15]) = [9]
	CALL eosio_assert(((int_32)($4 - $3) > (int_32)[0]), [10228])
	CALL memcpy(*($0 + [4]), ($2 + [15]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	CALL $83($0, $1)
	CALL $83($0, ($1 + [3]))
	CALL $83($0, ($1 + [6]))
	CALL $83($0, ($1 + [9]))
	CALL $83($0, ($1 + [12]))
	CALL $83($0, ($1 + [15]))
	CALL $83($0, ($1 + [18]))
	CALL $83($0, ($1 + [21]))
	CALL $83($0, ($1 + [24]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $74(CALL $82($0, ($1 + [44])), ($1 + [72]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10228])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10228])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10228])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10228])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10228])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [10228])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [10554])
	CALL memcpy($1, *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [10554])
	CALL memcpy(($1 + [1]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [10554])
	CALL memcpy(($1 + [2]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC $141 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19352])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19160]
	$3 = (((int_32)$1 * (int_32)[12]) + [19160])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $140 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10960]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10964])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10960]) = [1]
	$2 = ($2 << [16])
	*([0] + [10964]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10964])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10964]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10960]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10960]) = [1]
	$3 = ($3 << [16])
	*([0] + [10964]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10964])
	
.LABEL $label$10
	*([0] + [10964]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10228])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10228])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10228])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [10234])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [20]) = [0]
	*($3 + [12 align=4]) = (int_64)0
	*($3 + [24]) = $1
	CALL $75(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $20(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [12])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [16])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$1 = CALL $109($2, ($1 + [8]))
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*(*($0)) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($5) + $0))
	
.LABEL $label$1
	$4 = CALL $109(($2 + [16]), $1)
	CALL void $5((int_32 $3), (int_64 $4), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($1) = *(*($0))
	*($1 + [8]) = *(*($0 + [4]) + [49])
	$3 = CALL $102(*(*($0 + [8])), *(*($0 + [12])), *(*($0 + [16])))
	$4 = *(*($0 + [8]))
	*($2) = (int_64)0
	$0 = [0]
	*($2 + [8]) = [0]
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL _Znwj($3)
	$0 = ($5 + $3)
	*(($2 + [8])) = $0
	*($2) = $5
	CALL memcpy($5, $4, $3)
	*($2 + [4]) = $0
	
.LABEL $label$2
	$3 = *($1 + [12])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($1 + [16])) = $3
	CALL _ZdlPv($3)
	*(($3 = ($1 + [20]))) = [0]
	*($1 + [12 align=4]) = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	$3 = ($1 + [20])
	
.LABEL $label$3
	*($3) = $0
	*(($1 + [16])) = $0
	*(($1 + [12])) = $5
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $121($2)
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10550])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $41($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [10554])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10228])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [10228])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [10320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10366])
	$6 = *($1)
	CALL $90($1, *(*($3)))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [10417])
	$8 = *($1 + [8])
	$7 = *(($1 + [12]))
	$3 = (($7 + [8]) - $8)
	$9 = (CASTING uint_64)(uint_32 ($7 - $8))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$10 = CALL $138($3)
	goto $label$2 
	
.LABEL $label$3
	$10 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $10
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [10228])
	CALL memcpy($10, $1, [8])
	$9 = (CASTING uint_64)(uint_32 (*(($1 + [12])) - *(($1 + [8]))))
	$4 = ($10 + [8])
	$11 = ($10 + $3)
	
.LOOP $label$4:
	$7 = (CASTING uint_32)(uint_64 $9)
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	$8 = ((int_64)$9) != (int_64)0
	*($5 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)($11 - $4) > (int_32)[0]), [10228])
	CALL memcpy($4, ($5 + [15]), [1])
	$4 = ($4 + [1])
	if ( $8 ){ goto $label$4 }
	$7 = *(($1 + [8]))
	$8 = (*(($1 + [12])) - $7)
	CALL eosio_assert(((int_32)($11 - $4) >= (int_32)$8), [10228])
	CALL memcpy($4, $7, $8)
	CALL db_update_i64(*($1 + [24]), $2, $10, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $141($10)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10366])
	$5 = *($1)
	$6 = *($3 + [4])
	CALL memcpy(($1 + [44]), *($3), [27])
	$7 = $4
	CALL $5(($7 + [16]), $6, *(*($3 + [8])))
	$8 = *($7 + [16])
	if ( ((int_64)$8 < (int_64)1) ){ goto $label$1 }
	CALL eosio_assert(((int_64)*($7 + [24]) == (int_64)*(($1 + [32]))), [10598])
	$9 = ((int_64)*($1 + [24]) + (int_64)$8)
	*($1 + [24]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10641])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [10660])
	CALL $9($6, $8)
	
.LABEL $label$1
	CALL $5($7, $6, (int_64)10000)
	if ( ((uint_32)(*($1 + [40]) + [86400]) >= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$2 }
	$8 = *($7)
	if ( ((int_64)$8 < (int_64)1) ){ goto $label$2 }
	*(($1 + [40])) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [32]))), [10598])
	$9 = ((int_64)*($1 + [24]) + (int_64)$8)
	*($1 + [24]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10641])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [10660])
	CALL $9($6, $8)
	
.LABEL $label$2
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10417])
	$10 = *($1 + [72])
	$6 = *(($1 + [76]))
	$3 = (($6 + [72]) - $10)
	$8 = (CASTING uint_64)(uint_32 ($6 - $10))
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ($3 <= [513]) ){ goto $label$5 }
	$6 = CALL $138($3)
	goto $label$4 
	
.LABEL $label$5
	$6 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$4
	*($7 + [20]) = $6
	*($7 + [16]) = $6
	*($7 + [24]) = ($6 + $3)
	CALL $81(($7 + [16]), $1)
	CALL db_update_i64(*($1 + [88]), $2, $6, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $141($6)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($7 + [32])
	return 
	
.LABEL $label$6
	$global$0 = ($7 + [32])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $37($0, *($1))
	CALL $37($0, *($1 + [4]))
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $77(CALL $79($0, ($1 + [44])), ($1 + [72]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10554])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10554])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10554])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10554])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [10554])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [10554])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10550])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 $4) == (int_32)[9]), [10559])
	CALL $80($0, $1)
	CALL $80($0, ($1 + [3]))
	CALL $80($0, ($1 + [6]))
	CALL $80($0, ($1 + [9]))
	CALL $80($0, ($1 + [12]))
	CALL $80($0, ($1 + [15]))
	CALL $80($0, ($1 + [18]))
	CALL $80($0, ($1 + [21]))
	CALL $80($0, ($1 + [24]))
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10320])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10366])
	$6 = *($1)
	$7 = *((*($3) + [8]))
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9887])
	$8 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$10 = [1]
	$11 = $3
	$3 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$3 < (int_32)[6])
	$11 = ($3 + [1])
	$3 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$3 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [9936])
	CALL eosio_assert(((int_64)*(($1 + [16])) == (int_64)1397703940), [10598])
	$8 = ((int_64)*($1 + [8]) + (int_64)$7)
	*($1 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10641])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [10660])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [10417])
	$11 = *($1 + [72])
	$10 = *(($1 + [76]))
	$3 = (($10 + [72]) - $11)
	$8 = (CASTING uint_64)(uint_32 ($10 - $11))
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ($3 <= [513]) ){ goto $label$8 }
	$10 = CALL $138($3)
	goto $label$7 
	
.LABEL $label$8
	$10 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $10
	
.LABEL $label$7
	*($5 + [4]) = $10
	*($5) = $10
	*($5 + [8]) = ($10 + $3)
	CALL $81($5, $1)
	CALL db_update_i64(*($1 + [88]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$11 }
	CALL $141($10)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	
.LABEL $label$10
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
}

void .FUNC $33 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$5 = ($global$0 - [128])
	$global$0 = $5
	$6 = ($0 + [136])
	$7 = *($0 + [32])
	$9 = *(($0 + [164]))
	$8 = *(($0 + [160]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	
.LOOP $label$4:
	$10 = ($9 + [-24])
	$11 = *($10)
	if ( ((int_64)*($11) == (int_64)$7) ){ goto $label$3 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($11 + [20]) == (int_32)$6), [10476])
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	$10 = CALL db_find_i64(*($6), *(($0 + [144])), (int_64)4982871469126582272, $7)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $4($6, $10)
	CALL eosio_assert(((int_32)*($11 + [20]) == (int_32)$6), [10476])
	
.LABEL $label$1
	CALL eosio_assert(($11 == 0), [9780])
	$12 = *($0)
	$7 = (int_64)6
	
.LOOP $label$5:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$5 }
	$7 = (int_64)0
	$13 = (int_64)59
	$10 = [9802]
	$14 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$11 }
	$9 = *($10)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$9 = ($9 + [-91])
	goto $label$9 
	
.LABEL $label$11
	$15 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$7
	$10 = ($10 + [1])
	$13 = ((int_64)$13 + (int_64)4294967291)
	$14 = ((int_64)$15 | (int_64)$14)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$6 }
	$7 = (int_64)0
	$13 = (int_64)59
	$10 = [9814]
	$16 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$17 }
	$9 = *($10)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$9 = ($9 + [-91])
	goto $label$15 
	
.LABEL $label$17
	$15 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$13
	$10 = ($10 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$13 = ((int_64)$13 + (int_64)4294967291)
	if ( ((int_64)$13 != (int_64)55834574842) ){ goto $label$12 }
	*((($5 + [8]) + [24])) = *(($3 + [8]))
	*($5 + [16]) = $2
	*($5 + [8]) = $1
	*($5 + [24]) = *($3)
	$9 = CALL $109((($5 + [8]) + [32]), $4)
	*($5 + [64]) = $16
	*($5 + [56]) = $14
	*(($10 = CALL _Znwj([16]))) = $12
	*($10 + [8]) = (int_64)3617214756542218240
	*((($5 + [56]) + [36])) = [0]
	$11 = ($10 + [16])
	*((($5 + [56]) + [24])) = $11
	*(($5 + [76])) = $11
	*($5 + [72]) = $10
	*($5 + [84 align=4]) = (int_64)0
	$10 = *($9)
	$9 = ( *((($5 + [8]) + [36])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($9 + [32])
	$7 = (CASTING uint_64)(uint_32 $9)
	$9 = ($5 + [84])
	
.LOOP $label$18:
	$10 = ($10 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$18 }
	if ( ($10 == 0) ){ goto $label$20 }
	CALL $41($9, $10)
	$9 = *(($5 + [88]))
	$10 = *(($5 + [84]))
	goto $label$19 
	
.LABEL $label$20
	$9 = [0]
	$10 = [0]
	
.LABEL $label$19
	*($5 + [116]) = $10
	*($5 + [112]) = $10
	*($5 + [120]) = $9
	*($5 + [96]) = ($5 + [112])
	*($5 + [104]) = ($5 + [8])
	CALL $42(($5 + [104]), ($5 + [96]))
	CALL $43(($5 + [112]), ($5 + [56]))
	$10 = *($5 + [112])
	CALL send_inline($10, (*($5 + [116]) - $10))
	$10 = *($5 + [112])
	if ( ($10 == 0) ){ goto $label$21 }
	*($5 + [116]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$21
	$10 = *($5 + [84])
	if ( ($10 == 0) ){ goto $label$22 }
	*(($5 + [88])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$22
	$10 = *($5 + [72])
	if ( ($10 == 0) ){ goto $label$23 }
	*(($5 + [76])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$23
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($5 + [48])))
	
.LABEL $label$24
	$global$0 = ($5 + [128])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $121($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [72])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [76])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $31 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [16]) = $1
	$3 = ($0 + [136])
	$1 = *($0 + [24])
	$5 = *(($0 + [164]))
	$4 = *(($0 + [160]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)$3), [10476])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [144])), (int_64)4982871469126582272, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $4($3, $6)
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)$3), [10476])
	
.LABEL $label$2
	$1 = *($0)
	*($2 + [32]) = ($2 + [16])
	CALL eosio_assert([1], [10285])
	CALL $39($3, $7, $1, ($2 + [32]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($2 + [8]) = $0
	*($2 + [12]) = ($2 + [16])
	*($2 + [56]) = $1
	CALL eosio_assert(((int_64)*(($0 + [136])) == (int_64)CALL $fimport$3()), [10234])
	*($2 + [32]) = $3
	*($2 + [36]) = ($2 + [8])
	*($2 + [40]) = ($2 + [56])
	*(($6 = CALL _Znwj([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $3
	CALL $40(($2 + [32]), $6)
	*($2 + [48]) = $6
	$1 = *($6)
	*($2 + [32]) = $1
	$7 = *($6 + [24])
	*($2 + [28]) = $7
	$4 = ($0 + [164])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [168]))) ){ goto $label$8 }
	*($5 + [8]) = $1
	*($5 + [16]) = $7
	*($2 + [48]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	$6 = *($2 + [48])
	*($2 + [48]) = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $12(($0 + [160]), ($2 + [48]), ($2 + [32]), ($2 + [28]))
	$6 = *($2 + [48])
	*($2 + [48]) = [0]
	if ( $6 ){ goto $label$6 }
	
.LABEL $label$7
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$6
	$5 = *($6 + [8])
	if ( ($5 == 0) ){ goto $label$9 }
	*(($6 + [12])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$9
	CALL _ZdlPv($6)
	$global$0 = ($2 + [64])
}

int_32 .FUNC $129 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $128($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_64 .FUNC $127 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}