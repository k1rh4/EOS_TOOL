(data (i32.const 4) "\c0h\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "transfer\00")
(data (i32.const 128) "eosio.token\00")
(data (i32.const 144) "active\00")
(data (i32.const 160) "vip\00")
(data (i32.const 176) "cannot pass end iterator to erase\00")
(data (i32.const 224) "cannot increment end iterator\00")
(data (i32.const 256) "object passed to erase is not in multi_index\00")
(data (i32.const 304) "cannot erase objects in table of another contract\00")
(data (i32.const 368) "attempt to remove object that was not in multi_index\00")
(data (i32.const 432) "write\00")
(data (i32.const 448) "error reading iterator\00")
(data (i32.const 480) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 544) "invalid symbol name\00")
(data (i32.const 576) "read\00")
(data (i32.const 592) "get\00")
(data (i32.const 608) "-\00")
(data (i32.const 624) "----ok----\00")
(data (i32.const 640) "\n\00")
(data (i32.const 656) "---agent_str--\00")
(data (i32.const 672) "-----name\00")
(data (i32.const 688) "unable to find key\00")
(data (i32.const 720) "-----sign_price:\00")
(data (i32.const 752) "the length is not open\00")
(data (i32.const 784) "the length of account is mismatch\00")
(data (i32.const 832) "---len:\00")
(data (i32.const 848) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 912) "quantity is not enough\00")
(data (i32.const 944) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 1008) "attempt to add asset with different symbol\00")
(data (i32.const 1056) "addition underflow\00")
(data (i32.const 1088) "addition overflow\00")
(data (i32.const 1120) "attempt to subtract asset with different symbol\00")
(data (i32.const 1168) "subtraction underflow\00")
(data (i32.const 1200) "subtraction overflow\00")
(data (i32.const 1232) "multiplication overflow\00")
(data (i32.const 1264) "multiplication underflow\00")
(data (i32.const 1296) "divide by zero\00")
(data (i32.const 1312) "signed division overflow\00")
(data (i32.const 1344) "######fee\00")
(data (i32.const 1360) "vip account agent fee\00")
(data (i32.const 1392) "cannot create objects in table of another contract\00")
(data (i32.const 1456) "only accept EOS\00")
(data (i32.const 1472) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1536) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1600) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1648) ".\00")
(data (i32.const 1664) " \00")
(data (i32.const 1680) ",\00")
(data (i32.const 1696) "fee is wrong\00")
(data (i32.const 1712) "cannot pass end iterator to modify\00")
(data (i32.const 1760) "object passed to modify is not in multi_index\00")
(data (i32.const 1808) "cannot modify objects in table of another contract\00")
(data (i32.const 1872) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10336) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$1))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_end_i64" (func $fimport$5 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$11 (param i32)))
(import "env" "db_store_i64" (func $fimport$12 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$13 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$14 (param i32 i32)))
(import "env" "memcpy" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$17 (param i64)))
(import "env" "prints" (func $fimport$18 (param i32)))
(import "env" "prints_l" (func $fimport$19 (param i32 i32)))
(import "env" "printui" (func $fimport$20 (param i64)))
(import "env" "read_action_data" (func $fimport$21 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$22 (param i64)))
(import "env" "require_auth2" (func $fimport$23 (param i64 i64)))
(import "env" "send_inline" (func $fimport$24 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN5eosio7buyname8addagentEyh" (func $6))
(export "_ZN5eosio7buyname8transferEyyNS_5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $8))
(export "_ZN5eosio7buyname10createnameEv" (func $10))
(export "_ZNK5eosio7buyname11get_balanceEyy" (func $33))
(export "malloc" (func $44))
(export "free" (func $47))
(export "isspace" (func $58))
(export "memcmp" (func $59))
(export "memchr" (func $60))
(export "strlen" (func $61))
(table $0 4 4 anyfunc)
(elem (i32.const 0) $62 $6 $8 $10)



int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [432])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [432])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $62 ()
{
	(unreachable)
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [432])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [432])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [432])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $20(*($1), ($0 + [32]))
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([1680])
	
.LABEL $label$1
	$2 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)8)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)16)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)24)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)40)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)56)
	*($3 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	
.LABEL $label$2
	*([0] + [4]) = ($3 + [16])
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [448])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $48([32])) + [16]) = $0
	*($6 + [12]) = [0]
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [576])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [576])
	CALL memcpy(($6 + [8]), ($7 + [8]), [1])
	CALL eosio_assert(((uint_32)($4 + [-9]) > (uint_32)[3]), [576])
	CALL memcpy(($6 + [12]), ($7 + [9]), [4])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $38(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $49($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $28 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = *([0] + [4])
	$10 = $2
	$7 = (int_64)1
	$8 = *($0 + [8])
	$5 = (int_64)($8 == 0)
	if ( $5 ){ goto $label$1 }
	$9 = ((int_64)$8 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$2:
	$7 = ((int_64)$7 * (int_64)10)
	$9 = ((int_64)$9 + (int_64)-1)
	if ( ((int_64)$9 > (int_64)1) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [8])
	$2 = ($2 - (((CASTING uint_32)(uint_64 ((int_64)$8 + (int_64)1)) + [15]) & [1008]))
	*([0] + [4]) = $2
	*(($6 = ($2 + ($3 = (CASTING uint_32)(uint_64 $8))))) = [0]
	$4 = *($0)
	if ( $5 ){ goto $label$3 }
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$4 % (int_64)$7)
	$0 = ($6 + [-1])
	
.LOOP $label$4:
	*($0) = ((int_64)((int_64)$9 % (int_64)10) + (int_64)48)
	$0 = ($0 + [-1])
	$9 = ((int_64)$9 / (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$4 }
	
.LABEL $label$3
	CALL printi(((int_64)$4 / (int_64)$7))
	CALL prints([1648])
	CALL prints_l($2, $3)
	CALL prints([1664])
	CALL $39($1, [0])
	*([0] + [4]) = $10
}

int_32 .FUNC $21 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [480])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [544])
	*(($0 + [32])) = [0]
	*($0 + [24 align=4]) = (int_64)0
	*($0 + [36]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [576])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [576])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $23($4, ($0 + [24]))
	*($0 + [40]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [432])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [432])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $24($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $53($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $48($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $53($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $49($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $50($7)
	return (unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $48(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $55($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL $49(*(($1 + [32])))
	
.LABEL $label$11
	CALL $49($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $49($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [576])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [576])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [576])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $23(*($1), ($0 + [32]))
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [592])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $16($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [576])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $27 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [92]) == (int_32)$0), [944])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-5918709575225180160, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $40($0, $5)
	CALL eosio_assert(((int_32)*($6 + [92]) == (int_32)$0), [944])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $56(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $56(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $49(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $49(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $49 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $48 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10428])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $48(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $55($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $49($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $49($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [576])
	CALL memcpy(($5 + [15]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($3) = ((int_32)*($5 + [15]) != (int_32)[0])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [576])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [576])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [576])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [576])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [576])
	CALL memcpy($2, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $41 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [24]) = (int_64)0
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [480])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [544])
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [480])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [544])
	*(($2 = ($0 + [64]))) = (int_64)1398362884
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [480])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [544])
	*(($2 = ($0 + [80]))) = (int_64)1398362884
	*($0 + [72]) = (int_64)0
	CALL eosio_assert([1], [480])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [544])
	*($0 + [88]) = [0]
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [448])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $48([104])
	CALL $41($6)
	*($6 + [92]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [16])
	*($8 + [44]) = ($6 + [24])
	*($8 + [48]) = ($6 + [40])
	*($8 + [52]) = ($6 + [56])
	*($8 + [56]) = ($6 + [72])
	*($8 + [60]) = ($6 + [88])
	CALL $42(($8 + [32]), ($8 + [24]))
	*($6 + [96]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [96])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $43(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $49($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10316])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10124]
	$1 = (((int_32)$2 * (int_32)[12]) + [10124])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $46 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10422]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10424])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10422]) = [1]
	$7 = ($7 << [16])
	*([0] + [10424]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10424])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10424]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10422]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10422]) = [1]
	$3 = ($3 << [16])
	*([0] + [10424]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10424])
	
.LABEL $label$8
	*([0] + [10424]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $46($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10336])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $45([1932], $0)
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $52($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

void .FUNC _ZN5eosio7buyname8transferEyyNS_5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [416])
	*([0] + [4]) = $18
	CALL require_auth($1)
	$14 = *($0)
	if ( ((int_64)$14 == (int_64)$1) ){ goto $label$3 }
	if ( ((int_64)$14 != (int_64)$2) ){ goto $label$3 }
	$16 = *($4)
	if ( ($16 & [1]) ){ goto $label$5 }
	if ( uint_32($16 >> [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( (*($4 + [4]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)1397703940), [1456])
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$7 }
	$16 = uint_32($6 >> [1])
	$9 = ($4 + [1])
	goto $label$6 
	
.LABEL $label$7
	$16 = *($4 + [4])
	$9 = *($4 + [8])
	
.LABEL $label$6
	$15 = ($9 + $16)
	if ( ((int_32)$9 == (int_32)$15) ){ goto $label$9 }
	$16 = $9
	
.LOOP $label$11:
	if ( (CALL isspace(*($16)) == 0) ){ goto $label$10 }
	$16 = ($16 + [1])
	if ( ((int_32)$15 != (int_32)$16) ){ goto $label$11 }
	$16 = $15
	
.LABEL $label$10
	$6 = *($4)
	goto $label$8 
	
.LABEL $label$9
	$16 = $9
	
.LABEL $label$8
	if ( ($6 & [1]) ){ goto $label$13 }
	$15 = ($4 + [1])
	goto $label$12 
	
.LABEL $label$13
	$15 = *($4 + [8])
	
.LABEL $label$12
	CALL $54($4, ($9 - $15), ($16 - $9))
	$16 = *($4)
	if ( ($16 & [1]) ){ goto $label$16 }
	$15 = ($4 + [1])
	$9 = ($15 + uint_32($16 >> [1]))
	if ( ((int_32)$9 != (int_32)$15) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$15 = *($4 + [8])
	$9 = ($15 + *($4 + [4]))
	if ( ((int_32)$9 == (int_32)$15) ){ goto $label$14 }
	
.LABEL $label$15
	$6 = ([0] - $15)
	$16 = ($9 + [-1])
	
.LOOP $label$18:
	if ( (CALL isspace(*($16)) == 0) ){ goto $label$17 }
	$9 = $16
	$15 = ($16 + [-1])
	$16 = $15
	if ( ((int_32)($15 + $6) != (int_32)[-1]) ){ goto $label$18 }
	
.LABEL $label$17
	$16 = *($4)
	
.LABEL $label$14
	if ( ($16 & [1]) ){ goto $label$20 }
	$15 = ($4 + [1])
	$16 = ($15 + uint_32(($16 & [254]) >> [1]))
	goto $label$19 
	
.LABEL $label$20
	$15 = *($4 + [8])
	$16 = ($15 + *($4 + [4]))
	
.LABEL $label$19
	CALL $54($4, ($9 - $15), ($16 - $9))
	$16 = *($4)
	if ( ($16 & [1]) ){ goto $label$22 }
	$9 = uint_32($16 >> [1])
	$11 = ($4 + [1])
	goto $label$21 
	
.LABEL $label$22
	$9 = *($4 + [4])
	$11 = *($4 + [8])
	
.LABEL $label$21
	$16 = [0]
	$15 = CALL strlen([608])
	if ( ($15 == 0) ){ goto $label$23 }
	$6 = ($11 + $9)
	$16 = $6
	if ( ((int_32)$9 < (int_32)$15) ){ goto $label$24 }
	$16 = $11
	
.LOOP $label$26:
	$9 = (($9 - $15) + [1])
	if ( ($9 == 0) ){ goto $label$25 }
	$16 = CALL memchr($16, [45], $9)
	if ( ($16 == 0) ){ goto $label$25 }
	if ( (CALL memcmp($16, [608], $15) == 0) ){ goto $label$24 }
	$16 = ($16 + [1])
	$9 = ($6 - $16)
	if ( ((int_32)$9 >= (int_32)$15) ){ goto $label$26 }
	
.LABEL $label$25
	$16 = $6
	
.LABEL $label$24
	$16 = ( [-1] ? ($16 - $11) : ((int_32)$16 == (int_32)$6) )
	
.LABEL $label$23
	CALL $57(($18 + [384]), $4, [0], $16, $4)
	$9 = ($16 + [1])
	$16 = *($4)
	if ( ($16 & [1]) ){ goto $label$28 }
	$15 = uint_32($16 >> [1])
	$10 = ($4 + [1])
	goto $label$27 
	
.LABEL $label$28
	$15 = *($4 + [4])
	$10 = *($4 + [8])
	
.LABEL $label$27
	$16 = CALL strlen([608])
	$6 = [-1]
	if ( ($15 <= $9) ){ goto $label$29 }
	if ( ($16 == 0) ){ goto $label$30 }
	$11 = ($10 + $15)
	$15 = $11
	$6 = ($10 + $9)
	$9 = ($11 - $6)
	if ( ((int_32)$9 < (int_32)$16) ){ goto $label$31 }
	
.LOOP $label$33:
	$15 = (($9 - $16) + [1])
	if ( ($15 == 0) ){ goto $label$32 }
	$15 = CALL memchr($6, [45], $15)
	if ( ($15 == 0) ){ goto $label$32 }
	if ( (CALL memcmp($15, [608], $16) == 0) ){ goto $label$31 }
	$6 = ($15 + [1])
	$9 = ($11 - $6)
	if ( ((int_32)$9 >= (int_32)$16) ){ goto $label$33 }
	
.LABEL $label$32
	$15 = $11
	
.LABEL $label$31
	$6 = ( [-1] ? ($15 - $10) : ((int_32)$15 == (int_32)$11) )
	goto $label$29 
	
.LABEL $label$30
	$6 = $9
	
.LABEL $label$29
	$15 = ($6 + [1])
	$16 = *($4)
	if ( ($16 & [1]) ){ goto $label$35 }
	$9 = uint_32($16 >> [1])
	$10 = ($4 + [1])
	goto $label$34 
	
.LABEL $label$35
	$9 = *($4 + [4])
	$10 = *($4 + [8])
	
.LABEL $label$34
	$16 = CALL strlen([608])
	$11 = [-1]
	if ( ($9 <= $15) ){ goto $label$36 }
	$11 = $15
	if ( ($16 == 0) ){ goto $label$36 }
	$11 = ($10 + $15)
	$5 = ($10 + $9)
	$9 = ($5 - $11)
	if ( ((int_32)$9 < (int_32)$16) ){ goto $label$37 }
	
.LOOP $label$38:
	$9 = (($9 - $16) + [1])
	if ( ($9 == 0) ){ goto $label$37 }
	$9 = CALL memchr($11, [45], $9)
	if ( ($9 == 0) ){ goto $label$37 }
	if ( (CALL memcmp($9, [608], $16) == 0) ){ goto $label$39 }
	$11 = ($9 + [1])
	$9 = ($5 - $11)
	if ( ((int_32)$9 >= (int_32)$16) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$37 }
	$11 = ($9 - $10)
	goto $label$36 
	
.LABEL $label$37
	$11 = [-1]
	
.LABEL $label$36
	*($18 + [376]) = [0]
	*($18 + [368]) = (int_64)0
	*($18 + [360]) = [0]
	*($18 + [352]) = (int_64)0
	if ( ((int_32)$11 == (int_32)[-1]) ){ goto $label$45 }
	CALL $57(($18 + [256]), $4, $15, ($11 + ((int_32)$6 ^ (int_32)[-1])), $4)
	if ( (*($18 + [368]) & [1]) ){ goto $label$44 }
	*($18 + [368]) = [0]
	goto $label$43 
	
.LABEL $label$45
	CALL $57(($18 + [256]), $4, $15, [-1], $4)
	if ( (*($18 + [368]) & [1]) ){ goto $label$42 }
	*($18 + [368]) = [0]
	goto $label$41 
	
.LABEL $label$44
	*(*(($18 + [376]))) = [0]
	*($18 + [372]) = [0]
	
.LABEL $label$43
	CALL $53(($18 + [368]), [0])
	*(($16 = (($18 + [368]) + [8]))) = *((($18 + [256]) + [8]))
	*($18 + [368]) = *($18 + [256])
	CALL prints([624])
	$16 = *($18 + [368])
	$15 = ($16 & [1])
	CALL prints_l(( *($16) ? (($18 + [368]) | [1]) : $15 ), ( *($18 + [372]) ? uint_32($16 >> [1]) : $15 ))
	CALL prints([640])
	CALL $57(($18 + [256]), $4, ($11 + [1]), [-1], $4)
	if ( (*($18 + [352]) & [1]) ){ goto $label$47 }
	*($18 + [352]) = [0]
	goto $label$46 
	
.LABEL $label$47
	*(*((($18 + [352]) + [8]))) = [0]
	*($18 + [356]) = [0]
	
.LABEL $label$46
	CALL $53(($18 + [352]), [0])
	*(($16 = (($18 + [352]) + [8]))) = *((($18 + [256]) + [8]))
	*($18 + [352]) = *($18 + [256])
	CALL prints([656])
	$16 = *($18 + [352])
	$15 = ($16 & [1])
	CALL prints_l(( *($16) ? (($18 + [352]) | [1]) : $15 ), ( *($18 + [356]) ? uint_32($16 >> [1]) : $15 ))
	CALL prints([640])
	goto $label$40 
	
.LABEL $label$42
	*(*(($18 + [376]))) = [0]
	*($18 + [372]) = [0]
	
.LABEL $label$41
	CALL $53(($18 + [368]), [0])
	*(($16 = (($18 + [368]) + [8]))) = *((($18 + [256]) + [8]))
	*($18 + [368]) = *($18 + [256])
	CALL prints([624])
	$16 = *($18 + [368])
	$15 = ($16 & [1])
	CALL prints_l(( *($16) ? (($18 + [368]) | [1]) : $15 ), ( *($18 + [372]) ? uint_32($16 >> [1]) : $15 ))
	CALL prints([640])
	
.LABEL $label$40
	CALL prints([672])
	$16 = *($18 + [384])
	$15 = ($16 & [1])
	CALL prints_l(( *($18 + [392]) ? (($18 + [384]) | [1]) : $15 ), ( *($18 + [388]) ? uint_32($16 >> [1]) : $15 ))
	CALL prints([640])
	$2 = (int_64)0
	$12 = (int_64)59
	$16 = [160]
	$13 = (int_64)0
	
.LOOP $label$48:
	if ( ((uint_64)$2 > (uint_64)(int_64)2) ){ goto $label$53 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$52 }
	$15 = ($15 + [165])
	goto $label$51 
	
.LABEL $label$53
	$14 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$52
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$51
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$50
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$49
	$16 = ($16 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$48 }
	$16 = ( *(($18 + [376])) ? (($18 + [368]) | [1]) : (*($18 + [368]) & [1]) )
	$15 = [-1]
	
.LOOP $label$54:
	$9 = ($16 + $15)
	$6 = ($15 + [1])
	$15 = $6
	if ( *(($9 + [1])) ){ goto $label$54 }
	$7 = (CASTING uint_64)(uint_32 $6)
	$2 = (int_64)0
	$14 = (int_64)59
	$17 = (int_64)0
	
.LOOP $label$55:
	$12 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$7) ){ goto $label$56 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$58 }
	$15 = ($15 + [165])
	goto $label$57 
	
.LABEL $label$58
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$57
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$56
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$60 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	goto $label$59 
	
.LABEL $label$60
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$59
	$16 = ($16 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$17 = ((int_64)$12 | (int_64)$17)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$55 }
	*((($18 + [56]) + [32])) = [0]
	*($18 + [64]) = $13
	*($18 + [56]) = $13
	*($18 + [72]) = (int_64)-1
	*($18 + [80]) = (int_64)0
	CALL memcpy(($18 + [256]), CALL $27(($18 + [56]), $17, [688]), [96])
	$9 = *($18 + [80])
	if ( ($9 == 0) ){ goto $label$61 }
	$6 = ($18 + [84])
	$16 = *($6)
	if ( ((int_32)$16 == (int_32)$9) ){ goto $label$63 }
	
.LOOP $label$64:
	$16 = ($16 + [-24])
	$15 = *($16)
	*($16) = [0]
	if ( ($15 == 0) ){ goto $label$65 }
	CALL $49($15)
	
.LABEL $label$65
	if ( ((int_32)$9 != (int_32)$16) ){ goto $label$64 }
	$16 = *(($18 + [80]))
	goto $label$62 
	
.LABEL $label$63
	$16 = $9
	
.LABEL $label$62
	*($6) = $9
	CALL $49($16)
	
.LABEL $label$61
	CALL prints([720])
	CALL $28((($18 + [256]) + [24]))
	CALL prints([640])
	CALL eosio_assert(*($18 + [272]), [752])
	$16 = *($18 + [384])
	CALL eosio_assert(((int_64)(CASTING uint_64)(uint_32 ( *($18 + [388]) ? uint_32($16 >> [1]) : ($16 & [1]) )) == (int_64)*($18 + [264])), [784])
	CALL prints([832])
	CALL printui(*($18 + [264]))
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)*((($18 + [256]) + [32]))), [848])
	CALL eosio_assert(((int_64)*($3) >= (int_64)*($18 + [280])), [912])
	*((($18 + [216]) + [32])) = [0]
	*($18 + [232]) = (int_64)-1
	*($18 + [240]) = (int_64)0
	$2 = *($0)
	*($18 + [216]) = $2
	*($18 + [224]) = $2
	$16 = CALL db_find_i64($2, $2, (int_64)3680914790898728960, $1)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$78 }
	$16 = CALL $29(($18 + [216]), $16)
	CALL eosio_assert(((int_32)*($16 + [16]) == (int_32)($18 + [216])), [944])
	$14 = *($18 + [296])
	$2 = *(($18 + [304]))
	CALL eosio_assert(((int_64)*(($18 + [320])) == (int_64)$2), [1008])
	$14 = ((int_64)$14 + (int_64)*($18 + [312]))
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [1056])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [1088])
	CALL eosio_assert(((int_64)$2 == (int_64)*(($18 + [336]))), [1008])
	$14 = ((int_64)*($18 + [328]) + (int_64)$14)
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [1056])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [1088])
	$12 = *($18 + [280])
	$7 = *(($18 + [288]))
	CALL eosio_assert(((int_64)$2 == (int_64)$7), [1120])
	$14 = (int_64)
	CALL eosio_assert(((int_64)$14($12 - $14)) > (int_64)-4611686018427387904), [1168])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [1200])
	$2 = (int_64)0
	CALL __multi3(($18 + [24]), *($16 + [8]), (int_64)0, $14, (int_64)$14 >> (int_64)63))
	$12 = *((($18 + [24]) + [8]))
	$14 = *($18 + [24])
	CALL eosio_assert(( (uint_64)($14 <= (int_64)4611686018427387904) ? ((int_64)$12 < (int_64)0) : (int_64)($12 == 0) ), [1232])
	CALL eosio_assert(( ((uint_64)$14 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$12 > (int_64)-1) : ((int_64)$12 == (int_64)-1) ), [1264])
	CALL eosio_assert([1], [1296])
	CALL eosio_assert([1], [1312])
	$8 = ((int_64)$14 / (int_64)100)
	if ( ((int_64)$14 <= (int_64)99) ){ goto $label$74 }
	$17 = *($0)
	$12 = (int_64)59
	$16 = [144]
	$13 = (int_64)0
	
.LOOP $label$79:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$84 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$83 }
	$15 = ($15 + [165])
	goto $label$82 
	
.LABEL $label$84
	$14 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$83
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$82
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$81
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$80
	$16 = ($16 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$79 }
	*($18 + [128]) = $13
	*($18 + [120]) = $17
	$2 = (int_64)0
	$12 = (int_64)59
	$16 = [128]
	$13 = (int_64)0
	
.LOOP $label$85:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$90 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$89 }
	$15 = ($15 + [165])
	goto $label$88 
	
.LABEL $label$90
	$14 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$89
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$88
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$87
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$86
	$16 = ($16 + [1])
	$12 = ((int_64)$12 + (int_64)-5)
	$13 = ((int_64)$14 | (int_64)$13)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$85 }
	$2 = (int_64)0
	$12 = (int_64)59
	$16 = [112]
	$17 = (int_64)0
	
.LOOP $label$91:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$96 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$95 }
	$15 = ($15 + [165])
	goto $label$94 
	
.LABEL $label$96
	$14 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$93 }
	goto $label$92 
	
.LABEL $label$95
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$94
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$93
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$92
	$16 = ($16 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$17 = ((int_64)$14 | (int_64)$17)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$91 }
	*(($18 + [112])) = [0]
	*($18 + [104]) = (int_64)0
	$16 = CALL strlen([1360])
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$16 >= (uint_32)[11]) ){ goto $label$77 }
	*($18 + [104]) = ($16 << [1])
	$15 = (($18 + [104]) | [1])
	if ( $16 ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$78
	*($18 + [208]) = (int_64)1397703940
	*($18 + [200]) = (int_64)0
	CALL eosio_assert([1], [480])
	$2 = (uint_64)*($18 + [208]) >> (uint_64)(int_64)8)
	$16 = [0]
	
.LOOP $label$99:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$98 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$100 }
	
.LOOP $label$101:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$98 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$101 }
	
.LABEL $label$100
	$15 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$99 }
	goto $label$97 
	
.LABEL $label$98
	$15 = [0]
	
.LABEL $label$97
	CALL eosio_assert($15, [544])
	$16 = *($18 + [352])
	if ( (( *($18 + [356]) ? uint_32($16 >> [1]) : ($16 & [1]) ) == 0) ){ goto $label$69 }
	$15 = [-1]
	CALL $54($4, $11, [-1])
	CALL prints([640])
	*(($18 + [192])) = [0]
	$2 = *($0)
	*($18 + [160]) = $2
	*($18 + [168]) = $2
	*($18 + [176]) = (int_64)-1
	*($18 + [184]) = (int_64)0
	$10 = (($18 + [352]) | [1])
	$16 = ( *(($18 + [360])) ? $10 : (*($18 + [352]) & [1]) )
	
.LOOP $label$102:
	$9 = ($16 + $15)
	$6 = ($15 + [1])
	$15 = $6
	if ( *(($9 + [1])) ){ goto $label$102 }
	$17 = (CASTING uint_64)(uint_32 $6)
	$2 = (int_64)0
	$14 = (int_64)59
	$13 = (int_64)0
	
.LOOP $label$103:
	$12 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$17) ){ goto $label$104 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$106 }
	$15 = ($15 + [165])
	goto $label$105 
	
.LABEL $label$106
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$105
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$104
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$108 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	goto $label$107 
	
.LABEL $label$108
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$107
	$16 = ($16 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$103 }
	$13 = *(CALL $30(($18 + [160]), $13, [688]) + [8])
	$2 = *($18 + [296])
	$12 = *(($18 + [304]))
	CALL eosio_assert(((int_64)*(($18 + [320])) == (int_64)$12), [1008])
	$2 = ((int_64)$2 + (int_64)*($18 + [312]))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1056])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [1088])
	CALL eosio_assert(((int_64)$12 == (int_64)*(($18 + [336]))), [1008])
	$14 = ((int_64)*($18 + [328]) + (int_64)$2)
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [1056])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [1088])
	$2 = (int_64)0
	$14 = (int_64)
	CALL __multi3(($18 + [8]), $14(*($18 + [280]) - $14)), (int_64)$14 >> (int_64)63), $13, (int_64)0)
	$13 = *(($18 + [288]))
	CALL eosio_assert(((int_64)$12 == (int_64)$13), [1120])
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [1168])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [1200])
	$14 = *((($18 + [8]) + [8]))
	$12 = *($18 + [8])
	CALL eosio_assert(( (uint_64)($12 <= (int_64)4611686018427387904) ? ((int_64)$14 < (int_64)0) : (int_64)($14 == 0) ), [1232])
	CALL eosio_assert(( ((uint_64)$12 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$14 > (int_64)-1) : ((int_64)$14 == (int_64)-1) ), [1264])
	CALL eosio_assert([1], [1296])
	CALL eosio_assert([1], [1312])
	*((($18 + [200]) + [8])) = $13
	*($18 + [200]) = ((int_64)$12 / (int_64)100)
	CALL prints([1344])
	CALL $28(($18 + [200]))
	CALL prints([640])
	if ( ((int_64)*($18 + [200]) < (int_64)1) ){ goto $label$70 }
	$17 = *($0)
	$12 = (int_64)59
	$16 = [144]
	$13 = (int_64)0
	
.LOOP $label$109:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$114 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$113 }
	$15 = ($15 + [165])
	goto $label$112 
	
.LABEL $label$114
	$14 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$111 }
	goto $label$110 
	
.LABEL $label$113
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$112
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$111
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$110
	$16 = ($16 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$109 }
	*($18 + [112]) = $13
	*($18 + [104]) = $17
	$2 = (int_64)0
	$12 = (int_64)59
	$16 = [128]
	$13 = (int_64)0
	
.LOOP $label$115:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$120 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$119 }
	$15 = ($15 + [165])
	goto $label$118 
	
.LABEL $label$120
	$14 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$117 }
	goto $label$116 
	
.LABEL $label$119
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$118
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$117
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$116
	$16 = ($16 + [1])
	$12 = ((int_64)$12 + (int_64)-5)
	$13 = ((int_64)$14 | (int_64)$13)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$115 }
	$2 = (int_64)0
	$12 = (int_64)59
	$16 = [112]
	$17 = (int_64)0
	
.LOOP $label$121:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$126 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$125 }
	$15 = ($15 + [165])
	goto $label$124 
	
.LABEL $label$126
	$14 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$123 }
	goto $label$122 
	
.LABEL $label$125
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$124
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$123
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$122
	$16 = ($16 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$17 = ((int_64)$14 | (int_64)$17)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$121 }
	$16 = ( *(($18 + [360])) ? $10 : (*($18 + [352]) & [1]) )
	$15 = [-1]
	
.LOOP $label$127:
	$9 = ($16 + $15)
	$6 = ($15 + [1])
	$15 = $6
	if ( *(($9 + [1])) ){ goto $label$127 }
	$1 = (CASTING uint_64)(uint_32 $6)
	$2 = (int_64)0
	$14 = (int_64)59
	$7 = (int_64)0
	
.LOOP $label$128:
	$12 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$1) ){ goto $label$129 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$131 }
	$15 = ($15 + [165])
	goto $label$130 
	
.LABEL $label$131
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$130
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$129
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$133 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	goto $label$132 
	
.LABEL $label$133
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$132
	$16 = ($16 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$7 = ((int_64)$12 | (int_64)$7)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$128 }
	*(($18 + [48])) = [0]
	*($18 + [40]) = (int_64)0
	$16 = CALL strlen([1360])
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$16 >= (uint_32)[11]) ){ goto $label$73 }
	*($18 + [40]) = ($16 << [1])
	$15 = (($18 + [40]) | [1])
	if ( $16 ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$77
	$9 = (($16 + [16]) & [-16])
	$15 = CALL $48($9)
	*($18 + [104]) = ($9 | [1])
	*($18 + [112]) = $15
	*($18 + [108]) = $16
	
.LABEL $label$76
	CALL memcpy($15, [1360], $16)
	
.LABEL $label$75
	*(($15 + $16)) = [0]
	*(($18 + [80])) = $7
	*(($18 + [92])) = *($18 + [108])
	*($18 + [64]) = $1
	$16 = ($18 + [112])
	*(($18 + [96])) = *($16)
	*($18 + [56]) = *($0)
	*($18 + [72]) = $8
	*($18 + [88]) = *($18 + [104])
	*($18 + [104]) = [0]
	*($18 + [108]) = [0]
	*($16) = [0]
	$16 = CALL $13(($18 + [160]), ($18 + [120]), $13, $17, ($18 + [56]))
	CALL $14(($18 + [200]), $16)
	$15 = *($18 + [200])
	CALL send_inline($15, (*($18 + [204]) - $15))
	$15 = *($18 + [200])
	if ( ($15 == 0) ){ goto $label$134 }
	*($18 + [204]) = $15
	CALL $49($15)
	
.LABEL $label$134
	$15 = *($16 + [28])
	if ( ($15 == 0) ){ goto $label$135 }
	*(($16 + [32])) = $15
	CALL $49($15)
	
.LABEL $label$135
	$15 = *($16 + [16])
	if ( ($15 == 0) ){ goto $label$136 }
	*(($16 + [20])) = $15
	CALL $49($15)
	
.LABEL $label$136
	if ( ((*(($18 + [88])) & [1]) == 0) ){ goto $label$137 }
	CALL $49(*(($18 + [96])))
	
.LABEL $label$137
	if ( ((*($18 + [104]) & [1]) == 0) ){ goto $label$74 }
	CALL $49(*(($18 + [112])))
	
.LABEL $label$74
	CALL _ZNK5eosio7buyname11get_balanceEyy(($18 + [120]), $18, *($0), (int_64)5459781)
	$2 = *($3)
	$14 = *(($3 + [8]))
	CALL eosio_assert(((int_64)$7 == (int_64)$14), [1008])
	$2 = ((int_64)$2 + (int_64)$8)
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1056])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [1088])
	CALL eosio_assert(((int_64)$14 == (int_64)*($18 + [128])), [848])
	if ( ((int_64)*($18 + [120]) >= (int_64)$2) ){ goto $label$140 }
	*(($18 + [88])) = [0]
	*($18 + [72]) = (int_64)-1
	*($18 + [80]) = (int_64)0
	$2 = *($0)
	*($18 + [56]) = $2
	*($18 + [64]) = $2
	*($18 + [204]) = $3
	*($18 + [208]) = $4
	*($18 + [200]) = ($18 + [56])
	*($18 + [104]) = $2
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$3()), [1392])
	*($18 + [164]) = ($18 + [200])
	*($18 + [160]) = ($18 + [56])
	*($18 + [168]) = ($18 + [104])
	*(($15 = CALL $48([48])) + [16]) = (int_64)1398362884
	*($15 + [8]) = (int_64)0
	CALL eosio_assert([1], [480])
	$2 = (int_64)5462355
	$16 = [0]
	
.LOOP $label$141:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$139 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$142 }
	
.LOOP $label$143:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$139 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$143 }
	
.LABEL $label$142
	$9 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$141 }
	goto $label$138 
	
.LABEL $label$140
	if ( ((int_64)*($3) < (int_64)1) ){ goto $label$68 }
	$1 = *($0)
	$2 = (int_64)0
	$12 = (int_64)59
	$16 = [144]
	$13 = (int_64)0
	
.LOOP $label$144:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$149 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$148 }
	$15 = ($15 + [165])
	goto $label$147 
	
.LABEL $label$149
	$14 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$146 }
	goto $label$145 
	
.LABEL $label$148
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$147
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$146
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$145
	$16 = ($16 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$144 }
	*($18 + [208]) = $13
	*($18 + [200]) = $1
	$2 = (int_64)0
	$12 = (int_64)59
	$16 = [128]
	$13 = (int_64)0
	
.LOOP $label$150:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$155 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$154 }
	$15 = ($15 + [165])
	goto $label$153 
	
.LABEL $label$155
	$14 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$152 }
	goto $label$151 
	
.LABEL $label$154
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$153
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$152
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$151
	$16 = ($16 + [1])
	$12 = ((int_64)$12 + (int_64)-5)
	$13 = ((int_64)$14 | (int_64)$13)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$150 }
	$2 = (int_64)0
	$12 = (int_64)59
	$16 = [112]
	$17 = (int_64)0
	
.LOOP $label$156:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$161 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$160 }
	$15 = ($15 + [165])
	goto $label$159 
	
.LABEL $label$161
	$14 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$158 }
	goto $label$157 
	
.LABEL $label$160
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$159
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$158
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$157
	$16 = ($16 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$17 = ((int_64)$14 | (int_64)$17)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$156 }
	$2 = (int_64)0
	$12 = (int_64)59
	$16 = [160]
	$7 = (int_64)0
	
.LOOP $label$162:
	if ( ((uint_64)$2 > (uint_64)(int_64)2) ){ goto $label$167 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$166 }
	$15 = ($15 + [165])
	goto $label$165 
	
.LABEL $label$167
	$14 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$164 }
	goto $label$163 
	
.LABEL $label$166
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$165
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$164
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$163
	$16 = ($16 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$7 = ((int_64)$14 | (int_64)$7)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$162 }
	*(($18 + [84])) = *(($3 + [12]))
	*(($18 + [80])) = *(($3 + [8]))
	*(($18 + [76])) = *(($3 + [4]))
	*($18 + [64]) = $7
	*($18 + [56]) = $1
	*($18 + [72]) = *($3)
	CALL $56(($18 + [88]), $4)
	$16 = CALL $13(($18 + [160]), ($18 + [200]), $13, $17, ($18 + [56]))
	CALL $14(($18 + [104]), $16)
	$15 = *($18 + [104])
	CALL send_inline($15, (*($18 + [108]) - $15))
	$15 = *($18 + [104])
	if ( ($15 == 0) ){ goto $label$168 }
	*($18 + [108]) = $15
	CALL $49($15)
	
.LABEL $label$168
	$15 = *($16 + [28])
	if ( ($15 == 0) ){ goto $label$169 }
	*(($16 + [32])) = $15
	CALL $49($15)
	
.LABEL $label$169
	$15 = *($16 + [16])
	if ( ($15 == 0) ){ goto $label$170 }
	*(($16 + [20])) = $15
	CALL $49($15)
	
.LABEL $label$170
	if ( ((*($18 + [88]) & [1]) == 0) ){ goto $label$68 }
	CALL $49(*(($18 + [96])))
	$9 = *($18 + [240])
	if ( $9 ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$139
	$9 = [0]
	
.LABEL $label$138
	CALL eosio_assert($9, [544])
	*($15 + [32]) = [0]
	*($15 + [24 align=4]) = (int_64)0
	*($15 + [36]) = ($18 + [56])
	CALL $32(($18 + [160]), $15)
	*($18 + [400]) = $15
	$2 = *($15)
	*($18 + [160]) = $2
	$9 = *($15 + [40])
	*($18 + [40]) = $9
	$6 = ($18 + [84])
	$16 = *($6)
	if ( ((uint_32)$16 >= (uint_32)*(($18 + [88]))) ){ goto $label$172 }
	*($16 + [8]) = $2
	*($16 + [16]) = $9
	*($18 + [400]) = [0]
	*($16) = $15
	*($6) = ($16 + [24])
	goto $label$171 
	
.LABEL $label$172
	CALL $22(($18 + [80]), ($18 + [400]), ($18 + [160]), ($18 + [40]))
	
.LABEL $label$171
	$16 = *($18 + [400])
	*($18 + [400]) = [0]
	if ( ($16 == 0) ){ goto $label$173 }
	if ( ((*($16 + [24]) & [1]) == 0) ){ goto $label$174 }
	CALL $49(*(($16 + [32])))
	
.LABEL $label$174
	CALL $49($16)
	
.LABEL $label$173
	$9 = *($18 + [80])
	if ( ($9 == 0) ){ goto $label$68 }
	$6 = ($18 + [84])
	$16 = *($6)
	if ( ((int_32)$16 == (int_32)$9) ){ goto $label$176 }
	
.LOOP $label$177:
	$16 = ($16 + [-24])
	$15 = *($16)
	*($16) = [0]
	if ( ($15 == 0) ){ goto $label$178 }
	if ( ((*($15 + [24]) & [1]) == 0) ){ goto $label$179 }
	CALL $49(*(($15 + [32])))
	
.LABEL $label$179
	CALL $49($15)
	
.LABEL $label$178
	if ( ((int_32)$9 != (int_32)$16) ){ goto $label$177 }
	$16 = *(($18 + [80]))
	goto $label$175 
	
.LABEL $label$176
	$16 = $9
	
.LABEL $label$175
	*($6) = $9
	CALL $49($16)
	$9 = *($18 + [240])
	if ( $9 ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$73
	$9 = (($16 + [16]) & [-16])
	$15 = CALL $48($9)
	*($18 + [40]) = ($9 | [1])
	*($18 + [48]) = $15
	*($18 + [44]) = $16
	
.LABEL $label$72
	CALL memcpy($15, [1360], $16)
	
.LABEL $label$71
	*(($15 + $16)) = [0]
	*(($18 + [76])) = *($18 + [204])
	*($18 + [64]) = $7
	*(($18 + [84])) = *(($18 + [212]))
	*(($18 + [80])) = *((($18 + [200]) + [8]))
	*($18 + [56]) = *($0)
	*($18 + [72]) = *($18 + [200])
	$16 = (($18 + [40]) + [8])
	*(($18 + [96])) = *($16)
	*($18 + [88]) = *($18 + [40])
	*($18 + [40]) = [0]
	*($18 + [44]) = [0]
	*($16) = [0]
	$16 = CALL $13(($18 + [120]), ($18 + [104]), $13, $17, ($18 + [56]))
	CALL $14(($18 + [400]), $16)
	$15 = *($18 + [400])
	CALL send_inline($15, (*($18 + [404]) - $15))
	$15 = *($18 + [400])
	if ( ($15 == 0) ){ goto $label$180 }
	*($18 + [404]) = $15
	CALL $49($15)
	
.LABEL $label$180
	$15 = *($16 + [28])
	if ( ($15 == 0) ){ goto $label$181 }
	*(($16 + [32])) = $15
	CALL $49($15)
	
.LABEL $label$181
	$15 = *($16 + [16])
	if ( ($15 == 0) ){ goto $label$182 }
	*(($16 + [20])) = $15
	CALL $49($15)
	
.LABEL $label$182
	if ( ((*(($18 + [88])) & [1]) == 0) ){ goto $label$183 }
	CALL $49(*(($18 + [96])))
	
.LABEL $label$183
	if ( ((*($18 + [40]) & [1]) == 0) ){ goto $label$70 }
	CALL $49(*(($18 + [48])))
	
.LABEL $label$70
	CALL $54($4, $11, [-1])
	$9 = *($18 + [184])
	if ( ($9 == 0) ){ goto $label$69 }
	$6 = ($18 + [188])
	$16 = *($6)
	if ( ((int_32)$16 == (int_32)$9) ){ goto $label$185 }
	
.LOOP $label$186:
	$16 = ($16 + [-24])
	$15 = *($16)
	*($16) = [0]
	if ( ($15 == 0) ){ goto $label$187 }
	CALL $49($15)
	
.LABEL $label$187
	if ( ((int_32)$9 != (int_32)$16) ){ goto $label$186 }
	$16 = *(($18 + [184]))
	goto $label$184 
	
.LABEL $label$185
	$16 = $9
	
.LABEL $label$184
	*($6) = $9
	CALL $49($16)
	
.LABEL $label$69
	CALL _ZNK5eosio7buyname11get_balanceEyy(($18 + [120]), $18, *($0), (int_64)5459781)
	$2 = *($3)
	$14 = *(($3 + [8]))
	CALL eosio_assert(((int_64)*((($18 + [200]) + [8])) == (int_64)$14), [1008])
	$2 = ((int_64)$2 + (int_64)*($18 + [200]))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1056])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [1088])
	CALL eosio_assert(((int_64)$14 == (int_64)*($18 + [128])), [848])
	if ( ((int_64)*($18 + [120]) >= (int_64)$2) ){ goto $label$190 }
	*(($18 + [88])) = [0]
	*($18 + [72]) = (int_64)-1
	*($18 + [80]) = (int_64)0
	$2 = *($0)
	*($18 + [56]) = $2
	*($18 + [64]) = $2
	*($18 + [108]) = $3
	*($18 + [112]) = $4
	*($18 + [104]) = ($18 + [56])
	*($18 + [400]) = $2
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$3()), [1392])
	*($18 + [164]) = ($18 + [104])
	*($18 + [160]) = ($18 + [56])
	*($18 + [168]) = ($18 + [400])
	*(($15 = CALL $48([48])) + [16]) = (int_64)1398362884
	*($15 + [8]) = (int_64)0
	CALL eosio_assert([1], [480])
	$2 = (int_64)5462355
	$16 = [0]
	
.LOOP $label$191:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$189 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$192 }
	
.LOOP $label$193:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$189 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$193 }
	
.LABEL $label$192
	$9 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$191 }
	goto $label$188 
	
.LABEL $label$190
	if ( ((int_64)*($3) < (int_64)1) ){ goto $label$68 }
	$1 = *($0)
	$2 = (int_64)0
	$12 = (int_64)59
	$16 = [144]
	$13 = (int_64)0
	
.LOOP $label$194:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$199 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$198 }
	$15 = ($15 + [165])
	goto $label$197 
	
.LABEL $label$199
	$14 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$196 }
	goto $label$195 
	
.LABEL $label$198
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$197
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$196
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$195
	$16 = ($16 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$194 }
	*($18 + [112]) = $13
	*($18 + [104]) = $1
	$2 = (int_64)0
	$12 = (int_64)59
	$16 = [128]
	$13 = (int_64)0
	
.LOOP $label$200:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$205 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$204 }
	$15 = ($15 + [165])
	goto $label$203 
	
.LABEL $label$205
	$14 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$202 }
	goto $label$201 
	
.LABEL $label$204
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$203
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$202
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$201
	$16 = ($16 + [1])
	$12 = ((int_64)$12 + (int_64)-5)
	$13 = ((int_64)$14 | (int_64)$13)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$200 }
	$2 = (int_64)0
	$12 = (int_64)59
	$16 = [112]
	$17 = (int_64)0
	
.LOOP $label$206:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$211 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$210 }
	$15 = ($15 + [165])
	goto $label$209 
	
.LABEL $label$211
	$14 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$208 }
	goto $label$207 
	
.LABEL $label$210
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$209
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$208
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$207
	$16 = ($16 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$17 = ((int_64)$14 | (int_64)$17)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$206 }
	$2 = (int_64)0
	$12 = (int_64)59
	$16 = [160]
	$7 = (int_64)0
	
.LOOP $label$212:
	if ( ((uint_64)$2 > (uint_64)(int_64)2) ){ goto $label$217 }
	$15 = *($16)
	if ( ((uint_32)(($15 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$216 }
	$15 = ($15 + [165])
	goto $label$215 
	
.LABEL $label$217
	$14 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$214 }
	goto $label$213 
	
.LABEL $label$216
	$15 = ( ($15 + [208]) ? [0] : ((($15 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$215
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56)
	
.LABEL $label$214
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$213
	$16 = ($16 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$7 = ((int_64)$14 | (int_64)$7)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$212 }
	*(($18 + [84])) = *(($3 + [12]))
	*(($18 + [80])) = *(($3 + [8]))
	*(($18 + [76])) = *(($3 + [4]))
	*($18 + [64]) = $7
	*($18 + [56]) = $1
	*($18 + [72]) = *($3)
	CALL $56(($18 + [88]), $4)
	$16 = CALL $13(($18 + [160]), ($18 + [104]), $13, $17, ($18 + [56]))
	CALL $14(($18 + [400]), $16)
	$15 = *($18 + [400])
	CALL send_inline($15, (*($18 + [404]) - $15))
	$15 = *($18 + [400])
	if ( ($15 == 0) ){ goto $label$218 }
	*($18 + [404]) = $15
	CALL $49($15)
	
.LABEL $label$218
	$15 = *($16 + [28])
	if ( ($15 == 0) ){ goto $label$219 }
	*(($16 + [32])) = $15
	CALL $49($15)
	
.LABEL $label$219
	$15 = *($16 + [16])
	if ( ($15 == 0) ){ goto $label$220 }
	*(($16 + [20])) = $15
	CALL $49($15)
	
.LABEL $label$220
	if ( ((*($18 + [88]) & [1]) == 0) ){ goto $label$68 }
	CALL $49(*(($18 + [96])))
	$9 = *($18 + [240])
	if ( $9 ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$189
	$9 = [0]
	
.LABEL $label$188
	CALL eosio_assert($9, [544])
	*($15 + [32]) = [0]
	*($15 + [24 align=4]) = (int_64)0
	*($15 + [36]) = ($18 + [56])
	CALL $31(($18 + [160]), $15)
	*($18 + [40]) = $15
	$2 = *($15)
	*($18 + [160]) = $2
	$9 = *($15 + [40])
	*($18 + [412]) = $9
	$6 = ($18 + [84])
	$16 = *($6)
	if ( ((uint_32)$16 >= (uint_32)*(($18 + [88]))) ){ goto $label$222 }
	*($16 + [8]) = $2
	*($16 + [16]) = $9
	*($18 + [40]) = [0]
	*($16) = $15
	*($6) = ($16 + [24])
	goto $label$221 
	
.LABEL $label$222
	CALL $22(($18 + [80]), ($18 + [40]), ($18 + [160]), ($18 + [412]))
	
.LABEL $label$221
	$16 = *($18 + [40])
	*($18 + [40]) = [0]
	if ( ($16 == 0) ){ goto $label$223 }
	if ( ((*($16 + [24]) & [1]) == 0) ){ goto $label$224 }
	CALL $49(*(($16 + [32])))
	
.LABEL $label$224
	CALL $49($16)
	
.LABEL $label$223
	$9 = *($18 + [80])
	if ( ($9 == 0) ){ goto $label$68 }
	$6 = ($18 + [84])
	$16 = *($6)
	if ( ((int_32)$16 == (int_32)$9) ){ goto $label$226 }
	
.LOOP $label$227:
	$16 = ($16 + [-24])
	$15 = *($16)
	*($16) = [0]
	if ( ($15 == 0) ){ goto $label$228 }
	if ( ((*($15 + [24]) & [1]) == 0) ){ goto $label$229 }
	CALL $49(*(($15 + [32])))
	
.LABEL $label$229
	CALL $49($15)
	
.LABEL $label$228
	if ( ((int_32)$9 != (int_32)$16) ){ goto $label$227 }
	$16 = *(($18 + [80]))
	goto $label$225 
	
.LABEL $label$226
	$16 = $9
	
.LABEL $label$225
	*($6) = $9
	CALL $49($16)
	
.LABEL $label$68
	$9 = *($18 + [240])
	if ( ($9 == 0) ){ goto $label$66 }
	
.LABEL $label$67
	$6 = ($18 + [244])
	$16 = *($6)
	if ( ((int_32)$16 == (int_32)$9) ){ goto $label$231 }
	
.LOOP $label$232:
	$16 = ($16 + [-24])
	$15 = *($16)
	*($16) = [0]
	if ( ($15 == 0) ){ goto $label$233 }
	CALL $49($15)
	
.LABEL $label$233
	if ( ((int_32)$9 != (int_32)$16) ){ goto $label$232 }
	$16 = *(($18 + [240]))
	goto $label$230 
	
.LABEL $label$231
	$16 = $9
	
.LABEL $label$230
	*($6) = $9
	CALL $49($16)
	
.LABEL $label$66
	if ( ((*($18 + [352]) & [1]) == 0) ){ goto $label$234 }
	CALL $49(*(($18 + [360])))
	
.LABEL $label$234
	if ( ((*($18 + [368]) & [1]) == 0) ){ goto $label$235 }
	CALL $49(*(($18 + [376])))
	
.LABEL $label$235
	if ( ((*($18 + [384]) & [1]) == 0) ){ goto $label$3 }
	CALL $49(*(($18 + [392])))
	
.LABEL $label$3
	*([0] + [4]) = ($18 + [416])
	return (unreachable)
	
.LABEL $label$2
	CALL $50(($18 + [104]))
	
.LABEL $label$1
	CALL $50(($18 + [40]))
	(unreachable)
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [480])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [544])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $25(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $26(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $49(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC _ZN5eosio7buyname8addagentEyh (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	CALL eosio_assert(((($2 + [-1]) & [255]) <= [99]), [1696])
	*((($7 + [8]) + [32])) = [0]
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$3 = *($0)
	*($7 + [8]) = $3
	*($7 + [16]) = $3
	$6 = CALL db_find_i64($3, $3, (int_64)3680914790898728960, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL $29(($7 + [8]), $6)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($7 + [8])), [944])
	$1 = *($0)
	CALL eosio_assert([1], [1712])
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($7 + [8])), [1760])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)CALL $fimport$3()), [1808])
	*($6 + [8]) = $2
	$3 = *($6)
	*($6 + [12]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$3 == (int_64)*($6)), [1872])
	CALL eosio_assert([1], [432])
	CALL memcpy(($7 + [64]), $6, [8])
	CALL eosio_assert([1], [432])
	CALL memcpy((($7 + [64]) | [8]), ($6 + [8]), [1])
	CALL eosio_assert([1], [432])
	CALL memcpy((($7 + [64]) | [9]), ($6 + [12]), [4])
	CALL db_update_i64(*($6 + [20]), $1, ($7 + [64]), [13])
	$6 = ($7 + [24])
	if ( (uint_64)($3 <= *($6)) ){ goto $label$3 }
	*($6) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$2 = *($7 + [32])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$4 = *($0)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)CALL $fimport$3()), [1392])
	*(($6 = CALL $48([32])) + [16]) = ($7 + [8])
	*($6 + [8]) = $2
	*($6) = $1
	*($6 + [12]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert([1], [432])
	CALL memcpy(($7 + [64]), $6, [8])
	CALL eosio_assert([1], [432])
	CALL memcpy((($7 + [64]) | [8]), ($6 + [8]), [1])
	CALL eosio_assert([1], [432])
	CALL memcpy((($7 + [64]) | [9]), ($6 + [12]), [4])
	$3 = *($6)
	$2 = CALL db_store_i64(*((($7 + [8]) + [8])), (int_64)3680914790898728960, $4, $3, ($7 + [64]), [13])
	*($6 + [20]) = $2
	$0 = ($7 + [24])
	if ( (uint_64)($3 <= *($0)) ){ goto $label$5 }
	*($0) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($7 + [56]) = $6
	$3 = *($6)
	*($7 + [64]) = $3
	*($7 + [52]) = $2
	$5 = ($7 + [36])
	$0 = *($5)
	if ( ((uint_32)$0 >= (uint_32)*(($7 + [40]))) ){ goto $label$7 }
	*($0 + [8]) = $3
	*($0 + [16]) = $2
	*($7 + [56]) = [0]
	*($0) = $6
	*($5) = ($0 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $38(($7 + [32]), ($7 + [56]), ($7 + [64]), ($7 + [52]))
	
.LABEL $label$6
	$6 = *($7 + [56])
	*($7 + [56]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	CALL $49($6)
	
.LABEL $label$3
	$2 = *($7 + [32])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($7 + [36])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $49($0)
	
.LABEL $label$11
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$10 }
	$6 = *(($7 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$6 = $2
	
.LABEL $label$8
	*($5) = $2
	CALL $49($6)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [80])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$4 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [576])
	CALL memcpy($6, $4, [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [576])
	$7 = ($6 + [8])
	CALL memcpy($7, ($4 + [8]), [1])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($4)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($7)
	$3 = *($6)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 ($4 & [255])), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$16 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$22 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$3 = ($3 + [165])
	goto $label$20 
	
.LABEL $label$22
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$18
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$17 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$16
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$15 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$34 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$30
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$29 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$14 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$40 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$3 = ($3 + [165])
	goto $label$38 
	
.LABEL $label$40
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$36
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$35 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*($9 + [56]) = $0
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$42 }
	if ( ((int_64)$2 == (int_64)5031766162800803840) ){ goto $label$41 }
	if ( ((int_64)$2 != (int_64)3626072982591373312) ){ goto $label$14 }
	*($9 + [52]) = [0]
	*($9 + [48]) = [1]
	*($9 + [8 align=4]) = *($9 + [48])
	CALL $7(($9 + [56]), ($9 + [8]))
	goto $label$14 
	
.LABEL $label$42
	*($9 + [44]) = [0]
	*($9 + [40]) = [2]
	*($9 + [16 align=4]) = *($9 + [40])
	CALL $9(($9 + [56]), ($9 + [16]))
	goto $label$14 
	
.LABEL $label$41
	*($9 + [36]) = [0]
	*($9 + [32]) = [3]
	*($9 + [24 align=4]) = *($9 + [32])
	CALL $11(($9 + [56]), ($9 + [24]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [64])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $16($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [432])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [432])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $18(CALL $17($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [256])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [304])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [368])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$7 }
	CALL $49(*(($4 + [32])))
	
.LABEL $label$7
	CALL $49($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL $49(*(($4 + [32])))
	
.LABEL $label$10
	CALL $49($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [40]))
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $48($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $55($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $49($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [432])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [432])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [432])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC _ZN5eosio7buyname10createnameEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [160])
	*([0] + [4]) = $17
	CALL require_auth(*($0))
	*((($17 + [104]) + [32])) = [0]
	*($17 + [120]) = (int_64)-1
	$12 = *($0)
	*($17 + [104]) = $12
	*($17 + [112]) = $12
	*($17 + [128]) = (int_64)0
	$10 = CALL db_lowerbound_i64($12, $12, (int_64)-7297973096368160768, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$2 = ($17 + [32])
	$9 = CALL $12(($17 + [104]), $10)
	$5 = (($17 + [48]) + [8])
	$1 = ($17 + [16])
	$6 = ($1 + [4])
	$7 = ($17 + [92])
	$8 = ($17 + [40])
	
.LOOP $label$2:
	if ( ((int_64)*($9 + [8]) < (int_64)1) ){ goto $label$3 }
	$3 = *($0)
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [144]
	$13 = (int_64)0
	
.LOOP $label$4:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$9 }
	$4 = *($10)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$4 = ($4 + [165])
	goto $label$7 
	
.LABEL $label$9
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$5
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$4 }
	*($5) = $13
	*($17 + [48]) = $3
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [128]
	$13 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$15 }
	$4 = *($10)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$4 = ($4 + [165])
	goto $label$13 
	
.LABEL $label$15
	$14 = (int_64)0
	if ( ((int_64)$12 == (int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$11
	$10 = ($10 + [1])
	$11 = ((int_64)$11 + (int_64)-5)
	$13 = ((int_64)$14 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$10 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [112]
	$15 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$12 > (uint_64)(int_64)7) ){ goto $label$21 }
	$4 = *($10)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$4 = ($4 + [165])
	goto $label$19 
	
.LABEL $label$21
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$17
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$15 = ((int_64)$14 | (int_64)$15)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$16 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [160]
	$16 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$12 > (uint_64)(int_64)2) ){ goto $label$27 }
	$4 = *($10)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$4 = ($4 + [165])
	goto $label$25 
	
.LABEL $label$27
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$23
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$16 = ((int_64)$14 | (int_64)$16)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$22 }
	*(($17 + [8])) = $16
	*(($1 + [12])) = *(($9 + [20]))
	*(($1 + [8])) = *(($9 + [16]))
	*($6) = *(($9 + [12]))
	*($1) = *($9 + [8])
	*($17) = $3
	CALL $56($2, ($9 + [24]))
	CALL $14(($17 + [144]), CALL $13(($17 + [64]), ($17 + [48]), $13, $15, $17))
	$10 = *($17 + [144])
	CALL send_inline($10, (*($17 + [148]) - $10))
	$10 = *($17 + [144])
	if ( ($10 == 0) ){ goto $label$28 }
	*($17 + [148]) = $10
	CALL $49($10)
	
.LABEL $label$28
	$10 = *($7)
	if ( ($10 == 0) ){ goto $label$29 }
	*((($17 + [64]) + [32])) = $10
	CALL $49($10)
	
.LABEL $label$29
	$10 = *((($17 + [64]) + [16]))
	if ( ($10 == 0) ){ goto $label$30 }
	*((($17 + [64]) + [20])) = $10
	CALL $49($10)
	
.LABEL $label$30
	if ( ((*($2) & [1]) == 0) ){ goto $label$3 }
	CALL $49(*($8))
	
.LABEL $label$3
	$10 = [0]
	$4 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($4, [176])
	CALL eosio_assert($4, [224])
	$4 = CALL db_next_i64(*($9 + [40]), $17)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$31 }
	$10 = CALL $12(($17 + [104]), $4)
	
.LABEL $label$31
	CALL $15(($17 + [104]), $9)
	$9 = $10
	if ( $10 ){ goto $label$2 }
	
.LABEL $label$1
	$9 = *($17 + [128])
	if ( ($9 == 0) ){ goto $label$32 }
	$1 = ($17 + [132])
	$10 = *($1)
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$34 }
	
.LOOP $label$35:
	$10 = ($10 + [-24])
	$4 = *($10)
	*($10) = [0]
	if ( ($4 == 0) ){ goto $label$36 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$37 }
	CALL $49(*(($4 + [32])))
	
.LABEL $label$37
	CALL $49($4)
	
.LABEL $label$36
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$35 }
	$10 = *(($17 + [128]))
	goto $label$33 
	
.LABEL $label$34
	$10 = $9
	
.LABEL $label$33
	*($1) = $9
	CALL $49($10)
	
.LABEL $label$32
	*([0] + [4]) = ($17 + [160])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [448])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $48([48])
	$6 = CALL $21($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [40])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $22(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL $49(*(($4 + [32])))
	
.LABEL $label$10
	CALL $49($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $13 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $48([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $16($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $19(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $48(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $55($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $49($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $49($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $37 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [40]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1600])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-7297973096368160768)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1536])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1536])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $12(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [448])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $48([32])
	$6 = CALL $35($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $36(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $49($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $35 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [480])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [544])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [576])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [576])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$5 = (*([0] + [4]) - [16])
	$10 = $5
	*([0] + [4]) = $5
	$2 = *($0)
	$9 = *($0 + [4])
	$7 = *($9)
	$8 = *($7 + [16])
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($7), *($7 + [8]), (int_64)-7297973096368160768, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $12($7, $4)
	*($10 + [4]) = [0]
	*($10) = $7
	$8 = *(*(CALL $37($10) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($7 + [16])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [1472])
	*($1) = *(($7 + [16]))
	$7 = *($9 + [4])
	*($1 + [8]) = *($7)
	*(($1 + [16])) = *(($7 + [8]))
	$4 = ($1 + [24])
	CALL $51($4, *($9 + [8]))
	$7 = *($1 + [24])
	$9 = ( *(($1 + [28])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($9 + [24])
	$8 = (CASTING uint_64)(uint_32 $9)
	$3 = ($1 + [8])
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ($7 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($7)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($5 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10) = $9
	$5 = ($9 + $7)
	*($10 + [8]) = $5
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [432])
	CALL memcpy($9, $1, [8])
	$6 = ($9 + [8])
	CALL eosio_assert(((int_32)($5 - $6) > (int_32)[7]), [432])
	CALL memcpy($6, $3, [8])
	$3 = ($9 + [16])
	CALL eosio_assert(((int_32)($5 - $3) > (int_32)[7]), [432])
	CALL memcpy($3, ($1 + [16]), [8])
	*($10 + [4]) = ($9 + [24])
	CALL $20($10, $4)
	$8 = *($1)
	*($1 + [40]) = CALL db_store_i64(*($2 + [8]), (int_64)-7297973096368160768, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

void .FUNC _ZNK5eosio7buyname11get_balanceEyy (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [128]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$6 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$1 }
	$6 = [0]
	*(($11 + [40])) = [0]
	*($11 + [24]) = (int_64)-1
	*($11 + [32]) = (int_64)0
	*($11 + [16]) = $2
	*($11 + [8]) = $9
	$4 = CALL db_find_i64($9, $2, (int_64)3607749779137757184, $3)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$10 }
	$6 = CALL $34(($11 + [8]), $4)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($11 + [8])), [944])
	CALL $28($6)
	*(($0 + [8])) = *(($6 + [8]))
	*($0) = *($6)
	$0 = *($11 + [32])
	if ( ($0 == 0) ){ goto $label$7 }
	$5 = ($11 + [36])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$11:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $49($4)
	
.LABEL $label$12
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$11 }
	$6 = *(($11 + [32]))
	goto $label$8 
	
.LABEL $label$10
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [480])
	$8 = (int_64)5459781
	
.LOOP $label$14:
	$4 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	
.LOOP $label$16:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$16 }
	
.LABEL $label$15
	$4 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	CALL eosio_assert($4, [544])
	goto $label$7 
	
.LABEL $label$9
	$6 = $0
	
.LABEL $label$8
	*($5) = $0
	CALL $49($6)
	
.LABEL $label$7
	*([0] + [4]) = ($11 + [48])
}

int_32 .FUNC $30 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [944])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3680914790898728960, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $29($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [944])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$5 = (*([0] + [4]) - [16])
	$10 = $5
	*([0] + [4]) = $5
	$2 = *($0)
	$9 = *($0 + [4])
	$7 = *($9)
	$8 = *($7 + [16])
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($7), *($7 + [8]), (int_64)-7297973096368160768, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $12($7, $4)
	*($10 + [4]) = [0]
	*($10) = $7
	$8 = *(*(CALL $37($10) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($7 + [16])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [1472])
	*($1) = *(($7 + [16]))
	$7 = *($9 + [4])
	*($1 + [8]) = *($7)
	*(($1 + [16])) = *(($7 + [8]))
	$4 = ($1 + [24])
	CALL $51($4, *($9 + [8]))
	$7 = *($1 + [24])
	$9 = ( *(($1 + [28])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($9 + [24])
	$8 = (CASTING uint_64)(uint_32 $9)
	$3 = ($1 + [8])
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ($7 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($7)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($5 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10) = $9
	$5 = ($9 + $7)
	*($10 + [8]) = $5
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [432])
	CALL memcpy($9, $1, [8])
	$6 = ($9 + [8])
	CALL eosio_assert(((int_32)($5 - $6) > (int_32)[7]), [432])
	CALL memcpy($6, $3, [8])
	$3 = ($9 + [16])
	CALL eosio_assert(((int_32)($5 - $3) > (int_32)[7]), [432])
	CALL memcpy($3, ($1 + [16]), [8])
	*($10 + [4]) = ($9 + [24])
	CALL $20($10, $4)
	$8 = *($1)
	*($1 + [40]) = CALL db_store_i64(*($2 + [8]), (int_64)-7297973096368160768, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC isspace (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $50 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $48(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $55($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $49($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $49($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $48($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $49($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $48(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $49($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $54 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$3 = ($6 & [1])
	if ( $3 ){ goto $label$3 }
	$4 = uint_32($6 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $3 ){ goto $label$6 }
	$5 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $3 ? $2 : ($3 <= $2) )
	$3 = ($4 - $1)
	$3 = ($3 - $2)
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($5 + $1)
	CALL memmove($1, ($1 + $2), $3)
	$6 = *($0)
	
.LABEL $label$7
	$2 = ($4 - $2)
	if ( ($6 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($5 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $55 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $48($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $48($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}