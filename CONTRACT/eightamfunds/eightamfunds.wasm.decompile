(data (i32.const 8192) "transfer with empty memo is not accepted\00")
(data (i32.const 8233) "0123456789\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8330) "invalid fund id\00")
(data (i32.const 8346) "incomplete memo for subscription\00")
(data (i32.const 8379) "incomplete memo after fund id\00")
(data (i32.const 8409) "empty fund id\00")
(data (i32.const 8423) "incomplete memo after return account\00")
(data (i32.const 8460) "incomplete memo after auto renew mark\00")
(data (i32.const 8498) "invalid auto renew mark\00")
(data (i32.const 8522) "incomplete memo after referrer\00")
(data (i32.const 8553) "length of referrer should not exceed 12\00")
(data (i32.const 8593) "length of return memo should not exceed 56\00")
(data (i32.const 8636) "unknown type in memo\00")
(data (i32.const 8657) "fund does not exist\00")
(data (i32.const 8677) "fund is not raised by this contract\00")
(data (i32.const 8713) "fund is not open yet\00")
(data (i32.const 8734) "fund is closed\00")
(data (i32.const 8749) "min subscription is not reached\00")
(data (i32.const 8781) "max fund size is exceeded\00")
(data (i32.const 8807) "return account should not be this contract\00")
(data (i32.const 8850) "active\00")
(data (i32.const 8857) "updatesize\00")
(data (i32.const 8868) "eamsubscribe\00")
(data (i32.const 8881) "fund is not started yet\00")
(data (i32.const 8905) "fund is settled\00")
(data (i32.const 8921) "fund assets should be returned within 7 days after fund end time\00")
(data (i32.const 8986) "fund\'s fund_admin should be this contract\00")
(data (i32.const 9028) "raising address should be this contract\00")
(data (i32.const 9068) "fund asset type should be EOS\00")
(data (i32.const 9098) "initial fund asset should be zero\00")
(data (i32.const 9132) "invalid fund_id\00")
(data (i32.const 9148) "min_subscription is invalid\00")
(data (i32.const 9176) "min_subscription symbol should be EOS\00")
(data (i32.const 9214) "min_subscription should be positive\00")
(data (i32.const 9250) "max_size is invalid\00")
(data (i32.const 9270) "max_size symbol should be EOS\00")
(data (i32.const 9300) "max_size is smaller than min_subscription\00")
(data (i32.const 9342) "open time should be before start time\00")
(data (i32.const 9380) "fund cannot be added after it starts\00")
(data (i32.const 9417) "performance_fee_ratio should be between 0 and 10000\00")
(data (i32.const 9469) "performance_hurdle_rate should be non-negative\00")
(data (i32.const 9516) "fund has been added\00")
(data (i32.const 9536) "previous fund does not exist\00")
(data (i32.const 9565) "the previous fund has another next fund\00")
(data (i32.const 9605) "the previous fund has been settled\00")
(data (i32.const 9640) "fund is not added\00")
(data (i32.const 9658) "fund cannot be deleted after subscribed\00")
(data (i32.const 9698) "the final nav can only be recorded on settlement\00")
(data (i32.const 9747) "addnav\00")
(data (i32.const 9754) "fund has been settled\00")
(data (i32.const 9776) "deletenav\00")
(data (i32.const 9786) "fund still running cannot be settled\00")
(data (i32.const 9823) "fund asset should be returned before settlement\00")
(data (i32.const 9871) "subscription does not exist\00")
(data (i32.const 9899) "fund is not settled\00")
(data (i32.const 9919) "overflow in computing withdraw asset\00")
(data (i32.const 9956) "eamreturn\00")
(data (i32.const 9966) "eosio.token\00")
(data (i32.const 9978) "transfer\00")
(data (i32.const 9987) "fund asset has been sent\00")
(data (i32.const 10012) "fund asset cannot be sent before the fund starts\00")
(data (i32.const 10061) "performance fee has been sent\00")
(data (i32.const 10091) "auto renew is not enabled\00")
(data (i32.const 10117) "only receive token from eosio.token.\00")
(data (i32.const 10154) "string is too long to be a valid name\00")
(data (i32.const 10192) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 10259) "character is not in allowed character set for names\00")
(data (i32.const 10311) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 10370) "attempt to add asset with different symbol\00")
(data (i32.const 10413) "addition underflow\00")
(data (i32.const 10432) "addition overflow\00")
(data (i32.const 10450) "write\00")
(data (i32.const 10456) "divide by zero\00")
(data (i32.const 10471) "multiplication overflow\00")
(data (i32.const 10495) "multiplication underflow\00")
(data (i32.const 10520) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 10569) "invalid symbol name\00")
(data (i32.const 10589) "attempt to subtract asset with different symbol\00")
(data (i32.const 10637) "subtraction underflow\00")
(data (i32.const 10659) "subtraction overflow\00")
(data (i32.const 10680) "signed division overflow\00")
(data (i32.const 10705) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 10756) "error reading iterator\00")
(data (i32.const 10779) "read\00")
(data (i32.const 10784) "get\00")
(data (i32.const 10788) "cannot pass end iterator to modify\00")
(data (i32.const 10823) "object passed to modify is not in multi_index\00")
(data (i32.const 10869) "cannot modify objects in table of another contract\00")
(data (i32.const 10920) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10979) "cannot create objects in table of another contract\00")
(data (i32.const 11030) "next primary key in table is at autoincrement limit\00")
(data (i32.const 11082) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 11136) "cannot decrement iterator at beginning of table\00")
(data (i32.const 11184) "cannot pass end iterator to erase\00")
(data (i32.const 11218) "cannot increment end iterator\00")
(data (i32.const 11248) "object passed to erase is not in multi_index\00")
(data (i32.const 11293) "cannot erase objects in table of another contract\00")
(data (i32.const 11343) "attempt to remove object that was not in multi_index\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "publication_time" (func $fimport$1 (result i64)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "db_update_i64" (func $fimport$4 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$5 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$6 (param i32 i64 i32)))
(import "env" "send_inline" (func $fimport$7 (param i32 i32)))
(import "env" "memcpy" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$9 (param i64)))
(import "env" "db_next_i64" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "__multi3" (func $fimport$11 (param i32 i64 i64 i64 i64)))
(import "env" "require_recipient" (func $fimport$12 (param i64)))
(import "env" "action_data_size" (func $fimport$13 (result i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$16 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_store_i64" (func $fimport$17 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$18 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$20 (param i64 i64 i64) (result i32)))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$22 (param i32)))
(import "env" "abort" (func $fimport$23))
(import "env" "memset" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$25 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$26 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$37 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$38 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$41 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$43 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$44 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$45 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $36))
(export "_ZdlPv" (func $71))
(export "_Znwj" (func $69))
(export "_Znaj" (func $70))
(export "_ZdaPv" (func $72))
(export "_ZnwjSt11align_val_t" (func $73))
(export "_ZnajSt11align_val_t" (func $74))
(export "_ZdlPvSt11align_val_t" (func $75))
(export "_ZdaPvSt11align_val_t" (func $76))
(table $0 13 13 anyfunc)
(elem (i32.const 1) $3 $17 $23 $34 $31 $14 $19 $22 $32 $21 $35 $30)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19812))
(global $global$2 i32 (i32.const 19812))


int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $95($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8244])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $95 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11408]) == 0) ){ goto $label$2 }
	$2 = *([0] + [11412])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [11408]) = [1]
	$2 = ($2 << [16])
	*([0] + [11412]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11412])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [11412]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [11408]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [11408]) = [1]
	$3 = ($3 << [16])
	*([0] + [11412]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11412])
	
.LABEL $label$10
	*([0] + [11412]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $96 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19800])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19608]
	$3 = (((int_32)$1 * (int_32)[12]) + [19608])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $90 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $91 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $85())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $92($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $93($1)
	
.LABEL $label$2
	*(CALL $85()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $93(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $96($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $93 (int_32 $0)
{
	return CALL $94([11416], $0)
}

int_32 .FUNC $38 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $93($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10779])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $96($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $46(*($1), ($4 + [24]))
	*($2 + [8]) = $4
	CALL $68(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$6 = CALL $78(($2 + [48]), ($1 + [24]))
	*(($7 = (($2 + [32]) + [8]))) = *(($1 + [48]))
	*($2 + [32]) = *($1 + [40])
	$8 = *($1 + [56])
	$1 = CALL $78(($2 + [16]), ($1 + [60]))
	*((($2 + [64]) + [8])) = *($7)
	*($2 + [64]) = *($2 + [32])
	$0 = *($0 + [4])
	$9 = *($0 + [4])
	$7 = (*($0) + int_32($9 >> [1]))
	$0 = *($0)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	$10 = *((($2 + [64]) + [8]))
	*((($2 + [80]) + [8])) = $10
	*(($2 + [8])) = $10
	$10 = *($2 + [64])
	*($2) = $10
	*($2 + [80]) = $10
	CALL void $7((int_32 $5), (int_64 $4), (int_64 $3), (int_64 $6), (int_32 $2), (int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $1), (int_32 $0))
	if ( (*($1) & [1]) ){ goto $label$4 }
	if ( (*($6) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $43 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [224])
	$global$0 = $3
	*(($4 = $3) + [184]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $93($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [96])) = [0]
	*(($4 + [112])) = (int_64)0
	*(($4 + [128])) = (int_64)0
	*(($4 + [176])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [152]) = [0]
	*($4 + [160]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [208]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $49(($4 + [16]), ($4 + [208]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [192]) + [8]))) = *($3)
	*($4 + [192]) = *($4)
	$3 = *($6)
	*((($4 + [208]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [192])
	*($4 + [32]) = $0
	*($4 + [208]) = $0
	*($4 + [212]) = ($4 + [184])
	*($4 + [208]) = ($4 + [16])
	CALL $50(($4 + [208]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	$2 = [1]
	if ( (*($4 + [168]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $96($2)
	$2 = [1]
	if ( ((*($4 + [168]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($4 + [176])))
	if ( (*($4 + [88]) & $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($4 + [88]) & $2) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	
.LABEL $label$4
	$global$0 = ($4 + [224])
	return [1]
}

int_32 .FUNC $42 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $93($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [48]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10779])
	CALL memcpy(($4 + [40]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [10779])
	CALL memcpy((($4 + [40]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [10779])
	CALL memcpy((($4 + [40]) + [16]), ($2 + [16]), [8])
	*(($4 + [28])) = ($2 + [24])
	*((($4 + [8]) + [24])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [56])
	$1 = *($4 + [48])
	$8 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $8), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $96($2)
	
.LABEL $label$6
	$global$0 = ($4 + [64])
	return [1]
}

int_32 .FUNC $41 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $93($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [104]) + [24]))) = (int_64)0
	*(($8 = ($4 + [144]))) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [184]) = (int_64)0
	*($4 + [92]) = $2
	*($4 + [88]) = $2
	*($4 + [96]) = ($2 + $7)
	*($4 + [272]) = ($4 + [88])
	*($4 + [56]) = ($4 + [104])
	CALL $45(($4 + [56]), ($4 + [272]))
	*(($9 = (($4 + [40]) + [8]))) = *($4 + [96])
	*($4 + [40]) = *($4 + [88])
	*(($10 = (($4 + [256]) + [8]))) = *($9)
	*($4 + [256]) = *($4 + [40])
	$9 = *($10)
	*((($4 + [272]) + [8])) = $9
	*((($4 + [56]) + [24])) = $9
	*($4 + [56]) = $0
	*($4 + [64]) = $1
	$0 = *($4 + [256])
	*($4 + [72]) = $0
	*($4 + [272]) = $0
	*(($9 = (($4 + [208]) + [8]))) = *($3)
	*(($3 = (($4 + [192]) + [8]))) = *($8)
	*($4 + [208]) = *($4 + [120])
	*($4 + [192]) = *($4 + [136])
	$0 = *($4 + [112])
	$1 = *($4 + [104])
	$11 = *($4 + [152])
	$12 = *($4 + [160])
	$13 = *($4 + [168])
	$14 = *($4 + [176])
	$15 = *($4 + [184])
	*((($4 + [240]) + [8])) = *($3)
	*((($4 + [224]) + [8])) = *($9)
	*($4 + [240]) = *($4 + [192])
	*($4 + [224]) = *($4 + [208])
	$3 = (($4 + [56]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$16 = *((($4 + [224]) + [8]))
	*((($4 + [272]) + [8])) = $16
	$17 = *((($4 + [240]) + [8]))
	*((($4 + [256]) + [8])) = $17
	*((($4 + [24]) + [8])) = $16
	*((($4 + [8]) + [8])) = $17
	$16 = *($4 + [224])
	*($4 + [272]) = $16
	$17 = *($4 + [240])
	*($4 + [256]) = $17
	*($4 + [24]) = $16
	*($4 + [8]) = $17
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [24])), (int_32 ($4 + [8])), (int_32 $11), (int_64 $12), (int_64 $13), (int_64 $14), (int_64 $15), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $96($2)
	
.LABEL $label$6
	$global$0 = ($4 + [288])
	return [1]
}

int_32 .FUNC $40 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $93($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*((($4 + [64]) + [24])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [56]) = ($2 + $7)
	*($4 + [48]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10779])
	CALL memcpy(($4 + [64]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [10779])
	CALL memcpy((($4 + [64]) + [8]), ($2 + [8]), [8])
	*($4 + [52]) = ($2 + [16])
	$8 = (($4 + [64]) + [16])
	CALL $46(($4 + [48]), $8)
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($9 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4)
	$3 = *($9)
	*((($4 + [112]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [96])
	*($4 + [32]) = $0
	*($4 + [112]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($4 + [72])
	$1 = *($4 + [64])
	$8 = CALL $78(($4 + [112]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $8), (int_32 $6))
	if ( (*($4 + [112]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $96($2)
	$2 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [88])))
	$global$0 = ($4 + [128])
	return $2
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $46(*($1), ($4 + [24]))
	*($2 + [8]) = $4
	CALL $67(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $56($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $82($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $82($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $77($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [10779])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [10779])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [40])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($2 + [8]) = $0
	CALL $66(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [10779])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $46(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $84($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [64])))
	
.LABEL $label$11
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $9 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [16])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	*(($7 + [8])) = *(($1 + [8]))
	*($7) = *($1)
	*($8) = $9
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	CALL $11(($0 + [28]), [24])
	$7 = *($0 + [28])
	$1 = (*(($0 + [32])) - $7)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [10450])
	CALL memcpy($7, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [10450])
	CALL memcpy(($7 + [8]), ($4 + [8]), [8])
	*($5 + [8]) = *(($4 + [16]))
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [10450])
	CALL memcpy(($7 + [16]), ($5 + [8]), [8])
	$global$0 = ($5 + [16])
	return $0
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [36]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [10450])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [40]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [10450])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [44]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [10450])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [52])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [56])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [60])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($0 + [4]), $4, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = *($4 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [10450])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-4138943993976477392, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $24($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $60(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [11030])
	*($1) = *(($6 + [16]))
	$6 = *($5 + [4])
	*($1 + [8]) = *($6 + [8])
	*($1 + [16]) = *($6 + [16])
	$8 = ($1 + [24])
	CALL $80($8, ($6 + [40]))
	$6 = *($5 + [8])
	*($1 + [40]) = *($6)
	*(($1 + [48])) = *(($6 + [8]))
	$9 = ($1 + [56])
	CALL $80($9, (*($5 + [4]) + [28]))
	*($1 + [68]) = *(*($5 + [4]) + [24])
	$5 = *($1 + [24])
	$6 = ( *(($1 + [28])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [41])
	$7 = (CASTING uint_64)(uint_32 $6)
	$10 = ($1 + [68])
	$11 = ($1 + [40])
	$12 = ($1 + [8])
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	$6 = *(($1 + [56]))
	$6 = ( *(($1 + [60])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$5 = ($6 + $5)
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $93($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($6 + $5)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $12
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = $8
	*($3 + [48]) = $11
	*($3 + [52]) = $9
	*($3 + [56]) = $10
	CALL $61(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($4 + [8]), (int_64)-4138943993976477392, *(*($0 + [8])), $7, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL $96($6)
	
.LABEL $label$7
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$8 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$5 = ($4 + [8])
	$7 = *($5)
	$6 = *(($0 + [8]))
	$13 = *($6)
	$14 = *($1)
	*($3 + [32]) = *(($1 + [8]))
	*($1 + [80]) = CALL db_idx64_store($7, (int_64)-4138943993976477392, $13, $14, ($3 + [32]))
	$7 = *($6)
	$13 = *($5)
	$14 = *($1)
	*($3 + [32]) = *(($1 + [16]))
	*(($1 + [84])) = CALL db_idx64_store($13, (int_64)-4138943993976477391, $7, $14, ($3 + [32]))
	$global$0 = ($3 + [64])
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10756])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $93($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([112])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = [0]
	*($5 + [48]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88 align=4]) = (int_64)0
	*($5 + [96]) = [0]
	*($5 + [100]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [20])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [56])
	*($3 + [64]) = ($5 + [64])
	*($3 + [68]) = ($5 + [72])
	*($3 + [72]) = ($5 + [88])
	CALL $53(($3 + [40]), ($3 + [32]))
	*($5 + [104]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $54(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $96($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [88])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [92])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( (*($1 + [32]) & [1]) ){ goto $label$15 }
	if ( (*($1 + [20]) & [1]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*(($1 + [40])))
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [28])))
	if ( (*($1 + [8]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10756])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $93($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([168])) + [32]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = (int_64)0
	*($5 + [112]) = (int_64)0
	*($5 + [120]) = (int_64)0
	*($5 + [128]) = (int_64)0
	*($5 + [136]) = (int_64)0
	*($5 + [144]) = (int_64)0
	*($5 + [152]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [40])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [56])
	*($3 + [60]) = ($5 + [64])
	*($3 + [64]) = ($5 + [72])
	*($3 + [68]) = ($5 + [80])
	*($3 + [72]) = ($5 + [81])
	*($3 + [76]) = ($5 + [82])
	*($3 + [80]) = ($5 + [88])
	*($3 + [84]) = ($5 + [104])
	*($3 + [88]) = ($5 + [120])
	*($3 + [92]) = ($5 + [136])
	CALL $59(($3 + [32]), ($3 + [24]))
	*($5 + [160]) = [-1]
	*($5 + [156]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $16(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $96($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [10154])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [10259])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [10192])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [10259])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $3 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$5 = ($global$0 - [512])
	$global$0 = $5
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$1 }
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$1 }
	*((($5 + [216]) + [32])) = [0]
	*($5 + [224]) = (int_64)6138663757350325536
	*($5 + [216]) = (int_64)6138663757350325536
	*($5 + [232]) = (int_64)-1
	*($5 + [240]) = (int_64)0
	*((($5 + [176]) + [32])) = [0]
	*($5 + [184]) = $2
	*($5 + [176]) = $2
	*($5 + [192]) = (int_64)-1
	*($5 + [200]) = (int_64)0
	*($5 + [212]) = [0]
	*((($5 + [136]) + [32])) = [0]
	*($5 + [144]) = $2
	*($5 + [136]) = $2
	*($5 + [152]) = (int_64)-1
	*($5 + [160]) = (int_64)0
	*($5 + [172]) = [0]
	$6 = CALL $1(($5 + [80]), $4, $1)
	if ( ((int_32)*($5 + [80]) == (int_32)[112]) ){ goto $label$10 }
	$1 = CALL publication_time()
	$2 = *($6 + [8])
	$8 = *(($5 + [244]))
	$7 = *(($5 + [240]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$12 }
	
.LOOP $label$14:
	$4 = ($8 + [-24])
	$9 = *($4)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$13 }
	$8 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*($9 + [100]) == (int_32)($5 + [216])), [10705])
	goto $label$11 
	
.LABEL $label$12
	$9 = [0]
	$4 = CALL db_find_i64(*($5 + [216]), *(($5 + [224])), (int_64)6820297015373594624, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$11 }
	$9 = CALL $4(($5 + [216]), $4)
	CALL eosio_assert(((int_32)*($9 + [100]) == (int_32)($5 + [216])), [10705])
	
.LABEL $label$11
	$8 = [0]
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8657])
	$2 = *(($6 + [8]))
	$7 = *(($5 + [164]))
	$10 = *(($5 + [160]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$16 }
	
.LOOP $label$18:
	$4 = ($7 + [-24])
	$11 = *($4)
	if ( ((int_64)*($11) == (int_64)$2) ){ goto $label$17 }
	$7 = $4
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$16 }
	CALL eosio_assert(((int_32)*($11 + [152]) == (int_32)($5 + [136])), [10705])
	$8 = $11
	goto $label$15 
	
.LABEL $label$16
	$4 = CALL db_find_i64(*($5 + [136]), *((($5 + [136]) + [8])), (int_64)6820310642650513408, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$15 }
	$8 = CALL $5(($5 + [136]), $4)
	CALL eosio_assert(((int_32)*($8 + [152]) == (int_32)($5 + [136])), [10705])
	
.LABEL $label$15
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [8677])
	$4 = *($5 + [80])
	if ( ((int_32)$4 == (int_32)[114]) ){ goto $label$22 }
	if ( ((int_32)$4 != (int_32)[115]) ){ goto $label$10 }
	CALL eosio_assert(((uint_64)$1 >= (uint_64)*($8 + [56])), [8713])
	CALL eosio_assert(((int_32)*($8 + [80]) ^ (int_32)[1]), [8734])
	$4 = ($3 + [8])
	CALL eosio_assert(((int_64)*($4) == (int_64)*(($8 + [32]))), [10311])
	CALL eosio_assert(((int_64)*($3) >= (int_64)*($8 + [24])), [8749])
	$2 = *($8 + [104])
	$9 = ($8 + [112])
	$1 = *($9)
	CALL eosio_assert(((int_64)*($4) == (int_64)$1), [10370])
	$2 = ((int_64)$2 + (int_64)*($3))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [10413])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [10432])
	CALL eosio_assert(((int_64)$1 == (int_64)*(($8 + [128]))), [10311])
	CALL eosio_assert(((int_64)$2 <= (int_64)*($8 + [120])), [8781])
	CALL eosio_assert(((int_64)*($6 + [16]) != (int_64)*($0)), [8807])
	$12 = *($4)
	$1 = *($0)
	$13 = *($3)
	CALL eosio_assert($7, [10788])
	CALL eosio_assert(((int_32)*($8 + [152]) == (int_32)($5 + [136])), [10823])
	CALL eosio_assert(((int_64)*($5 + [136]) == (int_64)CALL $fimport$3()), [10869])
	*($5 + [440]) = *($8 + [56])
	$2 = *($8)
	CALL eosio_assert(((int_64)$12 == (int_64)*($9)), [10370])
	$12 = ((int_64)$13 + (int_64)*($8 + [104]))
	*($8 + [104]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [10413])
	CALL eosio_assert(((int_64)*($8 + [104]) < (int_64)4611686018427387904), [10432])
	CALL eosio_assert(((int_64)$2 == (int_64)*($8)), [10920])
	*($5 + [48]) = (($5 + [256]) + [147])
	*($5 + [44]) = ($5 + [256])
	*($5 + [40]) = ($5 + [256])
	*($5 + [416]) = ($5 + [40])
	*($5 + [452]) = ($8 + [8])
	*($5 + [448]) = $8
	*($5 + [456]) = ($8 + [16])
	*($5 + [460]) = ($8 + [24])
	*($5 + [464]) = ($8 + [40])
	*($5 + [468]) = ($8 + [48])
	$4 = ($8 + [56])
	*($5 + [472]) = $4
	*($5 + [476]) = ($8 + [64])
	*($5 + [480]) = ($8 + [72])
	*($5 + [484]) = ($8 + [80])
	*($5 + [488]) = ($8 + [81])
	*($5 + [492]) = ($8 + [82])
	*($5 + [496]) = ($8 + [88])
	*($5 + [500]) = ($8 + [104])
	*($5 + [504]) = ($8 + [120])
	*($5 + [508]) = ($8 + [136])
	CALL $6(($5 + [448]), ($5 + [416]))
	CALL db_update_i64(*($8 + [156]), $1, ($5 + [256]), [147])
	$7 = (($5 + [136]) + [16])
	if ( (uint_64)($2 <= *($7)) ){ goto $label$23 }
	*($7) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	*($5 + [448]) = *($4)
	if ( (CALL $89(($5 + [440]), ($5 + [448]), [8]) == 0) ){ goto $label$24 }
	$8 = ($8 + [160])
	$4 = *($8)
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$25 }
	$4 = CALL db_idx64_find_primary(*($5 + [136]), *(($5 + [144])), (int_64)6820310642650513408, ($5 + [416]), $2)
	*($8) = $4
	
.LABEL $label$25
	CALL db_idx64_update($4, $1, ($5 + [448]))
	
.LABEL $label$24
	$2 = *($0)
	*($5 + [452]) = $6
	*($5 + [456]) = $3
	*($5 + [448]) = ($5 + [176])
	*($5 + [40]) = $2
	CALL eosio_assert(((int_64)*($5 + [176]) == (int_64)CALL $fimport$3()), [10979])
	*($5 + [260]) = ($5 + [448])
	*($5 + [256]) = ($5 + [176])
	*($5 + [264]) = ($5 + [40])
	*(($4 = CALL _Znwj([88])) + [16]) = (int_64)0
	*($4 + [24 align=4]) = (int_64)0
	*($4 + [32]) = [0]
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56 align=4]) = (int_64)0
	*($4 + [64]) = [0]
	*($4 + [72]) = ($5 + [176])
	CALL $7(($5 + [256]), $4)
	*($5 + [416]) = $4
	$2 = *($4)
	*($5 + [256]) = $2
	$7 = *($4 + [76])
	*($5 + [440]) = $7
	$9 = ($5 + [204])
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)*(($5 + [208]))) ){ goto $label$21 }
	*($8 + [8]) = $2
	*($8 + [16]) = $7
	*($5 + [416]) = [0]
	*($8) = $4
	*($9) = ($8 + [24])
	$8 = *($5 + [416])
	*($5 + [416]) = [0]
	if ( $8 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	CALL eosio_assert(*($8 + [80]), [8881])
	CALL eosio_assert(((int_32)*($8 + [81]) ^ (int_32)[1]), [8905])
	CALL eosio_assert(((uint_64)$1 <= (uint_64)((int_64)*($9 + [64]) + (int_64)604800000000)), [8921])
	$12 = *(($3 + [8]))
	$1 = *($0)
	$13 = *($3)
	CALL eosio_assert($7, [10788])
	CALL eosio_assert(((int_32)*($8 + [152]) == (int_32)($5 + [136])), [10823])
	CALL eosio_assert(((int_64)*($5 + [136]) == (int_64)CALL $fimport$3()), [10869])
	$4 = ($8 + [56])
	*($5 + [440]) = *($4)
	$2 = *($8)
	CALL eosio_assert(((int_64)$12 == (int_64)*(($8 + [96]))), [10370])
	$12 = ((int_64)$13 + (int_64)*($8 + [88]))
	*($8 + [88]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [10413])
	CALL eosio_assert(((int_64)*($8 + [88]) < (int_64)4611686018427387904), [10432])
	CALL eosio_assert(((int_64)$2 == (int_64)*($8)), [10920])
	*($5 + [48]) = (($5 + [256]) + [147])
	*($5 + [44]) = ($5 + [256])
	*($5 + [40]) = ($5 + [256])
	*($5 + [416]) = ($5 + [40])
	*($5 + [452]) = ($8 + [8])
	*($5 + [448]) = $8
	*($5 + [456]) = ($8 + [16])
	*($5 + [460]) = ($8 + [24])
	*($5 + [464]) = ($8 + [40])
	*($5 + [468]) = ($8 + [48])
	*($5 + [472]) = $4
	*($5 + [476]) = ($8 + [64])
	*($5 + [480]) = ($8 + [72])
	*($5 + [484]) = ($8 + [80])
	*($5 + [488]) = ($8 + [81])
	*($5 + [492]) = ($8 + [82])
	*($5 + [496]) = ($8 + [88])
	*($5 + [500]) = ($8 + [104])
	*($5 + [504]) = ($8 + [120])
	*($5 + [508]) = ($8 + [136])
	CALL $6(($5 + [448]), ($5 + [416]))
	CALL db_update_i64(*($8 + [156]), $1, ($5 + [256]), [147])
	$7 = (($5 + [136]) + [16])
	if ( (uint_64)($2 <= *($7)) ){ goto $label$26 }
	*($7) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$26
	*($5 + [448]) = *($4)
	if ( (CALL $89(($5 + [440]), ($5 + [448]), [8]) == 0) ){ goto $label$10 }
	$8 = ($8 + [160])
	$4 = *($8)
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$27 }
	$4 = CALL db_idx64_find_primary(*($5 + [136]), *(($5 + [144])), (int_64)6820310642650513408, ($5 + [416]), $2)
	*($8) = $4
	
.LABEL $label$27
	CALL db_idx64_update($4, $1, ($5 + [448]))
	$4 = [1]
	if ( ((*($6 + [40]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$21
	CALL $8(($5 + [200]), ($5 + [416]), ($5 + [256]), ($5 + [440]))
	$8 = *($5 + [416])
	*($5 + [416]) = [0]
	if ( ($8 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	if ( ((*($8 + [56]) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($8 + [64])))
	
.LABEL $label$28
	if ( ((*($8 + [24]) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($8 + [32])))
	
.LABEL $label$29
	CALL _ZdlPv($8)
	
.LABEL $label$19
	$2 = *($0)
	*($5 + [448]) = [8850]
	*($5 + [452]) = CALL $90([8850])
	*($5 + [32]) = *($5 + [448])
	*($5 + [48]) = *(CALL $2(($5 + [256]), ($5 + [32])))
	*($5 + [40]) = $2
	*($5 + [448]) = [8857]
	*($5 + [452]) = CALL $90([8857])
	*($5 + [24]) = *($5 + [448])
	$2 = *(CALL $2(($5 + [256]), ($5 + [24])))
	$9 = ($3 + [8])
	*((($5 + [256]) + [16])) = *($9)
	$10 = ($6 + [8])
	*($5 + [256]) = *($10)
	*($5 + [264]) = *($3)
	$8 = CALL $9(($5 + [448]), ($5 + [40]), (int_64)6138663757350325536, $2, ($5 + [256]))
	CALL $10(($5 + [256]), $8)
	$7 = *($5 + [256])
	CALL send_inline($7, (*($5 + [260]) - $7))
	$7 = *($5 + [256])
	if ( ($7 == 0) ){ goto $label$30 }
	*($5 + [260]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$30
	$2 = *($0)
	*($5 + [40]) = [8850]
	*($5 + [44]) = CALL $90([8850])
	*($5 + [16]) = *($5 + [40])
	$1 = *(CALL $2(($5 + [256]), ($5 + [16])))
	$12 = *($0)
	*($5 + [40]) = [8868]
	*($5 + [44]) = CALL $90([8868])
	*($5 + [8]) = *($5 + [40])
	$13 = *(CALL $2(($5 + [256]), ($5 + [8])))
	*($5 + [256]) = *($10)
	*($5 + [264]) = *($4)
	*($5 + [272]) = *(($6 + [16]))
	$7 = CALL $78((($5 + [256]) + [24]), ($6 + [40]))
	*(($5 + [304])) = *($9)
	*($5 + [296]) = *($3)
	*($5 + [312]) = *($6 + [24])
	$3 = CALL $78(($5 + [316]), ($6 + [28]))
	*(($0 = (($5 + [40]) + [24]))) = [0]
	*($5 + [48]) = $13
	*($5 + [40]) = $12
	*($5 + [56]) = (int_64)0
	*(($4 = CALL _Znwj([16]))) = $2
	*($4 + [8]) = $1
	*(($5 + [76])) = [0]
	$9 = ($4 + [16])
	*($0) = $9
	*(($5 + [60])) = $9
	*($5 + [56]) = $4
	*($5 + [68 align=4]) = (int_64)0
	$4 = *($7)
	$7 = ( *((($5 + [256]) + [28])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [41])
	$2 = (CASTING uint_64)(uint_32 $7)
	$0 = (($5 + [40]) + [28])
	
.LOOP $label$31:
	$4 = ($4 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$31 }
	$7 = *($3)
	$7 = ( *(($5 + [320])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$4 = ($7 + $4)
	$2 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$32:
	$4 = ($4 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$32 }
	if ( ($4 == 0) ){ goto $label$34 }
	CALL $11($0, $4)
	$7 = *(($5 + [72]))
	$4 = *(($5 + [68]))
	goto $label$33 
	
.LABEL $label$34
	$7 = [0]
	$4 = [0]
	
.LABEL $label$33
	*($5 + [420]) = $4
	*($5 + [416]) = $4
	*($5 + [424]) = $7
	*($5 + [432]) = ($5 + [416])
	*($5 + [440]) = ($5 + [256])
	CALL $12(($5 + [440]), ($5 + [432]))
	if ( ((*($5 + [316]) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*(($5 + [324])))
	
.LABEL $label$35
	if ( ((*($5 + [280]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($5 + [288])))
	
.LABEL $label$36
	CALL $10(($5 + [256]), ($5 + [40]))
	$4 = *($5 + [256])
	CALL send_inline($4, (*($5 + [260]) - $4))
	$4 = *($5 + [256])
	if ( ($4 == 0) ){ goto $label$37 }
	*($5 + [260]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$37
	$4 = *($5 + [68])
	if ( ($4 == 0) ){ goto $label$38 }
	*(($5 + [72])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$38
	$4 = *($5 + [56])
	if ( ($4 == 0) ){ goto $label$39 }
	*(($5 + [60])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$39
	$4 = *($8 + [28])
	if ( ($4 == 0) ){ goto $label$40 }
	*(($8 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$40
	$4 = *($8 + [16])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($8 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = [1]
	if ( (*($6 + [40]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($6 + [28]) & $4) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*(($6 + [48])))
	if ( ((*($6 + [28]) & $4) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($6 + [36])))
	$7 = *($5 + [160])
	if ( ($7 == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$7 = *($5 + [160])
	if ( $7 ){ goto $label$4 }
	
.LABEL $label$5
	$7 = *($5 + [200])
	if ( $7 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = ($5 + [164])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$41 }
	
.LOOP $label$42:
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$43 }
	CALL _ZdlPv($8)
	
.LABEL $label$43
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$42 }
	$4 = *(($5 + [160]))
	*($3) = $7
	CALL _ZdlPv($4)
	$7 = *($5 + [200])
	if ( $7 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$41
	*($3) = $7
	CALL _ZdlPv($7)
	$7 = *($5 + [200])
	if ( ($7 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = ($5 + [204])
	$8 = *($3)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$45 }
	
.LOOP $label$46:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$47 }
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$48 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$48
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$49 }
	CALL _ZdlPv(*(($4 + [32])))
	
.LABEL $label$49
	CALL _ZdlPv($4)
	
.LABEL $label$47
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$46 }
	$4 = *(($5 + [200]))
	goto $label$44 
	
.LABEL $label$45
	$4 = $7
	
.LABEL $label$44
	*($3) = $7
	CALL _ZdlPv($4)
	
.LABEL $label$2
	CALL $13(($5 + [240]))
	
.LABEL $label$1
	$global$0 = ($5 + [512])
}

void .FUNC memory ()
{
}

int_32 .FUNC $1 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = (int_64)0
	*(($0 + [44])) = (int_64)0
	$4 = *($1)
	CALL eosio_assert(((int_32)( *($1 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ) != (int_32)[0]), [8192])
	$5 = ($1 + [1])
	$4 = *(( *($1 + [8]) ? $5 : (*($1) & [1]) ))
	*($0) = $4
	if ( ((int_32)$4 == (int_32)[115]) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[114]) ){ goto $label$5 }
	$4 = *($1)
	$6 = *(($1 + [4]))
	$7 = *(($1 + [8]))
	$8 = CALL $90([8233])
	$9 = [1]
	$4 = ($4 & [1])
	$6 = ( $6 ? uint_32($4 >> [1]) : $4 )
	if ( ($6 <= [2]) ){ goto $label$3 }
	$5 = ( $7 ? $5 : $4 )
	$4 = ($5 + [1])
	if ( ($8 == 0) ){ goto $label$4 }
	$6 = ($6 + [-1])
	
.LOOP $label$7:
	if ( (CALL $88([8233], *($4), $8) == 0) ){ goto $label$4 }
	$9 = [1]
	$4 = ($4 + [1])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$6
	$4 = *($1)
	$6 = ($1 + [4])
	CALL eosio_assert(((uint_32)( *($6) ? uint_32($4 >> [1]) : ($4 & [1]) ) > (uint_32)[1]), [8346])
	$4 = *($1)
	$9 = *($6)
	$7 = ($1 + [8])
	$10 = *($7)
	$8 = CALL $90([8233])
	$6 = [-1]
	$4 = ($4 & [1])
	$9 = ( $9 ? uint_32($4 >> [1]) : $4 )
	if ( ($9 <= [2]) ){ goto $label$1 }
	$10 = ( $10 ? $5 : $4 )
	$4 = ($10 + [1])
	if ( ($8 == 0) ){ goto $label$2 }
	$9 = ($9 + [-1])
	
.LOOP $label$8:
	if ( (CALL $88([8233], *($4), $8) == 0) ){ goto $label$2 }
	$6 = [-1]
	$4 = ($4 + [1])
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$4 == (int_32)[112]), [8636])
	$global$0 = ($3 + [48])
	return $0
	
.LABEL $label$4
	$9 = ((int_32)($4 - $5) == (int_32)[-1])
	
.LABEL $label$3
	CALL eosio_assert($9, [8330])
	$1 = CALL $79(($3 + [32]), $1, [1], [-1], $1)
	*($0 + [8]) = (CASTING int_64)(int_32 CALL $87(( *($1 + [8]) ? ($1 + [1]) : (*($3 + [32]) & [1]) )))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($1 + [8])))
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $0
	
.LABEL $label$2
	$6 = ($4 - $10)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[-1]), [8379])
	CALL eosio_assert(((int_32)*((( *($7) ? $5 : (*($1) & [1]) ) + $6)) == (int_32)[45]), [8330])
	$4 = ($6 + [-1])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8409])
	$4 = CALL $79(($3 + [32]), $1, [1], $4, $1)
	*($0 + [8]) = (CASTING int_64)(int_32 CALL $87(( *($4 + [8]) ? ($4 + [1]) : (*($3 + [32]) & [1]) )))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$10
	*(($8 = ($0 + [16]))) = $2
	$4 = ($6 + [1])
	$9 = CALL $83($1, [45], $4)
	CALL eosio_assert(((int_32)$9 != (int_32)[-1]), [8423])
	$6 = ($9 - $4)
	if ( ($6 == 0) ){ goto $label$11 }
	$6 = *($4)
	$7 = ($6 & [1])
	$4 = CALL $79(($3 + [8]), $1, $4, $6, $1)
	*($3 + [24]) = ( *($4 + [8]) ? ($4 + [1]) : $7 )
	*($3 + [28]) = ( *($4 + [4]) ? uint_32($6 >> [1]) : $7 )
	*($3) = *($3 + [24])
	*($8) = *(CALL $2(($3 + [32]), $3))
	if ( ((*($4) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$11
	$6 = ($0 + [28])
	$4 = ($9 + [1])
	$9 = CALL $83($1, [45], $4)
	CALL eosio_assert(((int_32)$9 != (int_32)[-1]), [8460])
	CALL eosio_assert(((int_32)($9 - $4) == (int_32)[1]), [8498])
	*($0 + [24]) = ((int_32)*((( *(($1 + [8])) ? $5 : (*($1) & [1]) ) + $4)) == (int_32)[121])
	$4 = ($9 + [1])
	$9 = CALL $83($1, [45], $4)
	CALL eosio_assert(((int_32)$9 != (int_32)[-1]), [8522])
	CALL $79(($3 + [32]), $1, $4, ($9 - $4), $1)
	if ( (*(($0 + [28])) & [1]) ){ goto $label$13 }
	*($6) = [0]
	goto $label$12 
	
.LABEL $label$13
	*(*(($0 + [36]))) = [0]
	*(($0 + [32])) = [0]
	
.LABEL $label$12
	$4 = ($0 + [40])
	CALL $82($6, [0])
	*($6) = *($3 + [32])
	*(($6 + [8])) = *((($3 + [32]) + [8]))
	$6 = *($6)
	if ( ($6 & [1]) ){ goto $label$15 }
	$6 = uint_32($6 >> [1])
	goto $label$14 
	
.LABEL $label$15
	$6 = *(($0 + [32]))
	
.LABEL $label$14
	CALL eosio_assert(($6 <= [13]), [8553])
	CALL $79(($3 + [32]), $1, ($9 + [1]), [-1], $1)
	if ( (*($4) & [1]) ){ goto $label$17 }
	*($4) = [0]
	goto $label$16 
	
.LABEL $label$17
	*(*(($0 + [48]))) = [0]
	*(($0 + [44])) = [0]
	
.LABEL $label$16
	CALL $82($4, [0])
	*($4) = *($3 + [32])
	*(($4 + [8])) = *((($3 + [32]) + [8]))
	$1 = *($4)
	if ( ($1 & [1]) ){ goto $label$19 }
	$1 = uint_32($1 >> [1])
	goto $label$18 
	
.LABEL $label$19
	$1 = *(($0 + [44]))
	
.LABEL $label$18
	CALL eosio_assert(($1 <= [57]), [8593])
	$global$0 = ($3 + [48])
	return $0
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5, int_64 $6, int_64 $7, int_64 $8, int_64 $9)
{
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	$10 = ($global$0 - [416])
	$global$0 = $10
	*($10 + [144]) = $6
	*($10 + [152]) = $5
	*($10 + [128]) = $2
	*($10 + [120]) = $7
	*($10 + [112]) = $8
	*($10 + [104]) = $9
	*($10 + [136]) = $1
	CALL require_auth((int_64)6138663757350325536)
	*((($10 + [64]) + [32])) = [0]
	*($10 + [72]) = (int_64)6138663757350325536
	*($10 + [64]) = (int_64)6138663757350325536
	*($10 + [80]) = (int_64)-1
	*($10 + [88]) = (int_64)0
	*((($10 + [24]) + [32])) = [0]
	*($10 + [40]) = (int_64)-1
	*($10 + [48]) = (int_64)0
	*($10 + [60]) = [0]
	$9 = *($0)
	*($10 + [24]) = $9
	*($10 + [32]) = $9
	$6 = CALL publication_time()
	$11 = [0]
	$12 = CALL db_find_i64((int_64)6138663757350325536, (int_64)6138663757350325536, (int_64)6820297015373594624, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $4(($10 + [64]), $12)
	CALL eosio_assert(((int_32)*($11 + [100]) == (int_32)($10 + [64])), [10705])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [8657])
	CALL eosio_assert(((int_64)*($11 + [48]) == (int_64)*($0)), [8986])
	$12 = *($11 + [32])
	if ( ($12 & [1]) ){ goto $label$3 }
	$12 = uint_32($12 >> [1])
	$13 = (($11 + [32]) + [1])
	goto $label$2 
	
.LABEL $label$3
	$12 = *(($11 + [36]))
	$13 = *(($11 + [40]))
	
.LABEL $label$2
	*($10 + [20]) = $12
	*($10 + [16]) = $13
	*($10 + [8]) = *($10 + [16])
	CALL eosio_assert(((int_64)*(CALL $2(($10 + [160]), ($10 + [8]))) == (int_64)*($0)), [9028])
	CALL eosio_assert(((int_64)*(($11 + [80])) == (int_64)1397703940), [9068])
	CALL eosio_assert((int_64)(*($11 + [72]) == 0), [9098])
	$9 = *($10 + [136])
	CALL eosio_assert(((int_64)$9 != (int_64)0), [9132])
	$7 = *($3 + [8])
	$14 = [0]
	$13 = [0]
	$5 = *($3)
	if ( ((uint_64)((int_64)$5 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$4 }
	$1 = (uint_64)$7 >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$1 = $8
	$13 = [1]
	$15 = $12
	$12 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$1 = $8
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$13 = ((int_32)$12 < (int_32)[6])
	$15 = ($12 + [1])
	$12 = $15
	if ( $13 ){ goto $label$8 }
	$13 = [1]
	$12 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$13 = [0]
	
.LABEL $label$4
	CALL eosio_assert($13, [9148])
	CALL eosio_assert(((int_64)$7 == (int_64)1397703940), [9176])
	CALL eosio_assert(((int_64)$5 > (int_64)0), [9214])
	$2 = *($4 + [8])
	$16 = *($4)
	if ( ((uint_64)((int_64)$16 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$1 = $8
	$14 = [1]
	$13 = $12
	$12 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$1 = $8
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$13 = ((int_32)$12 < (int_32)[6])
	$15 = ($12 + [1])
	$12 = $15
	if ( $13 ){ goto $label$13 }
	$14 = [1]
	$12 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$14 = [0]
	
.LABEL $label$9
	CALL eosio_assert($14, [9250])
	CALL eosio_assert(((int_64)$2 == (int_64)1397703940), [9270])
	CALL eosio_assert(((int_64)$2 == (int_64)$7), [10311])
	CALL eosio_assert(((int_64)$16 >= (int_64)$5), [9300])
	CALL eosio_assert((uint_64)(*($10 + [120]) <= *($11 + [56])), [9342])
	CALL eosio_assert((uint_64)($6 <= *($11 + [56])), [9380])
	CALL eosio_assert((uint_64)(*($10 + [112]) <= (int_64)10001), [9417])
	CALL eosio_assert([1], [9469])
	$13 = *(($10 + [52]))
	$11 = *(($10 + [48]))
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$15 }
	
.LOOP $label$17:
	$12 = ($13 + [-24])
	$15 = *($12)
	if ( ((int_64)*($15) == (int_64)$9) ){ goto $label$16 }
	$13 = $12
	if ( ((int_32)$11 != (int_32)$12) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$15 }
	CALL eosio_assert(((int_32)*($15 + [152]) == (int_32)($10 + [24])), [10705])
	goto $label$14 
	
.LABEL $label$15
	$15 = [0]
	$12 = CALL db_find_i64(*($10 + [24]), *(($10 + [32])), (int_64)6820310642650513408, $9)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$14 }
	$15 = CALL $5(($10 + [24]), $12)
	CALL eosio_assert(((int_32)*($15 + [152]) == (int_32)($10 + [24])), [10705])
	
.LABEL $label$14
	CALL eosio_assert(($15 == 0), [9516])
	$1 = *($0)
	*($10 + [168]) = $3
	*($10 + [192]) = $4
	*($10 + [164]) = ($10 + [128])
	*($10 + [160]) = ($10 + [136])
	*($10 + [172]) = ($10 + [152])
	*($10 + [176]) = ($10 + [144])
	*($10 + [180]) = ($10 + [120])
	*($10 + [184]) = ($10 + [112])
	*($10 + [188]) = ($10 + [104])
	*($10 + [320]) = $1
	CALL eosio_assert(((int_64)*($10 + [24]) == (int_64)CALL $fimport$3()), [10979])
	*($10 + [356]) = ($10 + [160])
	*($10 + [352]) = ($10 + [24])
	*($10 + [360]) = ($10 + [320])
	*(($12 = CALL _Znwj([168])) + [32]) = (int_64)0
	*($12 + [24]) = (int_64)0
	*($12 + [40]) = (int_64)0
	*($12 + [48]) = (int_64)0
	*($12 + [88]) = (int_64)0
	*($12 + [96]) = (int_64)0
	*($12 + [104]) = (int_64)0
	*($12 + [112]) = (int_64)0
	*($12 + [120]) = (int_64)0
	*($12 + [128]) = (int_64)0
	*($12 + [136]) = (int_64)0
	*($12 + [144]) = (int_64)0
	*($12 + [152]) = ($10 + [24])
	CALL $15(($10 + [352]), $12)
	*($10 + [344]) = $12
	$1 = *($12)
	*($10 + [352]) = $1
	$15 = *($12 + [156])
	*($10 + [336]) = $15
	$11 = ($10 + [52])
	$13 = *($11)
	if ( ((uint_32)$13 >= (uint_32)*(($10 + [56]))) ){ goto $label$20 }
	*($13 + [8]) = $1
	*($13 + [16]) = $15
	*($10 + [344]) = [0]
	*($13) = $12
	*($11) = ($13 + [24])
	$12 = *($10 + [344])
	*($10 + [344]) = [0]
	if ( $12 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL $16(($10 + [48]), ($10 + [344]), ($10 + [352]), ($10 + [336]))
	$12 = *($10 + [344])
	*($10 + [344]) = [0]
	if ( ($12 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv($12)
	
.LABEL $label$18
	$1 = *($10 + [128])
	if ( (int_64)($1 == 0) ){ goto $label$21 }
	$15 = *(($10 + [52]))
	$11 = *(($10 + [48]))
	if ( ((int_32)$11 == (int_32)$15) ){ goto $label$23 }
	
.LOOP $label$25:
	$13 = ($15 + [-24])
	$12 = *($13)
	if ( ((int_64)*($12) == (int_64)$1) ){ goto $label$24 }
	$15 = $13
	if ( ((int_32)$11 != (int_32)$13) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	if ( ((int_32)$11 == (int_32)$15) ){ goto $label$23 }
	CALL eosio_assert(((int_32)*($12 + [152]) == (int_32)($10 + [24])), [10705])
	goto $label$22 
	
.LABEL $label$23
	$12 = [0]
	$13 = CALL db_find_i64(*($10 + [24]), *(($10 + [32])), (int_64)6820310642650513408, $1)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$22 }
	$12 = CALL $5(($10 + [24]), $13)
	CALL eosio_assert(((int_32)*($12 + [152]) == (int_32)($10 + [24])), [10705])
	
.LABEL $label$22
	$13 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($13, [9536])
	CALL eosio_assert((int_64)(*($12 + [16]) == 0), [9565])
	CALL eosio_assert(((int_32)*($12 + [81]) ^ (int_32)[1]), [9605])
	$9 = *($0)
	$1 = *($10 + [136])
	CALL eosio_assert($13, [10788])
	CALL eosio_assert(((int_32)*($12 + [152]) == (int_32)($10 + [24])), [10823])
	CALL eosio_assert(((int_64)*($10 + [24]) == (int_64)CALL $fimport$3()), [10869])
	*($12 + [16]) = $1
	$13 = ($12 + [56])
	*($10 + [336]) = *($13)
	$1 = *($12)
	CALL eosio_assert([1], [10920])
	*($10 + [328]) = (($10 + [160]) + [147])
	*($10 + [324]) = ($10 + [160])
	*($10 + [320]) = ($10 + [160])
	*($10 + [344]) = ($10 + [320])
	*($10 + [356]) = ($12 + [8])
	*($10 + [352]) = $12
	*($10 + [360]) = ($12 + [16])
	*($10 + [364]) = ($12 + [24])
	*($10 + [368]) = ($12 + [40])
	*($10 + [372]) = ($12 + [48])
	*($10 + [376]) = $13
	*($10 + [380]) = ($12 + [64])
	*($10 + [384]) = ($12 + [72])
	*($10 + [388]) = ($12 + [80])
	*($10 + [392]) = ($12 + [81])
	*($10 + [396]) = ($12 + [82])
	*($10 + [400]) = ($12 + [88])
	*($10 + [404]) = ($12 + [104])
	*($10 + [408]) = ($12 + [120])
	*($10 + [412]) = ($12 + [136])
	CALL $6(($10 + [352]), ($10 + [344]))
	CALL db_update_i64(*($12 + [156]), $9, ($10 + [160]), [147])
	$15 = (($10 + [24]) + [16])
	if ( (uint_64)($1 <= *($15)) ){ goto $label$26 }
	*($15) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$26
	*($10 + [352]) = *($13)
	if ( (CALL $89(($10 + [336]), ($10 + [352]), [8]) == 0) ){ goto $label$21 }
	$13 = ($12 + [160])
	$12 = *($13)
	if ( ((int_32)$12 > (int_32)[-1]) ){ goto $label$27 }
	$12 = CALL db_idx64_find_primary(*($10 + [24]), *(($10 + [32])), (int_64)6820310642650513408, ($10 + [344]), $1)
	*($13) = $12
	
.LABEL $label$27
	CALL db_idx64_update($12, $9, ($10 + [352]))
	
.LABEL $label$21
	$15 = *($10 + [48])
	if ( ($15 == 0) ){ goto $label$28 }
	$11 = ($10 + [52])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$15) ){ goto $label$30 }
	
.LOOP $label$31:
	$12 = ($12 + [-24])
	$13 = *($12)
	*($12) = [0]
	if ( ($13 == 0) ){ goto $label$32 }
	CALL _ZdlPv($13)
	
.LABEL $label$32
	if ( ((int_32)$15 != (int_32)$12) ){ goto $label$31 }
	$12 = *(($10 + [48]))
	goto $label$29 
	
.LABEL $label$30
	$12 = $15
	
.LABEL $label$29
	*($11) = $15
	CALL _ZdlPv($12)
	
.LABEL $label$28
	CALL $13(($10 + [88]))
	$global$0 = ($10 + [416])
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [16]) = (int_64)0
	$5 = *($0)
	$6 = *($4 + [8])
	*(($1 + [32])) = *(($6 + [8]))
	*($1 + [24]) = *($6)
	*($1 + [40]) = *(*($4 + [12]))
	*($1 + [48]) = *(*($4 + [16]))
	*($1 + [56]) = *(*($4 + [20]))
	*($1 + [64]) = *(*($4 + [24]))
	*($1 + [72]) = *(*($4 + [28]))
	$6 = [0]
	*($1 + [80]) = [0]
	*($1 + [81]) = [0]
	*($1 + [82]) = [0]
	CALL eosio_assert([1], [10520])
	$7 = ($1 + [82])
	$8 = ($1 + [81])
	$9 = ($1 + [80])
	$10 = ($1 + [72])
	$11 = ($1 + [64])
	$12 = ($1 + [56])
	$13 = ($1 + [24])
	$14 = ($1 + [16])
	$15 = ($1 + [8])
	$16 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$17 = (uint_64)$16 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$16 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$16 = $17
	$18 = [1]
	$19 = $6
	$6 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$16 = $17
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$16 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8)
	$18 = ((int_32)$6 < (int_32)[6])
	$19 = ($6 + [1])
	$6 = $19
	if ( $18 ){ goto $label$5 }
	$18 = [1]
	$6 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$18 = [0]
	
.LABEL $label$1
	CALL eosio_assert($18, [10569])
	*(($1 + [96])) = (int_64)1397703940
	*($1 + [88]) = (int_64)0
	CALL eosio_assert([1], [10520])
	$16 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$17 = (uint_64)$16 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$16 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$16 = $17
	$18 = [1]
	$19 = $6
	$6 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$16 = $17
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$16 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8)
	$18 = ((int_32)$6 < (int_32)[6])
	$19 = ($6 + [1])
	$6 = $19
	if ( $18 ){ goto $label$10 }
	$18 = [1]
	$6 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$18 = [0]
	
.LABEL $label$6
	CALL eosio_assert($18, [10569])
	*(($1 + [112])) = (int_64)1397703940
	*($1 + [104]) = (int_64)0
	$6 = *($4 + [32])
	*($1 + [120]) = *($6)
	*(($1 + [128])) = *(($6 + [8]))
	CALL eosio_assert([1], [10520])
	$4 = ($1 + [120])
	$16 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$17 = (uint_64)$16 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$16 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$16 = $17
	$18 = [1]
	$19 = $6
	$6 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$16 = $17
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$16 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8)
	$18 = ((int_32)$6 < (int_32)[6])
	$19 = ($6 + [1])
	$6 = $19
	if ( $18 ){ goto $label$15 }
	$18 = [1]
	$6 = ($19 + [1])
	if ( ((int_32)$19 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$18 = [0]
	
.LABEL $label$11
	CALL eosio_assert($18, [10569])
	*(($1 + [144])) = (int_64)1397703940
	*($1 + [136]) = (int_64)0
	$18 = $2
	$6 = ($18 + [-160])
	$global$0 = $6
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($18 + [-13])
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $15
	*($3 + [32]) = $1
	*($3 + [40]) = $14
	*($3 + [44]) = $13
	*($3 + [48]) = ($1 + [40])
	*($3 + [52]) = ($1 + [48])
	*($3 + [56]) = $12
	*($3 + [60]) = $11
	*($3 + [64]) = $10
	*($3 + [68]) = $9
	*($3 + [72]) = $8
	*($3 + [76]) = $7
	*($3 + [80]) = ($1 + [88])
	*($3 + [84]) = ($1 + [104])
	*($3 + [88]) = $4
	*($3 + [92]) = ($1 + [136])
	CALL $6(($3 + [32]), ($3 + [24]))
	$16 = *($1)
	*($1 + [156]) = CALL db_store_i64(*($5 + [8]), (int_64)6820310642650513408, *(*($0 + [8])), $16, $6, [147])
	if ( (uint_64)($16 <= *($5 + [16])) ){ goto $label$16 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$16 + (int_64)1) : ((uint_64)$16 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	$16 = *(($5 + [8]))
	$17 = *(*(($0 + [8])))
	$20 = *($1)
	*($3 + [32]) = *(($1 + [56]))
	*($1 + [160]) = CALL db_idx64_store($16, (int_64)6820310642650513408, $17, $20, ($3 + [32]))
	$global$0 = ($3 + [96])
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $84($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $17 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [304])
	$global$0 = $2
	CALL require_auth((int_64)6138663757350325536)
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	*($2 + [44]) = [0]
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)6820310642650513408, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $5(($2 + [8]), $5)
	CALL eosio_assert(((int_32)*($4 + [152]) == (int_32)($2 + [8])), [10705])
	
.LABEL $label$1
	$6 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($6, [9640])
	CALL eosio_assert((int_64)(*($4 + [104]) == 0), [9658])
	$3 = *($4 + [8])
	if ( (int_64)($3 == 0) ){ goto $label$2 }
	$8 = *(($2 + [36]))
	$7 = *(($2 + [32]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	
.LOOP $label$6:
	$9 = ($8 + [-24])
	$5 = *($9)
	if ( ((int_64)*($5) == (int_64)$3) ){ goto $label$5 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($5 + [152]) == (int_32)($2 + [8])), [10705])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$9 = CALL db_find_i64(*($2 + [8]), *(($2 + [16])), (int_64)6820310642650513408, $3)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $5(($2 + [8]), $9)
	CALL eosio_assert(((int_32)*($5 + [152]) == (int_32)($2 + [8])), [10705])
	
.LABEL $label$3
	$1 = *($0)
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [10788])
	CALL eosio_assert(((int_32)*($5 + [152]) == (int_32)($2 + [8])), [10823])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$3()), [10869])
	*($5 + [16]) = (int_64)0
	$9 = ($5 + [56])
	*($2 + [224]) = *($9)
	$3 = *($5)
	CALL eosio_assert([1], [10920])
	*($2 + [216]) = (($2 + [48]) + [147])
	*($2 + [212]) = ($2 + [48])
	*($2 + [208]) = ($2 + [48])
	*($2 + [232]) = ($2 + [208])
	*($2 + [244]) = ($5 + [8])
	*($2 + [240]) = $5
	*($2 + [248]) = ($5 + [16])
	*($2 + [252]) = ($5 + [24])
	*($2 + [256]) = ($5 + [40])
	*($2 + [260]) = ($5 + [48])
	*($2 + [264]) = $9
	*($2 + [268]) = ($5 + [64])
	*($2 + [272]) = ($5 + [72])
	*($2 + [276]) = ($5 + [80])
	*($2 + [280]) = ($5 + [81])
	*($2 + [284]) = ($5 + [82])
	*($2 + [288]) = ($5 + [88])
	*($2 + [292]) = ($5 + [104])
	*($2 + [296]) = ($5 + [120])
	*($2 + [300]) = ($5 + [136])
	CALL $6(($2 + [240]), ($2 + [232]))
	CALL db_update_i64(*($5 + [156]), $1, ($2 + [48]), [147])
	$8 = (($2 + [8]) + [16])
	if ( (uint_64)($3 <= *($8)) ){ goto $label$7 }
	*($8) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($2 + [240]) = *($9)
	if ( (CALL $89(($2 + [224]), ($2 + [240]), [8]) == 0) ){ goto $label$2 }
	$9 = ($5 + [160])
	$5 = *($9)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$8 }
	$5 = CALL db_idx64_find_primary(*($2 + [8]), *(($2 + [16])), (int_64)6820310642650513408, ($2 + [232]), $3)
	*($9) = $5
	
.LABEL $label$8
	CALL db_idx64_update($5, $1, ($2 + [240]))
	
.LABEL $label$2
	CALL eosio_assert($6, [11184])
	CALL eosio_assert($6, [11218])
	$5 = CALL db_next_i64(*($4 + [156]), ($2 + [48]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	CALL $5(($2 + [8]), $5)
	
.LABEL $label$9
	CALL $18(($2 + [8]), $4)
	$8 = *($2 + [32])
	if ( ($8 == 0) ){ goto $label$10 }
	$7 = ($2 + [36])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$14 }
	CALL _ZdlPv($9)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$13 }
	$5 = *(($2 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $8
	
.LABEL $label$11
	*($7) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$global$0 = ($2 + [304])
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $11($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [10450])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [10450])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $52(CALL $51($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $84($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($0 + [4]), ($4 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($0 + [4]), ($4 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $63(*($1), ($4 + [24]))
	*($2 + [8]) = $4
	CALL $64(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $13 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = *($3 + [88])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($3 + [92])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [40])))
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($3 + [28])))
	if ( (*($3 + [8]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$7
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $96($0)
	
.LABEL $label$1
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [11248])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [11293])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [11343])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [156]))
	$6 = *(($1 + [160]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)6820310642650513408, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $19 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [176])
	$global$0 = $4
	*((($4 + [136]) + [32])) = [0]
	*($4 + [144]) = (int_64)6138663757350325536
	*($4 + [136]) = (int_64)6138663757350325536
	*($4 + [152]) = (int_64)-1
	*($4 + [160]) = (int_64)0
	*((($4 + [96]) + [32])) = [0]
	*($4 + [112]) = (int_64)-1
	*($4 + [120]) = (int_64)0
	*($4 + [132]) = [0]
	$5 = *($0)
	*($4 + [96]) = $5
	*($4 + [104]) = $5
	$6 = [0]
	$7 = CALL db_find_i64((int_64)6138663757350325536, (int_64)6138663757350325536, (int_64)6820297015373594624, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $4(($4 + [136]), $7)
	CALL eosio_assert(((int_32)*($6 + [100]) == (int_32)($4 + [136])), [10705])
	$9 = *(($4 + [124]))
	$8 = *(($4 + [120]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($9 + [-24])
	$10 = *($7)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$3 }
	$9 = $7
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($10 + [152]) == (int_32)($4 + [96])), [10705])
	goto $label$1 
	
.LABEL $label$2
	$7 = CALL db_find_i64(*($4 + [96]), *(($4 + [104])), (int_64)6820310642650513408, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$10 = CALL $5(($4 + [96]), $7)
	CALL eosio_assert(((int_32)*($10 + [152]) == (int_32)($4 + [96])), [10705])
	goto $label$1 
	
.LABEL $label$5
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8657])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [9640])
	CALL eosio_assert(((uint_64)*($6 + [64]) > (uint_64)$3), [9698])
	CALL require_auth(*($10 + [40]))
	$5 = *($0)
	*($4 + [16]) = [8850]
	*($4 + [20]) = CALL $90([8850])
	*($4 + [8]) = *($4 + [16])
	*($4 + [48]) = *(CALL $2(($4 + [56]), ($4 + [8])))
	*($4 + [40]) = $5
	*($4 + [16]) = [9747]
	*($4 + [20]) = CALL $90([9747])
	*($4) = *($4 + [16])
	$5 = *(CALL $2(($4 + [56]), $4))
	*($4 + [24]) = $2
	*($4 + [16]) = $1
	*($4 + [32]) = $3
	$7 = CALL $20(($4 + [56]), ($4 + [40]), (int_64)6138663757350325536, $5, ($4 + [16]))
	CALL $10(($4 + [16]), $7)
	$9 = *($4 + [16])
	CALL send_inline($9, (*($4 + [20]) - $9))
	$9 = *($4 + [16])
	if ( ($9 == 0) ){ goto $label$6 }
	*($4 + [20]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$6
	$9 = *($7 + [28])
	if ( ($9 == 0) ){ goto $label$7 }
	*(($7 + [32])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$7
	$9 = *($7 + [16])
	if ( ($9 == 0) ){ goto $label$8 }
	*(($7 + [20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$8
	$10 = *($4 + [120])
	if ( ($10 == 0) ){ goto $label$9 }
	$8 = ($4 + [124])
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = ($7 + [-24])
	$9 = *($7)
	*($7) = [0]
	if ( ($9 == 0) ){ goto $label$13 }
	CALL _ZdlPv($9)
	
.LABEL $label$13
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$12 }
	$7 = *(($4 + [120]))
	goto $label$10 
	
.LABEL $label$11
	$7 = $10
	
.LABEL $label$10
	*($8) = $10
	CALL _ZdlPv($7)
	
.LABEL $label$9
	CALL $13(($4 + [160]))
	$global$0 = ($4 + [176])
}

int_32 .FUNC $58 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = *($1 + [88])
	if ( ($4 == 0) ){ goto $label$4 }
	*(($1 + [92])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($1 + [40])))
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($1 + [28])))
	if ( (*($1 + [8]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$5
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10779])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [10779])
	CALL memcpy(($2 + [8]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [8]) != (int_32)[0])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [10779])
	CALL memcpy(($2 + [8]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [8]) != (int_32)[0])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [10779])
	CALL memcpy(($2 + [8]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [8]) != (int_32)[0])
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10779])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [52])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10779])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [56])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10779])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [60])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($4, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [10779])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($4 + [8]) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [160])
	$global$0 = $2
	$3 = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$6 = CALL $78(($2 + [80]), ($1 + [24]))
	*(($7 = (($2 + [64]) + [8]))) = *(($1 + [48]))
	*(($8 = (($2 + [48]) + [8]))) = *(($1 + [64]))
	*($2 + [64]) = *($1 + [40])
	*($2 + [48]) = *($1 + [56])
	$9 = *($1 + [72])
	$10 = *($1 + [80])
	$11 = *($1 + [88])
	$12 = *($1 + [96])
	$1 = CALL $78(($2 + [32]), ($1 + [104]))
	*((($2 + [112]) + [8])) = *($8)
	*((($2 + [96]) + [8])) = *($7)
	*($2 + [112]) = *($2 + [48])
	*($2 + [96]) = *($2 + [64])
	$0 = *($0 + [4])
	$8 = *($0 + [4])
	$7 = (*($0) + int_32($8 >> [1]))
	$0 = *($0)
	if ( (($8 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	$13 = *((($2 + [96]) + [8]))
	*((($2 + [144]) + [8])) = $13
	$14 = *((($2 + [112]) + [8]))
	*((($2 + [128]) + [8])) = $14
	*((($2 + [16]) + [8])) = $13
	*(($2 + [8])) = $14
	$13 = *($2 + [96])
	*($2 + [144]) = $13
	$14 = *($2 + [112])
	*($2 + [128]) = $14
	*($2 + [16]) = $13
	*($2) = $14
	CALL void $7((int_32 $5), (int_64 $4), (int_64 $3), (int_64 $6), (int_32 ($2 + [16])), (int_32 $2), (int_32 $9), (int_64 $10), (int_64 ((int_32)($11 & [255]) != (int_32)[0])), (int_32 $12), (int_64 $1), (int_32 $0))
	if ( (*($1) & [1]) ){ goto $label$4 }
	if ( (*($6) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($2 + [160])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [160])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10450])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10450])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10450])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10450])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [10450])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $46(*($1), *($0 + [4]))
	CALL $46(*($1), *($0 + [8]))
	CALL $46(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10779])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $55(*($1), *($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $84($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $58(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	CALL require_auth(*($0))
	CALL require_recipient($3)
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10784])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $11($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [10779])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[24])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$3 }
	$3 = [178956970]
	$2 = ((int_32)($2 - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj(((int_32)$3 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = (*($0) + [24])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $84($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$3 * (int_32)[24]))
	$5 = ($2 + ((int_32)$5 * (int_32)[24]))
	$3 = $5
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = ($3 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$6 = ($2 + ((int_32)$6 * (int_32)[24]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $35 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7, int_64 $8, int_32 $9, int_64 $10, int_32 $11)
{
	CALL require_auth(*($0))
	CALL require_recipient($3)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $63(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [11248])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [11293])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [11343])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$10
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [32])))
	
.LABEL $label$11
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$13 }
	if ( ((*($6 + [56]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($6 + [64])))
	
.LABEL $label$14
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($6 + [32])))
	
.LABEL $label$15
	CALL _ZdlPv($6)
	
.LABEL $label$13
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [76]))
	$6 = *(($1 + [80]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$17 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4138943993976477392, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$16 }
	
.LABEL $label$17
	CALL db_idx64_remove($6)
	
.LABEL $label$16
	$6 = *(($1 + [84]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$19 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4138943993976477391, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$18 }
	
.LABEL $label$19
	CALL db_idx64_remove($6)
	
.LABEL $label$18
	$global$0 = ($2 + [16])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10784])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = ((int_32)($5 - $2) / (int_32)[24])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $57($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ((int_32)$7 * (int_32)[24]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$6 = *($7)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [10779])
	CALL memcpy($2, *($7), [8])
	$6 = (*($7) + [8])
	*($7) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [10779])
	CALL memcpy(($2 + [8]), *($7), [8])
	$6 = (*($7) + [8])
	*($7) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [10779])
	CALL memcpy(($2 + [16]), *($7), [8])
	$6 = (*($7) + [8])
	*($7) = $6
	$2 = ($2 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $21 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [112])
	$global$0 = $2
	*((($2 + [56]) + [32])) = [0]
	*($2 + [72]) = (int_64)-1
	*($2 + [80]) = (int_64)0
	*($2 + [92]) = [0]
	$3 = *($0)
	*($2 + [56]) = $3
	*($2 + [64]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)6820310642650513408, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $5(($2 + [56]), $5)
	CALL eosio_assert(((int_32)*($4 + [152]) == (int_32)($2 + [56])), [10705])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9640])
	CALL eosio_assert(((int_32)*($4 + [81]) ^ (int_32)[1]), [9754])
	CALL require_auth(*($4 + [40]))
	$3 = *($0)
	*($2 + [96]) = [8850]
	*($2 + [100]) = CALL $90([8850])
	*($2 + [8]) = *($2 + [96])
	$6 = *(CALL $2(($2 + [16]), ($2 + [8])))
	*($2 + [96]) = [9776]
	*($2 + [100]) = CALL $90([9776])
	*($2) = *($2 + [96])
	$7 = *(CALL $2(($2 + [16]), $2))
	*($2 + [16]) = (int_64)6138663757350325536
	*($2 + [96]) = $1
	*($2 + [24]) = $7
	*(($4 = CALL _Znwj([16]))) = $3
	*($4 + [8]) = $6
	*(($2 + [52])) = [0]
	$0 = ($4 + [16])
	*(($2 + [40])) = $0
	*(($2 + [36])) = $0
	*($2 + [32]) = $4
	*($2 + [44 align=4]) = (int_64)0
	CALL $11(($2 + [44]), [8])
	$4 = *($2 + [44])
	CALL eosio_assert(((int_32)(*((($2 + [16]) + [32])) - $4) > (int_32)[7]), [10450])
	CALL memcpy($4, ($2 + [96]), [8])
	CALL $10(($2 + [96]), ($2 + [16]))
	$4 = *($2 + [96])
	CALL send_inline($4, (*($2 + [100]) - $4))
	$4 = *($2 + [96])
	if ( ($4 == 0) ){ goto $label$2 }
	*($2 + [100]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$4 = *($2 + [44])
	if ( ($4 == 0) ){ goto $label$3 }
	*(($2 + [48])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$4 = *($2 + [32])
	if ( ($4 == 0) ){ goto $label$4 }
	*(($2 + [36])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$5 = *($2 + [80])
	if ( ($5 == 0) ){ goto $label$5 }
	$8 = ($2 + [84])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	CALL _ZdlPv($0)
	
.LABEL $label$9
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$8 }
	$4 = *(($2 + [80]))
	goto $label$6 
	
.LABEL $label$7
	$4 = $5
	
.LABEL $label$6
	*($8) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$global$0 = ($2 + [112])
}

int_32 .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$6 = CALL _Znwj([16])
	*($0 + [16]) = $6
	*(($7 = ($0 + [20]))) = $6
	$8 = ($6 + [16])
	*($5) = $8
	*(($6 + [8])) = *(($1 + [8]))
	*($6) = *($1)
	*($7) = $8
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	CALL $11(($0 + [28]), [24])
	$6 = *($0 + [28])
	$1 = (*(($0 + [32])) - $6)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [10450])
	CALL memcpy($6, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [10450])
	CALL memcpy(($6 + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [10450])
	CALL memcpy(($6 + [16]), ($4 + [16]), [8])
	return $0
}

void .FUNC $23 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [560])
	$global$0 = $2
	$3 = [0]
	*((($2 + [264]) + [32])) = [0]
	*($2 + [280]) = (int_64)-1
	*($2 + [288]) = (int_64)0
	*($2 + [300]) = [0]
	$4 = *($0)
	*($2 + [264]) = $4
	*($2 + [272]) = $4
	*((($2 + [224]) + [32])) = [0]
	*($2 + [232]) = $4
	*($2 + [224]) = $4
	*($2 + [240]) = (int_64)-1
	*($2 + [248]) = (int_64)0
	*($2 + [260]) = [0]
	*((($2 + [184]) + [32])) = [0]
	*($2 + [192]) = (int_64)6138663757350325536
	*($2 + [184]) = (int_64)6138663757350325536
	*($2 + [200]) = (int_64)-1
	*($2 + [208]) = (int_64)0
	$5 = CALL publication_time()
	$6 = CALL db_find_i64($4, $4, (int_64)-4138943993976477392, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$2 }
	$3 = CALL $24(($2 + [264]), $6)
	CALL eosio_assert(((int_32)*($3 + [72]) == (int_32)($2 + [264])), [10705])
	*($2 + [180]) = $3
	*($2 + [176]) = ($2 + [264])
	$7 = (($2 + [176]) | [4])
	goto $label$1 
	
.LABEL $label$2
	*($2 + [180]) = [0]
	*($2 + [176]) = ($2 + [264])
	$7 = (($2 + [176]) | [4])
	
.LABEL $label$1
	$8 = [0]
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9871])
	$4 = *(*($7) + [8])
	$6 = *(($2 + [212]))
	$9 = *(($2 + [208]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$6:
	$3 = ($6 + [-24])
	$10 = *($3)
	if ( ((int_64)*($10) == (int_64)$4) ){ goto $label$5 }
	$6 = $3
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($10 + [100]) == (int_32)($2 + [184])), [10705])
	$8 = $10
	goto $label$3 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($2 + [184]), *(($2 + [192])), (int_64)6820297015373594624, $4)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $4(($2 + [184]), $3)
	CALL eosio_assert(((int_32)*($8 + [100]) == (int_32)($2 + [184])), [10705])
	
.LABEL $label$3
	$4 = *(*($7) + [8])
	$6 = *(($2 + [252]))
	$9 = *(($2 + [248]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$10:
	$3 = ($6 + [-24])
	$10 = *($3)
	if ( ((int_64)*($10) == (int_64)$4) ){ goto $label$9 }
	$6 = $3
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($10 + [152]) == (int_32)($2 + [224])), [10705])
	*($2 + [172]) = $10
	*($2 + [168]) = ($2 + [224])
	goto $label$7 
	
.LABEL $label$8
	$3 = CALL db_find_i64(*($2 + [224]), *(($2 + [232])), (int_64)6820310642650513408, $4)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$11 }
	$3 = CALL $5(($2 + [224]), $3)
	CALL eosio_assert(((int_32)*($3 + [152]) == (int_32)($2 + [224])), [10705])
	*($2 + [172]) = $3
	*($2 + [168]) = ($2 + [224])
	goto $label$7 
	
.LABEL $label$11
	*($2 + [172]) = [0]
	*($2 + [168]) = ($2 + [224])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8657])
	CALL eosio_assert(((int_32)*($2 + [172]) != (int_32)[0]), [9640])
	CALL eosio_assert(*(*($2 + [172]) + [81]), [9899])
	$3 = *($2 + [172])
	$4 = *($3 + [88])
	$11 = *(($3 + [96]))
	CALL eosio_assert(((int_64)*(($3 + [144])) == (int_64)$11), [10589])
	$4 = (int_64)
	CALL __multi3(($2 + [96]), $4($4 - *($3 + [136]))), (int_64)$4 >> (int_64)63), (int_64)10000, (int_64)0)
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [10637])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [10659])
	$4 = *((($2 + [96]) + [8]))
	$12 = *($2 + [96])
	CALL eosio_assert(( (uint_64)($12 <= (int_64)4611686018427387904) ? ((int_64)$4 < (int_64)0) : (int_64)($4 == 0) ), [10471])
	CALL eosio_assert(( ((uint_64)$12 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$4 > (int_64)-1) : ((int_64)$4 == (int_64)-1) ), [10495])
	$3 = *($2 + [172])
	CALL eosio_assert(((int_64)*($3 + [104]) != (int_64)0), [10456])
	CALL eosio_assert(((int_64)$11 == (int_64)*(($3 + [112]))), [10311])
	$12 = ((int_64)$12 / (int_64)*($3 + [104]))
	$6 = *($7)
	$4 = *($6 + [40])
	CALL __multi3(($2 + [80]), $4, (int_64)$4 >> (int_64)63), $12, (int_64)$12 >> (int_64)63))
	*(($9 = (($2 + [152]) + [8]))) = *(($6 + [48]))
	*($2 + [152]) = $4
	$4 = *((($2 + [80]) + [8]))
	$11 = *($2 + [80])
	CALL eosio_assert(( (uint_64)($11 <= (int_64)4611686018427387904) ? ((int_64)$4 < (int_64)0) : (int_64)($4 == 0) ), [10471])
	CALL eosio_assert(( ((uint_64)$11 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$4 > (int_64)-1) : ((int_64)$4 == (int_64)-1) ), [10495])
	*($2 + [152]) = $11
	$3 = *($7)
	CALL eosio_assert(((int_64)*($3 + [40]) != (int_64)0), [10456])
	CALL eosio_assert(((int_64)*($9) == (int_64)*(($3 + [48]))), [10311])
	CALL eosio_assert(((int_64)((int_64)*($2 + [152]) / (int_64)*($3 + [40])) == (int_64)$12), [9919])
	CALL eosio_assert([1], [10456])
	CALL eosio_assert([1], [10680])
	$4 = *($2 + [152])
	*($2 + [152]) = ((int_64)$4 / (int_64)10000)
	if ( ((int_64)$4 < (int_64)10000) ){ goto $label$12 }
	$4 = *(*($2 + [172]) + [16])
	$6 = *(($2 + [252]))
	$10 = *(($2 + [248]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$16 }
	
.LOOP $label$18:
	$3 = ($6 + [-24])
	$9 = *($3)
	if ( ((int_64)*($9) == (int_64)$4) ){ goto $label$17 }
	$6 = $3
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$16 }
	CALL eosio_assert(((int_32)*($9 + [152]) == (int_32)($2 + [224])), [10705])
	if ( *(*($7) + [68]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$9 = [0]
	$3 = CALL db_find_i64(*($2 + [224]), *(($2 + [232])), (int_64)6820310642650513408, $4)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$19 }
	$9 = CALL $5(($2 + [224]), $3)
	CALL eosio_assert(((int_32)*($9 + [152]) == (int_32)($2 + [224])), [10705])
	
.LABEL $label$19
	if ( (*(*($7) + [68]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	if ( ($9 == 0) ){ goto $label$14 }
	if ( (int_64)(*(*($2 + [172]) + [16]) == 0) ){ goto $label$14 }
	if ( ((uint_64)$5 <= (uint_64)*($9 + [56])) ){ goto $label$14 }
	if ( (*($9 + [80]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$4 = *($0)
	*($2 + [472]) = [8850]
	*($2 + [476]) = CALL $90([8850])
	*($2 + [40]) = *($2 + [472])
	*($2 + [120]) = *(CALL $2(($2 + [304]), ($2 + [40])))
	*($2 + [112]) = $4
	*($2 + [472]) = [9966]
	*($2 + [476]) = CALL $90([9966])
	*($2 + [32]) = *($2 + [472])
	$4 = *(CALL $2(($2 + [304]), ($2 + [32])))
	*($2 + [472]) = [9978]
	*($2 + [476]) = CALL $90([9978])
	*($2 + [24]) = *($2 + [472])
	$11 = *(CALL $2(($2 + [304]), ($2 + [24])))
	$3 = *($7)
	$5 = *($3 + [16])
	*((($2 + [304]) + [24])) = *(($2 + [160]))
	*($2 + [304]) = *($0)
	*($2 + [320]) = *($2 + [152])
	*($2 + [312]) = $5
	CALL $78(($2 + [336]), ($3 + [24]))
	$6 = CALL $25(($2 + [472]), ($2 + [112]), $4, $11, ($2 + [304]))
	if ( ((*($2 + [336]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($2 + [344])))
	
.LABEL $label$20
	CALL $10(($2 + [304]), $6)
	$3 = *($2 + [304])
	CALL send_inline($3, (*($2 + [308]) - $3))
	$3 = *($2 + [304])
	if ( ($3 == 0) ){ goto $label$21 }
	*($2 + [308]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$4 = *($0)
	*($2 + [112]) = [8850]
	*($2 + [116]) = CALL $90([8850])
	*($2 + [16]) = *($2 + [112])
	$11 = *(CALL $2(($2 + [304]), ($2 + [16])))
	$5 = *($0)
	*($2 + [112]) = [9956]
	*($2 + [116]) = CALL $90([9956])
	*($2 + [8]) = *($2 + [112])
	$13 = *(CALL $2(($2 + [304]), ($2 + [8])))
	*($2 + [312]) = $1
	$3 = *($7)
	*($2 + [304]) = *($3 + [8])
	*($2 + [320]) = *($3 + [16])
	$9 = *(($8 + [92]))
	$10 = CALL $78((($2 + [304]) + [24]), ($3 + [24]))
	$1 = *(($3 + [48]))
	$14 = *($3 + [40])
	*(($2 + [368])) = *(($2 + [160]))
	*((($2 + [304]) + [48])) = $1
	*($2 + [360]) = *($2 + [152])
	*($2 + [344]) = $14
	*($2 + [384]) = $12
	*($2 + [392]) = [0]
	*($2 + [400]) = (int_64)0
	*($2 + [376]) = *(($9 + [-24]))
	$9 = CALL $78(($2 + [408]), ($3 + [56]))
	*(($7 = (($2 + [112]) + [24]))) = [0]
	*($2 + [120]) = $13
	*($2 + [112]) = $5
	*($2 + [128]) = (int_64)0
	*(($3 = CALL _Znwj([16]))) = $4
	*($3 + [8]) = $11
	*(($2 + [148])) = [0]
	$0 = ($3 + [16])
	*($7) = $0
	*(($2 + [132])) = $0
	*($2 + [128]) = $3
	*($2 + [140 align=4]) = (int_64)0
	$3 = *($10)
	$10 = ( *((($2 + [304]) + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($10 + [81])
	$4 = (CASTING uint_64)(uint_32 $10)
	$10 = (($2 + [112]) + [28])
	
.LOOP $label$22:
	$3 = ($3 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$22 }
	$9 = *($9)
	$9 = ( *(($2 + [412])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$3 = ($9 + $3)
	$4 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$23:
	$3 = ($3 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$23 }
	if ( ($3 == 0) ){ goto $label$25 }
	CALL $11($10, $3)
	$9 = *(($2 + [144]))
	$3 = *(($2 + [140]))
	goto $label$24 
	
.LABEL $label$25
	$9 = [0]
	$3 = [0]
	
.LABEL $label$24
	*($2 + [540]) = $3
	*($2 + [536]) = $3
	*($2 + [544]) = $9
	*($2 + [552]) = ($2 + [536])
	*($2 + [464]) = ($2 + [304])
	CALL $26(($2 + [464]), ($2 + [552]))
	if ( ((*($2 + [408]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($2 + [416])))
	
.LABEL $label$26
	if ( ((*($2 + [328]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($2 + [336])))
	
.LABEL $label$27
	CALL $10(($2 + [304]), ($2 + [112]))
	$3 = *($2 + [304])
	CALL send_inline($3, (*($2 + [308]) - $3))
	$3 = *($2 + [304])
	if ( ($3 == 0) ){ goto $label$28 }
	*($2 + [308]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$28
	$3 = *($2 + [140])
	if ( ($3 == 0) ){ goto $label$29 }
	*(($2 + [144])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$29
	$3 = *($2 + [128])
	if ( ($3 == 0) ){ goto $label$30 }
	*(($2 + [132])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$30
	$3 = *($6 + [28])
	if ( ($3 == 0) ){ goto $label$31 }
	*(($6 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$31
	$3 = *($6 + [16])
	if ( ($3 == 0) ){ goto $label$12 }
	*(($6 + [20])) = $3
	CALL _ZdlPv($3)
	goto $label$12 
	
.LABEL $label$13
	$11 = *($0)
	$5 = *((($2 + [152]) + [8]))
	$13 = *($2 + [152])
	CALL eosio_assert([1], [10788])
	CALL eosio_assert(((int_32)*($9 + [152]) == (int_32)($2 + [224])), [10823])
	CALL eosio_assert(((int_64)*($2 + [224]) == (int_64)CALL $fimport$3()), [10869])
	$3 = ($9 + [56])
	*($2 + [464]) = *($3)
	$4 = *($9)
	CALL eosio_assert(((int_64)$5 == (int_64)*(($9 + [112]))), [10370])
	$5 = ((int_64)$13 + (int_64)*($9 + [104]))
	*($9 + [104]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [10413])
	CALL eosio_assert(((int_64)*($9 + [104]) < (int_64)4611686018427387904), [10432])
	CALL eosio_assert(((int_64)$4 == (int_64)*($9)), [10920])
	*($2 + [120]) = (($2 + [304]) + [147])
	*($2 + [116]) = ($2 + [304])
	*($2 + [112]) = ($2 + [304])
	*($2 + [536]) = ($2 + [112])
	*($2 + [476]) = ($9 + [8])
	*($2 + [472]) = $9
	*($2 + [480]) = ($9 + [16])
	*($2 + [484]) = ($9 + [24])
	*($2 + [488]) = ($9 + [40])
	*($2 + [492]) = ($9 + [48])
	*($2 + [496]) = $3
	*($2 + [500]) = ($9 + [64])
	*($2 + [504]) = ($9 + [72])
	*($2 + [508]) = ($9 + [80])
	*($2 + [512]) = ($9 + [81])
	*($2 + [516]) = ($9 + [82])
	*($2 + [520]) = ($9 + [88])
	*($2 + [524]) = ($9 + [104])
	*($2 + [528]) = ($9 + [120])
	*($2 + [532]) = ($9 + [136])
	CALL $6(($2 + [472]), ($2 + [536]))
	CALL db_update_i64(*($9 + [156]), $11, ($2 + [304]), [147])
	$6 = (($2 + [224]) + [16])
	if ( (uint_64)($4 <= *($6)) ){ goto $label$32 }
	*($6) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$32
	*($2 + [472]) = *($3)
	if ( (CALL $89(($2 + [464]), ($2 + [472]), [8]) == 0) ){ goto $label$33 }
	$6 = ($9 + [160])
	$3 = *($6)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$34 }
	$3 = CALL db_idx64_find_primary(*($2 + [224]), *(($2 + [232])), (int_64)6820310642650513408, ($2 + [536]), $4)
	*($6) = $3
	
.LABEL $label$34
	CALL db_idx64_update($3, $11, ($2 + [472]))
	
.LABEL $label$33
	$4 = *($0)
	*($2 + [308]) = ($2 + [168])
	*($2 + [304]) = ($2 + [264])
	*($2 + [312]) = ($2 + [176])
	*($2 + [316]) = ($2 + [152])
	*($2 + [112]) = $4
	CALL eosio_assert(((int_64)*($2 + [264]) == (int_64)CALL $fimport$3()), [10979])
	*($2 + [476]) = ($2 + [304])
	*($2 + [472]) = ($2 + [264])
	*($2 + [480]) = ($2 + [112])
	*(($3 = CALL _Znwj([88])) + [16]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32]) = [0]
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [56 align=4]) = (int_64)0
	*($3 + [64]) = [0]
	*($3 + [72]) = ($2 + [264])
	CALL $27(($2 + [472]), $3)
	*($2 + [536]) = $3
	$4 = *($3)
	*($2 + [472]) = $4
	$9 = *($3 + [76])
	*($2 + [464]) = $9
	$10 = ($2 + [292])
	$6 = *($10)
	if ( ((uint_32)$6 >= (uint_32)*(($2 + [296]))) ){ goto $label$37 }
	*($6 + [8]) = $4
	*($6 + [16]) = $9
	*($2 + [536]) = [0]
	*($6) = $3
	*($10) = ($6 + [24])
	$3 = *($2 + [536])
	*($2 + [536]) = [0]
	if ( $3 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	CALL $8(($2 + [288]), ($2 + [536]), ($2 + [472]), ($2 + [464]))
	$3 = *($2 + [536])
	*($2 + [536]) = [0]
	if ( ($3 == 0) ){ goto $label$35 }
	
.LABEL $label$36
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($3 + [64])))
	
.LABEL $label$38
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$39
	CALL _ZdlPv($3)
	
.LABEL $label$35
	$4 = *($0)
	*($2 + [472]) = [8850]
	*($2 + [476]) = CALL $90([8850])
	*($2 + [72]) = *($2 + [472])
	*($2 + [120]) = *(CALL $2(($2 + [304]), ($2 + [72])))
	*($2 + [112]) = $4
	*($2 + [472]) = [8857]
	*($2 + [476]) = CALL $90([8857])
	*($2 + [64]) = *($2 + [472])
	$4 = *(CALL $2(($2 + [304]), ($2 + [64])))
	$11 = *(*($2 + [172]) + [16])
	$9 = ($2 + [160])
	*((($2 + [304]) + [16])) = *($9)
	*($2 + [312]) = *($2 + [152])
	*($2 + [304]) = $11
	$6 = CALL $9(($2 + [472]), ($2 + [112]), (int_64)6138663757350325536, $4, ($2 + [304]))
	CALL $10(($2 + [304]), $6)
	$3 = *($2 + [304])
	CALL send_inline($3, (*($2 + [308]) - $3))
	$3 = *($2 + [304])
	if ( ($3 == 0) ){ goto $label$40 }
	*($2 + [308]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$40
	$4 = *($0)
	*($2 + [112]) = [8850]
	*($2 + [116]) = CALL $90([8850])
	*($2 + [56]) = *($2 + [112])
	$11 = *(CALL $2(($2 + [304]), ($2 + [56])))
	$5 = *($0)
	*($2 + [112]) = [9956]
	*($2 + [116]) = CALL $90([9956])
	*($2 + [48]) = *($2 + [112])
	$13 = *(CALL $2(($2 + [304]), ($2 + [48])))
	*($2 + [312]) = $1
	$3 = *($7)
	*($2 + [304]) = *($3 + [8])
	*($2 + [320]) = *($3 + [16])
	$10 = *(($8 + [92]))
	$7 = *($2 + [172])
	$0 = CALL $78((($2 + [304]) + [24]), ($3 + [24]))
	$1 = *(($3 + [48]))
	$14 = *($3 + [40])
	*(($2 + [368])) = *($9)
	*((($2 + [304]) + [48])) = $1
	*($2 + [360]) = *($2 + [152])
	*($2 + [344]) = $14
	*($2 + [384]) = $12
	*($2 + [376]) = *(($10 + [-24]))
	*($2 + [400]) = *($7 + [16])
	*($2 + [392]) = [1]
	$9 = CALL $78(($2 + [408]), ($3 + [56]))
	*(($10 = (($2 + [112]) + [24]))) = [0]
	*($2 + [120]) = $13
	*($2 + [112]) = $5
	*($2 + [128]) = (int_64)0
	*(($3 = CALL _Znwj([16]))) = $4
	*($3 + [8]) = $11
	*(($2 + [148])) = [0]
	$7 = ($3 + [16])
	*($10) = $7
	*(($2 + [132])) = $7
	*($2 + [128]) = $3
	*($2 + [140 align=4]) = (int_64)0
	$3 = *($0)
	$10 = ( *((($2 + [304]) + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($10 + [81])
	$4 = (CASTING uint_64)(uint_32 $10)
	$10 = (($2 + [112]) + [28])
	
.LOOP $label$41:
	$3 = ($3 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$41 }
	$9 = *($9)
	$9 = ( *(($2 + [412])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$3 = ($9 + $3)
	$4 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$42:
	$3 = ($3 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$42 }
	if ( ($3 == 0) ){ goto $label$44 }
	CALL $11($10, $3)
	$9 = *(($2 + [144]))
	$3 = *(($2 + [140]))
	goto $label$43 
	
.LABEL $label$44
	$9 = [0]
	$3 = [0]
	
.LABEL $label$43
	*($2 + [540]) = $3
	*($2 + [536]) = $3
	*($2 + [544]) = $9
	*($2 + [552]) = ($2 + [536])
	*($2 + [464]) = ($2 + [304])
	CALL $26(($2 + [464]), ($2 + [552]))
	if ( ((*($2 + [408]) & [1]) == 0) ){ goto $label$45 }
	CALL _ZdlPv(*(($2 + [416])))
	
.LABEL $label$45
	if ( ((*($2 + [328]) & [1]) == 0) ){ goto $label$46 }
	CALL _ZdlPv(*(($2 + [336])))
	
.LABEL $label$46
	CALL $10(($2 + [304]), ($2 + [112]))
	$3 = *($2 + [304])
	CALL send_inline($3, (*($2 + [308]) - $3))
	$3 = *($2 + [304])
	if ( ($3 == 0) ){ goto $label$47 }
	*($2 + [308]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$47
	$3 = *($2 + [140])
	if ( ($3 == 0) ){ goto $label$48 }
	*(($2 + [144])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$48
	$3 = *($2 + [128])
	if ( ($3 == 0) ){ goto $label$49 }
	*(($2 + [132])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$49
	$3 = *($6 + [28])
	if ( ($3 == 0) ){ goto $label$50 }
	*(($6 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$50
	$3 = *($6 + [16])
	if ( ($3 == 0) ){ goto $label$12 }
	*(($6 + [20])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$12
	$4 = *($2 + [176])
	$3 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$6 = ((int_32)$3) != (int_32)[0]
	CALL eosio_assert($6), [11184])
	CALL eosio_assert($6, [11218])
	$6 = CALL db_next_i64(*($3 + [76]), ($2 + [304]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$51 }
	CALL $24((CASTING uint_32)(uint_64 $4), $6)
	
.LABEL $label$51
	CALL $28(($2 + [264]), $3)
	CALL $13(($2 + [208]))
	$9 = *($2 + [248])
	if ( ($9 == 0) ){ goto $label$52 }
	$10 = ($2 + [252])
	$3 = *($10)
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$54 }
	
.LOOP $label$55:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$56 }
	CALL _ZdlPv($6)
	
.LABEL $label$56
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$55 }
	$3 = *(($2 + [248]))
	goto $label$53 
	
.LABEL $label$54
	$3 = $9
	
.LABEL $label$53
	*($10) = $9
	CALL _ZdlPv($3)
	
.LABEL $label$52
	$9 = *($2 + [288])
	if ( ($9 == 0) ){ goto $label$57 }
	$10 = ($2 + [292])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$59 }
	
.LOOP $label$60:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$61 }
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$62 }
	CALL _ZdlPv(*(($3 + [64])))
	
.LABEL $label$62
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$63 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$63
	CALL _ZdlPv($3)
	
.LABEL $label$61
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$60 }
	$3 = *(($2 + [288]))
	goto $label$58 
	
.LABEL $label$59
	$3 = $9
	
.LABEL $label$58
	*($10) = $9
	CALL _ZdlPv($3)
	
.LABEL $label$57
	$global$0 = ($2 + [560])
}

void .FUNC $22 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [400])
	$global$0 = $2
	*((($2 + [120]) + [32])) = [0]
	*($2 + [128]) = (int_64)6138663757350325536
	*($2 + [120]) = (int_64)6138663757350325536
	*($2 + [136]) = (int_64)-1
	*($2 + [144]) = (int_64)0
	*((($2 + [80]) + [32])) = [0]
	*($2 + [96]) = (int_64)-1
	*($2 + [104]) = (int_64)0
	*($2 + [116]) = [0]
	$3 = *($0)
	*($2 + [80]) = $3
	*($2 + [88]) = $3
	$4 = [0]
	$5 = CALL db_find_i64((int_64)6138663757350325536, (int_64)6138663757350325536, (int_64)6820297015373594624, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $4(($2 + [120]), $5)
	CALL eosio_assert(((int_32)*($4 + [100]) == (int_32)($2 + [120])), [10705])
	$7 = *(($2 + [108]))
	$6 = *(($2 + [104]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($7 + [-24])
	$8 = *($5)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$7 = $5
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [152]) == (int_32)($2 + [80])), [10705])
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_find_i64(*($2 + [80]), *(($2 + [88])), (int_64)6820310642650513408, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $5(($2 + [80]), $5)
	CALL eosio_assert(((int_32)*($8 + [152]) == (int_32)($2 + [80])), [10705])
	goto $label$1 
	
.LABEL $label$5
	$8 = [0]
	
.LABEL $label$1
	$3 = CALL publication_time()
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8657])
	$9 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($9, [9640])
	CALL eosio_assert(((int_32)*($8 + [81]) ^ (int_32)[1]), [9754])
	CALL eosio_assert(((uint_64)*($4 + [64]) <= (uint_64)$3), [9786])
	if ( ((uint_64)$3 >= (uint_64)((int_64)*($4 + [64]) + (int_64)432000000000)) ){ goto $label$6 }
	CALL require_auth(*($8 + [48]))
	CALL eosio_assert(((int_64)*($8 + [88]) > (int_64)0), [9823])
	
.LABEL $label$6
	$10 = *(($8 + [112]))
	$11 = *($8 + [104])
	if ( ((int_64)$11 < (int_64)1) ){ goto $label$8 }
	$3 = *($8 + [88])
	CALL __multi3(($2 + [48]), $3, (int_64)$3 >> (int_64)63), (int_64)10000, (int_64)0)
	$12 = *(($8 + [96]))
	$3 = *(($2 + [56]))
	$13 = *($2 + [48])
	CALL eosio_assert(( (uint_64)($13 <= (int_64)4611686018427387904) ? ((int_64)$3 < (int_64)0) : (int_64)($3 == 0) ), [10471])
	CALL eosio_assert(( ((uint_64)$13 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$3 > (int_64)-1) : ((int_64)$3 == (int_64)-1) ), [10495])
	CALL eosio_assert([1], [10456])
	CALL eosio_assert(((int_64)$12 == (int_64)$10), [10311])
	$14 = ((int_64)$13 / (int_64)$11)
	goto $label$7 
	
.LABEL $label$8
	$14 = (int_64)10000
	
.LABEL $label$7
	CALL eosio_assert([1], [10520])
	$3 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$13 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$3 = $13
	$7 = [1]
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$3 = $13
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$6 = ($5 + [1])
	$5 = $6
	if ( $7 ){ goto $label$13 }
	$7 = [1]
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$7 = [0]
	
.LABEL $label$9
	CALL eosio_assert($7, [10569])
	$3 = ((int_64)*($8 + [72]) + (int_64)10000)
	CALL __multi3(($2 + [32]), $3, (int_64)$3 >> (int_64)63), $11, (int_64)$11 >> (int_64)63))
	$11 = (int_64)0
	$3 = *((($2 + [32]) + [8]))
	$13 = *($2 + [32])
	CALL eosio_assert(( (uint_64)($13 <= (int_64)4611686018427387904) ? ((int_64)$3 < (int_64)0) : (int_64)($3 == 0) ), [10471])
	CALL eosio_assert(( ((uint_64)$13 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$3 > (int_64)-1) : ((int_64)$3 == (int_64)-1) ), [10495])
	CALL eosio_assert([1], [10456])
	CALL eosio_assert([1], [10680])
	$3 = *($8 + [88])
	$12 = *(($8 + [96]))
	CALL eosio_assert(((int_64)$10 == (int_64)$12), [10589])
	$3 = (int_64)
	CALL eosio_assert(((int_64)$3($3 - ((int_64)$13 / (int_64)10000))) > (int_64)-4611686018427387904), [10637])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [10659])
	if ( ((int_64)$3 < (int_64)1) ){ goto $label$15 }
	$13 = *($8 + [64])
	CALL __multi3(($2 + [16]), $13, (int_64)$13 >> (int_64)63), $3, (int_64)$3 >> (int_64)63))
	$3 = *((($2 + [16]) + [8]))
	$13 = *($2 + [16])
	CALL eosio_assert(( (uint_64)($13 <= (int_64)4611686018427387904) ? ((int_64)$3 < (int_64)0) : (int_64)($3 == 0) ), [10471])
	CALL eosio_assert(( ((uint_64)$13 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$3 > (int_64)-1) : ((int_64)$3 == (int_64)-1) ), [10495])
	CALL eosio_assert([1], [10456])
	CALL eosio_assert([1], [10680])
	$11 = ((int_64)$13 / (int_64)10000)
	goto $label$14 
	
.LABEL $label$15
	$12 = (int_64)1397703940
	
.LABEL $label$14
	$13 = *($0)
	CALL eosio_assert($9, [10788])
	CALL eosio_assert(((int_32)*($8 + [152]) == (int_32)($2 + [80])), [10823])
	CALL eosio_assert(((int_64)*($2 + [80]) == (int_64)CALL $fimport$3()), [10869])
	*($8 + [81]) = [1]
	*($8 + [136]) = $11
	*(($8 + [144])) = $12
	$5 = ($8 + [56])
	*($2 + [320]) = *($5)
	$3 = *($8)
	CALL eosio_assert([1], [10920])
	*($2 + [72]) = (($2 + [160]) + [147])
	*($2 + [68]) = ($2 + [160])
	*($2 + [64]) = ($2 + [160])
	*($2 + [328]) = ($2 + [64])
	*($2 + [340]) = ($8 + [8])
	*($2 + [336]) = $8
	*($2 + [344]) = ($8 + [16])
	*($2 + [348]) = ($8 + [24])
	*($2 + [352]) = ($8 + [40])
	*($2 + [356]) = ($8 + [48])
	*($2 + [360]) = $5
	*($2 + [364]) = ($8 + [64])
	*($2 + [368]) = ($8 + [72])
	*($2 + [372]) = ($8 + [80])
	*($2 + [376]) = ($8 + [81])
	*($2 + [380]) = ($8 + [82])
	*($2 + [384]) = ($8 + [88])
	*($2 + [388]) = ($8 + [104])
	*($2 + [392]) = ($8 + [120])
	*($2 + [396]) = ($8 + [136])
	CALL $6(($2 + [336]), ($2 + [328]))
	CALL db_update_i64(*($8 + [156]), $13, ($2 + [160]), [147])
	$7 = (($2 + [80]) + [16])
	if ( (uint_64)($3 <= *($7)) ){ goto $label$16 }
	*($7) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*($2 + [336]) = *($5)
	if ( (CALL $89(($2 + [320]), ($2 + [336]), [8]) == 0) ){ goto $label$17 }
	$7 = ($8 + [160])
	$5 = *($7)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$18 }
	$5 = CALL db_idx64_find_primary(*($2 + [80]), *(($2 + [88])), (int_64)6820310642650513408, ($2 + [328]), $3)
	*($7) = $5
	
.LABEL $label$18
	CALL db_idx64_update($5, $13, ($2 + [336]))
	
.LABEL $label$17
	$3 = *($0)
	*($2 + [336]) = [8850]
	*($2 + [340]) = CALL $90([8850])
	*($2 + [8]) = *($2 + [336])
	*($2 + [72]) = *(CALL $2(($2 + [160]), ($2 + [8])))
	*($2 + [64]) = $3
	*($2 + [336]) = [9747]
	*($2 + [340]) = CALL $90([9747])
	*($2) = *($2 + [336])
	$3 = *(CALL $2(($2 + [160]), $2))
	*($2 + [344]) = $14
	*($2 + [336]) = $1
	*($2 + [352]) = *(($4 + [64]))
	$5 = CALL $20(($2 + [160]), ($2 + [64]), (int_64)6138663757350325536, $3, ($2 + [336]))
	CALL $10(($2 + [336]), $5)
	$7 = *($2 + [336])
	CALL send_inline($7, (*($2 + [340]) - $7))
	$7 = *($2 + [336])
	if ( ($7 == 0) ){ goto $label$19 }
	*($2 + [340]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$19
	$7 = *($5 + [28])
	if ( ($7 == 0) ){ goto $label$20 }
	*(($5 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$20
	$7 = *($5 + [16])
	if ( ($7 == 0) ){ goto $label$21 }
	*(($5 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$21
	$8 = *($2 + [104])
	if ( ($8 == 0) ){ goto $label$22 }
	$6 = ($2 + [108])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$24 }
	
.LOOP $label$25:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$26 }
	CALL _ZdlPv($7)
	
.LABEL $label$26
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$25 }
	$5 = *(($2 + [104]))
	goto $label$23 
	
.LABEL $label$24
	$5 = $8
	
.LABEL $label$23
	*($6) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$22
	CALL $13(($2 + [144]))
	$global$0 = ($2 + [400])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $11($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $29(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10756])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $93($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [16]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32]) = [0]
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64]) = [0]
	*($5 + [72]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [40])
	*($3 + [52]) = ($5 + [56])
	*($3 + [56]) = ($5 + [68])
	CALL $62(($3 + [32]), ($3 + [24]))
	*($5 + [76]) = $1
	*($5 + [80 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $8(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $96($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [64])))
	
.LABEL $label$10
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-4138943993976477392, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $24($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $60(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [11030])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*(*($5 + [4]) + [4]) + [16])
	$6 = *(*($5 + [8]) + [4])
	*($1 + [16]) = *($6 + [16])
	$8 = ($1 + [24])
	CALL $80($8, ($6 + [24]))
	$6 = *($5 + [12])
	*($1 + [40]) = *($6)
	*(($1 + [48])) = *(($6 + [8]))
	$9 = ($1 + [56])
	CALL $80($9, (*(*($5 + [8]) + [4]) + [56]))
	*($1 + [68]) = [1]
	$5 = *($1 + [24])
	$6 = ( *(($1 + [28])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [41])
	$7 = (CASTING uint_64)(uint_32 $6)
	$10 = ($1 + [68])
	$11 = ($1 + [40])
	$12 = ($1 + [8])
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	$6 = *(($1 + [56]))
	$6 = ( *(($1 + [60])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$5 = ($6 + $5)
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $93($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($6 + $5)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $12
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = $8
	*($3 + [48]) = $11
	*($3 + [52]) = $9
	*($3 + [56]) = $10
	CALL $61(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($4 + [8]), (int_64)-4138943993976477392, *(*($0 + [8])), $7, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL $96($6)
	
.LABEL $label$7
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$8 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$5 = ($4 + [8])
	$7 = *($5)
	$6 = *(($0 + [8]))
	$13 = *($6)
	$14 = *($1)
	*($3 + [32]) = *(($1 + [8]))
	*($1 + [80]) = CALL db_idx64_store($7, (int_64)-4138943993976477392, $13, $14, ($3 + [32]))
	$7 = *($6)
	$13 = *($5)
	$14 = *($1)
	*($3 + [32]) = *(($1 + [16]))
	*(($1 + [84])) = CALL db_idx64_store($13, (int_64)-4138943993976477391, $7, $14, ($3 + [32]))
	$global$0 = ($3 + [64])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($0 + [4]), ($4 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($0 + [4]), ($4 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $63(*($1), ($4 + [24]))
	*($2 + [8]) = $4
	CALL $65(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $93($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11396])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $93($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy(($3 + [40]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10779])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($3 + [48])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy(($0 + [56]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [10779])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [64])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy(($0 + [72]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy(($0 + [80]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [10779])
	CALL memcpy(($2 + [8]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0 + [88]) = ((int_32)*($2 + [8]) != (int_32)[0])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy(($0 + [96]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $46(*($1), ($0 + [104]))
	$global$0 = ($2 + [16])
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), ($3 + [40]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *(($3 + [48]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), ($0 + [56]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [64]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), ($0 + [72]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), ($0 + [80]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [8]) = *($0 + [88])
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [10450])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), ($0 + [96]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $63(*($1), ($0 + [104]))
	$global$0 = ($2 + [16])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), ($3 + [40]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2) = *(($3 + [48]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), $2, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	$0 = *($0)
	*($2 + [15]) = *($0 + [56])
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [10450])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	CALL $63(*($1), ($0 + [60]))
	$global$0 = ($2 + [16])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy(($3 + [40]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10779])
	CALL memcpy($2, *($4 + [4]), [8])
	*(($3 + [48])) = *($2)
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [10779])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0 + [56]) = ((int_32)*($2 + [15]) != (int_32)[0])
	CALL $46(*($1), ($0 + [60]))
	$global$0 = ($2 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy(($2 + [48]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy(($3 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy(($3 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy(($3 + [72]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy(($3 + [80]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $63(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [10450])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $63(*($1), *($0 + [20]))
	$4 = *($1)
	*($2 + [7]) = *(*($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [10450])
	CALL memcpy(*($4 + [4]), ($2 + [7]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [76]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [11136])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4138943993976477392)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [11082])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [11082])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $24(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [10450])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [10450])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $46(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10779])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10779])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $46(*($1), *($0 + [20]))
	$0 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [10779])
	CALL memcpy(($2 + [7]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0) = ((int_32)*($2 + [7]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $89 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $88 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $87 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

void .FUNC $86 (int_32 $0)
{
}

int_32 .FUNC $85 ()
{
	return [11400]
}

void .FUNC $84 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $83 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $88(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $81($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $91(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [11396])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $91(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $96($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $77 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $39 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [136]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $93($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [96])) = [0]
	*(($4 + [112])) = (int_64)0
	*(($4 + [132])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [120]) = [0]
	*($4 + [124 align=4]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [160]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $47(($4 + [16]), ($4 + [160]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [144]) + [8]))) = *($3)
	*($4 + [144]) = *($4)
	$3 = *($6)
	*((($4 + [160]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [144])
	*($4 + [32]) = $0
	*($4 + [160]) = $0
	*($4 + [164]) = ($4 + [136])
	*($4 + [160]) = ($4 + [16])
	CALL $48(($4 + [160]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	$2 = [1]
	if ( (*($4 + [124]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $96($2)
	$2 = [1]
	if ( ((*($4 + [124]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($4 + [132])))
	if ( (*($4 + [88]) & $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($4 + [88]) & $2) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	
.LABEL $label$4
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL memory()
	*($3 + [208]) = [9978]
	*($3 + [212]) = CALL $90([9978])
	*($3 + [104]) = *($3 + [208])
	CALL $2(($3 + [216]), ($3 + [104]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [208]) = [9966]
	*($3 + [212]) = CALL $90([9966])
	*($3 + [8]) = *($3 + [208])
	CALL $2(($3 + [216]), ($3 + [8]))
	CALL eosio_assert(((int_64)$1 == (int_64)6138663591592764928), [10117])
	*($3 + [204]) = [0]
	*($3 + [200]) = [1]
	*($3) = *($3 + [200])
	CALL $37($0, $1, $3)
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)3626168788933672959) ){ goto $label$12 }
	if ( ((int_64)$2 > (int_64)5378050752903643135) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)3626168788933672960) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)3626298663912865792) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)5378050748940173312) ){ goto $label$1 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [2]
	*($3 + [24]) = *($3 + [184])
	CALL $38($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$2 <= (int_64)-4417018962198396929) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-4417018962198396928) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-4149693861746180096) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$1 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [3]
	*($3 + [56]) = *($3 + [152])
	CALL $38($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)5378050752903643136) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)5883237574941081600) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)5883263652659433120) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [4]
	*($3 + [88]) = *($3 + [120])
	CALL $39($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)-4420683930625638400) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-4420681430061809664) ){ goto $label$1 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [5]
	*($3 + [72]) = *($3 + [136])
	CALL $40($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [196]) = [0]
	*($3 + [192]) = [6]
	*($3 + [16]) = *($3 + [192])
	CALL $41($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [180]) = [0]
	*($3 + [176]) = [7]
	*($3 + [32]) = *($3 + [176])
	CALL $42($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [164]) = [0]
	*($3 + [160]) = [8]
	*($3 + [48]) = *($3 + [160])
	CALL $38($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [132]) = [0]
	*($3 + [128]) = [9]
	*($3 + [80]) = *($3 + [128])
	CALL $38($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [172]) = [0]
	*($3 + [168]) = [10]
	*($3 + [40]) = *($3 + [168])
	CALL $38($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [116]) = [0]
	*($3 + [112]) = [11]
	*($3 + [96]) = *($3 + [112])
	CALL $43($1, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [148]) = [0]
	*($3 + [144]) = [12]
	*($3 + [64]) = *($3 + [144])
	CALL $40($1, $1, ($3 + [64]))
	
.LABEL $label$1
	CALL $86([0])
	$global$0 = ($3 + [224])
}

int_32 .FUNC $37 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $93($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [80]) + [24]))) = (int_64)0
	*(($4 + [120])) = [0]
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [68]) = $2
	*($4 + [64]) = $2
	*($4 + [72]) = ($2 + $7)
	*($4 + [176]) = ($4 + [64])
	*($4 + [32]) = ($4 + [80])
	CALL $44(($4 + [32]), ($4 + [176]))
	*(($9 = (($4 + [16]) + [8]))) = *($4 + [72])
	*($4 + [16]) = *($4 + [64])
	*(($3 = (($4 + [160]) + [8]))) = *($9)
	*($4 + [160]) = *($4 + [16])
	$9 = *($3)
	*((($4 + [176]) + [8])) = $9
	*((($4 + [32]) + [24])) = $9
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$0 = *($4 + [160])
	*($4 + [48]) = $0
	*($4 + [176]) = $0
	*(($9 = (($4 + [144]) + [8]))) = *($8)
	*($4 + [144]) = *($4 + [96])
	$0 = *($4 + [88])
	$1 = *($4 + [80])
	$8 = CALL $78(($4 + [128]), ($4 + [112]))
	*($3) = *($9)
	*($4 + [160]) = *($4 + [144])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$10 = *((($4 + [160]) + [8]))
	*((($4 + [176]) + [8])) = $10
	*(($4 + [8])) = $10
	$10 = *($4 + [160])
	*($4) = $10
	*($4 + [176]) = $10
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $4), (int_32 $8), (int_32 $6))
	if ( (*($4 + [128]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $96($2)
	$2 = [1]
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [112]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [192])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [120])))
	$global$0 = ($4 + [192])
	return $2
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $32 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	*($2 + [44]) = [0]
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)-4138943993976477392, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $24(($2 + [8]), $5)
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)($2 + [8])), [10705])
	
.LABEL $label$1
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [9871])
	CALL eosio_assert(*($4 + [68]), [10091])
	CALL require_auth(*($4 + [16]))
	$3 = *($0)
	CALL eosio_assert($5, [10788])
	CALL $33(($2 + [8]), $4, $3)
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($2 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$7
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [32])))
	
.LABEL $label$8
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$4 = *(($2 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$4 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$global$0 = ($2 + [48])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [10823])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10869])
	*($1 + [68]) = [0]
	$5 = ($1 + [8])
	*(($4 = $3) + [24]) = *($5)
	*($4 + [32]) = *(($1 + [16]))
	$6 = *($1)
	CALL eosio_assert([1], [10920])
	$7 = *($1 + [24])
	$8 = ( *(($1 + [28])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($8 + [41])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [24])
	$10 = ($1 + [68])
	$11 = (($4 + [24]) + [8])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	$12 = *($1 + [56])
	$12 = ( *(($1 + [60])) ? uint_32($12 >> [1]) : ($12 & [1]) )
	$7 = ($12 + $7)
	$9 = (CASTING uint_64)(uint_32 $12)
	$12 = ($1 + [56])
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ($7 <= [513]) ){ goto $label$4 }
	$3 = CALL $93($7)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $7)
	*($4 + [40]) = ($4 + [8])
	*($4 + [52]) = $5
	*($4 + [60]) = $8
	*($4 + [68]) = $12
	*($4 + [72]) = $10
	*($4 + [48]) = $1
	*($4 + [56]) = ($1 + [16])
	*($4 + [64]) = ($1 + [40])
	CALL $61(($4 + [48]), ($4 + [40]))
	CALL db_update_i64(*($1 + [76]), $2, $3, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $96($3)
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($4 + [48]) = *($5)
	if ( (CALL $89(($4 + [24]), ($4 + [48]), [8]) == 0) ){ goto $label$7 }
	$3 = ($1 + [80])
	$7 = *($3)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$8 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4138943993976477392, ($4 + [40]), $6)
	*($3) = $7
	
.LABEL $label$8
	CALL db_idx64_update($7, $2, ($4 + [48]))
	
.LABEL $label$7
	*($4 + [48]) = *(($1 + [16]))
	if ( (CALL $89($11, ($4 + [48]), [8]) == 0) ){ goto $label$9 }
	$1 = ($1 + [84])
	$7 = *($1)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4138943993976477391, ($4 + [40]), $6)
	*($1) = $7
	
.LABEL $label$10
	CALL db_idx64_update($7, $2, ($4 + [48]))
	
.LABEL $label$9
	$global$0 = ($4 + [80])
}

void .FUNC $30 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [400])
	$global$0 = $4
	*((($4 + [104]) + [32])) = [0]
	*($4 + [112]) = (int_64)6138663757350325536
	*($4 + [104]) = (int_64)6138663757350325536
	*($4 + [120]) = (int_64)-1
	*($4 + [128]) = (int_64)0
	*((($4 + [64]) + [32])) = [0]
	*($4 + [80]) = (int_64)-1
	*($4 + [88]) = (int_64)0
	*($4 + [100]) = [0]
	$5 = *($0)
	*($4 + [64]) = $5
	*($4 + [72]) = $5
	$5 = CALL publication_time()
	$6 = [0]
	$7 = CALL db_find_i64((int_64)6138663757350325536, (int_64)6138663757350325536, (int_64)6820297015373594624, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $4(($4 + [104]), $7)
	CALL eosio_assert(((int_32)*($6 + [100]) == (int_32)($4 + [104])), [10705])
	$9 = *(($4 + [92]))
	$8 = *(($4 + [88]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	
.LOOP $label$4:
	$10 = ($9 + [-24])
	$7 = *($10)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [152]) == (int_32)($4 + [64])), [10705])
	goto $label$1 
	
.LABEL $label$2
	$7 = CALL db_find_i64(*($4 + [64]), *(($4 + [72])), (int_64)6820310642650513408, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$7 = CALL $5(($4 + [64]), $7)
	CALL eosio_assert(((int_32)*($7 + [152]) == (int_32)($4 + [64])), [10705])
	goto $label$1 
	
.LABEL $label$5
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8657])
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [9640])
	CALL eosio_assert(((int_32)*($7 + [80]) ^ (int_32)[1]), [9987])
	CALL eosio_assert(((uint_64)$5 >= (uint_64)*($6 + [56])), [10012])
	CALL require_auth(*($7 + [48]))
	$1 = *($0)
	*($4 + [336]) = [8850]
	*($4 + [340]) = CALL $90([8850])
	*($4 + [16]) = *($4 + [336])
	*($4 + [344]) = *(CALL $2(($4 + [144]), ($4 + [16])))
	*($4 + [336]) = $1
	*($4 + [24]) = [9966]
	*($4 + [28]) = CALL $90([9966])
	*($4 + [8]) = *($4 + [24])
	$1 = *(CALL $2(($4 + [144]), ($4 + [8])))
	*($4 + [24]) = [9978]
	*($4 + [28]) = CALL $90([9978])
	*($4) = *($4 + [24])
	$5 = *(CALL $2(($4 + [144]), $4))
	*(($4 + [168])) = *(($7 + [112]))
	*($4 + [152]) = $2
	*($4 + [144]) = *($0)
	*($4 + [160]) = *($7 + [104])
	CALL $78(($4 + [176]), $3)
	$10 = CALL $25(($4 + [24]), ($4 + [336]), $1, $5, ($4 + [144]))
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [184])))
	
.LABEL $label$6
	CALL $10(($4 + [144]), $10)
	$9 = *($4 + [144])
	CALL send_inline($9, (*($4 + [148]) - $9))
	$9 = *($4 + [144])
	if ( ($9 == 0) ){ goto $label$7 }
	*($4 + [148]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$7
	$2 = *($0)
	CALL eosio_assert($8, [10788])
	CALL eosio_assert(((int_32)*($7 + [152]) == (int_32)($4 + [64])), [10823])
	CALL eosio_assert(((int_64)*($4 + [64]) == (int_64)CALL $fimport$3()), [10869])
	*($7 + [80]) = [1]
	$9 = ($7 + [56])
	*($4 + [320]) = *($9)
	$1 = *($7)
	CALL eosio_assert([1], [10920])
	*($4 + [312]) = (($4 + [144]) + [147])
	*($4 + [308]) = ($4 + [144])
	*($4 + [304]) = ($4 + [144])
	*($4 + [328]) = ($4 + [304])
	*($4 + [340]) = ($7 + [8])
	*($4 + [336]) = $7
	*($4 + [344]) = ($7 + [16])
	*($4 + [348]) = ($7 + [24])
	*($4 + [352]) = ($7 + [40])
	*($4 + [356]) = ($7 + [48])
	*($4 + [360]) = $9
	*($4 + [364]) = ($7 + [64])
	*($4 + [368]) = ($7 + [72])
	*($4 + [372]) = ($7 + [80])
	*($4 + [376]) = ($7 + [81])
	*($4 + [380]) = ($7 + [82])
	*($4 + [384]) = ($7 + [88])
	*($4 + [388]) = ($7 + [104])
	*($4 + [392]) = ($7 + [120])
	*($4 + [396]) = ($7 + [136])
	CALL $6(($4 + [336]), ($4 + [328]))
	CALL db_update_i64(*($7 + [156]), $2, ($4 + [144]), [147])
	$8 = (($4 + [64]) + [16])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$8 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($4 + [336]) = *($9)
	if ( (CALL $89(($4 + [320]), ($4 + [336]), [8]) == 0) ){ goto $label$9 }
	$9 = ($7 + [160])
	$7 = *($9)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($4 + [64]), *(($4 + [72])), (int_64)6820310642650513408, ($4 + [328]), $1)
	*($9) = $7
	
.LABEL $label$10
	CALL db_idx64_update($7, $2, ($4 + [336]))
	
.LABEL $label$9
	$7 = *($10 + [28])
	if ( ($7 == 0) ){ goto $label$11 }
	*(($10 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$11
	$7 = *($10 + [16])
	if ( ($7 == 0) ){ goto $label$12 }
	*(($10 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$12
	$9 = *($4 + [88])
	if ( ($9 == 0) ){ goto $label$13 }
	$8 = ($4 + [92])
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$15 }
	
.LOOP $label$16:
	$7 = ($7 + [-24])
	$10 = *($7)
	*($7) = [0]
	if ( ($10 == 0) ){ goto $label$17 }
	CALL _ZdlPv($10)
	
.LABEL $label$17
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$16 }
	$7 = *(($4 + [88]))
	goto $label$14 
	
.LABEL $label$15
	$7 = $9
	
.LABEL $label$14
	*($8) = $9
	CALL _ZdlPv($7)
	
.LABEL $label$13
	CALL $13(($4 + [128]))
	$global$0 = ($4 + [400])
}

void .FUNC $31 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [320])
	$global$0 = $4
	*(($4 + [72])) = [0]
	*($4 + [56]) = (int_64)-1
	*($4 + [64]) = (int_64)0
	*($4 + [76]) = [0]
	$5 = *($0)
	*($4 + [40]) = $5
	*($4 + [48]) = $5
	$6 = [0]
	$7 = CALL db_find_i64($5, $5, (int_64)6820310642650513408, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $5(($4 + [40]), $7)
	CALL eosio_assert(((int_32)*($6 + [152]) == (int_32)($4 + [40])), [10705])
	
.LABEL $label$1
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [9640])
	CALL eosio_assert(*($6 + [81]), [9899])
	CALL eosio_assert(((int_32)*($6 + [82]) ^ (int_32)[1]), [10061])
	CALL require_auth(*($6 + [48]))
	if ( ((int_64)*($6 + [136]) < (int_64)1) ){ goto $label$2 }
	$5 = *($0)
	*($4 + [256]) = [8850]
	*($4 + [260]) = CALL $90([8850])
	*($4 + [16]) = *($4 + [256])
	*($4 + [32]) = *(CALL $2(($4 + [80]), ($4 + [16])))
	*($4 + [24]) = $5
	*($4 + [256]) = [9966]
	*($4 + [260]) = CALL $90([9966])
	*($4 + [8]) = *($4 + [256])
	$5 = *(CALL $2(($4 + [80]), ($4 + [8])))
	*($4 + [256]) = [9978]
	*($4 + [260]) = CALL $90([9978])
	*($4) = *($4 + [256])
	$1 = *(CALL $2(($4 + [80]), $4))
	*(($4 + [104])) = *(($6 + [144]))
	*($4 + [88]) = $2
	*($4 + [80]) = *($0)
	*($4 + [96]) = *($6 + [136])
	CALL $78(($4 + [112]), $3)
	$3 = CALL $25(($4 + [256]), ($4 + [24]), $5, $1, ($4 + [80]))
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($4 + [120])))
	
.LABEL $label$3
	CALL $10(($4 + [80]), $3)
	$8 = *($4 + [80])
	CALL send_inline($8, (*($4 + [84]) - $8))
	$8 = *($4 + [80])
	if ( ($8 == 0) ){ goto $label$4 }
	*($4 + [84]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$4
	$8 = *($3 + [28])
	if ( ($8 == 0) ){ goto $label$5 }
	*(($3 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$5
	$8 = *($3 + [16])
	if ( ($8 == 0) ){ goto $label$2 }
	*(($3 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$2
	$1 = *($0)
	CALL eosio_assert($7, [10788])
	CALL eosio_assert(((int_32)*($6 + [152]) == (int_32)($4 + [40])), [10823])
	CALL eosio_assert(((int_64)*($4 + [40]) == (int_64)CALL $fimport$3()), [10869])
	*($6 + [82]) = [1]
	$0 = ($6 + [56])
	*($4 + [240]) = *($0)
	$5 = *($6)
	CALL eosio_assert([1], [10920])
	*($4 + [32]) = (($4 + [80]) + [147])
	*($4 + [28]) = ($4 + [80])
	*($4 + [24]) = ($4 + [80])
	*($4 + [248]) = ($4 + [24])
	*($4 + [260]) = ($6 + [8])
	*($4 + [256]) = $6
	*($4 + [264]) = ($6 + [16])
	*($4 + [268]) = ($6 + [24])
	*($4 + [272]) = ($6 + [40])
	*($4 + [276]) = ($6 + [48])
	*($4 + [280]) = $0
	*($4 + [284]) = ($6 + [64])
	*($4 + [288]) = ($6 + [72])
	*($4 + [292]) = ($6 + [80])
	*($4 + [296]) = ($6 + [81])
	*($4 + [300]) = ($6 + [82])
	*($4 + [304]) = ($6 + [88])
	*($4 + [308]) = ($6 + [104])
	*($4 + [312]) = ($6 + [120])
	*($4 + [316]) = ($6 + [136])
	CALL $6(($4 + [256]), ($4 + [248]))
	CALL db_update_i64(*($6 + [156]), $1, ($4 + [80]), [147])
	$3 = (($4 + [40]) + [16])
	if ( (uint_64)($5 <= *($3)) ){ goto $label$6 }
	*($3) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($4 + [256]) = *($0)
	if ( (CALL $89(($4 + [240]), ($4 + [256]), [8]) == 0) ){ goto $label$7 }
	$0 = ($6 + [160])
	$6 = *($0)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$8 }
	$6 = CALL db_idx64_find_primary(*($4 + [40]), *(($4 + [48])), (int_64)6820310642650513408, ($4 + [248]), $5)
	*($0) = $6
	
.LABEL $label$8
	CALL db_idx64_update($6, $1, ($4 + [256]))
	
.LABEL $label$7
	$3 = *($4 + [64])
	if ( ($3 == 0) ){ goto $label$9 }
	$7 = ($4 + [68])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$13 }
	CALL _ZdlPv($0)
	
.LABEL $label$13
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$12 }
	$6 = *(($4 + [64]))
	goto $label$10 
	
.LABEL $label$11
	$6 = $3
	
.LABEL $label$10
	*($7) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$9
	$global$0 = ($4 + [320])
}