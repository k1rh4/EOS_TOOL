(data (i32.const 4) "\a0i\00\00")
(data (i32.const 16) "receiver: \00")
(data (i32.const 32) ", code: \00")
(data (i32.const 48) ", action: \00")
(data (i32.const 64) "\n\00")
(data (i32.const 80) "transfer\00")
(data (i32.const 96) "eosio.token\00")
(data (i32.const 112) "eostgctoken1\00")
(data (i32.const 128) "Must transfer EOS or TGC\00")
(data (i32.const 160) "read\00")
(data (i32.const 176) "global.state\00")
(data (i32.const 192) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 256) "invest\00")
(data (i32.const 272) "Not allow\00")
(data (i32.const 288) "Not this payer\00")
(data (i32.const 304) "Payer have request\00")
(data (i32.const 336) "Payer no money left\00")
(data (i32.const 368) "cannot pass end iterator to modify\00")
(data (i32.const 416) "object passed to modify is not in multi_index\00")
(data (i32.const 464) "cannot modify objects in table of another contract\00")
(data (i32.const 528) "updater cannot change primary key when modifying an object\00")
(data (i32.const 592) "write\00")
(data (i32.const 608) "error reading iterator\00")
(data (i32.const 640) "invalid symbol name\00")
(data (i32.const 672) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 736) "get\00")
(data (i32.const 752) "Must transfer to self.\00")
(data (i32.const 784) "eostgcfirst1\00")
(data (i32.const 800) "eostgclucky1\00")
(data (i32.const 816) "eostgcgame11\00")
(data (i32.const 832) "eostgcpriv11\00")
(data (i32.const 848) "eostgcbonus1\00")
(data (i32.const 864) "private\00")
(data (i32.const 880) "logic failed.\00")
(data (i32.const 896) "disable\00")
(data (i32.const 912) "contract closed.\00")
(data (i32.const 944) "default\00")
(data (i32.const 960) "logic failed.(state)\00")
(data (i32.const 992) "priv.mintgc\00")
(data (i32.const 1008) "priv.maxtgc\00")
(data (i32.const 1024) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1088) "Amount out of range\00")
(data (i32.const 1120) "attempt to add asset with different symbol\00")
(data (i32.const 1168) "addition underflow\00")
(data (i32.const 1200) "addition overflow\00")
(data (i32.const 1232) "Total invest out of range\00")
(data (i32.const 1264) "cannot create objects in table of another contract\00")
(data (i32.const 1328) "priv.canback\00")
(data (i32.const 1344) "no\00")
(data (i32.const 1360) "yes\00")
(data (i32.const 1376) "Not Allow back.\00")
(data (i32.const 1392) "priv.givetgc\00")
(data (i32.const 1408) "priv.locktgc\00")
(data (i32.const 1424) "Payer not exists.\00")
(data (i32.const 1456) "Must back all TGC.\00")
(data (i32.const 1488) "logic failed.1\00")
(data (i32.const 1504) "logic failed 2.\00")
(data (i32.const 1520) "cannot pass end iterator to erase\00")
(data (i32.const 1568) "cannot increment end iterator\00")
(data (i32.const 1600) "active\00")
(data (i32.const 1616) "Returned the EOS you have participated in private placement\00")
(data (i32.const 1680) "object passed to erase is not in multi_index\00")
(data (i32.const 1728) "cannot erase objects in table of another contract\00")
(data (i32.const 1792) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1856) "priv.mineos\00")
(data (i32.const 1872) "priv.maxeos\00")
(data (i32.const 1888) "Amount nvest out of range\00")
(data (i32.const 1920) "You participated in the private placement\00")
(data (i32.const 1968) "Must private or invest\00")
(data (i32.const 2000) "Must > 0\00")
(data (i32.const 2016) "is function: \00")
(data (i32.const 2032) "unlock\00")
(data (i32.const 2048) "Must less then priv_locked\00")
(data (i32.const 2080) "Must less then invest_locked\00")
(data (i32.const 2112) "back your invest\00")
(data (i32.const 2144) "Must TGC.\00")
(data (i32.const 10560) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$7 (param i32)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$10 (param i32 i32)))
(import "env" "memcpy" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "printn" (func $fimport$12 (param i64)))
(import "env" "prints" (func $fimport$13 (param i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$15 (param i64)))
(import "env" "require_auth2" (func $fimport$16 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$17 (param i64)))
(import "env" "send_inline" (func $fimport$18 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z8strsplitNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEc" (func $5))
(export "apply" (func $7))
(export "malloc" (func $49))
(export "free" (func $52))
(export "memchr" (func $61))
(export "memcmp" (func $62))
(export "strlen" (func $63))
(table $0 5 5 anyfunc)
(elem (i32.const 0) $64 $12 $8 $14 $10)



void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [144])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [416])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [464])
	$4 = *($1)
	*($1 + [72]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [528])
	*($5 + [96]) = ($5 + [80])
	*($5 + [92]) = $5
	*($5 + [88]) = $5
	*($5 + [104]) = ($5 + [88])
	*($5 + [116]) = ($1 + [8])
	*($5 + [112]) = $1
	*($5 + [120]) = ($1 + [24])
	*($5 + [124]) = ($1 + [40])
	*($5 + [128]) = ($1 + [48])
	*($5 + [132]) = ($1 + [64])
	*($5 + [136]) = ($1 + [72])
	CALL $19(($5 + [112]), ($5 + [104]))
	CALL db_update_i64(*($1 + [84]), $2, $5, [80])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [144])
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [592])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [592])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [592])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [592])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [592])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [592])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [592])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [592])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [592])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [592])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [592])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [592])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [592])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $29 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [160])
	*([0] + [4]) = $17
	*($17 + [136]) = $1
	$5 = ($0 + [8])
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [1856]
	$12 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$6 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$6 = ($6 + [165])
	goto $label$4 
	
.LABEL $label$6
	$13 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$2
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$1 }
	$7 = *(($0 + [32]))
	$14 = *(($0 + [36]))
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$7 }
	$9 = ($14 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$8:
	if ( ((int_64)*(*($9)) == (int_64)$12) ){ goto $label$7 }
	$14 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$12 }
	$9 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [192])
	if ( $9 ){ goto $label$11 }
	$15 = (int_64)10000
	goto $label$9 
	
.LABEL $label$12
	$9 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)4982871467403247616, $12)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$10 }
	$9 = CALL $16($5, $9)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [192])
	
.LABEL $label$11
	$15 = *($9 + [8])
	goto $label$9 
	
.LABEL $label$10
	$15 = (int_64)10000
	
.LABEL $label$9
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [1872]
	$12 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$18 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$6 = ($6 + [165])
	goto $label$16 
	
.LABEL $label$18
	$13 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$14
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$13 }
	$7 = *(($0 + [32]))
	$14 = *(($0 + [36]))
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$19 }
	$9 = ($14 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$20:
	if ( ((int_64)*(*($9)) == (int_64)$12) ){ goto $label$19 }
	$14 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$20 }
	
.LABEL $label$19
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$24 }
	$9 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [192])
	if ( $9 ){ goto $label$23 }
	$16 = (int_64)100000000
	goto $label$21 
	
.LABEL $label$24
	$9 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)4982871467403247616, $12)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$22 }
	$9 = CALL $16($5, $9)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [192])
	
.LABEL $label$23
	$16 = *($9 + [8])
	goto $label$21 
	
.LABEL $label$22
	$16 = (int_64)100000000
	
.LABEL $label$21
	CALL eosio_assert((uint_64)(((int_64)$15 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [672])
	$11 = (int_64)5459781
	$9 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	
.LOOP $label$29:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$29 }
	
.LABEL $label$28
	$6 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$6 = [0]
	
.LABEL $label$25
	CALL eosio_assert($6, [640])
	CALL eosio_assert((uint_64)(((int_64)$16 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [672])
	$11 = (int_64)5459781
	$9 = [0]
	
.LOOP $label$32:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$33 }
	
.LOOP $label$34:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$31 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$34 }
	
.LABEL $label$33
	$6 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$6 = [0]
	
.LABEL $label$30
	CALL eosio_assert($6, [640])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)1397703940), [1024])
	$9 = [0]
	if ( ((int_64)*($3) < (int_64)$15) ){ goto $label$35 }
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)1397703940), [1024])
	$9 = ((int_64)*($3) <= (int_64)$16)
	
.LABEL $label$35
	CALL eosio_assert($9, [1888])
	$11 = (int_64)0
	$13 = (int_64)59
	$9 = [1392]
	$12 = (int_64)0
	
.LOOP $label$36:
	$10 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$37 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$6 = ($6 + [165])
	goto $label$38 
	
.LABEL $label$39
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$37
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$10 | (int_64)$12)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$36 }
	$7 = *(($0 + [32]))
	$14 = *(($0 + [36]))
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$40 }
	$9 = ($14 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$41:
	if ( ((int_64)*(*($9)) == (int_64)$12) ){ goto $label$40 }
	$14 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$41 }
	
.LABEL $label$40
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$45 }
	$9 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [192])
	if ( $9 ){ goto $label$44 }
	$15 = (int_64)3000
	goto $label$42 
	
.LABEL $label$45
	$9 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)4982871467403247616, $12)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$43 }
	$9 = CALL $16($5, $9)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [192])
	
.LABEL $label$44
	$15 = *($9 + [8])
	goto $label$42 
	
.LABEL $label$43
	$15 = (int_64)3000
	
.LABEL $label$42
	$11 = (int_64)0
	$13 = (int_64)59
	$9 = [1408]
	$12 = (int_64)0
	
.LOOP $label$46:
	$10 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$47 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$49 }
	$6 = ($6 + [165])
	goto $label$48 
	
.LABEL $label$49
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$48
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$47
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$10 | (int_64)$12)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$46 }
	$7 = *(($0 + [32]))
	$14 = *(($0 + [36]))
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$50 }
	$9 = ($14 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$51:
	if ( ((int_64)*(*($9)) == (int_64)$12) ){ goto $label$50 }
	$14 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$51 }
	
.LABEL $label$50
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$55 }
	$9 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [192])
	if ( $9 ){ goto $label$54 }
	$13 = (int_64)7000
	goto $label$52 
	
.LABEL $label$55
	$9 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)4982871467403247616, $12)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$53 }
	$9 = CALL $16($5, $9)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [192])
	
.LABEL $label$54
	$13 = *($9 + [8])
	goto $label$52 
	
.LABEL $label$53
	$13 = (int_64)7000
	
.LABEL $label$52
	$15 = ((int_64)*($3) * (int_64)$15)
	CALL eosio_assert((uint_64)(((int_64)$15 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [672])
	$11 = (int_64)4409172
	$9 = [0]
	
.LOOP $label$58:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$57 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$59 }
	
.LOOP $label$60:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$57 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$60 }
	
.LABEL $label$59
	$6 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$58 }
	goto $label$56 
	
.LABEL $label$57
	$6 = [0]
	
.LABEL $label$56
	CALL eosio_assert($6, [640])
	*($17 + [128]) = (int_64)1128748036
	$11 = ((int_64)*($3) * (int_64)$13)
	*($17 + [120]) = $11
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [672])
	$11 = (int_64)4409172
	$9 = [0]
	
.LOOP $label$63:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$62 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$64 }
	
.LOOP $label$65:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$62 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$65 }
	
.LABEL $label$64
	$6 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$63 }
	goto $label$61 
	
.LABEL $label$62
	$6 = [0]
	
.LABEL $label$61
	CALL eosio_assert($6, [640])
	$5 = *(($0 + [72]))
	$14 = *(($0 + [76]))
	if ( ((int_32)$14 == (int_32)$5) ){ goto $label$66 }
	$9 = ($14 + [-24])
	$8 = ([0] - $5)
	
.LOOP $label$67:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$66 }
	$14 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$67 }
	
.LABEL $label$66
	$6 = ($0 + [48])
	if ( ((int_32)$14 == (int_32)$5) ){ goto $label$71 }
	$9 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)$6), [192])
	if ( $9 ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$71
	$9 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$69 }
	$9 = CALL $17($6, $9)
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)$6), [192])
	
.LABEL $label$70
	$11 = *($9 + [8])
	$13 = *(($9 + [16]))
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)$13), [1120])
	$11 = ((int_64)$11 + (int_64)*($3))
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [1168])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [1200])
	CALL eosio_assert(((int_64)$13 == (int_64)1397703940), [1024])
	CALL eosio_assert(((int_64)$11 <= (int_64)$16), [1232])
	*($17 + [16]) = $3
	*($17 + [20]) = ($17 + [120])
	CALL eosio_assert([1], [368])
	CALL $43($6, $9, (int_64)0, ($17 + [16]))
	goto $label$68 
	
.LABEL $label$69
	$11 = *($0)
	*($17 + [20]) = $3
	*($17 + [16]) = ($17 + [136])
	*($17 + [24]) = ($17 + [120])
	CALL $44(($17 + [80]), $6, $11, ($17 + [16]))
	
.LABEL $label$68
	$1 = *($0)
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [1600]
	$12 = (int_64)0
	
.LOOP $label$72:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$77 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$76 }
	$6 = ($6 + [165])
	goto $label$75 
	
.LABEL $label$77
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$76
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$75
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$74
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$73
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$72 }
	*($17 + [72]) = $12
	*($17 + [64]) = $1
	$11 = (int_64)0
	$13 = (int_64)59
	$9 = [112]
	$12 = (int_64)0
	
.LOOP $label$78:
	$10 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$79 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$81 }
	$6 = ($6 + [165])
	goto $label$80 
	
.LABEL $label$81
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$80
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$79
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$10 | (int_64)$12)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$78 }
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [80]
	$1 = (int_64)0
	
.LOOP $label$82:
	if ( ((uint_64)$11 > (uint_64)(int_64)7) ){ goto $label$87 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$86 }
	$6 = ($6 + [165])
	goto $label$85 
	
.LABEL $label$87
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$84 }
	goto $label$83 
	
.LABEL $label$86
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$85
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$84
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$83
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$1 = ((int_64)$13 | (int_64)$1)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$82 }
	*(($17 + [8])) = [0]
	*($17) = (int_64)0
	$9 = CALL strlen([1920])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$88 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$91 }
	*($17) = ($9 << [1])
	$6 = ($17 | [1])
	if ( $9 ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$91
	$14 = (($9 + [16]) & [-16])
	$6 = CALL $53($14)
	*($17) = ($14 | [1])
	*($17 + [8]) = $6
	*($17 + [4]) = $9
	
.LABEL $label$90
	CALL memcpy($6, [1920], $9)
	
.LABEL $label$89
	*(($6 + $9)) = [0]
	*(($17 + [40])) = (int_64)1128748036
	*($17 + [16]) = *($0)
	*($17 + [24]) = *($17 + [136])
	$9 = ($17 + [8])
	*(($17 + [56])) = *($9)
	*($17 + [32]) = $15
	*($17 + [48]) = *($17)
	*($17) = [0]
	*($17 + [4]) = [0]
	*($9) = [0]
	$9 = CALL $37(($17 + [80]), ($17 + [64]), $12, $1, ($17 + [16]))
	CALL $38(($17 + [144]), $9)
	$6 = *($17 + [144])
	CALL send_inline($6, (*($17 + [148]) - $6))
	$6 = *($17 + [144])
	if ( ($6 == 0) ){ goto $label$92 }
	*($17 + [148]) = $6
	CALL $54($6)
	
.LABEL $label$92
	$6 = *($9 + [28])
	if ( ($6 == 0) ){ goto $label$93 }
	*(($9 + [32])) = $6
	CALL $54($6)
	
.LABEL $label$93
	$6 = *($9 + [16])
	if ( ($6 == 0) ){ goto $label$94 }
	*(($9 + [20])) = $6
	CALL $54($6)
	
.LABEL $label$94
	if ( ((*(($17 + [48])) & [1]) == 0) ){ goto $label$95 }
	CALL $54(*(($17 + [56])))
	
.LABEL $label$95
	if ( ((*($17) & [1]) == 0) ){ goto $label$96 }
	CALL $54(*(($17 + [8])))
	
.LABEL $label$96
	*([0] + [4]) = ($17 + [160])
	return (unreachable)
	
.LABEL $label$88
	CALL $55($17)
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $53($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $58($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $54($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [160])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [160])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [160])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $20 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [672])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [640])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [672])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [640])
	*(($2 = ($0 + [56]))) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [672])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [640])
	return $0
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $53(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $58($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $54($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $54($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $53(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $58($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $54($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $54($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $59(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $59(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $54(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $54(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $26(*($1), ($0 + [32]))
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [736])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $28($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [160])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $27($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $56($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $53($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $56($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $54($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $55($7)
	return (unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $50([2156], $0)
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [144])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [416])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [464])
	$3 = *($3)
	*($1 + [72]) = (int_64)0
	*($1 + [48]) = (int_64))(*($1 + [48]) - *($3))
	$4 = *($1)
	CALL eosio_assert([1], [528])
	*($5 + [96]) = ($5 + [80])
	*($5 + [92]) = $5
	*($5 + [88]) = $5
	*($5 + [104]) = ($5 + [88])
	*($5 + [116]) = ($1 + [8])
	*($5 + [112]) = $1
	*($5 + [120]) = ($1 + [24])
	*($5 + [124]) = ($1 + [40])
	*($5 + [128]) = ($1 + [48])
	*($5 + [132]) = ($1 + [64])
	*($5 + [136]) = ($1 + [72])
	CALL $19(($5 + [112]), ($5 + [104]))
	CALL db_update_i64(*($1 + [84]), $2, $5, [80])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [144])
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [144])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [416])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [464])
	$4 = *($1)
	$5 = *($3)
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)*(($1 + [16]))), [1120])
	$6 = ((int_64)*($1 + [8]) + (int_64)*($5))
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1168])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1200])
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [32]))), [1120])
	$6 = ((int_64)*($1 + [24]) + (int_64)*($3))
	*($1 + [24]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1168])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [1200])
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [528])
	*($7 + [96]) = ($7 + [80])
	*($7 + [92]) = $7
	*($7 + [88]) = $7
	*($7 + [104]) = ($7 + [88])
	*($7 + [116]) = ($1 + [8])
	*($7 + [112]) = $1
	*($7 + [120]) = ($1 + [24])
	*($7 + [124]) = ($1 + [40])
	*($7 + [128]) = ($1 + [48])
	*($7 + [132]) = ($1 + [64])
	*($7 + [136]) = ($1 + [72])
	CALL $19(($7 + [112]), ($7 + [104]))
	CALL db_update_i64(*($1 + [84]), $2, $7, [80])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [144])
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [592])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [592])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [592])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [592])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $42(*($1), ($0 + [32]))
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [592])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [592])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [144])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [416])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [464])
	*($1 + [24]) = (int_64))(*($1 + [24]) - *(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [528])
	*($5 + [96]) = ($5 + [80])
	*($5 + [92]) = $5
	*($5 + [88]) = $5
	*($5 + [104]) = ($5 + [88])
	*($5 + [116]) = ($1 + [8])
	*($5 + [112]) = $1
	*($5 + [120]) = ($1 + [24])
	*($5 + [124]) = ($1 + [40])
	*($5 + [128]) = ($1 + [48])
	*($5 + [132]) = ($1 + [64])
	*($5 + [136]) = ($1 + [72])
	CALL $19(($5 + [112]), ($5 + [104]))
	CALL db_update_i64(*($1 + [84]), $2, $5, [80])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [144])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [160])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	$9 = $10
	*([0] + [4]) = $10
	$7 = *($0 + [4])
	*($1) = *(*($7))
	$2 = *($0)
	$8 = *($7 + [4])
	*($1 + [8]) = *($8)
	*(($1 + [16])) = *(($8 + [8]))
	$7 = *($7 + [8])
	*($1 + [24]) = *($7)
	*(($1 + [32])) = *(($7 + [8]))
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [672])
	$5 = ($1 + [40])
	$4 = ($1 + [24])
	$3 = ($1 + [8])
	$6 = (int_64)4409172
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [640])
	*(($1 + [56])) = (int_64)1128748036
	*($1 + [48]) = (int_64)0
	*($1 + [64]) = (int_64)0
	*($1 + [72]) = (int_64)0
	$8 = $10
	$7 = ($8 + [-80])
	*([0] + [4]) = $7
	*($9 + [12]) = $7
	*($9 + [8]) = $7
	*($9 + [16]) = $8
	*($9 + [24]) = ($9 + [8])
	*($9 + [36]) = $3
	*($9 + [32]) = $1
	*($9 + [40]) = $4
	*($9 + [44]) = $5
	*($9 + [48]) = ($1 + [48])
	*($9 + [52]) = ($1 + [64])
	*($9 + [56]) = ($1 + [72])
	CALL $19(($9 + [32]), ($9 + [24]))
	$6 = *($1)
	*($1 + [84]) = CALL db_store_i64(*($2 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $6, $7, [80])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [64])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1264])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $53([96])
	CALL $20($3)
	*($3 + [80]) = $1
	CALL $45(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [84])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $22(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $54($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $51 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10646]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10648])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10646]) = [1]
	$7 = ($7 << [16])
	*([0] + [10648]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10648])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10648]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10646]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10646]) = [1]
	$3 = ($3 << [16])
	*([0] + [10648]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10648])
	
.LABEL $label$8
	*([0] + [10648]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $60 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $53($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $8 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [144])
	*([0] + [4]) = $14
	CALL require_auth(*($0))
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)1128748036), [2144])
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [864]
	$11 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$10 > (uint_64)(int_64)6) ){ goto $label$6 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$1 }
	$8 = [1]
	if ( ((int_64)$11 == (int_64)$2) ){ goto $label$7 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [256]
	$11 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$13 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$4 = ($4 + [165])
	goto $label$11 
	
.LABEL $label$13
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$9
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$8 }
	$8 = ((int_64)$11 == (int_64)$2)
	
.LABEL $label$7
	CALL eosio_assert($8, [1968])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [2000])
	CALL prints([2016])
	CALL prints([2032])
	CALL prints([64])
	$6 = *(($0 + [72]))
	$13 = *(($0 + [76]))
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$14 }
	$8 = ($13 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$15:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$14 }
	$13 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $7) != (int_32)[-24]) ){ goto $label$15 }
	
.LABEL $label$14
	$5 = ($0 + [48])
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$17 }
	$13 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [80]) == (int_32)$5), [192])
	goto $label$16 
	
.LABEL $label$17
	$13 = [0]
	$8 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$16 }
	$13 = CALL $17($5, $8)
	CALL eosio_assert(((int_32)*($13 + [80]) == (int_32)$5), [192])
	
.LABEL $label$16
	$7 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($7, [288])
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [864]
	$11 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$10 > (uint_64)(int_64)6) ){ goto $label$23 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$4 = ($4 + [165])
	goto $label$21 
	
.LABEL $label$23
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$19
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$18 }
	if ( ((int_64)$11 != (int_64)$2) ){ goto $label$25 }
	CALL eosio_assert(((int_64)*($13 + [24]) >= (int_64)*($3)), [2048])
	*($14 + [24]) = $3
	CALL eosio_assert($7, [368])
	CALL $47($5, $13, (int_64)0, ($14 + [24]))
	goto $label$24 
	
.LABEL $label$25
	CALL eosio_assert(((int_64)*($13 + [48]) >= (int_64)*($3)), [2080])
	*($14 + [24]) = $3
	CALL eosio_assert($7, [368])
	CALL $48($5, $13, (int_64)0, ($14 + [24]))
	
.LABEL $label$24
	$6 = *(($0 + [72]))
	$13 = *(($0 + [76]))
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$26 }
	$8 = ($13 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$27:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$26 }
	$13 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $7) != (int_32)[-24]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$29 }
	$8 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$5), [192])
	goto $label$28 
	
.LABEL $label$29
	$8 = [0]
	$4 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$28 }
	$8 = CALL $17($5, $4)
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$5), [192])
	
.LABEL $label$28
	$10 = (int_64)0
	if ( ((int_64)*($8 + [24]) != (int_64)0) ){ goto $label$30 }
	if ( ((int_64)*($8 + [48]) != (int_64)0) ){ goto $label$30 }
	$4 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($4, [1520])
	CALL eosio_assert($4, [1568])
	$4 = CALL db_next_i64(*($8 + [84]), ($14 + [24]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$31 }
	CALL $17($5, $4)
	
.LABEL $label$31
	CALL $36($5, $8)
	
.LABEL $label$30
	CALL require_recipient($1)
	$2 = *($0)
	$9 = (int_64)59
	$8 = [1600]
	$11 = (int_64)0
	
.LOOP $label$32:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$37 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$4 = ($4 + [165])
	goto $label$35 
	
.LABEL $label$37
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$34
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$33
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$32 }
	*($14 + [80]) = $11
	*($14 + [72]) = $2
	$10 = (int_64)0
	$12 = (int_64)59
	$8 = [112]
	$11 = (int_64)0
	
.LOOP $label$38:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$39 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$4 = ($4 + [165])
	goto $label$40 
	
.LABEL $label$41
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$39
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$38 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [80]
	$2 = (int_64)0
	
.LOOP $label$42:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$47 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$4 = ($4 + [165])
	goto $label$45 
	
.LABEL $label$47
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$46
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$44
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$43
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$2 = ((int_64)$12 | (int_64)$2)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$42 }
	*(($14 + [16])) = [0]
	*($14 + [8]) = (int_64)0
	$8 = CALL strlen([2112])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$48 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$51 }
	*($14 + [8]) = ($8 << [1])
	$4 = (($14 + [8]) | [1])
	if ( $8 ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	$13 = (($8 + [16]) & [-16])
	$4 = CALL $53($13)
	*($14 + [8]) = ($13 | [1])
	*($14 + [16]) = $4
	*($14 + [12]) = $8
	
.LABEL $label$50
	CALL memcpy($4, [2112], $8)
	
.LABEL $label$49
	*(($4 + $8)) = [0]
	*(($14 + [52])) = *(($3 + [12]))
	*(($14 + [48])) = *(($3 + [8]))
	*(($14 + [44])) = *(($3 + [4]))
	*($14 + [32]) = $1
	*($14 + [24]) = *($0)
	*($14 + [40]) = *($3)
	$8 = (($14 + [8]) + [8])
	*(($14 + [64])) = *($8)
	*($14 + [56]) = *($14 + [8])
	*($14 + [8]) = [0]
	*($14 + [12]) = [0]
	*($8) = [0]
	$8 = CALL $37(($14 + [88]), ($14 + [72]), $11, $2, ($14 + [24]))
	CALL $38(($14 + [128]), $8)
	$4 = *($14 + [128])
	CALL send_inline($4, (*($14 + [132]) - $4))
	$4 = *($14 + [128])
	if ( ($4 == 0) ){ goto $label$52 }
	*($14 + [132]) = $4
	CALL $54($4)
	
.LABEL $label$52
	$4 = *($8 + [28])
	if ( ($4 == 0) ){ goto $label$53 }
	*(($8 + [32])) = $4
	CALL $54($4)
	
.LABEL $label$53
	$4 = *($8 + [16])
	if ( ($4 == 0) ){ goto $label$54 }
	*(($8 + [20])) = $4
	CALL $54($4)
	
.LABEL $label$54
	if ( ((*(($14 + [56])) & [1]) == 0) ){ goto $label$55 }
	CALL $54(*(($14 + [64])))
	
.LABEL $label$55
	if ( ((*($14 + [8]) & [1]) == 0) ){ goto $label$56 }
	CALL $54(*(($14 + [16])))
	
.LABEL $label$56
	*([0] + [4]) = ($14 + [144])
	return (unreachable)
	
.LABEL $label$48
	CALL $55(($14 + [8]))
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [96])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = [0]
	$6 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $3)
	
.LABEL $label$1
	*((($10 + [16]) + [24])) = (int_64)1398362884
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = (int_64)0
	*($10 + [32]) = (int_64)0
	CALL eosio_assert([1], [672])
	$7 = (int_64)5462355
	
.LOOP $label$5:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($8, [640])
	*($10 + [84]) = $6
	*($10 + [80]) = $6
	*($10 + [88]) = ($6 + $3)
	*($10 + [48]) = ($10 + [80])
	*($10 + [64]) = ($10 + [16])
	CALL $46(($10 + [64]), ($10 + [48]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($6)
	
.LABEL $label$8
	$7 = *((($10 + [16]) + [8]))
	*(($10 + [60])) = *(($10 + [44]))
	*(($1 = (($10 + [48]) + [8]))) = *(($10 + [40]))
	$4 = *($10 + [16])
	*($10 + [48]) = *($10 + [32])
	*($10 + [52]) = *(($10 + [36]))
	*((($10 + [64]) + [8])) = *($1)
	*($10 + [64]) = *($10 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$9 = *((*($1) + $9))
	
.LABEL $label$9
	$5 = *((($10 + [64]) + [8]))
	*((($10 + [80]) + [8])) = $5
	*(($10 + [8])) = $5
	$5 = *($10 + [64])
	*($10 + [80]) = $5
	*($10) = $5
	CALL void $1((int_32 $4), (int_64 $7), (int_64 $10), (int_32 $9))
	*([0] + [4]) = ($10 + [96])
	return [1]
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $53(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $58($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $54(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $54($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [160])
	*([0] + [4]) = $11
	CALL prints([16])
	CALL printn($0)
	CALL prints([32])
	CALL printn($1)
	CALL prints([48])
	CALL printn($2)
	CALL prints([64])
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [80]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$7 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [96]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$13 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$8 }
	$6 = [1]
	if ( ((int_64)$9 == (int_64)$1) ){ goto $label$14 }
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [112]
	$9 = (int_64)0
	
.LOOP $label$15:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$16 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$16
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$15 }
	$6 = ((int_64)$9 == (int_64)$1)
	
.LABEL $label$14
	CALL eosio_assert($6, [128])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$20 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [80]
	$9 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$26 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$3 = ($3 + [165])
	goto $label$24 
	
.LABEL $label$26
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$22
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$21 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$19 }
	
.LABEL $label$20
	*(($11 + [88])) = $0
	*(($11 + [96])) = (int_64)-1
	*(($11 + [104])) = (int_64)0
	*(($11 + [112])) = [0]
	*($11 + [80]) = $0
	*($11 + [72]) = $0
	*($11 + [120]) = $0
	*(($11 + [128])) = $0
	*(($11 + [136])) = (int_64)-1
	*(($11 + [144])) = [0]
	*(($11 + [148])) = [0]
	*(($11 + [152])) = [0]
	if ( ((int_64)$2 > (int_64)-3106564276286914561) ){ goto $label$30 }
	if ( ((int_64)$2 == (int_64)-4995149741525303296) ){ goto $label$29 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$27 }
	*($11 + [52]) = [0]
	*($11 + [48]) = [1]
	*($11 + [24 align=4]) = *($11 + [48])
	CALL $13(($11 + [72]), ($11 + [24]))
	goto $label$27 
	
.LABEL $label$30
	if ( ((int_64)$2 == (int_64)4982871454518345728) ){ goto $label$28 }
	if ( ((int_64)$2 != (int_64)-3106564276286914560) ){ goto $label$27 }
	*($11 + [68]) = [0]
	*($11 + [64]) = [2]
	*($11 + [8 align=4]) = *($11 + [64])
	CALL $9(($11 + [72]), ($11 + [8]))
	goto $label$27 
	
.LABEL $label$29
	*($11 + [44]) = [0]
	*($11 + [40]) = [3]
	*($11 + [32 align=4]) = *($11 + [40])
	CALL $15(($11 + [72]), ($11 + [32]))
	goto $label$27 
	
.LABEL $label$28
	*($11 + [60]) = [0]
	*($11 + [56]) = [4]
	*($11 + [16 align=4]) = *($11 + [56])
	CALL $11(($11 + [72]), ($11 + [16]))
	
.LABEL $label$27
	$4 = *(($11 + [144]))
	if ( ($4 == 0) ){ goto $label$31 }
	$5 = ($11 + [148])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$33 }
	
.LOOP $label$34:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$35 }
	CALL $54($3)
	
.LABEL $label$35
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$34 }
	$6 = *(($11 + [144]))
	goto $label$32 
	
.LABEL $label$33
	$6 = $4
	
.LABEL $label$32
	*($5) = $4
	CALL $54($6)
	
.LABEL $label$31
	$4 = *(($11 + [104]))
	if ( ($4 == 0) ){ goto $label$19 }
	$5 = ($11 + [108])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$37 }
	
.LOOP $label$38:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$39 }
	CALL $54($3)
	
.LABEL $label$39
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$38 }
	$6 = *(($11 + [104]))
	goto $label$36 
	
.LABEL $label$37
	$6 = $4
	
.LABEL $label$36
	*($5) = $4
	CALL $54($6)
	
.LABEL $label$19
	*([0] + [4]) = ($11 + [160])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _Z8strsplitNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEc (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = CALL $57($1, $2, [0])
	if ( ((int_32)$5 == (int_32)[-1]) ){ goto $label$2 }
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$3:
	CALL $60($7, $1, $6, ($5 - $6), $1)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($3)) ){ goto $label$5 }
	*($6) = *($7)
	$6 = ($7 + [8])
	*(($6 + [8])) = *($6)
	*($6) = [0]
	*($7) = [0]
	*($7 + [4]) = [0]
	*($4) = (*($4) + [12])
	goto $label$4 
	
.LABEL $label$5
	CALL $6($0, $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$4 }
	CALL $54(*(($7 + [8])))
	
.LABEL $label$4
	$6 = ($5 + [1])
	$5 = CALL $57($1, $2, $6)
	if ( ((int_32)$5 != (int_32)[-1]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL $60($7, $1, $6, [-1], $1)
	$1 = ($0 + [4])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [8]))) ){ goto $label$7 }
	*($6) = *($7)
	$6 = ($7 + [8])
	*(($6 + [8])) = *($6)
	*($6) = [0]
	*($7) = [0]
	*($7 + [4]) = [0]
	*($1) = (*($1) + [12])
	goto $label$6 
	
.LABEL $label$7
	CALL $6($0, $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$6 }
	CALL $54(*($7 + [8]))
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	*([0] + [4]) = $13
	CALL require_auth($1)
	$2 = ($0 + [8])
	$11 = (int_64)0
	$12 = (int_64)59
	$6 = [176]
	$7 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$7 = ((int_64)$10 | (int_64)$7)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$1 }
	$4 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$5 }
	$6 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($6)) == (int_64)$7) ){ goto $label$5 }
	$8 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$10 }
	$6 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$2), [192])
	if ( $6 ){ goto $label$9 }
	$9 = (int_64)0
	goto $label$7 
	
.LABEL $label$10
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)4982871467403247616, $7)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	$6 = CALL $16($2, $6)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$2), [192])
	
.LABEL $label$9
	$9 = *($6 + [8])
	goto $label$7 
	
.LABEL $label$8
	$9 = (int_64)0
	
.LABEL $label$7
	$11 = (int_64)0
	$10 = (int_64)59
	$6 = [256]
	$7 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$16 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$3 = ($3 + [165])
	goto $label$14 
	
.LABEL $label$16
	$12 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$12
	$6 = ($6 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$7 = ((int_64)$12 | (int_64)$7)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$11 }
	CALL eosio_assert(((int_64)$9 == (int_64)$7), [272])
	$4 = *(($0 + [72]))
	$8 = *(($0 + [76]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$17 }
	$6 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$18:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$17 }
	$8 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$18 }
	
.LABEL $label$17
	$3 = ($0 + [48])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$20 }
	$6 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$3), [192])
	goto $label$19 
	
.LABEL $label$20
	$6 = [0]
	$8 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$19 }
	$6 = CALL $17($3, $8)
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$3), [192])
	
.LABEL $label$19
	$8 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($8, [288])
	CALL eosio_assert((int_64)(*($6 + [72]) == 0), [304])
	CALL eosio_assert(((int_64)*($6 + [48]) > (int_64)0), [336])
	CALL eosio_assert($8, [368])
	CALL $18($3, $6, (int_64)0, ($13 + [8]))
	*([0] + [4]) = ($13 + [16])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [160])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [608])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $53([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [160])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [160])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [160])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $23(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $54($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [608])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $53([96])
	CALL $20($6)
	*($6 + [80]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [24])
	*($8 + [44]) = ($6 + [40])
	*($8 + [48]) = ($6 + [48])
	*($8 + [52]) = ($6 + [64])
	*($8 + [56]) = ($6 + [72])
	CALL $21(($8 + [32]), ($8 + [24]))
	*($6 + [84]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [84])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $22(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $54($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	CALL require_auth(*($0))
	$8 = (int_64)($3 == 0)
	$4 = *($0)
	$5 = *(($0 + [32]))
	$10 = *(($0 + [36]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$1 }
	$9 = ($10 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$1 }
	$10 = $9
	$7 = ($9 + [-24])
	$9 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = ( $2 ? $3 : $8 )
	$7 = ($0 + [8])
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$6 }
	$9 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$7), [192])
	if ( $9 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$9 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)4982871467403247616, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$4 }
	$9 = CALL $16($7, $9)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$7), [192])
	
.LABEL $label$5
	if ( ((int_64)*($9 + [8]) == (int_64)$2) ){ goto $label$3 }
	CALL eosio_assert([1], [368])
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$7), [416])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$2()), [464])
	*(($7 = ($9 + [8]))) = $2
	*($9 + [16]) = $3
	$1 = *($9)
	CALL eosio_assert([1], [528])
	CALL eosio_assert([1], [592])
	CALL memcpy(($11 + [16]), $9, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy((($11 + [16]) | [8]), $7, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy((($11 + [16]) + [16]), ($9 + [16]), [8])
	CALL db_update_i64(*($9 + [28]), (int_64)0, ($11 + [16]), [24])
	$9 = ($0 + [24])
	if ( (uint_64)($1 <= *($9)) ){ goto $label$3 }
	*($9) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	goto $label$3 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$2()), [1264])
	*(($9 = CALL $53([40])) + [24]) = $7
	*($9 + [8]) = $2
	*($9) = $1
	*($9 + [16]) = $3
	CALL eosio_assert([1], [592])
	CALL memcpy(($11 + [16]), $9, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy((($11 + [16]) | [8]), ($9 + [8]), [8])
	CALL eosio_assert([1], [592])
	CALL memcpy((($11 + [16]) + [16]), ($9 + [16]), [8])
	$1 = *($9)
	$10 = CALL db_store_i64(*(($0 + [16])), (int_64)4982871467403247616, $4, $1, ($11 + [16]), [24])
	*($9 + [28]) = $10
	$7 = ($0 + [24])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$7 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($11 + [8]) = $9
	$1 = *($9)
	*($11 + [16]) = $1
	*($11 + [4]) = $10
	$6 = ($0 + [36])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [40]))) ){ goto $label$9 }
	*($7 + [8]) = $1
	*($7 + [16]) = $10
	*($11 + [8]) = [0]
	*($7) = $9
	*($6) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $23(($0 + [32]), ($11 + [8]), ($11 + [16]), ($11 + [4]))
	
.LABEL $label$8
	$9 = *($11 + [8])
	*($11 + [8]) = [0]
	if ( ($9 == 0) ){ goto $label$3 }
	CALL $54($9)
	
.LABEL $label$3
	*([0] + [4]) = ($11 + [48])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [32])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $1)
	
.LABEL $label$1
	*($10 + [16]) = (int_64)0
	*($10 + [8]) = (int_64)0
	*($10 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [160])
	CALL memcpy(($10 + [8]), $8, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [160])
	$7 = (($10 + [8]) + [8])
	CALL memcpy($7, ($8 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [160])
	$6 = (($10 + [8]) + [16])
	CALL memcpy($6, ($8 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($6)
	$4 = *($7)
	$3 = *($10 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$9 = *((*($1) + $9))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $5), (int_64 $9))
	*([0] + [4]) = ($10 + [32])
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [144])
	*([0] + [4]) = $16
	$12 = *($0)
	if ( ((int_64)$12 == (int_64)$1) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$12 == (int_64)$2), [752])
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [112]
	$13 = (int_64)0
	
.LOOP $label$2:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$3 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$3
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$2 }
	if ( ((int_64)$13 == (int_64)$1) ){ goto $label$1 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [784]
	$13 = (int_64)0
	
.LOOP $label$6:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$7 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$5 = ($5 + [165])
	goto $label$8 
	
.LABEL $label$9
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$7
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$6 }
	if ( ((int_64)$13 == (int_64)$1) ){ goto $label$1 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [800]
	$13 = (int_64)0
	
.LOOP $label$10:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$11 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$5 = ($5 + [165])
	goto $label$12 
	
.LABEL $label$13
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$11
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$10 }
	if ( ((int_64)$13 == (int_64)$1) ){ goto $label$1 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [816]
	$13 = (int_64)0
	
.LOOP $label$14:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$15 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$5 = ($5 + [165])
	goto $label$16 
	
.LABEL $label$17
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$15
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$14 }
	if ( ((int_64)$13 == (int_64)$1) ){ goto $label$1 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [832]
	$13 = (int_64)0
	
.LOOP $label$18:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$19 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$5 = ($5 + [165])
	goto $label$20 
	
.LABEL $label$21
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$19
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$18 }
	if ( ((int_64)$13 == (int_64)$1) ){ goto $label$1 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [848]
	$13 = (int_64)0
	
.LOOP $label$22:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$23 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$5 = ($5 + [165])
	goto $label$24 
	
.LABEL $label$25
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$23
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$22 }
	if ( ((int_64)$13 == (int_64)$1) ){ goto $label$1 }
	$6 = ($0 + [8])
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [176]
	$13 = (int_64)0
	
.LOOP $label$26:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$27 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$5 = ($5 + [165])
	goto $label$28 
	
.LABEL $label$29
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$27
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$26 }
	$7 = *(($0 + [32]))
	$15 = *(($0 + [36]))
	if ( ((int_32)$15 == (int_32)$7) ){ goto $label$30 }
	$10 = ($15 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$31:
	if ( ((int_64)*(*($10)) == (int_64)$13) ){ goto $label$30 }
	$15 = $10
	$5 = ($10 + [-24])
	$10 = $5
	if ( ((int_32)($5 + $8) != (int_32)[-24]) ){ goto $label$31 }
	
.LABEL $label$30
	if ( ((int_32)$15 == (int_32)$7) ){ goto $label$35 }
	$10 = *(($15 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$6), [192])
	if ( $10 ){ goto $label$34 }
	$9 = (int_64)0
	goto $label$32 
	
.LABEL $label$35
	$10 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)4982871467403247616, $13)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$33 }
	$10 = CALL $16($6, $10)
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$6), [192])
	
.LABEL $label$34
	$9 = *($10 + [8])
	goto $label$32 
	
.LABEL $label$33
	$9 = (int_64)0
	
.LABEL $label$32
	$12 = (int_64)0
	$14 = (int_64)59
	$10 = [864]
	$13 = (int_64)0
	
.LOOP $label$36:
	if ( ((uint_64)$12 > (uint_64)(int_64)6) ){ goto $label$41 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$5 = ($5 + [165])
	goto $label$39 
	
.LABEL $label$41
	$11 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$40
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$38
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$37
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$11 | (int_64)$13)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$36 }
	if ( ((int_64)$9 != (int_64)$13) ){ goto $label$44 }
	$10 = [1]
	$12 = *($3 + [8])
	$5 = ((int_64)$12 == (int_64)1397703940)
	if ( $5 ){ goto $label$45 }
	$10 = ((int_64)$12 == (int_64)1128748036)
	
.LABEL $label$45
	CALL eosio_assert($10, [880])
	if ( ($5 == 0) ){ goto $label$43 }
	*(($10 = (($16 + [128]) + [8]))) = *(($3 + [8]))
	*($16 + [128]) = *($3)
	CALL $59(($16 + [112]), $4)
	*(($16 + [8])) = *($10)
	*($16) = *($16 + [128])
	CALL $29($0, $1, $2, $16, ($16 + [112]))
	if ( ((*($16 + [112]) & [1]) == 0) ){ goto $label$1 }
	CALL $54(*($16 + [120]))
	goto $label$1 
	
.LABEL $label$44
	$12 = (int_64)0
	$14 = (int_64)59
	$10 = [256]
	$13 = (int_64)0
	
.LOOP $label$46:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$51 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$50 }
	$5 = ($5 + [165])
	goto $label$49 
	
.LABEL $label$51
	$11 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$50
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$49
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$48
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$47
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$11 | (int_64)$13)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$46 }
	if ( ((int_64)$9 != (int_64)$13) ){ goto $label$42 }
	*(($10 = (($16 + [64]) + [8]))) = *(($3 + [8]))
	*($16 + [64]) = *($3)
	CALL $59(($16 + [48]), $4)
	*((($16 + [32]) + [8])) = *($10)
	*($16 + [32]) = *($16 + [64])
	CALL $31($0, $1, $2, ($16 + [32]), ($16 + [48]))
	if ( ((*($16 + [48]) & [1]) == 0) ){ goto $label$1 }
	CALL $54(*($16 + [56]))
	goto $label$1 
	
.LABEL $label$43
	*(($10 = (($16 + [96]) + [8]))) = *(($3 + [8]))
	*($16 + [96]) = *($3)
	CALL $59(($16 + [80]), $4)
	*((($16 + [16]) + [8])) = *($10)
	*($16 + [16]) = *($16 + [96])
	CALL $30($0, $1, $2, ($16 + [16]), ($16 + [80]))
	if ( ((*($16 + [80]) & [1]) == 0) ){ goto $label$1 }
	CALL $54(*($16 + [88]))
	goto $label$1 
	
.LABEL $label$42
	$12 = (int_64)0
	$14 = (int_64)59
	$10 = [896]
	$13 = (int_64)0
	
.LOOP $label$52:
	if ( ((uint_64)$12 > (uint_64)(int_64)6) ){ goto $label$57 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$56 }
	$5 = ($5 + [165])
	goto $label$55 
	
.LABEL $label$57
	$11 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$56
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$55
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$54
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$53
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$11 | (int_64)$13)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$52 }
	if ( ((int_64)$9 != (int_64)$13) ){ goto $label$58 }
	CALL eosio_assert([0], [912])
	goto $label$1 
	
.LABEL $label$58
	$12 = (int_64)0
	$14 = (int_64)59
	$10 = [944]
	$13 = (int_64)0
	
.LOOP $label$59:
	if ( ((uint_64)$12 > (uint_64)(int_64)6) ){ goto $label$64 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$63 }
	$5 = ($5 + [165])
	goto $label$62 
	
.LABEL $label$64
	$11 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$63
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$62
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$61
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$60
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$11 | (int_64)$13)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$59 }
	CALL eosio_assert(((int_64)$9 == (int_64)$13), [960])
	
.LABEL $label$1
	*([0] + [4]) = ($16 + [144])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [672])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [640])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $24(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $25(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $54(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [1680])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1728])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1792])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $54($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $54($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [84]))
}

int_32 .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $53([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $28($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $41(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [144])
	*([0] + [4]) = $5
	$4 = CALL $20($0)
	*($0 + [80]) = $1
	$1 = *($2)
	CALL $35(*($2 + [4]), $4)
	*($5 + [96]) = ($5 + [80])
	*($5 + [92]) = $5
	*($5 + [88]) = $5
	*($5 + [104]) = ($5 + [88])
	*($5 + [116]) = ($0 + [8])
	*($5 + [112]) = $0
	*($5 + [120]) = ($0 + [24])
	*($5 + [124]) = ($0 + [40])
	*($5 + [128]) = ($0 + [48])
	*($5 + [132]) = ($0 + [64])
	*($5 + [136]) = ($0 + [72])
	CALL $19(($5 + [112]), ($5 + [104]))
	$3 = *($0)
	*($0 + [84]) = CALL db_store_i64(*($1 + [8]), (int_64)3607749779137757184, *(*($2 + [8])), $3, $5, [80])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [144])
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	*($1) = *(*($0))
	CALL eosio_assert([1], [672])
	$3 = [0]
	$2 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [640])
	*(($1 + [16])) = (int_64)1397703940
	*($1 + [8]) = (int_64)0
	CALL eosio_assert([1], [672])
	$2 = (int_64)4409172
	$3 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [640])
	*(($1 + [32])) = (int_64)1128748036
	*($1 + [24]) = (int_64)0
	*($1 + [40]) = (int_64)0
	$3 = *($0 + [4])
	*($1 + [48]) = *($3)
	*(($1 + [56])) = *(($3 + [8]))
	$2 = CALL current_time()
	*($1 + [72]) = (int_64)0
	*($1 + [64]) = ((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295)
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [144])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [416])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [464])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [56]))), [1120])
	$5 = ((int_64)*($1 + [48]) + (int_64)*($3))
	*($1 + [48]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [1168])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [1200])
	$5 = CALL current_time()
	*($1 + [72]) = (int_64)0
	*($1 + [64]) = ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [528])
	*($6 + [96]) = ($6 + [80])
	*($6 + [92]) = $6
	*($6 + [88]) = $6
	*($6 + [104]) = ($6 + [88])
	*($6 + [116]) = ($1 + [8])
	*($6 + [112]) = $1
	*($6 + [120]) = ($1 + [24])
	*($6 + [124]) = ($1 + [40])
	*($6 + [128]) = ($1 + [48])
	*($6 + [132]) = ($1 + [64])
	*($6 + [136]) = ($1 + [72])
	CALL $19(($6 + [112]), ($6 + [104]))
	CALL db_update_i64(*($1 + [84]), $2, $6, [80])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [144])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1264])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $53([96])
	CALL $34($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [84])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $22(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $54($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $30 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [160])
	*([0] + [4]) = $16
	$5 = ($0 + [8])
	$12 = (int_64)0
	$13 = (int_64)59
	$9 = [1328]
	$10 = (int_64)0
	
.LOOP $label$1:
	$11 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$2 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$6 = ($6 + [165])
	goto $label$3 
	
.LABEL $label$4
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$2
	$9 = ($9 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$1 }
	$12 = (int_64)0
	$11 = (int_64)59
	$9 = [1344]
	$15 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$12 > (uint_64)(int_64)1) ){ goto $label$10 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$6 = ($6 + [165])
	goto $label$8 
	
.LABEL $label$10
	$13 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$6
	$9 = ($9 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$5 }
	$7 = *(($0 + [32]))
	$14 = *(($0 + [36]))
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$11 }
	$9 = ($14 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$12:
	if ( ((int_64)*(*($9)) == (int_64)$10) ){ goto $label$11 }
	$14 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$15 }
	$9 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [192])
	if ( $9 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$9 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)4982871467403247616, $10)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$13 }
	$9 = CALL $16($5, $9)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [192])
	
.LABEL $label$14
	$15 = *($9 + [8])
	
.LABEL $label$13
	$12 = (int_64)0
	$11 = (int_64)59
	$9 = [1360]
	$10 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$12 > (uint_64)(int_64)2) ){ goto $label$21 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$6 = ($6 + [165])
	goto $label$19 
	
.LABEL $label$21
	$13 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$17
	$9 = ($9 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$10 = ((int_64)$13 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$16 }
	CALL eosio_assert(((int_64)$15 == (int_64)$10), [1376])
	$12 = (int_64)0
	$13 = (int_64)59
	$9 = [1392]
	$10 = (int_64)0
	
.LOOP $label$22:
	$11 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$23 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$6 = ($6 + [165])
	goto $label$24 
	
.LABEL $label$25
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$23
	$9 = ($9 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$22 }
	$7 = *(($0 + [32]))
	$14 = *(($0 + [36]))
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$26 }
	$9 = ($14 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$27:
	if ( ((int_64)*(*($9)) == (int_64)$10) ){ goto $label$26 }
	$14 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$31 }
	$9 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [192])
	if ( $9 ){ goto $label$30 }
	$15 = (int_64)3000
	goto $label$28 
	
.LABEL $label$31
	$9 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)4982871467403247616, $10)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$29 }
	$9 = CALL $16($5, $9)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [192])
	
.LABEL $label$30
	$15 = *($9 + [8])
	goto $label$28 
	
.LABEL $label$29
	$15 = (int_64)3000
	
.LABEL $label$28
	$12 = (int_64)0
	$13 = (int_64)59
	$9 = [1408]
	$10 = (int_64)0
	
.LOOP $label$32:
	$11 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$33 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$6 = ($6 + [165])
	goto $label$34 
	
.LABEL $label$35
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$33
	$9 = ($9 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$32 }
	$7 = *(($0 + [32]))
	$14 = *(($0 + [36]))
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$36 }
	$9 = ($14 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$37:
	if ( ((int_64)*(*($9)) == (int_64)$10) ){ goto $label$36 }
	$14 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$37 }
	
.LABEL $label$36
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$41 }
	$9 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [192])
	if ( $9 ){ goto $label$40 }
	$12 = (int_64)7000
	goto $label$38 
	
.LABEL $label$41
	$9 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)4982871467403247616, $10)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$39 }
	$9 = CALL $16($5, $9)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [192])
	
.LABEL $label$40
	$12 = *($9 + [8])
	goto $label$38 
	
.LABEL $label$39
	$12 = (int_64)7000
	
.LABEL $label$38
	$5 = *(($0 + [72]))
	$14 = *(($0 + [76]))
	if ( ((int_32)$14 == (int_32)$5) ){ goto $label$42 }
	$9 = ($14 + [-24])
	$8 = ([0] - $5)
	
.LOOP $label$43:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$42 }
	$14 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$43 }
	
.LABEL $label$42
	$6 = ($0 + [48])
	if ( ((int_32)$14 == (int_32)$5) ){ goto $label$45 }
	$9 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)$6), [192])
	goto $label$44 
	
.LABEL $label$45
	$9 = [0]
	$14 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$44 }
	$9 = CALL $17($6, $14)
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)$6), [192])
	
.LABEL $label$44
	$5 = [0]
	$14 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($14, [1424])
	CALL eosio_assert(((int_64)((int_64)*($9 + [24]) + (int_64)*($3)) == (int_64)((int_64)*($9 + [8]) * (int_64)((int_64)$12 + (int_64)$15))), [1456])
	$8 = [0]
	if ( ((int_64)*($9 + [24]) < (int_64)1) ){ goto $label$46 }
	$8 = ((int_64)*($9 + [40]) != (int_64)0)
	
.LABEL $label$46
	CALL eosio_assert($8, [1488])
	if ( ((int_64)*($9 + [48]) != (int_64)0) ){ goto $label$47 }
	if ( ((int_64)*($9 + [64]) != (int_64)0) ){ goto $label$47 }
	$5 = (int_64)(*($9 + [72]) == 0)
	
.LABEL $label$47
	CALL eosio_assert($5, [1504])
	*(($16 + [136])) = *(($9 + [16]))
	*($16 + [128]) = *($9 + [8])
	CALL eosio_assert($14, [1520])
	CALL eosio_assert($14, [1568])
	$14 = CALL db_next_i64(*($9 + [84]), ($16 + [24]))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$48 }
	CALL $17($6, $14)
	
.LABEL $label$48
	CALL $36($6, $9)
	$15 = *($0)
	$12 = (int_64)0
	$11 = (int_64)59
	$9 = [1600]
	$10 = (int_64)0
	
.LOOP $label$49:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$54 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$53 }
	$6 = ($6 + [165])
	goto $label$52 
	
.LABEL $label$54
	$13 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$53
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$52
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$51
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$50
	$9 = ($9 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$10 = ((int_64)$13 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$49 }
	*($16 + [80]) = $10
	*($16 + [72]) = $15
	$12 = (int_64)0
	$11 = (int_64)59
	$9 = [96]
	$10 = (int_64)0
	
.LOOP $label$55:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$60 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$59 }
	$6 = ($6 + [165])
	goto $label$58 
	
.LABEL $label$60
	$13 = (int_64)0
	if ( ((int_64)$12 == (int_64)11) ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$59
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$58
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$57
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$56
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)-5)
	$10 = ((int_64)$13 | (int_64)$10)
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$55 }
	$12 = (int_64)0
	$11 = (int_64)59
	$9 = [80]
	$15 = (int_64)0
	
.LOOP $label$61:
	if ( ((uint_64)$12 > (uint_64)(int_64)7) ){ goto $label$66 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$65 }
	$6 = ($6 + [165])
	goto $label$64 
	
.LABEL $label$66
	$13 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$65
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$64
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$63
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$62
	$9 = ($9 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$61 }
	*(($16 + [16])) = [0]
	*($16 + [8]) = (int_64)0
	$9 = CALL strlen([1616])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$67 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$70 }
	*($16 + [8]) = ($9 << [1])
	$6 = (($16 + [8]) | [1])
	if ( $9 ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$70
	$14 = (($9 + [16]) & [-16])
	$6 = CALL $53($14)
	*($16 + [8]) = ($14 | [1])
	*($16 + [16]) = $6
	*($16 + [12]) = $9
	
.LABEL $label$69
	CALL memcpy($6, [1616], $9)
	
.LABEL $label$68
	*(($6 + $9)) = [0]
	*(($16 + [44])) = *($16 + [132])
	*($16 + [32]) = $1
	*(($16 + [52])) = *(($16 + [140]))
	*(($16 + [48])) = *((($16 + [128]) + [8]))
	*($16 + [24]) = *($0)
	*($16 + [40]) = *($16 + [128])
	$9 = (($16 + [8]) + [8])
	*(($16 + [64])) = *($9)
	*($16 + [56]) = *($16 + [8])
	*($16 + [8]) = [0]
	*($16 + [12]) = [0]
	*($9) = [0]
	$9 = CALL $37(($16 + [88]), ($16 + [72]), $10, $15, ($16 + [24]))
	CALL $38(($16 + [144]), $9)
	$6 = *($16 + [144])
	CALL send_inline($6, (*($16 + [148]) - $6))
	$6 = *($16 + [144])
	if ( ($6 == 0) ){ goto $label$71 }
	*($16 + [148]) = $6
	CALL $54($6)
	
.LABEL $label$71
	$6 = *($9 + [28])
	if ( ($6 == 0) ){ goto $label$72 }
	*(($9 + [32])) = $6
	CALL $54($6)
	
.LABEL $label$72
	$6 = *($9 + [16])
	if ( ($6 == 0) ){ goto $label$73 }
	*(($9 + [20])) = $6
	CALL $54($6)
	
.LABEL $label$73
	if ( ((*(($16 + [56])) & [1]) == 0) ){ goto $label$74 }
	CALL $54(*(($16 + [64])))
	
.LABEL $label$74
	if ( ((*($16 + [8]) & [1]) == 0) ){ goto $label$75 }
	CALL $54(*(($16 + [16])))
	
.LABEL $label$75
	*([0] + [4]) = ($16 + [160])
	return (unreachable)
	
.LABEL $label$67
	CALL $55(($16 + [8]))
}

void .FUNC $31 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [32])
	*([0] + [4]) = $17
	*($17 + [24]) = $1
	$11 = *(($0 + [72]))
	$10 = *(($0 + [76]))
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$1 }
	$12 = ($10 + [-24])
	$6 = ([0] - $11)
	
.LOOP $label$2:
	if ( ((int_64)*(*($12)) == (int_64)$1) ){ goto $label$1 }
	$10 = $12
	$8 = ($12 + [-24])
	$12 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [48])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$4 }
	$11 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [80]) == (int_32)$5), [192])
	goto $label$3 
	
.LABEL $label$4
	$11 = [0]
	$12 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $17($5, $12)
	CALL eosio_assert(((int_32)*($11 + [80]) == (int_32)$5), [192])
	
.LABEL $label$3
	$7 = ($0 + [8])
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [992]
	$14 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$10 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$8 = ($8 + [165])
	goto $label$8 
	
.LABEL $label$10
	$15 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$6
	$12 = ($12 + [1])
	$13 = ((int_64)$13 + (int_64)-5)
	$14 = ((int_64)$15 | (int_64)$14)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$5 }
	$9 = *(($0 + [32]))
	$10 = *(($0 + [36]))
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$11 }
	$12 = ($10 + [-24])
	$6 = ([0] - $9)
	
.LOOP $label$12:
	if ( ((int_64)*(*($12)) == (int_64)$14) ){ goto $label$11 }
	$10 = $12
	$8 = ($12 + [-24])
	$12 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$16 }
	$12 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [24]) == (int_32)$7), [192])
	if ( $12 ){ goto $label$15 }
	$16 = (int_64)100000
	goto $label$13 
	
.LABEL $label$16
	$12 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)4982871467403247616, $14)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$14 }
	$12 = CALL $16($7, $12)
	CALL eosio_assert(((int_32)*($12 + [24]) == (int_32)$7), [192])
	
.LABEL $label$15
	$16 = *($12 + [8])
	goto $label$13 
	
.LABEL $label$14
	$16 = (int_64)100000
	
.LABEL $label$13
	$1 = (int_64)0
	$13 = (int_64)59
	$12 = [1008]
	$14 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$22 }
	$8 = *($12)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$8 = ($8 + [165])
	goto $label$20 
	
.LABEL $label$22
	$15 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$18
	$12 = ($12 + [1])
	$13 = ((int_64)$13 + (int_64)-5)
	$14 = ((int_64)$15 | (int_64)$14)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$17 }
	$9 = *(($0 + [32]))
	$10 = *(($0 + [36]))
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$23 }
	$12 = ($10 + [-24])
	$6 = ([0] - $9)
	
.LOOP $label$24:
	if ( ((int_64)*(*($12)) == (int_64)$14) ){ goto $label$23 }
	$10 = $12
	$8 = ($12 + [-24])
	$12 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$24 }
	
.LABEL $label$23
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$28 }
	$12 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [24]) == (int_32)$7), [192])
	if ( $12 ){ goto $label$27 }
	$15 = (int_64)500000000000
	goto $label$25 
	
.LABEL $label$28
	$12 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)4982871467403247616, $14)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$26 }
	$12 = CALL $16($7, $12)
	CALL eosio_assert(((int_32)*($12 + [24]) == (int_32)$7), [192])
	
.LABEL $label$27
	$15 = *($12 + [8])
	goto $label$25 
	
.LABEL $label$26
	$15 = (int_64)500000000000
	
.LABEL $label$25
	CALL eosio_assert((uint_64)(((int_64)$16 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [672])
	$1 = (int_64)4409172
	$12 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	
.LOOP $label$33:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$30 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$33 }
	
.LABEL $label$32
	$8 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$8 = [0]
	
.LABEL $label$29
	CALL eosio_assert($8, [640])
	CALL eosio_assert((uint_64)(((int_64)$15 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [672])
	$1 = (int_64)4409172
	$12 = [0]
	
.LOOP $label$36:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$35 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$37 }
	
.LOOP $label$38:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$35 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$38 }
	
.LABEL $label$37
	$8 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$35
	$8 = [0]
	
.LABEL $label$34
	CALL eosio_assert($8, [640])
	$1 = *($3 + [8])
	CALL eosio_assert(((int_64)$1 == (int_64)1128748036), [1024])
	$12 = [0]
	if ( ((int_64)*($3) < (int_64)$16) ){ goto $label$39 }
	CALL eosio_assert(((int_64)$1 == (int_64)1128748036), [1024])
	$12 = ((int_64)*($3) <= (int_64)$15)
	
.LABEL $label$39
	CALL eosio_assert($12, [1088])
	if ( ($11 == 0) ){ goto $label$41 }
	$1 = *($11 + [48])
	$13 = *(($11 + [56]))
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)$13), [1120])
	$1 = ((int_64)$1 + (int_64)*($3))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [1168])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [1200])
	CALL eosio_assert(((int_64)$13 == (int_64)1128748036), [1024])
	CALL eosio_assert(((int_64)$1 <= (int_64)$15), [1232])
	*($17 + [16]) = $3
	CALL eosio_assert([1], [368])
	CALL $32($5, $11, (int_64)0, ($17 + [16]))
	goto $label$40 
	
.LABEL $label$41
	$1 = *($0)
	*($17 + [20]) = $3
	*($17 + [16]) = ($17 + [24])
	CALL $33(($17 + [8]), $5, $1, ($17 + [16]))
	
.LABEL $label$40
	*([0] + [4]) = ($17 + [32])
}

void .FUNC $58 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $53($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $64 ()
{
	(unreachable)
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $51($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10560])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $28($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [592])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [592])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $40(CALL $39($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10540])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10348]
	$1 = (((int_32)$2 * (int_32)[12]) + [10348])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10652])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $54 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $55 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $53(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $54($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $57 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}