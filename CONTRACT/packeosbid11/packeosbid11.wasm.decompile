(data (i32.const 8192) "onerror\00")
(data (i32.const 8200) "eosio\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8292) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 8356) "transfer\00")
(data (i32.const 8365) "eosio.token\00")
(data (i32.const 8377) "packeosbid11\00")
(data (i32.const 8390) "init\00")
(data (i32.const 8395) "upgrade\00")
(data (i32.const 8403) "claim\00")
(data (i32.const 8409) "claim4invite\00")
(data (i32.const 8422) "clear\00")
(data (i32.const 8428) "sell\00")
(data (i32.const 8433) "sendrank\00")
(data (i32.const 8442) "string is too long to be a valid name\00")
(data (i32.const 8480) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8547) "character is not in allowed character set for names\00")
(data (i32.const 8599) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8650) "error reading iterator\00")
(data (i32.const 8673) "read\00")
(data (i32.const 8678) "cannot create objects in table of another contract\00")
(data (i32.const 8729) "write\00")
(data (i32.const 8735) "cannot pass end iterator to modify\00")
(data (i32.const 8770) "object passed to modify is not in multi_index\00")
(data (i32.const 8816) "cannot modify objects in table of another contract\00")
(data (i32.const 8867) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8926) "thief, u need return gas first!\00")
(data (i32.const 8958) "u need have taxi first!\00")
(data (i32.const 8982) "nothing to reward\00")
(data (i32.const 9000) "object passed to erase is not in multi_index\00")
(data (i32.const 9045) "cannot erase objects in table of another contract\00")
(data (i32.const 9095) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9148) "taxi doesn\'t exist!\00")
(data (i32.const 9168) "u don\'t own this taxi!\00")
(data (i32.const 9191) "unknow error\00")
(data (i32.const 9204) "EOS\00")
(data (i32.const 9208) "PACK\00")
(data (i32.const 9213) "string is too long to be a valid symbol_code\00")
(data (i32.const 9258) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9311) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9360) "invalid symbol name\00")
(data (i32.const 9380) "divide by zero\00")
(data (i32.const 9395) "signed division overflow\00")
(data (i32.const 9420) "multiplication overflow\00")
(data (i32.const 9444) "multiplication underflow\00")
(data (i32.const 9469) "attempt to subtract asset with different symbol\00")
(data (i32.const 9517) "subtraction underflow\00")
(data (i32.const 9539) "subtraction overflow\00")
(data (i32.const 9560) "not enough reward balance!\00")
(data (i32.const 9587) "packeosgains\00")
(data (i32.const 9600) "\84%\00\00")
(data (i32.const 9604) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9637) "packeostoken\00")
(data (i32.const 9650) "packeosranks\00")
(data (i32.const 9663) "packeosasked\00")
(data (i32.const 9676) "packeosminer\00")
(data (i32.const 9689) "cannot increment end iterator\00")
(data (i32.const 9719) "active\00")
(data (i32.const 9726) "issue\00")
(data (i32.const 9732) "claim invite reward\00")
(data (i32.const 9752) "taxis is empty\00")
(data (i32.const 9767) "can\'t selling in this status!\00")
(data (i32.const 9797) "price too low\00")
(data (i32.const 9811) "price too high\00")
(data (i32.const 9826) "wrong timestamp\00")
(data (i32.const 9842) "\e6\97\a0\e5\a5\96\e5\8a\b1\e5\8f\af\e5\8f\91\e9\80\81\00")
(data (i32.const 9861) "rank reward\00")
(data (i32.const 9873) "cannot decrement end iterator when the index is empty\00")
(data (i32.const 9927) "cannot decrement iterator at beginning of index\00")
(data (i32.const 9975) "-\00")
(data (i32.const 9977) "invalid memo!\00")
(data (i32.const 9991) "taxi\00")
(data (i32.const 9996) "gas\00")
(data (i32.const 10000) "buy\00")
(data (i32.const 10004) "Token doesn\'t support!\00")
(data (i32.const 10027) "u need more EOS, go to work!\00")
(data (i32.const 10056) "sold out!\00")
(data (i32.const 10066) "\e5\ba\93\e5\ad\98\e4\b8\8d\e8\b6\b3\00")
(data (i32.const 10079) "\e8\b6\85\e5\87\ba\e5\8d\95\e6\ac\a1\e8\b4\ad\e4\b9\b0\e6\95\b0\e9\87\8f\00")
(data (i32.const 10104) "u have enough taxis!\00")
(data (i32.const 10125) "\e8\b6\85\e5\87\ba\e5\bd\93\e6\97\a5\e9\99\90\e9\a2\9d\00")
(data (i32.const 10144) "u can\'t do that!\00")
(data (i32.const 10161) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10213) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10267) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10315) "\e9\82\80\e8\af\b7\e4\ba\ba\e4\b8\8d\e8\83\bd\e4\b8\ba\e8\b4\ad\e4\b9\b0\e8\b4\a6\e5\8f\b7\00")
(data (i32.const 10347) "\e8\af\b7\e5\a1\ab\e5\86\99\e9\82\80\e8\af\b7\e4\ba\ba\00")
(data (i32.const 10366) "bid doesn\'t match\00")
(data (i32.const 10384) "congratulations\00")
(data (i32.const 10400) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 10459) "cannot pass end iterator to erase\00")
(data (i32.const 10493) "buy taxi first!\00")
(data (i32.const 10509) "\e8\b4\ad\e4\b9\b0\e6\95\b0\e9\87\8f\e4\b8\8d\e8\b6\b3\00")
(data (i32.const 10528) "u have enough!\00")
(data (i32.const 10543) "get\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$3 (param i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$8 (result i64)))
(import "env" "prints" (func $fimport$9 (param i32)))
(import "env" "current_receiver" (func $fimport$10 (result i64)))
(import "env" "db_get_i64" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$12 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$13 (param i32 i64 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$14 (param i32)))
(import "env" "__multi3" (func $fimport$15 (param i32 i64 i64 i64 i64)))
(import "env" "send_inline" (func $fimport$16 (param i32 i32)))
(import "env" "send_deferred" (func $fimport$17 (param i32 i64 i32 i32 i32)))
(import "env" "cancel_deferred" (func $fimport$18 (param i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$19 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$20 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_previous" (func $fimport$21 (param i32 i32) (result i32)))
(import "env" "db_idx64_end" (func $fimport$22 (param i64 i64 i64) (result i32)))
(import "env" "db_previous_i64" (func $fimport$23 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$24 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_store" (func $fimport$25 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$26 (param i32 i64 i32)))
(import "env" "abort" (func $fimport$27))
(import "env" "memset" (func $fimport$28 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$29 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$30 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$37 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$38 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$39 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$40 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$41 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$42 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$43 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$44 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$45 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$46 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$47 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$48 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$49 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_Znwj" (func $152))
(export "_ZdlPv" (func $154))
(export "_Znaj" (func $153))
(export "_ZdaPv" (func $155))
(export "_ZnwjSt11align_val_t" (func $156))
(export "_ZnajSt11align_val_t" (func $157))
(export "_ZdlPvSt11align_val_t" (func $158))
(export "_ZdaPvSt11align_val_t" (func $159))
(table $0 8 8 anyfunc)
(elem (i32.const 1) $3 $5 $7 $9 $11 $12 $13)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18964))
(global $global$2 i32 (i32.const 18964))


int_32 .FUNC $174 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $175($1)
	
.LABEL $label$2
	*(CALL $166()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $175(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $178($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $175($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [280]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8673])
	CALL memcpy(($4 + [280]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*(($4 + [248])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [264])) = (int_64)0
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	*($4 + [240]) = $0
	*(($4 + [272])) = [0]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [280])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $178($2)
	
.LABEL $label$5
	CALL $15(($4 + [8]))
	$global$0 = ($4 + [288])
	return [1]
}

int_32 .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $177($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8206])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $177 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10560]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10564])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10560]) = [1]
	$2 = ($2 << [16])
	*([0] + [10564]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10564])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10564]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10560]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10560]) = [1]
	$3 = ($3 << [16])
	*([0] + [10564]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10564])
	
.LABEL $label$10
	*([0] + [10564]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $170 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $171 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $172 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $7 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL require_auth($1)
	CALL eosio_assert(((int_32)*($3) != (int_32)*($3 + [4])), [9752])
	$5 = CALL current_time()
	$3 = *($3 + [4])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$1 }
	$7 = ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	
.LOOP $label$2:
	$8 = *($6)
	$9 = *(($2 + [8]))
	*((($4 + [16]) + [8])) = $9
	$5 = *($2)
	*(($4 + [8])) = $9
	*($4 + [16]) = $5
	*($4) = $5
	CALL $45($0, $1, $4, $8, $7)
	$6 = ($6 + [8])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $178 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18952])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18760]
	$3 = (((int_32)$1 * (int_32)[12]) + [18760])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $4 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $175($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = (int_64)0
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*($4 + [232]) = $0
	*(($4 + [264])) = [0]
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $178($2)
	
.LABEL $label$5
	CALL $15($4)
	$global$0 = ($4 + [272])
	return [1]
}

void .FUNC $5 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = ($0 + [32])
	$5 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($7 + [148])) == (int_32)$3), [8599])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)5610840117515124736, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $34($3, $6)
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$3), [8599])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)*($7 + [144]) != (int_32)[0]), [8926])
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [8958])
	$9 = *($7 + [32])
	$10 = *($7 + [16])
	$6 = CALL $172([9204])
	if ( ($6 <= [8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9213])
	goto $label$7 
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$11 = (int_64)0
	
.LOOP $label$9:
	$5 = *(($6 + [9203]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$10 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$10
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$9 }
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)4)
	goto $label$5 
	
.LABEL $label$6
	$11 = (int_64)4
	
.LABEL $label$5
	*($2 + [64]) = (int_64)0
	*($2 + [72]) = $11
	CALL eosio_assert([1], [9311])
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$11 = $12
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$11 = $12
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$15 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$5 = [0]
	
.LABEL $label$11
	CALL eosio_assert($5, [9360])
	$6 = CALL $172([9208])
	if ( ($6 <= [8]) ){ goto $label$19 }
	CALL eosio_assert([0], [9213])
	goto $label$18 
	
.LABEL $label$19
	if ( ($6 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$11 = (int_64)0
	
.LOOP $label$20:
	$5 = *(($6 + [9207]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$21 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$21
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$20 }
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)4)
	goto $label$16 
	
.LABEL $label$17
	$11 = (int_64)4
	
.LABEL $label$16
	*($2 + [48]) = (int_64)0
	*($2 + [56]) = $11
	CALL eosio_assert([1], [9311])
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$25 }
	$11 = $12
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$25
	$11 = $12
	
.LOOP $label$26:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$23 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$26 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$5 = [0]
	
.LABEL $label$22
	CALL eosio_assert($5, [9360])
	$11 = *($0)
	*($2 + [44]) = ($2 + [48])
	*($2 + [40]) = ($2 + [64])
	CALL eosio_assert($8, [8735])
	CALL $41($3, $7, $11, ($2 + [40]))
	if ( ((int_64)$10 < (int_64)1) ){ goto $label$29 }
	*(($2 + [32])) = [0]
	*($2 + [24]) = (int_64)0
	$6 = CALL $172([9732])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$28 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$32 }
	*($2 + [24]) = ($6 << [1])
	$5 = (($2 + [24]) | [1])
	if ( $6 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [24]) = ($4 | [1])
	*($2 + [32]) = $5
	*($2 + [28]) = $6
	
.LABEL $label$31
	CALL memcpy($5, [9732], $6)
	
.LABEL $label$30
	*(($5 + $6)) = [0]
	CALL $42($0, $1, $10, ($2 + [24]))
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*($2 + [32]))
	
.LABEL $label$29
	if ( ((int_64)$9 < (int_64)1) ){ goto $label$33 }
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	$6 = CALL $172([9732])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$27 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$36 }
	*($2 + [8]) = ($6 << [1])
	$5 = (($2 + [8]) | [1])
	if ( $6 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [8]) = ($4 | [1])
	*($2 + [16]) = $5
	*($2 + [12]) = $6
	
.LABEL $label$35
	CALL memcpy($5, [9732], $6)
	
.LABEL $label$34
	*(($5 + $6)) = [0]
	CALL $40($0, $1, $9, ($2 + [8]))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*($2 + [16]))
	
.LABEL $label$33
	$global$0 = ($2 + [80])
	return (unreachable)
	
.LABEL $label$28
	CALL $160(($2 + [24]))
	
.LABEL $label$27
	CALL $160(($2 + [8]))
	(unreachable)
}

void .FUNC $127 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [76])) == (int_32)$0), [8770])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8816])
	*($1 + [8]) = *(*($3))
	*($1 + [72]) = [1]
	*($1 + [32]) = *(*($3 + [4]))
	$5 = *($1)
	CALL eosio_assert([1], [8867])
	*($4 + [96]) = ($4 + [73])
	*($4 + [92]) = $4
	*($4 + [88]) = $4
	*($4 + [104]) = ($4 + [88])
	*($4 + [116]) = ($1 + [8])
	*($4 + [112]) = $1
	*($4 + [120]) = ($1 + [16])
	*($4 + [124]) = ($1 + [24])
	*($4 + [128]) = ($1 + [32])
	*($4 + [132]) = ($1 + [40])
	*($4 + [136]) = ($1 + [56])
	*($4 + [140]) = ($1 + [72])
	CALL $96(($4 + [112]), ($4 + [104]))
	CALL db_update_i64(*($1 + [80]), $2, $4, [73])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [144])
}

void .FUNC $3 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [32])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = *($0)
	*($1 + [24]) = $2
	$3 = ($0 + [192])
	$5 = *(($0 + [220]))
	$4 = *(($0 + [216]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$2) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(($7 + [68])) == (int_32)$3), [8599])
	if ( $7 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [200])), (int_64)4982871454518345728, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $16($3, $6) + [68]) == (int_32)$3), [8599])
	goto $label$1 
	
.LABEL $label$2
	*($1 + [16]) = ($1 + [24])
	CALL $17(($1 + [8]), $3, $2, ($1 + [16]))
	$2 = *($1 + [24])
	
.LABEL $label$1
	$6 = ($0 + [152])
	CALL $18(($1 + [8]), $6, $2, ($1 + [16]))
	CALL $19(($1 + [8]), $6, *($1 + [24]), ($1 + [16]))
	CALL $20(($1 + [8]), $6, *($1 + [24]), ($1 + [16]))
	CALL $21(($1 + [8]), $6, *($1 + [24]), ($1 + [16]))
	CALL $22(($1 + [8]), $6, *($1 + [24]), ($1 + [16]))
	CALL $23(($1 + [8]), $6, *($1 + [24]), ($1 + [16]))
	CALL $24(($1 + [8]), $6, *($1 + [24]), ($1 + [16]))
	CALL $25(($1 + [8]), $6, *($1 + [24]), ($1 + [16]))
	CALL $26(($1 + [8]), $6, *($1 + [24]), ($1 + [16]))
	CALL $27(($1 + [8]), $6, *($1 + [24]), ($1 + [16]))
	CALL $28(($1 + [8]), $6, *($1 + [24]), ($1 + [16]))
	CALL $29(($1 + [8]), $6, *($1 + [24]), ($1 + [16]))
	CALL $30(($1 + [8]), $6, *($1 + [24]), ($1 + [16]))
	CALL $31(($1 + [8]), $6, *($1 + [24]), ($1 + [16]))
	CALL $32(($1 + [8]), $6, *($1 + [24]), ($1 + [16]))
	$global$0 = ($1 + [32])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8650])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $175($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8673])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8673])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [8673])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [28]) = $1
	*($5 + [32 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $110(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $178($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [224])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [148])) == (int_32)$0), [8770])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8816])
	$3 = *($3)
	*($1 + [16]) = *($3)
	*(($1 + [24])) = *(($3 + [8]))
	$5 = *($1)
	CALL eosio_assert([1], [8867])
	*($4 + [152]) = ($4 + [141])
	*($4 + [148]) = $4
	*($4 + [144]) = $4
	*($4 + [160]) = ($4 + [144])
	*($4 + [172]) = ($1 + [8])
	*($4 + [168]) = $1
	*($4 + [176]) = ($1 + [16])
	*($4 + [180]) = ($1 + [32])
	*($4 + [184]) = ($1 + [48])
	*($4 + [188]) = ($1 + [64])
	*($4 + [192]) = ($1 + [80])
	*($4 + [196]) = ($1 + [96])
	*($4 + [200]) = ($1 + [112])
	*($4 + [204]) = ($1 + [120])
	*($4 + [208]) = ($1 + [128])
	*($4 + [212]) = ($1 + [136])
	*($4 + [216]) = ($1 + [144])
	CALL $90(($4 + [168]), ($4 + [160]))
	CALL db_update_i64(*($1 + [152]), $2, $4, [141])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [224])
}

void .FUNC memory ()
{
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10543])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $149($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [8673])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $42 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [80])
	$global$0 = $4
	$3 = CALL $161(($4 + [8]), $3)
	CALL $84(($4 + [24]), $0, $1, $2, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$1
	CALL $85(($4 + [64]), ($4 + [24]))
	$3 = *($4 + [64])
	CALL send_inline($3, (*($4 + [68]) - $3))
	$3 = *($4 + [64])
	if ( ($3 == 0) ){ goto $label$2 }
	*($4 + [68]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$3 = *($4 + [52])
	if ( ($3 == 0) ){ goto $label$3 }
	*(($4 + [56])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$3 = *($4 + [40])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($4 + [44])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [224])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [148])) == (int_32)$0), [8770])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8816])
	$5 = *($3)
	*($1 + [16]) = *($5)
	*(($1 + [24])) = *(($5 + [8]))
	$3 = *($3 + [4])
	*($1 + [32]) = *($3)
	*(($1 + [40])) = *(($3 + [8]))
	$6 = *($1)
	CALL eosio_assert([1], [8867])
	*($4 + [152]) = ($4 + [141])
	*($4 + [148]) = $4
	*($4 + [144]) = $4
	*($4 + [160]) = ($4 + [144])
	*($4 + [172]) = ($1 + [8])
	*($4 + [168]) = $1
	*($4 + [176]) = ($1 + [16])
	*($4 + [180]) = ($1 + [32])
	*($4 + [184]) = ($1 + [48])
	*($4 + [188]) = ($1 + [64])
	*($4 + [192]) = ($1 + [80])
	*($4 + [196]) = ($1 + [96])
	*($4 + [200]) = ($1 + [112])
	*($4 + [204]) = ($1 + [120])
	*($4 + [208]) = ($1 + [128])
	*($4 + [212]) = ($1 + [136])
	*($4 + [216]) = ($1 + [144])
	CALL $90(($4 + [168]), ($4 + [160]))
	CALL db_update_i64(*($1 + [152]), $2, $4, [141])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [224])
}

void .FUNC $40 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [176])
	$global$0 = $4
	$5 = CALL $172([9208])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9213])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [9207]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9311])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $9
	$7 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $9
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [9360])
	*((($4 + [112]) + [16])) = $8
	*($4 + [120]) = $2
	*($4 + [112]) = $1
	$7 = CALL $161((($4 + [112]) + [24]), $3)
	*($4 + [96]) = [9637]
	*($4 + [100]) = CALL $172([9637])
	*($4 + [16]) = *($4 + [96])
	$5 = CALL $2(($4 + [104]), ($4 + [16]))
	$6 = *($5)
	*($4 + [40]) = [9719]
	*($4 + [44]) = CALL $172([9719])
	*($4 + [8]) = *($4 + [40])
	$9 = *(CALL $2(($4 + [48]), ($4 + [8])))
	$2 = *($5)
	*($4 + [24]) = [9726]
	*($4 + [28]) = CALL $172([9726])
	*($4) = *($4 + [24])
	$5 = CALL $2(($4 + [32]), $4)
	*($4 + [56]) = $2
	*($4 + [64]) = *($5)
	*(($5 = CALL _Znwj([16]))) = $6
	*($5 + [8]) = $9
	*(($4 + [92])) = [0]
	$10 = ($5 + [16])
	*((($4 + [56]) + [24])) = $10
	*(($4 + [76])) = $10
	*($4 + [72]) = $5
	*($4 + [84 align=4]) = (int_64)0
	$5 = *($7)
	$10 = ( *((($4 + [112]) + [28])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($10 + [24])
	$6 = (CASTING uint_64)(uint_32 $10)
	$10 = (($4 + [56]) + [28])
	
.LOOP $label$12:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$12 }
	if ( ($5 == 0) ){ goto $label$14 }
	CALL $86($10, $5)
	$10 = *(($4 + [88]))
	$5 = *(($4 + [84]))
	goto $label$13 
	
.LABEL $label$14
	$10 = [0]
	$5 = [0]
	
.LABEL $label$13
	*($4 + [152]) = $5
	*($4 + [160]) = $10
	$10 = ($10 - $5)
	CALL eosio_assert(((int_32)$10 > (int_32)[7]), [8729])
	CALL memcpy($5, ($4 + [112]), [8])
	CALL eosio_assert(((int_32)($10 + [-8]) > (int_32)[7]), [8729])
	CALL memcpy(($5 + [8]), (($4 + [112]) + [8]), [8])
	*($4 + [168]) = *((($4 + [112]) + [16]))
	CALL eosio_assert(((int_32)($10 + [-16]) > (int_32)[7]), [8729])
	CALL memcpy(($5 + [16]), ($4 + [168]), [8])
	*($4 + [156]) = ($5 + [24])
	CALL $87(($4 + [152]), $7)
	CALL $85(($4 + [152]), ($4 + [56]))
	$5 = *($4 + [152])
	CALL send_inline($5, (*($4 + [156]) - $5))
	$5 = *($4 + [152])
	if ( ($5 == 0) ){ goto $label$15 }
	*($4 + [156]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$15
	$5 = *($4 + [84])
	if ( ($5 == 0) ){ goto $label$16 }
	*(($4 + [88])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$5 = *($4 + [72])
	if ( ($5 == 0) ){ goto $label$17 }
	*(($4 + [76])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	if ( ((*($4 + [136]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($4 + [144])))
	
.LABEL $label$18
	$global$0 = ($4 + [176])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8770])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8816])
	$3 = *($3)
	*($1 + [16]) = *($3)
	*(($1 + [24])) = *(($3 + [8]))
	$5 = *($1)
	CALL eosio_assert([1], [8867])
	*($4 + [48]) = ($4 + [28])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [8])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [16])
	CALL $109(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [36]), $2, $4, [28])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8650])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $175($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	CALL $107(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $108(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $178($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $45 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [16])
	$global$0 = $5
	*($5 + [8]) = $4
	$6 = ($0 + [72])
	$8 = *(($0 + [100]))
	$7 = *(($0 + [96]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$4:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$3) ){ goto $label$3 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($10 + [76])) == (int_32)$6), [8599])
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	$9 = CALL db_find_i64(*($6), *(($0 + [80])), (int_64)-3910567035813232640, $3)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $37($6, $9)
	CALL eosio_assert(((int_32)*($10 + [76]) == (int_32)$6), [8599])
	
.LABEL $label$1
	$9 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($9, [9148])
	CALL eosio_assert(((int_64)*($10 + [8]) == (int_64)$1), [9168])
	CALL eosio_assert(((int_32)*($10 + [72]) == (int_32)[1]), [9767])
	$3 = *($2)
	CALL eosio_assert(((int_64)$3 > (int_64)9999), [9797])
	CALL eosio_assert(((int_64)$3 < (int_64)800001), [9811])
	$3 = *($0)
	*($5 + [4]) = $2
	*($5) = ($5 + [8])
	CALL eosio_assert($9, [8735])
	CALL $103($6, $10, $3, $5)
	$global$0 = ($5 + [16])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [16]) = (int_64)0
	*($2 + [24]) = [0]
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$5 = (*(($1 + [28])) - *($1 + [24]))
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = int_32($5 >> [3])
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = CALL _Znwj($5)
	*(($2 + [24])) = ($5 + ($6 << [3]))
	*($2 + [16]) = $5
	*($2 + [20]) = $5
	$6 = *(($1 + [24]))
	$1 = (*(($1 + [28])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $6, $1)
	*($2 + [20]) = ($5 + $1)
	
.LABEL $label$2
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*($0) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($0) + $1))
	
.LABEL $label$3
	$7 = *((($2 + [48]) + [8]))
	*((($2 + [64]) + [8])) = $7
	*(($2 + [8])) = $7
	$7 = *($2 + [48])
	*($2) = $7
	*($2 + [64]) = $7
	CALL void $0((int_32 $4), (int_64 $2), (int_32 ($2 + [16])), (int_32 $1))
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$4 }
	*($2 + [20]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($2 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $165(($2 + [16]))
}

void .FUNC $167 (int_32 $0)
{
}

int_32 .FUNC $166 ()
{
	return [10552]
}

void .FUNC $165 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $164 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $171(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $162 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $161 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $160 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $169 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

int_64 .FUNC $168 (float_64 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	float_64 $4
	$1 = ($global$0 - [16])
	if ( ((float_64)$0 == (float_64)(float_64)0) ){ goto $label$1 }
	$2 = (CASTING int_64)(float_64 $0)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)52)) & [2047]
	if ( ((uint_32)$3) > (uint_32)[1074]) ){ goto $label$1 }
	$4 = (float_64))(( ((float_64)((float_64)$0 + (float_64)(float_64)-4503599627370496) + (float_64)(float_64)4503599627370496) ? ((float_64)((float_64)$0 + (float_64)(float_64)4503599627370496) + (float_64)(float_64)-4503599627370496) : ((int_64)$2 < (int_64)0) ) - $0)
	if ( ((uint_32)$3 > (uint_32)[1022]) ){ goto $label$2 }
	*($1 + [8]) = $4
	return (CASTING float_64)(int_32 (CASTING uint_32)(uint_64 (int_64)$2 >> (int_64)63)))
	
.LABEL $label$2
	$0 = ((float_64)$4 + (float_64)$0)
	if ( ((int_32)((float_64)$4 > (float_64)(float_64)0) ^ (int_32)[1]) ){ goto $label$1 }
	$0 = ((float_64)$0 + (float_64)(float_64)-1)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $175 (int_32 $0)
{
	return CALL $176([10568], $0)
}

void .FUNC $58 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_64 $15
	float_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$4 = ($global$0 - [208])
	$global$0 = $4
	*($4 + [200]) = $1
	$5 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$5 = (int_64)
	*($4 + [192]) = $5(((int_64)$5 & (int_64)4294967295) - (CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 $5) % (uint_32)[86400]))))
	$6 = ($0 + [112])
	$8 = *(($0 + [140]))
	$7 = *(($0 + [136]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$4:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$5) ){ goto $label$3 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)$6), [8599])
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	$9 = CALL db_find_i64(*($6), *(($0 + [120])), (int_64)-4149656938784751616, $5)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $46($6, $9)
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)$6), [8599])
	
.LABEL $label$1
	$11 = *($10 + [8])
	*($4 + [184]) = $11
	$12 = ($0 + [192])
	$13 = *($0)
	$8 = *(($0 + [220]))
	$7 = *(($0 + [216]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$8:
	$9 = ($8 + [-24])
	$14 = *($9)
	if ( ((int_64)*($14) == (int_64)$13) ){ goto $label$7 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(($14 + [68])) == (int_32)$12), [8599])
	goto $label$5 
	
.LABEL $label$6
	$14 = [0]
	$9 = CALL db_find_i64(*($12), *(($0 + [200])), (int_64)4982871454518345728, $13)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$5 }
	$14 = CALL $16($12, $9)
	CALL eosio_assert(((int_32)*($14 + [68]) == (int_32)$12), [8599])
	
.LABEL $label$5
	$15 = *($2)
	CALL eosio_assert(((uint_64)$15 >= (uint_64)*($14 + [8])), [10027])
	$16 = CALL $168((CASTING float_64)(uint_64 ((uint_64)$15 / (uint_64)*($14 + [8]))))
	if ( (((float_64)$16 < (float_64)(float_64)18446744073709551615) & ((float_64)$16 >= (float_64)(float_64)0)) ){ goto $label$11 }
	$13 = (int_64)0
	*($4 + [176]) = (int_64)0
	if ( $10 ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	$13 = (Rounds 0)($16)
	*($4 + [176]) = $13
	if ( $10 ){ goto $label$9 }
	
.LABEL $label$10
	$11 = *($14 + [16])
	*($4 + [184]) = $11
	
.LABEL $label$9
	CALL eosio_assert(((int_64)$11 != (int_64)0), [10056])
	CALL eosio_assert(((uint_64)$11 >= (uint_64)$13), [10066])
	$2 = [0]
	*((($4 + [136]) + [32])) = [0]
	*($4 + [152]) = (int_64)-1
	*($4 + [160]) = (int_64)0
	$11 = *($0)
	*($4 + [136]) = $11
	*($4 + [144]) = $5
	$9 = CALL db_find_i64($11, $5, (int_64)-3020371195014938624, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$12 }
	$2 = CALL $117(($4 + [136]), $9)
	CALL eosio_assert(((int_32)*($2 + [16]) == (int_32)($4 + [136])), [8599])
	$13 = *($4 + [176])
	
.LABEL $label$12
	*($4 + [128]) = (int_64)10
	CALL eosio_assert((uint_64)($13 <= (int_64)11), [10079])
	$17 = ($0 + [32])
	$5 = *($4 + [200])
	$8 = *(($0 + [60]))
	$12 = *(($0 + [56]))
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$15 }
	
.LOOP $label$17:
	$9 = ($8 + [-24])
	$7 = *($9)
	if ( ((int_64)*($7) == (int_64)$5) ){ goto $label$16 }
	$8 = $9
	if ( ((int_32)$12 != (int_32)$9) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$15 }
	CALL eosio_assert(((int_32)*(($7 + [148])) == (int_32)$17), [8599])
	if ( $7 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$9 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)5610840117515124736, $5)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$13 }
	$7 = CALL $34($17, $9)
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$17), [8599])
	
.LABEL $label$14
	CALL eosio_assert((uint_64)(((int_64)*($4 + [176]) + (int_64)*($7 + [112])) <= (int_64)21), [10104])
	
.LABEL $label$13
	if ( ($2 == 0) ){ goto $label$21 }
	CALL eosio_assert(((uint_64)*($4 + [176]) <= (uint_64)*($2 + [8])), [10125])
	$5 = *($0)
	*($4 + [80]) = ($4 + [176])
	CALL eosio_assert([1], [8735])
	CALL $118(($4 + [136]), $2, $5, ($4 + [80]))
	$5 = *($0)
	if ( ($10 == 0) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$5 = *($0)
	*($4 + [84]) = ($4 + [128])
	*($4 + [80]) = ($4 + [200])
	*($4 + [88]) = ($4 + [176])
	CALL $119(($4 + [64]), ($4 + [136]), $5, ($4 + [80]))
	$5 = *($0)
	if ( $10 ){ goto $label$19 }
	
.LABEL $label$20
	*($4 + [84]) = ($4 + [184])
	*($4 + [80]) = ($4 + [192])
	*($4 + [88]) = ($4 + [176])
	CALL $120(($4 + [64]), $6, $5, ($4 + [80]))
	goto $label$18 
	
.LABEL $label$19
	*($4 + [84]) = ($4 + [176])
	*($4 + [80]) = ($4 + [184])
	CALL eosio_assert([1], [8735])
	CALL $121($6, $10, $5, ($4 + [80]))
	
.LABEL $label$18
	*($4 + [120]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*(($4 + [112])) = [0]
	*($4 + [96]) = (int_64)-1
	*($4 + [104]) = (int_64)0
	*($4 + [80]) = *($0)
	*($4 + [88]) = *($4 + [200])
	$13 = *(($14 + [8]))
	$9 = CALL $172([9204])
	if ( ($9 <= [8]) ){ goto $label$25 }
	CALL eosio_assert([0], [9213])
	goto $label$24 
	
.LABEL $label$25
	if ( ($9 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$5 = (int_64)0
	
.LOOP $label$26:
	$8 = *(($9 + [9203]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$27 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$27
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$26 }
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$22 
	
.LABEL $label$23
	$5 = (int_64)4
	
.LABEL $label$22
	*($4 + [72]) = $5
	*($4 + [64]) = $13
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9311])
	$5 = (uint_64)*($4 + [72]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$30:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$13 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$31 }
	$5 = $13
	$8 = [1]
	$10 = $9
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$31
	$5 = $13
	
.LOOP $label$32:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$29 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$9 < (int_32)[6])
	$10 = ($9 + [1])
	$9 = $10
	if ( $8 ){ goto $label$32 }
	$8 = [1]
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	$8 = [0]
	
.LABEL $label$28
	CALL eosio_assert($8, [9360])
	if ( (int_64)(*($4 + [176]) == 0) ){ goto $label$34 }
	$6 = ($0 + [72])
	$13 = (int_64)0
	$12 = ($0 + [88])
	$18 = ($0 + [80])
	$2 = (($4 + [40]) + [8])
	$17 = ($4 + [52])
	$19 = ($4 + [108])
	$20 = ($4 + [104])
	
.LOOP $label$35:
	$5 = *($12)
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$36 }
	$5 = (int_64)0
	$9 = CALL db_lowerbound_i64(*($6), *($18), (int_64)-3910567035813232640, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$37 }
	CALL $37($6, $9)
	*($4 + [44]) = [0]
	*($4 + [40]) = $6
	$5 = *(*(CALL $122(($4 + [40])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$37
	*($12) = $5
	
.LABEL $label$36
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [10161])
	$5 = *($12)
	*($4 + [56]) = ( (int_64)1 ? $5 : (int_64)($5 == 0) )
	$5 = *($0)
	*($2) = ($4 + [64])
	*($17) = ($4 + [120])
	*($4 + [44]) = ($4 + [200])
	*($4 + [40]) = ($4 + [56])
	CALL $123(($4 + [32]), $6, $5, ($4 + [40]))
	$5 = *($4 + [56])
	$8 = *($19)
	$10 = *($20)
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$40 }
	
.LOOP $label$42:
	$9 = ($8 + [-24])
	$7 = *($9)
	if ( ((int_64)*($7) == (int_64)$5) ){ goto $label$41 }
	$8 = $9
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$41
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$40 }
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)($4 + [80])), [8599])
	if ( $7 ){ goto $label$38 }
	goto $label$39 
	
.LABEL $label$40
	$9 = CALL db_find_i64(*($4 + [80]), *((($4 + [80]) + [8])), (int_64)-3020370967001038848, $5)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$39 }
	CALL eosio_assert(((int_32)*(CALL $36(($4 + [80]), $9) + [8]) == (int_32)($4 + [80])), [8599])
	goto $label$38 
	
.LABEL $label$39
	$5 = *($0)
	*($4 + [32]) = ($4 + [56])
	CALL $124(($4 + [40]), ($4 + [80]), $5, ($4 + [32]))
	
.LABEL $label$38
	$5 = *($4 + [176])
	$13 = ((int_64)$13 + (int_64)1)
	if ( (uint_64)($13 <= $5) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$34
	$5 = (int_64)0
	
.LABEL $label$33
	CALL $125($0, *($4 + [200]), $3, $5, [1])
	$11 = ((int_64)*($4 + [176]) * (int_64)*(($14 + [8])))
	$9 = CALL $172([9204])
	if ( ($9 <= [8]) ){ goto $label$46 }
	CALL eosio_assert([0], [9213])
	goto $label$45 
	
.LABEL $label$46
	if ( ($9 == 0) ){ goto $label$44 }
	
.LABEL $label$45
	$5 = (int_64)0
	
.LOOP $label$47:
	$8 = *(($9 + [9203]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$48 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$48
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$47 }
	$1 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$43 
	
.LABEL $label$44
	$1 = (int_64)4
	
.LABEL $label$43
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9311])
	$5 = (uint_64)$1 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$51:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$50 }
	$13 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$52 }
	$5 = $13
	$8 = [1]
	$10 = $9
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$52
	$5 = $13
	
.LOOP $label$53:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$50 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$9 < (int_32)[6])
	$10 = ($9 + [1])
	$9 = $10
	if ( $8 ){ goto $label$53 }
	$8 = [1]
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$50
	$8 = [0]
	
.LABEL $label$49
	CALL eosio_assert($8, [9360])
	CALL eosio_assert(((int_64)$11 <= (int_64)$15), [10144])
	*(($4 + [8])) = $1
	*($4 + [16]) = $11
	*($4 + [24]) = $1
	*($4) = $11
	CALL $126($0, *($4 + [200]), $4, [0])
	$10 = *($4 + [104])
	if ( ($10 == 0) ){ goto $label$54 }
	$7 = ($4 + [108])
	$9 = *($7)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$56 }
	
.LOOP $label$57:
	$9 = ($9 + [-24])
	$8 = *($9)
	*($9) = [0]
	if ( ($8 == 0) ){ goto $label$58 }
	CALL _ZdlPv($8)
	
.LABEL $label$58
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$57 }
	$9 = *(($4 + [104]))
	goto $label$55 
	
.LABEL $label$56
	$9 = $10
	
.LABEL $label$55
	*($7) = $10
	CALL _ZdlPv($9)
	
.LABEL $label$54
	$10 = *($4 + [160])
	if ( ($10 == 0) ){ goto $label$59 }
	$7 = ($4 + [164])
	$9 = *($7)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$61 }
	
.LOOP $label$62:
	$9 = ($9 + [-24])
	$8 = *($9)
	*($9) = [0]
	if ( ($8 == 0) ){ goto $label$63 }
	CALL _ZdlPv($8)
	
.LABEL $label$63
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$62 }
	$9 = *(($4 + [160]))
	goto $label$60 
	
.LABEL $label$61
	$9 = $10
	
.LABEL $label$60
	*($7) = $10
	CALL _ZdlPv($9)
	
.LABEL $label$59
	$global$0 = ($4 + [208])
}

void .FUNC $59 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$5 = ($global$0 - [192])
	$global$0 = $5
	*($5 + [176]) = $3
	*($5 + [184]) = $1
	CALL require_auth($1)
	$6 = ($0 + [72])
	$8 = *(($0 + [100]))
	$7 = *(($0 + [96]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$4:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$3) ){ goto $label$3 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($10 + [76])) == (int_32)$6), [8599])
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	$9 = CALL db_find_i64(*($6), *(($0 + [80])), (int_64)-3910567035813232640, $3)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $37($6, $9)
	CALL eosio_assert(((int_32)*($10 + [76]) == (int_32)$6), [8599])
	
.LABEL $label$1
	$11 = [0]
	$9 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($9, [9148])
	CALL eosio_assert((*($10 + [72]) == 0), [10056])
	CALL eosio_assert(((int_64)*(($10 + [48])) == (int_64)*($2 + [8])), [10400])
	$1 = *($2)
	CALL eosio_assert(((int_64)*($10 + [40]) == (int_64)$1), [10366])
	*($5 + [168]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$3 = *($10 + [8])
	$12 = *($0)
	*($5 + [132]) = ($5 + [168])
	*($5 + [128]) = ($5 + [184])
	CALL eosio_assert($9, [8735])
	CALL $127($6, $10, $12, ($5 + [128]))
	$6 = ($0 + [32])
	$8 = *(($0 + [60]))
	$10 = *(($0 + [56]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$8:
	$9 = ($8 + [-24])
	$7 = *($9)
	if ( ((int_64)*($7) == (int_64)$3) ){ goto $label$7 }
	$8 = $9
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(($7 + [148])) == (int_32)$6), [8599])
	$11 = $7
	goto $label$5 
	
.LABEL $label$6
	$9 = CALL db_find_i64(*($6), *(($0 + [40])), (int_64)5610840117515124736, $3)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$5 }
	$11 = CALL $34($6, $9)
	CALL eosio_assert(((int_32)*($11 + [148]) == (int_32)$6), [8599])
	
.LABEL $label$5
	$12 = *($0)
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [8735])
	CALL $128($6, $11, $12, ($5 + [128]))
	*((($5 + [128]) + [32])) = [0]
	*($5 + [144]) = (int_64)-1
	*($5 + [152]) = (int_64)0
	$12 = *($0)
	*($5 + [128]) = $12
	*($5 + [136]) = $3
	$9 = CALL db_find_i64($12, $3, (int_64)-3020370967001038848, *($5 + [176]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$9 }
	$9 = CALL $36(($5 + [128]), $9)
	CALL eosio_assert(((int_32)*($9 + [8]) == (int_32)($5 + [128])), [8599])
	CALL eosio_assert([1], [10459])
	CALL eosio_assert([1], [9689])
	$8 = CALL db_next_i64(*($9 + [12]), ($5 + [88]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$10 }
	CALL $36(($5 + [128]), $8)
	
.LABEL $label$10
	CALL $39(($5 + [128]), $9)
	
.LABEL $label$9
	*((($5 + [88]) + [32])) = [0]
	*($5 + [104]) = (int_64)-1
	*($5 + [112]) = (int_64)0
	$12 = *($0)
	*($5 + [88]) = $12
	$13 = *($5 + [184])
	*($5 + [96]) = $13
	$9 = CALL db_find_i64($12, $13, (int_64)-3020370967001038848, *($5 + [176]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(CALL $36(($5 + [88]), $9) + [8]) == (int_32)($5 + [88])), [8599])
	goto $label$11 
	
.LABEL $label$12
	$12 = *($0)
	*($5 + [80]) = ($5 + [176])
	CALL $129(($5 + [72]), ($5 + [88]), $12, ($5 + [80]))
	
.LABEL $label$11
	CALL $125($0, *($5 + [184]), $4, (int_64)1, [0])
	*(($5 + [64])) = [0]
	*($5 + [56]) = (int_64)0
	$1 = ((int_64)((int_64)$1 * (int_64)90) / (int_64)100)
	$9 = CALL $172([10384])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$16 }
	*($5 + [56]) = ($9 << [1])
	$8 = (($5 + [56]) | [1])
	if ( $9 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$10 = (($9 + [16]) & [-16])
	$8 = CALL _Znwj($10)
	*($5 + [56]) = ($10 | [1])
	*($5 + [64]) = $8
	*($5 + [60]) = $9
	
.LABEL $label$15
	CALL memcpy($8, [10384], $9)
	
.LABEL $label$14
	*(($8 + $9)) = [0]
	CALL $42($0, $3, $1, ($5 + [56]))
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($5 + [64]))
	
.LABEL $label$17
	*($5 + [40]) = [9587]
	*($5 + [44]) = CALL $172([9587])
	*($5 + [16]) = *($5 + [40])
	$1 = ((int_64)*($2) / (int_64)20)
	CALL $95($0, *(CALL $2(($5 + [48]), ($5 + [16]))), $1, [0])
	$3 = *($5 + [184])
	$8 = *(($0 + [60]))
	$7 = *(($0 + [56]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$19 }
	
.LOOP $label$21:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$3) ){ goto $label$20 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$19 }
	CALL eosio_assert(((int_32)*(($10 + [148])) == (int_32)$6), [8599])
	goto $label$18 
	
.LABEL $label$19
	$10 = [0]
	$9 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)5610840117515124736, $3)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$18 }
	$10 = CALL $34($6, $9)
	CALL eosio_assert(((int_32)*($10 + [148]) == (int_32)$6), [8599])
	
.LABEL $label$18
	*($5 + [32]) = [10346]
	*($5 + [36]) = CALL $172([10346])
	*($5 + [8]) = *($5 + [32])
	$9 = CALL $2(($5 + [72]), ($5 + [8]))
	if ( ((int_64)*($10 + [8]) != (int_64)*($9)) ){ goto $label$22 }
	*($5 + [24]) = [9587]
	*($5 + [28]) = CALL $172([9587])
	*($5) = *($5 + [24])
	$4 = *(CALL $2(($5 + [72]), $5))
	
.LABEL $label$22
	CALL $95($0, $4, $1, [0])
	$0 = *($5 + [112])
	if ( ($0 == 0) ){ goto $label$23 }
	$10 = ($5 + [116])
	$9 = *($10)
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$25 }
	
.LOOP $label$26:
	$9 = ($9 + [-24])
	$8 = *($9)
	*($9) = [0]
	if ( ($8 == 0) ){ goto $label$27 }
	CALL _ZdlPv($8)
	
.LABEL $label$27
	if ( ((int_32)$0 != (int_32)$9) ){ goto $label$26 }
	$9 = *(($5 + [112]))
	goto $label$24 
	
.LABEL $label$25
	$9 = $0
	
.LABEL $label$24
	*($10) = $0
	CALL _ZdlPv($9)
	
.LABEL $label$23
	$0 = *($5 + [152])
	if ( ($0 == 0) ){ goto $label$28 }
	$10 = ($5 + [156])
	$9 = *($10)
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$30 }
	
.LOOP $label$31:
	$9 = ($9 + [-24])
	$8 = *($9)
	*($9) = [0]
	if ( ($8 == 0) ){ goto $label$32 }
	CALL _ZdlPv($8)
	
.LABEL $label$32
	if ( ((int_32)$0 != (int_32)$9) ){ goto $label$31 }
	$9 = *(($5 + [152]))
	goto $label$29 
	
.LABEL $label$30
	$9 = $0
	
.LABEL $label$29
	*($10) = $0
	CALL _ZdlPv($9)
	
.LABEL $label$28
	$global$0 = ($5 + [192])
	return (unreachable)
	
.LABEL $label$13
	CALL $160(($5 + [56]))
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-5069082855582203903, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$7), [8599])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $49($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)-5069082855582203904, $6))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$7), [8599])
	
.LABEL $label$2
	*(($4 + [36])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $51 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = (int_64)0
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$3 = *(($2 + [36]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$3 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-5069082855582203903, $1, *($2))
	*((*(($0 + [4])) + [36])) = $3
	
.LABEL $label$3
	$4 = CALL db_idx64_previous($3, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9927])
	goto $label$1 
	
.LABEL $label$2
	$2 = *(*($0))
	$2 = CALL db_idx64_end(*($2), *($2 + [8]), (int_64)-5069082855582203903)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9873])
	$4 = CALL db_idx64_previous($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9873])
	
.LABEL $label$1
	$5 = *($1 + [8])
	$3 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$7:
	$2 = ($3 + [-24])
	$8 = *($2)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$6 }
	$3 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [8599])
	goto $label$4 
	
.LABEL $label$5
	$8 = CALL $49($6, CALL $fimport$4(*($6), *($6 + [8]), (int_64)-5069082855582203904, $5))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [8599])
	
.LABEL $label$4
	*(($0 + [4])) = $8
	*(($8 + [36])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $52 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [160])
	$global$0 = $4
	$3 = CALL $161(($4 + [88]), $3)
	CALL $84(($4 + [104]), $0, $1, $2, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$1
	$2 = CALL current_time()
	*(($4 + [52])) = (int_64)0
	*(($4 + [68])) = (int_64)0
	*(($4 + [76])) = (int_64)0
	*($4 + [36]) = [0]
	*($4 + [40]) = [0]
	*($4 + [44 align=4]) = (int_64)0
	*($4 + [60 align=4]) = (int_64)0
	*($4 + [24]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	CALL $104(($4 + [60]), ($4 + [104]))
	*($4 + [44]) = [0]
	$2 = *($0)
	*($4 + [8]) = (int_64)0
	*($4) = $1
	CALL $105(($4 + [144]), ($4 + [24]))
	$0 = *($4 + [144])
	CALL send_deferred($4, $2, $0, (*($4 + [148]) - $0), [0])
	$0 = *($4 + [144])
	if ( ($0 == 0) ){ goto $label$2 }
	*($4 + [148]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$2
	CALL $106(($4 + [24]))
	$0 = *($4 + [132])
	if ( ($0 == 0) ){ goto $label$3 }
	*(($4 + [136])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$0 = *($4 + [120])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($4 + [124])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($4 + [160])
}

void .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [192])
	$global$0 = $1
	$2 = CALL current_time()
	$3 = CALL current_time()
	*((($1 + [112]) + [28])) = (int_64)0
	*(($1 + [156])) = (int_64)0
	*(($1 + [164])) = (int_64)0
	*($1 + [124]) = [0]
	*($1 + [128]) = [0]
	*($1 + [132 align=4]) = (int_64)0
	*($1 + [148 align=4]) = (int_64)0
	*($1 + [112]) = ((CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000)) + [60])
	*($1 + [104]) = (int_64)0
	*($1 + [96]) = (int_64)2048
	$3 = *($0)
	*($1 + [80]) = [9719]
	*($1 + [84]) = CALL $172([9719])
	*($1 + [16]) = *($1 + [80])
	$4 = *(CALL $2(($1 + [88]), ($1 + [16])))
	$5 = *($0)
	*($1 + [24]) = [8433]
	*($1 + [28]) = CALL $172([8433])
	*($1 + [8]) = *($1 + [24])
	$6 = CALL $2(($1 + [32]), ($1 + [8]))
	*($1 + [176]) = (int_64)0
	*($1 + [40]) = $5
	*($1 + [48]) = *($6)
	*(($6 = CALL _Znwj([16]))) = $3
	*($6 + [8]) = $4
	*((($1 + [40]) + [36])) = [0]
	$7 = ($6 + [16])
	*(($1 + [64])) = $7
	*(($1 + [60])) = $7
	*($1 + [56]) = $6
	*($1 + [68 align=4]) = (int_64)0
	CALL $86((($1 + [40]) + [28]), [8])
	$6 = *($1 + [68])
	CALL eosio_assert(((int_32)(*(($1 + [72])) - $6) > (int_32)[7]), [8729])
	CALL memcpy($6, ($1 + [176]), [8])
	CALL $104((($1 + [112]) + [36]), ($1 + [40]))
	*($1 + [132]) = ([86460] - ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) % (uint_32)[86400]))
	CALL cancel_deferred(($1 + [96]))
	$2 = *($0)
	CALL $105(($1 + [176]), ($1 + [112]))
	$0 = *($1 + [176])
	CALL send_deferred(($1 + [96]), $2, $0, (*($1 + [180]) - $0), [0])
	$0 = *($1 + [176])
	if ( ($0 == 0) ){ goto $label$1 }
	*($1 + [180]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$0 = *($1 + [68])
	if ( ($0 == 0) ){ goto $label$2 }
	*(($1 + [72])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$0 = *($1 + [56])
	if ( ($0 == 0) ){ goto $label$3 }
	*(($1 + [60])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	CALL $106(($1 + [112]))
	$global$0 = ($1 + [192])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8673])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $150(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $161(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $161(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [16]) = [8365]
	*($2 + [20]) = CALL $172([8365])
	*($2 + [8]) = *($2 + [16])
	$3 = CALL $2(($2 + [24]), ($2 + [8]))
	if ( ((int_64)*($0 + [8]) != (int_64)*($3)) ){ goto $label$5 }
	$0 = CALL $172([9204])
	if ( ($0 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9213])
	goto $label$3 
	
.LABEL $label$5
	CALL eosio_assert([0], [10004])
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$4
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$6:
	$3 = *(($0 + [9203]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$7
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$6 }
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)$4), [10004])
	$global$0 = ($2 + [32])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$6 = ($3 + [1])
	$7 = ($2 + [1])
	$8 = *($2)
	
.LOOP $label$1:
	$12 = ($3 + [4])
	$14 = ($8 & [1])
	$13 = ($2 + [4])
	$9 = ( *($13) ? uint_32(($8 & [254]) >> [1]) : $14 )
	if ( ($9 <= $5) ){ goto $label$3 }
	$10 = $5
	$15 = ($8 & [1])
	$8 = *($3)
	$8 = ( *($12) ? uint_32($8 >> [1]) : $15 )
	if ( ($8 == 0) ){ goto $label$2 }
	$14 = ($11 + $5)
	$11 = ( *(($2 + [8])) ? $7 : $14 )
	$9 = ($11 + $9)
	$10 = ($9 - $14)
	if ( ((int_32)$10 < (int_32)$8) ){ goto $label$3 }
	$16 = ( *(($3 + [8])) ? $6 : $15 )
	$15 = *($16)
	
.LOOP $label$4:
	$10 = (($10 - $8) + [1])
	if ( ($10 == 0) ){ goto $label$3 }
	$10 = CALL $170($14, $15, $10)
	if ( ($10 == 0) ){ goto $label$3 }
	if ( (CALL $171($10, $16, $8) == 0) ){ goto $label$5 }
	$14 = ($10 + [1])
	$10 = ($9 - $14)
	if ( ((int_32)$10 >= (int_32)$8) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$3 }
	$10 = ($10 - $11)
	if ( ((int_32)$10 != (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = *($2)
	if ( ($8 & [1]) ){ goto $label$6 }
	$10 = uint_32($8 >> [1])
	goto $label$2 
	
.LABEL $label$6
	$10 = *($13)
	
.LABEL $label$2
	$8 = CALL $162($4, $2, $5, ($10 - $5), $2)
	$5 = ($0 + [4])
	$14 = *($5)
	if ( ((int_32)$14 == (int_32)*(($0 + [8]))) ){ goto $label$8 }
	CALL $161($14, $8)
	*($5) = (*($5) + [12])
	goto $label$7 
	
.LABEL $label$8
	CALL $116($0, $8)
	
.LABEL $label$7
	$5 = *($3)
	$14 = *($12)
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$9
	$8 = *($2)
	$12 = ( *($13) ? uint_32($8 >> [1]) : ($8 & [1]) )
	if ( ((uint_32)$10 >= (uint_32)$12) ){ goto $label$10 }
	$5 = (( $14 ? uint_32($5 >> [1]) : ($5 & [1]) ) + $10)
	if ( ($5 <= $12) ){ goto $label$1 }
	
.LABEL $label$10
	$global$0 = ($4 + [16])
}

int_32 .FUNC $173 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $166())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $174($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $175($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10548])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $175($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $151($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $163($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $163($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $160($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10543])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $86($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8673])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $173(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10548])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $173(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $178($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $178($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $69 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = $1
	*($0) = (int_64)429496729606
	$1 = *($2)
	CALL eosio_assert([1], [8729])
	CALL memcpy($3, $0, [4])
	CALL eosio_assert([1], [8729])
	CALL memcpy(($3 | [4]), ($0 + [4]), [4])
	$4 = *($0)
	*($0 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-8451382383004876800, *(*($2 + [8])), $4, $3, [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)$4) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = $1
	*($0) = (int_64)429496729605
	$1 = *($2)
	CALL eosio_assert([1], [8729])
	CALL memcpy($3, $0, [4])
	CALL eosio_assert([1], [8729])
	CALL memcpy(($3 | [4]), ($0 + [4]), [4])
	$4 = *($0)
	*($0 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-8451382383004876800, *(*($2 + [8])), $4, $3, [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)$4) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $65 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = $1
	*($0) = (int_64)2147483648002
	$1 = *($2)
	CALL eosio_assert([1], [8729])
	CALL memcpy($3, $0, [4])
	CALL eosio_assert([1], [8729])
	CALL memcpy(($3 | [4]), ($0 + [4]), [4])
	$4 = *($0)
	*($0 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-8451382383004876800, *(*($2 + [8])), $4, $3, [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)$4) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $165($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = $1
	*($0) = (int_64)858993459204
	$1 = *($2)
	CALL eosio_assert([1], [8729])
	CALL memcpy($3, $0, [4])
	CALL eosio_assert([1], [8729])
	CALL memcpy(($3 | [4]), ($0 + [4]), [4])
	$4 = *($0)
	*($0 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-8451382383004876800, *(*($2 + [8])), $4, $3, [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)$4) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = $1
	*($0) = (int_64)858993459203
	$1 = *($2)
	CALL eosio_assert([1], [8729])
	CALL memcpy($3, $0, [4])
	CALL eosio_assert([1], [8729])
	CALL memcpy(($3 | [4]), ($0 + [4]), [4])
	$4 = *($0)
	*($0 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-8451382383004876800, *(*($2 + [8])), $4, $3, [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)$4) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $61 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($0 + [68]) = $1
	*($0) = (int_64)0
	*($0 + [16]) = [100]
	*($0 + [20 align=4]) = (int_64)25332765083843224
	*($0 + [28]) = [90]
	*($0 + [48]) = [800]
	*($0 + [64]) = [6]
	*($0) = *(*(*($2 + [4])))
	*($0 + [8]) = (int_64)600000
	*($0 + [40]) = (int_64)172800
	*($0 + [32]) = (int_64)172800
	*($0 + [56]) = (int_64)3000000
	$1 = *($2)
	*($3 + [80]) = ($3 + [58])
	*($3 + [76]) = $3
	*($3 + [72]) = $3
	*($3 + [88]) = ($3 + [72])
	*($3 + [100]) = ($0 + [8])
	*($3 + [96]) = $0
	*($3 + [104]) = ($0 + [16])
	*($3 + [108]) = ($0 + [20])
	*($3 + [112]) = ($0 + [24])
	*($3 + [116]) = ($0 + [26])
	*($3 + [120]) = ($0 + [28])
	*($3 + [124]) = ($0 + [32])
	*($3 + [128]) = ($0 + [40])
	*($3 + [132]) = ($0 + [48])
	*($3 + [136]) = ($0 + [56])
	*($3 + [140]) = ($0 + [64])
	CALL $80(($3 + [96]), ($3 + [88]))
	$4 = *($0)
	*($0 + [72]) = CALL db_store_i64(*($1 + [8]), (int_64)4982871454518345728, *(*($2 + [8])), $4, $3, [58])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $0
}

void .FUNC $60 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$4 = ($global$0 - [80])
	$global$0 = $4
	$5 = ($0 + [32])
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($9 + [148])) == (int_32)$5), [8599])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [40])), (int_64)5610840117515124736, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $34($5, $8)
	CALL eosio_assert(((int_32)*($9 + [148]) == (int_32)$5), [8599])
	
.LABEL $label$1
	$10 = ($0 + [192])
	$11 = *($0)
	$7 = *(($0 + [220]))
	$12 = *(($0 + [216]))
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$8:
	$8 = ($7 + [-24])
	$6 = *($8)
	if ( ((int_64)*($6) == (int_64)$11) ){ goto $label$7 }
	$7 = $8
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(($6 + [68])) == (int_32)$10), [8599])
	goto $label$5 
	
.LABEL $label$6
	$6 = [0]
	$8 = CALL db_find_i64(*($10), *(($0 + [200])), (int_64)4982871454518345728, $11)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $16($10, $8)
	CALL eosio_assert(((int_32)*($6 + [68]) == (int_32)$10), [8599])
	
.LABEL $label$5
	$8 = [0]
	$12 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($12, [10493])
	$14 = (int_64)
	$7 = *($6 + [20])
	$13 = *($2)
	$11 = ((int_64)((int_64)$13 * (int_64)(CASTING uint_64)(uint_32 $7)) / (int_64)100000000)
	$11 = (int_64)
	CALL eosio_assert(((uint_64)$11($11 - ((uint_64)$11 % (uint_64)(CASTING uint_64)(uint_32 ((uint_32)((int_32)$7 * (int_32)*($6 + [24])) / (uint_32)[10000]))))) >= (uint_64)$14((CASTING uint_64)(uint_32 ((int_32)*($9 + [112]) * (int_32)*($6 + [28]))) - *($9 + [136])))), [10509])
	if ( (*($9 + [144]) == 0) ){ goto $label$9 }
	$11 = ( $14 ? $11 : (uint_64)($14 <= $11) )
	CALL eosio_assert(((int_64)$11 != (int_64)0), [10528])
	$8 = *(($9 + [144]))
	
.LABEL $label$9
	$14 = *(($6 + [20]))
	$15 = *(($9 + [136]))
	*($4 + [72]) = ((int_64)$15 + (int_64)$11)
	$16 = ((uint_64)((int_64)$11 * (int_64)100000000) / (uint_64)$14)
	*($4 + [71]) = $8
	if ( ($8 & [255]) ){ goto $label$10 }
	$14 = (int_64)
	if ( ((int_64)$14($15 - $11)) <= (int_64)0) ){ goto $label$11 }
	*($4 + [72]) = $14
	goto $label$10 
	
.LABEL $label$11
	*($4 + [71]) = [1]
	*($4 + [72]) = (int_64))($11 - $15)
	
.LABEL $label$10
	$14 = ((int_64)*($9 + [16]) + (int_64)((int_64)$13 / (int_64)20))
	$8 = CALL $172([9204])
	if ( ($8 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [9213])
	goto $label$14 
	
.LABEL $label$15
	if ( ($8 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$11 = (int_64)0
	
.LOOP $label$16:
	$7 = *(($8 + [9203]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$17
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$16 }
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$11 = (int_64)4
	
.LABEL $label$12
	*($4 + [48]) = $14
	*($4 + [56]) = $11
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9311])
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$14 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$11 = $14
	$7 = [1]
	$6 = $8
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$11 = $14
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$6 = ($8 + [1])
	$8 = $6
	if ( $7 ){ goto $label$22 }
	$7 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$7 = [0]
	
.LABEL $label$18
	CALL eosio_assert($7, [9360])
	$11 = *($0)
	*($4 + [36]) = ($4 + [71])
	*($4 + [32]) = ($4 + [72])
	*($4 + [40]) = ($4 + [48])
	CALL eosio_assert($12, [8735])
	CALL $130($5, $9, $11, ($4 + [32]))
	$8 = CALL $172([9204])
	if ( ($8 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [9213])
	goto $label$25 
	
.LABEL $label$26
	if ( ($8 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$11 = (int_64)0
	
.LOOP $label$27:
	$7 = *(($8 + [9203]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$28
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$27 }
	$13 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)4)
	goto $label$23 
	
.LABEL $label$24
	$13 = (int_64)4
	
.LABEL $label$23
	CALL eosio_assert((uint_64)(((int_64)$16 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9311])
	$11 = (uint_64)$13 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$14 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$11 = $14
	$7 = [1]
	$6 = $8
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$11 = $14
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$6 = ($8 + [1])
	$8 = $6
	if ( $7 ){ goto $label$33 }
	$7 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$7 = [0]
	
.LABEL $label$29
	CALL eosio_assert($7, [9360])
	*(($4 + [8])) = $13
	*($4 + [24]) = $13
	*($4) = $16
	*($4 + [16]) = $16
	CALL $126($0, $1, $4, [1])
	$global$0 = ($4 + [80])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = $1
	*($0) = (int_64)4294967296001
	$1 = *($2)
	CALL eosio_assert([1], [8729])
	CALL memcpy($3, $0, [4])
	CALL eosio_assert([1], [8729])
	CALL memcpy(($3 | [4]), ($0 + [4]), [4])
	$4 = *($0)
	*($0 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-8451382383004876800, *(*($2 + [8])), $4, $3, [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)$4) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $165($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [384])
	$global$0 = $3
	CALL memory()
	*($3 + [368]) = [8192]
	*($3 + [372]) = CALL $172([8192])
	*($3 + [144]) = *($3 + [368])
	CALL $2(($3 + [376]), ($3 + [144]))
	if ( ((int_64)$2 != (int_64)-6569208335818555392) ){ goto $label$1 }
	*($3 + [360]) = [8200]
	*($3 + [364]) = CALL $172([8200])
	*($3 + [136]) = *($3 + [360])
	CALL $2(($3 + [376]), ($3 + [136]))
	CALL eosio_assert(((int_64)$1 == (int_64)6138663577826885632), [8292])
	
.LABEL $label$1
	*($3 + [352]) = [8356]
	*($3 + [356]) = CALL $172([8356])
	*($3 + [128]) = *($3 + [352])
	CALL $2(($3 + [376]), ($3 + [128]))
	[0]
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$4 }
	*($3 + [336]) = [8365]
	*($3 + [340]) = CALL $172([8365])
	*($3 + [120]) = *($3 + [336])
	CALL $2(($3 + [344]), ($3 + [120]))
	[1]
	if ( ((int_64)$1 == (int_64)6138663591592764928) ){ goto $label$3 }
	
.LABEL $label$4
	*($3 + [320]) = [8377]
	*($3 + [324]) = CALL $172([8377])
	*($3 + [112]) = *($3 + [320])
	CALL $2(($3 + [328]), ($3 + [112]))
	if ( ((int_64)$1 != (int_64)-6228190955511332336) ){ goto $label$2 }
	*($3 + [304]) = [8390]
	*($3 + [308]) = CALL $172([8390])
	*($3 + [104]) = *($3 + [304])
	CALL $2(($3 + [312]), ($3 + [104]))
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$5 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [1]
	*($3 + [8]) = *($3 + [200])
	CALL $4($0, (int_64)-6228190955511332336, ($3 + [8]))
	goto $label$2 
	
.LABEL $label$5
	*($3 + [288]) = [8395]
	*($3 + [292]) = CALL $172([8395])
	*($3 + [96]) = *($3 + [288])
	CALL $2(($3 + [296]), ($3 + [96]))
	if ( ((int_64)$2 == (int_64)-3073298666878926848) ){ goto $label$6 }
	*($3 + [272]) = [8403]
	*($3 + [276]) = CALL $172([8403])
	*($3 + [88]) = *($3 + [272])
	CALL $2(($3 + [280]), ($3 + [88]))
	$4 = [1]
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$7 }
	*($3 + [256]) = [8409]
	*($3 + [260]) = CALL $172([8409])
	*($3 + [80]) = *($3 + [256])
	CALL $2(($3 + [264]), ($3 + [80]))
	$4 = [1]
	if ( ((int_64)$2 == (int_64)4921564755587216032) ){ goto $label$7 }
	*($3 + [240]) = [8422]
	*($3 + [244]) = CALL $172([8422])
	*($3 + [72]) = *($3 + [240])
	CALL $2(($3 + [248]), ($3 + [72]))
	$4 = [1]
	if ( ((int_64)$2 == (int_64)4923678490122780672) ){ goto $label$7 }
	*($3 + [224]) = [8428]
	*($3 + [228]) = CALL $172([8428])
	*($3 + [64]) = *($3 + [224])
	CALL $2(($3 + [232]), ($3 + [64]))
	$4 = [1]
	if ( ((int_64)$2 == (int_64)-4421672816961650688) ){ goto $label$7 }
	*($3 + [208]) = [8433]
	*($3 + [212]) = CALL $172([8433])
	*($3 + [56]) = *($3 + [208])
	$4 = ((int_64)$2 == (int_64)-4420674896611246080)
	CALL $2(($3 + [216]), ($3 + [56]))
	
.LABEL $label$7
	if ( ($4 == 0) ){ goto $label$2 }
	if ( ((int_64)$2 > (int_64)-3073298666878926849) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-4421672816961650688) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-4420674896611246080) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)-3073298666878926848) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)4921564755587216032) ){ goto $label$2 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [2]
	*($3 + [32]) = *($3 + [176])
	CALL $6($0, (int_64)-6228190955511332336, ($3 + [32]))
	goto $label$2 
	
.LABEL $label$10
	*($3 + [172]) = [0]
	*($3 + [168]) = [3]
	*($3 + [40]) = *($3 + [168])
	CALL $8($0, (int_64)-6228190955511332336, ($3 + [40]))
	goto $label$2 
	
.LABEL $label$9
	*($3 + [164]) = [0]
	*($3 + [160]) = [4]
	*($3 + [48]) = *($3 + [160])
	CALL $10($0, (int_64)-6228190955511332336, ($3 + [48]))
	goto $label$2 
	
.LABEL $label$8
	*($3 + [188]) = [0]
	*($3 + [184]) = [5]
	*($3 + [24]) = *($3 + [184])
	CALL $6($0, (int_64)-6228190955511332336, ($3 + [24]))
	goto $label$2 
	
.LABEL $label$6
	*($3 + [196]) = [0]
	*($3 + [192]) = [6]
	*($3 + [16]) = *($3 + [192])
	CALL $4($0, (int_64)-6228190955511332336, ($3 + [16]))
	goto $label$2 
	
.LABEL $label$3
	*($3 + [156]) = [0]
	*($3 + [152]) = [7]
	*($3) = *($3 + [152])
	CALL $14($0, $1, $3)
	
.LABEL $label$2
	CALL $167([0])
	$global$0 = ($3 + [384])
}

void .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $165($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8673])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8673])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8673])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8673])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8673])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8673])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8673])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [8673])
	CALL memcpy($4, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8729])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8729])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $165($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $86($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8729])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8729])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $102(CALL $101($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$5 = ($global$0 - [160])
	$global$0 = $5
	$6 = CALL $172([9204])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9213])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [9203]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$9 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9311])
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $10
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $10
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$11 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	
.LABEL $label$7
	CALL eosio_assert($8, [9360])
	*((($5 + [80]) + [24])) = $9
	*($5 + [88]) = $2
	*($5 + [96]) = $3
	*($5 + [80]) = *($1)
	$8 = CALL $161((($5 + [80]) + [32]), $4)
	*($5 + [64]) = [8365]
	*($5 + [68]) = CALL $172([8365])
	*($5 + [24]) = *($5 + [64])
	$6 = CALL $2(($5 + [72]), ($5 + [24]))
	$7 = *($1)
	*($5 + [48]) = [9719]
	*($5 + [52]) = CALL $172([9719])
	*($5 + [16]) = *($5 + [48])
	$10 = *(CALL $2(($5 + [56]), ($5 + [16])))
	$3 = *($6)
	*($5 + [32]) = [8356]
	*($5 + [36]) = CALL $172([8356])
	*($5 + [8]) = *($5 + [32])
	$6 = CALL $2(($5 + [40]), ($5 + [8]))
	*($0) = $3
	*($0 + [8]) = *($6)
	$6 = CALL _Znwj([16])
	*($0 + [16]) = $6
	*($6) = $7
	*($6 + [8]) = $10
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$6 = ($6 + [16])
	*(($0 + [24])) = $6
	*(($0 + [20])) = $6
	$6 = *($8)
	$8 = ( *((($5 + [80]) + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($8 + [32])
	$7 = (CASTING uint_64)(uint_32 $8)
	$8 = ($0 + [28])
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$12 }
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $86($8, $6)
	$8 = *(($0 + [32]))
	$6 = *(($0 + [28]))
	goto $label$13 
	
.LABEL $label$14
	$8 = [0]
	$6 = [0]
	
.LABEL $label$13
	*($5 + [132]) = $6
	*($5 + [128]) = $6
	*($5 + [136]) = $8
	*($5 + [144]) = ($5 + [128])
	*($5 + [152]) = ($5 + [80])
	CALL $100(($5 + [152]), ($5 + [144]))
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [120])))
	
.LABEL $label$15
	$global$0 = ($5 + [160])
}

void .FUNC $83 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$5 = ($global$0 - [96])
	$global$0 = $5
	if ( (int_64)($4 == 0) ){ goto $label$1 }
	$6 = ($0 + [152])
	$8 = *(($0 + [180]))
	$7 = *(($0 + [176]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LOOP $label$5:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$3) ){ goto $label$4 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($10 + [8]) == (int_32)$6), [8599])
	goto $label$2 
	
.LABEL $label$3
	$10 = [0]
	$9 = CALL db_find_i64(*($6), *(($0 + [160])), (int_64)-8451382383004876800, $3)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$2 }
	$10 = CALL $94($6, $9)
	CALL eosio_assert(((int_32)*($10 + [8]) == (int_32)$6), [8599])
	
.LABEL $label$2
	$11 = ($0 + [32])
	$8 = *(($0 + [60]))
	$7 = *(($0 + [56]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$14 }
	
.LOOP $label$16:
	$9 = ($8 + [-24])
	$6 = *($9)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$15 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*(($6 + [148])) == (int_32)$11), [8599])
	if ( $10 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$6 = [0]
	$9 = CALL db_find_i64(*($11), *(($0 + [40])), (int_64)5610840117515124736, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$17 }
	$6 = CALL $34($11, $9)
	CALL eosio_assert(((int_32)*($6 + [148]) == (int_32)$11), [8599])
	
.LABEL $label$17
	if ( ($10 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$1 = *($6 + [8])
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$21 }
	$8 = [0]
	$7 = *([0] + [9600])
	
.LOOP $label$23:
	*((($5 + [83]) + ($9 = $8))) = *(($7 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$9 == (int_32)[12]) )))))
	$8 = ($9 + [1])
	if ( ((uint_32)$9 > (uint_32)[11]) ){ goto $label$22 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$23 }
	
.LABEL $label$22
	*(($5 + [72])) = [0]
	*($5 + [64]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$20 }
	*($5 + [64]) = ($8 << [1])
	$7 = (($5 + [64]) | [1])
	goto $label$19 
	
.LABEL $label$21
	*(($5 + [72])) = [0]
	*($5 + [64]) = (int_64)0
	*($5 + [64]) = [0]
	$9 = (($5 + [64]) | [1])
	goto $label$18 
	
.LABEL $label$20
	$11 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($11)
	*($5 + [64]) = ($11 | [1])
	*($5 + [72]) = $7
	*($5 + [68]) = $8
	
.LABEL $label$19
	$11 = ($9 + [1])
	$9 = [0]
	
.LOOP $label$24:
	*(($7 + $9)) = *((($5 + [83]) + $9))
	$9 = ($9 + [1])
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$24 }
	$9 = ($7 + $8)
	
.LABEL $label$18
	*($9) = [0]
	$9 = ($9 & [1])
	$9 = *($5 + [64])
	$8 = ( *($5 + [68]) ? uint_32($9 >> [1]) : $9 )
	if ( ($9 == 0) ){ goto $label$25 }
	CALL _ZdlPv(*($5 + [72]))
	
.LABEL $label$25
	if ( ($8 == 0) ){ goto $label$12 }
	$12 = ((int_64)((int_64)*($2) * (int_64)*($10 + [4])) / (int_64)10000)
	CALL eosio_assert(((uint_64)$12 <= (uint_64)$4), [9560])
	$13 = *(($6 + [8]))
	$9 = CALL $172([9208])
	if ( ($9 <= [8]) ){ goto $label$11 }
	CALL eosio_assert([0], [9213])
	goto $label$10 
	
.LABEL $label$12
	*($5 + [32]) = [9587]
	*($5 + [36]) = CALL $172([9587])
	*($5 + [8]) = *($5 + [32])
	$7 = CALL $2(($5 + [40]), ($5 + [8]))
	$9 = CALL $172([9208])
	if ( ($9 <= [8]) ){ goto $label$27 }
	CALL eosio_assert([0], [9213])
	goto $label$26 
	
.LABEL $label$27
	if ( ($9 == 0) ){ goto $label$9 }
	
.LABEL $label$26
	$1 = (int_64)0
	
.LOOP $label$28:
	$8 = *(($9 + [9207]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$29 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$29
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$28 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$6 
	
.LABEL $label$11
	if ( ($9 == 0) ){ goto $label$8 }
	
.LABEL $label$10
	$1 = (int_64)0
	
.LOOP $label$30:
	$8 = *(($9 + [9207]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$31 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$31
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$30 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$7 
	
.LABEL $label$9
	$1 = (int_64)4
	goto $label$6 
	
.LABEL $label$8
	$1 = (int_64)4
	
.LABEL $label$7
	CALL $95($0, $13, $12, ((int_64)*($2 + [8]) == (int_64)$1))
	$1 = *(($6 + [8]))
	*(($9 = (($5 + [48]) + [8]))) = *($2 + [8])
	$13 = *($2)
	*((($5 + [16]) + [8])) = *($9)
	*($5 + [48]) = $13
	*($5 + [16]) = *($5 + [48])
	CALL $83($0, $1, ($5 + [16]), ((int_64)$3 + (int_64)1), (int_64))($4 - $12))
	$global$0 = ($5 + [96])
	return 
	
.LABEL $label$6
	CALL $95($0, *($7), $4, ((int_64)*($2 + [8]) == (int_64)$1))
	
.LABEL $label$1
	$global$0 = ($5 + [96])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [224])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [148])) == (int_32)$0), [8770])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8816])
	*($1 + [136]) = *(*($3))
	$5 = *($3 + [4])
	*(($1 + [56])) = *(($5 + [8]))
	*($1 + [48]) = *($5)
	$5 = *($3 + [8])
	*($1 + [64]) = *($5)
	*(($1 + [72])) = *(($5 + [8]))
	*($1 + [120]) = *(*($3 + [12]))
	$6 = *($1)
	CALL eosio_assert([1], [8867])
	*($4 + [152]) = ($4 + [141])
	*($4 + [148]) = $4
	*($4 + [144]) = $4
	*($4 + [160]) = ($4 + [144])
	*($4 + [172]) = ($1 + [8])
	*($4 + [168]) = $1
	*($4 + [176]) = ($1 + [16])
	*($4 + [180]) = ($1 + [32])
	*($4 + [184]) = ($1 + [48])
	*($4 + [188]) = ($1 + [64])
	*($4 + [192]) = ($1 + [80])
	*($4 + [196]) = ($1 + [96])
	*($4 + [200]) = ($1 + [112])
	*($4 + [204]) = ($1 + [120])
	*($4 + [208]) = ($1 + [128])
	*($4 + [212]) = ($1 + [136])
	*($4 + [216]) = ($1 + [144])
	CALL $90(($4 + [168]), ($4 + [160]))
	CALL db_update_i64(*($1 + [152]), $2, $4, [141])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [224])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [76])) == (int_32)$0), [8770])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8816])
	$5 = *(*($3))
	*($1 + [24]) = $5
	*($1 + [32]) = $5
	$3 = *($3 + [4])
	*(($1 + [64])) = *(($3 + [8]))
	*($1 + [56]) = *($3)
	$5 = *($1)
	CALL eosio_assert([1], [8867])
	*($4 + [96]) = ($4 + [73])
	*($4 + [92]) = $4
	*($4 + [88]) = $4
	*($4 + [104]) = ($4 + [88])
	*($4 + [116]) = ($1 + [8])
	*($4 + [112]) = $1
	*($4 + [120]) = ($1 + [16])
	*($4 + [124]) = ($1 + [24])
	*($4 + [128]) = ($1 + [32])
	*($4 + [132]) = ($1 + [40])
	*($4 + [136]) = ($1 + [56])
	*($4 + [140]) = ($1 + [72])
	CALL $96(($4 + [112]), ($4 + [104]))
	CALL db_update_i64(*($1 + [80]), $2, $4, [73])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [144])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [8729])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [8729])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [8729])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [8729])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [8729])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [8729])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[1]), [8729])
	CALL memcpy(*($0 + [4]), $3, [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
}

void .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $165($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $148 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $165($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $145 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8770])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8816])
	*($1 + [8]) = ((int_64)*(*($3)) + (int_64)*($1 + [8]))
	$5 = *($1)
	CALL eosio_assert([1], [8867])
	CALL eosio_assert([1], [8729])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8729])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8650])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $175($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8673])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8673])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $148(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $178($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $147 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0) = (int_64)0
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL eosio_assert([1], [8729])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8729])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $146 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $147($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $148(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [112]) = *(*($4 + [8]))
	$5 = ($1 + [112])
	$6 = *($0)
	if ( (*(*($4 + [12])) == 0) ){ goto $label$2 }
	*($1 + [136]) = *(*($4 + [16]))
	$7 = ($1 + [136])
	goto $label$1 
	
.LABEL $label$2
	$7 = ($1 + [136])
	
.LABEL $label$1
	*($1 + [144]) = [1]
	*($1 + [128]) = *(*($4 + [20]))
	$2 = $2
	$4 = ($2 + [-144])
	$global$0 = $4
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($2 + [-3])
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = ($1 + [32])
	*($3 + [40]) = ($1 + [48])
	*($3 + [44]) = ($1 + [64])
	*($3 + [48]) = ($1 + [80])
	*($3 + [52]) = ($1 + [96])
	*($3 + [56]) = $5
	*($3 + [60]) = ($1 + [120])
	*($3 + [64]) = ($1 + [128])
	*($3 + [68]) = $7
	*($3 + [72]) = ($1 + [144])
	CALL $90(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [152]) = CALL db_store_i64(*($6 + [8]), (int_64)5610840117515124736, *(*($0 + [8])), $8, $4, [141])
	if ( (uint_64)($8 <= *($6 + [16])) ){ goto $label$3 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $140 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8770])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8816])
	$3 = *($3)
	*($1 + [16]) = *($3)
	*(($1 + [24])) = *(($3 + [8]))
	$5 = *($1)
	CALL eosio_assert([1], [8867])
	*($4 + [48]) = ($4 + [28])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [8])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [16])
	CALL $109(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [36]), $2, $4, [28])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $143 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [16])
	if ( (CALL $171(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [32])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-5069082855582203904, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [32]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [8])
	if ( (CALL $171((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [36]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-5069082855582203903, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [36])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	$3 = *($0)
	CALL eosio_assert([1], [8729])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8729])
	$4 = ($1 + [8])
	CALL memcpy(($2 | [8]), $4, [8])
	CALL eosio_assert([1], [8729])
	$5 = ($1 + [16])
	CALL memcpy(($2 + [16]), $5, [8])
	$6 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)-5069082855582203904, *(*($0 + [8])), $6, $2, [24])
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = ($3 + [8])
	$6 = *($3)
	$0 = *(($0 + [8]))
	$7 = *($0)
	$8 = *($1)
	*($2 + [24]) = *($5)
	*($1 + [32]) = CALL db_idx64_store($6, (int_64)-5069082855582203904, $7, $8, ($2 + [24]))
	$6 = *($0)
	$7 = *($3)
	$8 = *($1)
	*($2 + [24]) = *($4)
	*(($1 + [36])) = CALL db_idx64_store($7, (int_64)-5069082855582203903, $6, $8, ($2 + [24]))
	$global$0 = ($2 + [32])
}

int_32 .FUNC $72 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = $1
	*($0) = (int_64)214748364809
	$1 = *($2)
	CALL eosio_assert([1], [8729])
	CALL memcpy($3, $0, [4])
	CALL eosio_assert([1], [8729])
	CALL memcpy(($3 | [4]), ($0 + [4]), [4])
	$4 = *($0)
	*($0 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-8451382383004876800, *(*($2 + [8])), $4, $3, [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)$4) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $73 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = $1
	*($0) = (int_64)214748364810
	$1 = *($2)
	CALL eosio_assert([1], [8729])
	CALL memcpy($3, $0, [4])
	CALL eosio_assert([1], [8729])
	CALL memcpy(($3 | [4]), ($0 + [4]), [4])
	$4 = *($0)
	*($0 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-8451382383004876800, *(*($2 + [8])), $4, $3, [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)$4) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $70 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = $1
	*($0) = (int_64)429496729607
	$1 = *($2)
	CALL eosio_assert([1], [8729])
	CALL memcpy($3, $0, [4])
	CALL eosio_assert([1], [8729])
	CALL memcpy(($3 | [4]), ($0 + [4]), [4])
	$4 = *($0)
	*($0 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-8451382383004876800, *(*($2 + [8])), $4, $3, [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)$4) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = $1
	*($0) = (int_64)214748364808
	$1 = *($2)
	CALL eosio_assert([1], [8729])
	CALL memcpy($3, $0, [4])
	CALL eosio_assert([1], [8729])
	CALL memcpy(($3 | [4]), ($0 + [4]), [4])
	$4 = *($0)
	*($0 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-8451382383004876800, *(*($2 + [8])), $4, $3, [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)$4) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $76 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = $1
	*($0) = (int_64)128849018893
	$1 = *($2)
	CALL eosio_assert([1], [8729])
	CALL memcpy($3, $0, [4])
	CALL eosio_assert([1], [8729])
	CALL memcpy(($3 | [4]), ($0 + [4]), [4])
	$4 = *($0)
	*($0 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-8451382383004876800, *(*($2 + [8])), $4, $3, [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)$4) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $77 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = $1
	*($0) = (int_64)85899345934
	$1 = *($2)
	CALL eosio_assert([1], [8729])
	CALL memcpy($3, $0, [4])
	CALL eosio_assert([1], [8729])
	CALL memcpy(($3 | [4]), ($0 + [4]), [4])
	$4 = *($0)
	*($0 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-8451382383004876800, *(*($2 + [8])), $4, $3, [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)$4) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $74 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = $1
	*($0) = (int_64)214748364811
	$1 = *($2)
	CALL eosio_assert([1], [8729])
	CALL memcpy($3, $0, [4])
	CALL eosio_assert([1], [8729])
	CALL memcpy(($3 | [4]), ($0 + [4]), [4])
	$4 = *($0)
	*($0 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-8451382383004876800, *(*($2 + [8])), $4, $3, [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)$4) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $75 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = $1
	*($0) = (int_64)128849018892
	$1 = *($2)
	CALL eosio_assert([1], [8729])
	CALL memcpy($3, $0, [4])
	CALL eosio_assert([1], [8729])
	CALL memcpy(($3 | [4]), ($0 + [4]), [4])
	$4 = *($0)
	*($0 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-8451382383004876800, *(*($2 + [8])), $4, $3, [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)$4) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $78 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = $1
	*($0) = (int_64)85899345935
	$1 = *($2)
	CALL eosio_assert([1], [8729])
	CALL memcpy($3, $0, [4])
	CALL eosio_assert([1], [8729])
	CALL memcpy(($3 | [4]), ($0 + [4]), [4])
	$4 = *($0)
	*($0 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-8451382383004876800, *(*($2 + [8])), $4, $3, [8])
	if ( ((uint_64)*($1 + [16]) > (uint_64)$4) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [8673])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [8673])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [8673])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [8673])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [8673])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [8673])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[1]), [8673])
	CALL memcpy($3, *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
}

void .FUNC $98 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [148])) == (int_32)$0), [8770])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8816])
	$6 = *($3 + [4])
	$7 = *($1)
	if ( (*(*($3)) == 0) ){ goto $label$2 }
	*($1 + [32]) = *($6)
	*(($1 + [40])) = *(($6 + [8]))
	$3 = *($3 + [8])
	*($1 + [96]) = *($3)
	*(($1 + [104])) = *(($3 + [8]))
	$6 = ($1 + [80])
	$8 = ($1 + [16])
	$9 = ($1 + [96])
	$10 = ($1 + [32])
	goto $label$1 
	
.LABEL $label$2
	*($1 + [16]) = *($6)
	*(($1 + [24])) = *(($6 + [8]))
	$3 = *($3 + [8])
	*($1 + [80]) = *($3)
	*(($1 + [88])) = *(($3 + [8]))
	$9 = ($1 + [96])
	$10 = ($1 + [32])
	$6 = ($1 + [80])
	$8 = ($1 + [16])
	
.LABEL $label$1
	CALL eosio_assert([1], [8867])
	$4 = $4
	$3 = ($4 + [-144])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($4 + [-3])
	*($5 + [16]) = $5
	*($5 + [32]) = $8
	*($5 + [36]) = $10
	*($5 + [48]) = $6
	*($5 + [52]) = $9
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [8])
	*($5 + [40]) = ($1 + [48])
	*($5 + [44]) = ($1 + [64])
	*($5 + [56]) = ($1 + [112])
	*($5 + [60]) = ($1 + [120])
	*($5 + [64]) = ($1 + [128])
	*($5 + [68]) = ($1 + [136])
	*($5 + [72]) = ($1 + [144])
	CALL $90(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [152]), $2, $3, [141])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($5 + [80])
}

int_32 .FUNC $99 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [224])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($0 + [80]) = (int_64)0
	*($0 + [96]) = (int_64)0
	*($0 + [148]) = $1
	*(($0 + [24])) = (int_64)0
	*(($0 + [40])) = (int_64)0
	*(($0 + [56])) = (int_64)0
	*(($0 + [72])) = (int_64)0
	*(($0 + [88])) = (int_64)0
	*(($0 + [104])) = (int_64)0
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [144]) = [1]
	*($0 + [128]) = *(*($1 + [4]))
	$1 = *($2)
	*($3 + [152]) = ($3 + [141])
	*($3 + [148]) = $3
	*($3 + [144]) = $3
	*($3 + [160]) = ($3 + [144])
	*($3 + [172]) = ($0 + [8])
	*($3 + [168]) = $0
	*($3 + [176]) = ($0 + [16])
	*($3 + [180]) = ($0 + [32])
	*($3 + [184]) = ($0 + [48])
	*($3 + [188]) = ($0 + [64])
	*($3 + [192]) = ($0 + [80])
	*($3 + [196]) = ($0 + [96])
	*($3 + [200]) = ($0 + [112])
	*($3 + [204]) = ($0 + [120])
	*($3 + [208]) = ($0 + [128])
	*($3 + [212]) = ($0 + [136])
	*($3 + [216]) = ($0 + [144])
	CALL $90(($3 + [168]), ($3 + [160]))
	$4 = *($0)
	*($0 + [152]) = CALL db_store_i64(*($1 + [8]), (int_64)5610840117515124736, *(*($2 + [8])), $4, $3, [141])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [224])
	return $0
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8650])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $175($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([20])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[3]), [8673])
	CALL memcpy($5, $2, [4])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[4]), [8673])
	CALL memcpy(($5 + [4]), ($2 + [4]), [4])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $64(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $178($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $95 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$4 = ($global$0 - [160])
	$global$0 = $4
	*($4 + [151]) = $3
	*($4 + [152]) = $1
	if ( (int_64)($2 == 0) ){ goto $label$5 }
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$9 }
	$5 = [0]
	$6 = *([0] + [9600])
	
.LOOP $label$11:
	*((($4 + [72]) + ($3 = $5))) = *(($6 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$3 == (int_32)[12]) )))))
	$5 = ($3 + [1])
	if ( ((uint_32)$3 > (uint_32)[11]) ){ goto $label$10 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($4 + [64])) = [0]
	*($4 + [56]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($4 + [56]) = ($5 << [1])
	$6 = (($4 + [56]) | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($4 + [64])) = [0]
	*($4 + [56]) = (int_64)0
	*($4 + [56]) = [0]
	$3 = (($4 + [56]) | [1])
	goto $label$6 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4 + [56]) = ($7 | [1])
	*($4 + [64]) = $6
	*($4 + [60]) = $5
	
.LABEL $label$7
	$7 = ($3 + [1])
	$3 = [0]
	
.LOOP $label$12:
	*(($6 + $3)) = *((($4 + [72]) + $3))
	$3 = ($3 + [1])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$12 }
	$3 = ($6 + $5)
	
.LABEL $label$6
	*($3) = [0]
	$3 = ($3 & [1])
	$3 = *($4 + [56])
	$5 = ( *($4 + [60]) ? uint_32($3 >> [1]) : $3 )
	if ( ($3 == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($4 + [64]))
	
.LABEL $label$13
	if ( ($5 == 0) ){ goto $label$5 }
	$8 = ($0 + [32])
	$1 = *($4 + [152])
	$5 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$19:
	$3 = ($5 + [-24])
	$7 = *($3)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$18 }
	$5 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$17 }
	CALL eosio_assert(((int_32)*(($7 + [148])) == (int_32)$8), [8599])
	if ( ($7 == 0) ){ goto $label$14 }
	if ( *($7 + [112]) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$17
	$3 = CALL db_find_i64(*($8), *(($0 + [40])), (int_64)5610840117515124736, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$14 }
	$7 = CALL $34($8, $3)
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$8), [8599])
	if ( *($7 + [112]) ){ goto $label$15 }
	
.LABEL $label$16
	*($4 + [136]) = [9637]
	*($4 + [140]) = CALL $172([9637])
	*($4 + [32]) = *($4 + [136])
	$3 = CALL $2(($4 + [72]), ($4 + [32]))
	if ( ((int_64)*($4 + [152]) == (int_64)*($3)) ){ goto $label$15 }
	*($4 + [128]) = [9587]
	*($4 + [132]) = CALL $172([9587])
	*($4 + [24]) = *($4 + [128])
	$3 = CALL $2(($4 + [56]), ($4 + [24]))
	if ( ((int_64)*($4 + [152]) == (int_64)*($3)) ){ goto $label$15 }
	*($4 + [120]) = [9650]
	*($4 + [124]) = CALL $172([9650])
	*($4 + [16]) = *($4 + [120])
	$3 = CALL $2(($4 + [40]), ($4 + [16]))
	if ( ((int_64)*($4 + [152]) == (int_64)*($3)) ){ goto $label$15 }
	*($4 + [104]) = [9663]
	*($4 + [108]) = CALL $172([9663])
	*($4 + [8]) = *($4 + [104])
	$3 = CALL $2(($4 + [112]), ($4 + [8]))
	if ( ((int_64)*($4 + [152]) == (int_64)*($3)) ){ goto $label$15 }
	*($4 + [88]) = [9676]
	*($4 + [92]) = CALL $172([9676])
	*($4) = *($4 + [88])
	$3 = CALL $2(($4 + [96]), $4)
	if ( ((int_64)*($4 + [152]) != (int_64)*($3)) ){ goto $label$5 }
	
.LABEL $label$15
	$9 = ((int_64)*($7 + [16]) + (int_64)$2)
	$3 = CALL $172([9204])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9213])
	goto $label$3 
	
.LABEL $label$14
	*($4 + [72]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$1 = *($0)
	*($4 + [60]) = ($4 + [72])
	*($4 + [56]) = ($4 + [152])
	CALL $97(($4 + [40]), $8, $1, ($4 + [56]))
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$1 = (int_64)0
	
.LOOP $label$20:
	$5 = *(($3 + [9203]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$21 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$21
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$20 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$1 = (int_64)4
	
.LABEL $label$1
	*($4 + [72]) = $9
	*($4 + [80]) = $1
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9311])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$9 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$25 }
	$1 = $9
	$5 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$25
	$1 = $9
	
.LOOP $label$26:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$23 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $5 ){ goto $label$26 }
	$5 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$5 = [0]
	
.LABEL $label$22
	CALL eosio_assert($5, [9360])
	$9 = ((int_64)*($7 + [80]) + (int_64)$2)
	$3 = CALL $172([9204])
	if ( ($3 <= [8]) ){ goto $label$30 }
	CALL eosio_assert([0], [9213])
	goto $label$29 
	
.LABEL $label$30
	if ( ($3 == 0) ){ goto $label$28 }
	
.LABEL $label$29
	$1 = (int_64)0
	
.LOOP $label$31:
	$5 = *(($3 + [9203]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$32 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$32
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$31 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$27 
	
.LABEL $label$28
	$1 = (int_64)4
	
.LABEL $label$27
	*($4 + [56]) = $9
	*($4 + [64]) = $1
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9311])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$37:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$35 }
	$9 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$38 }
	$1 = $9
	$10 = [1]
	$5 = $3
	$3 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	$1 = $9
	
.LOOP $label$40:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$39 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $5 ){ goto $label$40 }
	$10 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$10 = [0]
	
.LABEL $label$36
	CALL eosio_assert($10, [9360])
	if ( (*($4 + [151]) == 0) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	CALL eosio_assert([0], [9360])
	if ( (*($4 + [151]) == 0) ){ goto $label$33 }
	
.LABEL $label$34
	$11 = ((int_64)*($7 + [32]) + (int_64)$2)
	$3 = CALL $172([9208])
	if ( ($3 <= [8]) ){ goto $label$44 }
	CALL eosio_assert([0], [9213])
	goto $label$43 
	
.LABEL $label$44
	if ( ($3 == 0) ){ goto $label$42 }
	
.LABEL $label$43
	$1 = (int_64)0
	
.LOOP $label$45:
	$5 = *(($3 + [9207]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$46 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$46
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$45 }
	$12 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$41 
	
.LABEL $label$42
	$12 = (int_64)4
	
.LABEL $label$41
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9311])
	$1 = (uint_64)$12 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$49:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$9 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$50 }
	$1 = $9
	$5 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$50
	$1 = $9
	
.LOOP $label$51:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$48 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $5 ){ goto $label$51 }
	$5 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$48
	$5 = [0]
	
.LABEL $label$47
	CALL eosio_assert($5, [9360])
	*((($4 + [72]) + [8])) = $12
	*($4 + [72]) = $11
	$9 = ((int_64)*($7 + [96]) + (int_64)$2)
	$3 = CALL $172([9208])
	if ( ($3 <= [8]) ){ goto $label$55 }
	CALL eosio_assert([0], [9213])
	goto $label$54 
	
.LABEL $label$55
	if ( ($3 == 0) ){ goto $label$53 }
	
.LABEL $label$54
	$1 = (int_64)0
	
.LOOP $label$56:
	$5 = *(($3 + [9207]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$57 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$57
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$56 }
	$11 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$52 
	
.LABEL $label$53
	$11 = (int_64)4
	
.LABEL $label$52
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9311])
	$1 = (uint_64)$11 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$60:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$59 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$61 }
	$1 = $2
	$5 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$60 }
	goto $label$58 
	
.LABEL $label$61
	$1 = $2
	
.LOOP $label$62:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$59 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $5 ){ goto $label$62 }
	$5 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$60 }
	goto $label$58 
	
.LABEL $label$59
	$5 = [0]
	
.LABEL $label$58
	CALL eosio_assert($5, [9360])
	*(($4 + [64])) = $11
	*($4 + [56]) = $9
	
.LABEL $label$33
	$1 = *($0)
	*($4 + [44]) = ($4 + [72])
	*($4 + [40]) = ($4 + [151])
	*($4 + [48]) = ($4 + [56])
	CALL eosio_assert([1], [8735])
	CALL $98($8, $7, $1, ($4 + [40]))
	$global$0 = ($4 + [160])
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [8729])
	CALL memcpy(*($0 + [4]), $4, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $97 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([160])
	CALL $99($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [152])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $89(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [8729])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [8729])
	CALL memcpy(*($0 + [4]), $4, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $165($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8673])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8673])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [8673])
	CALL memcpy($4, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $165($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $138 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [16]) = $2
	*($3 + [24]) = $1
	$4 = ($0 + [232])
	$6 = *(($0 + [260]))
	$5 = *(($0 + [256]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [8599])
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [240])), (int_64)7235159537265672192, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $144($4, $7)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [8599])
	
.LABEL $label$2
	$1 = *($0)
	*($3 + [8]) = ($3 + [16])
	CALL eosio_assert([1], [8735])
	CALL $145($4, $8, $1, ($3 + [8]))
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($3 + [12]) = ($3 + [16])
	*($3 + [8]) = ($3 + [24])
	CALL $146($3, $4, $1, ($3 + [8]))
	$global$0 = ($3 + [32])
}

void .FUNC $139 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*(($5 = CALL _Znwj([48])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = $1
	*($5) = *(*($3))
	*($5 + [8]) = *(*($3 + [4]))
	$3 = *($3 + [8])
	*($5 + [16]) = *($3)
	*($5 + [24]) = *(($3 + [8]))
	*($4 + [48]) = ($4 + [28])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($5 + [8])
	*($4 + [64]) = $5
	*($4 + [72]) = ($5 + [16])
	CALL $109(($4 + [64]), ($4 + [56]))
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-4149656938784751616, $2, $6, $4, [28])
	*($5 + [36]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [64]) = $5
	$6 = *($5)
	*($4) = $6
	*($4 + [40]) = $7
	$3 = *(($1 + [28]))
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [64]) = [0]
	*($3) = $5
	*(($1 + [28])) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $108(($1 + [24]), ($4 + [64]), $4, ($4 + [40]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

void .FUNC $130 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [224])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [148])) == (int_32)$0), [8770])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8816])
	*($1 + [136]) = *(*($3))
	*($1 + [144]) = *(*($3 + [4]))
	$3 = *($3 + [8])
	*(($1 + [24])) = *(($3 + [8]))
	*($1 + [16]) = *($3)
	$5 = *($1)
	CALL eosio_assert([1], [8867])
	*($4 + [152]) = ($4 + [141])
	*($4 + [148]) = $4
	*($4 + [144]) = $4
	*($4 + [160]) = ($4 + [144])
	*($4 + [172]) = ($1 + [8])
	*($4 + [168]) = $1
	*($4 + [176]) = ($1 + [16])
	*($4 + [180]) = ($1 + [32])
	*($4 + [184]) = ($1 + [48])
	*($4 + [188]) = ($1 + [64])
	*($4 + [192]) = ($1 + [80])
	*($4 + [196]) = ($1 + [96])
	*($4 + [200]) = ($1 + [112])
	*($4 + [204]) = ($1 + [120])
	*($4 + [208]) = ($1 + [128])
	*($4 + [212]) = ($1 + [136])
	*($4 + [216]) = ($1 + [144])
	CALL $90(($4 + [168]), ($4 + [160]))
	CALL db_update_i64(*($1 + [152]), $2, $4, [141])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [224])
}

int_32 .FUNC $131 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0) = (int_64)0
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = (int_64))(*(*($1 + [4])) - *(*($1 + [8])))
	$1 = *($2)
	CALL eosio_assert([1], [8729])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8729])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-3020371195014938624, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $132 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $165($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $133 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($0 + [40]) = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0 + [56]) = (int_64)0
	*($0 + [76]) = $1
	*(($4 = ($0 + [48]))) = (int_64)0
	*(($0 + [64])) = (int_64)0
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [72]) = [1]
	*($0 + [8]) = *(*($1 + [4]))
	$5 = *($2)
	$6 = *($1 + [8])
	*($4) = *(($6 + [8]))
	*($0 + [40]) = *($6)
	$1 = *($1 + [12])
	*($0 + [16]) = *($1)
	*($0 + [32]) = *($1)
	*($3 + [96]) = ($3 + [73])
	*($3 + [92]) = $3
	*($3 + [88]) = $3
	*($3 + [104]) = ($3 + [88])
	*($3 + [116]) = ($0 + [8])
	*($3 + [112]) = $0
	*($3 + [120]) = ($0 + [16])
	*($3 + [124]) = ($0 + [24])
	*($3 + [128]) = ($0 + [32])
	*($3 + [132]) = ($0 + [40])
	*($3 + [136]) = ($0 + [56])
	*($3 + [140]) = ($0 + [72])
	CALL $96(($3 + [112]), ($3 + [104]))
	$7 = *($0)
	*($0 + [80]) = CALL db_store_i64(*($5 + [8]), (int_64)-3910567035813232640, *(*($2 + [8])), $7, $3, [73])
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$1 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $0
}

void .FUNC $134 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [148])) == (int_32)$0), [8770])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8816])
	*($1 + [8]) = *(*($3))
	$6 = ($1 + [136])
	$7 = *($1)
	if ( (*(*($3 + [4])) == 0) ){ goto $label$1 }
	*($6) = ((int_64)*(*($3 + [8])) + (int_64)*($6))
	
.LABEL $label$1
	*($1 + [112]) = (*($1 + [112]) + *(*($3 + [12])))
	CALL eosio_assert([1], [8867])
	$4 = $4
	$3 = ($4 + [-144])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($4 + [-3])
	*($5 + [16]) = $5
	*($5 + [28]) = ($1 + [8])
	*($5 + [24]) = $1
	*($5 + [32]) = ($1 + [16])
	*($5 + [36]) = ($1 + [32])
	*($5 + [40]) = ($1 + [48])
	*($5 + [44]) = ($1 + [64])
	*($5 + [48]) = ($1 + [80])
	*($5 + [52]) = ($1 + [96])
	*($5 + [56]) = ($1 + [112])
	*($5 + [60]) = ($1 + [120])
	*($5 + [64]) = ($1 + [128])
	*($5 + [68]) = $6
	*($5 + [72]) = ($1 + [144])
	CALL $90(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [152]), $2, $3, [141])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$global$0 = ($5 + [80])
}

void .FUNC $135 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([160])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [72]) = (int_64)0
	*($3 + [80]) = (int_64)0
	*($3 + [88]) = (int_64)0
	*($3 + [96]) = (int_64)0
	*($3 + [104]) = (int_64)0
	*($3 + [148]) = $1
	CALL $141(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [152])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $89(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $136 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [80]) = $2
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8770])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8816])
	*($4 + [64]) = *($1 + [16])
	$5 = *($1 + [8])
	*($4 + [72]) = $5
	$6 = *($1)
	*($4 + [56]) = $6
	*($1 + [8]) = ((int_64)$5 + (int_64)*(*($3)))
	*($1 + [16]) = *(*($3 + [4]))
	CALL eosio_assert([1], [8867])
	CALL eosio_assert([1], [8729])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8729])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [8729])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	$3 = ($0 + [36])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [36]) = $1
	*($4 + [32]) = $0
	*($4 + [44]) = $1
	*($4 + [40]) = ($4 + [64])
	*($4 + [48]) = ($4 + [56])
	*($4 + [52]) = ($4 + [80])
	*($4 + [88]) = ($4 + [32])
	CALL $143(($4 + [88]), $3, ($3 + [1]))
	$global$0 = ($4 + [96])
}

void .FUNC $137 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [24]) = $1
	*($3) = (int_64)0
	CALL $142(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $110(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $129 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [8729])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-3020370967001038848, $2, $6, ($4 + [16]), [8])
	*($5 + [12]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [8]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [4]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [8]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $91(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $128 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [224])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [148])) == (int_32)$0), [8770])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8816])
	*($1 + [112]) = (*($1 + [112]) + [-1])
	$5 = *($1)
	CALL eosio_assert([1], [8867])
	*($4 + [152]) = ($4 + [141])
	*($4 + [148]) = $4
	*($4 + [144]) = $4
	*($4 + [160]) = ($4 + [144])
	*($4 + [172]) = ($1 + [8])
	*($4 + [168]) = $1
	*($4 + [176]) = ($1 + [16])
	*($4 + [180]) = ($1 + [32])
	*($4 + [184]) = ($1 + [48])
	*($4 + [188]) = ($1 + [64])
	*($4 + [192]) = ($1 + [80])
	*($4 + [196]) = ($1 + [96])
	*($4 + [200]) = ($1 + [112])
	*($4 + [204]) = ($1 + [120])
	*($4 + [208]) = ($1 + [128])
	*($4 + [212]) = ($1 + [136])
	*($4 + [216]) = ($1 + [144])
	CALL $90(($4 + [168]), ($4 + [160]))
	CALL db_update_i64(*($1 + [152]), $2, $4, [141])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [224])
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [400])
	$global$0 = $3
	*(($4 = $3) + [344]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $175($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = (($4 + [304]) + [16]))) = (int_64)0
	*(($4 + [336])) = [0]
	*($4 + [312]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [328]) = (int_64)0
	*($4 + [296]) = ($2 + $5)
	*($4 + [288]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8673])
	CALL memcpy(($4 + [304]), $2, [8])
	$6 = ($5 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8673])
	CALL memcpy((($4 + [304]) + [8]), ($2 + [8]), [8])
	*($4 + [16]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [8673])
	CALL memcpy(($4 + [16]), ($2 + [16]), [8])
	*($3) = *($4 + [16])
	*($4 + [292]) = ($2 + [24])
	$3 = (($4 + [304]) + [24])
	CALL $43(($4 + [288]), $3)
	*(($6 = ($4 + [8]))) = *($4 + [296])
	*($4) = *($4 + [288])
	$6 = *($6)
	*((($4 + [352]) + [8])) = $6
	*(($7 = (($4 + [368]) + [8]))) = $6
	$8 = *($4)
	*($4 + [368]) = $8
	*($4 + [352]) = $8
	$6 = *($7)
	*((($4 + [384]) + [8])) = $6
	*((($4 + [16]) + [24])) = $6
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [368])
	*($4 + [32]) = $1
	*($4 + [384]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*(($4 + [256])) = $0
	*(($4 + [264])) = (int_64)-1
	*(($4 + [272])) = (int_64)0
	*(($4 + [280])) = [0]
	*($4 + [208]) = $0
	*($4 + [248]) = $0
	*($4 + [388]) = ($4 + [344])
	*($4 + [384]) = ($4 + [16])
	CALL $44(($4 + [384]), ($4 + [304]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $178($2)
	
.LABEL $label$4
	CALL $15(($4 + [16]))
	$2 = *($3)
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [332])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [400])
	return [1]
}

void .FUNC $9 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	$2 = ($global$0 - [144])
	$global$0 = $2
	CALL require_auth(*($0))
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$1 }
	$3 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$1 = (int_64))(((int_64)((int_64)$3 & (int_64)4294967295) + (int_64)-86400) - (CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 $3) % (uint_32)[86400])))
	
.LABEL $label$1
	$3 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert((uint_64)($1 <= (int_64))(((int_64)$3 & (int_64)4294967295) - (CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 $3) % (uint_32)[86400])))), [9826])
	$4 = ($0 + [112])
	$6 = *(($0 + [140]))
	$5 = *(($0 + [136]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$7:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$6 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [8599])
	if ( ((int_64)*($8 + [16]) != (int_64)0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [120])), (int_64)-4149656938784751616, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$8 }
	$8 = CALL $46($4, $7)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [8599])
	
.LABEL $label$8
	if ( ((int_64)*($8 + [16]) == (int_64)0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $172([9204])
	if ( ($7 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [9213])
	goto $label$11 
	
.LABEL $label$12
	if ( ($7 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$3 = (int_64)0
	
.LOOP $label$13:
	$6 = *(($7 + [9203]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$14
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$13 }
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$9 
	
.LABEL $label$10
	$3 = (int_64)4
	
.LABEL $label$9
	*($2 + [120]) = (int_64)0
	*($2 + [128]) = $3
	CALL eosio_assert([1], [9311])
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$9 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$3 = $9
	$6 = [1]
	$5 = $7
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$3 = $9
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$5 = ($7 + [1])
	$7 = $5
	if ( $6 ){ goto $label$19 }
	$6 = [1]
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$6 = [0]
	
.LABEL $label$15
	CALL eosio_assert($6, [9360])
	$9 = *(($8 + [16]))
	$10 = [0]
	$3 = *($0)
	*($2 + [72]) = ($2 + [120])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8735])
	CALL $47($4, $8, $3, ($2 + [72]))
	*($2 + [112]) = [9650]
	*($2 + [116]) = CALL $172([9650])
	*($2 + [8]) = *($2 + [112])
	CALL $2(($2 + [72]), ($2 + [8]))
	$4 = ($0 + [32])
	$6 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$21 }
	
.LOOP $label$23:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)-6228190955246919296) ){ goto $label$22 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$21 }
	CALL eosio_assert(((int_32)*(($8 + [148])) == (int_32)$4), [8599])
	$10 = $8
	goto $label$20 
	
.LABEL $label$21
	$7 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)5610840117515124736, (int_64)-6228190955246919296)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$20 }
	$10 = CALL $34($4, $7)
	CALL eosio_assert(((int_32)*($10 + [148]) == (int_32)$4), [8599])
	
.LABEL $label$20
	$11 = *($10 + [16])
	$7 = CALL $172([9204])
	if ( ($7 <= [8]) ){ goto $label$27 }
	CALL eosio_assert([0], [9213])
	goto $label$26 
	
.LABEL $label$27
	if ( ($7 == 0) ){ goto $label$25 }
	
.LABEL $label$26
	$3 = (int_64)0
	
.LOOP $label$28:
	$6 = *(($7 + [9203]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$29 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$29
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$28 }
	$3 = ((int_64)$3 & (int_64)72057594037927935)
	goto $label$24 
	
.LABEL $label$25
	$3 = (int_64)0
	
.LABEL $label$24
	CALL eosio_assert((uint_64)(((int_64))((int_64)4611686018427387903 - $9) + (int_64)$11) <= (int_64)9223372036854775807), [9311])
	$7 = [0]
	
.LOOP $label$32:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$11 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$33 }
	$3 = $11
	$6 = [1]
	$5 = $7
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$33
	$3 = $11
	
.LOOP $label$34:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$31 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$5 = ($7 + [1])
	$7 = $5
	if ( $6 ){ goto $label$34 }
	$6 = [1]
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$6 = [0]
	
.LABEL $label$30
	CALL eosio_assert($6, [9360])
	$3 = *($0)
	*($2 + [72]) = ($2 + [120])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [8735])
	CALL $48($4, $10, $3, ($2 + [72]))
	*(($2 + [104])) = [0]
	*($2 + [88]) = (int_64)-1
	*($2 + [108]) = [0]
	$3 = *($0)
	*($2 + [72]) = $3
	*($2 + [80]) = $1
	*($2 + [96]) = (int_64)0
	$7 = CALL db_lowerbound_i64($3, $1, (int_64)-5069082855582203904, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$36 }
	CALL $49(($2 + [72]), $7)
	*($2 + [64]) = ($2 + [72])
	*((($2 + [40]) + [8])) = [0]
	*((($2 + [40]) + [16])) = [0]
	*($2 + [44]) = ($2 + [64])
	*($2 + [52]) = ($2 + [64])
	*($2 + [136]) = (int_64)0
	$11 = ((int_64)$9 / (int_64)100)
	$12 = ((int_64)$9 / (int_64)50)
	$13 = ((int_64)$9 / (int_64)40)
	$14 = ((int_64)$9 / (int_64)20)
	$15 = ((int_64)$9 / (int_64)10)
	$16 = ((int_64)$9 / (int_64)5)
	$17 = ((int_64)$9 / (int_64)4)
	$18 = ((int_64)((int_64)$9 * (int_64)15) / (int_64)1000)
	$19 = ((int_64)((int_64)$9 * (int_64)3) / (int_64)100)
	$9 = ((int_64)((int_64)$9 * (int_64)30) / (int_64)100)
	CALL $50(($2 + [32]), ($2 + [64]), ($2 + [136]))
	$20 = (($2 + [16]) | [1])
	$6 = ($2 + [52])
	$5 = [1]
	
.LOOP $label$37:
	$7 = (($5 & [2147483647]) + [-1])
	if ( ((uint_32)$7 > (uint_32)[9]) ){ goto $label$41 }
	goto $label$49 
	
.LABEL $label$49
	$3 = $9
	goto $label$38 
	
.LABEL $label$48
	$3 = $14
	goto $label$38 
	
.LABEL $label$47
	$3 = $16
	goto $label$38 
	
.LABEL $label$46
	$3 = $11
	goto $label$38 
	
.LABEL $label$45
	$3 = $17
	goto $label$38 
	
.LABEL $label$44
	$3 = $15
	goto $label$38 
	
.LABEL $label$43
	$3 = $12
	goto $label$38 
	
.LABEL $label$42
	$3 = $19
	goto $label$38 
	
.LABEL $label$41
	$3 = (int_64)0
	goto $label$38 
	
.LABEL $label$40
	$3 = $13
	goto $label$38 
	
.LABEL $label$39
	$3 = $18
	
.LABEL $label$38
	*($2 + [136]) = *($6)
	$1 = *(*(CALL $51(($2 + [136])) + [4]))
	*(($4 = (($2 + [16]) + [8]))) = [0]
	*($2 + [16]) = (int_64)0
	$7 = CALL $172([9861])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$35 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$52 }
	*($2 + [16]) = ($7 << [1])
	$8 = $20
	if ( $7 ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	$10 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($10)
	*($4) = $8
	*($2 + [16]) = ($10 | [1])
	*($2 + [20]) = $7
	
.LABEL $label$51
	CALL memcpy($8, [9861], $7)
	
.LABEL $label$50
	*(($8 + $7)) = [0]
	CALL $52($0, $1, $3, ($2 + [16]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$53 }
	CALL _ZdlPv(*($4))
	
.LABEL $label$53
	$7 = *($2 + [36])
	*($2 + [136]) = *($6)
	$8 = CALL $51(($2 + [136]))
	if ( ((int_64)*($7) == (int_64)*(*($8 + [4]))) ){ goto $label$36 }
	CALL $51($6)
	$5 = ($5 + [1])
	if ( ($5 <= [11]) ){ goto $label$37 }
	
.LABEL $label$36
	$5 = *($2 + [96])
	if ( ($5 == 0) ){ goto $label$2 }
	$8 = ($2 + [100])
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$55 }
	
.LOOP $label$56:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$57 }
	CALL _ZdlPv($6)
	
.LABEL $label$57
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$56 }
	$7 = *(($2 + [96]))
	goto $label$54 
	
.LABEL $label$55
	$7 = $5
	
.LABEL $label$54
	*($8) = $5
	CALL _ZdlPv($7)
	goto $label$2 
	
.LABEL $label$35
	CALL $160(($2 + [16]))
	
.LABEL $label$3
	CALL prints([9842])
	
.LABEL $label$2
	CALL $53($0)
	$global$0 = ($2 + [144])
	$7
	(unreachable)
}

void .FUNC $123 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([88])
	CALL $133($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [80])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $93(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $122 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [80]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10267])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3910567035813232640)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10213])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10213])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $37(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $121 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8770])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8816])
	*($1 + [8]) = (int_64))(*(*($3)) - *(*($3 + [4])))
	$5 = *($1)
	CALL eosio_assert([1], [8867])
	*($4 + [48]) = ($4 + [28])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [8])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [16])
	CALL $109(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [36]), $2, $4, [28])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $120 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*(($5 = CALL _Znwj([48])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = $1
	*($5) = *(*($3))
	*($5 + [8]) = (int_64))(*(*($3 + [4])) - *(*($3 + [8])))
	*($4 + [48]) = ($4 + [28])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($5 + [8])
	*($4 + [64]) = $5
	*($4 + [72]) = ($5 + [16])
	CALL $109(($4 + [64]), ($4 + [56]))
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-4149656938784751616, $2, $6, $4, [28])
	*($5 + [36]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [64]) = $5
	$6 = *($5)
	*($4) = $6
	*($4 + [40]) = $7
	$3 = *(($1 + [28]))
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [64]) = [0]
	*($3) = $5
	*(($1 + [28])) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $108(($1 + [24]), ($4 + [64]), $4, ($4 + [40]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8442])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8547])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8480])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8547])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $126 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	$4 = ($global$0 - [304])
	$global$0 = $4
	*($4 + [288]) = [9663]
	$5 = *($2)
	*($4 + [292]) = CALL $172([9663])
	*($4 + [80]) = *($4 + [288])
	$6 = ((int_64)((int_64)$5 * (int_64)60) / (int_64)100)
	CALL $95($0, *(CALL $2(($4 + [296]), ($4 + [80]))), $6, [0])
	*($4 + [272]) = [9663]
	*($4 + [276]) = CALL $172([9663])
	*($4 + [72]) = *($4 + [272])
	CALL $138($0, *(CALL $2(($4 + [280]), ($4 + [72]))), $6)
	$7 = ((int_64)$5 / (int_64)20)
	if ( ($3 == 0) ){ goto $label$2 }
	*($4 + [256]) = [9587]
	*($4 + [260]) = CALL $172([9587])
	*($4 + [56]) = *($4 + [256])
	CALL $95($0, *(CALL $2(($4 + [264]), ($4 + [56]))), $7, [0])
	goto $label$1 
	
.LABEL $label$2
	*($4 + [240]) = [9650]
	*($4 + [244]) = CALL $172([9650])
	*($4 + [64]) = *($4 + [240])
	CALL $95($0, *(CALL $2(($4 + [248]), ($4 + [64]))), $7, [0])
	$6 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$6 = (int_64)
	*($4 + [232]) = $6(((int_64)$6 & (int_64)4294967295) - (CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 $6) % (uint_32)[86400]))))
	$8 = ($0 + [112])
	$10 = *(($0 + [140]))
	$9 = *(($0 + [136]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$10 }
	
.LOOP $label$12:
	$11 = ($10 + [-24])
	$12 = *($11)
	if ( ((int_64)*($12) == (int_64)$6) ){ goto $label$11 }
	$10 = $11
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($12 + [32]) == (int_32)$8), [8599])
	goto $label$9 
	
.LABEL $label$10
	$11 = CALL db_find_i64(*($8), *(($0 + [120])), (int_64)-4149656938784751616, $6)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$8 }
	$12 = CALL $46($8, $11)
	CALL eosio_assert(((int_32)*($12 + [32]) == (int_32)$8), [8599])
	
.LABEL $label$9
	$13 = ((int_64)*($12 + [16]) + (int_64)$7)
	$11 = CALL $172([9204])
	if ( ($11 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [9213])
	goto $label$13 
	
.LABEL $label$14
	if ( ($11 == 0) ){ goto $label$7 }
	
.LABEL $label$13
	$6 = (int_64)0
	
.LOOP $label$15:
	$10 = *(($11 + [9203]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$16
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$15 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$3 
	
.LABEL $label$8
	$14 = ($0 + [192])
	$6 = *($0)
	$10 = *(($0 + [220]))
	$12 = *(($0 + [216]))
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$5 }
	
.LOOP $label$17:
	$11 = ($10 + [-24])
	$9 = *($11)
	if ( ((int_64)*($9) == (int_64)$6) ){ goto $label$6 }
	$10 = $11
	if ( ((int_32)$12 != (int_32)$11) ){ goto $label$17 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (int_64)4
	goto $label$3 
	
.LABEL $label$6
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(($9 + [68])) == (int_32)$14), [8599])
	goto $label$4 
	
.LABEL $label$5
	$9 = [0]
	$11 = CALL db_find_i64(*($14), *(($0 + [200])), (int_64)4982871454518345728, $6)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$4 }
	$9 = CALL $16($14, $11)
	CALL eosio_assert(((int_32)*($9 + [68]) == (int_32)$14), [8599])
	
.LABEL $label$4
	*($4 + [230]) = *($9 + [16])
	$11 = CALL $172([9204])
	if ( ($11 <= [8]) ){ goto $label$21 }
	CALL eosio_assert([0], [9213])
	goto $label$20 
	
.LABEL $label$21
	if ( ($11 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$6 = (int_64)0
	
.LOOP $label$22:
	$10 = *(($11 + [9203]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$23 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$23
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$22 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$18 
	
.LABEL $label$19
	$6 = (int_64)4
	
.LABEL $label$18
	*($4 + [208]) = $7
	*($4 + [216]) = $6
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9311])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$13 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$27 }
	$6 = $13
	$10 = [1]
	$9 = $11
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$6 = $13
	
.LOOP $label$28:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$25 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$10 = ((int_32)$11 < (int_32)[6])
	$9 = ($11 + [1])
	$11 = $9
	if ( $10 ){ goto $label$28 }
	$10 = [1]
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$10 = [0]
	
.LABEL $label$24
	CALL eosio_assert($10, [9360])
	$6 = *($0)
	*($4 + [196]) = ($4 + [230])
	*($4 + [192]) = ($4 + [232])
	*($4 + [200]) = ($4 + [208])
	CALL $139(($4 + [184]), $8, $6, ($4 + [192]))
	goto $label$1 
	
.LABEL $label$3
	*($4 + [208]) = $13
	*($4 + [216]) = $6
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9311])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$13 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$6 = $13
	$10 = [1]
	$9 = $11
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$6 = $13
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$10 = ((int_32)$11 < (int_32)[6])
	$9 = ($11 + [1])
	$11 = $9
	if ( $10 ){ goto $label$33 }
	$10 = [1]
	$11 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$10 = [0]
	
.LABEL $label$29
	CALL eosio_assert($10, [9360])
	$6 = *($0)
	*($4 + [192]) = ($4 + [208])
	CALL eosio_assert([1], [8735])
	CALL $140($8, $12, $6, ($4 + [192]))
	
.LABEL $label$1
	*($4 + [168]) = [9587]
	*($4 + [172]) = CALL $172([9587])
	*($4 + [48]) = *($4 + [168])
	$6 = ((int_64)$5 / (int_64)10)
	CALL $95($0, *(CALL $2(($4 + [176]), ($4 + [48]))), $6, [0])
	*($4 + [152]) = [9587]
	*($4 + [156]) = CALL $172([9587])
	*($4 + [40]) = *($4 + [152])
	CALL $138($0, *(CALL $2(($4 + [160]), ($4 + [40]))), $6)
	*($4 + [136]) = [9676]
	*($4 + [140]) = CALL $172([9676])
	*($4 + [32]) = *($4 + [136])
	CALL $95($0, *(CALL $2(($4 + [144]), ($4 + [32]))), $7, [0])
	*($4 + [120]) = [9676]
	*($4 + [124]) = CALL $172([9676])
	*($4 + [24]) = *($4 + [120])
	CALL $138($0, *(CALL $2(($4 + [128]), ($4 + [24]))), $7)
	$7 = (int_64)20
	if ( ($3 == 0) ){ goto $label$34 }
	*($4 + [104]) = [9587]
	*($4 + [108]) = CALL $172([9587])
	*($4 + [16]) = *($4 + [104])
	CALL $95($0, *(CALL $2(($4 + [112]), ($4 + [16]))), ((int_64)((int_64)$5 * (int_64)13) / (int_64)100), [0])
	$7 = (int_64)7
	
.LABEL $label$34
	$13 = *(($2 + [8]))
	*((($4 + [88]) + [8])) = $13
	$6 = *($2)
	*(($4 + [8])) = $13
	*($4 + [88]) = $6
	*($4) = $6
	CALL $83($0, $1, $4, (int_64)1, ((uint_64)((int_64)$7 * (int_64)$5) / (uint_64)(int_64)100))
	CALL $138($0, *($0), $5)
	$global$0 = ($4 + [304])
}

void .FUNC $125 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [160])
	$global$0 = $5
	*($5 + [144]) = $2
	*($5 + [152]) = $1
	*($5 + [136]) = $3
	*($5 + [135]) = $4
	*($5 + [120]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = ($0 + [192])
	$7 = *($0)
	$9 = *(($0 + [220]))
	$8 = *(($0 + [216]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	
.LOOP $label$4:
	$4 = ($9 + [-24])
	$10 = *($4)
	if ( ((int_64)*($10) == (int_64)$7) ){ goto $label$3 }
	$9 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($10 + [68])) == (int_32)$6), [8599])
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	$4 = CALL db_find_i64(*($6), *(($0 + [200])), (int_64)4982871454518345728, $7)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $16($6, $4)
	CALL eosio_assert(((int_32)*($10 + [68]) == (int_32)$6), [8599])
	
.LABEL $label$1
	*($5 + [112]) = ((int_64)*($10 + [26]) * (int_64)$3)
	$6 = ($0 + [32])
	$9 = *(($0 + [60]))
	$8 = *(($0 + [56]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	
.LOOP $label$10:
	$4 = ($9 + [-24])
	$10 = *($4)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$9 }
	$9 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*(($10 + [148])) == (int_32)$6), [8599])
	CALL eosio_assert(((int_64)$2 != (int_64)$1), [10315])
	if ( $10 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$10 = [0]
	$4 = CALL db_find_i64(*($6), *(($0 + [40])), (int_64)5610840117515124736, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$11 }
	$10 = CALL $34($6, $4)
	CALL eosio_assert(((int_32)*($10 + [148]) == (int_32)$6), [8599])
	
.LABEL $label$11
	CALL eosio_assert(((int_64)$2 != (int_64)$1), [10315])
	if ( ($10 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	*($5 + [96]) = [10346]
	*($5 + [100]) = CALL $172([10346])
	*($5 + [16]) = *($5 + [96])
	$4 = CALL $2(($5 + [48]), ($5 + [16]))
	$1 = *($10 + [8])
	if ( ((int_64)$1 == (int_64)*($4)) ){ goto $label$12 }
	*($5 + [144]) = $1
	
.LABEL $label$12
	$1 = *($0)
	*($5 + [52]) = ($5 + [135])
	*($5 + [48]) = ($5 + [144])
	*($5 + [56]) = ($5 + [112])
	*($5 + [60]) = ($5 + [136])
	CALL eosio_assert([1], [8735])
	CALL $134($6, $10, $1, ($5 + [48]))
	goto $label$5 
	
.LABEL $label$6
	*($5 + [104]) = [10346]
	*($5 + [108]) = CALL $172([10346])
	*($5 + [8]) = *($5 + [104])
	$4 = CALL $2(($5 + [48]), ($5 + [8]))
	CALL eosio_assert(((int_64)*($5 + [144]) != (int_64)*($4)), [10347])
	$1 = *($0)
	*($5 + [52]) = ($5 + [144])
	*($5 + [48]) = ($5 + [152])
	*($5 + [56]) = ($5 + [136])
	*($5 + [60]) = ($5 + [135])
	*($5 + [64]) = ($5 + [112])
	*($5 + [68]) = ($5 + [120])
	CALL $135(($5 + [32]), $6, $1, ($5 + [48]))
	
.LABEL $label$5
	*($5 + [88]) = [10346]
	*($5 + [92]) = CALL $172([10346])
	*($5) = *($5 + [88])
	$4 = CALL $2(($5 + [48]), $5)
	if ( ((int_64)*($5 + [144]) == (int_64)*($4)) ){ goto $label$13 }
	$1 = CALL current_time()
	*(($5 + [80])) = [0]
	*($5 + [64]) = (int_64)-1
	*($5 + [72]) = (int_64)0
	*($5 + [84]) = [0]
	$7 = *($0)
	*($5 + [48]) = $7
	$1 = ((uint_64)$1 / (uint_64)(int_64)1000000)
	$1 = (int_64)
	*($5 + [56]) = $1(((int_64)$1 & (int_64)4294967295) - (CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 $1) % (uint_32)[86400]))))
	$4 = CALL db_find_i64($7, $1, (int_64)-5069082855582203904, *($5 + [144]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$15 }
	$4 = CALL $49(($5 + [48]), $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)($5 + [48])), [8599])
	$1 = *($0)
	*($5 + [36]) = ($5 + [120])
	*($5 + [32]) = ($5 + [136])
	CALL eosio_assert([1], [8735])
	CALL $136(($5 + [48]), $4, $1, ($5 + [32]))
	$10 = *($5 + [72])
	if ( $10 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$1 = *($0)
	*($5 + [36]) = ($5 + [136])
	*($5 + [32]) = ($5 + [144])
	*($5 + [40]) = ($5 + [120])
	CALL $137(($5 + [24]), ($5 + [48]), $1, ($5 + [32]))
	$10 = *($5 + [72])
	if ( ($10 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$0 = ($5 + [76])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$17 }
	
.LOOP $label$18:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$19 }
	CALL _ZdlPv($9)
	
.LABEL $label$19
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$18 }
	$4 = *(($5 + [72]))
	goto $label$16 
	
.LABEL $label$17
	$4 = $10
	
.LABEL $label$16
	*($0) = $10
	CALL _ZdlPv($4)
	$global$0 = ($5 + [160])
	return 
	
.LABEL $label$13
	$global$0 = ($5 + [160])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [8729])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-3020370967001038848, $2, $6, ($4 + [16]), [8])
	*($5 + [12]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [8]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [4]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [8]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $91(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [416])
	$global$0 = $3
	*(($4 = $3) + [360]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $175($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [312]) + [24])) = (int_64)0
	*((($4 + [312]) + [40])) = [0]
	*($4 + [320]) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [328]) = (int_64)0
	*($4 + [344]) = (int_64)0
	*($4 + [300]) = $2
	*($4 + [296]) = $2
	*($4 + [304]) = ($2 + $5)
	*($4 + [400]) = ($4 + [296])
	*($4 + [24]) = ($4 + [312])
	CALL $54(($4 + [24]), ($4 + [400]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [304])
	*($4 + [8]) = *($4 + [296])
	$3 = *($3)
	*((($4 + [368]) + [8])) = $3
	*(($6 = (($4 + [384]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [384]) = $7
	*($4 + [368]) = $7
	$3 = *($6)
	*((($4 + [400]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [384])
	*($4 + [40]) = $1
	*($4 + [400]) = $1
	*((($4 + [24]) + [40])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [264])) = $0
	*(($4 + [272])) = (int_64)-1
	*(($4 + [280])) = (int_64)0
	*(($4 + [288])) = [0]
	*($4 + [216]) = $0
	*($4 + [256]) = $0
	*($4 + [404]) = ($4 + [360])
	*($4 + [400]) = ($4 + [24])
	CALL $55(($4 + [400]), ($4 + [312]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $178($2)
	
.LABEL $label$4
	CALL $15(($4 + [24]))
	if ( ((*($4 + [344]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [352])))
	
.LABEL $label$5
	$global$0 = ($4 + [416])
	return [1]
}

int_32 .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [256]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [260])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [256]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [216]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [220])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [216]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [176]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [136]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [96]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$26 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$28 }
	
.LOOP $label$29:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$30 }
	CALL _ZdlPv($4)
	
.LABEL $label$30
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$29 }
	$3 = *(($0 + [56]))
	goto $label$27 
	
.LABEL $label$28
	$3 = $1
	
.LABEL $label$27
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$26
	return $0
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8650])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $175($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [68]) = $0
	*($5) = (int_64)0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [20])
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [26])
	*($3 + [56]) = ($5 + [28])
	*($3 + [60]) = ($5 + [32])
	*($3 + [64]) = ($5 + [40])
	*($3 + [68]) = ($5 + [48])
	*($3 + [72]) = ($5 + [56])
	*($3 + [76]) = ($5 + [64])
	CALL $79(($3 + [32]), ($3 + [24]))
	*($5 + [72]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $62(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $178($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([80])
	CALL $61($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [72])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $62(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $175($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [280]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8673])
	CALL memcpy(($4 + [280]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*(($4 + [248])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [264])) = (int_64)0
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	*($4 + [240]) = $0
	*(($4 + [272])) = [0]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [280])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $178($2)
	
.LABEL $label$5
	CALL $15(($4 + [8]))
	$global$0 = ($4 + [288])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL require_auth($1)
	$3 = ($0 + [32])
	$5 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($7 + [148])) == (int_32)$3), [8599])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)5610840117515124736, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $34($3, $6)
	CALL eosio_assert(((int_32)*($7 + [148]) == (int_32)$3), [8599])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)*($7 + [144]) != (int_32)[0]), [8926])
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [8958])
	if ( ((int_32)*($7 + [144]) != (int_32)[1]) ){ goto $label$5 }
	$9 = ((int_64)*($7 + [136]) + (int_64)(CASTING uint_64)(uint_32 ((int_32)$5 * (int_32)[60])))
	$5 = *($7 + [112])
	$8 = (CASTING uint_64)(uint_32 ((int_32)$5 * (int_32)[150]))
	*($2 + [16]) = ( $8 ? $9 : ((uint_64)$9 > (uint_64)$8) )
	$8 = *($0)
	*($2 + [56]) = ($2 + [16])
	CALL eosio_assert($6, [8735])
	CALL $35($3, $7, $8, ($2 + [56]))
	
.LABEL $label$5
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	$8 = *($0)
	*($2 + [16]) = $8
	*($2 + [24]) = $1
	$9 = (int_64)0
	*($2 + [40]) = (int_64)0
	$6 = CALL db_lowerbound_i64($8, $1, (int_64)-3020370967001038848, (int_64)0)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$13 }
	$10 = ($0 + [72])
	$3 = CALL $36(($2 + [16]), $6)
	$11 = ($0 + [100])
	$12 = ($0 + [96])
	$13 = ($0 + [80])
	
.LOOP $label$14:
	$8 = *($3)
	$5 = *($11)
	$7 = *($12)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$18 }
	
.LOOP $label$20:
	$6 = ($5 + [-24])
	$4 = *($6)
	if ( ((int_64)*($4) == (int_64)$8) ){ goto $label$19 }
	$5 = $6
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$18 }
	CALL eosio_assert(((int_32)*(($4 + [76])) == (int_32)$10), [8599])
	if ( ($4 == 0) ){ goto $label$16 }
	if ( ((int_64)*($4 + [8]) == (int_64)$1) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$6 = CALL db_find_i64(*($10), *($13), (int_64)-3910567035813232640, $8)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$16 }
	$6 = CALL $37($10, $6)
	CALL eosio_assert(((int_32)*($6 + [76]) == (int_32)$10), [8599])
	if ( ((int_64)*($6 + [8]) != (int_64)$1) ){ goto $label$16 }
	
.LABEL $label$17
	$9 = ((int_64)CALL $38($0, $1, *($3), ($2 + [56])) + (int_64)$9)
	goto $label$15 
	
.LABEL $label$16
	CALL $39(($2 + [16]), $3)
	
.LABEL $label$15
	CALL eosio_assert([1], [9689])
	$6 = CALL db_next_i64(*($3 + [12]), ($2 + [56]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$21 }
	$3 = CALL $36(($2 + [16]), $6)
	goto $label$14 
	
.LABEL $label$21
	$6 = ((int_64)$9 != (int_64)0)
	CALL eosio_assert($6, [8982])
	if ( ($6 == 0) ){ goto $label$9 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$6 = CALL $172([8403])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$12 }
	*($2) = ($6 << [1])
	$5 = ($2 | [1])
	if ( $6 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	CALL eosio_assert([0], [8982])
	$7 = *($2 + [40])
	if ( $7 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$12
	$7 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($7)
	*($2) = ($7 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $6
	
.LABEL $label$11
	CALL memcpy($5, [8403], $6)
	
.LABEL $label$10
	*(($5 + $6)) = [0]
	CALL $40($0, $1, $9, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$9
	$7 = *($2 + [40])
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$4 = ($2 + [44])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$23 }
	
.LOOP $label$24:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$25 }
	CALL _ZdlPv($5)
	
.LABEL $label$25
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$24 }
	$6 = *(($2 + [40]))
	goto $label$22 
	
.LABEL $label$23
	$6 = $7
	
.LABEL $label$22
	*($4) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$7
	$global$0 = ($2 + [64])
	return (unreachable)
	
.LABEL $label$6
	CALL $160($2)
}

void .FUNC $12 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = ($0 + [192])
	$3 = *($0)
	$5 = *(($0 + [220]))
	$4 = *(($0 + [216]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$3) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(($7 + [68])) == (int_32)$2), [8599])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($2), *(($0 + [200])), (int_64)4982871454518345728, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $16($2, $6)
	CALL eosio_assert(((int_32)*($7 + [68]) == (int_32)$2), [8599])
	
.LABEL $label$2
	$3 = *($0)
	CALL eosio_assert([1], [8735])
	CALL $33($2, $7, $3, ($1 + [8]))
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

void .FUNC $13 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [208])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$3 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$3 }
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$5 }
	if ( uint_32($7 >> [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( (*($4 + [4]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL $56($0, $3)
	*(($5 + [184])) = [0]
	*($5 + [176]) = (int_64)0
	$7 = CALL $172([9975])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$8 }
	*($5 + [176]) = ($7 << [1])
	$8 = (($5 + [176]) | [1])
	if ( $7 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [176]) = ($9 | [1])
	*($5 + [184]) = $8
	*($5 + [180]) = $7
	
.LABEL $label$7
	CALL memcpy($8, [9975], $7)
	
.LABEL $label$6
	*(($8 + $7)) = [0]
	CALL $57(($5 + [192]), $0, $4, ($5 + [176]))
	if ( ((*($5 + [176]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($5 + [184]))
	
.LABEL $label$9
	$4 = *($5 + [192])
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$11 }
	$4 = uint_32($7 >> [1])
	goto $label$10 
	
.LABEL $label$11
	$4 = *($4 + [4])
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9977])
	$4 = *($5 + [192])
	if ( (*($4) & [1]) ){ goto $label$13 }
	$8 = ($4 + [1])
	goto $label$12 
	
.LABEL $label$13
	$8 = *($4 + [8])
	
.LABEL $label$12
	*(($5 + [184])) = [0]
	*($5 + [176]) = (int_64)0
	$4 = CALL $172($8)
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$16 }
	*($5 + [176]) = ($4 << [1])
	$7 = (($5 + [176]) | [1])
	if ( $4 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$9 = (($4 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($5 + [176]) = ($9 | [1])
	*($5 + [184]) = $7
	*($5 + [180]) = $4
	
.LABEL $label$15
	CALL memcpy($7, $8, $4)
	
.LABEL $label$14
	*(($7 + $4)) = [0]
	$4 = *($5 + [176])
	$7 = CALL $172([9991])
	if ( ((int_32)$7 != (int_32)( *($5 + [180]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$21 }
	if ( (CALL $164(($5 + [176]), [0], [-1], [9991], $7) == 0) ){ goto $label$20 }
	
.LABEL $label$21
	$4 = *($5 + [176])
	$7 = CALL $172([9996])
	if ( ((int_32)$7 != (int_32)( *($5 + [180]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$22 }
	if ( (CALL $164(($5 + [176]), [0], [-1], [9996], $7) == 0) ){ goto $label$20 }
	
.LABEL $label$22
	$4 = *($5 + [176])
	$7 = CALL $172([10000])
	if ( ((int_32)$7 != (int_32)( *($5 + [180]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$19 }
	if ( CALL $164(($5 + [176]), [0], [-1], [10000], $7) ){ goto $label$19 }
	
.LABEL $label$20
	$4 = *($5 + [176])
	$7 = CALL $172([9991])
	if ( ((int_32)$7 != (int_32)( *($5 + [180]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$31 }
	if ( (CALL $164(($5 + [176]), [0], [-1], [9991], $7) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$4 = *($5 + [176])
	$7 = CALL $172([10000])
	if ( ((int_32)$7 != (int_32)( *($5 + [180]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$32 }
	if ( (CALL $164(($5 + [176]), [0], [-1], [10000], $7) == 0) ){ goto $label$29 }
	
.LABEL $label$32
	$4 = *($5 + [176])
	$7 = CALL $172([9996])
	if ( ((int_32)$7 != (int_32)( *($5 + [180]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$19 }
	if ( CALL $164(($5 + [176]), [0], [-1], [9996], $7) ){ goto $label$19 }
	*((($5 + [96]) + [8])) = *(($3 + [8]))
	*($5 + [96]) = *($3)
	$4 = *($5 + [192])
	if ( (*($4 + [12]) & [1]) ){ goto $label$24 }
	$4 = (($4 + [12]) + [1])
	goto $label$23 
	
.LABEL $label$30
	*((($5 + [160]) + [8])) = *(($3 + [8]))
	*($5 + [160]) = *($3)
	$4 = *($5 + [192])
	if ( (*($4 + [12]) & [1]) ){ goto $label$28 }
	$4 = (($4 + [12]) + [1])
	goto $label$27 
	
.LABEL $label$29
	*((($5 + [128]) + [8])) = *(($3 + [8]))
	*($5 + [128]) = *($3)
	$4 = *($5 + [192])
	if ( (*($4 + [12]) & [1]) ){ goto $label$26 }
	$4 = (($4 + [12]) + [1])
	goto $label$25 
	
.LABEL $label$28
	$4 = *(($4 + [20]))
	
.LABEL $label$27
	*($5 + [144]) = $4
	*($5 + [148]) = CALL $172($4)
	*($5 + [24]) = *($5 + [144])
	$2 = *(CALL $2(($5 + [152]), ($5 + [24])))
	*((($5 + [8]) + [8])) = *((($5 + [160]) + [8]))
	*($5 + [8]) = *($5 + [160])
	CALL $58($0, $1, ($5 + [8]), $2)
	if ( (*($5 + [176]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$26
	$4 = *(($4 + [20]))
	
.LABEL $label$25
	$2 = (CASTING int_64)(int_32 CALL $169($4))
	$4 = *($5 + [192])
	if ( (*($4 + [24]) & [1]) ){ goto $label$34 }
	$4 = (($4 + [24]) + [1])
	goto $label$33 
	
.LABEL $label$34
	$4 = *(($4 + [32]))
	
.LABEL $label$33
	*($5 + [112]) = $4
	*($5 + [116]) = CALL $172($4)
	*($5 + [48]) = *($5 + [112])
	$6 = *(CALL $2(($5 + [120]), ($5 + [48])))
	*((($5 + [32]) + [8])) = *((($5 + [128]) + [8]))
	*($5 + [32]) = *($5 + [128])
	CALL $59($0, $1, ($5 + [32]), $2, $6)
	if ( (*($5 + [176]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$24
	$4 = *(($4 + [20]))
	
.LABEL $label$23
	*($5 + [80]) = $4
	*($5 + [84]) = CALL $172($4)
	*($5 + [72]) = *($5 + [80])
	$2 = *(CALL $2(($5 + [88]), ($5 + [72])))
	*((($5 + [56]) + [8])) = *((($5 + [96]) + [8]))
	*($5 + [56]) = *($5 + [96])
	CALL $60($0, $1, ($5 + [56]), $2)
	
.LABEL $label$19
	if ( ((*($5 + [176]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*($5 + [184]))
	
.LABEL $label$17
	$7 = *($5 + [192])
	if ( ($7 == 0) ){ goto $label$3 }
	$4 = *($5 + [196])
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$36 }
	
.LOOP $label$37:
	$0 = ($4 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$38
	$4 = $0
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$37 }
	$0 = *($5 + [192])
	goto $label$35 
	
.LABEL $label$36
	$0 = $7
	
.LABEL $label$35
	*($5 + [196]) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($5 + [208])
	return (unreachable)
	
.LABEL $label$2
	CALL $160(($5 + [176]))
	
.LABEL $label$1
	CALL $160(($5 + [176]))
	(unreachable)
}

void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([20])
	CALL $63($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [12])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([20])
	CALL $65($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [12])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $165($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $161(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8650])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $175($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8673])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8673])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $132(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $178($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8729])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8729])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8729])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $102(CALL $101($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8729])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [8729])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $102($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8729])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8729])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8729])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [8729])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8729])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8729])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $165($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0) = *($1)
	$2 = *(($1 + [8]))
	*(($0 + [20])) = (int_64)0
	*(($0 + [8])) = $2
	*($0 + [16]) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($0 + [16])) = $3
	*(($0 + [24])) = ($3 + ($4 << [4]))
	*(($4 = ($0 + [20]))) = $3
	$5 = *(($1 + [16]))
	$6 = (*(($1 + [20])) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $6)
	*($4) = (*($4) + $6)
	
.LABEL $label$3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$3 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL _Znwj($3)
	*(($0 + [28])) = $4
	*(($0 + [36])) = ($4 + $3)
	*(($3 = ($0 + [32]))) = $4
	$6 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $6, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $165(($0 + [16]))
	
.LABEL $label$1
	CALL $165(($0 + [28]))
	(unreachable)
	return (unreachable)
}

void .FUNC $118 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8770])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8816])
	*($1 + [8]) = (int_64))(*($1 + [8]) - *(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [8867])
	CALL eosio_assert([1], [8729])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8729])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $119 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $131($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $132(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([20])
	CALL $75($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [12])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([20])
	CALL $74($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [12])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([20])
	CALL $67($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [12])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([20])
	CALL $66($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [12])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $23 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([20])
	CALL $69($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [12])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([20])
	CALL $68($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [12])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([20])
	CALL $71($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [12])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([20])
	CALL $70($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [12])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([20])
	CALL $73($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [12])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([20])
	CALL $72($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [12])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8729])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8729])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8729])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $87(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $103 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [76])) == (int_32)$0), [8770])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8816])
	*($1 + [72]) = [0]
	*($1 + [16]) = *(*($3))
	$3 = *($3 + [4])
	*($1 + [40]) = *($3)
	*(($1 + [48])) = *(($3 + [8]))
	$5 = *($1)
	CALL eosio_assert([1], [8867])
	*($4 + [96]) = ($4 + [73])
	*($4 + [92]) = $4
	*($4 + [88]) = $4
	*($4 + [104]) = ($4 + [88])
	*($4 + [116]) = ($1 + [8])
	*($4 + [112]) = $1
	*($4 + [120]) = ($1 + [16])
	*($4 + [124]) = ($1 + [24])
	*($4 + [128]) = ($1 + [32])
	*($4 + [132]) = ($1 + [40])
	*($4 + [136]) = ($1 + [56])
	*($4 + [140]) = ($1 + [72])
	CALL $96(($4 + [112]), ($4 + [104]))
	CALL db_update_i64(*($1 + [80]), $2, $4, [73])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [144])
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8729])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8729])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $112($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $86($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $113($2, $1)
	CALL $115(CALL $114(CALL $114($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[40])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$2 }
	$5 = [107374182]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $165($0)
	
.LABEL $label$1
	$6 = ($2 + ((int_32)$5 * (int_32)[40]))
	$7 = ($2 + ((int_32)$3 * (int_32)[40]))
	$2 = CALL $111($7, $1)
	$8 = ($2 + [40])
	$5 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$6 }
	$10 = ($5 - $9)
	$1 = [0]
	
.LOOP $label$7:
	$2 = ($9 + $1)
	*((($5 = ($7 + $1)) + [-32])) = *(($2 + [-32]))
	*(($5 + [-40])) = *(($2 + [-40]))
	*(($3 = ($5 + [-24]))) = (int_64)0
	*(($4 = ($5 + [-16]))) = [0]
	$11 = ($2 + [-24])
	*($3) = *($11)
	$3 = ($2 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($5 + [-12]))) = (int_64)0
	*(($5 = ($5 + [-4]))) = [0]
	$4 = ($2 + [-12])
	*($3) = *($4)
	*($11) = (int_64)0
	$2 = ($2 + [-4])
	*($5) = *($2)
	*($2) = [0]
	*($4) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$7 }
	$2 = ($7 + $1)
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $8
	*(($0 + [8])) = $6
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = *(($5 + [-12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($5 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$10
	$2 = ($5 + [-40])
	$1 = *(($5 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($5 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$12 }
	CALL _ZdlPv($3)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8673])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8673])
	CALL memcpy($0, *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [8673])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $106 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [8729])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), $0, [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *($0 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [8729])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $108 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $165($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_64 .FUNC $38 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	$4 = ($global$0 - [128])
	$global$0 = $4
	*($3) = (int_64)0
	$5 = ($0 + [72])
	$7 = *(($0 + [100]))
	$6 = *(($0 + [96]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($9 + [76])) == (int_32)$5), [8599])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [80])), (int_64)-3910567035813232640, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $37($5, $8)
	CALL eosio_assert(((int_32)*($9 + [76]) == (int_32)$5), [8599])
	
.LABEL $label$1
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, [9148])
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)$1), [9168])
	if ( (*($9 + [72]) == 0) ){ goto $label$8 }
	$11 = ($0 + [192])
	$2 = *($0)
	$7 = *(($0 + [220]))
	$12 = *(($0 + [216]))
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$9:
	$8 = ($7 + [-24])
	$6 = *($8)
	if ( ((int_64)*($6) == (int_64)$2) ){ goto $label$7 }
	$7 = $8
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$9 }
	goto $label$6 
	
.LABEL $label$8
	$global$0 = ($4 + [128])
	return (int_64)0
	
.LABEL $label$7
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(($6 + [68])) == (int_32)$11), [8599])
	goto $label$5 
	
.LABEL $label$6
	$6 = [0]
	$8 = CALL db_find_i64(*($11), *(($0 + [200])), (int_64)4982871454518345728, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $16($11, $8)
	CALL eosio_assert(((int_32)*($6 + [68]) == (int_32)$11), [8599])
	
.LABEL $label$5
	$2 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($4 + [124]) = $2
	if ( (uint_64)((int_64))(((int_64)$2 & (int_64)4294967295) - *($9 + [32])) <= *($6 + [32])) ){ goto $label$10 }
	$13 = ($0 + [32])
	$7 = *(($0 + [60]))
	$11 = *(($0 + [56]))
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$12 }
	
.LOOP $label$14:
	$8 = ($7 + [-24])
	$12 = *($8)
	if ( ((int_64)*($12) == (int_64)$1) ){ goto $label$13 }
	$7 = $8
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(($12 + [148])) == (int_32)$13), [8599])
	if ( ((uint_64)*($12 + [136]) >= (uint_64)*($6 + [64])) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$12 = [0]
	$8 = CALL db_find_i64(*($13), *(($0 + [40])), (int_64)5610840117515124736, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$15 }
	$12 = CALL $34($13, $8)
	CALL eosio_assert(((int_32)*($12 + [148]) == (int_32)$13), [8599])
	
.LABEL $label$15
	if ( (uint_64)(*($12 + [136]) <= *($6 + [64])) ){ goto $label$10 }
	
.LABEL $label$11
	$2 = *($6 + [8])
	$14 = ((uint_64)((int_64)$2 * (int_64)*($6 + [48])) / (uint_64)(int_64)10000)
	CALL eosio_assert((uint_64)($14 <= $2), [9191])
	$1 = ((int_64)*($9 + [56]) + (int_64)$14)
	$8 = CALL $172([9204])
	if ( ($8 <= [8]) ){ goto $label$19 }
	CALL eosio_assert([0], [9213])
	goto $label$18 
	
.LABEL $label$19
	if ( ($8 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$2 = (int_64)0
	
.LOOP $label$20:
	$7 = *(($8 + [9203]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$21 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$21
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$20 }
	$2 = ((int_64)$2 << (int_64)8)
	goto $label$16 
	
.LABEL $label$17
	$2 = (int_64)0
	
.LABEL $label$16
	*($4 + [112]) = ((int_64)$2 | (int_64)4)
	*($4 + [104]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9311])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$25 }
	$2 = $1
	$7 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$25
	$2 = $1
	
.LOOP $label$26:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$23 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $7 ){ goto $label$26 }
	$7 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$7 = [0]
	
.LABEL $label$22
	CALL eosio_assert($7, [9360])
	$2 = *($0)
	*($4 + [84]) = ($4 + [104])
	*($4 + [80]) = ($4 + [124])
	CALL eosio_assert($10, [8735])
	CALL $81($5, $9, $2, ($4 + [80]))
	*($4 + [96]) = (int_64))(*(($12 + [136])) - *(($6 + [64])))
	$1 = ((int_64)*($12 + [48]) + (int_64)$14)
	$8 = CALL $172([9204])
	if ( ($8 <= [8]) ){ goto $label$30 }
	CALL eosio_assert([0], [9213])
	goto $label$29 
	
.LABEL $label$30
	if ( ($8 == 0) ){ goto $label$28 }
	
.LABEL $label$29
	$2 = (int_64)0
	
.LOOP $label$31:
	$7 = *(($8 + [9203]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$32 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$32
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$31 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$27 
	
.LABEL $label$28
	$2 = (int_64)4
	
.LABEL $label$27
	*($4 + [80]) = $1
	*($4 + [88]) = $2
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9311])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$35:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$34 }
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$36 }
	$2 = $1
	$7 = [1]
	$9 = $8
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$36
	$2 = $1
	
.LOOP $label$37:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$34 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$9 = ($8 + [1])
	$8 = $9
	if ( $7 ){ goto $label$37 }
	$7 = [1]
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$34
	$7 = [0]
	
.LABEL $label$33
	CALL eosio_assert($7, [9360])
	$14 = ((uint_64)((int_64)*($6 + [56]) * (int_64)80) / (uint_64)(int_64)100)
	$8 = CALL $172([9208])
	if ( ($8 <= [8]) ){ goto $label$41 }
	CALL eosio_assert([0], [9213])
	goto $label$40 
	
.LABEL $label$41
	if ( ($8 == 0) ){ goto $label$39 }
	
.LABEL $label$40
	$2 = (int_64)0
	
.LOOP $label$42:
	$7 = *(($8 + [9207]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$43 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$43
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$42 }
	$15 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$38 
	
.LABEL $label$39
	$15 = (int_64)4
	
.LABEL $label$38
	CALL eosio_assert([1], [9311])
	$2 = (uint_64)$15 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$46:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$45 }
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$47 }
	$2 = $1
	$7 = [1]
	$9 = $8
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$46 }
	goto $label$44 
	
.LABEL $label$47
	$2 = $1
	
.LOOP $label$48:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$45 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$9 = ($8 + [1])
	$8 = $9
	if ( $7 ){ goto $label$48 }
	$7 = [1]
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$46 }
	goto $label$44 
	
.LABEL $label$45
	$7 = [0]
	
.LABEL $label$44
	CALL eosio_assert($7, [9360])
	$1 = ((int_64)*($12 + [64]) + (int_64)$14)
	$8 = CALL $172([9208])
	if ( ($8 <= [8]) ){ goto $label$52 }
	CALL eosio_assert([0], [9213])
	goto $label$51 
	
.LABEL $label$52
	if ( ($8 == 0) ){ goto $label$50 }
	
.LABEL $label$51
	$2 = (int_64)0
	
.LOOP $label$53:
	$7 = *(($8 + [9207]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$54 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$54
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$53 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$49 
	
.LABEL $label$50
	$2 = (int_64)4
	
.LABEL $label$49
	*($4 + [64]) = $1
	*($4 + [72]) = $2
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9311])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$57:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$56 }
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$58 }
	$2 = $1
	$7 = [1]
	$9 = $8
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$57 }
	goto $label$55 
	
.LABEL $label$58
	$2 = $1
	
.LOOP $label$59:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$56 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$9 = ($8 + [1])
	$8 = $9
	if ( $7 ){ goto $label$59 }
	$7 = [1]
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$57 }
	goto $label$55 
	
.LABEL $label$56
	$7 = [0]
	
.LABEL $label$55
	CALL eosio_assert($7, [9360])
	$2 = *($0)
	*($4 + [52]) = ($4 + [80])
	*($4 + [48]) = ($4 + [96])
	*($4 + [56]) = ($4 + [64])
	*($4 + [60]) = ($4 + [124])
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [8735])
	CALL $82($13, $12, $2, ($4 + [48]))
	$16 = *(($6 + [56]))
	$8 = CALL $172([9208])
	if ( ($8 <= [8]) ){ goto $label$63 }
	CALL eosio_assert([0], [9213])
	goto $label$62 
	
.LABEL $label$63
	if ( ($8 == 0) ){ goto $label$61 }
	
.LABEL $label$62
	$2 = (int_64)0
	
.LOOP $label$64:
	$7 = *(($8 + [9207]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$65 }
	CALL eosio_assert([0], [9258])
	
.LABEL $label$65
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$64 }
	$17 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$60 
	
.LABEL $label$61
	$17 = (int_64)4
	
.LABEL $label$60
	CALL eosio_assert((uint_64)(((int_64)$16 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9311])
	$2 = (uint_64)$17 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$68:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$67 }
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$69 }
	$2 = $1
	$7 = [1]
	$9 = $8
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$68 }
	goto $label$66 
	
.LABEL $label$69
	$2 = $1
	
.LOOP $label$70:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$67 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$9 = ($8 + [1])
	$8 = $9
	if ( $7 ){ goto $label$70 }
	$7 = [1]
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$68 }
	goto $label$66 
	
.LABEL $label$67
	$7 = [0]
	
.LABEL $label$66
	$2 = (int_64)
	CALL __multi3($4, $2($16 - $14)), (int_64)$2 >> (int_64)63), (int_64)75, (int_64)0)
	CALL eosio_assert($7, [9360])
	CALL eosio_assert(((int_64)$15 == (int_64)$17), [9469])
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9517])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [9539])
	$1 = *(($4 + [8]))
	$2 = *($4)
	CALL eosio_assert(( (uint_64)($2 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ), [9420])
	CALL eosio_assert(( ((uint_64)$2 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [9444])
	CALL eosio_assert([1], [9380])
	CALL eosio_assert([1], [9395])
	$1 = *($12)
	*($4 + [40]) = $17
	*((($4 + [16]) + [8])) = *($4 + [40])
	*($4 + [32]) = ((int_64)$2 / (int_64)100)
	*($4 + [16]) = *($4 + [32])
	CALL $83($0, $1, ($4 + [16]), (int_64)1, ((int_64)$2 / (int_64)500))
	*($3) = $14
	$global$0 = ($4 + [128])
	return $14
	
.LABEL $label$10
	$global$0 = ($4 + [128])
	return (int_64)0
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [9000])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [9045])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9095])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8650])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $175($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8673])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $91(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $178($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8650])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $175($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [40]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [76]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [56])
	*($3 + [60]) = ($5 + [72])
	CALL $92(($3 + [32]), ($3 + [24]))
	*($5 + [80]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $93(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $178($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8650])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $175($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([160])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = (int_64)0
	*($5 + [148]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [64])
	*($3 + [64]) = ($5 + [80])
	*($3 + [68]) = ($5 + [96])
	*($3 + [72]) = ($5 + [112])
	*($3 + [76]) = ($5 + [120])
	*($3 + [80]) = ($5 + [128])
	*($3 + [84]) = ($5 + [136])
	*($3 + [88]) = ($5 + [144])
	CALL $88(($3 + [40]), ($3 + [32]))
	*($5 + [152]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $89(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $178($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [224])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [148])) == (int_32)$0), [8770])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8816])
	*($1 + [144]) = [2]
	*($1 + [136]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [8867])
	*($4 + [152]) = ($4 + [141])
	*($4 + [148]) = $4
	*($4 + [144]) = $4
	*($4 + [160]) = ($4 + [144])
	*($4 + [172]) = ($1 + [8])
	*($4 + [168]) = $1
	*($4 + [176]) = ($1 + [16])
	*($4 + [180]) = ($1 + [32])
	*($4 + [184]) = ($1 + [48])
	*($4 + [188]) = ($1 + [64])
	*($4 + [192]) = ($1 + [80])
	*($4 + [196]) = ($1 + [96])
	*($4 + [200]) = ($1 + [112])
	*($4 + [204]) = ($1 + [120])
	*($4 + [208]) = ($1 + [128])
	*($4 + [212]) = ($1 + [136])
	*($4 + [216]) = ($1 + [144])
	CALL $90(($4 + [168]), ($4 + [160]))
	CALL db_update_i64(*($1 + [152]), $2, $4, [141])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [224])
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([20])
	CALL $78($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [12])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [68])) == (int_32)$0), [8770])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [8816])
	*($1 + [20]) = [25000]
	*($1 + [26 align=2]) = [9830550]
	*($1 + [64]) = [2]
	$5 = *($1)
	CALL eosio_assert([1], [8867])
	*($4 + [80]) = ($4 + [58])
	*($4 + [76]) = $4
	*($4 + [72]) = $4
	*($4 + [88]) = ($4 + [72])
	*($4 + [100]) = ($1 + [8])
	*($4 + [96]) = $1
	*($4 + [104]) = ($1 + [16])
	*($4 + [108]) = ($1 + [20])
	*($4 + [112]) = ($1 + [24])
	*($4 + [116]) = ($1 + [26])
	*($4 + [120]) = ($1 + [28])
	*($4 + [124]) = ($1 + [32])
	*($4 + [128]) = ($1 + [40])
	*($4 + [132]) = ($1 + [48])
	*($4 + [136]) = ($1 + [56])
	*($4 + [140]) = ($1 + [64])
	CALL $80(($4 + [96]), ($4 + [88]))
	CALL db_update_i64(*($1 + [72]), $2, $4, [58])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [144])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([20])
	CALL $76($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [12])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$10()), [8678])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([20])
	CALL $77($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [12])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}