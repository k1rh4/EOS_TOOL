(data (i32.const 8192) "transfer\00")
(data (i32.const 8201) "eosio.token\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8299) "EOS\00")
(data (i32.const 8303) "we only surpport EOS\00")
(data (i32.const 8324) "invalid quantity\00")
(data (i32.const 8341) "must transfer positive quantity\00")
(data (i32.const 8373) "can not withdraw so much EOS\00")
(data (i32.const 8402) "number should in [1, 3]\00")
(data (i32.const 8426) "game not found\00")
(data (i32.const 8441) " win\00")
(data (i32.const 8446) "player mismatch\00")
(data (i32.const 8462) "amount mismatch\00")
(data (i32.const 8478) "number mismatch\00")
(data (i32.const 8494) "roll mismatch\00")
(data (i32.const 8508) "payout mismatch\00")
(data (i32.const 8524) "unable to find key\00")
(data (i32.const 8543) "string is too long to be a valid name\00")
(data (i32.const 8581) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8648) "character is not in allowed character set for names\00")
(data (i32.const 8700) "string is too long to be a valid symbol_code\00")
(data (i32.const 8745) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8798) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8847) "invalid symbol name\00")
(data (i32.const 8868) "\a8\"\00\00")
(data (i32.const 8872) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 8905) "write\00")
(data (i32.const 8911) "read\00")
(data (i32.const 8916) "get\00")
(data (i32.const 8920) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8971) "error reading iterator\00")
(data (i32.const 8994) "cannot pass end iterator to modify\00")
(data (i32.const 9029) "object passed to modify is not in multi_index\00")
(data (i32.const 9075) "cannot modify objects in table of another contract\00")
(data (i32.const 9126) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9185) "cannot create objects in table of another contract\00")
(data (i32.const 9236) "cannot pass end iterator to erase\00")
(data (i32.const 9270) "cannot increment end iterator\00")
(data (i32.const 9300) "object passed to erase is not in multi_index\00")
(data (i32.const 9345) "cannot erase objects in table of another contract\00")
(data (i32.const 9395) "attempt to remove object that was not in multi_index\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$6 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$7 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$8 (result i64)))
(import "env" "sha256" (func $fimport$9 (param i32 i32 i32)))
(import "env" "require_auth" (func $fimport$10 (param i64)))
(import "env" "send_inline" (func $fimport$11 (param i32 i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$14 (param i32)))
(import "env" "abort" (func $fimport$15))
(import "env" "memset" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$18 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$25 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$26 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$27 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$28 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$29 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$30 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$33 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$35 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$36 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$37 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $44))
(export "_Znwj" (func $42))
(export "_Znaj" (func $43))
(export "_ZdaPv" (func $45))
(export "_ZnwjSt11align_val_t" (func $46))
(export "_ZnajSt11align_val_t" (func $47))
(export "_ZdlPvSt11align_val_t" (func $48))
(export "_ZdaPvSt11align_val_t" (func $49))
(table $0 5 5 anyfunc)
(elem (i32.const 1) $3 $5 $7 $9)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17864))
(global $global$2 i32 (i32.const 17864))


int_32 .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $29($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $30(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $63($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8213])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $29($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8905])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8905])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $33(CALL $32($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8905])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8905])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $55($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $55($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $55($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8905])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8905])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8905])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8905])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[31]), [8905])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[31]), [8905])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8905])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8905])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [9300])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9345])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9395])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [84]))
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9300])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9345])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9395])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8971])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $61($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([128])) + [112]) = $0
	*($5 + [8]) = (int_64)0
	CALL $40(($3 + [32]), $5)
	*($5 + [116]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $21(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $64($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8911])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8911])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8911])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8911])
	CALL memcpy(($4 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($2 + [8]) = $4
	CALL $36(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $27 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6 + [8]) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8920])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $31($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8920])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [9300])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9345])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9395])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [116]))
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $64($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $61($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9448])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $61($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $55($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8911])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8911])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8911])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8911])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [8911])
	CALL memcpy(($1 + [32]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [8911])
	CALL memcpy(($1 + [64]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8911])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8911])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $59(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9448])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $59(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $64($0)
	
.LABEL $label$1
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $61($1)
	
.LABEL $label$2
	*(CALL $56()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $61(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $64($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	$3 = ($global$0 - [432])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $61($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [184]))) = (int_64)0
	*(($8 = ($4 + [176]))) = (int_64)0
	*(($9 = ($4 + [168]))) = (int_64)0
	*(($10 = ($4 + [216]))) = (int_64)0
	*(($11 = ($4 + [208]))) = (int_64)0
	*(($12 = ($4 + [200]))) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [192]) = (int_64)0
	*($4 + [224]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [116]) = $2
	*($4 + [112]) = $2
	*($4 + [120]) = ($2 + $7)
	*($4 + [368]) = ($4 + [112])
	*($4 + [400]) = ($4 + [128])
	CALL $24(($4 + [400]), ($4 + [368]))
	*(($13 = (($4 + [64]) + [8]))) = *($4 + [120])
	*($4 + [64]) = *($4 + [112])
	*(($14 = (($4 + [368]) + [8]))) = *($13)
	*($4 + [368]) = *($4 + [64])
	$13 = *($14)
	*((($4 + [400]) + [8])) = $13
	*((($4 + [80]) + [24])) = $13
	*($4 + [80]) = $0
	*($4 + [88]) = $1
	$0 = *($4 + [368])
	*($4 + [96]) = $0
	*($4 + [400]) = $0
	*(($13 = (($4 + [272]) + [16]))) = *($8)
	*(($8 = (($4 + [272]) + [24]))) = *($3)
	*(($3 = (($4 + [240]) + [16]))) = *($11)
	*(($11 = (($4 + [240]) + [24]))) = *($10)
	*($4 + [272]) = *($4 + [160])
	*($4 + [280]) = *($9)
	*($4 + [240]) = *($4 + [192])
	*($4 + [248]) = *($12)
	$0 = *($4 + [152])
	$1 = *($4 + [144])
	$15 = *($4 + [136])
	$16 = *($4 + [128])
	$17 = *($4 + [232])
	$18 = *($4 + [224])
	*((($4 + [336]) + [24])) = *($11)
	*((($4 + [336]) + [16])) = *($3)
	*((($4 + [304]) + [16])) = *($13)
	*((($4 + [304]) + [24])) = *($8)
	*($4 + [344]) = *($4 + [248])
	*($4 + [336]) = *($4 + [240])
	*($4 + [304]) = *($4 + [272])
	*($4 + [312]) = *($4 + [280])
	$3 = (($4 + [80]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$19 = *((($4 + [304]) + [24]))
	*((($4 + [400]) + [24])) = $19
	$20 = *((($4 + [304]) + [16]))
	*((($4 + [400]) + [16])) = $20
	*(($5 = (($4 + [368]) + [16]))) = *((($4 + [336]) + [16]))
	*(($8 = (($4 + [368]) + [24]))) = *((($4 + [336]) + [24]))
	*((($4 + [32]) + [16])) = $20
	*((($4 + [32]) + [24])) = $19
	$19 = *($4 + [312])
	*($4 + [408]) = $19
	$20 = *($4 + [304])
	*($4 + [400]) = $20
	*($4 + [368]) = *($4 + [336])
	*($4 + [376]) = *($4 + [344])
	*($4 + [32]) = $20
	*($4 + [40]) = $19
	*(($4 + [24])) = *($8)
	*(($4 + [16])) = *($5)
	*($4 + [8]) = *($4 + [376])
	*($4) = *($4 + [368])
	CALL void $3((int_32 $16), (int_64 $15), (int_64 $1), (int_64 $0), (int_64 ($4 + [32])), (int_32 $4), (int_32 $18), (int_64 $17), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $64($2)
	
.LABEL $label$6
	$global$0 = ($4 + [432])
	return [1]
}

void .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$1 = ($global$0 - [128])
	$global$0 = $1
	CALL require_auth(*($0))
	*((($1 + [40]) + [32])) = [0]
	*($1 + [56]) = (int_64)-1
	$2 = *($0)
	*($1 + [40]) = $2
	*($1 + [48]) = $2
	*($1 + [64]) = (int_64)0
	$3 = [0]
	$4 = CALL db_find_i64($2, $2, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $13(($1 + [40]), $4)
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)($1 + [40])), [8920])
	
.LABEL $label$1
	*(($1 + [32])) = [0]
	*($1) = (int_64)6138663591592764928
	*($1 + [16]) = (int_64)-1
	*($1 + [24]) = (int_64)0
	*($1 + [8]) = *($0)
	$4 = CALL $58([8299])
	if ( ($4 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [8700])
	goto $label$8 
	
.LABEL $label$9
	if ( ($4 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$2 = (int_64)0
	
.LOOP $label$10:
	$5 = *(($4 + [8298]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [8745])
	
.LABEL $label$11
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$10 }
	$5 = CALL $27($1, ((int_64)$2 & (int_64)72057594037927935), [8524])
	$2 = *($0)
	if ( ($3 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$5 = CALL $27($1, (int_64)0, [8524])
	$2 = *($0)
	if ( $3 ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*($1 + [40]) == (int_64)CALL $fimport$4()), [9185])
	*(($4 = CALL _Znwj([48])) + [32]) = ($1 + [40])
	*($4) = (int_64)0
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [24]) = $6
	CALL eosio_assert([1], [8905])
	CALL memcpy(($1 + [96]), $4, [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($1 + [96]) | [8]), ($4 + [8]), [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($1 + [96]) + [16]), ($4 + [16]), [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($1 + [96]) + [24]), ($4 + [24]), [8])
	$6 = *($4)
	$3 = CALL db_store_i64(*((($1 + [40]) + [8])), (int_64)7235159537265672192, $2, $6, ($1 + [96]), [32])
	*($4 + [36]) = $3
	$5 = (($1 + [40]) + [16])
	if ( (uint_64)($6 <= *($5)) ){ goto $label$12 }
	*($5) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*($1 + [88]) = $4
	$2 = *($4)
	*($1 + [96]) = $2
	*($1 + [84]) = $3
	$0 = ($1 + [68])
	$5 = *($0)
	if ( ((uint_32)$5 >= (uint_32)*((($1 + [40]) + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $2
	*($5 + [16]) = $3
	*($1 + [88]) = [0]
	*($5) = $4
	*($0) = ($5 + [24])
	$4 = *($1 + [88])
	*($1 + [88]) = [0]
	if ( $4 ){ goto $label$13 }
	goto $label$4 
	
.LABEL $label$14
	CALL $28(($1 + [64]), ($1 + [88]), ($1 + [96]), ($1 + [84]))
	$4 = *($1 + [88])
	*($1 + [88]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	
.LABEL $label$13
	CALL _ZdlPv($4)
	goto $label$4 
	
.LABEL $label$5
	CALL eosio_assert([1], [8994])
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)($1 + [40])), [9029])
	CALL eosio_assert(((int_64)*($1 + [40]) == (int_64)CALL $fimport$4()), [9075])
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [24]) = $6
	$6 = *($3)
	CALL eosio_assert([1], [9126])
	CALL eosio_assert([1], [8905])
	CALL memcpy(($1 + [96]), $3, [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($1 + [96]) | [8]), ($3 + [8]), [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($1 + [96]) + [16]), ($3 + [16]), [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($1 + [96]) + [24]), ($3 + [24]), [8])
	CALL db_update_i64(*($3 + [36]), $2, ($1 + [96]), [32])
	$4 = (($1 + [40]) + [16])
	if ( (uint_64)($6 <= *($4)) ){ goto $label$4 }
	*($4) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$3 = *($1 + [24])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = *($1 + [24])
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$0 = ($1 + [28])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$18 }
	CALL _ZdlPv($5)
	
.LABEL $label$18
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$17 }
	$4 = *(($1 + [24]))
	goto $label$15 
	
.LABEL $label$16
	$4 = $3
	
.LABEL $label$15
	*($0) = $3
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$3 = *($1 + [64])
	if ( ($3 == 0) ){ goto $label$19 }
	$0 = ($1 + [68])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$21 }
	
.LOOP $label$22:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$23 }
	CALL _ZdlPv($5)
	
.LABEL $label$23
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$22 }
	$4 = *(($1 + [64]))
	goto $label$20 
	
.LABEL $label$21
	$4 = $3
	
.LABEL $label$20
	*($0) = $3
	CALL _ZdlPv($4)
	
.LABEL $label$19
	$global$0 = ($1 + [128])
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $61($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $11(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $12(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $64($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5, int_32 $6, int_64 $7, int_64 $8)
{
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$9 = ($global$0 - [48])
	$global$0 = $9
	CALL require_auth(*($0))
	*(($9 + [32])) = [0]
	*($9 + [16]) = (int_64)-1
	*($9 + [24]) = (int_64)0
	$10 = *($0)
	*($9) = $10
	*($9 + [8]) = $10
	$0 = [0]
	$11 = CALL db_find_i64($10, $10, (int_64)-5003315193367756800, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $25($9, $11)
	CALL eosio_assert(((int_32)*($0 + [112]) == (int_32)$9), [8920])
	
.LABEL $label$1
	$11 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($11, [8426])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)$2), [8446])
	CALL eosio_assert(((int_64)*($0 + [16]) == (int_64)$3), [8462])
	CALL eosio_assert(((int_64)*($0 + [24]) == (int_64)$4), [8478])
	CALL eosio_assert(((int_64)*($0 + [96]) == (int_64)$7), [8494])
	CALL eosio_assert(((int_64)*($0 + [104]) == (int_64)$8), [8508])
	CALL eosio_assert($11, [9236])
	CALL eosio_assert($11, [9270])
	$11 = CALL db_next_i64(*($0 + [116]), ($9 + [40]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$2 }
	CALL $25($9, $11)
	
.LABEL $label$2
	CALL $26($9, $0)
	$12 = *($9 + [24])
	if ( ($12 == 0) ){ goto $label$3 }
	$13 = ($9 + [28])
	$0 = *($13)
	if ( ((int_32)$0 == (int_32)$12) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$11 = *($0)
	*($0) = [0]
	if ( ($11 == 0) ){ goto $label$7 }
	CALL _ZdlPv($11)
	
.LABEL $label$7
	if ( ((int_32)$12 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($9 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $12
	
.LABEL $label$4
	*($13) = $12
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($9 + [48])
}

int_32 .FUNC $4 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $61($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [64]) + [40]))) = (int_64)0
	*(($8 = (($4 + [64]) + [32]))) = (int_64)0
	*(($9 = (($4 + [64]) + [24]))) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [64]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8911])
	CALL memcpy(($4 + [64]), $2, [8])
	CALL eosio_assert(((uint_32)($7 + [-8]) > (uint_32)[31]), [8911])
	CALL memcpy((($4 + [64]) + [16]), ($2 + [8]), [32])
	*(($4 + [52])) = ($2 + [40])
	*((($4 + [32]) + [24])) = ($2 + $7)
	*($4 + [40]) = $1
	*($4 + [32]) = $0
	*($4 + [48]) = $2
	*(($10 = (($4 + [112]) + [16]))) = *($8)
	*(($8 = (($4 + [112]) + [24]))) = *($3)
	*($4 + [112]) = *($4 + [80])
	*($4 + [120]) = *($9)
	$0 = *($4 + [64])
	*((($4 + [144]) + [24])) = *($8)
	*((($4 + [144]) + [16])) = *($10)
	*($4 + [152]) = *($4 + [120])
	*($4 + [144]) = *($4 + [112])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [144]) + [24]))
	*((($4 + [176]) + [24])) = $1
	$11 = *((($4 + [144]) + [16]))
	*((($4 + [176]) + [16])) = $11
	*(($4 + [16])) = $11
	*(($4 + [24])) = $1
	$1 = *($4 + [152])
	*($4 + [184]) = $1
	$11 = *($4 + [144])
	*($4) = $11
	*($4 + [176]) = $11
	*($4 + [8]) = $1
	CALL void $3((int_32 $0), (int_64 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $64($2)
	
.LABEL $label$6
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC $5 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$5 = ($global$0 - [256])
	$global$0 = $5
	$6 = CALL $58([8299])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8700])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8298]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8745])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$7 = ((int_64)$7 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)0
	
.LABEL $label$1
	$9 = *($3 + [8])
	CALL eosio_assert(((int_64)$9 == (int_64)((int_64)$7 | (int_64)4)), [8303])
	$10 = [0]
	$8 = [0]
	$11 = *($3)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $9
	$8 = [1]
	$3 = $6
	$6 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $9
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$3 = ($6 + [1])
	$6 = $3
	if ( $8 ){ goto $label$11 }
	$8 = [1]
	$6 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	
.LABEL $label$7
	CALL eosio_assert($8, [8324])
	CALL eosio_assert(((int_64)$11 > (int_64)0), [8341])
	*(($5 + [152])) = [0]
	*($5 + [136]) = (int_64)-1
	*($5 + [144]) = (int_64)0
	$7 = *($0)
	*($5 + [120]) = $7
	*($5 + [128]) = $7
	$6 = CALL db_find_i64($7, $7, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	$10 = CALL $13(($5 + [120]), $6)
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)($5 + [120])), [8920])
	
.LABEL $label$12
	$7 = *($0)
	if ( ((int_64)$1 != (int_64)6138535367845062160) ){ goto $label$16 }
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [8994])
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)($5 + [120])), [9029])
	CALL eosio_assert(((int_64)*($5 + [120]) == (int_64)CALL $fimport$4()), [9075])
	*($10 + [24]) = ((int_64)*($10 + [24]) + (int_64)$11)
	*($10 + [16]) = ((int_64)*($10 + [16]) + (int_64)$11)
	$9 = *($10)
	CALL eosio_assert([1], [9126])
	CALL eosio_assert([1], [8905])
	CALL memcpy(($5 + [176]), $10, [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($5 + [176]) | [8]), ($10 + [8]), [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($5 + [176]) + [16]), ($10 + [16]), [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($5 + [176]) + [24]), ($10 + [24]), [8])
	CALL db_update_i64(*($10 + [36]), $7, ($5 + [176]), [32])
	$6 = (($5 + [120]) + [16])
	if ( (uint_64)($9 <= *($6)) ){ goto $label$15 }
	*($6) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$3 = *($5 + [144])
	if ( $3 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$17 }
	if ( ((int_64)$2 != (int_64)6138535367845062160) ){ goto $label$15 }
	CALL eosio_assert((uint_64)($11 <= *($10 + [24])), [8373])
	$9 = *($0)
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [8994])
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)($5 + [120])), [9029])
	CALL eosio_assert(((int_64)*($5 + [120]) == (int_64)CALL $fimport$4()), [9075])
	*($10 + [24]) = (int_64))(*($10 + [24]) - $11)
	*($10 + [16]) = (int_64))(*($10 + [16]) - $11)
	$7 = *($10)
	CALL eosio_assert([1], [9126])
	CALL eosio_assert([1], [8905])
	CALL memcpy(($5 + [176]), $10, [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($5 + [176]) | [8]), ($10 + [8]), [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($5 + [176]) + [16]), ($10 + [16]), [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($5 + [176]) + [24]), ($10 + [24]), [8])
	CALL db_update_i64(*($10 + [36]), $9, ($5 + [176]), [32])
	$6 = (($5 + [120]) + [16])
	if ( (uint_64)($7 <= *($6)) ){ goto $label$15 }
	*($6) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$3 = *($5 + [144])
	if ( $3 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$17
	$6 = *($4)
	$8 = ($6 & [1])
	if ( $8 ){ goto $label$20 }
	$9 = (int_64)0
	$7 = (int_64)0
	$6 = uint_32($6 >> [1])
	if ( ($6 == 0) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$20
	$9 = (int_64)0
	$7 = (int_64)0
	$6 = *($4 + [4])
	if ( ($6 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	if ( $8 ){ goto $label$21 }
	$8 = ($4 + [1])
	$7 = (int_64)0
	
.LOOP $label$22:
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)*($8)) + (int_64)-48)
	$8 = ($8 + [1])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$22 }
	goto $label$18 
	
.LABEL $label$21
	$8 = *($4 + [8])
	$7 = (int_64)0
	
.LOOP $label$23:
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)*($8)) + (int_64)-48)
	$8 = ($8 + [1])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$23 }
	
.LABEL $label$18
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)-1) <= (int_64)3), [8402])
	$2 = *($10 + [8])
	*(($4 = (($5 + [80]) + [32]))) = [0]
	*($5 + [96]) = (int_64)-1
	*($5 + [104]) = $9
	$9 = *($0)
	*($5 + [80]) = $9
	*($5 + [88]) = $9
	CALL eosio_assert(((int_64)$9 == (int_64)CALL $fimport$4()), [9185])
	*(($6 = CALL _Znwj([48])) + [32]) = ($5 + [80])
	*($6 + [8]) = $1
	*($6) = $2
	*($6 + [16]) = $11
	*($6 + [24]) = $7
	CALL eosio_assert([1], [8905])
	CALL memcpy(($5 + [176]), $6, [8])
	CALL eosio_assert([1], [8905])
	$12 = (($5 + [176]) | [8])
	CALL memcpy($12, ($6 + [8]), [8])
	CALL eosio_assert([1], [8905])
	$13 = (($5 + [176]) + [16])
	CALL memcpy($13, ($6 + [16]), [8])
	CALL eosio_assert([1], [8905])
	$14 = (($5 + [176]) + [24])
	CALL memcpy($14, ($6 + [24]), [8])
	$7 = *($6)
	$3 = CALL db_store_i64(*($5 + [88]), (int_64)3617214763094933504, $9, $7, ($5 + [176]), [32])
	*($6 + [36]) = $3
	if ( (uint_64)($7 <= *($5 + [96])) ){ goto $label$24 }
	*((($5 + [80]) + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$24
	*($5 + [8]) = $6
	$7 = *($6)
	*($5 + [176]) = $7
	*($5 + [48]) = $3
	$15 = ($5 + [108])
	$8 = *($15)
	if ( ((uint_32)$8 >= (uint_32)*($4)) ){ goto $label$27 }
	*($8 + [8]) = $7
	*($8 + [16]) = $3
	*($5 + [8]) = [0]
	*($8) = $6
	*($15) = ($8 + [24])
	$6 = *($5 + [8])
	$8 = [0]
	*($5 + [8]) = [0]
	if ( $6 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	CALL $14(($5 + [104]), ($5 + [8]), ($5 + [176]), ($5 + [48]))
	$6 = *($5 + [8])
	$8 = [0]
	*($5 + [8]) = [0]
	if ( ($6 == 0) ){ goto $label$25 }
	
.LABEL $label$26
	CALL _ZdlPv($6)
	
.LABEL $label$25
	$9 = *($0)
	CALL eosio_assert(((int_32)$10 != (int_32)$8), [8994])
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)($5 + [120])), [9029])
	CALL eosio_assert(((int_64)*($5 + [120]) == (int_64)CALL $fimport$4()), [9075])
	*($10 + [8]) = ((int_64)*($10 + [8]) + (int_64)1)
	$7 = *($10)
	CALL eosio_assert([1], [9126])
	CALL eosio_assert([1], [8905])
	CALL memcpy(($5 + [176]), $10, [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy($12, ($10 + [8]), [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy($13, ($10 + [16]), [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy($14, ($10 + [24]), [8])
	CALL db_update_i64(*($10 + [36]), $9, ($5 + [176]), [32])
	$6 = (($5 + [120]) + [16])
	if ( (uint_64)($7 <= *($6)) ){ goto $label$28 }
	*($6) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$28
	*($5 + [176]) = ((int_64)CALL current_time() + (int_64)$1)
	CALL sha256(($5 + [176]), [8], ($5 + [48]))
	*((($5 + [8]) + [32])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$7 = *($0)
	*($5 + [8]) = $7
	*($5 + [16]) = $7
	CALL eosio_assert(((int_64)$7 == (int_64)CALL $fimport$4()), [9185])
	*(($6 = CALL _Znwj([96])) + [80]) = ($5 + [8])
	*($6) = $2
	*($6 + [16]) = *($5 + [48])
	*(($6 + [24])) = *($5 + [56])
	*(($6 + [32])) = *((($5 + [48]) + [16]))
	*(($6 + [40])) = *((($5 + [48]) + [24]))
	CALL eosio_assert([1], [8905])
	CALL memcpy(($5 + [176]), $6, [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($5 + [176]) | [8]), ($6 + [16]), [32])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($5 + [176]) + [40]), ($6 + [48]), [32])
	$9 = *($6)
	$3 = CALL db_store_i64(*($5 + [16]), (int_64)-4425754204123955200, $7, $9, ($5 + [176]), [72])
	*($6 + [84]) = $3
	if ( (uint_64)($9 <= *($5 + [24])) ){ goto $label$29 }
	*(($5 + [24])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$29
	*($5 + [168]) = $6
	$7 = *($6)
	*($5 + [176]) = $7
	*($5 + [164]) = $3
	$10 = ($5 + [36])
	$8 = *($10)
	if ( ((uint_32)$8 >= (uint_32)*(($5 + [40]))) ){ goto $label$32 }
	*($8 + [8]) = $7
	*($8 + [16]) = $3
	*($5 + [168]) = [0]
	*($8) = $6
	*($10) = ($8 + [24])
	$6 = *($5 + [168])
	*($5 + [168]) = [0]
	if ( $6 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	CALL $15(($5 + [32]), ($5 + [168]), ($5 + [176]), ($5 + [164]))
	$6 = *($5 + [168])
	*($5 + [168]) = [0]
	if ( ($6 == 0) ){ goto $label$30 }
	
.LABEL $label$31
	CALL _ZdlPv($6)
	
.LABEL $label$30
	$3 = *($5 + [32])
	if ( ($3 == 0) ){ goto $label$33 }
	$10 = ($5 + [36])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$35 }
	
.LOOP $label$36:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$37 }
	CALL _ZdlPv($8)
	
.LABEL $label$37
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$36 }
	$6 = *(($5 + [32]))
	goto $label$34 
	
.LABEL $label$35
	$6 = $3
	
.LABEL $label$34
	*($10) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$33
	$3 = *($5 + [104])
	if ( ($3 == 0) ){ goto $label$15 }
	$10 = ($5 + [108])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$39 }
	
.LOOP $label$40:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$41 }
	CALL _ZdlPv($8)
	
.LABEL $label$41
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$40 }
	$6 = *(($5 + [104]))
	goto $label$38 
	
.LABEL $label$39
	$6 = $3
	
.LABEL $label$38
	*($10) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$15
	$3 = *($5 + [144])
	if ( ($3 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$10 = ($5 + [148])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$43 }
	
.LOOP $label$44:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$45 }
	CALL _ZdlPv($8)
	
.LABEL $label$45
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$44 }
	$6 = *(($5 + [144]))
	goto $label$42 
	
.LABEL $label$43
	$6 = $3
	
.LABEL $label$42
	*($10) = $3
	CALL _ZdlPv($6)
	$global$0 = ($5 + [256])
	return 
	
.LABEL $label$13
	$global$0 = ($5 + [256])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8543])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8648])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8581])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8648])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $3 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	float_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_64 $18
	int_32 $19
	$3 = ($global$0 - [336])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = [0]
	*((($3 + [168]) + [32])) = [0]
	*($3 + [184]) = (int_64)-1
	*($3 + [192]) = (int_64)0
	$5 = *($0)
	*($3 + [168]) = $5
	*($3 + [176]) = $5
	$6 = [0]
	$7 = CALL db_find_i64($5, $5, (int_64)3617214763094933504, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $16(($3 + [168]), $7)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)($3 + [168])), [8920])
	
.LABEL $label$1
	$8 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($8, [8426])
	*((($3 + [128]) + [32])) = [0]
	*($3 + [144]) = (int_64)-1
	*($3 + [152]) = (int_64)0
	$5 = *($0)
	*($3 + [128]) = $5
	*($3 + [136]) = $5
	$7 = CALL db_find_i64($5, $5, (int_64)-4425754204123955200, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $17(($3 + [128]), $7)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)($3 + [128])), [8920])
	
.LABEL $label$2
	$9 = *($0)
	$10 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($10, [8994])
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)($3 + [128])), [9029])
	CALL eosio_assert(((int_64)*($3 + [128]) == (int_64)CALL $fimport$4()), [9075])
	*($4 + [48]) = *($2)
	*(($4 + [56])) = *(($2 + [8]))
	*(($4 + [64])) = *(($2 + [16]))
	*(($4 + [72])) = *(($2 + [24]))
	$5 = *($4)
	CALL eosio_assert([1], [9126])
	CALL eosio_assert([1], [8905])
	CALL memcpy(($3 + [224]), $4, [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($3 + [224]) | [8]), ($4 + [16]), [32])
	CALL eosio_assert([1], [8905])
	$2 = ($4 + [48])
	CALL memcpy(($3 + [264]), $2, [32])
	CALL db_update_i64(*($4 + [84]), $9, ($3 + [224]), [72])
	$7 = (($3 + [128]) + [16])
	if ( (uint_64)($5 <= *($7)) ){ goto $label$3 }
	*($7) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$11 = *($6 + [24])
	$12 = *($6 + [8])
	$13 = *($6 + [16])
	$5 = (int_64)0
	$9 = (int_64)0
	
.LOOP $label$4:
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (((int_32)*($2) ^ (int_32)*(($2 + [-32]))) & [3])) << (int_64)$5) | (int_64)$9)
	$2 = ($2 + [1])
	$5 = ((int_64)$5 + (int_64)2)
	if ( ((int_64)$5 != (int_64)64) ){ goto $label$4 }
	$2 = CALL $58([8299])
	$7 = ($2 <= [8])
	$14 = ((float_64)((float_64)((float_64)(CASTING float_64)(uint_64 $9) * (float_64)(float_64)5.421010862427522e-20) * (float_64)(float_64)3) + (float_64)(float_64)1)
	if ( (((float_64)$14 < (float_64)(float_64)18446744073709551615) & ((float_64)$14 >= (float_64)(float_64)0)) ){ goto $label$9 }
	$15 = (int_64)0
	if ( ($7 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$15 = (Rounds 0)($14)
	if ( $7 ){ goto $label$7 }
	
.LABEL $label$8
	CALL eosio_assert([0], [8700])
	goto $label$6 
	
.LABEL $label$7
	if ( $2 ){ goto $label$6 }
	$9 = (int_64)0
	goto $label$5 
	
.LABEL $label$6
	$5 = (int_64)0
	
.LOOP $label$10:
	$7 = *(($2 + [8298]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [8745])
	
.LABEL $label$11
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$10 }
	$9 = ((int_64)$5 << (int_64)8)
	
.LABEL $label$5
	CALL eosio_assert([1], [8798])
	$5 = (uint_64)$9 >> (uint_64)(int_64)8)
	$16 = ((int_64)$9 | (int_64)4)
	$2 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$9 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$5 = $9
	$7 = [1]
	$17 = $2
	$2 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$5 = $9
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$17 = ($2 + [1])
	$2 = $17
	if ( $7 ){ goto $label$16 }
	$7 = [1]
	$2 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$7 = [0]
	
.LABEL $label$12
	CALL eosio_assert($7, [8847])
	$2 = [0]
	*(($3 + [120])) = [0]
	*($3 + [104]) = (int_64)-1
	$5 = *($0)
	*($3 + [88]) = $5
	*($3 + [96]) = $5
	*($3 + [112]) = (int_64)0
	$7 = CALL db_find_i64($5, $5, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$17 }
	$2 = CALL $13(($3 + [88]), $7)
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)($3 + [88])), [8920])
	
.LABEL $label$17
	if ( ((int_64)$11 != (int_64)1) ){ goto $label$40 }
	if ( ((int_64)$15 != (int_64)3) ){ goto $label$40 }
	$18 = *($0)
	$5 = *($2 + [16])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [8994])
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)($3 + [88])), [9029])
	CALL eosio_assert(((int_64)*($3 + [88]) == (int_64)CALL $fimport$4()), [9075])
	$9 = ((int_64)$13 * (int_64)3)
	$5 = ((int_64)$5 + (int_64)$13)
	$9 = ( $5 ? $9 : (uint_64)($5 <= $9) )
	$5 = (int_64)
	*($2 + [16]) = ((int_64)$5($13 - $9)) + (int_64)*($2 + [16]))
	*($2 + [24]) = ((int_64)$5 + (int_64)*($2 + [24]))
	$5 = *($2)
	CALL eosio_assert([1], [9126])
	CALL eosio_assert([1], [8905])
	CALL memcpy(($3 + [224]), $2, [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($3 + [224]) | [8]), ($2 + [8]), [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($3 + [224]) + [16]), ($2 + [16]), [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($3 + [224]) + [24]), ($2 + [24]), [8])
	CALL db_update_i64(*($2 + [36]), $18, ($3 + [224]), [32])
	$2 = (($3 + [88]) + [16])
	if ( (uint_64)($5 <= *($2)) ){ goto $label$41 }
	*($2) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$41
	if ( ((int_64)$9 < (int_64)1) ){ goto $label$18 }
	*($3 + [40]) = (int_64)3617214756542218240
	*($3 + [32]) = *($0)
	if ( ((int_64)$12 == (int_64)0) ){ goto $label$39 }
	$7 = [0]
	$17 = *([0] + [8868])
	$5 = $12
	
.LOOP $label$43:
	*((($3 + [224]) + ($2 = $7))) = *(($17 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$5 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$2 == (int_32)[12]) )))))
	$7 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[11]) ){ goto $label$42 }
	$5 = ((int_64)$5 << (int_64)5)
	if ( ((int_64)$5 != (int_64)0) ){ goto $label$43 }
	
.LABEL $label$42
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$38 }
	*($3 + [16]) = ($7 << [1])
	$17 = (($3 + [16]) | [1])
	goto $label$37 
	
.LABEL $label$40
	if ( ((int_64)$11 != (int_64)3) ){ goto $label$44 }
	if ( ((int_64)$15 != (int_64)2) ){ goto $label$44 }
	$18 = *($0)
	$5 = *($2 + [16])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [8994])
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)($3 + [88])), [9029])
	CALL eosio_assert(((int_64)*($3 + [88]) == (int_64)CALL $fimport$4()), [9075])
	$9 = ((int_64)$13 * (int_64)3)
	$5 = ((int_64)$5 + (int_64)$13)
	$9 = ( $5 ? $9 : (uint_64)($5 <= $9) )
	$5 = (int_64)
	*($2 + [16]) = ((int_64)$5($13 - $9)) + (int_64)*($2 + [16]))
	*($2 + [24]) = ((int_64)$5 + (int_64)*($2 + [24]))
	$5 = *($2)
	CALL eosio_assert([1], [9126])
	CALL eosio_assert([1], [8905])
	CALL memcpy(($3 + [224]), $2, [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($3 + [224]) | [8]), ($2 + [8]), [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($3 + [224]) + [16]), ($2 + [16]), [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($3 + [224]) + [24]), ($2 + [24]), [8])
	CALL db_update_i64(*($2 + [36]), $18, ($3 + [224]), [32])
	$2 = (($3 + [88]) + [16])
	if ( (uint_64)($5 <= *($2)) ){ goto $label$45 }
	*($2) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$45
	if ( ((int_64)$9 < (int_64)1) ){ goto $label$18 }
	*($3 + [40]) = (int_64)3617214756542218240
	*($3 + [32]) = *($0)
	if ( ((int_64)$12 == (int_64)0) ){ goto $label$33 }
	$7 = [0]
	$17 = *([0] + [8868])
	$5 = $12
	
.LOOP $label$47:
	*((($3 + [224]) + ($2 = $7))) = *(($17 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$5 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$2 == (int_32)[12]) )))))
	$7 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[11]) ){ goto $label$46 }
	$5 = ((int_64)$5 << (int_64)5)
	if ( ((int_64)$5 != (int_64)0) ){ goto $label$47 }
	
.LABEL $label$46
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$32 }
	*($3 + [16]) = ($7 << [1])
	$17 = (($3 + [16]) | [1])
	goto $label$31 
	
.LABEL $label$44
	if ( ((int_64)$11 != (int_64)2) ){ goto $label$48 }
	if ( ((int_64)$15 != (int_64)1) ){ goto $label$48 }
	$18 = *($0)
	$5 = *($2 + [16])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [8994])
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)($3 + [88])), [9029])
	CALL eosio_assert(((int_64)*($3 + [88]) == (int_64)CALL $fimport$4()), [9075])
	$9 = ((int_64)$13 * (int_64)3)
	$5 = ((int_64)$5 + (int_64)$13)
	$9 = ( $5 ? $9 : (uint_64)($5 <= $9) )
	$5 = (int_64)
	*($2 + [16]) = ((int_64)$5($13 - $9)) + (int_64)*($2 + [16]))
	*($2 + [24]) = ((int_64)$5 + (int_64)*($2 + [24]))
	$5 = *($2)
	CALL eosio_assert([1], [9126])
	CALL eosio_assert([1], [8905])
	CALL memcpy(($3 + [224]), $2, [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($3 + [224]) | [8]), ($2 + [8]), [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($3 + [224]) + [16]), ($2 + [16]), [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($3 + [224]) + [24]), ($2 + [24]), [8])
	CALL db_update_i64(*($2 + [36]), $18, ($3 + [224]), [32])
	$2 = (($3 + [88]) + [16])
	if ( (uint_64)($5 <= *($2)) ){ goto $label$49 }
	*($2) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$49
	if ( ((int_64)$9 < (int_64)1) ){ goto $label$18 }
	*($3 + [40]) = (int_64)3617214756542218240
	*($3 + [32]) = *($0)
	if ( ((int_64)$12 == (int_64)0) ){ goto $label$29 }
	$7 = [0]
	$17 = *([0] + [8868])
	$5 = $12
	
.LOOP $label$51:
	*((($3 + [224]) + ($2 = $7))) = *(($17 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$5 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$2 == (int_32)[12]) )))))
	$7 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[11]) ){ goto $label$50 }
	$5 = ((int_64)$5 << (int_64)5)
	if ( ((int_64)$5 != (int_64)0) ){ goto $label$51 }
	
.LABEL $label$50
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$28 }
	*($3 + [16]) = ($7 << [1])
	$17 = (($3 + [16]) | [1])
	goto $label$27 
	
.LABEL $label$48
	$9 = *($0)
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [8994])
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)($3 + [88])), [9029])
	CALL eosio_assert(((int_64)*($3 + [88]) == (int_64)CALL $fimport$4()), [9075])
	$14 = ((float_64)(CASTING float_64)(uint_64 $13) * (float_64)(float_64)0.1)
	if ( (((float_64)$14 < (float_64)(float_64)18446744073709551615) & ((float_64)$14 >= (float_64)(float_64)0)) ){ goto $label$35 }
	$5 = (int_64)0
	goto $label$34 
	
.LABEL $label$39
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [16]) = [0]
	$2 = (($3 + [16]) | [1])
	goto $label$36 
	
.LABEL $label$38
	$19 = (($7 + [16]) & [-16])
	$17 = CALL _Znwj($19)
	*($3 + [16]) = ($19 | [1])
	*($3 + [24]) = $17
	*($3 + [20]) = $7
	
.LABEL $label$37
	$19 = ($2 + [1])
	$2 = [0]
	
.LOOP $label$52:
	*(($17 + $2)) = *((($3 + [224]) + $2))
	$2 = ($2 + [1])
	if ( ((int_32)$19 != (int_32)$2) ){ goto $label$52 }
	$2 = ($17 + $7)
	
.LABEL $label$36
	*($2) = [0]
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$2 = CALL $58([8441])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$55 }
	*($3) = ($2 << [1])
	$17 = ($3 | [1])
	$7 = $17
	if ( $2 ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$55
	$17 = (($2 + [16]) & [-16])
	$7 = CALL _Znwj($17)
	*($3) = ($17 | [1])
	*($3 + [8]) = $7
	*($3 + [4]) = $2
	$17 = ($3 | [1])
	
.LABEL $label$54
	CALL memcpy($7, [8441], $2)
	
.LABEL $label$53
	*(($7 + $2)) = [0]
	$2 = *($3)
	$7 = ($2 & [1])
	$2 = CALL $54(($3 + [16]), ( *($3 + [8]) ? $17 : $7 ), ( *($3 + [4]) ? uint_32($2 >> [1]) : $7 ))
	$5 = *($2)
	*($2) = (int_64)0
	$7 = *($2 + [8])
	*($2 + [8]) = [0]
	*(($3 + [248])) = $16
	*(($3 + [264])) = $7
	*($3 + [232]) = $12
	*($3 + [224]) = *($0)
	*($3 + [240]) = $9
	*($3 + [256]) = $5
	$2 = CALL $18(($3 + [48]), ($3 + [32]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($3 + [224]))
	CALL $19(($3 + [208]), $2)
	$7 = *($3 + [208])
	CALL send_inline($7, (*($3 + [212]) - $7))
	$7 = *($3 + [208])
	if ( ($7 == 0) ){ goto $label$56 }
	*($3 + [212]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$56
	$7 = *($2 + [28])
	if ( ($7 == 0) ){ goto $label$57 }
	*(($2 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$57
	$7 = *($2 + [16])
	if ( ($7 == 0) ){ goto $label$58 }
	*(($2 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$58
	if ( (*($3 + [256]) & [1]) ){ goto $label$60 }
	if ( (*($3) & [1]) ){ goto $label$59 }
	goto $label$20 
	
.LABEL $label$60
	CALL _ZdlPv(*(($3 + [264])))
	if ( ((*($3) & [1]) == 0) ){ goto $label$20 }
	
.LABEL $label$59
	CALL _ZdlPv(*(($3 + [8])))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$35
	$5 = (Rounds 0)($14)
	
.LABEL $label$34
	*($2 + [16]) = ((int_64))($13 - $5) + (int_64)*($2 + [16]))
	*($2 + [24]) = ((int_64)*($2 + [24]) + (int_64)$5)
	$5 = *($2)
	CALL eosio_assert([1], [9126])
	CALL eosio_assert([1], [8905])
	CALL memcpy(($3 + [224]), $2, [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($3 + [224]) | [8]), ($2 + [8]), [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($3 + [224]) + [16]), ($2 + [16]), [8])
	CALL eosio_assert([1], [8905])
	CALL memcpy((($3 + [224]) + [24]), ($2 + [24]), [8])
	CALL db_update_i64(*($2 + [36]), $9, ($3 + [224]), [32])
	$2 = (($3 + [88]) + [16])
	if ( (uint_64)($5 <= *($2)) ){ goto $label$61 }
	*($2) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$61
	$9 = (int_64)0
	goto $label$18 
	
.LABEL $label$33
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [16]) = [0]
	$2 = (($3 + [16]) | [1])
	goto $label$30 
	
.LABEL $label$32
	$19 = (($7 + [16]) & [-16])
	$17 = CALL _Znwj($19)
	*($3 + [16]) = ($19 | [1])
	*($3 + [24]) = $17
	*($3 + [20]) = $7
	
.LABEL $label$31
	$19 = ($2 + [1])
	$2 = [0]
	
.LOOP $label$62:
	*(($17 + $2)) = *((($3 + [224]) + $2))
	$2 = ($2 + [1])
	if ( ((int_32)$19 != (int_32)$2) ){ goto $label$62 }
	$2 = ($17 + $7)
	
.LABEL $label$30
	*($2) = [0]
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$2 = CALL $58([8441])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$65 }
	*($3) = ($2 << [1])
	$17 = ($3 | [1])
	$7 = $17
	if ( $2 ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$65
	$17 = (($2 + [16]) & [-16])
	$7 = CALL _Znwj($17)
	*($3) = ($17 | [1])
	*($3 + [8]) = $7
	*($3 + [4]) = $2
	$17 = ($3 | [1])
	
.LABEL $label$64
	CALL memcpy($7, [8441], $2)
	
.LABEL $label$63
	*(($7 + $2)) = [0]
	$2 = *($3)
	$7 = ($2 & [1])
	$2 = CALL $54(($3 + [16]), ( *($3 + [8]) ? $17 : $7 ), ( *($3 + [4]) ? uint_32($2 >> [1]) : $7 ))
	$5 = *($2)
	*($2) = (int_64)0
	$7 = *($2 + [8])
	*($2 + [8]) = [0]
	*(($3 + [248])) = $16
	*(($3 + [264])) = $7
	*($3 + [232]) = $12
	*($3 + [224]) = *($0)
	*($3 + [240]) = $9
	*($3 + [256]) = $5
	$2 = CALL $18(($3 + [48]), ($3 + [32]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($3 + [224]))
	CALL $19(($3 + [208]), $2)
	$7 = *($3 + [208])
	CALL send_inline($7, (*($3 + [212]) - $7))
	$7 = *($3 + [208])
	if ( ($7 == 0) ){ goto $label$66 }
	*($3 + [212]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$66
	$7 = *($2 + [28])
	if ( ($7 == 0) ){ goto $label$67 }
	*(($2 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$67
	$7 = *($2 + [16])
	if ( ($7 == 0) ){ goto $label$68 }
	*(($2 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$68
	if ( (*($3 + [256]) & [1]) ){ goto $label$70 }
	if ( (*($3) & [1]) ){ goto $label$69 }
	goto $label$22 
	
.LABEL $label$70
	CALL _ZdlPv(*(($3 + [264])))
	if ( ((*($3) & [1]) == 0) ){ goto $label$22 }
	
.LABEL $label$69
	CALL _ZdlPv(*(($3 + [8])))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$18 }
	goto $label$21 
	
.LABEL $label$29
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [16]) = [0]
	$2 = (($3 + [16]) | [1])
	goto $label$26 
	
.LABEL $label$28
	$19 = (($7 + [16]) & [-16])
	$17 = CALL _Znwj($19)
	*($3 + [16]) = ($19 | [1])
	*($3 + [24]) = $17
	*($3 + [20]) = $7
	
.LABEL $label$27
	$19 = ($2 + [1])
	$2 = [0]
	
.LOOP $label$71:
	*(($17 + $2)) = *((($3 + [224]) + $2))
	$2 = ($2 + [1])
	if ( ((int_32)$19 != (int_32)$2) ){ goto $label$71 }
	$2 = ($17 + $7)
	
.LABEL $label$26
	*($2) = [0]
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$2 = CALL $58([8441])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$74 }
	*($3) = ($2 << [1])
	$17 = ($3 | [1])
	$7 = $17
	if ( $2 ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$74
	$17 = (($2 + [16]) & [-16])
	$7 = CALL _Znwj($17)
	*($3) = ($17 | [1])
	*($3 + [8]) = $7
	*($3 + [4]) = $2
	$17 = ($3 | [1])
	
.LABEL $label$73
	CALL memcpy($7, [8441], $2)
	
.LABEL $label$72
	*(($7 + $2)) = [0]
	$2 = *($3)
	$7 = ($2 & [1])
	$2 = CALL $54(($3 + [16]), ( *($3 + [8]) ? $17 : $7 ), ( *($3 + [4]) ? uint_32($2 >> [1]) : $7 ))
	$5 = *($2)
	*($2) = (int_64)0
	$7 = *($2 + [8])
	*($2 + [8]) = [0]
	*(($3 + [248])) = $16
	*(($3 + [264])) = $7
	*($3 + [232]) = $12
	*($3 + [224]) = *($0)
	*($3 + [240]) = $9
	*($3 + [256]) = $5
	$2 = CALL $18(($3 + [48]), ($3 + [32]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($3 + [224]))
	CALL $19(($3 + [208]), $2)
	$7 = *($3 + [208])
	CALL send_inline($7, (*($3 + [212]) - $7))
	$7 = *($3 + [208])
	if ( ($7 == 0) ){ goto $label$75 }
	*($3 + [212]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$75
	$7 = *($2 + [28])
	if ( ($7 == 0) ){ goto $label$76 }
	*(($2 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$76
	$7 = *($2 + [16])
	if ( ($7 == 0) ){ goto $label$77 }
	*(($2 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$77
	if ( (*($3 + [256]) & [1]) ){ goto $label$79 }
	if ( (*($3) & [1]) ){ goto $label$78 }
	goto $label$24 
	
.LABEL $label$79
	CALL _ZdlPv(*(($3 + [264])))
	if ( ((*($3) & [1]) == 0) ){ goto $label$24 }
	
.LABEL $label$78
	CALL _ZdlPv(*(($3 + [8])))
	if ( (*($3 + [16]) & [1]) ){ goto $label$23 }
	goto $label$18 
	
.LABEL $label$25
	CALL $50($3)
	
.LABEL $label$24
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$23
	CALL _ZdlPv(*($3 + [24]))
	goto $label$18 
	
.LABEL $label$22
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$21
	CALL _ZdlPv(*($3 + [24]))
	goto $label$18 
	
.LABEL $label$20
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv(*($3 + [24]))
	
.LABEL $label$18
	*(($19 = (($3 + [48]) + [32]))) = [0]
	*($3 + [64]) = (int_64)-1
	*($3 + [72]) = (int_64)0
	$5 = *($0)
	*($3 + [48]) = $5
	*($3 + [56]) = $5
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$4()), [9185])
	*(($2 = CALL _Znwj([128])) + [112]) = ($3 + [48])
	*($2 + [16]) = $13
	*($2) = $1
	*($2 + [8]) = $12
	*($2 + [24]) = $11
	*(($2 + [56])) = *(($4 + [40]))
	*(($2 + [48])) = *(($4 + [32]))
	*(($2 + [40])) = *(($4 + [24]))
	*($2 + [32]) = *($4 + [16])
	$13 = *(($4 + [56]))
	$1 = *(($4 + [64]))
	$11 = *(($4 + [72]))
	$12 = *($4 + [48])
	*($2 + [96]) = $15
	*(($2 + [88])) = $11
	*(($2 + [80])) = $1
	*(($2 + [72])) = $13
	*($2 + [64]) = $12
	*($2 + [104]) = $9
	*($3 + [40]) = (($3 + [224]) + [112])
	*($3 + [36]) = ($3 + [224])
	*($3 + [32]) = ($3 + [224])
	CALL $20(($3 + [32]), $2)
	$9 = *($2)
	$17 = CALL db_store_i64(*($3 + [56]), (int_64)-5003315193367756800, $5, $9, ($3 + [224]), [112])
	*($2 + [116]) = $17
	if ( (uint_64)($9 <= *($3 + [64])) ){ goto $label$80 }
	*(($3 + [64])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$80
	*($3 + [32]) = $2
	$5 = *($2)
	*($3 + [224]) = $5
	*($3 + [208]) = $17
	$0 = ($3 + [76])
	$7 = *($0)
	if ( ((uint_32)$7 >= (uint_32)*($19)) ){ goto $label$83 }
	*($7 + [8]) = $5
	*($7 + [16]) = $17
	*($3 + [32]) = [0]
	*($7) = $2
	*($0) = ($7 + [24])
	$2 = *($3 + [32])
	$7 = [0]
	*($3 + [32]) = [0]
	if ( $2 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$83
	CALL $21(($3 + [72]), ($3 + [32]), ($3 + [224]), ($3 + [208]))
	$2 = *($3 + [32])
	$7 = [0]
	*($3 + [32]) = [0]
	if ( ($2 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	CALL _ZdlPv($2)
	
.LABEL $label$81
	CALL eosio_assert($8, [9236])
	CALL eosio_assert($8, [9270])
	$2 = CALL db_next_i64(*($6 + [36]), ($3 + [224]))
	if ( ((int_32)$2 < (int_32)$7) ){ goto $label$84 }
	CALL $16(($3 + [168]), $2)
	
.LABEL $label$84
	CALL $22(($3 + [168]), $6)
	CALL eosio_assert($10, [9236])
	CALL eosio_assert($10, [9270])
	$2 = CALL db_next_i64(*(($4 + [84])), ($3 + [224]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$85 }
	CALL $17(($3 + [128]), $2)
	
.LABEL $label$85
	CALL $23(($3 + [128]), $4)
	$17 = *($3 + [72])
	if ( ($17 == 0) ){ goto $label$86 }
	$4 = ($3 + [76])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$17) ){ goto $label$88 }
	
.LOOP $label$89:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$90 }
	CALL _ZdlPv($7)
	
.LABEL $label$90
	if ( ((int_32)$17 != (int_32)$2) ){ goto $label$89 }
	$2 = *(($3 + [72]))
	goto $label$87 
	
.LABEL $label$88
	$2 = $17
	
.LABEL $label$87
	*($4) = $17
	CALL _ZdlPv($2)
	
.LABEL $label$86
	$17 = *($3 + [112])
	if ( ($17 == 0) ){ goto $label$91 }
	$4 = ($3 + [116])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$17) ){ goto $label$93 }
	
.LOOP $label$94:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$95 }
	CALL _ZdlPv($7)
	
.LABEL $label$95
	if ( ((int_32)$17 != (int_32)$2) ){ goto $label$94 }
	$2 = *(($3 + [112]))
	goto $label$92 
	
.LABEL $label$93
	$2 = $17
	
.LABEL $label$92
	*($4) = $17
	CALL _ZdlPv($2)
	
.LABEL $label$91
	$17 = *($3 + [152])
	if ( ($17 == 0) ){ goto $label$96 }
	$4 = ($3 + [156])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$17) ){ goto $label$98 }
	
.LOOP $label$99:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$100 }
	CALL _ZdlPv($7)
	
.LABEL $label$100
	if ( ((int_32)$17 != (int_32)$2) ){ goto $label$99 }
	$2 = *(($3 + [152]))
	goto $label$97 
	
.LABEL $label$98
	$2 = $17
	
.LABEL $label$97
	*($4) = $17
	CALL _ZdlPv($2)
	
.LABEL $label$96
	$17 = *($3 + [192])
	if ( ($17 == 0) ){ goto $label$101 }
	$4 = ($3 + [196])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$17) ){ goto $label$103 }
	
.LOOP $label$104:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$105 }
	CALL _ZdlPv($7)
	
.LABEL $label$105
	if ( ((int_32)$17 != (int_32)$2) ){ goto $label$104 }
	$2 = *(($3 + [192]))
	goto $label$102 
	
.LABEL $label$103
	$2 = $17
	
.LABEL $label$102
	*($4) = $17
	CALL _ZdlPv($2)
	
.LABEL $label$101
	$global$0 = ($3 + [336])
	(unreachable)
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL memory()
	$4 = [0]
	[0]
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$3 }
	*($3 + [128]) = [8192]
	*($3 + [132]) = CALL $58([8192])
	*($3 + [56]) = *($3 + [128])
	CALL $2(($3 + [136]), ($3 + [56]))
	[1]
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	
.LABEL $label$3
	*($3 + [112]) = [8201]
	*($3 + [116]) = CALL $58([8201])
	*($3 + [48]) = *($3 + [112])
	CALL $2(($3 + [120]), ($3 + [48]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$4 }
	*($3 + [96]) = [8192]
	*($3 + [100]) = CALL $58([8192])
	*($3 + [40]) = *($3 + [96])
	$4 = ((int_64)$2 == (int_64)-3617168760277827584)
	CALL $2(($3 + [104]), ($3 + [40]))
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ((int_64)$2 > (int_64)-3617168760277827585) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-5003315193367756800) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-4992623624440512512) ){ goto $label$1 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [1]
	*($3 + [16]) = *($3 + [80])
	CALL $4($0, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)8421045207927095296) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [2]
	*($3 + [8]) = *($3 + [88])
	CALL $6($0, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [76]) = [0]
	*($3 + [72]) = [3]
	*($3 + [24]) = *($3 + [72])
	CALL $8($0, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [68]) = [0]
	*($3 + [64]) = [4]
	*($3 + [32]) = *($3 + [64])
	CALL $10($0, $1, ($3 + [32]))
	
.LABEL $label$1
	CALL $57([0])
	$global$0 = ($3 + [144])
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $55($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $55($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8971])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $61($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	*($5 + [8]) = (int_64)0
	CALL $38(($3 + [32]), $5)
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $14(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $64($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8971])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $61($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([96])) + [80]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8911])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((uint_32)($4 + [-8]) > (uint_32)[31]), [8911])
	CALL memcpy(($5 + [16]), ($2 + [8]), [32])
	CALL eosio_assert(((uint_32)($4 + [-40]) > (uint_32)[31]), [8911])
	CALL memcpy(($5 + [48]), ($2 + [40]), [32])
	*($5 + [84]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $15(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $64($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $61($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $64($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8911])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8911])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8911])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8911])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $34(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $51(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $51(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8971])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $61($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	CALL $37(($3 + [32]), $5)
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $28(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $64($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [8911])
	CALL memcpy(($2 + [32]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [8911])
	CALL memcpy(($0 + [64]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8911])
	CALL memcpy(($0 + [96]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [8911])
	CALL memcpy(($0 + [104]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8911])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8911])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8911])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8911])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $35($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $53($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $53($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $50($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8916])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $29($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8911])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8905])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8905])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8905])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8905])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8905])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8905])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8905])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8905])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8905])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $39(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8971])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $61($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8911])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8911])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	*($3 + [24]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $41(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $64($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $58 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $56())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $60($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $61 (int_32 $0)
{
	return CALL $62([9468], $0)
}

int_32 .FUNC $63 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9460]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9464])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9460]) = [1]
	$2 = ($2 << [16])
	*([0] + [9464]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9464])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9464]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9460]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9460]) = [1]
	$3 = ($3 << [16])
	*([0] + [9464]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9464])
	
.LABEL $label$10
	*([0] + [9464]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $64 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17852])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17660]
	$3 = (((int_32)$1 * (int_32)[12]) + [17660])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $50 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8911])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8911])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8911])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8911])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $54 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $52($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $55 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $56 ()
{
	return [9452]
}

void .FUNC $57 (int_32 $0)
{
}