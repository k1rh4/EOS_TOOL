(data (i32.const 8192) "\01\02\0b\0c\n")
(data (i32.const 8197) "each type must have at least 1 ratio\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8243) "each type must have at least 1 ratio!\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8372) "E404|Invalid element\00")
(data (i32.const 8393) "each type must have at least 1 element\00")
(data (i32.const 8432) "E404|Invalid pet type\00")
(data (i32.const 8454) "| reviving pet for technical reasons... \00")
(data (i32.const 8495) "memo has more than 256 bytes\00")
(data (i32.const 8524) "E404|Invalid pet\00")
(data (i32.const 8541) "_next_id overflow detected\00")
(data (i32.const 8568) "_next_element_id overflow detected\00")
(data (i32.const 8603) "_next_pet_type_id overflow detected\00")
(data (i32.const 8639) "invalid battle mode\00")
(data (i32.const 8659) "pets selection is not valid\00")
(data (i32.const 8687) "player is already in another battle\00")
(data (i32.const 8723) "all arenas are busy\00")
(data (i32.const 8743) "dead pets don\'t battle\00")
(data (i32.const 8766) "sleeping pets don\'t battle\00")
(data (i32.const 8793) "pet has no energy for a battle\00")
(data (i32.const 8824) "pet is already in another battle\00")
(data (i32.const 8857) "battle not found for current host\00")
(data (i32.const 8891) "battle already started\00")
(data (i32.const 8914) "player not in this battle\00")
(data (i32.const 8940) "you cannot control this monster\00")
(data (i32.const 8972) "this monster is dead\00")
(data (i32.const 8993) "invalid attack\00")
(data (i32.const 9008) "invalid pet type\00: no conversion\00")
(data (i32.const 9041) "invalid attack element\00: out of range\00")
(data (i32.const 9079) "invalid element\00")
(data (i32.const 9095) "invalid pet enemy type\00")
(data (i32.const 9118) "\nattack results ====\nattack damage: \00")
(data (i32.const 9155) "\nelement ratio: \00")
(data (i32.const 9172) "\nattack factor: \00")
(data (i32.const 9189) "\npet: \00")
(data (i32.const 9196) " - hp: \00")
(data (i32.const 9204) " and the winner is >>> \00")
(data (i32.const 9228) "Invalid pet battle stat\00")
(data (i32.const 9252) "Invalid pet\00")
(data (i32.const 9264) "new owner must be different than current owner\00")
(data (i32.const 9311) "MonsterEOS only accepts EOS for transfers\00")
(data (i32.const 9353) "Invalid token transfer\00")
(data (i32.const 9376) "amount cannot be negative\00")
(data (i32.const 9402) "End of temporary transfer must be in the future\00")
(data (i32.const 9450) "order can\'t be updated during temporary transfers\00")
(data (i32.const 9500) "new owner can become \00")
(data (i32.const 9522) "Invalid order\00")
(data (i32.const 9536) "order can only be removed by owner of order\00")
(data (i32.const 9580) "orders can\'t be removed during temporary transfers\00")
(data (i32.const 9631) "E404|Invalid claimer\00")
(data (i32.const 9652) "Pet already transferred\00")
(data (i32.const 9676) "E404|Temporary transfer not yet over\00")
(data (i32.const 9713) "orders requires value transfer\00")
(data (i32.const 9744) "order converter to temporary transfer\00")
(data (i32.const 9782) "order erased.\00")
(data (i32.const 9796) "bidder must be different than current owner\00")
(data (i32.const 9840) "E404|Invalid order\00")
(data (i32.const 9859) "E404|bids can only be removed by owner of bid\00")
(data (i32.const 9905) "\ntransfer received for order \00")
(data (i32.const 9935) "only ask orders are allowed to receive transfers\00")
(data (i32.const 9984) "order is already RENTING\00")
(data (i32.const 10009) "You cant buy your own order DUH\00")
(data (i32.const 10041) "monster does not to belong to order\'s user\00")
(data (i32.const 10084) "token does not match order\'s token\00")
(data (i32.const 10119) "amount is not sufficient to pay for offer\'s amount and market fees\00")
(data (i32.const 10186) "MonsterEOS order \00")
(data (i32.const 10204) "eosio.token\00")
(data (i32.const 10216) "transfer\00")
(data (i32.const 10225) "name must have at least 1 character!\00")
(data (i32.const 10262) "name cannot exceed 20 chars\00")
(data (i32.const 10290) "name cannot be composed of spaces only\00")
(data (i32.const 10329) "\nlast created pet at: \00")
(data (i32.const 10352) "You can\'t create another pet now\00")
(data (i32.const 10385) "E404|Invalid pet, destroying action is unrecoverable\00")
(data (i32.const 10438) "missing required authority of contract or owner\00")
(data (i32.const 10486) "dead don\'t eat\00")
(data (i32.const 10501) "zzzzzz\00")
(data (i32.const 10508) "not hungry\00")
(data (i32.const 10519) "dead don\'t sleep\00")
(data (i32.const 10536) "already sleeping\00")
(data (i32.const 10553) "not now!\00")
(data (i32.const 10562) "dead don\'t awake\00")
(data (i32.const 10579) "already awake\00")
(data (i32.const 10593) "you have signed up already\00")
(data (i32.const 10620) "\n>>> sender >>>\00")
(data (i32.const 10636) " - name: \00")
(data (i32.const 10646) "\n>>> receiver >>>\00")
(data (i32.const 10664) "\n>>> transfer data quantity >>> \00")
(data (i32.const 10697) "MonsterEOS only accepts EOS for deposits\00")
(data (i32.const 10738) "Quantity must be positive\00")
(data (i32.const 10764) "mtt\00")
(data (i32.const 10768) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 10832) "its not your turn\00")
(data (i32.const 10850) "write\00")
(data (i32.const 10856) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 10905) "invalid symbol name\00")
(data (i32.const 10925) "cannot create objects in table of another contract\00")
(data (i32.const 10976) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 11027) "error reading iterator\00")
(data (i32.const 11050) "read\00")
(data (i32.const 11055) "get\00")
(data (i32.const 11059) "cannot pass end iterator to modify\00")
(data (i32.const 11094) "object passed to modify is not in multi_index\00")
(data (i32.const 11140) "cannot modify objects in table of another contract\00")
(data (i32.const 11191) "updater cannot change primary key when modifying an object\00")
(data (i32.const 11250) "singleton does not exist\00")
(data (i32.const 11275) "cannot pass end iterator to erase\00")
(data (i32.const 11309) "cannot increment end iterator\00")
(data (i32.const 11339) "object passed to erase is not in multi_index\00")
(data (i32.const 11384) "cannot erase objects in table of another contract\00")
(data (i32.const 11434) "attempt to remove object that was not in multi_index\00")
(data (i32.const 11487) "next primary key in table is at autoincrement limit\00")
(data (i32.const 11539) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 11593) "cannot decrement iterator at beginning of table\00")
(data (i32.const 11641) ".\00")
(data (i32.const 11643) " \00")
(data (i32.const 11645) ",\00")
(data (i32.const 11647) "attempt to add asset with different symbol\00")
(data (i32.const 11690) "addition underflow\00")
(data (i32.const 11709) "addition overflow\00")
(data (i32.const 20144) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "sha256" (func $fimport$0 (param i32 i32 i32)))
(import "env" "require_auth" (func $fimport$1 (param i64)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$5 (result i64)))
(import "env" "printui" (func $fimport$6 (param i64)))
(import "env" "prints" (func $fimport$7 (param i32)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$10 (result i64)))
(import "env" "db_update_i64" (func $fimport$11 (param i32 i64 i32 i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "printi" (func $fimport$13 (param i64)))
(import "env" "printn" (func $fimport$14 (param i64)))
(import "env" "db_idx128_find_primary" (func $fimport$15 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx128_update" (func $fimport$16 (param i32 i64 i32)))
(import "env" "require_recipient" (func $fimport$17 (param i64)))
(import "env" "db_remove_i64" (func $fimport$18 (param i32)))
(import "env" "db_idx128_remove" (func $fimport$19 (param i32)))
(import "env" "send_inline" (func $fimport$20 (param i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$21 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$22 (param i32)))
(import "env" "has_auth" (func $fimport$23 (param i64) (result i32)))
(import "env" "action_data_size" (func $fimport$24 (result i32)))
(import "env" "read_action_data" (func $fimport$25 (param i32 i32) (result i32)))
(import "env" "abort" (func $fimport$26))
(import "env" "memmove" (func $fimport$27 (param i32 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$28 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$29 (param i32 i64 i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$30 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$31 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx128_lowerbound" (func $fimport$32 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx128_store" (func $fimport$33 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$34 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$35 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_next" (func $fimport$36 (param i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$37 (param i32 i32)))
(import "env" "memset" (func $fimport$38 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$41 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$42 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$43 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$44 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$45 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$46 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$47 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$48 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$49 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$50 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$51 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$52 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$53 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$54 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$55 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$56 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$57 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $106))
(export "_Znwj" (func $169))
(export "_ZdlPv" (func $171))
(export "_Znaj" (func $170))
(export "_ZdaPv" (func $172))
(table $0 32 32 anyfunc)
(elem (i32.const 1) $75 $12 $6 $99 $8 $62 $84 $70 $10 $97 $21 $102 $7 $63 $93 $95 $91 $15 $77 $9 $54 $72 $29 $11 $18 $1 $24 $5 $47 $89 $64)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 20401))
(global $global$2 i32 (i32.const 20401))


int_32 .FUNC $174 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL $2(($3 + [8]), $0)
	*($3 + [36]) = $1
	CALL $3(($0 + [288]), ($3 + [8]), *($0))
	$global$0 = ($3 + [80])
}

int_32 .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $177($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $177 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $201($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL $2(($2 + [8]), $0)
	*($2 + [56]) = $1
	CALL $3(($0 + [288]), ($2 + [8]), *($0))
	$global$0 = ($2 + [80])
}

void .FUNC $178 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [112])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [11027])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $198($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [8]) = (int_64)1
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)100
	*($5 + [24]) = [100]
	*($5 + [28 align=4]) = (int_64)46385646926400
	*($5 + [36]) = [356]
	*($5 + [40]) = (int_64)61847529091200
	*($5 + [48]) = (int_64)257698041360
	*($5 + [56]) = (int_64)662548
	*($5 + [64]) = [0]
	*($5 + [72]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [28])
	*($3 + [60]) = ($5 + [32])
	*($3 + [64]) = ($5 + [36])
	*($3 + [68]) = ($5 + [37])
	*($3 + [72]) = ($5 + [40])
	*($3 + [76]) = ($5 + [44])
	*($3 + [80]) = ($5 + [48])
	*($3 + [84]) = ($5 + [52])
	*($3 + [88]) = ($5 + [56])
	*($3 + [92]) = ($5 + [57])
	*($3 + [96]) = ($5 + [58])
	*($3 + [100]) = ($5 + [60])
	*($3 + [104]) = ($5 + [62])
	*($3 + [108]) = ($5 + [64])
	CALL $146(($3 + [40]), ($3 + [32]))
	*($5 + [76]) = $1
	*($3 + [32]) = $5
	*($3 + [40]) = (int_64)-6146698476238372864
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-6146698476238372864
	*($7 + [16]) = $1
	*($3 + [32]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $147(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $201($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [112])
	return $5
}

void .FUNC $5 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL $2(($3 + [8]), $0)
	*($3 + [16]) = $1
	CALL $3(($0 + [288]), ($3 + [8]), *($0))
	$global$0 = ($3 + [80])
}

int_32 .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $143($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $178($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $178($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $173($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $3 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$0), [10976])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6146698476238372864, (int_64)-6146698476238372864)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $4($0, $4)
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$0), [10976])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [11059])
	CALL $27($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $28($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $189 (int_32 $0)
{
}

int_32 .FUNC $188 ()
{
	return [11732]
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [11339])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [11384])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [11434])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [11027])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $198($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($2 = CALL _Znwj([56]))) = (int_64)0
	*($2 + [12 align=4]) = (int_64)0
	*($2 + [20 align=4]) = (int_64)0
	*($2 + [28 align=4]) = (int_64)0
	*($2 + [36 align=4]) = (int_64)0
	*($2 + [44]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($2 + [8])
	*($3 + [40]) = $2
	*($3 + [48]) = ($2 + [12])
	*($3 + [52]) = ($2 + [16])
	*($3 + [56]) = ($2 + [20])
	*($3 + [60]) = ($2 + [32])
	CALL $157(($3 + [40]), ($3 + [32]))
	*($2 + [52]) = [-1]
	*($2 + [48]) = $1
	*($3 + [32]) = $2
	$6 = *($2)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $2
	*($7) = ($8 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $36(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $201($4)
	
.LABEL $label$6
	$8 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($8 == 0) ){ goto $label$9 }
	$5 = *($8 + [32])
	if ( ($5 == 0) ){ goto $label$10 }
	*(($8 + [36])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$0 = *($8 + [20])
	if ( ($0 == 0) ){ goto $label$11 }
	$7 = ($8 + [24])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($5 + [-64])
	$4 = *(($5 + [-16]))
	if ( ($4 == 0) ){ goto $label$15 }
	*(($5 + [-12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$5 = $1
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$14 }
	$5 = *(($8 + [20]))
	goto $label$12 
	
.LABEL $label$13
	$5 = $0
	
.LABEL $label$12
	*($7) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$11
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $2
}

void .FUNC memory ()
{
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$2 = *($0)
	$3 = int_32((*($0 + [4]) - $2) >> [6])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[67108864]) ){ goto $label$3 }
	$5 = [67108863]
	$2 = (*($0 + [8]) - $2)
	if ( ((uint_32)int_32($2 >> [6]) > (uint_32)[33554430]) ){ goto $label$5 }
	$5 = int_32($2 >> [5])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[67108864]) ){ goto $label$2 }
	
.LABEL $label$5
	$6 = CALL _Znwj(($5 << [6]))
	goto $label$1 
	
.LABEL $label$4
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $186($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($7 = ($6 + ($3 << [6])))) = *($1)
	*($7 + [48 align=4]) = (int_64)0
	*(($7 + [40])) = *(($1 + [40]))
	*(($7 + [32])) = *(($1 + [32]))
	*(($7 + [24])) = *(($1 + [24]))
	*(($7 + [16])) = *(($1 + [16]))
	*(($7 + [8])) = *(($1 + [8]))
	*(($8 = ($7 + [56]))) = [0]
	$2 = (*(($1 + [52])) - *($1 + [48]))
	if ( ($2 == 0) ){ goto $label$7 }
	$9 = ($7 + [48])
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$6 }
	$4 = CALL _Znwj($2)
	*($9) = $4
	*(($9 = ($7 + [52]))) = $4
	*($8) = ($4 + $2)
	$2 = *(($1 + [48]))
	$1 = (*(($1 + [52])) - $2)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($4, $2, $1)
	*($9) = (*($9) + $1)
	
.LABEL $label$7
	$10 = ($6 + ($5 << [6]))
	$11 = ($7 + [64])
	$1 = *($0)
	$12 = ($0 + [4])
	$8 = *($12)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	$13 = (($3 + [-1]) - uint_32((($8 + [-64]) - $1) >> [6]))
	$9 = ($1 - $8)
	$2 = [0]
	
.LOOP $label$10:
	$5 = ($8 + $2)
	*((($1 = ($7 + $2)) + [-24])) = *(($5 + [-24]))
	*(($1 + [-32])) = *(($5 + [-32]))
	*(($1 + [-40])) = *(($5 + [-40]))
	*(($1 + [-48])) = *(($5 + [-48]))
	*(($1 + [-56])) = *(($5 + [-56]))
	*(($1 + [-64])) = *(($5 + [-64]))
	*(($3 = ($1 + [-16]))) = (int_64)0
	*(($1 = ($1 + [-8]))) = [0]
	$4 = ($5 + [-16])
	*($3) = *($4)
	$5 = ($5 + [-8])
	*($1) = *($5)
	*($5) = [0]
	*($4) = (int_64)0
	$2 = ($2 + [-64])
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$10 }
	$7 = ($6 + ($13 << [6]))
	$1 = *(($0 + [4]))
	$3 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$3 = $1
	
.LABEL $label$8
	*($0) = $7
	*($12) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = ($1 + [-64])
	$2 = *(($1 + [-16]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($1 + [-12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$13
	$1 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($3 == 0) ){ goto $label$14 }
	CALL _ZdlPv($3)
	
.LABEL $label$14
	return (unreachable)
	
.LABEL $label$6
	CALL $186($9)
	(unreachable)
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $186($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [11027])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $198($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = [1]
	*($5) = (int_64)1
	*($5 + [12]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [11050])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [11050])
	CALL memcpy(($5 + [8]), ($2 + [8]), [4])
	*($5 + [16]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $42(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $201($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $40 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = *($3 + [32])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($3 + [36])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$5 = *($3 + [20])
	if ( ($5 == 0) ){ goto $label$7 }
	$6 = ($3 + [24])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$10:
	$7 = ($4 + [-64])
	$8 = *(($4 + [-16]))
	if ( ($8 == 0) ){ goto $label$11 }
	*(($4 + [-12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$11
	$4 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$10 }
	$4 = *(($3 + [20]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $5
	
.LABEL $label$8
	*($6) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$7
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$4 }
	$4 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$1
	return $0
}

void .FUNC $47 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$3 = ($global$0 - [176])
	$global$0 = $3
	*($3 + [168]) = $2
	CALL require_auth($2)
	$4 = [0]
	*(($3 + [160])) = [0]
	*($3 + [144]) = (int_64)-1
	*($3 + [152]) = (int_64)0
	*($3 + [164]) = [0]
	$2 = *($0)
	*($3 + [128]) = $2
	*($3 + [136]) = $2
	$5 = [0]
	$6 = CALL db_find_i64($2, $2, (int_64)4157834741199929344, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $48(($3 + [128]), $6)
	CALL eosio_assert(((int_32)*($5 + [44]) == (int_32)($3 + [128])), [10976])
	
.LABEL $label$1
	$7 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($7, [8857])
	$8 = CALL $37(($3 + [80]), $5)
	CALL eosio_assert((*($8 + [12]) == 0), [8891])
	$9 = *(($8 + [24]))
	$6 = *($8 + [20])
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$2 }
	$2 = *($3 + [168])
	
.LOOP $label$4:
	if ( ((int_64)*($6) == (int_64)$2) ){ goto $label$3 }
	$6 = ($6 + [64])
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$4 = [1]
	
.LABEL $label$2
	CALL eosio_assert($4, [8914])
	$11 = *(($8 + [36]))
	$10 = *($8 + [32])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$5 }
	$12 = ($0 + [168])
	$13 = ($0 + [196])
	$14 = ($0 + [192])
	$15 = ($0 + [176])
	
.LOOP $label$6:
	$2 = *($10)
	$9 = *($13)
	$16 = *($14)
	if ( ((int_32)$16 == (int_32)$9) ){ goto $label$9 }
	
.LOOP $label$11:
	$6 = ($9 + [-24])
	$4 = *($6)
	if ( ((int_64)*($4) == (int_64)$2) ){ goto $label$10 }
	$9 = $6
	if ( ((int_32)$16 != (int_32)$6) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$16 == (int_32)$9) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$12), [10976])
	goto $label$8 
	
.LABEL $label$9
	$6 = CALL db_find_i64(*($12), *($15), (int_64)-6146593681529088640, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $44($12, $6)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$12), [10976])
	
.LABEL $label$8
	CALL eosio_assert([1], [11275])
	CALL eosio_assert([1], [11309])
	$6 = CALL db_next_i64(*($4 + [12]), ($3 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	CALL $44($12, $6)
	
.LABEL $label$12
	CALL $49($12, $4)
	
.LABEL $label$7
	$10 = ($10 + [32])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$6 }
	
.LABEL $label$5
	$12 = ($0 + [208])
	$2 = *($3 + [168])
	$9 = *(($0 + [236]))
	$16 = *(($0 + [232]))
	if ( ((int_32)$16 == (int_32)$9) ){ goto $label$15 }
	
.LOOP $label$17:
	$6 = ($9 + [-24])
	$4 = *($6)
	if ( ((int_64)*($4) == (int_64)$2) ){ goto $label$16 }
	$9 = $6
	if ( ((int_32)$16 != (int_32)$6) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((int_32)$16 == (int_32)$9) ){ goto $label$15 }
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$12), [10976])
	goto $label$14 
	
.LABEL $label$15
	$6 = CALL db_find_i64(*($12), *(($0 + [216])), (int_64)-6021055841916136064, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$13 }
	$4 = CALL $30($12, $6)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$12), [10976])
	
.LABEL $label$14
	CALL eosio_assert([1], [11275])
	CALL eosio_assert([1], [11309])
	$6 = CALL db_next_i64(*($4 + [12]), ($3 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$18 }
	CALL $30($12, $6)
	
.LABEL $label$18
	CALL $50($12, $4)
	
.LABEL $label$13
	if ( ((int_64)*($3 + [168]) != (int_64)$1) ){ goto $label$21 }
	CALL eosio_assert($7, [11275])
	CALL eosio_assert($7, [11309])
	$6 = CALL db_next_i64(*($5 + [48]), ($3 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$22 }
	CALL $48(($3 + [128]), $6)
	
.LABEL $label$22
	CALL $51(($3 + [128]), $5)
	CALL $2(($3 + [8]), $0)
	*($3 + [68]) = (*($3 + [68]) + [-1])
	CALL $3(($0 + [288]), ($3 + [8]), *($0))
	$6 = *(($8 + [32]))
	if ( $6 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL $52($8, ($3 + [168]))
	*($3 + [8]) = $8
	CALL eosio_assert($7, [11059])
	CALL $53(($3 + [128]), $5, ($3 + [8]))
	$6 = *(($8 + [32]))
	if ( ($6 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	*(($8 + [36])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$19
	$16 = *($8 + [20])
	if ( ($16 == 0) ){ goto $label$23 }
	$12 = ($8 + [24])
	$6 = *($12)
	if ( ((int_32)$6 == (int_32)$16) ){ goto $label$25 }
	
.LOOP $label$26:
	$9 = ($6 + [-64])
	$4 = *(($6 + [-16]))
	if ( ($4 == 0) ){ goto $label$27 }
	*(($6 + [-12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$27
	$6 = $9
	if ( ((int_32)$16 != (int_32)$9) ){ goto $label$26 }
	$6 = *(($8 + [20]))
	goto $label$24 
	
.LABEL $label$25
	$6 = $16
	
.LABEL $label$24
	*($12) = $16
	CALL _ZdlPv($6)
	
.LABEL $label$23
	CALL $40(($3 + [152]))
	$global$0 = ($3 + [176])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [5])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[134217728]) ){ goto $label$3 }
	$6 = [134217727]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$6 = int_32($7 >> [4])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [5]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $186($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [5])))) = *($1)
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [5]))
	$4 = ($4 + [32])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $186($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [11027])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $198($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [11050])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $45(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $201($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $167 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $186($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $166 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([11645])
	
.LABEL $label$1
	$3 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)8)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)16)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)24)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)56)
	*($2 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	
.LABEL $label$2
	$global$0 = ($2 + [16])
}

void .FUNC $165 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11050])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11050])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11050])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [11050])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $127(*($1), *($0 + [12]))
}

int_32 .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [11050])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11050])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [11050])
	CALL memcpy(($1 + [16]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11050])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11050])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11050])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11050])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [11050])
	CALL memcpy(($1 + [56]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [11050])
	CALL memcpy(($1 + [60]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [11050])
	CALL memcpy(($1 + [64]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $163 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [72]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [11593])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6497942333781180416)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [11539])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [11539])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $79(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11050])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [11050])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11050])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [11050])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $161 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [5])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$4 }
	$3 = [134217727]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$3 = int_32($2 >> [4])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL _Znwj(($3 << [5]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	$3 = (*($0) + [32])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $186($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($3 << [5]))
	$5 = ($2 + ($5 << [5]))
	$3 = $5
	
.LOOP $label$9:
	*($3) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	$3 = ($3 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$6 = ($2 + ($6 << [5]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 - $1)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$10
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [6]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [6])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[67108864]) ){ goto $label$4 }
	$3 = [67108863]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [6]) > (uint_32)[33554430]) ){ goto $label$7 }
	$3 = int_32($2 >> [5])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[67108864]) ){ goto $label$3 }
	
.LABEL $label$7
	$7 = CALL _Znwj(($3 << [6]))
	goto $label$2 
	
.LABEL $label$6
	$2 = ($0 + [4])
	
.LOOP $label$8:
	*(($6 = ($3 + [56]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [48])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*($6) = [0]
	$3 = (*($2) + [64])
	*($2) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $186($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$8 = ($7 + ($3 << [6]))
	$4 = ($7 + ($5 << [6]))
	$3 = $4
	
.LOOP $label$9:
	*(($2 = ($3 + [56]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [48])) = (int_64)0
	*($2) = [0]
	$3 = ($3 + [64])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$9 = ($7 + ($6 << [6]))
	$3 = *($0)
	$10 = ($0 + [4])
	$11 = *($10)
	if ( ((int_32)$11 == (int_32)$3) ){ goto $label$11 }
	$12 = (($5 + [-1]) - uint_32((($11 + [-64]) - $3) >> [6]))
	$13 = ($3 - $11)
	$2 = [0]
	
.LOOP $label$12:
	$1 = ($11 + $2)
	*((($3 = ($4 + $2)) + [-24])) = *(($1 + [-24]))
	*(($3 + [-32])) = *(($1 + [-32]))
	*(($3 + [-40])) = *(($1 + [-40]))
	*(($3 + [-48])) = *(($1 + [-48]))
	*(($3 + [-56])) = *(($1 + [-56]))
	*(($3 + [-64])) = *(($1 + [-64]))
	*(($6 = ($3 + [-16]))) = (int_64)0
	*(($3 = ($3 + [-8]))) = [0]
	$5 = ($1 + [-16])
	*($6) = *($5)
	$1 = ($1 + [-8])
	*($3) = *($1)
	*($1) = [0]
	*($5) = (int_64)0
	$2 = ($2 + [-64])
	if ( ((int_32)$13 != (int_32)$2) ){ goto $label$12 }
	$4 = ($7 + ($12 << [6]))
	$3 = *(($0 + [4]))
	$6 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$6 = $3
	
.LABEL $label$10
	*($0) = $4
	*($10) = $9
	*(($0 + [8])) = $8
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($3 + [-64])
	$2 = *(($3 + [-16]))
	if ( ($2 == 0) ){ goto $label$15 }
	*(($3 + [-12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$15
	$3 = $1
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$1 }
	CALL _ZdlPv($6)
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $198($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11728])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $198($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$2 = (*($1 + [4]) - *($1))
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = int_32($2 >> [3])
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$2 }
	$2 = CALL _Znwj($2)
	*(($4 = ($0 + [4]))) = $2
	*(($0 + [8])) = ($2 + ($3 << [3]))
	*($0) = $2
	$5 = *($1)
	$3 = (*(($1 + [4])) - $5)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($2, $5, $3)
	*($4) = (*($4) + $3)
	
.LABEL $label$3
	*($0 + [12 align=4]) = (int_64)0
	*(($0 + [20])) = [0]
	$2 = (*(($1 + [16])) - *($1 + [12]))
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL _Znwj($2)
	*(($0 + [12])) = $4
	*(($0 + [20])) = ($4 + $2)
	*(($2 = ($0 + [16]))) = $4
	$3 = *(($1 + [12]))
	$1 = (*(($1 + [16])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $3, $1)
	*($2) = (*($2) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $186($0)
	
.LABEL $label$1
	CALL $186(($0 + [12]))
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $175 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [11094])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [11140])
	$5 = ($1 + [12])
	*(($4 = $3) + [24]) = *($5)
	$6 = *($1)
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$1 }
	CALL $151(($1 + [32]), *($7 + [32]), *(($7 + [36])))
	$2 = *($2)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	CALL $150(($1 + [20]), *($2 + [20]), *(($2 + [24])))
	
.LABEL $label$1
	*($1 + [16]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [11191])
	$8 = ($1 + [20])
	$9 = ($1 + [16])
	$7 = *($1 + [20])
	$10 = *(($1 + [24]))
	$11 = (CASTING uint_64)(uint_32 int_32(($10 - $7) >> [6]))
	$2 = [17]
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [40])
	$13 = *($7 + [48])
	$12 = *(($7 + [52]))
	$14 = ($12 - $13)
	$11 = (CASTING uint_64)(uint_32 $14)
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$5 }
	$2 = ( $2 ? ($14 + $2) : ((int_32)$13 == (int_32)$12) )
	$7 = ($7 + [64])
	if ( ((int_32)$7 != (int_32)$10) ){ goto $label$4 }
	
.LABEL $label$3
	$12 = ($1 + [32])
	$13 = *($1 + [32])
	$7 = *(($1 + [36]))
	$14 = ($7 - $13)
	$11 = (CASTING uint_64)(uint_32 int_32($14 >> [5]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$13 == (int_32)$7) ){ goto $label$7 }
	$2 = ((((int_32)uint_32(($14 + [-32]) >> [5]) * (int_32)[18]) + $2) + [18])
	
.LABEL $label$7
	if ( ($2 <= [513]) ){ goto $label$9 }
	$7 = CALL $198($2)
	goto $label$8 
	
.LABEL $label$9
	$7 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$8
	*($4 + [12]) = $7
	*($4 + [8]) = $7
	*($4 + [16]) = ($7 + $2)
	*($4 + [32]) = ($4 + [8])
	*($4 + [48]) = $5
	*($4 + [52]) = $9
	*($4 + [56]) = $8
	*($4 + [60]) = $12
	*($4 + [40]) = $1
	*($4 + [44]) = ($1 + [8])
	CALL $152(($4 + [40]), ($4 + [32]))
	CALL db_update_i64(*($1 + [48]), (int_64)0, $7, $2)
	if ( ($2 <= [513]) ){ goto $label$10 }
	CALL $201($7)
	
.LABEL $label$10
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($4 + [40]) = *($5)
	if ( (CALL $196(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$12 }
	$2 = *($1 + [52])
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$13 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4157834741199929344, ($4 + [32]), $6)
	*(($1 + [52])) = $2
	
.LABEL $label$13
	CALL db_idx64_update($2, (int_64)0, ($4 + [40]))
	
.LABEL $label$12
	$global$0 = ($4 + [64])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [11339])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [11384])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [11434])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [11339])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [11384])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [11434])
	$10 = ($4 + [-24])
	$11 = *($5)
	if ( ((int_32)$4 == (int_32)$11) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = *($4)
	*($4) = [0]
	$5 = *($10)
	*($10) = $6
	if ( ($5 == 0) ){ goto $label$8 }
	$6 = *($5 + [32])
	if ( ($6 == 0) ){ goto $label$9 }
	*(($5 + [36])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$9
	$3 = *($5 + [20])
	if ( ($3 == 0) ){ goto $label$10 }
	$12 = ($5 + [24])
	$6 = *($12)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$9 = ($6 + [-64])
	$8 = *(($6 + [-16]))
	if ( ($8 == 0) ){ goto $label$14 }
	*(($6 + [-12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$14
	$6 = $9
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$13 }
	$6 = *(($5 + [20]))
	goto $label$11 
	
.LABEL $label$12
	$6 = $3
	
.LABEL $label$11
	*($12) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$8
	*($10 + [8]) = *($4 + [8])
	*(($10 + [16])) = *(($4 + [16]))
	$10 = ($10 + [24])
	$4 = ($4 + [24])
	if ( ((int_32)$4 != (int_32)$11) ){ goto $label$7 }
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$5 }
	
.LABEL $label$6
	
.LOOP $label$15:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$16 }
	$6 = *($5 + [32])
	if ( ($6 == 0) ){ goto $label$17 }
	*(($5 + [36])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$17
	$3 = *($5 + [20])
	if ( ($3 == 0) ){ goto $label$18 }
	$11 = ($5 + [24])
	$6 = *($11)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$20 }
	
.LOOP $label$21:
	$9 = ($6 + [-64])
	$8 = *(($6 + [-16]))
	if ( ($8 == 0) ){ goto $label$22 }
	*(($6 + [-12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$22
	$6 = $9
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$21 }
	$6 = *(($5 + [20]))
	goto $label$19 
	
.LABEL $label$20
	$6 = $3
	
.LABEL $label$19
	*($11) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$18
	CALL _ZdlPv($5)
	
.LABEL $label$16
	if ( ((int_32)$4 != (int_32)$10) ){ goto $label$15 }
	
.LABEL $label$5
	*(($0 + [28])) = $10
	CALL db_remove_i64(*($1 + [48]))
	$6 = *($1 + [52])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$24 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4157834741199929344, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$23 }
	
.LABEL $label$24
	CALL db_idx64_remove($6)
	
.LABEL $label$23
	$global$0 = ($2 + [16])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = *(($0 + [24]))
	$2 = *($0 + [20])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	$4 = *($1)
	
.LOOP $label$4:
	if ( ((int_64)*($2) == (int_64)$4) ){ goto $label$3 }
	$2 = ($2 + [64])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	$5 = ($2 + [64])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	if ( ((int_64)*($5) == (int_64)*($1)) ){ goto $label$7 }
	*($2) = *($5)
	*(($2 + [40])) = *(($5 + [40]))
	*(($2 + [32])) = *(($5 + [32]))
	*(($2 + [24])) = *(($5 + [24]))
	*(($2 + [16])) = *(($5 + [16]))
	*(($2 + [8])) = *(($5 + [8]))
	$6 = *($2 + [48])
	if ( ($6 == 0) ){ goto $label$9 }
	*(($2 + [52])) = $6
	CALL _ZdlPv($6)
	*(($7 = ($2 + [56]))) = [0]
	*($2 + [48 align=4]) = (int_64)0
	goto $label$8 
	
.LABEL $label$9
	$7 = ($2 + [56])
	
.LABEL $label$8
	$6 = ($5 + [48])
	*(($2 + [48])) = *($6)
	$8 = ($5 + [56])
	*($7) = *($8)
	*($8) = [0]
	*($6) = (int_64)0
	$2 = ($2 + [64])
	
.LABEL $label$7
	$5 = ($5 + [64])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$6 }
	$3 = *(($0 + [24]))
	
.LABEL $label$5
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	
.LOOP $label$10:
	$5 = ($3 + [-64])
	$6 = *(($3 + [-16]))
	if ( ($6 == 0) ){ goto $label$11 }
	*(($3 + [-12])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$11
	$3 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$10 }
	*(($0 + [24])) = $2
	
.LABEL $label$1
	$5 = *(($0 + [36]))
	$2 = *($0 + [32])
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$13 }
	$4 = *($1)
	
.LOOP $label$14:
	if ( ((int_64)*(($2 + [16])) == (int_64)$4) ){ goto $label$13 }
	$2 = ($2 + [32])
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$12 }
	$3 = ($2 + [32])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$15 }
	
.LOOP $label$16:
	$6 = ($3 + [16])
	if ( ((int_64)*($6) == (int_64)*($1)) ){ goto $label$17 }
	*($2) = *($3)
	*(($2 + [24])) = *(($3 + [24]))
	*(($2 + [16])) = *($6)
	*(($2 + [8])) = *(($3 + [8]))
	$2 = ($2 + [32])
	
.LABEL $label$17
	$3 = ($3 + [32])
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$16 }
	$5 = *(($0 + [36]))
	
.LABEL $label$15
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$12 }
	*(($0 + [36])) = $2
	
.LABEL $label$12
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [11094])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [11140])
	$5 = ($1 + [12])
	*(($4 = $3) + [24]) = *($5)
	$6 = ($1 + [20])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$1 }
	CALL $150($6, *($8 + [20]), *(($8 + [24])))
	$2 = *($2)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	CALL $151(($1 + [32]), *($2 + [32]), *(($2 + [36])))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [11191])
	$8 = *($1 + [20])
	$9 = *(($1 + [24]))
	$10 = (CASTING uint_64)(uint_32 int_32(($9 - $8) >> [6]))
	$2 = [17]
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [40])
	$12 = *($8 + [48])
	$11 = *(($8 + [52]))
	$13 = ($11 - $12)
	$10 = (CASTING uint_64)(uint_32 $13)
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	$2 = ( $2 ? ($13 + $2) : ((int_32)$12 == (int_32)$11) )
	$8 = ($8 + [64])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$4 }
	
.LABEL $label$3
	$11 = ($1 + [32])
	$12 = *($1 + [32])
	$8 = *(($1 + [36]))
	$13 = ($8 - $12)
	$10 = (CASTING uint_64)(uint_32 int_32($13 >> [5]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$7 }
	$2 = ((((int_32)uint_32(($13 + [-32]) >> [5]) * (int_32)[18]) + $2) + [18])
	
.LABEL $label$7
	if ( ($2 <= [513]) ){ goto $label$9 }
	$8 = CALL $198($2)
	goto $label$8 
	
.LABEL $label$9
	$8 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$8
	*($4 + [12]) = $8
	*($4 + [8]) = $8
	*($4 + [16]) = ($8 + $2)
	*($4 + [32]) = ($4 + [8])
	*($4 + [48]) = $5
	*($4 + [56]) = $6
	*($4 + [60]) = $11
	*($4 + [40]) = $1
	*($4 + [44]) = ($1 + [8])
	*($4 + [52]) = ($1 + [16])
	CALL $152(($4 + [40]), ($4 + [32]))
	CALL db_update_i64(*($1 + [48]), (int_64)0, $8, $2)
	if ( ($2 <= [513]) ){ goto $label$10 }
	CALL $201($8)
	
.LABEL $label$10
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($4 + [40]) = *($5)
	if ( (CALL $196(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$12 }
	$2 = *($1 + [52])
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$13 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4157834741199929344, ($4 + [32]), $7)
	*(($1 + [52])) = $2
	
.LABEL $label$13
	CALL db_idx64_update($2, (int_64)0, ($4 + [40]))
	
.LABEL $label$12
	$global$0 = ($4 + [64])
}

void .FUNC $54 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$6 = ($global$0 - [240])
	$global$0 = $6
	*($6 + [200]) = $2
	CALL require_auth($2)
	$7 = [0]
	*(($6 + [192])) = [0]
	*($6 + [176]) = (int_64)-1
	*($6 + [184]) = (int_64)0
	*($6 + [196]) = [0]
	$2 = *($0)
	*($6 + [160]) = $2
	*($6 + [168]) = $2
	$8 = [0]
	$9 = CALL db_find_i64($2, $2, (int_64)4157834741199929344, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $48(($6 + [160]), $9)
	CALL eosio_assert(((int_32)*($8 + [44]) == (int_32)($6 + [160])), [10976])
	
.LABEL $label$1
	$10 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($10, [8857])
	$11 = CALL $37(($6 + [112]), $8)
	CALL $2(($6 + [40]), $0)
	CALL $55($11, ($6 + [200]), ($6 + [92]))
	$12 = *(($11 + [36]))
	$9 = *($11 + [32])
	if ( ((int_32)$9 == (int_32)$12) ){ goto $label$3 }
	$13 = [0]
	$14 = [0]
	$7 = [0]
	
.LOOP $label$4:
	$2 = *($9)
	if ( ((int_64)$2 != (int_64)$3) ){ goto $label$5 }
	CALL eosio_assert(((int_64)*(($9 + [16])) == (int_64)*($6 + [200])), [8940])
	CALL eosio_assert(((int_32)*(($9 + [24])) != (int_32)[0]), [8972])
	$13 = *(($9 + [8]))
	$7 = [1]
	$9 = ($9 + [32])
	if ( ((int_32)$12 != (int_32)$9) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	if ( ((int_64)$2 != (int_64)$4) ){ goto $label$6 }
	$14 = *(($9 + [8]))
	
.LABEL $label$6
	$9 = ($9 + [32])
	if ( ((int_32)$12 != (int_32)$9) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$14 = [0]
	$13 = [0]
	
.LABEL $label$2
	CALL eosio_assert(($7 & [1]), [8993])
	$12 = *(($12 + [12]))
	$15 = ($0 + [8])
	$12 = CALL $56($15, ((int_64)(CASTING uint_64)(uint_32 $13) & (int_64)255), [9008])
	$9 = *($12 + [8])
	if ( ((int_32)$9 == (int_32)$12) ){ goto $label$8 }
	$13 = ($12 + [-1])
	$12 = [0]
	
.LOOP $label$10:
	$7 = ((int_32)*($9) == (int_32)$5)
	$12 = ($12 | $7)
	if ( $7 ){ goto $label$9 }
	$7 = ((int_32)$13 != (int_32)$9)
	$9 = ($9 + [1])
	if ( $7 ){ goto $label$10 }
	
.LABEL $label$9
	$9 = ($12 & [1])
	goto $label$7 
	
.LABEL $label$8
	$9 = [0]
	
.LABEL $label$7
	CALL eosio_assert($9, [9041])
	$7 = CALL $57(($0 + [48]), (CASTING uint_64)(uint_32 $5), [9079])
	$5 = *(($9 + [12]))
	$9 = CALL $56($15, ((int_64)(CASTING uint_64)(uint_32 $14) & (int_64)255), [9095])
	$12 = *($9 + [8])
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$12 }
	$13 = *($7 + [8])
	$9 = [5]
	
.LOOP $label$13:
	$7 = *(($13 + *($12)))
	$9 = ( $7 ? $9 : ((uint_32)$7 > (uint_32)($9 & [255])) )
	$12 = ($12 + [1])
	if ( ((int_32)$5 != (int_32)$12) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$9 = [5]
	
.LABEL $label$11
	$12 = CALL $32($0, ((*($6 + [97]) + [1]) - *($6 + [96])))
	$7 = *($6 + [96])
	CALL prints([9118])
	$12 = ($7 + $12)
	$16 = ((uint_32)((int_32)($12 & [255]) * (int_32)($9 & [255])) / (uint_32)[10])
	$17 = ($16 & [255])
	CALL printi((CASTING uint_64)(uint_32 $17))
	CALL prints([9155])
	CALL printi(((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)255))
	CALL prints([9172])
	CALL printi(((int_64)(CASTING uint_64)(uint_32 $12) & (int_64)255))
	$14 = (($6 + [24]) | [4])
	*($6 + [24]) = $14
	$3 = (int_64)0
	*($6 + [28 align=4]) = (int_64)0
	$18 = *(($11 + [36]))
	$5 = *(($11 + [32]))
	if ( ((int_32)$5 == (int_32)$18) ){ goto $label$15 }
	$19 = ($6 + [32])
	
.LOOP $label$16:
	$13 = *($5 + [24])
	if ( ((int_64)*($5) != (int_64)$4) ){ goto $label$17 }
	$13 = (( $17 ? $13 : ((uint_32)$17 > (uint_32)$13) ) - $16)
	*(($5 + [24])) = $13
	
.LABEL $label$17
	$15 = ($13 & [255])
	$2 = *($5 + [16])
	$9 = *($6 + [28])
	if ( ($9 == 0) ){ goto $label$21 }
	$12 = $14
	$3 = *($9 + [16])
	if ( ((uint_64)$2 >= (uint_64)$3) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	$9 = $14
	$12 = $14
	$20 = [3]
	goto $label$18 
	
.LABEL $label$20
	$20 = [10]
	goto $label$18 
	
.LABEL $label$19
	$20 = [2]
	
.LABEL $label$18
	
.LOOP $label$22:
	goto $label$40 
	
.LABEL $label$44
	$12 = $9
	$9 = $7
	$3 = *($9 + [16])
	if ( ((uint_64)$2 >= (uint_64)$3) ){ goto $label$32 }
	$20 = [10]
	goto $label$22 
	
.LABEL $label$43
	$7 = *($9)
	if ( $7 ){ goto $label$28 }
	goto $label$29 
	
.LABEL $label$42
	if ( ((uint_64)$3 >= (uint_64)$2) ){ goto $label$27 }
	$20 = [9]
	goto $label$22 
	
.LABEL $label$41
	$12 = ($9 + [4])
	$7 = *($9 + [4])
	if ( ($7 == 0) ){ goto $label$30 }
	$20 = [0]
	goto $label$22 
	
.LABEL $label$40
	$9 = $12
	goto $label$31 
	
.LABEL $label$39
	$15 = ((int_32)$15 != (int_32)[0])
	$7 = *($12)
	if ( ($7 == 0) ){ goto $label$26 }
	$20 = [4]
	goto $label$22 
	
.LABEL $label$38
	*(($9 = ($7 + [24]))) = (*($9) + $15)
	goto $label$24 
	
.LABEL $label$37
	$15 = ((int_32)$15 != (int_32)[0])
	$12 = $9
	$7 = *($12)
	if ( $7 ){ goto $label$25 }
	$20 = [6]
	goto $label$22 
	
.LABEL $label$36
	*(($7 = CALL _Znwj([32]))) = (int_64)0
	*($7 + [8]) = $9
	*($12) = $7
	*($7 + [24]) = $15
	*($7 + [16]) = $2
	$9 = *(*($6 + [24]))
	if ( ($9 == 0) ){ goto $label$23 }
	$20 = [7]
	goto $label$22 
	
.LABEL $label$35
	*($6 + [24]) = $9
	$7 = *($12)
	$20 = [8]
	goto $label$22 
	
.LABEL $label$34
	CALL $58(*($6 + [28]), $7)
	*($19) = (*($19) + [1])
	$13 = *(($5 + [24]))
	$20 = [5]
	goto $label$22 
	
.LABEL $label$33
	CALL prints([9189])
	CALL printui(*($5))
	CALL prints([9196])
	CALL printi(((int_64)(CASTING uint_64)(uint_32 $13) & (int_64)255))
	$5 = ($5 + [32])
	if ( ((int_32)$5 != (int_32)$18) ){ goto $label$16 }
	$3 = (int_64)0
	$12 = *($6 + [24])
	if ( ((int_32)$12 == (int_32)$14) ){ goto $label$15 }
	$5 = [0]
	
.LOOP $label$45:
	$7 = $12
	if ( (*($7 + [24]) == 0) ){ goto $label$46 }
	$5 = ($5 + [1])
	$3 = *($7 + [16])
	
.LABEL $label$46
	$9 = *($7 + [4])
	if ( ($9 == 0) ){ goto $label$48 }
	
.LOOP $label$49:
	$12 = $9
	$9 = *($12)
	if ( $9 ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$48
	$12 = *($7 + [8])
	if ( ((int_32)*($12) == (int_32)$7) ){ goto $label$47 }
	$7 = ($7 + [8])
	
.LOOP $label$50:
	$9 = *($7)
	$7 = ($9 + [8])
	$12 = *($9 + [8])
	if ( ((int_32)$9 != (int_32)*($12)) ){ goto $label$50 }
	
.LABEL $label$47
	if ( ((int_32)$12 != (int_32)$14) ){ goto $label$45 }
	if ( ((uint_32)($5 & [255]) <= (uint_32)[1]) ){ goto $label$15 }
	*($6 + [208]) = $11
	CALL eosio_assert($10, [11059])
	CALL $59(($6 + [160]), $8, ($6 + [208]))
	goto $label$14 
	
.LABEL $label$32
	$20 = [2]
	goto $label$22 
	
.LABEL $label$31
	$20 = [1]
	goto $label$22 
	
.LABEL $label$30
	$20 = [3]
	goto $label$22 
	
.LABEL $label$29
	$20 = [11]
	goto $label$22 
	
.LABEL $label$28
	$20 = [1]
	goto $label$22 
	
.LABEL $label$27
	$20 = [3]
	goto $label$22 
	
.LABEL $label$26
	$20 = [6]
	goto $label$22 
	
.LABEL $label$25
	$20 = [4]
	goto $label$22 
	
.LABEL $label$24
	$20 = [5]
	goto $label$22 
	
.LABEL $label$23
	$20 = [8]
	goto $label$22 
	
.LABEL $label$15
	CALL prints([9204])
	CALL printn($3)
	$4 = *($0)
	$2 = (int_64)6
	
.LOOP $label$51:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$51 }
	*(($9 = CALL _Znwj([16])) + [8]) = (int_64)3617214756542218240
	*($9) = $4
	*($6 + [216]) = $3
	*(($6 + [16])) = *($6 + [216])
	*($6 + [208]) = $1
	*($6 + [224]) = $9
	$9 = ($9 + [16])
	*($6 + [232]) = $9
	*($6 + [228]) = $9
	*($6 + [8]) = *($6 + [208])
	CALL $60($4, (int_64)4157834734465691856, ($6 + [224]), ($6 + [8]))
	$9 = *($6 + [224])
	if ( ($9 == 0) ){ goto $label$14 }
	*($6 + [228]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	CALL $61(($6 + [24]), *($6 + [28]))
	$9 = *(($11 + [32]))
	if ( ($9 == 0) ){ goto $label$52 }
	*(($11 + [36])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$52
	$5 = *($11 + [20])
	if ( ($5 == 0) ){ goto $label$53 }
	$13 = ($11 + [24])
	$9 = *($13)
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$55 }
	
.LOOP $label$56:
	$12 = ($9 + [-64])
	$7 = *(($9 + [-16]))
	if ( ($7 == 0) ){ goto $label$57 }
	*(($9 + [-12])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$57
	$9 = $12
	if ( ((int_32)$5 != (int_32)$12) ){ goto $label$56 }
	$9 = *(($11 + [20]))
	goto $label$54 
	
.LABEL $label$55
	$9 = $5
	
.LABEL $label$54
	*($13) = $5
	CALL _ZdlPv($9)
	
.LABEL $label$53
	CALL $40(($6 + [184]))
	$global$0 = ($6 + [240])
	$20
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_32 $20
	int_32 $21
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = *($0 + [20])
	CALL eosio_assert((((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$10() / (uint_64)(int_64)1000000)) - *($0 + [16])) > (uint_32)*($2)) | ((int_64)*($4) == (int_64)*($1))), [10832])
	if ( ((int_64)*($1) != (int_64)*($4)) ){ goto $label$1 }
	$7 = *(($0 + [24]))
	$5 = *(($0 + [20]))
	$6 = ($5 + [64])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$1 }
	$8 = ($7 + [-64])
	$4 = $6
	$0 = $5
	
.LOOP $label$3:
	$10 = ($0 + [40])
	*(($9 = ($3 + [40]))) = *($10)
	$12 = ($0 + [32])
	*(($11 = ($3 + [32]))) = *($12)
	$14 = ($0 + [24])
	*(($13 = ($3 + [24]))) = *($14)
	$16 = ($0 + [16])
	*(($15 = ($3 + [16]))) = *($16)
	*($3) = *($0)
	$17 = ($0 + [8])
	*($3 + [8]) = *($17)
	$1 = ($0 + [56])
	$18 = *($1)
	*($1) = [0]
	$2 = ($0 + [48])
	$19 = *($2)
	*($2) = (int_64)0
	$20 = ($0 + [64])
	*($0) = *($20)
	$21 = ($0 + [80])
	*($16) = *($21)
	$16 = ($0 + [72])
	*($17) = *($16)
	$17 = ($0 + [96])
	*($12) = *($17)
	$12 = ($0 + [88])
	*($14) = *($12)
	$14 = ($0 + [104])
	*($10) = *($14)
	$10 = ($0 + [112])
	*($2) = *($10)
	*(($0 + [52])) = *(($0 + [116]))
	$2 = ($0 + [120])
	*($1) = *($2)
	*($14) = *($9)
	*($17) = *($11)
	*($12) = *($13)
	*($21) = *($15)
	*($16) = *($3 + [8])
	*($20) = *($3)
	*($10) = $19
	*($2) = $18
	$1 = ($0 + [128])
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$2 }
	$0 = ($1 + [-64])
	$4 = ( $1 ? $4 : ((int_32)$0 == (int_32)$4) )
	goto $label$3 
	
.LABEL $label$2
	$1 = (($5 + (($8 - $6) & [-64])) + [64])
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$1 }
	$0 = $4
	
.LOOP $label$4:
	$11 = ($1 + [40])
	*(($10 = ($3 + [40]))) = *($11)
	$13 = ($1 + [32])
	*(($12 = ($3 + [32]))) = *($13)
	$15 = ($1 + [24])
	*(($14 = ($3 + [24]))) = *($15)
	$17 = ($1 + [16])
	*(($16 = ($3 + [16]))) = *($17)
	*($3) = *($1)
	$18 = ($1 + [8])
	*($3 + [8]) = *($18)
	$2 = ($1 + [56])
	$20 = *($2)
	*($2) = [0]
	$9 = ($1 + [48])
	$19 = *($9)
	*($9) = (int_64)0
	$21 = ($0 + [40])
	*($11) = *($21)
	$11 = ($0 + [32])
	*($13) = *($11)
	$13 = ($0 + [24])
	*($15) = *($13)
	$15 = ($0 + [16])
	*($17) = *($15)
	$17 = ($0 + [8])
	*($18) = *($17)
	*($1) = *($0)
	*(($1 + [52])) = *(($0 + [52]))
	*($9) = *($0 + [48])
	$9 = ($0 + [56])
	*($2) = *($9)
	*($0 + [48 align=4]) = $19
	*($9) = $20
	*($21) = *($10)
	*($11) = *($12)
	*($13) = *($14)
	*($15) = *($16)
	*($17) = *($3 + [8])
	*($0) = *($3)
	$1 = ($1 + [64])
	$0 = ($0 + [64])
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$5 }
	$4 = ( $0 ? $4 : ((int_32)$1 == (int_32)$4) )
	goto $label$4 
	
.LABEL $label$5
	$0 = $4
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

int_32 .FUNC $56 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$0), [10976])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6146393877533163520, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $22($0, $4)
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)$0), [10976])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $57 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$0), [10976])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)6076804294378520576, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $16($0, $4)
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)$0), [10976])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $173 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10850])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10850])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10850])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10850])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	CALL $153(*($1), *($0 + [16]))
	CALL $154(*($1), *($0 + [20]))
}

int_32 .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [6]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10850])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [10850])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[31]), [10850])
	CALL memcpy(*($6), ($7 + [16]), [32])
	*($6) = (*($6) + [32])
	CALL $140($0, ($7 + [48]))
	$7 = ($7 + [64])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $150 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = int_32(($2 - $1) >> [6])
	if ( ((uint_32)$3 <= (uint_32)int_32(($4 - $5) >> [6])) ){ goto $label$8 }
	if ( ($5 == 0) ){ goto $label$5 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$9:
	$6 = ($4 + [-64])
	$7 = *(($4 + [-16]))
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [-12])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$4 = $6
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$9 }
	$4 = *($0)
	goto $label$6 
	
.LABEL $label$8
	$8 = int_32($4 >> [6])
	$4 = (*($0 + [4]) - $5)
	$7 = ($1 + $4)
	$9 = ( $7 ? $2 : ((uint_32)$3 > (uint_32)$8) )
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$11 }
	$10 = ($9 - $1)
	$11 = [0]
	
.LOOP $label$12:
	$4 = ($1 + $11)
	*(($6 = ($5 + $11))) = *($4)
	*(($6 + [40])) = *(($4 + [40]))
	*(($6 + [32])) = *(($4 + [32]))
	*(($6 + [24])) = *(($4 + [24]))
	*(($6 + [16])) = *(($4 + [16]))
	*(($6 + [8])) = *(($4 + [8]))
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$13 }
	CALL $139(($6 + [48]), *(($4 + [48])), *(($4 + [52])))
	
.LABEL $label$13
	$11 = ($11 + [64])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$12 }
	$5 = ($5 + $11)
	
.LABEL $label$11
	if ( ((uint_32)$3 <= (uint_32)$8) ){ goto $label$14 }
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$4 }
	$5 = ($0 + [4])
	$1 = *($5)
	
.LOOP $label$15:
	*($1) = *($7)
	*(($1 + [40])) = *(($7 + [40]))
	*(($1 + [32])) = *(($7 + [32]))
	*(($1 + [24])) = *(($7 + [24]))
	*(($1 + [16])) = *(($7 + [16]))
	*(($1 + [8])) = *(($7 + [8]))
	*($1 + [48]) = [0]
	*(($6 = ($1 + [52]))) = (int_64)0
	$0 = ($7 + [48])
	$10 = ($7 + [52])
	$4 = (*($10) - *($0))
	if ( ($4 == 0) ){ goto $label$16 }
	$3 = ($1 + [48])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$2 }
	$11 = CALL _Znwj($4)
	*($3) = $11
	*(($1 + [56])) = ($11 + $4)
	*($6) = $11
	$4 = *($0)
	$1 = (*($10) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$16 }
	CALL memcpy($11, $4, $1)
	*($6) = (*($6) + $1)
	
.LABEL $label$16
	$1 = (*($5) + [64])
	*($5) = $1
	$7 = ($7 + [64])
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$15 }
	goto $label$4 
	
.LABEL $label$14
	$7 = ($0 + [4])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$18:
	$4 = ($1 + [-64])
	$6 = *(($1 + [-16]))
	if ( ($6 == 0) ){ goto $label$19 }
	*(($1 + [-12])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$19
	$1 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$18 }
	
.LABEL $label$17
	*($7) = $5
	return (unreachable)
	
.LABEL $label$7
	$4 = $5
	
.LABEL $label$6
	*(($0 + [4])) = $5
	CALL _ZdlPv($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$3 >= (uint_32)[67108864]) ){ goto $label$1 }
	$6 = [67108863]
	if ( ((uint_32)int_32($4 >> [6]) > (uint_32)[33554430]) ){ goto $label$20 }
	$6 = $3
	$4 = int_32($4 >> [5])
	if ( ($4 <= $3) ){ goto $label$20 }
	$6 = $4
	if ( ((uint_32)$4 >= (uint_32)[67108864]) ){ goto $label$1 }
	
.LABEL $label$20
	$6 = ($6 << [6])
	$4 = CALL _Znwj($6)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $6)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	$5 = ($0 + [4])
	
.LOOP $label$21:
	*($4) = *($1)
	*(($4 + [40])) = *(($1 + [40]))
	*(($4 + [32])) = *(($1 + [32]))
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	*($4 + [48]) = [0]
	*(($7 = ($4 + [52]))) = (int_64)0
	$0 = ($1 + [48])
	$10 = ($1 + [52])
	$6 = (*($10) - *($0))
	if ( ($6 == 0) ){ goto $label$22 }
	$3 = ($4 + [48])
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$11 = CALL _Znwj($6)
	*($3) = $11
	*(($4 + [56])) = ($11 + $6)
	*($7) = $11
	$6 = *($0)
	$4 = (*($10) - $6)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$22 }
	CALL memcpy($11, $6, $4)
	*($7) = (*($7) + $4)
	
.LABEL $label$22
	$4 = (*($5) + [64])
	*($5) = $4
	$1 = ($1 + [64])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$21 }
	
.LABEL $label$4
	return (unreachable)
	
.LABEL $label$3
	CALL $186($3)
	
.LABEL $label$2
	CALL $186($3)
	
.LABEL $label$1
	CALL $186($0)
	(unreachable)
}

void .FUNC $151 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [5])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [5])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$1 }
	$6 = [134217727]
	if ( ((uint_32)int_32($5 >> [5]) > (uint_32)[67108862]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [4])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[134217728]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [5])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [5])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [5]) << [5]))
	return (unreachable)
	
.LABEL $label$1
	CALL $186($0)
}

int_32 .FUNC $156 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$1 = ($1 + [-24])
	*($3) = $1
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($4 + [36])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$5 = *($4 + [20])
	if ( ($5 == 0) ){ goto $label$5 }
	$6 = ($4 + [24])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$7 = ($1 + [-64])
	$8 = *(($1 + [-16]))
	if ( ($8 == 0) ){ goto $label$9 }
	*(($1 + [-12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$1 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$8 }
	$1 = *(($4 + [20]))
	goto $label$6 
	
.LABEL $label$7
	$1 = $5
	
.LABEL $label$6
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$5
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	return $0
}

void .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11050])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [11050])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [11050])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [11050])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	CALL $158(*($1), *($0 + [16]))
	CALL $159(*($1), *($0 + [20]))
}

int_32 .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [5]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [16]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10850])
	CALL memcpy(*($6), ($2 + [16]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$4 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$2 }
	$7 = ($2 + [28])
	
.LOOP $label$3:
	*($2 + [8]) = $0
	*($2 + [16]) = $6
	*((($2 + [16]) + [8])) = ($6 + [16])
	*($7) = ($6 + [24])
	*($2 + [20]) = ($6 + [8])
	CALL $155(($2 + [16]), ($2 + [8]))
	$6 = ($6 + [32])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return $0
}

void .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10850])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10850])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10850])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [10850])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $158 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [11055])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = int_32(($3 - $6) >> [6])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $160($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ($7 << [6]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($3 + [-64])
	$2 = *(($3 + [-16]))
	if ( ($2 == 0) ){ goto $label$8 }
	*(($3 + [-12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$3 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$3 = $6
	
.LABEL $label$5
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	
.LOOP $label$9:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - *($7)) > (uint_32)[7]), [11050])
	CALL memcpy($2, *($7), [8])
	$5 = (*($7) + [8])
	*($7) = $5
	CALL eosio_assert(((uint_32)(*($6) - $5) > (uint_32)[31]), [11050])
	CALL memcpy(($2 + [16]), *($7), [32])
	*($7) = (*($7) + [32])
	CALL $130($0, ($2 + [48]))
	$2 = ($2 + [64])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $159 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [11055])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$4 = (CASTING uint_32)(uint_64 $5)
	$8 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $8) >> [5])
	if ( ((uint_32)$7 >= (uint_32)$4) ){ goto $label$4 }
	CALL $161($1, ($4 - $7))
	$3 = *(($1 + [4]))
	$8 = *($1)
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$7 <= (uint_32)$4) ){ goto $label$5 }
	$3 = ($8 + ($4 << [5]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($2 + [28])
	
.LOOP $label$6:
	*($2 + [8]) = $0
	*($2 + [16]) = $8
	*((($2 + [16]) + [8])) = ($8 + [16])
	*($4) = ($8 + [24])
	*($2 + [20]) = ($8 + [8])
	CALL $162(($2 + [16]), ($2 + [8]))
	$8 = ($8 + [32])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return $0
}

void .FUNC $179 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = CALL $197($1)
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, $1, $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$3 = ($2 + [1])
	$5 = (*($2) & [1])
	$2 = *($2 + [8])
	$6 = *($0)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$9 }
	$1 = [10]
	$3 = ( $2 ? $3 : $5 )
	$2 = uint_32($6 >> [1])
	if ( (([10] - $2) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$3 = ( $2 ? $3 : $5 )
	$2 = *(($0 + [4]))
	$1 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($1 - $2) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $177($0, $1, (($2 + $4) - $1), $2, $2, [0], $4, $3)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ( *(($0 + [8])) ? ($0 + [1]) : $7 )
	CALL memcpy(($5 + $2), $3, $4)
	$2 = ($2 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $2
	*(($5 + $2)) = [0]
	(unreachable)
}

void .FUNC $183 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $197($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $177($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10850])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10850])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [10850])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10850])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10850])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10850])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10850])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [10850])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [10850])
	CALL memcpy(*($0 + [4]), ($1 + [60]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [10850])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $186($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $65 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [60]) == (int_32)$0), [10976])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6146428328942239744, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $25($0, $4)
	CALL eosio_assert(((int_32)*($5 + [60]) == (int_32)$0), [10976])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $64 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [176])
	$global$0 = $5
	*($5 + [36]) = $4
	*($5 + [40]) = $2
	$6 = CALL $65(($0 + [88]), $1, [9252])
	CALL require_auth(*($6 + [8]))
	CALL eosio_assert(((int_64)*($6 + [8]) != (int_64)$2), [9264])
	$2 = *($3 + [8])
	CALL eosio_assert(((int_64)$2 == (int_64)1397703940), [9311])
	$7 = [0]
	$8 = [0]
	$9 = *($3)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $11
	$8 = [1]
	$12 = $10
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $11
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$10 < (int_32)[6])
	$12 = ($10 + [1])
	$10 = $12
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [9353])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$9 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9376])
	$13 = ($0 + [128])
	*($5 + [32]) = $13
	*($5 + [16]) = $1
	*($5 + [24]) = *(($6 + [8]))
	CALL $66(($5 + [48]), ($5 + [32]), ($5 + [16]))
	$10 = *($5 + [52])
	if ( ($10 == 0) ){ goto $label$6 }
	$7 = ( $10 ? [0] : (int_64)(((int_64)((int_64)*($5 + [16]) ^ (int_64)*($10 + [24])) | (int_64)((int_64)*($5 + [24]) ^ (int_64)*($10 + [8]))) == 0) )
	
.LABEL $label$6
	$10 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	*($5 + [12]) = $10
	if ( ($4 == 0) ){ goto $label$12 }
	CALL eosio_assert(($10 <= $4), [9402])
	*($5 + [11]) = *([8194])
	if ( ($7 == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	*($5 + [11]) = *([8192])
	if ( $7 ){ goto $label$10 }
	
.LABEL $label$11
	$2 = *(($6 + [8]))
	*($5 + [52]) = $6
	*($5 + [64]) = $3
	*($5 + [56]) = ($5 + [40])
	*($5 + [60]) = ($5 + [11])
	*($5 + [68]) = ($5 + [12])
	*($5 + [72]) = ($5 + [36])
	*($5 + [48]) = $0
	*($5 + [144]) = $2
	CALL eosio_assert(((int_64)*(($0 + [128])) == (int_64)CALL $fimport$5()), [10925])
	*($5 + [160]) = $13
	*($5 + [164]) = ($5 + [48])
	*($5 + [168]) = ($5 + [144])
	*(($7 = CALL _Znwj([80])) + [32]) = (int_64)0
	*($7 + [8]) = (int_64)0
	*($7 + [40]) = (int_64)0
	*($7 + [48]) = (int_64)1397703940
	CALL eosio_assert([1], [10856])
	$2 = (int_64)5459781
	$10 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$11 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$2 = $11
	$8 = [1]
	$12 = $10
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$2 = $11
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$10 < (int_32)[6])
	$12 = ($10 + [1])
	$10 = $12
	if ( $8 ){ goto $label$17 }
	$8 = [1]
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$8 = [0]
	
.LABEL $label$13
	CALL eosio_assert($8, [10905])
	*($7 + [68]) = $13
	CALL $67(($5 + [160]), $7)
	*($5 + [128]) = $7
	$2 = *($7)
	*($5 + [160]) = $2
	$8 = *($7 + [72])
	*($5 + [112]) = $8
	$12 = ($0 + [156])
	$10 = *($12)
	if ( ((uint_32)$10 >= (uint_32)*(($0 + [160]))) ){ goto $label$19 }
	*($10 + [8]) = $2
	*($10 + [16]) = $8
	*($5 + [128]) = [0]
	*($10) = $7
	*($12) = ($10 + [24])
	$10 = *($5 + [128])
	*($5 + [128]) = [0]
	if ( $10 ){ goto $label$18 }
	goto $label$9 
	
.LABEL $label$19
	CALL $68(($0 + [152]), ($5 + [128]), ($5 + [160]), ($5 + [112]))
	$10 = *($5 + [128])
	*($5 + [128]) = [0]
	if ( ($10 == 0) ){ goto $label$9 }
	
.LABEL $label$18
	CALL _ZdlPv($10)
	goto $label$9 
	
.LABEL $label$10
	CALL eosio_assert(((int_32)*($7 + [16]) != (int_32)*([0] + [8196])), [9450])
	$11 = *(($6 + [8]))
	CALL eosio_assert(((int_32)*($7 + [68]) == (int_32)$13), [11094])
	CALL eosio_assert(((int_64)*(($0 + [128])) == (int_64)CALL $fimport$5()), [11140])
	*(($7 + [48])) = *(($3 + [8]))
	*($7 + [40]) = *($3)
	*($7 + [32]) = *($5 + [40])
	*($7 + [16]) = *($5 + [11])
	*($7 + [56]) = *($5 + [12])
	*($7 + [64]) = *($5 + [36])
	$10 = ($7 + [24])
	$2 = *($10)
	$8 = ($7 + [8])
	*($5 + [136]) = *($8)
	*($5 + [128]) = $2
	$2 = *($7)
	CALL eosio_assert([1], [11191])
	*($5 + [120]) = (($5 + [48]) + [61])
	*($5 + [116]) = ($5 + [48])
	*($5 + [112]) = ($5 + [48])
	CALL $69(($5 + [112]), $7)
	CALL db_update_i64(*($7 + [72]), $11, ($5 + [48]), [61])
	$12 = ($0 + [144])
	if ( (uint_64)($2 <= *($12)) ){ goto $label$20 }
	*($12) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	*($5 + [168]) = *($8)
	*($5 + [160]) = *($10)
	if ( (CALL $196(($5 + [128]), ($5 + [160]), [16]) == 0) ){ goto $label$9 }
	$10 = *($7 + [76])
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$21 }
	$10 = CALL db_idx128_find_primary(*(($0 + [128])), *(($0 + [136])), (int_64)-6497942333781180416, ($5 + [144]), $2)
	*(($7 + [76])) = $10
	
.LABEL $label$21
	CALL db_idx128_update($10, $11, ($5 + [160]))
	$2 = *($5 + [40])
	if ( ((int_64)($2 == 0) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$2 = *($5 + [40])
	if ( (int_64)($2 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL require_recipient($2)
	
.LABEL $label$7
	CALL prints([9500])
	CALL printn(*($5 + [40]))
	$global$0 = ($5 + [176])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [144])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [128])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [136])), (int_64)-6497942333781180416, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $79($9, $10)
	*($3 + [20]) = [0]
	*($3 + [16]) = $9
	$8 = *(*(CALL $163(($3 + [16])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [144])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [11487])
	$8 = *($7)
	$7 = *($5 + [16])
	*(($6 = (($3 + [16]) + [8]))) = *(($7 + [8]))
	$9 = *(*($5 + [24]))
	$10 = *(*($5 + [20]))
	$11 = *($7)
	$12 = *(*($5 + [8]))
	$7 = *($5 + [4])
	$13 = *($7)
	$5 = *(*($5 + [12]))
	$14 = *($7 + [8])
	*($1) = $8
	*($1 + [8]) = $14
	*($1 + [16]) = $5
	*($1 + [24]) = $13
	*($1 + [32]) = $12
	*($3 + [16]) = $11
	*(($1 + [23])) = *(($3 + [6]))
	*(($1 + [21])) = *(($3 + [4]))
	*($1 + [17 align=1]) = *($3)
	*($1 + [56]) = $10
	*($1 + [40]) = *($3 + [16])
	*(($1 + [48])) = *($6)
	*($1 + [60]) = [0]
	*($1 + [64]) = $9
	$2 = $2
	$5 = ($2 + [-64])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($2 + [-3])
	CALL $69($3, $1)
	$8 = *($1)
	*($1 + [72]) = CALL db_store_i64(*($4 + [8]), (int_64)-6497942333781180416, *(*($0 + [8])), $8, $5, [61])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$8 = *(($4 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($3 + [16]) = *(($1 + [24]))
	*($1 + [76]) = CALL db_idx128_store($8, (int_64)-6497942333781180416, $11, $12, ($3 + [16]))
	$global$0 = ($3 + [32])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx128_lowerbound(*($2), *($2 + [8]), (int_64)-6497942333781180416, $3, ($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [24])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [68]) == (int_32)$7), [10976])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $79($7, CALL $fimport$3(*($7), *($7 + [8]), (int_64)-6497942333781180416, $6))
	CALL eosio_assert(((int_32)*($4 + [68]) == (int_32)$7), [10976])
	
.LABEL $label$2
	*($4 + [76]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [32])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $61($0, *($1))
	CALL $61($0, *($1 + [4]))
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $60 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*((($4 + [8]) + [8])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	CALL $81(($4 + [52]), [16])
	$7 = *($4 + [52])
	$2 = (*(($4 + [56])) - $7)
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [10850])
	CALL memcpy($7, $3, [8])
	CALL eosio_assert(((int_32)($2 + [-8]) > (int_32)[7]), [10850])
	CALL memcpy(($7 + [8]), ($3 + [8]), [8])
	CALL $83(($4 + [64]), ($4 + [24]))
	$7 = *($4 + [64])
	CALL send_inline($7, (*($4 + [68]) - $7))
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$4 }
	*($4 + [68]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$5 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$5
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($4 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $186(($4 + [8]))
}

void .FUNC $63 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = ($0 + [168])
	$6 = *(($0 + [196]))
	$5 = *(($0 + [192]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [8]) == (int_32)$4), [10976])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [176])), (int_64)-6146593681529088640, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $44($4, $7)
	CALL eosio_assert(((int_32)*($8 + [8]) == (int_32)$4), [10976])
	
.LABEL $label$1
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [9228])
	CALL eosio_assert($7, [11275])
	CALL eosio_assert($7, [11309])
	$7 = CALL db_next_i64(*($8 + [12]), ($3 + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	CALL $44($4, $7)
	
.LABEL $label$5
	CALL $49($4, $8)
	$global$0 = ($3 + [16])
}

void .FUNC $62 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL require_auth(*($0))
	*(($3 + [152])) = [0]
	*($3 + [136]) = (int_64)-1
	*($3 + [144]) = (int_64)0
	*($3 + [156]) = [0]
	$4 = *($0)
	*($3 + [120]) = $4
	*($3 + [128]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)4157834741199929344, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $48(($3 + [120]), $6)
	CALL eosio_assert(((int_32)*($5 + [44]) == (int_32)($3 + [120])), [10976])
	
.LABEL $label$1
	$7 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($7, [8857])
	$10 = *(($8 + [36]))
	$8 = CALL $37(($3 + [72]), $5)
	$9 = *($8 + [32])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$2 }
	$11 = ($0 + [168])
	$12 = ($0 + [196])
	$13 = ($0 + [192])
	$14 = ($0 + [176])
	
.LOOP $label$3:
	$4 = *($9)
	$16 = *($12)
	$15 = *($13)
	if ( ((int_32)$15 == (int_32)$16) ){ goto $label$6 }
	
.LOOP $label$8:
	$6 = ($16 + [-24])
	$17 = *($6)
	if ( ((int_64)*($17) == (int_64)$4) ){ goto $label$7 }
	$16 = $6
	if ( ((int_32)$15 != (int_32)$6) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$15 == (int_32)$16) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($17 + [8]) == (int_32)$11), [10976])
	goto $label$5 
	
.LABEL $label$6
	$6 = CALL db_find_i64(*($11), *($14), (int_64)-6146593681529088640, $4)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$17 = CALL $44($11, $6)
	CALL eosio_assert(((int_32)*($17 + [8]) == (int_32)$11), [10976])
	
.LABEL $label$5
	CALL eosio_assert([1], [11275])
	CALL eosio_assert([1], [11309])
	$6 = CALL db_next_i64(*($17 + [12]), $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$9 }
	CALL $44($11, $6)
	
.LABEL $label$9
	CALL $49($11, $17)
	
.LABEL $label$4
	$9 = ($9 + [32])
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$3 }
	
.LABEL $label$2
	$10 = *(($8 + [24]))
	$9 = *($8 + [20])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$10 }
	$11 = ($0 + [208])
	$12 = ($0 + [236])
	$13 = ($0 + [232])
	$14 = ($0 + [216])
	
.LOOP $label$11:
	$4 = *($9)
	$16 = *($12)
	$15 = *($13)
	if ( ((int_32)$15 == (int_32)$16) ){ goto $label$14 }
	
.LOOP $label$16:
	$6 = ($16 + [-24])
	$17 = *($6)
	if ( ((int_64)*($17) == (int_64)$4) ){ goto $label$15 }
	$16 = $6
	if ( ((int_32)$15 != (int_32)$6) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$15 == (int_32)$16) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*($17 + [8]) == (int_32)$11), [10976])
	goto $label$13 
	
.LABEL $label$14
	$6 = CALL db_find_i64(*($11), *($14), (int_64)-6021055841916136064, $4)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	$17 = CALL $30($11, $6)
	CALL eosio_assert(((int_32)*($17 + [8]) == (int_32)$11), [10976])
	
.LABEL $label$13
	CALL eosio_assert([1], [11275])
	CALL eosio_assert([1], [11309])
	$6 = CALL db_next_i64(*($17 + [12]), $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$17 }
	CALL $30($11, $6)
	
.LABEL $label$17
	CALL $50($11, $17)
	
.LABEL $label$12
	$9 = ($9 + [64])
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$11 }
	
.LABEL $label$10
	CALL eosio_assert($7, [11275])
	CALL eosio_assert($7, [11309])
	$6 = CALL db_next_i64(*($5 + [48]), $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$18 }
	CALL $48(($3 + [120]), $6)
	
.LABEL $label$18
	CALL $51(($3 + [120]), $5)
	CALL $2($3, $0)
	*($3 + [60]) = (*($3 + [60]) + [-1])
	CALL $3(($0 + [288]), $3, *($0))
	CALL $32($0, [10])
	$6 = *(($8 + [32]))
	if ( ($6 == 0) ){ goto $label$19 }
	*(($8 + [36])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$19
	$15 = *($8 + [20])
	if ( ($15 == 0) ){ goto $label$20 }
	$11 = ($8 + [24])
	$6 = *($11)
	if ( ((int_32)$6 == (int_32)$15) ){ goto $label$22 }
	
.LOOP $label$23:
	$16 = ($6 + [-64])
	$17 = *(($6 + [-16]))
	if ( ($17 == 0) ){ goto $label$24 }
	*(($6 + [-12])) = $17
	CALL _ZdlPv($17)
	
.LABEL $label$24
	$6 = $16
	if ( ((int_32)$15 != (int_32)$16) ){ goto $label$23 }
	$6 = *(($8 + [20]))
	goto $label$21 
	
.LABEL $label$22
	$6 = $15
	
.LABEL $label$21
	*($11) = $15
	CALL _ZdlPv($6)
	
.LABEL $label$20
	CALL $40(($3 + [144]))
	$global$0 = ($3 + [160])
}

void .FUNC $1 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL $2(($3 + [8]), $0)
	*($3 + [24]) = $1
	CALL $3(($0 + [288]), ($3 + [8]), *($0))
	$global$0 = ($3 + [80])
}

void .FUNC $89 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($0 + [88])
	$3 = CALL $65($2, $1, [10385])
	CALL require_auth(*($3 + [8]))
	CALL $90($2, $3)
	CALL $32($0, [10])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $186($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = *($0)
	$4 = *($0 + [4])
	$5 = *($4 + [16])
	*(($7 = (($6 = $2) + [48]))) = [0]
	*($6 + [32]) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [40]) = (int_64)0
	*($6 + [52]) = [0]
	*($6 + [56]) = (int_64)0
	*($6 + [64]) = (int_64)0
	*($6 + [72]) = (int_64)0
	*($6 + [80]) = [0]
	*($6 + [24]) = *(*($4))
	$8 = (($6 + [24]) + [16])
	CALL $176($8, *($4 + [4]))
	*($6 + [32]) = *(*($4 + [8]))
	$9 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$10 = (CASTING uint_32)(uint_64 $9)
	*($6 + [64]) = $10
	*($6 + [56]) = $10
	*($6 + [76]) = $10
	*($6 + [80]) = $10
	*($6 + [68]) = $10
	*($6 + [72]) = (*(*($4 + [12]) + [8]) + $10)
	$11 = *(*($4 + [8]))
	$12 = *($6 + [24])
	$10 = CALL $32($5, [100])
	$13 = *(*($4 + [12]) + [64])
	*($1) = *($6 + [24])
	*(($1 + [8])) = *($6 + [32])
	*($6 + [52]) = ((uint_64)((int_64)((int_64)$11 + (int_64)((int_64)$12 + (int_64)((int_64)$9 & (int_64)4294967295))) + (int_64)(CASTING int_64)(int_32 $10)) % (uint_64)((int_64)$13 + (int_64)-3))
	$5 = ($1 + [16])
	CALL $176($5, $8)
	*(($1 + [52])) = *($6 + [76 align=4])
	*(($1 + [44])) = *($6 + [68 align=4])
	*(($1 + [36])) = *($6 + [60 align=4])
	*($1 + [28 align=4]) = *($6 + [52 align=4])
	if ( ((*($6 + [40]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($7))
	
.LABEL $label$1
	$8 = ($1 + [28])
	$4 = *($5)
	$10 = ( *(($1 + [20])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($10 + [45])
	$9 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$10 = CALL $198($4)
	goto $label$3 
	
.LABEL $label$4
	$10 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $10
	
.LABEL $label$3
	*($6 + [12]) = $10
	*($6 + [8]) = $10
	*($6 + [16]) = ($10 + $4)
	*($6 + [88]) = ($6 + [8])
	*($6 + [28]) = ($1 + [8])
	*($6 + [24]) = $1
	*($6 + [32]) = $5
	*($6 + [36]) = $8
	*($6 + [40]) = ($1 + [32])
	*($6 + [44]) = ($1 + [36])
	*($6 + [48]) = ($1 + [40])
	*($6 + [52]) = ($1 + [44])
	*($6 + [56]) = ($1 + [48])
	*($6 + [60]) = ($1 + [52])
	*($6 + [64]) = ($1 + [56])
	CALL $144(($6 + [24]), ($6 + [88]))
	$9 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($3 + [8]), (int_64)-6146428328942239744, *(*($0 + [8])), $9, $10, $4)
	if ( ($4 <= [513]) ){ goto $label$5 }
	CALL $201($10)
	
.LABEL $label$5
	if ( (uint_64)($9 <= *($3 + [16])) ){ goto $label$6 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$9 = *(($3 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($6 + [24]) = *($1 + [8])
	*($1 + [68]) = CALL db_idx64_store($9, (int_64)-6146428328942239744, $11, $12, ($6 + [24]))
	$global$0 = ($6 + [96])
}

int_32 .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [11309])
	$3 = *($0 + [4])
	$4 = *($3 + [68])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-6146428328942239744, ($1 + [8]), *($3))
	*(*(($0 + [4])) + [68]) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($2 + [60]) == (int_32)$7), [10976])
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL $25($7, CALL $fimport$3(*($7), *($7 + [8]), (int_64)-6146428328942239744, $6))
	CALL eosio_assert(((int_32)*($2 + [60]) == (int_32)$7), [10976])
	
.LABEL $label$3
	*($2 + [68]) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-6146428328942239744, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [60]) == (int_32)$7), [10976])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $25($7, CALL $fimport$3(*($7), *($7 + [8]), (int_64)-6146428328942239744, $6))
	CALL eosio_assert(((int_32)*($4 + [60]) == (int_32)$7), [10976])
	
.LABEL $label$2
	*($4 + [68]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $84 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [224])
	$global$0 = $3
	*($3 + [104]) = $1
	CALL require_auth($1)
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($2 + [4])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [10225])
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$4 }
	$4 = uint_32($4 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($2 + [4])
	
.LABEL $label$3
	CALL eosio_assert(($4 <= [21]), [10262])
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$6 }
	$5 = uint_32($4 >> [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	
.LABEL $label$5
	$4 = ($4 & [1])
	$4 = *($6)
	$6 = CALL $174(($3 + [88]), $2)
	if ( (( *($6 + [4]) ? uint_32($4 >> [1]) : $4 ) == 0) ){ goto $label$8 }
	$7 = ($6 + [1])
	$8 = ($4 == 0)
	$9 = ($6 + [8])
	$10 = ($6 + [4])
	$4 = [0]
	$11 = [0]
	
.LOOP $label$9:
	$11 = ($11 + ((int_32)CALL $187(*((( $7 ? *($9) : ($8 & [1]) ) + $4))) != (int_32)[0]))
	$12 = *($6)
	$13 = ($12 & [1])
	$8 = ($13 == 0)
	$4 = ($4 + [1])
	if ( ($4 <= ( *($10) ? uint_32($12 >> [1]) : $13 )) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$11 = [0]
	
.LABEL $label$7
	CALL eosio_assert(((uint_32)$5 > (uint_32)$11), [10290])
	if ( ((*($6) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($6 + [8])))
	
.LABEL $label$10
	CALL $2(($3 + [16]), $0)
	if ( (*($3 + [64]) == 0) ){ goto $label$16 }
	$6 = ($0 + [88])
	*($3 + [8]) = $6
	*($3 + [144]) = *($3 + [104])
	CALL $85(($3 + [152]), ($3 + [8]), ($3 + [144]))
	$4 = *($3 + [156])
	if ( ($4 == 0) ){ goto $label$17 }
	if ( ((int_64)*($3 + [144]) != (int_64)*($4 + [8])) ){ goto $label$17 }
	$1 = *($3 + [152])
	*($3 + [120]) = $1
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($4) == 0) ){ goto $label$13 }
	$12 = (($3 + [152]) + [16])
	$11 = [0]
	$8 = ($3 + [180])
	$7 = ($8 + [24])
	$9 = ($3 + [184])
	
.LOOP $label$18:
	*(($13 = (($3 + [152]) + [8]))) = *(($4 + [8]))
	*($3 + [152]) = *($4)
	CALL $174($12, ($4 + [16]))
	*($7) = *(($4 + [52]))
	*(($8 + [16])) = *(($4 + [44]))
	*(($8 + [8])) = *(($4 + [36]))
	*($8) = *($4 + [28 align=4])
	if ( ((int_64)*($13) != (int_64)*($3 + [104])) ){ goto $label$15 }
	$4 = *($9)
	$13 = ((uint_32)$4 > (uint_32)$11)
	if ( ((*($12) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*((($3 + [152]) + [24])))
	
.LABEL $label$19
	$11 = ( $4 ? $11 : $13 )
	CALL $86(($3 + [120]))
	$4 = *($3 + [124])
	if ( $4 ){ goto $label$18 }
	goto $label$14 
	
.LABEL $label$17
	$11 = [0]
	*($3 + [124]) = [0]
	*($3 + [120]) = ($3 + [8])
	goto $label$12 
	
.LABEL $label$16
	$6 = ($0 + [88])
	goto $label$11 
	
.LABEL $label$15
	if ( ((*(($3 + [168])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [176])))
	
.LABEL $label$14
	if ( ($11 == 0) ){ goto $label$13 }
	CALL prints([10329])
	CALL printui((CASTING uint_64)(uint_32 $11))
	goto $label$12 
	
.LABEL $label$13
	$11 = [0]
	
.LABEL $label$12
	CALL eosio_assert(((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$10() / (uint_64)(int_64)1000000)) - $11) > (uint_32)*(($3 + [64]))), [10352])
	
.LABEL $label$11
	CALL $2(($3 + [152]), $0)
	$1 = ((int_64)*($3 + [152]) + (int_64)1)
	*($3 + [152]) = $1
	CALL eosio_assert(((int_64)$1 != (int_64)0), [8541])
	CALL $3(($0 + [288]), ($3 + [152]), *($0))
	*($3 + [8]) = *($3 + [152])
	$1 = *($3 + [104])
	*($3 + [156]) = $2
	*($3 + [168]) = $0
	*($3 + [152]) = ($3 + [8])
	*($3 + [160]) = ($3 + [104])
	*($3 + [164]) = ($3 + [16])
	*($3 + [144]) = $1
	CALL eosio_assert(((int_64)*($0 + [88]) == (int_64)CALL $fimport$5()), [10925])
	*($3 + [120]) = $6
	*($3 + [124]) = ($3 + [152])
	*($3 + [128]) = ($3 + [144])
	*(($4 = CALL _Znwj([72])) + [8]) = (int_64)0
	*($4 + [16 align=4]) = (int_64)0
	*($4 + [24]) = [0]
	*($4 + [36]) = [0]
	*($4 + [48]) = [0]
	*($4 + [60]) = $6
	CALL $87(($3 + [120]), $4)
	*($3 + [136]) = $4
	$1 = *($4)
	*($3 + [120]) = $1
	$8 = *($4 + [64])
	*($3 + [116]) = $8
	$12 = ($0 + [116])
	$11 = *($12)
	if ( ((uint_32)$11 >= (uint_32)*(($0 + [120]))) ){ goto $label$22 }
	*($11 + [8]) = $1
	*($11 + [16]) = $8
	*($3 + [136]) = [0]
	*($11) = $4
	*($12) = ($11 + [24])
	$4 = *($3 + [136])
	*($3 + [136]) = [0]
	if ( ($4 == 0) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	CALL $88(($0 + [112]), ($3 + [136]), ($3 + [120]), ($3 + [116]))
	$4 = *($3 + [136])
	*($3 + [136]) = [0]
	if ( $4 ){ goto $label$20 }
	
.LABEL $label$21
	$global$0 = ($3 + [224])
	return 
	
.LABEL $label$20
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$23
	CALL _ZdlPv($4)
	$global$0 = ($3 + [224])
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $81($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [10850])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [10850])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $138(CALL $137($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10850])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10850])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10850])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [10850])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $145(*($1), ($0 + [32]))
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $186($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $80 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$4 = ($global$0 - [128])
	$global$0 = $4
	$5 = *($0)
	$6 = (int_64)6
	
.LOOP $label$1:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$1 }
	$6 = (int_64)0
	$7 = (int_64)59
	$0 = [10204]
	$8 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$7 }
	$9 = *($0)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$9 = ($9 + [-91])
	goto $label$5 
	
.LABEL $label$7
	$10 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$3
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)4294967291)
	$8 = ((int_64)$10 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$2 }
	$6 = (int_64)0
	$7 = (int_64)59
	$0 = [10216]
	$11 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$13 }
	$9 = *($0)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$9 = ($9 + [-91])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$8 }
	*((($4 + [8]) + [24])) = *(($2 + [8]))
	*($4 + [16]) = $1
	*($4 + [8]) = $5
	*($4 + [24]) = *($2)
	$9 = CALL $174((($4 + [8]) + [32]), $3)
	*($4 + [64]) = $11
	*($4 + [56]) = $8
	*(($0 = CALL _Znwj([16]))) = $5
	*($0 + [8]) = (int_64)3617214756542218240
	*((($4 + [56]) + [36])) = [0]
	$2 = ($0 + [16])
	*((($4 + [56]) + [24])) = $2
	*(($4 + [76])) = $2
	*($4 + [72]) = $0
	*($4 + [84 align=4]) = (int_64)0
	$0 = *($9)
	$9 = ( *((($4 + [8]) + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($9 + [32])
	$6 = (CASTING uint_64)(uint_32 $9)
	$9 = ($4 + [84])
	
.LOOP $label$14:
	$0 = ($0 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$14 }
	if ( ($0 == 0) ){ goto $label$16 }
	CALL $81($9, $0)
	$9 = *(($4 + [88]))
	$0 = *(($4 + [84]))
	goto $label$15 
	
.LABEL $label$16
	$9 = [0]
	$0 = [0]
	
.LABEL $label$15
	*($4 + [100]) = $0
	*($4 + [96]) = $0
	*($4 + [104]) = $9
	*($4 + [112]) = ($4 + [96])
	*($4 + [120]) = ($4 + [8])
	CALL $82(($4 + [120]), ($4 + [112]))
	CALL $83(($4 + [96]), ($4 + [56]))
	$0 = *($4 + [96])
	CALL send_inline($0, (*($4 + [100]) - $0))
	$0 = *($4 + [96])
	if ( ($0 == 0) ){ goto $label$17 }
	*($4 + [100]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$17
	$0 = *($4 + [84])
	if ( ($0 == 0) ){ goto $label$18 }
	*(($4 + [88])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$18
	$0 = *($4 + [72])
	if ( ($0 == 0) ){ goto $label$19 }
	*(($4 + [76])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$19
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($4 + [48])))
	
.LABEL $label$20
	$global$0 = ($4 + [128])
}

void .FUNC $182 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $183($1, $0, [9025])
	CALL $185()
	(unreachable)
}

void .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10850])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10850])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10850])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10850])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10850])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10850])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10850])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10850])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10850])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10850])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10850])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10850])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10850])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10850])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [10850])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [10850])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [10850])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$3 = *($0 + [68])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[1]), [10850])
	CALL memcpy(*($0 + [4]), $3, [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
}

int_32 .FUNC $148 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [160])
	$global$0 = $3
	*($0 + [8]) = (int_64)1
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)100
	*($0 + [24]) = [100]
	*($0 + [28 align=4]) = (int_64)46385646926400
	*($0 + [36]) = [356]
	*($0 + [40]) = (int_64)61847529091200
	*($0 + [48]) = (int_64)257698041360
	*($0 + [56]) = (int_64)662548
	*($0 + [64]) = [0]
	*($0 + [72]) = $1
	$1 = *($2)
	$0 = CALL memcpy($0, *(*($2 + [4])), [66])
	*($3 + [72]) = ($3 + [61])
	*($3 + [68]) = $3
	*($3 + [64]) = $3
	*($3 + [80]) = ($3 + [64])
	*($3 + [92]) = ($0 + [8])
	*($3 + [88]) = $0
	*($3 + [96]) = ($0 + [16])
	*($3 + [100]) = ($0 + [24])
	*($3 + [104]) = ($0 + [28])
	*($3 + [108]) = ($0 + [32])
	*($3 + [112]) = ($0 + [36])
	*($3 + [116]) = ($0 + [37])
	*($3 + [120]) = ($0 + [40])
	*($3 + [124]) = ($0 + [44])
	*($3 + [128]) = ($0 + [48])
	*($3 + [132]) = ($0 + [52])
	*($3 + [136]) = ($0 + [56])
	*($3 + [140]) = ($0 + [57])
	*($3 + [144]) = ($0 + [58])
	*($3 + [148]) = ($0 + [60])
	*($3 + [152]) = ($0 + [62])
	*($3 + [156]) = ($0 + [64])
	CALL $149(($3 + [88]), ($3 + [80]))
	*($0 + [76]) = CALL db_store_i64(*($1 + [8]), (int_64)-6146698476238372864, *(*($2 + [8])), (int_64)-6146698476238372864, $3, [61])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-6146698476238372864) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-6146698476238372863
	
.LABEL $label$1
	$global$0 = ($3 + [160])
	return $0
}

int_32 .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [10850])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [10850])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10850])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10850])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $145(*($1), *($0 + [8]))
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10850])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10850])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10850])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10850])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10850])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10850])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10850])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [40])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [10850])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $147 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $186($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11050])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11050])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11050])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [11050])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [11050])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [11050])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [11050])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [11050])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [11050])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [11050])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [11050])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [11050])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [11050])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [11050])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [11050])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [11050])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [11050])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$3 = *($0 + [68])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[1]), [11050])
	CALL memcpy($3, *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
}

void .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $186($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10850])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10850])
	CALL memcpy(*($7), $6, [1])
	$4 = (*($7) + [1])
	*($7) = $4
	$6 = ($6 + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [11055])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $81($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [11050])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11050])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11050])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $127(*($1), *($0 + [8]))
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [11050])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [11050])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [11050])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [11050])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [11050])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [11050])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [11050])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [40])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [11050])
	CALL memcpy($3, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $72 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [32]) = $3
	*($4 + [40]) = $1
	CALL require_auth($3)
	$5 = ($0 + [128])
	*($4 + [24]) = $5
	*($4 + [56]) = $1
	*($4 + [48]) = $2
	CALL $66(($4 + [64]), ($4 + [24]), ($4 + [48]))
	$6 = [0]
	$7 = *($4 + [68])
	if ( ($7 == 0) ){ goto $label$1 }
	$6 = ( $7 ? [0] : (int_64)(((int_64)((int_64)*($4 + [48]) ^ (int_64)*($7 + [24])) | (int_64)((int_64)*($4 + [56]) ^ (int_64)*($7 + [8]))) == 0) )
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9522])
	$7 = CALL $65(($0 + [88]), $2, [9252])
	$2 = *($6 + [32])
	if ( ((int_64)$2 != (int_64)$3) ){ goto $label$3 }
	CALL eosio_assert([1], [9631])
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert((int_64)($2 == 0), [9631])
	
.LABEL $label$2
	CALL eosio_assert(((int_64)*($4 + [40]) == (int_64)*($7 + [8])), [9652])
	$8 = [1]
	if ( ((int_32)*($6 + [16]) != (int_32)*([0] + [8196])) ){ goto $label$4 }
	$8 = (*($6 + [64]) <= (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)))
	
.LABEL $label$4
	CALL eosio_assert($8, [9676])
	CALL eosio_assert((int_64)(*($6 + [40]) == 0), [9713])
	$2 = *($0)
	$3 = (int_64)6
	
.LOOP $label$5:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$5 }
	$3 = *($7)
	$1 = *($4 + [32])
	*(($0 = CALL _Znwj([16])) + [8]) = (int_64)3617214756542218240
	*($0) = $2
	*($4 + [56]) = $1
	*(($4 + [16])) = *($4 + [56])
	*($4 + [48]) = $3
	*($4 + [64]) = $0
	$0 = ($0 + [16])
	*($4 + [72]) = $0
	*($4 + [68]) = $0
	*($4 + [8]) = *($4 + [48])
	CALL $73($2, (int_64)-3617168760266640896, ($4 + [64]), ($4 + [8]))
	$0 = *($4 + [64])
	if ( ($0 == 0) ){ goto $label$6 }
	*($4 + [68]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( (*($6 + [64]) == 0) ){ goto $label$8 }
	$0 = *(($6 + [16]))
	if ( ((int_32)$0 != (int_32)*([0] + [8194])) ){ goto $label$7 }
	*($4 + [52]) = ($4 + [40])
	*($4 + [48]) = ($4 + [32])
	CALL $74($5, $6, ($4 + [48]))
	CALL prints([9744])
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$8
	CALL $71($5, $6)
	CALL prints([9782])
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$7
	if ( ((int_32)$0 != (int_32)*([0] + [8196])) ){ goto $label$9 }
	CALL $71($5, $6)
	CALL prints([9782])
	
.LABEL $label$9
	$global$0 = ($4 + [80])
}

void .FUNC $73 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*((($4 + [8]) + [8])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	CALL $81(($4 + [52]), [16])
	$7 = *($4 + [52])
	$2 = (*(($4 + [56])) - $7)
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [10850])
	CALL memcpy($7, $3, [8])
	CALL eosio_assert(((int_32)($2 + [-8]) > (int_32)[7]), [10850])
	CALL memcpy(($7 + [8]), ($3 + [8]), [8])
	CALL $83(($4 + [64]), ($4 + [24]))
	$7 = *($4 + [64])
	CALL send_inline($7, (*($4 + [68]) - $7))
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$4 }
	*($4 + [68]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$5 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$5
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($4 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $186(($4 + [8]))
}

void .FUNC $70 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL require_auth($1)
	$4 = ($0 + [128])
	*($3 + [16]) = $4
	*($3 + [8]) = $1
	*($3) = $2
	CALL $66(($3 + [24]), ($3 + [16]), $3)
	$0 = [0]
	$5 = *($3 + [28])
	if ( ($5 == 0) ){ goto $label$1 }
	$0 = ( $5 ? [0] : (int_64)(((int_64)((int_64)*($3) ^ (int_64)*($5 + [24])) | (int_64)((int_64)*($3 + [8]) ^ (int_64)*($5 + [8]))) == 0) )
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [9522])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)$1), [9536])
	CALL eosio_assert(((int_32)*($0 + [16]) != (int_32)*([0] + [8196])), [9580])
	CALL $71($4, $0)
	$global$0 = ($3 + [32])
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [68]) == (int_32)$0), [11339])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [11384])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [11434])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [72]))
	$6 = *($1 + [76])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-6497942333781180416, $2, *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx128_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [144])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [128])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [136])), (int_64)-6497942333781180416, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $79($9, $10)
	*($3 + [20]) = [0]
	*($3 + [16]) = $9
	$8 = *(*(CALL $163(($3 + [16])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [144])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [11487])
	$8 = *($7)
	$7 = *($5 + [16])
	*(($6 = (($3 + [16]) + [8]))) = *(($7 + [8]))
	$9 = *(*($5 + [24]))
	$10 = *(*($5 + [20]))
	$11 = *($7)
	$12 = *(*($5 + [8]))
	$7 = *(*($5 + [12]))
	$13 = *(*($5 + [4]))
	*($1) = $8
	*($1 + [8]) = $13
	*($1 + [16]) = $7
	*($1 + [24]) = $12
	*($1 + [32]) = (int_64)0
	*($3 + [16]) = $11
	*(($1 + [23])) = *(($3 + [6]))
	*(($1 + [21])) = *(($3 + [4]))
	*($1 + [17 align=1]) = *($3)
	*($1 + [56]) = $10
	*($1 + [40]) = *($3 + [16])
	*(($1 + [48])) = *($6)
	*($1 + [60]) = [0]
	*($1 + [64]) = $9
	$2 = $2
	$5 = ($2 + [-64])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($2 + [-3])
	CALL $69($3, $1)
	$8 = *($1)
	*($1 + [72]) = CALL db_store_i64(*($4 + [8]), (int_64)-6497942333781180416, *(*($0 + [8])), $8, $5, [61])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$8 = *(($4 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($3 + [16]) = *(($1 + [24]))
	*($1 + [76]) = CALL db_idx128_store($8, (int_64)-6497942333781180416, $11, $12, ($3 + [16]))
	$global$0 = ($3 + [32])
}

void .FUNC $77 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL require_auth($1)
	$4 = ($0 + [128])
	*($3 + [16]) = $4
	*($3 + [8]) = $1
	*($3) = $2
	CALL $66(($3 + [24]), ($3 + [16]), $3)
	$0 = [0]
	$5 = *($3 + [28])
	if ( ($5 == 0) ){ goto $label$1 }
	$0 = ( $5 ? [0] : (int_64)(((int_64)((int_64)*($3) ^ (int_64)*($5 + [24])) | (int_64)((int_64)*($3 + [8]) ^ (int_64)*($5 + [8]))) == 0) )
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [9840])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)$1), [9859])
	CALL $71($4, $0)
	$global$0 = ($3 + [32])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [68]) == (int_32)$0), [11094])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [11140])
	$5 = ($1 + [8])
	*(($4 = $3) + [24]) = *($5)
	*($4 + [16]) = *(($1 + [24]))
	*($5) = *(*($2))
	*($1 + [32]) = *(*($2 + [4]))
	$6 = *($1)
	CALL eosio_assert([1], [10856])
	$7 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$5 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [10905])
	*(($1 + [48])) = (int_64)1397703940
	*($1 + [40]) = (int_64)0
	*($1 + [16]) = *([0] + [8196])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [11191])
	$5 = $3
	$2 = ($5 + [-64])
	$global$0 = $2
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($5 + [-3])
	CALL $69($4, $1)
	CALL db_update_i64(*($1 + [72]), (int_64)0, $2, [61])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($4 + [56]) = *(($1 + [8]))
	*($4 + [48]) = *(($1 + [24]))
	if ( (CALL $196(($4 + [16]), ($4 + [48]), [16]) == 0) ){ goto $label$7 }
	$2 = *($1 + [76])
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$2 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-6497942333781180416, ($4 + [32]), $6)
	*(($1 + [76])) = $2
	
.LABEL $label$8
	CALL db_idx128_update($2, (int_64)0, ($4 + [48]))
	
.LABEL $label$7
	$global$0 = ($4 + [64])
}

void .FUNC $75 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$5 = ($global$0 - [176])
	$global$0 = $5
	*($5 + [36]) = $4
	*($5 + [40]) = $2
	CALL require_auth($2)
	$6 = CALL $65(($0 + [88]), $1, [8524])
	CALL eosio_assert(((int_64)*($6 + [8]) != (int_64)$2), [9796])
	$7 = *($3 + [8])
	CALL eosio_assert(((int_64)$7 == (int_64)1397703940), [9311])
	$8 = [0]
	$9 = [0]
	$10 = *($3)
	if ( ((uint_64)((int_64)$10 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$12 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $12
	$9 = [1]
	$13 = $11
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $12
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$11 < (int_32)[6])
	$13 = ($11 + [1])
	$11 = $13
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [9353])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9376])
	$14 = ($0 + [128])
	*($5 + [32]) = $14
	*($5 + [24]) = $2
	*($5 + [16]) = $1
	CALL $66(($5 + [48]), ($5 + [32]), ($5 + [16]))
	$11 = *($5 + [52])
	if ( ($11 == 0) ){ goto $label$6 }
	$8 = ( $11 ? [0] : (int_64)(((int_64)((int_64)*($5 + [16]) ^ (int_64)*($11 + [24])) | (int_64)((int_64)*($5 + [24]) ^ (int_64)*($11 + [8]))) == 0) )
	
.LABEL $label$6
	*($5 + [12]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($5 + [11]) = *(( [8195] ? [8193] : $4 ))
	if ( ($8 == 0) ){ goto $label$8 }
	$2 = *(($6 + [8]))
	CALL eosio_assert(((int_32)*($8 + [68]) == (int_32)$14), [11094])
	CALL eosio_assert(((int_64)*(($0 + [128])) == (int_64)CALL $fimport$5()), [11140])
	*(($8 + [48])) = *(($3 + [8]))
	*($8 + [40]) = *($3)
	*($8 + [56]) = *($5 + [12])
	*($8 + [64]) = *($5 + [36])
	$11 = ($8 + [24])
	$7 = *($11)
	$9 = ($8 + [8])
	*($5 + [136]) = *($9)
	*($5 + [128]) = $7
	$7 = *($8)
	CALL eosio_assert([1], [11191])
	*($5 + [120]) = (($5 + [48]) + [61])
	*($5 + [116]) = ($5 + [48])
	*($5 + [112]) = ($5 + [48])
	CALL $69(($5 + [112]), $8)
	CALL db_update_i64(*($8 + [72]), $2, ($5 + [48]), [61])
	$13 = ($0 + [144])
	if ( (uint_64)($7 <= *($13)) ){ goto $label$9 }
	*($13) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($5 + [168]) = *($9)
	*($5 + [160]) = *($11)
	if ( (CALL $196(($5 + [128]), ($5 + [160]), [16]) == 0) ){ goto $label$7 }
	$11 = *($8 + [76])
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$10 }
	$11 = CALL db_idx128_find_primary(*(($0 + [128])), *(($0 + [136])), (int_64)-6497942333781180416, ($5 + [144]), $7)
	*(($8 + [76])) = $11
	
.LABEL $label$10
	CALL db_idx128_update($11, $2, ($5 + [160]))
	$global$0 = ($5 + [176])
	return 
	
.LABEL $label$8
	*($5 + [56]) = $6
	*($5 + [64]) = $3
	*($5 + [52]) = ($5 + [40])
	*($5 + [60]) = ($5 + [11])
	*($5 + [68]) = ($5 + [12])
	*($5 + [72]) = ($5 + [36])
	*($5 + [48]) = $0
	*($5 + [144]) = $2
	CALL eosio_assert(((int_64)*(($0 + [128])) == (int_64)CALL $fimport$5()), [10925])
	*($5 + [160]) = $14
	*($5 + [164]) = ($5 + [48])
	*($5 + [168]) = ($5 + [144])
	*(($8 = CALL _Znwj([80])) + [32]) = (int_64)0
	*($8 + [8]) = (int_64)0
	*($8 + [40]) = (int_64)0
	*($8 + [48]) = (int_64)1397703940
	CALL eosio_assert([1], [10856])
	$7 = (int_64)5459781
	$11 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$2 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$7 = $2
	$9 = [1]
	$13 = $11
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$7 = $2
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$11 < (int_32)[6])
	$13 = ($11 + [1])
	$11 = $13
	if ( $9 ){ goto $label$15 }
	$9 = [1]
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$9 = [0]
	
.LABEL $label$11
	CALL eosio_assert($9, [10905])
	*($8 + [68]) = $14
	CALL $76(($5 + [160]), $8)
	*($5 + [128]) = $8
	$7 = *($8)
	*($5 + [160]) = $7
	$9 = *($8 + [72])
	*($5 + [112]) = $9
	$13 = ($0 + [156])
	$11 = *($13)
	if ( ((uint_32)$11 >= (uint_32)*(($0 + [160]))) ){ goto $label$17 }
	*($11 + [8]) = $7
	*($11 + [16]) = $9
	*($5 + [128]) = [0]
	*($11) = $8
	*($13) = ($11 + [24])
	$11 = *($5 + [128])
	*($5 + [128]) = [0]
	if ( $11 ){ goto $label$16 }
	goto $label$7 
	
.LABEL $label$17
	CALL $68(($0 + [152]), ($5 + [128]), ($5 + [160]), ($5 + [112]))
	$11 = *($5 + [128])
	*($5 + [128]) = [0]
	if ( ($11 == 0) ){ goto $label$7 }
	
.LABEL $label$16
	CALL _ZdlPv($11)
	
.LABEL $label$7
	$global$0 = ($5 + [176])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_64 $19
	$4 = ($global$0 - [256])
	$global$0 = $4
	$5 = [0]
	$6 = CALL $175(($4 + [208]), $1, [3], [-1], $1)
	$1 = CALL $180($6, [0], [10])
	CALL prints([9905])
	$7 = (CASTING int_64)(int_32 $1)
	CALL printi($7)
	$8 = ($0 + [128])
	$10 = *(($0 + [156]))
	$9 = *(($0 + [152]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$2 }
	
.LOOP $label$4:
	$1 = ($10 + [-24])
	$11 = *($1)
	if ( ((int_64)*($11) == (int_64)$7) ){ goto $label$3 }
	$10 = $1
	if ( ((int_32)$9 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($11 + [68]) == (int_32)$8), [10976])
	$5 = $11
	goto $label$1 
	
.LABEL $label$2
	$1 = CALL db_find_i64(*($8), *(($0 + [136])), (int_64)-6497942333781180416, $7)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $79($8, $1)
	CALL eosio_assert(((int_32)*($5 + [68]) == (int_32)$8), [10976])
	
.LABEL $label$1
	$12 = [0]
	$13 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($13, [9522])
	$14 = *(($5 + [48]))
	$15 = *($5 + [40])
	$7 = *($5 + [24])
	$16 = *($5 + [8])
	$17 = *($5 + [16])
	CALL eosio_assert((((int_32)$17 == (int_32)*([0] + [8192])) | ((int_32)$17 == (int_32)*([0] + [8194]))), [9935])
	$18 = ($0 + [88])
	$10 = *(($0 + [116]))
	$9 = *(($0 + [112]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$6 }
	
.LOOP $label$8:
	$1 = ($10 + [-24])
	$11 = *($1)
	if ( ((int_64)*($11) == (int_64)$7) ){ goto $label$7 }
	$10 = $1
	if ( ((int_32)$9 != (int_32)$1) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($11 + [60]) == (int_32)$18), [10976])
	$12 = $11
	goto $label$5 
	
.LABEL $label$6
	$1 = CALL db_find_i64(*($18), *(($0 + [96])), (int_64)-6146428328942239744, $7)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$5 }
	$12 = CALL $25($18, $1)
	CALL eosio_assert(((int_32)*($12 + [60]) == (int_32)$18), [10976])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [9252])
	*(($1 = (($4 + [144]) + [8]))) = *(($12 + [8]))
	*($4 + [144]) = *($12)
	$10 = CALL $174((($4 + [144]) + [16]), ($12 + [16]))
	*((($4 + [144]) + [52])) = *(($12 + [52]))
	*((($4 + [144]) + [44])) = *(($12 + [44]))
	*((($4 + [144]) + [36])) = *(($12 + [36]))
	*($4 + [172 align=4]) = *($12 + [28 align=4])
	CALL eosio_assert(((int_32)$17 != (int_32)[10]), [9984])
	CALL eosio_assert(((int_64)$16 != (int_64)$3), [10009])
	CALL eosio_assert(((int_64)*($1) == (int_64)$16), [10041])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$14), [10084])
	CALL $2(($4 + [72]), $0)
	CALL eosio_assert(((uint_64)*($2) > (uint_64)((int_64)((int_64)((uint_64)*($4 + [88]) / (uint_64)(int_64)10000) + (int_64)1) * (int_64)$15)), [10119])
	$16 = *($0)
	$19 = *($1)
	$7 = (int_64)6
	
.LOOP $label$9:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$9 }
	$7 = *($4 + [144])
	*(($1 = CALL _Znwj([16])) + [8]) = (int_64)3617214756542218240
	*($1) = $16
	*($4 + [232]) = $3
	*(($4 + [32])) = *($4 + [232])
	*($4 + [224]) = $7
	*($4 + [240]) = $1
	$1 = ($1 + [16])
	*($4 + [248]) = $1
	*($4 + [244]) = $1
	*($4 + [24]) = *($4 + [224])
	CALL $73($16, (int_64)-3617168760266640896, ($4 + [240]), ($4 + [24]))
	$1 = *($4 + [240])
	if ( ($1 == 0) ){ goto $label$10 }
	*($4 + [244]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	CALL eosio_assert($13, [11275])
	CALL eosio_assert($13, [11309])
	$1 = CALL db_next_i64(*($5 + [72]), ($4 + [224]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$11 }
	CALL $79($8, $1)
	
.LABEL $label$11
	CALL $71($8, $5)
	*($4 + [64]) = $14
	*($4 + [56]) = $15
	CALL $179(($4 + [40]), [10186], $6)
	*(($4 + [16])) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	CALL $80($0, $19, ($4 + [8]), ($4 + [40]))
	if ( (*($4 + [40]) & [1]) ){ goto $label$16 }
	if ( (*($10) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*($4 + [48]))
	if ( ((*($10) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($4 + [168])))
	if ( ((*($4 + [208]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	if ( (*($4 + [208]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	$global$0 = ($4 + [256])
	return 
	
.LABEL $label$12
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($4 + [256])
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [11027])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $198($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*($3 + [36]) = $7
	*($3 + [32]) = $7
	*($3 + [40]) = ($7 + $6)
	*(($9 = CALL _Znwj([80])) + [32]) = (int_64)0
	*($9 + [8]) = (int_64)0
	*($9 + [40]) = (int_64)0
	*($9 + [48]) = (int_64)1397703940
	CALL eosio_assert([1], [10856])
	$10 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$10 = $11
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$10 = $11
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [10905])
	*($9 + [68]) = $0
	CALL $164(($3 + [32]), $9)
	*($9 + [76]) = [-1]
	*($9 + [72]) = $1
	*($3 + [24]) = $9
	$10 = *($9)
	*($3 + [16]) = $10
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $10
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $68($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $201($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [48])
	return $9
}

void .FUNC $98 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [11094])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [11140])
	*(($4 = $3) + [16]) = *(($1 + [8]))
	$5 = *($1)
	*($1 + [48]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [11191])
	$6 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($7 + [45])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [16])
	$9 = ($1 + [48])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$3 = CALL $198($6)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = ($3 + $6)
	*($4 + [24]) = $4
	*($4 + [40]) = $7
	*($4 + [64]) = $9
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [44]) = ($1 + [28])
	*($4 + [48]) = ($1 + [32])
	*($4 + [52]) = ($1 + [36])
	*($4 + [56]) = ($1 + [40])
	*($4 + [60]) = ($1 + [44])
	*($4 + [68]) = ($1 + [52])
	*($4 + [72]) = ($1 + [56])
	CALL $144(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [64]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL $201($3)
	
.LABEL $label$4
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($4 + [32]) = *(($1 + [8]))
	if ( (CALL $196(($4 + [16]), ($4 + [32]), [8]) == 0) ){ goto $label$6 }
	$6 = *($1 + [68])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$7 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6146428328942239744, ($4 + [24]), $5)
	*(($1 + [68])) = $6
	
.LABEL $label$7
	CALL db_idx64_update($6, $2, ($4 + [32]))
	
.LABEL $label$6
	$global$0 = ($4 + [80])
}

void .FUNC $99 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth($1)
	CALL eosio_assert([1], [10856])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [10905])
	$4 = [0]
	*((($2 + [8]) + [32])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$5 = *($0)
	*($2 + [8]) = $5
	*($2 + [16]) = $1
	$3 = (int_64)5459781
	$6 = [1]
	$7 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, (int_64)5459781)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(CALL $100(($2 + [8]), $7) + [16]) == (int_32)($2 + [8])), [10976])
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [10593])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$5()), [10925])
	*(($8 = CALL _Znwj([32])) + [8]) = (int_64)1397703940
	*($8) = (int_64)0
	CALL eosio_assert([1], [10856])
	$9 = ($8 + [8])
	
.LOOP $label$8:
	$10 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $5
	$10 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$3 = $5
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$10 }
	$10 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert($10, [10905])
	*($8 + [16]) = ($2 + [8])
	*(($4 = ($8 + [8]))) = (int_64)1397703940
	*($8) = (int_64)0
	CALL eosio_assert([1], [10850])
	CALL memcpy(($2 + [64]), $8, [8])
	CALL eosio_assert([1], [10850])
	CALL memcpy((($2 + [64]) | [8]), $9, [8])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8
	$6 = CALL db_store_i64(*((($2 + [8]) + [8])), (int_64)3607749779137757184, $1, $3), ($2 + [64]), [16]
	*($8 + [20]) = $6)
	$7 = (($2 + [8]) + [16])
	if ( (uint_64)($3 <= *($7)) ){ goto $label$11 }
	*($7) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$11
	*($2 + [56]) = $8
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8
	*($2 + [64]) = $3)
	*($2 + [52]) = $6
	$7 = ($2 + [36])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($2 + [40]))) ){ goto $label$14 }
	*($4 + [8]) = $3
	*($4 + [16]) = $6
	*($2 + [56]) = [0]
	*($4) = $8
	*($7) = ($4 + [24])
	$4 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( $4 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $101(($2 + [32]), ($2 + [56]), ($2 + [64]), ($2 + [52]))
	$4 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv($4)
	
.LABEL $label$12
	CALL $32($0, [10])
	$7 = *($2 + [32])
	if ( ($7 == 0) ){ goto $label$15 }
	$8 = ($2 + [36])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$17 }
	
.LOOP $label$18:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$19 }
	CALL _ZdlPv($6)
	
.LABEL $label$19
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$18 }
	$4 = *(($2 + [32]))
	goto $label$16 
	
.LABEL $label$17
	$4 = $7
	
.LABEL $label$16
	*($8) = $7
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$global$0 = ($2 + [80])
}

void .FUNC $94 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [11094])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [11140])
	*(($4 = $3) + [16]) = *(($1 + [8]))
	$5 = *($1)
	*($1 + [40]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [11191])
	$6 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($7 + [45])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [16])
	$9 = ($1 + [40])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$3 = CALL $198($6)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = ($3 + $6)
	*($4 + [24]) = $4
	*($4 + [40]) = $7
	*($4 + [56]) = $9
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [44]) = ($1 + [28])
	*($4 + [48]) = ($1 + [32])
	*($4 + [52]) = ($1 + [36])
	*($4 + [60]) = ($1 + [44])
	*($4 + [64]) = ($1 + [48])
	*($4 + [68]) = ($1 + [52])
	*($4 + [72]) = ($1 + [56])
	CALL $144(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [64]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL $201($3)
	
.LABEL $label$4
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($4 + [32]) = *(($1 + [8]))
	if ( (CALL $196(($4 + [16]), ($4 + [32]), [8]) == 0) ){ goto $label$6 }
	$6 = *($1 + [68])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$7 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6146428328942239744, ($4 + [24]), $5)
	*(($1 + [68])) = $6
	
.LABEL $label$7
	CALL db_idx64_update($6, $2, ($4 + [32]))
	
.LABEL $label$6
	$global$0 = ($4 + [80])
}

void .FUNC $95 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = ($0 + [88])
	$5 = *(($0 + [116]))
	$4 = *(($0 + [112]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)$3), [10976])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [96])), (int_64)-6146428328942239744, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $25($3, $6)
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)$3), [10976])
	
.LABEL $label$1
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [8524])
	*(($6 = (($2 + [80]) + [8]))) = *(($7 + [8]))
	*($2 + [80]) = *($7)
	$9 = CALL $174((($2 + [80]) + [16]), ($7 + [16]))
	*((($2 + [80]) + [52])) = *(($7 + [52]))
	*((($2 + [80]) + [44])) = *(($7 + [44]))
	*((($2 + [80]) + [36])) = *(($7 + [36]))
	*($2 + [108 align=4]) = *($7 + [28 align=4])
	CALL require_auth(*($6))
	CALL $2(($2 + [8]), $0)
	$5 = [0]
	$4 = *($2 + [44])
	$10 = ((uint_32)((int_32)((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) - *($2 + [120])) * (int_32)$4) / (uint_32)*($2 + [36]))
	if ( ($10 <= $4) ){ goto $label$5 }
	$5 = ((uint_32)($10 - $4) / (uint_32)*($2 + [45]))
	
.LABEL $label$5
	CALL eosio_assert(((int_32)(*($2 + [32]) - $5) > (int_32)[0]), [10519])
	CALL eosio_assert(((uint_32)*($2 + [124]) <= (uint_32)*($2 + [128])), [10536])
	CALL eosio_assert(((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$10() / (uint_64)(int_64)1000000)) - *($2 + [128])) > (uint_32)*($2 + [48])), [10553])
	$1 = *($6)
	CALL eosio_assert($8, [11059])
	CALL $96($3, $7, $1)
	CALL $32($0, [10])
	if ( ((*($9) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$6
	$global$0 = ($2 + [144])
}

void .FUNC $96 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [11094])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [11140])
	*(($4 = $3) + [16]) = *(($1 + [8]))
	$5 = *($1)
	*($1 + [44]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [11191])
	$6 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($7 + [45])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [16])
	$9 = ($1 + [44])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$3 = CALL $198($6)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = ($3 + $6)
	*($4 + [24]) = $4
	*($4 + [40]) = $7
	*($4 + [60]) = $9
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [44]) = ($1 + [28])
	*($4 + [48]) = ($1 + [32])
	*($4 + [52]) = ($1 + [36])
	*($4 + [56]) = ($1 + [40])
	*($4 + [64]) = ($1 + [48])
	*($4 + [68]) = ($1 + [52])
	*($4 + [72]) = ($1 + [56])
	CALL $144(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [64]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL $201($3)
	
.LABEL $label$4
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($4 + [32]) = *(($1 + [8]))
	if ( (CALL $196(($4 + [16]), ($4 + [32]), [8]) == 0) ){ goto $label$6 }
	$6 = *($1 + [68])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$7 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6146428328942239744, ($4 + [24]), $5)
	*(($1 + [68])) = $6
	
.LABEL $label$7
	CALL db_idx64_update($6, $2, ($4 + [32]))
	
.LABEL $label$6
	$global$0 = ($4 + [80])
}

void .FUNC $97 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = ($0 + [88])
	$5 = *(($0 + [116]))
	$4 = *(($0 + [112]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)$3), [10976])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [96])), (int_64)-6146428328942239744, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $25($3, $6)
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)$3), [10976])
	
.LABEL $label$1
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [8524])
	*(($6 = (($2 + [80]) + [8]))) = *(($7 + [8]))
	*($2 + [80]) = *($7)
	$9 = CALL $174((($2 + [80]) + [16]), ($7 + [16]))
	*((($2 + [80]) + [52])) = *(($7 + [52]))
	*((($2 + [80]) + [44])) = *(($7 + [44]))
	*((($2 + [80]) + [36])) = *(($7 + [36]))
	*($2 + [108 align=4]) = *($7 + [28 align=4])
	CALL require_auth(*($6))
	CALL $2(($2 + [8]), $0)
	$5 = [0]
	$4 = *($2 + [44])
	$10 = ((uint_32)((int_32)((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) - *($2 + [120])) * (int_32)$4) / (uint_32)*($2 + [36]))
	if ( ($10 <= $4) ){ goto $label$5 }
	$5 = ((uint_32)($10 - $4) / (uint_32)*($2 + [45]))
	
.LABEL $label$5
	CALL eosio_assert(((int_32)(*($2 + [32]) - $5) > (int_32)[0]), [10562])
	CALL eosio_assert(((uint_32)*($2 + [124]) > (uint_32)*($2 + [128])), [10579])
	CALL eosio_assert(((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$10() / (uint_64)(int_64)1000000)) - *($2 + [124])) > (uint_32)*($2 + [52])), [10501])
	$1 = *($6)
	CALL eosio_assert($8, [11059])
	CALL $98($3, $7, $1)
	CALL $32($0, [10])
	if ( ((*($9) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$6
	$global$0 = ($2 + [144])
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [11339])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [11384])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [11434])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($6 + [24])))
	
.LABEL $label$13
	CALL _ZdlPv($6)
	
.LABEL $label$12
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [64]))
	$6 = *($1 + [68])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6146428328942239744, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

void .FUNC $91 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	*($3 + [72]) = $2
	$4 = ($0 + [88])
	$6 = *(($0 + [116]))
	$5 = *(($0 + [112]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [60]) == (int_32)$4), [10976])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [96])), (int_64)-6146428328942239744, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $25($4, $7)
	CALL eosio_assert(((int_32)*($8 + [60]) == (int_32)$4), [10976])
	
.LABEL $label$1
	$6 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($6, [8524])
	*((($3 + [8]) + [8])) = *(($8 + [8]))
	*($3 + [8]) = *($8)
	$5 = CALL $174((($3 + [8]) + [16]), ($8 + [16]))
	*((($3 + [8]) + [52])) = *(($8 + [52]))
	*((($3 + [8]) + [44])) = *(($8 + [44]))
	*((($3 + [8]) + [36])) = *(($8 + [36]))
	*($3 + [36 align=4]) = *($8 + [28 align=4])
	$7 = [1]
	if ( CALL has_auth(*($0)) ){ goto $label$5 }
	$7 = CALL has_auth(*($3 + [16]))
	
.LABEL $label$5
	CALL eosio_assert($7, [10438])
	*($3) = ($3 + [72])
	CALL eosio_assert($6, [11059])
	CALL $92($4, $8, $3)
	CALL $32($0, [10])
	if ( ((*($5) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$6
	$global$0 = ($3 + [80])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [11094])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [11140])
	$5 = ($1 + [8])
	*(($4 = $3) + [16]) = *($5)
	*($5) = *(*($2))
	$6 = *($1)
	CALL eosio_assert([1], [11191])
	$2 = *($1 + [16])
	$5 = ( *(($1 + [20])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($5 + [45])
	$7 = (CASTING uint_64)(uint_32 $5)
	$5 = ($1 + [16])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $198($2)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = ($3 + $2)
	*($4 + [24]) = $4
	*($4 + [40]) = $5
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [44]) = ($1 + [28])
	*($4 + [48]) = ($1 + [32])
	*($4 + [52]) = ($1 + [36])
	*($4 + [56]) = ($1 + [40])
	*($4 + [60]) = ($1 + [44])
	*($4 + [64]) = ($1 + [48])
	*($4 + [68]) = ($1 + [52])
	*($4 + [72]) = ($1 + [56])
	CALL $144(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [64]), (int_64)0, $3, $2)
	if ( ($2 <= [513]) ){ goto $label$4 }
	CALL $201($3)
	
.LABEL $label$4
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($4 + [32]) = *(($1 + [8]))
	if ( (CALL $196(($4 + [16]), ($4 + [32]), [8]) == 0) ){ goto $label$6 }
	$2 = *($1 + [68])
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$7 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6146428328942239744, ($4 + [24]), $6)
	*(($1 + [68])) = $2
	
.LABEL $label$7
	CALL db_idx64_update($2, (int_64)0, ($4 + [32]))
	
.LABEL $label$6
	$global$0 = ($4 + [80])
}

void .FUNC $93 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = ($0 + [88])
	$5 = *(($0 + [116]))
	$4 = *(($0 + [112]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)$3), [10976])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [96])), (int_64)-6146428328942239744, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $25($3, $6)
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)$3), [10976])
	
.LABEL $label$1
	$4 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($4, [8524])
	*((($2 + [80]) + [8])) = *(($7 + [8]))
	*($2 + [80]) = *($7)
	$8 = CALL $174((($2 + [80]) + [16]), ($7 + [16]))
	*((($2 + [80]) + [52])) = *(($7 + [52]))
	*((($2 + [80]) + [44])) = *(($7 + [44]))
	*((($2 + [80]) + [36])) = *(($7 + [36]))
	*($2 + [108 align=4]) = *($7 + [28 align=4])
	CALL $2(($2 + [8]), $0)
	$6 = [0]
	$5 = *($2 + [44])
	$9 = ((uint_32)((int_32)((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) - *($2 + [120])) * (int_32)$5) / (uint_32)*($2 + [36]))
	if ( ($9 <= $5) ){ goto $label$5 }
	$6 = ((uint_32)($9 - $5) / (uint_32)*($2 + [45]))
	
.LABEL $label$5
	CALL eosio_assert(((int_32)(*($2 + [32]) - $6) > (int_32)[0]), [10486])
	CALL eosio_assert(((uint_32)*($2 + [124]) <= (uint_32)*($2 + [128])), [10501])
	CALL eosio_assert(((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$10() / (uint_64)(int_64)1000000)) - *(($2 + [120]))) > (uint_32)*($2 + [40])), [10508])
	$1 = *($2 + [88])
	CALL eosio_assert($4, [11059])
	CALL $94($3, $7, $1)
	CALL $32($0, [10])
	if ( ((*($8) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($2 + [104])))
	
.LABEL $label$6
	$global$0 = ($2 + [144])
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10850])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [10850])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $139 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($4 - $5)) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = [2147483647]
	if ( ((uint_32)$4 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($4 << [1])
	$2 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$6
	$5 = CALL _Znwj($2)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $2)
	CALL memcpy($5, $1, $3)
	$1 = ($0 + [4])
	$0 = (*($0 + [4]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$4 = (*($0 + [4]) - $5)
	$6 = ( ($1 + $4) ? $2 : ((uint_32)$3 > (uint_32)$4) )
	$7 = ($6 - $1)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $7)
	
.LABEL $label$7
	$1 = ($0 + [4])
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$8 }
	$0 = ($2 - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(*($1), $6, $0)
	$0 = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$8
	$0 = ($5 + $7)
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $186($0)
}

int_32 .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [11055])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = ($6 - $7)
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $141($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + $2)
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((int_32)*($5) != (int_32)$3), [11050])
	CALL memcpy($7, *($2), [1])
	$3 = (*($2) + [1])
	*($2) = $3
	$7 = ($7 + [1])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$1 = CALL $168($2, ($1 + [16]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*(*($0)) + int_32($5 >> [1]))
	$7 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$7 = *((*($6) + $7))
	
.LABEL $label$1
	$0 = CALL $168(($2 + [24]), $1)
	CALL void $6((int_32 ($4 & [255])), (int_32 $3), (int_64 $0), (int_32 $7))
	$7 = *($0 + [12])
	if ( ($7 == 0) ){ goto $label$2 }
	*(($0 + [16])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$2
	$7 = *($0)
	if ( ($7 == 0) ){ goto $label$3 }
	*($0 + [4]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$3
	$0 = *($1 + [12])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($1 + [16])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$0 = *($1)
	if ( ($0 == 0) ){ goto $label$5 }
	*($1 + [4]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$global$0 = ($2 + [48])
}

void .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11050])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [11050])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [11050])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [11050])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((int_32)*($1 + [8]) != (int_32)*($1 + [4])), [11050])
	CALL memcpy(($3 + [32]), *($1 + [4]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$1 = CALL $174($2, ($1 + [8]))
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*(*($0)) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($5) + $0))
	
.LABEL $label$1
	$4 = CALL $174(($2 + [16]), $1)
	CALL void $5((int_32 $3), (int_64 $4), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11050])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11050])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11050])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [11050])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [11050])
	CALL memcpy(($0 + [32]), *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$1 = CALL $174($2, ($1 + [8]))
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*(*($0)) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($5) + $0))
	
.LABEL $label$1
	$4 = CALL $174(($2 + [16]), $1)
	CALL void $5((int_32 $3), (int_64 $4), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$1 = CALL $174($2, ($1 + [4]))
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*(*($0)) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($5) + $0))
	
.LABEL $label$1
	$4 = CALL $174(($2 + [16]), $1)
	CALL void $5((int_32 $3), (int_32 $4), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10850])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10850])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10850])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $200 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11740]) == 0) ){ goto $label$2 }
	$2 = *([0] + [11744])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [11740]) = [1]
	$2 = ($2 << [16])
	*([0] + [11744]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11744])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [11744]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [11740]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [11740]) = [1]
	$3 = ($3 << [16])
	*([0] + [11744]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11744])
	
.LABEL $label$10
	*([0] + [11744]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $201 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [20132])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19940]
	$3 = (((int_32)$1 * (int_32)[12]) + [19940])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $181 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $183($1, $0, [9064])
	CALL $184()
	(unreachable)
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [11055])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $167($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [11050])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$1 = CALL $174($2, ($1 + [8]))
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*(*($0)) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($5) + $0))
	
.LABEL $label$1
	$4 = CALL $174(($2 + [16]), $1)
	CALL void $5((int_32 $3), (int_64 $4), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL $2(($2 + [8]), $0)
	*($2 + [66]) = $1
	CALL $3(($0 + [288]), ($2 + [8]), *($0))
	$global$0 = ($2 + [80])
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL $2(($2 + [8]), $0)
	*($2 + [60]) = $1
	CALL $3(($0 + [288]), ($2 + [8]), *($0))
	$global$0 = ($2 + [80])
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $198($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [11050])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [11050])
	$7 = (($3 + [8]) + [8])
	CALL memcpy($7, ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [11050])
	$6 = (($3 + [8]) + [16])
	CALL memcpy($6, ($2 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $201($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$8 = *($6)
	$9 = *($7)
	$10 = *($3 + [8])
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $10), (int_64 $9), (int_64 $8), (int_64 $5))
	$global$0 = ($3 + [32])
	return [1]
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = CALL action_data_size()
	if ( ($6 == 0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$1 = CALL $198($6)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $6)
	
.LABEL $label$1
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = [0]
	*($3 + [52]) = $1
	*($3 + [48]) = $1
	*($3 + [56]) = ($1 + $6)
	*($3 + [64]) = ($3 + [48])
	*($3 + [72]) = ($3 + [8])
	CALL $132(($3 + [72]), ($3 + [64]))
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL $201($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	$6 = *(($3 + [40]))
	$7 = *(($3 + [32]))
	$8 = *(($3 + [24]))
	$9 = *(($3 + [16]))
	$10 = *($3 + [8])
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $10), (int_64 $9), (int_64 $8), (int_64 $7), (int_64 ($6 & [255])), (int_32 $5))
	$global$0 = ($3 + [80])
	return [1]
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $198($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [11050])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [11050])
	$6 = ($3 + [8])
	CALL memcpy($6, ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $201($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($6)
	$8 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $198($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [56]) = ($1 + $0)
	*($3 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [11050])
	CALL memcpy(($3 + [8]), $1, [8])
	*($3 + [52]) = ($1 + [8])
	CALL $127(($3 + [48]), (($3 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $201($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $133(($3 + [48]), ($3 + [8]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [80])
	$global$0 = $2
	*($0 + [8]) = (int_64)1
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)100
	*($0 + [24]) = [100]
	*($0 + [28 align=4]) = (int_64)46385646926400
	*($0 + [36]) = [356]
	*($0 + [40]) = (int_64)61847529091200
	*($0 + [48]) = (int_64)257698041360
	*($0 + [56]) = (int_64)662548
	*($0 + [64]) = [0]
	$3 = ($1 + [288])
	$4 = *(($1 + [316]))
	if ( ((int_32)$4 == (int_32)*(($1 + [312]))) ){ goto $label$5 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$3), [10976])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = CALL db_find_i64(*($3), *(($1 + [296])), (int_64)-6146698476238372864, (int_64)-6146698476238372864)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $4($3, $4) + [72]) == (int_32)$3), [10976])
	
.LABEL $label$4
	$4 = *(($1 + [316]))
	if ( ((int_32)$4 == (int_32)*(($1 + [312]))) ){ goto $label$2 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$3), [10976])
	goto $label$1 
	
.LABEL $label$3
	*($0) = (int_64)0
	*(($0 + [8])) = (int_64)1
	*(($0 + [16])) = (int_64)100
	*(($0 + [24])) = [100]
	*($0 + [25 align=1]) = *($2 + [8 align=1])
	*(($0 + [28])) = (int_64)46385646926400
	*(($0 + [36])) = [356]
	*(($0 + [40])) = (int_64)61847529091200
	*(($0 + [48])) = (int_64)257698041360
	*(($0 + [56])) = (int_64)662548
	*(($0 + [64])) = [0]
	*(($0 + [27])) = *(($2 + [10]))
	CALL $3($3, $0, *($1))
	$global$0 = ($2 + [80])
	return 
	
.LABEL $label$2
	$4 = [0]
	$1 = CALL db_find_i64(*(($1 + [288])), *(($1 + [296])), (int_64)-6146698476238372864, (int_64)-6146698476238372864)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $4($3, $1)
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$3), [10976])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [11250])
	CALL memcpy(($2 + [8]), $4, [72])
	CALL memcpy($0, ($2 + [8]), [66])
	$global$0 = ($2 + [80])
}

int_32 .FUNC $126 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [312]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [316])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [312]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [272]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [276])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [272]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [232]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [236])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [232]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [192]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [196])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [192]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [152]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [156])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [152]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$26 }
	$2 = ($0 + [116])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$28 }
	
.LOOP $label$29:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$30 }
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$31
	CALL _ZdlPv($4)
	
.LABEL $label$30
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$29 }
	$3 = *(($0 + [112]))
	goto $label$27 
	
.LABEL $label$28
	$3 = $1
	
.LABEL $label$27
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$26
	$2 = *(($0 + [72]))
	if ( ($2 == 0) ){ goto $label$32 }
	$5 = ($0 + [76])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$34 }
	
.LOOP $label$35:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$36 }
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$37 }
	*(($4 + [12])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$37
	CALL _ZdlPv($4)
	
.LABEL $label$36
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$35 }
	$3 = *(($0 + [72]))
	goto $label$33 
	
.LABEL $label$34
	$3 = $2
	
.LABEL $label$33
	*($5) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$32
	$2 = *(($0 + [32]))
	if ( ($2 == 0) ){ goto $label$38 }
	$5 = ($0 + [36])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$40 }
	
.LOOP $label$41:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$42 }
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$43 }
	*(($4 + [12])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$43
	CALL _ZdlPv($4)
	
.LABEL $label$42
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$41 }
	$3 = *(($0 + [32]))
	goto $label$39 
	
.LABEL $label$40
	$3 = $2
	
.LABEL $label$39
	*($5) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$38
	return $0
}

int_32 .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $198($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [56]) = ($1 + $0)
	*($3 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [11050])
	CALL memcpy(($3 + [8]), $1, [8])
	*($3 + [52]) = ($1 + [8])
	CALL $127(($3 + [48]), (($3 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $201($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $135(($3 + [48]), ($3 + [8]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

int_32 .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $198($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [8]) = [0]
	*($3 + [72]) = ($1 + $0)
	*($3 + [64]) = $1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [11050])
	CALL memcpy(($3 + [8]), $1, [1])
	CALL eosio_assert(((uint_32)($0 + [-1]) > (uint_32)[7]), [11050])
	CALL memcpy((($3 + [8]) + [8]), ($1 + [1]), [8])
	*($3 + [68]) = ($1 + [9])
	CALL $129(($3 + [64]), ($3 + [24]))
	$2 = ($3 + [36])
	CALL $130(($3 + [64]), $2)
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $201($1)
	
.LABEL $label$4
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $131(($3 + [64]), ($3 + [8]))
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [40])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$1 = *(($3 + [24]))
	if ( ($1 == 0) ){ goto $label$6 }
	*(($3 + [28])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$global$0 = ($3 + [80])
	return [1]
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $186($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $15 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL eosio_assert(((int_32)*($2 + [4]) != (int_32)*($2)), [8243])
	$4 = ($0 + [48])
	$6 = *(($0 + [76]))
	$5 = *(($0 + [72]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)$4), [10976])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [56])), (int_64)6076804294378520576, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $16($4, $7)
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)$4), [10976])
	
.LABEL $label$1
	$5 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($5, [8372])
	*((($3 + [8]) + [12])) = (int_64)0
	*($3 + [16]) = [0]
	*($3 + [8]) = *($8)
	$7 = (*(($8 + [12])) - *($8 + [8]))
	if ( ($7 == 0) ){ goto $label$6 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL _Znwj($7)
	*((($3 + [8]) + [8])) = $6
	*(($3 + [24])) = ($6 + $7)
	*(($9 = (($3 + [8]) + [12]))) = $6
	$10 = *(($8 + [8]))
	$7 = (*(($8 + [12])) - $10)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $10, $7)
	*($9) = ($6 + $7)
	
.LABEL $label$6
	$1 = *($0)
	*($3) = $2
	CALL eosio_assert($5, [11059])
	CALL $17($4, $8, $1, $3)
	$7 = *($3 + [16])
	if ( ($7 == 0) ){ goto $label$7 }
	*(($3 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$5
	CALL $186(($3 + [16]))
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [11027])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $198($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([32])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [20]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [11050])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $130(($3 + [32]), ($5 + [8]))
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $14(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $201($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [11094])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [11140])
	$6 = [8]
	$7 = *($1)
	$8 = $7
	$3 = *($3)
	$9 = ($1 + [8])
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$1 }
	CALL $139($9, *($3), *($3 + [4]))
	$8 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$7 == (int_64)$8), [11191])
	$10 = *($1 + [8])
	$3 = *(($1 + [12]))
	$11 = ($3 - $10)
	$8 = (CASTING uint_64)(uint_32 $11)
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	$3 = ( $6 ? ($11 + $6) : ((int_32)$10 == (int_32)$3) )
	if ( ($3 <= [513]) ){ goto $label$4 }
	$6 = CALL $198($3)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$3
	*($5) = $6
	*($5 + [8]) = ($6 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [10850])
	CALL memcpy($6, $1, [8])
	*($5 + [4]) = ($6 + [8])
	CALL $140($5, $9)
	CALL db_update_i64(*($1 + [24]), $2, $6, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $201($6)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL $2(($2 + [8]), $0)
	*($2 + [64]) = $1
	CALL $3(($0 + [288]), ($2 + [8]), *($0))
	$global$0 = ($2 + [80])
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL $2(($2 + [8]), $0)
	*($2 + [65]) = $1
	CALL $3(($0 + [288]), ($2 + [8]), *($0))
	$global$0 = ($2 + [80])
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL eosio_assert(((int_32)*($1 + [4]) != (int_32)*($1)), [8197])
	$3 = *($0)
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [40]) = $3
	CALL eosio_assert(((int_64)*($0 + [48]) == (int_64)CALL $fimport$5()), [10925])
	$4 = ($0 + [48])
	*($2 + [16]) = $4
	*($2 + [20]) = $2
	*($2 + [24]) = ($2 + [40])
	*(($1 = CALL _Znwj([32])) + [16]) = [0]
	*($1 + [8 align=4]) = (int_64)0
	*($1 + [20]) = $4
	CALL $13(($2 + [16]), $1)
	*($2 + [32]) = $1
	$3 = *($1)
	*($2 + [16]) = $3
	$5 = *($1 + [24])
	*($2 + [12]) = $5
	$6 = ($0 + [76])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [80]))) ){ goto $label$3 }
	*($4 + [8]) = $3
	*($4 + [16]) = $5
	*($2 + [32]) = [0]
	*($4) = $1
	*($6) = ($4 + [24])
	$0 = *($2 + [32])
	*($2 + [32]) = [0]
	if ( ($0 == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $14(($0 + [72]), ($2 + [32]), ($2 + [16]), ($2 + [12]))
	$0 = *($2 + [32])
	*($2 + [32]) = [0]
	if ( $0 ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$1
	$1 = *($0 + [8])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($0 + [12])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	CALL _ZdlPv($0)
	$global$0 = ($2 + [48])
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$4 = $2
	CALL $2(($4 + [8]), $6)
	$7 = (*($4 + [70]) + [1])
	*($4 + [70]) = $7
	CALL eosio_assert(((int_32)($7 & [65535]) != (int_32)[0]), [8568])
	CALL $3(($6 + [288]), ($4 + [8]), *($6))
	*($1) = ((int_64)*($4 + [70]) + (int_64)-1)
	$6 = [8]
	$5 = *($5 + [4])
	$7 = ($1 + [8])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$1 }
	CALL $139($7, *($5), *($5 + [4]))
	
.LABEL $label$1
	$8 = *($1 + [8])
	$5 = *(($1 + [12]))
	$9 = ($5 - $8)
	$10 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	$5 = ( $6 ? ($9 + $6) : ((int_32)$8 == (int_32)$5) )
	if ( ($5 <= [513]) ){ goto $label$4 }
	$6 = CALL $198($5)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$3
	*($4 + [8]) = $6
	*($4 + [16]) = ($6 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [10850])
	CALL memcpy($6, $1, [8])
	*($4 + [12]) = ($6 + [8])
	CALL $140(($4 + [8]), $7)
	$10 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($3 + [8]), (int_64)6076804294378520576, *(*($0 + [8])), $10, $6, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$10 >= (uint_64)*($3 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $201($6)
	if ( (uint_64)($10 <= *($3 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [80])
}

void .FUNC $185 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL eosio_assert(((int_32)*($1 + [4]) != (int_32)*($1)), [8393])
	$3 = *($0)
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [40]) = $3
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)CALL $fimport$5()), [10925])
	$4 = ($0 + [8])
	*($2 + [16]) = $4
	*($2 + [20]) = $2
	*($2 + [24]) = ($2 + [40])
	*(($1 = CALL _Znwj([32])) + [16]) = [0]
	*($1 + [8 align=4]) = (int_64)0
	*($1 + [20]) = $4
	CALL $19(($2 + [16]), $1)
	*($2 + [32]) = $1
	$3 = *($1)
	*($2 + [16]) = $3
	$5 = *($1 + [24])
	*($2 + [12]) = $5
	$6 = ($0 + [36])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [40]))) ){ goto $label$3 }
	*($4 + [8]) = $3
	*($4 + [16]) = $5
	*($2 + [32]) = [0]
	*($4) = $1
	*($6) = ($4 + [24])
	$0 = *($2 + [32])
	*($2 + [32]) = [0]
	if ( ($0 == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $20(($0 + [32]), ($2 + [32]), ($2 + [16]), ($2 + [12]))
	$0 = *($2 + [32])
	*($2 + [32]) = [0]
	if ( $0 ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$1
	$1 = *($0 + [8])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($0 + [12])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	CALL _ZdlPv($0)
	$global$0 = ($2 + [48])
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$4 = $2
	CALL $2(($4 + [8]), $6)
	$7 = (*($4 + [72]) + [1])
	*($4 + [72]) = $7
	CALL eosio_assert(((int_32)($7 & [65535]) != (int_32)[0]), [8603])
	CALL $3(($6 + [288]), ($4 + [8]), *($6))
	*($1) = ((int_64)*($4 + [72]) + (int_64)-1)
	$6 = [8]
	$5 = *($5 + [4])
	$7 = ($1 + [8])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$1 }
	CALL $139($7, *($5), *($5 + [4]))
	
.LABEL $label$1
	$8 = *($1 + [8])
	$5 = *(($1 + [12]))
	$9 = ($5 - $8)
	$10 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	$5 = ( $6 ? ($9 + $6) : ((int_32)$8 == (int_32)$5) )
	if ( ($5 <= [513]) ){ goto $label$4 }
	$6 = CALL $198($5)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$3
	*($4 + [8]) = $6
	*($4 + [16]) = ($6 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [10850])
	CALL memcpy($6, $1, [8])
	*($4 + [12]) = ($6 + [8])
	CALL $140(($4 + [8]), $7)
	$10 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($3 + [8]), (int_64)-6146393877533163520, *(*($0 + [8])), $10, $6, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$10 >= (uint_64)*($3 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $201($6)
	if ( (uint_64)($10 <= *($3 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [80])
}

void .FUNC $184 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $187 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

void .FUNC $186 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $180 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $197([8281])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8281], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $188())
	*(CALL $188()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $195($4, ($3 + [12]), $2)
	$5 = CALL $188()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $181($3)
	
.LABEL $label$1
	CALL $182($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $198($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [11050])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $201($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = CALL action_data_size()
	if ( ($6 == 0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$1 = CALL $198($6)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $6)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [56]) = ($1 + $6)
	*($3 + [48]) = $1
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [11050])
	CALL memcpy(($3 + [8]), $1, [8])
	*($3 + [52]) = ($1 + [8])
	$2 = (($3 + [8]) + [8])
	CALL $130(($3 + [48]), $2)
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL $201($1)
	
.LABEL $label$4
	*($3 + [32]) = (int_64)0
	$1 = [0]
	*($3 + [40]) = [0]
	$7 = *($3 + [8])
	$6 = (*(($3 + [20])) - *($2))
	if ( ($6 == 0) ){ goto $label$7 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL _Znwj($6)
	*((($3 + [32]) + [8])) = ($1 + $6)
	*($3 + [32]) = $1
	*($3 + [36]) = $1
	$2 = *((($3 + [8]) + [8]))
	$6 = (*(($3 + [20])) - $2)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($1, $2, $6)
	$1 = (*($3 + [36]) + $6)
	*($3 + [36]) = $1
	
.LABEL $label$7
	$2 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$8 }
	$5 = *((*($2) + $5))
	
.LABEL $label$8
	*($3 + [56]) = [0]
	*($3 + [48]) = (int_64)0
	$1 = ($1 - *($3 + [32]))
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL _Znwj($1)
	*(($3 + [56])) = ($6 + $1)
	*($3 + [48]) = $6
	*($3 + [52]) = $6
	$4 = *($3 + [32])
	$1 = (*($3 + [36]) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($6, $4, $1)
	*($3 + [52]) = ($6 + $1)
	
.LABEL $label$9
	CALL void $2((int_32 $7), (int_64 ($3 + [48])), (int_32 $5))
	$1 = *($3 + [48])
	if ( ($1 == 0) ){ goto $label$10 }
	*($3 + [52]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$1 = *($3 + [32])
	if ( ($1 == 0) ){ goto $label$11 }
	*($3 + [36]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$1 = *(($3 + [16]))
	if ( ($1 == 0) ){ goto $label$12 }
	*(($3 + [20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($3 + [64])
	return [1]
	
.LABEL $label$6
	CALL $186(($3 + [32]))
	
.LABEL $label$5
	CALL $186(($3 + [48]))
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $198($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [11050])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [11050])
	$6 = ($3 + [8])
	CALL memcpy($6, ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $201($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($6)
	$8 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $198($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [11050])
	CALL memcpy(($3 + [8]), $6, [1])
	$2 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $201($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ($2 & [255])), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $198($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [11050])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [11050])
	$6 = ($3 + [8])
	CALL memcpy($6, ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $201($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($6)
	$8 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $198($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [56]) = ($1 + $0)
	*($3 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [11050])
	CALL memcpy(($3 + [8]), $1, [8])
	*($3 + [52]) = ($1 + [8])
	CALL $127(($3 + [48]), (($3 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $201($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $128(($3 + [48]), ($3 + [8]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $198($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [11050])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $201($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $198($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[1]), [11050])
	CALL memcpy(($3 + [8]), $6, [2])
	$2 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $201($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ($2 & [65535])), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $198($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [11050])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [11050])
	$6 = ($3 + [8])
	CALL memcpy($6, ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $201($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($6)
	$8 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $198($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [11050])
	CALL memcpy(($3 + [8]), $6, [4])
	$2 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $201($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $2), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [288])
	$global$0 = $4
	*($4 + [240]) = $2
	*($4 + [239]) = $1
	CALL require_auth($2)
	CALL eosio_assert(((($1 + [-1]) & [255]) <= [3]), [8639])
	CALL eosio_assert(((int_32)int_32((*($3 + [4]) - *($3)) >> [3]) == (int_32)$1), [8659])
	$5 = ($0 + [208])
	$7 = *(($0 + [236]))
	$6 = *(($0 + [232]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$1 = ($7 + [-24])
	$8 = *($1)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$3 }
	$7 = $1
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [8]) == (int_32)$5), [10976])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$1 = CALL db_find_i64(*($5), *(($0 + [216])), (int_64)-6021055841916136064, $2)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $30($5, $1)
	CALL eosio_assert(((int_32)*($8 + [8]) == (int_32)$5), [10976])
	
.LABEL $label$1
	CALL eosio_assert(($8 == 0), [8687])
	*(($4 + [224])) = [0]
	*($4 + [208]) = (int_64)-1
	*($4 + [216]) = (int_64)0
	*($4 + [228]) = [0]
	$2 = *($0)
	*($4 + [192]) = $2
	*($4 + [200]) = $2
	*($4 + [184]) = ($4 + [192])
	*($4 + [104]) = (int_64)0
	CALL $31(($4 + [176]), ($4 + [184]), ($4 + [104]))
	CALL $2(($4 + [104]), $0)
	CALL $32($0, [10])
	$1 = *($4 + [180])
	if ( ($1 == 0) ){ goto $label$11 }
	if ( (*($1 + [12]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$1 = (*($4 + [164]) + [1])
	*($4 + [164]) = $1
	CALL eosio_assert(((uint_32)($1 & [65535]) <= (uint_32)*($4 + [162])), [8723])
	*(($4 + [76])) = (int_64)0
	*(($4 + [84])) = (int_64)0
	*($4 + [56]) = [0]
	*($4 + [48]) = (int_64)0
	*($4 + [60 align=4]) = (int_64)0
	*($4 + [68 align=4]) = (int_64)0
	CALL $33(($4 + [48]), ($4 + [240]))
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = [0]
	$2 = *($4 + [240])
	$1 = (*(($3 + [4])) - *($3))
	if ( ($1 == 0) ){ goto $label$12 }
	$7 = int_32($1 >> [3])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$9 }
	$1 = CALL _Znwj($1)
	*(($4 + [40])) = ($1 + ($7 << [3]))
	*($4 + [32]) = $1
	*($4 + [36]) = $1
	$8 = *($3)
	$7 = (*(($3 + [4])) - $8)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($1, $8, $7)
	*($4 + [36]) = (*($4 + [36]) + $7)
	
.LABEL $label$12
	CALL $34($0, ($4 + [48]), $2, ($4 + [32]), ($4 + [104]))
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$13 }
	*($4 + [36]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$2 = *($0)
	*($4 + [20]) = ($4 + [239])
	*($4 + [16]) = ($4 + [240])
	*($4 + [24]) = ($4 + [48])
	*($4 + [280]) = $2
	CALL eosio_assert(((int_64)*($4 + [192]) == (int_64)CALL $fimport$5()), [10925])
	*($4 + [260]) = ($4 + [16])
	*($4 + [256]) = ($4 + [192])
	*($4 + [264]) = ($4 + [280])
	*(($1 = CALL _Znwj([56]))) = (int_64)0
	*($1 + [12 align=4]) = (int_64)0
	*($1 + [20 align=4]) = (int_64)0
	*($1 + [28 align=4]) = (int_64)0
	*($1 + [36 align=4]) = (int_64)0
	*($1 + [44]) = ($4 + [192])
	CALL $35(($4 + [256]), $1)
	*($4 + [272]) = $1
	$2 = *($1)
	*($4 + [256]) = $2
	$8 = *($1 + [48])
	*($4 + [252]) = $8
	$6 = ($4 + [220])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($4 + [224]))) ){ goto $label$14 }
	*($7 + [8]) = $2
	*($7 + [16]) = $8
	*($4 + [272]) = [0]
	*($7) = $1
	*($6) = ($7 + [24])
	$3 = *($4 + [272])
	*($4 + [272]) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$14
	CALL $36(($4 + [216]), ($4 + [272]), ($4 + [256]), ($4 + [252]))
	$3 = *($4 + [272])
	*($4 + [272]) = [0]
	if ( $3 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$10
	$9 = CALL $37(($4 + [48]), $1)
	CALL $33($9, ($4 + [240]))
	*($4) = (int_64)0
	*($4 + [8]) = [0]
	$2 = *($4 + [240])
	$1 = (*(($3 + [4])) - *($3))
	if ( ($1 == 0) ){ goto $label$15 }
	$7 = int_32($1 >> [3])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$8 }
	$1 = CALL _Znwj($1)
	*(($4 + [8])) = ($1 + ($7 << [3]))
	*($4) = $1
	*($4 + [4]) = $1
	$8 = *($3)
	$7 = (*(($3 + [4])) - $8)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$15 }
	CALL memcpy($1, $8, $7)
	*($4 + [4]) = (*($4 + [4]) + $7)
	
.LABEL $label$15
	CALL $34($0, $9, $2, $4, ($4 + [104]))
	$1 = *($4)
	if ( ($1 == 0) ){ goto $label$16 }
	*($4 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$16
	$1 = *($4 + [180])
	*($4 + [256]) = $9
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [11059])
	CALL $38(*($4 + [184]), $1, ($4 + [256]))
	$1 = *($9 + [32])
	if ( ($1 == 0) ){ goto $label$17 }
	*(($9 + [36])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$17
	$6 = *($9 + [20])
	if ( ($6 == 0) ){ goto $label$5 }
	$3 = ($9 + [24])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$19 }
	
.LOOP $label$20:
	$7 = ($1 + [-64])
	$8 = *(($1 + [-16]))
	if ( ($8 == 0) ){ goto $label$21 }
	*(($1 + [-12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$21
	$1 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$20 }
	$1 = *(($9 + [20]))
	goto $label$18 
	
.LABEL $label$19
	$1 = $6
	
.LABEL $label$18
	*($3) = $6
	CALL _ZdlPv($1)
	goto $label$5 
	
.LABEL $label$9
	CALL $186(($4 + [32]))
	
.LABEL $label$8
	CALL $186($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	if ( ($1 == 0) ){ goto $label$22 }
	*(($3 + [36])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$22
	$6 = *($3 + [20])
	if ( ($6 == 0) ){ goto $label$23 }
	$9 = ($3 + [24])
	$1 = *($9)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$25 }
	
.LOOP $label$26:
	$7 = ($1 + [-64])
	$8 = *(($1 + [-16]))
	if ( ($8 == 0) ){ goto $label$27 }
	*(($1 + [-12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$27
	$1 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$26 }
	$1 = *(($3 + [20]))
	goto $label$24 
	
.LABEL $label$25
	$1 = $6
	
.LABEL $label$24
	*($9) = $6
	CALL _ZdlPv($1)
	
.LABEL $label$23
	CALL _ZdlPv($3)
	
.LABEL $label$6
	CALL $3(($0 + [288]), ($4 + [104]), *($0))
	$1 = *(($4 + [80]))
	if ( ($1 == 0) ){ goto $label$28 }
	*(($4 + [84])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$28
	$6 = *($4 + [68])
	if ( ($6 == 0) ){ goto $label$5 }
	$3 = ($4 + [72])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$30 }
	
.LOOP $label$31:
	$7 = ($1 + [-64])
	$8 = *(($1 + [-16]))
	if ( ($8 == 0) ){ goto $label$32 }
	*(($1 + [-12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$32
	$1 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$31 }
	$1 = *(($4 + [68]))
	goto $label$29 
	
.LABEL $label$30
	$1 = $6
	
.LABEL $label$29
	*($3) = $6
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$10 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [208])) == (int_64)CALL $fimport$5()), [10925])
	*(($1 = CALL _Znwj([24])) + [8]) = $5
	*($1) = *($4 + [240])
	CALL eosio_assert([1], [10850])
	CALL memcpy(($4 + [48]), $1, [8])
	$2 = *($1)
	$8 = CALL db_store_i64(*(($0 + [216])), (int_64)-6021055841916136064, $10, $2, ($4 + [48]), [8])
	*($1 + [12]) = $8
	$7 = ($0 + [224])
	if ( (uint_64)($2 <= *($7)) ){ goto $label$33 }
	*($7) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$33
	*($4 + [256]) = $1
	$2 = *($1)
	*($4 + [48]) = $2
	*($4 + [16]) = $8
	$6 = ($0 + [236])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [240]))) ){ goto $label$36 }
	*($7 + [8]) = $2
	*($7 + [16]) = $8
	*($4 + [256]) = [0]
	*($7) = $1
	*($6) = ($7 + [24])
	$1 = *($4 + [256])
	*($4 + [256]) = [0]
	if ( $1 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	CALL $39(($0 + [232]), ($4 + [256]), ($4 + [48]), ($4 + [16]))
	$1 = *($4 + [256])
	*($4 + [256]) = [0]
	if ( ($1 == 0) ){ goto $label$34 }
	
.LABEL $label$35
	CALL _ZdlPv($1)
	
.LABEL $label$34
	CALL $40(($4 + [216]))
	$global$0 = ($4 + [288])
	(unreachable)
	(unreachable)
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$5()), [10925])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([88])
	CALL $148($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)-6146698476238372864
	$5 = *($3 + [76])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)-6146698476238372864
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $147(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $21 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL eosio_assert(((int_32)*($2 + [4]) != (int_32)*($2)), [8393])
	$4 = ($0 + [8])
	$6 = *(($0 + [36]))
	$5 = *(($0 + [32]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)$4), [10976])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [16])), (int_64)-6146393877533163520, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $22($4, $7)
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)$4), [10976])
	
.LABEL $label$1
	$5 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($5, [8432])
	*((($3 + [8]) + [12])) = (int_64)0
	*($3 + [16]) = [0]
	*($3 + [8]) = *($8)
	$7 = (*(($8 + [12])) - *($8 + [8]))
	if ( ($7 == 0) ){ goto $label$6 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL _Znwj($7)
	*((($3 + [8]) + [8])) = $6
	*(($3 + [24])) = ($6 + $7)
	*(($9 = (($3 + [8]) + [12]))) = $6
	$10 = *(($8 + [8]))
	$7 = (*(($8 + [12])) - $10)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $10, $7)
	*($9) = ($6 + $7)
	
.LABEL $label$6
	$1 = *($0)
	*($3) = $2
	CALL eosio_assert($5, [11059])
	CALL $23($4, $8, $1, $3)
	$7 = *($3 + [16])
	if ( ($7 == 0) ){ goto $label$7 }
	*(($3 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$5
	CALL $186(($3 + [16]))
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $186($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [11094])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [11140])
	$6 = [8]
	$7 = *($1)
	$8 = $7
	$3 = *($3)
	$9 = ($1 + [8])
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$1 }
	CALL $139($9, *($3), *($3 + [4]))
	$8 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$7 == (int_64)$8), [11191])
	$10 = *($1 + [8])
	$3 = *(($1 + [12]))
	$11 = ($3 - $10)
	$8 = (CASTING uint_64)(uint_32 $11)
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	$3 = ( $6 ? ($11 + $6) : ((int_32)$10 == (int_32)$3) )
	if ( ($3 <= [513]) ){ goto $label$4 }
	$6 = CALL $198($3)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$3
	*($5) = $6
	*($5 + [8]) = ($6 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [10850])
	CALL memcpy($6, $1, [8])
	*($5 + [4]) = ($6 + [8])
	CALL $140($5, $9)
	CALL db_update_i64(*($1 + [24]), $2, $6, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $201($6)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [11027])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $198($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([32])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [20]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [11050])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $130(($3 + [32]), ($5 + [8]))
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $20(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $201($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [11027])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $198($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [8]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24]) = [0]
	*($5 + [36]) = [0]
	*($5 + [48]) = [0]
	*($5 + [60]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [28])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [36])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [44])
	*($3 + [64]) = ($5 + [48])
	*($3 + [68]) = ($5 + [52])
	*($3 + [72]) = ($5 + [56])
	CALL $142(($3 + [32]), ($3 + [24]))
	*($5 + [68]) = [-1]
	*($5 + [64]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $88(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $201($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $24 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL printui($1)
	CALL prints([8454])
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$2 }
	$2 = uint_32($4 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($2 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($2 <= [257]), [8495])
	$5 = ($0 + [88])
	$4 = *(($0 + [116]))
	$6 = *(($0 + [112]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$6:
	$2 = ($4 + [-24])
	$7 = *($2)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$5 }
	$4 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)$5), [10976])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$2 = CALL db_find_i64(*($5), *(($0 + [96])), (int_64)-6146428328942239744, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $25($5, $2)
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)$5), [10976])
	
.LABEL $label$3
	$2 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($2, [8524])
	*(($3 + [8])) = *(($7 + [8]))
	*($3) = *($7)
	$4 = CALL $174(($3 + [16]), ($7 + [16]))
	*(($3 + [52])) = *(($7 + [52]))
	*(($3 + [44])) = *(($7 + [44]))
	*(($3 + [36])) = *(($7 + [36]))
	*($3 + [28 align=4]) = *($7 + [28 align=4])
	CALL eosio_assert($2, [11059])
	CALL $26($5, $7)
	if ( ((*($4) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$7
	$global$0 = ($3 + [64])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [160])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [11094])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [11140])
	$1 = CALL memcpy($1, *($3), [66])
	CALL eosio_assert([1], [11191])
	*($4 + [72]) = ($4 + [61])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	*($4 + [80]) = ($4 + [64])
	*($4 + [92]) = ($1 + [8])
	*($4 + [88]) = $1
	*($4 + [96]) = ($1 + [16])
	*($4 + [100]) = ($1 + [24])
	*($4 + [104]) = ($1 + [28])
	*($4 + [108]) = ($1 + [32])
	*($4 + [112]) = ($1 + [36])
	*($4 + [116]) = ($1 + [37])
	*($4 + [120]) = ($1 + [40])
	*($4 + [124]) = ($1 + [44])
	*($4 + [128]) = ($1 + [48])
	*($4 + [132]) = ($1 + [52])
	*($4 + [136]) = ($1 + [56])
	*($4 + [140]) = ($1 + [57])
	*($4 + [144]) = ($1 + [58])
	*($4 + [148]) = ($1 + [60])
	*($4 + [152]) = ($1 + [62])
	*($4 + [156]) = ($1 + [64])
	CALL $149(($4 + [88]), ($4 + [80]))
	CALL db_update_i64(*($1 + [76]), $2, $4, [61])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-6146698476238372864) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-6146698476238372863
	
.LABEL $label$1
	$global$0 = ($4 + [160])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [11094])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [11140])
	*($1 + [36]) = [0]
	*(($3 = $2) + [16]) = *(($1 + [8]))
	$4 = *($1)
	$5 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	*($1 + [44]) = $5
	*($1 + [40]) = $5
	*($1 + [48]) = ($5 + [1])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [11191])
	$5 = *($1 + [16])
	$6 = ( *(($1 + [20])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [45])
	$7 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [16])
	$8 = ($1 + [48])
	$9 = ($1 + [44])
	$10 = ($1 + [40])
	$11 = ($1 + [36])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $198($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	*($3 + [24]) = $3
	*($3 + [40]) = $6
	*($3 + [52]) = $11
	*($3 + [56]) = $10
	*($3 + [60]) = $9
	*($3 + [64]) = $8
	*($3 + [32]) = $1
	*($3 + [36]) = ($1 + [8])
	*($3 + [44]) = ($1 + [28])
	*($3 + [48]) = ($1 + [32])
	*($3 + [68]) = ($1 + [52])
	*($3 + [72]) = ($1 + [56])
	CALL $144(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [64]), (int_64)0, $2, $5)
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $201($2)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($3 + [32]) = *(($1 + [8]))
	if ( (CALL $196(($3 + [16]), ($3 + [32]), [8]) == 0) ){ goto $label$6 }
	$5 = *($1 + [68])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$7 }
	$5 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6146428328942239744, ($3 + [24]), $4)
	*(($1 + [68])) = $5
	
.LABEL $label$7
	CALL db_idx64_update($5, (int_64)0, ($3 + [32]))
	
.LABEL $label$6
	$global$0 = ($3 + [80])
}

void .FUNC $101 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $186($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [11027])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $198($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*(($9 = CALL _Znwj([32])) + [8]) = (int_64)1397703940
	*($9) = (int_64)0
	CALL eosio_assert([1], [10856])
	$10 = ($9 + [8])
	$11 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$11 = $12
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$11 = $12
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [10905])
	*($9 + [16]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [11050])
	CALL memcpy($9, $7, [8])
	CALL eosio_assert(((int_32)($6 & [-8]) != (int_32)[8]), [11050])
	CALL memcpy($10, ($7 + [8]), [8])
	*($9 + [20]) = $1
	*($3 + [24]) = $9
	$11 = (uint_64)*(($9 + [8])) >> (uint_64)(int_64)8
	*($3 + [16]) = $11)
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $11
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $101($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $201($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [32])
	return $9
}

void .FUNC $103 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $global$0
	$2 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$1 }
	$1 = CALL $198($3)
	CALL read_action_data($1, $3)
	CALL $105($0, $1, $3)
	$global$0 = $2
	return 
	
.LABEL $label$1
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	CALL read_action_data($1, $3)
	CALL $105($0, $1, $3)
	$global$0 = $2
}

void .FUNC $102 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL prints([10620])
	CALL printui($1)
	CALL prints([10636])
	CALL printn($1)
	CALL prints([10646])
	CALL printui($2)
	CALL prints([10636])
	CALL printn($2)
	CALL $103(($3 + [112]))
	$2 = *($0)
	if ( ((int_64)*($3 + [112]) == (int_64)$2) ){ goto $label$2 }
	if ( ((int_64)*($3 + [120]) != (int_64)$2) ){ goto $label$2 }
	CALL prints([10664])
	$4 = ($3 + [128])
	CALL $104($4)
	$5 = (($3 + [112]) + [24])
	CALL eosio_assert(((int_64)*($5) == (int_64)1397703940), [10697])
	$6 = [0]
	if ( ((uint_64)((int_64)*($3 + [128]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$2 = (uint_64)*($5) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$2 = $1
	$6 = [1]
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$2 = $1
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $6 ){ goto $label$7 }
	$6 = [1]
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	
.LABEL $label$3
	CALL eosio_assert($6, [9353])
	CALL eosio_assert(((int_64)*($4) > (int_64)0), [10738])
	*(($3 + [104])) = [0]
	*($3 + [96]) = (int_64)0
	$5 = CALL $197([10764])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$10 }
	*($3 + [96]) = ($5 << [1])
	$8 = (($3 + [96]) | [1])
	$6 = $8
	if ( $5 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($3 + [96]) = ($7 | [1])
	*($3 + [104]) = $6
	*($3 + [100]) = $5
	$8 = (($3 + [96]) | [1])
	
.LABEL $label$9
	CALL memcpy($6, [10764], $5)
	
.LABEL $label$8
	*(($6 + $5)) = [0]
	$6 = ( *(($3 + [148])) ? uint_32($5 >> [1]) : $6 )
	$10 = ($7 & [1])
	$7 = *($3 + [96])
	$11 = ( *($3 + [100]) ? uint_32($7 >> [1]) : $10 )
	$7 = ( $11 ? $6 : ((uint_32)$6 > (uint_32)$11) )
	$5 = *($3 + [144])
	$6 = ($5 & [1])
	$9 = ( *(($3 + [152])) ? ($3 + [145]) : $6 )
	$12 = ($9 + $7)
	$5 = $12
	if ( ($11 == 0) ){ goto $label$14 }
	$5 = $12
	if ( ((int_32)$7 < (int_32)$11) ){ goto $label$14 }
	$6 = ((int_32)$6 ^ (int_32)[-1])
	$5 = ((int_32)$11 ^ (int_32)[-1])
	$13 = ($9 + ([-3] - ( $5 ? $6 : ((uint_32)$5 > (uint_32)$6) )))
	$10 = ( *($3 + [104]) ? $8 : $10 )
	$14 = (($10 + $11) + [-1])
	$16 = $12
	$15 = (($9 + $11) + [-1])
	if ( ((int_32)$15 == (int_32)$16) ){ goto $label$16 }
	
.LOOP $label$17:
	$5 = $11
	$6 = $13
	$16 = ($16 + [-1])
	if ( ((int_32)*($16) != (int_32)*($14)) ){ goto $label$18 }
	
.LOOP $label$19:
	if ( ((int_32)$5 == (int_32)[1]) ){ goto $label$15 }
	$7 = ($10 + $5)
	$8 = *($6)
	$5 = ($5 + [-1])
	$6 = ($6 + [-1])
	if ( ((int_32)$8 == (int_32)*(($7 + [-2]))) ){ goto $label$19 }
	
.LABEL $label$18
	$13 = ($13 + [-1])
	if ( ((int_32)$15 != (int_32)$16) ){ goto $label$17 }
	
.LABEL $label$16
	$5 = $12
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$5 = ($6 + [1])
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$12 }
	
.LABEL $label$13
	if ( ((($11 == 0) | ((int_32)$5 != (int_32)$12)) == 0) ){ goto $label$12 }
	$5 = CALL $174(($3 + [80]), ($3 + [144]))
	$1 = *(($4 + [8]))
	*((($3 + [64]) + [8])) = $1
	$2 = *($4)
	*((($3 + [8]) + [8])) = $1
	*($3 + [64]) = $2
	*($3 + [8]) = $2
	CALL $78($0, $5, ($3 + [8]), *($3 + [112]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($5 + [8]))
	goto $label$11 
	
.LABEL $label$12
	*(($3 + [56])) = [0]
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	$17 = *($0)
	*($3 + [24]) = $17
	$18 = *($3 + [112])
	*($3 + [32]) = $18
	CALL eosio_assert([1], [10856])
	$2 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$2 = $1
	$6 = [1]
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$23
	$2 = $1
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$21 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $6 ){ goto $label$24 }
	$6 = [1]
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$6 = [0]
	
.LABEL $label$20
	CALL eosio_assert($6, [10905])
	$6 = ($3 + [136])
	$5 = CALL db_find_i64($17, $18, (int_64)3607749779137757184, (uint_64)*($6) >> (uint_64)(int_64)8)
	if ( ((int_32)$5) < (int_32)[0]) ){ goto $label$25 }
	$5 = CALL $100(($3 + [24]), $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($3 + [24])), [10976])
	CALL eosio_assert([1], [11059])
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($3 + [24])), [11094])
	CALL eosio_assert(((int_64)*($3 + [24]) == (int_64)CALL $fimport$5()), [11140])
	$2 = *($5 + [8])
	CALL eosio_assert(((int_64)*($6) == (int_64)$2), [11647])
	$1 = ((int_64)*($5) + (int_64)*($3 + [128]))
	*($5) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [11690])
	CALL eosio_assert(((int_64)*($5) < (int_64)4611686018427387904), [11709])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$2) == (int_64)(uint_64)*($5 + [8]) >> (uint_64)(int_64)8)), [11191])
	CALL eosio_assert([1], [10850])
	CALL memcpy(($3 + [160]), $5, [8])
	CALL eosio_assert([1], [10850])
	CALL memcpy((($3 + [160]) | [8]), ($5 + [8]), [8])
	CALL db_update_i64(*($5 + [20]), (int_64)0, ($3 + [160]), [16])
	$5 = (($3 + [24]) + [16])
	if ( (uint_64)($2 <= *($5)) ){ goto $label$25 }
	*($5) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$25
	$7 = *($3 + [48])
	if ( ($7 == 0) ){ goto $label$11 }
	$8 = ($3 + [52])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$27 }
	
.LOOP $label$28:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$29 }
	CALL _ZdlPv($6)
	
.LABEL $label$29
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$28 }
	$5 = *(($3 + [48]))
	goto $label$26 
	
.LABEL $label$27
	$5 = $7
	
.LABEL $label$26
	*($8) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$11
	CALL $32($0, [10])
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($3 + [104])))
	
.LABEL $label$2
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*(($3 + [152])))
	
.LABEL $label$30
	$global$0 = ($3 + [176])
	return (unreachable)
	
.LABEL $label$1
	CALL $173(($3 + [96]))
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1397703940
	CALL eosio_assert([1], [10856])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [10905])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($3 + [12]) = $1
	*($3 + [8]) = $1
	*($3 + [16]) = ($1 + $2)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($0 + [8])
	*($3 + [32]) = $0
	*($3 + [40]) = ($0 + [16])
	*($3 + [44]) = ($0 + [32])
	CALL $165(($3 + [32]), ($3 + [24]))
	$global$0 = ($3 + [48])
}

void .FUNC $104 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$1 = $global$0
	$2 = $1
	$3 = *($0 + [8])
	$4 = (int_64)($3 == 0)
	if ( $4 ){ goto $label$2 }
	$5 = ((int_64)$3 + (int_64)1)
	$6 = (int_64)1
	
.LOOP $label$3:
	$6 = ((int_64)$6 * (int_64)10)
	$5 = ((int_64)$5 + (int_64)-1)
	if ( ((int_64)$5 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)1
	
.LABEL $label$1
	$7 = ($0 + [8])
	$8 = (CASTING uint_32)(uint_64 $3)
	$1 = ($1 - (($8 + [16]) & [496]))
	$global$0 = $1
	*(($9 = ($1 + $8))) = [0]
	$10 = *($0)
	if ( $4 ){ goto $label$4 }
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$10 % (int_64)$6)
	$0 = ($9 + [-1])
	
.LOOP $label$5:
	$11 = ((int_64)$5 / (int_64)10)
	*($0) = ((CASTING uint_32)(uint_64 (int_64))($5 - ((int_64)$11 * (int_64)10))) + [48])
	$0 = ($0 + [-1])
	$5 = $11
	$3 = ((int_64)$3 + (int_64)-1)
	if ( ((int_64)$3 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	CALL printi(((int_64)$10 / (int_64)$6))
	CALL prints([11641])
	CALL prints_l($1, $8)
	CALL prints([11643])
	CALL $166($7, [0])
	$global$0 = $2
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $198($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*((($3 + [24]) + [24])) = (int_64)1397703940
	*($3 + [32]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [40]) = (int_64)0
	CALL eosio_assert([1], [10856])
	$8 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$8 = $9
	$2 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$8 = $9
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [10905])
	*($3 + [56]) = [0]
	*($3 + [100]) = $6
	*($3 + [96]) = $6
	*($3 + [104]) = ($6 + $7)
	*($3 + [64]) = ($3 + [96])
	*($3 + [80]) = ($3 + [24])
	CALL $134(($3 + [80]), ($3 + [64]))
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL $201($6)
	
.LABEL $label$9
	*(($1 = (($3 + [64]) + [8]))) = *(($3 + [48]))
	*($3 + [64]) = *($3 + [40])
	$8 = *((($3 + [24]) + [8]))
	$2 = *(($3 + [56]))
	$9 = *($3 + [24])
	*((($3 + [80]) + [8])) = *($1)
	*($3 + [80]) = *($3 + [64])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$10 }
	$5 = *((*($1) + $5))
	
.LABEL $label$10
	$11 = *((($3 + [80]) + [8]))
	*((($3 + [96]) + [8])) = $11
	*((($3 + [8]) + [8])) = $11
	$11 = *($3 + [80])
	*($3 + [8]) = $11
	*($3 + [96]) = $11
	CALL void $1((int_32 $9), (int_64 $8), (int_64 ($3 + [8])), (int_32 $2), (int_32 $5))
	$global$0 = ($3 + [112])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [832])
	$global$0 = $3
	CALL memory()
	$4 = (int_64)7
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$2 }
	$4 = (int_64)5
	
.LOOP $label$3:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$3 }
	CALL eosio_assert(((int_64)6138663577826885632 == (int_64)$1), [10768])
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$6 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [10216]
	$7 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$12 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$8 = ($8 + [-91])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$7 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$5 }
	
.LABEL $label$6
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [10204]
	$7 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$18 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$8 = ($8 + [-91])
	goto $label$16 
	
.LABEL $label$18
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$14
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$13 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$5 }
	$4 = (int_64)7
	
.LOOP $label$19:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$19 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$4 }
	
.LABEL $label$5
	*(($3 + [520])) = $0
	*(($3 + [528])) = (int_64)-1
	*(($3 + [536])) = (int_64)0
	*(($3 + [544])) = [0]
	*(($3 + [560])) = $0
	*(($3 + [568])) = (int_64)-1
	*(($3 + [576])) = (int_64)0
	*(($3 + [584])) = [0]
	*(($3 + [600])) = $0
	*(($3 + [608])) = (int_64)-1
	*(($3 + [616])) = (int_64)0
	*(($3 + [624])) = [0]
	*(($3 + [628])) = [0]
	*($3 + [512]) = $0
	*($3 + [504]) = $0
	*($3 + [552]) = $0
	*($3 + [592]) = $0
	*($3 + [632]) = $0
	*(($3 + [648])) = (int_64)-1
	*(($3 + [640])) = $0
	*(($3 + [656])) = (int_64)0
	*(($3 + [664])) = [0]
	*(($3 + [668])) = [0]
	*(($3 + [680])) = $0
	*(($3 + [688])) = (int_64)-1
	*(($3 + [696])) = (int_64)0
	*(($3 + [704])) = [0]
	*(($3 + [720])) = $0
	*(($3 + [728])) = (int_64)-1
	*(($3 + [736])) = (int_64)0
	*(($3 + [744])) = [0]
	*(($3 + [760])) = $0
	*(($3 + [768])) = (int_64)-1
	*($3 + [672]) = $0
	*($3 + [712]) = $0
	*($3 + [752]) = $0
	*(($3 + [784])) = [0]
	*(($3 + [776])) = (int_64)0
	*(($3 + [800])) = $0
	*(($3 + [808])) = (int_64)-1
	*(($3 + [816])) = (int_64)0
	*(($3 + [824])) = [0]
	*($3 + [792]) = $0
	if ( ((int_64)$2 <= (int_64)4220811163761377279) ){ goto $label$50 }
	if ( ((int_64)$2 > (int_64)4849591924833956751) ){ goto $label$49 }
	if ( ((int_64)$2 > (int_64)4849591923046585231) ){ goto $label$47 }
	if ( ((int_64)$2 > (int_64)4849591923046458463) ){ goto $label$43 }
	if ( ((int_64)$2 == (int_64)4220811163761377280) ){ goto $label$36 }
	if ( ((int_64)$2 != (int_64)4292868757799305216) ){ goto $label$20 }
	*($3 + [380]) = [0]
	*($3 + [376]) = [1]
	*($3 + [128]) = *($3 + [376])
	CALL $107(($3 + [504]), ($3 + [128]))
	goto $label$20 
	
.LABEL $label$50
	if ( ((int_64)$2 <= (int_64)-3617168760266640897) ){ goto $label$48 }
	if ( ((int_64)$2 > (int_64)4157834731968893183) ){ goto $label$46 }
	if ( ((int_64)$2 > (int_64)3626336026884734975) ){ goto $label$42 }
	if ( ((int_64)$2 == (int_64)-3617168760266640896) ){ goto $label$35 }
	if ( ((int_64)$2 != (int_64)3626146099591359136) ){ goto $label$20 }
	*($3 + [364]) = [0]
	*($3 + [360]) = [2]
	*($3 + [144]) = *($3 + [360])
	CALL $108(($3 + [504]), ($3 + [144]))
	goto $label$20 
	
.LABEL $label$49
	if ( ((int_64)$2 > (int_64)4921565045583773695) ){ goto $label$45 }
	if ( ((int_64)$2 > (int_64)4849591929119888543) ){ goto $label$41 }
	if ( ((int_64)$2 == (int_64)4849591924833956752) ){ goto $label$34 }
	if ( ((int_64)$2 != (int_64)4849591926600184816) ){ goto $label$20 }
	*($3 + [268]) = [0]
	*($3 + [264]) = [3]
	*($3 + [240]) = *($3 + [264])
	CALL $109(($3 + [504]), ($3 + [240]))
	goto $label$20 
	
.LABEL $label$48
	if ( ((int_64)$2 <= (int_64)-4997502823550156801) ){ goto $label$44 }
	if ( ((int_64)$2 > (int_64)-3850336152056070145) ){ goto $label$40 }
	if ( ((int_64)$2 == (int_64)-4997502823550156800) ){ goto $label$33 }
	if ( ((int_64)$2 != (int_64)-4352380133890326528) ){ goto $label$20 }
	*($3 + [412]) = [0]
	*($3 + [408]) = [4]
	*($3 + [96]) = *($3 + [408])
	CALL $110(($3 + [504]), ($3 + [96]))
	goto $label$20 
	
.LABEL $label$47
	if ( ((int_64)$2 > (int_64)4849591923860683007) ){ goto $label$39 }
	if ( ((int_64)$2 == (int_64)4849591923046585232) ){ goto $label$32 }
	if ( ((int_64)$2 != (int_64)4849591923046648832) ){ goto $label$20 }
	*($3 + [324]) = [0]
	*($3 + [320]) = [5]
	*($3 + [184]) = *($3 + [320])
	CALL $111(($3 + [504]), ($3 + [184]))
	goto $label$20 
	
.LABEL $label$46
	if ( ((int_64)$2 > (int_64)4157834737613198335) ){ goto $label$38 }
	if ( ((int_64)$2 == (int_64)4157834731968893184) ){ goto $label$31 }
	if ( ((int_64)$2 != (int_64)4157834734465691856) ){ goto $label$20 }
	*($3 + [428]) = [0]
	*($3 + [424]) = [6]
	*($3 + [80]) = *($3 + [424])
	CALL $112(($3 + [504]), ($3 + [80]))
	goto $label$20 
	
.LABEL $label$45
	if ( ((int_64)$2 > (int_64)5382254363804057599) ){ goto $label$37 }
	if ( ((int_64)$2 == (int_64)4921565045583773696) ){ goto $label$30 }
	if ( ((int_64)$2 != (int_64)5031766163945160704) ){ goto $label$20 }
	*($3 + [500]) = [0]
	*($3 + [496]) = [7]
	*($3 + [8]) = *($3 + [496])
	CALL $113(($3 + [504]), ($3 + [8]))
	goto $label$20 
	
.LABEL $label$44
	if ( ((int_64)$2 == (int_64)-6497942629865488384) ){ goto $label$21 }
	if ( ((int_64)$2 == (int_64)-5288202204945296384) ){ goto $label$29 }
	if ( ((int_64)$2 != (int_64)-4997502823915585536) ){ goto $label$20 }
	*($3 + [396]) = [0]
	*($3 + [392]) = [8]
	*($3 + [112]) = *($3 + [392])
	CALL $114(($3 + [504]), ($3 + [112]))
	goto $label$20 
	
.LABEL $label$43
	if ( ((int_64)$2 == (int_64)4849591923046458464) ){ goto $label$28 }
	if ( ((int_64)$2 != (int_64)4849591923046458592) ){ goto $label$20 }
	*($3 + [308]) = [0]
	*($3 + [304]) = [9]
	*($3 + [200]) = *($3 + [304])
	CALL $115(($3 + [504]), ($3 + [200]))
	goto $label$20 
	
.LABEL $label$42
	if ( ((int_64)$2 == (int_64)3626336026884734976) ){ goto $label$27 }
	if ( ((int_64)$2 != (int_64)3966832710906806272) ){ goto $label$20 }
	*($3 + [476]) = [0]
	*($3 + [472]) = [10]
	*($3 + [32]) = *($3 + [472])
	CALL $116(($3 + [504]), ($3 + [32]))
	goto $label$20 
	
.LABEL $label$41
	if ( ((int_64)$2 == (int_64)4849591929119888544) ){ goto $label$26 }
	if ( ((int_64)$2 != (int_64)4849591930630077776) ){ goto $label$20 }
	*($3 + [340]) = [0]
	*($3 + [336]) = [11]
	*($3 + [168]) = *($3 + [336])
	CALL $117(($3 + [504]), ($3 + [168]))
	goto $label$20 
	
.LABEL $label$40
	if ( ((int_64)$2 == (int_64)-3850336152056070144) ){ goto $label$25 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$20 }
	*($3 + [260]) = [0]
	*($3 + [256]) = [12]
	*($3 + [248]) = *($3 + [256])
	CALL $118(($3 + [504]), ($3 + [248]))
	goto $label$20 
	
.LABEL $label$39
	if ( ((int_64)$2 == (int_64)4849591923860683008) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)4849591923868770816) ){ goto $label$20 }
	*($3 + [332]) = [0]
	*($3 + [328]) = [13]
	*($3 + [176]) = *($3 + [328])
	CALL $119(($3 + [504]), ($3 + [176]))
	goto $label$20 
	
.LABEL $label$38
	if ( ((int_64)$2 == (int_64)4157834737613198336) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)4157834739778757120) ){ goto $label$20 }
	*($3 + [420]) = [0]
	*($3 + [416]) = [14]
	*($3 + [88]) = *($3 + [416])
	CALL $120(($3 + [504]), ($3 + [88]))
	goto $label$20 
	
.LABEL $label$37
	if ( ((int_64)$2 == (int_64)5382254363804057600) ){ goto $label$22 }
	if ( ((int_64)$2 != (int_64)6527011819733647360) ){ goto $label$20 }
	*($3 + [492]) = [0]
	*($3 + [488]) = [15]
	*($3 + [16]) = *($3 + [488])
	CALL $116(($3 + [504]), ($3 + [16]))
	goto $label$20 
	
.LABEL $label$36
	*($3 + [484]) = [0]
	*($3 + [480]) = [16]
	*($3 + [24]) = *($3 + [480])
	CALL $116(($3 + [504]), ($3 + [24]))
	goto $label$20 
	
.LABEL $label$35
	*($3 + [460]) = [0]
	*($3 + [456]) = [17]
	*($3 + [48]) = *($3 + [456])
	CALL $121(($3 + [504]), ($3 + [48]))
	goto $label$20 
	
.LABEL $label$34
	*($3 + [356]) = [0]
	*($3 + [352]) = [18]
	*($3 + [152]) = *($3 + [352])
	CALL $117(($3 + [504]), ($3 + [152]))
	goto $label$20 
	
.LABEL $label$33
	*($3 + [372]) = [0]
	*($3 + [368]) = [19]
	*($3 + [136]) = *($3 + [368])
	CALL $114(($3 + [504]), ($3 + [136]))
	goto $label$20 
	
.LABEL $label$32
	*($3 + [316]) = [0]
	*($3 + [312]) = [20]
	*($3 + [192]) = *($3 + [312])
	CALL $119(($3 + [504]), ($3 + [192]))
	goto $label$20 
	
.LABEL $label$31
	*($3 + [436]) = [0]
	*($3 + [432]) = [21]
	*($3 + [72]) = *($3 + [432])
	CALL $122(($3 + [504]), ($3 + [72]))
	goto $label$20 
	
.LABEL $label$30
	*($3 + [388]) = [0]
	*($3 + [384]) = [22]
	*($3 + [120]) = *($3 + [384])
	CALL $123(($3 + [504]), ($3 + [120]))
	goto $label$20 
	
.LABEL $label$29
	*($3 + [452]) = [0]
	*($3 + [448]) = [23]
	*($3 + [56]) = *($3 + [448])
	CALL $124(($3 + [504]), ($3 + [56]))
	goto $label$20 
	
.LABEL $label$28
	*($3 + [300]) = [0]
	*($3 + [296]) = [24]
	*($3 + [208]) = *($3 + [296])
	CALL $115(($3 + [504]), ($3 + [208]))
	goto $label$20 
	
.LABEL $label$27
	*($3 + [348]) = [0]
	*($3 + [344]) = [25]
	*($3 + [160]) = *($3 + [344])
	CALL $108(($3 + [504]), ($3 + [160]))
	goto $label$20 
	
.LABEL $label$26
	*($3 + [284]) = [0]
	*($3 + [280]) = [26]
	*($3 + [224]) = *($3 + [280])
	CALL $120(($3 + [504]), ($3 + [224]))
	goto $label$20 
	
.LABEL $label$25
	*($3 + [292]) = [0]
	*($3 + [288]) = [27]
	*($3 + [216]) = *($3 + [288])
	CALL $120(($3 + [504]), ($3 + [216]))
	goto $label$20 
	
.LABEL $label$24
	*($3 + [276]) = [0]
	*($3 + [272]) = [28]
	*($3 + [232]) = *($3 + [272])
	CALL $125(($3 + [504]), ($3 + [232]))
	goto $label$20 
	
.LABEL $label$23
	*($3 + [444]) = [0]
	*($3 + [440]) = [29]
	*($3 + [64]) = *($3 + [440])
	CALL $112(($3 + [504]), ($3 + [64]))
	goto $label$20 
	
.LABEL $label$22
	*($3 + [468]) = [0]
	*($3 + [464]) = [30]
	*($3 + [40]) = *($3 + [464])
	CALL $116(($3 + [504]), ($3 + [40]))
	goto $label$20 
	
.LABEL $label$21
	*($3 + [404]) = [0]
	*($3 + [400]) = [31]
	*($3 + [104]) = *($3 + [400])
	CALL $107(($3 + [504]), ($3 + [104]))
	
.LABEL $label$20
	CALL $126(($3 + [504]))
	
.LABEL $label$4
	CALL $189([0])
	$global$0 = ($3 + [832])
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [28]) = $0
	*($3 + [16]) = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $198($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*(($3 + [8])) = (int_64)0
	*($3) = (int_64)0
	*($3 + [40]) = ($2 + $1)
	*($3 + [32]) = $2
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [11050])
	CALL memcpy($3, $2, [4])
	*($3 + [36]) = ($2 + [4])
	CALL $127(($3 + [32]), ($3 | [4]))
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $201($2)
	
.LABEL $label$5
	*($3 + [36]) = ($3 + [16])
	*($3 + [32]) = ($3 + [28])
	CALL $136(($3 + [32]), $3)
	if ( ((*($3 + [4]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [12])))
	
.LABEL $label$6
	$global$0 = ($3 + [48])
	return [1]
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = CALL action_data_size()
	if ( ($6 == 0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$1 = CALL $198($6)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $6)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [36]) = $1
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + $6)
	CALL $130(($3 + [32]), $3)
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL $201($1)
	
.LABEL $label$4
	$1 = [0]
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	$6 = (*($3 + [4]) - *($3))
	if ( ($6 == 0) ){ goto $label$7 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL _Znwj($6)
	*(($3 + [24])) = ($1 + $6)
	*($3 + [16]) = $1
	*($3 + [20]) = $1
	$2 = *($3)
	$6 = (*($3 + [4]) - $2)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($1, $2, $6)
	$1 = (*($3 + [20]) + $6)
	*($3 + [20]) = $1
	
.LABEL $label$7
	$2 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$8 }
	$5 = *((*($2) + $5))
	
.LABEL $label$8
	*($3 + [40]) = [0]
	*($3 + [32]) = (int_64)0
	$1 = ($1 - *($3 + [16]))
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL _Znwj($1)
	*(($3 + [40])) = ($6 + $1)
	*($3 + [32]) = $6
	*($3 + [36]) = $6
	$4 = *($3 + [16])
	$1 = (*($3 + [20]) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($6, $4, $1)
	*($3 + [36]) = ($6 + $1)
	
.LABEL $label$9
	CALL void $2((int_32 ($3 + [32])), (int_32 $5))
	$1 = *($3 + [32])
	if ( ($1 == 0) ){ goto $label$10 }
	*($3 + [36]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$1 = *($3 + [16])
	if ( ($1 == 0) ){ goto $label$11 }
	*($3 + [20]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$12 }
	*($3 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($3 + [48])
	return [1]
	
.LABEL $label$6
	CALL $186(($3 + [16]))
	
.LABEL $label$5
	CALL $186(($3 + [32]))
	(unreachable)
	return (unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [11094])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [11140])
	$5 = ($1 + [12])
	*(($4 = $3) + [24]) = *($5)
	$6 = ($1 + [20])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$1 }
	CALL $150($6, *($8 + [20]), *(($8 + [24])))
	$2 = *($2)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	CALL $151(($1 + [32]), *($2 + [32]), *(($2 + [36])))
	
.LABEL $label$1
	*($5) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [16]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [11191])
	$9 = ($1 + [16])
	$8 = *($1 + [20])
	$10 = *(($1 + [24]))
	$11 = (CASTING uint_64)(uint_32 int_32(($10 - $8) >> [6]))
	$2 = [17]
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [40])
	$13 = *($8 + [48])
	$12 = *(($8 + [52]))
	$14 = ($12 - $13)
	$11 = (CASTING uint_64)(uint_32 $14)
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$5 }
	$2 = ( $2 ? ($14 + $2) : ((int_32)$13 == (int_32)$12) )
	$8 = ($8 + [64])
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$4 }
	
.LABEL $label$3
	$12 = ($1 + [32])
	$13 = *($1 + [32])
	$8 = *(($1 + [36]))
	$14 = ($8 - $13)
	$11 = (CASTING uint_64)(uint_32 int_32($14 >> [5]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$7 }
	$2 = ((((int_32)uint_32(($14 + [-32]) >> [5]) * (int_32)[18]) + $2) + [18])
	
.LABEL $label$7
	if ( ($2 <= [513]) ){ goto $label$9 }
	$8 = CALL $198($2)
	goto $label$8 
	
.LABEL $label$9
	$8 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$8
	*($4 + [12]) = $8
	*($4 + [8]) = $8
	*($4 + [16]) = ($8 + $2)
	*($4 + [32]) = ($4 + [8])
	*($4 + [48]) = $5
	*($4 + [52]) = $9
	*($4 + [56]) = $6
	*($4 + [60]) = $12
	*($4 + [40]) = $1
	*($4 + [44]) = ($1 + [8])
	CALL $152(($4 + [40]), ($4 + [32]))
	CALL db_update_i64(*($1 + [48]), (int_64)0, $8, $2)
	if ( ($2 <= [513]) ){ goto $label$10 }
	CALL $201($8)
	
.LABEL $label$10
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($4 + [40]) = *($5)
	if ( (CALL $196(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$12 }
	$2 = *($1 + [52])
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$13 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4157834741199929344, ($4 + [32]), $7)
	*(($1 + [52])) = $2
	
.LABEL $label$13
	CALL db_idx64_update($2, (int_64)0, ($4 + [40]))
	
.LABEL $label$12
	$global$0 = ($4 + [64])
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $186($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $186($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $156(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	*($0) = *($1)
	$2 = *(($1 + [8]))
	$3 = *(($1 + [16]))
	*(($0 + [24])) = (int_64)0
	*(($0 + [16])) = $3
	*(($0 + [8])) = $2
	*($0 + [20]) = [0]
	$3 = (*(($1 + [24])) - *($1 + [20]))
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = int_32($3 >> [6])
	if ( ((uint_32)$4 >= (uint_32)[67108864]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($5 = ($0 + [24]))) = $3
	*(($0 + [28])) = ($3 + ($4 << [6]))
	*(($0 + [20])) = $3
	$6 = *(($1 + [24]))
	$4 = *(($1 + [20]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$5:
	*($3) = *($4)
	*(($3 + [40])) = *(($4 + [40]))
	*(($3 + [32])) = *(($4 + [32]))
	*(($3 + [24])) = *(($4 + [24]))
	*(($3 + [16])) = *(($4 + [16]))
	*(($3 + [8])) = *(($4 + [8]))
	*($3 + [48]) = [0]
	*(($7 = ($3 + [52]))) = (int_64)0
	$9 = ($4 + [48])
	$8 = ($4 + [52])
	$10 = (*($8) - *($9))
	if ( ($10 == 0) ){ goto $label$6 }
	$11 = ($3 + [48])
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$3 }
	$12 = CALL _Znwj($10)
	*($11) = $12
	*(($3 + [56])) = ($12 + $10)
	*($7) = $12
	$10 = *($9)
	$3 = (*($8) - $10)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($12, $10, $3)
	*($7) = (*($7) + $3)
	
.LABEL $label$6
	$3 = (*($5) + [64])
	*($5) = $3
	$4 = ($4 + [64])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$4
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	$3 = (*(($1 + [36])) - *($1 + [32]))
	if ( ($3 == 0) ){ goto $label$7 }
	$4 = int_32($3 >> [5])
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$1 }
	$3 = CALL _Znwj($3)
	*(($0 + [32])) = $3
	*(($0 + [40])) = ($3 + ($4 << [5]))
	*(($4 = ($0 + [36]))) = $3
	$7 = *(($1 + [32]))
	$10 = (*(($1 + [36])) - $7)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($3, $7, $10)
	*($4) = (*($4) + $10)
	
.LABEL $label$7
	return $0
	
.LABEL $label$3
	CALL $186($11)
	
.LABEL $label$2
	CALL $186(($0 + [20]))
	
.LABEL $label$1
	CALL $186(($0 + [32]))
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_64 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_64 $29
	int_32 $30
	$5 = ($global$0 - [112])
	$global$0 = $5
	$7 = *($3 + [4])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$1 }
	$8 = ($1 + [32])
	$9 = ($0 + [192])
	$10 = ($0 + [168])
	$11 = ($0 + [88])
	$12 = ($5 + [16])
	$13 = ($0 + [116])
	$14 = ($0 + [112])
	$15 = ($0 + [96])
	$16 = ($5 + [28])
	$17 = ($16 + [24])
	$18 = ($5 + [40])
	$19 = ($5 + [48])
	$20 = ($0 + [196])
	$21 = ($0 + [176])
	$22 = ($0 + [184])
	$23 = ($0 + [200])
	$24 = ($4 + [37])
	
.LOOP $label$2:
	$25 = *($6)
	$27 = *($13)
	$26 = *($14)
	if ( ((int_32)$26 == (int_32)$27) ){ goto $label$4 }
	
.LOOP $label$6:
	$3 = ($27 + [-24])
	$28 = *($3)
	if ( ((int_64)*($28) == (int_64)$25) ){ goto $label$5 }
	$27 = $3
	if ( ((int_32)$26 != (int_32)$3) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$26 == (int_32)$27) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($28 + [60]) == (int_32)$11), [10976])
	goto $label$3 
	
.LABEL $label$4
	$28 = [0]
	$3 = CALL db_find_i64(*($11), *($15), (int_64)-6146428328942239744, $25)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$28 = CALL $25($11, $3)
	CALL eosio_assert(((int_32)*($28 + [60]) == (int_32)$11), [10976])
	
.LABEL $label$3
	$3 = [0]
	CALL eosio_assert(((int_32)$28 != (int_32)[0]), [8524])
	*(($27 = ($5 + [8]))) = *(($28 + [8]))
	*($5) = *($28)
	CALL $174($12, ($28 + [16]))
	*($17) = *(($28 + [52]))
	*(($16 + [16])) = *(($28 + [44]))
	*(($16 + [8])) = *(($28 + [36]))
	*($16) = *($28 + [28 align=4])
	CALL require_auth(*($27))
	$27 = *(($4 + [36]))
	$28 = ((uint_32)((int_32)((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) - *($18)) * (int_32)$27) / (uint_32)*(($4 + [28])))
	if ( ($28 <= $27) ){ goto $label$7 }
	$3 = ((uint_32)($28 - $27) / (uint_32)*($24))
	
.LABEL $label$7
	CALL eosio_assert(((int_32)(*(($4 + [24])) - $3) > (int_32)[0]), [8743])
	CALL eosio_assert(((uint_32)*(($5 + [44])) <= (uint_32)*($19)), [8766])
	CALL eosio_assert(((uint_32)([100] - ((uint_32)((int_32)((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$10() / (uint_64)(int_64)1000000)) - *($19)) * (int_32)[100]) / (uint_32)[86400])) > (uint_32)[30]), [8793])
	$25 = *($6)
	$27 = *($20)
	$26 = *($9)
	if ( ((int_32)$26 == (int_32)$27) ){ goto $label$9 }
	
.LOOP $label$11:
	$3 = ($27 + [-24])
	$28 = *($3)
	if ( ((int_64)*($28) == (int_64)$25) ){ goto $label$10 }
	$27 = $3
	if ( ((int_32)$26 != (int_32)$3) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$26 == (int_32)$27) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($28 + [8]) == (int_32)$10), [10976])
	goto $label$8 
	
.LABEL $label$9
	$28 = [0]
	$3 = CALL db_find_i64(*($10), *($21), (int_64)-6146593681529088640, $25)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$28 = CALL $44($10, $3)
	CALL eosio_assert(((int_32)*($28 + [8]) == (int_32)$10), [10976])
	
.LABEL $label$8
	CALL eosio_assert(($28 == 0), [8824])
	$29 = *($0)
	CALL eosio_assert(((int_64)*($10) == (int_64)CALL $fimport$5()), [10925])
	*(($3 = CALL _Znwj([24])) + [8]) = $10
	*($3) = *($6)
	CALL eosio_assert([1], [10850])
	CALL memcpy(($5 + [64]), $3, [8])
	$25 = *($3)
	$28 = CALL db_store_i64(*($21), (int_64)-6146593681529088640, $29, $25, ($5 + [64]), [8])
	*($3 + [12]) = $28
	if ( (uint_64)($25 <= *($22)) ){ goto $label$12 }
	*($22) = ( (int_64)-2 ? ((int_64)$25 + (int_64)1) : ((uint_64)$25 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*($5 + [104]) = $3
	$25 = *($3)
	*($5 + [64]) = $25
	*($5 + [100]) = $28
	$27 = *($20)
	if ( ((uint_32)$27 >= (uint_32)*($23)) ){ goto $label$15 }
	*($27 + [8]) = $25
	*($27 + [16]) = $28
	*($5 + [104]) = [0]
	*($27) = $3
	*($20) = ($27 + [24])
	$3 = *($5 + [104])
	*($5 + [104]) = [0]
	if ( $3 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL $45($9, ($5 + [104]), ($5 + [64]), ($5 + [100]))
	$3 = *($5 + [104])
	*($5 + [104]) = [0]
	if ( ($3 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv($3)
	
.LABEL $label$13
	*(($28 = (($5 + [64]) + [24]))) = [100]
	*(($26 = (($5 + [64]) + [8]))) = *($16)
	$25 = *($6)
	*(($30 = (($5 + [64]) + [16]))) = $2
	*($5 + [64]) = $25
	$27 = ($1 + [36])
	$3 = *($27)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [40]))) ){ goto $label$18 }
	*($3) = *($5 + [64])
	*(($3 + [24])) = *($28)
	*(($3 + [16])) = *($30)
	*(($3 + [8])) = *($26)
	*($27) = (*($27) + [32])
	if ( (*($12) & [1]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL $46($8, ($5 + [64]))
	if ( ((*($12) & [1]) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$16
	$6 = ($6 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($5 + [112])
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$5 = ($1 + [20])
	$6 = *($0)
	$7 = *($4 + [8])
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$1 }
	CALL $150($5, *($7 + [20]), *(($7 + [24])))
	$4 = *(($4 + [8]))
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$1 }
	CALL $151(($1 + [32]), *($4 + [32]), *(($4 + [36])))
	
.LABEL $label$1
	$8 = ($1 + [8])
	$7 = *($1 + [20])
	$9 = *(($1 + [24]))
	$10 = (CASTING uint_64)(uint_32 int_32(($9 - $7) >> [6]))
	$4 = [17]
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [40])
	$12 = *($7 + [48])
	$11 = *(($7 + [52]))
	$13 = ($11 - $12)
	$10 = (CASTING uint_64)(uint_32 $13)
	
.LOOP $label$5:
	$4 = ($4 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	$4 = ( $4 ? ($13 + $4) : ((int_32)$12 == (int_32)$11) )
	$7 = ($7 + [64])
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$4 }
	
.LABEL $label$3
	$11 = ($1 + [32])
	$12 = *($1 + [32])
	$7 = *(($1 + [36]))
	$13 = ($7 - $12)
	$10 = (CASTING uint_64)(uint_32 int_32($13 >> [5]))
	
.LOOP $label$6:
	$4 = ($4 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$7 }
	$4 = ((((int_32)uint_32(($13 + [-32]) >> [5]) * (int_32)[18]) + $4) + [18])
	
.LABEL $label$7
	if ( ($4 <= [513]) ){ goto $label$9 }
	$7 = CALL $198($4)
	goto $label$8 
	
.LABEL $label$9
	$7 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$8
	*($3 + [4]) = $7
	*($3) = $7
	*($3 + [8]) = ($7 + $4)
	*($3 + [16]) = $3
	*($3 + [28]) = $8
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [12])
	*($3 + [36]) = ($1 + [16])
	*($3 + [40]) = $5
	*($3 + [44]) = $11
	CALL $152(($3 + [24]), ($3 + [16]))
	$10 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($6 + [8]), (int_64)4157834741199929344, *(*($0 + [8])), $10, $7, $4)
	if ( ($4 <= [513]) ){ goto $label$10 }
	CALL $201($7)
	
.LABEL $label$10
	if ( (uint_64)($10 <= *($6 + [16])) ){ goto $label$11 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$10 = *(($6 + [8]))
	$14 = *(*(($0 + [8])))
	$15 = *($1)
	*($3 + [24]) = *(($1 + [12]))
	*($1 + [52]) = CALL db_idx64_store($10, (int_64)4157834741199929344, $14, $15, ($3 + [24]))
	$global$0 = ($3 + [48])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = ($0 + [248])
	$4 = ($0 + [256])
	$5 = CALL db_lowerbound_i64(*($0 + [248]), *($4), (int_64)-4425754204123955200, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = ($0 + [264])
	$5 = CALL $41($3, $5)
	$7 = ($2 | [8])
	goto $label$1 
	
.LABEL $label$2
	$8 = *($0)
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$5()), [10925])
	*(($5 = CALL _Znwj([24])) + [8]) = [1]
	*($5) = (int_64)1
	*($5 + [12]) = $3
	CALL eosio_assert([1], [10850])
	CALL memcpy($2, $5, [8])
	CALL eosio_assert([1], [10850])
	$7 = ($2 | [8])
	CALL memcpy($7, ($5 + [8]), [4])
	$9 = *($5)
	$10 = CALL db_store_i64(*($4), (int_64)-4425754204123955200, $8, $9, $2, [12])
	*($5 + [16]) = $10
	$6 = ($0 + [264])
	if ( (uint_64)($9 <= *($6)) ){ goto $label$3 }
	*($6) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($2 + [24]) = $5
	$9 = *($5)
	*($2) = $9
	*($2 + [20]) = $10
	$11 = ($0 + [276])
	$4 = *($11)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [280]))) ){ goto $label$5 }
	*($4 + [8]) = $9
	*($4 + [16]) = $10
	*($2 + [24]) = [0]
	*($4) = $5
	*($11) = ($4 + [24])
	$4 = *($2 + [24])
	*($2 + [24]) = [0]
	if ( $4 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$5
	CALL $42(($0 + [272]), ($2 + [24]), $2, ($2 + [20]))
	$4 = *($2 + [24])
	*($2 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$4
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$4 = *($5 + [8])
	$9 = CALL current_time()
	$8 = *($0)
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [11059])
	CALL eosio_assert(((int_32)*($5 + [12]) == (int_32)$3), [11094])
	CALL eosio_assert(((int_64)*(($0 + [248])) == (int_64)CALL $fimport$5()), [11140])
	$3 = ((uint_32)($4 + (CASTING uint_32)(uint_64 ((uint_64)$9 / (uint_64)(int_64)1000000))) % (uint_32)[65537])
	*($5 + [8]) = $3
	$9 = *($5)
	CALL eosio_assert([1], [11191])
	CALL eosio_assert([1], [10850])
	$4 = $2
	CALL memcpy($4, $5, [8])
	CALL eosio_assert([1], [10850])
	CALL memcpy($7, ($5 + [8]), [4])
	CALL db_update_i64(*($5 + [16]), $8, $4, [12])
	if ( (uint_64)($9 <= *(($0 + [264]))) ){ goto $label$6 }
	*($6) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$global$0 = ($2 + [32])
	return ((uint_32)$3 % (uint_32)$1)
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = ($2 + [40]))) = (int_64)0
	*(($4 = ($2 + [32]))) = (int_64)0
	*(($5 = ($2 + [24]))) = (int_64)0
	*(($2 + [56])) = [0]
	*($2 + [16]) = (int_64)0
	*($2 + [48]) = (int_64)0
	*($2) = *($1)
	$1 = *(($0 + [24]))
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [28]))) ){ goto $label$4 }
	*($1) = *($2)
	*($1 + [48]) = [0]
	*(($1 + [8])) = *($2 + [8])
	*(($1 + [40])) = *($3)
	*(($1 + [32])) = *($4)
	*(($1 + [24])) = *($5)
	*(($1 + [16])) = *(($2 + [16]))
	*(($1 + [52])) = (int_64)0
	$3 = *(($2 + [48]))
	$4 = (*(($2 + [52])) - $3)
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL _Znwj($4)
	*(($1 + [48])) = $5
	*(($1 + [56])) = ($5 + $4)
	*(($1 = ($1 + [52]))) = $5
	$3 = *(($2 + [48]))
	$4 = (*(($2 + [52])) - $3)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $3, $4)
	*($1) = (*($1) + $4)
	
.LABEL $label$5
	*(($1 = ($0 + [24]))) = (*($1) + [64])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $43(($0 + [20]), $2)
	$3 = *($2 + [48])
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*(($2 + [52])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$global$0 = ($2 + [64])
	return (unreachable)
	
.LABEL $label$1
	CALL $186(($1 + [48]))
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [11027])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $198($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [11050])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $39(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $201($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4157834741199929344, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [44]) == (int_32)$7), [10976])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $48($7, CALL $fimport$3(*($7), *($7 + [8]), (int_64)4157834741199929344, $6))
	CALL eosio_assert(((int_32)*($4 + [44]) == (int_32)$7), [10976])
	
.LABEL $label$2
	*($4 + [52]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $198 (int_32 $0)
{
	return CALL $199([11748], $0)
}

int_32 .FUNC $199 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $200($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8286])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $196 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $197 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_64 .FUNC $194 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $193($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $188()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $193($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [20145]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $192($0, (int_64)0)
	*(CALL $188()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $193($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $193($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $193($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $193($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [20145])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [20145]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [20145]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $193($0)
	$5 = *(($6 + [20145]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $193($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [20145]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8234]))
	$8 = (int_64)0
	$5 = *(($6 + [20145]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [20145]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $193($0)
	$5 = *(($6 + [20145]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $193($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [20145]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $192($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [20145]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [20145]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $193($0) + [20145]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $188()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $188()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $188()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $195 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $192($3, (int_64)0)
	$4 = CALL $194($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

void .FUNC $192 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $193 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $191($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_32 .FUNC $190 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $191 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $190($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}