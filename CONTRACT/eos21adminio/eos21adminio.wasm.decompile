(data (i32.const 4) "Pj\00\00")
(data (i32.const 16) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 80) "Games already exists\00")
(data (i32.const 112) "cannot create objects in table of another contract\00")
(data (i32.const 176) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 240) "invalid symbol name\00")
(data (i32.const 272) "Successful creation of winners of \00")
(data (i32.const 320) "  \00")
(data (i32.const 336) "write\00")
(data (i32.const 352) "Successful creation of tipround of \00")
(data (i32.const 400) " next_time \00")
(data (i32.const 416) " \00")
(data (i32.const 432) "Successful creation of game   \00")
(data (i32.const 464) "error reading iterator\00")
(data (i32.const 496) "read\00")
(data (i32.const 512) "get\00")
(data (i32.const 528) "active\00")
(data (i32.const 544) "wait\00")
(data (i32.const 560) "cannot pass end iterator to modify\00")
(data (i32.const 608) "\e8\bf\98\e6\9c\aa\e5\88\b0\e5\bc\80\e5\a5\96\e6\97\b6\e9\97\b4\n\00")
(data (i32.const 640) "\e5\8f\aa\e6\9c\89numbers\e7\ad\89\e4\ba\8e0\e7\9a\84\e6\97\b6\e5\80\99\ef\bc\8c\e6\89\8d\e4\bc\9a\e4\ba\a7\e7\94\9f\e9\9a\8f\e6\9c\ba\e6\95\b0\00")
(data (i32.const 704) "object passed to modify is not in multi_index\00")
(data (i32.const 752) "cannot modify objects in table of another contract\00")
(data (i32.const 816) "updater cannot change primary key when modifying an object\00")
(data (i32.const 880) " number \00")
(data (i32.const 896) "  value \00")
(data (i32.const 912) "cannot increment end iterator\00")
(data (i32.const 944) "cannot pass end iterator to erase\00")
(data (i32.const 992) "object passed to erase is not in multi_index\00")
(data (i32.const 1040) "cannot erase objects in table of another contract\00")
(data (i32.const 1104) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1168) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1232) "total_reward must bigger than 0\n\00")
(data (i32.const 1280) "multiplication overflow or underflow\00")
(data (i32.const 1328) "multiplication underflow\00")
(data (i32.const 1360) "multiplication overflow\00")
(data (i32.const 1392) "average_reward must bigger than 0\n\00")
(data (i32.const 1440) "eos441\00")
(data (i32.const 1456) "eosio.token\00")
(data (i32.const 1472) "transfer\00")
(data (i32.const 1488) "attempt to add asset with different symbol\00")
(data (i32.const 1536) "addition underflow\00")
(data (i32.const 1568) "addition overflow\00")
(data (i32.const 1600) " total_reward \e5\bf\85\e9\a1\bb\e5\a4\a7\e4\ba\8e\e7\ad\89\e4\ba\8e my_reward \00")
(data (i32.const 1648) "my_reward \e5\bf\85\e9\a1\bb\e5\a4\a7\e4\ba\8e\e7\ad\89\e4\ba\8e0! \00")
(data (i32.const 1680) "attempt to subtract asset with different symbol\00")
(data (i32.const 1728) "subtraction underflow\00")
(data (i32.const 1760) "subtraction overflow\00")
(data (i32.const 1792) "\e8\af\b7\e9\80\89\e6\8b\a9\e5\b0\8f\e4\ba\8eMAX_NUMBER_LENGTH\e7\9a\84index\00")
(data (i32.const 1840) "\e8\af\b7\e5\85\88\e5\85\85\e5\80\bc\e8\87\b3\e5\b0\91\e4\b8\80\e4\b8\aaeos\00")
(data (i32.const 1872) "\e5\bf\85\e9\a1\bb\e5\9c\a8\e5\bc\80\e5\a5\96\e5\89\8d10\e7\a7\92\e8\b4\ad\e4\b9\b0\00")
(data (i32.const 1904) "\e8\af\a5\e5\8f\b7\e7\a0\81\e5\b7\b2\e7\bb\8f\e8\b4\ad\e4\b9\b0\n\00")
(data (i32.const 1936) " \e6\88\90\e5\8a\9f\e8\b4\ad\e4\b9\b0\e4\bd\8d\e7\bd\ae: \00")
(data (i32.const 1968) "\n\00")
(data (i32.const 1984) "eos\e4\b8\8d\e8\b6\b3\e4\b8\80\e4\b8\aa, \e8\af\b7\e5\85\85\e5\80\bc\00")
(data (i32.const 2016) "\e8\bd\ac\e8\b4\a6\e5\bf\85\e9\a1\bb\e6\98\afEOS\00")
(data (i32.const 2048) "\e6\88\90\e5\8a\9f\e7\b4\af\e5\8a\a0\e9\87\91\e9\a2\9d, \e5\bd\93\e5\89\8d\e9\87\91\e9\a2\9d\e4\b8\ba: \00")
(data (i32.const 2096) "\e6\88\90\e5\8a\9f\e5\88\9b\e5\bb\ba\e8\b4\a6\e6\88\b7, \e5\bd\93\e5\89\8d\e9\87\91\e9\a2\9d\e4\b8\ba: \00")
(data (i32.const 2160) "\e6\8e\a8\e8\8d\90\e4\ba\ba\e4\b8\8d\e5\85\81\e8\ae\b8\e4\b8\ba\e8\87\aa\e5\b7\b1!/n\00")
(data (i32.const 2192) "\e6\88\90\e5\8a\9f\e5\8a\a0\e5\85\a5\e8\a2\ab\e6\8e\a8\e8\8d\90\e4\ba\ba\e5\88\b0\e5\a5\96\e5\8a\b1\e5\90\8d\e5\8d\95\n\00")
(data (i32.const 2240) "\e6\88\90\e5\8a\9f\e5\8a\a0\e5\85\a5\e6\8e\a8\e8\8d\90\e4\ba\ba\e5\88\b0\e5\a5\96\e5\8a\b1\e5\90\8d\e5\8d\95 \00")
(data (i32.const 2288) ".\00")
(data (i32.const 2304) ",\00")
(data (i32.const 2320) "need self call\00")
(data (i32.const 2336) "EOS\00")
(data (i32.const 10736) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$8 (param i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$12 (param i32)))
(import "env" "memcpy" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$14 (param i64)))
(import "env" "prints" (func $fimport$15 (param i32)))
(import "env" "prints_l" (func $fimport$16 (param i32 i32)))
(import "env" "printui" (func $fimport$17 (param i64)))
(import "env" "read_action_data" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$19 (param i64)))
(import "env" "require_auth2" (func $fimport$20 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$21 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$22 (param i32 i32)))
(import "env" "sha256" (func $fimport$23 (param i32 i32 i32)))
(import "env" "tapos_block_num" (func $fimport$24 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$25 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN6Eos4416createEy" (func $5))
(export "_ZN6Eos4418callwaitEm" (func $20))
(export "_ZN6Eos4414waitEv" (func $31))
(export "_ZN6Eos44125clean_winners_and_numbersEv" (func $33))
(export "_ZN6Eos44112distributionEv" (func $34))
(export "_ZN6Eos44119init_for_next_roundEv" (func $35))
(export "_ZN6Eos44110set_winnerEmm" (func $36))
(export "_ZN6Eos44113generate_hashEi" (func $61))
(export "_ZN6Eos4413buyEym" (func $62))
(export "_ZN6Eos4412onERKN5eosio8currency8transferE" (func $71))
(export "_ZN6Eos4415applyEyy" (func $77))
(export "apply" (func $85))
(export "malloc" (func $87))
(export "free" (func $90))
(export "llabs" (func $98))
(export "memcmp" (func $99))
(export "strlen" (func $100))
(table $0 4 4 anyfunc)
(elem (i32.const 0) $101 $5 $62 $31)



int_64 .FUNC llabs (int_64 $0)
{
	int_64 $1
	$1 = (int_64)$0 >> (int_64)63
	return ((int_64)((int_64)$0 + (int_64)$1)) ^ (int_64)$1)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $91(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $92($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $95 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $96 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $91($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10724])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10532]
	$1 = (((int_32)$2 * (int_32)[12]) + [10532])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $91 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10828])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $92 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $93 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [2])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$4 = [1073741823]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$4 = int_32($2 >> [1])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $91(($4 << [2]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $96($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [2])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [2]))
	$7 = ($3 + [4])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $92($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [992])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1040])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1104])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [8])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [12])) = $6
	CALL $92($6)
	
.LABEL $label$7
	CALL $92($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [8])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $6
	CALL $92($6)
	
.LABEL $label$10
	CALL $92($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [68]) == (int_32)$0), [704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [752])
	*($1 + [64]) = (*($1 + [64]) + [1])
	$4 = *($1)
	$3 = *($3)
	*($1 + [56]) = (CASTING uint_64)(uint_32 ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + *($3 + [12])))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [816])
	$5 = *($1 + [16])
	$6 = *(($1 + [20]))
	$7 = ($6 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [2]))
	$3 = [16]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	$3 = (($7 & [-4]) + $3)
	
.LABEL $label$2
	$6 = ($3 + [36])
	if ( ($6 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($6)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($9 + [4]) = $3
	*($9) = $3
	*($9 + [8]) = ($3 + $6)
	CALL $15($9, $1)
	CALL db_update_i64(*($1 + [72]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $91(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $96($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $92($6)
	
.LABEL $label$11
	CALL $92($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $92($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $91(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $96($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $92($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	$11 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [752])
	$5 = *($3)
	$4 = *($1)
	$8 = ($1 + [12])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($8) = ($3 + [8])
	*($3) = *($5)
	$8 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [8])
	CALL $42($8, $5)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [816])
	$6 = *($8)
	$5 = *(($1 + [12]))
	$7 = ($5 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	$3 = [8]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$3 = (($7 & [-8]) + $3)
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$10 = CALL malloc($3)
	goto $label$5 
	
.LABEL $label$6
	$10 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$5
	*($11) = $10
	*($11 + [8]) = ($10 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [336])
	CALL memcpy($10, $1, [8])
	*($11 + [4]) = ($10 + [8])
	CALL $13($11, $8)
	CALL db_update_i64(*($1 + [24]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL free($10)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($11 + [16])
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [464])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $91([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [496])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $18(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $43(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $92($7)
	
.LABEL $label$10
	CALL $92($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	$11 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [752])
	*(($8 = ($1 + [12]))) = *($1 + [8])
	$3 = *($1)
	CALL eosio_assert([1], [816])
	$4 = ($1 + [8])
	$6 = *($1 + [8])
	$5 = *($8)
	$7 = ($5 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	$8 = [20]
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$3 }
	$8 = (((int_32)uint_32(($7 + [-16]) >> [4]) * (int_32)[12]) + $8)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($8 + [-12])
	
.LABEL $label$2
	if ( ($8 <= [513]) ){ goto $label$5 }
	$10 = CALL malloc($8)
	goto $label$4 
	
.LABEL $label$5
	$10 = ($10 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$4
	*($11) = $10
	*($11 + [8]) = ($10 + $8)
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [336])
	CALL memcpy($10, $1, [8])
	*($11 + [4]) = ($10 + [8])
	CALL $14($11, $4)
	CALL db_update_i64(*($1 + [24]), $2, $10, $8)
	if ( ($8 <= [513]) ){ goto $label$6 }
	CALL free($10)
	
.LABEL $label$6
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($11 + [16])
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [464])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $91([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [496])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $50(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $10(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $92($7)
	
.LABEL $label$10
	CALL $92($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [3])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($7 >> [2])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $91(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $96($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [3]))
	$2 = ($7 + ($4 << [3]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [3]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $92($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [512])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [3])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $45($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [3]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $7) > (uint_32)[7]), [496])
	CALL memcpy($4, *($5), [8])
	$7 = (*($5) + [8])
	*($5) = $7
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $91(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $96($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [16])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [20])) = $6
	CALL $92($6)
	
.LABEL $label$11
	CALL $92($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $92($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	$7 = *($0 + [4])
	*($1) = *(*($7))
	$2 = *($0)
	$7 = *($7)
	CALL prints([352])
	CALL printi(*($7))
	CALL prints([320])
	$3 = ($1 + [8])
	$5 = *($1 + [8])
	$4 = *(($1 + [12]))
	$6 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	$7 = [20]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$3 }
	$7 = (((int_32)uint_32(($6 + [-16]) >> [4]) * (int_32)[12]) + $7)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 + [-12])
	
.LABEL $label$2
	if ( ($7 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($7)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [336])
	CALL memcpy($9, $1, [8])
	*($10 + [4]) = ($9 + [8])
	CALL $14($10, $3)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-3770785665533345792, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [464])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $91([80])) + [24]) = [0]
	*($4 + [16 align=4]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = (int_64)1398362884
	CALL eosio_assert([1], [176])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [240])
	*($4 + [68]) = $0
	CALL $17(($8 + [32]), $4)
	*($4 + [72]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [72])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $8($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = *($5 + [16])
	if ( ($6 == 0) ){ goto $label$15 }
	*(($5 + [20])) = $6
	CALL $92($6)
	
.LABEL $label$15
	CALL $92($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	$4 = *($0 + [4])
	$6 = *($4)
	*($1) = *($6)
	*($1 + [8]) = *(*($4 + [4]))
	$2 = *($0)
	$7 = *($6 + [16])
	*($1 + [32]) = (int_64)0
	*(($1 + [40])) = $7
	$7 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [48]) = $7
	*($1 + [56]) = ((int_64)*($6 + [12]) + (int_64)$7)
	CALL prints([400])
	CALL printui(*($1 + [56]))
	CALL prints([416])
	*($1 + [64]) = [0]
	CALL prints([432])
	$3 = *($1 + [16])
	$4 = *(($1 + [20]))
	$5 = ($4 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($5 >> [2]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$6 = (($5 & [-4]) + $6)
	
.LABEL $label$2
	$4 = ($6 + [36])
	if ( ($4 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($4)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($8 + [4]) = $6
	*($8) = $6
	*($8 + [8]) = ($6 + $4)
	CALL $15($8, $1)
	$7 = *($1)
	*($1 + [72]) = CALL db_store_i64(*($2 + [8]), (int_64)7035937633859534848, *(*($0 + [8])), $7, $6, $4)
	if ( ($4 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN6Eos4416createEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [192])
	*([0] + [4]) = $8
	*($8 + [144]) = $1
	CALL require_auth(*($0))
	$3 = [0]
	*((($8 + [104]) + [32])) = [0]
	*($8 + [120]) = (int_64)-1
	*($8 + [128]) = (int_64)0
	$1 = *($0)
	*($8 + [104]) = $1
	*($8 + [112]) = $1
	$5 = [0]
	$7 = CALL db_find_i64($1, $1, (int_64)7035937633859534848, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $6(($8 + [104]), $7)
	CALL eosio_assert(((int_32)*($5 + [68]) == (int_32)($8 + [104])), [16])
	
.LABEL $label$1
	*((($8 + [64]) + [32])) = [0]
	*($8 + [80]) = (int_64)-1
	*($8 + [88]) = (int_64)0
	$1 = *($0)
	*($8 + [64]) = $1
	*($8 + [72]) = $1
	*((($8 + [24]) + [32])) = [0]
	*($8 + [32]) = $1
	*($8 + [24]) = $1
	*($8 + [40]) = (int_64)-1
	*($8 + [48]) = (int_64)0
	CALL eosio_assert(($5 == 0), [80])
	$1 = *($0)
	*($8 + [16]) = $0
	*($8 + [20]) = ($8 + [144])
	*($8 + [184]) = $1
	CALL eosio_assert(((int_64)*($8 + [104]) == (int_64)CALL $fimport$2()), [112])
	*($8 + [172]) = ($8 + [16])
	*($8 + [168]) = ($8 + [104])
	*($8 + [176]) = ($8 + [184])
	*(($5 = CALL $91([80])) + [24]) = [0]
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)1398362884
	CALL eosio_assert([1], [176])
	$1 = (int_64)5462355
	
.LOOP $label$3:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	
.LABEL $label$2
	CALL eosio_assert($7, [240])
	*($5 + [68]) = ($8 + [104])
	CALL $7(($8 + [168]), $5)
	*($8 + [160]) = $5
	$1 = *($5)
	*($8 + [168]) = $1
	$7 = *($5 + [72])
	*($8 + [156]) = $7
	$4 = ($8 + [132])
	$3 = *($4)
	if ( ((uint_32)$3 >= (uint_32)*(($8 + [136]))) ){ goto $label$7 }
	*($3 + [8]) = $1
	*($3 + [16]) = $7
	*($8 + [160]) = [0]
	*($3) = $5
	*($4) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $8(($8 + [128]), ($8 + [160]), ($8 + [168]), ($8 + [156]))
	
.LABEL $label$6
	$3 = *($8 + [160])
	*($8 + [160]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	$5 = *($3 + [16])
	if ( ($5 == 0) ){ goto $label$9 }
	*(($3 + [20])) = $5
	CALL $92($5)
	
.LABEL $label$9
	CALL $92($3)
	
.LABEL $label$8
	*($8 + [156]) = [0]
	if ( (*($0 + [24]) == 0) ){ goto $label$10 }
	$2 = (($8 + [64]) + [24])
	$6 = ($8 + [176])
	$7 = ($8 + [92])
	
.LOOP $label$11:
	$1 = *($0)
	*($8 + [8]) = ($8 + [156])
	*($8 + [184]) = $1
	CALL eosio_assert(((int_64)*($8 + [64]) == (int_64)CALL $fimport$2()), [112])
	*($6) = ($8 + [184])
	*($8 + [172]) = ($8 + [8])
	*($8 + [168]) = ($8 + [64])
	*(($3 = CALL $91([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = ($8 + [64])
	CALL $9(($8 + [168]), $3)
	*($8 + [16]) = $3
	$1 = *($3)
	*($8 + [168]) = $1
	$4 = *($3 + [24])
	*($8 + [160]) = $4
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*((($8 + [64]) + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $1
	*($5 + [16]) = $4
	*($8 + [16]) = [0]
	*($5) = $3
	*($7) = ($5 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $10($2, ($8 + [16]), ($8 + [168]), ($8 + [160]))
	
.LABEL $label$12
	$3 = *($8 + [16])
	*($8 + [16]) = [0]
	if ( ($3 == 0) ){ goto $label$14 }
	$5 = *($3 + [8])
	if ( ($5 == 0) ){ goto $label$15 }
	*(($3 + [12])) = $5
	CALL $92($5)
	
.LABEL $label$15
	CALL $92($3)
	
.LABEL $label$14
	$3 = *(($0 + [24]))
	$5 = (*($8 + [156]) + [1])
	*($8 + [156]) = $5
	if ( ($5 <= $3) ){ goto $label$11 }
	
.LABEL $label$10
	*($8 + [156]) = [0]
	if ( (*($0 + [28]) == 0) ){ goto $label$16 }
	$2 = (($8 + [24]) + [24])
	$6 = ($8 + [176])
	$7 = (($8 + [24]) + [28])
	
.LOOP $label$17:
	$1 = *($0)
	*($8 + [8]) = ($8 + [156])
	*($8 + [184]) = $1
	CALL eosio_assert(((int_64)*($8 + [24]) == (int_64)CALL $fimport$2()), [112])
	*($6) = ($8 + [184])
	*($8 + [172]) = ($8 + [8])
	*($8 + [168]) = ($8 + [24])
	*(($3 = CALL $91([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = ($8 + [24])
	CALL $11(($8 + [168]), $3)
	*($8 + [16]) = $3
	$1 = *($3)
	*($8 + [168]) = $1
	$4 = *($3 + [24])
	*($8 + [160]) = $4
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*((($8 + [24]) + [32]))) ){ goto $label$19 }
	*($5 + [8]) = $1
	*($5 + [16]) = $4
	*($8 + [16]) = [0]
	*($5) = $3
	*($7) = ($5 + [24])
	goto $label$18 
	
.LABEL $label$19
	CALL $12($2, ($8 + [16]), ($8 + [168]), ($8 + [160]))
	
.LABEL $label$18
	$3 = *($8 + [16])
	*($8 + [16]) = [0]
	if ( ($3 == 0) ){ goto $label$20 }
	$5 = *($3 + [8])
	if ( ($5 == 0) ){ goto $label$21 }
	*(($3 + [12])) = $5
	CALL $92($5)
	
.LABEL $label$21
	CALL $92($3)
	
.LABEL $label$20
	$3 = *(($0 + [28]))
	$5 = (*($8 + [156]) + [1])
	*($8 + [156]) = $5
	if ( ($5 <= $3) ){ goto $label$17 }
	
.LABEL $label$16
	$7 = *($8 + [48])
	if ( ($7 == 0) ){ goto $label$22 }
	$4 = ($8 + [52])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$24 }
	
.LOOP $label$25:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$26 }
	$5 = *($0 + [8])
	if ( ($5 == 0) ){ goto $label$27 }
	*(($0 + [12])) = $5
	CALL $92($5)
	
.LABEL $label$27
	CALL $92($0)
	
.LABEL $label$26
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$25 }
	$3 = *(($8 + [48]))
	goto $label$23 
	
.LABEL $label$24
	$3 = $7
	
.LABEL $label$23
	*($4) = $7
	CALL $92($3)
	
.LABEL $label$22
	$7 = *($8 + [88])
	if ( ($7 == 0) ){ goto $label$28 }
	$4 = ($8 + [92])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$30 }
	
.LOOP $label$31:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$32 }
	$5 = *($0 + [8])
	if ( ($5 == 0) ){ goto $label$33 }
	*(($0 + [12])) = $5
	CALL $92($5)
	
.LABEL $label$33
	CALL $92($0)
	
.LABEL $label$32
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$31 }
	$3 = *(($8 + [88]))
	goto $label$29 
	
.LABEL $label$30
	$3 = $7
	
.LABEL $label$29
	*($4) = $7
	CALL $92($3)
	
.LABEL $label$28
	$7 = *($8 + [128])
	if ( ($7 == 0) ){ goto $label$34 }
	$4 = ($8 + [132])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$36 }
	
.LOOP $label$37:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$38 }
	$5 = *($0 + [16])
	if ( ($5 == 0) ){ goto $label$39 }
	*(($0 + [20])) = $5
	CALL $92($5)
	
.LABEL $label$39
	CALL $92($0)
	
.LABEL $label$38
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$37 }
	$3 = *(($8 + [128]))
	goto $label$35 
	
.LABEL $label$36
	$3 = $7
	
.LABEL $label$35
	*($4) = $7
	CALL $92($3)
	
.LABEL $label$34
	*([0] + [4]) = ($8 + [192])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [336])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [336])
	$3 = ($0 + [4])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[3]), [336])
	CALL memcpy(*($3), ($6 + [8]), [4])
	$5 = (*($3) + [4])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $16($0, ($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [2]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [336])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[3]), [336])
	$2 = ($0 + [4])
	CALL memcpy(*($2), $5, [4])
	$7 = (*($2) + [4])
	*($2) = $7
	$5 = ($5 + [4])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $18($0, ($1 + [16]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [496])
	CALL memcpy(($1 + [64]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $91(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $96($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $92($6)
	
.LABEL $label$11
	CALL $92($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $92($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	$7 = *($0 + [4])
	*($1) = *(*($7))
	$2 = *($0)
	$7 = *($7)
	CALL prints([272])
	CALL printi(*($7))
	CALL prints([320])
	$7 = [8]
	$3 = ($1 + [8])
	$5 = *($1 + [8])
	$4 = *(($1 + [12]))
	$6 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$2 }
	$7 = (($6 & [-8]) + $7)
	
.LABEL $label$2
	if ( ($7 <= [513]) ){ goto $label$4 }
	$9 = CALL malloc($7)
	goto $label$3 
	
.LABEL $label$4
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$3
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [336])
	CALL memcpy($9, $1, [8])
	*($10 + [4]) = ($9 + [8])
	CALL $13($10, $3)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-2042605223851065344, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL free($9)
	
.LABEL $label$5
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $91(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $96($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $92($6)
	
.LABEL $label$11
	CALL $92($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $92($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [336])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $7) > (int_32)[7]), [336])
	CALL memcpy(*($2), $5, [8])
	$7 = (*($2) + [8])
	*($2) = $7
	$5 = ($5 + [8])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $91(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $96($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $92($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [512])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [2])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $19($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [2]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	$2 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*($2) - $7) > (uint_32)[3]), [496])
	CALL memcpy($4, *($5), [4])
	$7 = (*($5) + [4])
	*($5) = $7
	$4 = ($4 + [4])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [2]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [2])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$6 = int_32($7 >> [1])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $91(($6 << [2]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = [0]
	$6 = ($6 + [4])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [2]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $96($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [2]))
	$2 = ($7 + ($4 << [2]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [4])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [2]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $92($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [336])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [336])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [68]) == (int_32)$0), [704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [752])
	*(($7 = ($1 + [20]))) = *($1 + [16])
	$3 = *($1)
	CALL eosio_assert([1], [816])
	$4 = *($1 + [16])
	$5 = *($7)
	$6 = ($5 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [2]))
	$7 = [16]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$7 = (($6 & [-4]) + $7)
	
.LABEL $label$2
	$5 = ($7 + [36])
	if ( ($5 <= [513]) ){ goto $label$4 }
	$7 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($10 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$3
	*($9 + [4]) = $7
	*($9) = $7
	*($9 + [8]) = ($7 + $5)
	CALL $15($9, $1)
	CALL db_update_i64(*($1 + [72]), $2, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [512])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $51($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [496])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[3]), [496])
	CALL memcpy(($7 + [8]), *($4), [4])
	$6 = (*($4) + [4])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$3 = int_32(($6 - $5) >> [4])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$2 = ($2 - $5)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($2 >> [3])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $91(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = (*($0) + [16])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $96($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($6 << [4]))
	$5 = ($2 + ($3 << [4]))
	$6 = $5
	
.LOOP $label$9:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $92($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $3
	if ( $3 ){ goto $label$3 }
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( *($2 + [12]) ){ goto $label$3 }
	$3 = *($2 + [8])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$10 }
	if ( ($4 == 0) ){ goto $label$8 }
	if ( *($4 + [12]) ){ goto $label$8 }
	$4 = ($4 + [12])
	goto $label$9 
	
.LABEL $label$10
	$4 = *($3 + [4])
	if ( ($4 == 0) ){ goto $label$6 }
	if ( *($4 + [12]) ){ goto $label$6 }
	$4 = ($4 + [12])
	
.LABEL $label$9
	*(($2 + [12])) = [1]
	$2 = ((int_32)$3 == (int_32)$0)
	*($3 + [12]) = $2
	*($4) = [1]
	$1 = $3
	if ( ($2 == 0) ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$8
	if ( ((int_32)*($2) == (int_32)$1) ){ goto $label$5 }
	$4 = $2
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_32)*($2) == (int_32)$1) ){ goto $label$2 }
	$4 = *($2 + [4])
	$1 = *($4)
	*($2 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $2
	$3 = *(($2 + [8]))
	
.LABEL $label$11
	*($4 + [8]) = $3
	*(( ($3 = *(($1 = ($2 + [8])))) ? ($3 + [4]) : ((int_32)*($3) == (int_32)$2) )) = $4
	*($1) = $4
	*($4) = $2
	$3 = *($4 + [8])
	goto $label$1 
	
.LABEL $label$5
	$4 = *($2)
	$1 = *($4 + [4])
	*($2) = $1
	if ( ($1 == 0) ){ goto $label$12 }
	*($1 + [8]) = $2
	$3 = *(($2 + [8]))
	
.LABEL $label$12
	*($4 + [8]) = $3
	*(( ($3 = *(($1 = ($2 + [8])))) ? ($3 + [4]) : ((int_32)*($3) == (int_32)$2) )) = $4
	*($1) = $4
	*(($4 + [4])) = $2
	$3 = *($4 + [8])
	
.LABEL $label$4
	*($4 + [12]) = [1]
	*($3 + [12]) = [0]
	$2 = *($3 + [4])
	$4 = *($2)
	*($3 + [4]) = $4
	if ( ($4 == 0) ){ goto $label$13 }
	*($4 + [8]) = $3
	
.LABEL $label$13
	*($2 + [8]) = *($3 + [8])
	*(( ($4 = *($3 + [8])) ? ($4 + [4]) : ((int_32)*($4) == (int_32)$3) )) = $2
	*($3 + [8]) = $2
	*($2) = $3
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	$4 = $2
	
.LABEL $label$1
	*($4 + [12]) = [1]
	*($3 + [12]) = [0]
	$2 = *($3)
	$4 = *($2 + [4])
	*($3) = $4
	if ( ($4 == 0) ){ goto $label$14 }
	*($4 + [8]) = $3
	
.LABEL $label$14
	*($2 + [8]) = *($3 + [8])
	*(( ($4 = *($3 + [8])) ? ($4 + [4]) : ((int_32)*($4) == (int_32)$3) )) = $2
	*($3 + [8]) = $2
	*(($2 + [4])) = $3
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [68]) == (int_32)$0), [704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [752])
	$4 = *($1)
	*(($3 = *($3))) = *($1 + [32])
	*(($3 + [8])) = *(($1 + [40]))
	*($1 + [32]) = (int_64)0
	CALL eosio_assert([1], [176])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [816])
	$5 = *($1 + [16])
	$6 = *(($1 + [20]))
	$7 = ($6 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [2]))
	$3 = [16]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	$3 = (($7 & [-4]) + $3)
	
.LABEL $label$2
	$6 = ($3 + [36])
	if ( ($6 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($6)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($9 + [4]) = $3
	*($9) = $3
	*($9 + [8]) = ($3 + $6)
	CALL $15($9, $1)
	CALL db_update_i64(*($1 + [72]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [336])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [336])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $58(*($1), ($0 + [32]))
}

void .FUNC _ZN6Eos44112distributionEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_64 $27
	int_64 $28
	int_64 $29
	int_64 $30
	int_32 $31
	int_32 $32
	$31 = (*([0] + [4]) - [288])
	*([0] + [4]) = $31
	*((($31 + [216]) + [32])) = [0]
	*($31 + [232]) = (int_64)-1
	*($31 + [240]) = (int_64)0
	$4 = *($0)
	*($31 + [216]) = $4
	*($31 + [224]) = $4
	$1 = [0]
	$5 = CALL db_find_i64($4, $4, (int_64)7035937633859534848, $4)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $6(($31 + [216]), $5)
	CALL eosio_assert(((int_32)*($1 + [68]) == (int_32)($31 + [216])), [16])
	
.LABEL $label$1
	*((($31 + [176]) + [32])) = [0]
	*($31 + [192]) = (int_64)-1
	*($31 + [200]) = (int_64)0
	$4 = *($0)
	*($31 + [176]) = $4
	*($31 + [184]) = $4
	*((($31 + [136]) + [32])) = [0]
	*($31 + [144]) = $4
	*($31 + [136]) = $4
	*($31 + [152]) = (int_64)-1
	*($31 + [160]) = (int_64)0
	*($31 + [128]) = [0]
	*($31 + [124]) = [0]
	$2 = (($31 + [120]) | [4])
	*($31 + [120]) = $2
	if ( (*($0 + [28]) == 0) ){ goto $label$3 }
	$25 = (($31 + [136]) + [8])
	$9 = ($0 + [28])
	$26 = ($31 + [160])
	$3 = [0]
	$23 = [0]
	$27 = (int_64)0
	if ( ((int_32)[0] != (int_32)[0]) ){ goto $label$4 }
	$32 = [2]
	goto $label$2 
	
.LABEL $label$4
	$32 = [177]
	goto $label$2 
	
.LABEL $label$3
	$32 = [94]
	
.LABEL $label$2
	
.LOOP $label$5:
	goto $label$304 
	
.LABEL $label$325
	$3 = *($26)
	$23 = *((($31 + [136]) + [28]))
	if ( ((int_32)$23 != (int_32)$3) ){ goto $label$134 }
	$32 = [2]
	goto $label$5 
	
.LABEL $label$324
	if ( ((int_32)$23 == (int_32)$3) ){ goto $label$133 }
	$32 = [3]
	goto $label$5 
	
.LABEL $label$323
	$5 = *(($23 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)($31 + [136])), [16])
	goto $label$132 
	
.LABEL $label$322
	$5 = CALL $39(($31 + [136]), CALL $fimport$4(*($31 + [136]), *($25), (int_64)-2042605223851065344, $27))
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)($31 + [136])), [16])
	$32 = [4]
	goto $label$5 
	
.LABEL $label$321
	$3 = *(($5 + [12]))
	$22 = *($5 + [8])
	if ( ((int_32)$22 == (int_32)$3) ){ goto $label$129 }
	$32 = [5]
	goto $label$5 
	
.LABEL $label$320
	$4 = *($22)
	$5 = *($31 + [124])
	if ( ($5 == 0) ){ goto $label$128 }
	$32 = [6]
	goto $label$5 
	
.LABEL $label$319
	$24 = $2
	goto $label$127 
	
.LABEL $label$318
	$24 = $5
	$5 = $23
	$32 = [7]
	goto $label$5 
	
.LABEL $label$317
	$6 = *($5 + [16])
	if ( ((uint_64)$4 >= (uint_64)$6) ){ goto $label$126 }
	$32 = [184]
	goto $label$5 
	
.LABEL $label$316
	$23 = *($5)
	if ( $23 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$315
	if ( ((uint_64)$6 >= (uint_64)$4) ){ goto $label$124 }
	$32 = [181]
	goto $label$5 
	
.LABEL $label$314
	$24 = ($5 + [4])
	$23 = *($5 + [4])
	if ( ($23 == 0) ){ goto $label$125 }
	$32 = [182]
	goto $label$5 
	
.LABEL $label$313
	$5 = $24
	goto $label$6 
	
.LABEL $label$312
	$5 = $2
	$24 = $2
	if ( *($24) ){ goto $label$121 }
	goto $label$122 
	
.LABEL $label$311
	$24 = $5
	$32 = [9]
	goto $label$5 
	
.LABEL $label$310
	if ( *($24) ){ goto $label$123 }
	$32 = [178]
	goto $label$5 
	
.LABEL $label$309
	*(($23 = CALL $91([32]))) = (int_64)0
	*($23 + [8]) = $5
	*($24) = $23
	*($23 + [24]) = [0]
	*($23 + [16]) = $4
	$5 = *(*($31 + [120]))
	if ( ($5 == 0) ){ goto $label$9 }
	$32 = [179]
	goto $label$5 
	
.LABEL $label$308
	*($31 + [120]) = $5
	$23 = *($24)
	$32 = [180]
	goto $label$5 
	
.LABEL $label$307
	CALL $52(*($31 + [124]), $23)
	*(($5 = (($31 + [120]) + [8]))) = (*($5) + [1])
	$32 = [10]
	goto $label$5 
	
.LABEL $label$306
	$22 = ($22 + [8])
	if ( ((int_32)$22 != (int_32)$3) ){ goto $label$130 }
	goto $label$131 
	
.LABEL $label$305
	$5 = ($23 + [-24])
	$22 = ([0] - $3)
	$32 = [0]
	goto $label$5 
	
.LABEL $label$304
	if ( ((int_64)*(*($5)) == (int_64)$27) ){ goto $label$137 }
	$32 = [1]
	goto $label$5 
	
.LABEL $label$303
	$23 = $5
	$24 = ($5 + [-24])
	$5 = $24
	if ( ((int_32)($24 + $22) != (int_32)[-24]) ){ goto $label$135 }
	goto $label$136 
	
.LABEL $label$302
	$27 = ((int_64)$27 + (int_64)1)
	if ( ((CASTING uint_32)(uint_64 $27) <= *($9)) ){ goto $label$120 }
	$32 = [12]
	goto $label$5 
	
.LABEL $label$301
	$19 = *((($31 + [120]) + [8]))
	if ( ($19 == 0) ){ goto $label$119 }
	$32 = [13]
	goto $label$5 
	
.LABEL $label$300
	$25 = [0]
	$5 = CALL db_lowerbound_i64(*($31 + [176]), *((($31 + [176]) + [8])), (int_64)-3770785665533345792, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$118 }
	$32 = [14]
	goto $label$5 
	
.LABEL $label$299
	$26 = CALL $46(($31 + [176]), $5)
	goto $label$117 
	
.LABEL $label$298
	CALL eosio_assert([1], [912])
	$5 = CALL db_next_i64(*($26 + [24]), $31)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$106 }
	$32 = [25]
	goto $label$5 
	
.LABEL $label$297
	$26 = CALL $46(($31 + [176]), $5)
	$32 = [15]
	goto $label$5 
	
.LABEL $label$296
	$3 = *(($26 + [12]))
	$23 = *($26 + [8])
	if ( ((int_32)$23 == (int_32)$3) ){ goto $label$116 }
	$32 = [16]
	goto $label$5 
	
.LABEL $label$295
	$9 = *($31 + [124])
	if ( ($9 == 0) ){ goto $label$113 }
	$32 = [17]
	goto $label$5 
	
.LABEL $label$294
	$4 = *($23)
	$24 = $2
	$5 = $9
	$32 = [18]
	goto $label$5 
	
.LABEL $label$293
	if ( ((uint_64)*($5 + [16]) >= (uint_64)$4) ){ goto $label$109 }
	$32 = [175]
	goto $label$5 
	
.LABEL $label$292
	$5 = *($5 + [4])
	if ( $5 ){ goto $label$111 }
	goto $label$112 
	
.LABEL $label$291
	$24 = $5
	$22 = *($5)
	$5 = $22
	if ( $22 ){ goto $label$110 }
	$32 = [20]
	goto $label$5 
	
.LABEL $label$290
	if ( ((int_32)$24 == (int_32)$2) ){ goto $label$108 }
	$32 = [21]
	goto $label$5 
	
.LABEL $label$289
	if ( (uint_64)($4 <= *($24 + [16])) ){ goto $label$107 }
	$32 = [22]
	goto $label$5 
	
.LABEL $label$288
	*($24 + [24]) = [1]
	$32 = [23]
	goto $label$5 
	
.LABEL $label$287
	$23 = ($23 + [16])
	if ( ((int_32)$23 != (int_32)$3) ){ goto $label$114 }
	goto $label$115 
	
.LABEL $label$286
	$7 = *(($1 + [40]))
	$6 = *($1 + [32])
	$8 = *($0 + [16])
	CALL eosio_assert([1], [176])
	$4 = (uint_64)$8 >> (uint_64)(int_64)8)
	$32 = [27]
	goto $label$5 
	
.LABEL $label$285
	$5 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$104 }
	$32 = [171]
	goto $label$5 
	
.LABEL $label$284
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$32 = [173]
	goto $label$5 
	
.LABEL $label$283
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$103 }
	$32 = [174]
	goto $label$5 
	
.LABEL $label$282
	$25 = ($25 + [1])
	if ( ((int_32)$25 < (int_32)[7]) ){ goto $label$11 }
	$32 = [172]
	goto $label$5 
	
.LABEL $label$281
	$5 = [1]
	$25 = ($25 + [1])
	if ( ((int_32)$25 < (int_32)[7]) ){ goto $label$105 }
	$32 = [28]
	goto $label$5 
	
.LABEL $label$280
	CALL eosio_assert($5, [240])
	$5 = ((int_64)$7 == (int_64)$8)
	CALL eosio_assert($5, [1168])
	if ( ((int_64)$6 < (int_64)1) ){ goto $label$102 }
	$32 = [29]
	goto $label$5 
	
.LABEL $label$279
	CALL eosio_assert([1], [1280])
	CALL eosio_assert([1], [1328])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [1360])
	CALL eosio_assert($5, [1168])
	$10 = ((int_64)((int_64)((int_64)$6 * (int_64)95) / (int_64)100) / (int_64)(CASTING int_64)(int_32 $19))
	if ( ((int_64)$10 <= (int_64)0) ){ goto $label$101 }
	$32 = [30]
	goto $label$5 
	
.LABEL $label$278
	*(($31 + [112])) = [0]
	*($31 + [104]) = (int_64)0
	$5 = CALL strlen([1440])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$100 }
	$32 = [31]
	goto $label$5 
	
.LABEL $label$277
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$99 }
	$32 = [167]
	goto $label$5 
	
.LABEL $label$276
	*($31 + [104]) = ($5 << [1])
	$24 = (($31 + [104]) | [1])
	if ( $5 ){ goto $label$97 }
	goto $label$98 
	
.LABEL $label$275
	CALL prints([1232])
	goto $label$44 
	
.LABEL $label$274
	CALL prints([1392])
	goto $label$45 
	
.LABEL $label$273
	$23 = (($5 + [16]) & [-16])
	$24 = CALL $91($23)
	*($31 + [104]) = ($23 | [1])
	*($31 + [112]) = $24
	*($31 + [108]) = $5
	$32 = [33]
	goto $label$5 
	
.LABEL $label$272
	CALL memcpy($24, [1440], $5)
	$32 = [34]
	goto $label$5 
	
.LABEL $label$271
	$25 = [0]
	*(($24 + $5)) = [0]
	$24 = *($31 + [120])
	if ( ((int_32)$24 == (int_32)$2) ){ goto $label$96 }
	$32 = [35]
	goto $label$5 
	
.LABEL $label$270
	$14 = ((int_64)$10 / (int_64)200)
	$13 = ((int_64)$10 < (int_64)4611686018427387904)
	$12 = ((int_64)$10 > (int_64)-4611686018427387904)
	$11 = ((int_32)$1 != (int_32)[0])
	$3 = ($31 + [76])
	$9 = ($31 + [32])
	$22 = (($31 + [88]) + [8])
	$16 = ($1 + [40])
	$26 = ($31 + [16])
	$17 = ($26 + [4])
	$18 = ($31 + [72])
	$20 = ($31 + [68])
	$32 = [36]
	goto $label$5 
	
.LABEL $label$269
	*($22) = $7
	*($31 + [88]) = $10
	$4 = $7
	$23 = $24
	if ( (*($23 + [24]) == 0) ){ goto $label$94 }
	$32 = [37]
	goto $label$5 
	
.LABEL $label$268
	CALL eosio_assert([1], [1280])
	CALL eosio_assert($12, [1328])
	CALL eosio_assert($13, [1360])
	$6 = *($31 + [88])
	$4 = *($22)
	CALL eosio_assert(((int_64)$7 == (int_64)$4), [1488])
	$6 = ((int_64)$6 + (int_64)$14)
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1536])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [1568])
	*($22) = $4
	*($31 + [88]) = $6
	$32 = [38]
	goto $label$5 
	
.LABEL $label$267
	CALL eosio_assert(((int_64)*($16) == (int_64)$4), [1168])
	CALL eosio_assert(((int_64)*(($1 + [32])) >= (int_64)*($31 + [88])), [1600])
	CALL eosio_assert(((int_64)*($22) == (int_64)$8), [1168])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($31 + [88]) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [1648])
	$4 = *($0)
	*($31) = ($31 + [88])
	CALL eosio_assert($11, [560])
	CALL $56(($31 + [216]), $1, $4, $31)
	$15 = *($0)
	$4 = (int_64)0
	$27 = (int_64)59
	$5 = [528]
	$28 = (int_64)0
	$32 = [39]
	goto $label$5 
	
.LABEL $label$266
	if ( ((uint_64)$4 > (uint_64)(int_64)5) ){ goto $label$92 }
	$32 = [163]
	goto $label$5 
	
.LABEL $label$265
	$24 = *($5)
	if ( ((uint_32)(($24 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$32 = [166]
	goto $label$5 
	
.LABEL $label$264
	$24 = ($24 + [165])
	goto $label$12 
	
.LABEL $label$263
	$6 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$262
	$24 = ( ($24 + [208]) ? [0] : ((($24 + [-49]) & [255]) <= [5]) )
	$32 = [165]
	goto $label$5 
	
.LABEL $label$261
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $24) << (int_64)56) >> (int_64)56)
	$32 = [162]
	goto $label$5 
	
.LABEL $label$260
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$27 & (int_64)4294967295))
	$32 = [41]
	goto $label$5 
	
.LABEL $label$259
	$5 = ($5 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$28 = ((int_64)$6 | (int_64)$28)
	$27 = ((int_64)$27 + (int_64)-5)
	if ( ((int_64)$27 != (int_64)-6) ){ goto $label$93 }
	$32 = [42]
	goto $label$5 
	
.LABEL $label$258
	$4 = (int_64)0
	$27 = (int_64)59
	$5 = [1456]
	$29 = (int_64)0
	$32 = [43]
	goto $label$5 
	
.LABEL $label$257
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$88 }
	$32 = [158]
	goto $label$5 
	
.LABEL $label$256
	$24 = *($5)
	if ( ((uint_32)(($24 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$32 = [161]
	goto $label$5 
	
.LABEL $label$255
	$24 = ($24 + [165])
	goto $label$14 
	
.LABEL $label$254
	$6 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$253
	$24 = ( ($24 + [208]) ? [0] : ((($24 + [-49]) & [255]) <= [5]) )
	$32 = [160]
	goto $label$5 
	
.LABEL $label$252
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $24) << (int_64)56) >> (int_64)56)
	$32 = [157]
	goto $label$5 
	
.LABEL $label$251
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$27 & (int_64)4294967295))
	$32 = [45]
	goto $label$5 
	
.LABEL $label$250
	$5 = ($5 + [1])
	$27 = ((int_64)$27 + (int_64)-5)
	$29 = ((int_64)$6 | (int_64)$29)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$89 }
	$32 = [46]
	goto $label$5 
	
.LABEL $label$249
	$4 = (int_64)0
	$27 = (int_64)59
	$5 = [1472]
	$30 = (int_64)0
	$32 = [47]
	goto $label$5 
	
.LABEL $label$248
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$84 }
	$32 = [153]
	goto $label$5 
	
.LABEL $label$247
	$24 = *($5)
	if ( ((uint_32)(($24 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$32 = [156]
	goto $label$5 
	
.LABEL $label$246
	$24 = ($24 + [165])
	goto $label$16 
	
.LABEL $label$245
	$6 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$244
	$24 = ( ($24 + [208]) ? [0] : ((($24 + [-49]) & [255]) <= [5]) )
	$32 = [155]
	goto $label$5 
	
.LABEL $label$243
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $24) << (int_64)56) >> (int_64)56)
	$32 = [152]
	goto $label$5 
	
.LABEL $label$242
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$27 & (int_64)4294967295))
	$32 = [49]
	goto $label$5 
	
.LABEL $label$241
	$5 = ($5 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$30 = ((int_64)$6 | (int_64)$30)
	$27 = ((int_64)$27 + (int_64)-5)
	if ( ((int_64)$27 != (int_64)-6) ){ goto $label$85 }
	$32 = [50]
	goto $label$5 
	
.LABEL $label$240
	*(($31 + [8])) = *(($23 + [16]))
	*($17) = *($31 + [92])
	*($31) = $15
	*($26) = *($31 + [88])
	*(($26 + [12])) = *((($31 + [88]) + [12]))
	*(($26 + [8])) = *($22)
	CALL $97($9, ($31 + [104]))
	*((($31 + [48]) + [8])) = $30
	*(($24 = (($31 + [48]) + [16]))) = (int_64)0
	*($18) = [0]
	*($31 + [48]) = $29
	$5 = CALL $91([16])
	*($24) = $5
	*($5) = $15
	*($5 + [8]) = $28
	*($3) = [0]
	*(($19 = (($31 + [48]) + [32]))) = [0]
	$5 = ($5 + [16])
	*($18) = $5
	*($20) = $5
	*((($31 + [48]) + [36])) = [0]
	$5 = *($9)
	$21 = ( *(($31 + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($21 + [32])
	$4 = (CASTING uint_64)(uint_32 $21)
	$32 = [51]
	goto $label$5 
	
.LABEL $label$239
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$81 }
	$32 = [52]
	goto $label$5 
	
.LABEL $label$238
	if ( ($5 == 0) ){ goto $label$80 }
	$32 = [53]
	goto $label$5 
	
.LABEL $label$237
	CALL $25($3, $5)
	$21 = *($19)
	$5 = *($3)
	goto $label$79 
	
.LABEL $label$236
	$21 = [0]
	$5 = [0]
	$32 = [54]
	goto $label$5 
	
.LABEL $label$235
	*((($31 + [272]) + [8])) = $21
	*($31 + [276]) = $5
	*($31 + [272]) = $5
	*($31 + [256]) = ($31 + [272])
	*($31 + [264]) = $31
	CALL $54(($31 + [264]), ($31 + [256]))
	CALL $55(($31 + [272]), ($31 + [48]))
	$5 = *($31 + [272])
	CALL send_inline($5, (*($31 + [276]) - $5))
	$5 = *($31 + [272])
	if ( ($5 == 0) ){ goto $label$78 }
	$32 = [55]
	goto $label$5 
	
.LABEL $label$234
	*($31 + [276]) = $5
	CALL $92($5)
	$32 = [56]
	goto $label$5 
	
.LABEL $label$233
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$77 }
	$32 = [57]
	goto $label$5 
	
.LABEL $label$232
	*($19) = $5
	CALL $92($5)
	$32 = [58]
	goto $label$5 
	
.LABEL $label$231
	$5 = *($24)
	if ( ($5 == 0) ){ goto $label$76 }
	$32 = [59]
	goto $label$5 
	
.LABEL $label$230
	*($20) = $5
	CALL $92($5)
	$32 = [60]
	goto $label$5 
	
.LABEL $label$229
	if ( ((*($9) & [1]) == 0) ){ goto $label$75 }
	$32 = [61]
	goto $label$5 
	
.LABEL $label$228
	CALL $92(*(($31 + [40])))
	$32 = [62]
	goto $label$5 
	
.LABEL $label$227
	$5 = *($23 + [4])
	if ( ($5 == 0) ){ goto $label$72 }
	$32 = [63]
	goto $label$5 
	
.LABEL $label$226
	$24 = $5
	$5 = *($24)
	if ( $5 ){ goto $label$73 }
	goto $label$74 
	
.LABEL $label$225
	$24 = *($23 + [8])
	if ( ((int_32)*($24) == (int_32)$23) ){ goto $label$71 }
	$32 = [149]
	goto $label$5 
	
.LABEL $label$224
	$23 = ($23 + [8])
	$32 = [150]
	goto $label$5 
	
.LABEL $label$223
	$5 = *($23)
	$23 = ($5 + [8])
	$24 = *($5 + [8])
	if ( ((int_32)$5 != (int_32)*($24)) ){ goto $label$70 }
	$32 = [64]
	goto $label$5 
	
.LABEL $label$222
	if ( ((int_32)$24 != (int_32)$2) ){ goto $label$95 }
	$32 = [65]
	goto $label$5 
	
.LABEL $label$221
	*($31 + [96]) = (int_64)1398362884
	*($31 + [88]) = (int_64)0
	CALL eosio_assert([1], [176])
	$4 = (uint_64)*($31 + [96]) >> (uint_64)(int_64)8)
	$32 = [66]
	goto $label$5 
	
.LABEL $label$220
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$66 }
	$32 = [144]
	goto $label$5 
	
.LABEL $label$219
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	$32 = [146]
	goto $label$5 
	
.LABEL $label$218
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$67 }
	$32 = [147]
	goto $label$5 
	
.LABEL $label$217
	$25 = ($25 + [1])
	if ( ((int_32)$25 < (int_32)[7]) ){ goto $label$19 }
	$32 = [145]
	goto $label$5 
	
.LABEL $label$216
	$5 = [1]
	$25 = ($25 + [1])
	if ( ((int_32)$25 < (int_32)[7]) ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$215
	$5 = [0]
	$32 = [68]
	goto $label$5 
	
.LABEL $label$214
	CALL eosio_assert($5, [240])
	$4 = *($0)
	*($31) = ($31 + [88])
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [560])
	CALL $53(($31 + [216]), $1, $4, $31)
	$7 = *($1 + [8])
	$15 = *($0)
	$4 = (int_64)0
	$27 = (int_64)59
	$5 = [528]
	$28 = (int_64)0
	$32 = [69]
	goto $label$5 
	
.LABEL $label$213
	if ( ((uint_64)$4 > (uint_64)(int_64)5) ){ goto $label$64 }
	$32 = [140]
	goto $label$5 
	
.LABEL $label$212
	$24 = *($5)
	if ( ((uint_32)(($24 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$32 = [143]
	goto $label$5 
	
.LABEL $label$211
	$24 = ($24 + [165])
	goto $label$20 
	
.LABEL $label$210
	$6 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$209
	$24 = ( ($24 + [208]) ? [0] : ((($24 + [-49]) & [255]) <= [5]) )
	$32 = [142]
	goto $label$5 
	
.LABEL $label$208
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $24) << (int_64)56) >> (int_64)56)
	$32 = [139]
	goto $label$5 
	
.LABEL $label$207
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$27 & (int_64)4294967295))
	$32 = [71]
	goto $label$5 
	
.LABEL $label$206
	$5 = ($5 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$28 = ((int_64)$6 | (int_64)$28)
	$27 = ((int_64)$27 + (int_64)-5)
	if ( ((int_64)$27 != (int_64)-6) ){ goto $label$65 }
	$32 = [72]
	goto $label$5 
	
.LABEL $label$205
	$4 = (int_64)0
	$27 = (int_64)59
	$5 = [1456]
	$29 = (int_64)0
	$32 = [73]
	goto $label$5 
	
.LABEL $label$204
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$60 }
	$32 = [135]
	goto $label$5 
	
.LABEL $label$203
	$24 = *($5)
	if ( ((uint_32)(($24 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$32 = [138]
	goto $label$5 
	
.LABEL $label$202
	$24 = ($24 + [165])
	goto $label$22 
	
.LABEL $label$201
	$6 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$200
	$24 = ( ($24 + [208]) ? [0] : ((($24 + [-49]) & [255]) <= [5]) )
	$32 = [137]
	goto $label$5 
	
.LABEL $label$199
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $24) << (int_64)56) >> (int_64)56)
	$32 = [134]
	goto $label$5 
	
.LABEL $label$198
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$27 & (int_64)4294967295))
	$32 = [75]
	goto $label$5 
	
.LABEL $label$197
	$5 = ($5 + [1])
	$27 = ((int_64)$27 + (int_64)-5)
	$29 = ((int_64)$6 | (int_64)$29)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$61 }
	$32 = [76]
	goto $label$5 
	
.LABEL $label$196
	$4 = (int_64)0
	$27 = (int_64)59
	$5 = [1472]
	$30 = (int_64)0
	$32 = [77]
	goto $label$5 
	
.LABEL $label$195
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$56 }
	$32 = [130]
	goto $label$5 
	
.LABEL $label$194
	$24 = *($5)
	if ( ((uint_32)(($24 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$32 = [133]
	goto $label$5 
	
.LABEL $label$193
	$24 = ($24 + [165])
	goto $label$24 
	
.LABEL $label$192
	$6 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$191
	$24 = ( ($24 + [208]) ? [0] : ((($24 + [-49]) & [255]) <= [5]) )
	$32 = [132]
	goto $label$5 
	
.LABEL $label$190
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $24) << (int_64)56) >> (int_64)56)
	$32 = [129]
	goto $label$5 
	
.LABEL $label$189
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$27 & (int_64)4294967295))
	$32 = [79]
	goto $label$5 
	
.LABEL $label$188
	$5 = ($5 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$30 = ((int_64)$6 | (int_64)$30)
	$27 = ((int_64)$27 + (int_64)-5)
	if ( ((int_64)$27 != (int_64)-6) ){ goto $label$57 }
	$32 = [80]
	goto $label$5 
	
.LABEL $label$187
	*(($31 + [20])) = *($31 + [92])
	*($31 + [8]) = $7
	*(($31 + [28])) = *(($31 + [100]))
	*(($31 + [24])) = *(($31 + [96]))
	*($31) = $15
	*($31 + [16]) = *($31 + [88])
	CALL $97(($31 + [32]), ($31 + [104]))
	*(($24 = (($31 + [48]) + [24]))) = [0]
	*($31 + [56]) = $30
	*($31 + [48]) = $29
	*($31 + [64]) = (int_64)0
	*(($5 = CALL $91([16]))) = $15
	*($5 + [8]) = $28
	*((($31 + [48]) + [32])) = [0]
	$23 = ($5 + [16])
	*($24) = $23
	*((($31 + [48]) + [20])) = $23
	*($31 + [64]) = $5
	*($31 + [76]) = [0]
	*((($31 + [48]) + [36])) = [0]
	$5 = *($31 + [32])
	$24 = ( *(($31 + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($24 + [32])
	$4 = (CASTING uint_64)(uint_32 $24)
	$24 = (($31 + [48]) + [28])
	$32 = [81]
	goto $label$5 
	
.LABEL $label$186
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$53 }
	$32 = [82]
	goto $label$5 
	
.LABEL $label$185
	if ( ($5 == 0) ){ goto $label$52 }
	$32 = [83]
	goto $label$5 
	
.LABEL $label$184
	CALL $25($24, $5)
	$24 = *(($31 + [80]))
	$5 = *(($31 + [76]))
	goto $label$51 
	
.LABEL $label$183
	$24 = [0]
	$5 = [0]
	$32 = [84]
	goto $label$5 
	
.LABEL $label$182
	*($31 + [276]) = $5
	*($31 + [272]) = $5
	*($31 + [280]) = $24
	*($31 + [256]) = ($31 + [272])
	*($31 + [264]) = $31
	CALL $54(($31 + [264]), ($31 + [256]))
	CALL $55(($31 + [272]), ($31 + [48]))
	$5 = *($31 + [272])
	CALL send_inline($5, (*($31 + [276]) - $5))
	$5 = *($31 + [272])
	if ( ($5 == 0) ){ goto $label$50 }
	$32 = [85]
	goto $label$5 
	
.LABEL $label$181
	*($31 + [276]) = $5
	CALL $92($5)
	$32 = [86]
	goto $label$5 
	
.LABEL $label$180
	$5 = *($31 + [76])
	if ( ($5 == 0) ){ goto $label$49 }
	$32 = [87]
	goto $label$5 
	
.LABEL $label$179
	*(($31 + [80])) = $5
	CALL $92($5)
	$32 = [88]
	goto $label$5 
	
.LABEL $label$178
	$5 = *($31 + [64])
	if ( ($5 == 0) ){ goto $label$48 }
	$32 = [89]
	goto $label$5 
	
.LABEL $label$177
	*(($31 + [68])) = $5
	CALL $92($5)
	$32 = [90]
	goto $label$5 
	
.LABEL $label$176
	if ( ((*($31 + [32]) & [1]) == 0) ){ goto $label$47 }
	$32 = [91]
	goto $label$5 
	
.LABEL $label$175
	CALL $92(*(($31 + [40])))
	$32 = [92]
	goto $label$5 
	
.LABEL $label$174
	if ( ((*($31 + [104]) & [1]) == 0) ){ goto $label$46 }
	$32 = [93]
	goto $label$5 
	
.LABEL $label$173
	CALL $92(*($31 + [112]))
	$32 = [94]
	goto $label$5 
	
.LABEL $label$172
	CALL $57(($31 + [120]), *($31 + [124]))
	$22 = *($31 + [160])
	if ( ($22 == 0) ){ goto $label$43 }
	$32 = [95]
	goto $label$5 
	
.LABEL $label$171
	$2 = ($31 + [164])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$22) ){ goto $label$42 }
	$32 = [96]
	goto $label$5 
	
.LABEL $label$170
	$32 = [97]
	goto $label$5 
	
.LABEL $label$169
	$5 = ($5 + [-24])
	$24 = *($5)
	*($5) = [0]
	if ( ($24 == 0) ){ goto $label$40 }
	$32 = [98]
	goto $label$5 
	
.LABEL $label$168
	$23 = *($24 + [8])
	if ( ($23 == 0) ){ goto $label$39 }
	$32 = [99]
	goto $label$5 
	
.LABEL $label$167
	*(($24 + [12])) = $23
	CALL $92($23)
	$32 = [100]
	goto $label$5 
	
.LABEL $label$166
	CALL $92($24)
	$32 = [101]
	goto $label$5 
	
.LABEL $label$165
	if ( ((int_32)$22 != (int_32)$5) ){ goto $label$41 }
	$32 = [102]
	goto $label$5 
	
.LABEL $label$164
	$5 = *(($31 + [160]))
	goto $label$38 
	
.LABEL $label$163
	$5 = $22
	$32 = [103]
	goto $label$5 
	
.LABEL $label$162
	*($2) = $22
	CALL $92($5)
	$32 = [104]
	goto $label$5 
	
.LABEL $label$161
	$22 = *($31 + [200])
	if ( ($22 == 0) ){ goto $label$37 }
	$32 = [105]
	goto $label$5 
	
.LABEL $label$160
	$2 = ($31 + [204])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$22) ){ goto $label$36 }
	$32 = [106]
	goto $label$5 
	
.LABEL $label$159
	$32 = [107]
	goto $label$5 
	
.LABEL $label$158
	$5 = ($5 + [-24])
	$24 = *($5)
	*($5) = [0]
	if ( ($24 == 0) ){ goto $label$34 }
	$32 = [108]
	goto $label$5 
	
.LABEL $label$157
	$23 = *($24 + [8])
	if ( ($23 == 0) ){ goto $label$33 }
	$32 = [109]
	goto $label$5 
	
.LABEL $label$156
	*(($24 + [12])) = $23
	CALL $92($23)
	$32 = [110]
	goto $label$5 
	
.LABEL $label$155
	CALL $92($24)
	$32 = [111]
	goto $label$5 
	
.LABEL $label$154
	if ( ((int_32)$22 != (int_32)$5) ){ goto $label$35 }
	$32 = [112]
	goto $label$5 
	
.LABEL $label$153
	$5 = *(($31 + [200]))
	goto $label$32 
	
.LABEL $label$152
	$5 = $22
	$32 = [113]
	goto $label$5 
	
.LABEL $label$151
	*($2) = $22
	CALL $92($5)
	$32 = [114]
	goto $label$5 
	
.LABEL $label$150
	$22 = *($31 + [240])
	if ( ($22 == 0) ){ goto $label$31 }
	$32 = [115]
	goto $label$5 
	
.LABEL $label$149
	$2 = ($31 + [244])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$22) ){ goto $label$30 }
	$32 = [116]
	goto $label$5 
	
.LABEL $label$148
	$32 = [117]
	goto $label$5 
	
.LABEL $label$147
	$5 = ($5 + [-24])
	$24 = *($5)
	*($5) = [0]
	if ( ($24 == 0) ){ goto $label$28 }
	$32 = [118]
	goto $label$5 
	
.LABEL $label$146
	$23 = *($24 + [16])
	if ( ($23 == 0) ){ goto $label$27 }
	$32 = [119]
	goto $label$5 
	
.LABEL $label$145
	*(($24 + [20])) = $23
	CALL $92($23)
	$32 = [120]
	goto $label$5 
	
.LABEL $label$144
	CALL $92($24)
	$32 = [121]
	goto $label$5 
	
.LABEL $label$143
	if ( ((int_32)$22 != (int_32)$5) ){ goto $label$29 }
	$32 = [122]
	goto $label$5 
	
.LABEL $label$142
	$5 = *(($31 + [240]))
	goto $label$26 
	
.LABEL $label$141
	$5 = $22
	$32 = [123]
	goto $label$5 
	
.LABEL $label$140
	*($2) = $22
	CALL $92($5)
	$32 = [124]
	goto $label$5 
	
.LABEL $label$139
	*([0] + [4]) = ($31 + [288])
	return (unreachable)
	
.LABEL $label$138
	CALL $93(($31 + [104]))
	
.LABEL $label$137
	$32 = [2]
	goto $label$5 
	
.LABEL $label$136
	$32 = [2]
	goto $label$5 
	
.LABEL $label$135
	$32 = [0]
	goto $label$5 
	
.LABEL $label$134
	$32 = [177]
	goto $label$5 
	
.LABEL $label$133
	$32 = [187]
	goto $label$5 
	
.LABEL $label$132
	$32 = [4]
	goto $label$5 
	
.LABEL $label$131
	$32 = [11]
	goto $label$5 
	
.LABEL $label$130
	$32 = [5]
	goto $label$5 
	
.LABEL $label$129
	$32 = [11]
	goto $label$5 
	
.LABEL $label$128
	$32 = [186]
	goto $label$5 
	
.LABEL $label$127
	$32 = [7]
	goto $label$5 
	
.LABEL $label$126
	$32 = [8]
	goto $label$5 
	
.LABEL $label$125
	$32 = [9]
	goto $label$5 
	
.LABEL $label$124
	$32 = [9]
	goto $label$5 
	
.LABEL $label$123
	$32 = [10]
	goto $label$5 
	
.LABEL $label$122
	$32 = [178]
	goto $label$5 
	
.LABEL $label$121
	$32 = [10]
	goto $label$5 
	
.LABEL $label$120
	$32 = [176]
	goto $label$5 
	
.LABEL $label$119
	$32 = [94]
	goto $label$5 
	
.LABEL $label$118
	$32 = [26]
	goto $label$5 
	
.LABEL $label$117
	$32 = [15]
	goto $label$5 
	
.LABEL $label$116
	$32 = [24]
	goto $label$5 
	
.LABEL $label$115
	$32 = [24]
	goto $label$5 
	
.LABEL $label$114
	$32 = [17]
	goto $label$5 
	
.LABEL $label$113
	$32 = [24]
	goto $label$5 
	
.LABEL $label$112
	$32 = [20]
	goto $label$5 
	
.LABEL $label$111
	$32 = [18]
	goto $label$5 
	
.LABEL $label$110
	$32 = [18]
	goto $label$5 
	
.LABEL $label$109
	$32 = [19]
	goto $label$5 
	
.LABEL $label$108
	$32 = [23]
	goto $label$5 
	
.LABEL $label$107
	$32 = [23]
	goto $label$5 
	
.LABEL $label$106
	$32 = [26]
	goto $label$5 
	
.LABEL $label$105
	$32 = [27]
	goto $label$5 
	
.LABEL $label$104
	$32 = [28]
	goto $label$5 
	
.LABEL $label$103
	$32 = [28]
	goto $label$5 
	
.LABEL $label$102
	$32 = [170]
	goto $label$5 
	
.LABEL $label$101
	$32 = [169]
	goto $label$5 
	
.LABEL $label$100
	$32 = [168]
	goto $label$5 
	
.LABEL $label$99
	$32 = [32]
	goto $label$5 
	
.LABEL $label$98
	$32 = [34]
	goto $label$5 
	
.LABEL $label$97
	$32 = [33]
	goto $label$5 
	
.LABEL $label$96
	$32 = [65]
	goto $label$5 
	
.LABEL $label$95
	$32 = [36]
	goto $label$5 
	
.LABEL $label$94
	$32 = [38]
	goto $label$5 
	
.LABEL $label$93
	$32 = [39]
	goto $label$5 
	
.LABEL $label$92
	$32 = [40]
	goto $label$5 
	
.LABEL $label$91
	$32 = [162]
	goto $label$5 
	
.LABEL $label$90
	$32 = [41]
	goto $label$5 
	
.LABEL $label$89
	$32 = [43]
	goto $label$5 
	
.LABEL $label$88
	$32 = [44]
	goto $label$5 
	
.LABEL $label$87
	$32 = [157]
	goto $label$5 
	
.LABEL $label$86
	$32 = [45]
	goto $label$5 
	
.LABEL $label$85
	$32 = [47]
	goto $label$5 
	
.LABEL $label$84
	$32 = [48]
	goto $label$5 
	
.LABEL $label$83
	$32 = [152]
	goto $label$5 
	
.LABEL $label$82
	$32 = [49]
	goto $label$5 
	
.LABEL $label$81
	$32 = [51]
	goto $label$5 
	
.LABEL $label$80
	$32 = [151]
	goto $label$5 
	
.LABEL $label$79
	$32 = [54]
	goto $label$5 
	
.LABEL $label$78
	$32 = [56]
	goto $label$5 
	
.LABEL $label$77
	$32 = [58]
	goto $label$5 
	
.LABEL $label$76
	$32 = [60]
	goto $label$5 
	
.LABEL $label$75
	$32 = [62]
	goto $label$5 
	
.LABEL $label$74
	$32 = [64]
	goto $label$5 
	
.LABEL $label$73
	$32 = [63]
	goto $label$5 
	
.LABEL $label$72
	$32 = [148]
	goto $label$5 
	
.LABEL $label$71
	$32 = [64]
	goto $label$5 
	
.LABEL $label$70
	$32 = [150]
	goto $label$5 
	
.LABEL $label$69
	$32 = [66]
	goto $label$5 
	
.LABEL $label$68
	$32 = [68]
	goto $label$5 
	
.LABEL $label$67
	$32 = [67]
	goto $label$5 
	
.LABEL $label$66
	$32 = [67]
	goto $label$5 
	
.LABEL $label$65
	$32 = [69]
	goto $label$5 
	
.LABEL $label$64
	$32 = [70]
	goto $label$5 
	
.LABEL $label$63
	$32 = [139]
	goto $label$5 
	
.LABEL $label$62
	$32 = [71]
	goto $label$5 
	
.LABEL $label$61
	$32 = [73]
	goto $label$5 
	
.LABEL $label$60
	$32 = [74]
	goto $label$5 
	
.LABEL $label$59
	$32 = [134]
	goto $label$5 
	
.LABEL $label$58
	$32 = [75]
	goto $label$5 
	
.LABEL $label$57
	$32 = [77]
	goto $label$5 
	
.LABEL $label$56
	$32 = [78]
	goto $label$5 
	
.LABEL $label$55
	$32 = [129]
	goto $label$5 
	
.LABEL $label$54
	$32 = [79]
	goto $label$5 
	
.LABEL $label$53
	$32 = [81]
	goto $label$5 
	
.LABEL $label$52
	$32 = [128]
	goto $label$5 
	
.LABEL $label$51
	$32 = [84]
	goto $label$5 
	
.LABEL $label$50
	$32 = [86]
	goto $label$5 
	
.LABEL $label$49
	$32 = [88]
	goto $label$5 
	
.LABEL $label$48
	$32 = [90]
	goto $label$5 
	
.LABEL $label$47
	$32 = [92]
	goto $label$5 
	
.LABEL $label$46
	$32 = [94]
	goto $label$5 
	
.LABEL $label$45
	$32 = [94]
	goto $label$5 
	
.LABEL $label$44
	$32 = [94]
	goto $label$5 
	
.LABEL $label$43
	$32 = [104]
	goto $label$5 
	
.LABEL $label$42
	$32 = [127]
	goto $label$5 
	
.LABEL $label$41
	$32 = [97]
	goto $label$5 
	
.LABEL $label$40
	$32 = [101]
	goto $label$5 
	
.LABEL $label$39
	$32 = [100]
	goto $label$5 
	
.LABEL $label$38
	$32 = [103]
	goto $label$5 
	
.LABEL $label$37
	$32 = [114]
	goto $label$5 
	
.LABEL $label$36
	$32 = [126]
	goto $label$5 
	
.LABEL $label$35
	$32 = [107]
	goto $label$5 
	
.LABEL $label$34
	$32 = [111]
	goto $label$5 
	
.LABEL $label$33
	$32 = [110]
	goto $label$5 
	
.LABEL $label$32
	$32 = [113]
	goto $label$5 
	
.LABEL $label$31
	$32 = [124]
	goto $label$5 
	
.LABEL $label$30
	$32 = [125]
	goto $label$5 
	
.LABEL $label$29
	$32 = [117]
	goto $label$5 
	
.LABEL $label$28
	$32 = [121]
	goto $label$5 
	
.LABEL $label$27
	$32 = [120]
	goto $label$5 
	
.LABEL $label$26
	$32 = [123]
	goto $label$5 
	
.LABEL $label$25
	$32 = [131]
	goto $label$5 
	
.LABEL $label$24
	$32 = [132]
	goto $label$5 
	
.LABEL $label$23
	$32 = [136]
	goto $label$5 
	
.LABEL $label$22
	$32 = [137]
	goto $label$5 
	
.LABEL $label$21
	$32 = [141]
	goto $label$5 
	
.LABEL $label$20
	$32 = [142]
	goto $label$5 
	
.LABEL $label$19
	$32 = [146]
	goto $label$5 
	
.LABEL $label$18
	$32 = [145]
	goto $label$5 
	
.LABEL $label$17
	$32 = [154]
	goto $label$5 
	
.LABEL $label$16
	$32 = [155]
	goto $label$5 
	
.LABEL $label$15
	$32 = [159]
	goto $label$5 
	
.LABEL $label$14
	$32 = [160]
	goto $label$5 
	
.LABEL $label$13
	$32 = [164]
	goto $label$5 
	
.LABEL $label$12
	$32 = [165]
	goto $label$5 
	
.LABEL $label$11
	$32 = [173]
	goto $label$5 
	
.LABEL $label$10
	$32 = [172]
	goto $label$5 
	
.LABEL $label$9
	$32 = [180]
	goto $label$5 
	
.LABEL $label$8
	$32 = [185]
	goto $label$5 
	
.LABEL $label$7
	$32 = [183]
	goto $label$5 
	
.LABEL $label$6
	$32 = [183]
	goto $label$5 
	$32
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [68]) == (int_32)$0), [704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [752])
	$4 = *($1)
	$9 = *($1 + [32])
	$6 = ($1 + [40])
	$7 = *($6)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$7), [1680])
	$9 = (int_64)
	CALL eosio_assert(((int_64)$9($9 - *($3))) > (int_64)-4611686018427387904), [1728])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [1760])
	*($6) = $7
	*($1 + [32]) = $9
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [816])
	$5 = *($1 + [16])
	$6 = *(($1 + [20]))
	$8 = ($6 - $5)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [2]))
	$3 = [16]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	$3 = (($8 & [-4]) + $3)
	
.LABEL $label$2
	$6 = ($3 + [36])
	if ( ($6 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($6)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($11 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($10 + [4]) = $3
	*($10) = $3
	*($10 + [8]) = ($3 + $6)
	CALL $15($10, $1)
	CALL db_update_i64(*($1 + [72]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $57($0, *($1))
	CALL $57($0, *($1 + [4]))
	CALL $92($1)
	
.LABEL $label$1
}

void .FUNC _ZN6Eos44119init_for_next_roundEv (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [128])
	*([0] + [4]) = $7
	*((($7 + [88]) + [32])) = [0]
	*($7 + [104]) = (int_64)-1
	*($7 + [112]) = (int_64)0
	$2 = *($0)
	*($7 + [88]) = $2
	*($7 + [96]) = $2
	*((($7 + [48]) + [32])) = [0]
	*($7 + [56]) = $2
	*($7 + [48]) = $2
	*($7 + [64]) = (int_64)-1
	*($7 + [72]) = (int_64)0
	$3 = $2
	$4 = [0]
	$6 = CALL db_find_i64($2, $2, (int_64)7035937633859534848, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $6(($7 + [48]), $6)
	CALL eosio_assert(((int_32)*($4 + [68]) == (int_32)($7 + [48])), [16])
	$2 = *(($7 + [96]))
	$3 = *($7 + [88])
	
.LABEL $label$1
	$6 = CALL db_lowerbound_i64($3, $2, (int_64)-6219586388808633472, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $40(($7 + [88]), $6)
	
.LOOP $label$3:
	CALL eosio_assert([1], [944])
	CALL eosio_assert([1], [912])
	$6 = [0]
	$1 = CALL db_next_i64(*($5 + [24]), ($7 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $40(($7 + [88]), $1)
	
.LABEL $label$4
	CALL $49(($7 + [88]), $5)
	$5 = $6
	if ( $6 ){ goto $label$3 }
	
.LABEL $label$2
	$5 = *($0 + [24])
	$1 = *($4 + [64])
	*(($7 + [40])) = [0]
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$2 = *($0)
	*($7 + [8]) = $2
	*($7 + [16]) = $2
	$6 = [0]
	$5 = CALL db_find_i64($2, $2, (int_64)-3770785665533345792, (CASTING int_64)(int_32 ((uint_32)($1 + [1]) % (uint_32)$5)))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $46(($7 + [8]), $5)
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)($7 + [8])), [16])
	
.LABEL $label$5
	$2 = *($0)
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [560])
	CALL $47(($7 + [8]), $6, $2)
	$2 = *($0)
	*($7) = $0
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [560])
	CALL $48(($7 + [48]), $4, $2, $7)
	$0 = *($7 + [32])
	if ( ($0 == 0) ){ goto $label$6 }
	$4 = ($7 + [36])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$8 }
	
.LOOP $label$9:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	$1 = *($5 + [8])
	if ( ($1 == 0) ){ goto $label$11 }
	*(($5 + [12])) = $1
	CALL $92($1)
	
.LABEL $label$11
	CALL $92($5)
	
.LABEL $label$10
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$9 }
	$6 = *(($7 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$6 = $0
	
.LABEL $label$7
	*($4) = $0
	CALL $92($6)
	
.LABEL $label$6
	$0 = *($7 + [72])
	if ( ($0 == 0) ){ goto $label$12 }
	$4 = ($7 + [76])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$14 }
	
.LOOP $label$15:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$16 }
	$1 = *($5 + [16])
	if ( ($1 == 0) ){ goto $label$17 }
	*(($5 + [20])) = $1
	CALL $92($1)
	
.LABEL $label$17
	CALL $92($5)
	
.LABEL $label$16
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$15 }
	$6 = *(($7 + [72]))
	goto $label$13 
	
.LABEL $label$14
	$6 = $0
	
.LABEL $label$13
	*($4) = $0
	CALL $92($6)
	
.LABEL $label$12
	$0 = *($7 + [112])
	if ( ($0 == 0) ){ goto $label$18 }
	$4 = ($7 + [116])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$20 }
	
.LOOP $label$21:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$22 }
	$1 = *($5 + [8])
	if ( ($1 == 0) ){ goto $label$23 }
	*(($5 + [12])) = $1
	CALL $92($1)
	
.LABEL $label$23
	CALL $92($5)
	
.LABEL $label$22
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$21 }
	$6 = *(($7 + [112]))
	goto $label$19 
	
.LABEL $label$20
	$6 = $0
	
.LABEL $label$19
	*($4) = $0
	CALL $92($6)
	
.LABEL $label$18
	*([0] + [4]) = ($7 + [128])
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [336])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [336])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [336])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [336])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $29($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $25($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [336])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [336])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $29(CALL $30($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$8 = ($5 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$7 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $91(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $96($0)
	
.LABEL $label$1
	*(($9 = ($8 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	*(($3 = ($9 + [24]))) = [0]
	$2 = CALL $91([16])
	*($9 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $5
	*($9 + [28]) = [0]
	*(($9 + [32])) = [0]
	*(($9 + [36])) = [0]
	$5 = ($8 + ((int_32)$7 * (int_32)[40]))
	$6 = ($9 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($9 + [-32])) = *(($2 + [-12]))
	*(($9 + [-40])) = *(($2 + [-20]))
	*(($1 = ($9 + [-24]))) = (int_64)0
	*(($7 = ($9 + [-16]))) = [0]
	$8 = ($2 + [-4])
	*($1) = *($8)
	*(($9 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($7) = *($1)
	*($1) = [0]
	*(($1 = ($9 + [-12]))) = (int_64)0
	*($8) = (int_64)0
	*(($7 = ($9 + [-4]))) = [0]
	$8 = ($2 + [8])
	*($1) = *($8)
	*(($9 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($7) = *($1)
	*($1) = [0]
	*($8) = (int_64)0
	$9 = ($9 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	*($0) = $9
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$8 }
	$1 = ([0] - $7)
	$9 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($9 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($9 + [16])) = $2
	CALL $92($2)
	
.LABEL $label$10
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($9 + [4])) = $2
	CALL $92($2)
	
.LABEL $label$11
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$12 }
	CALL $92($7)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC _ZN6Eos4418callwaitEm (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [160])
	*([0] + [4]) = $10
	*((($10 + [104]) + [32])) = [0]
	*($10 + [120]) = (int_64)-1
	$7 = (int_64)0
	*($10 + [128]) = (int_64)0
	$9 = *($0)
	*($10 + [104]) = $9
	*($10 + [112]) = $9
	$5 = [0]
	$4 = CALL db_find_i64($9, $9, (int_64)7035937633859534848, $9)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $6(($10 + [104]), $4)
	CALL eosio_assert(((int_32)*($5 + [68]) == (int_32)($10 + [104])), [16])
	
.LABEL $label$1
	$9 = CALL current_time()
	*(($10 + [68])) = [0]
	*((($10 + [40]) + [32])) = [0]
	*($10 + [52]) = [0]
	*($10 + [56]) = [0]
	*($10 + [60]) = [0]
	*($10 + [64]) = [0]
	*($10 + [40]) = ((CASTING uint_32)(uint_64 ((uint_64)$9 / (uint_64)(int_64)1000000)) + [60])
	*($10 + [76]) = [0]
	*(($10 + [80])) = [0]
	*(($10 + [84])) = [0]
	*($10 + [88]) = [0]
	*(($10 + [92])) = [0]
	*(($10 + [96])) = [0]
	$3 = ($10 + [76])
	$2 = *($5 + [8])
	$6 = (int_64)59
	$5 = [528]
	$8 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$7 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$4 = ($4 + [165])
	goto $label$5 
	
.LABEL $label$7
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$3
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$2 }
	*($10 + [24]) = $8
	*($10 + [16]) = $2
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [544]
	$8 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$7 > (uint_64)(int_64)3) ){ goto $label$13 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$4 = ($4 + [165])
	goto $label$11 
	
.LABEL $label$13
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$9
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$8 }
	*($10 + [144]) = $8
	CALL $21($3, ($10 + [16]), $0, ($10 + [144]), ($10 + [8]))
	$7 = *($0)
	*(($10 + [60])) = $1
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = $7
	CALL $22(($10 + [144]), ($10 + [40]))
	$5 = *($10 + [144])
	CALL send_deferred(($10 + [16]), $7, $5, (*($10 + [148]) - $5), [0])
	$5 = *($10 + [144])
	if ( ($5 == 0) ){ goto $label$14 }
	*($10 + [148]) = $5
	CALL $92($5)
	
.LABEL $label$14
	CALL $23(($10 + [40]))
	$1 = *($10 + [128])
	if ( ($1 == 0) ){ goto $label$15 }
	$3 = ($10 + [132])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	$0 = *($4 + [16])
	if ( ($0 == 0) ){ goto $label$20 }
	*(($4 + [20])) = $0
	CALL $92($0)
	
.LABEL $label$20
	CALL $92($4)
	
.LABEL $label$19
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$18 }
	$5 = *(($10 + [128]))
	goto $label$16 
	
.LABEL $label$17
	$5 = $1
	
.LABEL $label$16
	*($3) = $1
	CALL $92($5)
	
.LABEL $label$15
	*([0] + [4]) = ($10 + [160])
}

int_32 .FUNC $23 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $92($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $92($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $92($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $92($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $92($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $92($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $92($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $92($5)
	
.LABEL $label$12
	return $0
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $24($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $25($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $26($4, $1)
	CALL $28(CALL $27(CALL $27($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $91($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $96($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $92($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [336])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [336])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [336])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $29(CALL $30($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [336])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [336])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [336])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [336])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [336])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $69 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [176])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [240])
	*($0 + [24]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [496])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [496])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [2])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$4 = [1073741823]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$4 = int_32($2 >> [1])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $91(($4 << [2]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $96($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [2])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [2]))
	$7 = ($3 + [4])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $92($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [68]) == (int_32)$0), [704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [752])
	$5 = *((*($3) + [16]))
	$4 = *($1)
	CALL eosio_assert([1], [176])
	$10 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$9 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [240])
	$10 = *($1 + [32])
	$3 = ($1 + [40])
	$7 = *($3)
	CALL eosio_assert(((int_64)$7 == (int_64)$5), [1488])
	$10 = ((int_64)$10 + (int_64)10000)
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [1536])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [1568])
	*($3) = $7
	*($1 + [32]) = $10
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [816])
	$6 = *($1 + [16])
	$9 = *(($1 + [20]))
	$8 = ($9 - $6)
	$10 = (CASTING uint_64)(uint_32 int_32($8 >> [2]))
	$3 = [16]
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$7 }
	$3 = (($8 & [-4]) + $3)
	
.LABEL $label$7
	$9 = ($3 + [36])
	if ( ($9 <= [513]) ){ goto $label$9 }
	$3 = CALL malloc($9)
	goto $label$8 
	
.LABEL $label$9
	$3 = ($12 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$8
	*($11 + [4]) = $3
	*($11) = $3
	*($11 + [8]) = ($3 + $9)
	CALL $15($11, $1)
	CALL db_update_i64(*($1 + [72]), $2, $3, $9)
	if ( ($9 <= [513]) ){ goto $label$10 }
	CALL free($3)
	
.LABEL $label$10
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$7 = *([0] + [4])
	$10 = $7
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [752])
	$5 = *((*($3) + [16]))
	$4 = *($1)
	CALL eosio_assert([1], [176])
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$9 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [240])
	$3 = ($1 + [16])
	CALL eosio_assert(((int_64)*($3) == (int_64)$5), [1168])
	CALL eosio_assert(((int_64)*($1 + [8]) > (int_64)9999), [1984])
	$8 = *($1 + [8])
	$6 = *($3)
	CALL eosio_assert(((int_64)$6 == (int_64)$5), [1680])
	$8 = ((int_64)$8 + (int_64)-10000)
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1728])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [1760])
	*($3) = $6
	*($1 + [8]) = $8
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [816])
	$9 = $7
	$7 = ($9 + [-32])
	*([0] + [4]) = $7
	CALL eosio_assert([1], [336])
	CALL memcpy($7, $1, [8])
	CALL eosio_assert([1], [336])
	CALL memcpy(($9 + [-24]), ($1 + [8]), [8])
	CALL eosio_assert([1], [336])
	CALL memcpy(($9 + [-16]), $3, [8])
	CALL db_update_i64(*($1 + [28]), $2, $7, [24])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = $10
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	$11 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [752])
	$5 = *($3)
	$4 = *($1)
	$6 = ($1 + [12])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($6) = ($8 + [4])
	*($8) = *($5)
	$8 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [8])
	CALL $68($8, $5)
	
.LABEL $label$1
	$3 = *($3)
	CALL prints([1936])
	CALL printui(*($3))
	CALL prints([1968])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [816])
	$6 = *($8)
	$5 = *(($1 + [12]))
	$7 = ($5 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($7 >> [2]))
	$3 = [8]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$3 = (($7 & [-4]) + $3)
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$10 = CALL malloc($3)
	goto $label$5 
	
.LABEL $label$6
	$10 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$5
	*($11) = $10
	*($11 + [8]) = ($10 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [336])
	CALL memcpy($10, $1, [8])
	*($11 + [4]) = ($10 + [8])
	CALL $16($11, $8)
	CALL db_update_i64(*($1 + [24]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL free($10)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	$7 = *($0 + [4])
	*($1) = *(*($7))
	$2 = *($0)
	$3 = *($7 + [4])
	$4 = ($1 + [12])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($4) = ($6 + [4])
	*($6) = *($3)
	$6 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$6 = ($1 + [8])
	CALL $68($6, $3)
	
.LABEL $label$1
	$7 = *(($7 + [4]))
	CALL prints([1936])
	CALL printui(*($7))
	CALL prints([1968])
	$4 = *($6)
	$3 = *(($1 + [12]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [2]))
	$7 = [8]
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$4 }
	$7 = (($5 & [-4]) + $7)
	
.LABEL $label$4
	if ( ($7 <= [513]) ){ goto $label$6 }
	$9 = CALL malloc($7)
	goto $label$5 
	
.LABEL $label$6
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$5
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [336])
	CALL memcpy($9, $1, [8])
	*($10 + [4]) = ($9 + [8])
	CALL $16($10, $6)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-6219586388808633472, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL free($9)
	
.LABEL $label$7
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC _ZN6Eos44113generate_hashEi (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [48])
	*([0] + [4]) = $3
	*($3 + [12]) = ((int_32)CALL tapos_block_prefix() * (int_32)CALL $fimport$24())
	CALL sha256(($3 + [12]), [4], ($3 + [16]))
	$2 = CALL llabs(*((($3 + [16]) + $1)))
	*([0] + [4]) = ($3 + [48])
	return (CASTING uint_32)(uint_64 ((int_64)$2 % (int_64)10))
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	$11 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [752])
	*(($6 = ($1 + [12]))) = *($1 + [8])
	$3 = *($1)
	CALL eosio_assert([1], [816])
	$8 = [8]
	$4 = ($1 + [8])
	$5 = *($1 + [8])
	$6 = *($6)
	$7 = ($6 - $5)
	$9 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	$8 = (($7 & [-8]) + $8)
	
.LABEL $label$2
	if ( ($8 <= [513]) ){ goto $label$4 }
	$10 = CALL malloc($8)
	goto $label$3 
	
.LABEL $label$4
	$10 = ($10 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$3
	*($11) = $10
	*($11 + [8]) = ($10 + $8)
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [336])
	CALL memcpy($10, $1, [8])
	*($11 + [4]) = ($10 + [8])
	CALL $13($11, $4)
	CALL db_update_i64(*($1 + [24]), $2, $10, $8)
	if ( ($8 <= [513]) ){ goto $label$5 }
	CALL free($10)
	
.LABEL $label$5
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($11 + [16])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [464])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $91([40])
	$6 = CALL $69($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [28])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $70(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $92($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC _ZN6Eos4413buyEym (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [192])
	*([0] + [4]) = $11
	*($11 + [144]) = $1
	*($11 + [140]) = $2
	CALL require_auth($1)
	CALL eosio_assert(((uint_32)*($0 + [28]) > (uint_32)$2), [1792])
	$9 = [0]
	*((($11 + [96]) + [32])) = [0]
	*($11 + [112]) = (int_64)-1
	*($11 + [120]) = (int_64)0
	$6 = *($0)
	*($11 + [96]) = $6
	*($11 + [104]) = $6
	$8 = [0]
	$2 = CALL db_find_i64($6, $6, (int_64)-6030912129794572288, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $63(($11 + [96]), $2)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)($11 + [96])), [16])
	$1 = *($11 + [144])
	
.LABEL $label$1
	*((($11 + [56]) + [32])) = [0]
	*($11 + [72]) = (int_64)-1
	*($11 + [80]) = (int_64)0
	$6 = *($0)
	*($11 + [56]) = $6
	*($11 + [64]) = $6
	$2 = CALL db_find_i64($6, $6, (int_64)-6219586388808633472, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $40(($11 + [56]), $2)
	CALL eosio_assert(((int_32)*($9 + [20]) == (int_32)($11 + [56])), [16])
	
.LABEL $label$2
	*(($11 + [48])) = [0]
	*($11 + [32]) = (int_64)-1
	*($11 + [40]) = (int_64)0
	$1 = *($0)
	*($11 + [16]) = $1
	*($11 + [24]) = $1
	$10 = [0]
	$2 = CALL db_find_i64($1, $1, (int_64)7035937633859534848, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$10 = CALL $6(($11 + [16]), $2)
	CALL eosio_assert(((int_32)*($10 + [68]) == (int_32)($11 + [16])), [16])
	
.LABEL $label$3
	$3 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($3, [1840])
	CALL eosio_assert(((uint_64)(CASTING uint_64)(uint_32 ((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000)) + *($0 + [8]))) <= (uint_64)*($10 + [56])), [1872])
	$5 = *($9 + [8])
	$2 = (*(($9 + [12])) - $5)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($5) != (int_32)*($11 + [140])), [1904])
	if ( ((int_32)$2 < (int_32)[5]) ){ goto $label$4 }
	$4 = int_32($2 >> [2])
	$7 = ($9 + [8])
	$2 = [4]
	$5 = [1]
	
.LOOP $label$5:
	CALL eosio_assert(((int_32)*((*($7) + $2)) != (int_32)*($11 + [140])), [1904])
	$2 = ($2 + [4])
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$4
	$1 = *($0)
	*($11 + [160]) = $0
	CALL eosio_assert($3, [560])
	CALL $64(($11 + [96]), $8, $1, ($11 + [160]))
	$1 = *($0)
	*($11 + [160]) = $0
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [560])
	CALL $65(($11 + [16]), $10, $1, ($11 + [160]))
	$1 = *($0)
	if ( ($9 == 0) ){ goto $label$8 }
	*($11 + [160]) = ($11 + [140])
	CALL eosio_assert([1], [560])
	CALL $67(($11 + [56]), $9, $1, ($11 + [160]))
	$4 = *($11 + [40])
	if ( $4 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	*($11 + [12]) = ($11 + [140])
	*($11 + [8]) = ($11 + [144])
	*($11 + [184]) = $1
	CALL eosio_assert(((int_64)*($11 + [56]) == (int_64)CALL $fimport$2()), [112])
	*($11 + [164]) = ($11 + [8])
	*($11 + [160]) = ($11 + [56])
	*($11 + [168]) = ($11 + [184])
	*(($2 = CALL $91([32])) + [16]) = [0]
	*($2 + [8 align=4]) = (int_64)0
	*($2 + [20]) = ($11 + [56])
	CALL $66(($11 + [160]), $2)
	*($11 + [176]) = $2
	$1 = *($2)
	*($11 + [160]) = $1
	$0 = *($2 + [24])
	*($11 + [156]) = $0
	$4 = ($11 + [84])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*((($11 + [56]) + [32]))) ){ goto $label$10 }
	*($5 + [8]) = $1
	*($5 + [16]) = $0
	*($11 + [176]) = [0]
	*($5) = $2
	*($4) = ($5 + [24])
	goto $label$9 
	
.LABEL $label$10
	CALL $43(($11 + [80]), ($11 + [176]), ($11 + [160]), ($11 + [156]))
	
.LABEL $label$9
	$2 = *($11 + [176])
	*($11 + [176]) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	$5 = *($2 + [8])
	if ( ($5 == 0) ){ goto $label$12 }
	*(($2 + [12])) = $5
	CALL $92($5)
	
.LABEL $label$12
	CALL $92($2)
	
.LABEL $label$11
	$4 = *($11 + [40])
	if ( ($4 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$7 = ($11 + [44])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$16 }
	$0 = *($5 + [16])
	if ( ($0 == 0) ){ goto $label$17 }
	*(($5 + [20])) = $0
	CALL $92($0)
	
.LABEL $label$17
	CALL $92($5)
	
.LABEL $label$16
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$15 }
	$2 = *(($11 + [40]))
	goto $label$13 
	
.LABEL $label$14
	$2 = $4
	
.LABEL $label$13
	*($7) = $4
	CALL $92($2)
	
.LABEL $label$6
	$4 = *($11 + [80])
	if ( ($4 == 0) ){ goto $label$18 }
	$7 = ($11 + [84])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$20 }
	
.LOOP $label$21:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$22 }
	$0 = *($5 + [8])
	if ( ($0 == 0) ){ goto $label$23 }
	*(($5 + [12])) = $0
	CALL $92($0)
	
.LABEL $label$23
	CALL $92($5)
	
.LABEL $label$22
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$21 }
	$2 = *(($11 + [80]))
	goto $label$19 
	
.LABEL $label$20
	$2 = $4
	
.LABEL $label$19
	*($7) = $4
	CALL $92($2)
	
.LABEL $label$18
	$0 = *($11 + [120])
	if ( ($0 == 0) ){ goto $label$24 }
	$4 = ($11 + [124])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$26 }
	
.LOOP $label$27:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$28 }
	CALL $92($5)
	
.LABEL $label$28
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$27 }
	$2 = *(($11 + [120]))
	goto $label$25 
	
.LABEL $label$26
	$2 = $0
	
.LABEL $label$25
	*($4) = $0
	CALL $92($2)
	
.LABEL $label$24
	*([0] + [4]) = ($11 + [192])
}

void .FUNC $101 ()
{
	(unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC $89 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10822]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10824])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10822]) = [1]
	$7 = ($7 << [16])
	*([0] + [10824]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10824])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10824]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10822]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10822]) = [1]
	$3 = ($3 << [16])
	*([0] + [10824]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10824])
	
.LABEL $label$8
	*([0] + [10824]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $89($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10736])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $88([2340], $0)
}

int_32 .FUNC $86 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($0) = $1
	*($0 + [8]) = (int_64)515396075530
	*($0 + [24]) = (int_64)90194313219
	*(($10 + [8])) = [0]
	*($10) = (int_64)0
	$6 = CALL strlen([2336])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$4 }
	*($10) = ($6 << [1])
	$5 = ($10 | [1])
	$7 = $5
	if ( $6 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($6 + [16]) & [-16])
	$7 = CALL $91($5)
	*($10) = ($5 | [1])
	*($10 + [8]) = $7
	*($10 + [4]) = $6
	$5 = ($10 | [1])
	
.LABEL $label$3
	CALL memcpy($7, [2336], $6)
	
.LABEL $label$2
	*(($7 + $6)) = [0]
	$2 = (*($10) & [1])
	$3 = *($10 + [8])
	$7 = ( $3 ? $5 : $2 )
	$6 = [-1]
	
.LOOP $label$5:
	$5 = ($7 + $6)
	$4 = ($6 + [1])
	$6 = $4
	if ( *(($5 + [1])) ){ goto $label$5 }
	if ( ($4 == 0) ){ goto $label$7 }
	$8 = (CASTING uint_64)(uint_32 $4)
	$1 = (int_64)8
	$9 = (int_64)0
	
.LOOP $label$8:
	$6 = *($7)
	if ( ((uint_32)(($6 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$9 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$1 & (int_64)4294967288)) | (int_64)$9)
	
.LABEL $label$9
	$7 = ($7 + [1])
	$1 = ((int_64)$1 + (int_64)8)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$9 = (int_64)0
	
.LABEL $label$6
	*($0 + [16]) = ((int_64)$9 | (int_64)4)
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $92($3)
	
.LABEL $label$10
	*([0] + [4]) = ($10 + [16])
	return $0
	
.LABEL $label$1
	CALL $93($10)
	return (unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [32])
	*([0] + [4]) = $3
	CALL _ZN6Eos4415applyEyy(CALL $86($3, $0), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [512])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $25($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [496])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $84($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $94($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $91($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $94($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $92($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $93($7)
	return (unreachable)
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $83($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$4 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [496])
	CALL memcpy($6, $4, [8])
	CALL eosio_assert(((int_32)($1 & [-4]) != (int_32)[8]), [496])
	$7 = ($6 + [8])
	CALL memcpy($7, ($4 + [8]), [4])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($4)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($7)
	$3 = *($6)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 $4), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = *([0] + [4])
	$10 = $2
	$7 = (int_64)1
	$8 = *($0 + [8])
	$5 = (int_64)($8 == 0)
	if ( $5 ){ goto $label$1 }
	$9 = ((int_64)$8 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$2:
	$7 = ((int_64)$7 * (int_64)10)
	$9 = ((int_64)$9 + (int_64)-1)
	if ( ((int_64)$9 > (int_64)1) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [8])
	$2 = ($2 - (((CASTING uint_32)(uint_64 ((int_64)$8 + (int_64)1)) + [15]) & [1008]))
	*([0] + [4]) = $2
	*(($6 = ($2 + ($3 = (CASTING uint_32)(uint_64 $8))))) = [0]
	$4 = *($0)
	if ( $5 ){ goto $label$3 }
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$4 % (int_64)$7)
	$0 = ($6 + [-1])
	
.LOOP $label$4:
	*($0) = ((int_64)((int_64)$9 % (int_64)10) + (int_64)48)
	$0 = ($0 + [-1])
	$9 = ((int_64)$9 / (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$4 }
	
.LABEL $label$3
	CALL printi(((int_64)$4 / (int_64)$7))
	CALL prints([2288])
	CALL prints_l($2, $3)
	CALL prints([416])
	CALL $76($1, [0])
	*([0] + [4]) = $10
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [752])
	$4 = *($1)
	$9 = *(*($3))
	*(($11 = $10) + [8]) = [1]
	*($11) = $9
	$3 = ($1 + [12])
	$8 = *($3)
	if ( ((int_32)$8 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($8) = *($11)
	*(($8 + [8])) = *(($11 + [8]))
	*($3) = (*($3) + [16])
	$8 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [8])
	CALL $75($8, $11)
	
.LABEL $label$1
	CALL prints([2240])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [816])
	$6 = *($8)
	$5 = *(($1 + [12]))
	$7 = ($5 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	$3 = [20]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$5 }
	$3 = (((int_32)uint_32(($7 + [-16]) >> [4]) * (int_32)[12]) + $3)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($3 + [-12])
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$7 }
	$10 = CALL malloc($3)
	goto $label$6 
	
.LABEL $label$7
	$10 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$6
	*($11) = $10
	*($11 + [8]) = ($10 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [336])
	CALL memcpy($10, $1, [8])
	*($11 + [4]) = ($10 + [8])
	CALL $14($11, $8)
	CALL db_update_i64(*($1 + [24]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($10)
	
.LABEL $label$8
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $91(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $96($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $92($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $92($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN6Eos4412onERKN5eosio8currency8transferE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [176])
	*([0] + [4]) = $13
	$9 = *($0)
	if ( ((int_64)*($1) == (int_64)$9) ){ goto $label$1 }
	if ( ((int_64)*($1 + [8]) != (int_64)$9) ){ goto $label$1 }
	CALL eosio_assert(((int_64)*(($1 + [24])) == (int_64)*($0 + [16])), [2016])
	$7 = [0]
	*((($13 + [88]) + [32])) = [0]
	*($13 + [104]) = (int_64)-1
	*($13 + [112]) = (int_64)0
	$9 = *($0)
	*($13 + [88]) = $9
	*($13 + [96]) = $9
	$12 = [0]
	$5 = CALL db_find_i64($9, $9, (int_64)-6030912129794572288, *($1))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$12 = CALL $63(($13 + [88]), $5)
	CALL eosio_assert(((int_32)*($12 + [24]) == (int_32)($13 + [88])), [16])
	
.LABEL $label$2
	*((($13 + [48]) + [32])) = [0]
	*($13 + [64]) = (int_64)-1
	*($13 + [72]) = (int_64)0
	$9 = *($0)
	*($13 + [48]) = $9
	*($13 + [56]) = $9
	$5 = CALL $6(($13 + [48]), CALL $fimport$4($9, $9, (int_64)7035937633859534848, $9))
	CALL eosio_assert(((int_32)*($5 + [68]) == (int_32)($13 + [48])), [16])
	$5 = *($5 + [64])
	$6 = *($0 + [24])
	*((($13 + [8]) + [32])) = [0]
	*($13 + [24]) = (int_64)-1
	*($13 + [32]) = (int_64)0
	$9 = *($0)
	*($13 + [8]) = $9
	*($13 + [16]) = $9
	$5 = CALL db_find_i64($9, $9, (int_64)-3770785665533345792, (CASTING int_64)(int_32 ((uint_32)$5 % (uint_32)$6)))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $46(($13 + [8]), $5)
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)($13 + [8])), [16])
	
.LABEL $label$3
	$8 = *($0)
	if ( ($12 == 0) ){ goto $label$7 }
	CALL eosio_assert([1], [560])
	CALL eosio_assert(((int_32)*($12 + [24]) == (int_32)($13 + [88])), [704])
	CALL eosio_assert(((int_64)*($13 + [88]) == (int_64)CALL $fimport$2()), [752])
	$9 = *($12)
	$11 = *($12 + [8])
	$5 = ($12 + [16])
	$10 = *($5)
	CALL eosio_assert(((int_64)*(($1 + [24])) == (int_64)$10), [1488])
	$11 = ((int_64)$11 + (int_64)*($1 + [16]))
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [1536])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [1568])
	*($5) = $10
	*($12 + [8]) = $11
	CALL prints([2048])
	$6 = ($12 + [8])
	CALL $72($6)
	CALL prints([416])
	CALL eosio_assert(((int_64)$9 == (int_64)*($12)), [816])
	CALL eosio_assert([1], [336])
	CALL memcpy(($13 + [128]), $12, [8])
	CALL eosio_assert([1], [336])
	CALL memcpy((($13 + [128]) | [8]), $6, [8])
	CALL eosio_assert([1], [336])
	CALL memcpy((($13 + [128]) + [16]), $5, [8])
	CALL db_update_i64(*($12 + [28]), $8, ($13 + [128]), [24])
	$12 = (($13 + [88]) + [16])
	if ( (uint_64)($9 <= *($12)) ){ goto $label$6 }
	*($12) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$1 = *($13 + [32])
	if ( $1 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	CALL eosio_assert(((int_64)*($13 + [88]) == (int_64)CALL $fimport$2()), [112])
	*(($5 = CALL $91([40])) + [16]) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [176])
	$2 = ($5 + [16])
	$6 = ($5 + [8])
	$9 = (int_64)5462355
	$12 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$3 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$3 = [0]
	
.LABEL $label$8
	CALL eosio_assert($3, [240])
	*($5 + [24]) = ($13 + [88])
	*($5) = *($1)
	*(($6 + [12])) = *(($1 + [28]))
	*(($6 + [8])) = *(($1 + [24]))
	*(($6 + [4])) = *(($1 + [20]))
	*($6) = *($1 + [16])
	CALL prints([2096])
	CALL $72($6)
	CALL prints([416])
	CALL eosio_assert([1], [336])
	CALL memcpy(($13 + [128]), $5, [8])
	CALL eosio_assert([1], [336])
	CALL memcpy((($13 + [128]) | [8]), $6, [8])
	CALL eosio_assert([1], [336])
	CALL memcpy((($13 + [128]) + [16]), $2, [8])
	$9 = *($5)
	$6 = CALL db_store_i64(*((($13 + [88]) + [8])), (int_64)-6030912129794572288, $8, $9, ($13 + [128]), [24])
	*($5 + [28]) = $6
	$12 = (($13 + [88]) + [16])
	if ( (uint_64)($9 <= *($12)) ){ goto $label$13 }
	*($12) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($13 + [168]) = $5
	$9 = *($5)
	*($13 + [128]) = $9
	*($13 + [164]) = $6
	$12 = *((($13 + [88]) + [28]))
	if ( ((uint_32)$12 >= (uint_32)*(($13 + [120]))) ){ goto $label$15 }
	*($12 + [8]) = $9
	*($12 + [16]) = $6
	*($13 + [168]) = [0]
	*($12) = $5
	*(($13 + [116])) = ($12 + [24])
	goto $label$14 
	
.LABEL $label$15
	CALL $70(($13 + [112]), ($13 + [168]), ($13 + [128]), ($13 + [164]))
	
.LABEL $label$14
	$12 = *($13 + [168])
	*($13 + [168]) = [0]
	if ( ($12 == 0) ){ goto $label$16 }
	CALL $92($12)
	
.LABEL $label$16
	$5 = ($1 + [32])
	$12 = *($1 + [32])
	$6 = CALL strlen([2144])
	if ( ((int_32)$6 != (int_32)( *(($1 + [36])) ? uint_32($12 >> [1]) : ($12 & [1]) )) ){ goto $label$17 }
	if ( (CALL $95($5, [0], [-1], [2144], $6) == 0) ){ goto $label$6 }
	$12 = *($5)
	
.LABEL $label$17
	if ( ($12 & [1]) ){ goto $label$19 }
	$12 = ($5 + [1])
	goto $label$18 
	
.LABEL $label$19
	$12 = *(($1 + [40]))
	
.LABEL $label$18
	$5 = [-1]
	
.LOOP $label$20:
	$6 = ($12 + $5)
	$3 = ($5 + [1])
	$5 = $3
	if ( *(($6 + [1])) ){ goto $label$20 }
	$4 = (CASTING uint_64)(uint_32 $3)
	$9 = (int_64)0
	$8 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$21:
	$11 = (int_64)0
	if ( ((uint_64)$9 >= (uint_64)$4) ){ goto $label$22 }
	$5 = *($12)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$5 = ($5 + [165])
	goto $label$23 
	
.LABEL $label$24
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$26 }
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	goto $label$25 
	
.LABEL $label$26
	$11 = ((int_64)$11 & (int_64)15)
	
.LABEL $label$25
	$12 = ($12 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$21 }
	*($13 + [128]) = $10
	CALL eosio_assert(((int_64)$10 != (int_64)*($1)), [2160])
	$9 = *($0)
	*($13 + [168]) = $1
	$5 = [0]
	$3 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($3, [560])
	CALL $73(($13 + [8]), $7, $9, ($13 + [168]))
	$12 = *($7 + [8])
	$1 = (*(($7 + [12])) - $12)
	$6 = int_32($1 >> [4])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$27 }
	$5 = [0]
	$9 = *($13 + [128])
	
.LOOP $label$28:
	if ( ((int_64)*($12) == (int_64)$9) ){ goto $label$27 }
	$12 = ($12 + [16])
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)$6) ){ goto $label$28 }
	
.LABEL $label$27
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$6 }
	$9 = *($0)
	*($13 + [168]) = ($13 + [128])
	CALL eosio_assert($3, [560])
	CALL $74(($13 + [8]), $7, $9, ($13 + [168]))
	
.LABEL $label$6
	$1 = *($13 + [32])
	if ( ($1 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$0 = ($13 + [36])
	$12 = *($0)
	if ( ((int_32)$12 == (int_32)$1) ){ goto $label$30 }
	
.LOOP $label$31:
	$12 = ($12 + [-24])
	$5 = *($12)
	*($12) = [0]
	if ( ($5 == 0) ){ goto $label$32 }
	$6 = *($5 + [8])
	if ( ($6 == 0) ){ goto $label$33 }
	*(($5 + [12])) = $6
	CALL $92($6)
	
.LABEL $label$33
	CALL $92($5)
	
.LABEL $label$32
	if ( ((int_32)$1 != (int_32)$12) ){ goto $label$31 }
	$12 = *(($13 + [32]))
	goto $label$29 
	
.LABEL $label$30
	$12 = $1
	
.LABEL $label$29
	*($0) = $1
	CALL $92($12)
	
.LABEL $label$4
	$1 = *($13 + [72])
	if ( ($1 == 0) ){ goto $label$34 }
	$0 = ($13 + [76])
	$12 = *($0)
	if ( ((int_32)$12 == (int_32)$1) ){ goto $label$36 }
	
.LOOP $label$37:
	$12 = ($12 + [-24])
	$5 = *($12)
	*($12) = [0]
	if ( ($5 == 0) ){ goto $label$38 }
	$6 = *($5 + [16])
	if ( ($6 == 0) ){ goto $label$39 }
	*(($5 + [20])) = $6
	CALL $92($6)
	
.LABEL $label$39
	CALL $92($5)
	
.LABEL $label$38
	if ( ((int_32)$1 != (int_32)$12) ){ goto $label$37 }
	$12 = *(($13 + [72]))
	goto $label$35 
	
.LABEL $label$36
	$12 = $1
	
.LABEL $label$35
	*($0) = $1
	CALL $92($12)
	
.LABEL $label$34
	$6 = *($13 + [112])
	if ( ($6 == 0) ){ goto $label$1 }
	$1 = ($13 + [116])
	$12 = *($1)
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$41 }
	
.LOOP $label$42:
	$12 = ($12 + [-24])
	$5 = *($12)
	*($12) = [0]
	if ( ($5 == 0) ){ goto $label$43 }
	CALL $92($5)
	
.LABEL $label$43
	if ( ((int_32)$6 != (int_32)$12) ){ goto $label$42 }
	$12 = *(($13 + [112]))
	goto $label$40 
	
.LABEL $label$41
	$12 = $6
	
.LABEL $label$40
	*($1) = $6
	CALL $92($12)
	
.LABEL $label$1
	*([0] + [4]) = ($13 + [176])
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([2304])
	
.LABEL $label$1
	$2 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)8)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)16)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)24)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)40)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)56)
	*($3 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	
.LABEL $label$2
	*([0] + [4]) = ($3 + [16])
}

void .FUNC _ZN6Eos4415applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1456]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$8 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1472]
	$7 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$14 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$3 = ($3 + [165])
	goto $label$12 
	
.LABEL $label$14
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$10
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$9 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $78(($9 + [48]))
	CALL _ZN6Eos4412onERKN5eosio8currency8transferE($0, ($9 + [48]))
	if ( ((*($9 + [80]) & [1]) == 0) ){ goto $label$7 }
	CALL $92(*(($9 + [88])))
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert(((int_64)*($0) == (int_64)$1), [2320])
	if ( ((int_64)$2 == (int_64)-2189435514157793280) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)4520488125973135360) ){ goto $label$16 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$7 }
	*($9 + [44]) = [0]
	*($9 + [40]) = [1]
	*($9) = *($9 + [40])
	CALL $79($0, $9)
	goto $label$7 
	
.LABEL $label$16
	*($9 + [36]) = [0]
	*($9 + [32]) = [2]
	*($9 + [8 align=4]) = *($9 + [32])
	CALL $80($0, ($9 + [8]))
	goto $label$7 
	
.LABEL $label$15
	*($9 + [28]) = [0]
	*($9 + [24]) = [3]
	*($9 + [16 align=4]) = *($9 + [24])
	CALL $81($0, ($9 + [16]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [96])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [752])
	$4 = *($1)
	$9 = *(*($3))
	*(($11 = $10) + [8]) = [1]
	*($11) = $9
	$3 = ($1 + [12])
	$8 = *($3)
	if ( ((int_32)$8 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($8) = *($11)
	*(($8 + [8])) = *(($11 + [8]))
	*($3) = (*($3) + [16])
	$8 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [8])
	CALL $75($8, $11)
	
.LABEL $label$1
	CALL prints([2192])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [816])
	$6 = *($8)
	$5 = *(($1 + [12]))
	$7 = ($5 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	$3 = [20]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$5 }
	$3 = (((int_32)uint_32(($7 + [-16]) >> [4]) * (int_32)[12]) + $3)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($3 + [-12])
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$7 }
	$10 = CALL malloc($3)
	goto $label$6 
	
.LABEL $label$7
	$10 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$6
	*($11) = $10
	*($11 + [8]) = ($10 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [336])
	CALL memcpy($10, $1, [8])
	*($11 + [4]) = ($10 + [8])
	CALL $14($11, $8)
	CALL db_update_i64(*($1 + [24]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($10)
	
.LABEL $label$8
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [16])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [464])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $91([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [496])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $44(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $12(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $92($7)
	
.LABEL $label$10
	CALL $92($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC _ZN6Eos44110set_winnerEmm (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [96])
	*([0] + [4]) = $12
	*((($12 + [48]) + [32])) = [0]
	*($12 + [64]) = (int_64)-1
	*($12 + [72]) = (int_64)0
	$9 = *($0)
	*($12 + [48]) = $9
	*($12 + [56]) = $9
	$3 = [0]
	$11 = CALL db_find_i64($9, $9, (int_64)-2042605223851065344, (CASTING uint_64)(uint_32 $1))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $39(($12 + [48]), $11)
	CALL eosio_assert(((int_32)*($3 + [20]) == (int_32)($12 + [48])), [16])
	
.LABEL $label$1
	*((($12 + [8]) + [32])) = [0]
	*($12 + [24]) = (int_64)-1
	$9 = *($0)
	*($12 + [8]) = $9
	*($12 + [16]) = $9
	*($12 + [32]) = (int_64)0
	$11 = CALL db_lowerbound_i64($9, $9, (int_64)-6219586388808633472, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$2 }
	$5 = ((int_32)$3 != (int_32)[0])
	$6 = (CASTING int_64)(int_32 $2)
	$4 = (CASTING uint_64)(uint_32 $2)
	$10 = CALL $40(($12 + [8]), $11)
	$11 = ((int_32)$1 % (int_32)[3])
	$8 = ((int_32)((int_32)((int_32)( ($11 + [1]) ? [1] : $11 ) * (int_32)(((int_32)$1 / (int_32)[3]) + [1])) % (int_32)[10]) != (int_32)$2)
	
.LOOP $label$3:
	$2 = *($10 + [8])
	$11 = (*(($10 + [12])) - $2)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$4 }
	$7 = int_32($11 >> [2])
	$11 = [0]
	
.LOOP $label$6:
	if ( ((int_32)*($2) != (int_32)$1) ){ goto $label$7 }
	if ( ($8 == 0) ){ goto $label$5 }
	
.LABEL $label$7
	$2 = ($2 + [4])
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)$7) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	CALL prints([880])
	CALL printui($4)
	CALL prints([896])
	CALL printi($6)
	$9 = *($0)
	*($12 + [88]) = $10
	CALL eosio_assert($5, [560])
	CALL $41(($12 + [48]), $3, $9, ($12 + [88]))
	
.LABEL $label$4
	CALL eosio_assert([1], [912])
	$2 = CALL db_next_i64(*($10 + [24]), ($12 + [88]))
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$2 }
	$10 = CALL $40(($12 + [8]), $2)
	goto $label$3 
	
.LABEL $label$2
	$1 = *($12 + [32])
	if ( ($1 == 0) ){ goto $label$8 }
	$8 = ($12 + [36])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$11 = *($2)
	*($2) = [0]
	if ( ($11 == 0) ){ goto $label$12 }
	$7 = *($11 + [8])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($11 + [12])) = $7
	CALL $92($7)
	
.LABEL $label$13
	CALL $92($11)
	
.LABEL $label$12
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($12 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $1
	
.LABEL $label$9
	*($8) = $1
	CALL $92($2)
	
.LABEL $label$8
	$1 = *($12 + [72])
	if ( ($1 == 0) ){ goto $label$14 }
	$8 = ($12 + [76])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$16 }
	
.LOOP $label$17:
	$2 = ($2 + [-24])
	$11 = *($2)
	*($2) = [0]
	if ( ($11 == 0) ){ goto $label$18 }
	$7 = *($11 + [8])
	if ( ($7 == 0) ){ goto $label$19 }
	*(($11 + [12])) = $7
	CALL $92($7)
	
.LABEL $label$19
	CALL $92($11)
	
.LABEL $label$18
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$17 }
	$2 = *(($12 + [72]))
	goto $label$15 
	
.LABEL $label$16
	$2 = $1
	
.LABEL $label$15
	*($8) = $1
	CALL $92($2)
	
.LABEL $label$14
	*([0] + [4]) = ($12 + [96])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [68]) == (int_32)$0), [704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [752])
	$4 = *($1)
	$6 = *(*($3))
	*(($9 = $10)) = $6
	$5 = ($1 + [20])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [24]))) ){ goto $label$2 }
	*($3) = $6
	*($5) = ($3 + [4])
	$3 = ($1 + [16])
	$8 = $4
	goto $label$1 
	
.LABEL $label$2
	$3 = ($1 + [16])
	CALL $38($3, $9)
	$8 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$8), [816])
	$5 = *($3)
	$6 = *(($1 + [20]))
	$7 = ($6 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [2]))
	$3 = [16]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	$3 = (($7 & [-4]) + $3)
	
.LABEL $label$4
	$6 = ($3 + [36])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$3 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$5
	*($9 + [4]) = $3
	*($9) = $3
	*($9 + [8]) = ($3 + $6)
	CALL $15($9, $1)
	CALL db_update_i64(*($1 + [72]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($3)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $78 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [176])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [240])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $82($6, $0)
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [496])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [68]) == (int_32)$0), [704])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [752])
	*($1 + [48]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [816])
	$5 = *($1 + [16])
	$6 = *(($1 + [20]))
	$7 = ($6 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [2]))
	$3 = [16]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	$3 = (($7 & [-4]) + $3)
	
.LABEL $label$2
	$6 = ($3 + [36])
	if ( ($6 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($6)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($9 + [4]) = $3
	*($9) = $3
	*($9 + [8]) = ($3 + $6)
	CALL $15($9, $1)
	CALL db_update_i64(*($1 + [72]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
}

void .FUNC _ZN6Eos44125clean_winners_and_numbersEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$12 = (*([0] + [4]) - [80])
	*([0] + [4]) = $12
	*((($12 + [40]) + [32])) = [0]
	*($12 + [56]) = (int_64)-1
	*($12 + [64]) = (int_64)0
	$9 = *($0)
	*($12 + [40]) = $9
	*($12 + [48]) = $9
	$7 = [0]
	$10 = CALL db_find_i64($9, $9, (int_64)7035937633859534848, $9)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $6(($12 + [40]), $10)
	CALL eosio_assert(((int_32)*($7 + [68]) == (int_32)($12 + [40])), [16])
	
.LABEL $label$1
	*(($12 + [32])) = [0]
	*($12 + [16]) = (int_64)-1
	*($12 + [24]) = (int_64)0
	$9 = *($0)
	*($12) = $9
	*($12 + [8]) = $9
	if ( (*($0 + [28]) == 0) ){ goto $label$3 }
	$9 = (int_64)0
	$3 = ($12 + [8])
	$5 = ($0 + [28])
	$6 = ($12 + [24])
	$8 = [0]
	$11 = [0]
	if ( ((int_32)[0] != (int_32)[0]) ){ goto $label$4 }
	$13 = [2]
	goto $label$2 
	
.LABEL $label$4
	$13 = [30]
	goto $label$2 
	
.LABEL $label$3
	$13 = [6]
	
.LABEL $label$2
	
.LOOP $label$5:
	goto $label$51 
	
.LABEL $label$58
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$21 }
	$13 = [3]
	goto $label$5 
	
.LABEL $label$57
	$10 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [20]) == (int_32)$12), [16])
	goto $label$20 
	
.LABEL $label$56
	$10 = [0]
	$2 = CALL db_find_i64(*($12), *($3), (int_64)-2042605223851065344, $9)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$19 }
	$13 = [32]
	goto $label$5 
	
.LABEL $label$55
	$10 = CALL $39($12, $2)
	CALL eosio_assert(((int_32)*($10 + [20]) == (int_32)$12), [16])
	$13 = [4]
	goto $label$5 
	
.LABEL $label$54
	$4 = *($0)
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [560])
	CALL $60($12, $10, $4)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((uint_32)(CASTING uint_32)(uint_64 $9) >= (uint_32)*($5)) ){ goto $label$18 }
	$13 = [29]
	goto $label$5 
	
.LABEL $label$53
	$8 = *($6)
	$11 = *(($12 + [28]))
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$22 }
	$13 = [30]
	goto $label$5 
	
.LABEL $label$52
	$10 = ($11 + [-24])
	$1 = ([0] - $8)
	$13 = [0]
	goto $label$5 
	
.LABEL $label$51
	if ( ((int_64)*(*($10)) == (int_64)$9) ){ goto $label$25 }
	$13 = [1]
	goto $label$5 
	
.LABEL $label$50
	$11 = $10
	$2 = ($10 + [-24])
	$10 = $2
	if ( ((int_32)($2 + $1) != (int_32)[-24]) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$49
	$9 = *($0)
	$13 = [6]
	goto $label$5 
	
.LABEL $label$48
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [560])
	CALL $59(($12 + [40]), $7, $9)
	$1 = *($12 + [24])
	if ( ($1 == 0) ){ goto $label$17 }
	$13 = [7]
	goto $label$5 
	
.LABEL $label$47
	$8 = ($12 + [28])
	$10 = *($8)
	if ( ((int_32)$10 == (int_32)$1) ){ goto $label$16 }
	$13 = [8]
	goto $label$5 
	
.LABEL $label$46
	$13 = [9]
	goto $label$5 
	
.LABEL $label$45
	$10 = ($10 + [-24])
	$2 = *($10)
	*($10) = [0]
	if ( ($2 == 0) ){ goto $label$14 }
	$13 = [10]
	goto $label$5 
	
.LABEL $label$44
	$11 = *($2 + [8])
	if ( ($11 == 0) ){ goto $label$13 }
	$13 = [11]
	goto $label$5 
	
.LABEL $label$43
	*(($2 + [12])) = $11
	CALL $92($11)
	$13 = [12]
	goto $label$5 
	
.LABEL $label$42
	CALL $92($2)
	$13 = [13]
	goto $label$5 
	
.LABEL $label$41
	if ( ((int_32)$1 != (int_32)$10) ){ goto $label$15 }
	$13 = [14]
	goto $label$5 
	
.LABEL $label$40
	$10 = *(($12 + [24]))
	goto $label$12 
	
.LABEL $label$39
	$10 = $1
	$13 = [15]
	goto $label$5 
	
.LABEL $label$38
	*($8) = $1
	CALL $92($10)
	$13 = [16]
	goto $label$5 
	
.LABEL $label$37
	$1 = *($12 + [64])
	if ( ($1 == 0) ){ goto $label$11 }
	$13 = [17]
	goto $label$5 
	
.LABEL $label$36
	$8 = ($12 + [68])
	$10 = *($8)
	if ( ((int_32)$10 == (int_32)$1) ){ goto $label$10 }
	$13 = [18]
	goto $label$5 
	
.LABEL $label$35
	$13 = [19]
	goto $label$5 
	
.LABEL $label$34
	$10 = ($10 + [-24])
	$2 = *($10)
	*($10) = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$13 = [20]
	goto $label$5 
	
.LABEL $label$33
	$11 = *($2 + [16])
	if ( ($11 == 0) ){ goto $label$7 }
	$13 = [21]
	goto $label$5 
	
.LABEL $label$32
	*(($2 + [20])) = $11
	CALL $92($11)
	$13 = [22]
	goto $label$5 
	
.LABEL $label$31
	CALL $92($2)
	$13 = [23]
	goto $label$5 
	
.LABEL $label$30
	if ( ((int_32)$1 != (int_32)$10) ){ goto $label$9 }
	$13 = [24]
	goto $label$5 
	
.LABEL $label$29
	$10 = *(($12 + [64]))
	goto $label$6 
	
.LABEL $label$28
	$10 = $1
	$13 = [25]
	goto $label$5 
	
.LABEL $label$27
	*($8) = $1
	CALL $92($10)
	$13 = [26]
	goto $label$5 
	
.LABEL $label$26
	*([0] + [4]) = ($12 + [80])
	return 
	
.LABEL $label$25
	$13 = [2]
	goto $label$5 
	
.LABEL $label$24
	$13 = [2]
	goto $label$5 
	
.LABEL $label$23
	$13 = [0]
	goto $label$5 
	
.LABEL $label$22
	$13 = [2]
	goto $label$5 
	
.LABEL $label$21
	$13 = [31]
	goto $label$5 
	
.LABEL $label$20
	$13 = [4]
	goto $label$5 
	
.LABEL $label$19
	$13 = [4]
	goto $label$5 
	
.LABEL $label$18
	$13 = [5]
	goto $label$5 
	
.LABEL $label$17
	$13 = [16]
	goto $label$5 
	
.LABEL $label$16
	$13 = [28]
	goto $label$5 
	
.LABEL $label$15
	$13 = [9]
	goto $label$5 
	
.LABEL $label$14
	$13 = [13]
	goto $label$5 
	
.LABEL $label$13
	$13 = [12]
	goto $label$5 
	
.LABEL $label$12
	$13 = [15]
	goto $label$5 
	
.LABEL $label$11
	$13 = [26]
	goto $label$5 
	
.LABEL $label$10
	$13 = [27]
	goto $label$5 
	
.LABEL $label$9
	$13 = [19]
	goto $label$5 
	
.LABEL $label$8
	$13 = [23]
	goto $label$5 
	
.LABEL $label$7
	$13 = [22]
	goto $label$5 
	
.LABEL $label$6
	$13 = [25]
	goto $label$5 
	$13
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [336])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [336])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [336])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC _ZN6Eos4414waitEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [128])
	*([0] + [4]) = $7
	$5 = [0]
	*((($7 + [48]) + [32])) = [0]
	*($7 + [64]) = (int_64)-1
	*($7 + [72]) = (int_64)0
	$3 = *($0)
	*($7 + [48]) = $3
	*($7 + [56]) = $3
	$6 = [0]
	$2 = CALL db_find_i64($3, $3, (int_64)7035937633859534848, $3)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $6(($7 + [48]), $2)
	CALL eosio_assert(((int_32)*($6 + [68]) == (int_32)($7 + [48])), [16])
	
.LABEL $label$1
	CALL require_auth(*($6 + [8]))
	*($7 + [44]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$3 = *($0)
	*($7) = ($7 + [44])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [560])
	CALL $32(($7 + [48]), $6, $3, $7)
	CALL eosio_assert((uint_64)(*($6 + [56]) <= *($7 + [44])), [608])
	CALL _ZN6Eos44125clean_winners_and_numbersEv($0)
	*(($7 + [32])) = [0]
	*($7 + [16]) = (int_64)-1
	*($7 + [24]) = (int_64)0
	$3 = *($0)
	*($7) = $3
	*($7 + [8]) = $3
	$6 = CALL db_find_i64($3, $3, (int_64)7035937633859534848, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $6($7, $6)
	CALL eosio_assert(((int_32)*($5 + [68]) == (int_32)$7), [16])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)*(($5 + [20])) == (int_32)*($5 + [16])), [640])
	if ( (*($0 + [28]) == 0) ){ goto $label$3 }
	$6 = [0]
	$1 = ((int_32)$5 != (int_32)[0])
	$4 = ($0 + [28])
	
.LOOP $label$4:
	*($7 + [88]) = ((int_32)CALL tapos_block_prefix() * (int_32)CALL $fimport$24())
	CALL sha256(($7 + [88]), [4], ($7 + [96]))
	$2 = (CASTING uint_32)(uint_64 ((int_64)CALL llabs(*((($7 + [96]) + $6))) % (int_64)10))
	*($7 + [96]) = $2
	CALL _ZN6Eos44110set_winnerEmm($0, $6, $2)
	$3 = *($0)
	*($7 + [88]) = ($7 + [96])
	CALL eosio_assert($1, [560])
	CALL $37($7, $5, $3, ($7 + [88]))
	$6 = ($6 + [1])
	if ( ($6 <= *($4)) ){ goto $label$4 }
	
.LABEL $label$3
	CALL _ZN6Eos44112distributionEv($0)
	CALL _ZN6Eos44119init_for_next_roundEv($0)
	$5 = *($7 + [24])
	if ( ($5 == 0) ){ goto $label$5 }
	$1 = ($7 + [28])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	$2 = *($0 + [16])
	if ( ($2 == 0) ){ goto $label$10 }
	*(($0 + [20])) = $2
	CALL $92($2)
	
.LABEL $label$10
	CALL $92($0)
	
.LABEL $label$9
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$8 }
	$6 = *(($7 + [24]))
	goto $label$6 
	
.LABEL $label$7
	$6 = $5
	
.LABEL $label$6
	*($1) = $5
	CALL $92($6)
	
.LABEL $label$5
	$5 = *($7 + [72])
	if ( ($5 == 0) ){ goto $label$11 }
	$1 = ($7 + [76])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$15 }
	$2 = *($0 + [16])
	if ( ($2 == 0) ){ goto $label$16 }
	*(($0 + [20])) = $2
	CALL $92($2)
	
.LABEL $label$16
	CALL $92($0)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$14 }
	$6 = *(($7 + [72]))
	goto $label$12 
	
.LABEL $label$13
	$6 = $5
	
.LABEL $label$12
	*($1) = $5
	CALL $92($6)
	
.LABEL $label$11
	*([0] + [4]) = ($7 + [128])
}