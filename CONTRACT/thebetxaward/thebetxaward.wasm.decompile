(data (i32.const 8192) "eosio.token\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8213) "thebetxtoken\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8312) "bitpietokens\00")
(data (i32.const 8325) "transfer\00")
(data (i32.const 8334) "Token not accepted for transfer\00")
(data (i32.const 8366) "string is too long to be a valid name\00")
(data (i32.const 8404) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8471) "character is not in allowed character set for names\00")
(data (i32.const 8523) "Contract is init\00")
(data (i32.const 8540) "error reading iterator\00")
(data (i32.const 8563) "read\00")
(data (i32.const 8568) "cannot create objects in table of another contract\00")
(data (i32.const 8619) "write\00")
(data (i32.const 8625) "Id not found in globalvars\00%llu\00")
(data (i32.const 8657) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8708) "cannot pass end iterator to modify\00")
(data (i32.const 8743) "object passed to modify is not in multi_index\00")
(data (i32.const 8789) "cannot modify objects in table of another contract\00")
(data (i32.const 8840) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8899) "betxresolver\00")
(data (i32.const 8912) ",\00")
(data (i32.const 8914) "Not found id in globalvars\00")
(data (i32.const 8941) "bilibilibooo\00")
(data (i32.const 8954) "eoeoeoeoeooo\00")
(data (i32.const 8967) "destroyermk1\00")
(data (i32.const 8980) "applyncrafe4\00")
(data (i32.const 8993) "kevinkevin33\00")
(data (i32.const 9006) "candycrusher\00")
(data (i32.const 9019) "royalvegas12\00")
(data (i32.const 9032) "babysitterme\00")
(data (i32.const 9045) "lovejames151\00")
(data (i32.const 9058) "hunantank333\00")
(data (i32.const 9071) "Not found GLOBAL_ID_REDEEM_AMOUNT in globalvars.\00")
(data (i32.const 9120) "Not found GLOBAL_ID_REDEEM_RATIO in globalvars\00")
(data (i32.const 9167) "get\00")
(data (i32.const 9171) "cannot increment end iterator\00")
(data (i32.const 9201) "Id does not exist in redeems table\00")
(data (i32.const 9236) "cannot pass end iterator to erase\00")
(data (i32.const 9270) "object passed to erase is not in multi_index\00")
(data (i32.const 9315) "cannot erase objects in table of another contract\00")
(data (i32.const 9365) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9418) "Invalid asset\00")
(data (i32.const 9432) "Cannot withdraw more than available\00")
(data (i32.const 9468) "Cannot withdraw after expiration\00")
(data (i32.const 9501) "active\00")
(data (i32.const 9508) "BETX Buyback, new available: \00")
(data (i32.const 9538) " -- BETX buy back! Play: betx.fun\00")
(data (i32.const 9572) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9621) "invalid symbol name\00")
(data (i32.const 9641) "thebetxowner\00")
(data (i32.const 9654) "EOS\00")
(data (i32.const 9658) "BETX\00")
(data (i32.const 9663) "string is too long to be a valid symbol_code\00")
(data (i32.const 9708) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 18192) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 18272) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$3 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "read_transaction" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$8 (param i32 i32 i32)))
(import "env" "db_next_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$10 (result i64)))
(import "env" "send_inline" (func $fimport$11 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$12 (result i64)))
(import "env" "db_get_i64" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$14 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$15 (param i32 i64 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$16 (param i32)))
(import "env" "abort" (func $fimport$17))
(import "env" "memset" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$20 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$27 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$28 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$29 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$30 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$31 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$32 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$35 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$37 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$38 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$39 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $48))
(export "_Znwj" (func $46))
(export "_Znaj" (func $47))
(export "_ZdaPv" (func $49))
(export "_ZnwjSt11align_val_t" (func $50))
(export "_ZnajSt11align_val_t" (func $51))
(export "_ZdlPvSt11align_val_t" (func $52))
(export "_ZdaPvSt11align_val_t" (func $53))
(table $0 9 9 anyfunc)
(elem (i32.const 1) $3 $5 $7 $9 $10 $12 $69 $71)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18529))
(global $global$2 i32 (i32.const 18529))


void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = ((int_64)*(*($4)) + (int_64)1)
	*($1 + [8]) = *(*($4 + [4]))
	$5 = *($0)
	$6 = ($1 + [16])
	CALL $57($6, *($4 + [8]))
	*($1 + [48]) = *(*($4 + [12]))
	*($1 + [56]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$7 = CALL current_time()
	$4 = *($4 + [16])
	*($1 + [32]) = *($4)
	*($1 + [60]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [86400])
	*($1 + [40]) = *($4)
	$4 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($8 + [48])
	$7 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [40])
	$9 = ($1 + [32])
	$10 = ($1 + [48])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $84($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = $6
	*($3 + [44]) = $9
	*($3 + [48]) = $8
	*($3 + [52]) = $10
	*($3 + [56]) = ($1 + [56])
	*($3 + [60]) = ($1 + [60])
	CALL $42(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($5 + [8]), (int_64)-5002754494514069504, *(*($0 + [8])), $7, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$7 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $87($2)
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [64])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $87($0)
	
.LABEL $label$1
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8619])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8619])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8619])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8619])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $43(*($1), *($0 + [8]))
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8619])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8619])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8619])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [8619])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8619])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9167])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $28($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8563])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8563])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8563])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $21(*($1), *($0 + [8]))
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8563])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8563])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8563])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [8563])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [8563])
	CALL memcpy($3, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $84($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9764])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $84($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8619])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8619])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8619])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8619])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8619])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $84($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [248]) = [0]
	*($4 + [240]) = (int_64)0
	*($4 + [228]) = $2
	*($4 + [224]) = $2
	*($4 + [232]) = ($2 + $7)
	CALL $21(($4 + [224]), ($4 + [240]))
	$3 = *($4 + [232])
	*((($4 + [16]) + [8])) = $3
	*(($4 + [8])) = $3
	$8 = *($4 + [224])
	*($4) = $8
	*($4 + [16]) = $8
	$3 = CALL $14(($4 + [32]), $0, $1, $4)
	$9 = (($4 + [32]) + int_32($5 >> [1]))
	$10 = CALL $55(($4 + [256]), ($4 + [240]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($9) + $6))
	
.LABEL $label$4
	$5 = CALL $55(($4 + [272]), $10)
	CALL void $9((int_32 $5), (int_32 $6))
	if ( (*($4 + [272]) & [1]) ){ goto $label$15 }
	if ( (*($4 + [256]) & [1]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [256]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*($10 + [8]))
	if ( ($7 <= [513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$11 }
	
.LABEL $label$12
	$5 = *(($3 + [128]))
	if ( $5 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $87($2)
	$5 = *(($3 + [128]))
	if ( ($5 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$6 = ($3 + [132])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$18:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$19 }
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($7 + [24])))
	
.LABEL $label$20
	CALL _ZdlPv($7)
	
.LABEL $label$19
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$18 }
	$2 = *(($3 + [128]))
	goto $label$16 
	
.LABEL $label$17
	$2 = $5
	
.LABEL $label$16
	*($6) = $5
	CALL _ZdlPv($2)
	$5 = *(($3 + [88]))
	if ( ($5 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$5 = *(($3 + [88]))
	if ( $5 ){ goto $label$7 }
	
.LABEL $label$8
	$2 = [1]
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$6 = ($3 + [92])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$22 }
	
.LOOP $label$23:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$24 }
	CALL _ZdlPv($7)
	
.LABEL $label$24
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$23 }
	$2 = *(($3 + [88]))
	goto $label$21 
	
.LABEL $label$22
	$2 = $5
	
.LABEL $label$21
	*($6) = $5
	CALL _ZdlPv($2)
	$2 = [1]
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [248])))
	
.LABEL $label$5
	$global$0 = ($4 + [288])
	return $2
}

void .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_64 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = *($0)
	*($1 + [8]) = $0
	CALL $19($1, ($0 + [64]), $2, ($1 + [8]))
	$global$0 = ($1 + [16])
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [224])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $84($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = $2
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$3 = CALL $14(($4 + [32]), $0, $1, $4)
	$8 = (($4 + [32]) + int_32($5 >> [1]))
	if ( ($5 & [1]) ){ goto $label$11 }
	CALL void $8((int_32 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL void $8((int_32 *((*($8) + $6))))
	if ( ($7 <= [513]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $87($2)
	$5 = *(($3 + [128]))
	if ( ($5 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$5 = *(($3 + [128]))
	if ( $5 ){ goto $label$7 }
	
.LABEL $label$8
	$5 = *(($3 + [88]))
	if ( $5 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [132])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($7 + [24])))
	
.LABEL $label$16
	CALL _ZdlPv($7)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($3 + [128]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $5
	
.LABEL $label$12
	*($8) = $5
	CALL _ZdlPv($2)
	$5 = *(($3 + [88]))
	if ( ($5 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($3 + [92])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$18 }
	
.LOOP $label$19:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$20 }
	CALL _ZdlPv($7)
	
.LABEL $label$20
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$19 }
	$2 = *(($3 + [88]))
	goto $label$17 
	
.LABEL $label$18
	$2 = $5
	
.LABEL $label$17
	*($8) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [224])
	return [1]
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	$2 = ($global$0 - [256])
	$global$0 = $2
	CALL require_auth(*($0))
	*($2 + [240]) = [8899]
	*($2 + [244]) = CALL $81([8899])
	*($2 + [8]) = *($2 + [240])
	$3 = CALL $2(($2 + [248]), ($2 + [8]))
	$4 = CALL read_transaction([0], [0])
	$5 = CALL $84($4)
	CALL read_transaction($5, $4)
	CALL sha256($5, $4, ($2 + [208]))
	*($2 + [200]) = [0]
	*($2 + [192]) = (int_64)0
	*(($2 + [64])) = [0]
	*($2 + [56]) = (int_64)0
	$4 = CALL $81([8912])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$31 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$34 }
	*($2 + [56]) = ($4 << [1])
	$5 = (($2 + [56]) | [1])
	if ( $4 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2 + [56]) = ($6 | [1])
	*($2 + [64]) = $5
	*($2 + [60]) = $4
	
.LABEL $label$33
	CALL memcpy($5, [8912], $4)
	
.LABEL $label$32
	*(($5 + $4)) = [0]
	CALL $22($0, $1, ($2 + [192]), ($2 + [56]))
	if ( ((*($2 + [56]) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*($2 + [64]))
	
.LABEL $label$35
	$7 = ($0 + [64])
	$8 = *($0 + [56])
	$5 = *(($0 + [92]))
	$9 = *(($0 + [88]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$37 }
	
.LOOP $label$39:
	$4 = ($5 + [-24])
	$6 = *($4)
	if ( ((int_64)*($6) == (int_64)$8) ){ goto $label$38 }
	$5 = $4
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$38
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$37 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$7), [8657])
	goto $label$36 
	
.LABEL $label$37
	$6 = [0]
	$4 = CALL db_find_i64(*($7), *(($0 + [72])), (int_64)7235159551874301952, $8)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$36 }
	$6 = CALL $15($7, $4)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$7), [8657])
	
.LABEL $label$36
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8914])
	$8 = *($6 + [8])
	*(($2 + [64])) = [0]
	*($2 + [56]) = (int_64)0
	$4 = CALL $81([8941])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$30 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$42 }
	*($2 + [56]) = ($4 << [1])
	$5 = (($2 + [56]) | [1])
	if ( $4 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2 + [56]) = ($6 | [1])
	*($2 + [64]) = $5
	*($2 + [60]) = $4
	
.LABEL $label$41
	CALL memcpy($5, [8941], $4)
	
.LABEL $label$40
	*(($5 + $4)) = [0]
	*(($2 + [76])) = [0]
	*($2 + [68 align=4]) = (int_64)0
	$5 = ($2 + [68])
	$4 = CALL $81([8954])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$45 }
	*(($2 + [68])) = ($4 << [1])
	$5 = ($5 + [1])
	if ( $4 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*(($2 + [76])) = $5
	*((($2 + [56]) + [16])) = $4
	*($2 + [68]) = ($6 | [1])
	
.LABEL $label$44
	CALL memcpy($5, [8954], $4)
	
.LABEL $label$43
	*(($5 + $4)) = [0]
	*(($2 + [88])) = [0]
	*($2 + [80]) = (int_64)0
	$5 = ($2 + [80])
	$4 = CALL $81([8967])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$28 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$48 }
	*(($2 + [80])) = ($4 << [1])
	$5 = ($5 + [1])
	if ( $4 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*(($2 + [88])) = $5
	*(($2 + [84])) = $4
	*($2 + [80]) = ($6 | [1])
	
.LABEL $label$47
	CALL memcpy($5, [8967], $4)
	
.LABEL $label$46
	*(($5 + $4)) = [0]
	*(($2 + [100])) = [0]
	*($2 + [92 align=4]) = (int_64)0
	$5 = ($2 + [92])
	$4 = CALL $81([8980])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$27 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$51 }
	*(($2 + [92])) = ($4 << [1])
	$5 = ($5 + [1])
	if ( $4 ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*(($2 + [100])) = $5
	*(($2 + [96])) = $4
	*($2 + [92]) = ($6 | [1])
	
.LABEL $label$50
	CALL memcpy($5, [8980], $4)
	
.LABEL $label$49
	*(($5 + $4)) = [0]
	*(($2 + [112])) = [0]
	*($2 + [104]) = (int_64)0
	$5 = ($2 + [104])
	$4 = CALL $81([8993])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$54 }
	*(($2 + [104])) = ($4 << [1])
	$5 = ($5 + [1])
	if ( $4 ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*(($2 + [112])) = $5
	*(($2 + [108])) = $4
	*($2 + [104]) = ($6 | [1])
	
.LABEL $label$53
	CALL memcpy($5, [8993], $4)
	
.LABEL $label$52
	*(($5 + $4)) = [0]
	*(($2 + [124])) = [0]
	*($2 + [116 align=4]) = (int_64)0
	$5 = ($2 + [116])
	$4 = CALL $81([9006])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$57 }
	*(($2 + [116])) = ($4 << [1])
	$5 = ($5 + [1])
	if ( $4 ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$57
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*(($2 + [124])) = $5
	*(($2 + [120])) = $4
	*($2 + [116]) = ($6 | [1])
	
.LABEL $label$56
	CALL memcpy($5, [9006], $4)
	
.LABEL $label$55
	*(($5 + $4)) = [0]
	*(($2 + [136])) = [0]
	*($2 + [128]) = (int_64)0
	$5 = ($2 + [128])
	$4 = CALL $81([9019])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$60 }
	*(($2 + [128])) = ($4 << [1])
	$5 = ($5 + [1])
	if ( $4 ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$60
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*(($2 + [136])) = $5
	*(($2 + [132])) = $4
	*($2 + [128]) = ($6 | [1])
	
.LABEL $label$59
	CALL memcpy($5, [9019], $4)
	
.LABEL $label$58
	*(($5 + $4)) = [0]
	*(($2 + [148])) = [0]
	*($2 + [140 align=4]) = (int_64)0
	$5 = ($2 + [140])
	$4 = CALL $81([9032])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$63 }
	*(($2 + [140])) = ($4 << [1])
	$5 = ($5 + [1])
	if ( $4 ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$63
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*(($2 + [148])) = $5
	*(($2 + [144])) = $4
	*($2 + [140]) = ($6 | [1])
	
.LABEL $label$62
	CALL memcpy($5, [9032], $4)
	
.LABEL $label$61
	*(($5 + $4)) = [0]
	*(($2 + [160])) = [0]
	*($2 + [152]) = (int_64)0
	$5 = ($2 + [152])
	$4 = CALL $81([9045])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$22 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$66 }
	*(($2 + [152])) = ($4 << [1])
	$5 = ($5 + [1])
	if ( $4 ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$66
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*(($2 + [160])) = $5
	*(($2 + [156])) = $4
	*($2 + [152]) = ($6 | [1])
	
.LABEL $label$65
	CALL memcpy($5, [9045], $4)
	
.LABEL $label$64
	*(($5 + $4)) = [0]
	*(($2 + [172])) = [0]
	*($2 + [164 align=4]) = (int_64)0
	$5 = ($2 + [164])
	$4 = CALL $81([9058])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$21 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$69 }
	*(($2 + [164])) = ($4 << [1])
	$5 = ($5 + [1])
	if ( $4 ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$69
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*(($2 + [172])) = $5
	*(($2 + [168])) = $4
	*($2 + [164]) = ($6 | [1])
	
.LABEL $label$68
	CALL memcpy($5, [9058], $4)
	
.LABEL $label$67
	*(($5 + $4)) = [0]
	$4 = CALL _Znwj([120])
	*($2 + [176]) = $4
	$10 = ($4 + [120])
	*($2 + [184]) = $10
	$6 = CALL $55($4, ($2 + [56]))
	CALL $55(($4 + [12]), (($2 + [56]) + [12]))
	CALL $55(($4 + [24]), (($2 + [56]) + [24]))
	CALL $55(($4 + [36]), (($2 + [56]) + [36]))
	CALL $55(($4 + [48]), (($2 + [56]) + [48]))
	CALL $55(($4 + [60]), (($2 + [56]) + [60]))
	CALL $55(($4 + [72]), (($2 + [56]) + [72]))
	CALL $55(($4 + [84]), (($2 + [56]) + [84]))
	CALL $55(($4 + [96]), (($2 + [56]) + [96]))
	CALL $55(($4 + [108]), (($2 + [56]) + [108]))
	*($2 + [180]) = $10
	if ( (*($2 + [164]) & [1]) ){ goto $label$71 }
	if ( (*($2 + [152]) & [1]) ){ goto $label$70 }
	goto $label$20 
	
.LABEL $label$71
	CALL _ZdlPv(*(($2 + [172])))
	if ( ((*($2 + [152]) & [1]) == 0) ){ goto $label$20 }
	
.LABEL $label$70
	CALL _ZdlPv(*(($2 + [160])))
	$4 = [1]
	if ( ((*($2 + [140]) & [1]) == 0) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$31
	CALL $54(($2 + [56]))
	
.LABEL $label$30
	CALL $54(($2 + [56]))
	
.LABEL $label$29
	CALL $54($5)
	
.LABEL $label$28
	CALL $54($5)
	
.LABEL $label$27
	CALL $54($5)
	
.LABEL $label$26
	CALL $54($5)
	
.LABEL $label$25
	CALL $54($5)
	
.LABEL $label$24
	CALL $54($5)
	
.LABEL $label$23
	CALL $54($5)
	
.LABEL $label$22
	CALL $54($5)
	
.LABEL $label$21
	CALL $54($5)
	
.LABEL $label$20
	$4 = [1]
	if ( (*($2 + [140]) & [1]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( (*($2 + [128]) & $4) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL _ZdlPv(*(($2 + [148])))
	if ( ((*($2 + [128]) & $4) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*(($2 + [136])))
	$4 = [1]
	if ( ((*($2 + [116]) & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$4 = [1]
	if ( (*($2 + [116]) & [1]) ){ goto $label$14 }
	
.LABEL $label$15
	if ( (*($2 + [104]) & $4) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($2 + [124])))
	if ( ((*($2 + [104]) & $4) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($2 + [112])))
	$4 = [1]
	if ( ((*($2 + [92]) & [1]) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$4 = [1]
	if ( (*($2 + [92]) & [1]) ){ goto $label$10 }
	
.LABEL $label$11
	if ( (*($2 + [80]) & $4) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($2 + [100])))
	if ( ((*($2 + [80]) & $4) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($2 + [88])))
	$4 = [1]
	if ( ((*($2 + [68]) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [1]
	if ( (*($2 + [68]) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( (*($2 + [56]) & $4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($2 + [76])))
	if ( ((*($2 + [56]) & $4) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($2 + [64]))
	$5 = *($2 + [196])
	if ( ((int_64)($8 == 0) == 0) ){ goto $label$3 }
	$12 = [15]
	goto $label$1 
	
.LABEL $label$4
	$5 = *($2 + [196])
	if ( (int_64)($8 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($2 + [192])
	if ( (((int_32)($5 - $4) / (int_32)[12]) <= [2]) ){ goto $label$72 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$73 }
	$11 = $4
	if ( ((int_32)$6 != (int_32)$10) ){ goto $label$74 }
	$12 = [2]
	goto $label$1 
	
.LABEL $label$74
	$12 = [13]
	goto $label$1 
	
.LABEL $label$73
	$12 = [15]
	goto $label$1 
	
.LABEL $label$72
	$12 = [15]
	goto $label$1 
	
.LABEL $label$2
	$12 = [15]
	
.LABEL $label$1
	
.LOOP $label$75:
	goto $label$194 
	
.LABEL $label$196
	$4 = $11
	$10 = *($2 + [180])
	$6 = *($2 + [176])
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$127 }
	$12 = [13]
	goto $label$75 
	
.LABEL $label$195
	$13 = ($11 + [1])
	$12 = [0]
	goto $label$75 
	
.LABEL $label$194
	$5 = ($5 & [1])
	$5 = *($11)
	$14 = ($5 & [1])
	$5 = *($6)
	$9 = uint_32($5 >> [1])
	$15 = ( *($6 + [4]) ? $9 : $14 )
	if ( ((int_32)$15 != (int_32)( *(($4 + [4])) ? uint_32($5 >> [1]) : $5 )) ){ goto $label$123 }
	$12 = [60]
	goto $label$75 
	
.LABEL $label$193
	$16 = ( *(($4 + [8])) ? $13 : $5 )
	if ( $14 ){ goto $label$80 }
	$12 = [65]
	goto $label$75 
	
.LABEL $label$192
	if ( ($15 == 0) ){ goto $label$78 }
	$12 = [66]
	goto $label$75 
	
.LABEL $label$191
	$5 = [0]
	$12 = [67]
	goto $label$75 
	
.LABEL $label$190
	if ( ((int_32)*((($6 + $5) + [1])) != (int_32)*(($16 + $5))) ){ goto $label$120 }
	$12 = [68]
	goto $label$75 
	
.LABEL $label$189
	$5 = ($5 + [1])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$76 }
	goto $label$77 
	
.LABEL $label$188
	if ( ($15 == 0) ){ goto $label$79 }
	$12 = [62]
	goto $label$75 
	
.LABEL $label$187
	if ( (CALL $80(( *($6 + [8]) ? ($6 + [1]) : $14 ), $16, $15) == 0) ){ goto $label$121 }
	$12 = [1]
	goto $label$75 
	
.LABEL $label$186
	$6 = ($6 + [12])
	if ( ((int_32)$6 != (int_32)$10) ){ goto $label$122 }
	$12 = [2]
	goto $label$75 
	
.LABEL $label$185
	$5 = ($4 + [12])
	goto $label$119 
	
.LABEL $label$184
	$5 = ($4 + [12])
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$126 }
	$12 = [64]
	goto $label$75 
	
.LABEL $label$183
	$11 = $5
	$4 = *($2 + [196])
	if ( ((int_32)$4 != (int_32)$11) ){ goto $label$124 }
	goto $label$125 
	
.LABEL $label$182
	$9 = *($2 + [196])
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$117 }
	$12 = [4]
	goto $label$75 
	
.LABEL $label$181
	if ( (*($4) & [1]) ){ goto $label$116 }
	$12 = [59]
	goto $label$75 
	
.LABEL $label$180
	*($4) = [0]
	goto $label$115 
	
.LABEL $label$179
	*(*(($4 + [8]))) = [0]
	*(($4 + [4])) = [0]
	$12 = [6]
	goto $label$75 
	
.LABEL $label$178
	CALL $59($4, [0])
	$6 = ($5 + [8])
	*(($4 + [8])) = *($6)
	*($4) = *($5)
	*($5) = (int_64)0
	*($6) = [0]
	$4 = ($4 + [12])
	$5 = ($5 + [12])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$118 }
	$12 = [7]
	goto $label$75 
	
.LABEL $label$177
	$5 = *($2 + [196])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$113 }
	$12 = [8]
	goto $label$75 
	
.LABEL $label$176
	$6 = ($5 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$112 }
	$12 = [9]
	goto $label$75 
	
.LABEL $label$175
	CALL _ZdlPv(*(($5 + [-4])))
	$12 = [10]
	goto $label$75 
	
.LABEL $label$174
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$114 }
	$12 = [11]
	goto $label$75 
	
.LABEL $label$173
	*($2 + [196]) = $4
	if ( ((int_32)$4 != (int_32)$11) ){ goto $label$111 }
	$12 = [14]
	goto $label$75 
	
.LABEL $label$172
	$5 = $4
	$12 = [15]
	goto $label$75 
	
.LABEL $label$171
	$6 = *($2 + [192])
	$5 = ($5 - $6)
	$4 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$110 }
	$12 = [16]
	goto $label$75 
	
.LABEL $label$170
	$5 = (CASTING uint_32)(uint_64 ((uint_64)(int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($2 + [209]) + (int_64)*($2 + [208])) + (int_64)*($2 + [210])) + (int_64)*($2 + [211])) + (int_64)*($2 + [212])) + (int_64)*($2 + [213])) + (int_64)*($2 + [214])) + (int_64)*($2 + [215])) << (int_64)32) >> (int_64)32) % (uint_64)(CASTING uint_64)(uint_32 $4))
	if ( ((uint_32)$4 <= (uint_32)$5)) ){ goto $label$109 }
	$12 = [18]
	goto $label$75 
	
.LABEL $label$169
	$4 = ($6 + ((int_32)$5 * (int_32)[12]))
	$5 = *($4)
	if ( ($5 & [1]) ){ goto $label$108 }
	$12 = [58]
	goto $label$75 
	
.LABEL $label$168
	$5 = uint_32($5 >> [1])
	$4 = ($4 + [1])
	goto $label$107 
	
.LABEL $label$167
	$5 = *($4 + [4])
	$4 = *($4 + [8])
	$12 = [20]
	goto $label$75 
	
.LABEL $label$166
	*($2 + [52]) = $5
	*($2 + [48]) = $4
	*($2) = *($2 + [48])
	*($3) = *(CALL $2(($2 + [56]), $2))
	$12 = [21]
	goto $label$75 
	
.LABEL $label$165
	$6 = ($0 + [104])
	$8 = *(($0 + [112]))
	$17 = *($0 + [104])
	*($2 + [40]) = (int_64)0
	$4 = CALL db_lowerbound_i64($17, $8, (int_64)-5002754494514069504, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$106 }
	$12 = [22]
	goto $label$75 
	
.LABEL $label$164
	$4 = CALL $23($6, $4)
	*($2 + [40]) = *($4)
	CALL eosio_assert([1], [9171])
	$4 = CALL db_next_i64(*($4 + [68]), ($2 + [56]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$105 }
	$12 = [23]
	goto $label$75 
	
.LABEL $label$163
	$12 = [24]
	goto $label$75 
	
.LABEL $label$162
	$4 = CALL $23($6, $4)
	*($2 + [40]) = *($4)
	CALL eosio_assert([1], [9171])
	$4 = CALL db_next_i64(*($4 + [68]), ($2 + [56]))
	if ( ((int_32)$4 >= (int_32)[0]) ){ goto $label$104 }
	$12 = [25]
	goto $label$75 
	
.LABEL $label$161
	$8 = *($0 + [40])
	$5 = *(($0 + [92]))
	$16 = *(($0 + [88]))
	if ( ((int_32)$16 == (int_32)$5) ){ goto $label$103 }
	$12 = [26]
	goto $label$75 
	
.LABEL $label$160
	$12 = [27]
	goto $label$75 
	
.LABEL $label$159
	$4 = ($5 + [-24])
	$9 = *($4)
	if ( ((int_64)*($9) == (int_64)$8) ){ goto $label$100 }
	$12 = [28]
	goto $label$75 
	
.LABEL $label$158
	$5 = $4
	if ( ((int_32)$16 != (int_32)$4) ){ goto $label$101 }
	goto $label$102 
	
.LABEL $label$157
	if ( ((int_32)$16 == (int_32)$5) ){ goto $label$99 }
	$12 = [57]
	goto $label$75 
	
.LABEL $label$156
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$7), [8657])
	goto $label$97 
	
.LABEL $label$155
	$9 = [0]
	$4 = CALL db_find_i64(*(($0 + [64])), *(($0 + [72])), (int_64)7235159551874301952, $8)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$98 }
	$12 = [30]
	goto $label$75 
	
.LABEL $label$154
	$9 = CALL $15($7, $4)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$7), [8657])
	$12 = [31]
	goto $label$75 
	
.LABEL $label$153
	$14 = [0]
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9071])
	*($2 + [32]) = *($9 + [8])
	$8 = *($0 + [48])
	$5 = *(($0 + [92]))
	$9 = *(($0 + [88]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$96 }
	$12 = [32]
	goto $label$75 
	
.LABEL $label$152
	$12 = [33]
	goto $label$75 
	
.LABEL $label$151
	$4 = ($5 + [-24])
	$16 = *($4)
	if ( ((int_64)*($16) == (int_64)$8) ){ goto $label$93 }
	$12 = [34]
	goto $label$75 
	
.LABEL $label$150
	$5 = $4
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$94 }
	goto $label$95 
	
.LABEL $label$149
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$92 }
	$12 = [55]
	goto $label$75 
	
.LABEL $label$148
	CALL eosio_assert(((int_32)*($16 + [16]) == (int_32)$7), [8657])
	$14 = $16
	goto $label$90 
	
.LABEL $label$147
	$4 = CALL db_find_i64(*(($0 + [64])), *(($0 + [72])), (int_64)7235159551874301952, $8)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$91 }
	$12 = [36]
	goto $label$75 
	
.LABEL $label$146
	$14 = CALL $15($7, $4)
	CALL eosio_assert(((int_32)*($14 + [16]) == (int_32)$7), [8657])
	$12 = [37]
	goto $label$75 
	
.LABEL $label$145
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [9120])
	*($2 + [24]) = *($14 + [8])
	$8 = *($0)
	*($2 + [60]) = $3
	*($2 + [64]) = $1
	*($2 + [56]) = ($2 + [40])
	*($2 + [68]) = ($2 + [24])
	*($2 + [72]) = ($2 + [32])
	CALL $24(($2 + [16]), $6, $8, ($2 + [56]))
	$6 = *($2 + [176])
	if ( ($6 == 0) ){ goto $label$89 }
	$12 = [38]
	goto $label$75 
	
.LABEL $label$144
	$5 = *($2 + [180])
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$88 }
	$12 = [39]
	goto $label$75 
	
.LABEL $label$143
	$12 = [40]
	goto $label$75 
	
.LABEL $label$142
	$4 = ($5 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$86 }
	$12 = [41]
	goto $label$75 
	
.LABEL $label$141
	CALL _ZdlPv(*(($5 + [-4])))
	$12 = [42]
	goto $label$75 
	
.LABEL $label$140
	$5 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$87 }
	$12 = [43]
	goto $label$75 
	
.LABEL $label$139
	*($2 + [180]) = $6
	CALL _ZdlPv($6)
	$12 = [44]
	goto $label$75 
	
.LABEL $label$138
	$6 = *($2 + [192])
	if ( ($6 == 0) ){ goto $label$85 }
	$12 = [45]
	goto $label$75 
	
.LABEL $label$137
	$5 = *($2 + [196])
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$84 }
	$12 = [46]
	goto $label$75 
	
.LABEL $label$136
	$12 = [47]
	goto $label$75 
	
.LABEL $label$135
	$4 = ($5 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$82 }
	$12 = [48]
	goto $label$75 
	
.LABEL $label$134
	CALL _ZdlPv(*(($5 + [-4])))
	$12 = [49]
	goto $label$75 
	
.LABEL $label$133
	$5 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$83 }
	$12 = [50]
	goto $label$75 
	
.LABEL $label$132
	$4 = *($2 + [192])
	goto $label$81 
	
.LABEL $label$131
	$4 = $6
	$12 = [51]
	goto $label$75 
	
.LABEL $label$130
	*($2 + [196]) = $6
	CALL _ZdlPv($4)
	$12 = [52]
	goto $label$75 
	
.LABEL $label$129
	$global$0 = ($2 + [256])
	return (unreachable)
	
.LABEL $label$128
	CALL $65(($2 + [192]))
	
.LABEL $label$127
	$12 = [2]
	goto $label$75 
	
.LABEL $label$126
	$12 = [3]
	goto $label$75 
	
.LABEL $label$125
	$12 = [14]
	goto $label$75 
	
.LABEL $label$124
	$12 = [12]
	goto $label$75 
	
.LABEL $label$123
	$12 = [1]
	goto $label$75 
	
.LABEL $label$122
	$12 = [0]
	goto $label$75 
	
.LABEL $label$121
	$12 = [63]
	goto $label$75 
	
.LABEL $label$120
	$12 = [1]
	goto $label$75 
	
.LABEL $label$119
	$12 = [3]
	goto $label$75 
	
.LABEL $label$118
	$12 = [4]
	goto $label$75 
	
.LABEL $label$117
	$12 = [8]
	goto $label$75 
	
.LABEL $label$116
	$12 = [5]
	goto $label$75 
	
.LABEL $label$115
	$12 = [6]
	goto $label$75 
	
.LABEL $label$114
	$12 = [8]
	goto $label$75 
	
.LABEL $label$113
	$12 = [11]
	goto $label$75 
	
.LABEL $label$112
	$12 = [10]
	goto $label$75 
	
.LABEL $label$111
	$12 = [12]
	goto $label$75 
	
.LABEL $label$110
	$12 = [21]
	goto $label$75 
	
.LABEL $label$109
	$12 = [17]
	goto $label$75 
	
.LABEL $label$108
	$12 = [19]
	goto $label$75 
	
.LABEL $label$107
	$12 = [20]
	goto $label$75 
	
.LABEL $label$106
	$12 = [25]
	goto $label$75 
	
.LABEL $label$105
	$12 = [25]
	goto $label$75 
	
.LABEL $label$104
	$12 = [24]
	goto $label$75 
	
.LABEL $label$103
	$12 = [29]
	goto $label$75 
	
.LABEL $label$102
	$12 = [29]
	goto $label$75 
	
.LABEL $label$101
	$12 = [27]
	goto $label$75 
	
.LABEL $label$100
	$12 = [56]
	goto $label$75 
	
.LABEL $label$99
	$12 = [29]
	goto $label$75 
	
.LABEL $label$98
	$12 = [31]
	goto $label$75 
	
.LABEL $label$97
	$12 = [31]
	goto $label$75 
	
.LABEL $label$96
	$12 = [35]
	goto $label$75 
	
.LABEL $label$95
	$12 = [35]
	goto $label$75 
	
.LABEL $label$94
	$12 = [33]
	goto $label$75 
	
.LABEL $label$93
	$12 = [54]
	goto $label$75 
	
.LABEL $label$92
	$12 = [35]
	goto $label$75 
	
.LABEL $label$91
	$12 = [37]
	goto $label$75 
	
.LABEL $label$90
	$12 = [37]
	goto $label$75 
	
.LABEL $label$89
	$12 = [44]
	goto $label$75 
	
.LABEL $label$88
	$12 = [43]
	goto $label$75 
	
.LABEL $label$87
	$12 = [40]
	goto $label$75 
	
.LABEL $label$86
	$12 = [42]
	goto $label$75 
	
.LABEL $label$85
	$12 = [52]
	goto $label$75 
	
.LABEL $label$84
	$12 = [53]
	goto $label$75 
	
.LABEL $label$83
	$12 = [47]
	goto $label$75 
	
.LABEL $label$82
	$12 = [49]
	goto $label$75 
	
.LABEL $label$81
	$12 = [51]
	goto $label$75 
	
.LABEL $label$80
	$12 = [61]
	goto $label$75 
	
.LABEL $label$79
	$12 = [63]
	goto $label$75 
	
.LABEL $label$78
	$12 = [63]
	goto $label$75 
	
.LABEL $label$77
	$12 = [63]
	goto $label$75 
	
.LABEL $label$76
	$12 = [67]
	goto $label$75 
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	$12
}

int_32 .FUNC $4 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [240])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $84($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [232]) = (int_64)0
	*($4 + [224]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8563])
	CALL memcpy(($4 + [224]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8563])
	CALL memcpy((($4 + [224]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$3 = CALL $14(($4 + [32]), $0, $1, $4)
	$8 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [232])
	$1 = *($4 + [224])
	if ( ($5 & [1]) ){ goto $label$11 }
	CALL void $8((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL void $8((int_32 $1), (int_64 $0), (int_64 *((*($8) + $6))))
	if ( ($7 <= [513]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $87($2)
	$5 = *(($3 + [128]))
	if ( ($5 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$5 = *(($3 + [128]))
	if ( $5 ){ goto $label$7 }
	
.LABEL $label$8
	$5 = *(($3 + [88]))
	if ( $5 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [132])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($7 + [24])))
	
.LABEL $label$16
	CALL _ZdlPv($7)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($3 + [128]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $5
	
.LABEL $label$12
	*($8) = $5
	CALL _ZdlPv($2)
	$5 = *(($3 + [88]))
	if ( ($5 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($3 + [92])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$18 }
	
.LOOP $label$19:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$20 }
	CALL _ZdlPv($7)
	
.LABEL $label$20
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$19 }
	$2 = *(($3 + [88]))
	goto $label$17 
	
.LABEL $label$18
	$2 = $5
	
.LABEL $label$17
	*($8) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [240])
	return [1]
}

void .FUNC $5 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = ($0 + [64])
	$3 = [0]
	$4 = CALL db_lowerbound_i64(*($0 + [64]), *(($0 + [72])), (int_64)7235159551874301952, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $15($2, $4)
	goto $label$1 
	
.LABEL $label$2
	$3 = [1]
	
.LABEL $label$1
	CALL eosio_assert($3, [8523])
	$5 = *($0)
	*($1 + [8]) = $0
	CALL $16($1, $2, $5, ($1 + [8]))
	$5 = *($0)
	*($1 + [8]) = $0
	CALL $17($1, $2, $5, ($1 + [8]))
	$5 = *($0)
	*($1 + [8]) = $0
	CALL $18($1, $2, $5, ($1 + [8]))
	$global$0 = ($1 + [16])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8366])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8471])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8404])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8471])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $3 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = $2
	CALL require_auth(*($0))
	$4 = ($0 + [64])
	$6 = *(($0 + [92]))
	$5 = *(($0 + [88]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [8657])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [72])), (int_64)7235159551874301952, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $15($4, $7)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [8657])
	
.LABEL $label$1
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [8625])
	$1 = *($0)
	*($3) = ($3 + [8])
	CALL eosio_assert($7, [8708])
	CALL $20($4, $8, $1, $3)
	$global$0 = ($3 + [16])
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [240])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$2 }
	*($3 + [224]) = [8192]
	*($3 + [228]) = CALL $81([8192])
	*($3 + [104]) = *($3 + [224])
	CALL $2(($3 + [232]), ($3 + [104]))
	if ( ((int_64)$1 == (int_64)6138663591592764928) ){ goto $label$2 }
	*($3 + [208]) = [8213]
	*($3 + [212]) = CALL $81([8213])
	*($3 + [96]) = *($3 + [208])
	CALL $2(($3 + [216]), ($3 + [96]))
	if ( ((int_64)$1 == (int_64)-3795279497609865936) ){ goto $label$2 }
	*($3 + [192]) = [8312]
	*($3 + [196]) = CALL $81([8312])
	*($3 + [88]) = *($3 + [192])
	CALL $2(($3 + [200]), ($3 + [88]))
	if ( ((int_64)$1 != (int_64)4301877912145143680) ){ goto $label$1 }
	
.LABEL $label$2
	*($3 + [184]) = [8325]
	*($3 + [188]) = CALL $81([8325])
	*($3 + [80]) = *($3 + [184])
	CALL $2(($3 + [232]), ($3 + [80]))
	if ( ((int_64)$2 > (int_64)3626181449533095935) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-5002754495885344768) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-3075276119992054512) ){ goto $label$1 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [1]
	*($3 + [56]) = *($3 + [136])
	CALL $4($0, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)3626181449533095936) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)5378271183035695104) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)8421049960203129232) ){ goto $label$1 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [2]
	*($3 + [40]) = *($3 + [152])
	CALL $6($0, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [132]) = [0]
	*($3 + [128]) = [3]
	*($3 + [64]) = *($3 + [128])
	CALL $8($0, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [148]) = [0]
	*($3 + [144]) = [4]
	*($3 + [48]) = *($3 + [144])
	CALL $6($0, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [176]) = [8192]
	*($3 + [180]) = CALL $81([8192])
	*($3 + [32]) = *($3 + [176])
	CALL $2(($3 + [232]), ($3 + [32]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$4 }
	CALL eosio_assert([1], [8334])
	goto $label$3 
	
.LABEL $label$5
	*($3 + [124]) = [0]
	*($3 + [120]) = [5]
	*($3 + [72]) = *($3 + [120])
	CALL $11($0, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [168]) = [8213]
	*($3 + [172]) = CALL $81([8213])
	*($3 + [24]) = *($3 + [168])
	CALL $2(($3 + [216]), ($3 + [24]))
	if ( ((int_64)$1 != (int_64)-3795279497609865936) ){ goto $label$10 }
	CALL eosio_assert([1], [8334])
	goto $label$3 
	
.LABEL $label$10
	*($3 + [160]) = [8312]
	*($3 + [164]) = CALL $81([8312])
	*($3 + [16]) = *($3 + [160])
	CALL $2(($3 + [200]), ($3 + [16]))
	CALL eosio_assert(((int_64)$1 == (int_64)4301877912145143680), [8334])
	
.LABEL $label$3
	*($3 + [116]) = [0]
	*($3 + [112]) = [6]
	*($3 + [8]) = *($3 + [112])
	CALL $13($0, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $67([0])
	$global$0 = ($3 + [240])
}

int_32 .FUNC $14 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	*(($5 = (($4 + [64]) + [8]))) = *(($3 + [8]))
	*($4 + [64]) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*((($4 + [80]) + [8])) = $3
	$2 = *($4 + [64])
	*($0 + [16]) = $2
	*(($0 + [24])) = $3
	*($4 + [80]) = $2
	*($0 + [40]) = (int_64)2
	*($0 + [32]) = (int_64)1
	*($0 + [48]) = (int_64)3
	$2 = (int_64)4
	*($0 + [56]) = (int_64)4
	*($0 + [64]) = $1
	*(($0 + [72])) = $1
	*(($0 + [80])) = (int_64)-1
	*(($0 + [88])) = (int_64)0
	*(($0 + [96])) = [0]
	*($0 + [104]) = $1
	*(($0 + [112])) = $1
	*(($0 + [120])) = (int_64)-1
	*(($0 + [128])) = (int_64)0
	*(($0 + [136])) = [0]
	*($4 + [56]) = [9641]
	*($4 + [60]) = CALL $81([9641])
	*($4 + [24]) = *($4 + [56])
	CALL $2(($0 + [144]), ($4 + [24]))
	*($4 + [48]) = [8899]
	*($4 + [52]) = CALL $81([8899])
	*($4 + [16]) = *($4 + [48])
	CALL $2(($0 + [152]), ($4 + [16]))
	*($4 + [40]) = [8213]
	*($4 + [44]) = CALL $81([8213])
	*($4 + [8]) = *($4 + [40])
	CALL $2(($0 + [160]), ($4 + [8]))
	*($4 + [32]) = [8192]
	*($4 + [36]) = CALL $81([8192])
	*($4) = *($4 + [32])
	CALL $2(($0 + [168]), $4)
	$3 = CALL $81([9654])
	if ( ($3 <= [8]) ){ goto $label$3 }
	CALL eosio_assert([0], [9663])
	goto $label$2 
	
.LABEL $label$3
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$1 = (int_64)0
	
.LOOP $label$4:
	$5 = *(($3 + [9653]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$5 }
	CALL eosio_assert([0], [9708])
	
.LABEL $label$5
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$4 }
	$2 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	
.LABEL $label$1
	*(($0 + [176])) = $2
	$3 = CALL $81([9658])
	if ( ($3 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [9663])
	goto $label$8 
	
.LABEL $label$9
	if ( ($3 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$1 = (int_64)0
	
.LOOP $label$10:
	$5 = *(($3 + [9657]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [9708])
	
.LABEL $label$11
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$6 
	
.LABEL $label$7
	$1 = (int_64)4
	
.LABEL $label$6
	*(($0 + [184])) = $1
	$global$0 = ($4 + [96])
	return $0
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8540])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $84($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8563])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8563])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $33(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $87($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $16 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8568])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $32($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $33(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8568])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $34($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $33(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $10 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [104])
	$5 = *(($0 + [132]))
	$4 = *(($0 + [128]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$3), [8657])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [112])), (int_64)-5002754494514069504, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $23($3, $6)
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$3), [8657])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [9201])
	CALL eosio_assert($6, [9236])
	CALL eosio_assert($6, [9171])
	$6 = CALL db_next_i64(*($7 + [68]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $23($3, $6)
	
.LABEL $label$5
	CALL $25($3, $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $11 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [240])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $84($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [232]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8563])
	CALL memcpy(($4 + [232]), $2, [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [8])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$3 = CALL $14(($4 + [40]), $0, $1, ($4 + [8]))
	$8 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [232])
	if ( ($5 & [1]) ){ goto $label$11 }
	CALL void $8((int_32 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL void $8((int_32 $0), (int_64 *((*($8) + $6))))
	if ( ($7 <= [513]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $87($2)
	$5 = *(($3 + [128]))
	if ( ($5 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$5 = *(($3 + [128]))
	if ( $5 ){ goto $label$7 }
	
.LABEL $label$8
	$5 = *(($3 + [88]))
	if ( $5 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [132])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($7 + [24])))
	
.LABEL $label$16
	CALL _ZdlPv($7)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($3 + [128]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $5
	
.LABEL $label$12
	*($8) = $5
	CALL _ZdlPv($2)
	$5 = *(($3 + [88]))
	if ( ($5 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($3 + [92])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$18 }
	
.LOOP $label$19:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$20 }
	CALL _ZdlPv($7)
	
.LABEL $label$20
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$19 }
	$2 = *(($3 + [88]))
	goto $label$17 
	
.LABEL $label$18
	$2 = $5
	
.LABEL $label$17
	*($8) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [240])
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	$5 = ($global$0 - [240])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)*($0 + [152]) == (int_64)$1) ){ goto $label$1 }
	$7 = *($3 + [8])
	$8 = [0]
	$6 = *($3)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$1 = (uint_64)$7 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$1 = $2
	$8 = [1]
	$9 = $3
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$1 = $2
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$3 < (int_32)[6])
	$9 = ($3 + [1])
	$3 = $9
	if ( $8 ){ goto $label$6 }
	$8 = [1]
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$8 = [0]
	
.LABEL $label$2
	CALL eosio_assert($8, [9418])
	*($5 + [200]) = $6
	if ( ((int_64)$7 != (int_64)*($0 + [184])) ){ goto $label$1 }
	if ( (*($4) & [1]) ){ goto $label$8 }
	$3 = ($4 + [1])
	goto $label$7 
	
.LABEL $label$8
	$3 = *($4 + [8])
	
.LABEL $label$7
	$10 = [0]
	$1 = CALL $78($3, [0], [10])
	$11 = ($0 + [104])
	$8 = *(($0 + [132]))
	$9 = *(($0 + [128]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$10 }
	
.LOOP $label$12:
	$3 = ($8 + [-24])
	$4 = *($3)
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$11 }
	$8 = $3
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$11), [8657])
	$10 = $4
	goto $label$9 
	
.LABEL $label$10
	$3 = CALL db_find_i64(*($11), *(($0 + [112])), (int_64)-5002754494514069504, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$9 }
	$10 = CALL $23($11, $3)
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$11), [8657])
	
.LABEL $label$9
	$4 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($4, [9201])
	$12 = *($10 + [8])
	CALL require_auth($12)
	CALL eosio_assert(((uint_64)$6 <= (uint_64)*($10 + [40])), [9432])
	$1 = CALL current_time()
	CALL eosio_assert(((uint_32)*($10 + [60]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000))), [9468])
	$1 = *($10 + [48])
	$13 = *($0)
	*($5 + [144]) = [9501]
	*($5 + [148]) = CALL $81([9501])
	*($5 + [8]) = *($5 + [144])
	$3 = CALL $2(($5 + [152]), ($5 + [8]))
	$14 = *($0 + [168])
	$15 = *($3)
	*($5 + [128]) = [8325]
	*($5 + [132]) = CALL $81([8325])
	*($5) = *($5 + [128])
	$16 = CALL $2(($5 + [136]), $5)
	$7 = *($0 + [176])
	$6 = ((int_64)$1 * (int_64)((uint_64)$6 / (uint_64)(int_64)10000))
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9572])
	$1 = (uint_64)$7 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$1 = $2
	$8 = [1]
	$9 = $3
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$1 = $2
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$3 < (int_32)[6])
	$9 = ($3 + [1])
	$3 = $9
	if ( $8 ){ goto $label$17 }
	$8 = [1]
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$8 = [0]
	
.LABEL $label$13
	CALL eosio_assert($8, [9621])
	*(($5 + [56])) = [0]
	*($5 + [48]) = (int_64)0
	$3 = CALL $81([9508])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$29 }
	*($5 + [48]) = ($3 << [1])
	$8 = (($5 + [48]) | [1])
	if ( $3 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$9 = (($3 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [48]) = ($9 | [1])
	*($5 + [56]) = $8
	*($5 + [52]) = $3
	
.LABEL $label$28
	CALL memcpy($8, [9508], $3)
	
.LABEL $label$27
	*(($8 + $3)) = [0]
	CALL $63(($5 + [32]), (int_64))(*(($10 + [40])) - *($5 + [200])))
	$3 = *($5 + [32])
	$8 = ($3 & [1])
	$3 = CALL $62(($5 + [48]), ( *($5 + [40]) ? (($5 + [32]) | [1]) : $8 ), ( *($5 + [36]) ? uint_32($3 >> [1]) : $8 ))
	$8 = ($3 + [8])
	*((($5 + [64]) + [8])) = *($8)
	*($5 + [64]) = *($3)
	*($3) = (int_64)0
	*($8) = [0]
	*((($5 + [16]) + [8])) = [0]
	*($5 + [16]) = (int_64)0
	$3 = CALL $81([9538])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$32 }
	*($5 + [16]) = ($3 << [1])
	$9 = (($5 + [16]) | [1])
	$8 = $9
	if ( $3 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$9 = (($3 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [16]) = ($9 | [1])
	*($5 + [24]) = $8
	*($5 + [20]) = $3
	$9 = (($5 + [16]) | [1])
	
.LABEL $label$31
	CALL memcpy($8, [9538], $3)
	
.LABEL $label$30
	*(($8 + $3)) = [0]
	$3 = *($5 + [16])
	$8 = ($3 & [1])
	$3 = CALL $62(($5 + [64]), ( *($5 + [24]) ? $9 : $8 ), ( *($5 + [20]) ? uint_32($3 >> [1]) : $8 ))
	$8 = *($3)
	*($3) = [0]
	$17 = *($3 + [8])
	$9 = *($3 + [4])
	*($3 + [4 align=4]) = (int_64)0
	*((($5 + [80]) + [24])) = $7
	*((($5 + [80]) + [36])) = $9
	*(($5 + [120])) = $17
	*($5 + [88]) = $12
	*($5 + [96]) = $6
	*($5 + [112]) = $8
	*($5 + [160]) = $14
	*($5 + [80]) = *($0)
	*($5 + [168]) = *($16)
	*(($3 = CALL _Znwj([16]))) = $13
	*($3 + [8]) = $15
	*((($5 + [160]) + [36])) = [0]
	$16 = ($3 + [16])
	*((($5 + [160]) + [24])) = $16
	*(($5 + [180])) = $16
	*($5 + [176]) = $3
	*($5 + [188 align=4]) = (int_64)0
	$8 = ( $9 ? (uint_32($8 >> [1]) & [127]) : ($8 & [1]) )
	$3 = ($8 + [32])
	$1 = (CASTING uint_64)(uint_32 $8)
	$8 = ($5 + [188])
	
.LOOP $label$33:
	$3 = ($3 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$33 }
	if ( ($3 == 0) ){ goto $label$35 }
	CALL $28($8, $3)
	$8 = *(($5 + [192]))
	$3 = *(($5 + [188]))
	goto $label$34 
	
.LABEL $label$35
	$8 = [0]
	$3 = [0]
	
.LABEL $label$34
	*($5 + [212]) = $3
	*($5 + [208]) = $3
	*($5 + [216]) = $8
	*($5 + [224]) = ($5 + [208])
	*($5 + [232]) = ($5 + [80])
	CALL $29(($5 + [232]), ($5 + [224]))
	CALL $30(($5 + [208]), ($5 + [160]))
	$3 = *($5 + [208])
	CALL send_inline($3, (*($5 + [212]) - $3))
	$3 = *($5 + [208])
	if ( ($3 == 0) ){ goto $label$36 }
	*($5 + [212]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$36
	$3 = *($5 + [188])
	if ( ($3 == 0) ){ goto $label$37 }
	*(($5 + [192])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$37
	$3 = *($5 + [176])
	if ( ($3 == 0) ){ goto $label$38 }
	*(($5 + [180])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$38
	if ( (*($5 + [112]) & [1]) ){ goto $label$40 }
	if ( (*($5 + [16]) & [1]) ){ goto $label$39 }
	goto $label$24 
	
.LABEL $label$40
	CALL _ZdlPv(*(($5 + [120])))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$24 }
	
.LABEL $label$39
	CALL _ZdlPv(*(($5 + [24])))
	$3 = [1]
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$26
	CALL $54(($5 + [48]))
	
.LABEL $label$25
	CALL $54(($5 + [16]))
	
.LABEL $label$24
	$3 = [1]
	if ( (*($5 + [64]) & [1]) ){ goto $label$22 }
	
.LABEL $label$23
	if ( (*($5 + [32]) & $3) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	CALL _ZdlPv(*($5 + [72]))
	if ( ((*($5 + [32]) & $3) == 0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL _ZdlPv(*(($5 + [40])))
	if ( (*($5 + [48]) & [1]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv(*($5 + [56]))
	
.LABEL $label$18
	$1 = *($0)
	*($5 + [80]) = ($5 + [200])
	CALL eosio_assert($4, [8708])
	CALL $31($11, $10, $1, ($5 + [80]))
	
.LABEL $label$1
	$global$0 = ($5 + [240])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [304])
	$global$0 = $3
	*(($4 = $3) + [296]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $84($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [272])) = (int_64)0
	*(($4 + [288])) = [0]
	*($4 + [256]) = (int_64)0
	*($4 + [248]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [236]) = $2
	*($4 + [232]) = $2
	*($4 + [240]) = ($2 + $5)
	*($4 + [16]) = ($4 + [232])
	*($4 + [40]) = ($4 + [248])
	CALL $26(($4 + [40]), ($4 + [16]))
	$3 = *($4 + [240])
	*((($4 + [24]) + [8])) = $3
	*(($4 + [8])) = $3
	$6 = *($4 + [232])
	*($4) = $6
	*($4 + [24]) = $6
	$7 = CALL $14(($4 + [40]), $0, $1, $4)
	*($4 + [16]) = $7
	*($4 + [20]) = ($4 + [296])
	CALL $27(($4 + [16]), ($4 + [248]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $87($2)
	
.LABEL $label$4
	$3 = *(($7 + [128]))
	if ( ($3 == 0) ){ goto $label$5 }
	$8 = ($7 + [132])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($7 + [128]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($8) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$3 = *(($7 + [88]))
	if ( ($3 == 0) ){ goto $label$11 }
	$8 = ($7 + [92])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	CALL _ZdlPv($5)
	
.LABEL $label$15
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($7 + [88]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $3
	
.LABEL $label$12
	*($8) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$11
	if ( ((*($4 + [280]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($4 + [288])))
	
.LABEL $label$16
	$global$0 = ($4 + [304])
	return [1]
}

void .FUNC $75 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8568])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $35($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $33(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8568])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $36($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $33(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $82(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9764])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $82(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $87($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $54 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $34 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0 + [8]) = (int_64)1000000
	*($0) = *(*(*($2 + [4])) + [40])
	$1 = *($2)
	CALL eosio_assert([1], [8619])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8619])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

int_32 .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $58($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0 + [8]) = (int_64)5
	*($0) = *(*(*($2 + [4])) + [48])
	$1 = *($2)
	CALL eosio_assert([1], [8619])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8619])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8619])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8619])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8619])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8619])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $43(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $64($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $41($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $59($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $59($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $54($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [8743])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8789])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [8840])
	CALL eosio_assert([1], [8619])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8619])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8540])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $84($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [8]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24]) = [0]
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [40])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [56])
	*($3 + [60]) = ($5 + [60])
	CALL $40(($3 + [32]), ($3 + [24]))
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $39(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $87($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = ($3 + [1])
	$6 = ($1 + [1])
	$7 = [-1]
	$8 = [-1]
	$9 = ($9 & [1])
	$9 = *($1)
	$10 = ( *($1 + [4]) ? uint_32($9 >> [1]) : $9 )
	if ( ($10 == 0) ){ goto $label$1 }
	$11 = ( *($1 + [8]) ? $6 : $9 )
	$9 = $11
	$8 = ($8 & [1])
	$8 = *($3)
	$12 = ( *($3 + [4]) ? uint_32($8 >> [1]) : $8 )
	if ( ($12 == 0) ){ goto $label$2 }
	$13 = ( *($3 + [8]) ? $5 : $8 )
	$9 = $11
	
.LOOP $label$3:
	if ( (CALL $79($13, *($9), $12) == 0) ){ goto $label$2 }
	$8 = [-1]
	$9 = ($9 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = ($9 - $11)
	
.LABEL $label$1
	$9 = ($9 & [1])
	$9 = *($1)
	$10 = ( *(($1 + [4])) ? uint_32($9 >> [1]) : $9 )
	if ( ((uint_32)$10 <= (uint_32)$8) ){ goto $label$4 }
	$12 = ($12 & [1])
	$12 = *($3)
	$13 = ( *(($3 + [4])) ? uint_32($12 >> [1]) : $12 )
	if ( ($13 == 0) ){ goto $label$4 }
	$14 = ( *(($3 + [8])) ? $5 : $12 )
	$11 = ( *(($1 + [8])) ? $6 : $9 )
	$15 = ($11 + $10)
	$12 = ($11 + $8)
	
.LOOP $label$6:
	$10 = *($12)
	$7 = $13
	$9 = $14
	
.LOOP $label$7:
	if ( ((int_32)($10 & [255]) == (int_32)*($9)) ){ goto $label$5 }
	$9 = ($9 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 != (int_32)$15) ){ goto $label$6 }
	$12 = $15
	
.LABEL $label$5
	$7 = ( [-1] ? ($12 - $11) : ((int_32)$12 == (int_32)$15) )
	
.LABEL $label$4
	if ( ((int_32)($7 & $8) == (int_32)[-1]) ){ goto $label$8 }
	$16 = ($2 + [8])
	$11 = ($2 + [4])
	
.LOOP $label$9:
	$10 = CALL $56($4, $1, $8, ($7 - $8), $1)
	$9 = *($11)
	if ( ((uint_32)$9 >= (uint_32)*($16)) ){ goto $label$11 }
	*($9) = *($4)
	$9 = ($4 + [8])
	*(($9 + [8])) = *($9)
	*($9) = [0]
	*($11) = (*($11) + [12])
	*($4) = (int_64)0
	goto $label$10 
	
.LABEL $label$11
	CALL $37($2, $10)
	if ( ((*($4) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$10
	$13 = ($3 + [4])
	$17 = ($3 + [8])
	$15 = ($1 + [8])
	$8 = [-1]
	$9 = ($9 & [1])
	$9 = *($1)
	$14 = ($1 + [4])
	$18 = ( *($14) ? uint_32($9 >> [1]) : $9 )
	if ( ((uint_32)$18 <= (uint_32)$7) ){ goto $label$12 }
	$19 = ( *($15) ? $6 : $9 )
	$9 = ($19 + $7)
	$8 = ($10 & [1])
	$10 = *($3)
	$10 = ( *($13) ? uint_32($10 >> [1]) : $8 )
	if ( ($10 == 0) ){ goto $label$13 }
	$12 = ( *($17) ? $5 : $8 )
	$7 = ($18 - $7)
	
.LOOP $label$14:
	if ( (CALL $79($12, *($9), $10) == 0) ){ goto $label$13 }
	$8 = [-1]
	$9 = ($9 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$8 = ($9 - $19)
	
.LABEL $label$12
	$9 = ($9 & [1])
	$9 = *($1)
	$10 = ( *($14) ? uint_32($9 >> [1]) : $9 )
	if ( ((uint_32)$10 <= (uint_32)$8) ){ goto $label$15 }
	$7 = [-1]
	$12 = ($12 & [1])
	$12 = *($3)
	$13 = ( *($13) ? uint_32($12 >> [1]) : $12 )
	if ( ($13 == 0) ){ goto $label$16 }
	$17 = ( *($17) ? $5 : $12 )
	$15 = ( *($15) ? $6 : $9 )
	$14 = ($15 + $10)
	$12 = ($15 + $8)
	
.LOOP $label$18:
	$10 = *($12)
	$7 = $13
	$9 = $17
	
.LOOP $label$19:
	if ( ((int_32)($10 & [255]) == (int_32)*($9)) ){ goto $label$17 }
	$9 = ($9 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$19 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 != (int_32)$14) ){ goto $label$18 }
	$12 = $14
	
.LABEL $label$17
	$7 = ( [-1] ? ($12 - $15) : ((int_32)$12 == (int_32)$14) )
	
.LABEL $label$16
	if ( ((int_32)($7 & $8) != (int_32)[-1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$15
	$7 = [-1]
	if ( ((int_32)([-1] & $8) != (int_32)[-1]) ){ goto $label$9 }
	
.LABEL $label$8
	$global$0 = ($4 + [16])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [9270])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9315])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9365])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [8568])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([80])) + [8]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24]) = [0]
	*($3 + [56 align=4]) = (int_64)0
	*($3 + [64]) = $1
	CALL $38(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [68])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $39(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $55(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $55(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8563])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8563])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8563])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8563])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $21(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $69 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $68 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [7] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $70($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $70($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $70($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $70($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18192]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $70($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $70($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $70($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $65 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $64 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $67 (int_32 $0)
{
}

int_32 .FUNC $66 ()
{
	return [9768]
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $61($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $63 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $60(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $72(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8652], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $60(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $60(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $62 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $58($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $87 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18168])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17976]
	$3 = (((int_32)$1 * (int_32)[12]) + [17976])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9776]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9780])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9776]) = [1]
	$2 = ($2 << [16])
	*([0] + [9780]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9780])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9780]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9776]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9776]) = [1]
	$3 = ($3 << [16])
	*([0] + [9780]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9780])
	
.LABEL $label$10
	*([0] + [9780]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $86($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8226])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $84 (int_32 $0)
{
	return CALL $85([9784], $0)
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $84($1)
	
.LABEL $label$2
	*(CALL $66()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $84(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $87($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $82 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $66())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $83($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $81 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $80 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $72 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $68([8], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $73 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $76 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $74($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_64 .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $76($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $66()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $76($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [18273]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $75($0, (int_64)0)
	*(CALL $66()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $76($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $76($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $76($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $76($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [18273])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [18273]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18273]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $76($0)
	$5 = *(($6 + [18273]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $76($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [18273]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8204]))
	$8 = (int_64)0
	$5 = *(($6 + [18273]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18273]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $76($0)
	$5 = *(($6 + [18273]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $76($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [18273]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $75($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [18273]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [18273]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $76($0) + [18273]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $66()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $66()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $66()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $74 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $73($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $64($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $36 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0 + [8]) = (int_64)0
	*($0) = *(*(*($2 + [4])) + [56])
	$1 = *($2)
	CALL eosio_assert([1], [8619])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8619])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $64($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

int_64 .FUNC $78 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $75($3, (int_64)0)
	$4 = CALL $77($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

int_32 .FUNC $79 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0 + [8]) = (int_64)5000000
	*($0) = *(*(*($2 + [4])) + [32])
	$1 = *($2)
	CALL eosio_assert([1], [8619])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [8619])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $64($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $28($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8619])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8619])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $45(CALL $44($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [8743])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [8789])
	*($1 + [40]) = (int_64))(*($1 + [40]) - *(*($3)))
	$6 = *($1)
	CALL eosio_assert([1], [8840])
	$3 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [48])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [16])
	$9 = ($1 + [40])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $84($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [40]) = $7
	*($5 + [48]) = $9
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [44]) = ($1 + [32])
	*($5 + [52]) = ($1 + [48])
	*($5 + [56]) = ($1 + [56])
	*($5 + [60]) = ($1 + [60])
	CALL $42(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [68]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $87($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [64])
}