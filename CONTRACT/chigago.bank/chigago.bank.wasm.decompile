(data (i32.const 8192) "no vote status object found\00")
(data (i32.const 8220) " insufficient balance\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8328) "reward\00")
(data (i32.const 8335) "eosio.token\00")
(data (i32.const 8347) "transfer\00")
(data (i32.const 8356) "claim LUK\00")
(data (i32.const 8366) "must vote this account\00")
(data (i32.const 8389) "cannot vote for producers\00")
(data (i32.const 8415) "no vote table object found\00")
(data (i32.const 8442) "account registered as a proxy is not allowed to use a proxy\00")
(data (i32.const 8502) "vote status not found, maybe _updateVoteStatus cause by something alse\00")
(data (i32.const 8573) "eosio\00")
(data (i32.const 8579) "voteproducer\00")
(data (i32.const 8592) "delegatebw\00")
(data (i32.const 8603) "undelegatebw\00")
(data (i32.const 8616) "string is too long to be a valid name\00")
(data (i32.const 8654) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8721) "character is not in allowed character set for names\00")
(data (i32.const 8773) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8822) "invalid symbol name\00")
(data (i32.const 8842) "write\00")
(data (i32.const 8848) "object passed to modify is not in multi_index\00")
(data (i32.const 8894) "cannot modify objects in table of another contract\00")
(data (i32.const 8945) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9004) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9055) "error reading iterator\00")
(data (i32.const 9078) "read\00")
(data (i32.const 9083) "get\00")
(data (i32.const 9087) "cannot create objects in table of another contract\00")
(data (i32.const 9138) "luckyboxpool\00")
(data (i32.const 9151) "LUK\00")
(data (i32.const 9155) "string is too long to be a valid symbol_code\00")
(data (i32.const 9200) "only uppercase letters allowed in symbol_code string\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "current_time" (func $fimport$2 (result i64)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$4 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$6 (result i64)))
(import "env" "db_update_i64" (func $fimport$7 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$9 (result i32)))
(import "env" "read_action_data" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$12))
(import "env" "memset" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$15 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$16 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$18 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$19 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$20 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$22 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$23 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$24 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$25 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$26 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$27 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$30 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$32 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$33 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$34 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $17))
(export "_Znwj" (func $35))
(export "_ZdlPv" (func $37))
(export "_Znaj" (func $36))
(export "_ZdaPv" (func $38))
(export "_ZnwjSt11align_val_t" (func $39))
(export "_ZnajSt11align_val_t" (func $40))
(export "_ZdlPvSt11align_val_t" (func $41))
(export "_ZdaPvSt11align_val_t" (func $42))
(table $0 5 5 anyfunc)
(elem (i32.const 1) $1 $10 $15 $16)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17672))
(global $global$2 i32 (i32.const 17672))


int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $50($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [104]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9078])
	
.LABEL $label$5
	CALL memcpy(($4 + [104]), $2, [8])
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [8])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	CALL $22(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [104])
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL $53($2)
	
.LABEL $label$7
	$global$0 = ($4 + [112])
	return [1]
}

int_32 .FUNC $19 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [152]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $50($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [144])) = [0]
	*($4 + [128]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [108]) = $2
	*($4 + [104]) = $2
	*($4 + [112]) = ($2 + $5)
	*($4 + [16]) = ($4 + [104])
	*($4 + [40]) = ($4 + [120])
	CALL $23(($4 + [40]), ($4 + [16]))
	$3 = *($4 + [112])
	*((($4 + [24]) + [8])) = $3
	*(($4 + [8])) = $3
	$6 = *($4 + [104])
	*($4) = $6
	*($4 + [24]) = $6
	*($4 + [16]) = CALL $22(($4 + [40]), $0, $1, $4)
	*($4 + [20]) = ($4 + [152])
	CALL $24(($4 + [16]), ($4 + [120]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $53($2)
	
.LABEL $label$4
	$2 = *(($4 + [136]))
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [140])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return [1]
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $48(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9256])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $48(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8842])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [8842])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8842])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [8842])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $21 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $50($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [168]))) = (int_64)0
	*(($8 = ($4 + [184]))) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [132]) = $2
	*($4 + [128]) = $2
	*($4 + [136]) = ($2 + $7)
	*($4 + [272]) = ($4 + [128])
	*($4 + [64]) = ($4 + [144])
	CALL $26(($4 + [64]), ($4 + [272]))
	$9 = *($4 + [136])
	*((($4 + [48]) + [8])) = $9
	*((($4 + [32]) + [8])) = $9
	$10 = *($4 + [128])
	*($4 + [32]) = $10
	*($4 + [48]) = $10
	CALL $22(($4 + [64]), $0, $1, ($4 + [32]))
	*(($9 = (($4 + [208]) + [8]))) = *($3)
	*(($3 = (($4 + [192]) + [8]))) = *($8)
	*($4 + [208]) = *($4 + [160])
	*($4 + [192]) = *($4 + [176])
	$0 = *($4 + [152])
	$1 = *($4 + [144])
	*((($4 + [240]) + [8])) = *($3)
	*((($4 + [224]) + [8])) = *($9)
	*($4 + [240]) = *($4 + [192])
	*($4 + [224]) = *($4 + [208])
	$3 = (($4 + [64]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$10 = *((($4 + [224]) + [8]))
	*((($4 + [272]) + [8])) = $10
	$11 = *((($4 + [240]) + [8]))
	*((($4 + [256]) + [8])) = $11
	*((($4 + [16]) + [8])) = $10
	*(($4 + [8])) = $11
	$10 = *($4 + [224])
	*($4 + [272]) = $10
	$11 = *($4 + [240])
	*($4 + [256]) = $11
	*($4 + [16]) = $10
	*($4) = $11
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [16])), (int_32 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $53($2)
	
.LABEL $label$6
	$global$0 = ($4 + [288])
	return [1]
}

int_32 .FUNC $20 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $50($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [176]))) = (int_64)0
	*(($8 = ($4 + [192]))) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [184]) = (int_64)0
	*($4 + [200]) = [0]
	*($4 + [140]) = $2
	*($4 + [136]) = $2
	*($4 + [144]) = ($2 + $7)
	*($4 + [288]) = ($4 + [136])
	*($4 + [72]) = ($4 + [152])
	CALL $25(($4 + [72]), ($4 + [288]))
	$9 = *($4 + [144])
	*((($4 + [56]) + [8])) = $9
	*((($4 + [40]) + [8])) = $9
	$10 = *($4 + [136])
	*($4 + [40]) = $10
	*($4 + [56]) = $10
	CALL $22(($4 + [72]), $0, $1, ($4 + [40]))
	*(($9 = (($4 + [224]) + [8]))) = *($3)
	*(($3 = (($4 + [208]) + [8]))) = *($8)
	*($4 + [224]) = *($4 + [168])
	*($4 + [208]) = *($4 + [184])
	$0 = *($4 + [160])
	$1 = *($4 + [152])
	$8 = *($4 + [200])
	*((($4 + [256]) + [8])) = *($3)
	*((($4 + [240]) + [8])) = *($9)
	*($4 + [256]) = *($4 + [208])
	*($4 + [240]) = *($4 + [224])
	$3 = (($4 + [72]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$10 = *((($4 + [240]) + [8]))
	*((($4 + [288]) + [8])) = $10
	$11 = *((($4 + [256]) + [8]))
	*((($4 + [272]) + [8])) = $11
	*((($4 + [24]) + [8])) = $10
	*((($4 + [8]) + [8])) = $11
	$10 = *($4 + [240])
	*($4 + [288]) = $10
	$11 = *($4 + [256])
	*($4 + [272]) = $11
	*($4 + [24]) = $10
	*($4 + [8]) = $11
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [24])), (int_32 ($4 + [8])), (int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $53($2)
	
.LABEL $label$5
	$global$0 = ($4 + [304])
	return [1]
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9078])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$4 = *($0)
	$2 = ($4 + [8])
	$0 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9078])
	$0 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $0, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $32(*($1), ($4 + [16]))
}

int_32 .FUNC $22 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($0) = $1
	*($0 + [8]) = $2
	$2 = *($3)
	*($0 + [16]) = $2
	$3 = *(($3 + [8]))
	*((($4 + [32]) + [8])) = $3
	*(($0 + [24])) = $3
	*($4 + [32]) = $2
	*($4 + [24]) = [8573]
	*($4 + [28]) = CALL $47([8573])
	*($4 + [8]) = *($4 + [24])
	CALL $3(($0 + [32]), ($4 + [8]))
	*($4 + [16]) = [9138]
	*($4 + [20]) = CALL $47([9138])
	*($4) = *($4 + [16])
	CALL $3(($0 + [40]), $4)
	$3 = CALL $47([9151])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9155])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [9150]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9200])
	
.LABEL $label$6
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$2 = (int_64)4
	
.LABEL $label$1
	*($0 + [56]) = (int_64)604800000000
	*(($0 + [48])) = $2
	$global$0 = ($4 + [48])
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9078])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	$3 = ($4 + [8])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9078])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [16])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9078])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9078])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($4 + [24])) = *($2 + [8])
	*($5) = (*($5) + [8])
	$3 = ($4 + [32])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9078])
	$5 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9078])
	$3 = *($5)
	
.LABEL $label$6
	CALL memcpy(($2 + [8]), $3, [8])
	*(($4 + [40])) = *($2 + [8])
	*($5) = (*($5) + [8])
	$0 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)*($1 + [8]) != (int_32)$0) ){ goto $label$7 }
	CALL eosio_assert([0], [9078])
	$0 = *(($1 + [4]))
	
.LABEL $label$7
	CALL memcpy(($2 + [8]), $0, [1])
	*(($1 = ($1 + [4]))) = (*($1) + [1])
	*(($4 + [48])) = ((int_32)*($2 + [8]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = (int_64)0
	*($2 + [8]) = [0]
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = int_32($5 >> [3])
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = CALL _Znwj($5)
	*(($2 + [8])) = ($5 + ($6 << [3]))
	*($2) = $5
	*($2 + [4]) = $5
	$6 = *(($1 + [16]))
	$1 = (*(($1 + [20])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $6, $1)
	*($2 + [4]) = ($5 + $1)
	
.LABEL $label$2
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*($0) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($0) + $1))
	
.LABEL $label$3
	CALL void $0((int_32 $4), (int_64 $3), (int_64 $2), (int_32 $1))
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$4 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $44($2)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8842])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8842])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8842])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9078])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	$3 = ($4 + [8])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9078])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [16])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9078])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9078])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($4 + [24])) = *($2 + [8])
	*($5) = (*($5) + [8])
	$5 = ($4 + [32])
	$0 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $0) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9078])
	$0 = *(($1 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $0, [8])
	$5 = (*($0) + [8])
	*(($0 = ($1 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($1 + [8])) - $5) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9078])
	$5 = *($0)
	
.LABEL $label$6
	CALL memcpy(($2 + [8]), $5, [8])
	*(($4 + [40])) = *($2 + [8])
	*($0) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $50($1)
	
.LABEL $label$2
	*(CALL $45()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $50(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $53($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $45())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $49($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $43 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $53($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $46 (int_32 $0)
{
}

int_32 .FUNC $45 ()
{
	return [9260]
}

void .FUNC $44 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $52($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)*(($1 + [8200])) == (int_32)*($9)) ){ goto $label$10 }
	CALL eosio_assert([0], [8242])
	
.LABEL $label$10
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$11:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$13 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$14 }
	
.LABEL $label$13
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$15 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$15
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$12
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$11 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9055])
	
.LABEL $label$5
	$4 = CALL $50($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL _Znwj([48]))) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [12])
	*($3 + [52]) = ($5 + [16])
	*($3 + [56]) = ($5 + [24])
	CALL $34(($3 + [40]), ($3 + [32]))
	*($5 + [36]) = $1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $13(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $53($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8842])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [8842])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [8842])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [12])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8842])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0 + [16])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8842])
	$1 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($1, $3, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $28(CALL $27($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8842])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8842])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $7 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [32]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8848])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8894])
	
.LABEL $label$2
	$5 = *($1)
	*($1 + [12]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$6 = CALL current_time()
	*($1 + [24]) = (int_64)0
	*($1 + [8]) = ((uint_64)$6 / (uint_64)(int_64)1000000)
	$7 = ($1 + [24])
	$8 = ($1 + [8])
	$9 = ($1 + [12])
	if ( ((int_64)$5 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [8945])
	
.LABEL $label$3
	$10 = $3
	$3 = ($10 + [-32])
	$global$0 = $3
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = $10
	*($4 + [16]) = $4
	*($4 + [28]) = $8
	*($4 + [32]) = $9
	*($4 + [40]) = $7
	*($4 + [24]) = $1
	*($4 + [36]) = ($1 + [16])
	CALL $9(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [36]), $2, $3, [32])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $44($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8842])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8842])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8842])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8842])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $29(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $2 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	if ( ((int_32)*($6 + [32]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9004])
	return $6
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-2507753050394939392, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $8($0, $5)
	if ( ((int_32)*($6 + [32]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9004])
	return $6
	
.LABEL $label$5
	CALL eosio_assert([0], $2)
	
.LABEL $label$1
	return $6
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [8616])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [8721])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8654])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8721])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	float_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$2 = ($global$0 - [256])
	$global$0 = $2
	CALL require_auth($1)
	*(($2 + [208])) = [0]
	*($2 + [192]) = (int_64)-1
	$3 = (int_64)0
	*($2 + [200]) = (int_64)0
	$4 = *($0)
	*($2 + [176]) = $4
	*($2 + [184]) = $4
	$5 = CALL $2(($2 + [176]), $1, [8192])
	CALL eosio_assert(((int_64)*($5 + [16]) > (int_64)0), [8220])
	$4 = *($5 + [8])
	$6 = *($5 + [16])
	$7 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$8 = *($0 + [56])
	$9 = ((int_64)$6 + (int_64)$8)
	if ( (uint_64)($9 <= $4) ){ goto $label$1 }
	$3 = (int_64))(( $9 ? $7 : (uint_64)($9 <= $7) ) - $4)
	
.LABEL $label$1
	$10 = ((int_64)((int_64)$8 << (int_64)1) + (int_64)$6)
	if ( (uint_64)($7 <= $9) ){ goto $label$2 }
	if ( (uint_64)($10 <= $4) ){ goto $label$2 }
	$11 = ((float_64)((float_64)(CASTING float_64)(uint_64 (int_64))(( $10 ? $7 : (uint_64)($10 <= $7) ) - ( $9 ? $4 : ((uint_64)$9 > (uint_64)$4) ))) * (float_64)(float_64)1.5) + (float_64)(CASTING float_64)(uint_64 $3)
	if ( (((float_64)$11) < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$3 }
	$3 = (int_64)0
	goto $label$2 
	
.LABEL $label$3
	$3 = (Rounds 0)($11)
	
.LABEL $label$2
	if ( (uint_64)(((int_64)((int_64)$8 * (int_64)3) + (int_64)$6) <= $4) ){ goto $label$4 }
	if ( (uint_64)($7 <= $10) ){ goto $label$4 }
	$3 = ((int_64)$3 + (int_64)((int_64))(( $10 ? $7 : (uint_64)($10 <= $7) ) - ( $10 ? $4 : ((uint_64)$10 > (uint_64)$4) )) << (int_64)1))
	
.LABEL $label$4
	$4 = *($5 + [24])
	$6 = *($0 + [40])
	*($2 + [120]) = [8328]
	*($2 + [124]) = CALL $47([8328])
	*($2 + [16]) = *($2 + [120])
	$9 = *(CALL $3(($2 + [128]), ($2 + [16])))
	*($2 + [104]) = [8335]
	*($2 + [108]) = CALL $47([8335])
	*($2 + [8]) = *($2 + [104])
	$12 = CALL $3(($2 + [112]), ($2 + [8]))
	*($2 + [88]) = [8347]
	*($2 + [92]) = CALL $47([8347])
	*($2) = *($2 + [88])
	$13 = CALL $3(($2 + [96]), $2)
	$10 = *($0 + [48])
	$3 = ((int_64)$4 + (int_64)$3)
	if ( (uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$5 }
	CALL eosio_assert([0], [8773])
	
.LABEL $label$5
	$4 = (uint_64)$10 >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$4 = $7
	$15 = $14
	$14 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$4 = $7
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$15 = ((int_32)$14 < (int_32)[6])
	$16 = ($14 + [1])
	$14 = $16
	if ( $15 ){ goto $label$10 }
	$14 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert([0], [8822])
	
.LABEL $label$6
	*(($2 + [32])) = [0]
	*($2 + [24]) = (int_64)0
	$14 = CALL $47([8356])
	if ( ((uint_32)$14 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$14 >= (uint_32)[11]) ){ goto $label$14 }
	*($2 + [24]) = ($14 << [1])
	$15 = (($2 + [24]) | [1])
	if ( $14 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$16 = (($14 + [16]) & [-16])
	$15 = CALL _Znwj($16)
	*($2 + [24]) = ($16 | [1])
	*($2 + [32]) = $15
	*($2 + [28]) = $14
	
.LABEL $label$13
	CALL memcpy($15, [8356], $14)
	
.LABEL $label$12
	*(($15 + $14)) = [0]
	*((($2 + [40]) + [24])) = $10
	$14 = ($2 + [32])
	*((($2 + [40]) + [40])) = *($14)
	*($14) = [0]
	*($2 + [48]) = $1
	*($2 + [56]) = $3
	*($2 + [40]) = *(($0 + [40]))
	*($2 + [72]) = *($2 + [24])
	*($2 + [24]) = (int_64)0
	*($2 + [136]) = *($12)
	*($2 + [144]) = *($13)
	*(($14 = CALL _Znwj([16]))) = $6
	*($14 + [8]) = $9
	*((($2 + [136]) + [36])) = [0]
	$15 = ($14 + [16])
	*((($2 + [136]) + [24])) = $15
	*(($2 + [156])) = $15
	*($2 + [152]) = $14
	*($2 + [164 align=4]) = (int_64)0
	$14 = *($2 + [72])
	$15 = ( *((($2 + [40]) + [36])) ? uint_32($14 >> [1]) : ($14 & [1]) )
	$14 = ($15 + [32])
	$4 = (CASTING uint_64)(uint_32 $15)
	$15 = ($2 + [164])
	
.LOOP $label$15:
	$14 = ($14 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$15 }
	if ( ($14 == 0) ){ goto $label$17 }
	CALL $4($15, $14)
	$15 = *(($2 + [168]))
	$14 = *(($2 + [164]))
	goto $label$16 
	
.LABEL $label$17
	$15 = [0]
	$14 = [0]
	
.LABEL $label$16
	*($2 + [244]) = $14
	*($2 + [240]) = $14
	*($2 + [248]) = $15
	*($2 + [216]) = ($2 + [240])
	*($2 + [224]) = ($2 + [40])
	CALL $5(($2 + [224]), ($2 + [216]))
	*($2 + [232]) = [0]
	*($2 + [224]) = (int_64)0
	$14 = [16]
	$16 = *((($2 + [136]) + [16]))
	$15 = *(($2 + [156]))
	$12 = ($15 - $16)
	$4 = (CASTING uint_64)(uint_32 int_32($12 >> [4]))
	
.LOOP $label$18:
	$14 = ($14 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$18 }
	if ( ((int_32)$16 == (int_32)$15) ){ goto $label$19 }
	$14 = (($12 & [-16]) + $14)
	
.LABEL $label$19
	$16 = *(($2 + [164]))
	$15 = *(($2 + [168]))
	$14 = (($14 + $15) - $16)
	$4 = (CASTING uint_64)(uint_32 ($15 - $16))
	
.LOOP $label$20:
	$14 = ($14 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$20 }
	if ( ($14 == 0) ){ goto $label$22 }
	CALL $4(($2 + [224]), $14)
	$15 = *($2 + [228])
	$14 = *($2 + [224])
	goto $label$21 
	
.LABEL $label$22
	$15 = [0]
	$14 = [0]
	
.LABEL $label$21
	*($2 + [244]) = $14
	*($2 + [240]) = $14
	*($2 + [248]) = $15
	CALL $6(($2 + [240]), ($2 + [136]))
	$14 = *($2 + [224])
	CALL send_inline($14, (*($2 + [228]) - $14))
	$14 = *($2 + [224])
	if ( ($14 == 0) ){ goto $label$23 }
	*($2 + [228]) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$23
	$14 = *($2 + [164])
	if ( ($14 == 0) ){ goto $label$24 }
	*(($2 + [168])) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$24
	$14 = *($2 + [152])
	if ( ($14 == 0) ){ goto $label$25 }
	*(($2 + [156])) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$25
	if ( ((*(($2 + [72])) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($2 + [80])))
	
.LABEL $label$26
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($2 + [32])))
	
.LABEL $label$27
	CALL $7(($2 + [176]), $5, *($0))
	$16 = *($2 + [200])
	if ( ($16 == 0) ){ goto $label$28 }
	$0 = ($2 + [204])
	$14 = *($0)
	if ( ((int_32)$14 == (int_32)$16) ){ goto $label$30 }
	
.LOOP $label$31:
	$14 = ($14 + [-24])
	$15 = *($14)
	*($14) = [0]
	if ( ($15 == 0) ){ goto $label$32 }
	CALL _ZdlPv($15)
	
.LABEL $label$32
	if ( ((int_32)$16 != (int_32)$14) ){ goto $label$31 }
	$14 = *(($2 + [200]))
	goto $label$29 
	
.LABEL $label$30
	$14 = $16
	
.LABEL $label$29
	*($0) = $16
	CALL _ZdlPv($14)
	
.LABEL $label$28
	$global$0 = ($2 + [256])
	return (unreachable)
	
.LABEL $label$11
	CALL $43(($2 + [24]))
}

void .FUNC $14 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [32]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8848])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [8894])
	
.LABEL $label$2
	$6 = *($1)
	$7 = CALL current_time()
	*($1 + [16]) = *(*($3) + [32])
	*($1 + [8]) = ((uint_64)$7 / (uint_64)(int_64)1000000)
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3 + [4])))
	$8 = ($1 + [24])
	$9 = ($1 + [16])
	$10 = ($1 + [8])
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [8945])
	
.LABEL $label$3
	$4 = $4
	$3 = ($4 + [-32])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = $4
	*($5 + [16]) = $5
	*($5 + [28]) = $10
	*($5 + [36]) = $9
	*($5 + [40]) = $8
	*($5 + [24]) = $1
	*($5 + [32]) = ($1 + [12])
	CALL $9(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [36]), $2, $3, [32])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($5 + [48])
}

void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$1 }
	CALL $11($0, $1, [1])
	
.LABEL $label$1
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$1 }
	CALL $11($0, $1, [1])
	
.LABEL $label$1
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)4921564679018381312) ){ goto $label$1 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [1]
	*($3) = *($3 + [168])
	CALL $18($1, $1, $3)
	goto $label$1 
	
.LABEL $label$2
	*($3 + [152]) = [8573]
	*($3 + [156]) = CALL $47([8573])
	*($3 + [72]) = *($3 + [152])
	CALL $3(($3 + [160]), ($3 + [72]))
	if ( ((int_64)$1 != (int_64)6138663577826885632) ){ goto $label$3 }
	*($3 + [136]) = [8579]
	*($3 + [140]) = CALL $47([8579])
	*($3 + [64]) = *($3 + [136])
	CALL $3(($3 + [144]), ($3 + [64]))
	if ( ((int_64)$2 != (int_64)-2507754169720236688) ){ goto $label$3 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [2]
	*($3 + [8]) = *($3 + [128])
	CALL $19($0, (int_64)6138663577826885632, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [120]) = [8573]
	*($3 + [124]) = CALL $47([8573])
	*($3 + [56]) = *($3 + [120])
	CALL $3(($3 + [160]), ($3 + [56]))
	if ( ((int_64)$1 != (int_64)6138663577826885632) ){ goto $label$4 }
	*($3 + [112]) = [8592]
	*($3 + [116]) = CALL $47([8592])
	*($3 + [48]) = *($3 + [112])
	CALL $3(($3 + [144]), ($3 + [48]))
	if ( ((int_64)$2 != (int_64)5378043540636893184) ){ goto $label$4 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [3]
	*($3 + [16]) = *($3 + [104])
	CALL $20($0, (int_64)6138663577826885632, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [96]) = [8573]
	*($3 + [100]) = CALL $47([8573])
	*($3 + [40]) = *($3 + [96])
	CALL $3(($3 + [160]), ($3 + [40]))
	if ( ((int_64)$1 != (int_64)6138663577826885632) ){ goto $label$1 }
	*($3 + [88]) = [8603]
	*($3 + [92]) = CALL $47([8603])
	*($3 + [32]) = *($3 + [88])
	CALL $3(($3 + [144]), ($3 + [32]))
	if ( ((int_64)$2 != (int_64)-3111238946495230016) ){ goto $label$1 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [4]
	*($3 + [24]) = *($3 + [80])
	CALL $21($0, (int_64)6138663577826885632, ($3 + [24]))
	
.LABEL $label$1
	CALL $46([0])
	$global$0 = ($3 + [176])
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	$4 = *($0)
	if ( ((int_64)$4 == (int_64)$1) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$4 == (int_64)$2), [8366])
	CALL eosio_assert(((int_32)*($3 + [4]) == (int_32)*($3)), [8389])
	CALL $11($0, $1, [0])
	
.LABEL $label$1
}

void .FUNC $11 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	float_64 $13
	$3 = ($global$0 - [160])
	$global$0 = $3
	$4 = [0]
	*(($3 + [72])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$5 = *($0 + [32])
	*($3 + [40]) = $5
	*($3 + [48]) = $5
	$6 = CALL db_find_i64($5, $5, (int_64)-2507753063930920960, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $12(($3 + [40]), $6)
	if ( ((int_32)*($4 + [88]) == (int_32)($3 + [40])) ){ goto $label$1 }
	CALL eosio_assert([0], [9004])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [8415])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)*($4 + [56]) ^ (int_32)[1]), [8442])
	$6 = [0]
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$5 = *($0)
	*($3) = $5
	*($3 + [8]) = $5
	$7 = CALL db_find_i64($5, $5, (int_64)-2507753050394939392, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $8($3, $7)
	if ( ((int_32)*($6 + [32]) == (int_32)$3) ){ goto $label$3 }
	CALL eosio_assert([0], [9004])
	
.LABEL $label$3
	if ( ($2 == 0) ){ goto $label$4 }
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8502])
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$11 }
	*($3 + [80]) = (int_64)0
	if ( (int_64)(*($6 + [16]) == 0) ){ goto $label$8 }
	$2 = *($6 + [8])
	if ( ($2 == 0) ){ goto $label$8 }
	$5 = *($6 + [12])
	$1 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$8 = (int_64)0
	$10 = (CASTING uint_64)(uint_32 $2)
	$9 = *($0 + [56])
	$11 = ((int_64)$9 + (int_64)$10)
	if ( (uint_64)($11 <= $5) ){ goto $label$12 }
	$8 = (int_64))(( $11 ? $1 : (uint_64)($11 <= $1) ) - $5)
	
.LABEL $label$12
	$12 = ((int_64)((int_64)$9 << (int_64)1) + (int_64)$10)
	if ( (uint_64)($1 <= $11) ){ goto $label$9 }
	if ( (uint_64)($12 <= $5) ){ goto $label$9 }
	$13 = ((float_64)((float_64)(CASTING float_64)(uint_64 (int_64))(( $12 ? $1 : (uint_64)($12 <= $1) ) - ( $11 ? $5 : ((uint_64)$11 > (uint_64)$5) ))) * (float_64)(float_64)1.5) + (float_64)(CASTING float_64)(uint_64 $8)
	if ( (((float_64)$13) < (float_64)(float_64)18446744073709551615) & ((float_64)$13 >= (float_64)(float_64)0)) ){ goto $label$10 }
	$8 = (int_64)0
	goto $label$9 
	
.LABEL $label$11
	$12 = *($0)
	if ( ((int_64)*($3) == (int_64)CALL current_receiver()) ){ goto $label$13 }
	CALL eosio_assert([0], [9087])
	
.LABEL $label$13
	*(($6 = CALL _Znwj([48])) + [24]) = (int_64)0
	*($6 + [12]) = [0]
	*($6 + [32]) = $3
	*($6) = $1
	*($6 + [8]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($6 + [16]) = *($4 + [32])
	*($3 + [120]) = (($3 + [80]) + [32])
	*($3 + [116]) = ($3 + [80])
	*($3 + [112]) = ($3 + [80])
	*($3 + [128]) = ($3 + [112])
	*($3 + [140]) = ($6 + [8])
	*($3 + [136]) = $6
	*($3 + [144]) = ($6 + [12])
	*($3 + [148]) = ($6 + [16])
	*($3 + [152]) = ($6 + [24])
	CALL $9(($3 + [136]), ($3 + [128]))
	$5 = *($6)
	$4 = CALL db_store_i64(*(($3 + [8])), (int_64)-2507753050394939392, $12, $5, ($3 + [80]), [32])
	*($6 + [36]) = $4
	$0 = ($3 + [16])
	if ( (uint_64)($5 <= *($0)) ){ goto $label$14 }
	*($0) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*($3 + [136]) = $6
	$5 = *($6)
	*($3 + [80]) = $5
	*($3 + [112]) = $4
	$2 = ($3 + [28])
	$0 = *($2)
	if ( ((uint_32)$0 >= (uint_32)*(($3 + [32]))) ){ goto $label$16 }
	*($0 + [8]) = $5
	*($0 + [16]) = $4
	*($3 + [136]) = [0]
	*($0) = $6
	*($2) = ($0 + [24])
	$6 = *($3 + [136])
	*($3 + [136]) = [0]
	if ( $6 ){ goto $label$15 }
	goto $label$7 
	
.LABEL $label$16
	CALL $13(($3 + [24]), ($3 + [136]), ($3 + [80]), ($3 + [112]))
	$6 = *($3 + [136])
	*($3 + [136]) = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$15
	CALL _ZdlPv($6)
	$4 = *($3 + [24])
	if ( $4 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$10
	$8 = (Rounds 0)($13)
	
.LABEL $label$9
	if ( (uint_64)(((int_64)((int_64)$9 * (int_64)3) + (int_64)$10) <= $5) ){ goto $label$17 }
	if ( (uint_64)($1 <= $12) ){ goto $label$17 }
	$8 = ((int_64)$8 + (int_64)((int_64))(( $12 ? $1 : (uint_64)($12 <= $1) ) - ( $12 ? $5 : ((uint_64)$12 > (uint_64)$5) )) << (int_64)1))
	
.LABEL $label$17
	*($3 + [80]) = $8
	
.LABEL $label$8
	$5 = *($0)
	*($3 + [136]) = $4
	*($3 + [140]) = ($3 + [80])
	CALL $14($3, $6, $5, ($3 + [136]))
	
.LABEL $label$7
	$4 = *($3 + [24])
	if ( ($4 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = ($3 + [28])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$19 }
	
.LOOP $label$20:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$21 }
	CALL _ZdlPv($0)
	
.LABEL $label$21
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$20 }
	$6 = *(($3 + [24]))
	goto $label$18 
	
.LABEL $label$19
	$6 = $4
	
.LABEL $label$18
	*($2) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$5
	$2 = *($3 + [64])
	if ( ($2 == 0) ){ goto $label$22 }
	$7 = ($3 + [68])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$24 }
	
.LOOP $label$25:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$26 }
	$4 = *($0 + [16])
	if ( ($4 == 0) ){ goto $label$27 }
	*(($0 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$27
	CALL _ZdlPv($0)
	
.LABEL $label$26
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$25 }
	$6 = *(($3 + [64]))
	goto $label$23 
	
.LABEL $label$24
	$6 = $2
	
.LABEL $label$23
	*($7) = $2
	CALL _ZdlPv($6)
	
.LABEL $label$22
	$global$0 = ($3 + [160])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9055])
	
.LABEL $label$5
	$4 = CALL $50($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL _Znwj([104])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24]) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = [0]
	*($5 + [60 align=4]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [48])
	*($3 + [64]) = ($5 + [56])
	*($3 + [68]) = ($5 + [60])
	*($3 + [72]) = ($5 + [64])
	*($3 + [76]) = ($5 + [72])
	CALL $30(($3 + [40]), ($3 + [32]))
	*($5 + [92]) = $1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $31(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $53($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$4 = *($1 + [16])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($1 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $44($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $53($0)
	
.LABEL $label$1
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9078])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = *($0 + [4])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$2 }
	CALL eosio_assert([0], [9078])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [9078])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	$2 = *($0 + [12])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9078])
	$4 = *(($3 + [4]))
	
.LABEL $label$4
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0 + [16])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9078])
	$1 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $50($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9256])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $50($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [9083])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$7 = *($1)
	$5 = *($1 + [4])
	$6 = int_32(($5 - $7) >> [3])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $33($1, ($2 - $6))
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$5 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $5
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ($0 + [4])
	$2 = *($6)
	$4 = ($0 + [8])
	
.LOOP $label$7:
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9078])
	$2 = *($6)
	
.LABEL $label$8
	CALL memcpy($7, $2, [8])
	$2 = (*($6) + [8])
	*($6) = $2
	$7 = ($7 + [8])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $44($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9078])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9078])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	CALL $32(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9078])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9078])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9078])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$5) ){ goto $label$6 }
	CALL eosio_assert([0], [9078])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy(($2 + [15]), $5, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	*($3) = ((int_32)*($2 + [15]) != (int_32)[0])
	$3 = *($0 + [28])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$7 }
	CALL eosio_assert([0], [9078])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$3 = *($0 + [32])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[3]) ){ goto $label$8 }
	CALL eosio_assert([0], [9078])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($3, $5, [4])
	*(($4 = ($4 + [4]))) = (*($4) + [4])
	$5 = *($0 + [36])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [9078])
	$1 = *(($0 + [4]))
	
.LABEL $label$9
	CALL memcpy($5, $1, [8])
	$4 = (*($1) + [8])
	*(($1 = ($0 + [4]))) = $4
	*($2) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $4) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [9078])
	$4 = *($1)
	
.LABEL $label$10
	CALL memcpy($2, $4, [8])
	*($5 + [8]) = *($2)
	*($1) = (*($1) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $44($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [16])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $50 (int_32 $0)
{
	return CALL $51([9276], $0)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9268]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9272])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9268]) = [1]
	$2 = ($2 << [16])
	*([0] + [9272]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9272])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9272]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9268]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9268]) = [1]
	$3 = ($3 << [16])
	*([0] + [9272]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9272])
	
.LABEL $label$10
	*([0] + [9272]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17660])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17468]
	$3 = (((int_32)$1 * (int_32)[12]) + [17468])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}