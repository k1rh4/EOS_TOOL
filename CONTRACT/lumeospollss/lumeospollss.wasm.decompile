(data (i32.const 8192) "missing required authority of a lumeos admin account\00")
(data (i32.const 8245) "rmrfpolls\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8341) "missing required authority of a lumeos user account\00")
(data (i32.const 8393) "remove from _polls \00")
(data (i32.const 8413) "remove from _votes2 \00")
(data (i32.const 8434) "string is too long to be a valid name\00")
(data (i32.const 8472) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8539) "character is not in allowed character set for names\00")
(data (i32.const 8591) "error reading iterator\00")
(data (i32.const 8614) "read\00")
(data (i32.const 8619) "cannot increment end iterator\00")
(data (i32.const 8649) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8700) "cannot pass end iterator to erase\00")
(data (i32.const 8734) "object passed to erase is not in multi_index\00")
(data (i32.const 8779) "cannot erase objects in table of another contract\00")
(data (i32.const 8829) "attempt to remove object that was not in multi_index\00")
(data (i32.const 8882) "get\00")
(data (i32.const 8886) "cannot create objects in table of another contract\00")
(data (i32.const 8937) "next primary key in table is at autoincrement limit\00")
(data (i32.const 8989) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9043) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9091) "write\00")
(data (i32.const 9097) "object passed to modify is not in multi_index\00")
(data (i32.const 9143) "cannot modify objects in table of another contract\00")
(data (i32.const 9194) "updater cannot change primary key when modifying an object\00")
(import "env" "has_auth" (func $fimport$0 (param i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "prints" (func $fimport$2 (param i32)))
(import "env" "db_lowerbound_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "printui" (func $fimport$4 (param i64)))
(import "env" "db_next_i64" (func $fimport$5 (param i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$7 (result i64)))
(import "env" "db_update_i64" (func $fimport$8 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$9 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$10 (param i32 i64 i32)))
(import "env" "action_data_size" (func $fimport$11 (result i32)))
(import "env" "read_action_data" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$15))
(import "env" "db_remove_i64" (func $fimport$16 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$17 (param i32)))
(import "env" "db_store_i64" (func $fimport$18 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$19 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$21 (param i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$22 (result i64)))
(import "env" "memset" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$25 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$33 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$34 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$35 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$36 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$37 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$40 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$42 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$43 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$44 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $31))
(export "_ZdlPv" (func $53))
(export "_Znwj" (func $51))
(export "_Znaj" (func $52))
(export "_ZdaPv" (func $54))
(export "_ZnwjSt11align_val_t" (func $55))
(export "_ZnajSt11align_val_t" (func $56))
(export "_ZdlPvSt11align_val_t" (func $57))
(export "_ZdaPvSt11align_val_t" (func $58))
(table $0 10 10 anyfunc)
(elem (i32.const 1) $11 $8 $23 $5 $15 $24 $14 $28 $1)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17672))
(global $global$2 i32 (i32.const 17672))


void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	*($1) = *(*($5))
	$6 = *($5 + [4])
	$7 = *($6)
	if ( ($7 & [1]) ){ goto $label$2 }
	$7 = uint_32($7 >> [1])
	$6 = ($6 + [1])
	goto $label$1 
	
.LABEL $label$2
	$7 = *($6 + [4])
	$6 = *($6 + [8])
	
.LABEL $label$1
	*($3 + [20]) = $7
	*($3 + [16]) = $6
	*($3 + [8]) = *($3 + [16])
	*($1 + [8]) = *(CALL $25(($3 + [40]), ($3 + [8])))
	*($1 + [16]) = *(*($5 + [8]))
	*($1 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [28]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [432000])
	$5 = $2
	$2 = ($5 + [-32])
	$global$0 = $2
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = $5
	*($3 + [32]) = ($3 + [16])
	$5 = ($1 + [8])
	*($3 + [44]) = $5
	*($3 + [40]) = $1
	*($3 + [48]) = ($1 + [16])
	*($3 + [52]) = ($1 + [24])
	*($3 + [56]) = ($1 + [28])
	CALL $48(($3 + [40]), ($3 + [32]))
	$8 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)-4157660950590488576, *(*($0 + [8])), $8, $2, [32])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$8 = *(($4 + [8]))
	$9 = *(*(($0 + [8])))
	$10 = *($1)
	*($3 + [40]) = *($5)
	*($1 + [40]) = CALL db_idx64_store($8, (int_64)-4157660950590488576, $9, $10, ($3 + [40]))
	$global$0 = ($3 + [64])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $64($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $66 (int_32 $0)
{
}

int_32 .FUNC $65 ()
{
	return [9260]
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $43($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $63($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $63($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $59($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $73 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17660])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17468]
	$3 = (((int_32)$1 * (int_32)[12]) + [17468])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [9097])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [9143])
	$6 = ($1 + [8])
	*(($5 = $4) + [24]) = *($6)
	*($1 + [24]) = *(*($3))
	*($1 + [28]) = *(*(($3 + [4])))
	$7 = *($1)
	CALL eosio_assert([1], [9194])
	$3 = *($1 + [32])
	$8 = ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [32])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [32])
	$10 = ($1 + [28])
	$11 = ($1 + [24])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $70($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [32]) = ($5 + [8])
	*($5 + [44]) = $6
	*($5 + [52]) = $11
	*($5 + [56]) = $10
	*($5 + [60]) = $8
	*($5 + [40]) = $1
	*($5 + [48]) = ($1 + [16])
	CALL $30(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [48]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $73($4)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [40]) = *($6)
	if ( (CALL $67(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$6 }
	$3 = *($1 + [52])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4982429584927490048, ($5 + [32]), $7)
	*(($1 + [52])) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$6
	$global$0 = ($5 + [64])
}

void .FUNC $28 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4) = $3
	*($4 + [4]) = $2
	$2 = CALL db_lowerbound_i64(*($0 + [112]), *(($0 + [120])), (int_64)4982429584927490048, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [112])
	$2 = CALL $9($3, $2)
	if ( ((int_64)*($2 + [8]) == (int_64)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL eosio_assert([1], [8619])
	$2 = CALL db_next_i64(*($2 + [48]), ($4 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $9($3, $2)
	if ( ((int_64)*($2 + [8]) != (int_64)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$1 = *($0)
	*($4 + [12]) = $4
	*($4 + [8]) = ($4 + [4])
	CALL $29($3, $2, $1, ($4 + [8]))
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [88])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [72])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [80])), (int_64)-5970895888170582016, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $6($9, $10)
	*($3 + [12]) = [0]
	*($3 + [8]) = $9
	$8 = *(*(CALL $49(($3 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [88])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [8937])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	$6 = ($1 + [20])
	CALL $61($6, *($5 + [12]))
	$5 = *($1 + [20])
	$7 = ( *(($1 + [24])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [20])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [16])
	$9 = ($1 + [8])
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $70($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [9091])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert(((int_32)($5 + [-8]) > (int_32)[7]), [9091])
	CALL memcpy(($2 + [8]), $9, [8])
	CALL eosio_assert(((int_32)($5 + [-16]) > (int_32)[3]), [9091])
	CALL memcpy(($2 + [16]), $7, [4])
	*($3 + [12]) = ($2 + [20])
	CALL $50(($3 + [8]), $6)
	$8 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)-5970895888170582016, *(*($0 + [8])), $8, $2, $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $73($2)
	
.LABEL $label$6
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$7 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$8 = *(($4 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [40]) = CALL db_idx64_store($8, (int_64)-5970895888170582016, $11, $12, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9091])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9091])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9091])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9091])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9091])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9091])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9091])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9091])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $23 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [112])
	$global$0 = $4
	$5 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)-5970911088777101312, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = ($0 + [32])
	$5 = CALL $2($6, $5)
	if ( ((int_64)*(($5 + [8])) == (int_64)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL eosio_assert([1], [8619])
	$5 = CALL db_next_i64(*($5 + [48]), $4)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $2($6, $5)
	if ( ((int_64)*(($5 + [8])) != (int_64)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$7 = *($0)
	CALL eosio_assert(((int_32)*($5 + [44]) == (int_32)$6), [9097])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$7()), [9143])
	*($5 + [36]) = $2
	*($5 + [40]) = $3
	$6 = ($5 + [8])
	*($4 + [64]) = *($6)
	$1 = *($5)
	CALL eosio_assert([1], [9194])
	*($4 + [56]) = ($4 + [41])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [72]) = ($4 + [48])
	*($4 + [84]) = $6
	*($4 + [80]) = $5
	*($4 + [88]) = ($5 + [16])
	*($4 + [92]) = ($5 + [24])
	*($4 + [96]) = ($5 + [28])
	*($4 + [100]) = ($5 + [32])
	*($4 + [104]) = ($5 + [36])
	*($4 + [108]) = ($5 + [40])
	CALL $20(($4 + [80]), ($4 + [72]))
	CALL db_update_i64(*($5 + [48]), $7, $4, [41])
	$2 = ($0 + [48])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$4 }
	*($2) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($4 + [80]) = *($6)
	if ( (CALL $67(($4 + [64]), ($4 + [80]), [8]) == 0) ){ goto $label$1 }
	$6 = *($5 + [52])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL db_idx64_find_primary(*(($0 + [32])), *(($0 + [40])), (int_64)-5970911088777101312, ($4 + [72]), $1)
	*(($5 + [52])) = $6
	
.LABEL $label$5
	CALL db_idx64_update($6, $7, ($4 + [80]))
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $64($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8434])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8539])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8472])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8539])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $24 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [160])
	$global$0 = $4
	*($4 + [32]) = $2
	*($4 + [40]) = $1
	$5 = [1]
	if ( CALL has_auth(*($0)) ){ goto $label$1 }
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$3 }
	$5 = uint_32($5 >> [1])
	$6 = ($3 + [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($3 + [4])
	$6 = *($3 + [8])
	
.LABEL $label$2
	*($4 + [20]) = $5
	*($4 + [16]) = $6
	*($4 + [8]) = *($4 + [16])
	$5 = CALL has_auth(*(CALL $25(($4 + [24]), ($4 + [8]))))
	
.LABEL $label$1
	CALL eosio_assert($5, [8341])
	$1 = *($0)
	*($4 + [48]) = $0
	*($4 + [60]) = $3
	*($4 + [52]) = ($4 + [40])
	*($4 + [56]) = ($4 + [32])
	*($4 + [96]) = $1
	CALL eosio_assert(((int_64)*($0 + [112]) == (int_64)CALL $fimport$7()), [8886])
	$5 = ($0 + [112])
	*($4 + [128]) = $5
	*($4 + [132]) = ($4 + [48])
	*($4 + [136]) = ($4 + [96])
	*(($3 = CALL _Znwj([56])) + [24]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40]) = [0]
	*($3 + [44]) = $5
	CALL $26(($4 + [128]), $3)
	*($4 + [120]) = $3
	$1 = *($3)
	*($4 + [128]) = $1
	$6 = *($3 + [48])
	*($4 + [112]) = $6
	$7 = ($0 + [140])
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [144]))) ){ goto $label$6 }
	*($5 + [8]) = $1
	*($5 + [16]) = $6
	*($4 + [120]) = [0]
	*($5) = $3
	*($7) = ($5 + [24])
	$3 = *($4 + [120])
	$5 = [0]
	*($4 + [120]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	CALL $27(($0 + [136]), ($4 + [120]), ($4 + [128]), ($4 + [112]))
	$3 = *($4 + [120])
	$5 = [0]
	*($4 + [120]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$7
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$3 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)-5970911088777101312, (int_64)0)
	if ( ((int_32)$3 < (int_32)$5) ){ goto $label$8 }
	$5 = ($0 + [32])
	$3 = CALL $2($5, $3)
	if ( ((int_64)*(($3 + [8])) == (int_64)*($4 + [40])) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL eosio_assert([1], [8619])
	$3 = CALL db_next_i64(*($3 + [48]), ($4 + [48]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$3 = CALL $2($5, $3)
	if ( ((int_64)*(($3 + [8])) != (int_64)*($4 + [40])) ){ goto $label$10 }
	
.LABEL $label$9
	$2 = *($0)
	CALL eosio_assert(((int_32)*($3 + [44]) == (int_32)$5), [9097])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$7()), [9143])
	*($3 + [32]) = (*($3 + [32]) + [1])
	$5 = ($3 + [8])
	*($4 + [112]) = *($5)
	$1 = *($3)
	CALL eosio_assert([1], [9194])
	*($4 + [104]) = (($4 + [48]) + [41])
	*($4 + [100]) = ($4 + [48])
	*($4 + [96]) = ($4 + [48])
	*($4 + [120]) = ($4 + [96])
	*($4 + [132]) = $5
	*($4 + [128]) = $3
	*($4 + [136]) = ($3 + [16])
	*($4 + [140]) = ($3 + [24])
	*($4 + [144]) = ($3 + [28])
	*($4 + [148]) = ($3 + [32])
	*($4 + [152]) = ($3 + [36])
	*($4 + [156]) = ($3 + [40])
	CALL $20(($4 + [128]), ($4 + [120]))
	CALL db_update_i64(*($3 + [48]), $2, ($4 + [48]), [41])
	$6 = ($0 + [48])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$11 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($4 + [128]) = *($5)
	if ( (CALL $67(($4 + [112]), ($4 + [128]), [8]) == 0) ){ goto $label$8 }
	$5 = *($3 + [52])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$12 }
	$5 = CALL db_idx64_find_primary(*(($0 + [32])), *(($0 + [40])), (int_64)-5970911088777101312, ($4 + [120]), $1)
	*(($3 + [52])) = $5
	
.LABEL $label$12
	CALL db_idx64_update($5, $2, ($4 + [128]))
	
.LABEL $label$8
	$global$0 = ($4 + [160])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $64($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [88])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [72])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [80])), (int_64)-5970895888170582016, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $6($9, $10)
	*($3 + [28]) = [0]
	*($3 + [24]) = $9
	$8 = *(*(CALL $49(($3 + [24])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [88])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [8937])
	*($1) = *($7)
	*($1 + [16]) = *(*($5 + [4]))
	*($1 + [8]) = *(*($5 + [8]))
	$6 = ($1 + [32])
	CALL $61($6, *($5 + [12]))
	*($1 + [24]) = (int_64)1
	$5 = *($1 + [32])
	$7 = ( *(($1 + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [32])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [28])
	$9 = ($1 + [24])
	$10 = ($1 + [8])
	$11 = ($1 + [16])
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $70($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = $10
	*($3 + [24]) = $1
	*($3 + [32]) = $11
	*($3 + [36]) = $9
	*($3 + [40]) = $7
	*($3 + [44]) = $6
	CALL $30(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($4 + [8]), (int_64)4982429584927490048, *(*($0 + [8])), $8, $2, $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $73($2)
	
.LABEL $label$6
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$7 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$8 = *(($4 + [8]))
	$12 = *(*(($0 + [8])))
	$13 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [52]) = CALL db_idx64_store($8, (int_64)4982429584927490048, $12, $13, ($3 + [24]))
	$global$0 = ($3 + [48])
}

int_32 .FUNC $49 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [36]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9043])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-5970895888170582016)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8989])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8989])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $6(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9091])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9091])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9091])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9091])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9091])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $70($1)
	
.LABEL $label$2
	*(CALL $65()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $70(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $73($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $65())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $69($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8882])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $44($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8614])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8614])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8614])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8614])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8614])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [8614])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [8614])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [8614])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [8614])
	CALL memcpy($3, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$1 = CALL $60($2, ($1 + [16]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	$5 = CALL $60(($2 + [16]), $1)
	CALL void $6((int_32 $4), (int_64 $3), (int_64 $5), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $60($2, ($1 + [24]))
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	$6 = CALL $60(($2 + [16]), $1)
	CALL void $7((int_32 $5), (int_64 $4), (int_64 $3), (int_64 $6), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8614])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8614])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8614])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [8614])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [8614])
	CALL memcpy($3, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $46 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [48]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9043])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-5970911088777101312)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8989])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8989])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $2(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8614])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8614])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8614])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [8614])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [8614])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	CALL $39(*($1), *($0 + [20]))
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $64($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9268]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9272])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9268]) = [1]
	$2 = ($2 << [16])
	*([0] + [9272]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9272])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9272]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9268]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9268]) = [1]
	$3 = ($3 << [16])
	*([0] + [9272]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9272])
	
.LABEL $label$10
	*([0] + [9272]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $70($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9256])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $70($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $70 (int_32 $0)
{
	return CALL $71([9276], $0)
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $72($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8255])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$1 = ($global$0 - [32])
	$global$0 = $1
	CALL eosio_assert(CALL $fimport$0(*($0)), [8192])
	$2 = *(($0 + [120]))
	$3 = [0]
	*($1 + [16]) = [0]
	*($1 + [8]) = (int_64)0
	$4 = CALL db_lowerbound_i64(*($0 + [112]), $2, (int_64)4982429584927490048, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$5 = ($0 + [112])
	$4 = CALL $9($5, $4)
	$6 = (($1 + [8]) + [8])
	
.LOOP $label$2:
	$7 = *($1 + [12])
	if ( ((int_32)$7 == (int_32)*($6)) ){ goto $label$4 }
	*($7) = *($4)
	*($1 + [12]) = ($7 + [8])
	goto $label$3 
	
.LABEL $label$4
	CALL $3(($1 + [8]), $4)
	
.LABEL $label$3
	CALL eosio_assert([1], [8619])
	$4 = CALL db_next_i64(*($4 + [48]), ($1 + [24]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$4 = CALL $9($5, $4)
	$3 = ($3 + [1])
	if ( ($3 <= [50]) ){ goto $label$2 }
	
.LABEL $label$5
	$9 = *($1 + [12])
	$8 = *($1 + [8])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$6 }
	$10 = ($0 + [140])
	$11 = ($0 + [136])
	$12 = ($0 + [120])
	$0 = ($0 + [112])
	
.LOOP $label$7:
	$2 = *($8)
	$7 = *($10)
	$6 = *($11)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$10 }
	
.LOOP $label$12:
	$4 = ($7 + [-24])
	$3 = *($4)
	if ( ((int_64)*($3) == (int_64)$2) ){ goto $label$11 }
	$7 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($3 + [44]) == (int_32)$5), [8649])
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$4 = CALL db_find_i64(*($0), *($12), (int_64)4982429584927490048, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$3 = CALL $9($5, $4)
	CALL eosio_assert(((int_32)*($3 + [44]) == (int_32)$5), [8649])
	
.LABEL $label$9
	CALL eosio_assert([1], [8700])
	CALL eosio_assert([1], [8619])
	$4 = CALL db_next_i64(*($3 + [48]), ($1 + [24]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	CALL $9($5, $4)
	
.LABEL $label$13
	CALL $10($5, $3)
	
.LABEL $label$8
	$8 = ($8 + [8])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$7 }
	$9 = *($1 + [8])
	
.LABEL $label$6
	if ( ($9 == 0) ){ goto $label$1 }
	*($1 + [12]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$1
	$global$0 = ($1 + [32])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8591])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $70($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [24]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = [0]
	*($5 + [44]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [28])
	*($3 + [60]) = ($5 + [32])
	CALL $45(($3 + [40]), ($3 + [32]))
	*($5 + [52]) = [-1]
	*($5 + [48]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $27(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $73($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8591])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $70($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([48])) + [28]) = [0]
	*($5 + [20 align=4]) = (int_64)0
	*($5 + [32]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8614])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8614])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[16]), [8614])
	CALL memcpy(($5 + [16]), ($2 + [16]), [4])
	*($3 + [36]) = ($2 + [20])
	CALL $39(($3 + [32]), ($5 + [20]))
	*($5 + [40]) = [-1]
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $22(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $73($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [8734])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [8779])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [8829])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [28])))
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [20]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($6 + [28])))
	
.LABEL $label$13
	CALL _ZdlPv($6)
	
.LABEL $label$12
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [36]))
	$6 = *(($1 + [40]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5970895888170582016, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [8734])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [8779])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [8829])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [48]))
	$6 = *($1 + [52])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5970911088777101312, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $5 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$1 = ($global$0 - [32])
	$global$0 = $1
	CALL eosio_assert(CALL $fimport$0(*($0)), [8192])
	$2 = *(($0 + [80]))
	$3 = [0]
	*($1 + [16]) = [0]
	*($1 + [8]) = (int_64)0
	$4 = CALL db_lowerbound_i64(*($0 + [72]), $2, (int_64)-5970895888170582016, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$5 = ($0 + [72])
	$4 = CALL $6($5, $4)
	$6 = (($1 + [8]) + [8])
	
.LOOP $label$2:
	$7 = *($1 + [12])
	if ( ((int_32)$7 == (int_32)*($6)) ){ goto $label$4 }
	*($7) = *($4)
	*($1 + [12]) = ($7 + [8])
	goto $label$3 
	
.LABEL $label$4
	CALL $3(($1 + [8]), $4)
	
.LABEL $label$3
	CALL eosio_assert([1], [8619])
	$4 = CALL db_next_i64(*($4 + [36]), ($1 + [24]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$4 = CALL $6($5, $4)
	$3 = ($3 + [1])
	if ( ($3 <= [50]) ){ goto $label$2 }
	
.LABEL $label$5
	$9 = *($1 + [12])
	$8 = *($1 + [8])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$6 }
	$10 = ($0 + [100])
	$11 = ($0 + [96])
	$12 = ($0 + [80])
	$0 = ($0 + [72])
	
.LOOP $label$7:
	$2 = *($8)
	$7 = *($10)
	$6 = *($11)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$10 }
	
.LOOP $label$12:
	$4 = ($7 + [-24])
	$3 = *($4)
	if ( ((int_64)*($3) == (int_64)$2) ){ goto $label$11 }
	$7 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$5), [8649])
	goto $label$9 
	
.LABEL $label$10
	$4 = CALL db_find_i64(*($0), *($12), (int_64)-5970895888170582016, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$3 = CALL $6($5, $4)
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$5), [8649])
	
.LABEL $label$9
	CALL eosio_assert([1], [8700])
	CALL eosio_assert([1], [8619])
	$4 = CALL db_next_i64(*($3 + [36]), ($1 + [24]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	CALL $6($5, $4)
	
.LABEL $label$13
	CALL $7($5, $3)
	
.LABEL $label$8
	$8 = ($8 + [8])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$7 }
	$9 = *($1 + [8])
	
.LABEL $label$6
	if ( ($9 == 0) ){ goto $label$1 }
	*($1 + [12]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$1
	$global$0 = ($1 + [32])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8591])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $70($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [24]) = [0]
	*($5 + [16]) = (int_64)0
	*($5 + [28 align=4]) = (int_64)0
	*($5 + [36 align=4]) = (int_64)0
	*($5 + [44]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [28])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [36])
	*($3 + [60]) = ($5 + [40])
	CALL $42(($3 + [32]), ($3 + [24]))
	*($5 + [52]) = [-1]
	*($5 + [48]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $13(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $73($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $64($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$1 = ($global$0 - [32])
	$global$0 = $1
	CALL eosio_assert(CALL $fimport$0(*($0)), [8192])
	$2 = [0]
	*($1 + [16]) = [0]
	*($1 + [8]) = (int_64)0
	CALL prints([8245])
	$3 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)-5970911088777101312, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = ($0 + [32])
	$3 = CALL $2($4, $3)
	CALL printui(*($3))
	$5 = (($1 + [8]) + [8])
	
.LOOP $label$2:
	$6 = *($1 + [12])
	if ( ((int_32)$6 == (int_32)*($5)) ){ goto $label$4 }
	*($6) = *($3)
	*($1 + [12]) = ($6 + [8])
	goto $label$3 
	
.LABEL $label$4
	CALL $3(($1 + [8]), $3)
	
.LABEL $label$3
	CALL eosio_assert([1], [8619])
	$3 = CALL db_next_i64(*($3 + [48]), ($1 + [24]))
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = CALL $2($4, $3)
	CALL printui(*($3))
	$2 = ($2 + [1])
	if ( ($2 <= [50]) ){ goto $label$2 }
	
.LABEL $label$5
	$8 = *($1 + [12])
	$7 = *($1 + [8])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$6 }
	$9 = ($0 + [60])
	$10 = ($0 + [56])
	$11 = ($0 + [40])
	$0 = ($0 + [32])
	
.LOOP $label$7:
	$12 = *($7)
	CALL printui($12)
	$6 = *($9)
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$10 }
	
.LOOP $label$12:
	$3 = ($6 + [-24])
	$2 = *($3)
	if ( ((int_64)*($2) == (int_64)$12) ){ goto $label$11 }
	$6 = $3
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($2 + [44]) == (int_32)$4), [8649])
	if ( $2 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$3 = CALL db_find_i64(*($0), *($11), (int_64)-5970911088777101312, $12)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$2 = CALL $2($4, $3)
	CALL eosio_assert(((int_32)*($2 + [44]) == (int_32)$4), [8649])
	
.LABEL $label$9
	CALL eosio_assert([1], [8700])
	CALL eosio_assert([1], [8619])
	$3 = CALL db_next_i64(*($2 + [48]), ($1 + [24]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$13 }
	CALL $2($4, $3)
	
.LABEL $label$13
	CALL $4($4, $2)
	
.LABEL $label$8
	$7 = ($7 + [8])
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$7 }
	$8 = *($1 + [8])
	
.LABEL $label$6
	if ( ($8 == 0) ){ goto $label$1 }
	*($1 + [12]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$1
	$global$0 = ($1 + [32])
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL eosio_assert(CALL $fimport$0(*($0)), [8192])
	$4 = *(($0 + [40]))
	*($3 + [32]) = [0]
	*($3 + [24]) = (int_64)0
	$5 = CALL db_lowerbound_i64(*($0 + [32]), $4, (int_64)-5970911088777101312, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = (($3 + [24]) + [8])
	$7 = ($0 + [32])
	$5 = CALL $2($7, $5)
	if ( ((int_64)*($5 + [8]) != (int_64)$2) ){ goto $label$3 }
	$8 = [2]
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	$8 = [16]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$78 
	
.LABEL $label$82
	$5 = CALL $2($7, $5)
	if ( ((int_64)*($5 + [8]) != (int_64)$2) ){ goto $label$35 }
	$8 = [2]
	goto $label$4 
	
.LABEL $label$81
	$9 = *($3 + [28])
	if ( ((int_32)$9 == (int_32)*($6)) ){ goto $label$34 }
	$8 = [3]
	goto $label$4 
	
.LABEL $label$80
	*($9) = *($5)
	*($3 + [28]) = ($9 + [8])
	goto $label$36 
	
.LABEL $label$79
	CALL $3(($3 + [24]), $5)
	$8 = [0]
	goto $label$4 
	
.LABEL $label$78
	CALL eosio_assert([1], [8619])
	$5 = CALL db_next_i64(*($5 + [48]), ($3 + [8]))
	if ( ((int_32)$5 >= (int_32)[0]) ){ goto $label$37 }
	$8 = [5]
	goto $label$4 
	
.LABEL $label$77
	$11 = *($3 + [28])
	$10 = *($3 + [24])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$33 }
	$8 = [6]
	goto $label$4 
	
.LABEL $label$76
	$12 = ($0 + [60])
	$13 = ($0 + [56])
	$14 = ($0 + [40])
	$15 = ($0 + [32])
	$8 = [7]
	goto $label$4 
	
.LABEL $label$75
	$4 = *($10)
	CALL prints([8393])
	CALL printui($4)
	$9 = *($12)
	$16 = *($13)
	if ( ((int_32)$16 == (int_32)$9) ){ goto $label$29 }
	$8 = [8]
	goto $label$4 
	
.LABEL $label$74
	$5 = ($9 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$4) ){ goto $label$28 }
	$8 = [9]
	goto $label$4 
	
.LABEL $label$73
	$9 = $5
	if ( ((int_32)$16 != (int_32)$5) ){ goto $label$30 }
	goto $label$31 
	
.LABEL $label$72
	if ( ((int_32)$16 == (int_32)$9) ){ goto $label$27 }
	$8 = [43]
	goto $label$4 
	
.LABEL $label$71
	CALL eosio_assert(((int_32)*($6 + [44]) == (int_32)$7), [8649])
	if ( $6 ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$70
	$5 = CALL db_find_i64(*($15), *($14), (int_64)-5970911088777101312, $4)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$26 }
	$8 = [11]
	goto $label$4 
	
.LABEL $label$69
	$6 = CALL $2($7, $5)
	CALL eosio_assert(((int_32)*($6 + [44]) == (int_32)$7), [8649])
	$8 = [12]
	goto $label$4 
	
.LABEL $label$68
	CALL eosio_assert([1], [8700])
	CALL eosio_assert([1], [8619])
	$5 = CALL db_next_i64(*($6 + [48]), ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$23 }
	$8 = [13]
	goto $label$4 
	
.LABEL $label$67
	CALL $2($7, $5)
	$8 = [14]
	goto $label$4 
	
.LABEL $label$66
	CALL $4($7, $6)
	$8 = [15]
	goto $label$4 
	
.LABEL $label$65
	$10 = ($10 + [8])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$32 }
	$8 = [16]
	goto $label$4 
	
.LABEL $label$64
	$7 = ($0 + [72])
	$4 = *(($0 + [80]))
	*($3 + [16]) = [0]
	*($3 + [8]) = (int_64)0
	$5 = CALL db_lowerbound_i64(*($0 + [72]), $4, (int_64)-5970895888170582016, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$22 }
	$8 = [17]
	goto $label$4 
	
.LABEL $label$63
	$6 = (($3 + [8]) + [8])
	$5 = CALL $6($7, $5)
	if ( ((int_64)*($5 + [8]) != (int_64)$2) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$62
	$5 = CALL $6($7, $5)
	if ( ((int_64)*($5 + [8]) != (int_64)$2) ){ goto $label$18 }
	$8 = [20]
	goto $label$4 
	
.LABEL $label$61
	$9 = *($3 + [12])
	if ( ((int_32)$9 == (int_32)*($6)) ){ goto $label$17 }
	$8 = [21]
	goto $label$4 
	
.LABEL $label$60
	*($9) = *($5)
	*($3 + [12]) = ($9 + [8])
	goto $label$21 
	
.LABEL $label$59
	CALL $3(($3 + [8]), $5)
	$8 = [18]
	goto $label$4 
	
.LABEL $label$58
	CALL eosio_assert([1], [8619])
	$5 = CALL db_next_i64(*($5 + [36]), ($3 + [40]))
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$38 }
	$8 = [23]
	goto $label$4 
	
.LABEL $label$57
	$11 = *($3 + [12])
	$10 = *($3 + [8])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$16 }
	$8 = [24]
	goto $label$4 
	
.LABEL $label$56
	$12 = ($0 + [100])
	$13 = ($0 + [96])
	$14 = ($0 + [80])
	$0 = ($0 + [72])
	$8 = [25]
	goto $label$4 
	
.LABEL $label$55
	$4 = *($10)
	CALL prints([8413])
	CALL printui($4)
	$9 = *($12)
	$16 = *($13)
	if ( ((int_32)$16 == (int_32)$9) ){ goto $label$12 }
	$8 = [26]
	goto $label$4 
	
.LABEL $label$54
	$5 = ($9 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$4) ){ goto $label$11 }
	$8 = [27]
	goto $label$4 
	
.LABEL $label$53
	$9 = $5
	if ( ((int_32)$16 != (int_32)$5) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$52
	if ( ((int_32)$16 == (int_32)$9) ){ goto $label$10 }
	$8 = [41]
	goto $label$4 
	
.LABEL $label$51
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$7), [8649])
	goto $label$8 
	
.LABEL $label$50
	$5 = CALL db_find_i64(*($0), *($14), (int_64)-5970895888170582016, $4)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$8 = [29]
	goto $label$4 
	
.LABEL $label$49
	$6 = CALL $6($7, $5)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$7), [8649])
	$8 = [30]
	goto $label$4 
	
.LABEL $label$48
	CALL eosio_assert([1], [8700])
	CALL eosio_assert([1], [8619])
	$5 = CALL db_next_i64(*($6 + [36]), ($3 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$8 = [31]
	goto $label$4 
	
.LABEL $label$47
	CALL $6($7, $5)
	$8 = [32]
	goto $label$4 
	
.LABEL $label$46
	CALL $7($7, $6)
	$8 = [33]
	goto $label$4 
	
.LABEL $label$45
	$10 = ($10 + [8])
	if ( ((int_32)$10 != (int_32)$11) ){ goto $label$15 }
	$8 = [34]
	goto $label$4 
	
.LABEL $label$44
	$10 = *($3 + [8])
	$8 = [35]
	goto $label$4 
	
.LABEL $label$43
	if ( ($10 == 0) ){ goto $label$6 }
	$8 = [36]
	goto $label$4 
	
.LABEL $label$42
	*($3 + [12]) = $10
	CALL _ZdlPv($10)
	$8 = [37]
	goto $label$4 
	
.LABEL $label$41
	$5 = *($3 + [24])
	if ( ($5 == 0) ){ goto $label$5 }
	$8 = [38]
	goto $label$4 
	
.LABEL $label$40
	*($3 + [28]) = $5
	CALL _ZdlPv($5)
	$8 = [39]
	goto $label$4 
	
.LABEL $label$39
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$38
	$8 = [19]
	goto $label$4 
	
.LABEL $label$37
	$8 = [1]
	goto $label$4 
	
.LABEL $label$36
	$8 = [0]
	goto $label$4 
	
.LABEL $label$35
	$8 = [0]
	goto $label$4 
	
.LABEL $label$34
	$8 = [4]
	goto $label$4 
	
.LABEL $label$33
	$8 = [16]
	goto $label$4 
	
.LABEL $label$32
	$8 = [7]
	goto $label$4 
	
.LABEL $label$31
	$8 = [10]
	goto $label$4 
	
.LABEL $label$30
	$8 = [8]
	goto $label$4 
	
.LABEL $label$29
	$8 = [10]
	goto $label$4 
	
.LABEL $label$28
	$8 = [42]
	goto $label$4 
	
.LABEL $label$27
	$8 = [10]
	goto $label$4 
	
.LABEL $label$26
	$8 = [15]
	goto $label$4 
	
.LABEL $label$25
	$8 = [15]
	goto $label$4 
	
.LABEL $label$24
	$8 = [12]
	goto $label$4 
	
.LABEL $label$23
	$8 = [14]
	goto $label$4 
	
.LABEL $label$22
	$8 = [23]
	goto $label$4 
	
.LABEL $label$21
	$8 = [18]
	goto $label$4 
	
.LABEL $label$20
	$8 = [20]
	goto $label$4 
	
.LABEL $label$19
	$8 = [18]
	goto $label$4 
	
.LABEL $label$18
	$8 = [18]
	goto $label$4 
	
.LABEL $label$17
	$8 = [22]
	goto $label$4 
	
.LABEL $label$16
	$8 = [35]
	goto $label$4 
	
.LABEL $label$15
	$8 = [25]
	goto $label$4 
	
.LABEL $label$14
	$8 = [28]
	goto $label$4 
	
.LABEL $label$13
	$8 = [26]
	goto $label$4 
	
.LABEL $label$12
	$8 = [28]
	goto $label$4 
	
.LABEL $label$11
	$8 = [40]
	goto $label$4 
	
.LABEL $label$10
	$8 = [28]
	goto $label$4 
	
.LABEL $label$9
	$8 = [33]
	goto $label$4 
	
.LABEL $label$8
	$8 = [30]
	goto $label$4 
	
.LABEL $label$7
	$8 = [32]
	goto $label$4 
	
.LABEL $label$6
	$8 = [37]
	goto $label$4 
	
.LABEL $label$5
	$8 = [39]
	goto $label$4 
	$8
}

void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$5 = ($global$0 - [192])
	$global$0 = $5
	*($5 + [64]) = $2
	*($5 + [72]) = $1
	*($5 + [56]) = $3
	CALL eosio_assert(CALL $fimport$0(*($0)), [8192])
	$6 = ($0 + [32])
	$7 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)-5970911088777101312, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$7 = CALL $2($6, $7)
	if ( ((int_64)*($7 + [8]) == (int_64)$1) ){ goto $label$5 }
	
.LOOP $label$6:
	CALL eosio_assert([1], [8619])
	$7 = CALL db_next_i64(*($7 + [48]), ($5 + [80]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$7 = CALL $2($6, $7)
	if ( ((int_64)*($7 + [8]) != (int_64)*($5 + [72])) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ((int_32)*($7 + [24]) != (int_32)[1]) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = ($0 + [72])
	$7 = CALL db_lowerbound_i64(*($0 + [72]), *(($0 + [80])), (int_64)-5970895888170582016, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$9 = ($4 + [1])
	$10 = ($4 + [4])
	$11 = ($4 + [8])
	$12 = CALL $6($8, $7)
	if ( ((int_64)*($12 + [8]) != (int_64)*($5 + [72])) ){ goto $label$7 }
	$13 = [2]
	goto $label$1 
	
.LABEL $label$7
	$13 = [0]
	goto $label$1 
	
.LABEL $label$3
	$13 = [6]
	goto $label$1 
	
.LABEL $label$2
	$13 = [11]
	
.LABEL $label$1
	
.LOOP $label$8:
	goto $label$77 
	
.LABEL $label$86
	$12 = CALL $6($8, $7)
	if ( ((int_64)*($12 + [8]) != (int_64)*($5 + [72])) ){ goto $label$38 }
	$13 = [2]
	goto $label$8 
	
.LABEL $label$85
	$17 = ($7 & [1])
	$7 = *($4)
	$15 = ($7 & [1])
	$7 = *($12 + [20])
	$14 = uint_32($7 >> [1])
	$16 = ( *(($12 + [24])) ? $14 : $15 )
	if ( ((int_32)$16 != (int_32)( *($10) ? uint_32($7 >> [1]) : $17 )) ){ goto $label$41 }
	$13 = [3]
	goto $label$8 
	
.LABEL $label$84
	$7 = (($12 + [20]) + [1])
	$17 = ( *($11) ? $9 : $17 )
	if ( $15 ){ goto $label$37 }
	$13 = [7]
	goto $label$8 
	
.LABEL $label$83
	if ( ($16 == 0) ){ goto $label$35 }
	$13 = [8]
	goto $label$8 
	
.LABEL $label$82
	$15 = ([0] - $14)
	$13 = [9]
	goto $label$8 
	
.LABEL $label$81
	if ( ((int_32)*($7) != (int_32)*($17)) ){ goto $label$39 }
	$13 = [10]
	goto $label$8 
	
.LABEL $label$80
	$17 = ($17 + [1])
	$7 = ($7 + [1])
	$15 = ($15 + [1])
	if ( $15 ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$79
	if ( ($16 == 0) ){ goto $label$36 }
	$13 = [5]
	goto $label$8 
	
.LABEL $label$78
	if ( (CALL $67(( *(($12 + [28])) ? $7 : $15 ), $17, $16) == 0) ){ goto $label$40 }
	$13 = [0]
	goto $label$8 
	
.LABEL $label$77
	CALL eosio_assert([1], [8619])
	$7 = CALL db_next_i64(*($12 + [36]), ($5 + [80]))
	if ( ((int_32)$7 >= (int_32)[0]) ){ goto $label$42 }
	$13 = [11]
	goto $label$8 
	
.LABEL $label$76
	*(($15 = ($5 + [48]))) = [0]
	*($5 + [32]) = (int_64)-1
	*($5 + [40]) = (int_64)0
	*($5 + [52]) = [0]
	$1 = *($0)
	*($5 + [16]) = $1
	*($5 + [24]) = $1
	$7 = CALL db_lowerbound_i64($1, $1, (int_64)-4157660950590488576, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$29 }
	$13 = [12]
	goto $label$8 
	
.LABEL $label$75
	CALL $16(($5 + [16]), $7)
	*($5 + [84]) = [0]
	*($5 + [80]) = ($5 + [16])
	$1 = *(*(CALL $17(($5 + [80])) + [4]))
	$1 = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$17 = (uint_64)($1 <= (int_64)-2)
	goto $label$28 
	
.LABEL $label$74
	$17 = [1]
	$1 = (int_64)0
	$13 = [13]
	goto $label$8 
	
.LABEL $label$73
	*(($7 = ($5 + [32]))) = $1
	CALL eosio_assert($17, [8937])
	*($5 + [8]) = *($7)
	$1 = *($0)
	*($5 + [164]) = $4
	*($5 + [160]) = ($5 + [8])
	*($5 + [168]) = ($5 + [56])
	*($5 + [128]) = $1
	CALL eosio_assert(((int_64)*($5 + [16]) == (int_64)CALL $fimport$7()), [8886])
	*($5 + [84]) = ($5 + [160])
	*($5 + [80]) = ($5 + [16])
	*($5 + [88]) = ($5 + [128])
	*(($7 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($7 + [32]) = ($5 + [16])
	CALL $18(($5 + [80]), $7)
	*($5 + [152]) = $7
	$1 = *($7)
	*($5 + [80]) = $1
	$12 = *($7 + [36])
	*($5 + [144]) = $12
	$16 = ($5 + [44])
	$17 = *($16)
	if ( ((uint_32)$17 >= (uint_32)*($15)) ){ goto $label$27 }
	$13 = [42]
	goto $label$8 
	
.LABEL $label$72
	*($17 + [8]) = $1
	*($17 + [16]) = $12
	*($5 + [152]) = [0]
	*($17) = $7
	*($16) = ($17 + [24])
	$7 = *($5 + [152])
	$17 = [0]
	*($5 + [152]) = [0]
	if ( $7 ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$71
	CALL $19(($5 + [40]), ($5 + [152]), ($5 + [80]), ($5 + [144]))
	$7 = *($5 + [152])
	$17 = [0]
	*($5 + [152]) = [0]
	if ( ($7 == 0) ){ goto $label$26 }
	$13 = [15]
	goto $label$8 
	
.LABEL $label$70
	CALL _ZdlPv($7)
	$13 = [16]
	goto $label$8 
	
.LABEL $label$69
	$7 = CALL db_lowerbound_i64(*(($0 + [32])), *(($0 + [40])), (int_64)-5970911088777101312, (int_64)0)
	if ( ((int_32)$7 < (int_32)$17) ){ goto $label$23 }
	$13 = [17]
	goto $label$8 
	
.LABEL $label$68
	$7 = CALL $2($6, $7)
	if ( ((int_64)*(($7 + [8])) == (int_64)*($5 + [72])) ){ goto $label$22 }
	$13 = [18]
	goto $label$8 
	
.LABEL $label$67
	$13 = [19]
	goto $label$8 
	
.LABEL $label$66
	CALL eosio_assert([1], [8619])
	$7 = CALL db_next_i64(*($7 + [48]), ($5 + [80]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$20 }
	$13 = [20]
	goto $label$8 
	
.LABEL $label$65
	$7 = CALL $2($6, $7)
	if ( ((int_64)*(($7 + [8])) != (int_64)*($5 + [72])) ){ goto $label$21 }
	$13 = [21]
	goto $label$8 
	
.LABEL $label$64
	$3 = *($0)
	CALL eosio_assert(((int_32)*($7 + [44]) == (int_32)$6), [9097])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$7()), [9143])
	*($7 + [28]) = (*($7 + [28]) + [1])
	$17 = ($7 + [8])
	*($5 + [144]) = *($17)
	$1 = *($7)
	CALL eosio_assert([1], [9194])
	*($5 + [136]) = (($5 + [80]) + [41])
	*($5 + [132]) = ($5 + [80])
	*($5 + [128]) = ($5 + [80])
	*($5 + [152]) = ($5 + [128])
	*($5 + [164]) = $17
	*($5 + [160]) = $7
	*($5 + [168]) = ($7 + [16])
	*($5 + [172]) = ($7 + [24])
	*($5 + [176]) = ($7 + [28])
	*($5 + [180]) = ($7 + [32])
	*($5 + [184]) = ($7 + [36])
	*($5 + [188]) = ($7 + [40])
	CALL $20(($5 + [160]), ($5 + [152]))
	CALL db_update_i64(*($7 + [48]), $3, ($5 + [80]), [41])
	$15 = ($0 + [48])
	if ( (uint_64)($1 <= *($15)) ){ goto $label$19 }
	$13 = [22]
	goto $label$8 
	
.LABEL $label$63
	*($15) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$13 = [23]
	goto $label$8 
	
.LABEL $label$62
	*($5 + [160]) = *($17)
	if ( (CALL $67(($5 + [144]), ($5 + [160]), [8]) == 0) ){ goto $label$18 }
	$13 = [24]
	goto $label$8 
	
.LABEL $label$61
	$17 = *($7 + [52])
	if ( ((int_32)$17 > (int_32)[-1]) ){ goto $label$17 }
	$13 = [41]
	goto $label$8 
	
.LABEL $label$60
	$17 = CALL db_idx64_find_primary(*(($0 + [32])), *(($0 + [40])), (int_64)-5970911088777101312, ($5 + [152]), $1)
	*(($7 + [52])) = $17
	$13 = [25]
	goto $label$8 
	
.LABEL $label$59
	CALL db_idx64_update($17, $3, ($5 + [160]))
	$13 = [26]
	goto $label$8 
	
.LABEL $label$58
	$1 = *($0)
	*($5 + [80]) = $0
	*($5 + [92]) = $4
	*($5 + [84]) = ($5 + [72])
	*($5 + [88]) = ($5 + [64])
	*($5 + [128]) = $1
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$7()), [8886])
	*($5 + [160]) = $8
	*($5 + [164]) = ($5 + [80])
	*($5 + [168]) = ($5 + [128])
	*(($7 = CALL _Znwj([48])) + [28]) = [0]
	*($7 + [20 align=4]) = (int_64)0
	*($7 + [32]) = $8
	CALL $21(($5 + [160]), $7)
	*($5 + [152]) = $7
	$1 = *($7)
	*($5 + [160]) = $1
	$15 = *($7 + [36])
	*($5 + [144]) = $15
	$12 = ($0 + [100])
	$17 = *($12)
	if ( ((uint_32)$17 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	$13 = [40]
	goto $label$8 
	
.LABEL $label$57
	*($17 + [8]) = $1
	*($17 + [16]) = $15
	*($5 + [152]) = [0]
	*($17) = $7
	*($12) = ($17 + [24])
	$7 = *($5 + [152])
	*($5 + [152]) = [0]
	if ( ($7 == 0) ){ goto $label$14 }
	$13 = [28]
	goto $label$8 
	
.LABEL $label$56
	if ( ((*($7 + [20]) & [1]) == 0) ){ goto $label$13 }
	$13 = [29]
	goto $label$8 
	
.LABEL $label$55
	CALL _ZdlPv(*(($7 + [28])))
	$13 = [30]
	goto $label$8 
	
.LABEL $label$54
	CALL _ZdlPv($7)
	$15 = *($5 + [40])
	if ( $15 ){ goto $label$30 }
	goto $label$31 
	
.LABEL $label$53
	CALL $22(($0 + [96]), ($5 + [152]), ($5 + [160]), ($5 + [144]))
	$7 = *($5 + [152])
	*($5 + [152]) = [0]
	if ( $7 ){ goto $label$15 }
	$13 = [39]
	goto $label$8 
	
.LABEL $label$52
	$15 = *($5 + [40])
	if ( ($15 == 0) ){ goto $label$32 }
	$13 = [31]
	goto $label$8 
	
.LABEL $label$51
	$12 = ($5 + [44])
	$7 = *($12)
	if ( ((int_32)$7 == (int_32)$15) ){ goto $label$12 }
	$13 = [32]
	goto $label$8 
	
.LABEL $label$50
	$13 = [33]
	goto $label$8 
	
.LABEL $label$49
	$7 = ($7 + [-24])
	$17 = *($7)
	*($7) = [0]
	if ( ($17 == 0) ){ goto $label$10 }
	$13 = [34]
	goto $label$8 
	
.LABEL $label$48
	CALL _ZdlPv($17)
	$13 = [35]
	goto $label$8 
	
.LABEL $label$47
	if ( ((int_32)$15 != (int_32)$7) ){ goto $label$11 }
	$13 = [36]
	goto $label$8 
	
.LABEL $label$46
	$7 = *(($5 + [40]))
	goto $label$9 
	
.LABEL $label$45
	$7 = $15
	$13 = [37]
	goto $label$8 
	
.LABEL $label$44
	*($12) = $15
	CALL _ZdlPv($7)
	$13 = [6]
	goto $label$8 
	
.LABEL $label$43
	$global$0 = ($5 + [192])
	return 
	
.LABEL $label$42
	$13 = [1]
	goto $label$8 
	
.LABEL $label$41
	$13 = [0]
	goto $label$8 
	
.LABEL $label$40
	$13 = [6]
	goto $label$8 
	
.LABEL $label$39
	$13 = [0]
	goto $label$8 
	
.LABEL $label$38
	$13 = [0]
	goto $label$8 
	
.LABEL $label$37
	$13 = [4]
	goto $label$8 
	
.LABEL $label$36
	$13 = [6]
	goto $label$8 
	
.LABEL $label$35
	$13 = [6]
	goto $label$8 
	
.LABEL $label$34
	$13 = [6]
	goto $label$8 
	
.LABEL $label$33
	$13 = [9]
	goto $label$8 
	
.LABEL $label$32
	$13 = [6]
	goto $label$8 
	
.LABEL $label$31
	$13 = [6]
	goto $label$8 
	
.LABEL $label$30
	$13 = [31]
	goto $label$8 
	
.LABEL $label$29
	$13 = [43]
	goto $label$8 
	
.LABEL $label$28
	$13 = [13]
	goto $label$8 
	
.LABEL $label$27
	$13 = [14]
	goto $label$8 
	
.LABEL $label$26
	$13 = [16]
	goto $label$8 
	
.LABEL $label$25
	$13 = [16]
	goto $label$8 
	
.LABEL $label$24
	$13 = [15]
	goto $label$8 
	
.LABEL $label$23
	$13 = [26]
	goto $label$8 
	
.LABEL $label$22
	$13 = [21]
	goto $label$8 
	
.LABEL $label$21
	$13 = [19]
	goto $label$8 
	
.LABEL $label$20
	$13 = [26]
	goto $label$8 
	
.LABEL $label$19
	$13 = [23]
	goto $label$8 
	
.LABEL $label$18
	$13 = [26]
	goto $label$8 
	
.LABEL $label$17
	$13 = [25]
	goto $label$8 
	
.LABEL $label$16
	$13 = [27]
	goto $label$8 
	
.LABEL $label$15
	$13 = [28]
	goto $label$8 
	
.LABEL $label$14
	$13 = [39]
	goto $label$8 
	
.LABEL $label$13
	$13 = [30]
	goto $label$8 
	
.LABEL $label$12
	$13 = [38]
	goto $label$8 
	
.LABEL $label$11
	$13 = [33]
	goto $label$8 
	
.LABEL $label$10
	$13 = [35]
	goto $label$8 
	
.LABEL $label$9
	$13 = [37]
	goto $label$8 
	$13
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8591])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $70($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	*($5 + [8]) = (int_64)0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [28])
	CALL $47(($3 + [40]), ($3 + [32]))
	*($5 + [40]) = [-1]
	*($5 + [36]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $19(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $73($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [36]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9043])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4157660950590488576)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8989])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8989])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $16(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [8734])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [8779])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [8829])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($6 + [40])))
	
.LABEL $label$13
	CALL _ZdlPv($6)
	
.LABEL $label$12
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [48]))
	$6 = *($1 + [52])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4982429584927490048, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [24]) = $3
	*($4 + [32]) = $2
	CALL eosio_assert(CALL $fimport$0($1), [8341])
	$1 = *($0)
	*($4 + [8]) = $0
	*($4 + [12]) = ($4 + [32])
	*($4 + [16]) = ($4 + [24])
	*($4 + [72]) = $1
	CALL eosio_assert(((int_64)*($0 + [32]) == (int_64)CALL $fimport$7()), [8886])
	$5 = ($0 + [32])
	*($4 + [48]) = $5
	*($4 + [52]) = ($4 + [8])
	*($4 + [56]) = ($4 + [72])
	*(($6 = CALL _Znwj([56])) + [24]) = [0]
	*($6 + [16]) = (int_64)0
	*($6 + [28 align=4]) = (int_64)0
	*($6 + [36 align=4]) = (int_64)0
	*($6 + [44]) = $5
	CALL $12(($4 + [48]), $6)
	*($4 + [64]) = $6
	$1 = *($6)
	*($4 + [48]) = $1
	$7 = *($6 + [48])
	*($4 + [44]) = $7
	$8 = ($0 + [60])
	$5 = *($8)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [64]))) ){ goto $label$3 }
	*($5 + [8]) = $1
	*($5 + [16]) = $7
	*($4 + [64]) = [0]
	*($5) = $6
	*($8) = ($5 + [24])
	$6 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $13(($0 + [56]), ($4 + [64]), ($4 + [48]), ($4 + [44]))
	$6 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv($6)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [48])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [32])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [40])), (int_64)-5970911088777101312, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $2($9, $10)
	*($3 + [36]) = [0]
	*($3 + [32]) = $9
	$8 = *(*(CALL $46(($3 + [32])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [48])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [8937])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [24]) = [0]
	*($1 + [28 align=4]) = (int_64)0
	*($1 + [36 align=4]) = (int_64)0
	*($1 + [16]) = *(*($5 + [8]))
	$5 = $2
	$2 = ($5 + [-48])
	$global$0 = $2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($5 + [-7])
	*($3 + [24]) = ($3 + [8])
	$5 = ($1 + [8])
	*($3 + [36]) = $5
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = ($1 + [24])
	*($3 + [48]) = ($1 + [28])
	*($3 + [52]) = ($1 + [32])
	*($3 + [56]) = ($1 + [36])
	*($3 + [60]) = ($1 + [40])
	CALL $20(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($4 + [8]), (int_64)-5970911088777101312, *(*($0 + [8])), $8, $2, [41])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$8 = *(($4 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($3 + [32]) = *($5)
	*($1 + [52]) = CALL db_idx64_store($8, (int_64)-5970911088777101312, $11, $12, ($3 + [32]))
	$global$0 = ($3 + [64])
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $64($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $36 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [272])
	$global$0 = $3
	*(($4 = $3) + [216]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $70($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [184]) + [24])) = [0]
	*($4 + [192]) = (int_64)0
	*($4 + [184]) = (int_64)0
	*($4 + [200]) = (int_64)0
	*($4 + [176]) = ($2 + $5)
	*($4 + [168]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8614])
	CALL memcpy(($4 + [184]), $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [8614])
	CALL memcpy((($4 + [184]) + [8]), ($2 + [8]), [8])
	*($4 + [172]) = ($2 + [16])
	CALL $39(($4 + [168]), (($4 + [184]) + [16]))
	*(($3 = ($4 + [8]))) = *($4 + [176])
	*($4) = *($4 + [168])
	$3 = *($3)
	*((($4 + [224]) + [8])) = $3
	*(($6 = (($4 + [240]) + [8]))) = $3
	$7 = *($4)
	*($4 + [240]) = $7
	*($4 + [224]) = $7
	$3 = *($6)
	*((($4 + [256]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$7 = *($4 + [240])
	*($4 + [32]) = $7
	*($4 + [256]) = $7
	*(($4 + [56])) = $1
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*(($4 + [96])) = $1
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [124])) = [0]
	*(($4 + [136])) = $1
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [164])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [260]) = ($4 + [216])
	*($4 + [256]) = ($4 + [16])
	CALL $41(($4 + [256]), ($4 + [184]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $73($2)
	
.LABEL $label$4
	CALL $38(($4 + [16]))
	if ( ((*($4 + [200]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [208])))
	
.LABEL $label$5
	$global$0 = ($4 + [272])
	return [1]
}

int_32 .FUNC $37 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $70($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [168]) = (int_64)0
	*($4 + [160]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8614])
	CALL memcpy(($4 + [160]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8614])
	CALL memcpy((($4 + [160]) + [8]), ($2 + [8]), [8])
	*(($4 + [28])) = ($2 + [16])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $1
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [76])) = [0]
	*(($4 + [88])) = $1
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [116])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*(($4 + [128])) = $1
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [156])) = [0]
	*($4 + [120]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [168])
	$1 = *($4 + [160])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $73($2)
	
.LABEL $label$5
	CALL $38(($4 + [8]))
	$global$0 = ($4 + [176])
	return [1]
}

int_32 .FUNC $34 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $70($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [160]) = (int_64)0
	*($4 + [168]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8614])
	CALL memcpy(($4 + [160]), $2, [8])
	$3 = ($7 & [-4])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [8614])
	CALL memcpy((($4 + [160]) + [8]), ($2 + [8]), [4])
	CALL eosio_assert(((int_32)$3 != (int_32)[12]), [8614])
	CALL memcpy((($4 + [160]) + [12]), ($2 + [12]), [4])
	*(($4 + [28])) = ($2 + [16])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $1
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [76])) = [0]
	*(($4 + [88])) = $1
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [116])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*(($4 + [128])) = $1
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [156])) = [0]
	*($4 + [120]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$8 = *($4 + [172])
	$9 = *($4 + [168])
	$0 = *($4 + [160])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $9), (int_32 $8), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $73($2)
	
.LABEL $label$5
	CALL $38(($4 + [8]))
	$global$0 = ($4 + [176])
	return [1]
}

int_32 .FUNC $35 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [288])
	$global$0 = $3
	*(($4 = $3) + [232]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $70($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [224])) = [0]
	*($4 + [200]) = (int_64)0
	*($4 + [192]) = (int_64)0
	*($4 + [208]) = (int_64)0
	*($4 + [216]) = (int_64)0
	*($4 + [184]) = ($2 + $5)
	*($4 + [176]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8614])
	CALL memcpy(($4 + [192]), $2, [8])
	$3 = ($5 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [8614])
	CALL memcpy((($4 + [192]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [8614])
	CALL memcpy((($4 + [192]) + [16]), ($2 + [16]), [8])
	*($4 + [180]) = ($2 + [24])
	CALL $39(($4 + [176]), (($4 + [192]) + [24]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [184])
	*($4 + [8]) = *($4 + [176])
	$3 = *($3)
	*((($4 + [240]) + [8])) = $3
	*(($6 = (($4 + [256]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [256]) = $7
	*($4 + [240]) = $7
	$3 = *($6)
	*((($4 + [272]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$7 = *($4 + [256])
	*($4 + [40]) = $7
	*($4 + [272]) = $7
	*(($4 + [64])) = $1
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	*(($4 + [104])) = $1
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [132])) = [0]
	*(($4 + [144])) = $1
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [172])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [276]) = ($4 + [232])
	*($4 + [272]) = ($4 + [24])
	CALL $40(($4 + [272]), ($4 + [192]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $73($2)
	
.LABEL $label$4
	CALL $38(($4 + [24]))
	if ( ((*($4 + [216]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [224])))
	
.LABEL $label$5
	$global$0 = ($4 + [288])
	return [1]
}

int_32 .FUNC $32 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $70($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [160]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [168]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8614])
	CALL memcpy(($4 + [152]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [8614])
	CALL memcpy((($4 + [152]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [8614])
	CALL memcpy((($4 + [152]) + [16]), ($2 + [16]), [8])
	*(($4 + [20])) = ($2 + [24])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $1
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [68])) = [0]
	*(($4 + [80])) = $1
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [108])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*(($4 + [120])) = $1
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [148])) = [0]
	*($4 + [112]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [168])
	$1 = *($4 + [160])
	$8 = *($4 + [152])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $8), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $73($2)
	
.LABEL $label$5
	CALL $38($4)
	$global$0 = ($4 + [176])
	return [1]
}

int_32 .FUNC $33 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $70($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [28])) = $2
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $1
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [76])) = [0]
	*(($4 + [88])) = $1
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [116])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*(($4 + [128])) = $1
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [156])) = [0]
	*($4 + [120]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $73($2)
	
.LABEL $label$5
	CALL $38(($4 + [8]))
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9091])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9091])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9091])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9091])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9091])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	CALL $50(*($1), *($0 + [20]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)-3075631001917804545) ){ goto $label$9 }
	if ( ((int_64)$2 <= (int_64)-2507766120631500801) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-2507766120631500800) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)3626112701670768640) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)3626341382194462720) ){ goto $label$1 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [1]
	*($3 + [24]) = *($3 + [112])
	CALL $32($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 > (int_64)-4850734336690880513) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-4851704166910787584) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-4850741482969828480) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [2]
	*($3 + [16]) = *($3 + [120])
	CALL $33($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)-3075631001917804544) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-3068278705101819904) ){ goto $label$1 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [3]
	*($3 + [48]) = *($3 + [88])
	CALL $34($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)-4850734336690880512) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-4850731033978470400) ){ goto $label$1 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [4]
	*($3 + [8]) = *($3 + [128])
	CALL $33($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [100]) = [0]
	*($3 + [96]) = [5]
	*($3 + [40]) = *($3 + [96])
	CALL $35($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [84]) = [0]
	*($3 + [80]) = [6]
	*($3 + [56]) = *($3 + [80])
	CALL $36($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [108]) = [0]
	*($3 + [104]) = [7]
	*($3 + [32]) = *($3 + [104])
	CALL $37($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [76]) = [0]
	*($3 + [72]) = [8]
	*($3 + [64]) = *($3 + [72])
	CALL $34($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [140]) = [0]
	*($3 + [136]) = [9]
	*($3) = *($3 + [136])
	CALL $33($1, $1, $3)
	
.LABEL $label$1
	CALL $66([0])
	$global$0 = ($3 + [144])
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $59 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $62($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $64 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9091])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9091])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $38 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$6
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [136]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$7 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [28])))
	
.LABEL $label$12
	CALL _ZdlPv($4)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$10 }
	$3 = *(($0 + [96]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $1
	
.LABEL $label$8
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$13 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$15 }
	
.LOOP $label$16:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$17 }
	CALL _ZdlPv($4)
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$16 }
	$3 = *(($0 + [56]))
	goto $label$14 
	
.LABEL $label$15
	$3 = $1
	
.LABEL $label$14
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$13
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $73($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $68(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9256])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $68(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $73($0)
	
.LABEL $label$1
}