(data (i32.const 8192) "invalid RAM token symbol name\00")
(data (i32.const 8222) "invalid supply\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8323) "RAM token already exists\00")
(data (i32.const 8348) "invalid symbol name\00")
(data (i32.const 8368) "memo has more than 256 bytes\00")
(data (i32.const 8397) "Invalid RAM token!\00")
(data (i32.const 8416) "invalid quantity\00")
(data (i32.const 8433) "must issue positive quantity\00")
(data (i32.const 8462) "symbol precision mismatch\00")
(data (i32.const 8488) "Invalid symbol name\00")
(data (i32.const 8508) "Invalid quantity!\00")
(data (i32.const 8526) "Must burn positive quantity!\00")
(data (i32.const 8555) "Symbol precision mismatch!\00")
(data (i32.const 8582) "Quantity exceeds available supply!\00")
(data (i32.const 8617) "RAM symbol does not exist\00")
(data (i32.const 8643) "RAM symbol precision mismatch\00")
(data (i32.const 8673) "Balance row already deleted or never existed. Action won\'t have any effect.\00")
(data (i32.const 8749) "Cannot close because the balance is not zero.\00")
(data (i32.const 8795) "cannot transfer to self\00")
(data (i32.const 8819) "to account does not exist\00")
(data (i32.const 8845) "unable to find key\00")
(data (i32.const 8864) "transfers are frozen\00")
(data (i32.const 8885) "must transfer positive quantity\00")
(data (i32.const 8917) "no balance object found\00")
(data (i32.const 8941) "overdrawn balance\00")
(data (i32.const 8959) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9008) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9059) "error reading iterator\00")
(data (i32.const 9082) "read\00")
(data (i32.const 9087) "cannot create objects in table of another contract\00")
(data (i32.const 9138) "write\00")
(data (i32.const 9144) "object passed to modify is not in multi_index\00")
(data (i32.const 9190) "cannot modify objects in table of another contract\00")
(data (i32.const 9241) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9300) "attempt to add asset with different symbol\00")
(data (i32.const 9343) "addition underflow\00")
(data (i32.const 9362) "addition overflow\00")
(data (i32.const 9380) "attempt to subtract asset with different symbol\00")
(data (i32.const 9428) "subtraction underflow\00")
(data (i32.const 9450) "subtraction overflow\00")
(data (i32.const 9471) "cannot pass end iterator to erase\00")
(data (i32.const 9505) "cannot increment end iterator\00")
(data (i32.const 9535) "object passed to erase is not in multi_index\00")
(data (i32.const 9580) "cannot erase objects in table of another contract\00")
(data (i32.const 9630) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9683) "singleton does not exist\00")
(data (i32.const 9708) "cannot pass end iterator to modify\00")
(data (i32.const 9743) "get\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "db_store_i64" (func $fimport$3 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_update_i64" (func $fimport$5 (param i32 i64 i32 i32)))
(import "env" "has_auth" (func $fimport$6 (param i64) (result i32)))
(import "env" "is_account" (func $fimport$7 (param i64) (result i32)))
(import "env" "require_recipient" (func $fimport$8 (param i64)))
(import "env" "action_data_size" (func $fimport$9 (result i32)))
(import "env" "read_action_data" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$13))
(import "env" "send_inline" (func $fimport$14 (param i32 i32)))
(import "env" "db_next_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$16 (param i32)))
(import "env" "memset" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$19 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$26 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$27 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$28 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$29 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$30 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$31 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$34 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$36 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$37 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$38 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $31))
(export "_Znwj" (func $79))
(export "_ZdlPv" (func $81))
(export "_Znaj" (func $80))
(export "_ZdaPv" (func $82))
(export "_ZnwjSt11align_val_t" (func $83))
(export "_ZnajSt11align_val_t" (func $84))
(export "_ZdlPvSt11align_val_t" (func $85))
(export "_ZdaPvSt11align_val_t" (func $86))
(table $0 7 7 anyfunc)
(elem (i32.const 1) $19 $1 $22 $27 $24 $10)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18164))
(global $global$2 i32 (i32.const 18164))


void .FUNC $98 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18152])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17960]
	$3 = (((int_32)$1 * (int_32)[12]) + [17960])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $95($1)
	
.LABEL $label$2
	*(CALL $91()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $95(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $98($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $95 (int_32 $0)
{
	return CALL $96([9768], $0)
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $97($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8237])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $97 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9760]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9764])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9760]) = [1]
	$2 = ($2 << [16])
	*([0] + [9764]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9764])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9764]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9760]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9760]) = [1]
	$3 = ($3 << [16])
	*([0] + [9764]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9764])
	
.LABEL $label$10
	*([0] + [9764]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $90 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $91 ()
{
	return [9752]
}

void .FUNC $92 (int_32 $0)
{
}

int_32 .FUNC $93 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $91())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $94($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9082])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	CALL $40(*($1), ($3 + [8]))
	CALL $41(*($1), ($3 + [24]))
}

int_32 .FUNC $49 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$1 = ($1 + [-24])
	*($3) = $1
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	$4 = ($1 + [4])
	$5 = *($4)
	
.LOOP $label$3:
	$6 = ($2 + [-24])
	$7 = *($6)
	*($6) = [0]
	*(($5 + [-24])) = $7
	*(($5 + [-8])) = *(($2 + [-8]))
	*(($5 + [-16])) = *(($2 + [-16]))
	$5 = (*($4) + [-24])
	*($4) = $5
	$2 = $6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$5 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $5
	*(($5 = ($1 + [4]))) = $3
	$2 = ($0 + [4])
	$6 = *($2)
	*($2) = *($1 + [8])
	*($1 + [8]) = $6
	$2 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $2
	*($1) = *($5)
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9082])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9082])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $40(*($1), ($0 + [16]))
	CALL $41(*($1), ($0 + [32]))
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [8]))
	*($2 + [32]) = *($1)
	$1 = CALL $88(($2 + [16]), ($1 + [16]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$3 = (*($0) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($5 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$4 = CALL $88(($2 + [64]), $1)
	*(($2 + [8])) = *($5)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $2), (int_32 $4), (int_32 $0))
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$2
	if ( ((*($1) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$3
	$global$0 = ($2 + [96])
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $77($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$7 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$6 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$5 
	
.LABEL $label$7
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$3 = [0]
	
.LOOP $label$8:
	*(($2 + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[12]) ){ goto $label$8 }
	if ( (*($1) & [1]) ){ goto $label$4 }
	*($1) = [0]
	goto $label$3 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$5
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $89($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = [0]
	
.LOOP $label$12:
	*(($2 + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[12]) ){ goto $label$12 }
	if ( ((*($2) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($2 + [8]))
	goto $label$2 
	
.LABEL $label$4
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$3
	CALL $89($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = [0]
	
.LOOP $label$13:
	*(($2 + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[12]) ){ goto $label$13 }
	if ( ((*($2) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$2
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$14 }
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$14
	$global$0 = ($2 + [32])
	return $0
	
.LABEL $label$1
	CALL $87($2)
	return (unreachable)
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9082])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9082])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($1 + [8]) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL _Znwj(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9082])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9082])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9082])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9082])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9082])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $88(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $88(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$2
	if ( ((*($1) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$3
	$global$0 = ($2 + [96])
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($2)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$3 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9059])
	if ( ($4 <= [513]) ){ goto $label$6 }
	$2 = CALL $95($4)
	goto $label$5 
	
.LABEL $label$6
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$5
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $50(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $7(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($4 <= [513]) ){ goto $label$9 }
	CALL $98($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $15(*($1), *($0))
	CALL $15(*($1), *($0 + [4]))
	$2 = *($0 + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9138])
	CALL memcpy(*($0 + [4]), $2, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $51(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $52($0, $9)
	CALL $53($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $90($0)
}

int_32 .FUNC $4 (int_32 $0)
{
	int_64 $1
	int_64 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	$0 = [0]
	
.LOOP $label$2:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$1 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $2
	$3 = $0
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$1 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $4 ){ goto $label$5 }
	
.LABEL $label$3
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$2 }
	return [1]
	
.LABEL $label$1
	return [0]
}

void .FUNC $5 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	if ( ((int_64)(uint_64)*(*($5) + [8]) >> (uint_64)(int_64)8) == (int_64)$2) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$5 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$1), [9008])
	*($0 + [4]) = $5
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-4157508551318700032, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = CALL $9($1, $5)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$1), [9008])
	*($0 + [4]) = $5
	goto $label$1 
	
.LABEL $label$5
	*($0 + [4]) = [0]
	
.LABEL $label$1
	*($0) = $1
}

int_32 .FUNC $2 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = $2
	*($0) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8959])
	*($3 + [8]) = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	CALL eosio_assert(CALL $4(($3 + [8])), [8348])
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $3 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = *($2 + [8])
	$5 = (uint_64)$4 >> (uint_64)(int_64)8
	*($3 + [48]) = $5)
	CALL eosio_assert(CALL $4(($3 + [48])), [8192])
	$6 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	*($3 + [48]) = $5
	$6 = CALL $4(($3 + [48]))
	
.LABEL $label$1
	CALL eosio_assert($6, [8222])
	*(($7 = (($3 + [8]) + [32]))) = [0]
	*($3 + [16]) = $5
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	CALL $5($3, ($3 + [8]), $5)
	CALL eosio_assert((*($3 + [4]) == 0), [8323])
	$8 = *($0)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$2()), [9087])
	*(($0 = CALL _Znwj([56]))) = (int_64)0
	*($0 + [40]) = ($3 + [8])
	*($0 + [8]) = $4
	*($0 + [32]) = $1
	*($0 + [16]) = *($2)
	*(($0 + [24])) = *(($2 + [8]))
	*($3 + [96]) = (($3 + [48]) + [40])
	*($3 + [92]) = ($3 + [48])
	*($3 + [88]) = ($3 + [48])
	*($3 + [104]) = ($3 + [88])
	*($3 + [116]) = ($0 + [16])
	*($3 + [112]) = $0
	*($3 + [120]) = ($0 + [32])
	CALL $6(($3 + [112]), ($3 + [104]))
	$5 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	$6 = CALL db_store_i64(*($3 + [16]), (int_64)-4157508551318700032, $8, $5), ($3 + [48]), [40]
	*($0 + [44]) = $6)
	if ( (uint_64)($5 <= *($3 + [24])) ){ goto $label$2 }
	*((($3 + [8]) + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$2
	*($3 + [112]) = $0
	$5 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8
	*($3 + [48]) = $5)
	*($3 + [88]) = $6
	$9 = ($3 + [36])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*($7)) ){ goto $label$4 }
	*($2 + [8]) = $5
	*($2 + [16]) = $6
	*($3 + [112]) = [0]
	*($2) = $0
	*($9) = ($2 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $7(($3 + [32]), ($3 + [112]), ($3 + [48]), ($3 + [88]))
	
.LABEL $label$3
	$0 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( ($0 == 0) ){ goto $label$5 }
	CALL _ZdlPv($0)
	
.LABEL $label$5
	CALL $8(($3 + [32]))
	$global$0 = ($3 + [128])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = CALL $2(($2 + [16]), (int_64)-1, (int_64)1296126464)
	*(($2 + [8])) = *(($3 + [8]))
	*($2) = *($3)
	CALL $3($0, $1, $2)
	$global$0 = ($2 + [32])
}

void .FUNC $14 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	if ( ((int_64)(uint_64)*(*($5) + [8]) >> (uint_64)(int_64)8) == (int_64)$2) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$5 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [9008])
	*($0 + [4]) = $5
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)3607749779137757184, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = CALL $23($1, $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [9008])
	*($0 + [4]) = $5
	goto $label$1 
	
.LABEL $label$5
	*($0 + [4]) = [0]
	
.LABEL $label$1
	*($0) = $1
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9138])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *($1 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9138])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $47(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $48($0, $9)
	CALL $49($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $90($0)
}

int_32 .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($2)
	
.LABEL $label$1
	return $0
}

void .FUNC $10 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [208])
	$global$0 = $4
	$5 = *($2 + [8])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	*($4 + [128]) = $6)
	CALL eosio_assert(CALL $4(($4 + [128])), [8348])
	$7 = *($3)
	if ( ($7 & [1]) ){ goto $label$2 }
	$7 = uint_32($7 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$7 = *($3 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($7 <= [257]), [8368])
	$8 = [0]
	*((($4 + [88]) + [32])) = [0]
	*($4 + [96]) = $6
	*($4 + [104]) = (int_64)-1
	*($4 + [112]) = (int_64)0
	*($4 + [88]) = *($0)
	CALL $5(($4 + [80]), ($4 + [88]), $6)
	CALL eosio_assert(((int_32)*($4 + [84]) != (int_32)[0]), [8397])
	$7 = *($4 + [84])
	CALL require_auth(*($7 + [32]))
	$9 = *($2)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	*($4 + [128]) = $6
	$8 = CALL $4(($4 + [128]))
	$5 = *(($2 + [8]))
	$9 = *($2)
	
.LABEL $label$3
	CALL eosio_assert($8, [8416])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [8433])
	CALL eosio_assert(((int_64)$5 == (int_64)*($7 + [8])), [8462])
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($4 + [88])), [9144])
	CALL eosio_assert(((int_64)*($4 + [88]) == (int_64)CALL $fimport$2()), [9190])
	$6 = *($7 + [8])
	CALL $11($7, $2)
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$6) == (int_64)(uint_64)*($7 + [8]) >> (uint_64)(int_64)8)), [9241])
	*($4 + [176]) = (($4 + [128]) + [40])
	*($4 + [172]) = ($4 + [128])
	*($4 + [168]) = ($4 + [128])
	*($4 + [184]) = ($4 + [168])
	*($4 + [196]) = ($7 + [16])
	*($4 + [192]) = $7
	*($4 + [200]) = ($7 + [32])
	CALL $6(($4 + [192]), ($4 + [184]))
	CALL db_update_i64(*($7 + [44]), (int_64)0, ($4 + [128]), [40])
	$8 = (($4 + [88]) + [16])
	if ( (uint_64)($6 <= *($8)) ){ goto $label$4 }
	*($8) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$4
	$7 = ($7 + [32])
	$6 = *($7)
	$10 = ($2 + [8])
	*(($8 = (($4 + [64]) + [8]))) = *($10)
	$5 = *($2)
	*(($4 + [8])) = *($8)
	*($4 + [64]) = $5
	*($4) = *($4 + [64])
	CALL $12($0, $6, $4, $6)
	$6 = *($7)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$5 }
	$5 = *($0)
	*(($4 + [40])) = *($10)
	*(($4 + [56])) = *(($3 + [8]))
	*($4 + [136]) = (int_64)3617214756542218240
	*($4 + [128]) = $6
	*($4 + [16]) = $6
	*($4 + [24]) = $1
	*($4 + [32]) = *($2)
	*($4 + [48]) = *($3)
	$7 = [0]
	
.LOOP $label$6:
	*(($3 + $7)) = [0]
	$7 = ($7 + [4])
	if ( ((int_32)$7 != (int_32)[12]) ){ goto $label$6 }
	CALL $13($5, ($4 + [128]), ($4 + [16]))
	if ( ((*(($4 + [48])) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [56])))
	
.LABEL $label$5
	CALL $8(($4 + [112]))
	$global$0 = ($4 + [208])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_64 $2
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*($0 + [8])), [9300])
	$2 = ((int_64)*($0) + (int_64)*($1))
	*($0) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9343])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [9362])
	return $0
}

void .FUNC $12 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [96])
	$global$0 = $4
	*((($4 + [8]) + [32])) = [0]
	*($4 + [16]) = $1
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [8]) = *($0)
	CALL $14($4, ($4 + [8]), (uint_64)*($2 + [8]) >> (uint_64)(int_64)8))
	if ( (*($4 + [4]) == 0) ){ goto $label$2 }
	$0 = *($4 + [4])
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [9708])
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($4 + [8])), [9144])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$2()), [9190])
	$1 = *($0 + [8])
	CALL $11($0, $2)
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [9241])
	*($4 + [88]) = (($4 + [48]) + [16])
	*($4 + [84]) = ($4 + [48])
	*($4 + [80]) = ($4 + [48])
	CALL $15(($4 + [80]), $0)
	CALL db_update_i64(*($0 + [20]), (int_64)0, ($4 + [48]), [16])
	$0 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($0)) ){ goto $label$1 }
	*($0) = ((int_64)$1 + (int_64)1)
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$2()), [9087])
	*(($0 = CALL _Znwj([32])) + [16]) = ($4 + [8])
	*($0 + [8]) = *(($2 + [8]))
	*($0) = *($2)
	*($4 + [88]) = (($4 + [48]) + [16])
	*($4 + [84]) = ($4 + [48])
	*($4 + [80]) = ($4 + [48])
	CALL $15(($4 + [80]), $0)
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	$5 = CALL db_store_i64(*((($4 + [8]) + [8])), (int_64)3607749779137757184, $3, $1), ($4 + [48]), [16]
	*($0 + [20]) = $5)
	$2 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$3 }
	*($2) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$3
	*($4 + [80]) = $0
	$1 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8
	*($4 + [48]) = $1)
	*($4 + [76]) = $5
	$6 = ($4 + [36])
	$2 = *($6)
	if ( ((uint_32)$2 >= (uint_32)*(($4 + [40]))) ){ goto $label$5 }
	*($2 + [8]) = $1
	*($2 + [16]) = $5
	*($4 + [80]) = [0]
	*($2) = $0
	*($6) = ($2 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $16(($4 + [32]), ($4 + [80]), ($4 + [48]), ($4 + [76]))
	
.LABEL $label$4
	$0 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( ($0 == 0) ){ goto $label$1 }
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $17(($4 + [32]))
	$global$0 = ($4 + [96])
}

void .FUNC $13 (int_64 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [64])
	$global$0 = $3
	*(($4 = CALL _Znwj([16]))) = *($1)
	*(($4 + [8])) = *(($1 + [8]))
	*(($3 + [24])) = *(($2 + [24]))
	*(($3 + [40])) = *(($2 + [40]))
	*($3 + [48]) = $4
	$4 = ($4 + [16])
	*($3 + [56]) = $4
	*($3 + [52]) = $4
	*($3) = *($2)
	*($3 + [8]) = *($2 + [8])
	*($3 + [16]) = *($2 + [16])
	*($3 + [32]) = *($2 + [32 align=4])
	$4 = ($2 + [32])
	$2 = [0]
	
.LOOP $label$1:
	*(($4 + $2)) = [0]
	$2 = ($2 + [4])
	if ( ((int_32)$2 != (int_32)[12]) ){ goto $label$1 }
	CALL $18($0, (int_64)-3617168760277827584, ($3 + [48]), $3)
	if ( ((*(($3 + [32])) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$2
	$2 = *($3 + [48])
	if ( ($2 == 0) ){ goto $label$3 }
	*($3 + [52]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	$4 = ($1 + [4])
	$5 = *($4)
	
.LOOP $label$3:
	$6 = ($2 + [-24])
	$7 = *($6)
	*($6) = [0]
	*(($5 + [-24])) = $7
	*(($5 + [-8])) = *(($2 + [-8]))
	*(($5 + [-16])) = *(($2 + [-16]))
	$5 = (*($4) + [-24])
	*($4) = $5
	$2 = $6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$5 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $5
	*(($5 = ($1 + [4]))) = $3
	$2 = ($0 + [4])
	$6 = *($2)
	*($2) = *($1 + [8])
	*($1 + [8]) = $6
	$2 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $2
	*($1) = *($5)
}

void .FUNC $18 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [64])
	$global$0 = $4
	$2 = CALL $54(($4 + [8]), $2)
	$5 = *($2)
	*($2) = [0]
	$6 = *($2 + [8])
	*($2 + [4 align=4]) = (int_64)0
	*(($4 + [48])) = $6
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $5
	CALL $55(($4 + [52]), $3)
	CALL $56(($4 + [24]))
	$3 = *($4 + [52])
	if ( ($3 == 0) ){ goto $label$1 }
	*(($4 + [56])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$3 = *($4 + [40])
	if ( ($3 == 0) ){ goto $label$2 }
	*(($4 + [44])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$3 }
	*(($2 + [4])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [64])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [160])
	$global$0 = $3
	$4 = *($1 + [8])
	$5 = (uint_64)$4 >> (uint_64)(int_64)8
	*($3 + [80]) = $5)
	CALL eosio_assert(CALL $4(($3 + [80])), [8488])
	$6 = *($2)
	if ( ($6 & [1]) ){ goto $label$2 }
	$2 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($2 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($2 <= [257]), [8368])
	$6 = [0]
	*((($3 + [40]) + [32])) = [0]
	*($3 + [48]) = $5
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	*($3 + [40]) = *($0)
	CALL $5(($3 + [32]), ($3 + [40]), $5)
	CALL eosio_assert(((int_32)*($3 + [36]) != (int_32)[0]), [8397])
	$2 = *($3 + [36])
	CALL require_auth(*($2 + [32]))
	$7 = *($1)
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	*($3 + [80]) = $5
	$6 = CALL $4(($3 + [80]))
	$4 = *(($1 + [8]))
	$7 = *($1)
	
.LABEL $label$3
	CALL eosio_assert($6, [8508])
	CALL eosio_assert(((int_64)$7 > (int_64)0), [8526])
	CALL eosio_assert(((int_64)$4 == (int_64)*($2 + [8])), [8555])
	CALL eosio_assert(((int_64)$7 <= (int_64)*($2)), [8582])
	$6 = ($2 + [32])
	$5 = *($6)
	*(($8 = (($3 + [16]) + [8]))) = *(($1 + [8]))
	$7 = *($1)
	*(($3 + [8])) = *($8)
	*($3 + [16]) = $7
	*($3) = *($3 + [16])
	CALL $20($0, $5, $3)
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)($3 + [40])), [9144])
	CALL eosio_assert(((int_64)*($3 + [40]) == (int_64)CALL $fimport$2()), [9190])
	$5 = *($2 + [8])
	CALL $21($2, $1)
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($2 + [8]) >> (uint_64)(int_64)8)), [9241])
	*($3 + [128]) = (($3 + [80]) + [40])
	*($3 + [124]) = ($3 + [80])
	*($3 + [120]) = ($3 + [80])
	*($3 + [136]) = ($3 + [120])
	*($3 + [148]) = ($2 + [16])
	*($3 + [144]) = $2
	*($3 + [152]) = $6
	CALL $6(($3 + [144]), ($3 + [136]))
	CALL db_update_i64(*($2 + [44]), (int_64)0, ($3 + [80]), [40])
	$2 = (($3 + [40]) + [16])
	if ( (uint_64)($5 <= *($2)) ){ goto $label$4 }
	*($2) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$4
	CALL $8(($3 + [64]))
	$global$0 = ($3 + [160])
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $66($2, $1)
	CALL $60($0, *($2))
	$3 = *($0)
	*($2) = $3
	*($2 + [4]) = $3
	*($2 + [8]) = *($0 + [4])
	CALL $67($2, $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = *($1)
	$3 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	$2 = *($0)
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$1 = *($1)
	$1 = ( *(($1 + [4])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$2 }
	*($0) = ($1 + $2)
	
.LABEL $label$2
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $40(*($1), *($0))
	CALL $40(*($1), *($0 + [4]))
	$2 = *($0 + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9082])
	CALL memcpy($2, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL _Znwj(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	$4 = ($1 + [4])
	$5 = *($4)
	
.LOOP $label$3:
	$6 = ($2 + [-24])
	$7 = *($6)
	*($6) = [0]
	*(($5 + [-24])) = $7
	*(($5 + [-8])) = *(($2 + [-8]))
	*(($5 + [-16])) = *(($2 + [-16]))
	$5 = (*($4) + [-24])
	*($4) = $5
	$2 = $6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$5 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $5
	*(($5 = ($1 + [4]))) = $3
	$2 = ($0 + [4])
	$6 = *($2)
	*($2) = *($1 + [8])
	*($1 + [8]) = $6
	$2 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $2
	*($1) = *($5)
}

int_32 .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$1 = ($1 + [-24])
	*($3) = $1
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	return $0
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$2 = (*($1 + [4]) - *($1))
	if ( ($2 == 0) ){ goto $label$1 }
	CALL $57($0, int_32($2 >> [4]))
	$3 = *($1)
	$1 = (*(($1 + [4])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$1 }
	$2 = ($0 + [4])
	CALL memcpy(*($2), $3, $1)
	*($2) = (*($2) + $1)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $34 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $95($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [112]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $45(($4 + [24]), ($4 + [112]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($8 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4 + [8])
	$3 = *($8)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [96])
	*($4 + [40]) = $0
	*($4 + [112]) = $0
	$0 = *($4 + [88])
	$1 = *($4 + [72])
	*($4 + [112]) = *($4 + [80])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 ($4 + [112])), (int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $98($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $56 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $58($1, $0)
	$0 = *($1)
	CALL send_inline($0, (*($1 + [4]) - $0))
	$0 = *($1)
	if ( ($0 == 0) ){ goto $label$1 }
	*($1 + [4]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	if ( ((uint_32)$1 >= (uint_32)[268435456]) ){ goto $label$1 }
	$2 = ($1 << [4])
	$1 = CALL _Znwj($2)
	*($0) = $1
	*($0 + [4]) = $1
	*($0 + [8]) = ($1 + $2)
	return (unreachable)
	
.LABEL $label$1
	CALL $90($0)
}

int_32 .FUNC $35 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $95($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [96])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	$3 = [32]
	
.LOOP $label$4:
	*((($4 + [72]) + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[44]) ){ goto $label$4 }
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $43(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $44(($4 + [144]), ($4 + [72]))
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL $98($2)
	
.LABEL $label$5
	if ( ((*(($4 + [104])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [112])))
	
.LABEL $label$6
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	if ( ((int_64)$2 == (int_64)-4157503053760561152) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + ((int_32)((int_32)((uint_32)(($3 + [-24]) - $4) / (uint_32)[24]) ^ (int_32)[-1]) * (int_32)[24]))
	
.LABEL $label$1
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$1), [9008])
	*($0 + [4]) = $3
	goto $label$2 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-4157503053760561152, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$4 }
	$3 = CALL $71($1, $3)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$1), [9008])
	*($0 + [4]) = $3
	goto $label$2 
	
.LABEL $label$4
	*($0 + [4]) = [0]
	
.LABEL $label$2
	*($0) = $1
}

void .FUNC $28 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$6 = ($global$0 - [160])
	$global$0 = $6
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [8795])
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$7($2), [8819])
	$7 = *($4 + [8])
	*((($6 + [112]) + [32])) = [0]
	$8 = (uint_64)$7 >> (uint_64)(int_64)8
	*($6 + [120]) = $8)
	*($6 + [128]) = (int_64)-1
	*($6 + [136]) = (int_64)0
	*($6 + [112]) = *($0)
	CALL $5(($6 + [72]), ($6 + [112]), $8)
	CALL eosio_assert(((int_32)*($6 + [76]) != (int_32)[0]), [8845])
	$9 = *($6 + [76])
	$10 = *($9 + [32])
	if ( ((int_64)$10 != (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$1 }
	
.LABEL $label$2
	*((($6 + [72]) + [32])) = [0]
	*($6 + [80]) = $10
	*($6 + [72]) = $10
	*($6 + [88]) = (int_64)-1
	*($6 + [96]) = (int_64)0
	CALL $29(($6 + [152]), ($6 + [72]), (int_64)-4157503053760561152)
	CALL eosio_assert(((int_32)*($6 + [156]) != (int_32)[0]), [9683])
	CALL eosio_assert(*(*($6 + [156]) + [16]), [8864])
	CALL $30(($6 + [96]))
	
.LABEL $label$1
	CALL require_recipient($1)
	CALL require_recipient($2)
	$11 = [0]
	$10 = *($4)
	if ( ((uint_64)((int_64)$10 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	*($6 + [72]) = $8
	$11 = CALL $4(($6 + [72]))
	
.LABEL $label$3
	CALL eosio_assert($11, [8416])
	CALL eosio_assert(((int_64)$10 > (int_64)0), [8885])
	CALL eosio_assert(((int_64)$7 == (int_64)*($9 + [8])), [8462])
	$11 = *($5)
	if ( ($11 & [1]) ){ goto $label$5 }
	$5 = uint_32($11 >> [1])
	goto $label$4 
	
.LABEL $label$5
	$5 = *($5 + [4])
	
.LABEL $label$4
	CALL eosio_assert(($5 <= [257]), [8368])
	$5 = ($4 + [8])
	$8 = *($5)
	*((($6 + [56]) + [8])) = $8
	$7 = *($4)
	*((($6 + [24]) + [8])) = $8
	*($6 + [24]) = $7
	*($6 + [56]) = $7
	CALL $20($0, $1, ($6 + [24]))
	$7 = *($5)
	*((($6 + [40]) + [8])) = $7
	$1 = *($4)
	*((($6 + [8]) + [8])) = $7
	*($6 + [8]) = $1
	*($6 + [40]) = $1
	CALL $12($0, $2, ($6 + [8]), $3)
	CALL $8(($6 + [136]))
	$global$0 = ($6 + [160])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [32]
	CALL $59($2, ($1 + [32]))
	CALL $60($0, *($2))
	$3 = *($0)
	*($2) = $3
	*($2 + [4]) = $3
	*($2 + [8]) = *($0 + [4])
	*($2 + [16]) = $2
	*($2 + [24]) = $1
	CALL $61(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [32])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_64 $2
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*($0 + [8])), [9380])
	$2 = (int_64)
	*($0) = $2(*($0) - *($1)))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9428])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [9450])
	return $0
}

void .FUNC $20 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [80])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	CALL $14(($3 + [48]), ($3 + [8]), (uint_64)*($2 + [8]) >> (uint_64)(int_64)8))
	CALL eosio_assert(((int_32)*($3 + [52]) != (int_32)[0]), [8917])
	$0 = *($3 + [52])
	CALL eosio_assert(((int_64)*($0) >= (int_64)*($2)), [8941])
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($3 + [8])), [9144])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$2()), [9190])
	$4 = *($0 + [8])
	CALL $21($0, $2)
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$4) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [9241])
	*($3 + [72]) = (($3 + [48]) + [16])
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [48])
	CALL $15(($3 + [64]), $0)
	CALL db_update_i64(*($0 + [20]), $1, ($3 + [48]), [16])
	if ( (uint_64)($4 <= *($3 + [24])) ){ goto $label$1 }
	*((($3 + [8]) + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	CALL $17(($3 + [32]))
	$global$0 = ($3 + [80])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$3 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9059])
	if ( ($4 <= [513]) ){ goto $label$6 }
	$2 = CALL $95($4)
	goto $label$5 
	
.LABEL $label$6
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$5
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL $40(($3 + [32]), $5)
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [16]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $16(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	
.LABEL $label$7
	if ( ($4 <= [513]) ){ goto $label$9 }
	CALL $98($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $22 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL require_auth($3)
	$5 = *($2)
	*((($4 + [48]) + [32])) = [0]
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	*($4 + [56]) = $5)
	*($4 + [64]) = (int_64)-1
	*($4 + [72]) = (int_64)0
	*($4 + [48]) = *($0)
	CALL $5(($4 + [8]), ($4 + [48]), $5)
	CALL eosio_assert(((int_32)*($4 + [12]) != (int_32)[0]), [8617])
	CALL eosio_assert(((int_64)*(*($4 + [12]) + [8]) == (int_64)*($2)), [8643])
	*((($4 + [8]) + [32])) = [0]
	*($4 + [16]) = $1
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [8]) = *($0)
	CALL $14($4, ($4 + [8]), $5)
	if ( *($4 + [4]) ){ goto $label$1 }
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$2()), [9087])
	*(($0 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = ($4 + [8])
	CALL $2(($4 + [112]), (int_64)0, *($2))
	*($0 + [8]) = *((($4 + [112]) + [8]))
	*($0) = *($4 + [112])
	*($4 + [104]) = (($4 + [112]) + [16])
	*($4 + [100]) = ($4 + [112])
	*($4 + [96]) = ($4 + [112])
	CALL $15(($4 + [96]), $0)
	$5 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	$6 = CALL db_store_i64(*((($4 + [8]) + [8])), (int_64)3607749779137757184, $3, $5), ($4 + [112]), [16]
	*($0 + [20]) = $6)
	$2 = (($4 + [8]) + [16])
	if ( (uint_64)($5 <= *($2)) ){ goto $label$2 }
	*($2) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$2
	*($4 + [96]) = $0
	$5 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8
	*($4 + [112]) = $5)
	*($4 + [92]) = $6
	$7 = ($4 + [36])
	$2 = *($7)
	if ( ((uint_32)$2 >= (uint_32)*(($4 + [40]))) ){ goto $label$4 }
	*($2 + [8]) = $5
	*($2 + [16]) = $6
	*($4 + [96]) = [0]
	*($2) = $0
	*($7) = ($2 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $16(($4 + [32]), ($4 + [96]), ($4 + [112]), ($4 + [92]))
	
.LABEL $label$3
	$0 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($0 == 0) ){ goto $label$1 }
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $17((($4 + [8]) + [24]))
	CALL $8((($4 + [48]) + [24]))
	$global$0 = ($4 + [128])
}

int_32 .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [9505])
	$3 = CALL db_next_i64(*(*($0 + [4]) + [20]), ($1 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $23(*($0), $3)
	
.LABEL $label$1
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $24 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL require_auth($1)
	$4 = *($2)
	*((($3 + [48]) + [32])) = [0]
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	*($3 + [56]) = $4)
	*($3 + [64]) = (int_64)-1
	*($3 + [72]) = (int_64)0
	*($3 + [48]) = *($0)
	CALL $5(($3 + [8]), ($3 + [48]), $4)
	CALL eosio_assert(((int_32)*($3 + [12]) != (int_32)[0]), [8617])
	CALL eosio_assert(((int_64)*(*($3 + [12]) + [8]) == (int_64)*($2)), [8643])
	*((($3 + [8]) + [32])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	CALL $14($3, ($3 + [8]), $4)
	CALL eosio_assert(((int_32)*($3 + [4]) != (int_32)[0]), [8673])
	CALL eosio_assert((int_64)(*(*($3 + [4])) == 0), [8749])
	$1 = *($3)
	*($3 + [88]) = $1
	$0 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$0) != (int_32)[0]), [9471])
	CALL $25(($3 + [88]))
	CALL $26(($3 + [8]), $0)
	CALL $17((($3 + [8]) + [24]))
	CALL $8((($3 + [48]) + [24]))
	$global$0 = ($3 + [96])
}

void .FUNC $27 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = ($global$0 - [48])
	$global$0 = $5
	$6 = CALL has_auth($2)
	*((($5 + [32]) + [8])) = *(($3 + [8]))
	*((($5 + [16]) + [8])) = *(($4 + [8]))
	*($5 + [32]) = *($3)
	*($5 + [16]) = *($4)
	$3 = [0]
	
.LOOP $label$1:
	*(($4 + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[12]) ){ goto $label$1 }
	*(($5 + [8])) = *((($5 + [32]) + [8]))
	*($5) = *($5 + [32])
	CALL $28($0, $1, $2, ( $2 ? $1 : $6 ), $5, ($5 + [16]))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($5 + [24]))
	
.LABEL $label$2
	$global$0 = ($5 + [48])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9535])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [9580])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9630])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = (*($1 + [4]) - *($1))
	CALL $65($0, ($2 + [8]))
	$3 = *($1)
	$1 = (*($1 + [4]) - $3)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) >= (int_32)$1), [9138])
	CALL memcpy(*($0 + [4]), $3, $1)
	*($0 + [4]) = (*($0 + [4]) + $1)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = int_32((*($1 + [4]) - *($1)) >> [4])
	CALL $65($0, ($2 + [8]))
	$4 = *($1 + [4])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	$5 = *($0 + [4])
	$1 = ($0 + [4])
	
.LOOP $label$2:
	$6 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[7]), [9138])
	CALL memcpy(*($1), $3, [8])
	$5 = (*($1) + [8])
	*($1) = $5
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[7]), [9138])
	CALL memcpy(*($1), ($3 + [8]), [8])
	$5 = (*($1) + [8])
	*($1) = $5
	$3 = ($3 + [16])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($1)
	$5 = ($0 + [8])
	$1 = ($0 + [4])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$7 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $3) > (int_32)[0]), [9138])
	CALL memcpy(*($1), ($2 + [15]), [1])
	$3 = (*($1) + [1])
	*($1) = $3
	if ( $7 ){ goto $label$1 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	*($2 + [8]) = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	CALL $65($0, ($2 + [8]))
	$4 = ($3 & [1])
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : $4 )
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = *($1 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) >= (int_32)$3), [9138])
	CALL memcpy(*($0 + [4]), ( $5 ? ($1 + [1]) : $4 ), $3)
	*($0 + [4]) = (*($0 + [4]) + $3)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $69(CALL $68($0, ($1 + [16])), ($1 + [28]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9138])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9138])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0) = (*($0) + [16])
	$0 = CALL $70($0, ($1 + [16]))
	$3 = *($1 + [28])
	$2 = *(($1 + [32]))
	$1 = (($2 + *($0)) - $3)
	$4 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $1
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9138])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9138])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $15(*($1), ($0 + [16]))
	CALL $64(*($1), ($0 + [32]))
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = (*($0 + [4]) - $2)
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$1 }
	CALL $62($0, ($1 - $3))
	return 
	
.LABEL $label$1
	if ( ((uint_32)$3 <= (uint_32)$1) ){ goto $label$2 }
	*(($0 + [4])) = ($2 + $1)
	
.LABEL $label$2
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = (*($0 + [4]) - $2)
	$4 = (*($1 + [4]) - $3)
	*($1 + [4]) = $4
	if ( ((int_32)$3 <= (int_32)[0]) ){ goto $label$1 }
	CALL memcpy($4, $2, $3)
	$4 = *(($1 + [4]))
	
.LABEL $label$1
	$3 = *($0)
	*($0) = $4
	*(($4 = ($1 + [4]))) = $3
	$3 = ($0 + [4])
	$2 = *($3)
	*($3) = *($1 + [8])
	*($1 + [8]) = $2
	$3 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $3
	*($1) = *($4)
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$6 = ($4 - $5)
	$7 = ($6 + $1)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = ($0 + [8])
	$3 = ($3 - $5)
	if ( ((uint_32)$3 >= (uint_32)[1073741823]) ){ goto $label$5 }
	*(($2 + [24])) = $4
	$4 = [0]
	*($2 + [20]) = [0]
	$3 = ($3 << [1])
	$3 = ( $7 ? $3 : ($3 <= $7) )
	if ( $3 ){ goto $label$4 }
	$3 = [0]
	goto $label$3 
	
.LABEL $label$6
	$3 = ($0 + [4])
	
.LOOP $label$7:
	*($4) = [0]
	$4 = (*($3) + [1])
	*($3) = $4
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$5
	*(($2 + [24])) = $4
	*($2 + [20]) = [0]
	$3 = [2147483647]
	
.LABEL $label$4
	$4 = CALL _Znwj($3)
	
.LABEL $label$3
	*($2 + [8]) = $4
	*(($2 + [20])) = ($4 + $3)
	$4 = ($4 + $6)
	*($2 + [16]) = $4
	*($2 + [12]) = $4
	$3 = ($2 + [16])
	
.LOOP $label$8:
	*($4) = [0]
	$4 = (*($3) + [1])
	*($3) = $4
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	CALL $63($0, ($2 + [8]))
	$4 = *($2 + [12])
	$1 = ($2 + [16])
	if ( ((int_32)*($1) == (int_32)$4) ){ goto $label$9 }
	*($1) = $4
	
.LABEL $label$9
	$1 = *($2 + [8])
	if ( ($1 == 0) ){ goto $label$2 }
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $90($0)
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $87 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $98($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $93(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9748])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $93(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $98($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9082])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9082])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [9082])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [16]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $74(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $75($0, $9)
	CALL $76($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $90($0)
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = *($1)
	$2 = *($1 + [4])
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$1 = *($0)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$1 = (((($4 + [-16]) & [-16]) + $1) + [16])
	
.LABEL $label$2
	*($0) = $1
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$3 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9059])
	if ( ($4 <= [513]) ){ goto $label$6 }
	$2 = CALL $95($4)
	goto $label$5 
	
.LABEL $label$6
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$5
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = [0]
	*($5 + [24]) = $0
	CALL $72(($3 + [32]), $5)
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-4157503053760561152
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-4157503053760561152
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $73(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	
.LABEL $label$7
	if ( ($4 <= [513]) ){ goto $label$9 }
	CALL $98($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $76 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$1 = ($1 + [-24])
	*($3) = $1
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	return $0
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = [0]
	CALL $78($0, ($2 + [8]))
	CALL $60($1, *($2 + [8]))
	$3 = *($1)
	$1 = (*($1 + [4]) - $3)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) >= (uint_32)$1), [9082])
	CALL memcpy($3, *($0 + [4]), $1)
	*($0 + [4]) = (*($0 + [4]) + $1)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL _Znwj(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $88(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $88(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$2
	if ( ((*($1) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$3
	$global$0 = ($2 + [96])
}

int_32 .FUNC $36 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $95($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [96]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $46(($4 + [16]), ($4 + [96]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4)
	$3 = *($8)
	*((($4 + [96]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [80])
	*($4 + [32]) = $0
	*($4 + [96]) = $0
	$0 = *($4 + [64])
	*($4 + [96]) = *($4 + [72])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 ($4 + [96])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $98($2)
	
.LABEL $label$6
	$global$0 = ($4 + [112])
	return [1]
}

int_32 .FUNC $37 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $95($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [80])) = (int_64)0
	*(($4 + [96])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [88]) = (int_64)0
	$3 = [24]
	
.LOOP $label$4:
	*((($4 + [64]) + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[36]) ){ goto $label$4 }
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [128]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $38(($4 + [16]), ($4 + [128]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4)
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [16])
	CALL $39(($4 + [128]), ($4 + [64]))
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL $98($2)
	
.LABEL $label$5
	if ( ((*((($4 + [64]) + [24])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [96])))
	
.LABEL $label$6
	$global$0 = ($4 + [144])
	return [1]
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9743])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	*($1) = $4
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $95($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9748])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $95($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $32 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $95($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [96])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	$3 = [16]
	
.LOOP $label$4:
	*((($4 + [72]) + $3)) = [0]
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)[28]) ){ goto $label$4 }
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	CALL $40(($4 + [56]), ($4 + [72]))
	$3 = ($4 + [88])
	CALL $41(($4 + [56]), $3)
	*(($6 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($7 = (($4 + [112]) + [8]))) = *($6)
	*($4 + [112]) = *($4 + [8])
	$6 = *($7)
	*((($4 + [128]) + [8])) = $6
	*(($4 + [48])) = $6
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [24])
	CALL $42(($4 + [128]), ($4 + [72]))
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL $98($2)
	
.LABEL $label$5
	if ( ((*($3) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [96])))
	
.LABEL $label$6
	$global$0 = ($4 + [144])
	return [1]
}

int_32 .FUNC $33 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $95($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9082])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $98($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($2)
	
.LABEL $label$1
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)4929617502180212735) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-6533262907872903168) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)4516881727834030080) ){ goto $label$1 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [1]
	*($3 + [16]) = *($3 + [72])
	CALL $32($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$2 == (int_64)4929617502180212736) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)8516769789752901632) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$1 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [2]
	*($3) = *($3 + [88])
	CALL $33($1, $1, $3)
	goto $label$1 
	
.LABEL $label$5
	*($3 + [60]) = [0]
	*($3 + [56]) = [3]
	*($3 + [32]) = *($3 + [56])
	CALL $34($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [68]) = [0]
	*($3 + [64]) = [4]
	*($3 + [24]) = *($3 + [64])
	CALL $35($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [52]) = [0]
	*($3 + [48]) = [5]
	*($3 + [40]) = *($3 + [48])
	CALL $36($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [84]) = [0]
	*($3 + [80]) = [6]
	*($3 + [8]) = *($3 + [80])
	CALL $37($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $92([0])
	$global$0 = ($3 + [96])
}