(data (i32.const 8192) "prisale\00")
(data (i32.const 8200) "BETFTY\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8293) "EOS\00")
(data (i32.const 8297) "active\00")
(data (i32.const 8304) "eosio.token\00")
(data (i32.const 8316) "transfer\00")
(data (i32.const 8325) "eos token sent\00")
(data (i32.const 8340) "betfty\00")
(data (i32.const 8347) "betftymainac\00")
(data (i32.const 8360) "BETFTY token sent\00")
(data (i32.const 8378) "presale\00")
(data (i32.const 8386) "presale2\00")
(data (i32.const 8395) "presale3\00")
(data (i32.const 8404) "airdrop\00")
(data (i32.const 8412) "BETFTY airdrop token sent\00")
(data (i32.const 8438) "Invalid type ,you be scam\00")
(data (i32.const 8464) "string is too long to be a valid symbol_code\00")
(data (i32.const 8509) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8562) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8611) "invalid symbol name\00")
(data (i32.const 8631) "string is too long to be a valid name\00")
(data (i32.const 8669) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8736) "character is not in allowed character set for names\00")
(data (i32.const 8788) "write\00")
(data (i32.const 8794) "read\00")
(data (i32.const 8799) "get\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "require_recipient" (func $fimport$1 (param i64)))
(import "env" "prints" (func $fimport$2 (param i32)))
(import "env" "eosio_assert" (func $fimport$3 (param i32 i32)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$5 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$6 (result i32)))
(import "env" "read_action_data" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "abort" (func $fimport$8))
(import "env" "memset" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$11 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$14 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$15 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$16 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$18 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$19 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$20 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$21 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$22 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$23 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$26 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$28 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$29 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$30 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $8))
(export "_Znwj" (func $17))
(export "_ZdlPv" (func $19))
(export "_Znaj" (func $18))
(export "_ZdaPv" (func $20))
(export "_ZnwjSt11align_val_t" (func $21))
(export "_ZnajSt11align_val_t" (func $22))
(export "_ZdlPvSt11align_val_t" (func $23))
(export "_ZdaPvSt11align_val_t" (func $24))
(table $0 3 3 anyfunc)
(elem (i32.const 1) $1 $7)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17220))
(global $global$2 i32 (i32.const 17220))


void .FUNC $29 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $36($1)
	
.LABEL $label$2
	*(CALL $30()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $36(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $39($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $32(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $25 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $33 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $30 ()
{
	return [8808]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)5552071594240114688) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)5556467772872982528) ){ goto $label$1 }
	*($3 + [28]) = [0]
	*($3 + [24]) = [1]
	*($3) = *($3 + [24])
	CALL $9($1, $1, $3)
	goto $label$1 
	
.LABEL $label$2
	*($3 + [20]) = [0]
	*($3 + [16]) = [2]
	*($3 + [8]) = *($3 + [16])
	CALL $10($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $31([0])
	$global$0 = ($3 + [32])
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [88]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $36($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*(($4 + [80])) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [56]) = ($3 + $2)
	*($4 + [48]) = $3
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [8794])
	CALL memcpy(($4 + [64]), $3, [8])
	CALL eosio_assert(((int_32)($2 & [-4]) != (int_32)[8]), [8794])
	CALL memcpy((($4 + [64]) + [8]), ($3 + [8]), [4])
	*($4 + [52]) = ($3 + [12])
	CALL $11(($4 + [48]), (($4 + [64]) + [12]))
	*(($5 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$5 = *($5)
	*((($4 + [96]) + [8])) = $5
	*(($6 = (($4 + [112]) + [8]))) = $5
	$7 = *($4)
	*($4 + [112]) = $7
	*($4 + [96]) = $7
	$5 = *($6)
	*((($4 + [128]) + [8])) = $5
	*(($4 + [40])) = $5
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [88])
	*($4 + [128]) = ($4 + [16])
	CALL $12(($4 + [128]), ($4 + [64]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$7 }
	$3 = [1]
	if ( (*($4 + [76]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $39($3)
	$3 = [1]
	if ( ((*($4 + [76]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [84])))
	$global$0 = ($4 + [144])
	return $3
	
.LABEL $label$5
	$global$0 = ($4 + [144])
	return $3
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8788])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8788])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8788])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8788])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $15(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $7 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = CALL $33([8200])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8464])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [8199]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8509])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$6 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)2)
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)2
	
.LABEL $label$1
	CALL eosio_assert([1], [8562])
	$4 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$4 = $7
	$5 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$4 = $7
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $5 ){ goto $label$11 }
	$5 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	
.LABEL $label$7
	CALL eosio_assert($5, [8611])
	$4 = *($0)
	*($2 + [104]) = [8297]
	*($2 + [108]) = CALL $33([8297])
	*($2 + [16]) = *($2 + [104])
	*($2 + [96]) = *(CALL $2(($2 + [40]), ($2 + [16])))
	*($2 + [88]) = $4
	*($2 + [104]) = [8347]
	*($2 + [108]) = CALL $33([8347])
	*($2 + [8]) = *($2 + [104])
	$4 = *(CALL $2(($2 + [40]), ($2 + [8])))
	*($2 + [104]) = [8316]
	*($2 + [108]) = CALL $33([8316])
	*($2) = *($2 + [104])
	$7 = *(CALL $2(($2 + [40]), $2))
	$9 = *($0)
	*(($2 + [32])) = [0]
	*($2 + [24]) = (int_64)0
	$3 = CALL $33([8360])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$15 }
	*($2 + [24]) = ($3 << [1])
	$5 = (($2 + [24]) | [1])
	if ( $3 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($2 + [24]) = ($8 | [1])
	*($2 + [32]) = $5
	*($2 + [28]) = $3
	
.LABEL $label$14
	CALL memcpy($5, [8360], $3)
	
.LABEL $label$13
	*(($5 + $3)) = [0]
	*(($2 + [64])) = $6
	$3 = ($2 + [32])
	*(($5 = ($2 + [80]))) = *($3)
	*($3) = [0]
	*($2 + [48]) = $1
	*($2 + [40]) = $9
	*($2 + [56]) = (int_64)5000
	*($2 + [72]) = *($2 + [24])
	*($2 + [24]) = (int_64)0
	$3 = CALL $3(($2 + [104]), ($2 + [88]), $4, $7, ($2 + [40]))
	if ( ((*($2 + [72]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$16
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($2 + [32])))
	
.LABEL $label$17
	CALL $4(($2 + [40]), $3)
	$5 = *($2 + [40])
	CALL send_inline($5, (*($2 + [44]) - $5))
	$5 = *($2 + [40])
	if ( ($5 == 0) ){ goto $label$18 }
	*($2 + [44]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$18
	$5 = *($3 + [28])
	if ( ($5 == 0) ){ goto $label$19 }
	*(($3 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$19
	$5 = *($3 + [16])
	if ( ($5 == 0) ){ goto $label$20 }
	*(($3 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$20
	$global$0 = ($2 + [144])
	return (unreachable)
	
.LABEL $label$12
	CALL $25(($2 + [24]))
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $5($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8788])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8788])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $14(CALL $13($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $29($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8631])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8736])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8669])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8736])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $3 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $5($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $6(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	float_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$4 = ($global$0 - [384])
	$global$0 = $4
	CALL require_auth(*($0))
	CALL require_recipient($1)
	CALL require_recipient(*($0))
	$6 = *($3)
	$5 = CALL $33([8192])
	if ( ((int_32)$5 != (int_32)( *($3 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$29 }
	if ( (CALL $28($3, [0], [-1], [8192], $5) == 0) ){ goto $label$28 }
	
.LABEL $label$29
	$6 = *($3)
	$5 = ($3 + [4])
	$7 = CALL $33([8378])
	if ( ((int_32)$7 != (int_32)( *($5) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$30 }
	if ( (CALL $28($3, [0], [-1], [8378], $7) == 0) ){ goto $label$27 }
	
.LABEL $label$30
	$6 = *($3)
	$7 = CALL $33([8386])
	if ( ((int_32)$7 != (int_32)( *($5) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$31 }
	if ( (CALL $28($3, [0], [-1], [8386], $7) == 0) ){ goto $label$26 }
	
.LABEL $label$31
	$6 = *($3)
	$5 = ($3 + [4])
	$7 = CALL $33([8395])
	if ( ((int_32)$7 != (int_32)( *($5) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$32 }
	if ( (CALL $28($3, [0], [-1], [8395], $7) == 0) ){ goto $label$25 }
	
.LABEL $label$32
	$6 = *($3)
	$7 = CALL $33([8404])
	if ( ((int_32)$7 != (int_32)( *($5) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$33 }
	if ( (CALL $28($3, [0], [-1], [8404], $7) == 0) ){ goto $label$22 }
	
.LABEL $label$33
	CALL prints([8438])
	$global$0 = ($4 + [384])
	return (unreachable)
	
.LABEL $label$28
	$6 = ((int_32)$2 / (int_32)[1500])
	$8 = (CASTING int_64)(int_32 $2)
	$3 = CALL $33([8200])
	if ( ($3 <= [8]) ){ goto $label$24 }
	CALL eosio_assert([0], [8464])
	goto $label$23 
	
.LABEL $label$27
	$6 = ((int_32)$2 / (int_32)[1000])
	$8 = (CASTING int_64)(int_32 $2)
	$3 = CALL $33([8200])
	if ( ($3 <= [8]) ){ goto $label$21 }
	CALL eosio_assert([0], [8464])
	goto $label$20 
	
.LABEL $label$26
	$6 = ((int_32)$2 / (int_32)[500])
	$8 = (CASTING int_64)(int_32 $2)
	$3 = CALL $33([8200])
	if ( ($3 <= [8]) ){ goto $label$19 }
	CALL eosio_assert([0], [8464])
	goto $label$18 
	
.LABEL $label$25
	$6 = ((int_32)$2 / (int_32)[250])
	$8 = (CASTING int_64)(int_32 $2)
	$3 = CALL $33([8200])
	if ( ($3 <= [8]) ){ goto $label$17 }
	CALL eosio_assert([0], [8464])
	goto $label$16 
	
.LABEL $label$24
	if ( ($3 == 0) ){ goto $label$13 }
	
.LABEL $label$23
	$9 = (int_64)0
	
.LOOP $label$34:
	$2 = *(($3 + [8199]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$35 }
	CALL eosio_assert([0], [8509])
	
.LABEL $label$35
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$34 }
	$10 = ((int_64)$9 << (int_64)8)
	goto $label$4 
	
.LABEL $label$22
	$8 = (CASTING int_64)(int_32 $2)
	$3 = CALL $33([8200])
	if ( ($3 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [8464])
	goto $label$14 
	
.LABEL $label$21
	if ( ($3 == 0) ){ goto $label$12 }
	
.LABEL $label$20
	$9 = (int_64)0
	
.LOOP $label$36:
	$2 = *(($3 + [8199]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$37 }
	CALL eosio_assert([0], [8509])
	
.LABEL $label$37
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$36 }
	$10 = ((int_64)$9 << (int_64)8)
	goto $label$5 
	
.LABEL $label$19
	if ( ($3 == 0) ){ goto $label$11 }
	
.LABEL $label$18
	$9 = (int_64)0
	
.LOOP $label$38:
	$2 = *(($3 + [8199]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$39 }
	CALL eosio_assert([0], [8509])
	
.LABEL $label$39
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$38 }
	$10 = ((int_64)$9 << (int_64)8)
	goto $label$6 
	
.LABEL $label$17
	if ( ($3 == 0) ){ goto $label$10 }
	
.LABEL $label$16
	$9 = (int_64)0
	
.LOOP $label$40:
	$2 = *(($3 + [8199]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$41 }
	CALL eosio_assert([0], [8509])
	
.LABEL $label$41
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$40 }
	$10 = ((int_64)$9 << (int_64)8)
	goto $label$7 
	
.LABEL $label$15
	if ( ($3 == 0) ){ goto $label$9 }
	
.LABEL $label$14
	$9 = (int_64)0
	
.LOOP $label$42:
	$2 = *(($3 + [8199]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$43 }
	CALL eosio_assert([0], [8509])
	
.LABEL $label$43
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$42 }
	$13 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)2)
	goto $label$8 
	
.LABEL $label$13
	$10 = (int_64)0
	goto $label$4 
	
.LABEL $label$12
	$10 = (int_64)0
	goto $label$5 
	
.LABEL $label$11
	$10 = (int_64)0
	goto $label$6 
	
.LABEL $label$10
	$10 = (int_64)0
	goto $label$7 
	
.LABEL $label$9
	$13 = (int_64)2
	
.LABEL $label$8
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8562])
	$9 = (uint_64)$13 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$46:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$45 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$47 }
	$9 = $10
	$2 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$46 }
	goto $label$44 
	
.LABEL $label$47
	$9 = $10
	
.LOOP $label$48:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$45 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$2 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $2 ){ goto $label$48 }
	$2 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$46 }
	goto $label$44 
	
.LABEL $label$45
	$2 = [0]
	
.LABEL $label$44
	CALL eosio_assert($2, [8611])
	$9 = *($0)
	*($4 + [344]) = [8297]
	*($4 + [348]) = CALL $33([8297])
	*($4 + [216]) = *($4 + [344])
	*($4 + [264]) = *(CALL $2(($4 + [296]), ($4 + [216])))
	*($4 + [256]) = $9
	*($4 + [344]) = [8347]
	*($4 + [348]) = CALL $33([8347])
	*($4 + [208]) = *($4 + [344])
	$9 = *(CALL $2(($4 + [296]), ($4 + [208])))
	*($4 + [344]) = [8316]
	*($4 + [348]) = CALL $33([8316])
	*($4 + [200]) = *($4 + [344])
	$10 = *(CALL $2(($4 + [296]), ($4 + [200])))
	$12 = *($0)
	*(($4 + [248])) = [0]
	*($4 + [240]) = (int_64)0
	$3 = CALL $33([8412])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$49 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$52 }
	*($4 + [240]) = ($3 << [1])
	$2 = (($4 + [240]) | [1])
	if ( $3 ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	$0 = (($3 + [16]) & [-16])
	$2 = CALL _Znwj($0)
	*($4 + [240]) = ($0 | [1])
	*($4 + [248]) = $2
	*($4 + [244]) = $3
	
.LABEL $label$51
	CALL memcpy($2, [8412], $3)
	
.LABEL $label$50
	*(($2 + $3)) = [0]
	*(($4 + [320])) = $13
	$3 = ($4 + [248])
	*(($2 = ($4 + [336]))) = *($3)
	*($3) = [0]
	*($4 + [304]) = $1
	*($4 + [296]) = $12
	*($4 + [312]) = $8
	*($4 + [328]) = *($4 + [240])
	*($4 + [240]) = (int_64)0
	$3 = CALL $3(($4 + [344]), ($4 + [256]), $9, $10, ($4 + [296]))
	if ( ((*($4 + [328]) & [1]) == 0) ){ goto $label$53 }
	CALL _ZdlPv(*($2))
	
.LABEL $label$53
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$54 }
	CALL _ZdlPv(*(($4 + [248])))
	
.LABEL $label$54
	CALL $4(($4 + [296]), $3)
	$2 = *($4 + [296])
	CALL send_inline($2, (*($4 + [300]) - $2))
	$2 = *($4 + [296])
	if ( ($2 == 0) ){ goto $label$55 }
	*($4 + [300]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$55
	$2 = *($3 + [28])
	if ( ($2 == 0) ){ goto $label$56 }
	*(($3 + [32])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$56
	$2 = *($3 + [16])
	if ( ($2 == 0) ){ goto $label$3 }
	*(($3 + [20])) = $2
	CALL _ZdlPv($2)
	goto $label$3 
	
.LABEL $label$49
	CALL $25(($4 + [240]))
	
.LABEL $label$7
	$11 = (CASTING float_32)(int_32 $6)
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8562])
	$9 = (uint_64)$10 >> (uint_64)(int_64)8)
	$12 = ((int_64)$10 | (int_64)2)
	$3 = [0]
	
.LOOP $label$59:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$58 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$60 }
	$9 = $10
	$2 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$60
	$9 = $10
	
.LOOP $label$61:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$58 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$2 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $2 ){ goto $label$61 }
	$2 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$58
	$2 = [0]
	
.LABEL $label$57
	CALL eosio_assert($2, [8611])
	$3 = CALL $33([8293])
	$2 = ($3 <= [8])
	if ( ((float_32)(float_32)|$11| < (float_32)(float_32)9223372036854775808) ){ goto $label$66 }
	$13 = (int_64)-9223372036854775808
	if ( ($2 == 0) ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$66
	$13 = (Rounds 0)($11)
	if ( $2 ){ goto $label$64 }
	
.LABEL $label$65
	CALL eosio_assert([0], [8464])
	goto $label$63 
	
.LABEL $label$64
	if ( $3 ){ goto $label$63 }
	$10 = (int_64)0
	goto $label$62 
	
.LABEL $label$63
	$9 = (int_64)0
	
.LOOP $label$67:
	$2 = *(($3 + [8292]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$68 }
	CALL eosio_assert([0], [8509])
	
.LABEL $label$68
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$67 }
	$10 = ((int_64)$9 << (int_64)8)
	
.LABEL $label$62
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8562])
	$9 = (uint_64)$10 >> (uint_64)(int_64)8)
	$14 = ((int_64)$10 | (int_64)4)
	$3 = [0]
	
.LOOP $label$71:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$70 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$72 }
	$9 = $10
	$2 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$71 }
	goto $label$69 
	
.LABEL $label$72
	$9 = $10
	
.LOOP $label$73:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$70 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$2 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $2 ){ goto $label$73 }
	$2 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$71 }
	goto $label$69 
	
.LABEL $label$70
	$2 = [0]
	
.LABEL $label$69
	CALL eosio_assert($2, [8611])
	*($4 + [344]) = [8340]
	*($4 + [348]) = CALL $33([8340])
	*($4 + [192]) = *($4 + [344])
	*($4 + [264]) = *(CALL $2(($4 + [296]), ($4 + [192])))
	*($4 + [256]) = $1
	*($4 + [344]) = [8304]
	*($4 + [348]) = CALL $33([8304])
	*($4 + [184]) = *($4 + [344])
	$9 = *(CALL $2(($4 + [296]), ($4 + [184])))
	*($4 + [344]) = [8316]
	*($4 + [348]) = CALL $33([8316])
	*($4 + [176]) = *($4 + [344])
	$10 = *(CALL $2(($4 + [296]), ($4 + [176])))
	$15 = *($0)
	*(($4 + [248])) = [0]
	*($4 + [240]) = (int_64)0
	$3 = CALL $33([8325])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$75 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$78 }
	*($4 + [240]) = ($3 << [1])
	$2 = (($4 + [240]) | [1])
	if ( $3 ){ goto $label$77 }
	goto $label$76 
	
.LABEL $label$78
	$6 = (($3 + [16]) & [-16])
	$2 = CALL _Znwj($6)
	*($4 + [240]) = ($6 | [1])
	*($4 + [248]) = $2
	*($4 + [244]) = $3
	
.LABEL $label$77
	CALL memcpy($2, [8325], $3)
	
.LABEL $label$76
	*(($2 + $3)) = [0]
	*(($4 + [320])) = $14
	$3 = ($4 + [248])
	*(($6 = ($4 + [336]))) = *($3)
	*($3) = [0]
	*($4 + [304]) = $15
	*($4 + [296]) = $1
	*($4 + [312]) = $13
	*($4 + [328]) = *($4 + [240])
	*($4 + [240]) = (int_64)0
	$2 = CALL $3(($4 + [344]), ($4 + [256]), $9, $10, ($4 + [296]))
	if ( ((*($4 + [328]) & [1]) == 0) ){ goto $label$79 }
	CALL _ZdlPv(*($6))
	
.LABEL $label$79
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$80 }
	CALL _ZdlPv(*(($4 + [248])))
	
.LABEL $label$80
	CALL $4(($4 + [296]), $2)
	$3 = *($4 + [296])
	CALL send_inline($3, (*($4 + [300]) - $3))
	$3 = *($4 + [296])
	if ( ($3 == 0) ){ goto $label$81 }
	*($4 + [300]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$81
	$9 = *($0)
	*($4 + [256]) = [8297]
	*($4 + [260]) = CALL $33([8297])
	*($4 + [168]) = *($4 + [256])
	*($4 + [248]) = *(CALL $2(($4 + [296]), ($4 + [168])))
	*($4 + [240]) = $9
	*($4 + [256]) = [8347]
	*($4 + [260]) = CALL $33([8347])
	*($4 + [160]) = *($4 + [256])
	$9 = *(CALL $2(($4 + [296]), ($4 + [160])))
	*($4 + [256]) = [8316]
	*($4 + [260]) = CALL $33([8316])
	*($4 + [152]) = *($4 + [256])
	$10 = *(CALL $2(($4 + [296]), ($4 + [152])))
	$13 = *($0)
	*(($4 + [232])) = [0]
	*($4 + [224]) = (int_64)0
	$3 = CALL $33([8360])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$74 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$84 }
	*($4 + [224]) = ($3 << [1])
	$0 = (($4 + [224]) | [1])
	if ( $3 ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$84
	$6 = (($3 + [16]) & [-16])
	$0 = CALL _Znwj($6)
	*($4 + [224]) = ($6 | [1])
	*($4 + [232]) = $0
	*($4 + [228]) = $3
	
.LABEL $label$83
	CALL memcpy($0, [8360], $3)
	
.LABEL $label$82
	*(($0 + $3)) = [0]
	*(($4 + [320])) = $12
	$3 = ($4 + [232])
	*(($0 = ($4 + [336]))) = *($3)
	*($3) = [0]
	*($4 + [304]) = $1
	*($4 + [296]) = $13
	*($4 + [312]) = $8
	*($4 + [328]) = *($4 + [224])
	*($4 + [224]) = (int_64)0
	$3 = CALL $3(($4 + [256]), ($4 + [240]), $9, $10, ($4 + [296]))
	if ( ((*($4 + [328]) & [1]) == 0) ){ goto $label$85 }
	CALL _ZdlPv(*($0))
	
.LABEL $label$85
	if ( ((*($4 + [224]) & [1]) == 0) ){ goto $label$86 }
	CALL _ZdlPv(*(($4 + [232])))
	
.LABEL $label$86
	CALL $4(($4 + [296]), $3)
	$0 = *($4 + [296])
	CALL send_inline($0, (*($4 + [300]) - $0))
	$0 = *($4 + [296])
	if ( ($0 == 0) ){ goto $label$87 }
	*($4 + [300]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$87
	$0 = *($3 + [28])
	if ( ($0 == 0) ){ goto $label$88 }
	*(($3 + [32])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$88
	$0 = *($3 + [16])
	if ( ($0 == 0) ){ goto $label$89 }
	*(($3 + [20])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$89
	$3 = *($2 + [28])
	if ( ($3 == 0) ){ goto $label$90 }
	*(($2 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$90
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$3 }
	*(($2 + [20])) = $3
	CALL _ZdlPv($3)
	$global$0 = ($4 + [384])
	return (unreachable)
	
.LABEL $label$75
	CALL $25(($4 + [240]))
	
.LABEL $label$74
	CALL $25(($4 + [224]))
	
.LABEL $label$6
	$11 = (CASTING float_32)(int_32 $6)
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8562])
	$9 = (uint_64)$10 >> (uint_64)(int_64)8)
	$12 = ((int_64)$10 | (int_64)2)
	$3 = [0]
	
.LOOP $label$93:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$92 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$94 }
	$9 = $10
	$2 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$93 }
	goto $label$91 
	
.LABEL $label$94
	$9 = $10
	
.LOOP $label$95:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$92 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$2 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $2 ){ goto $label$95 }
	$2 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$93 }
	goto $label$91 
	
.LABEL $label$92
	$2 = [0]
	
.LABEL $label$91
	CALL eosio_assert($2, [8611])
	$3 = CALL $33([8293])
	$2 = ($3 <= [8])
	if ( ((float_32)(float_32)|$11| < (float_32)(float_32)9223372036854775808) ){ goto $label$100 }
	$13 = (int_64)-9223372036854775808
	if ( ($2 == 0) ){ goto $label$99 }
	goto $label$98 
	
.LABEL $label$100
	$13 = (Rounds 0)($11)
	if ( $2 ){ goto $label$98 }
	
.LABEL $label$99
	CALL eosio_assert([0], [8464])
	goto $label$97 
	
.LABEL $label$98
	if ( $3 ){ goto $label$97 }
	$10 = (int_64)0
	goto $label$96 
	
.LABEL $label$97
	$9 = (int_64)0
	
.LOOP $label$101:
	$2 = *(($3 + [8292]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$102 }
	CALL eosio_assert([0], [8509])
	
.LABEL $label$102
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$101 }
	$10 = ((int_64)$9 << (int_64)8)
	
.LABEL $label$96
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8562])
	$9 = (uint_64)$10 >> (uint_64)(int_64)8)
	$14 = ((int_64)$10 | (int_64)4)
	$3 = [0]
	
.LOOP $label$105:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$104 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$106 }
	$9 = $10
	$2 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$105 }
	goto $label$103 
	
.LABEL $label$106
	$9 = $10
	
.LOOP $label$107:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$104 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$2 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $2 ){ goto $label$107 }
	$2 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$105 }
	goto $label$103 
	
.LABEL $label$104
	$2 = [0]
	
.LABEL $label$103
	CALL eosio_assert($2, [8611])
	*($4 + [344]) = [8297]
	*($4 + [348]) = CALL $33([8297])
	*($4 + [144]) = *($4 + [344])
	*($4 + [264]) = *(CALL $2(($4 + [296]), ($4 + [144])))
	*($4 + [256]) = $1
	*($4 + [344]) = [8304]
	*($4 + [348]) = CALL $33([8304])
	*($4 + [136]) = *($4 + [344])
	$9 = *(CALL $2(($4 + [296]), ($4 + [136])))
	*($4 + [344]) = [8316]
	*($4 + [348]) = CALL $33([8316])
	*($4 + [128]) = *($4 + [344])
	$10 = *(CALL $2(($4 + [296]), ($4 + [128])))
	$15 = *($0)
	*(($4 + [248])) = [0]
	*($4 + [240]) = (int_64)0
	$3 = CALL $33([8325])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$109 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$112 }
	*($4 + [240]) = ($3 << [1])
	$2 = (($4 + [240]) | [1])
	if ( $3 ){ goto $label$111 }
	goto $label$110 
	
.LABEL $label$112
	$6 = (($3 + [16]) & [-16])
	$2 = CALL _Znwj($6)
	*($4 + [240]) = ($6 | [1])
	*($4 + [248]) = $2
	*($4 + [244]) = $3
	
.LABEL $label$111
	CALL memcpy($2, [8325], $3)
	
.LABEL $label$110
	*(($2 + $3)) = [0]
	*(($4 + [320])) = $14
	$3 = ($4 + [248])
	*(($6 = ($4 + [336]))) = *($3)
	*($3) = [0]
	*($4 + [304]) = $15
	*($4 + [296]) = $1
	*($4 + [312]) = $13
	*($4 + [328]) = *($4 + [240])
	*($4 + [240]) = (int_64)0
	$2 = CALL $3(($4 + [344]), ($4 + [256]), $9, $10, ($4 + [296]))
	if ( ((*($4 + [328]) & [1]) == 0) ){ goto $label$113 }
	CALL _ZdlPv(*($6))
	
.LABEL $label$113
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$114 }
	CALL _ZdlPv(*(($4 + [248])))
	
.LABEL $label$114
	CALL $4(($4 + [296]), $2)
	$3 = *($4 + [296])
	CALL send_inline($3, (*($4 + [300]) - $3))
	$3 = *($4 + [296])
	if ( ($3 == 0) ){ goto $label$115 }
	*($4 + [300]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$115
	$9 = *($0)
	*($4 + [256]) = [8297]
	*($4 + [260]) = CALL $33([8297])
	*($4 + [120]) = *($4 + [256])
	*($4 + [248]) = *(CALL $2(($4 + [296]), ($4 + [120])))
	*($4 + [240]) = $9
	*($4 + [256]) = [8347]
	*($4 + [260]) = CALL $33([8347])
	*($4 + [112]) = *($4 + [256])
	$9 = *(CALL $2(($4 + [296]), ($4 + [112])))
	*($4 + [256]) = [8316]
	*($4 + [260]) = CALL $33([8316])
	*($4 + [104]) = *($4 + [256])
	$10 = *(CALL $2(($4 + [296]), ($4 + [104])))
	$13 = *($0)
	*(($4 + [232])) = [0]
	*($4 + [224]) = (int_64)0
	$3 = CALL $33([8360])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$108 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$118 }
	*($4 + [224]) = ($3 << [1])
	$0 = (($4 + [224]) | [1])
	if ( $3 ){ goto $label$117 }
	goto $label$116 
	
.LABEL $label$118
	$6 = (($3 + [16]) & [-16])
	$0 = CALL _Znwj($6)
	*($4 + [224]) = ($6 | [1])
	*($4 + [232]) = $0
	*($4 + [228]) = $3
	
.LABEL $label$117
	CALL memcpy($0, [8360], $3)
	
.LABEL $label$116
	*(($0 + $3)) = [0]
	*(($4 + [320])) = $12
	$3 = ($4 + [232])
	*(($0 = ($4 + [336]))) = *($3)
	*($3) = [0]
	*($4 + [304]) = $1
	*($4 + [296]) = $13
	*($4 + [312]) = $8
	*($4 + [328]) = *($4 + [224])
	*($4 + [224]) = (int_64)0
	$3 = CALL $3(($4 + [256]), ($4 + [240]), $9, $10, ($4 + [296]))
	if ( ((*($4 + [328]) & [1]) == 0) ){ goto $label$119 }
	CALL _ZdlPv(*($0))
	
.LABEL $label$119
	if ( ((*($4 + [224]) & [1]) == 0) ){ goto $label$120 }
	CALL _ZdlPv(*(($4 + [232])))
	
.LABEL $label$120
	CALL $4(($4 + [296]), $3)
	$0 = *($4 + [296])
	CALL send_inline($0, (*($4 + [300]) - $0))
	$0 = *($4 + [296])
	if ( ($0 == 0) ){ goto $label$121 }
	*($4 + [300]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$121
	$0 = *($3 + [28])
	if ( ($0 == 0) ){ goto $label$122 }
	*(($3 + [32])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$122
	$0 = *($3 + [16])
	if ( ($0 == 0) ){ goto $label$123 }
	*(($3 + [20])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$123
	$3 = *($2 + [28])
	if ( ($3 == 0) ){ goto $label$124 }
	*(($2 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$124
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$3 }
	*(($2 + [20])) = $3
	CALL _ZdlPv($3)
	$global$0 = ($4 + [384])
	return (unreachable)
	
.LABEL $label$109
	CALL $25(($4 + [240]))
	
.LABEL $label$108
	CALL $25(($4 + [224]))
	
.LABEL $label$5
	$11 = (CASTING float_32)(int_32 $6)
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8562])
	$9 = (uint_64)$10 >> (uint_64)(int_64)8)
	$12 = ((int_64)$10 | (int_64)2)
	$3 = [0]
	
.LOOP $label$127:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$126 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$128 }
	$9 = $10
	$2 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$127 }
	goto $label$125 
	
.LABEL $label$128
	$9 = $10
	
.LOOP $label$129:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$126 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$2 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $2 ){ goto $label$129 }
	$2 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$127 }
	goto $label$125 
	
.LABEL $label$126
	$2 = [0]
	
.LABEL $label$125
	CALL eosio_assert($2, [8611])
	$3 = CALL $33([8293])
	$2 = ($3 <= [8])
	if ( ((float_32)(float_32)|$11| < (float_32)(float_32)9223372036854775808) ){ goto $label$134 }
	$13 = (int_64)-9223372036854775808
	if ( ($2 == 0) ){ goto $label$133 }
	goto $label$132 
	
.LABEL $label$134
	$13 = (Rounds 0)($11)
	if ( $2 ){ goto $label$132 }
	
.LABEL $label$133
	CALL eosio_assert([0], [8464])
	goto $label$131 
	
.LABEL $label$132
	if ( $3 ){ goto $label$131 }
	$10 = (int_64)0
	goto $label$130 
	
.LABEL $label$131
	$9 = (int_64)0
	
.LOOP $label$135:
	$2 = *(($3 + [8292]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$136 }
	CALL eosio_assert([0], [8509])
	
.LABEL $label$136
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$135 }
	$10 = ((int_64)$9 << (int_64)8)
	
.LABEL $label$130
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8562])
	$9 = (uint_64)$10 >> (uint_64)(int_64)8)
	$14 = ((int_64)$10 | (int_64)4)
	$3 = [0]
	
.LOOP $label$139:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$138 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$140 }
	$9 = $10
	$2 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$139 }
	goto $label$137 
	
.LABEL $label$140
	$9 = $10
	
.LOOP $label$141:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$138 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$2 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $2 ){ goto $label$141 }
	$2 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$139 }
	goto $label$137 
	
.LABEL $label$138
	$2 = [0]
	
.LABEL $label$137
	CALL eosio_assert($2, [8611])
	*($4 + [344]) = [8297]
	*($4 + [348]) = CALL $33([8297])
	*($4 + [96]) = *($4 + [344])
	*($4 + [264]) = *(CALL $2(($4 + [296]), ($4 + [96])))
	*($4 + [256]) = $1
	*($4 + [344]) = [8304]
	*($4 + [348]) = CALL $33([8304])
	*($4 + [88]) = *($4 + [344])
	$9 = *(CALL $2(($4 + [296]), ($4 + [88])))
	*($4 + [344]) = [8316]
	*($4 + [348]) = CALL $33([8316])
	*($4 + [80]) = *($4 + [344])
	$10 = *(CALL $2(($4 + [296]), ($4 + [80])))
	$15 = *($0)
	*(($4 + [248])) = [0]
	*($4 + [240]) = (int_64)0
	$3 = CALL $33([8325])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$143 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$146 }
	*($4 + [240]) = ($3 << [1])
	$2 = (($4 + [240]) | [1])
	if ( $3 ){ goto $label$145 }
	goto $label$144 
	
.LABEL $label$146
	$6 = (($3 + [16]) & [-16])
	$2 = CALL _Znwj($6)
	*($4 + [240]) = ($6 | [1])
	*($4 + [248]) = $2
	*($4 + [244]) = $3
	
.LABEL $label$145
	CALL memcpy($2, [8325], $3)
	
.LABEL $label$144
	*(($2 + $3)) = [0]
	*(($4 + [320])) = $14
	$3 = ($4 + [248])
	*(($6 = ($4 + [336]))) = *($3)
	*($3) = [0]
	*($4 + [304]) = $15
	*($4 + [296]) = $1
	*($4 + [312]) = $13
	*($4 + [328]) = *($4 + [240])
	*($4 + [240]) = (int_64)0
	$2 = CALL $3(($4 + [344]), ($4 + [256]), $9, $10, ($4 + [296]))
	if ( ((*($4 + [328]) & [1]) == 0) ){ goto $label$147 }
	CALL _ZdlPv(*($6))
	
.LABEL $label$147
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$148 }
	CALL _ZdlPv(*(($4 + [248])))
	
.LABEL $label$148
	CALL $4(($4 + [296]), $2)
	$3 = *($4 + [296])
	CALL send_inline($3, (*($4 + [300]) - $3))
	$3 = *($4 + [296])
	if ( ($3 == 0) ){ goto $label$149 }
	*($4 + [300]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$149
	$9 = *($0)
	*($4 + [256]) = [8297]
	*($4 + [260]) = CALL $33([8297])
	*($4 + [72]) = *($4 + [256])
	*($4 + [248]) = *(CALL $2(($4 + [296]), ($4 + [72])))
	*($4 + [240]) = $9
	*($4 + [256]) = [8347]
	*($4 + [260]) = CALL $33([8347])
	*($4 + [64]) = *($4 + [256])
	$9 = *(CALL $2(($4 + [296]), ($4 + [64])))
	*($4 + [256]) = [8316]
	*($4 + [260]) = CALL $33([8316])
	*($4 + [56]) = *($4 + [256])
	$10 = *(CALL $2(($4 + [296]), ($4 + [56])))
	$13 = *($0)
	*(($4 + [232])) = [0]
	*($4 + [224]) = (int_64)0
	$3 = CALL $33([8360])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$142 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$152 }
	*($4 + [224]) = ($3 << [1])
	$0 = (($4 + [224]) | [1])
	if ( $3 ){ goto $label$151 }
	goto $label$150 
	
.LABEL $label$152
	$6 = (($3 + [16]) & [-16])
	$0 = CALL _Znwj($6)
	*($4 + [224]) = ($6 | [1])
	*($4 + [232]) = $0
	*($4 + [228]) = $3
	
.LABEL $label$151
	CALL memcpy($0, [8360], $3)
	
.LABEL $label$150
	*(($0 + $3)) = [0]
	*(($4 + [320])) = $12
	$3 = ($4 + [232])
	*(($0 = ($4 + [336]))) = *($3)
	*($3) = [0]
	*($4 + [304]) = $1
	*($4 + [296]) = $13
	*($4 + [312]) = $8
	*($4 + [328]) = *($4 + [224])
	*($4 + [224]) = (int_64)0
	$3 = CALL $3(($4 + [256]), ($4 + [240]), $9, $10, ($4 + [296]))
	if ( ((*($4 + [328]) & [1]) == 0) ){ goto $label$153 }
	CALL _ZdlPv(*($0))
	
.LABEL $label$153
	if ( ((*($4 + [224]) & [1]) == 0) ){ goto $label$154 }
	CALL _ZdlPv(*(($4 + [232])))
	
.LABEL $label$154
	CALL $4(($4 + [296]), $3)
	$0 = *($4 + [296])
	CALL send_inline($0, (*($4 + [300]) - $0))
	$0 = *($4 + [296])
	if ( ($0 == 0) ){ goto $label$155 }
	*($4 + [300]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$155
	$0 = *($3 + [28])
	if ( ($0 == 0) ){ goto $label$156 }
	*(($3 + [32])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$156
	$0 = *($3 + [16])
	if ( ($0 == 0) ){ goto $label$157 }
	*(($3 + [20])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$157
	$3 = *($2 + [28])
	if ( ($3 == 0) ){ goto $label$158 }
	*(($2 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$158
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$3 }
	*(($2 + [20])) = $3
	CALL _ZdlPv($3)
	$global$0 = ($4 + [384])
	return (unreachable)
	
.LABEL $label$143
	CALL $25(($4 + [240]))
	
.LABEL $label$142
	CALL $25(($4 + [224]))
	
.LABEL $label$4
	$11 = (CASTING float_32)(int_32 $6)
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8562])
	$9 = (uint_64)$10 >> (uint_64)(int_64)8)
	$12 = ((int_64)$10 | (int_64)2)
	$3 = [0]
	
.LOOP $label$161:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$160 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$162 }
	$9 = $10
	$2 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$161 }
	goto $label$159 
	
.LABEL $label$162
	$9 = $10
	
.LOOP $label$163:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$160 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$2 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $2 ){ goto $label$163 }
	$2 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$161 }
	goto $label$159 
	
.LABEL $label$160
	$2 = [0]
	
.LABEL $label$159
	CALL eosio_assert($2, [8611])
	$3 = CALL $33([8293])
	$2 = ($3 <= [8])
	if ( ((float_32)(float_32)|$11| < (float_32)(float_32)9223372036854775808) ){ goto $label$168 }
	$13 = (int_64)-9223372036854775808
	if ( ($2 == 0) ){ goto $label$167 }
	goto $label$166 
	
.LABEL $label$168
	$13 = (Rounds 0)($11)
	if ( $2 ){ goto $label$166 }
	
.LABEL $label$167
	CALL eosio_assert([0], [8464])
	goto $label$165 
	
.LABEL $label$166
	if ( $3 ){ goto $label$165 }
	$10 = (int_64)0
	goto $label$164 
	
.LABEL $label$165
	$9 = (int_64)0
	
.LOOP $label$169:
	$2 = *(($3 + [8292]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$170 }
	CALL eosio_assert([0], [8509])
	
.LABEL $label$170
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$169 }
	$10 = ((int_64)$9 << (int_64)8)
	
.LABEL $label$164
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8562])
	$9 = (uint_64)$10 >> (uint_64)(int_64)8)
	$14 = ((int_64)$10 | (int_64)4)
	$3 = [0]
	
.LOOP $label$173:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$172 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$174 }
	$9 = $10
	$2 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$173 }
	goto $label$171 
	
.LABEL $label$174
	$9 = $10
	
.LOOP $label$175:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$172 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$2 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $2 ){ goto $label$175 }
	$2 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$173 }
	goto $label$171 
	
.LABEL $label$172
	$2 = [0]
	
.LABEL $label$171
	CALL eosio_assert($2, [8611])
	*($4 + [344]) = [8297]
	*($4 + [348]) = CALL $33([8297])
	*($4 + [48]) = *($4 + [344])
	*($4 + [264]) = *(CALL $2(($4 + [296]), ($4 + [48])))
	*($4 + [256]) = $1
	*($4 + [344]) = [8304]
	*($4 + [348]) = CALL $33([8304])
	*($4 + [40]) = *($4 + [344])
	$9 = *(CALL $2(($4 + [296]), ($4 + [40])))
	*($4 + [344]) = [8316]
	*($4 + [348]) = CALL $33([8316])
	*($4 + [32]) = *($4 + [344])
	$10 = *(CALL $2(($4 + [296]), ($4 + [32])))
	$15 = *($0)
	*(($4 + [248])) = [0]
	*($4 + [240]) = (int_64)0
	$3 = CALL $33([8325])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$178 }
	*($4 + [240]) = ($3 << [1])
	$2 = (($4 + [240]) | [1])
	if ( $3 ){ goto $label$177 }
	goto $label$176 
	
.LABEL $label$178
	$6 = (($3 + [16]) & [-16])
	$2 = CALL _Znwj($6)
	*($4 + [240]) = ($6 | [1])
	*($4 + [248]) = $2
	*($4 + [244]) = $3
	
.LABEL $label$177
	CALL memcpy($2, [8325], $3)
	
.LABEL $label$176
	*(($2 + $3)) = [0]
	*(($4 + [320])) = $14
	$3 = ($4 + [248])
	*(($6 = ($4 + [336]))) = *($3)
	*($3) = [0]
	*($4 + [304]) = $15
	*($4 + [296]) = $1
	*($4 + [312]) = $13
	*($4 + [328]) = *($4 + [240])
	*($4 + [240]) = (int_64)0
	$2 = CALL $3(($4 + [344]), ($4 + [256]), $9, $10, ($4 + [296]))
	if ( ((*($4 + [328]) & [1]) == 0) ){ goto $label$179 }
	CALL _ZdlPv(*($6))
	
.LABEL $label$179
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$180 }
	CALL _ZdlPv(*(($4 + [248])))
	
.LABEL $label$180
	CALL $4(($4 + [296]), $2)
	$3 = *($4 + [296])
	CALL send_inline($3, (*($4 + [300]) - $3))
	$3 = *($4 + [296])
	if ( ($3 == 0) ){ goto $label$181 }
	*($4 + [300]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$181
	$9 = *($0)
	*($4 + [256]) = [8340]
	*($4 + [260]) = CALL $33([8340])
	*($4 + [24]) = *($4 + [256])
	*($4 + [248]) = *(CALL $2(($4 + [296]), ($4 + [24])))
	*($4 + [240]) = $9
	*($4 + [256]) = [8347]
	*($4 + [260]) = CALL $33([8347])
	*($4 + [16]) = *($4 + [256])
	$9 = *(CALL $2(($4 + [296]), ($4 + [16])))
	*($4 + [256]) = [8316]
	*($4 + [260]) = CALL $33([8316])
	*($4 + [8]) = *($4 + [256])
	$10 = *(CALL $2(($4 + [296]), ($4 + [8])))
	$13 = *($0)
	*(($4 + [232])) = [0]
	*($4 + [224]) = (int_64)0
	$3 = CALL $33([8360])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$184 }
	*($4 + [224]) = ($3 << [1])
	$0 = (($4 + [224]) | [1])
	if ( $3 ){ goto $label$183 }
	goto $label$182 
	
.LABEL $label$184
	$6 = (($3 + [16]) & [-16])
	$0 = CALL _Znwj($6)
	*($4 + [224]) = ($6 | [1])
	*($4 + [232]) = $0
	*($4 + [228]) = $3
	
.LABEL $label$183
	CALL memcpy($0, [8360], $3)
	
.LABEL $label$182
	*(($0 + $3)) = [0]
	*(($4 + [320])) = $12
	$3 = ($4 + [232])
	*(($0 = ($4 + [336]))) = *($3)
	*($3) = [0]
	*($4 + [304]) = $1
	*($4 + [296]) = $13
	*($4 + [312]) = $8
	*($4 + [328]) = *($4 + [224])
	*($4 + [224]) = (int_64)0
	$3 = CALL $3(($4 + [256]), ($4 + [240]), $9, $10, ($4 + [296]))
	if ( ((*($4 + [328]) & [1]) == 0) ){ goto $label$185 }
	CALL _ZdlPv(*($0))
	
.LABEL $label$185
	if ( ((*($4 + [224]) & [1]) == 0) ){ goto $label$186 }
	CALL _ZdlPv(*(($4 + [232])))
	
.LABEL $label$186
	CALL $4(($4 + [296]), $3)
	$0 = *($4 + [296])
	CALL send_inline($0, (*($4 + [300]) - $0))
	$0 = *($4 + [296])
	if ( ($0 == 0) ){ goto $label$187 }
	*($4 + [300]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$187
	$0 = *($3 + [28])
	if ( ($0 == 0) ){ goto $label$188 }
	*(($3 + [32])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$188
	$0 = *($3 + [16])
	if ( ($0 == 0) ){ goto $label$189 }
	*(($3 + [20])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$189
	$3 = *($2 + [28])
	if ( ($3 == 0) ){ goto $label$190 }
	*(($2 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$190
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$3 }
	*(($2 + [20])) = $3
	CALL _ZdlPv($3)
	$global$0 = ($4 + [384])
	return (unreachable)
	
.LABEL $label$3
	$global$0 = ($4 + [384])
	return (unreachable)
	
.LABEL $label$2
	CALL $25(($4 + [240]))
	
.LABEL $label$1
	CALL $25(($4 + [224]))
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8788])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8788])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8788])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8788])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8799])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $5($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8794])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $36($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8804])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $36($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $36($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8794])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $39($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $16($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $27($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $27($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $25($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$1 = CALL $26($2, ($1 + [12]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	$5 = CALL $26(($2 + [16]), $1)
	CALL void $6((int_32 $4), (int_64 $3), (int_32 $5), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8788])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8788])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8788])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $34(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8804])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $34(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $39($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $39($0)
	
.LABEL $label$1
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $36 (int_32 $0)
{
	return CALL $37([8824], $0)
}

void .FUNC $31 (int_32 $0)
{
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $38($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8207])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $38 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8816]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8820])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8816]) = [1]
	$2 = ($2 << [16])
	*([0] + [8820]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8820])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8820]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8816]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8816]) = [1]
	$3 = ($3 << [16])
	*([0] + [8820]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8820])
	
.LABEL $label$10
	*([0] + [8820]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $34 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $30())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $35($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17208])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17016]
	$3 = (((int_32)$1 * (int_32)[12]) + [17016])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}