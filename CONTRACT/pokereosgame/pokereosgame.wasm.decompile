(data (i32.const 4) "\80{\00\00")
(data (i32.const 16) "\01\02\03\04\05\06\07\08\t\n\0b\0c\0d\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d!\"#$%&\'()*+,-123456789:;<=")
(data (i32.const 80) "invalid first pos\00")
(data (i32.const 112) "parse memo error\00")
(data (i32.const 160) "eosio.token\00")
(data (i32.const 176) "pokereotoken\00")
(data (i32.const 192) "transfer\00")
(data (i32.const 208) "read\00")
(data (i32.const 224) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 288) "cannot create objects in table of another contract\00")
(data (i32.const 352) "write\00")
(data (i32.const 368) "cannot pass end iterator to modify\00")
(data (i32.const 416) "object passed to modify is not in multi_index\00")
(data (i32.const 464) "cannot modify objects in table of another contract\00")
(data (i32.const 528) "updater cannot change primary key when modifying an object\00")
(data (i32.const 592) "error reading iterator\00")
(data (i32.const 624) "pokereosteam\00")
(data (i32.const 640) "bet_itr != m_active_bets.end()\00")
(data (i32.const 672) "unable to find key\00")
(data (i32.const 704) "cannot pass end iterator to erase\00")
(data (i32.const 752) "cannot increment end iterator\00")
(data (i32.const 784) "object passed to erase is not in multi_index\00")
(data (i32.const 832) "cannot erase objects in table of another contract\00")
(data (i32.const 896) "attempt to remove object that was not in multi_index\00")
(data (i32.const 960) "none\00")
(data (i32.const 976) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 1040) "invalid symbol name\00")
(data (i32.const 1072) "multiplication overflow\00")
(data (i32.const 1104) "multiplication underflow\00")
(data (i32.const 1136) "divide by zero\00")
(data (i32.const 1152) "signed division overflow\00")
(data (i32.const 1184) "attempt to add asset with different symbol\00")
(data (i32.const 1232) "addition underflow\00")
(data (i32.const 1264) "addition overflow\00")
(data (i32.const 1296) "attempt to subtract asset with different symbol\00")
(data (i32.const 1344) "subtraction underflow\00")
(data (i32.const 1376) "subtraction overflow\00")
(data (i32.const 1408) "\03\00\00\00\03\00\00\00\03\00\00\00\03\00\00\00X\02\00\00@\06\00\00\f8\11\00\00")
(data (i32.const 1440) "pokerbonus11\00")
(data (i32.const 1456) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1520) "Game Platform https://pokereos.io  [Bull2] Payout for gameid: %llu\00")
(data (i32.const 1600) "HouseEdge Game:Bull2, Memo:%llu, Payout:%llu, referral:%s\00")
(data (i32.const 1664) "active\00")
(data (i32.const 1680) "pokereosluck\00")
(data (i32.const 1696) "addcount\00")
(data (i32.const 1712) "Prize Fund, Game: Bull2 Memo: \00")
(data (i32.const 1744) "Referrer Prize Fund, Game: Bull2 Memo: \00")
(data (i32.const 1792) "pokereoshome\00")
(data (i32.const 1808) "win96\00")
(data (i32.const 1824) "robot\00")
(data (i32.const 1840) "Spring Festival rewards, Game: bull2 Memo: %llu\00")
(data (i32.const 1888) "reveal\00")
(data (i32.const 1904) ";\00")
(data (i32.const 1920) "\e2\99\a6\00")
(data (i32.const 1936) "\e2\99\a3\00")
(data (i32.const 1952) "\e2\99\a5\00")
(data (i32.const 1968) "\e2\99\a0\00")
(data (i32.const 1984) "unknown\00")
(data (i32.const 2000) "A\00")
(data (i32.const 2016) "J\00")
(data (i32.const 2032) "Q\00")
(data (i32.const 2048) "K\00")
(data (i32.const 2064) "get\00")
(data (i32.const 2080) "mineBalance.amount > 0 && minBalance <= PKE_GAME\00")
(data (i32.const 2144) "[\00")
(data (i32.const 2160) "mineBalance:\00")
(data (i32.const 2176) "]\00")
(data (i32.const 2192) "pkeRatio:\00")
(data (i32.const 2208) ".\00")
(data (i32.const 2224) " \00")
(data (i32.const 2240) ",\00")
(data (i32.const 2256) "vecCardData.size() == MAX_COUNT\00")
(data (i32.const 2288) "vecFirstData.size() == MAX_COUNT\00")
(data (i32.const 2336) "vecSecondData.size() == MAX_COUNT\00")
(data (i32.const 2372) "P\t\00\00")
(data (i32.const 2384) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 2432) "activebets\00")
(data (i32.const 2448) "gameslast\00")
(data (i32.const 2464) "symbolvar\00")
(data (i32.const 2480) "global\00")
(data (i32.const 2496) "EOS5vd8nKhKnrxsGHstcyE7UpcSc5mZFeqz2ZNXc1RPC8aUyZBwhx\00")
(data (i32.const 2552) "\00\a6\824\03\ea0U\04EOS\00\00\00\000\15\a4\99\aa\ab \ad\04PKE\00\00\00\00")
(data (i32.const 2592) "transfer from:[\00")
(data (i32.const 2608) "to:[\00")
(data (i32.const 2624) "quantiy:[\00")
(data (i32.const 2640) "memo:[\00")
(data (i32.const 2656) "eosio\00")
(data (i32.const 2672) "pokereoscost\00")
(data (i32.const 2688) "firewall!!!\00")
(data (i32.const 2704) "the game is being maintained, code:2\00")
(data (i32.const 2752) "the game is being maintained, code:3\00")
(data (i32.const 2800) "hello pokereos\00")
(data (i32.const 2816) "Game Platform https://pokereos.io [Bull2]\00")
(data (i32.const 2864) "parseMemo kind:[\00")
(data (i32.const 2896) "cellAmount:[\00")
(data (i32.const 2912) "addTimes:[\00")
(data (i32.const 2928) "strSeed:[\00")
(data (i32.const 2944) "mine is stop\00")
(data (i32.const 2960) "cellAmount is out of range!\00")
(data (i32.const 2992) "cellAmount >= MIN_CELL && cellAmout <= MAX_CELL\00")
(data (i32.const 3040) "the game is being maintained, code:4\00")
(data (i32.const 3088) "selfBalance.amount >= 300000000\00")
(data (i32.const 3120) "fatal erro\00")
(data (i32.const 3136) "quantity == (cellAmount*4)\00")
(data (i32.const 3168) "strSeed.length() > 0\00")
(data (i32.const 3200) "m_active_bets.find(gameid) == m_active_bets.end()\00")
(data (i32.const 3264) ":\00")
(data (i32.const 3280) "memo for play is incorrect\00")
(data (i32.const 3312) "ref\00")
(data (i32.const 3316) "\t\00\00\00\n\00\00\00")
(data (i32.const 3328) "T = \00")
(data (i32.const 3344) "static const char *boost::detail::ctti<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> > >::n() [T = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]\00")
(data (i32.const 3568) "firewall.x\00")
(data (i32.const 3584) "DApp not exist in firewall, please register first!\00")
(data (i32.const 3648) "Sorry, DApp is under maintenance\00")
(data (i32.const 3696) "unexpected error in fixed_key constructor\00")
(data (i32.const 3740) "\t\00\00\00\0b\00\00\00")
(data (i32.const 3760) "inllog\00")
(data (i32.const 3776) "inlstat\00")
(data (i32.const 3792) "-\00")
(data (i32.const 3808) "cardtype:\00")
(data (i32.const 12224) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 12320) "stoi\00")
(data (i32.const 12336) ": no conversion\00")
(data (i32.const 12352) ": out of range\00")
(data (i32.const 12368) "%d\00")
(data (i32.const 12384) "%lu\00")
(data (i32.const 12400) "%llu\00")
(data (i32.const 12416) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 12880) "0123456789ABCDEF")
(data (i32.const 12896) "-+   0X0x\00")
(data (i32.const 12912) "(null)\00")
(data (i32.const 12928) "-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 12960) "inf\00")
(data (i32.const 12976) "INF\00")
(data (i32.const 12992) "nan\00")
(data (i32.const 13008) "NAN\00")
(data (i32.const 13024) ".\00")
(data (i32.const 13040) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 13136) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(data (i32.const 14944) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 15216) "\00\01\02\04\07\03\06\05\00")
(import "env" "__addtf3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__eqtf2" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "__extenddftf2" (func $fimport$2 (param i32 f64)))
(import "env" "__fixtfsi" (func $fimport$3 (param i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$4 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$5 (param i32 i32)))
(import "env" "__floatunsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__multi3" (func $fimport$8 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__unordtf2" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$12))
(import "env" "action_data_size" (func $fimport$13 (result i32)))
(import "env" "assert_recover_key" (func $fimport$14 (param i32 i32 i32 i32 i32)))
(import "env" "current_receiver" (func $fimport$15 (result i64)))
(import "env" "current_time" (func $fimport$16 (result i64)))
(import "env" "db_find_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_idx256_lowerbound" (func $fimport$19 (param i64 i64 i64 i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$21 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$22 (param i32)))
(import "env" "db_store_i64" (func $fimport$23 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$24 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$25 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$26 (param i32)))
(import "env" "is_account" (func $fimport$27 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$28 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$29 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$30 (param i32 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$31 (param i64)))
(import "env" "prints" (func $fimport$32 (param i32)))
(import "env" "prints_l" (func $fimport$33 (param i32 i32)))
(import "env" "printui" (func $fimport$34 (param i64)))
(import "env" "read_action_data" (func $fimport$35 (param i32 i32) (result i32)))
(import "env" "read_transaction" (func $fimport$36 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$37 (param i64)))
(import "env" "require_auth2" (func $fimport$38 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$39 (param i64)))
(import "env" "send_inline" (func $fimport$40 (param i32 i32)))
(import "env" "sha256" (func $fimport$41 (param i32 i32 i32)))
(import "env" "tapos_block_num" (func $fimport$42 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$43 (result i32)))
(import "env" "transaction_size" (func $fimport$44 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z13uint64_stringy" (func $5))
(export "_Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb" (func $7))
(export "_ZN6randomC2Ev" (func $8))
(export "_ZN6randomD2Ev" (func $9))
(export "_ZN6random4seedE11checksum256S0_" (func $10))
(export "_ZNK6random7mixseedER11checksum256S1_S1_" (func $11))
(export "_ZN6random9generatorEy" (func $12))
(export "_ZNK6random3genER11checksum256y" (func $13))
(export "_ZN6random10get_randomEyRNSt3__16vectorIhNS0_9allocatorIhEEEEhNS0_12basic_stringIcNS0_11char_traitsIcEENS2_IcEEEE" (func $14))
(export "_ZN6random7setseedENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $15))
(export "_ZN6random10get_randomEy" (func $18))
(export "_ZNK6random12get_sys_seedEv" (func $19))
(export "_ZNK6random13get_user_seedEv" (func $20))
(export "_ZNK6random9get_mixedEv" (func $21))
(export "_ZNK6random8get_seedEv" (func $22))
(export "apply" (func $23))
(export "_ZN6gamenn8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $24))
(export "_ZN6gamenn4initEv" (func $26))
(export "_ZN6gamenn10cleantableEym" (func $28))
(export "_ZN6gamenn6revealEyyN5eosio5assetES1_NSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE11checksum2569signatureS8_S8_" (func $30))
(export "_ZN6gamenn10resolvebetEy11checksum2569signature" (func $32))
(export "_ZN6gamenn9updatekeyE10public_key" (func $34))
(export "_ZN6gamenn8setvalueEyy" (func $36))
(export "_ZN6gamenn8concludeEN5eosio11multi_indexILy3617214760481587200E6st_betJEE14const_iteratorER7st_game" (func $48))
(export "_ZN6gamenn12dispatchCardER7st_gameh11checksum256" (func $50))
(export "_ZN6gamenn9digRewardEyN5eosio5assetE" (func $54))
(export "_ZN6gamenn11getPkeRatioEv" (func $98))
(export "_ZN6gamenn10parse_memoENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERhRyS7_RS6_S8_S9_" (func $130))
(export "_ZN6gamenn9startGameEyN5eosio5assetES1_yNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_" (func $131))
(export "_ZN6gamenn7next_idEv" (func $132))
(export "_ZN6gamenn15getExtendSymbolEyy" (func $189))
(export "_ZN6gamenn8cardtestENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $190))
(export "malloc" (func $191))
(export "free" (func $194))
(export "_ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji" (func $212))
(export "_ZNSt3__19to_stringEi" (func $216))
(export "_ZNSt3__19to_stringEm" (func $219))
(export "_ZNSt3__19to_stringEy" (func $220))
(export "isspace" (func $224))
(export "__errno_location" (func $225))
(export "snprintf" (func $226))
(export "vsnprintf" (func $227))
(export "vfprintf" (func $229))
(export "__lockfile" (func $231))
(export "__unlockfile" (func $232))
(export "__fwritex" (func $233))
(export "strerror" (func $235))
(export "strnlen" (func $236))
(export "wctomb" (func $237))
(export "__signbitl" (func $238))
(export "__fpclassifyl" (func $239))
(export "frexpl" (func $240))
(export "wcrtomb" (func $241))
(export "memchr" (func $242))
(export "__lctrans" (func $243))
(export "__lctrans_impl" (func $244))
(export "__mo_lookup" (func $245))
(export "strcmp" (func $246))
(export "__towrite" (func $247))
(export "sprintf" (func $248))
(export "vsprintf" (func $249))
(export "strtol" (func $250))
(export "__shlim" (func $251))
(export "__intscan" (func $252))
(export "__shgetc" (func $253))
(export "__uflow" (func $254))
(export "__toread" (func $255))
(export "memcmp" (func $256))
(export "strlen" (func $257))
(table $0 12 12 anyfunc)
(elem (i32.const 0) $258 $24 $36 $26 $32 $30 $34 $28 $228 $144 $145 $172)



void .FUNC _ZNSt3__19to_stringEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [12400], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $217(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $217(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $174 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [592])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $198([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [208])
	CALL memcpy($6, $7, [8])
	*($6 + [12]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [12])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $175(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $200($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($5 + [15]) = $1
	$1 = *($2)
	$3 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($3 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$4 = (($3 + [17]) & [-16])
	$1 = CALL $198($4)
	*($0) = ($4 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($5 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $207($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $3)
	*([0] + [4]) = ($5 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $202($0)
}

int_32 .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [592])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $198([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [208])
	CALL memcpy($6, $7, [8])
	*($6 + [12]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [12])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $177(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $200($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $177 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $198(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $221($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $200($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $200($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $170 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*($5) = [0]
	$2 = *($1 + [8])
	*($5 + [8]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$2 }
	$4 = $5
	$3 = $1
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL $199($2)
	*($5) = $4
	$3 = *($1)
	
.LABEL $label$1
	CALL memcpy($4, $3, $2)
	*($5 + [12]) = *($1 + [12])
	*($5 + [16]) = [0]
	$1 = *(($5 + [8]))
	*($5 + [24]) = $1
	$2 = ($0 + [4])
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $5
	$3 = ($5 + [16])
	goto $label$3 
	
.LABEL $label$4
	$3 = CALL $199($1)
	*($5 + [16]) = $3
	$4 = *($5)
	
.LABEL $label$3
	CALL memcpy($3, $4, $1)
	*($5 + [28]) = *(($5 + [12]))
	$1 = CALL $171([3740], ($5 + [16]), $2)
	if ( (*((($5 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$2 = *($5 + [16])
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $201($2)
	
.LABEL $label$5
	if ( (*(($5 + [8])) <= [9]) ){ goto $label$6 }
	$2 = *($5)
	if ( ($2 == 0) ){ goto $label$6 }
	CALL $201($2)
	
.LABEL $label$6
	*($0) = ( [3740] ? [0] : $1 )
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $171 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($6) = $1
	$5 = [0]
	if ( CALL $143($6) ){ goto $label$1 }
	*($6 + [16]) = [0]
	$5 = *($1 + [8])
	*($6 + [24]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$3 }
	$4 = ($6 + [16])
	$3 = $1
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $199($5)
	*($6 + [16]) = $4
	$3 = *($1)
	
.LABEL $label$2
	CALL memcpy($4, $3, $5)
	*($6 + [28]) = *($1 + [12])
	*(($1 = CALL $198([16]))) = [0]
	$5 = *((($6 + [16]) + [8]))
	*($1 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$5 }
	$4 = ($6 + [16])
	$3 = $1
	goto $label$4 
	
.LABEL $label$5
	$3 = CALL $199($5)
	*($1) = $3
	$5 = *(($1 + [8]))
	$4 = *($6 + [16])
	
.LABEL $label$4
	CALL memcpy($3, $4, $5)
	*($2) = $1
	*($1 + [12]) = *(($6 + [28]))
	$5 = [1]
	if ( (*(($6 + [24])) <= [9]) ){ goto $label$1 }
	$1 = *($6 + [16])
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $201($1)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
	return $5
}

void .FUNC $172 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	CALL $173($0, *($1), $2, $3)
}

int_32 .FUNC _Z7sub2sepRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPS5_RKcRKjRKb (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($3) != (int_32)[-1]), [80])
	$2 = CALL $210($0, *($2), *($3))
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$4 }
	$3 = *($3)
	CALL $223($5, $0, $3, ($2 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$3 }
	*($1) = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL eosio_assert(((int_32)*($4) ^ (int_32)[1]), [112])
	$2 = [-1]
	goto $label$1 
	
.LABEL $label$3
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$2
	CALL $205($1, [0])
	*(($1 + [8])) = *(($5 + [8]))
	*($1) = *($5)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
	return $2
}

int_32 .FUNC strcmp (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)($3 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)($3 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($2 - ($3 & [255]))
}

void .FUNC $178 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	*($10 + [40]) = (int_64)0
	*(($10 + [24])) = *(($2 + [24]))
	*(($10 + [16])) = *(($2 + [16]))
	*($10 + [8]) = *(($2 + [8]))
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx256_lowerbound(*($8), *($8 + [8]), (int_64)-7952543051627364352, $10, [2], ($10 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [40])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [224])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $179($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)-7952543051627364352, $5))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [224])
	
.LABEL $label$4
	*(($2 + [56])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [48])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC $221 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _Z13uint64_stringy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 ((uint_64)$1 % (uint_64)(int_64)10))
	CALL $6($5, ( ($3 | [48]) ? ($3 + [55]) : ($3 <= [10]) ), $0)
	$2 = ((uint_64)$1 / (uint_64)(int_64)10)
	if ( (*($0) & [1]) ){ goto $label$3 }
	*($0) = [0]
	goto $label$2 
	
.LABEL $label$3
	*(*(($0 + [8]))) = [0]
	*($4) = [0]
	
.LABEL $label$2
	CALL $205($0, [0])
	*(($0 + [8])) = *(($5 + [8]))
	*($0) = *($5)
	$3 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $2
	if ( $3 ){ goto $label$1 }
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $222(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $222(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $200(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $200(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

void .FUNC _ZN6gamenn15getExtendSymbolEyy (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	*(($0 + [8])) = $2
	*($0) = $3
}

void .FUNC $188 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $7) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$6 = *($0)
	$3 = int_32(($7 - $6) >> [4])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$3 }
	$5 = [268435455]
	$2 = ($2 - $6)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$5 = int_32($2 >> [3])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL $198(($5 << [4]))
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$1 
	
.LABEL $label$5
	*(($0 + [4])) = ($7 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $221($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$7 = ($7 - $6)
	$3 = ($2 + ($3 << [4]))
	$4 = ($3 - $7)
	$1 = ($3 + ($1 << [4]))
	$5 = ($2 + ($5 << [4]))
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($4, $6, $7)
	$6 = *($0)
	
.LABEL $label$7
	*($0) = $4
	*(($0 + [4])) = $1
	*(($0 + [8])) = $5
	if ( ($6 == 0) ){ goto $label$8 }
	CALL $200($6)
	
.LABEL $label$8
	(unreachable)
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [832])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$4 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($4)) == (int_64)$2) ){ goto $label$1 }
	$7 = $4
	$8 = ($4 + [-24])
	$4 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [896])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$7 }
	CALL $200(*(($4 + [112])))
	
.LABEL $label$7
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$8 }
	CALL $200(*(($4 + [24])))
	
.LABEL $label$8
	CALL $200($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$11 }
	CALL $200(*(($4 + [112])))
	
.LABEL $label$11
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL $200(*(($4 + [24])))
	
.LABEL $label$12
	CALL $200($4)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [120])))
}

void .FUNC _ZN6gamenn8concludeEN5eosio11multi_indexILy3617214760481587200E6st_betJEE14const_iteratorER7st_game (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_64 $26
	int_32 $27
	$27 = (*([0] + [4]) - [928])
	*([0] + [4]) = $27
	*(($21 = (($27 + [816]) + [24]))) = *(($2 + [200]))
	*(($11 = (($27 + [816]) + [16]))) = *(($2 + [192]))
	*($27 + [816]) = *($2 + [176])
	*($27 + [824]) = *(($2 + [184]))
	*((($27 + [160]) + [24])) = *($21)
	*((($27 + [160]) + [16])) = *($11)
	*($27 + [160]) = *($27 + [816])
	*($27 + [168]) = *($27 + [824])
	CALL _ZN6gamenn12dispatchCardER7st_gameh11checksum256($0, $2, [5], ($27 + [160]))
	*(($27 + [808])) = [0]
	*($27 + [800]) = (int_64)0
	$21 = CALL strlen([960])
	if ( ((uint_32)$21 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$21 >= (uint_32)[11]) ){ goto $label$13 }
	*($27 + [800]) = ($21 << [1])
	$11 = (($27 + [800]) | [1])
	if ( $21 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$18 = (($21 + [16]) & [-16])
	$11 = CALL $198($18)
	*($27 + [800]) = ($18 | [1])
	*($27 + [808]) = $11
	*($27 + [804]) = $21
	
.LABEL $label$12
	CALL memcpy($11, [960], $21)
	
.LABEL $label$11
	*(($11 + $21)) = [0]
	if ( (CALL is_account(*(*($1 + [4]) + [64])) == 0) ){ goto $label$14 }
	$23 = *($21 + [64])
	$21 = *(($1 + [4]))
	if ( ((int_64)*($21 + [8]) == (int_64)$23) ){ goto $label$14 }
	*($27 + [576]) = $23
	CALL $51(($27 + [192]), ($27 + [576]))
	if ( (*($27 + [800]) & [1]) ){ goto $label$16 }
	*($27 + [800]) = [0]
	goto $label$15 
	
.LABEL $label$16
	*(*($27 + [808])) = [0]
	*($27 + [804]) = [0]
	
.LABEL $label$15
	CALL $205(($27 + [800]), [0])
	*((($27 + [800]) + [8])) = *((($27 + [192]) + [8]))
	*($27 + [800]) = *($27 + [192])
	
.LABEL $label$14
	$5 = ($2 + [220])
	$4 = ($2 + [232])
	$3 = ($0 + [248])
	$18 = CALL $52($3, $4, $5)
	if ( ($18 == 0) ){ goto $label$20 }
	$11 = [0]
	*($27 + [792]) = [0]
	*($27 + [784]) = (int_64)0
	$21 = ($27 + [784])
	$10 = (*(($2 + [236])) - *($4))
	if ( ($10 == 0) ){ goto $label$19 }
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$5 }
	$9 = CALL $198($10)
	*(($27 + [792])) = ($9 + $10)
	*($27 + [784]) = $9
	*($27 + [788]) = $9
	$10 = [1]
	$16 = *(($2 + [232]))
	$15 = (*(($2 + [236])) - $16)
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$17 }
	CALL memcpy($9, $16, $15)
	*($27 + [788]) = (*($27 + [788]) + $15)
	goto $label$17 
	
.LABEL $label$20
	$10 = [0]
	*($27 + [776]) = [0]
	*($27 + [768]) = (int_64)0
	$21 = ($27 + [768])
	$11 = (*(($2 + [224])) - *($5))
	if ( ($11 == 0) ){ goto $label$18 }
	if ( ((int_32)$11 <= (int_32)[-1]) ){ goto $label$4 }
	$9 = CALL $198($11)
	*(($27 + [776])) = ($9 + $11)
	*($27 + [768]) = $9
	*($27 + [772]) = $9
	$11 = [1]
	$16 = *(($2 + [220]))
	$15 = (*(($2 + [224])) - $16)
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$17 }
	CALL memcpy($9, $16, $15)
	*($27 + [772]) = (*($27 + [772]) + $15)
	goto $label$17 
	
.LABEL $label$19
	$10 = [1]
	goto $label$17 
	
.LABEL $label$18
	$11 = [1]
	
.LABEL $label$17
	$21 = CALL $53($3, $21)
	if ( ((uint_32)$21 > (uint_32)[17]) ){ goto $label$23 }
	$24 = (int_64)0
	$25 = (int_64)1
	goto $label$27 
	
.LABEL $label$27
	if ( ($11 == 0) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$26
	$25 = (int_64)3
	if ( $11 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$25
	$25 = (int_64)2
	if ( $11 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$25 = (int_64)4
	if ( $11 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$25 = (int_64)0
	$24 = (int_64)0
	if ( ($11 == 0) ){ goto $label$21 }
	
.LABEL $label$22
	$21 = *($27 + [768])
	if ( ($21 == 0) ){ goto $label$21 }
	*($27 + [772]) = $21
	CALL $200($21)
	
.LABEL $label$21
	if ( ($10 == 0) ){ goto $label$28 }
	$21 = *($27 + [784])
	if ( ($21 == 0) ){ goto $label$28 }
	*($27 + [788]) = $21
	CALL $200($21)
	
.LABEL $label$28
	$23 = *((*(($1 + [4])) + [96]))
	CALL eosio_assert([1], [976])
	$23 = (uint_64)$23 >> (uint_64)(int_64)8)
	$21 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $23) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$23 = (uint_64)$23 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$23) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	
.LOOP $label$33:
	$23 = (uint_64)$23 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$23) & (int_64)255) != (int_64)0) ){ goto $label$30 }
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$33 }
	
.LABEL $label$32
	$11 = [1]
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$11 = [0]
	
.LABEL $label$29
	CALL eosio_assert($11, [1040])
	$23 = *((*(($1 + [4])) + [96]))
	CALL eosio_assert([1], [976])
	$23 = (uint_64)$23 >> (uint_64)(int_64)8)
	$21 = [0]
	
.LOOP $label$36:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $23) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$35 }
	$23 = (uint_64)$23 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$23) & (int_64)255) != (int_64)0) ){ goto $label$37 }
	
.LOOP $label$38:
	$23 = (uint_64)$23 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$23) & (int_64)255) != (int_64)0) ){ goto $label$35 }
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$38 }
	
.LABEL $label$37
	$11 = [1]
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$35
	$11 = [0]
	
.LABEL $label$34
	CALL eosio_assert($11, [1040])
	$21 = ($1 + [4])
	$11 = *($21)
	$6 = *(($11 + [96]))
	$23 = ((int_64)((int_64)$23 >> (int_64)63) << (int_64)2) | (int_64)(uint_64)$23 >> (uint_64)(int_64)62
	$23 = *($11 + [88])
	$22 = ((int_64)$23 << (int_64)2)
	CALL eosio_assert(( (uint_64)($22 <= (int_64)4611686018427387904) ? ((int_64)$23)) < (int_64)0) : (int_64)($23 == 0) ), [1072])
	CALL eosio_assert(( ((uint_64)$22 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$23 > (int_64)-1) : ((int_64)$23 == (int_64)-1) ), [1104])
	$23 = *((*($21) + [96]))
	CALL eosio_assert([1], [976])
	$23 = (uint_64)$23 >> (uint_64)(int_64)8)
	$21 = [0]
	
.LOOP $label$41:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $23) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$40 }
	$23 = (uint_64)$23 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$23) & (int_64)255) != (int_64)0) ){ goto $label$42 }
	
.LOOP $label$43:
	$23 = (uint_64)$23 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$23) & (int_64)255) != (int_64)0) ){ goto $label$40 }
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$43 }
	
.LABEL $label$42
	$11 = [1]
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$40
	$11 = [0]
	
.LABEL $label$39
	CALL eosio_assert($11, [1040])
	$21 = ($1 + [4])
	$11 = *($21)
	$23 = *($11 + [88])
	CALL __multi3(($27 + [144]), $23, (int_64)$23 >> (int_64)63), $25, $24)
	$24 = *(($11 + [96]))
	$23 = *(($27 + [152]))
	$25 = *($27 + [144])
	CALL eosio_assert(( (uint_64)($25 <= (int_64)4611686018427387904) ? ((int_64)$23 < (int_64)0) : (int_64)($23 == 0) ), [1072])
	CALL eosio_assert(( ((uint_64)$25 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$23 > (int_64)-1) : ((int_64)$23 == (int_64)-1) ), [1104])
	$13 = *((*($21) + [96]))
	CALL eosio_assert([1], [976])
	$23 = (uint_64)$13 >> (uint_64)(int_64)8)
	$21 = [0]
	
.LOOP $label$46:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $23) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$45 }
	$23 = (uint_64)$23 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$23) & (int_64)255) != (int_64)0) ){ goto $label$47 }
	
.LOOP $label$48:
	$23 = (uint_64)$23 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$23) & (int_64)255) != (int_64)0) ){ goto $label$45 }
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$48 }
	
.LABEL $label$47
	$11 = [1]
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$46 }
	goto $label$44 
	
.LABEL $label$45
	$11 = [0]
	
.LABEL $label$44
	CALL eosio_assert($11, [1040])
	if ( ($18 == 0) ){ goto $label$50 }
	$23 = (int_64)$25 >> (int_64)63
	CALL __multi3(($27 + [128]), $25, $23), (int_64)3, (int_64)0)
	CALL __multi3(($27 + [112]), $25, $23, (int_64)97, (int_64)0)
	$23 = *((($27 + [128]) + [8]))
	$26 = *($27 + [128])
	CALL eosio_assert(( (uint_64)($26 <= (int_64)4611686018427387904) ? ((int_64)$23 < (int_64)0) : (int_64)($23 == 0) ), [1072])
	CALL eosio_assert(( ((uint_64)$26 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$23 > (int_64)-1) : ((int_64)$23 == (int_64)-1) ), [1104])
	CALL eosio_assert([1], [1136])
	CALL eosio_assert([1], [1152])
	$23 = *((($27 + [112]) + [8]))
	$19 = *($27 + [112])
	CALL eosio_assert(( (uint_64)($19 <= (int_64)4611686018427387904) ? ((int_64)$23 < (int_64)0) : (int_64)($23 == 0) ), [1072])
	CALL eosio_assert(( ((uint_64)$19 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$23 > (int_64)-1) : ((int_64)$23 == (int_64)-1) ), [1104])
	CALL eosio_assert([1], [1136])
	CALL eosio_assert([1], [1152])
	CALL eosio_assert(((int_64)$24 == (int_64)$6), [1184])
	$14 = ((int_64)((int_64)$19 / (int_64)100) + (int_64)$22)
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [1232])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [1264])
	$12 = ((int_64)$26 / (int_64)100)
	$13 = $24
	goto $label$49 
	
.LABEL $label$50
	CALL eosio_assert(((int_64)$24 == (int_64)$6), [1296])
	$14 = (int_64)
	CALL eosio_assert(((int_64)$14($22 - $25)) > (int_64)-4611686018427387904), [1344])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [1376])
	$12 = (int_64)0
	
.LABEL $label$49
	*($27 + [728]) = $24
	$10 = ($1 + [4])
	$23 = *(*($10) + [80])
	*(($27 + [104])) = $24
	*($27 + [720]) = $25
	*($27 + [96]) = $25
	CALL _ZN6gamenn9digRewardEyN5eosio5assetE(($27 + [736]), $0, $23, ($27 + [96]))
	$21 = *($10)
	if ( ((int_64)*(($21 + [96])) != (int_64)1397703940) ){ goto $label$51 }
	if ( (CALL is_account(*($21 + [64])) == 0) ){ goto $label$51 }
	$21 = *(($1 + [4]))
	if ( ((int_64)*($21 + [8]) == (int_64)*($21 + [64])) ){ goto $label$51 }
	*($27 + [584]) = (int_64)1397703940
	*($27 + [576]) = (int_64)0
	CALL eosio_assert([1], [976])
	$23 = (uint_64)*($27 + [584]) >> (uint_64)(int_64)8)
	$21 = [0]
	
.LOOP $label$54:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $23) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$53 }
	$23 = (uint_64)$23 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$23) & (int_64)255) != (int_64)0) ){ goto $label$55 }
	
.LOOP $label$56:
	$23 = (uint_64)$23 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$23) & (int_64)255) != (int_64)0) ){ goto $label$53 }
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$56 }
	
.LABEL $label$55
	$11 = [1]
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$53
	$11 = [0]
	
.LABEL $label$52
	CALL eosio_assert($11, [1040])
	*(($21 = (($27 + [576]) + [24]))) = (int_64)1162563588
	*($27 + [592]) = (int_64)0
	CALL eosio_assert([1], [976])
	$23 = (uint_64)*($21) >> (uint_64)(int_64)8)
	$21 = [0]
	
.LOOP $label$59:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $23) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$58 }
	$23 = (uint_64)$23 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$23) & (int_64)255) != (int_64)0) ){ goto $label$60 }
	
.LOOP $label$61:
	$23 = (uint_64)$23 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$23) & (int_64)255) != (int_64)0) ){ goto $label$58 }
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$61 }
	
.LABEL $label$60
	$11 = [1]
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$58
	$11 = [0]
	
.LABEL $label$57
	CALL eosio_assert($11, [1040])
	*($27 + [208]) = (int_64)-1
	$23 = *($0)
	*($27 + [192]) = $23
	*($27 + [200]) = *(*(($1 + [4])) + [64])
	*($27 + [216]) = [0]
	*(($15 = ($27 + [220]))) = [0]
	*(($27 + [224])) = [0]
	CALL $55(($27 + [448]), ($27 + [192]), $23, ($27 + [576]))
	*(($11 = (($27 + [576]) + [24]))) = *((($27 + [448]) + [24]))
	*(($21 = (($27 + [576]) + [16]))) = *((($27 + [448]) + [16]))
	*((($27 + [576]) + [8])) = *((($27 + [448]) + [8]))
	*($27 + [576]) = *($27 + [448])
	CALL eosio_assert(((int_64)*((($27 + [736]) + [24])) == (int_64)*($11)), [1184])
	$23 = ((int_64)*($21) + (int_64)*($27 + [752]))
	*($21) = $23
	CALL eosio_assert(((int_64)$23 > (int_64)-4611686018427387904), [1232])
	CALL eosio_assert(((int_64)*($21) < (int_64)4611686018427387904), [1264])
	CALL $56(($27 + [192]), ($27 + [576]), *($0))
	$9 = *($27 + [216])
	if ( ($9 == 0) ){ goto $label$51 }
	$21 = *($15)
	if ( ((int_32)$21 == (int_32)$9) ){ goto $label$63 }
	
.LOOP $label$64:
	$21 = ($21 + [-24])
	$11 = *($21)
	*($21) = [0]
	if ( ($11 == 0) ){ goto $label$65 }
	CALL $200($11)
	
.LABEL $label$65
	if ( ((int_32)$9 != (int_32)$21) ){ goto $label$64 }
	$21 = *(($27 + [216]))
	goto $label$62 
	
.LABEL $label$63
	$21 = $9
	
.LABEL $label$62
	*(($27 + [220])) = $9
	CALL $200($21)
	
.LABEL $label$51
	$8 = *((*($10) + [96]))
	CALL eosio_assert([1], [976])
	$23 = (uint_64)$8 >> (uint_64)(int_64)8)
	$21 = [0]
	
.LOOP $label$68:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $23) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$67 }
	$23 = (uint_64)$23 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$23) & (int_64)255) != (int_64)0) ){ goto $label$69 }
	
.LOOP $label$70:
	$23 = (uint_64)$23 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$23) & (int_64)255) != (int_64)0) ){ goto $label$67 }
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$70 }
	
.LABEL $label$69
	$11 = [1]
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$68 }
	goto $label$66 
	
.LABEL $label$67
	$11 = [0]
	
.LABEL $label$66
	CALL eosio_assert($11, [1040])
	$7 = (int_64)0
	if ( ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) <= [1548950401]) ){ goto $label$71 }
	if ( ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) > (uint_32)[1549727999]) ){ goto $label$71 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$71 }
	if ( ((int_64)*((*(($1 + [4])) + [96])) != (int_64)1397703940) ){ goto $label$71 }
	$21 = [0]
	*($27 + [712]) = [0]
	*($27 + [704]) = (int_64)0
	$11 = (*(($2 + [236])) - *(($2 + [232])))
	if ( ($11 == 0) ){ goto $label$72 }
	if ( ((int_32)$11 <= (int_32)[-1]) ){ goto $label$2 }
	$10 = CALL $198($11)
	*(($27 + [712])) = ($10 + $11)
	*($27 + [704]) = $10
	*($27 + [708]) = $10
	$9 = *(($2 + [232]))
	$11 = (*(($2 + [236])) - $9)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$72 }
	CALL memcpy($10, $9, $11)
	*($27 + [708]) = (*($27 + [708]) + $11)
	
.LABEL $label$72
	$11 = (CALL $53($3, ($27 + [704])) + [-11])
	if ( ((uint_32)($11 & [255]) > (uint_32)[6]) ){ goto $label$73 }
	$21 = *(((int_32(($11 << [24]) >> [24]) << [2]) + [1408]))
	
.LABEL $label$73
	$11 = *($27 + [704])
	if ( ($11 == 0) ){ goto $label$74 }
	*($27 + [708]) = $11
	CALL $200($11)
	
.LABEL $label$74
	if ( ($21 == 0) ){ goto $label$78 }
	$23 = (int_64)0
	$10 = ($1 + [4])
	$11 = *($10)
	$22 = *($11 + [88])
	CALL __multi3(($27 + [80]), $22, (int_64)$22 >> (int_64)63), (CASTING uint_64)(uint_32 $21), (int_64)0)
	$7 = *(($11 + [96]))
	$26 = *(($27 + [88]))
	$22 = *($27 + [80])
	CALL eosio_assert(( (uint_64)($22 <= (int_64)4611686018427387904) ? ((int_64)$26 < (int_64)0) : (int_64)($26 == 0) ), [1072])
	CALL eosio_assert(( ((uint_64)$22 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$26 > (int_64)-1) : ((int_64)$26 == (int_64)-1) ), [1104])
	CALL eosio_assert([1], [1136])
	CALL eosio_assert([1], [1152])
	$17 = ((int_64)$22 / (int_64)100)
	if ( ((int_64)$22 < (int_64)201900100) ){ goto $label$75 }
	$7 = *((*($10) + [96]))
	CALL eosio_assert([1], [976])
	$22 = (uint_64)$7 >> (uint_64)(int_64)8)
	$21 = [0]
	
.LOOP $label$79:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $22) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$77 }
	$22 = (uint_64)$22 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$22) & (int_64)255) != (int_64)0) ){ goto $label$80 }
	
.LOOP $label$81:
	$22 = (uint_64)$22 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$22) & (int_64)255) != (int_64)0) ){ goto $label$77 }
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$81 }
	
.LABEL $label$80
	$11 = [1]
	$21 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[7]) ){ goto $label$79 }
	goto $label$76 
	
.LABEL $label$78
	$7 = (int_64)0
	goto $label$71 
	
.LABEL $label$77
	$11 = [0]
	
.LABEL $label$76
	CALL eosio_assert($11, [1040])
	$17 = (int_64)2019000
	
.LABEL $label$75
	$26 = (int_64)59
	$21 = [160]
	$19 = (int_64)0
	
.LOOP $label$82:
	if ( ((uint_64)$23 > (uint_64)(int_64)10) ){ goto $label$87 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$86 }
	$11 = ($11 + [165])
	goto $label$85 
	
.LABEL $label$87
	$22 = (int_64)0
	if ( ((int_64)$23 == (int_64)11) ){ goto $label$84 }
	goto $label$83 
	
.LABEL $label$86
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$85
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$84
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$26 & (int_64)4294967295))
	
.LABEL $label$83
	$21 = ($21 + [1])
	$26 = ((int_64)$26 + (int_64)-5)
	$19 = ((int_64)$22 | (int_64)$19)
	$23 = ((int_64)$23 + (int_64)1)
	if ( ((int_64)$23 != (int_64)13) ){ goto $label$82 }
	$23 = (int_64)0
	$22 = (int_64)59
	$21 = [1440]
	$20 = (int_64)0
	
.LOOP $label$88:
	$26 = (int_64)0
	if ( ((uint_64)$23 > (uint_64)(int_64)11) ){ goto $label$89 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$91 }
	$11 = ($11 + [165])
	goto $label$90 
	
.LABEL $label$91
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$90
	$26 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$89
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$20 = ((int_64)$26 | (int_64)$20)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$88 }
	*(($27 + [224])) = [0]
	*($27 + [200]) = $20
	*($27 + [192]) = $19
	*($27 + [208]) = (int_64)-1
	*($27 + [216]) = (int_64)0
	$21 = CALL $68(($27 + [192]), (int_64)5459781, [672])
	$23 = *($21 + [8])
	$22 = *($21)
	$10 = *($27 + [216])
	if ( ($10 == 0) ){ goto $label$92 }
	$9 = ($27 + [220])
	$21 = *($9)
	if ( ((int_32)$21 == (int_32)$10) ){ goto $label$94 }
	
.LOOP $label$95:
	$21 = ($21 + [-24])
	$11 = *($21)
	*($21) = [0]
	if ( ($11 == 0) ){ goto $label$96 }
	CALL $200($11)
	
.LABEL $label$96
	if ( ((int_32)$10 != (int_32)$21) ){ goto $label$95 }
	$21 = *(($27 + [216]))
	goto $label$93 
	
.LABEL $label$94
	$21 = $10
	
.LABEL $label$93
	*($9) = $10
	CALL $200($21)
	
.LABEL $label$92
	CALL eosio_assert(((int_64)$7 == (int_64)$23), [1456])
	$21 = ((int_64)$17 > (int_64)$22)
	$8 = ( $23 ? $7 : $21 )
	$7 = ( $22 ? $17 : $21 )
	
.LABEL $label$71
	$11 = ($1 + [4])
	$21 = *($11)
	*($2) = *($21)
	*(($2 + [28])) = *(($21 + [100]))
	*(($2 + [24])) = *(($21 + [96]))
	*(($2 + [20])) = *(($21 + [92]))
	*($2 + [16]) = *($21 + [88])
	*($2 + [32]) = *($21 + [72])
	*($2 + [48]) = *($21 + [8])
	*($2 + [56]) = *($21 + [64])
	CALL $203(($2 + [64]), ($21 + [16]))
	$21 = *($11)
	*($2 + [144]) = *($21 + [32])
	*(($2 + [168])) = *(($21 + [56]))
	*(($2 + [160])) = *(($21 + [48]))
	*(($2 + [152])) = *(($21 + [40]))
	CALL $203(($2 + [296]), ($21 + [104]))
	*($2 + [245]) = $18
	if ( ($18 == 0) ){ goto $label$98 }
	CALL __multi3(($27 + [64]), $25, (int_64)$25 >> (int_64)63), (int_64)97, (int_64)0)
	$23 = *(($27 + [72]))
	$22 = *($27 + [64])
	CALL eosio_assert(( (uint_64)($22 <= (int_64)4611686018427387904) ? ((int_64)$23 < (int_64)0) : (int_64)($23 == 0) ), [1072])
	CALL eosio_assert(( ((uint_64)$22 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$23 > (int_64)-1) : ((int_64)$23 == (int_64)-1) ), [1104])
	CALL eosio_assert([1], [1136])
	CALL eosio_assert([1], [1152])
	CALL eosio_assert(((int_64)$8 == (int_64)$24), [1184])
	$23 = ((int_64)$7 + (int_64)((int_64)$22 / (int_64)100))
	CALL eosio_assert(((int_64)$23 > (int_64)-4611686018427387904), [1232])
	CALL eosio_assert(((int_64)$23 < (int_64)4611686018427387904), [1264])
	$22 = (int_64))((int_64)0 - $25)
	goto $label$97 
	
.LABEL $label$98
	$23 = (int_64))((int_64)0 - $25)
	$22 = $25
	
.LABEL $label$97
	*($2 + [280]) = *($27 + [736])
	*($2 + [264]) = $23
	*($2 + [248]) = $22
	*(($2 + [284])) = *($27 + [740])
	*(($2 + [272])) = $24
	*(($2 + [256])) = $24
	*(($2 + [292])) = *(($27 + [748]))
	*(($2 + [288])) = *(($27 + [744]))
	$23 = *(*(($1 + [4])) + [8])
	$9 = *(($0 + [72]))
	$18 = *(($0 + [76]))
	if ( ((int_32)$18 == (int_32)$9) ){ goto $label$99 }
	$21 = ($18 + [-24])
	$10 = ([0] - $9)
	
.LOOP $label$100:
	if ( ((int_64)*(*($21) + [48]) == (int_64)$23) ){ goto $label$99 }
	$18 = $21
	$11 = ($21 + [-24])
	$21 = $11
	if ( ((int_32)($11 + $10) != (int_32)[-24]) ){ goto $label$100 }
	
.LABEL $label$99
	$21 = ($0 + [48])
	if ( ((int_32)$18 == (int_32)$9) ){ goto $label$104 }
	$18 = *(($18 + [-24]))
	CALL eosio_assert(((int_32)*($18 + [308]) == (int_32)$21), [224])
	if ( $18 ){ goto $label$103 }
	goto $label$102 
	
.LABEL $label$104
	$11 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7035937929554296832, $23)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$102 }
	$18 = CALL $57($21, $11)
	CALL eosio_assert(((int_32)*($18 + [308]) == (int_32)$21), [224])
	
.LABEL $label$103
	$23 = *($0)
	*($27 + [192]) = $2
	CALL $58($21, $18, $23, ($27 + [192]))
	goto $label$101 
	
.LABEL $label$102
	$23 = *($0)
	*($27 + [904]) = $2
	*($27 + [576]) = $23
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$15()), [288])
	*($27 + [192]) = $21
	*($27 + [196]) = ($27 + [904])
	*($27 + [200]) = ($27 + [576])
	$11 = CALL $198([320])
	CALL $47($11)
	*($11 + [308]) = $21
	CALL $59(($27 + [192]), $11)
	*($27 + [448]) = $11
	$23 = *($11 + [48])
	*($27 + [192]) = $23
	$18 = *($11 + [312])
	*($27 + [856]) = $18
	$10 = ($0 + [76])
	$21 = *($10)
	if ( ((uint_32)$21 >= (uint_32)*(($0 + [80]))) ){ goto $label$106 }
	*($21 + [8]) = $23
	*($21 + [16]) = $18
	*($27 + [448]) = [0]
	*($21) = $11
	*($10) = ($21 + [24])
	goto $label$105 
	
.LABEL $label$106
	CALL $60(($0 + [72]), ($27 + [448]), ($27 + [192]), ($27 + [856]))
	
.LABEL $label$105
	$21 = *($27 + [448])
	$18 = [0]
	*($27 + [448]) = [0]
	if ( ($21 == 0) ){ goto $label$101 }
	if ( ((*($21 + [296]) & [1]) == 0) ){ goto $label$107 }
	CALL $200(*(($21 + [304])))
	
.LABEL $label$107
	$11 = *($21 + [232])
	if ( ($11 == 0) ){ goto $label$108 }
	*(($21 + [236])) = $11
	CALL $200($11)
	
.LABEL $label$108
	$11 = *($21 + [220])
	if ( ($11 == 0) ){ goto $label$109 }
	*(($21 + [224])) = $11
	CALL $200($11)
	
.LABEL $label$109
	$11 = *($21 + [208])
	if ( ($11 == 0) ){ goto $label$110 }
	*(($21 + [212])) = $11
	CALL $200($11)
	
.LABEL $label$110
	if ( ((*($21 + [64]) & [1]) == 0) ){ goto $label$111 }
	CALL $200(*(($21 + [72])))
	
.LABEL $label$111
	CALL $200($21)
	
.LABEL $label$101
	$21 = ($1 + [4])
	*($27 + [48]) = *(*($21))
	CALL sprintf(($27 + [576]), [1520], ($27 + [48]))
	$23 = *(*($21))
	*(($27 + [32])) = ( *($27 + [808]) ? (($27 + [800]) | [1]) : (*($27 + [800]) & [1]) )
	*($27 + [24]) = $25
	*($27 + [16]) = $23
	CALL sprintf(($27 + [448]), [1600], ($27 + [16]))
	$10 = *($21)
	if ( ((int_64)*($10 + [88]) <= (int_64)9999) ){ goto $label$112 }
	if ( ((int_64)*(($10 + [96])) != (int_64)1397703940) ){ goto $label$112 }
	$20 = *($0)
	$23 = (int_64)0
	$22 = (int_64)59
	$21 = [1664]
	$24 = (int_64)0
	
.LOOP $label$113:
	if ( ((uint_64)$23 > (uint_64)(int_64)5) ){ goto $label$118 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$117 }
	$11 = ($11 + [165])
	goto $label$116 
	
.LABEL $label$118
	$25 = (int_64)0
	if ( ((uint_64)$23 <= (uint_64)(int_64)11) ){ goto $label$115 }
	goto $label$114 
	
.LABEL $label$117
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$116
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$115
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$114
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$24 = ((int_64)$25 | (int_64)$24)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$113 }
	$23 = (int_64)0
	$25 = (int_64)59
	$21 = [1680]
	$26 = (int_64)0
	
.LOOP $label$119:
	$22 = (int_64)0
	if ( ((uint_64)$23 > (uint_64)(int_64)11) ){ goto $label$120 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$122 }
	$11 = ($11 + [165])
	goto $label$121 
	
.LABEL $label$122
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$121
	$22 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$25 & (int_64)4294967295))
	
.LABEL $label$120
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$26 = ((int_64)$22 | (int_64)$26)
	$25 = ((int_64)$25 + (int_64)-5)
	if ( ((int_64)$25 != (int_64)-6) ){ goto $label$119 }
	$23 = (int_64)0
	$22 = (int_64)59
	$21 = [1696]
	$19 = (int_64)0
	
.LOOP $label$123:
	if ( ((uint_64)$23 > (uint_64)(int_64)7) ){ goto $label$128 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$127 }
	$11 = ($11 + [165])
	goto $label$126 
	
.LABEL $label$128
	$25 = (int_64)0
	if ( ((uint_64)$23 <= (uint_64)(int_64)11) ){ goto $label$125 }
	goto $label$124 
	
.LABEL $label$127
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$126
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$125
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$124
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$19 = ((int_64)$25 | (int_64)$19)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$123 }
	$23 = *($10 + [8])
	*((($27 + [856]) + [20])) = *(($10 + [100]))
	*(($9 = (($27 + [856]) + [16]))) = *(($10 + [96]))
	*(($27 + [868])) = *(($10 + [92]))
	*($27 + [856]) = $23
	*($27 + [864]) = *($10 + [88])
	*($27 + [192]) = $26
	*($27 + [200]) = $19
	*($27 + [208]) = [0]
	*(($11 = (($27 + [192]) + [20]))) = [0]
	*(($10 = (($27 + [192]) + [24]))) = [0]
	*(($21 = CALL $198([16]))) = $20
	*($21 + [8]) = $24
	*(($15 = ($27 + [224]))) = [0]
	$16 = ($21 + [16])
	*($10) = $16
	*($11) = $16
	*($27 + [208]) = $21
	*($27 + [220]) = [0]
	*(($27 + [228])) = [0]
	CALL $61(($27 + [220]), [24])
	$21 = *($27 + [220])
	$11 = (*($15) - $21)
	CALL eosio_assert(((int_32)$11 > (int_32)[7]), [352])
	CALL memcpy($21, ($27 + [856]), [8])
	CALL eosio_assert(((int_32)($11 + [-8]) > (int_32)[7]), [352])
	CALL memcpy(($21 + [8]), (($27 + [856]) + [8]), [8])
	CALL eosio_assert(((int_32)($11 + [-16]) > (int_32)[7]), [352])
	CALL memcpy(($21 + [16]), $9, [8])
	CALL $62(($27 + [904]), ($27 + [192]))
	$21 = *($27 + [904])
	CALL send_inline($21, (*($27 + [908]) - $21))
	$21 = *($27 + [904])
	if ( ($21 == 0) ){ goto $label$129 }
	*($27 + [908]) = $21
	CALL $200($21)
	
.LABEL $label$129
	$21 = *($27 + [220])
	if ( ($21 == 0) ){ goto $label$130 }
	*(($27 + [224])) = $21
	CALL $200($21)
	
.LABEL $label$130
	$21 = *($27 + [208])
	if ( ($21 == 0) ){ goto $label$112 }
	*(($27 + [212])) = $21
	CALL $200($21)
	
.LABEL $label$112
	if ( ((int_64)$14 < (int_64)1) ){ goto $label$131 }
	$10 = *(($1 + [4]))
	$26 = *($10 + [80])
	$19 = *($0)
	$23 = (int_64)0
	$22 = (int_64)59
	$21 = [1664]
	$24 = (int_64)0
	
.LOOP $label$132:
	if ( ((uint_64)$23 > (uint_64)(int_64)5) ){ goto $label$137 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$136 }
	$11 = ($11 + [165])
	goto $label$135 
	
.LABEL $label$137
	$25 = (int_64)0
	if ( ((uint_64)$23 <= (uint_64)(int_64)11) ){ goto $label$134 }
	goto $label$133 
	
.LABEL $label$136
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$135
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$134
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$133
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$24 = ((int_64)$25 | (int_64)$24)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$132 }
	*(($27 + [912])) = [0]
	*($27 + [904]) = (int_64)0
	$21 = CALL strlen(($27 + [576]))
	if ( ((uint_32)$21 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$21 >= (uint_32)[11]) ){ goto $label$140 }
	*($27 + [904]) = ($21 << [1])
	$11 = (($27 + [904]) | [1])
	if ( $21 ){ goto $label$139 }
	goto $label$138 
	
.LABEL $label$140
	$9 = (($21 + [16]) & [-16])
	$11 = CALL $198($9)
	*($27 + [904]) = ($9 | [1])
	*($27 + [912]) = $11
	*($27 + [908]) = $21
	
.LABEL $label$139
	CALL memcpy($11, ($27 + [576]), $21)
	
.LABEL $label$138
	*(($11 + $21)) = [0]
	$11 = *($27 + [904])
	*($27 + [904]) = [0]
	$9 = *($27 + [908])
	*($27 + [908]) = [0]
	$23 = *(($10 + [8]))
	$25 = *($0)
	$10 = *($27 + [912])
	*($27 + [912]) = [0]
	*(($21 = CALL $198([16]))) = $19
	*($21 + [8]) = $24
	*($27 + [856]) = $21
	$21 = ($21 + [16])
	*($27 + [864]) = $21
	*($27 + [192]) = $25
	*($27 + [860]) = $21
	*($27 + [200]) = $23
	*($27 + [208]) = $14
	*(($27 + [216])) = $6
	*($27 + [224]) = $11
	*(($27 + [228])) = $9
	*(($21 = ($27 + [232]))) = $10
	CALL $63($26, (int_64)-3617168760277827584, ($27 + [856]), ($27 + [192]))
	if ( ((*($27 + [224]) & [1]) == 0) ){ goto $label$141 }
	CALL $200(*($21))
	
.LABEL $label$141
	$21 = *($27 + [856])
	if ( ($21 == 0) ){ goto $label$142 }
	*($27 + [860]) = $21
	CALL $200($21)
	
.LABEL $label$142
	if ( ((*($27 + [904]) & [1]) == 0) ){ goto $label$131 }
	CALL $200(*(($27 + [912])))
	
.LABEL $label$131
	if ( ((int_64)$12 < (int_64)1) ){ goto $label$143 }
	$19 = *(*(($1 + [4])) + [80])
	$20 = *($0)
	$23 = (int_64)0
	$22 = (int_64)59
	$21 = [1664]
	$24 = (int_64)0
	
.LOOP $label$144:
	if ( ((uint_64)$23 > (uint_64)(int_64)5) ){ goto $label$149 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$148 }
	$11 = ($11 + [165])
	goto $label$147 
	
.LABEL $label$149
	$25 = (int_64)0
	if ( ((uint_64)$23 <= (uint_64)(int_64)11) ){ goto $label$146 }
	goto $label$145 
	
.LABEL $label$148
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$147
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$146
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$145
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$24 = ((int_64)$25 | (int_64)$24)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$144 }
	$23 = (int_64)0
	$25 = (int_64)59
	$21 = [624]
	$26 = (int_64)0
	
.LOOP $label$150:
	$22 = (int_64)0
	if ( ((uint_64)$23 > (uint_64)(int_64)11) ){ goto $label$151 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$153 }
	$11 = ($11 + [165])
	goto $label$152 
	
.LABEL $label$153
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$152
	$22 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$25 & (int_64)4294967295))
	
.LABEL $label$151
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$26 = ((int_64)$22 | (int_64)$26)
	$25 = ((int_64)$25 + (int_64)-5)
	if ( ((int_64)$25 != (int_64)-6) ){ goto $label$150 }
	*(($27 + [912])) = [0]
	*($27 + [904]) = (int_64)0
	$21 = CALL strlen(($27 + [448]))
	if ( ((uint_32)$21 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$21 >= (uint_32)[11]) ){ goto $label$156 }
	*($27 + [904]) = ($21 << [1])
	$11 = (($27 + [904]) | [1])
	if ( $21 ){ goto $label$155 }
	goto $label$154 
	
.LABEL $label$156
	$10 = (($21 + [16]) & [-16])
	$11 = CALL $198($10)
	*($27 + [904]) = ($10 | [1])
	*($27 + [912]) = $11
	*($27 + [908]) = $21
	
.LABEL $label$155
	CALL memcpy($11, ($27 + [448]), $21)
	
.LABEL $label$154
	*(($11 + $21)) = [0]
	$11 = *($27 + [904])
	*($27 + [904]) = [0]
	$10 = *($27 + [908])
	*($27 + [908]) = [0]
	$9 = *($27 + [912])
	*($27 + [912]) = [0]
	$23 = *($0)
	*(($21 = CALL $198([16]))) = $20
	*($21 + [8]) = $24
	*($27 + [856]) = $21
	$21 = ($21 + [16])
	*($27 + [864]) = $21
	*($27 + [192]) = $23
	*($27 + [860]) = $21
	*($27 + [200]) = $26
	*($27 + [208]) = $12
	*(($27 + [216])) = $13
	*($27 + [224]) = $11
	*(($27 + [228])) = $10
	*(($21 = ($27 + [232]))) = $9
	CALL $63($19, (int_64)-3617168760277827584, ($27 + [856]), ($27 + [192]))
	if ( ((*($27 + [224]) & [1]) == 0) ){ goto $label$157 }
	CALL $200(*($21))
	
.LABEL $label$157
	$21 = *($27 + [856])
	if ( ($21 == 0) ){ goto $label$158 }
	*($27 + [860]) = $21
	CALL $200($21)
	
.LABEL $label$158
	if ( ((*($27 + [904]) & [1]) == 0) ){ goto $label$143 }
	CALL $200(*(($27 + [912])))
	
.LABEL $label$143
	if ( ((int_64)*($27 + [736]) < (int_64)1) ){ goto $label$159 }
	$23 = (int_64)0
	$25 = (int_64)59
	$21 = [176]
	$24 = (int_64)0
	
.LOOP $label$160:
	$22 = (int_64)0
	if ( ((uint_64)$23 > (uint_64)(int_64)11) ){ goto $label$161 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$163 }
	$11 = ($11 + [165])
	goto $label$162 
	
.LABEL $label$163
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$162
	$22 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$25 & (int_64)4294967295))
	
.LABEL $label$161
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$24 = ((int_64)$22 | (int_64)$24)
	$25 = ((int_64)$25 + (int_64)-5)
	if ( ((int_64)$25 != (int_64)-6) ){ goto $label$160 }
	$23 = (int_64)0
	$25 = (int_64)59
	$21 = [176]
	$26 = (int_64)0
	
.LOOP $label$164:
	$22 = (int_64)0
	if ( ((uint_64)$23 > (uint_64)(int_64)11) ){ goto $label$165 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$167 }
	$11 = ($11 + [165])
	goto $label$166 
	
.LABEL $label$167
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$166
	$22 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$25 & (int_64)4294967295))
	
.LABEL $label$165
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$26 = ((int_64)$22 | (int_64)$26)
	$25 = ((int_64)$25 + (int_64)-5)
	if ( ((int_64)$25 != (int_64)-6) ){ goto $label$164 }
	$23 = (int_64)0
	$22 = (int_64)59
	$21 = [1664]
	$19 = (int_64)0
	
.LOOP $label$168:
	if ( ((uint_64)$23 > (uint_64)(int_64)5) ){ goto $label$173 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$172 }
	$11 = ($11 + [165])
	goto $label$171 
	
.LABEL $label$173
	$25 = (int_64)0
	if ( ((uint_64)$23 <= (uint_64)(int_64)11) ){ goto $label$170 }
	goto $label$169 
	
.LABEL $label$172
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$171
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$170
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$169
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$19 = ((int_64)$25 | (int_64)$19)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$168 }
	$10 = *(($1 + [4]))
	*(($27 + [912])) = [0]
	*($27 + [904]) = (int_64)0
	$21 = CALL strlen([1712])
	if ( ((uint_32)$21 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$21 >= (uint_32)[11]) ){ goto $label$176 }
	*($27 + [904]) = ($21 << [1])
	$11 = (($27 + [904]) | [1])
	if ( $21 ){ goto $label$175 }
	goto $label$174 
	
.LABEL $label$176
	$9 = (($21 + [16]) & [-16])
	$11 = CALL $198($9)
	*($27 + [904]) = ($9 | [1])
	*($27 + [912]) = $11
	*($27 + [908]) = $21
	
.LABEL $label$175
	CALL memcpy($11, [1712], $21)
	
.LABEL $label$174
	*(($11 + $21)) = [0]
	CALL _ZNSt3__19to_stringEy(($27 + [416]), *(*(($1 + [4]))))
	$21 = *($27 + [416])
	$11 = ($21 & [1])
	$21 = CALL $207(($27 + [904]), ( *($27 + [424]) ? (($27 + [416]) | [1]) : $11 ), ( *($27 + [420]) ? uint_32($21 >> [1]) : $11 ))
	$11 = *($21)
	*($21) = [0]
	$9 = *($21 + [4])
	*($21 + [4]) = [0]
	$15 = *($21 + [8])
	*($21 + [8]) = [0]
	$23 = *(($10 + [8]))
	*(($10 = (($27 + [432]) + [8]))) = *((($27 + [736]) + [8]))
	*($27 + [432]) = *($27 + [736])
	*(($21 = CALL $198([16]))) = $26
	*($21 + [8]) = $19
	*(($27 + [212])) = *((($27 + [432]) + [12]))
	*((($27 + [192]) + [12])) = *($27 + [436])
	$16 = ($21 + [16])
	*($27 + [864]) = $16
	*((($27 + [192]) + [16])) = *($10)
	*($27 + [856]) = $21
	*($27 + [192]) = $23
	*($27 + [860]) = $16
	*($27 + [200]) = *($27 + [432])
	*($27 + [216]) = $11
	*(($27 + [220])) = $9
	*(($21 = ($27 + [224]))) = $15
	CALL $64($24, (int_64)8516769789752901632, ($27 + [856]), ($27 + [192]))
	if ( ((*($27 + [216]) & [1]) == 0) ){ goto $label$177 }
	CALL $200(*($21))
	
.LABEL $label$177
	$21 = *($27 + [856])
	if ( ($21 == 0) ){ goto $label$178 }
	*($27 + [860]) = $21
	CALL $200($21)
	
.LABEL $label$178
	if ( ((*($27 + [416]) & [1]) == 0) ){ goto $label$179 }
	CALL $200(*(($27 + [424])))
	
.LABEL $label$179
	if ( ((*($27 + [904]) & [1]) == 0) ){ goto $label$159 }
	CALL $200(*($27 + [912]))
	
.LABEL $label$159
	if ( ((int_64)*($27 + [752]) < (int_64)1) ){ goto $label$1 }
	$10 = ($27 + [752])
	$21 = ($1 + [4])
	if ( (CALL is_account(*(*($21) + [64])) == 0) ){ goto $label$182 }
	$9 = *($21)
	if ( ((int_64)*($9 + [8]) != (int_64)*($9 + [64])) ){ goto $label$181 }
	
.LABEL $label$182
	$23 = (int_64)0
	$25 = (int_64)59
	$21 = [176]
	$24 = (int_64)0
	
.LOOP $label$183:
	$22 = (int_64)0
	if ( ((uint_64)$23 > (uint_64)(int_64)11) ){ goto $label$184 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$186 }
	$11 = ($11 + [165])
	goto $label$185 
	
.LABEL $label$186
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$185
	$22 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$25 & (int_64)4294967295))
	
.LABEL $label$184
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$24 = ((int_64)$22 | (int_64)$24)
	$25 = ((int_64)$25 + (int_64)-5)
	if ( ((int_64)$25 != (int_64)-6) ){ goto $label$183 }
	$23 = (int_64)0
	$25 = (int_64)59
	$21 = [176]
	$26 = (int_64)0
	
.LOOP $label$187:
	$22 = (int_64)0
	if ( ((uint_64)$23 > (uint_64)(int_64)11) ){ goto $label$188 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$190 }
	$11 = ($11 + [165])
	goto $label$189 
	
.LABEL $label$190
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$189
	$22 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$25 & (int_64)4294967295))
	
.LABEL $label$188
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$26 = ((int_64)$22 | (int_64)$26)
	$25 = ((int_64)$25 + (int_64)-5)
	if ( ((int_64)$25 != (int_64)-6) ){ goto $label$187 }
	$23 = (int_64)0
	$22 = (int_64)59
	$21 = [1664]
	$19 = (int_64)0
	
.LOOP $label$191:
	if ( ((uint_64)$23 > (uint_64)(int_64)5) ){ goto $label$196 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$195 }
	$11 = ($11 + [165])
	goto $label$194 
	
.LABEL $label$196
	$25 = (int_64)0
	if ( ((uint_64)$23 <= (uint_64)(int_64)11) ){ goto $label$193 }
	goto $label$192 
	
.LABEL $label$195
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$194
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$193
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$192
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$19 = ((int_64)$25 | (int_64)$19)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$191 }
	$23 = (int_64)0
	$25 = (int_64)59
	$21 = [1792]
	$20 = (int_64)0
	
.LOOP $label$197:
	$22 = (int_64)0
	if ( ((uint_64)$23 > (uint_64)(int_64)11) ){ goto $label$198 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$200 }
	$11 = ($11 + [165])
	goto $label$199 
	
.LABEL $label$200
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$199
	$22 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$25 & (int_64)4294967295))
	
.LABEL $label$198
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$20 = ((int_64)$22 | (int_64)$20)
	$25 = ((int_64)$25 + (int_64)-5)
	if ( ((int_64)$25 != (int_64)-6) ){ goto $label$197 }
	*(($27 + [912])) = [0]
	*($27 + [904]) = (int_64)0
	$21 = CALL strlen([1712])
	if ( ((uint_32)$21 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$21 >= (uint_32)[11]) ){ goto $label$203 }
	*($27 + [904]) = ($21 << [1])
	$11 = (($27 + [904]) | [1])
	if ( $21 ){ goto $label$202 }
	goto $label$201 
	
.LABEL $label$203
	$9 = (($21 + [16]) & [-16])
	$11 = CALL $198($9)
	*($27 + [904]) = ($9 | [1])
	*($27 + [912]) = $11
	*($27 + [908]) = $21
	
.LABEL $label$202
	CALL memcpy($11, [1712], $21)
	
.LABEL $label$201
	*(($11 + $21)) = [0]
	CALL _ZNSt3__19to_stringEy(($27 + [416]), *(*(($1 + [4]))))
	$21 = *($27 + [416])
	$11 = ($21 & [1])
	$21 = CALL $207(($27 + [904]), ( *($27 + [424]) ? (($27 + [416]) | [1]) : $11 ), ( *($27 + [420]) ? uint_32($21 >> [1]) : $11 ))
	$11 = *($21)
	*($21) = [0]
	$9 = *($21 + [4])
	*($21 + [4]) = [0]
	$15 = *($21 + [8])
	*($21 + [8]) = [0]
	*(($16 = (($27 + [384]) + [8]))) = *(($10 + [8]))
	*($27 + [384]) = *($10)
	*(($21 = CALL $198([16]))) = $26
	*($21 + [8]) = $19
	*(($27 + [212])) = *((($27 + [384]) + [12]))
	*((($27 + [192]) + [12])) = *($27 + [388])
	$10 = ($21 + [16])
	*($27 + [864]) = $10
	*((($27 + [192]) + [16])) = *($16)
	*($27 + [856]) = $21
	*($27 + [192]) = $20
	*($27 + [860]) = $10
	*($27 + [200]) = *($27 + [384])
	*($27 + [216]) = $11
	*(($27 + [220])) = $9
	*(($21 = ($27 + [224]))) = $15
	CALL $64($24, (int_64)8516769789752901632, ($27 + [856]), ($27 + [192]))
	if ( ((*($27 + [216]) & [1]) == 0) ){ goto $label$204 }
	CALL $200(*($21))
	
.LABEL $label$204
	$21 = *($27 + [856])
	if ( ($21 == 0) ){ goto $label$205 }
	*($27 + [860]) = $21
	CALL $200($21)
	
.LABEL $label$205
	if ( ((*($27 + [416]) & [1]) == 0) ){ goto $label$206 }
	CALL $200(*(($27 + [424])))
	
.LABEL $label$206
	if ( ((*($27 + [904]) & [1]) == 0) ){ goto $label$180 }
	CALL $200(*($27 + [912]))
	goto $label$180 
	
.LABEL $label$181
	$23 = (int_64)0
	$25 = (int_64)59
	$21 = [176]
	$24 = (int_64)0
	
.LOOP $label$207:
	$22 = (int_64)0
	if ( ((uint_64)$23 > (uint_64)(int_64)11) ){ goto $label$208 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$210 }
	$11 = ($11 + [165])
	goto $label$209 
	
.LABEL $label$210
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$209
	$22 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$25 & (int_64)4294967295))
	
.LABEL $label$208
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$24 = ((int_64)$22 | (int_64)$24)
	$25 = ((int_64)$25 + (int_64)-5)
	if ( ((int_64)$25 != (int_64)-6) ){ goto $label$207 }
	$23 = (int_64)0
	$25 = (int_64)59
	$21 = [176]
	$26 = (int_64)0
	
.LOOP $label$211:
	$22 = (int_64)0
	if ( ((uint_64)$23 > (uint_64)(int_64)11) ){ goto $label$212 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$214 }
	$11 = ($11 + [165])
	goto $label$213 
	
.LABEL $label$214
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$213
	$22 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$25 & (int_64)4294967295))
	
.LABEL $label$212
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$26 = ((int_64)$22 | (int_64)$26)
	$25 = ((int_64)$25 + (int_64)-5)
	if ( ((int_64)$25 != (int_64)-6) ){ goto $label$211 }
	$23 = (int_64)0
	$22 = (int_64)59
	$21 = [1664]
	$19 = (int_64)0
	
.LOOP $label$215:
	if ( ((uint_64)$23 > (uint_64)(int_64)5) ){ goto $label$220 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$219 }
	$11 = ($11 + [165])
	goto $label$218 
	
.LABEL $label$220
	$25 = (int_64)0
	if ( ((uint_64)$23 <= (uint_64)(int_64)11) ){ goto $label$217 }
	goto $label$216 
	
.LABEL $label$219
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$218
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$217
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$216
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$19 = ((int_64)$25 | (int_64)$19)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$215 }
	*(($27 + [912])) = [0]
	*($27 + [904]) = (int_64)0
	$21 = CALL strlen([1744])
	if ( ((uint_32)$21 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$21 >= (uint_32)[11]) ){ goto $label$223 }
	*($27 + [904]) = ($21 << [1])
	$11 = (($27 + [904]) | [1])
	if ( $21 ){ goto $label$222 }
	goto $label$221 
	
.LABEL $label$223
	$15 = (($21 + [16]) & [-16])
	$11 = CALL $198($15)
	*($27 + [904]) = ($15 | [1])
	*($27 + [912]) = $11
	*($27 + [908]) = $21
	
.LABEL $label$222
	CALL memcpy($11, [1744], $21)
	
.LABEL $label$221
	*(($11 + $21)) = [0]
	CALL _ZNSt3__19to_stringEy(($27 + [416]), *(*(($1 + [4]))))
	$21 = *($27 + [416])
	$11 = ($21 & [1])
	$21 = CALL $207(($27 + [904]), ( *($27 + [424]) ? (($27 + [416]) | [1]) : $11 ), ( *($27 + [420]) ? uint_32($21 >> [1]) : $11 ))
	$11 = *($21)
	*($21) = [0]
	$15 = *($21 + [4])
	*($21 + [4]) = [0]
	$16 = *($21 + [8])
	*($21 + [8]) = [0]
	$23 = *(($9 + [64]))
	*(($9 = (($27 + [400]) + [8]))) = *(($10 + [8]))
	*($27 + [400]) = *($10)
	*(($21 = CALL $198([16]))) = $26
	*($21 + [8]) = $19
	*(($27 + [212])) = *((($27 + [400]) + [12]))
	*((($27 + [192]) + [12])) = *($27 + [404])
	$10 = ($21 + [16])
	*($27 + [864]) = $10
	*((($27 + [192]) + [16])) = *($9)
	*($27 + [856]) = $21
	*($27 + [192]) = $23
	*($27 + [860]) = $10
	*($27 + [200]) = *($27 + [400])
	*($27 + [216]) = $11
	*(($27 + [220])) = $15
	*(($21 = ($27 + [224]))) = $16
	CALL $64($24, (int_64)8516769789752901632, ($27 + [856]), ($27 + [192]))
	if ( ((*($27 + [216]) & [1]) == 0) ){ goto $label$224 }
	CALL $200(*($21))
	
.LABEL $label$224
	$21 = *($27 + [856])
	if ( ($21 == 0) ){ goto $label$225 }
	*($27 + [860]) = $21
	CALL $200($21)
	
.LABEL $label$225
	if ( ((*($27 + [416]) & [1]) == 0) ){ goto $label$226 }
	CALL $200(*(($27 + [424])))
	
.LABEL $label$226
	if ( ((*($27 + [904]) & [1]) == 0) ){ goto $label$180 }
	CALL $200(*($27 + [912]))
	
.LABEL $label$180
	$11 = *($21 + [104])
	$10 = ($1 + [4])
	$21 = *($10)
	$9 = CALL strlen([1808])
	if ( ((int_32)$9 != (int_32)( *(($21 + [108])) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$233 }
	if ( (CALL $211(($21 + [104]), [0], [-1], [1808], $9) == 0) ){ goto $label$232 }
	
.LABEL $label$233
	$11 = *($21 + [104])
	$21 = *($10)
	$9 = CALL strlen([1824])
	if ( ((int_32)$9 != (int_32)( *(($21 + [108])) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$1 }
	if ( (CALL $211(($21 + [104]), [0], [-1], [1824], $9) == 0) ){ goto $label$231 }
	goto $label$1 
	
.LABEL $label$232
	$15 = *(($0 + [112]))
	$10 = *(($0 + [116]))
	if ( ((int_32)$10 == (int_32)$15) ){ goto $label$234 }
	$21 = ($10 + [-24])
	$9 = ([0] - $15)
	
.LOOP $label$235:
	if ( ((int_64)*(*($21)) == (int_64)6) ){ goto $label$234 }
	$10 = $21
	$11 = ($21 + [-24])
	$21 = $11
	if ( ((int_32)($11 + $9) != (int_32)[-24]) ){ goto $label$235 }
	
.LABEL $label$234
	$11 = ($0 + [88])
	if ( ((int_32)$10 == (int_32)$15) ){ goto $label$230 }
	$21 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($21 + [16]) == (int_32)$11), [224])
	if ( $21 ){ goto $label$229 }
	goto $label$1 
	
.LABEL $label$231
	$15 = *(($0 + [112]))
	$10 = *(($0 + [116]))
	if ( ((int_32)$10 == (int_32)$15) ){ goto $label$236 }
	$21 = ($10 + [-24])
	$9 = ([0] - $15)
	
.LOOP $label$237:
	if ( ((int_64)*(*($21)) == (int_64)7) ){ goto $label$236 }
	$10 = $21
	$11 = ($21 + [-24])
	$21 = $11
	if ( ((int_32)($11 + $9) != (int_32)[-24]) ){ goto $label$237 }
	
.LABEL $label$236
	$11 = ($0 + [88])
	if ( ((int_32)$10 == (int_32)$15) ){ goto $label$228 }
	$21 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($21 + [16]) == (int_32)$11), [224])
	if ( $21 ){ goto $label$227 }
	goto $label$1 
	
.LABEL $label$230
	$21 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)7235159551874301952, (int_64)6)
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$1 }
	$21 = CALL $40($11, $21)
	CALL eosio_assert(((int_32)*($21 + [16]) == (int_32)$11), [224])
	
.LABEL $label$229
	$25 = *($0)
	CALL eosio_assert([1], [368])
	CALL eosio_assert(((int_32)*($21 + [16]) == (int_32)$11), [416])
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$15()), [464])
	*($21 + [8]) = ((int_64)*($21 + [8]) + (int_64)*($27 + [752]))
	$23 = *($21)
	CALL eosio_assert([1], [528])
	CALL eosio_assert([1], [352])
	CALL memcpy(($27 + [192]), $21, [8])
	CALL eosio_assert([1], [352])
	CALL memcpy((($27 + [192]) | [8]), ($21 + [8]), [8])
	CALL db_update_i64(*($21 + [20]), $25, ($27 + [192]), [16])
	$21 = ($0 + [104])
	if ( (uint_64)($23 <= *($21)) ){ goto $label$1 }
	*($21) = ( (int_64)-2 ? ((int_64)$23 + (int_64)1) : ((uint_64)$23 > (uint_64)(int_64)-3) )
	goto $label$1 
	
.LABEL $label$228
	$21 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)7235159551874301952, (int_64)7)
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$1 }
	$21 = CALL $40($11, $21)
	CALL eosio_assert(((int_32)*($21 + [16]) == (int_32)$11), [224])
	
.LABEL $label$227
	$25 = *($0)
	CALL eosio_assert([1], [368])
	CALL eosio_assert(((int_32)*($21 + [16]) == (int_32)$11), [416])
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$15()), [464])
	*($21 + [8]) = ((int_64)*($21 + [8]) + (int_64)*($27 + [752]))
	$23 = *($21)
	CALL eosio_assert([1], [528])
	CALL eosio_assert([1], [352])
	CALL memcpy(($27 + [192]), $21, [8])
	CALL eosio_assert([1], [352])
	CALL memcpy((($27 + [192]) | [8]), ($21 + [8]), [8])
	CALL db_update_i64(*($21 + [20]), $25, ($27 + [192]), [16])
	$21 = ($0 + [104])
	if ( (uint_64)($23 <= *($21)) ){ goto $label$1 }
	*($21) = ( (int_64)-2 ? ((int_64)$23 + (int_64)1) : ((uint_64)$23 > (uint_64)(int_64)-3) )
	goto $label$1 
	
.LABEL $label$10
	CALL $202(($27 + [800]))
	
.LABEL $label$9
	CALL $202(($27 + [904]))
	
.LABEL $label$8
	CALL $202(($27 + [904]))
	
.LABEL $label$7
	CALL $202(($27 + [904]))
	
.LABEL $label$6
	CALL $202(($27 + [904]))
	
.LABEL $label$5
	CALL $221(($27 + [784]))
	
.LABEL $label$4
	CALL $221(($27 + [768]))
	
.LABEL $label$3
	CALL $202(($27 + [904]))
	
.LABEL $label$2
	CALL $221(($27 + [704]))
	
.LABEL $label$1
	if ( ((int_64)$7 < (int_64)1) ){ goto $label$239 }
	*($27) = *($18)
	CALL sprintf(($27 + [192]), [1840], $27)
	$18 = *(($1 + [4]))
	$20 = *($18 + [80])
	$23 = (int_64)0
	$25 = (int_64)59
	$21 = [1440]
	$24 = (int_64)0
	
.LOOP $label$240:
	$22 = (int_64)0
	if ( ((uint_64)$23 > (uint_64)(int_64)11) ){ goto $label$241 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$243 }
	$11 = ($11 + [165])
	goto $label$242 
	
.LABEL $label$243
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$242
	$22 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$25 & (int_64)4294967295))
	
.LABEL $label$241
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$24 = ((int_64)$22 | (int_64)$24)
	$25 = ((int_64)$25 + (int_64)-5)
	if ( ((int_64)$25 != (int_64)-6) ){ goto $label$240 }
	$23 = (int_64)0
	$22 = (int_64)59
	$21 = [1664]
	$26 = (int_64)0
	
.LOOP $label$244:
	if ( ((uint_64)$23 > (uint_64)(int_64)5) ){ goto $label$249 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$248 }
	$11 = ($11 + [165])
	goto $label$247 
	
.LABEL $label$249
	$25 = (int_64)0
	if ( ((uint_64)$23 <= (uint_64)(int_64)11) ){ goto $label$246 }
	goto $label$245 
	
.LABEL $label$248
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$247
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$246
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$245
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$26 = ((int_64)$25 | (int_64)$26)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$244 }
	$23 = (int_64)0
	$25 = (int_64)59
	$21 = [1440]
	$19 = (int_64)0
	
.LOOP $label$250:
	$22 = (int_64)0
	if ( ((uint_64)$23 > (uint_64)(int_64)11) ){ goto $label$251 }
	$11 = *($21)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$253 }
	$11 = ($11 + [165])
	goto $label$252 
	
.LABEL $label$253
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$252
	$22 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$25 & (int_64)4294967295))
	
.LABEL $label$251
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$19 = ((int_64)$22 | (int_64)$19)
	$25 = ((int_64)$25 + (int_64)-5)
	if ( ((int_64)$25 != (int_64)-6) ){ goto $label$250 }
	*(($27 + [424])) = [0]
	*($27 + [416]) = (int_64)0
	$21 = CALL strlen(($27 + [192]))
	if ( ((uint_32)$21 >= (uint_32)[-16]) ){ goto $label$238 }
	if ( ((uint_32)$21 >= (uint_32)[11]) ){ goto $label$256 }
	*($27 + [416]) = ($21 << [1])
	$11 = (($27 + [416]) | [1])
	if ( $21 ){ goto $label$255 }
	goto $label$254 
	
.LABEL $label$256
	$10 = (($21 + [16]) & [-16])
	$11 = CALL $198($10)
	*($27 + [416]) = ($10 | [1])
	*($27 + [424]) = $11
	*($27 + [420]) = $21
	
.LABEL $label$255
	CALL memcpy($11, ($27 + [192]), $21)
	
.LABEL $label$254
	*(($11 + $21)) = [0]
	$11 = *($27 + [416])
	*($27 + [416]) = [0]
	$10 = *($27 + [420])
	*($27 + [420]) = [0]
	$9 = *($27 + [424])
	*($27 + [424]) = [0]
	$23 = *(($18 + [8]))
	*(($21 = CALL $198([16]))) = $24
	*($21 + [8]) = $26
	*($27 + [904]) = $21
	$21 = ($21 + [16])
	*($27 + [912]) = $21
	*($27 + [856]) = $19
	*($27 + [908]) = $21
	*($27 + [864]) = $23
	*($27 + [872]) = $7
	*(($27 + [880])) = $8
	*($27 + [888]) = $11
	*(($27 + [892])) = $10
	*(($21 = ($27 + [896]))) = $9
	CALL $63($20, (int_64)-3617168760277827584, ($27 + [904]), ($27 + [856]))
	if ( ((*($27 + [888]) & [1]) == 0) ){ goto $label$257 }
	CALL $200(*($21))
	
.LABEL $label$257
	$21 = *($27 + [904])
	if ( ($21 == 0) ){ goto $label$258 }
	*($27 + [908]) = $21
	CALL $200($21)
	
.LABEL $label$258
	if ( ((*($27 + [416]) & [1]) == 0) ){ goto $label$239 }
	CALL $200(*(($27 + [424])))
	
.LABEL $label$239
	$23 = (int_64)0
	$21 = ($1 + [4])
	$11 = *($21)
	$24 = *(($11 + [96]))
	$25 = ((int_64)((int_64)$25 >> (int_64)63) << (int_64)2) | (int_64)(uint_64)$25 >> (uint_64)(int_64)62
	$25 = *($11 + [88])
	$22 = ((int_64)$25 << (int_64)2)
	CALL eosio_assert(( (uint_64)($22 <= (int_64)4611686018427387904) ? ((int_64)$25)) < (int_64)0) : (int_64)($25 == 0) ), [1072])
	CALL eosio_assert(( ((uint_64)$22 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$25 > (int_64)-1) : ((int_64)$25 == (int_64)-1) ), [1104])
	$21 = *($21)
	CALL $65(($27 + [856]), $3, $5)
	CALL $65(($27 + [904]), $3, $4)
	$25 = *($11 + [8])
	$26 = *($11)
	*(($27 + [216])) = $24
	*((($27 + [192]) + [40])) = $6
	*($27 + [192]) = $26
	*($27 + [208]) = $22
	*($27 + [224]) = $14
	*($27 + [200]) = $25
	CALL $222((($27 + [192]) + [48]), ($21 + [16]))
	*(($27 + [280])) = *(($21 + [56]))
	*(($27 + [272])) = *(($21 + [48]))
	*(($27 + [264])) = *(($21 + [40]))
	*($27 + [256]) = *($21 + [32])
	CALL memcpy((($27 + [192]) + [96]), ($2 + [76]), [66])
	*(($27 + [364])) = *((($27 + [856]) + [8]))
	*(($27 + [376])) = *((($27 + [904]) + [8]))
	*($27 + [356 align=4]) = *($27 + [856])
	*($27 + [368]) = *($27 + [904])
	$19 = *($0)
	$22 = (int_64)59
	$21 = [1664]
	$24 = (int_64)0
	
.LOOP $label$259:
	if ( ((uint_64)$23 > (uint_64)(int_64)5) ){ goto $label$264 }
	$2 = *($21)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$263 }
	$2 = ($2 + [165])
	goto $label$262 
	
.LABEL $label$264
	$25 = (int_64)0
	if ( ((uint_64)$23 <= (uint_64)(int_64)11) ){ goto $label$261 }
	goto $label$260 
	
.LABEL $label$263
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$262
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$261
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$260
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$24 = ((int_64)$25 | (int_64)$24)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$259 }
	$23 = (int_64)0
	$22 = (int_64)59
	$21 = [1888]
	$26 = (int_64)0
	
.LOOP $label$265:
	if ( ((uint_64)$23 > (uint_64)(int_64)5) ){ goto $label$270 }
	$2 = *($21)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$269 }
	$2 = ($2 + [165])
	goto $label$268 
	
.LABEL $label$270
	$25 = (int_64)0
	if ( ((uint_64)$23 <= (uint_64)(int_64)11) ){ goto $label$267 }
	goto $label$266 
	
.LABEL $label$269
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$268
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$267
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$266
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$26 = ((int_64)$25 | (int_64)$26)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$265 }
	*($27 + [864]) = $26
	*($27 + [856]) = $19
	*(($21 = CALL $198([16]))) = $19
	*($21 + [8]) = $24
	$2 = [0]
	*(($1 = ($27 + [888]))) = [0]
	$11 = ($21 + [16])
	*(($27 + [880])) = $11
	*(($27 + [876])) = $11
	*($27 + [872]) = $21
	*($27 + [884]) = [0]
	*(($27 + [892])) = [0]
	*($27 + [416]) = ($27 + [920])
	*($27 + [920]) = [48]
	*($27 + [904]) = ($27 + [192])
	CALL $66(($27 + [904]), ($27 + [416]))
	$21 = *($27 + [920])
	if ( ($21 == 0) ){ goto $label$272 }
	$11 = ($27 + [884])
	CALL $61($11, $21)
	$2 = *($1)
	$21 = *($11)
	goto $label$271 
	
.LABEL $label$272
	$21 = [0]
	
.LABEL $label$271
	*($27 + [908]) = $21
	*($27 + [904]) = $21
	*($27 + [912]) = $2
	*($27 + [920]) = ($27 + [904])
	*($27 + [416]) = ($27 + [192])
	CALL $67(($27 + [416]), ($27 + [920]))
	CALL $62(($27 + [904]), ($27 + [856]))
	$21 = *($27 + [904])
	CALL send_inline($21, (*($27 + [908]) - $21))
	$21 = *($27 + [904])
	if ( ($21 == 0) ){ goto $label$273 }
	*($27 + [908]) = $21
	CALL $200($21)
	
.LABEL $label$273
	$21 = *($27 + [884])
	if ( ($21 == 0) ){ goto $label$274 }
	*(($27 + [888])) = $21
	CALL $200($21)
	
.LABEL $label$274
	$21 = *($27 + [872])
	if ( ($21 == 0) ){ goto $label$275 }
	*(($27 + [876])) = $21
	CALL $200($21)
	
.LABEL $label$275
	if ( ((*(($27 + [368])) & [1]) == 0) ){ goto $label$276 }
	CALL $200(*(($27 + [376])))
	
.LABEL $label$276
	if ( ((*(($27 + [356])) & [1]) == 0) ){ goto $label$277 }
	CALL $200(*(($27 + [364])))
	
.LABEL $label$277
	if ( ((*($27 + [240]) & [1]) == 0) ){ goto $label$278 }
	CALL $200(*(($27 + [248])))
	
.LABEL $label$278
	if ( ((*($27 + [800]) & [1]) == 0) ){ goto $label$279 }
	CALL $200(*(($27 + [808])))
	
.LABEL $label$279
	*([0] + [4]) = ($27 + [928])
	return (unreachable)
	
.LABEL $label$238
	CALL $202(($27 + [416]))
	$21
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC strnlen (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL memchr($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [592])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $198([64])) + [48]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [208])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((uint_32)($4 + [-8]) > (uint_32)[33]), [208])
	CALL memcpy(($6 + [8]), ($7 + [8]), [34])
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $42(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $200($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $198(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $221($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $200($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $200($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $198(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $221($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $200($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $200($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [592])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $198([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [208])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [208])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $41(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $200($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $47 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [16]) = (int_64)0
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	CALL eosio_assert([1], [976])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [1040])
	*(($0 + [72])) = [0]
	*($0 + [64 align=4]) = (int_64)0
	*($0 + [208]) = [0]
	*(($0 + [212])) = [0]
	*(($0 + [216])) = [0]
	*($0 + [220]) = [0]
	*(($0 + [224])) = [0]
	*(($0 + [228])) = [0]
	*($0 + [232]) = [0]
	*(($0 + [236])) = [0]
	*(($0 + [240])) = [0]
	*($0 + [248]) = (int_64)0
	*(($2 = ($0 + [256]))) = (int_64)1398362884
	CALL eosio_assert([1], [976])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [1040])
	*(($2 = ($0 + [272]))) = (int_64)1398362884
	*($0 + [264]) = (int_64)0
	CALL eosio_assert([1], [976])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [1040])
	*(($2 = ($0 + [288]))) = (int_64)1398362884
	*($0 + [280]) = (int_64)0
	CALL eosio_assert([1], [976])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [1040])
	*(($0 + [304])) = [0]
	*($0 + [296 align=4]) = (int_64)0
	CALL $110($0)
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$0), [224])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-5868465763601350656, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $43($0, $5)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$0), [224])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [592])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $198([128])) + [24]) = [0]
	*($4 + [16 align=4]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)1398362884
	CALL eosio_assert([1], [976])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [1040])
	*($4 + [112]) = [0]
	*($4 + [104 align=4]) = (int_64)0
	*($4 + [116]) = $0
	CALL $111(($8 + [32]), $4)
	*($4 + [120]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [120])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $112($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((*($5 + [104]) & [1]) == 0) ){ goto $label$15 }
	CALL $200(*(($5 + [112])))
	
.LABEL $label$15
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL $200(*(($5 + [24])))
	
.LABEL $label$16
	CALL $200($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [96])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [100])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [104])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [108])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [112])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [116])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [120])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [124])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [128])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [132])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [136])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [140])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [144])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [148])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [152])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [156])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [160])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [164])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [168])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [172])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [176])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [180])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [184])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [188])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [192])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [196])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [200])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [204])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [208])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [212])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [216])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [220])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [224])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [228])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [232])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [236])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [240])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [244])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [248])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [252])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [256])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [208])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [208])
	CALL memcpy($2, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $222 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $198($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $234 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$18
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$16
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$15
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$9
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$8
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$7
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$5
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$3
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($4, *($1))
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	goto $label$1 
	
.LABEL $label$2
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$3 = *($1)
	*(($0 + [8])) = *($1 + [8])
	*($0) = $3
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	$1
}

int_32 .FUNC __fwritex (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($2 + [16])
	if ( $6 ){ goto $label$2 }
	$6 = [0]
	if ( CALL __towrite($2) ){ goto $label$1 }
	$6 = *(($2 + [16]))
	
.LABEL $label$2
	$7 = *($2 + [20])
	if ( ((uint_32)($6 - $7) >= (uint_32)$1) ){ goto $label$3 }
	return CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	
.LABEL $label$3
	$8 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + $1)
	$8 = [0]
	$6 = [0]
	
.LOOP $label$5:
	if ( (($1 + $6) == 0) ){ goto $label$4 }
	$5 = ($3 + $6)
	$4 = ($6 + [-1])
	$6 = $4
	if ( ((int_32)*(($5 + [-1])) != (int_32)[10]) ){ goto $label$5 }
	$8 = (($1 + $4) + [1])
	$6 = CALL int_32 $2((int_32 $0), (int_32 $8), (int_32 *($2 + [36])))
	if ( ($6 <= $8) ){ goto $label$1 }
	$1 = ((int_32)$4 ^ (int_32)[-1])
	$0 = (($3 + $4) + [1])
	$7 = *(($2 + [20]))
	
.LABEL $label$4
	CALL memcpy($7, $0, $1)
	*(($6 = ($2 + [20]))) = (*($6) + $1)
	return ($8 + $1)
	
.LABEL $label$1
	return $6
}

int_32 .FUNC vsprintf (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL vsnprintf($0, [2147483647], $1, $2)
}

int_32 .FUNC snprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $3
	$3 = CALL vsnprintf($0, $1, $2, $3)
	*([0] + [4]) = ($4 + [16])
	return $3
}

int_32 .FUNC $167 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [8]) = [0]
	$4 = *($3 + [8])
	*($7 + [16]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$6 = ($7 + [8])
	$5 = $3
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL $199($4)
	*($7 + [8]) = $6
	$5 = *($3)
	
.LABEL $label$1
	CALL memcpy($6, $5, $4)
	*($7 + [20]) = *($3 + [12])
	CALL $169($0, ($7 + [8]), [0])
	if ( (*(($7 + [16])) <= [9]) ){ goto $label$3 }
	$3 = *($7 + [8])
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $201($3)
	
.LABEL $label$3
	*($0 + [16]) = $1
	*($0 + [24]) = $1
	*($0 + [28]) = $2
	*($0 + [32]) = [0]
	*(($0 + [20])) = $1
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$8 }
	CALL void ($7 + [24])((int_32 ($0 + [4])), (int_32 $1), (int_32 $2), (int_32 *(($3 & [-2]) + [4])))
	$1 = *($7 + [24])
	if ( ((int_32)$1 == (int_32)*($0 + [28])) ){ goto $label$7 }
	$2 = *($7 + [28])
	goto $label$5 
	
.LABEL $label$8
	*($7 + [28]) = $2
	*($7 + [24]) = $2
	$1 = $2
	goto $label$6 
	
.LABEL $label$7
	$2 = *($7 + [28])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$5 }
	
.LABEL $label$6
	if ( ((int_32)*(($0 + [20])) != (int_32)$2) ){ goto $label$5 }
	*(($0 + [32])) = [1]
	
.LABEL $label$5
	*(($0 + [20])) = $1
	$1 = ($0 + [24])
	*(($0 + [16])) = *($1)
	*($1) = $2
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
	return $0
}

int_32 .FUNC $166 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [272])
	*([0] + [4]) = $7
	$5 = *($1 + [8])
	$6 = *($1 + [4])
	$4 = *($1)
	*($7 + [176]) = [0]
	$3 = *($2 + [8])
	*($7 + [184]) = $3
	$1 = ($4 & [1])
	$5 = ( $5 ? ($1 + [1]) : $1 )
	$1 = ($5 + ( $6 ? uint_32($4 >> [1]) : $1 ))
	if ( ((uint_32)$3 > (uint_32)[8]) ){ goto $label$2 }
	$4 = ($7 + [176])
	$6 = $2
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL $199($3)
	*($7 + [176]) = $4
	$6 = *($2)
	
.LABEL $label$1
	CALL memcpy($4, $6, $3)
	*($7 + [188]) = *($2 + [12])
	$1 = CALL $167(($7 + [192]), $5, $1, ($7 + [176]))
	$2 = [0]
	*($7 + [232]) = [0]
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$3 }
	*($7 + [232]) = $3
	if ( ($3 & [1]) ){ goto $label$4 }
	CALL void ($1 + [4])((int_32 (($7 + [232]) | [4])), (int_32 [0]), (int_32 *(($3 & [-2]))))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	*((($7 + [232]) + [12])) = *(($1 + [12]))
	*($7 + [236 align=4]) = *($1 + [4 align=4])
	$2 = $3
	
.LABEL $label$3
	*($7 + [248]) = *($1 + [16 align=4])
	*($7 + [256]) = *($1 + [24])
	*($7 + [260]) = *($1 + [28])
	*($7 + [264]) = *($1 + [32])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ($2 & [1]) ){ goto $label$6 }
	$2 = *(($2 & [-2]))
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ($1 + [4])
	CALL void $3((int_32 $3), (int_32 [2]), (int_32 $2))
	
.LABEL $label$6
	*($1) = [0]
	
.LABEL $label$5
	if ( (*(($7 + [184])) <= [9]) ){ goto $label$7 }
	$1 = *($7 + [176])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $201($1)
	
.LABEL $label$7
	*(($7 + [116])) = [0]
	*($7 + [96]) = [0]
	*($7 + [124]) = [0]
	*($7 + [120]) = [0]
	*($7 + [112]) = [0]
	*($7 + [128]) = [1]
	*($7 + [136]) = [0]
	*($7 + [164]) = [0]
	*($7 + [160]) = [0]
	*($7 + [168]) = [1]
	*($7 + [152]) = *($7 + [112])
	*($7 + [40]) = [0]
	$1 = [0]
	$2 = *($7 + [232])
	if ( ($2 == 0) ){ goto $label$8 }
	*($7 + [40]) = $2
	if ( ($2 & [1]) ){ goto $label$9 }
	CALL void (($7 + [232]) | [4])((int_32 (($7 + [40]) | [4])), (int_32 [0]), (int_32 *(($2 & [-2]))))
	$1 = *($7 + [136])
	goto $label$8 
	
.LABEL $label$9
	*((($7 + [40]) + [12])) = *((($7 + [232]) + [12]))
	*($7 + [44 align=4]) = *($7 + [236 align=4])
	$1 = [0]
	
.LABEL $label$8
	*($7 + [56]) = *((($7 + [232]) + [16]))
	*($7 + [64]) = *((($7 + [232]) + [24]))
	*($7 + [68]) = *((($7 + [232]) + [28]))
	*($7 + [72]) = *((($7 + [232]) + [32]))
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	*($7) = $1
	if ( ($1 & [1]) ){ goto $label$11 }
	CALL void (($7 + [136]) | [4])((int_32 ($7 | [4])), (int_32 [0]), (int_32 *(($1 & [-2]))))
	goto $label$10 
	
.LABEL $label$11
	*(($7 + [12])) = *((($7 + [136]) + [12]))
	*($7 + [4 align=4]) = *($7 + [140 align=4])
	
.LABEL $label$10
	*($7 + [16]) = *((($7 + [136]) + [16]))
	*($7 + [24]) = *((($7 + [136]) + [24]))
	*($7 + [28]) = *((($7 + [136]) + [28]))
	*($7 + [32]) = *((($7 + [136]) + [32]))
	$3 = CALL $168(($7 + [80]), ($7 + [40]), $7)
	$1 = *($7)
	if ( ($1 == 0) ){ goto $label$12 }
	if ( ($1 & [1]) ){ goto $label$13 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$13 }
	$2 = ($7 | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$13
	*($7) = [0]
	
.LABEL $label$12
	$1 = *($7 + [40])
	if ( ($1 == 0) ){ goto $label$14 }
	if ( ($1 & [1]) ){ goto $label$15 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$15 }
	$2 = (($7 + [40]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$15
	*($7 + [40]) = [0]
	
.LABEL $label$14
	$4 = *($0)
	*($0) = *($3)
	*($3) = $4
	$1 = *($0 + [4])
	*($0 + [4]) = *($3 + [4])
	*($3 + [4]) = $1
	$2 = *($0 + [8])
	*($0 + [8]) = *($3 + [8])
	*($3 + [8]) = $2
	if ( ($4 == 0) ){ goto $label$16 }
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$18 }
	$2 = ([0] - $4)
	$1 = ($1 + [-12])
	
.LOOP $label$19:
	if ( ((*($1) & [1]) == 0) ){ goto $label$20 }
	CALL $200(*(($1 + [8])))
	
.LABEL $label$20
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $2) != (int_32)[-12]) ){ goto $label$19 }
	$1 = *($3)
	goto $label$17 
	
.LABEL $label$18
	$1 = $4
	
.LABEL $label$17
	*(($3 + [4])) = $4
	CALL $200($1)
	
.LABEL $label$16
	$1 = *($7 + [136])
	if ( ($1 == 0) ){ goto $label$21 }
	if ( ($1 & [1]) ){ goto $label$22 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$22 }
	$2 = (($7 + [136]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$22
	*($7 + [136]) = [0]
	
.LABEL $label$21
	$1 = *($7 + [232])
	if ( ($1 == 0) ){ goto $label$23 }
	if ( ($1 & [1]) ){ goto $label$24 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$24 }
	$2 = (($7 + [232]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$24
	*($7 + [232]) = [0]
	
.LABEL $label$23
	*([0] + [4]) = ($7 + [272])
	return $0
}

void .FUNC $165 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $198(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $221($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $200($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $200($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [592])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $198([64])) + [48]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [208])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((uint_32)($4 + [-8]) > (uint_32)[31]), [208])
	CALL memcpy(($6 + [16]), ($7 + [8]), [32])
	*($6 + [56]) = [-1]
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $165(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $200($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $163 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	*($10 + [40]) = (int_64)0
	*(($10 + [24])) = *(($2 + [24]))
	*(($10 + [16])) = *(($2 + [16]))
	*($10 + [8]) = *(($2 + [8]))
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx256_lowerbound(*($8), *($8 + [8]), (int_64)6301285363369377792, $10, [2], ($10 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [40])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [224])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $164($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)6301285363369377792, $5))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [224])
	
.LABEL $label$4
	*(($2 + [56])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC $162 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $200($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $200($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $200($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $200($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $200($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $200($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $200($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $200($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $161 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [144])
	*([0] + [4]) = $12
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [3568]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)9) ){ goto $label$6 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [3568]
	$10 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$7 > (uint_64)(int_64)9) ){ goto $label$12 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$3 = ($3 + [165])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$7 }
	$11 = [0]
	*(($12 + [128])) = [0]
	*($12 + [104]) = $10
	*($12 + [96]) = $8
	*($12 + [112]) = (int_64)-1
	*($12 + [120]) = (int_64)0
	*($12 + [132]) = [0]
	*($12 + [88]) = ($12 + [96])
	*($12) = $1
	CALL $51(($12 + [32]), $12)
	$5 = *($2)
	$3 = ($5 & [1])
	$5 = CALL $207(($12 + [32]), ( *($2 + [8]) ? ($2 + [1]) : $3 ), ( *($2 + [4]) ? uint_32($5 >> [1]) : $3 ))
	$3 = ($5 + [8])
	*((($12 + [72]) + [8])) = *($3)
	*($12 + [72]) = *($5)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($3) = [0]
	if ( ((*($12 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL $200(*($12 + [40]))
	
.LABEL $label$13
	$5 = *($12 + [72])
	$3 = ($5 & [1])
	CALL sha256(( *($12 + [80]) ? (($12 + [72]) | [1]) : $3 ), ( *($12 + [76]) ? uint_32($5 >> [1]) : $3 ), ($12 + [32]))
	$7 = *($12 + [56])
	$9 = *($12 + [48])
	$6 = *($12 + [40])
	$8 = *($12 + [32])
	CALL eosio_assert([1], [3696])
	*($12 + [8]) = $8
	*($12) = $6
	CALL eosio_assert([1], [3696])
	*(($12 + [24])) = $9
	*($12 + [16]) = $7
	CALL $163(($12 + [136]), ($12 + [88]), $12)
	$5 = *($12 + [140])
	if ( ($5 == 0) ){ goto $label$14 }
	$6 = *(($5 + [40]))
	$8 = *(($5 + [32]))
	$7 = *(($5 + [24]))
	$9 = *($5 + [16])
	CALL eosio_assert([1], [3696])
	CALL eosio_assert([1], [3696])
	if ( ((int_64)((int_64)((int_64)$7 ^ (int_64)*($12)) | (int_64)((int_64)$9 ^ (int_64)*($12 + [8]))) != (int_64)0) ){ goto $label$14 }
	if ( ((int_64)((int_64)((int_64)*(($12 + [16])) ^ (int_64)$6) | (int_64)((int_64)*(($12 + [24])) ^ (int_64)$8)) != (int_64)0) ){ goto $label$14 }
	$11 = ((int_32)*($12 + [140]) != (int_32)[0])
	
.LABEL $label$14
	if ( ((*($12 + [72]) & [1]) == 0) ){ goto $label$15 }
	CALL $200(*(($12 + [80])))
	
.LABEL $label$15
	$2 = *($12 + [120])
	if ( ($2 == 0) ){ goto $label$16 }
	$4 = ($12 + [124])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$20 }
	CALL $200($3)
	
.LABEL $label$20
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$19 }
	$5 = *(($12 + [120]))
	goto $label$17 
	
.LABEL $label$18
	$5 = $2
	
.LABEL $label$17
	*($4) = $2
	CALL $200($5)
	
.LABEL $label$16
	*([0] + [4]) = ($12 + [144])
	return $11
}

int_32 .FUNC $160 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($6) = [0]
	$4 = *($2 + [8])
	*($6 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $6
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL $199($4)
	*($6) = $5
	$2 = *($2)
	
.LABEL $label$1
	CALL memcpy($5, $2, $4)
	*($6 + [32]) = [0]
	$2 = *(($6 + [8]))
	*($6 + [40]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $6
	$5 = ($6 + [32])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL $199($2)
	*($6 + [32]) = $5
	$4 = *($6)
	
.LABEL $label$3
	CALL memcpy($5, $4, $2)
	*($6 + [16]) = [0]
	$2 = *((($6 + [32]) + [8]))
	*($6 + [24]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$6 }
	$4 = ($6 + [16])
	$5 = ($6 + [32])
	goto $label$5 
	
.LABEL $label$6
	$4 = CALL $199($2)
	*($6 + [16]) = $4
	$2 = *((($6 + [16]) + [8]))
	$5 = *($6 + [32])
	
.LABEL $label$5
	CALL memcpy($4, $5, $2)
	*($6 + [28]) = $3
	if ( (*((($6 + [32]) + [8])) <= [9]) ){ goto $label$7 }
	$2 = *($6 + [32])
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $201($2)
	
.LABEL $label$7
	$2 = CALL $166($0, $1, ($6 + [16]))
	if ( (*((($6 + [16]) + [8])) <= [9]) ){ goto $label$8 }
	$4 = *($6 + [16])
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $201($4)
	
.LABEL $label$8
	if ( (*(($6 + [8])) <= [9]) ){ goto $label$9 }
	$4 = *($6)
	if ( ($4 == 0) ){ goto $label$9 }
	CALL $201($4)
	
.LABEL $label$9
	*([0] + [4]) = ($6 + [48])
	return $2
}

int_32 .FUNC $230 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$39 = (*([0] + [4]) - [8128])
	*([0] + [4]) = $39
	$12 = (($39 + [692]) + [11])
	$11 = (($39 + [704]) | [8])
	$10 = (($39 + [704]) | [9])
	$9 = ($39 + [7664])
	$8 = ([-2] - ($39 + [704]))
	$7 = (($39 + [692]) + [12])
	$6 = (($39 + [352]) + [54])
	$5 = (($39 + [352]) + [55])
	$30 = [0]
	$38 = [0]
	$32 = [0]
	
.LOOP $label$17:
	$38 = ($30 + $38)
	$37 = $1
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$16 }
	$1 = $37
	$30 = ($30 & [255])
	if ( ($30 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	if ( ((int_32)$30 == (int_32)[37]) ){ goto $label$19 }
	$1 = ($1 + [1])
	$30 = (*($1) & [255])
	if ( $30 ){ goto $label$21 }
	
.LABEL $label$20
	$30 = $1
	goto $label$18 
	
.LABEL $label$19
	$30 = $1
	
.LOOP $label$22:
	if ( ((int_32)*(($1 + [1])) != (int_32)[37]) ){ goto $label$18 }
	$30 = ($30 + [1])
	$1 = ($1 + [2])
	if ( ((int_32)*($1) == (int_32)[37]) ){ goto $label$22 }
	
.LABEL $label$18
	$13 = ([2147483647] - $38)
	$30 = ($30 - $37)
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	if ( ($0 == 0) ){ goto $label$23 }
	if ( (*($0) & [32]) ){ goto $label$23 }
	CALL __fwritex($37, $30, $0)
	
.LABEL $label$23
	if ( $30 ){ goto $label$24 }
	$36 = ($1 + [1])
	$27 = [-1]
	$30 = *($1 + [1])
	$17 = ($30 + [-48])
	if ( ((uint_32)$17 > (uint_32)[9]) ){ goto $label$25 }
	$1 = ((int_32)*($1 + [2]) == (int_32)[36])
	$36 = ( ($1 + [3]) ? $36 : $1 )
	$30 = *($36)
	$27 = ( $17 ? [-1] : $1 )
	$32 = ( [1] ? $32 : $1 )
	
.LABEL $label$25
	$14 = [0]
	$1 = (int_32(($30 << [24]) >> [24]) + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$26 }
	$14 = [0]
	
.LOOP $label$27:
	if ( ((([1] << $1) & [75913]) == 0) ){ goto $label$26 }
	$14 = (([1] << (int_32(($30 << [24]) >> [24]) + [-32])) | $14)
	$36 = ($36 + [1])
	$30 = *($36)
	$1 = ($30 + [-32])
	if ( ($1 <= [32]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)($30 & [255]) != (int_32)[42]) ){ goto $label$33 }
	$1 = (*($36 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$32 }
	if ( ((int_32)*($36 + [2]) != (int_32)[36]) ){ goto $label$32 }
	*(($4 + ($1 << [2]))) = [10]
	$17 = ($36 + [3])
	$32 = [1]
	$15 = *((($3 + (*(($36 + [1])) << [4])) + [-768]))
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	goto $label$31 
	
.LABEL $label$33
	$15 = [0]
	$30 = (int_32(($30 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$30 > (uint_32)[9]) ){ goto $label$30 }
	$1 = [0]
	$17 = $36
	
.LOOP $label$34:
	$15 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$35 }
	$1 = ((int_32)$1 * (int_32)[10])
	$15 = ( [-1] ? ($1 + $30) : ((int_32)$30 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$35
	$1 = $15
	$17 = ($17 + [1])
	$30 = (*($17) + [-48])
	if ( ($30 <= [10]) ){ goto $label$34 }
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$28 }
	goto $label$15 
	
.LABEL $label$32
	if ( $32 ){ goto $label$3 }
	$17 = ($36 + [1])
	if ( ($0 == 0) ){ goto $label$29 }
	$1 = *($2)
	*($2) = ($1 + [4])
	$32 = [0]
	$15 = *($1)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	
.LABEL $label$31
	$15 = ([0] - $15)
	$14 = ($14 | [8192])
	goto $label$28 
	
.LABEL $label$30
	$17 = $36
	goto $label$28 
	
.LABEL $label$29
	$32 = [0]
	$15 = [0]
	
.LABEL $label$28
	$30 = [0]
	$36 = [-1]
	if ( ((int_32)*($17) != (int_32)[46]) ){ goto $label$42 }
	$36 = *($17 + [1])
	if ( ((int_32)$36 != (int_32)[42]) ){ goto $label$41 }
	$1 = (*($17 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$40 }
	if ( ((int_32)*($17 + [3]) != (int_32)[36]) ){ goto $label$40 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($17 + [4])
	$36 = *((($3 + (*(($17 + [2])) << [4])) + [-768]))
	goto $label$37 
	
.LABEL $label$42
	$1 = $17
	$16 = [0]
	goto $label$36 
	
.LABEL $label$41
	$1 = ($17 + [1])
	$31 = ($36 + [-48])
	if ( ((uint_32)$31 > (uint_32)[9]) ){ goto $label$39 }
	$17 = [0]
	
.LOOP $label$43:
	$36 = [-1]
	if ( ((uint_32)$17 > (uint_32)[214748364]) ){ goto $label$44 }
	$17 = ((int_32)$17 * (int_32)[10])
	$36 = ( [-1] ? ($17 + $31) : ((int_32)$31 > (int_32)([2147483647] - $17)) )
	
.LABEL $label$44
	$16 = [1]
	$17 = $36
	$1 = ($1 + [1])
	$31 = (*($1) + [-48])
	if ( ($31 <= [10]) ){ goto $label$43 }
	goto $label$36 
	
.LABEL $label$40
	if ( $32 ){ goto $label$3 }
	$1 = ($17 + [2])
	if ( ($0 == 0) ){ goto $label$38 }
	$17 = *($2)
	*($2) = ($17 + [4])
	$36 = *($17)
	goto $label$37 
	
.LABEL $label$39
	$16 = [1]
	$36 = [0]
	goto $label$36 
	
.LABEL $label$38
	$36 = [0]
	
.LABEL $label$37
	$16 = ((int_32)uint_32($36 >> [31]) ^ (int_32)[1])
	
.LABEL $label$36
	
.LOOP $label$45:
	$17 = $30
	$30 = (*($1) + [-65])
	if ( ((uint_32)$30 > (uint_32)[57]) ){ goto $label$3 }
	$1 = ($1 + [1])
	$30 = *(((((int_32)$17 * (int_32)[58]) + $30) + [12416]))
	if ( (($30 + [-1]) <= [8]) ){ goto $label$45 }
	if ( ($30 == 0) ){ goto $label$3 }
	if ( ((int_32)$30 != (int_32)[27]) ){ goto $label$49 }
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$48 }
	goto $label$3 
	
.LABEL $label$49
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$47 }
	*(($4 + ($27 << [2]))) = $30
	$30 = ($3 + ($27 << [4]))
	*($39 + [428]) = *(($30 + [12]))
	*($39 + [424]) = *(($30 + [8]))
	*($39 + [420]) = *(($30 + [4]))
	*($39 + [416]) = *($30)
	
.LABEL $label$48
	if ( $0 ){ goto $label$46 }
	$30 = [0]
	goto $label$24 
	
.LABEL $label$47
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $234(($39 + [416]), $30, $2)
	
.LABEL $label$46
	$31 = ($14 & [-65537])
	$18 = ( $31 ? $14 : ($14 & [8192]) )
	$26 = [0]
	$24 = [12896]
	$30 = *(($1 + [-1]))
	$29 = ( ( ($30 & [-33]) ? $30 : ((int_32)($30 & [15]) == (int_32)[3]) ) ? $30 : $17 )
	$30 = ($29 + [-65])
	if ( ((uint_32)$30 > (uint_32)[55]) ){ goto $label$80 }
	$14 = $5
	goto $label$111 
	
.LABEL $label$111
	if ( ((int_32)$36 > (int_32)[-1]) ){ goto $label$112 }
	if ( $16 ){ goto $label$15 }
	
.LABEL $label$112
	$35 = *($39 + [424])
	$23 = *($39 + [416])
	*($39 + [748]) = [0]
	if ( (CALL __signbitl($23, $35) == 0) ){ goto $label$113 }
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	$20 = [1]
	$19 = [12928]
	goto $label$108 
	
.LABEL $label$113
	if ( ($18 & [2048]) ){ goto $label$109 }
	$20 = ($18 & [1])
	$19 = ( [12934] ? [12929] : $20 )
	goto $label$108 
	
.LABEL $label$110
	$35 = *($39 + [416])
	if ( ((int_64)$35 <= (int_64)-1) ){ goto $label$92 }
	if ( ($18 & [2048]) ){ goto $label$88 }
	$26 = ($18 & [1])
	$24 = ( [12898] ? [12896] : $26 )
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$109
	$20 = [1]
	$19 = [12931]
	
.LABEL $label$108
	if ( ((int_32)CALL __fpclassifyl($23, $35) <= (int_32)[1]) ){ goto $label$115 }
	CALL frexpl(($39 + [320]), $23, $35, ($39 + [748]))
	$23 = *($39 + [328])
	$35 = *($39 + [320])
	CALL __addtf3(($39 + [304]), $35, $23, $35, $23)
	$23 = *((($39 + [304]) + [8]))
	$35 = *($39 + [304])
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$116 }
	*($39 + [748]) = (*($39 + [748]) + [-1])
	
.LABEL $label$116
	$21 = ($29 | [32])
	if ( ((int_32)$21 != (int_32)[97]) ){ goto $label$114 }
	$37 = ($29 & [32])
	$24 = ( ($19 + [9]) ? $19 : $37 )
	if ( ((uint_32)$36 > (uint_32)[26]) ){ goto $label$77 }
	if ( (([27] - $36) == 0) ){ goto $label$77 }
	$30 = ($36 + [-27])
	$34 = (int_64)4612248968380809216
	$33 = (int_64)0
	
.LOOP $label$117:
	CALL __multf3(($39 + [208]), $33, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($39 + [208]) + [8]))
	$33 = *($39 + [208])
	$30 = ($30 + [1])
	if ( $30 ){ goto $label$117 }
	if ( ((int_32)*($24) != (int_32)[45]) ){ goto $label$78 }
	CALL __subtf3(($39 + [160]), $35, ((int_64)$23 ^ (int_64)-9223372036854775808), $33, $34)
	CALL __addtf3(($39 + [144]), $33, $34, *($39 + [160]), *((($39 + [160]) + [8])))
	$23 = ((int_64)*((($39 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$35 = *($39 + [144])
	goto $label$77 
	
.LABEL $label$115
	$16 = CALL __unordtf2($23, $35, $23, $35)
	$37 = ($20 + [3])
	if ( ($18 & [8192]) ){ goto $label$93 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$93 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$95 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$118:
	if ( (($30 & [1]) == 0) ){ goto $label$119 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$119
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$118 }
	if ( $14 ){ goto $label$93 }
	$31 = ($31 & [255])
	goto $label$94 
	
.LABEL $label$114
	$30 = ((int_32)$36 < (int_32)[0])
	if ( (CALL __netf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$90 }
	CALL __multf3(($39 + [288]), $35, $23, (int_64)0, (int_64)4619285842798575616)
	$31 = (*($39 + [748]) + [-28])
	*($39 + [748]) = $31
	$23 = *((($39 + [288]) + [8]))
	$35 = *($39 + [288])
	goto $label$89 
	
.LABEL $label$107
	$35 = *($39 + [416])
	*((($39 + [344]) + [4])) = [0]
	*($39 + [344]) = $35
	*($39 + [416]) = ($39 + [344])
	$36 = [-1]
	$37 = ($39 + [344])
	goto $label$105 
	
.LABEL $label$106
	$37 = *($39 + [416])
	if ( ($36 == 0) ){ goto $label$74 }
	
.LABEL $label$105
	$30 = [0]
	$14 = $37
	$17 = [0]
	
.LOOP $label$121:
	$31 = *($14)
	if ( ($31 == 0) ){ goto $label$120 }
	$17 = CALL wctomb(($39 + [340]), $31)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$120 }
	if ( ((uint_32)$17 > (uint_32)($36 - $30)) ){ goto $label$120 }
	$14 = ($14 + [4])
	$30 = ($17 + $30)
	if ( ((uint_32)$36 > (uint_32)$30) ){ goto $label$121 }
	
.LABEL $label$120
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$104
	*((($39 + [352]) + [54])) = *($39 + [416])
	$36 = [1]
	$37 = $6
	$14 = $5
	$18 = $31
	goto $label$79 
	
.LABEL $label$103
	$37 = CALL strerror(*(CALL $225()))
	goto $label$97 
	
.LABEL $label$102
	$30 = ($17 & [255])
	if ( ((uint_32)$30 > (uint_32)[7]) ){ goto $label$56 }
	goto $label$122 
	
.LABEL $label$122
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$101
	$37 = $5
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$123 }
	$37 = $5
	
.LOOP $label$124:
	*(($37 = ($37 + [-1]))) = ((int_64)((int_64)$35 & (int_64)7) | (int_64)48)
	$35 = (uint_64)$35 >> (uint_64)(int_64)3
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$124 }
	
.LABEL $label$123
	if ( ($18 & [8]) ){ goto $label$84 }
	$26 = [0]
	$24 = [12896]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$100
	$36 = ( $36 ? [8] : ((uint_32)$36 > (uint_32)[8]) )
	$18 = ($18 | [8])
	$29 = [120]
	
.LABEL $label$99
	$26 = [0]
	$24 = [12896]
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$125 }
	$30 = ($29 & [32])
	$37 = $5
	
.LOOP $label$126:
	*(($37 = ($37 + [-1]))) = (*((((CASTING uint_32)(uint_64 $35) & [15]) + [12880])) | $30)
	$35 = (uint_64)$35 >> (uint_64)(int_64)4
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$126 }
	if ( (($18 & [8]) == 0) ){ goto $label$83 }
	if ( (int_64)(*($39 + [416]) == 0) ){ goto $label$83 }
	$24 = (int_32($29 >> [4]) + [12896])
	$26 = [2]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$125
	$37 = $5
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$98
	$30 = *($39 + [416])
	$37 = ( $30 ? [12912] : $30 )
	
.LABEL $label$97
	$26 = [0]
	$30 = CALL strnlen($37, ( [2147483647] ? $36 : ((int_32)$36 < (int_32)[0]) ))
	$14 = ($37 + $30)
	if ( ((int_32)$36 <= (int_32)[-1]) ){ goto $label$91 }
	$18 = $31
	$36 = $30
	goto $label$79 
	
.LABEL $label$96
	$26 = [0]
	$24 = [12896]
	$35 = *($39 + [416])
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$95
	if ( $17 ){ goto $label$93 }
	
.LABEL $label$94
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$93
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$127 }
	CALL __fwritex($19, $20, $0)
	$30 = *($0)
	
.LABEL $label$127
	if ( ($30 & [32]) ){ goto $label$128 }
	$30 = uint_32(($29 & [32]) >> [5])
	CALL __fwritex(( ( [12992] ? [13008] : $30 ) ? ( [12960] ? [12976] : $30 ) : $16 ), [3], $0)
	
.LABEL $label$128
	if ( ((int_32)($18 & [73728]) != (int_32)[8192]) ){ goto $label$129 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$129 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$131 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$132:
	if ( (($30 & [1]) == 0) ){ goto $label$133 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$133
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$132 }
	if ( $14 ){ goto $label$129 }
	$31 = ($31 & [255])
	goto $label$130 
	
.LABEL $label$131
	if ( $17 ){ goto $label$129 }
	
.LABEL $label$130
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$129
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$92
	$35 = (int_64)
	*($39 + [416]) = $35((int_64)0 - $35))
	$26 = [1]
	$24 = [12896]
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$91
	$18 = $31
	$36 = $30
	if ( (*($14) == 0) ){ goto $label$79 }
	goto $label$15 
	
.LABEL $label$90
	$31 = *($39 + [748])
	
.LABEL $label$89
	$28 = ( [6] ? $36 : $30 )
	$22 = ( ($39 + [752]) ? $9 : ((int_32)$31 < (int_32)[0]) )
	$36 = $22
	
.LOOP $label$134:
	$30 = CALL __fixunstfsi($35, $23)
	CALL __floatunsitf(($39 + [272]), $30)
	CALL __subtf3(($39 + [256]), $35, $23, *($39 + [272]), *((($39 + [272]) + [8])))
	CALL __multf3(($39 + [240]), *($39 + [256]), *((($39 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($36) = $30
	$36 = ($36 + [4])
	$23 = *((($39 + [240]) + [8]))
	$35 = *($39 + [240])
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$134 }
	if ( ((int_32)$31 < (int_32)[1]) ){ goto $label$137 }
	$17 = $22
	
.LOOP $label$138:
	$14 = ( $31 ? [29] : ((int_32)$31 < (int_32)[29]) )
	$30 = ($36 + [-4])
	if ( ($30 <= $17) ){ goto $label$139 }
	$23 = (CASTING uint_64)(uint_32 $14)
	$35 = (int_64)0
	
.LOOP $label$140:
	$35 = ((int_64)((int_64)*($30) << (int_64)$23) + (int_64)((int_64)$35 & (int_64)4294967295))
	*($30) = ((uint_64)$35 % (uint_64)(int_64)1000000000)
	$35 = ((uint_64)$35 / (uint_64)(int_64)1000000000)
	$30 = ($30 + [-4])
	if ( ((uint_32)$30 >= (uint_32)$17) ){ goto $label$140 }
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( ($30 == 0) ){ goto $label$139 }
	*(($17 = ($17 + [-4]))) = $30
	
.LABEL $label$139
	
.LOOP $label$142:
	$30 = $36
	if ( ((uint_32)$30 <= (uint_32)$17) ){ goto $label$141 }
	$36 = ($30 + [-4])
	if ( (*($36) == 0) ){ goto $label$142 }
	
.LABEL $label$141
	$36 = $30
	$31 = ($31 - $14)
	if ( ((int_32)$31 > (int_32)[0]) ){ goto $label$138 }
	*($39 + [748]) = $31
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	goto $label$136 
	
.LABEL $label$137
	$30 = $36
	$17 = $22
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	
.LABEL $label$136
	$24 = (((uint_32)($28 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$21 != (int_32)[102]) ){ goto $label$144 }
	$25 = ($22 + ($24 << [2]))
	
.LOOP $label$145:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$147 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$148:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$148 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$146 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$146 
	
.LABEL $label$147
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$146
	$30 = ( $25 ? $30 : ((int_32)int_32(($30 - $22) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$144
	
.LOOP $label$149:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$151 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$152:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$152 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$150 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$150 
	
.LABEL $label$151
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$150
	$30 = ( ($17 + ($24 << [2])) ? $30 : ((int_32)int_32(($30 - $17) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$149 }
	
.LABEL $label$143
	*($39 + [748]) = $31
	
.LABEL $label$135
	$36 = [0]
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$153 }
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$153 }
	$14 = [10]
	
.LOOP $label$154:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$154 }
	
.LABEL $label$153
	$16 = ((int_32)$21 == (int_32)[103])
	$14 = (($28 - ( $36 ? [0] : ((int_32)$21 != (int_32)[102]) )) - (((int_32)$28 != (int_32)[0]) & $16))
	if ( ((int_32)$14 >= (int_32)(((int_32)int_32(($30 - $22) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$155 }
	$37 = ($14 + [147456])
	$24 = ($22 + (((int_32)$37 / (int_32)[9]) << [2]))
	$31 = ($24 + [-65532])
	$14 = [10]
	$37 = ((int_32)$37 % (int_32)[9])
	if ( ((int_32)($37 + [1]) > (int_32)[8]) ){ goto $label$156 }
	$37 = ([8] - $37)
	$14 = [10]
	
.LOOP $label$157:
	$14 = ((int_32)$14 * (int_32)[10])
	$37 = ($37 + [-1])
	if ( $37 ){ goto $label$157 }
	
.LABEL $label$156
	$27 = *($31)
	$37 = ((uint_32)$27 % (uint_32)$14)
	$26 = ($31 + [4])
	if ( ((int_32)$26 != (int_32)$30) ){ goto $label$159 }
	if ( ($37 == 0) ){ goto $label$158 }
	
.LABEL $label$159
	if ( (((uint_32)$27 / (uint_32)$14) & [1]) ){ goto $label$161 }
	$35 = (int_64)4643211215818981376
	$23 = (int_64)0
	if ( ((uint_32)$31 <= (uint_32)$17) ){ goto $label$160 }
	if ( ((int_32)$14 != (int_32)[1000000000]) ){ goto $label$160 }
	if ( ((*(($31 + [-4])) & [1]) == 0) ){ goto $label$160 }
	
.LABEL $label$161
	$35 = (int_64)4643211215818981376
	$23 = (int_64)1
	
.LABEL $label$160
	$34 = (int_64)4611123068473966592
	$25 = ((int_32)$14 / (int_32)[2])
	if ( ($37 <= $25) ){ goto $label$162 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$37 == (int_32)$25) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$30) )
	
.LABEL $label$162
	if ( ($20 == 0) ){ goto $label$163 }
	if ( ((int_32)*($19) != (int_32)[45]) ){ goto $label$163 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	
.LABEL $label$163
	CALL __addtf3(($39 + [224]), $23, $35, (int_64)0, $34)
	$37 = ($27 - $37)
	*($31) = $37
	if ( (CALL __eqtf2(*($39 + [224]), *((($39 + [224]) + [8])), $23, $35) == 0) ){ goto $label$158 }
	$36 = ($37 + $14)
	*($31) = $36
	if ( ($36 <= [1000000000]) ){ goto $label$164 }
	$36 = ($24 + [-65536])
	
.LOOP $label$165:
	*(($36 + [4])) = [0]
	if ( ((uint_32)$36 >= (uint_32)$17) ){ goto $label$166 }
	*(($17 = ($17 + [-4]))) = [0]
	
.LABEL $label$166
	$14 = (*($36) + [1])
	*($36) = $14
	$36 = ($36 + [-4])
	if ( ((uint_32)$14 > (uint_32)[999999999]) ){ goto $label$165 }
	$31 = ($36 + [4])
	
.LABEL $label$164
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$158 }
	$14 = [10]
	
.LOOP $label$167:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$167 }
	
.LABEL $label$158
	$14 = ($31 + [4])
	$30 = ( $14 ? $30 : ((uint_32)$30 > (uint_32)$14) )
	
.LABEL $label$155
	$31 = ([0] - $36)
	
.LOOP $label$171:
	$14 = $30
	if ( ((uint_32)$14 <= (uint_32)$17) ){ goto $label$170 }
	$30 = ($14 + [-4])
	if ( (*($30) == 0) ){ goto $label$171 }
	$27 = [1]
	if ( $16 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$27 = [0]
	if ( ($16 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$30 = (($28 == 0) + $28)
	if ( ((int_32)$30 <= (int_32)$36) ){ goto $label$76 }
	if ( ((int_32)$36 < (int_32)[-4]) ){ goto $label$76 }
	$29 = ($29 + [-1])
	$28 = (($30 + [-1]) - $36)
	$16 = ($18 & [8])
	if ( ($16 == 0) ){ goto $label$75 }
	goto $label$68 
	
.LABEL $label$168
	$16 = ($18 & [8])
	goto $label$68 
	
.LABEL $label$88
	$26 = [1]
	$24 = [12897]
	if ( (uint_64)($35 <= (int_64)4294967296) ){ goto $label$86 }
	
.LABEL $label$87
	$37 = $5
	
.LOOP $label$172:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$172 }
	goto $label$85 
	
.LABEL $label$86
	$23 = $35
	$37 = $5
	
.LABEL $label$85
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$83 }
	
.LOOP $label$173:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $17 ){ goto $label$173 }
	goto $label$83 
	
.LABEL $label$84
	$30 = ($5 - $37)
	$24 = ( [12896] ? [12901] : ((int_32)$36 > (int_32)$30) )
	$26 = ((int_32)$36 <= (int_32)$30)
	
.LABEL $label$83
	if ( ($16 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	if ( ((int_32)$36 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$81
	$18 = ( ($18 & [-65537]) ? $18 : ((int_32)$36 > (int_32)[-1]) )
	$35 = *($39 + [416])
	if ( $36 ){ goto $label$174 }
	if ( ((int_64)($35 == 0) == 0) ){ goto $label$174 }
	$37 = $5
	$14 = $5
	$36 = [0]
	goto $label$79 
	
.LABEL $label$174
	$30 = ((int_64)($35 == 0) + ($5 - $37))
	$36 = ( $36 ? $30 : ((int_32)$36 > (int_32)$30) )
	
.LABEL $label$80
	$14 = $5
	
.LABEL $label$79
	$29 = ($14 - $37)
	$28 = ( $29 ? $36 : ((int_32)$36 < (int_32)$29) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$15 }
	$27 = ($26 + $28)
	$30 = ( $27 ? $15 : ((int_32)$15 < (int_32)$27) )
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$175 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$175 }
	$17 = ($22 <= [256])
	$22 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $22 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$177 }
	$17 = ($14 == 0)
	$14 = $22
	
.LOOP $label$178:
	if ( (($17 & [1]) == 0) ){ goto $label$179 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$179
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$178 }
	if ( $16 ){ goto $label$175 }
	$22 = ($22 & [255])
	goto $label$176 
	
.LABEL $label$177
	if ( $14 ){ goto $label$175 }
	
.LABEL $label$176
	CALL __fwritex(($39 + [432]), $22, $0)
	
.LABEL $label$175
	if ( (*($0) & [32]) ){ goto $label$180 }
	CALL __fwritex($24, $26, $0)
	
.LABEL $label$180
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$181 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$181 }
	$17 = ($26 <= [256])
	$26 = ($30 - $27)
	CALL memset(($39 + [432]), [48], ( $26 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$183 }
	$17 = ($14 == 0)
	$14 = $26
	
.LOOP $label$184:
	if ( (($17 & [1]) == 0) ){ goto $label$185 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$185
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$184 }
	if ( $16 ){ goto $label$181 }
	$26 = ($26 & [255])
	goto $label$182 
	
.LABEL $label$183
	if ( $14 ){ goto $label$181 }
	
.LABEL $label$182
	CALL __fwritex(($39 + [432]), $26, $0)
	
.LABEL $label$181
	if ( ((int_32)$29 >= (int_32)$36) ){ goto $label$186 }
	$17 = ($16 <= [256])
	$16 = ($28 - $29)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$188 }
	$17 = ($36 == 0)
	$36 = $16
	
.LOOP $label$189:
	if ( (($17 & [1]) == 0) ){ goto $label$190 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$190
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$189 }
	if ( $31 ){ goto $label$186 }
	$16 = ($16 & [255])
	goto $label$187 
	
.LABEL $label$188
	if ( $36 ){ goto $label$186 }
	
.LABEL $label$187
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$186
	if ( (*($0) & [32]) ){ goto $label$191 }
	CALL __fwritex($37, $29, $0)
	
.LABEL $label$191
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$24 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$24 }
	$17 = ($37 <= [256])
	$37 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $17 ))
	$36 = *($0)
	$15 = ($36 & [32])
	if ( $17 ){ goto $label$193 }
	$17 = ($15 == 0)
	$15 = $37
	
.LOOP $label$194:
	if ( (($17 & [1]) == 0) ){ goto $label$195 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$195
	$14 = ($36 & [32])
	$17 = ($14 == 0)
	$15 = ($15 + [-256])
	if ( ((uint_32)$15 > (uint_32)[255]) ){ goto $label$194 }
	if ( $14 ){ goto $label$24 }
	$37 = ($37 & [255])
	goto $label$192 
	
.LABEL $label$193
	if ( $15 ){ goto $label$24 }
	
.LABEL $label$192
	CALL __fwritex(($39 + [432]), $37, $0)
	goto $label$24 
	
.LABEL $label$78
	CALL __addtf3(($39 + [192]), $35, $23, $33, $34)
	CALL __subtf3(($39 + [176]), *($39 + [192]), *((($39 + [192]) + [8])), $33, $34)
	$23 = *((($39 + [176]) + [8]))
	$35 = *($39 + [176])
	
.LABEL $label$77
	$30 = int_32($31 >> [31])
	$31 = *($39 + [748])
	$17 = ((int_32)($31 + $30) ^ (int_32)$30)
	$34 = (CASTING int_64)(int_32 $17)
	$30 = [0]
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$198 }
	$17 = (CASTING uint_32)(uint_64 $34)
	if ( $17 ){ goto $label$197 }
	goto $label$196 
	
.LABEL $label$198
	$30 = [0]
	
.LOOP $label$199:
	*(($12 + $30)) = ((int_64)((uint_64)$34 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ($30 + [-1])
	$17 = ((uint_64)$34 > (uint_64)(int_64)42949672959)
	$33 = ((uint_64)$34 / (uint_64)(int_64)10)
	$34 = $33
	if ( $17 ){ goto $label$199 }
	$17 = (CASTING uint_32)(uint_64 $33)
	if ( ($17 == 0) ){ goto $label$196 }
	
.LABEL $label$197
	
.LOOP $label$200:
	*(((($39 + [692]) + $30) + [11])) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$30 = ($30 + [-1])
	$14 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $14 ){ goto $label$200 }
	
.LABEL $label$196
	$17 = ($7 + $30)
	if ( $30 ){ goto $label$201 }
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$201
	$16 = ($20 | [2])
	*(($27 = ($17 + [-2]))) = ($29 + [15])
	*(($17 + [-1])) = ((uint_32($31 >> [30]) & [2]) + [43])
	if ( ($18 & [8]) ){ goto $label$202 }
	if ( ((int_32)$36 < (int_32)[1]) ){ goto $label$71 }
	$30 = ($39 + [704])
	
.LOOP $label$203:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [80]), $17)
	CALL __subtf3(($39 + [64]), $35, $23, *($39 + [80]), *((($39 + [80]) + [8])))
	CALL __multf3(($39 + [48]), *($39 + [64]), *((($39 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [12880])) | $37)
	$23 = *((($39 + [48]) + [8]))
	$35 = *($39 + [48])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$204 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$204
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$203 }
	goto $label$70 
	
.LABEL $label$202
	$30 = ($39 + [704])
	
.LOOP $label$205:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [128]), $17)
	CALL __subtf3(($39 + [112]), $35, $23, *($39 + [128]), *((($39 + [128]) + [8])))
	CALL __multf3(($39 + [96]), *($39 + [112]), *((($39 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [12880])) | $37)
	$23 = *((($39 + [96]) + [8]))
	$35 = *($39 + [96])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$206 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$206
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$205 }
	goto $label$70 
	
.LABEL $label$76
	$28 = ($30 + [-1])
	$29 = ($29 + [-2])
	$16 = ($18 & [8])
	if ( $16 ){ goto $label$68 }
	
.LABEL $label$75
	$30 = [9]
	if ( ($27 == 0) ){ goto $label$207 }
	$16 = *(($14 + [-4]))
	if ( ($16 == 0) ){ goto $label$207 }
	$30 = [0]
	if ( ((uint_32)$16 % (uint_32)[10]) ){ goto $label$207 }
	$37 = [10]
	$30 = [0]
	
.LOOP $label$208:
	$30 = ($30 + [1])
	$37 = ((int_32)$37 * (int_32)[10])
	if ( (((uint_32)$16 % (uint_32)$37) == 0) ){ goto $label$208 }
	
.LABEL $label$207
	$37 = (((int_32)int_32(($14 - $22) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($29 | [32]) != (int_32)[102]) ){ goto $label$69 }
	$16 = [0]
	$30 = ($37 - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	goto $label$68 
	
.LABEL $label$74
	$30 = [0]
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	
.LABEL $label$73
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$72 }
	$17 = ($27 <= [256])
	$27 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $27 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$210 }
	$17 = ($36 == 0)
	$36 = $27
	
.LOOP $label$211:
	if ( (($17 & [1]) == 0) ){ goto $label$212 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$212
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$211 }
	if ( $31 ){ goto $label$72 }
	$27 = ($27 & [255])
	goto $label$209 
	
.LABEL $label$210
	if ( $36 ){ goto $label$72 }
	
.LABEL $label$209
	CALL __fwritex(($39 + [432]), $27, $0)
	
.LABEL $label$72
	if ( ($30 == 0) ){ goto $label$213 }
	$17 = [0]
	
.LOOP $label$214:
	$36 = *($37)
	if ( ($36 == 0) ){ goto $label$213 }
	$36 = CALL wctomb(($39 + [340]), $36)
	$17 = ($36 + $17)
	if ( ((uint_32)$17 > (uint_32)$30) ){ goto $label$213 }
	if ( (*($0) & [32]) ){ goto $label$215 }
	CALL __fwritex(($39 + [340]), $36, $0)
	
.LABEL $label$215
	$37 = ($37 + [4])
	if ( ($17 <= $30) ){ goto $label$214 }
	
.LABEL $label$213
	if ( ((int_32)$16 != (int_32)[8192]) ){ goto $label$216 }
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$216 }
	$17 = ($31 <= [256])
	$31 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$218 }
	$17 = ($36 == 0)
	$36 = $31
	
.LOOP $label$219:
	if ( (($17 & [1]) == 0) ){ goto $label$220 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$220
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$219 }
	if ( $37 ){ goto $label$216 }
	$31 = ($31 & [255])
	goto $label$217 
	
.LABEL $label$218
	if ( $36 ){ goto $label$216 }
	
.LABEL $label$217
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$216
	$30 = ( $15 ? $30 : ((int_32)$15 > (int_32)$30) )
	goto $label$24 
	
.LABEL $label$71
	$17 = ($39 + [704])
	
.LOOP $label$221:
	$14 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [32]), $14)
	CALL __subtf3(($39 + [16]), $35, $23, *($39 + [32]), *((($39 + [32]) + [8])))
	CALL __multf3($39, *($39 + [16]), *((($39 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($30 = $17)) = (*(($14 + [12880])) | $37)
	$23 = *(($39 + [8]))
	$35 = *($39)
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$222 }
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$222 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$222
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$221 }
	
.LABEL $label$70
	$30 = [-1]
	$31 = ($7 - $27)
	if ( ((int_32)(([2147483645] - $16) - $31) < (int_32)$36) ){ goto $label$50 }
	$26 = ($17 - ($39 + [704]))
	$29 = ( ( ($36 + [2]) ? $26 : ((int_32)($8 + $17) < (int_32)$36) ) ? $26 : $36 )
	$37 = (($31 + $16) + $29)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$65 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$65 }
	$30 = ($28 <= [256])
	$28 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$67 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$223:
	if ( (($30 & [1]) == 0) ){ goto $label$224 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$224
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$223 }
	if ( $14 ){ goto $label$65 }
	$28 = ($28 & [255])
	goto $label$66 
	
.LABEL $label$69
	$16 = [0]
	$30 = (($37 + $36) - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	
.LABEL $label$68
	$30 = [-1]
	$24 = ($28 | $16)
	$37 = ((int_32)$24 != (int_32)[0])
	if ( ((int_32)$28 > (int_32)([2147483646] - $37)) ){ goto $label$50 }
	$26 = (($28 + $37) + [1])
	$21 = ((int_32)($29 | [32]) != (int_32)[102])
	if ( $21 ){ goto $label$225 }
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	$36 = ( $36 ? [0] : ((int_32)$36 > (int_32)[0]) )
	goto $label$61 
	
.LABEL $label$225
	$30 = ( $31 ? $36 : ((int_32)$36 < (int_32)[0]) )
	$35 = (CASTING int_64)(int_32 $30)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$64 }
	$37 = $7
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( $30 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$67
	if ( $17 ){ goto $label$65 }
	
.LABEL $label$66
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$65
	if ( (*($0) & [32]) ){ goto $label$226 }
	CALL __fwritex($24, $16, $0)
	
.LABEL $label$226
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$227 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$227 }
	$30 = ($16 <= [256])
	$16 = ($15 - $37)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$229 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$230:
	if ( (($30 & [1]) == 0) ){ goto $label$231 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$231
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$230 }
	if ( $14 ){ goto $label$227 }
	$16 = ($16 & [255])
	goto $label$228 
	
.LABEL $label$229
	if ( $17 ){ goto $label$227 }
	
.LABEL $label$228
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$227
	if ( (*($0) & [32]) ){ goto $label$232 }
	CALL __fwritex(($39 + [704]), $26, $0)
	
.LABEL $label$232
	$16 = ($29 - $26)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$233 }
	$30 = ($16 <= [256])
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$235 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$236:
	if ( (($30 & [1]) == 0) ){ goto $label$237 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$237
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$236 }
	if ( $14 ){ goto $label$233 }
	$16 = ($16 & [255])
	goto $label$234 
	
.LABEL $label$235
	if ( $17 ){ goto $label$233 }
	
.LABEL $label$234
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$233
	if ( (*($0) & [32]) ){ goto $label$238 }
	CALL __fwritex($27, $31, $0)
	
.LABEL $label$238
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$239 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$239 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$241 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$242:
	if ( (($30 & [1]) == 0) ){ goto $label$243 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$243
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$242 }
	if ( $14 ){ goto $label$239 }
	$31 = ($31 & [255])
	goto $label$240 
	
.LABEL $label$241
	if ( $17 ){ goto $label$239 }
	
.LABEL $label$240
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$239
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$64
	$37 = $7
	
.LOOP $label$244:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$244 }
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	
.LOOP $label$245:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$31 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $31 ){ goto $label$245 }
	
.LABEL $label$62
	if ( ((int_32)($7 - $37) > (int_32)[1]) ){ goto $label$246 }
	$30 = ($37 + [-1])
	
.LOOP $label$247:
	*($30) = [48]
	$37 = ($7 - $30)
	$31 = ($30 + [-1])
	$30 = $31
	if ( ((int_32)$37 < (int_32)[2]) ){ goto $label$247 }
	$37 = ($31 + [1])
	
.LABEL $label$246
	*(($25 = ($37 + [-2]))) = $29
	$30 = [-1]
	*(($37 + [-1])) = ((uint_32($36 >> [30]) & [2]) + [43])
	$36 = ($7 - $25)
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	
.LABEL $label$61
	$30 = [-1]
	$36 = ($36 + $26)
	if ( ((int_32)$36 > (int_32)((int_32)$20 ^ (int_32)[2147483647])) ){ goto $label$50 }
	$26 = ($36 + $20)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$51 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$51 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$53 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$248:
	if ( (($30 & [1]) == 0) ){ goto $label$249 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$249
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$248 }
	if ( $31 ){ goto $label$51 }
	$29 = ($29 & [255])
	goto $label$52 
	
.LABEL $label$60
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$59
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$58
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$57
	*(*($39 + [416])) = $38
	
.LABEL $label$56
	$30 = [0]
	goto $label$24 
	
.LABEL $label$55
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$54
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$53
	if ( $36 ){ goto $label$51 }
	
.LABEL $label$52
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$51
	if ( (*($0) & [32]) ){ goto $label$250 }
	CALL __fwritex($19, $20, $0)
	
.LABEL $label$250
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$251 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$251 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [48], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$253 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$254:
	if ( (($30 & [1]) == 0) ){ goto $label$255 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$255
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$254 }
	if ( $31 ){ goto $label$251 }
	$29 = ($29 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $36 ){ goto $label$251 }
	
.LABEL $label$252
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$251
	if ( $21 ){ goto $label$266 }
	$31 = ( $22 ? $17 : ((uint_32)$17 > (uint_32)$22) )
	$37 = $31
	
.LOOP $label$267:
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$269 }
	$17 = [0]
	
.LOOP $label$270:
	*(($11 + $17)) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ($17 + [-1])
	$36 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $36 ){ goto $label$270 }
	goto $label$268 
	
.LABEL $label$269
	$17 = [0]
	
.LABEL $label$268
	$30 = ($10 + $17)
	if ( ((int_32)$37 == (int_32)$31) ){ goto $label$272 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$271 }
	
.LOOP $label$273:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$273 }
	$30 = ($39 + [704])
	goto $label$271 
	
.LABEL $label$272
	if ( $17 ){ goto $label$271 }
	*(($30 = ($30 + [-1]))) = [48]
	
.LABEL $label$271
	if ( (*($0) & [32]) ){ goto $label$274 }
	CALL __fwritex($30, ($10 - $30), $0)
	
.LABEL $label$274
	$37 = ($37 + [4])
	if ( ((uint_32)$37 <= (uint_32)$22) ){ goto $label$267 }
	if ( ($24 == 0) ){ goto $label$275 }
	if ( (*($0) & [32]) ){ goto $label$275 }
	CALL __fwritex([13024], [1], $0)
	
.LABEL $label$275
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$265 }
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$264 }
	
.LOOP $label$276:
	$30 = $10
	$17 = *($37)
	if ( ($17 == 0) ){ goto $label$278 }
	$30 = $10
	
.LOOP $label$279:
	*(($30 = ($30 + [-1]))) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$36 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $36 ){ goto $label$279 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$277 }
	
.LABEL $label$278
	
.LOOP $label$280:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$280 }
	
.LABEL $label$277
	if ( (*($0) & [32]) ){ goto $label$281 }
	CALL __fwritex($30, ( $28 ? [9] : ((int_32)$28 < (int_32)[9]) ), $0)
	
.LABEL $label$281
	$30 = ($28 + [-9])
	if ( ((int_32)$28 < (int_32)[10]) ){ goto $label$263 }
	$28 = $30
	$37 = ($37 + [4])
	if ( ($37 <= $14) ){ goto $label$276 }
	goto $label$263 
	
.LABEL $label$266
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$259 }
	$31 = ( $14 ? ($17 + [4]) : $27 )
	if ( ($16 == 0) ){ goto $label$261 }
	$37 = $17
	
.LOOP $label$282:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$284 }
	$36 = [0]
	
.LOOP $label$285:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$285 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$283 }
	
.LABEL $label$284
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$283
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$287 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$286 }
	
.LOOP $label$288:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$288 }
	goto $label$286 
	
.LABEL $label$287
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$289 }
	CALL __fwritex($14, [1], $0)
	$30 = *($0)
	
.LABEL $label$289
	$14 = ($14 + [1])
	if ( ($30 & [32]) ){ goto $label$286 }
	CALL __fwritex([13024], [1], $0)
	
.LABEL $label$286
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$290 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$290
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$282 }
	goto $label$260 
	
.LABEL $label$265
	$30 = $28
	if ( ((int_32)$30 >= (int_32)[1]) ){ goto $label$262 }
	goto $label$258 
	
.LABEL $label$264
	$30 = $28
	
.LABEL $label$263
	if ( ((int_32)$30 < (int_32)[1]) ){ goto $label$258 }
	
.LABEL $label$262
	$17 = ($30 <= [256])
	CALL memset(($39 + [432]), [48], ( $30 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$292 }
	$17 = ($36 == 0)
	$36 = $30
	
.LOOP $label$293:
	if ( (($17 & [1]) == 0) ){ goto $label$294 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$294
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$293 }
	if ( $37 ){ goto $label$258 }
	$30 = ($30 & [255])
	goto $label$291 
	
.LABEL $label$292
	if ( $36 ){ goto $label$258 }
	
.LABEL $label$291
	CALL __fwritex(($39 + [432]), $30, $0)
	if ( ((int_32)$18 == (int_32)[8192]) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$261
	$37 = $17
	
.LOOP $label$295:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$297 }
	$36 = [0]
	
.LOOP $label$298:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$298 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$296 }
	
.LABEL $label$297
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$296
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$300 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$299 }
	
.LOOP $label$301:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$301 }
	goto $label$299 
	
.LABEL $label$300
	if ( (*($0) & [32]) ){ goto $label$302 }
	CALL __fwritex($14, [1], $0)
	
.LABEL $label$302
	$14 = ($14 + [1])
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$299 }
	if ( (*($0) & [32]) ){ goto $label$299 }
	CALL __fwritex([13024], [1], $0)
	
.LABEL $label$299
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$303 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$303
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$295 }
	
.LABEL $label$260
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$259 }
	$30 = ($28 <= [256])
	CALL memset(($39 + [432]), [48], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$305 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$306:
	if ( (($30 & [1]) == 0) ){ goto $label$307 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$307
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$306 }
	if ( $14 ){ goto $label$259 }
	$28 = ($28 & [255])
	goto $label$304 
	
.LABEL $label$305
	if ( $17 ){ goto $label$259 }
	
.LABEL $label$304
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$259
	if ( (*($0) & [32]) ){ goto $label$258 }
	CALL __fwritex($25, ($7 - $25), $0)
	
.LABEL $label$258
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$256 }
	
.LABEL $label$257
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$256 }
	$30 = ($37 <= [256])
	$37 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$309 }
	$30 = ($17 == 0)
	$17 = $37
	
.LOOP $label$310:
	if ( (($30 & [1]) == 0) ){ goto $label$311 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$311
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$310 }
	if ( $14 ){ goto $label$256 }
	$37 = ($37 & [255])
	goto $label$308 
	
.LABEL $label$309
	if ( $17 ){ goto $label$256 }
	
.LABEL $label$308
	CALL __fwritex(($39 + [432]), $37, $0)
	
.LABEL $label$256
	$30 = ( $15 ? $26 : ((int_32)$15 > (int_32)$26) )
	
.LABEL $label$50
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$24
	if ( ((int_32)$30 <= (int_32)$13) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( $0 ){ goto $label$1 }
	if ( ($32 == 0) ){ goto $label$14 }
	$30 = [1]
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $234(($3 + [16]), $1, $2)
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $234(($3 + [32]), $1, $2)
	$1 = *($4 + [12])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $234(($3 + [48]), $1, $2)
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $234(($3 + [64]), $1, $2)
	$1 = *($4 + [20])
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $234(($3 + [80]), $1, $2)
	$1 = *($4 + [24])
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $234(($3 + [96]), $1, $2)
	$1 = *($4 + [28])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $234(($3 + [112]), $1, $2)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $234(($3 + [128]), $1, $2)
	$1 = *($4 + [36])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $234(($3 + [144]), $1, $2)
	$38 = [1]
	goto $label$1 
	
.LABEL $label$15
	*(CALL __errno_location()) = [75]
	goto $label$2 
	
.LABEL $label$14
	$38 = [0]
	goto $label$1 
	
.LABEL $label$13
	$30 = [2]
	goto $label$4 
	
.LABEL $label$12
	$30 = [3]
	goto $label$4 
	
.LABEL $label$11
	$38 = [0]
	goto $label$1 
	
.LABEL $label$10
	$30 = [4]
	goto $label$4 
	
.LABEL $label$9
	$30 = [5]
	goto $label$4 
	
.LABEL $label$8
	$30 = [6]
	goto $label$4 
	
.LABEL $label$7
	$30 = [7]
	goto $label$4 
	
.LABEL $label$6
	$30 = [8]
	goto $label$4 
	
.LABEL $label$5
	$30 = [9]
	
.LABEL $label$4
	$1 = ($4 + ($30 << [2]))
	
.LOOP $label$312:
	if ( *($1) ){ goto $label$3 }
	$1 = ($1 + [4])
	$38 = [1]
	$30 = ($30 + [1])
	if ( ((uint_32)$30 <= (uint_32)[9]) ){ goto $label$312 }
	goto $label$1 
	
.LABEL $label$3
	*(CALL __errno_location()) = [22]
	
.LABEL $label$2
	$38 = [-1]
	
.LABEL $label$1
	*([0] + [4]) = ($39 + [8128])
	$30
	$30
	return $38
}

int_32 .FUNC __lctrans_impl (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	$1 = CALL __mo_lookup(*($1), *($1 + [4]), $0)
	return ( $1 ? $0 : $1 )
	
.LABEL $label$1
	return ( [0] ? $0 : [0] )
}

int_32 .FUNC $169 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($6) = [0]
	$3 = *($1 + [8])
	*($6 + [8]) = $3
	if ( ((uint_32)$3 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $6
	$4 = $1
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL $199($3)
	*($6) = $5
	$4 = *($1)
	
.LABEL $label$1
	CALL memcpy($5, $4, $3)
	*($6 + [12]) = *($1 + [12])
	*($0) = [0]
	*($6 + [16]) = [0]
	$1 = *(($6 + [8]))
	*($6 + [24]) = $1
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$3 = $6
	$5 = ($6 + [16])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL $199($1)
	*($6 + [16]) = $5
	$3 = *($6)
	
.LABEL $label$3
	CALL memcpy($5, $3, $1)
	*($6 + [28]) = *(($6 + [12]))
	CALL $170($0, ($6 + [16]))
	if ( (*((($6 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$1 = *($6 + [16])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $201($1)
	
.LABEL $label$5
	if ( (*(($6 + [8])) <= [9]) ){ goto $label$6 }
	$1 = *($6)
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $201($1)
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [32])
	return $0
}

int_32 .FUNC $168 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [16])
	*([0] + [4]) = $16
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($1 + [4])
	$3 = ($16 | [1])
	$5 = ($1 + [20])
	$6 = ($1 + [16])
	$7 = ($16 + [8])
	$8 = ($1 + [28])
	$9 = ($1 + [32])
	$10 = ($1 + [24])
	
.LOOP $label$1:
	$13 = [1]
	if ( (*($1) == 0) ){ goto $label$2 }
	$13 = ((int_32)*($9) != (int_32)[0])
	
.LABEL $label$2
	if ( (*($2) == 0) ){ goto $label$10 }
	$15 = ((int_32)*(($2 + [32])) != (int_32)[0])
	if ( ((int_32)($13 | $15) == (int_32)[1]) ){ goto $label$9 }
	$15 = *(($2 + [16]))
	$13 = *($6)
	$12 = *($5)
	if ( ((int_32)($12 - $13) != (int_32)(*(($2 + [20])) - $15)) ){ goto $label$7 }
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$11 }
	$11 = $13
	
.LOOP $label$12:
	if ( ((int_32)*($11) != (int_32)*($15)) ){ goto $label$7 }
	$15 = ($15 + [1])
	$11 = ($11 + [1])
	if ( ((int_32)$12 != (int_32)$11) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_32)*($10) != (int_32)*(($2 + [24]))) ){ goto $label$7 }
	if ( ((int_32)*($8) != (int_32)*(($2 + [28]))) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$10
	$15 = [1]
	
.LABEL $label$9
	if ( ((int_32)$13 == (int_32)$15) ){ goto $label$6 }
	
.LABEL $label$8
	$12 = *($5)
	$13 = *($6)
	
.LABEL $label$7
	*($7) = [0]
	*($16) = (int_64)0
	$11 = ($12 - $13)
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$11 > (uint_32)[10]) ){ goto $label$15 }
	*($16) = ($11 << [1])
	$14 = $3
	if ( ((int_32)$13 != (int_32)$12) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$15 = (($11 + [16]) & [-16])
	$14 = CALL $198($15)
	*($7) = $14
	*($16) = ($15 | [1])
	*($16 + [4]) = $11
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$13 }
	
.LABEL $label$14
	$15 = $14
	
.LOOP $label$16:
	*($15) = *($13)
	$15 = ($15 + [1])
	$13 = ($13 + [1])
	if ( ((int_32)$12 != (int_32)$13) ){ goto $label$16 }
	$14 = ($14 + $11)
	
.LABEL $label$13
	*($14) = [0]
	$13 = ($0 + [4])
	$15 = *($13)
	if ( ((uint_32)$15 >= (uint_32)*(($0 + [8]))) ){ goto $label$18 }
	*($15) = *($16)
	*(($15 + [8])) = *($7)
	*($7) = [0]
	*($16) = [0]
	*($16 + [4]) = [0]
	*($13) = (*($13) + [12])
	goto $label$17 
	
.LABEL $label$18
	CALL $139($0, $16)
	if ( ((*($16) & [1]) == 0) ){ goto $label$17 }
	CALL $200(*($7))
	
.LABEL $label$17
	$13 = *($8)
	$15 = *($1)
	if ( ($15 == 0) ){ goto $label$20 }
	CALL void $16((int_32 $4), (int_32 *($10)), (int_32 $13), (int_32 *(($15 & [-2]) + [4])))
	$15 = *($16)
	if ( ((int_32)$15 == (int_32)*($8)) ){ goto $label$19 }
	$13 = *($16 + [4])
	goto $label$3 
	
.LABEL $label$20
	*($16 + [4]) = $13
	*($16) = $13
	$15 = $13
	goto $label$4 
	
.LABEL $label$19
	$13 = *($16 + [4])
	if ( ((int_32)$13 != (int_32)$15) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$6
	*([0] + [4]) = ($16 + [16])
	return $0
	
.LABEL $label$5
	CALL $202($16)
	
.LABEL $label$4
	if ( ((int_32)*($5) != (int_32)$15) ){ goto $label$3 }
	*($9) = [1]
	
.LABEL $label$3
	*($5) = $15
	*($6) = *($10)
	*($10) = $13
	goto $label$1 
	return (unreachable)
}

int_32 .FUNC __mo_lookup (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0)
	$10 = ((int_32)$3 == (int_32)[-1794895138])
	$9 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($0 + [8])
	$5 = ( $4 ? $9 : $10 )
	if ( ((uint_32)$5 >= (uint_32)uint_32($1 >> [2])) ){ goto $label$4 }
	$12 = ($1 - ($5 << [2]))
	$11 = *($0 + [12])
	$6 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$3 }
	$11 = *($0 + [16])
	$10 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$10 >= (uint_32)$12) ){ goto $label$2 }
	if ( ((($10 | $6) & [3]) == 0) ){ goto $label$1 }
	return [0]
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$12 = uint_32($6 >> [2])
	if ( ((int_32)$3 != (int_32)[-1794895138]) ){ goto $label$16 }
	$5 = uint_32($5 >> [1])
	$6 = ($5 << [1])
	$9 = ($0 + (($6 + $12) << [2]))
	$11 = *(($9 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$15 }
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)($1 - $11)) ){ goto $label$14 }
	$9 = $5
	$7 = [0]
	
.LOOP $label$17:
	if ( *(($0 + ($11 + $8))) ){ goto $label$9 }
	$11 = CALL strcmp($2, ($0 + $11))
	if ( ($11 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$7 }
	$13 = [0]
	$4 = ( $9 ? ($4 - $9) : $11 )
	$9 = uint_32($4 >> [1])
	$11 = ((int_32)$11 < (int_32)[0])
	$7 = ( $7 ? $5 : $11 )
	$5 = ($7 + $9)
	$6 = ($5 << [1])
	$8 = ($0 + (($6 + $12) << [2]))
	$11 = *(($8 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$10 }
	$8 = *($8)
	if ( ($8 <= ($1 - $11)) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	$8 = uint_32($9 >> [1])
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$13 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ((uint_32)$11 >= (uint_32)($1 - $4)) ){ goto $label$12 }
	$5 = $8
	$7 = [0]
	
.LOOP $label$18:
	if ( *(($0 + ($4 + $11))) ){ goto $label$8 }
	$4 = CALL strcmp($2, ($0 + $4))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$6 }
	$13 = [0]
	$9 = ( $5 ? ($9 - $5) : $4 )
	$5 = uint_32($9 >> [1])
	$4 = ((int_32)$4 < (int_32)[0])
	$7 = ( $7 ? $8 : $4 )
	$8 = ($7 + $5)
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$10 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ($11 <= ($1 - $4)) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$15
	return [0]
	
.LABEL $label$14
	return [0]
	
.LABEL $label$13
	return [0]
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	$9 = ((int_32)$3 == (int_32)[-1794895138])
	$10 = ($0 + (($6 + uint_32($10 >> [2])) << [2]))
	$4 = *(($10 + [4]))
	$11 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$5 }
	$13 = [0]
	$4 = *($10)
	$4 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$4 >= (uint_32)($1 - $11)) ){ goto $label$10 }
	return ( [0] ? ($0 + $11) : *(($0 + ($11 + $4))) )
	
.LABEL $label$10
	return $13
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	return [0]
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [0]
}

void .FUNC $175 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $198(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $221($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $200($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $200($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC __lctrans (int_32 $0, int_32 $1)
{
	return CALL __lctrans_impl($0, $1)
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [308]) == (int_32)$0), [416])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [464])
	$4 = *($1 + [48])
	$3 = *($3)
	$1 = CALL memcpy($1, $3, [64])
	CALL $203(($1 + [64]), ($3 + [64]))
	CALL memcpy(($1 + [76]), ($3 + [76]), [132])
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	CALL $81(($1 + [208]), *($3 + [208]), *(($3 + [212])))
	CALL $81(($1 + [220]), *($3 + [220]), *(($3 + [224])))
	CALL $81(($1 + [232]), *($3 + [232]), *(($3 + [236])))
	
.LABEL $label$1
	CALL memcpy(($1 + [244]), ($3 + [244]), [52])
	CALL $203(($1 + [296]), ($3 + [296]))
	CALL eosio_assert(((int_64)$4 == (int_64)*(($1 + [48]))), [528])
	*($6) = [0]
	CALL $82($6, $1)
	$5 = *($6)
	if ( ($5 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($5)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($7 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	*($6 + [4]) = $3
	*($6) = $3
	*($6 + [8]) = ($3 + $5)
	CALL $83($6, $1)
	CALL db_update_i64(*(($1 + [312])), $2, $3, $5)
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($0)
	$3 = *(*($0 + [4]))
	$1 = CALL memcpy($1, $3, [64])
	CALL $203(($1 + [64]), ($3 + [64]))
	CALL memcpy(($1 + [76]), ($3 + [76]), [132])
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$1 }
	CALL $81(($1 + [208]), *($3 + [208]), *(($3 + [212])))
	CALL $81(($1 + [220]), *($3 + [220]), *(($3 + [224])))
	CALL $81(($1 + [232]), *($3 + [232]), *(($3 + [236])))
	
.LABEL $label$1
	CALL memcpy(($1 + [244]), ($3 + [244]), [52])
	CALL $203(($1 + [296]), ($3 + [296]))
	*($6) = [0]
	CALL $82($6, $1)
	$4 = *($6)
	if ( ($4 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($4)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($7 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	*($6 + [4]) = $3
	*($6) = $3
	*($6 + [8]) = ($3 + $4)
	CALL $83($6, $1)
	$5 = *($1 + [48])
	*($1 + [312]) = CALL db_store_i64(*($2 + [8]), (int_64)7035937929554296832, *(*($0 + [8])), $5, $3, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [16])
}

void .FUNC frexpl (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$5 = ($4) & [32767]
	if ( ((int_32)$5) == (int_32)[32767]) ){ goto $label$1 }
	if ( $5 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($6, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL frexpl(($6 + [16]), *($6), *(($6 + [8])), $3)
	$4 = (*($3) + [-120])
	$2 = *($6 + [24])
	$1 = *($6 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($4 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($4 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	*($3) = $4
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($6 + [32])
}

void .FUNC _ZN6gamenn12dispatchCardER7st_gameh11checksum256 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	$11 = [0]
	*($12 + [8]) = [0]
	*($12) = (int_64)0
	if ( ((int_32)$2 != (int_32)[5]) ){ goto $label$1 }
	*(($7 = ($1 + [224]))) = *($1 + [220])
	*(($8 = ($1 + [236]))) = *($1 + [232])
	$2 = *($1 + [208])
	*(($1 + [212])) = $2
	$10 = ($1 + [208])
	CALL $107($10, $2, $3, ($3 + [10]))
	$6 = ($0 + [248])
	CALL $108($6, $12, $10)
	$5 = ($1 + [232])
	$4 = ($1 + [220])
	$10 = ($1 + [240])
	$9 = ($1 + [228])
	$2 = [0]
	
.LOOP $label$2:
	$3 = (*($12) + $11)
	if ( ($2 & [1]) ){ goto $label$6 }
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)*($10)) ){ goto $label$5 }
	*($0) = *($3)
	*($8) = (*($8) + [1])
	goto $label$3 
	
.LABEL $label$6
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)*($9)) ){ goto $label$4 }
	*($0) = *($3)
	*($7) = (*($7) + [1])
	goto $label$3 
	
.LABEL $label$5
	CALL $109($5, $3)
	goto $label$3 
	
.LABEL $label$4
	CALL $109($4, $3)
	
.LABEL $label$3
	$11 = ($11 + [1])
	$2 = ($2 + [1])
	if ( (($2 & [255]) <= [10]) ){ goto $label$2 }
	*($1 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [246]) = CALL $53($6, $4)
	*($1 + [247]) = CALL $53($6, $5)
	$11 = *($12)
	if ( ($11 == 0) ){ goto $label$1 }
	*($12 + [4]) = $11
	CALL $200($11)
	
.LABEL $label$1
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $198([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [2372]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $223($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $205($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)(*($1 + [4]) - *($1)) == (int_32)[5]), [2288])
	CALL eosio_assert(((int_32)(*($2 + [4]) - *($2)) == (int_32)[5]), [2336])
	$4 = CALL $53($0, $2)
	$3 = CALL $53($0, $1)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$10 }
	*($6 + [24]) = [0]
	*($6 + [16]) = (int_64)0
	$4 = (*(($1 + [4])) - *($1))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL $198($4)
	*(($6 + [24])) = ($5 + $4)
	*($6 + [16]) = $5
	*($6 + [20]) = $5
	$4 = *($1)
	$1 = (*(($1 + [4])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($5, $4, $1)
	*($6 + [20]) = ($5 + $1)
	
.LABEL $label$11
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	$1 = (*(($2 + [4])) - *($2))
	if ( ($1 == 0) ){ goto $label$12 }
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL $198($1)
	*(($6 + [8])) = ($4 + $1)
	*($6) = $4
	*($6 + [4]) = $4
	$2 = *($2)
	$1 = (*(($2 + [4])) - $2)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($4, $2, $1)
	*($6 + [4]) = ($4 + $1)
	
.LABEL $label$12
	CALL $106($0, ($6 + [16]))
	CALL $106($0, $6)
	$1 = *($6)
	$2 = *($6 + [16])
	if ( ((int_32)$3 != (int_32)[16]) ){ goto $label$13 }
	$0 = (*($1) & [15])
	$0 = (*($1 + [1]) & [15])
	$0 = (*($1 + [2]) & [15])
	$0 = (*($1 + [3]) & [15])
	$0 = (*($1 + [4]) & [15])
	$0 = ((( $0 ? [10] : ($0 <= [10]) ) + (( $0 ? [10] : ($0 <= [10]) ) + (( $0 ? [10] : ($0 <= [10]) ) + (( $0 ? [10] : ($0 <= [10]) ) + ( $0 ? [10] : ($0 <= [10]) ))))) & [255])
	$0 = (*($2) & [15])
	$0 = (*($2 + [1]) & [15])
	$0 = (*($2 + [2]) & [15])
	$0 = (*($2 + [3]) & [15])
	$0 = (*($2 + [4]) & [15])
	$4 = ((( $0 ? [10] : ($0 <= [10]) ) + (( $0 ? [10] : ($0 <= [10]) ) + (( $0 ? [10] : ($0 <= [10]) ) + (( $0 ? [10] : ($0 <= [10]) ) + ( $0 ? [10] : ($0 <= [10]) ))))) & [255])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$8 }
	
.LABEL $label$13
	$0 = *(($1 + $0))
	$5 = ($0 & [15])
	$0 = (((int_32)($3 & [254]) == (int_32)[14]) << [1])
	$2 = *(($2 + $0))
	$4 = ($2 & [15])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$9 }
	$0 = uint_32($0 >> [4])
	$2 = uint_32($2 >> [4])
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$7 }
	$2 = [0]
	CALL eosio_assert([0], [144])
	$1 = *($6)
	if ( $1 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$10
	$2 = ((uint_32)$3 > (uint_32)$4)
	goto $label$3 
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)[16]) ){ goto $label$6 }
	$2 = (($4 & [255]) <= ($5 & [255]))
	if ( $1 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	$2 = ($4 <= $0)
	if ( $1 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$2 = ((uint_32)($2 & [255]) > (uint_32)($0 & [255]))
	if ( $1 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$2 = ((uint_32)($4 & [255]) > (uint_32)($5 & [255]))
	if ( ($1 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	*($6 + [4]) = $1
	CALL $200($1)
	
.LABEL $label$4
	$1 = *($6 + [16])
	if ( ($1 == 0) ){ goto $label$3 }
	*($6 + [20]) = $1
	CALL $200($1)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [32])
	return $2
	
.LABEL $label$2
	CALL $221(($6 + [16]))
	
.LABEL $label$1
	CALL $221($6)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)(*($1 + [4]) - *($1)) == (int_32)[5]), [2256])
	$6 = [0]
	*($9 + [24]) = [0]
	*($9 + [16]) = (int_64)0
	$7 = (*($1 + [4]) - *($1))
	if ( ($7 == 0) ){ goto $label$2 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL $198($7)
	*(($9 + [24])) = ($4 + $7)
	*($9 + [16]) = $4
	*($9 + [20]) = $4
	$2 = *($1)
	$7 = (*(($1 + [4])) - $2)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($4, $2, $7)
	*($9 + [20]) = ($4 + $7)
	
.LABEL $label$2
	CALL $106($0, ($9 + [16]))
	CALL eosio_assert(((int_32)(*($9 + [20]) - *($9 + [16])) == (int_32)[5]), [2256])
	$7 = *($9 + [16])
	$5 = *($9 + [20])
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$7 }
	$6 = ($5 - $7)
	$2 = (*($7) & [15])
	$4 = [1]
	
.LOOP $label$8:
	$0 = ($4 & [255])
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)((*(($7 + $0)) & [15]) + $0) == (int_32)$2) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$6 == (int_32)[5]), [2256])
	$8 = [17]
	$7 = *($9 + [16])
	$5 = *($9 + [20])
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$5 }
	$2 = *($7)
	$6 = ($5 - $7)
	$4 = [1]
	
.LOOP $label$9:
	$0 = ($4 & [255])
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$5 }
	$4 = ($4 + [1])
	if ( ((((int_32)*(($7 + $0)) ^ (int_32)$2) & [255]) <= [16]) ){ goto $label$9 }
	
.LABEL $label$6
	CALL eosio_assert(((int_32)($5 - $7) == (int_32)[5]), [2256])
	$7 = *($9 + [16])
	$5 = *($9 + [20])
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$11 }
	$2 = ($5 - $7)
	$0 = [0]
	$6 = [0]
	$4 = [0]
	
.LOOP $label$12:
	$0 = (*(($7 + $0)) & [15])
	$4 = (( $0 ? [10] : ($0 <= [10]) ) + ($4 & [255]))
	$6 = ($6 + [1])
	$0 = ($6 & [255])
	if ( ($0 <= $2) ){ goto $label$12 }
	if ( ((uint_32)($4 & [255]) >= (uint_32)[11]) ){ goto $label$10 }
	
.LABEL $label$11
	$4 = (*($7) & [15])
	if ( ((uint_32)( $4 ? [10] : ($4 <= [10]) ) >= (uint_32)[5]) ){ goto $label$13 }
	$8 = [16]
	goto $label$4 
	
.LABEL $label$13
	$2 = ($5 - $7)
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$2 == (int_32)[5]), [2256])
	$8 = [15]
	$4 = *($7 + [2])
	$7 = *($9 + [16])
	if ( ((int_32)(((( [1] ? [2] : (((int_32)*($7) ^ (int_32)$4) & [15]) ) + ((((int_32)*($7 + [1]) ^ (int_32)$4) & [15]) == 0)) + ((((int_32)*($7 + [3]) ^ (int_32)$4) & [15]) == 0)) + ((((int_32)*($7 + [4]) ^ (int_32)$4) & [15]) == 0)) == (int_32)[4]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)(*($9 + [20]) - $7) == (int_32)[5]), [2256])
	$7 = *($9 + [16])
	$4 = *($9 + [20])
	$5 = ($4 - $7)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$14 }
	if ( ($5 <= [2]) ){ goto $label$14 }
	$8 = (*($7 + [2]) & [15])
	$0 = ((int_32)$4 == (int_32)$8)
	$3 = (*(($7 + ($0 << [2]))) & [15])
	$4 = (*($7) & [15])
	$4 = ((int_32)$4 == (int_32)$3)
	$6 = [1]
	$2 = [1]
	
.LOOP $label$15:
	$6 = (*(($7 + $6)) & [15])
	$0 = (((int_32)$6 == (int_32)$8) + $0)
	$4 = (((int_32)$6 == (int_32)$3) + $4)
	$2 = ($2 + [1])
	$6 = ($2 & [255])
	if ( ($6 <= $5) ){ goto $label$15 }
	if ( ((int_32)($4 & [255]) != (int_32)[2]) ){ goto $label$14 }
	$8 = [14]
	if ( ((int_32)($0 & [255]) == (int_32)[3]) ){ goto $label$4 }
	
.LABEL $label$14
	CALL eosio_assert(((int_32)$5 == (int_32)[5]), [2256])
	$8 = [13]
	$7 = *($9 + [16])
	$4 = *($9 + [20])
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$5 }
	$2 = *($7)
	$6 = ($4 - $7)
	$4 = [1]
	
.LOOP $label$16:
	$0 = ($4 & [255])
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$5 }
	$4 = ($4 + [1])
	if ( ((((int_32)*(($7 + $0)) ^ (int_32)$2) & [255]) <= [16]) ){ goto $label$16 }
	CALL eosio_assert(((int_32)$6 == (int_32)[5]), [2256])
	$8 = [12]
	$7 = *($9 + [16])
	$4 = *($9 + [20])
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$5 }
	$6 = ($4 - $7)
	$4 = [0]
	$0 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(*(($7 + $4)) & [15]) <= (uint_32)[10]) ){ goto $label$17 }
	$8 = [12]
	$0 = ($0 + [1])
	$4 = ($0 & [255])
	if ( ($4 <= $6) ){ goto $label$18 }
	goto $label$4 
	
.LABEL $label$17
	CALL eosio_assert(((int_32)$6 == (int_32)[5]), [2256])
	$8 = [11]
	$7 = *($9 + [16])
	$4 = *($9 + [20])
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$5 }
	$6 = ($4 - $7)
	$2 = (*($7) & [15])
	$4 = [1]
	
.LOOP $label$24:
	$0 = ($4 & [255])
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$23 }
	$4 = ($4 + [1])
	if ( ((int_32)((*(($7 + $0)) & [15]) + $0) == (int_32)$2) ){ goto $label$24 }
	*($9 + [8]) = [0]
	*($9) = (int_64)0
	CALL $88($9, [5])
	$7 = (*(*($1)) & [15])
	*(*($9)) = ( $7 ? [10] : ($7 <= [10]) )
	$4 = (*(*($1) + [1]) & [15])
	*(($7 = *($9)) + [1]) = ( $4 ? [10] : ($4 <= [10]) )
	$4 = *($7)
	$0 = (*(*($1) + [2]) & [15])
	*(($7 = *($9)) + [2]) = ( $0 ? [10] : ($0 <= [10]) )
	$0 = *($7 + [1])
	$6 = (*(*($1) + [3]) & [15])
	*(($7 = *($9)) + [3]) = ( $6 ? [10] : ($6 <= [10]) )
	$6 = *($7 + [2])
	$2 = (*(*($1) + [4]) & [15])
	$2 = ( $2 ? [10] : ($2 <= [10]) )
	*(($7 = *($9)) + [4]) = $2
	$4 = *($7 + [1])
	$6 = *($7)
	$5 = *($7 + [3])
	$1 = ((($5 + ($6 + ($0 + $4))) + $2) & [255])
	$0 = ($1 - $6)
	if ( (((int_32)($0 - $4) % (int_32)[10]) == 0) ){ goto $label$20 }
	$4 = *($7 + [2])
	if ( (((int_32)($0 - $4) % (int_32)[10]) == 0) ){ goto $label$20 }
	$4 = *($7 + [3])
	if ( (((int_32)($0 - $4) % (int_32)[10]) == 0) ){ goto $label$20 }
	$4 = *($7 + [4])
	if ( (((int_32)($0 - $4) % (int_32)[10]) == 0) ){ goto $label$20 }
	$4 = *($7 + [2])
	$6 = *($7 + [1])
	$0 = ($1 - $6)
	if ( (((int_32)($0 - $4) % (int_32)[10]) == 0) ){ goto $label$20 }
	$4 = *($7 + [3])
	if ( (((int_32)($0 - $4) % (int_32)[10]) == 0) ){ goto $label$20 }
	$4 = *($7 + [4])
	if ( (((int_32)($0 - $4) % (int_32)[10]) == 0) ){ goto $label$20 }
	$6 = *($7 + [2])
	$8 = ($1 - $6)
	if ( (((int_32)($8 - $5) % (int_32)[10]) == 0) ){ goto $label$22 }
	$0 = [4]
	
.LOOP $label$25:
	$4 = ($0 & [255])
	if ( ((uint_32)$4 > (uint_32)[4]) ){ goto $label$21 }
	$0 = ($0 + [1])
	$4 = *(($7 + $4))
	if ( ((int_32)($8 - $4) % (int_32)[10]) ){ goto $label$25 }
	goto $label$20 
	
.LABEL $label$23
	$8 = [11]
	goto $label$4 
	
.LABEL $label$22
	$4 = $5
	goto $label$20 
	
.LABEL $label$21
	$8 = [0]
	$6 = $5
	$4 = $2
	if ( ((int_32)(($1 - $5) - $2) % (int_32)[10]) ){ goto $label$19 }
	
.LABEL $label$20
	$4 = ($4 + $6)
	$8 = ( ($4 + [246]) ? $4 : ((uint_32)$4 > (uint_32)[10]) )
	
.LABEL $label$19
	*($9 + [4]) = $7
	CALL $200($7)
	$7 = *($9 + [16])
	
.LABEL $label$5
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	*($9 + [20]) = $7
	CALL $200($7)
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [32])
	return ($8 & [255])
	
.LABEL $label$1
	CALL $221(($9 + [16]))
	return (unreachable)
}

void .FUNC _ZN6gamenn9digRewardEyN5eosio5assetE (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [48])
	*([0] + [4]) = $14
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [160]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$6 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$10 }
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$10 }
	$9 = CALL _ZN6gamenn11getPkeRatioEv($7)
	$11 = *($3)
	CALL eosio_assert([1], [976])
	$11 = ((int_64)$11 * (int_64)$9)
	$5 = ((uint_64)$11 / (uint_64)(int_64)10000)
	$9 = (int_64)4541264
	$12 = (int_64)1162563588
	$7 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$4 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$11 }
	goto $label$8 
	
.LABEL $label$10
	CALL eosio_assert([1], [976])
	$9 = (int_64)4541264
	$12 = (int_64)1162563588
	$7 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$4 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$4 = [0]
	
.LABEL $label$14
	CALL eosio_assert($4, [1040])
	CALL eosio_assert([1], [976])
	$9 = (int_64)4541264
	$13 = (int_64)1162563588
	$7 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	
.LOOP $label$23:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$23 }
	
.LABEL $label$22
	$4 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$4 = [0]
	
.LABEL $label$19
	CALL eosio_assert($4, [1040])
	$11 = (int_64)0
	$2 = (int_64)0
	goto $label$7 
	
.LABEL $label$9
	$4 = [0]
	
.LABEL $label$8
	CALL eosio_assert($4, [1040])
	CALL eosio_assert([1], [976])
	$9 = (int_64)4541264
	$7 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$27 }
	
.LOOP $label$28:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$25 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$28 }
	
.LABEL $label$27
	$4 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$4 = [0]
	
.LABEL $label$24
	CALL eosio_assert($4, [1040])
	CALL eosio_assert([1], [976])
	$2 = ((uint_64)$11 / (uint_64)(int_64)100000)
	$9 = (int_64)4541264
	$13 = (int_64)1162563588
	$7 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	
.LOOP $label$33:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$30 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$33 }
	
.LABEL $label$32
	$4 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$4 = [0]
	
.LABEL $label$29
	CALL eosio_assert($4, [1040])
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [176]
	$10 = (int_64)0
	
.LOOP $label$34:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$35 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$37 }
	$4 = ($4 + [165])
	goto $label$36 
	
.LABEL $label$37
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$36
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$35
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$34 }
	*(($14 + [40])) = [0]
	*($14 + [8]) = $10
	*($14 + [24]) = (int_64)-1
	*($14 + [32]) = (int_64)0
	*($14 + [16]) = (int_64)4541264
	$7 = CALL $99(($14 + [8]), (int_64)4541264, [672])
	$8 = *($7 + [8])
	$11 = *($7)
	$3 = *($14 + [32])
	if ( ($3 == 0) ){ goto $label$38 }
	$6 = ($14 + [36])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$40 }
	
.LOOP $label$41:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$42 }
	CALL $200($4)
	
.LABEL $label$42
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$41 }
	$7 = *(($14 + [32]))
	goto $label$39 
	
.LABEL $label$40
	$7 = $3
	
.LABEL $label$39
	*($6) = $3
	CALL $200($7)
	
.LABEL $label$38
	CALL eosio_assert(((int_64)1162563588 == (int_64)1162563588), [1184])
	CALL eosio_assert([1], [1232])
	CALL eosio_assert([1], [1264])
	$7 = ((int_64)$8 == (int_64)1162563588)
	CALL eosio_assert($7, [1456])
	if ( ((int_64)$11 >= (int_64)((int_64)$2 + (int_64)$5)) ){ goto $label$44 }
	CALL eosio_assert($7, [1456])
	if ( ((int_64)$11 <= (int_64)$5) ){ goto $label$43 }
	CALL eosio_assert($7, [1296])
	$2 = (int_64)
	CALL eosio_assert(((int_64)$2($11 - $5)) > (int_64)-4611686018427387904), [1344])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [1376])
	$11 = $5
	$13 = $8
	goto $label$7 
	
.LABEL $label$44
	$11 = $5
	goto $label$7 
	
.LABEL $label$43
	CALL eosio_assert([1], [976])
	$9 = (int_64)4541264
	$7 = [0]
	
.LOOP $label$47:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$46 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$48 }
	
.LOOP $label$49:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$46 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$49 }
	
.LABEL $label$48
	$4 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$47 }
	goto $label$45 
	
.LABEL $label$46
	$4 = [0]
	
.LABEL $label$45
	CALL eosio_assert($4, [1040])
	$2 = (int_64)0
	$12 = $8
	
.LABEL $label$7
	*($0 + [8]) = $12
	*($0) = $11
	*($0 + [16]) = $2
	*(($0 + [24])) = $13
	*([0] + [4]) = ($14 + [48])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = *(($1 + [28]))
	if ( ((int_32)$4 == (int_32)*($1 + [24])) ){ goto $label$4 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$1), [224])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-3020378822620332032, (int_64)-3020378822620332032)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $90($1, $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$1), [224])
	
.LABEL $label$3
	*($0) = *($4)
	*(($0 + [24])) = *(($4 + [24]))
	*(($0 + [16])) = *(($4 + [16]))
	*(($0 + [8])) = *(($4 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($5 + [8]) = $3
	CALL $97($5, $1, $2, ($5 + [8]))
	$1 = *($5 + [4])
	*($0) = *($1)
	*(($0 + [28])) = *(($1 + [28]))
	*(($0 + [24])) = *(($1 + [24]))
	*(($0 + [20])) = *(($1 + [20]))
	*(($0 + [16])) = *(($1 + [16]))
	*(($0 + [12])) = *(($1 + [12]))
	*(($0 + [8])) = *(($1 + [8]))
	*(($0 + [4])) = *(($1 + [4]))
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$0), [224])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3020378822620332032, (int_64)-3020378822620332032)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $90($0, $3)
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$0), [224])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [368])
	CALL $91($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $92($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [592])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $198([320])
	$4 = CALL $47($6)
	*($6 + [308]) = $0
	CALL $85(($8 + [32]), $4)
	*($6 + [312]) = $1
	*($8 + [24]) = $6
	$5 = *($6 + [48])
	*($8 + [16]) = $5
	$7 = *($6 + [312])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $60(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [296]) & [1]) == 0) ){ goto $label$10 }
	CALL $200(*(($4 + [304])))
	
.LABEL $label$10
	$7 = *($4 + [232])
	if ( ($7 == 0) ){ goto $label$11 }
	*(($4 + [236])) = $7
	CALL $200($7)
	
.LABEL $label$11
	$7 = *($4 + [220])
	if ( ($7 == 0) ){ goto $label$12 }
	*(($4 + [224])) = $7
	CALL $200($7)
	
.LABEL $label$12
	$7 = *($4 + [208])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($4 + [212])) = $7
	CALL $200($7)
	
.LABEL $label$13
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$14 }
	CALL $200(*(($4 + [72])))
	
.LABEL $label$14
	CALL $200($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC __towrite (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $173 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	*($12) = [0]
	$8 = *($1 + [8])
	*($12 + [8]) = $8
	if ( ((uint_32)$8 > (uint_32)[8]) ){ goto $label$2 }
	$11 = $12
	$10 = $1
	goto $label$1 
	
.LABEL $label$2
	$11 = CALL $199($8)
	*($12) = $11
	$10 = *($1)
	
.LABEL $label$1
	CALL memcpy($11, $10, $8)
	$4 = *(($12 + [8]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$5 }
	$5 = ($12 + $4)
	
.LOOP $label$6:
	$7 = *($2)
	$10 = $12
	$8 = $4
	if ( ($8 == 0) ){ goto $label$7 }
	
.LOOP $label$8:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$9 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$9
	$8 = $11
	if ( $8 ){ goto $label$8 }
	
.LABEL $label$7
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$10 }
	if ( ((int_32)*($10) <= (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$10
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$5 = *($12)
	$6 = ($5 + $4)
	
.LOOP $label$11:
	$7 = *($2)
	$10 = $5
	$8 = $4
	if ( ($8 == 0) ){ goto $label$12 }
	
.LOOP $label$13:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$14 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$14
	$8 = $11
	if ( $8 ){ goto $label$13 }
	
.LABEL $label$12
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$15 }
	if ( ((int_32)*($10) <= (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$15
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$4
	$2 = $3
	
.LABEL $label$3
	if ( ($4 <= [9]) ){ goto $label$16 }
	$8 = *($12)
	if ( ($8 == 0) ){ goto $label$16 }
	CALL $201($8)
	
.LABEL $label$16
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$19 }
	if ( (*($1 + [12]) == 0) ){ goto $label$18 }
	$4 = ($2 + [1])
	goto $label$17 
	
.LABEL $label$19
	$2 = $3
	$4 = $3
	goto $label$17 
	
.LABEL $label$18
	$5 = *(($1 + [8]))
	if ( ((uint_32)$5 >= (uint_32)[9]) ){ goto $label$20 }
	$6 = ($1 + $5)
	$4 = $2
	
.LOOP $label$21:
	$7 = *($4)
	$10 = $1
	$8 = $5
	if ( ($8 == 0) ){ goto $label$22 }
	
.LOOP $label$23:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$24 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$24
	$8 = $11
	if ( $8 ){ goto $label$23 }
	
.LABEL $label$22
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$17 }
	if ( ((int_32)*($10) > (int_32)$7) ){ goto $label$17 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$21 }
	goto $label$17 
	
.LABEL $label$20
	$6 = *($1)
	$1 = ($6 + $5)
	$4 = $2
	
.LOOP $label$25:
	$7 = *($4)
	$10 = $6
	$8 = $5
	if ( ($8 == 0) ){ goto $label$26 }
	
.LOOP $label$27:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$28 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$28
	$8 = $11
	if ( $8 ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)$10 == (int_32)$1) ){ goto $label$17 }
	if ( ((int_32)*($10) > (int_32)$7) ){ goto $label$17 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$25 }
	
.LABEL $label$17
	*($0 + [4]) = $4
	*($0) = $2
	*([0] + [4]) = ($12 + [16])
}

int_32 .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [592])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $198([80])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [976])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [1040])
	*($4 + [52]) = [0]
	*($4 + [44 align=4]) = (int_64)0
	*($4 + [64]) = $0
	CALL $183(($8 + [32]), $4)
	*($4 + [68]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [68])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $184($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((*($5 + [44]) & [1]) == 0) ){ goto $label$15 }
	CALL $200(*(($5 + [52])))
	
.LABEL $label$15
	CALL $200($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $153 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [3568]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)9) ){ goto $label$6 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	$9 = [0]
	*(($10 + [40])) = [0]
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	$6 = *($0)
	*($10 + [16]) = $6
	*($10 + [8]) = $7
	$4 = CALL db_find_i64($7, $6, (int_64)-2063328921671172096, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $181(($10 + [8]), $4) + [8]) == (int_32)($10 + [8])), [224])
	$9 = [1]
	$0 = *($10 + [32])
	if ( ($0 == 0) ){ goto $label$7 }
	$3 = ($10 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $200($2)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($10 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $0
	
.LABEL $label$8
	*($3) = $0
	CALL $200($4)
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [48])
	return $9
}

int_32 .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [2064])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$7 = *($1 + [4])
	$5 = int_32(($7 - $3) >> [4])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$3 }
	CALL $185($1, ($4 - $5))
	$7 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$5) ){ goto $label$2 }
	$4 = ($4 << [4])
	$2 = ($3 + $4)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$3 = (([0] - $3) - $4)
	$4 = ($7 + [-12])
	
.LOOP $label$5:
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$6 }
	*(($4 + [4])) = $5
	CALL $200($5)
	
.LABEL $label$6
	$4 = ($4 + [-16])
	if ( ((int_32)($4 + $3) != (int_32)[-12]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$7 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$7 }
	$3 = ($0 + [8])
	
.LOOP $label$8:
	$5 = ($0 + [4])
	CALL eosio_assert(((uint_32)(*($3) - *($5)) > (uint_32)[1]), [208])
	CALL memcpy($4, *($5), [2])
	*($5) = (*($5) + [2])
	CALL $89($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

void .FUNC $151 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	$1 = *($0)
	$5 = (int_64)0
	$4 = (int_64)59
	$0 = [1664]
	$6 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$5 > (uint_64)(int_64)5) ){ goto $label$6 }
	$2 = *($0)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$7 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	$5 = (int_64)0
	$4 = (int_64)59
	$0 = [3568]
	$8 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$5 > (uint_64)(int_64)9) ){ goto $label$12 }
	$2 = *($0)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$2 = ($2 + [165])
	goto $label$10 
	
.LABEL $label$12
	$7 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$8
	$0 = ($0 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$7 | (int_64)$8)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$7 }
	$5 = (int_64)0
	$4 = (int_64)59
	$0 = [3776]
	$9 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$5 > (uint_64)(int_64)6) ){ goto $label$18 }
	$2 = *($0)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$2 = ($2 + [165])
	goto $label$16 
	
.LABEL $label$18
	$7 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$14
	$0 = ($0 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$13 }
	*($10) = $1
	*($10 + [16]) = $9
	*($10 + [8]) = $8
	*(($0 = CALL $198([16]))) = $1
	*($0 + [8]) = $6
	*(($2 = ($10 + [40]))) = [0]
	$3 = ($0 + [16])
	*(($10 + [32])) = $3
	*(($10 + [28])) = $3
	*($10 + [24]) = $0
	*($10 + [36]) = [0]
	*(($10 + [44])) = [0]
	CALL $61(($10 + [36]), [8])
	$0 = *($10 + [36])
	CALL eosio_assert(((int_32)(*($2) - $0) > (int_32)[7]), [352])
	CALL memcpy($0, $10, [8])
	CALL $62(($10 + [48]), ($10 + [8]))
	$0 = *($10 + [48])
	CALL send_inline($0, (*($10 + [52]) - $0))
	$0 = *($10 + [48])
	if ( ($0 == 0) ){ goto $label$19 }
	*($10 + [52]) = $0
	CALL $200($0)
	
.LABEL $label$19
	$0 = *($10 + [36])
	if ( ($0 == 0) ){ goto $label$20 }
	*(($10 + [40])) = $0
	CALL $200($0)
	
.LABEL $label$20
	$0 = *($10 + [24])
	if ( ($0 == 0) ){ goto $label$21 }
	*(($10 + [28])) = $0
	CALL $200($0)
	
.LABEL $label$21
	*([0] + [4]) = ($10 + [64])
}

int_32 .FUNC $156 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [144])
	*([0] + [4]) = $11
	*($11 + [128]) = $1
	CALL $51(($11 + [112]), ($11 + [128]))
	$5 = *($11 + [112])
	$2 = ($5 & [1])
	CALL sha256(( *($11 + [120]) ? (($11 + [112]) | [1]) : $2 ), ( *($11 + [116]) ? uint_32($5 >> [1]) : $2 ), ($11 + [80]))
	$1 = (int_64)0
	$6 = (int_64)59
	$5 = [3568]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$1 > (uint_64)(int_64)9) ){ goto $label$6 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	$1 = (int_64)0
	$6 = (int_64)59
	$5 = [3568]
	$9 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$1 > (uint_64)(int_64)9) ){ goto $label$12 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$2 = ($2 + [165])
	goto $label$10 
	
.LABEL $label$12
	$8 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$5 = ($5 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$7 }
	$10 = [0]
	*((($11 + [40]) + [32])) = [0]
	*($11 + [48]) = $9
	*($11 + [40]) = $7
	*($11 + [56]) = (int_64)-1
	*($11 + [64]) = (int_64)0
	*($11 + [76]) = [0]
	*($11 + [32]) = ($11 + [40])
	$1 = *($11 + [104])
	$8 = *($11 + [96])
	$6 = *($11 + [88])
	$7 = *($11 + [80])
	CALL eosio_assert([1], [3696])
	*($11 + [8]) = $7
	*($11) = $6
	CALL eosio_assert([1], [3696])
	*(($11 + [24])) = $8
	*($11 + [16]) = $1
	CALL $178(($11 + [136]), ($11 + [32]), $11)
	$5 = *($11 + [140])
	if ( ($5 == 0) ){ goto $label$13 }
	$6 = *(($5 + [40]))
	$7 = *(($5 + [32]))
	$1 = *(($5 + [24]))
	$8 = *($5 + [16])
	CALL eosio_assert([1], [3696])
	CALL eosio_assert([1], [3696])
	if ( ((int_64)((int_64)((int_64)$1 ^ (int_64)*($11)) | (int_64)((int_64)$8 ^ (int_64)*($11 + [8]))) != (int_64)0) ){ goto $label$13 }
	if ( ((int_64)((int_64)((int_64)*(($11 + [16])) ^ (int_64)$6) | (int_64)((int_64)*(($11 + [24])) ^ (int_64)$7)) != (int_64)0) ){ goto $label$13 }
	$10 = ((int_32)*($11 + [140]) != (int_32)[0])
	
.LABEL $label$13
	$3 = *($11 + [64])
	if ( ($3 == 0) ){ goto $label$14 }
	$4 = ($11 + [68])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$16 }
	
.LOOP $label$17:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$18 }
	CALL $200($2)
	
.LABEL $label$18
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$17 }
	$5 = *(($11 + [64]))
	goto $label$15 
	
.LABEL $label$16
	$5 = $3
	
.LABEL $label$15
	*($4) = $3
	CALL $200($5)
	
.LABEL $label$14
	if ( ((*($11 + [112]) & [1]) == 0) ){ goto $label$19 }
	CALL $200(*(($11 + [120])))
	
.LABEL $label$19
	*([0] + [4]) = ($11 + [144])
	return $10
}

int_32 .FUNC $157 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [48])
	*([0] + [4]) = $12
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [3568]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)9) ){ goto $label$6 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [3568]
	$10 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$7 > (uint_64)(int_64)9) ){ goto $label$12 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$2 = ($2 + [165])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$7 }
	$11 = [0]
	*(($12 + [40])) = [0]
	*($12 + [24]) = (int_64)-1
	*($12 + [32]) = (int_64)0
	*($12 + [16]) = $10
	*($12 + [8]) = $8
	$5 = CALL db_find_i64($8, $10, (int_64)4344997579449171968, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$13 }
	CALL eosio_assert(((int_32)*(CALL $176(($12 + [8]), $5) + [8]) == (int_32)($12 + [8])), [224])
	$11 = [1]
	$3 = *($12 + [32])
	if ( ($3 == 0) ){ goto $label$13 }
	$4 = ($12 + [36])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$17 }
	CALL $200($2)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$16 }
	$5 = *(($12 + [32]))
	goto $label$14 
	
.LABEL $label$15
	$5 = $3
	
.LABEL $label$14
	*($4) = $3
	CALL $200($5)
	
.LABEL $label$13
	*([0] + [4]) = ($12 + [48])
	return $11
}

int_32 .FUNC $154 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [48])
	*([0] + [4]) = $12
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [3568]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)9) ){ goto $label$6 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [3568]
	$10 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$7 > (uint_64)(int_64)9) ){ goto $label$12 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$2 = ($2 + [165])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$7 }
	$11 = [0]
	*(($12 + [40])) = [0]
	*($12 + [24]) = (int_64)-1
	*($12 + [32]) = (int_64)0
	*($12 + [16]) = $10
	*($12 + [8]) = $8
	$5 = CALL db_find_i64($8, $10, (int_64)-2063328921671172096, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$13 }
	CALL eosio_assert(((int_32)*(CALL $181(($12 + [8]), $5) + [8]) == (int_32)($12 + [8])), [224])
	$11 = [1]
	$3 = *($12 + [32])
	if ( ($3 == 0) ){ goto $label$13 }
	$4 = ($12 + [36])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$17 }
	CALL $200($2)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$16 }
	$5 = *(($12 + [32]))
	goto $label$14 
	
.LABEL $label$15
	$5 = $3
	
.LABEL $label$14
	*($4) = $3
	CALL $200($5)
	
.LABEL $label$13
	*([0] + [4]) = ($12 + [48])
	return $11
}

int_32 .FUNC $155 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [3568]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)9) ){ goto $label$6 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	$9 = [0]
	*(($10 + [40])) = [0]
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	$6 = *($0)
	*($10 + [16]) = $6
	*($10 + [8]) = $7
	$4 = CALL db_find_i64($7, $6, (int_64)4344997579449171968, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $176(($10 + [8]), $4) + [8]) == (int_32)($10 + [8])), [224])
	$9 = [1]
	$0 = *($10 + [32])
	if ( ($0 == 0) ){ goto $label$7 }
	$3 = ($10 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $200($2)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($10 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $0
	
.LABEL $label$8
	*($3) = $0
	CALL $200($4)
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [48])
	return $9
}

void .FUNC $158 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	*([0] + [4]) = $10
	$1 = *($0)
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [1664]
	$6 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$5 > (uint_64)(int_64)5) ){ goto $label$6 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$7 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [3568]
	$8 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$5 > (uint_64)(int_64)9) ){ goto $label$12 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$2 = ($2 + [165])
	goto $label$10 
	
.LABEL $label$12
	$7 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$8
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$7 | (int_64)$8)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$7 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [3760]
	$9 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$5 > (uint_64)(int_64)5) ){ goto $label$18 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$2 = ($2 + [165])
	goto $label$16 
	
.LABEL $label$18
	$7 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$14
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$13 }
	*(($10 + [44])) = *(($0 + [44]))
	*(($10 + [40])) = *(($0 + [40]))
	*(($10 + [36])) = *(($0 + [36]))
	*(($10 + [32])) = *(($0 + [32]))
	*(($10 + [28])) = *(($0 + [28]))
	*(($10 + [24])) = *(($0 + [24]))
	*(($10 + [20])) = *(($0 + [20]))
	*($10) = $1
	*($10 + [16]) = *($0 + [16])
	*($10 + [64]) = $9
	*($10 + [56]) = $8
	*(($3 = CALL $198([16]))) = $1
	*($3 + [8]) = $6
	*(($2 = (($10 + [56]) + [32]))) = [0]
	$0 = ($3 + [16])
	*((($10 + [56]) + [24])) = $0
	*((($10 + [56]) + [20])) = $0
	*($10 + [72]) = $3
	*($10 + [84]) = [0]
	*((($10 + [56]) + [36])) = [0]
	CALL $61((($10 + [56]) + [28]), [40])
	$3 = *($10 + [84])
	$2 = (*($2) - $3)
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [352])
	CALL memcpy($3, $10, [8])
	CALL eosio_assert(((int_32)($2 + [-8]) > (int_32)[31]), [352])
	CALL memcpy(($3 + [8]), ($10 + [16]), [32])
	CALL $62(($10 + [96]), ($10 + [56]))
	$3 = *($10 + [96])
	CALL send_inline($3, (*($10 + [100]) - $3))
	$3 = *($10 + [96])
	if ( ($3 == 0) ){ goto $label$19 }
	*($10 + [100]) = $3
	CALL $200($3)
	
.LABEL $label$19
	$3 = *($10 + [84])
	if ( ($3 == 0) ){ goto $label$20 }
	*(($10 + [88])) = $3
	CALL $200($3)
	
.LABEL $label$20
	$3 = *($10 + [72])
	if ( ($3 == 0) ){ goto $label$21 }
	*(($10 + [76])) = $3
	CALL $200($3)
	
.LABEL $label$21
	*([0] + [4]) = ($10 + [112])
}

int_32 .FUNC $159 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [48])
	*([0] + [4]) = $12
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [3568]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)9) ){ goto $label$6 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [3568]
	$10 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$7 > (uint_64)(int_64)9) ){ goto $label$12 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$2 = ($2 + [165])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$7 }
	$11 = [0]
	*(($12 + [40])) = [0]
	*($12 + [24]) = (int_64)-1
	*($12 + [32]) = (int_64)0
	*($12 + [16]) = $10
	*($12 + [8]) = $8
	$5 = CALL db_find_i64($8, $10, (int_64)4983122594569794048, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$13 }
	CALL eosio_assert(((int_32)*(CALL $174(($12 + [8]), $5) + [8]) == (int_32)($12 + [8])), [224])
	$11 = [1]
	$3 = *($12 + [32])
	if ( ($3 == 0) ){ goto $label$13 }
	$4 = ($12 + [36])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$17 }
	CALL $200($2)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$16 }
	$5 = *(($12 + [32]))
	goto $label$14 
	
.LABEL $label$15
	$5 = $3
	
.LABEL $label$14
	*($4) = $3
	CALL $200($5)
	
.LABEL $label$13
	*([0] + [4]) = ($12 + [48])
	return $11
}

int_32 .FUNC $179 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [592])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $198([64])) + [48]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [208])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((uint_32)($4 + [-8]) > (uint_32)[31]), [208])
	CALL memcpy(($6 + [16]), ($7 + [8]), [32])
	*($6 + [56]) = [-1]
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $180(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $200($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC isspace (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC $183 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [208])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [208])
	CALL memcpy(($3 + [12]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [40]) = ((int_32)*($3 + [12]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [208])
	CALL memcpy(($3 + [13]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [41]) = ((int_32)*($3 + [13]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [208])
	CALL memcpy(($3 + [14]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [42]) = ((int_32)*($3 + [14]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [208])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [43]) = ((int_32)*($3 + [15]) != (int_32)[0])
	$0 = CALL $86($0, ($1 + [44]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [592])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $198([32])
	$6 = CALL $70($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $71(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $200($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $68 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [224])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $69($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [224])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC sprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [12]) = $2
	$2 = CALL vsprintf($0, $1, $2)
	*([0] + [4]) = ($3 + [16])
	return $2
}

int_32 .FUNC __errno_location ()
{
	return [12408]
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	$9 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$8 = *($2)
	$6 = *($2 + [4])
	$3 = ($6 - $8)
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = (($6 + [-1]) - $8)
	$4 = ($10 | [1])
	$7 = ($10 + [8])
	
.LOOP $label$2:
	CALL $75($10, $1, *(($8 + $9)))
	$8 = *($10)
	$6 = ($8 & [1])
	CALL $207($0, ( *($7) ? $4 : $6 ), ( *($10 + [4]) ? uint_32($8 >> [1]) : $6 ))
	if ( ((*($10) & [1]) == 0) ){ goto $label$3 }
	CALL $200(*($7))
	
.LABEL $label$3
	$6 = ($9 + [1])
	if ( ((uint_32)$6 >= (uint_32)$3) ){ goto $label$4 }
	CALL $208($0, [1904])
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$1 }
	$8 = *($2)
	$9 = $6
	goto $label$2 
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $64 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $198($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*((($9 + [24]) + [24])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	*($9 + [52]) = [0]
	*(($9 + [56])) = [0]
	*(($9 + [60])) = [0]
	$8 = *($3 + [24])
	$2 = ( *(($3 + [28])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($2 + [24])
	$0 = (CASTING uint_64)(uint_32 $2)
	$6 = ($3 + [24])
	$2 = (($9 + [24]) + [28])
	
.LOOP $label$4:
	$8 = ($8 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($8 == 0) ){ goto $label$6 }
	CALL $61($2, $8)
	$2 = *(($9 + [56]))
	$8 = *(($9 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$8 = [0]
	
.LABEL $label$5
	*($9 + [64]) = $8
	*($9 + [72]) = $2
	CALL eosio_assert(((int_32)($2 - $8) > (int_32)[7]), [352])
	CALL memcpy($8, $3, [8])
	$7 = ($8 + [8])
	CALL eosio_assert(((int_32)($2 - $7) > (int_32)[7]), [352])
	CALL memcpy($7, ($3 + [8]), [8])
	$7 = ($8 + [16])
	CALL eosio_assert(((int_32)($2 - $7) > (int_32)[7]), [352])
	CALL memcpy($7, ($3 + [16]), [8])
	*($9 + [68]) = ($8 + [24])
	CALL $72(($9 + [64]), $6)
	CALL $62(($9 + [64]), ($9 + [24]))
	$8 = *($9 + [64])
	CALL send_inline($8, (*($9 + [68]) - $8))
	$8 = *($9 + [64])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [68]) = $8
	CALL $200($8)
	
.LABEL $label$7
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$8 }
	*(($9 + [56])) = $8
	CALL $200($8)
	
.LABEL $label$8
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$9 }
	*(($9 + [44])) = $8
	CALL $200($8)
	
.LABEL $label$9
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$10 }
	*($9 + [12]) = $8
	CALL $200($8)
	
.LABEL $label$10
	*([0] + [4]) = ($9 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $221(($9 + [8]))
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [272])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($3 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($3 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($3 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($3 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($3 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $72(*($1), ($3 + [48]))
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [352])
	CALL memcpy(*($0 + [4]), ($3 + [64]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	*($4) = *($1)
	*($4 + [12]) = ($3 + [97])
	*($4 + [8]) = ($3 + [96])
	*($4 + [16]) = ($3 + [98])
	*($4 + [20]) = ($3 + [99])
	*($4 + [24]) = ($3 + [100])
	*($4 + [28]) = ($3 + [101])
	*($4 + [32]) = ($3 + [102])
	*($4 + [36]) = ($3 + [103])
	*($4 + [40]) = ($3 + [104])
	*($4 + [44]) = ($3 + [105])
	*($4 + [48]) = ($3 + [106])
	*($4 + [52]) = ($3 + [107])
	*($4 + [56]) = ($3 + [108])
	*($4 + [60]) = ($3 + [109])
	*($4 + [64]) = ($3 + [110])
	*($4 + [68]) = ($3 + [111])
	*($4 + [72]) = ($3 + [112])
	*($4 + [76]) = ($3 + [113])
	*($4 + [80]) = ($3 + [114])
	*($4 + [84]) = ($3 + [115])
	*($4 + [88]) = ($3 + [116])
	*($4 + [92]) = ($3 + [117])
	*($4 + [96]) = ($3 + [118])
	*($4 + [100]) = ($3 + [119])
	*($4 + [104]) = ($3 + [120])
	*($4 + [108]) = ($3 + [121])
	*($4 + [112]) = ($3 + [122])
	*($4 + [116]) = ($3 + [123])
	*($4 + [120]) = ($3 + [124])
	*($4 + [124]) = ($3 + [125])
	*($4 + [128]) = ($3 + [126])
	*($4 + [132]) = ($3 + [127])
	*($4 + [136]) = ($3 + [128])
	*($4 + [140]) = ($3 + [129])
	*($4 + [144]) = ($3 + [130])
	*($4 + [148]) = ($3 + [131])
	*($4 + [152]) = ($3 + [132])
	*($4 + [156]) = ($3 + [133])
	*($4 + [160]) = ($3 + [134])
	*($4 + [164]) = ($3 + [135])
	*($4 + [168]) = ($3 + [136])
	*($4 + [172]) = ($3 + [137])
	*($4 + [176]) = ($3 + [138])
	*($4 + [180]) = ($3 + [139])
	*($4 + [184]) = ($3 + [140])
	*($4 + [188]) = ($3 + [141])
	*($4 + [192]) = ($3 + [142])
	*($4 + [196]) = ($3 + [143])
	*($4 + [200]) = ($3 + [144])
	*($4 + [204]) = ($3 + [145])
	*($4 + [208]) = ($3 + [146])
	*($4 + [212]) = ($3 + [147])
	*($4 + [216]) = ($3 + [148])
	*($4 + [220]) = ($3 + [149])
	*($4 + [224]) = ($3 + [150])
	*($4 + [228]) = ($3 + [151])
	*($4 + [232]) = ($3 + [152])
	*($4 + [236]) = ($3 + [153])
	*($4 + [240]) = ($3 + [154])
	*($4 + [244]) = ($3 + [155])
	*($4 + [248]) = ($3 + [156])
	*($4 + [252]) = ($3 + [157])
	*($4 + [256]) = ($3 + [158])
	*($4 + [260]) = ($3 + [159])
	*($4 + [264]) = ($3 + [160])
	*($4 + [268]) = ($3 + [161])
	CALL $73(($4 + [8]), $4)
	CALL $72(*($1), ($3 + [164]))
	CALL $72(*($1), ($3 + [176]))
	*([0] + [4]) = ($4 + [272])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [272])
	*([0] + [4]) = $6
	$3 = *($5 + [48])
	$5 = *($0)
	$4 = (CASTING uint_64)(uint_32 ( *(($5 + [52])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$2 = *($1)
	$3 = *($2)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($2) = $3
	$5 = *(($5 + [48]))
	$5 = ( *(($5 + [52])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($5 == 0) ){ goto $label$2 }
	*($2) = ($5 + $3)
	
.LABEL $label$2
	$3 = *($0)
	*(($5 = *($1))) = (*($5) + [32])
	*($6) = *($1)
	*($6 + [12]) = ($3 + [97])
	*($6 + [8]) = ($3 + [96])
	*($6 + [16]) = ($3 + [98])
	*($6 + [20]) = ($3 + [99])
	*($6 + [24]) = ($3 + [100])
	*($6 + [28]) = ($3 + [101])
	*($6 + [32]) = ($3 + [102])
	*($6 + [36]) = ($3 + [103])
	*($6 + [40]) = ($3 + [104])
	*($6 + [44]) = ($3 + [105])
	*($6 + [48]) = ($3 + [106])
	*($6 + [52]) = ($3 + [107])
	*($6 + [56]) = ($3 + [108])
	*($6 + [60]) = ($3 + [109])
	*($6 + [64]) = ($3 + [110])
	*($6 + [68]) = ($3 + [111])
	*($6 + [72]) = ($3 + [112])
	*($6 + [76]) = ($3 + [113])
	*($6 + [80]) = ($3 + [114])
	*($6 + [84]) = ($3 + [115])
	*($6 + [88]) = ($3 + [116])
	*($6 + [92]) = ($3 + [117])
	*($6 + [96]) = ($3 + [118])
	*($6 + [100]) = ($3 + [119])
	*($6 + [104]) = ($3 + [120])
	*($6 + [108]) = ($3 + [121])
	*($6 + [112]) = ($3 + [122])
	*($6 + [116]) = ($3 + [123])
	*($6 + [120]) = ($3 + [124])
	*($6 + [124]) = ($3 + [125])
	*($6 + [128]) = ($3 + [126])
	*($6 + [132]) = ($3 + [127])
	*($6 + [136]) = ($3 + [128])
	*($6 + [140]) = ($3 + [129])
	*($6 + [144]) = ($3 + [130])
	*($6 + [148]) = ($3 + [131])
	*($6 + [152]) = ($3 + [132])
	*($6 + [156]) = ($3 + [133])
	*($6 + [160]) = ($3 + [134])
	*($6 + [164]) = ($3 + [135])
	*($6 + [168]) = ($3 + [136])
	*($6 + [172]) = ($3 + [137])
	*($6 + [176]) = ($3 + [138])
	*($6 + [180]) = ($3 + [139])
	*($6 + [184]) = ($3 + [140])
	*($6 + [188]) = ($3 + [141])
	*($6 + [192]) = ($3 + [142])
	*($6 + [196]) = ($3 + [143])
	*($6 + [200]) = ($3 + [144])
	*($6 + [204]) = ($3 + [145])
	*($6 + [208]) = ($3 + [146])
	*($6 + [212]) = ($3 + [147])
	*($6 + [216]) = ($3 + [148])
	*($6 + [220]) = ($3 + [149])
	*($6 + [224]) = ($3 + [150])
	*($6 + [228]) = ($3 + [151])
	*($6 + [232]) = ($3 + [152])
	*($6 + [236]) = ($3 + [153])
	*($6 + [240]) = ($3 + [154])
	*($6 + [244]) = ($3 + [155])
	*($6 + [248]) = ($3 + [156])
	*($6 + [252]) = ($3 + [157])
	*($6 + [256]) = ($3 + [158])
	*($6 + [260]) = ($3 + [159])
	*($6 + [264]) = ($3 + [160])
	*($6 + [268]) = ($3 + [161])
	CALL $74(($6 + [8]), $6)
	$5 = *($3 + [164])
	$4 = (CASTING uint_64)(uint_32 ( *(($3 + [168])) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$0 = *($1)
	$5 = *($0)
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($0) = $5
	$2 = *(($3 + [164]))
	$2 = ( *(($3 + [168])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	*($0) = ($2 + $5)
	
.LABEL $label$4
	$5 = *($3 + [176])
	$4 = (CASTING uint_64)(uint_32 ( *(($3 + [180])) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$1 = *($1)
	$5 = *($1)
	
.LOOP $label$5:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($1) = $5
	$3 = *(($3 + [176]))
	$3 = ( *(($3 + [180])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	*($1) = ($3 + $5)
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [272])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $198($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $221($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $200($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $198(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $221($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $80(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

void .FUNC $63 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $198($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	*($9 + [52]) = [0]
	*((($9 + [24]) + [32])) = [0]
	*((($9 + [24]) + [36])) = [0]
	$8 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($9 + [52])
	
.LOOP $label$4:
	$8 = ($8 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($8 == 0) ){ goto $label$6 }
	CALL $61($2, $8)
	$2 = *(($9 + [56]))
	$8 = *(($9 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$8 = [0]
	
.LABEL $label$5
	*($9 + [84]) = $8
	*($9 + [80]) = $8
	*($9 + [88]) = $2
	*($9 + [64]) = ($9 + [80])
	*($9 + [72]) = $3
	CALL $77(($9 + [72]), ($9 + [64]))
	CALL $62(($9 + [80]), ($9 + [24]))
	$8 = *($9 + [80])
	CALL send_inline($8, (*($9 + [84]) - $8))
	$8 = *($9 + [80])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [84]) = $8
	CALL $200($8)
	
.LABEL $label$7
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$8 }
	*(($9 + [56])) = $8
	CALL $200($8)
	
.LABEL $label$8
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$9 }
	*(($9 + [44])) = $8
	CALL $200($8)
	
.LABEL $label$9
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$10 }
	*($9 + [12]) = $8
	CALL $200($8)
	
.LABEL $label$10
	*([0] + [4]) = ($9 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $221(($9 + [8]))
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $61($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [352])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [352])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $79(CALL $78($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC vsnprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	$5 = [-1]
	*($4 + [148]) = ( ($1 + [-1]) ? [0] : $1 )
	$0 = ( $0 ? ($4 + [158]) : $1 )
	*($4 + [144]) = $0
	*(($4 = CALL memset($4, [0], [144])) + [36]) = [8]
	*($4 + [75]) = [255]
	*($4 + [76]) = [-1]
	*($4 + [44]) = ($4 + [159])
	*($4 + [84]) = ($4 + [144])
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	*($0) = [0]
	$5 = CALL vfprintf($4, $2, $3)
	goto $label$1 
	
.LABEL $label$2
	*(CALL __errno_location()) = [75]
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [160])
	return $5
}

int_32 .FUNC $228 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0 + [28])
	$6 = (*($0 + [20]) - $4)
	$3 = *($0 + [84])
	$5 = *($3 + [4])
	$6 = ( $5 ? $6 : ($5 <= $6) )
	if ( ($6 == 0) ){ goto $label$1 }
	CALL memcpy(*($3), $4, $6)
	*($3) = (*($3) + $6)
	$5 = (*($5) - $6)
	*(($5 = ($3 + [4]))) = $5
	
.LABEL $label$1
	$6 = *($3)
	$5 = ( $5 ? $2 : ($5 <= $2) )
	if ( ($5 == 0) ){ goto $label$2 }
	CALL memcpy($6, $1, $5)
	$6 = (*($3) + $5)
	*($3) = $6
	*(($3 = ($3 + [4]))) = (*($3) - $5)
	
.LABEL $label$2
	*($6) = [0]
	$3 = *($0 + [44])
	*(($0 + [28])) = $3
	*(($0 + [20])) = $3
	return $2
}

int_32 .FUNC vfprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [288])
	*([0] + [4]) = $7
	*($7 + [284]) = $2
	$6 = [0]
	CALL memset(($7 + [240]), [0], [40])
	*($7 + [280]) = *($7 + [284])
	$2 = [-1]
	if ( ((int_32)CALL $230([0], $1, ($7 + [280]), ($7 + [80]), ($7 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL __lockfile($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) > (int_32)[0]) ){ goto $label$3 }
	*($0) = ($2 & [-33])
	
.LABEL $label$3
	$3 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	$2 = CALL $230($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	goto $label$4 
	
.LABEL $label$5
	*(($5 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($7 + [80])
	*($0 + [28]) = $7
	*($0 + [20]) = $7
	$4 = *($0 + [44])
	*($0 + [44]) = $7
	$2 = CALL $230($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	if ( ($4 == 0) ){ goto $label$4 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $4
	*($5) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$4 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $4 )
	
.LABEL $label$4
	$1 = *($0)
	*($0) = ($1 | $3)
	$1 = ($1 & [32])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL __unlockfile($0)
	
.LABEL $label$6
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [288])
	return $2
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [2064])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $61($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [208])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $198($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $221($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $200($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [2064])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = ($3 - $4)
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $88($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + $5)
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	$2 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((int_32)*($2) != (int_32)$7), [208])
	CALL memcpy($4, *($5), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	$4 = ($4 + [1])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $89($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $205($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $198($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $205($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $200($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $202($7)
	return (unreachable)
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [272])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [208])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [208])
	CALL memcpy(($1 + [8]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $86($0, ($1 + [64]))
	*($3) = $0
	*($3 + [12]) = ($1 + [77])
	*($3 + [8]) = ($1 + [76])
	*($3 + [16]) = ($1 + [78])
	*($3 + [20]) = ($1 + [79])
	*($3 + [24]) = ($1 + [80])
	*($3 + [28]) = ($1 + [81])
	*($3 + [32]) = ($1 + [82])
	*($3 + [36]) = ($1 + [83])
	*($3 + [40]) = ($1 + [84])
	*($3 + [44]) = ($1 + [85])
	*($3 + [48]) = ($1 + [86])
	*($3 + [52]) = ($1 + [87])
	*($3 + [56]) = ($1 + [88])
	*($3 + [60]) = ($1 + [89])
	*($3 + [64]) = ($1 + [90])
	*($3 + [68]) = ($1 + [91])
	*($3 + [72]) = ($1 + [92])
	*($3 + [76]) = ($1 + [93])
	*($3 + [80]) = ($1 + [94])
	*($3 + [84]) = ($1 + [95])
	*($3 + [88]) = ($1 + [96])
	*($3 + [92]) = ($1 + [97])
	*($3 + [96]) = ($1 + [98])
	*($3 + [100]) = ($1 + [99])
	*($3 + [104]) = ($1 + [100])
	*($3 + [108]) = ($1 + [101])
	*($3 + [112]) = ($1 + [102])
	*($3 + [116]) = ($1 + [103])
	*($3 + [120]) = ($1 + [104])
	*($3 + [124]) = ($1 + [105])
	*($3 + [128]) = ($1 + [106])
	*($3 + [132]) = ($1 + [107])
	*($3 + [136]) = ($1 + [108])
	*($3 + [140]) = ($1 + [109])
	*($3 + [144]) = ($1 + [110])
	*($3 + [148]) = ($1 + [111])
	*($3 + [152]) = ($1 + [112])
	*($3 + [156]) = ($1 + [113])
	*($3 + [160]) = ($1 + [114])
	*($3 + [164]) = ($1 + [115])
	*($3 + [168]) = ($1 + [116])
	*($3 + [172]) = ($1 + [117])
	*($3 + [176]) = ($1 + [118])
	*($3 + [180]) = ($1 + [119])
	*($3 + [184]) = ($1 + [120])
	*($3 + [188]) = ($1 + [121])
	*($3 + [192]) = ($1 + [122])
	*($3 + [196]) = ($1 + [123])
	*($3 + [200]) = ($1 + [124])
	*($3 + [204]) = ($1 + [125])
	*($3 + [208]) = ($1 + [126])
	*($3 + [212]) = ($1 + [127])
	*($3 + [216]) = ($1 + [128])
	*($3 + [220]) = ($1 + [129])
	*($3 + [224]) = ($1 + [130])
	*($3 + [228]) = ($1 + [131])
	*($3 + [232]) = ($1 + [132])
	*($3 + [236]) = ($1 + [133])
	*($3 + [240]) = ($1 + [134])
	*($3 + [244]) = ($1 + [135])
	*($3 + [248]) = ($1 + [136])
	*($3 + [252]) = ($1 + [137])
	*($3 + [256]) = ($1 + [138])
	*($3 + [260]) = ($1 + [139])
	*($3 + [264]) = ($1 + [140])
	*($3 + [268]) = ($1 + [141])
	CALL $44(($3 + [8]), $3)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [208])
	CALL memcpy(($1 + [144]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [208])
	CALL memcpy(($1 + [176]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	$0 = CALL $87(CALL $87(CALL $87($0, ($1 + [208])), ($1 + [220])), ($1 + [232]))
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [208])
	CALL memcpy(($1 + [244]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [208])
	CALL memcpy(($1 + [245]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [208])
	CALL memcpy(($1 + [246]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [208])
	CALL memcpy(($1 + [247]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [248]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [256]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [264]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [272]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [280]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [288]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = CALL $86($0, ($1 + [296]))
	*([0] + [4]) = ($3 + [272])
	return $1
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [352])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [8])
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [352])
	CALL memcpy(*($2), $5, [1])
	$7 = (*($2) + [1])
	*($2) = $7
	$5 = ($5 + [1])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [272])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $72($0, ($1 + [64]))
	*($3) = $0
	*($3 + [12]) = ($1 + [77])
	*($3 + [8]) = ($1 + [76])
	*($3 + [16]) = ($1 + [78])
	*($3 + [20]) = ($1 + [79])
	*($3 + [24]) = ($1 + [80])
	*($3 + [28]) = ($1 + [81])
	*($3 + [32]) = ($1 + [82])
	*($3 + [36]) = ($1 + [83])
	*($3 + [40]) = ($1 + [84])
	*($3 + [44]) = ($1 + [85])
	*($3 + [48]) = ($1 + [86])
	*($3 + [52]) = ($1 + [87])
	*($3 + [56]) = ($1 + [88])
	*($3 + [60]) = ($1 + [89])
	*($3 + [64]) = ($1 + [90])
	*($3 + [68]) = ($1 + [91])
	*($3 + [72]) = ($1 + [92])
	*($3 + [76]) = ($1 + [93])
	*($3 + [80]) = ($1 + [94])
	*($3 + [84]) = ($1 + [95])
	*($3 + [88]) = ($1 + [96])
	*($3 + [92]) = ($1 + [97])
	*($3 + [96]) = ($1 + [98])
	*($3 + [100]) = ($1 + [99])
	*($3 + [104]) = ($1 + [100])
	*($3 + [108]) = ($1 + [101])
	*($3 + [112]) = ($1 + [102])
	*($3 + [116]) = ($1 + [103])
	*($3 + [120]) = ($1 + [104])
	*($3 + [124]) = ($1 + [105])
	*($3 + [128]) = ($1 + [106])
	*($3 + [132]) = ($1 + [107])
	*($3 + [136]) = ($1 + [108])
	*($3 + [140]) = ($1 + [109])
	*($3 + [144]) = ($1 + [110])
	*($3 + [148]) = ($1 + [111])
	*($3 + [152]) = ($1 + [112])
	*($3 + [156]) = ($1 + [113])
	*($3 + [160]) = ($1 + [114])
	*($3 + [164]) = ($1 + [115])
	*($3 + [168]) = ($1 + [116])
	*($3 + [172]) = ($1 + [117])
	*($3 + [176]) = ($1 + [118])
	*($3 + [180]) = ($1 + [119])
	*($3 + [184]) = ($1 + [120])
	*($3 + [188]) = ($1 + [121])
	*($3 + [192]) = ($1 + [122])
	*($3 + [196]) = ($1 + [123])
	*($3 + [200]) = ($1 + [124])
	*($3 + [204]) = ($1 + [125])
	*($3 + [208]) = ($1 + [126])
	*($3 + [212]) = ($1 + [127])
	*($3 + [216]) = ($1 + [128])
	*($3 + [220]) = ($1 + [129])
	*($3 + [224]) = ($1 + [130])
	*($3 + [228]) = ($1 + [131])
	*($3 + [232]) = ($1 + [132])
	*($3 + [236]) = ($1 + [133])
	*($3 + [240]) = ($1 + [134])
	*($3 + [244]) = ($1 + [135])
	*($3 + [248]) = ($1 + [136])
	*($3 + [252]) = ($1 + [137])
	*($3 + [256]) = ($1 + [138])
	*($3 + [260]) = ($1 + [139])
	*($3 + [264]) = ($1 + [140])
	*($3 + [268]) = ($1 + [141])
	CALL $73(($3 + [8]), $3)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [144]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[31]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [176]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	$0 = CALL $84(CALL $84(CALL $84($0, ($1 + [208])), ($1 + [220])), ($1 + [232]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [244]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [245]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [246]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [247]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [248]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [256]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [264]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [272]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [280]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [288]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = CALL $72($0, ($1 + [296]))
	*([0] + [4]) = ($3 + [272])
	return $1
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [272])
	*([0] + [4]) = $7
	$6 = (*($0) + [57])
	*($0) = $6
	$3 = *($1 + [64])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [68])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$3 = *(($1 + [64]))
	$3 = ( *(($1 + [68])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	*($0) = ($3 + $6)
	
.LABEL $label$2
	*($7) = $0
	*($7 + [12]) = ($1 + [77])
	*($7 + [8]) = ($1 + [76])
	*($7 + [16]) = ($1 + [78])
	*($7 + [20]) = ($1 + [79])
	*($7 + [24]) = ($1 + [80])
	*($7 + [28]) = ($1 + [81])
	*($7 + [32]) = ($1 + [82])
	*($7 + [36]) = ($1 + [83])
	*($7 + [40]) = ($1 + [84])
	*($7 + [44]) = ($1 + [85])
	*($7 + [48]) = ($1 + [86])
	*($7 + [52]) = ($1 + [87])
	*($7 + [56]) = ($1 + [88])
	*($7 + [60]) = ($1 + [89])
	*($7 + [64]) = ($1 + [90])
	*($7 + [68]) = ($1 + [91])
	*($7 + [72]) = ($1 + [92])
	*($7 + [76]) = ($1 + [93])
	*($7 + [80]) = ($1 + [94])
	*($7 + [84]) = ($1 + [95])
	*($7 + [88]) = ($1 + [96])
	*($7 + [92]) = ($1 + [97])
	*($7 + [96]) = ($1 + [98])
	*($7 + [100]) = ($1 + [99])
	*($7 + [104]) = ($1 + [100])
	*($7 + [108]) = ($1 + [101])
	*($7 + [112]) = ($1 + [102])
	*($7 + [116]) = ($1 + [103])
	*($7 + [120]) = ($1 + [104])
	*($7 + [124]) = ($1 + [105])
	*($7 + [128]) = ($1 + [106])
	*($7 + [132]) = ($1 + [107])
	*($7 + [136]) = ($1 + [108])
	*($7 + [140]) = ($1 + [109])
	*($7 + [144]) = ($1 + [110])
	*($7 + [148]) = ($1 + [111])
	*($7 + [152]) = ($1 + [112])
	*($7 + [156]) = ($1 + [113])
	*($7 + [160]) = ($1 + [114])
	*($7 + [164]) = ($1 + [115])
	*($7 + [168]) = ($1 + [116])
	*($7 + [172]) = ($1 + [117])
	*($7 + [176]) = ($1 + [118])
	*($7 + [180]) = ($1 + [119])
	*($7 + [184]) = ($1 + [120])
	*($7 + [188]) = ($1 + [121])
	*($7 + [192]) = ($1 + [122])
	*($7 + [196]) = ($1 + [123])
	*($7 + [200]) = ($1 + [124])
	*($7 + [204]) = ($1 + [125])
	*($7 + [208]) = ($1 + [126])
	*($7 + [212]) = ($1 + [127])
	*($7 + [216]) = ($1 + [128])
	*($7 + [220]) = ($1 + [129])
	*($7 + [224]) = ($1 + [130])
	*($7 + [228]) = ($1 + [131])
	*($7 + [232]) = ($1 + [132])
	*($7 + [236]) = ($1 + [133])
	*($7 + [240]) = ($1 + [134])
	*($7 + [244]) = ($1 + [135])
	*($7 + [248]) = ($1 + [136])
	*($7 + [252]) = ($1 + [137])
	*($7 + [256]) = ($1 + [138])
	*($7 + [260]) = ($1 + [139])
	*($7 + [264]) = ($1 + [140])
	*($7 + [268]) = ($1 + [141])
	CALL $74(($7 + [8]), $7)
	$6 = (*($0) + [64])
	*($0) = $6
	$2 = *($1 + [208])
	$3 = *(($1 + [212]))
	$4 = ($3 - $2)
	$5 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	$6 = ( $6 ? ($4 + $6) : ((int_32)$2 == (int_32)$3) )
	*($0) = $6
	$2 = *($1 + [220])
	$3 = *(($1 + [224]))
	$4 = ($3 - $2)
	$5 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$4:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$4 }
	$6 = ( $6 ? ($4 + $6) : ((int_32)$2 == (int_32)$3) )
	*($0) = $6
	$2 = *($1 + [232])
	$3 = *(($1 + [236]))
	$4 = ($3 - $2)
	$5 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	$6 = (( $6 ? ($4 + $6) : ((int_32)$2 == (int_32)$3) ) + [52])
	*($0) = $6
	$3 = *($1 + [296])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [300])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$6 }
	*($0) = $6
	$1 = *(($1 + [296]))
	$1 = ( *(($1 + [300])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$7 }
	*($0) = ($1 + $6)
	
.LABEL $label$7
	*([0] + [4]) = ($7 + [272])
	return $0
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$7 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($7 - $4)) ){ goto $label$4 }
	if ( ($4 == 0) ){ goto $label$5 }
	*($0 + [4]) = $4
	CALL $200($4)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = [2147483647]
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$6 }
	$4 = ($7 << [1])
	$2 = ( $3 ? $4 : ($4 <= $3) )
	
.LABEL $label$6
	$4 = CALL $198($2)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $2)
	CALL memcpy($4, $1, $3)
	$1 = ($0 + [4])
	$0 = (*($0 + [4]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$7 = (*($0 + [4]) - $4)
	$5 = ( ($1 + $7) ? $2 : ((uint_32)$3 > (uint_32)$7) )
	$6 = ($5 - $1)
	if ( ($6 == 0) ){ goto $label$7 }
	CALL memmove($4, $1, $6)
	
.LABEL $label$7
	$1 = ($0 + [4])
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$8 }
	$0 = ($2 - $5)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(*($1), $5, $0)
	$0 = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$8
	$0 = ($4 + $6)
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $221($0)
}

int_32 .FUNC $80 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($2 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((*($2 + [296]) & [1]) == 0) ){ goto $label$4 }
	CALL $200(*(($2 + [304])))
	
.LABEL $label$4
	$3 = *($2 + [232])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($2 + [236])) = $3
	CALL $200($3)
	
.LABEL $label$5
	$3 = *($2 + [220])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [224])) = $3
	CALL $200($3)
	
.LABEL $label$6
	$3 = *($2 + [208])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($2 + [212])) = $3
	CALL $200($3)
	
.LABEL $label$7
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$8 }
	CALL $200(*(($2 + [72])))
	
.LABEL $label$8
	CALL $200($2)
	
.LABEL $label$3
	$2 = *($4)
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$9 }
	CALL $200($2)
	
.LABEL $label$9
	return $0
}

void .FUNC $182 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $198(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $221($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $200($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $200($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [2064])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$6 = *($1)
	$2 = *($1 + [4])
	$7 = ((int_32)($2 - $6) / (int_32)[40])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $186($1, ($4 - $7))
	$2 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[40])
	$3 = ($6 + $4)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$4 }
	$6 = (([0] - $6) - $4)
	$4 = ($2 + [-24])
	
.LOOP $label$5:
	$7 = *(($4 + [12]))
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [16])) = $7
	CALL $200($7)
	
.LABEL $label$6
	$7 = *($4)
	if ( ($7 == 0) ){ goto $label$7 }
	*(($4 + [4])) = $7
	CALL $200($7)
	
.LABEL $label$7
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$2
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	$4 = ($0 + [4])
	
.LOOP $label$9:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - *($4)) > (uint_32)[7]), [208])
	CALL memcpy($7, *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [208])
	CALL memcpy(($7 + [8]), *($4), [8])
	*($4) = (*($4) + [8])
	CALL $89(CALL $187($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	return $0
}

int_32 .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [208])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [208])
	CALL memcpy(($1 + [4]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [208])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$6 = [0]
	$5 = (int_64)0
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *(($0 + [8]))), [2064])
	$7 = ($0 + [4])
	$4 = *($7)
	$2 = *($4)
	$4 = ($4 + [1])
	*($7) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($2 >> [7]) ){ goto $label$1 }
	*($1 + [12]) = $5
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)*($3) != (int_32)$4), [208])
	$4 = ($0 + [4])
	CALL memcpy(($1 + [16]), *($4), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	$7 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	CALL eosio_assert(($6 <= *($3)), [2064])
	$6 = *($4)
	$2 = *($6)
	$6 = ($6 + [1])
	*($4) = $6
	$7 = ($7 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $7)) | (int_64)$5)
	$7 = ($7 + [7])
	if ( uint_32($2 >> [7]) ){ goto $label$2 }
	*($1 + [20]) = $5
	return $0
}

void .FUNC $145 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	CALL $146($0, *($1), $2, $3)
}

void .FUNC $144 (int_32 $0, int_32 $1, int_32 $2)
{
	if ( ((int_32)$2 != (int_32)[4]) ){ goto $label$4 }
	$0 = [0]
	
.LOOP $label$5:
	$2 = [-3]
	
.LOOP $label$7:
	if ( ((int_32)*((($0 + $2) + [3386])) != (int_32)*(($2 + [3331]))) ){ goto $label$6 }
	if ( ($2 == 0) ){ goto $label$3 }
	$2 = ($2 + [1])
	if ( ((int_32)($0 + $2) != (int_32)[180]) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$6
	$2 = [183]
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[183]) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$4
	CALL $147($0, $1, $2)
	return 
	
.LABEL $label$3
	$2 = $0
	goto $label$1 
	
.LABEL $label$2
	$2 = [183]
	
.LABEL $label$1
	*($1 + [4]) = [0]
	*($1) = ( [3383] ? ($2 + [3387]) : ((int_32)$2 == (int_32)[183]) )
}

void .FUNC $147 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ((uint_32)$2 > (uint_32)[3]) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$13
	$3 = *($0)
	*(($2 = CALL $198([16]))) = [0]
	$5 = *($3 + [8])
	*($2 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$8 }
	$0 = $3
	$4 = $2
	goto $label$7 
	
.LABEL $label$12
	$3 = [0]
	
.LOOP $label$14:
	$2 = [-3]
	
.LOOP $label$16:
	if ( ((int_32)*((($3 + $2) + [3386])) != (int_32)*(($2 + [3331]))) ){ goto $label$15 }
	if ( ($2 == 0) ){ goto $label$6 }
	$2 = ($2 + [1])
	if ( ((int_32)($3 + $2) != (int_32)[180]) ){ goto $label$16 }
	goto $label$4 
	
.LABEL $label$15
	$2 = [183]
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[183]) ){ goto $label$14 }
	goto $label$3 
	
.LABEL $label$11
	*($1) = *($0)
	*($0) = [0]
	return 
	
.LABEL $label$10
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$17 }
	if ( (*($2 + [8]) <= [9]) ){ goto $label$18 }
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$18 }
	CALL $201($3)
	
.LABEL $label$18
	CALL $200($2)
	
.LABEL $label$17
	*($1) = [0]
	return 
	
.LABEL $label$9
	$5 = *($1)
	$3 = [0]
	
.LOOP $label$19:
	$2 = [-3]
	
.LOOP $label$21:
	if ( ((int_32)*((($3 + $2) + [3386])) != (int_32)*(($2 + [3331]))) ){ goto $label$20 }
	if ( ($2 == 0) ){ goto $label$5 }
	$2 = ($2 + [1])
	if ( ((int_32)($3 + $2) != (int_32)[180]) ){ goto $label$21 }
	goto $label$2 
	
.LABEL $label$20
	$2 = [183]
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[183]) ){ goto $label$19 }
	goto $label$1 
	
.LABEL $label$8
	$4 = CALL $199($5)
	*($2) = $4
	$5 = *(($2 + [8]))
	$0 = *($3)
	
.LABEL $label$7
	CALL memcpy($4, $0, $5)
	*($1) = $2
	*($2 + [12]) = *($3 + [12])
	return 
	
.LABEL $label$6
	$2 = $3
	goto $label$3 
	
.LABEL $label$5
	$2 = $3
	goto $label$1 
	
.LABEL $label$4
	$2 = [183]
	
.LABEL $label$3
	*($1 + [4]) = [0]
	*($1) = ( [3383] ? ($2 + [3387]) : ((int_32)$2 == (int_32)[183]) )
	return 
	
.LABEL $label$2
	$2 = [183]
	
.LABEL $label$1
	$3 = ( [3383] ? ($2 + [3387]) : ((int_32)$2 == (int_32)[183]) )
	$2 = *($5)
	if ( ($2 == 0) ){ goto $label$23 }
	$5 = ($5 + [1])
	
.LOOP $label$24:
	if ( ((int_32)($2 & [255]) != (int_32)*($3)) ){ goto $label$22 }
	$3 = ($3 + [1])
	$2 = *($5)
	$5 = ($5 + [1])
	if ( $2 ){ goto $label$24 }
	
.LABEL $label$23
	$2 = [0]
	
.LABEL $label$22
	*($1) = ( *($0) ? [0] : ((int_32)($2 & [255]) == (int_32)*($3)) )
	$2
}

void .FUNC $146 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	*($12) = [0]
	$8 = *($1 + [8])
	*($12 + [8]) = $8
	if ( ((uint_32)$8 > (uint_32)[8]) ){ goto $label$2 }
	$11 = $12
	$10 = $1
	goto $label$1 
	
.LABEL $label$2
	$11 = CALL $199($8)
	*($12) = $11
	$10 = *($1)
	
.LABEL $label$1
	CALL memcpy($11, $10, $8)
	$4 = *(($12 + [8]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$5 }
	$5 = ($12 + $4)
	
.LOOP $label$6:
	$7 = *($2)
	$10 = $12
	$8 = $4
	if ( ($8 == 0) ){ goto $label$7 }
	
.LOOP $label$8:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$9 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$9
	$8 = $11
	if ( $8 ){ goto $label$8 }
	
.LABEL $label$7
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$10 }
	if ( ((int_32)*($10) <= (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$10
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$5 = *($12)
	$6 = ($5 + $4)
	
.LOOP $label$11:
	$7 = *($2)
	$10 = $5
	$8 = $4
	if ( ($8 == 0) ){ goto $label$12 }
	
.LOOP $label$13:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$14 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$14
	$8 = $11
	if ( $8 ){ goto $label$13 }
	
.LABEL $label$12
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$15 }
	if ( ((int_32)*($10) <= (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$15
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$4
	$2 = $3
	
.LABEL $label$3
	if ( ($4 <= [9]) ){ goto $label$16 }
	$8 = *($12)
	if ( ($8 == 0) ){ goto $label$16 }
	CALL $201($8)
	
.LABEL $label$16
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$19 }
	if ( (*($1 + [12]) == 0) ){ goto $label$18 }
	$4 = ($2 + [1])
	goto $label$17 
	
.LABEL $label$19
	$2 = $3
	$4 = $3
	goto $label$17 
	
.LABEL $label$18
	$5 = *(($1 + [8]))
	if ( ((uint_32)$5 >= (uint_32)[9]) ){ goto $label$20 }
	$6 = ($1 + $5)
	$4 = $2
	
.LOOP $label$21:
	$7 = *($4)
	$10 = $1
	$8 = $5
	if ( ($8 == 0) ){ goto $label$22 }
	
.LOOP $label$23:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$24 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$24
	$8 = $11
	if ( $8 ){ goto $label$23 }
	
.LABEL $label$22
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$17 }
	if ( ((int_32)*($10) > (int_32)$7) ){ goto $label$17 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$21 }
	goto $label$17 
	
.LABEL $label$20
	$6 = *($1)
	$1 = ($6 + $5)
	$4 = $2
	
.LOOP $label$25:
	$7 = *($4)
	$10 = $6
	$8 = $5
	if ( ($8 == 0) ){ goto $label$26 }
	
.LOOP $label$27:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$28 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$28
	$8 = $11
	if ( $8 ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)$10 == (int_32)$1) ){ goto $label$17 }
	if ( ((int_32)*($10) > (int_32)$7) ){ goto $label$17 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$25 }
	
.LABEL $label$17
	*($0 + [4]) = $4
	*($0) = $2
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*($5) = [0]
	$2 = *($1 + [8])
	*($5 + [8]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$2 }
	$4 = $5
	$3 = $1
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL $199($2)
	*($5) = $4
	$3 = *($1)
	
.LABEL $label$1
	CALL memcpy($4, $3, $2)
	*($5 + [12]) = *($1 + [12])
	*($5 + [16]) = [0]
	$1 = *(($5 + [8]))
	*($5 + [24]) = $1
	$2 = ($0 + [4])
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $5
	$3 = ($5 + [16])
	goto $label$3 
	
.LABEL $label$4
	$3 = CALL $199($1)
	*($5 + [16]) = $3
	$4 = *($5)
	
.LABEL $label$3
	CALL memcpy($3, $4, $1)
	*($5 + [28]) = *(($5 + [12]))
	$1 = CALL $142([3316], ($5 + [16]), $2)
	if ( (*((($5 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$2 = *($5 + [16])
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $201($2)
	
.LABEL $label$5
	if ( (*(($5 + [8])) <= [9]) ){ goto $label$6 }
	$2 = *($5)
	if ( ($2 == 0) ){ goto $label$6 }
	CALL $201($2)
	
.LABEL $label$6
	*($0) = ( [3316] ? [0] : $1 )
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $140 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($6) = [0]
	$3 = *($1 + [8])
	*($6 + [8]) = $3
	if ( ((uint_32)$3 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $6
	$4 = $1
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL $199($3)
	*($6) = $5
	$4 = *($1)
	
.LABEL $label$1
	CALL memcpy($5, $4, $3)
	*($6 + [12]) = *($1 + [12])
	*($0) = [0]
	*($6 + [16]) = [0]
	$1 = *(($6 + [8]))
	*($6 + [24]) = $1
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$3 = $6
	$5 = ($6 + [16])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL $199($1)
	*($6 + [16]) = $5
	$3 = *($6)
	
.LABEL $label$3
	CALL memcpy($5, $3, $1)
	*($6 + [28]) = *(($6 + [12]))
	CALL $141($0, ($6 + [16]))
	if ( (*((($6 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$1 = *($6 + [16])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $201($1)
	
.LABEL $label$5
	if ( (*(($6 + [8])) <= [9]) ){ goto $label$6 }
	$1 = *($6)
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $201($1)
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [32])
	return $0
}

int_32 .FUNC $143 (int_32 $0)
{
	return [0]
}

int_32 .FUNC $142 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($6) = $1
	$5 = [0]
	if ( CALL $143($6) ){ goto $label$1 }
	*($6 + [16]) = [0]
	$5 = *($1 + [8])
	*($6 + [24]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$3 }
	$4 = ($6 + [16])
	$3 = $1
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $199($5)
	*($6 + [16]) = $4
	$3 = *($1)
	
.LABEL $label$2
	CALL memcpy($4, $3, $5)
	*($6 + [28]) = *($1 + [12])
	*(($1 = CALL $198([16]))) = [0]
	$5 = *((($6 + [16]) + [8]))
	*($1 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$5 }
	$4 = ($6 + [16])
	$3 = $1
	goto $label$4 
	
.LABEL $label$5
	$3 = CALL $199($5)
	*($1) = $3
	$5 = *(($1 + [8]))
	$4 = *($6 + [16])
	
.LABEL $label$4
	CALL memcpy($3, $4, $5)
	*($2) = $1
	*($1 + [12]) = *(($6 + [28]))
	$5 = [1]
	if ( (*(($6 + [24])) <= [9]) ){ goto $label$1 }
	$1 = *($6 + [16])
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $201($1)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
	return $5
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [352])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [352])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [96])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [100])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [104])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [108])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [112])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [116])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [120])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [124])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [128])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [132])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [136])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [140])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [144])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [148])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [152])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [156])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [160])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [164])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [168])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [172])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [176])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [180])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [184])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [188])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [192])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [196])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [200])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [204])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [208])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [212])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [216])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [220])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [224])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [228])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [232])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [236])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [240])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [244])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [248])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [252])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [256])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [352])
	CALL memcpy(*($0 + [4]), $2, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [976])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [1040])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [208])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [208])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $198(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $221($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $200($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $200($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($3 & [1])
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : $5 )
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($4 + $3)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $198($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : $5 ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $207($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $202($0)
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $72(*($1), ($0 + [32]))
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($1 = *($1))) = (*($1) + [1])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [48])
	*([0] + [4]) = $4
	*($4 + [40]) = [0]
	*($4 + [32]) = (int_64)0
	$3 = uint_32($2 >> [4])
	if ( ((uint_32)$3 > (uint_32)[3]) ){ goto $label$2 }
	goto $label$6 
	
.LABEL $label$6
	CALL $206(($4 + [32]), [1920])
	goto $label$1 
	
.LABEL $label$5
	CALL $206(($4 + [32]), [1936])
	goto $label$1 
	
.LABEL $label$4
	CALL $206(($4 + [32]), [1952])
	goto $label$1 
	
.LABEL $label$3
	CALL $206(($4 + [32]), [1968])
	goto $label$1 
	
.LABEL $label$2
	CALL $206(($4 + [32]), [1984])
	
.LABEL $label$1
	*($4 + [24]) = [0]
	*($4 + [16]) = (int_64)0
	$3 = (($2 & [15]) + [-1])
	if ( ((uint_32)$3 > (uint_32)[12]) ){ goto $label$8 }
	goto $label$12 
	
.LABEL $label$12
	CALL $206(($4 + [16]), [2000])
	goto $label$7 
	
.LABEL $label$11
	CALL $206(($4 + [16]), [2016])
	goto $label$7 
	
.LABEL $label$10
	CALL $206(($4 + [16]), [2032])
	goto $label$7 
	
.LABEL $label$9
	CALL $206(($4 + [16]), [2048])
	goto $label$7 
	
.LABEL $label$8
	CALL _ZNSt3__19to_stringEi($4, (($2 & [15]) & [255]))
	if ( (*($4 + [16]) & [1]) ){ goto $label$14 }
	*($4 + [16]) = [0]
	goto $label$13 
	
.LABEL $label$14
	*(*(($4 + [24]))) = [0]
	*($4 + [20]) = [0]
	
.LABEL $label$13
	CALL $205(($4 + [16]), [0])
	*((($4 + [16]) + [8])) = *(($4 + [8]))
	*($4 + [16]) = *($4)
	
.LABEL $label$7
	CALL $76($0, ($4 + [32]), ($4 + [16]))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$15 }
	CALL $200(*(($4 + [24])))
	
.LABEL $label$15
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$16 }
	CALL $200(*(($4 + [40])))
	
.LABEL $label$16
	*([0] + [4]) = ($4 + [48])
	$3
	$3
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [352])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [352])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [352])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [352])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [352])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC wcrtomb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL __errno_location()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL __errno_location()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

void .FUNC $258 ()
{
	(unreachable)
}

int_32 .FUNC $223 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $198($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC __shlim (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($3 - $2))
	*($0 + [120]) = $4
	*($0 + [104]) = ( ( ($2 + (CASTING uint_32)(uint_64 $1)) ? $3 : ((int_64)$4 > (int_64)$1) ) ? $3 : ((int_64)$1 != (int_64)0) )
}

int_32 .FUNC strtol (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return (CASTING uint_32)(uint_64 $3)
}

int_32 .FUNC __shgetc (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL __uflow($0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$1 = (int_64)
	$2 = *($0 + [4])
	$3 = *(($0 + [8]))
	if ( ((int_64)(CASTING int_64)(int_32 ($3 - $2)) < (int_64)$1($1 - *($0 + [120])))) ){ goto $label$4 }
	*($0 + [104]) = ($2 + (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294967295)))
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$5
	$3 = *(($0 + [8]))
	
.LABEL $label$4
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)) + (int_64)*($0 + [120]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)*($0) == (int_32)$4) ){ goto $label$8 }
	*($0) = $4
	
.LABEL $label$8
	return $4
}

int_64 .FUNC __intscan (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$5:
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$7 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL __shgetc($0)
	
.LABEL $label$6
	$10 = ($13 + [-9])
	if ( ((uint_32)$10 > (uint_32)[36]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( [-1] ? [0] : ((int_32)$13 == (int_32)[45]) )
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$2 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$1 
	
.LABEL $label$4
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL __shgetc($0)
	
.LABEL $label$1
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$20 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$20 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$19 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$18 
	
.LABEL $label$20
	$1 = ( $1 ? [10] : $1 )
	if ( (*(($13 + [14945])) <= $1) ){ goto $label$17 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$21 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$21
	CALL __shlim($0, (int_64)0)
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$19
	$13 = CALL __shgetc($0)
	
.LABEL $label$18
	if ( ((int_32)($13 | [32]) != (int_32)[120]) ){ goto $label$22 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$15 
	
.LABEL $label$22
	if ( ($1 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$13 }
	$14 = (int_64)0
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$23 }
	$10 = [0]
	$8 = ($0 + [104])
	$1 = ($0 + [4])
	
.LOOP $label$24:
	$10 = ((int_32)$10 * (int_32)[10])
	$13 = *($1)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$26 }
	*($1) = ($13 + [1])
	$13 = *($13)
	goto $label$25 
	
.LABEL $label$26
	$13 = CALL __shgetc($0)
	
.LABEL $label$25
	$10 = ($10 + $9)
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	if ( ($10 <= [429496729]) ){ goto $label$24 }
	
.LABEL $label$27
	$14 = (CASTING uint_64)(uint_32 $10)
	
.LABEL $label$23
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$11 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$28:
	$1 = [10]
	$5 = (CASTING int_64)(int_32 $10)
	$12 = ((int_64)$14 * (int_64)10)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$30 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$29 
	
.LABEL $label$30
	$13 = CALL __shgetc($0)
	
.LABEL $label$29
	$14 = ((int_64)$12 + (int_64)$5)
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$31 }
	if ( (uint_64)($14 <= (int_64)1844674407370955162) ){ goto $label$28 }
	
.LABEL $label$31
	if ( ((uint_32)$10 <= (uint_32)[9]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$13 = CALL __shgetc($0)
	
.LABEL $label$15
	$1 = [16]
	if ( (*(($13 + [14945])) <= [16]) ){ goto $label$13 }
	$13 = *(($0 + [104]))
	if ( ($13 == 0) ){ goto $label$32 }
	*(($10 = ($0 + [4]))) = (*($10) + [-1])
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$9 }
	$14 = (int_64)0
	if ( ($13 == 0) ){ goto $label$10 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	return (int_64)0
	
.LABEL $label$14
	$1 = [8]
	
.LABEL $label$13
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$37 }
	$10 = *(($13 + [14945]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$36 }
	$9 = [0]
	$2 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$38:
	$9 = ($10 + ((int_32)$9 * (int_32)$1))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($2)) ){ goto $label$40 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$39 
	
.LABEL $label$40
	$13 = CALL __shgetc($0)
	
.LABEL $label$39
	$10 = *(($13 + [14945]))
	if ( ((uint_32)$9 > (uint_32)[119304646]) ){ goto $label$41 }
	if ( ($10 <= $1) ){ goto $label$38 }
	
.LABEL $label$41
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$35 }
	goto $label$12 
	
.LABEL $label$37
	$2 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [15216]))
	$10 = *(($13 + [14945]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$34 }
	$9 = [0]
	$11 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$42:
	$9 = ($10 | ($9 << $2))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$44 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$43 
	
.LABEL $label$44
	$13 = CALL __shgetc($0)
	
.LABEL $label$43
	$10 = *(($13 + [14945]))
	if ( ((uint_32)$9 > (uint_32)[134217727]) ){ goto $label$45 }
	if ( ($10 <= $1) ){ goto $label$42 }
	
.LABEL $label$45
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$33 }
	goto $label$12 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$35
	$7 = (CASTING uint_64)(uint_32 $1)
	$6 = ((uint_64)(int_64)-1 / (uint_64)$7)
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)$6) ){ goto $label$12 }
	$5 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$12 = ((int_64)$14 * (int_64)$7)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$48 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$47 
	
.LABEL $label$48
	$13 = CALL __shgetc($0)
	
.LABEL $label$47
	$14 = ((int_64)$5 + (int_64)$12)
	$10 = *(($13 + [14945]))
	if ( ($10 <= $1) ){ goto $label$46 }
	goto $label$12 
	
.LABEL $label$34
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$33
	$5 = (CASTING uint_64)(uint_32 $2)
	$6 = (uint_64)(int_64)-1 >> (uint_64)$5
	if ( ((uint_64)$14 > (uint_64)$6)) ){ goto $label$12 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$49:
	$14 = ((int_64)$14 << (int_64)$5)
	$12 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$51 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$50 
	
.LABEL $label$51
	$13 = CALL __shgetc($0)
	
.LABEL $label$50
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = *(($13 + [14945]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	if ( ((uint_64)$14 <= (uint_64)$6) ){ goto $label$49 }
	
.LABEL $label$12
	if ( ((uint_32)*(($13 + [14945])) >= (uint_32)$1) ){ goto $label$11 }
	$9 = ($0 + [104])
	$10 = ($0 + [4])
	
.LOOP $label$52:
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($9)) ){ goto $label$54 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$53 
	
.LABEL $label$54
	$13 = CALL __shgetc($0)
	
.LABEL $label$53
	if ( (*(($13 + [14945])) <= $1) ){ goto $label$52 }
	*(CALL __errno_location()) = [34]
	$4 = ( $4 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$14 = $3
	
.LABEL $label$11
	if ( (*(($0 + [104])) == 0) ){ goto $label$55 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$55
	if ( (uint_64)($14 <= $3) ){ goto $label$56 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$57 }
	if ( $4 ){ goto $label$57 }
	*(CALL __errno_location()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$57
	if ( ((uint_64)$14 <= (uint_64)$3) ){ goto $label$56 }
	*(CALL __errno_location()) = [34]
	return $3
	
.LABEL $label$56
	$12 = (CASTING int_64)(int_32 $4)
	$14 = (int_64))(((int_64)$14 ^ (int_64)$12) - $12)
	
.LABEL $label$10
	return $14
	
.LABEL $label$9
	CALL __shlim($0, (int_64)0)
	$10
	return (int_64)0
}

int_32 .FUNC __toread (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC __uflow (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = [-1]
	if ( CALL __toread($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($2 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$1 = *($2 + [15])
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $1
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_64 .FUNC _ZN6gamenn11getPkeRatioEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [176]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($4)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL eosio_assert([1], [976])
	$6 = (int_64)4541264
	$4 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$1 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$1 = [0]
	
.LABEL $label$5
	CALL eosio_assert($1, [1040])
	*(($9 + [72])) = [0]
	*($9 + [40]) = $7
	*($9 + [56]) = (int_64)-1
	*($9 + [64]) = (int_64)0
	*($9 + [48]) = (int_64)4541264
	$4 = CALL $99(($9 + [40]), (int_64)4541264, [672])
	$6 = *($4 + [8])
	$5 = *($4)
	$3 = *($9 + [64])
	if ( ($3 == 0) ){ goto $label$10 }
	$2 = ($9 + [68])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$14 }
	CALL $200($1)
	
.LABEL $label$14
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$13 }
	$4 = *(($9 + [64]))
	goto $label$11 
	
.LABEL $label$12
	$4 = $3
	
.LABEL $label$11
	*($2) = $3
	CALL $200($4)
	
.LABEL $label$10
	*($9 + [48]) = (int_64)1162563588
	CALL eosio_assert(((int_64)$6 == (int_64)1162563588), [1296])
	$6 = (int_64)
	*($9 + [40]) = $6((int_64)1000000000000 - $5))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1344])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [1376])
	if ( ((int_64)$6 <= (int_64)0) ){ goto $label$16 }
	CALL eosio_assert([1], [976])
	$6 = (int_64)4541264
	$4 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	
.LOOP $label$21:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$21 }
	
.LABEL $label$20
	$1 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$1 = [0]
	
.LABEL $label$17
	CALL eosio_assert($1, [1040])
	CALL eosio_assert(((int_64)*(($9 + [48])) == (int_64)1162563588), [1456])
	CALL eosio_assert(((int_64)*($9 + [40]) < (int_64)700000000001), [2080])
	goto $label$15 
	
.LABEL $label$16
	CALL eosio_assert([0], [2080])
	
.LABEL $label$15
	CALL eosio_assert([1], [976])
	$6 = (int_64)4541264
	$4 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$25 }
	
.LOOP $label$26:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$23 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$26 }
	
.LABEL $label$25
	$1 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$1 = [0]
	
.LABEL $label$22
	CALL eosio_assert($1, [1040])
	CALL eosio_assert(((int_64)*((($9 + [40]) + [8])) == (int_64)1162563588), [1296])
	$6 = (int_64)
	CALL __multi3(($9 + [8]), $6((int_64)700000000000 - *($9 + [40]))), (int_64)$6 >> (int_64)63), (int_64)100, (int_64)0)
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1344])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [1376])
	$6 = *((($9 + [8]) + [8]))
	$5 = *($9 + [8])
	CALL eosio_assert(( (uint_64)($5 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [1072])
	CALL eosio_assert(( ((uint_64)$5 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [1104])
	CALL eosio_assert([1], [976])
	$6 = (int_64)4541264
	$4 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$30 }
	
.LOOP $label$31:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$31 }
	
.LABEL $label$30
	$1 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	$1 = [0]
	
.LABEL $label$27
	CALL eosio_assert($1, [1040])
	CALL eosio_assert(((int_64)1162563588 == (int_64)1162563588), [1456])
	CALL prints([2144])
	CALL prints([2160])
	CALL $104(($9 + [40]))
	CALL prints([2176])
	CALL prints([2144])
	CALL prints([2192])
	$5 = ((int_64)$5 / (int_64)1000000000000)
	CALL printui(((int_64)$5 & (int_64)255))
	CALL prints([2176])
	*(($4 = CALL $198([72]))) = (int_64)214748364800000
	*($4 + [8 align=4]) = (int_64)107374182400005
	*($4 + [16 align=4]) = (int_64)53687091200010
	*($4 + [24 align=4]) = (int_64)26843545600020
	*($4 + [32 align=4]) = (int_64)13421772800030
	*($9 + [24]) = $4
	$1 = ($4 + [72])
	*($9 + [32]) = $1
	*($4 + [40 align=4]) = (int_64)6713033883688
	*($4 + [48 align=4]) = (int_64)3354369458226
	*($4 + [56 align=4]) = (int_64)1679332212796
	*($4 + [64 align=4]) = (int_64)70
	*($9 + [28]) = $1
	$6 = (int_64)0
	$3 = *($9 + [24])
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$32 }
	$2 = ((CASTING uint_32)(uint_64 $5) & [255])
	
.LOOP $label$34:
	$4 = ($1 + [-8])
	if ( ((uint_32)$2 >= (uint_32)*($4)) ){ goto $label$33 }
	$1 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$6 = *(($1 + [-4]))
	
.LABEL $label$32
	if ( ($3 == 0) ){ goto $label$35 }
	*($9 + [28]) = $3
	CALL $200($3)
	
.LABEL $label$35
	*([0] + [4]) = ($9 + [80])
	return $6
}

int_32 .FUNC $99 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [224])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $100($0, $5)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [224])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC __fpclassifyl (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [3] ? [2] : ((int_64)((int_64)$2 | (int_64)$0) != (int_64)0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

int_32 .FUNC __signbitl (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [352])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($2 + [4]), $0, [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((int_32)(*($2 + [8]) - $1) > (int_32)[7]), [352])
	CALL memcpy(*($2 + [4]), ($0 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $95 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $198(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $221($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $200($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $200($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [208])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [208])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [208])
	CALL memcpy($0, *($2 + [4]), [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $1) > (uint_32)[7]), [208])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $97 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [288])
	$4 = CALL $198([48])
	CALL $93($4)
	*($4 + [32]) = $1
	$3 = *($3)
	*($4) = *($3)
	*(($4 + [28])) = *(($3 + [28]))
	*(($4 + [24])) = *(($3 + [24]))
	*(($4 + [20])) = *(($3 + [20]))
	*(($5 = ($4 + [16]))) = *(($3 + [16]))
	*(($4 + [12])) = *(($3 + [12]))
	*(($4 + [8])) = *(($3 + [8]))
	*(($4 + [4])) = *(($3 + [4]))
	*($6 + [40]) = ($6 + [32])
	*($6 + [36]) = $6
	*($6 + [32]) = $6
	*($6 + [48]) = ($6 + [32])
	*($6 + [60]) = $5
	*($6 + [56]) = $4
	CALL $94(($6 + [56]), ($6 + [48]))
	*($4 + [36]) = CALL db_store_i64(*($1 + [8]), (int_64)-3020378822620332032, $2, (int_64)-3020378822620332032, $6, [32])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-3020378822620332032) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-3020378822620332031
	
.LABEL $label$1
	*($6 + [32]) = $4
	*($6) = (int_64)-3020378822620332032
	$5 = *($4 + [36])
	*($6 + [56]) = $5
	$3 = *(($1 + [28]))
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-3020378822620332032
	*($3 + [16]) = $5
	*($6 + [32]) = [0]
	*($3) = $4
	*(($1 + [28])) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $95(($1 + [24]), ($6 + [32]), $6, ($6 + [56]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($6 + [32])
	*($6 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $200($4)
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [64])
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [592])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [20]) = $4
	*($7 + [16]) = $4
	*($7 + [24]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$5 = CALL $198([48])
	CALL $93($5)
	*($5 + [32]) = $0
	*($7 + [32]) = ($7 + [16])
	*($7 + [44]) = ($5 + [16])
	*($7 + [40]) = $5
	CALL $96(($7 + [40]), ($7 + [32]))
	*($5 + [36]) = $1
	*($7 + [32]) = $5
	*($7 + [40]) = (int_64)-3020378822620332032
	$6 = *($5 + [36])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)-3020378822620332032
	*($4 + [16]) = $6
	*($7 + [32]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $95(($0 + [24]), ($7 + [32]), ($7 + [40]), ($7 + [12]))
	
.LABEL $label$8
	$4 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $200($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
	return $5
}

void .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [416])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [464])
	$3 = *($3)
	*($1) = *($3)
	*(($1 + [24])) = *(($3 + [24]))
	*(($4 = ($1 + [16]))) = *(($3 + [16]))
	*(($1 + [8])) = *(($3 + [8]))
	CALL eosio_assert([1], [528])
	*($5 + [40]) = ($5 + [32])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	*($5 + [48]) = ($5 + [32])
	*($5 + [60]) = $4
	*($5 + [56]) = $1
	CALL $94(($5 + [56]), ($5 + [48]))
	CALL db_update_i64(*($1 + [36]), $2, $5, [32])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-3020378822620332032) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-3020378822620332031
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [288])
	$4 = CALL $198([48])
	CALL $93($4)
	*($4 + [32]) = $1
	$3 = *($3)
	*($4) = *($3)
	*(($4 + [28])) = *(($3 + [28]))
	*(($4 + [24])) = *(($3 + [24]))
	*(($4 + [20])) = *(($3 + [20]))
	*(($5 = ($4 + [16]))) = *(($3 + [16]))
	*(($4 + [12])) = *(($3 + [12]))
	*(($4 + [8])) = *(($3 + [8]))
	*(($4 + [4])) = *(($3 + [4]))
	*($6 + [40]) = ($6 + [32])
	*($6 + [36]) = $6
	*($6 + [32]) = $6
	*($6 + [48]) = ($6 + [32])
	*($6 + [60]) = $5
	*($6 + [56]) = $4
	CALL $94(($6 + [56]), ($6 + [48]))
	*($4 + [36]) = CALL db_store_i64(*($1 + [8]), (int_64)-3020378822620332032, $2, (int_64)-3020378822620332032, $6, [32])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-3020378822620332032) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-3020378822620332031
	
.LABEL $label$1
	*($6 + [32]) = $4
	*($6) = (int_64)-3020378822620332032
	$5 = *($4 + [36])
	*($6 + [56]) = $5
	$3 = *(($1 + [28]))
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-3020378822620332032
	*($3 + [16]) = $5
	*($6 + [32]) = [0]
	*($3) = $4
	*(($1 + [28])) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $95(($1 + [24]), ($6 + [32]), $6, ($6 + [56]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($6 + [32])
	*($6 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $200($4)
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [64])
}

int_32 .FUNC $93 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [976])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [1040])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [976])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [1040])
	return $0
}

int_32 .FUNC $138 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [16])
	*([0] + [4]) = $16
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($1 + [4])
	$3 = ($16 | [1])
	$5 = ($1 + [20])
	$6 = ($1 + [16])
	$7 = ($16 + [8])
	$8 = ($1 + [28])
	$9 = ($1 + [32])
	$10 = ($1 + [24])
	
.LOOP $label$1:
	$13 = [1]
	if ( (*($1) == 0) ){ goto $label$2 }
	$13 = ((int_32)*($9) != (int_32)[0])
	
.LABEL $label$2
	if ( (*($2) == 0) ){ goto $label$10 }
	$15 = ((int_32)*(($2 + [32])) != (int_32)[0])
	if ( ((int_32)($13 | $15) == (int_32)[1]) ){ goto $label$9 }
	$15 = *(($2 + [16]))
	$13 = *($6)
	$12 = *($5)
	if ( ((int_32)($12 - $13) != (int_32)(*(($2 + [20])) - $15)) ){ goto $label$7 }
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$11 }
	$11 = $13
	
.LOOP $label$12:
	if ( ((int_32)*($11) != (int_32)*($15)) ){ goto $label$7 }
	$15 = ($15 + [1])
	$11 = ($11 + [1])
	if ( ((int_32)$12 != (int_32)$11) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_32)*($10) != (int_32)*(($2 + [24]))) ){ goto $label$7 }
	if ( ((int_32)*($8) != (int_32)*(($2 + [28]))) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$10
	$15 = [1]
	
.LABEL $label$9
	if ( ((int_32)$13 == (int_32)$15) ){ goto $label$6 }
	
.LABEL $label$8
	$12 = *($5)
	$13 = *($6)
	
.LABEL $label$7
	*($7) = [0]
	*($16) = (int_64)0
	$11 = ($12 - $13)
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$11 > (uint_32)[10]) ){ goto $label$15 }
	*($16) = ($11 << [1])
	$14 = $3
	if ( ((int_32)$13 != (int_32)$12) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$15 = (($11 + [16]) & [-16])
	$14 = CALL $198($15)
	*($7) = $14
	*($16) = ($15 | [1])
	*($16 + [4]) = $11
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$13 }
	
.LABEL $label$14
	$15 = $14
	
.LOOP $label$16:
	*($15) = *($13)
	$15 = ($15 + [1])
	$13 = ($13 + [1])
	if ( ((int_32)$12 != (int_32)$13) ){ goto $label$16 }
	$14 = ($14 + $11)
	
.LABEL $label$13
	*($14) = [0]
	$13 = ($0 + [4])
	$15 = *($13)
	if ( ((uint_32)$15 >= (uint_32)*(($0 + [8]))) ){ goto $label$18 }
	*($15) = *($16)
	*(($15 + [8])) = *($7)
	*($7) = [0]
	*($16) = [0]
	*($16 + [4]) = [0]
	*($13) = (*($13) + [12])
	goto $label$17 
	
.LABEL $label$18
	CALL $139($0, $16)
	if ( ((*($16) & [1]) == 0) ){ goto $label$17 }
	CALL $200(*($7))
	
.LABEL $label$17
	$13 = *($8)
	$15 = *($1)
	if ( ($15 == 0) ){ goto $label$20 }
	CALL void $16((int_32 $4), (int_32 *($10)), (int_32 $13), (int_32 *(($15 & [-2]) + [4])))
	$15 = *($16)
	if ( ((int_32)$15 == (int_32)*($8)) ){ goto $label$19 }
	$13 = *($16 + [4])
	goto $label$3 
	
.LABEL $label$20
	*($16 + [4]) = $13
	*($16) = $13
	$15 = $13
	goto $label$4 
	
.LABEL $label$19
	$13 = *($16 + [4])
	if ( ((int_32)$13 != (int_32)$15) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$6
	*([0] + [4]) = ($16 + [16])
	return $0
	
.LABEL $label$5
	CALL $202($16)
	
.LABEL $label$4
	if ( ((int_32)*($5) != (int_32)$15) ){ goto $label$3 }
	*($9) = [1]
	
.LABEL $label$3
	*($5) = $15
	*($6) = *($10)
	*($10) = $13
	goto $label$1 
	return (unreachable)
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $198(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $221($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $200(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $200($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN6gamenn10parse_memoENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERhRyS7_RS6_S8_S9_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [112])
	*([0] + [4]) = $16
	$15 = *($1)
	if ( ($15 & [1]) ){ goto $label$2 }
	$15 = uint_32($15 >> [1])
	$9 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$15 = *($1 + [4])
	$9 = *($1 + [8])
	
.LABEL $label$1
	$10 = ($9 + $15)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$4 }
	
.LOOP $label$5:
	if ( CALL isspace(*($9)) ){ goto $label$4 }
	$9 = ($9 + [1])
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$6 }
	$15 = $9
	
.LOOP $label$7:
	$15 = ($15 + [1])
	if ( ((int_32)$15 == (int_32)$10) ){ goto $label$6 }
	if ( CALL isspace(*($15)) ){ goto $label$7 }
	*($9) = *($15)
	$9 = ($9 + [1])
	goto $label$7 
	
.LABEL $label$6
	$10 = $9
	
.LABEL $label$3
	$9 = *($1)
	if ( ($9 & [1]) ){ goto $label$9 }
	$15 = ($1 + [1])
	$9 = ($15 + uint_32($9 >> [1]))
	goto $label$8 
	
.LABEL $label$9
	$15 = *($1 + [8])
	$9 = ($15 + *($1 + [4]))
	
.LABEL $label$8
	CALL $209($1, ($10 - $15), ($9 - $10))
	$10 = [0]
	*($16 + [96]) = [0]
	*($16 + [88]) = (int_64)0
	$15 = CALL strlen([2240])
	*($16 + [80]) = $15
	*($16 + [72]) = [0]
	if ( ((uint_32)$15 >= (uint_32)[9]) ){ goto $label$12 }
	$9 = ($16 + [72])
	if ( $15 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$9 = CALL $199($15)
	*($16 + [72]) = $9
	
.LABEL $label$11
	CALL memmove($9, [2240], $15)
	$10 = *(($16 + [80]))
	
.LABEL $label$10
	CALL $195($9, ($9 + $10), ($16 + [56]))
	CALL $135(($16 + [88]), $1, ($16 + [72]), [1])
	if ( (*(($16 + [80])) <= [9]) ){ goto $label$13 }
	$15 = *($16 + [72])
	if ( ($15 == 0) ){ goto $label$13 }
	CALL $201($15)
	
.LABEL $label$13
	CALL eosio_assert(((((int_32)(*($16 + [92]) - *($16 + [88])) / (int_32)[12]) + [-2]) <= [3]), [3280])
	*($16 + [56]) = (int_64)0
	$10 = [0]
	*($16 + [64]) = [0]
	$1 = *($16 + [88])
	$15 = CALL strlen([3264])
	*($16 + [48]) = $15
	*($16 + [40]) = [0]
	if ( ((uint_32)$15 >= (uint_32)[9]) ){ goto $label$16 }
	$9 = ($16 + [40])
	if ( $15 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$9 = CALL $199($15)
	*($16 + [40]) = $9
	
.LABEL $label$15
	CALL memmove($9, [3264], $15)
	$10 = *(($16 + [48]))
	
.LABEL $label$14
	CALL $195($9, ($9 + $10), ($16 + [104]))
	CALL $135(($16 + [56]), $1, ($16 + [40]), [1])
	if ( (*(($16 + [48])) <= [9]) ){ goto $label$17 }
	$15 = *($16 + [40])
	if ( ($15 == 0) ){ goto $label$17 }
	CALL $201($15)
	
.LABEL $label$17
	CALL eosio_assert(((int_32)(*($16 + [60]) - *($16 + [56])) == (int_32)[24]), [3280])
	$10 = [0]
	*($3) = (CASTING int_64)(int_32 CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji((*($16 + [56]) + [12]), [0], [10]))
	$9 = *($16 + [88])
	$15 = CALL strlen([3264])
	*($16 + [32]) = $15
	*($16 + [24]) = [0]
	$1 = ($9 + [12])
	if ( ((uint_32)$15 >= (uint_32)[9]) ){ goto $label$20 }
	$9 = ($16 + [24])
	if ( $15 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$9 = CALL $199($15)
	*($16 + [24]) = $9
	
.LABEL $label$19
	CALL memmove($9, [3264], $15)
	$10 = *(($16 + [32]))
	
.LABEL $label$18
	CALL $195($9, ($9 + $10), ($16 + [104]))
	CALL $135(($16 + [56]), $1, ($16 + [24]), [1])
	if ( (*(($16 + [32])) <= [9]) ){ goto $label$21 }
	$15 = *($16 + [24])
	if ( ($15 == 0) ){ goto $label$21 }
	CALL $201($15)
	
.LABEL $label$21
	CALL eosio_assert(((int_32)(*($16 + [60]) - *($16 + [56])) == (int_32)[24]), [3280])
	CALL $203($5, (*($16 + [56]) + [12]))
	$9 = *($16 + [88])
	if ( (((int_32)(*($16 + [92]) - $9) / (int_32)[12]) <= [3]) ){ goto $label$22 }
	$15 = CALL strlen([3264])
	*($16 + [16]) = $15
	$10 = [0]
	*($16 + [8]) = [0]
	$1 = ($9 + [24])
	if ( ((uint_32)$15 >= (uint_32)[9]) ){ goto $label$25 }
	$9 = ($16 + [8])
	if ( $15 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$9 = CALL $199($15)
	*($16 + [8]) = $9
	
.LABEL $label$24
	CALL memmove($9, [3264], $15)
	$10 = *(($16 + [16]))
	
.LABEL $label$23
	CALL $195($9, ($9 + $10), ($16 + [104]))
	CALL $135(($16 + [56]), $1, ($16 + [8]), [1])
	if ( (*(($16 + [16])) <= [9]) ){ goto $label$26 }
	$15 = *($16 + [8])
	if ( ($15 == 0) ){ goto $label$26 }
	CALL $201($15)
	
.LABEL $label$26
	$9 = *($15)
	$15 = *($16 + [56])
	$10 = CALL strlen([3312])
	if ( ((int_32)$10 != (int_32)( *($15 + [4]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$28 }
	if ( (CALL $211($15, [0], [-1], [3312], $10) == 0) ){ goto $label$27 }
	
.LABEL $label$28
	CALL $203($7, (*($16 + [88]) + [24]))
	goto $label$22 
	
.LABEL $label$27
	CALL eosio_assert(((int_32)(*($16 + [60]) - *($16 + [56])) == (int_32)[24]), [3280])
	$15 = *($16 + [56])
	if ( (*($15 + [12]) & [1]) ){ goto $label$30 }
	$15 = (($15 + [12]) + [1])
	goto $label$29 
	
.LABEL $label$30
	$15 = *(($15 + [20]))
	
.LABEL $label$29
	$9 = [-1]
	
.LOOP $label$31:
	$10 = ($15 + $9)
	$1 = ($9 + [1])
	$9 = $1
	if ( *(($10 + [1])) ){ goto $label$31 }
	$8 = (CASTING uint_64)(uint_32 $1)
	$12 = (int_64)0
	$11 = (int_64)59
	$13 = (int_64)0
	
.LOOP $label$32:
	$14 = (int_64)0
	if ( ((uint_64)$12 >= (uint_64)$8) ){ goto $label$33 }
	$9 = *($15)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$9 = ($9 + [165])
	goto $label$34 
	
.LABEL $label$35
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$33
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$37 }
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	goto $label$36 
	
.LABEL $label$37
	$14 = ((int_64)$14 & (int_64)15)
	
.LABEL $label$36
	$15 = ($15 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$32 }
	*($6) = $13
	
.LABEL $label$22
	$15 = *($16 + [88])
	if ( ((int_32)(*($16 + [92]) - $15) != (int_32)[48]) ){ goto $label$38 }
	CALL $203($7, ($15 + [36]))
	
.LABEL $label$38
	$10 = *($16 + [56])
	if ( ($10 == 0) ){ goto $label$39 }
	$15 = *($16 + [60])
	if ( ((int_32)$15 == (int_32)$10) ){ goto $label$41 }
	$9 = ([0] - $10)
	$15 = ($15 + [-12])
	
.LOOP $label$42:
	if ( ((*($15) & [1]) == 0) ){ goto $label$43 }
	CALL $200(*(($15 + [8])))
	
.LABEL $label$43
	$15 = ($15 + [-12])
	if ( ((int_32)($15 + $9) != (int_32)[-12]) ){ goto $label$42 }
	$15 = *($16 + [56])
	goto $label$40 
	
.LABEL $label$41
	$15 = $10
	
.LABEL $label$40
	*($16 + [60]) = $10
	CALL $200($15)
	
.LABEL $label$39
	$10 = *($16 + [88])
	if ( ($10 == 0) ){ goto $label$44 }
	$15 = *($16 + [92])
	if ( ((int_32)$15 == (int_32)$10) ){ goto $label$46 }
	$9 = ([0] - $10)
	$15 = ($15 + [-12])
	
.LOOP $label$47:
	if ( ((*($15) & [1]) == 0) ){ goto $label$48 }
	CALL $200(*(($15 + [8])))
	
.LABEL $label$48
	$15 = ($15 + [-12])
	if ( ((int_32)($15 + $9) != (int_32)[-12]) ){ goto $label$47 }
	$15 = *($16 + [88])
	goto $label$45 
	
.LABEL $label$46
	$15 = $10
	
.LABEL $label$45
	*($16 + [92]) = $10
	CALL $200($15)
	
.LABEL $label$44
	*([0] + [4]) = ($16 + [112])
}

int_32 .FUNC _ZN6gamenn9startGameEyN5eosio5assetES1_yNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_ (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [192])
	*([0] + [4]) = $15
	*($15 + [112]) = $1
	*($15 + [104]) = $4
	CALL require_auth($1)
	$4 = *($3 + [8])
	$9 = *($0 + [384])
	*(($11 = ($15 + [176]))) = [0]
	*($15 + [152]) = $1
	*($15 + [144]) = $9
	*($15 + [160]) = (int_64)-1
	*($15 + [168]) = (int_64)0
	CALL $68(($15 + [144]), (uint_64)$4 >> (uint_64)(int_64)8), [672])
	$7 = *($15 + [168])
	if ( ($7 == 0) ){ goto $label$1 }
	$12 = ($15 + [172])
	$14 = *($12)
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	$14 = ($14 + [-24])
	$8 = *($14)
	*($14) = [0]
	if ( ($8 == 0) ){ goto $label$5 }
	CALL $200($8)
	
.LABEL $label$5
	if ( ((int_32)$7 != (int_32)$14) ){ goto $label$4 }
	$14 = *(($15 + [168]))
	goto $label$2 
	
.LABEL $label$3
	$14 = $7
	
.LABEL $label$2
	*($12) = $7
	CALL $200($14)
	$4 = *(($3 + [8]))
	
.LABEL $label$1
	$1 = *($0)
	*($11) = [0]
	*($15 + [152]) = $1
	*($15 + [144]) = $9
	*($15 + [160]) = (int_64)-1
	*($15 + [168]) = (int_64)0
	$14 = CALL $68(($15 + [144]), (uint_64)$4 >> (uint_64)(int_64)8), [672]
	$10 = *($14) + [8])
	$9 = *($14)
	$7 = *($15 + [168])
	if ( ($7 == 0) ){ goto $label$6 }
	$11 = ($15 + [172])
	$14 = *($11)
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$14 = ($14 + [-24])
	$8 = *($14)
	*($14) = [0]
	if ( ($8 == 0) ){ goto $label$10 }
	CALL $200($8)
	
.LABEL $label$10
	if ( ((int_32)$7 != (int_32)$14) ){ goto $label$9 }
	$14 = *(($15 + [168]))
	goto $label$7 
	
.LABEL $label$8
	$14 = $7
	
.LABEL $label$7
	*($11) = $7
	CALL $200($14)
	$4 = *(($3 + [8]))
	
.LABEL $label$6
	CALL __multi3($15, $9, (int_64)$9 >> (int_64)63), (int_64)25, (int_64)0)
	$1 = *(($15 + [8]))
	$13 = *($15)
	CALL eosio_assert(( (uint_64)($13 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ), [1072])
	CALL eosio_assert(( ((uint_64)$13 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [1104])
	CALL eosio_assert([1], [1136])
	CALL eosio_assert([1], [1152])
	CALL eosio_assert([1], [1136])
	CALL eosio_assert([1], [1152])
	CALL eosio_assert(((int_64)$4 == (int_64)$10), [1456])
	$1 = *($3)
	CALL eosio_assert(((int_64)$1 <= (int_64)((int_64)$13 / (int_64)4000)), [2960])
	if ( ((int_64)$4 != (int_64)1397703940) ){ goto $label$12 }
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)-1000) <= (int_64)1999001), [2992])
	CALL eosio_assert(((int_64)$9 > (int_64)19999999), [3040])
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_64)$4 != (int_64)1162563588) ){ goto $label$13 }
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)-1000) <= (int_64)49999001), [2992])
	CALL eosio_assert(((int_64)$9 > (int_64)299999999), [3088])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [3120])
	
.LABEL $label$11
	$9 = *(($3 + [8]))
	$4 = ((int_64)((int_64)$4 >> (int_64)63) << (int_64)2) | (int_64)(uint_64)$4 >> (uint_64)(int_64)62
	$4 = *($3)
	$1 = ((int_64)$4 << (int_64)2)
	CALL eosio_assert(( (uint_64)($1 <= (int_64)4611686018427387904) ? ((int_64)$4)) < (int_64)0) : (int_64)($4 == 0) ), [1072])
	CALL eosio_assert(( ((uint_64)$1 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$4 > (int_64)-1) : ((int_64)$4 == (int_64)-1) ), [1104])
	CALL eosio_assert(((int_64)$9 == (int_64)*($2 + [8])), [1456])
	CALL eosio_assert(((int_64)*($2) == (int_64)$1), [3136])
	$14 = *($5)
	if ( ($14 & [1]) ){ goto $label$15 }
	$14 = uint_32($14 >> [1])
	goto $label$14 
	
.LABEL $label$15
	$14 = *($5 + [4])
	
.LABEL $label$14
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [3168])
	$4 = CALL _ZN6gamenn7next_idEv($0)
	*($15 + [96]) = $4
	$11 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$16 }
	$14 = ($7 + [-24])
	$2 = ([0] - $11)
	
.LOOP $label$17:
	if ( ((int_64)*(*($14)) == (int_64)$4) ){ goto $label$16 }
	$7 = $14
	$8 = ($14 + [-24])
	$14 = $8
	if ( ((int_32)($8 + $2) != (int_32)[-24]) ){ goto $label$17 }
	
.LABEL $label$16
	$2 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$11) ){ goto $label$19 }
	$14 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [116]) == (int_32)$2), [224])
	goto $label$18 
	
.LABEL $label$19
	$14 = [0]
	$8 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)3617214760481587200, $4)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$18 }
	$14 = CALL $45($2, $8)
	CALL eosio_assert(((int_32)*($14 + [116]) == (int_32)$2), [224])
	
.LABEL $label$18
	CALL eosio_assert(($14 == 0), [3200])
	CALL _ZNSt3__19to_stringEy(($15 + [64]), *($15 + [96]))
	$14 = CALL $208(($15 + [64]), [3264])
	$8 = ($14 + [8])
	*((($15 + [128]) + [8])) = *($8)
	*($15 + [128]) = *($14)
	*($14) = [0]
	*(($14 + [4])) = [0]
	*($8) = [0]
	$14 = *($5)
	$8 = ($14 & [1])
	$14 = CALL $207(($15 + [128]), ( *($5 + [8]) ? ($5 + [1]) : $8 ), ( *($5 + [4]) ? uint_32($14 >> [1]) : $8 ))
	$8 = ($14 + [8])
	*((($15 + [16]) + [8])) = *($8)
	*($15 + [16]) = *($14)
	*($14) = [0]
	*(($14 + [4])) = [0]
	*($8) = [0]
	$14 = CALL $208(($15 + [16]), [3264])
	$8 = ($14 + [8])
	*((($15 + [144]) + [8])) = *($8)
	*($15 + [144]) = *($14)
	*($14) = [0]
	*(($14 + [4])) = [0]
	*($8) = [0]
	CALL _ZNSt3__19to_stringEm(($15 + [48]), (CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$16() / (uint_64)(int_64)1000000)))
	$14 = *($15 + [48])
	$8 = ($14 & [1])
	$14 = CALL $207(($15 + [144]), ( *($15 + [56]) ? (($15 + [48]) | [1]) : $8 ), ( *($15 + [52]) ? uint_32($14 >> [1]) : $8 ))
	$8 = ($14 + [8])
	*((($15 + [80]) + [8])) = *($8)
	*($15 + [80]) = *($14)
	*($14) = [0]
	*(($14 + [4])) = [0]
	*($8) = [0]
	if ( ((*($15 + [48]) & [1]) == 0) ){ goto $label$20 }
	CALL $200(*((($15 + [48]) + [8])))
	
.LABEL $label$20
	if ( ((*($15 + [144]) & [1]) == 0) ){ goto $label$21 }
	CALL $200(*($15 + [152]))
	
.LABEL $label$21
	if ( ((*($15 + [16]) & [1]) == 0) ){ goto $label$22 }
	CALL $200(*($15 + [24]))
	
.LABEL $label$22
	if ( ((*($15 + [128]) & [1]) == 0) ){ goto $label$23 }
	CALL $200(*($15 + [136]))
	
.LABEL $label$23
	if ( ((*($15 + [64]) & [1]) == 0) ){ goto $label$24 }
	CALL $200(*($15 + [72]))
	
.LABEL $label$24
	$14 = *($15 + [80])
	$8 = ($14 & [1])
	CALL sha256(( *($15 + [88]) ? (($15 + [80]) | [1]) : $8 ), ( *($15 + [84]) ? uint_32($14 >> [1]) : $8 ), ($15 + [144]))
	$4 = *($0)
	*($15 + [36]) = $0
	*($15 + [40]) = $3
	*($15 + [20]) = ($15 + [112])
	*($15 + [16]) = ($15 + [96])
	*($15 + [24]) = ($15 + [104])
	*($15 + [28]) = ($15 + [144])
	*($15 + [32]) = ($15 + [80])
	*($15 + [44]) = $6
	*($15 + [64]) = $4
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$15()), [288])
	*($15 + [128]) = $2
	*($15 + [132]) = ($15 + [16])
	*($15 + [136]) = ($15 + [64])
	*(($8 = CALL $198([128])) + [24]) = [0]
	*($8 + [16 align=4]) = (int_64)0
	*($8 + [88]) = (int_64)0
	*($8 + [96]) = (int_64)1398362884
	CALL eosio_assert([1], [976])
	$4 = (int_64)5462355
	$14 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	
.LOOP $label$29:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$29 }
	
.LABEL $label$28
	$7 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$7 = [0]
	
.LABEL $label$25
	CALL eosio_assert($7, [1040])
	*($8 + [112]) = [0]
	*($8 + [104 align=4]) = (int_64)0
	*($8 + [116]) = $2
	CALL $133(($15 + [128]), $8)
	*($15 + [48]) = $8
	$4 = *($8)
	*($15 + [128]) = $4
	$7 = *($8 + [120])
	*($15 + [124]) = $7
	$2 = ($0 + [36])
	$14 = *($2)
	if ( ((uint_32)$14 >= (uint_32)*(($0 + [40]))) ){ goto $label$31 }
	*($14 + [8]) = $4
	*($14 + [16]) = $7
	*($15 + [48]) = [0]
	*($14) = $8
	*($2) = ($14 + [24])
	goto $label$30 
	
.LABEL $label$31
	CALL $112(($0 + [32]), ($15 + [48]), ($15 + [128]), ($15 + [124]))
	
.LABEL $label$30
	$14 = *($15 + [48])
	*($15 + [48]) = [0]
	if ( ($14 == 0) ){ goto $label$32 }
	if ( ((*($14 + [104]) & [1]) == 0) ){ goto $label$33 }
	CALL $200(*(($14 + [112])))
	
.LABEL $label$33
	if ( ((*($14 + [16]) & [1]) == 0) ){ goto $label$34 }
	CALL $200(*(($14 + [24])))
	
.LABEL $label$34
	CALL $200($14)
	
.LABEL $label$32
	if ( ((*($15 + [80]) & [1]) == 0) ){ goto $label$35 }
	CALL $200(*(($15 + [88])))
	
.LABEL $label$35
	*([0] + [4]) = ($15 + [192])
	return [1]
}

int_64 .FUNC _ZN6gamenn7next_idEv (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	*(($5 + [8])) = (int_64)0
	*(($5 + [16])) = (int_64)0
	*($5) = (int_64)0
	$1 = ($0 + [168])
	$4 = *(($0 + [196]))
	if ( ((int_32)$4 == (int_32)*(($0 + [192]))) ){ goto $label$2 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$1), [224])
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	$3 = CALL db_find_i64(*($1), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $120($1, $3)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$1), [224])
	
.LABEL $label$1
	$4 = ( $4 ? $5 : $4 )
	*($5 + [24]) = *($4)
	$3 = (($5 + [24]) + [8])
	CALL $222($3, ($4 + [8]))
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$3 }
	CALL $200(*(($5 + [16])))
	
.LABEL $label$3
	*($5 + [24]) = ((int_64)*($5 + [24]) + (int_64)1)
	CALL $119($1, ($5 + [24]), *($0))
	$2 = *($5 + [24])
	if ( ((*($3) & [1]) == 0) ){ goto $label$4 }
	CALL $200(*(($5 + [40])))
	
.LABEL $label$4
	*([0] + [4]) = ($5 + [48])
	return $2
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$5 = *($0 + [4])
	*($1) = *(*($5))
	*($1 + [8]) = *(*($5 + [4]))
	$2 = *($0)
	$3 = *($5 + [20])
	*($1 + [64]) = *(*($5 + [8]))
	*($1 + [72]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = *($5 + [12])
	*($1 + [32]) = *($6)
	*(($1 + [56])) = *(($6 + [24]))
	*(($1 + [48])) = *(($6 + [16]))
	*(($1 + [40])) = *(($6 + [8]))
	CALL $203(($1 + [16]), *($5 + [16]))
	*($1 + [80]) = *($3 + [384])
	$6 = *($5 + [24])
	*($1 + [88]) = *($6)
	*(($1 + [96])) = *(($6 + [8]))
	CALL $203(($1 + [104]), *($5 + [28]))
	$5 = *($1 + [16])
	$6 = ( *(($1 + [20])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [88])
	$4 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$6 = *(($1 + [104]))
	$6 = ( *(($1 + [108])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$5 = ($6 + $5)
	$4 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $5)
	CALL $134($7, $1)
	$4 = *($1)
	*($1 + [120]) = CALL db_store_i64(*($2 + [8]), (int_64)3617214760481587200, *(*($0 + [8])), $4, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $72($0, ($1 + [104]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $72($0, ($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $135 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($6) = [0]
	$4 = *($2 + [8])
	*($6 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $6
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL $199($4)
	*($6) = $5
	$2 = *($2)
	
.LABEL $label$1
	CALL memcpy($5, $2, $4)
	*($6 + [32]) = [0]
	$2 = *(($6 + [8]))
	*($6 + [40]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $6
	$5 = ($6 + [32])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL $199($2)
	*($6 + [32]) = $5
	$4 = *($6)
	
.LABEL $label$3
	CALL memcpy($5, $4, $2)
	*($6 + [16]) = [0]
	$2 = *((($6 + [32]) + [8]))
	*($6 + [24]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$6 }
	$4 = ($6 + [16])
	$5 = ($6 + [32])
	goto $label$5 
	
.LABEL $label$6
	$4 = CALL $199($2)
	*($6 + [16]) = $4
	$2 = *((($6 + [16]) + [8]))
	$5 = *($6 + [32])
	
.LABEL $label$5
	CALL memcpy($4, $5, $2)
	*($6 + [28]) = $3
	if ( (*((($6 + [32]) + [8])) <= [9]) ){ goto $label$7 }
	$2 = *($6 + [32])
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $201($2)
	
.LABEL $label$7
	$2 = CALL $136($0, $1, ($6 + [16]))
	if ( (*((($6 + [16]) + [8])) <= [9]) ){ goto $label$8 }
	$4 = *($6 + [16])
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $201($4)
	
.LABEL $label$8
	if ( (*(($6 + [8])) <= [9]) ){ goto $label$9 }
	$4 = *($6)
	if ( ($4 == 0) ){ goto $label$9 }
	CALL $201($4)
	
.LABEL $label$9
	*([0] + [4]) = ($6 + [48])
	return $2
}

int_32 .FUNC $136 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [272])
	*([0] + [4]) = $7
	$5 = *($1 + [8])
	$6 = *($1 + [4])
	$4 = *($1)
	*($7 + [176]) = [0]
	$3 = *($2 + [8])
	*($7 + [184]) = $3
	$1 = ($4 & [1])
	$5 = ( $5 ? ($1 + [1]) : $1 )
	$1 = ($5 + ( $6 ? uint_32($4 >> [1]) : $1 ))
	if ( ((uint_32)$3 > (uint_32)[8]) ){ goto $label$2 }
	$4 = ($7 + [176])
	$6 = $2
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL $199($3)
	*($7 + [176]) = $4
	$6 = *($2)
	
.LABEL $label$1
	CALL memcpy($4, $6, $3)
	*($7 + [188]) = *($2 + [12])
	$1 = CALL $137(($7 + [192]), $5, $1, ($7 + [176]))
	$2 = [0]
	*($7 + [232]) = [0]
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$3 }
	*($7 + [232]) = $3
	if ( ($3 & [1]) ){ goto $label$4 }
	CALL void ($1 + [4])((int_32 (($7 + [232]) | [4])), (int_32 [0]), (int_32 *(($3 & [-2]))))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	*((($7 + [232]) + [12])) = *(($1 + [12]))
	*($7 + [236 align=4]) = *($1 + [4 align=4])
	$2 = $3
	
.LABEL $label$3
	*($7 + [248]) = *($1 + [16 align=4])
	*($7 + [256]) = *($1 + [24])
	*($7 + [260]) = *($1 + [28])
	*($7 + [264]) = *($1 + [32])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ($2 & [1]) ){ goto $label$6 }
	$2 = *(($2 & [-2]))
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ($1 + [4])
	CALL void $3((int_32 $3), (int_32 [2]), (int_32 $2))
	
.LABEL $label$6
	*($1) = [0]
	
.LABEL $label$5
	if ( (*(($7 + [184])) <= [9]) ){ goto $label$7 }
	$1 = *($7 + [176])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $201($1)
	
.LABEL $label$7
	*(($7 + [116])) = [0]
	*($7 + [96]) = [0]
	*($7 + [124]) = [0]
	*($7 + [120]) = [0]
	*($7 + [112]) = [0]
	*($7 + [128]) = [1]
	*($7 + [136]) = [0]
	*($7 + [164]) = [0]
	*($7 + [160]) = [0]
	*($7 + [168]) = [1]
	*($7 + [152]) = *($7 + [112])
	*($7 + [40]) = [0]
	$1 = [0]
	$2 = *($7 + [232])
	if ( ($2 == 0) ){ goto $label$8 }
	*($7 + [40]) = $2
	if ( ($2 & [1]) ){ goto $label$9 }
	CALL void (($7 + [232]) | [4])((int_32 (($7 + [40]) | [4])), (int_32 [0]), (int_32 *(($2 & [-2]))))
	$1 = *($7 + [136])
	goto $label$8 
	
.LABEL $label$9
	*((($7 + [40]) + [12])) = *((($7 + [232]) + [12]))
	*($7 + [44 align=4]) = *($7 + [236 align=4])
	$1 = [0]
	
.LABEL $label$8
	*($7 + [56]) = *((($7 + [232]) + [16]))
	*($7 + [64]) = *((($7 + [232]) + [24]))
	*($7 + [68]) = *((($7 + [232]) + [28]))
	*($7 + [72]) = *((($7 + [232]) + [32]))
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	*($7) = $1
	if ( ($1 & [1]) ){ goto $label$11 }
	CALL void (($7 + [136]) | [4])((int_32 ($7 | [4])), (int_32 [0]), (int_32 *(($1 & [-2]))))
	goto $label$10 
	
.LABEL $label$11
	*(($7 + [12])) = *((($7 + [136]) + [12]))
	*($7 + [4 align=4]) = *($7 + [140 align=4])
	
.LABEL $label$10
	*($7 + [16]) = *((($7 + [136]) + [16]))
	*($7 + [24]) = *((($7 + [136]) + [24]))
	*($7 + [28]) = *((($7 + [136]) + [28]))
	*($7 + [32]) = *((($7 + [136]) + [32]))
	$3 = CALL $138(($7 + [80]), ($7 + [40]), $7)
	$1 = *($7)
	if ( ($1 == 0) ){ goto $label$12 }
	if ( ($1 & [1]) ){ goto $label$13 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$13 }
	$2 = ($7 | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$13
	*($7) = [0]
	
.LABEL $label$12
	$1 = *($7 + [40])
	if ( ($1 == 0) ){ goto $label$14 }
	if ( ($1 & [1]) ){ goto $label$15 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$15 }
	$2 = (($7 + [40]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$15
	*($7 + [40]) = [0]
	
.LABEL $label$14
	$4 = *($0)
	*($0) = *($3)
	*($3) = $4
	$1 = *($0 + [4])
	*($0 + [4]) = *($3 + [4])
	*($3 + [4]) = $1
	$2 = *($0 + [8])
	*($0 + [8]) = *($3 + [8])
	*($3 + [8]) = $2
	if ( ($4 == 0) ){ goto $label$16 }
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$18 }
	$2 = ([0] - $4)
	$1 = ($1 + [-12])
	
.LOOP $label$19:
	if ( ((*($1) & [1]) == 0) ){ goto $label$20 }
	CALL $200(*(($1 + [8])))
	
.LABEL $label$20
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $2) != (int_32)[-12]) ){ goto $label$19 }
	$1 = *($3)
	goto $label$17 
	
.LABEL $label$18
	$1 = $4
	
.LABEL $label$17
	*(($3 + [4])) = $4
	CALL $200($1)
	
.LABEL $label$16
	$1 = *($7 + [136])
	if ( ($1 == 0) ){ goto $label$21 }
	if ( ($1 & [1]) ){ goto $label$22 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$22 }
	$2 = (($7 + [136]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$22
	*($7 + [136]) = [0]
	
.LABEL $label$21
	$1 = *($7 + [232])
	if ( ($1 == 0) ){ goto $label$23 }
	if ( ($1 & [1]) ){ goto $label$24 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$24 }
	$2 = (($7 + [232]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$24
	*($7 + [232]) = [0]
	
.LABEL $label$23
	*([0] + [4]) = ($7 + [272])
	return $0
}

int_32 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [8]) = [0]
	$4 = *($3 + [8])
	*($7 + [16]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$6 = ($7 + [8])
	$5 = $3
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL $199($4)
	*($7 + [8]) = $6
	$5 = *($3)
	
.LABEL $label$1
	CALL memcpy($6, $5, $4)
	*($7 + [20]) = *($3 + [12])
	CALL $140($0, ($7 + [8]), [0])
	if ( (*(($7 + [16])) <= [9]) ){ goto $label$3 }
	$3 = *($7 + [8])
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $201($3)
	
.LABEL $label$3
	*($0 + [16]) = $1
	*($0 + [24]) = $1
	*($0 + [28]) = $2
	*($0 + [32]) = [0]
	*(($0 + [20])) = $1
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$8 }
	CALL void ($7 + [24])((int_32 ($0 + [4])), (int_32 $1), (int_32 $2), (int_32 *(($3 & [-2]) + [4])))
	$1 = *($7 + [24])
	if ( ((int_32)$1 == (int_32)*($0 + [28])) ){ goto $label$7 }
	$2 = *($7 + [28])
	goto $label$5 
	
.LABEL $label$8
	*($7 + [28]) = $2
	*($7 + [24]) = $2
	$1 = $2
	goto $label$6 
	
.LABEL $label$7
	$2 = *($7 + [28])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$5 }
	
.LABEL $label$6
	if ( ((int_32)*(($0 + [20])) != (int_32)$2) ){ goto $label$5 }
	*(($0 + [32])) = [1]
	
.LABEL $label$5
	*(($0 + [20])) = $1
	$1 = ($0 + [24])
	*(($0 + [16])) = *($1)
	*($1) = $2
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
	return $0
}

void .FUNC $213 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $215($1, $0, [12352])
	CALL abort()
	(unreachable)
}

int_32 .FUNC $208 (int_32 $0, int_32 $1)
{
	return CALL $207($0, $1, CALL $257($1))
}

int_32 .FUNC $209 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$3 = ($6 & [1])
	if ( $3 ){ goto $label$3 }
	$4 = uint_32($6 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $3 ){ goto $label$6 }
	$5 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $3 ? $2 : ($3 <= $2) )
	$3 = ($4 - $1)
	$3 = ($3 - $2)
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($5 + $1)
	CALL memmove($1, ($1 + $2), $3)
	$6 = *($0)
	
.LABEL $label$7
	$2 = ($4 - $2)
	if ( ($6 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($5 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $202 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $203 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $204($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $200 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $201 (int_32 $0)
{
	CALL $200($0)
}

int_32 .FUNC $206 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $204($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $207 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $204($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $204 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $198($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $200($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $205 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $198(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $200($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $181 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [592])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $198([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [208])
	CALL memcpy($6, $7, [8])
	*($6 + [12]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [12])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $182(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $200($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $129 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [176])
	*([0] + [4]) = $13
	$2 = CALL transaction_size()
	$6 = ($13 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $6
	$4 = CALL read_transaction($6, $2)
	$8 = CALL current_time()
	*((($13 = $13) + [140])) = [0]
	*(($13 + [144])) = [0]
	*($13 + [124]) = [0]
	*($13 + [128]) = [0]
	*($13 + [132]) = [0]
	*($13 + [136]) = [0]
	*($13 + [112]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	*($13 + [148]) = [0]
	*(($13 + [152])) = [0]
	*(($13 + [156])) = [0]
	*($13 + [160]) = [0]
	*(($13 + [164])) = [0]
	*(($13 + [168])) = [0]
	*($13 + [76]) = $6
	*($13 + [72]) = $6
	*($13 + [80]) = ($6 + $2)
	CALL $148(($13 + [72]), ($13 + [112]))
	CALL $150(CALL $149(CALL $149(($13 + [72]), ($13 + [136])), ($13 + [148])), ($13 + [160]))
	$1 = *(*(*($13 + [148]) + [16]))
	CALL sha256($6, $4, ($0 + [16]))
	$4 = [10000]
	if ( ((int_64)$1 == (int_64)*($0)) ){ goto $label$1 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [2656]
	$9 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$7 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$2 = ($2 + [165])
	goto $label$5 
	
.LABEL $label$7
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$3
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$2 }
	if ( ((int_64)$1 == (int_64)$9) ){ goto $label$1 }
	CALL $151($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [3568]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)9) ){ goto $label$13 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$2 = ($2 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [3568]
	$11 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$8 > (uint_64)(int_64)9) ){ goto $label$19 }
	$2 = *($6)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$2 = ($2 + [165])
	goto $label$17 
	
.LABEL $label$19
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$15
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$14 }
	*(($13 + [104])) = [0]
	*($13 + [88]) = (int_64)-1
	*($13 + [96]) = (int_64)0
	*($13 + [80]) = $11
	*($13 + [72]) = $9
	$6 = [0]
	$2 = CALL db_find_i64($9, $11, (int_64)-7880044409994084352, *($0))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$20 }
	$6 = CALL $152(($13 + [72]), $2)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)($13 + [72])), [224])
	
.LABEL $label$20
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [3584])
	CALL eosio_assert(((int_32)*($6 + [40]) ^ (int_32)[1]), [3648])
	$12 = [10001]
	if ( CALL $153($0, $1) ){ goto $label$28 }
	if ( CALL $154($0, $1) ){ goto $label$28 }
	$12 = [10003]
	if ( CALL $155($0, $1) ){ goto $label$28 }
	if ( (CALL $156($0, $1) == 0) ){ goto $label$29 }
	if ( *($6 + [41]) ){ goto $label$27 }
	$12 = [10004]
	goto $label$28 
	
.LABEL $label$29
	if ( (CALL $157($0, $1) == 0) ){ goto $label$30 }
	if ( *($6 + [43]) ){ goto $label$27 }
	$12 = [10005]
	goto $label$28 
	
.LABEL $label$30
	$2 = CALL $159($0, $1)
	$12 = ( [10002] ? [10000] : $2 )
	if ( ($2 == 0) ){ goto $label$28 }
	if ( (*($6 + [42]) & [255]) ){ goto $label$27 }
	
.LABEL $label$28
	$2 = *($6 + [44])
	if ( ($2 & [1]) ){ goto $label$33 }
	if ( uint_32($2 >> [1]) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	if ( (*(($6 + [48])) == 0) ){ goto $label$31 }
	
.LABEL $label$32
	$3 = ($6 + [44])
	$4 = [0]
	*($13 + [64]) = [0]
	*($13 + [56]) = (int_64)0
	$6 = CALL strlen([2240])
	*($13 + [48]) = $6
	*($13 + [40]) = [0]
	if ( ((uint_32)$6 >= (uint_32)[9]) ){ goto $label$26 }
	$2 = ($13 + [40])
	if ( $6 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$31
	if ( ((int_32)$12 != (int_32)[10003]) ){ goto $label$23 }
	
.LABEL $label$27
	CALL $158($0)
	$4 = [99999]
	$0 = *($13 + [96])
	if ( $0 ){ goto $label$21 }
	goto $label$1 
	
.LABEL $label$26
	$2 = CALL $199($6)
	*($13 + [40]) = $2
	
.LABEL $label$25
	CALL memmove($2, [2240], $6)
	$4 = *(($13 + [48]))
	
.LABEL $label$24
	CALL $195($2, ($2 + $4), ($13 + [24]))
	$5 = [1]
	CALL $160(($13 + [56]), $3, ($13 + [40]), [1])
	if ( (*(($13 + [48])) <= [9]) ){ goto $label$34 }
	$6 = *($13 + [40])
	if ( ($6 == 0) ){ goto $label$34 }
	CALL $201($6)
	
.LABEL $label$34
	$3 = *($13 + [60])
	$2 = *($13 + [56])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$35 }
	$5 = (($13 + [24]) + [8])
	
.LOOP $label$38:
	CALL $222(($13 + [24]), $2)
	CALL $222(($13 + [8]), ($13 + [24]))
	$4 = CALL $161($0, $1, ($13 + [8]))
	if ( ((*($13 + [8]) & [1]) == 0) ){ goto $label$39 }
	CALL $200(*((($13 + [8]) + [8])))
	
.LABEL $label$39
	$6 = [0]
	if ( ($4 == 0) ){ goto $label$40 }
	CALL $158($0)
	$6 = [1]
	
.LABEL $label$40
	if ( ((*($13 + [24]) & [1]) == 0) ){ goto $label$41 }
	CALL $200(*($5))
	
.LABEL $label$41
	if ( $6 ){ goto $label$37 }
	$2 = ($2 + [12])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$38 }
	$5 = [1]
	goto $label$36 
	
.LABEL $label$37
	$5 = [0]
	
.LABEL $label$36
	$2 = *($13 + [56])
	
.LABEL $label$35
	if ( ($2 == 0) ){ goto $label$42 }
	$6 = *($13 + [60])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$44 }
	$0 = ([0] - $2)
	$6 = ($6 + [-12])
	
.LOOP $label$45:
	if ( ((*($6) & [1]) == 0) ){ goto $label$46 }
	CALL $200(*(($6 + [8])))
	
.LABEL $label$46
	$6 = ($6 + [-12])
	if ( ((int_32)($6 + $0) != (int_32)[-12]) ){ goto $label$45 }
	$6 = *($13 + [56])
	goto $label$43 
	
.LABEL $label$44
	$6 = $2
	
.LABEL $label$43
	*($13 + [60]) = $2
	CALL $200($6)
	
.LABEL $label$42
	$4 = [99999]
	if ( ($5 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	$4 = $12
	
.LABEL $label$22
	$0 = *($13 + [96])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$21
	$3 = ($13 + [100])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$48 }
	
.LOOP $label$49:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$50 }
	if ( ((*($2 + [44]) & [1]) == 0) ){ goto $label$51 }
	CALL $200(*(($2 + [52])))
	
.LABEL $label$51
	CALL $200($2)
	
.LABEL $label$50
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$49 }
	$6 = *(($13 + [96]))
	goto $label$47 
	
.LABEL $label$48
	$6 = $0
	
.LABEL $label$47
	*($3) = $0
	CALL $200($6)
	
.LABEL $label$1
	CALL $162(($13 + [112]))
	*([0] + [4]) = ($13 + [176])
	return $4
}

void .FUNC $128 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11)
{
	CALL prints($0)
	CALL printui(*($1))
	CALL prints($2)
	CALL prints($3)
	CALL printui(*($4))
	CALL prints($5)
	CALL prints($6)
	CALL $104($7)
	CALL prints($8)
	CALL prints($9)
	$9 = *($10)
	$8 = ($9 & [1])
	CALL prints_l(( *($10 + [8]) ? ($10 + [1]) : $8 ), ( *($10 + [4]) ? uint_32($9 >> [1]) : $8 ))
	CALL prints($11)
}

int_32 .FUNC _ZN6randomC2Ev (int_32 $0)
{
	return $0
}

int_32 .FUNC _ZN6randomD2Ev (int_32 $0)
{
	return $0
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	$5 = *(*($0 + [4]))
	*($1) = *($5)
	$2 = *($0)
	$3 = ($1 + [8])
	CALL $203($3, ($5 + [8]))
	$5 = *($1 + [8])
	$4 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($4 + [8])
	$6 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($5)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8) = $7
	*($8 + [8]) = ($7 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [352])
	CALL memcpy($7, $1, [8])
	*($8 + [4]) = ($7 + [8])
	CALL $72($8, $3)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)7235159537265672192, *(*($0 + [8])), (int_64)7235159537265672192, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( ((uint_64)*($2 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$5 }
	*(($2 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $122 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [288])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $198([40])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [24]) = $1
	CALL $123(($7 + [16]), $3)
	*($7 + [32]) = $3
	*($7 + [16]) = (int_64)7235159537265672192
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = (int_64)7235159537265672192
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $124(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL $200(*(($1 + [16])))
	
.LABEL $label$4
	CALL $200($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $121 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [416])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [464])
	$3 = *($3)
	*($1) = *($3)
	$4 = ($1 + [8])
	CALL $203($4, ($3 + [8]))
	CALL eosio_assert([1], [528])
	$3 = *($1 + [8])
	$5 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [8])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8) = $7
	*($8 + [8]) = ($7 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [352])
	CALL memcpy($7, $1, [8])
	*($8 + [4]) = ($7 + [8])
	CALL $72($8, $4)
	CALL db_update_i64(*($1 + [28]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$5 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [592])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [36]) = $4
	*($7 + [32]) = $4
	$6 = ($4 + $5)
	*($7 + [40]) = $6
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$6 = *(($7 + [40]))
	$4 = *($7 + [36])
	
.LABEL $label$7
	*(($5 = CALL $198([40])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)($6 - $4) > (uint_32)[7]), [208])
	CALL memcpy($5, $4, [8])
	*($7 + [36]) = ($4 + [8])
	CALL $86(($7 + [32]), ($5 + [8]))
	*($5 + [28]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)7235159537265672192
	$6 = *($5 + [28])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)7235159537265672192
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $124(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$8
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $200(*(($4 + [16])))
	
.LABEL $label$10
	CALL $200($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
	return $5
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [208])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [208])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [208])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $86(*($1), ($0 + [32]))
}

void .FUNC $125 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $198(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $221($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $200($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $200($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $124 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $198(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $221($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $200(*(($1 + [16])))
	
.LABEL $label$11
	CALL $200($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $200($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC _ZN6random10get_randomEyRNSt3__16vectorIhNS0_9allocatorIhEEEEhNS0_12basic_stringIcNS0_11char_traitsIcEENS2_IcEEEE (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [80])
	*([0] + [4]) = $11
	CALL $222($11, $4)
	CALL _ZN6random7setseedENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, $11)
	if ( ((*($11) & [1]) == 0) ){ goto $label$1 }
	CALL $200(*($11 + [8]))
	
.LABEL $label$1
	if ( ($3 == 0) ){ goto $label$2 }
	$5 = ($0 + [64])
	$4 = ($0 + [96])
	$6 = ($11 + [48])
	$10 = [0]
	$9 = ($0 + [104])
	$0 = ($2 + [4])
	
.LOOP $label$3:
	*((($11 + [16]) + [24])) = *(($5 + [24]))
	*((($11 + [16]) + [16])) = *(($5 + [16]))
	*($11 + [24]) = *(($5 + [8]))
	*($11 + [16]) = *($5)
	*(($6 + [24])) = *(($4 + [24]))
	*(($6 + [16])) = *(($4 + [16]))
	*(($6 + [8])) = *(($4 + [8]))
	*($6) = *($4)
	CALL sha256(($11 + [16]), [64], $4)
	$7 = (CASTING uint_32)(uint_64 ((uint_64)*($9) % (uint_64)(int_64)255))
	*($11 + [16]) = $7
	$8 = *($0)
	if ( ((uint_32)$8 >= (uint_32)*(($2 + [8]))) ){ goto $label$5 }
	*($8) = $7
	*($0) = (*($0) + [1])
	goto $label$4 
	
.LABEL $label$5
	CALL $16($2, ($11 + [16]))
	
.LABEL $label$4
	$10 = ($10 + [1])
	if ( (($10 & [255]) <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($11 + [80])
}

void .FUNC _ZN6random7setseedENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [272])
	*([0] + [4]) = $9
	$2 = CALL transaction_size()
	$3 = CALL malloc($2)
	CALL read_transaction($3, $2)
	CALL sha256($3, $2, ($9 + [112]))
	CALL $222(($9 + [64]), $1)
	CALL $17(($9 + [208]), $0, ($9 + [64]))
	$1 = (($9 + [208]) + [24])
	*(($2 = (($9 + [80]) + [24]))) = *($1)
	$4 = (($9 + [208]) + [16])
	*(($3 = (($9 + [80]) + [16]))) = *($4)
	*($9 + [88]) = *($9 + [216])
	*($9 + [80]) = *($9 + [208])
	if ( ((*($9 + [64]) & [1]) == 0) ){ goto $label$1 }
	CALL $200(*($9 + [72]))
	
.LABEL $label$1
	*(($5 = (($9 + [32]) + [24]))) = *($2)
	*(($2 = (($9 + [32]) + [16]))) = *($3)
	*($9 + [40]) = *($9 + [88])
	*($9 + [32]) = *($9 + [80])
	*(($3 = ($9 + [24]))) = *((($9 + [112]) + [24]))
	*(($6 = ($9 + [16]))) = *((($9 + [112]) + [16]))
	*($9 + [8]) = *($9 + [120])
	*($9) = *($9 + [112])
	*(($7 = (($9 + [176]) + [24]))) = *($3)
	*(($3 = (($9 + [176]) + [16]))) = *($6)
	*($9 + [184]) = *($9 + [8])
	*($9 + [176]) = *($9)
	*(($6 = (($9 + [144]) + [24]))) = *($5)
	*(($5 = (($9 + [144]) + [16]))) = *($2)
	*($9 + [152]) = *($9 + [40])
	*($9 + [144]) = *($9 + [32])
	*(($2 = ($0 + [24]))) = *($6)
	*(($6 = ($0 + [16]))) = *($5)
	*(($5 = ($0 + [8]))) = *($9 + [152])
	*($0) = *($9 + [144])
	*(($8 = ($0 + [56]))) = *($7)
	*(($7 = ($0 + [48]))) = *($3)
	*(($3 = ($0 + [40]))) = *($9 + [184])
	*($0 + [32]) = *($9 + [176])
	*($1) = *($2)
	*($4) = *($6)
	*($9 + [216]) = *($5)
	*($9 + [208]) = *($0)
	*((($9 + [208]) + [56])) = *($8)
	*((($9 + [208]) + [48])) = *($7)
	*((($9 + [208]) + [40])) = *($3)
	*($9 + [240]) = *($0 + [32])
	CALL sha256(($9 + [208]), [64], ($0 + [64]))
	*(($0 + [120])) = *(($0 + [88]))
	*(($0 + [112])) = *(($0 + [80]))
	*(($0 + [104])) = *(($0 + [72]))
	*($0 + [96]) = *($0 + [64])
	*([0] + [4]) = ($9 + [272])
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ($5 - $4)
	$7 = ($3 + [1])
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$2 = (*($0 + [8]) - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $198($6)
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $221($0)
	
.LABEL $label$1
	*(($3 = ($7 + $3))) = *($1)
	$5 = ($5 - $4)
	$1 = ($3 - $5)
	$6 = ($7 + $6)
	$7 = ($3 + [1])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $4, $5)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $200($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [48])
	*([0] + [4]) = $3
	CALL $222($3, $2)
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	CALL $203(($3 + [16]), $3)
	*($3 + [28]) = CALL tapos_block_num()
	*($3 + [32]) = CALL tapos_block_prefix()
	*($3 + [40]) = CALL current_time()
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	CALL $200(*($3 + [8]))
	
.LABEL $label$1
	CALL sha256(($3 + [16]), [32], $0)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $200(*(($3 + [24])))
	
.LABEL $label$2
	*([0] + [4]) = ($3 + [48])
}

void .FUNC _ZN6random4seedE11checksum256S0_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	*($0) = *($1)
	*(($3 = ($0 + [24]))) = *(($1 + [24]))
	*(($4 = ($0 + [16]))) = *(($1 + [16]))
	*(($5 = ($0 + [8]))) = *(($1 + [8]))
	*(($1 = ($0 + [56]))) = *(($2 + [24]))
	*(($6 = ($0 + [48]))) = *(($2 + [16]))
	*(($7 = ($0 + [40]))) = *(($2 + [8]))
	*($0 + [32]) = *($2)
	*(($8 + [24])) = *($3)
	*(($8 + [16])) = *($4)
	*($8 + [8]) = *($5)
	*($8) = *($0)
	*(($8 + [56])) = *($1)
	*(($8 + [48])) = *($6)
	*(($8 + [40])) = *($7)
	*($8 + [32]) = *($0 + [32])
	CALL sha256($8, [64], ($0 + [64]))
	*(($0 + [120])) = *(($0 + [88]))
	*(($0 + [112])) = *(($0 + [80]))
	*(($0 + [104])) = *(($0 + [72]))
	*($0 + [96]) = *($0 + [64])
	*([0] + [4]) = ($8 + [64])
}

void .FUNC _ZNK6random7mixseedER11checksum256S1_S1_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*($4) = *($1)
	*($4 + [8]) = *(($1 + [8]))
	*(($4 + [56])) = *(($2 + [24]))
	*(($4 + [48])) = *(($2 + [16]))
	*(($4 + [40])) = *(($2 + [8]))
	*($4 + [32]) = *($2)
	CALL sha256($4, [64], $3)
	*([0] + [4]) = ($4 + [64])
}

int_64 .FUNC _ZN6random9generatorEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($3 + [24])) = *(($0 + [88]))
	*(($3 + [16])) = *(($0 + [80]))
	*($3) = *($0 + [64])
	*($3 + [8]) = *(($0 + [72]))
	*(($3 + [56])) = *(($0 + [120]))
	*(($3 + [48])) = *(($0 + [112]))
	$2 = ($0 + [104])
	*(($3 + [40])) = *($2)
	*($3 + [32]) = *($0 + [96])
	CALL sha256($3, [64], ($0 + [96]))
	if ( (int_64)($1 == 0) ){ goto $label$2 }
	$1 = ((uint_64)*($2) % (uint_64)$1)
	goto $label$1 
	
.LABEL $label$2
	$1 = (int_64)0
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [64])
	return $1
}

int_64 .FUNC _ZNK6random3genER11checksum256y (int_32 $0, int_32 $1, int_64 $2)
{
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	return ((uint_64)*($1 + [8]) % (uint_64)$2)
	
.LABEL $label$1
	return (int_64)0
}

void .FUNC $185 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)int_32(($8 - $7) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$4 = int_32(($7 - $5) >> [4])
	$7 = ($4 + $1)
	if ( ((uint_32)$7 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$8 = ($8 - $5)
	if ( ((uint_32)int_32($8 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($8 >> [3])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$8 = CALL $198(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $7
	$8 = $1
	
.LOOP $label$7:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$7 }
	*(($0 + [4])) = ($7 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $221($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$2 = ($8 + ($6 << [4]))
	$8 = ($8 + ($4 << [4]))
	$6 = $8
	$7 = $1
	
.LOOP $label$8:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$3 = ($8 + ($1 << [4]))
	$6 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$10 }
	$4 = ([0] - $6)
	$6 = ($7 + [-16])
	
.LOOP $label$11:
	*(($8 + [-16])) = *($6)
	*(($7 = ($8 + [-12]))) = (int_64)0
	*(($1 = ($8 + [-4]))) = [0]
	$5 = ($6 + [4])
	*($7) = *($5)
	*(($8 + [-8])) = *(($6 + [8]))
	$7 = ($6 + [12])
	*($1) = *($7)
	*($7) = [0]
	*($5) = (int_64)0
	$8 = ($8 + [-16])
	$6 = ($6 + [-16])
	if ( ((int_32)($6 + $4) != (int_32)[-16]) ){ goto $label$11 }
	$6 = *(($0 + [4]))
	$1 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$1 = $6
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$12 }
	$7 = ([0] - $1)
	$6 = ($6 + [-12])
	
.LOOP $label$13:
	$8 = *($6)
	if ( ($8 == 0) ){ goto $label$14 }
	*(($6 + [4])) = $8
	CALL $200($8)
	
.LABEL $label$14
	$6 = ($6 + [-16])
	if ( ((int_32)($6 + $7) != (int_32)[-12]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$15 }
	CALL $200($1)
	
.LABEL $label$15
	(unreachable)
}

int_64 .FUNC _ZN6random10get_randomEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	$2 = CALL strlen([144])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($5) = ($2 << [1])
	$4 = ($5 | [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $198($3)
	*($5) = ($3 | [1])
	*($5 + [8]) = $4
	*($5 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($4, [144], $2)
	
.LABEL $label$2
	*(($4 + $2)) = [0]
	CALL _ZN6random7setseedENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$5 }
	CALL $200(*($5 + [8]))
	
.LABEL $label$5
	*(($5 + [40])) = *(($0 + [88]))
	*(($5 + [32])) = *(($0 + [80]))
	*($5 + [16]) = *($0 + [64])
	*($5 + [24]) = *(($0 + [72]))
	*(($5 + [72])) = *(($0 + [120]))
	*(($5 + [64])) = *(($0 + [112]))
	$2 = ($0 + [104])
	*(($5 + [56])) = *($2)
	*($5 + [48]) = *($0 + [96])
	CALL sha256(($5 + [16]), [64], ($0 + [96]))
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	$1 = ((uint_64)*($2) % (uint_64)$1)
	goto $label$6 
	
.LABEL $label$7
	$1 = (int_64)0
	
.LABEL $label$6
	*([0] + [4]) = ($5 + [80])
	return $1
	
.LABEL $label$1
	CALL $202($5)
	return (unreachable)
}

void .FUNC _ZNK6random12get_sys_seedEv (int_32 $0, int_32 $1)
{
	*($0) = *($1)
	*(($0 + [24])) = *(($1 + [24]))
	*(($0 + [16])) = *(($1 + [16]))
	*(($0 + [8])) = *(($1 + [8]))
}

void .FUNC $184 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $198(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $221($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$11 }
	CALL $200(*(($1 + [52])))
	
.LABEL $label$11
	CALL $200($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $200($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $187 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [2064])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $188($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [208])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [208])
	CALL memcpy(($7 + [8]), *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $218 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $198($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $200($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $186 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)((int_32)($8 - $7) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($7 - $4) / (int_32)[40])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$3 }
	$7 = [107374182]
	$8 = ((int_32)($8 - $4) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$6 }
	$7 = ($8 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$8 = CALL $198(((int_32)$7 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*($7) = (int_64)0
	*($7 + [16 align=4]) = (int_64)0
	*(($7 + [8])) = (int_64)0
	*(($7 + [24])) = (int_64)0
	*(($7 + [32])) = (int_64)0
	$7 = (*($8) + [40])
	*($8) = $7
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$8 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $221($0)
	
.LABEL $label$2
	$2 = ($8 + ((int_32)$7 * (int_32)[40]))
	$8 = ($8 + ((int_32)$5 * (int_32)[40]))
	$7 = $8
	
.LOOP $label$8:
	*($7) = (int_64)0
	*($7 + [16 align=4]) = (int_64)0
	*(($7 + [8])) = (int_64)0
	*(($7 + [24])) = (int_64)0
	*(($7 + [32])) = (int_64)0
	$7 = ($7 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$10 }
	$3 = ([0] - $4)
	$1 = ($1 + [-20])
	
.LOOP $label$11:
	*(($8 + [-32])) = *(($1 + [-12]))
	*(($8 + [-40])) = *(($1 + [-20]))
	*(($4 = ($8 + [-24]))) = (int_64)0
	*(($5 = ($8 + [-16]))) = [0]
	$6 = ($1 + [-4])
	*($4) = *($6)
	*(($8 + [-20])) = *($1)
	$4 = ($1 + [4])
	*($5) = *($4)
	*($4) = [0]
	*(($4 = ($8 + [-12]))) = (int_64)0
	*($6) = (int_64)0
	*(($5 = ($8 + [-4]))) = [0]
	$6 = ($1 + [8])
	*($4) = *($6)
	*(($8 + [-8])) = *(($1 + [12]))
	$4 = ($1 + [16])
	*($5) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$8 = ($8 + [-40])
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $3) != (int_32)[-20]) ){ goto $label$11 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$5 = $4
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $7
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$12 }
	$1 = ([0] - $5)
	$7 = ($4 + [-24])
	
.LOOP $label$13:
	$8 = *(($7 + [12]))
	if ( ($8 == 0) ){ goto $label$14 }
	*(($7 + [16])) = $8
	CALL $200($8)
	
.LABEL $label$14
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$15 }
	*(($7 + [4])) = $8
	CALL $200($8)
	
.LABEL $label$15
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $1) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $200($5)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $180 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $198(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $221($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $200($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $200($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [308]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [832])
	$3 = *($0 + [24])
	$6 = ($0 + [28])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1 + [48])
	$7 = ([0] - $3)
	$5 = ($4 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($5) + [48]) == (int_64)$2) ){ goto $label$1 }
	$4 = $5
	$8 = ($5 + [-24])
	$5 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [896])
	$8 = ($4 + [-24])
	$5 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	$3 = ([0] - $5)
	$5 = $8
	
.LOOP $label$5:
	$8 = ($5 + [24])
	$7 = *($8)
	*($8) = [0]
	$4 = *($5)
	*($5) = $7
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [296]) & [1]) == 0) ){ goto $label$7 }
	CALL $200(*(($4 + [304])))
	
.LABEL $label$7
	$7 = *($4 + [232])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [236])) = $7
	CALL $200($7)
	
.LABEL $label$8
	$7 = *($4 + [220])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [224])) = $7
	CALL $200($7)
	
.LABEL $label$9
	$7 = *($4 + [208])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [212])) = $7
	CALL $200($7)
	
.LABEL $label$10
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$11 }
	CALL $200(*(($4 + [72])))
	
.LABEL $label$11
	CALL $200($4)
	
.LABEL $label$6
	*(($5 + [16])) = *(($5 + [40]))
	*(($5 + [8])) = *(($5 + [32]))
	$5 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$12:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((*($5 + [296]) & [1]) == 0) ){ goto $label$14 }
	CALL $200(*(($5 + [304])))
	
.LABEL $label$14
	$7 = *($5 + [232])
	if ( ($7 == 0) ){ goto $label$15 }
	*(($5 + [236])) = $7
	CALL $200($7)
	
.LABEL $label$15
	$7 = *($5 + [220])
	if ( ($7 == 0) ){ goto $label$16 }
	*(($5 + [224])) = $7
	CALL $200($7)
	
.LABEL $label$16
	$7 = *($5 + [208])
	if ( ($7 == 0) ){ goto $label$17 }
	*(($5 + [212])) = $7
	CALL $200($7)
	
.LABEL $label$17
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$18 }
	CALL $200(*(($5 + [72])))
	
.LABEL $label$18
	CALL $200($5)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [312])))
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [592])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $198([48])) + [32]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[15]), [208])
	CALL memcpy($6, $7, [16])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[16]), [208])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [36]) = $1
	*($8 + [40]) = $6
	*($8 + [24]) = *(($6 + [8]))
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [36])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [40]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $125(($0 + [24]), ($8 + [40]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [40])
	*($8 + [40]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $200($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [640])
	*([0] + [4]) = $8
	*(($8 + [316])) = *(($1 + [28]))
	*(($4 = (($8 + [304]) + [8]))) = *(($1 + [24]))
	*($8 + [304]) = *($1 + [16])
	*($8 + [308]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	*(($5 = (($8 + [288]) + [8]))) = *(($1 + [40]))
	*($8 + [288]) = *($1 + [32])
	CALL $222(($8 + [272]), ($1 + [48]))
	*(($6 = (($8 + [240]) + [24]))) = *(($1 + [88]))
	*(($7 = (($8 + [240]) + [16]))) = *(($1 + [80]))
	*($8 + [248]) = *(($1 + [72]))
	*($8 + [240]) = *($1 + [64])
	CALL memcpy(($8 + [174]), ($1 + [96]), [66])
	CALL $222(($8 + [160]), ($1 + [164]))
	CALL $222(($8 + [144]), ($1 + [176]))
	CALL memcpy(($8 + [384]), ($8 + [174]), [66])
	*((($8 + [352]) + [24])) = *($6)
	*((($8 + [352]) + [16])) = *($7)
	*($8 + [360]) = *($8 + [248])
	*($8 + [352]) = *($8 + [240])
	*((($8 + [336]) + [8])) = *($5)
	*($8 + [336]) = *($8 + [288])
	*((($8 + [320]) + [8])) = *($4)
	*($8 + [320]) = *($8 + [304])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($8 + [624]) + [8]))) = *((($8 + [320]) + [8]))
	*(($5 = (($8 + [608]) + [8]))) = *((($8 + [336]) + [8]))
	*($8 + [624]) = *($8 + [320])
	*($8 + [608]) = *($8 + [336])
	CALL $222(($8 + [592]), ($8 + [272]))
	*(($6 = (($8 + [560]) + [24]))) = *((($8 + [352]) + [24]))
	*(($7 = (($8 + [560]) + [16]))) = *((($8 + [352]) + [16]))
	*($8 + [568]) = *($8 + [360])
	*($8 + [560]) = *($8 + [352])
	CALL memcpy(($8 + [488]), ($8 + [384]), [66])
	CALL $222(($8 + [472]), ($8 + [160]))
	CALL $222(($8 + [456]), ($8 + [144]))
	*((($8 + [128]) + [8])) = *($4)
	*((($8 + [112]) + [8])) = *($5)
	*($8 + [128]) = *($8 + [624])
	*($8 + [112]) = *($8 + [608])
	*((($8 + [80]) + [24])) = *($6)
	*((($8 + [80]) + [16])) = *($7)
	*($8 + [88]) = *($8 + [568])
	*($8 + [80]) = *($8 + [560])
	CALL memcpy(($8 + [14]), ($8 + [488]), [66])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 ($8 + [128])), (int_32 ($8 + [112])), (int_32 ($8 + [592])), (int_32 ($8 + [80])), (int_32 ($8 + [14])), (int_32 ($8 + [472])), (int_32 ($8 + [456])), (int_32 $1))
	if ( ((*($8 + [456]) & [1]) == 0) ){ goto $label$2 }
	CALL $200(*($8 + [464]))
	
.LABEL $label$2
	if ( ((*($8 + [472]) & [1]) == 0) ){ goto $label$3 }
	CALL $200(*($8 + [480]))
	
.LABEL $label$3
	if ( ((*($8 + [592]) & [1]) == 0) ){ goto $label$4 }
	CALL $200(*($8 + [600]))
	
.LABEL $label$4
	if ( ((*($8 + [144]) & [1]) == 0) ){ goto $label$5 }
	CALL $200(*($8 + [152]))
	
.LABEL $label$5
	if ( ((*($8 + [160]) & [1]) == 0) ){ goto $label$6 }
	CALL $200(*($8 + [168]))
	
.LABEL $label$6
	if ( ((*($8 + [272]) & [1]) == 0) ){ goto $label$7 }
	CALL $200(*($8 + [280]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [640])
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [272])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [208])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [208])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [208])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [208])
	CALL memcpy(($3 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($3 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $86(*($1), ($3 + [48]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [208])
	CALL memcpy(($3 + [64]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	*($4) = *($1)
	*($4 + [12]) = ($3 + [97])
	*($4 + [8]) = ($3 + [96])
	*($4 + [16]) = ($3 + [98])
	*($4 + [20]) = ($3 + [99])
	*($4 + [24]) = ($3 + [100])
	*($4 + [28]) = ($3 + [101])
	*($4 + [32]) = ($3 + [102])
	*($4 + [36]) = ($3 + [103])
	*($4 + [40]) = ($3 + [104])
	*($4 + [44]) = ($3 + [105])
	*($4 + [48]) = ($3 + [106])
	*($4 + [52]) = ($3 + [107])
	*($4 + [56]) = ($3 + [108])
	*($4 + [60]) = ($3 + [109])
	*($4 + [64]) = ($3 + [110])
	*($4 + [68]) = ($3 + [111])
	*($4 + [72]) = ($3 + [112])
	*($4 + [76]) = ($3 + [113])
	*($4 + [80]) = ($3 + [114])
	*($4 + [84]) = ($3 + [115])
	*($4 + [88]) = ($3 + [116])
	*($4 + [92]) = ($3 + [117])
	*($4 + [96]) = ($3 + [118])
	*($4 + [100]) = ($3 + [119])
	*($4 + [104]) = ($3 + [120])
	*($4 + [108]) = ($3 + [121])
	*($4 + [112]) = ($3 + [122])
	*($4 + [116]) = ($3 + [123])
	*($4 + [120]) = ($3 + [124])
	*($4 + [124]) = ($3 + [125])
	*($4 + [128]) = ($3 + [126])
	*($4 + [132]) = ($3 + [127])
	*($4 + [136]) = ($3 + [128])
	*($4 + [140]) = ($3 + [129])
	*($4 + [144]) = ($3 + [130])
	*($4 + [148]) = ($3 + [131])
	*($4 + [152]) = ($3 + [132])
	*($4 + [156]) = ($3 + [133])
	*($4 + [160]) = ($3 + [134])
	*($4 + [164]) = ($3 + [135])
	*($4 + [168]) = ($3 + [136])
	*($4 + [172]) = ($3 + [137])
	*($4 + [176]) = ($3 + [138])
	*($4 + [180]) = ($3 + [139])
	*($4 + [184]) = ($3 + [140])
	*($4 + [188]) = ($3 + [141])
	*($4 + [192]) = ($3 + [142])
	*($4 + [196]) = ($3 + [143])
	*($4 + [200]) = ($3 + [144])
	*($4 + [204]) = ($3 + [145])
	*($4 + [208]) = ($3 + [146])
	*($4 + [212]) = ($3 + [147])
	*($4 + [216]) = ($3 + [148])
	*($4 + [220]) = ($3 + [149])
	*($4 + [224]) = ($3 + [150])
	*($4 + [228]) = ($3 + [151])
	*($4 + [232]) = ($3 + [152])
	*($4 + [236]) = ($3 + [153])
	*($4 + [240]) = ($3 + [154])
	*($4 + [244]) = ($3 + [155])
	*($4 + [248]) = ($3 + [156])
	*($4 + [252]) = ($3 + [157])
	*($4 + [256]) = ($3 + [158])
	*($4 + [260]) = ($3 + [159])
	*($4 + [264]) = ($3 + [160])
	*($4 + [268]) = ($3 + [161])
	CALL $44(($4 + [8]), $4)
	CALL $86(*($1), ($3 + [164]))
	CALL $86(*($1), ($3 + [176]))
	*([0] + [4]) = ($4 + [272])
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $198(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $221($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [104]) & [1]) == 0) ){ goto $label$11 }
	CALL $200(*(($1 + [112])))
	
.LABEL $label$11
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL $200(*(($1 + [24])))
	
.LABEL $label$12
	CALL $200($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $200($6)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $113 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [976])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [1040])
	*(($0 + [40])) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [976])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [1040])
	*(($0 + [56])) = [0]
	*($0 + [48 align=4]) = (int_64)0
	*(($0 + [92])) = [0]
	*(($0 + [88])) = [0]
	*(($0 + [84])) = [0]
	*(($0 + [80])) = [0]
	*(($0 + [76])) = [0]
	*(($0 + [72])) = [0]
	*(($0 + [68])) = [0]
	*($0 + [64]) = [0]
	CALL memset(($0 + [96]), [0], [66])
	*($0 + [164 align=4]) = (int_64)0
	*(($0 + [172])) = (int_64)0
	*(($0 + [180])) = (int_64)0
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $115(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $110 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	$2 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	CALL eosio_assert([1], [976])
	$1 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [1040])
	*(($0 + [24])) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [56]) = (int_64)0
	CALL $206(($0 + [64]), [144])
	CALL memset(($0 + [76]), [0], [66])
	CALL memset(($0 + [144]), [0], [32])
	CALL memset(($0 + [176]), [0], [32])
	*($0 + [244]) = [0]
	*(($0 + [212])) = *($0 + [208])
	*(($0 + [224])) = *($0 + [220])
	*(($0 + [236])) = *($0 + [232])
	*($0 + [245]) = [0]
	*($0 + [246]) = [0]
	*($0 + [247]) = [0]
	CALL eosio_assert([1], [976])
	$1 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [1040])
	*(($0 + [256])) = (int_64)1397703940
	*($0 + [248]) = (int_64)0
	CALL eosio_assert([1], [976])
	$1 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [1040])
	*(($0 + [272])) = (int_64)1397703940
	*($0 + [264]) = (int_64)0
	CALL eosio_assert([1], [976])
	$1 = (int_64)4541264
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [1040])
	*(($0 + [288])) = (int_64)1162563588
	*($0 + [280]) = (int_64)0
	CALL $206(($0 + [296]), [144])
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $86($0, ($1 + [104]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [208])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $86($0, ($1 + [16]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [208])
	CALL memcpy(($1 + [32]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC wctomb (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL wcrtomb($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [832])
	$4 = *($0 + [24])
	$6 = ($0 + [28])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$3 = *(($1 + [8]))
	$2 = *($1)
	$7 = ([0] - $4)
	$9 = ($8 + [-24])
	
.LOOP $label$2:
	$5 = *($9)
	if ( (int_64)(((int_64)((int_64)*($5) ^ (int_64)$2) | (int_64)((int_64)*(($5 + [8])) ^ (int_64)$3)) == 0) ){ goto $label$1 }
	$8 = $9
	$5 = ($9 + [-24])
	$9 = $5
	if ( ((int_32)($5 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)$4), [896])
	$9 = ($8 + [-24])
	$5 = *($6)
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$4 }
	$4 = ([0] - $5)
	$8 = $9
	
.LOOP $label$5:
	$9 = ($8 + [24])
	$7 = *($9)
	*($9) = [0]
	$5 = *($8)
	*($8) = $7
	if ( ($5 == 0) ){ goto $label$6 }
	CALL $200($5)
	
.LABEL $label$6
	*(($8 + [16])) = *(($8 + [40]))
	*(($8 + [8])) = *(($8 + [32]))
	$8 = $9
	if ( ((int_32)($9 + $4) != (int_32)[-24]) ){ goto $label$5 }
	$8 = *(($0 + [28]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$8 = ($8 + [-24])
	$5 = *($8)
	*($8) = [0]
	if ( ($5 == 0) ){ goto $label$8 }
	CALL $200($5)
	
.LABEL $label$8
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC $119 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$0), [224])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $120($0, $3)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$0), [224])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [368])
	CALL $121($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $122($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$5 = *($1)
	$4 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [208])
	CALL memcpy($6, $4, [8])
	CALL eosio_assert(((int_32)($1 & [-4]) != (int_32)[8]), [208])
	$7 = ($6 + [8])
	CALL memcpy($7, ($4 + [8]), [4])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($4)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($7)
	$3 = *($6)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 $4), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN6gamenn10cleantableEym (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	*([0] + [4]) = $11
	CALL require_auth(*($0))
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [2432]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)9) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$1) ){ goto $label$8 }
	$4 = ($0 + [8])
	$6 = [0]
	$3 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)3617214760481587200, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $45($4, $3)
	
.LABEL $label$9
	$0 = [-1]
	
.LOOP $label$10:
	if ( ($6 == 0) ){ goto $label$7 }
	CALL eosio_assert([1], [704])
	CALL eosio_assert([1], [752])
	$3 = [0]
	$5 = CALL db_next_i64(*($6 + [120]), ($11 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$11 }
	$3 = CALL $45($4, $5)
	
.LABEL $label$11
	CALL $49($4, $6)
	$6 = $3
	$0 = ($0 + [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$10 }
	goto $label$7 
	
.LABEL $label$8
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [2448]
	$9 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$8 > (uint_64)(int_64)8) ){ goto $label$17 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$3 = ($3 + [165])
	goto $label$15 
	
.LABEL $label$17
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$13
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$12 }
	if ( ((int_64)$9 != (int_64)$1) ){ goto $label$18 }
	$4 = ($0 + [48])
	$6 = [0]
	$3 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)7035937929554296832, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$19 }
	$6 = CALL $57($4, $3)
	
.LABEL $label$19
	$0 = [-1]
	
.LOOP $label$20:
	if ( ($6 == 0) ){ goto $label$7 }
	CALL eosio_assert([1], [704])
	CALL eosio_assert([1], [752])
	$3 = [0]
	$5 = CALL db_next_i64(*($6 + [312]), ($11 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$21 }
	$3 = CALL $57($4, $5)
	
.LABEL $label$21
	CALL $116($4, $6)
	$6 = $3
	$0 = ($0 + [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$20 }
	goto $label$7 
	
.LABEL $label$18
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [2464]
	$9 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$8 > (uint_64)(int_64)8) ){ goto $label$27 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$3 = ($3 + [165])
	goto $label$25 
	
.LABEL $label$27
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$23
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$22 }
	if ( ((int_64)$9 != (int_64)$1) ){ goto $label$28 }
	$4 = ($0 + [208])
	$6 = [0]
	$3 = CALL db_lowerbound_i64(*($0 + [208]), *(($0 + [216])), (int_64)-4060986516896743424, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$29 }
	$6 = CALL $117($4, $3)
	
.LABEL $label$29
	$0 = [-1]
	
.LOOP $label$30:
	if ( ($6 == 0) ){ goto $label$7 }
	CALL eosio_assert([1], [704])
	CALL eosio_assert([1], [752])
	$3 = [0]
	$5 = CALL db_next_i64(*($6 + [36]), ($11 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$31 }
	$3 = CALL $117($4, $5)
	
.LABEL $label$31
	CALL $118($4, $6)
	$6 = $3
	$0 = ($0 + [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$30 }
	goto $label$7 
	
.LABEL $label$28
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [2480]
	$9 = (int_64)0
	
.LOOP $label$32:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$37 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$3 = ($3 + [165])
	goto $label$35 
	
.LABEL $label$37
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$34
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$33
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$32 }
	if ( ((int_64)$9 != (int_64)$1) ){ goto $label$7 }
	*(($6 = ($11 + [24]))) = [0]
	*($11 + [16]) = (int_64)0
	*($11 + [8]) = (int_64)0
	CALL $206(($11 + [16]), [2496])
	CALL $119(($0 + [168]), ($11 + [8]), *($0))
	if ( ((*($11 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $200(*($6))
	
.LABEL $label$7
	*([0] + [4]) = ($11 + [32])
}

int_32 .FUNC strerror (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL __lctrans($3, *([0] + [20]))
	$2 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($2 + [13040])) == (int_32)$0) ){ goto $label$4 }
	$1 = [87]
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[87]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = [13136]
	
.LOOP $label$6:
	$0 = *($2)
	$3 = ($2 + [1])
	$2 = $3
	if ( $0 ){ goto $label$6 }
	$2 = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [13136]
	return .LABEL $label$1
}

void .FUNC _ZNK6random9get_mixedEv (int_32 $0, int_32 $1)
{
	*($0) = *($1 + [64])
	*(($0 + [24])) = *(($1 + [88]))
	*(($0 + [16])) = *(($1 + [80]))
	*(($0 + [8])) = *(($1 + [72]))
}

void .FUNC _ZNK6random13get_user_seedEv (int_32 $0, int_32 $1)
{
	*($0) = *($1 + [32])
	*(($0 + [24])) = *(($1 + [56]))
	*(($0 + [16])) = *(($1 + [48]))
	*(($0 + [8])) = *(($1 + [40]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [512])
	*([0] + [4]) = $9
	*(($9 + [128])) = $0
	*(($9 + [136])) = (int_64)-1
	$6 = (int_64)0
	*(($9 + [144])) = (int_64)0
	*(($9 + [152])) = [0]
	*($9 + [120]) = $0
	*($9 + [112]) = $0
	*($9 + [160]) = $0
	*(($9 + [168])) = $0
	*(($9 + [176])) = (int_64)-1
	*(($9 + [184])) = [0]
	*(($9 + [188])) = [0]
	*(($9 + [192])) = [0]
	*($9 + [200]) = $0
	*(($9 + [208])) = $0
	*(($9 + [216])) = (int_64)-1
	*(($9 + [224])) = [0]
	*(($9 + [228])) = [0]
	*(($9 + [232])) = [0]
	*($9 + [240]) = $0
	*(($9 + [248])) = $0
	*(($9 + [256])) = (int_64)-1
	*(($9 + [264])) = [0]
	*(($9 + [268])) = [0]
	*(($9 + [272])) = [0]
	*($9 + [280]) = $0
	*(($9 + [288])) = $0
	*(($9 + [296])) = (int_64)-1
	*(($9 + [304])) = [0]
	*(($9 + [308])) = [0]
	*(($9 + [312])) = [0]
	*($9 + [320]) = $0
	*(($9 + [328])) = $0
	*(($9 + [336])) = (int_64)-1
	*(($9 + [344])) = [0]
	*(($9 + [348])) = [0]
	*(($9 + [352])) = [0]
	*($9 + [496]) = $1
	$5 = (int_64)59
	$4 = [160]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$10 }
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [176]
	$7 = (int_64)0
	
.LOOP $label$11:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$12 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$3 = ($3 + [165])
	goto $label$13 
	
.LABEL $label$14
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$12
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$11 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$9 }
	
.LABEL $label$10
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [192]
	$7 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$20 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$3 = ($3 + [165])
	goto $label$18 
	
.LABEL $label$20
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$16
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$15 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$9 }
	*($9 + [108]) = [0]
	*($9 + [104]) = [1]
	*($9) = *($9 + [104])
	CALL $25(($9 + [112]), $9)
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $38(($9 + [112]))
	*([0] + [4]) = ($9 + [512])
	return (unreachable)
	
.LABEL $label$7
	if ( ((int_64)$2 > (int_64)-3075276117956886529) ){ goto $label$26 }
	if ( ((int_64)$2 == (int_64)-4994130327835885568) ){ goto $label$25 }
	if ( ((int_64)$2 == (int_64)-4992623624440512512) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)-4416989690754760704) ){ goto $label$21 }
	*($9 + [60]) = [0]
	*($9 + [56]) = [2]
	*($9 + [48 align=4]) = *($9 + [56])
	CALL $37(($9 + [112]), ($9 + [48]))
	goto $label$21 
	
.LABEL $label$26
	if ( ((int_64)$2 == (int_64)-3075276117956886528) ){ goto $label$23 }
	if ( ((int_64)$2 == (int_64)4923676723943997440) ){ goto $label$22 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$21 }
	*($9 + [100]) = [0]
	*($9 + [96]) = [3]
	*($9 + [8 align=4]) = *($9 + [96])
	CALL $27(($9 + [112]), ($9 + [8]))
	goto $label$21 
	
.LABEL $label$25
	*($9 + [76]) = [0]
	*($9 + [72]) = [4]
	*($9 + [32 align=4]) = *($9 + [72])
	CALL $33(($9 + [112]), ($9 + [32]))
	goto $label$21 
	
.LABEL $label$24
	*($9 + [84]) = [0]
	*($9 + [80]) = [5]
	*($9 + [24 align=4]) = *($9 + [80])
	CALL $31(($9 + [112]), ($9 + [24]))
	goto $label$21 
	
.LABEL $label$23
	*($9 + [68]) = [0]
	*($9 + [64]) = [6]
	*($9 + [40 align=4]) = *($9 + [64])
	CALL $35(($9 + [112]), ($9 + [40]))
	goto $label$21 
	
.LABEL $label$22
	*($9 + [92]) = [0]
	*($9 + [88]) = [7]
	*($9 + [16 align=4]) = *($9 + [88])
	CALL $29(($9 + [112]), ($9 + [16]))
	
.LABEL $label$21
	CALL eosio_exit([0])
}

void .FUNC _ZNK6random8get_seedEv (int_32 $0, int_32 $1)
{
	*($0) = *($1 + [96])
	*(($0 + [24])) = *(($1 + [120]))
	*(($0 + [16])) = *(($1 + [112]))
	*(($0 + [8])) = *(($1 + [104]))
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [976])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [1040])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $126(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $127(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $200(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC _ZN6gamenn8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [256])
	*([0] + [4]) = $17
	*($17 + [184]) = $1
	*($17 + [176]) = $2
	CALL $128([2592], ($17 + [184]), [2176], [2608], ($17 + [176]), [2176], [2624], $3, [2176], [2640], $4, [2176])
	$5 = *($3 + [8])
	$8 = *($17 + [176])
	$7 = *($0)
	$6 = *($17 + [184])
	if ( ((int_64)$6 == (int_64)$7) ){ goto $label$7 }
	if ( ((int_64)$8 != (int_64)$7) ){ goto $label$7 }
	$2 = (int_64)0
	$15 = (int_64)59
	$14 = [2656]
	$16 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$2 > (uint_64)(int_64)4) ){ goto $label$13 }
	$9 = *($14)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$9 = ($9 + [165])
	goto $label$11 
	
.LABEL $label$13
	$1 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$9
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$1 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$8 }
	if ( ((int_64)$6 == (int_64)$16) ){ goto $label$14 }
	$2 = (int_64)0
	$15 = (int_64)59
	$14 = [160]
	$16 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$20 }
	$9 = *($14)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$9 = ($9 + [165])
	goto $label$18 
	
.LABEL $label$20
	$1 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$16
	$14 = ($14 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$16 = ((int_64)$1 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$15 }
	if ( ((int_64)$6 == (int_64)$16) ){ goto $label$14 }
	$2 = (int_64)0
	$1 = (int_64)59
	$14 = [624]
	$16 = (int_64)0
	
.LOOP $label$21:
	$15 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$22 }
	$9 = *($14)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$9 = ($9 + [165])
	goto $label$23 
	
.LABEL $label$24
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$22
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$21 }
	if ( ((int_64)$6 == (int_64)$16) ){ goto $label$14 }
	$2 = (int_64)0
	$1 = (int_64)59
	$14 = [2672]
	$16 = (int_64)0
	
.LOOP $label$25:
	$15 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$26 }
	$9 = *($14)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$9 = ($9 + [165])
	goto $label$27 
	
.LABEL $label$28
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$26
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$25 }
	if ( ((int_64)$6 == (int_64)$16) ){ goto $label$14 }
	$2 = (int_64)0
	$1 = (int_64)59
	$14 = [1792]
	$16 = (int_64)0
	
.LOOP $label$29:
	$15 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$30 }
	$9 = *($14)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$9 = ($9 + [165])
	goto $label$31 
	
.LABEL $label$32
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$30
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$6 != (int_64)$16) ){ goto $label$2 }
	
.LABEL $label$14
	$2 = (int_64)0
	$1 = (int_64)59
	$14 = [624]
	$16 = (int_64)0
	
.LOOP $label$33:
	$15 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$34 }
	$9 = *($14)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$9 = ($9 + [165])
	goto $label$35 
	
.LABEL $label$36
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$34
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$33 }
	if ( ((int_64)$6 == (int_64)$16) ){ goto $label$37 }
	$2 = (int_64)0
	$1 = (int_64)59
	$14 = [1792]
	$16 = (int_64)0
	
.LOOP $label$38:
	$15 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$39 }
	$9 = *($14)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$9 = ($9 + [165])
	goto $label$40 
	
.LABEL $label$41
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$39
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$38 }
	if ( ((int_64)$6 != (int_64)$16) ){ goto $label$1 }
	
.LABEL $label$37
	$10 = *(($0 + [232]))
	$4 = *(($0 + [236]))
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$42 }
	$14 = ($4 + [-24])
	$11 = ([0] - $10)
	
.LOOP $label$43:
	$9 = *($14)
	if ( (int_64)(((int_64)((int_64)*($9) ^ (int_64)$5) | (int_64)*(($9 + [8]))) == 0) ){ goto $label$42 }
	$4 = $14
	$9 = ($14 + [-24])
	$14 = $9
	if ( ((int_32)($9 + $11) != (int_32)[-24]) ){ goto $label$43 }
	
.LABEL $label$42
	$9 = ($0 + [208])
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$6 }
	$14 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [32]) == (int_32)$9), [224])
	if ( $14 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$6 != (int_64)$7) ){ goto $label$1 }
	$2 = (int_64)0
	$1 = (int_64)59
	$14 = [1792]
	$16 = (int_64)0
	
.LOOP $label$44:
	$15 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$45 }
	$9 = *($14)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$47 }
	$9 = ($9 + [165])
	goto $label$46 
	
.LABEL $label$47
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$46
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$45
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$44 }
	if ( ((int_64)$8 != (int_64)$16) ){ goto $label$1 }
	$10 = *(($0 + [232]))
	$4 = *(($0 + [236]))
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$48 }
	$14 = ($4 + [-24])
	$11 = ([0] - $10)
	
.LOOP $label$49:
	$9 = *($14)
	if ( (int_64)(((int_64)((int_64)*($9) ^ (int_64)$5) | (int_64)*(($9 + [8]))) == 0) ){ goto $label$48 }
	$4 = $14
	$9 = ($14 + [-24])
	$14 = $9
	if ( ((int_32)($9 + $11) != (int_32)[-24]) ){ goto $label$49 }
	
.LABEL $label$48
	$9 = ($0 + [208])
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$4 }
	$14 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [32]) == (int_32)$9), [224])
	if ( $14 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$6
	$14 = CALL db_find_i64(*(($0 + [208])), *(($0 + [216])), (int_64)-4060986516896743424, $5)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$1 }
	$14 = CALL $117($9, $14)
	CALL eosio_assert(((int_32)*($14 + [32]) == (int_32)$9), [224])
	
.LABEL $label$5
	$15 = *($0)
	CALL eosio_assert([1], [368])
	CALL eosio_assert(((int_32)*($14 + [32]) == (int_32)$9), [416])
	CALL eosio_assert(((int_64)*(($0 + [208])) == (int_64)CALL $fimport$15()), [464])
	*($14 + [16]) = ((int_64)*($14 + [16]) + (int_64)*($3))
	$1 = *(($14 + [8]))
	$2 = *($14)
	CALL eosio_assert([1], [528])
	CALL eosio_assert([1], [352])
	CALL memcpy(($17 + [192]), $14, [16])
	CALL eosio_assert([1], [352])
	CALL memcpy((($17 + [192]) + [16]), ($14 + [16]), [8])
	CALL db_update_i64(*($14 + [36]), $15, ($17 + [192]), [24])
	$9 = (int_64)($1 == 0)
	$14 = ($0 + [224])
	if ( ( (uint_64)($2 <= *($14)) ? [0] : $9 ) ){ goto $label$1 }
	*($14) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ( ((uint_64)$2 > (uint_64)(int_64)-3) ? ((int_64)$1 != (int_64)0) : $9 ) )
	goto $label$1 
	
.LABEL $label$4
	$14 = CALL db_find_i64(*(($0 + [208])), *(($0 + [216])), (int_64)-4060986516896743424, $5)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$1 }
	$14 = CALL $117($9, $14)
	CALL eosio_assert(((int_32)*($14 + [32]) == (int_32)$9), [224])
	
.LABEL $label$3
	$15 = *($0)
	CALL eosio_assert([1], [368])
	CALL eosio_assert(((int_32)*($14 + [32]) == (int_32)$9), [416])
	CALL eosio_assert(((int_64)*(($0 + [208])) == (int_64)CALL $fimport$15()), [464])
	*($14 + [16]) = (int_64))(*($14 + [16]) - *($3))
	$1 = *(($14 + [8]))
	$2 = *($14)
	CALL eosio_assert([1], [528])
	CALL eosio_assert([1], [352])
	CALL memcpy(($17 + [192]), $14, [16])
	CALL eosio_assert([1], [352])
	CALL memcpy((($17 + [192]) + [16]), ($14 + [16]), [8])
	CALL db_update_i64(*($14 + [36]), $15, ($17 + [192]), [24])
	$9 = (int_64)($1 == 0)
	$14 = ($0 + [224])
	if ( ( (uint_64)($2 <= *($14)) ? [0] : $9 ) ){ goto $label$1 }
	*($14) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ( ((uint_64)$2 > (uint_64)(int_64)-3) ? ((int_64)$1 != (int_64)0) : $9 ) )
	goto $label$1 
	
.LABEL $label$2
	*($17 + [192]) = $7
	if ( ((int_32)CALL $129(($17 + [192])) != (int_32)[99999]) ){ goto $label$50 }
	CALL eosio_assert([0], [2688])
	
.LABEL $label$50
	$13 = *(($0 + [112]))
	$11 = *(($0 + [116]))
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$51 }
	$14 = ($11 + [-24])
	$10 = ([0] - $13)
	
.LOOP $label$52:
	if ( ((int_64)*(*($14)) == (int_64)2) ){ goto $label$51 }
	$11 = $14
	$9 = ($14 + [-24])
	$14 = $9
	if ( ((int_32)($9 + $10) != (int_32)[-24]) ){ goto $label$52 }
	
.LABEL $label$51
	$12 = ($0 + [88])
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$55 }
	$14 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [16]) == (int_32)$12), [224])
	if ( $14 ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$55
	$14 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)7235159551874301952, (int_64)2)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$53 }
	$14 = CALL $40($12, $14)
	CALL eosio_assert(((int_32)*($14 + [16]) == (int_32)$12), [224])
	
.LABEL $label$54
	CALL eosio_assert((int_64)(*($14 + [8]) == 0), [2704])
	
.LABEL $label$53
	$13 = *(($0 + [112]))
	$11 = *(($0 + [116]))
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$56 }
	$14 = ($11 + [-24])
	$10 = ([0] - $13)
	
.LOOP $label$57:
	if ( ((int_64)*(*($14)) == (int_64)3) ){ goto $label$56 }
	$11 = $14
	$9 = ($14 + [-24])
	$14 = $9
	if ( ((int_32)($9 + $10) != (int_32)[-24]) ){ goto $label$57 }
	
.LABEL $label$56
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$60 }
	$14 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [16]) == (int_32)$12), [224])
	if ( $14 ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$60
	$14 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)7235159551874301952, (int_64)3)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$58 }
	$14 = CALL $40($12, $14)
	CALL eosio_assert(((int_32)*($14 + [16]) == (int_32)$12), [224])
	
.LABEL $label$59
	CALL eosio_assert((int_64)(*($14 + [8]) == 0), [2752])
	
.LABEL $label$58
	$14 = *($4)
	$9 = CALL strlen([2800])
	if ( ((int_32)$9 != (int_32)( *($4 + [4]) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$64 }
	if ( (CALL $211($4, [0], [-1], [2800], $9) == 0) ){ goto $label$63 }
	
.LABEL $label$64
	*($17 + [120]) = (int_64)0
	*($17 + [112]) = (int_64)0
	*($17 + [200]) = [0]
	*($17 + [192]) = (int_64)0
	*(($17 + [248])) = [0]
	*($17 + [240]) = (int_64)0
	$14 = CALL strlen([144])
	if ( ((uint_32)$14 >= (uint_32)[-16]) ){ goto $label$62 }
	if ( ((uint_32)$14 >= (uint_32)[11]) ){ goto $label$67 }
	*($17 + [240]) = ($14 << [1])
	$9 = (($17 + [240]) | [1])
	if ( $14 ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$67
	$11 = (($14 + [16]) & [-16])
	$9 = CALL $198($11)
	*($17 + [240]) = ($11 | [1])
	*($17 + [248]) = $9
	*($17 + [244]) = $14
	
.LABEL $label$66
	CALL memcpy($9, [144], $14)
	
.LABEL $label$65
	*(($9 + $14)) = [0]
	CALL $222(($17 + [96]), $4)
	CALL _ZN6gamenn10parse_memoENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERhRyS7_RS6_S8_S9_($14, ($17 + [96]), $14, ($17 + [120]), $14, ($17 + [192]), ($17 + [112]), ($17 + [240]))
	if ( ((*($17 + [96]) & [1]) == 0) ){ goto $label$68 }
	CALL $200(*($17 + [104]))
	
.LABEL $label$68
	CALL prints([2864])
	CALL printui((int_64)0)
	CALL prints([2176])
	CALL prints([2896])
	$2 = *($17 + [120])
	CALL printui($2)
	CALL prints([2176])
	CALL prints([2912])
	CALL printui((int_64)0)
	CALL prints([2176])
	CALL prints([2928])
	$14 = *($17 + [192])
	$9 = ($14 & [1])
	CALL prints_l(( *(($17 + [200])) ? (($17 + [192]) | [1]) : $9 ), ( *($17 + [196]) ? uint_32($14 >> [1]) : $9 ))
	CALL prints([2176])
	$10 = *(($0 + [112]))
	$4 = *(($0 + [116]))
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$69 }
	$14 = ($4 + [-24])
	$11 = ([0] - $10)
	
.LOOP $label$70:
	if ( ((int_64)*(*($14)) == (int_64)8) ){ goto $label$69 }
	$4 = $14
	$9 = ($14 + [-24])
	$14 = $9
	if ( ((int_32)($9 + $11) != (int_32)[-24]) ){ goto $label$70 }
	
.LABEL $label$69
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$73 }
	$14 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [16]) == (int_32)$12), [224])
	if ( $14 ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$73
	$14 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)7235159551874301952, (int_64)8)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$71 }
	$14 = CALL $40($12, $14)
	CALL eosio_assert(((int_32)*($14 + [16]) == (int_32)$12), [224])
	
.LABEL $label$72
	if ( (int_64)(*($14 + [8]) == 0) ){ goto $label$71 }
	$14 = *($17 + [240])
	$9 = CALL strlen([1824])
	if ( ((int_32)$9 != (int_32)( *($17 + [244]) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$75 }
	$14 = [0]
	if ( (CALL $211(($17 + [240]), [0], [-1], [1824], $9) == 0) ){ goto $label$74 }
	
.LABEL $label$75
	$14 = [1]
	$9 = *($17 + [240])
	$4 = CALL strlen([1808])
	if ( ((int_32)$4 != (int_32)( *($17 + [244]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$74 }
	$14 = ((int_32)CALL $211(($17 + [240]), [0], [-1], [1808], $4) != (int_32)[0])
	
.LABEL $label$74
	CALL eosio_assert($14, [2944])
	
.LABEL $label$71
	$1 = *(($3 + [8]))
	*((($17 + [80]) + [8])) = $1
	$15 = *($17 + [184])
	*($17 + [80]) = *($3)
	*($17 + [72]) = $1
	*($17 + [64]) = $2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [976])
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$78:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$77 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$79 }
	
.LOOP $label$80:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$77 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$80 }
	
.LABEL $label$79
	$9 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$78 }
	goto $label$76 
	
.LABEL $label$77
	$9 = [0]
	
.LABEL $label$76
	CALL eosio_assert($9, [1040])
	$2 = *($17 + [112])
	CALL $222(($17 + [48]), ($17 + [192]))
	CALL $222(($17 + [32]), ($17 + [240]))
	*((($17 + [16]) + [8])) = *((($17 + [80]) + [8]))
	*(($17 + [8])) = *((($17 + [64]) + [8]))
	*($17 + [16]) = *($17 + [80])
	*($17) = *($17 + [64])
	CALL _ZN6gamenn9startGameEyN5eosio5assetES1_yNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES8_($0, $15, ($17 + [16]), $17, $2, ($17 + [48]), ($17 + [32]))
	if ( ((*($17 + [32]) & [1]) == 0) ){ goto $label$81 }
	CALL $200(*($17 + [40]))
	
.LABEL $label$81
	if ( ((*($17 + [48]) & [1]) == 0) ){ goto $label$82 }
	CALL $200(*($17 + [56]))
	
.LABEL $label$82
	if ( ((*($17 + [240]) & [1]) == 0) ){ goto $label$83 }
	CALL $200(*($17 + [248]))
	
.LABEL $label$83
	if ( ((*($17 + [192]) & [1]) == 0) ){ goto $label$1 }
	CALL $200(*(($17 + [200])))
	goto $label$1 
	
.LABEL $label$63
	$6 = *(($0 + [384]))
	$5 = *($0)
	$2 = (int_64)0
	$15 = (int_64)59
	$14 = [1664]
	$16 = (int_64)0
	
.LOOP $label$84:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$89 }
	$9 = *($14)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$88 }
	$9 = ($9 + [165])
	goto $label$87 
	
.LABEL $label$89
	$1 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$86 }
	goto $label$85 
	
.LABEL $label$88
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$87
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$86
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$85
	$14 = ($14 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$1 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$84 }
	*(($17 + [156])) = *(($3 + [12]))
	*(($17 + [152])) = *(($3 + [8]))
	*(($17 + [148])) = *(($3 + [4]))
	*($17 + [128]) = $5
	*($17 + [144]) = *($3)
	*($17 + [136]) = *($17 + [184])
	*(($17 + [168])) = [0]
	*($17 + [160]) = (int_64)0
	$9 = ($17 + [160])
	$14 = CALL strlen([2816])
	if ( ((uint_32)$14 >= (uint_32)[-16]) ){ goto $label$61 }
	$4 = ($17 + [144])
	if ( ((uint_32)$14 >= (uint_32)[11]) ){ goto $label$92 }
	*(($17 + [160])) = ($14 << [1])
	$0 = ($9 + [1])
	if ( $14 ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$92
	$11 = (($14 + [16]) & [-16])
	$0 = CALL $198($11)
	*(($17 + [160])) = ($11 | [1])
	*(($17 + [168])) = $0
	*(($17 + [164])) = $14
	
.LABEL $label$91
	CALL memcpy($0, [2816], $14)
	
.LABEL $label$90
	*(($0 + $14)) = [0]
	*(($14 = CALL $198([16]))) = $5
	*($14 + [8]) = $16
	*($17 + [240]) = $14
	$14 = ($14 + [16])
	*($17 + [248]) = $14
	*($17 + [244]) = $14
	*($17 + [192]) = *($17 + [128])
	*($17 + [200]) = *((($17 + [128]) + [8]))
	*(($17 + [216])) = *(($4 + [8]))
	*($17 + [208]) = *($4)
	*(($14 = (($17 + [192]) + [40]))) = *(($9 + [8]))
	*($17 + [224]) = *($9)
	*(($17 + [160])) = [0]
	*(($17 + [164])) = [0]
	*((($17 + [128]) + [40])) = [0]
	CALL $63($6, (int_64)-3617168760277827584, ($17 + [240]), ($17 + [192]))
	if ( ((*($17 + [224]) & [1]) == 0) ){ goto $label$93 }
	CALL $200(*($14))
	
.LABEL $label$93
	$14 = *($17 + [240])
	if ( ($14 == 0) ){ goto $label$94 }
	*($17 + [244]) = $14
	CALL $200($14)
	
.LABEL $label$94
	if ( ((*(($17 + [160])) & [1]) == 0) ){ goto $label$1 }
	CALL $200(*(($17 + [168])))
	goto $label$1 
	
.LABEL $label$62
	CALL $202(($17 + [240]))
	
.LABEL $label$61
	CALL $202($9)
	
.LABEL $label$1
	*([0] + [4]) = ($17 + [256])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC _ZN6gamenn4initEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [48])
	*([0] + [4]) = $19
	CALL require_auth(*($0))
	*((($1 = CALL $198([32])) + [8])) = *([0] + [2560])
	*($1) = *([0] + [2552])
	*(($1 + [24])) = *([0] + [2576])
	*(($2 = ($1 + [16]))) = *([0] + [2568])
	$5 = ($0 + [232])
	$3 = ($0 + [208])
	$4 = (($19 + [16]) + [16])
	$11 = ($0 + [236])
	$13 = ($0 + [216])
	$15 = ($0 + [224])
	$16 = ($0 + [240])
	$17 = $1
	
.LOOP $label$1:
	$6 = $17
	$8 = *($6)
	$7 = *($6 + [8])
	$9 = *($5)
	$18 = *($11)
	if ( ((int_32)$18 == (int_32)$9) ){ goto $label$2 }
	$17 = ($18 + [-24])
	$10 = ([0] - $9)
	
.LOOP $label$3:
	$12 = *($17)
	if ( (int_64)(((int_64)((int_64)*($12) ^ (int_64)$7) | (int_64)*(($12 + [8]))) == 0) ){ goto $label$2 }
	$18 = $17
	$12 = ($17 + [-24])
	$17 = $12
	if ( ((int_32)($12 + $10) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$18 == (int_32)$9) ){ goto $label$6 }
	$17 = *(($18 + [-24]))
	CALL eosio_assert(((int_32)*($17 + [32]) == (int_32)$3), [224])
	if ( $17 ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$17 = CALL db_find_i64(*($3), *($13), (int_64)-4060986516896743424, $7)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $117($3, $17) + [32]) == (int_32)$3), [224])
	goto $label$4 
	
.LABEL $label$5
	$14 = *($0)
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$15()), [288])
	*(($17 = CALL $198([48])) + [32]) = $3
	*(($12 = ($17 + [8]))) = $8
	*($17) = $7
	*($17 + [16]) = (int_64)0
	CALL eosio_assert([1], [352])
	CALL memcpy(($19 + [16]), $17, [16])
	CALL eosio_assert([1], [352])
	CALL memcpy($4, ($17 + [16]), [8])
	$8 = *($12)
	$7 = *($17)
	$18 = CALL db_store_i64(*($13), (int_64)-4060986516896743424, $14, $7, ($19 + [16]), [24])
	*($17 + [36]) = $18
	$10 = (int_64)($8 == 0)
	if ( ( (uint_64)($7 <= *($15)) ? [0] : $10 ) ){ goto $label$7 }
	*($15) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ( ((uint_64)$7 > (uint_64)(int_64)-3) ? ((int_64)$8 != (int_64)0) : $10 ) )
	
.LABEL $label$7
	*($19 + [8]) = $17
	*($19 + [24]) = *($12)
	$7 = *($17)
	*($19 + [16]) = $7
	*($19 + [4]) = $18
	$12 = *($11)
	if ( ((uint_32)$12 >= (uint_32)*($16)) ){ goto $label$9 }
	*($12 + [8]) = $7
	*($12 + [16]) = $18
	*($19 + [8]) = [0]
	*($12) = $17
	*($11) = ($12 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $125($5, ($19 + [8]), ($19 + [16]), ($19 + [4]))
	
.LABEL $label$8
	$17 = *($19 + [8])
	*($19 + [8]) = [0]
	if ( ($17 == 0) ){ goto $label$4 }
	CALL $200($17)
	
.LABEL $label$4
	$17 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $200($1)
	
.LABEL $label$10
	*([0] + [4]) = ($19 + [48])
}

void .FUNC __unlockfile (int_32 $0)
{
}

int_32 .FUNC $101 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [976])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [1040])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [976])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [1040])
	return $0
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [592])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $198([56])
	CALL $101($6)
	*($6 + [40]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [16])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [32])
	CALL $102(($8 + [32]), ($8 + [24]))
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8
	*($8 + [32]) = $5)
	$7 = *($6 + [44])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $103(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $200($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $103 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $198(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $221($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $200($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $200($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [208])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [208])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [208])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [208])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [208])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([2240])
	
.LABEL $label$1
	$2 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)8)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)16)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)24)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)40)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)56)
	*($3 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	
.LABEL $label$2
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $104 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = *([0] + [4])
	$10 = $2
	$7 = (int_64)1
	$8 = *($0 + [8])
	$5 = (int_64)($8 == 0)
	if ( $5 ){ goto $label$1 }
	$9 = ((int_64)$8 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$2:
	$7 = ((int_64)$7 * (int_64)10)
	$9 = ((int_64)$9 + (int_64)-1)
	if ( ((int_64)$9 > (int_64)1) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [8])
	$2 = ($2 - (((CASTING uint_32)(uint_64 ((int_64)$8 + (int_64)1)) + [15]) & [1008]))
	*([0] + [4]) = $2
	*(($6 = ($2 + ($3 = (CASTING uint_32)(uint_64 $8))))) = [0]
	$4 = *($0)
	if ( $5 ){ goto $label$3 }
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$4 % (int_64)$7)
	$0 = ($6 + [-1])
	
.LOOP $label$4:
	*($0) = ((int_64)((int_64)$9 % (int_64)10) + (int_64)48)
	$0 = ($0 + [-1])
	$9 = ((int_64)$9 / (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$4 }
	
.LABEL $label$3
	CALL printi(((int_64)$4 / (int_64)$7))
	CALL prints([2208])
	CALL prints_l($2, $3)
	CALL prints([2224])
	CALL $105($1, [0])
	*([0] + [4]) = $10
}

int_32 .FUNC $107 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = ($3 - $2)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$2 }
	$4 = *($0 + [4])
	$6 = *($0 + [8])
	if ( ((int_32)$8 <= (int_32)($6 - $4)) ){ goto $label$6 }
	$5 = *($0)
	$8 = (($4 - $5) + $8)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$1 }
	$6 = ($6 - $5)
	if ( ((uint_32)$6 >= (uint_32)[1073741823]) ){ goto $label$5 }
	$4 = ($1 - $5)
	$6 = ($6 << [1])
	$5 = ( $8 ? $6 : ($6 <= $8) )
	if ( $5 ){ goto $label$4 }
	$5 = [0]
	$6 = [0]
	goto $label$3 
	
.LABEL $label$6
	$5 = ($4 - $1)
	if ( ((int_32)$8 <= (int_32)$5) ){ goto $label$8 }
	$6 = $4
	$7 = ($2 + $5)
	$3 = ($3 - $7)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($4, $7, $3)
	$6 = (*($6) + $3)
	*(($6 = ($0 + [4]))) = $6
	
.LABEL $label$9
	if ( ((int_32)$5 >= (int_32)[1]) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$8
	$6 = $4
	$7 = $3
	
.LABEL $label$7
	$5 = ($6 - ($1 + $8))
	$8 = ($6 - $8)
	if ( ((uint_32)$8 >= (uint_32)$4) ){ goto $label$10 }
	$3 = ($0 + [4])
	$0 = $6
	
.LOOP $label$11:
	*($0) = *($8)
	$0 = (*($3) + [1])
	*($3) = $0
	$8 = ($8 + [1])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$12 }
	CALL memmove(($6 - $5), $1, $5)
	
.LABEL $label$12
	$8 = ($7 - $2)
	if ( ($8 == 0) ){ goto $label$2 }
	CALL memmove($1, $2, $8)
	return $1
	
.LABEL $label$5
	$4 = ($1 - $5)
	$5 = [2147483647]
	
.LABEL $label$4
	$6 = CALL $198($5)
	
.LABEL $label$3
	$4 = ($6 + $4)
	$8 = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$13 }
	$8 = $4
	
.LOOP $label$14:
	*($8) = *($2)
	$8 = ($8 + [1])
	$2 = ($2 + [1])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$14 }
	
.LABEL $label$13
	$7 = *($0)
	$3 = ($1 - $7)
	$2 = ($4 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$15 }
	CALL memcpy($2, $7, $3)
	
.LABEL $label$15
	$6 = ($6 + $5)
	$5 = ($0 + [4])
	$3 = (*($5) - $1)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$16 }
	CALL memcpy($8, $1, $3)
	$8 = ($8 + $3)
	
.LABEL $label$16
	*($5) = $8
	$8 = *($0)
	*($0) = $2
	*(($0 + [8])) = $6
	if ( ($8 == 0) ){ goto $label$17 }
	CALL $200($8)
	
.LABEL $label$17
	$1 = $4
	
.LABEL $label$2
	return $1
	
.LABEL $label$1
	CALL $221($0)
	return (unreachable)
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	CALL eosio_assert(((int_32)(*($1 + [4]) - *($1)) == (int_32)[5]), [2256])
	*(($2 = CALL $198([5])) + [4]) = [0]
	*($2) = [0]
	$10 = *($1)
	*($2) = (*($10) & [15])
	*($2 + [1]) = (*($10 + [1]) & [15])
	*($2 + [2]) = (*($10 + [2]) & [15])
	*($2 + [3]) = (*($10 + [3]) & [15])
	*($2 + [4]) = (*($10 + [4]) & [15])
	$7 = [4]
	$8 = [4]
	
.LOOP $label$2:
	if ( (($8 & [255]) == 0) ){ goto $label$1 }
	$12 = *($2)
	$13 = [1]
	$10 = [0]
	$9 = $7
	
.LOOP $label$3:
	$3 = ($2 + $10)
	$6 = ($3 + [1])
	$4 = *($6)
	$5 = ($12 & [255])
	if ( ((uint_32)$5 >= (uint_32)$4) ){ goto $label$7 }
	$4 = *($1)
	$12 = ($4 + $10)
	$5 = *($12)
	$11 = *(($12 + [1]))
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	$11 = *(($11 + [1]))
	$4 = *($1)
	$11 = ($4 + $10)
	$5 = *($11)
	if ( ((uint_32)$5 >= (uint_32)$11) ){ goto $label$4 }
	
.LABEL $label$6
	*(($4 + $10)) = $11
	*(((*($1) + $10) + [1])) = $5
	$12 = *($3)
	*($3) = *($6)
	*($6) = $12
	$13 = [0]
	goto $label$4 
	
.LABEL $label$5
	$12 = $4
	
.LABEL $label$4
	$10 = ($10 + [1])
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$3 }
	$7 = ($7 + [-1])
	$8 = ($8 + [-1])
	if ( (($13 & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ($2 == 0) ){ goto $label$8 }
	CALL $200($2)
	
.LABEL $label$8
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ($5 - $4)
	$7 = ($3 + [1])
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$2 = (*($0 + [8]) - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $198($6)
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $221($0)
	
.LABEL $label$1
	*(($3 = ($7 + $3))) = *($1)
	$5 = ($5 - $4)
	$1 = ($3 - $5)
	$6 = ($7 + $6)
	$7 = ($3 + [1])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $4, $5)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $200($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $108 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = *($2 + [4])
	*($1 + [4]) = *($1)
	$4 = *($2)
	CALL $88($1, [10])
	$5 = CALL $198([52])
	*($8) = $5
	$6 = ($5 + [52])
	*($8 + [8]) = $6
	CALL memcpy($5, [16], [52])
	*($8 + [4]) = $6
	$3 = (($7 - $4) & [255])
	$7 = [0]
	
.LOOP $label$2:
	$5 = ($5 + ((uint_32)*((*($2) + $4)) % (uint_32)(($6 - $4) - $5)))
	*((*($1) + ($4 = ($7 & [255])))) = *($5)
	$7 = ($7 + [1])
	$4 = ($7 & [255])
	*($5) = *(($6 - $4))
	if ( ((uint_32)$4 >= (uint_32)$3) ){ goto $label$1 }
	$5 = *($8)
	$6 = *($8 + [4])
	goto $label$2 
	
.LABEL $label$1
	$5 = *($8)
	if ( ($5 == 0) ){ goto $label$3 }
	*($8 + [4]) = $5
	CALL $200($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	$3 = CALL strlen([12320])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($6) = ($3 << [1])
	$5 = ($6 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $198($4)
	*($6) = ($4 | [1])
	*($6 + [8]) = $5
	*($6 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($5, [12320], $3)
	
.LABEL $label$4
	*(($5 + $3)) = [0]
	*($6 + [12]) = [0]
	$3 = *($0 + [8])
	$5 = *($0)
	$4 = *(CALL __errno_location())
	*(CALL __errno_location()) = [0]
	$3 = ( $3 ? ($0 + [1]) : ($5 & [1]) )
	$2 = CALL strtol($3, ($6 + [12]), $2)
	$0 = CALL __errno_location()
	$5 = *($0)
	*($0) = $4
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($6 + [12])
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $3)
	
.LABEL $label$7
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	CALL $200(*($6 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
	return $2
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $213($6)
	
.LABEL $label$1
	CALL $214($6)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC __lockfile (int_32 $0)
{
	int_32 $1
	return $1
}

void .FUNC _ZNSt3__19to_stringEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [12384], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $217(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $217(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $38 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [232]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [236])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL $200($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$2 = *(($0 + [232]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $200($2)
	
.LABEL $label$1
	$1 = *(($0 + [192]))
	if ( ($1 == 0) ){ goto $label$6 }
	$3 = ($0 + [196])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $200(*(($4 + [16])))
	
.LABEL $label$11
	CALL $200($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($0 + [192]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $1
	
.LABEL $label$7
	*($3) = $1
	CALL $200($2)
	
.LABEL $label$6
	$1 = *(($0 + [152]))
	if ( ($1 == 0) ){ goto $label$12 }
	$3 = ($0 + [156])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$16 }
	CALL $200($4)
	
.LABEL $label$16
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$15 }
	$2 = *(($0 + [152]))
	goto $label$13 
	
.LABEL $label$14
	$2 = $1
	
.LABEL $label$13
	*($3) = $1
	CALL $200($2)
	
.LABEL $label$12
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$17 }
	$3 = ($0 + [116])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$19 }
	
.LOOP $label$20:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$21 }
	CALL $200($4)
	
.LABEL $label$21
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$20 }
	$2 = *(($0 + [112]))
	goto $label$18 
	
.LABEL $label$19
	$2 = $1
	
.LABEL $label$18
	*($3) = $1
	CALL $200($2)
	
.LABEL $label$17
	CALL $39(($0 + [72]))
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$22 }
	$3 = ($0 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$24 }
	
.LOOP $label$25:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$26 }
	if ( ((*($2 + [104]) & [1]) == 0) ){ goto $label$27 }
	CALL $200(*(($2 + [112])))
	
.LABEL $label$27
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$28 }
	CALL $200(*(($2 + [24])))
	
.LABEL $label$28
	CALL $200($2)
	
.LABEL $label$26
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$25 }
	$2 = *(($0 + [32]))
	goto $label$23 
	
.LABEL $label$24
	$2 = $1
	
.LABEL $label$23
	*($3) = $1
	CALL $200($2)
	
.LABEL $label$22
	return $0
}

int_32 .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((*($2 + [296]) & [1]) == 0) ){ goto $label$6 }
	CALL $200(*(($2 + [304])))
	
.LABEL $label$6
	$3 = *($2 + [232])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($2 + [236])) = $3
	CALL $200($3)
	
.LABEL $label$7
	$3 = *($2 + [220])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($2 + [224])) = $3
	CALL $200($3)
	
.LABEL $label$8
	$3 = *($2 + [208])
	if ( ($3 == 0) ){ goto $label$9 }
	*(($2 + [212])) = $3
	CALL $200($3)
	
.LABEL $label$9
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$10 }
	CALL $200(*(($2 + [72])))
	
.LABEL $label$10
	CALL $200($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $200($2)
	
.LABEL $label$1
	return $0
}

void .FUNC _ZN6gamenn8setvalueEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	CALL require_auth(*($0))
	$3 = *(($0 + [112]))
	$7 = *(($0 + [116]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [88])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$7 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$5), [224])
	$8 = *($0)
	if ( $6 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)7235159551874301952, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL $40($5, $6)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$5), [224])
	$8 = *($0)
	
.LABEL $label$6
	CALL eosio_assert([1], [368])
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$5), [416])
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$15()), [464])
	*($6 + [8]) = $2
	$1 = *($6)
	CALL eosio_assert([1], [528])
	CALL eosio_assert([1], [352])
	CALL memcpy(($9 + [16]), $6, [8])
	CALL eosio_assert([1], [352])
	CALL memcpy((($9 + [16]) | [8]), ($6 + [8]), [8])
	CALL db_update_i64(*($6 + [20]), $8, ($9 + [16]), [16])
	$6 = ($0 + [104])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$3 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	goto $label$3 
	
.LABEL $label$5
	$8 = *($0)
	
.LABEL $label$4
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$15()), [288])
	*(($6 = CALL $198([32])) + [16]) = $5
	*($6 + [8]) = $2
	*($6) = $1
	CALL eosio_assert([1], [352])
	CALL memcpy(($9 + [16]), $6, [8])
	CALL eosio_assert([1], [352])
	CALL memcpy((($9 + [16]) | [8]), ($6 + [8]), [8])
	$1 = *($6)
	$7 = CALL db_store_i64(*(($0 + [96])), (int_64)7235159551874301952, $8, $1, ($9 + [16]), [16])
	*($6 + [20]) = $7
	$5 = ($0 + [104])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$8 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($9 + [8]) = $6
	$1 = *($6)
	*($9 + [16]) = $1
	*($9 + [4]) = $7
	$4 = ($0 + [116])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [120]))) ){ goto $label$10 }
	*($5 + [8]) = $1
	*($5 + [16]) = $7
	*($9 + [8]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	goto $label$9 
	
.LABEL $label$10
	CALL $41(($0 + [112]), ($9 + [8]), ($9 + [16]), ($9 + [4]))
	
.LABEL $label$9
	$6 = *($9 + [8])
	*($9 + [8]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	CALL $200($6)
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [32])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [208])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [208])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC _ZN6gamenn9updatekeyE10public_key (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [128])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [624]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	$2 = ($0 + [128])
	$3 = ($0 + [136])
	$4 = CALL db_lowerbound_i64(*($0 + [128]), *($3), (int_64)-5868465763601350656, (int_64)0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$4 = CALL $43($2, $4)
	$5 = *($0)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$2), [416])
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$15()), [464])
	$6 = *($4)
	$2 = CALL memcpy(($4 + [8]), $1, [34])
	CALL eosio_assert([1], [528])
	CALL eosio_assert([1], [352])
	CALL memcpy($9, $4, [8])
	CALL memcpy(($9 + [52]), $2, [34])
	CALL memcpy(($9 + [88]), ($9 + [52]), [34])
	CALL eosio_assert([1], [352])
	CALL memcpy(($9 | [8]), ($9 + [88]), [34])
	CALL db_update_i64(*($4 + [52]), $5, $9, [42])
	$4 = ($0 + [144])
	if ( (uint_64)($6 <= *($4)) ){ goto $label$5 }
	*($4) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0)
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$15()), [288])
	*(($4 = CALL $198([64])) + [48]) = $2
	$2 = CALL memcpy(($4 + [8]), $1, [34])
	CALL eosio_assert([1], [352])
	CALL memcpy($9, $4, [8])
	CALL memcpy(($9 + [52]), $2, [34])
	CALL memcpy(($9 + [88]), ($9 + [52]), [34])
	CALL eosio_assert([1], [352])
	CALL memcpy(($9 | [8]), ($9 + [88]), [34])
	$6 = *($4)
	$1 = CALL db_store_i64(*($3), (int_64)-5868465763601350656, $5, $6, $9, [42])
	*($4 + [52]) = $1
	$2 = ($0 + [144])
	if ( (uint_64)($6 <= *($2)) ){ goto $label$7 }
	*($2) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($9 + [88]) = $4
	$6 = *($4)
	*($9) = $6
	*($9 + [52]) = $1
	$3 = ($0 + [156])
	$2 = *($3)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [160]))) ){ goto $label$9 }
	*($2 + [8]) = $6
	*($2 + [16]) = $1
	*($9 + [88]) = [0]
	*($2) = $4
	*($3) = ($2 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $42(($0 + [152]), ($9 + [88]), $9, ($9 + [52]))
	
.LABEL $label$8
	$4 = *($9 + [88])
	*($9 + [88]) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL $200($4)
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [128])
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [192])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	CALL memset(($5 + [40]), [0], [34])
	CALL eosio_assert(((uint_32)$1 > (uint_32)[33]), [208])
	CALL memcpy(($5 + [40]), $3, [34])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	CALL memcpy(($5 + [78]), ($5 + [40]), [34])
	CALL memcpy(($5 + [112]), ($5 + [78]), [34])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL memcpy(($5 + [152]), ($5 + [112]), [34])
	CALL memcpy(($5 + [6]), ($5 + [152]), [34])
	CALL void $1((int_32 ($5 + [6])), (int_32 $4))
	*([0] + [4]) = ($5 + [192])
	return [1]
}

void .FUNC _ZN6gamenn10resolvebetEy11checksum2569signature (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [432])
	*([0] + [4]) = $13
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [624]
	$10 = (int_64)0
	
.LOOP $label$1:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($10)
	$5 = *(($0 + [32]))
	$12 = *(($0 + [36]))
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$5 }
	$7 = ($12 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$6:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$5 }
	$12 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [8])
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$8 }
	$4 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [116]) == (int_32)$6), [224])
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)3617214760481587200, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $45($6, $7)
	CALL eosio_assert(((int_32)*($4 + [116]) == (int_32)$6), [224])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [640])
	CALL memcpy(($13 + [376]), CALL $46(($0 + [128]), (int_64)0, [672]), [48])
	CALL memcpy(($13 + [342]), ($13 + [384]), [34])
	CALL assert_recover_key(($4 + [32]), $3, [66], ($13 + [342]), [34])
	$7 = CALL $47(($13 + [16]))
	CALL memcpy(($7 + [76]), $3, [66])
	CALL sha256($3, [66], ($7 + [176]))
	*($13 + [12]) = $4
	*($13 + [8]) = $6
	*($13) = *($13 + [8])
	CALL _ZN6gamenn8concludeEN5eosio11multi_indexILy3617214760481587200E6st_betJEE14const_iteratorER7st_game($0, $13, $7)
	if ( ($4 == 0) ){ goto $label$9 }
	CALL eosio_assert([1], [704])
	CALL eosio_assert([1], [752])
	$12 = CALL db_next_i64(*($4 + [120]), ($13 + [424]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$10 }
	CALL $45($6, $12)
	
.LABEL $label$10
	CALL $49($6, $4)
	
.LABEL $label$9
	if ( ((*($7 + [296]) & [1]) == 0) ){ goto $label$11 }
	CALL $200(*(($7 + [304])))
	
.LABEL $label$11
	$4 = *($7 + [232])
	if ( ($4 == 0) ){ goto $label$12 }
	*(($7 + [236])) = $4
	CALL $200($4)
	
.LABEL $label$12
	$4 = *($7 + [220])
	if ( ($4 == 0) ){ goto $label$13 }
	*(($7 + [224])) = $4
	CALL $200($4)
	
.LABEL $label$13
	$4 = *($7 + [208])
	if ( ($4 == 0) ){ goto $label$14 }
	*(($7 + [212])) = $4
	CALL $200($4)
	
.LABEL $label$14
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$15 }
	CALL $200(*(($7 + [72])))
	
.LABEL $label$15
	*([0] + [4]) = ($13 + [432])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = (*([0] + [4]) - [768])
	$8 = $2
	*([0] + [4]) = $2
	$3 = *($1 + [4])
	$7 = *($1)
	$6 = [0]
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($4)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $4)
	
.LABEL $label$1
	*(($8 + [152])) = (int_64)0
	*((($8 + [112]) + [32])) = (int_64)0
	*((($8 + [112]) + [24])) = (int_64)0
	*($8 + [128]) = (int_64)0
	*($8 + [112]) = (int_64)0
	$2 = CALL memset(($8 + [160]), [0], [66])
	*($8 + [396]) = $6
	*($8 + [392]) = $6
	*($8 + [400]) = ($6 + $4)
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [208])
	CALL memcpy(($8 + [112]), *($8 + [396]), [8])
	$1 = (*($8 + [396]) + [8])
	*($8 + [396]) = $1
	CALL eosio_assert(((uint_32)(*($8 + [400]) - $1) > (uint_32)[31]), [208])
	$1 = (($8 + [112]) + [16])
	CALL memcpy($1, *($8 + [396]), [32])
	*($8 + [396]) = (*($8 + [396]) + [32])
	*($8 + [248]) = ($8 + [392])
	*($8 + [508]) = ($8 + [161])
	*($8 + [504]) = $2
	*($8 + [512]) = ($8 + [162])
	*($8 + [516]) = ($8 + [163])
	*($8 + [520]) = ($8 + [164])
	*($8 + [524]) = ($8 + [165])
	*($8 + [528]) = ($8 + [166])
	*($8 + [532]) = ($8 + [167])
	*($8 + [536]) = ($8 + [168])
	*($8 + [540]) = ($8 + [169])
	*($8 + [544]) = ($8 + [170])
	*($8 + [548]) = ($8 + [171])
	*($8 + [552]) = ($8 + [172])
	*($8 + [556]) = ($8 + [173])
	*($8 + [560]) = ($8 + [174])
	*($8 + [564]) = ($8 + [175])
	*($8 + [568]) = ($8 + [176])
	*($8 + [572]) = ($8 + [177])
	*($8 + [576]) = (($8 + [112]) + [66])
	*($8 + [580]) = ($8 + [179])
	*($8 + [584]) = ($8 + [180])
	*($8 + [588]) = ($8 + [181])
	*($8 + [592]) = ($8 + [182])
	*($8 + [596]) = ($8 + [183])
	*($8 + [600]) = ($8 + [184])
	*($8 + [604]) = ($8 + [185])
	*($8 + [608]) = ($8 + [186])
	*($8 + [612]) = ($8 + [187])
	*($8 + [616]) = ($8 + [188])
	*($8 + [620]) = ($8 + [189])
	*($8 + [624]) = ($8 + [190])
	*($8 + [628]) = ($8 + [191])
	*($8 + [632]) = ($8 + [192])
	*($8 + [636]) = ($8 + [193])
	*($8 + [640]) = ($8 + [194])
	*($8 + [644]) = ($8 + [195])
	*($8 + [648]) = ($8 + [196])
	*($8 + [652]) = ($8 + [197])
	*($8 + [656]) = ($8 + [198])
	*($8 + [660]) = ($8 + [199])
	*($8 + [664]) = ($8 + [200])
	*($8 + [668]) = ($8 + [201])
	*($8 + [672]) = ($8 + [202])
	*($8 + [676]) = ($8 + [203])
	*($8 + [680]) = ($8 + [204])
	*($8 + [684]) = ($8 + [205])
	*($8 + [688]) = ($8 + [206])
	*($8 + [692]) = ($8 + [207])
	*($8 + [696]) = ($8 + [208])
	*($8 + [700]) = ($8 + [209])
	*($8 + [704]) = ($8 + [210])
	*($8 + [708]) = ($8 + [211])
	*($8 + [712]) = ($8 + [212])
	*($8 + [716]) = ($8 + [213])
	*($8 + [720]) = ($8 + [214])
	*($8 + [724]) = ($8 + [215])
	*($8 + [728]) = ($8 + [216])
	*($8 + [732]) = ($8 + [217])
	*($8 + [736]) = ($8 + [218])
	*($8 + [740]) = ($8 + [219])
	*($8 + [744]) = ($8 + [220])
	*($8 + [748]) = ($8 + [221])
	*($8 + [752]) = ($8 + [222])
	*($8 + [756]) = ($8 + [223])
	*($8 + [760]) = ($8 + [224])
	*($8 + [764]) = ($8 + [225])
	CALL $44(($8 + [504]), ($8 + [248]))
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL free($6)
	
.LABEL $label$4
	*(($4 = (($8 + [320]) + [24]))) = *(($1 + [24]))
	*(($6 = (($8 + [320]) + [16]))) = *(($1 + [16]))
	*($8 + [332]) = *(($1 + [12]))
	*($8 + [328]) = *(($1 + [8]))
	$5 = *($8 + [112])
	*($8 + [320]) = *($1)
	CALL memcpy(($8 + [248]), $2, [66])
	CALL memcpy(($8 + [392]), ($8 + [248]), [66])
	*((($8 + [352]) + [24])) = *($4)
	*((($8 + [352]) + [16])) = *($6)
	*($8 + [360]) = *($8 + [328])
	*($8 + [352]) = *($8 + [320])
	$1 = ($0 + int_32($3 >> [1]))
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$7 = *((*($1) + $7))
	
.LABEL $label$5
	*(($4 = (($8 + [464]) + [24]))) = *((($8 + [352]) + [24]))
	*(($6 = (($8 + [464]) + [16]))) = *((($8 + [352]) + [16]))
	*($8 + [472]) = *($8 + [360])
	*($8 + [464]) = *($8 + [352])
	CALL memcpy(($8 + [504]), ($8 + [392]), [66])
	*((($8 + [80]) + [24])) = *($4)
	*((($8 + [80]) + [16])) = *($6)
	*($8 + [88]) = *($8 + [472])
	*($8 + [80]) = *($8 + [464])
	CALL memcpy(($8 + [14]), ($8 + [504]), [66])
	CALL void $1((int_32 $5), (int_64 ($8 + [80])), (int_32 ($8 + [14])), (int_32 $7))
	*([0] + [4]) = ($8 + [768])
	return [1]
}

void .FUNC _ZN6gamenn6revealEyyN5eosio5assetES1_NSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE11checksum2569signatureS8_S8_ (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9)
{
	CALL require_auth(*($0))
	CALL require_recipient($2)
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [224])
	*([0] + [4]) = $2
	*(($3 = $2) + [220]) = $0
	*($3 + [208]) = *($1)
	*($3 + [212]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $113(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [12]) = ($3 + [208])
	*($3 + [8]) = ($3 + [220])
	CALL $114(($3 + [8]), ($3 + [16]))
	if ( ((*($3 + [192]) & [1]) == 0) ){ goto $label$6 }
	CALL $200(*(($3 + [200])))
	
.LABEL $label$6
	if ( ((*($3 + [180]) & [1]) == 0) ){ goto $label$7 }
	CALL $200(*(($3 + [188])))
	
.LABEL $label$7
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$8 }
	CALL $200(*(($3 + [72])))
	
.LABEL $label$8
	*([0] + [4]) = ($3 + [224])
	return [1]
}

void .FUNC $215 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL strlen($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($3 + $4)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	$5 = *($1)
	$6 = *($1 + [8])
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($8 + [16]) & [-16])
	$8 = CALL $198($7)
	*($0) = ($7 | [1])
	*(($0 + [8])) = $8
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($8, ( $6 ? ($1 + [1]) : ($5 & [1]) ), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	CALL $207($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $214 (int_32 $0)
{
	int_32 $1
	$1 = (*([0] + [4]) - [16])
	*([0] + [4]) = $1
	CALL $215($1, $0, [12336])
	CALL abort()
	(unreachable)
}

int_32 .FUNC $217 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$3 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$4 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($0 + [4])
	
.LABEL $label$3
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$5 }
	CALL $218($0, $3, (($1 - $3) + $4), $4, $4, [0], [0])
	$5 = *($0)
	
.LABEL $label$5
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = ($0 + [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($0 + [8])
	
.LABEL $label$6
	CALL memset(($5 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($1 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $1
	
.LABEL $label$8
	*(($5 + $1)) = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC _ZNSt3__19to_stringEi (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [12368], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $217(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $217(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $211 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $210 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $198 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [12316])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $199 (int_32 $0)
{
	return CALL $198($0)
}

int_32 .FUNC $196 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = *($2)
	$6 = *($0)
	$8 = *($1)
	if ( ((int_32)$8 >= (int_32)$6) ){ goto $label$5 }
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$4 }
	*($0) = $7
	*($2) = $6
	$9 = [1]
	goto $label$3 
	
.LABEL $label$5
	$9 = [0]
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$2 }
	*($1) = $7
	*($2) = $8
	$9 = [1]
	$6 = *($0)
	$7 = *($1)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$1 }
	*($0) = $7
	*($1) = $6
	$8 = *($2)
	$9 = [2]
	goto $label$1 
	
.LABEL $label$4
	*($0) = $8
	*($1) = $6
	$9 = [1]
	$8 = *($2)
	if ( ((int_32)$8 >= (int_32)$6) ){ goto $label$1 }
	*($1) = $8
	*($2) = $6
	$9 = [2]
	
.LABEL $label$3
	$8 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = $7
	
.LABEL $label$1
	$7 = *($3)
	if ( ((int_32)$7 >= (int_32)int_32(($8 << [24]) >> [24])) ){ goto $label$6 }
	*($2) = $7
	*($3) = $8
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$8 }
	*($1) = $8
	*($2) = $7
	$7 = *($0)
	$8 = *($1)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$7 }
	*($0) = $8
	*($1) = $7
	$9 = ($9 + [3])
	goto $label$6 
	
.LABEL $label$8
	$9 = ($9 + [1])
	goto $label$6 
	
.LABEL $label$7
	$9 = ($9 + [2])
	
.LABEL $label$6
	$7 = *($3)
	$8 = *($4)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$12 }
	*($3) = $8
	*($4) = $7
	$7 = *($2)
	$8 = *($3)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$11 }
	*($2) = $8
	*($3) = $7
	$3 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 >= (int_32)$3) ){ goto $label$10 }
	*($1) = $8
	*($2) = $3
	$8 = *($0)
	$2 = *($1)
	if ( ((int_32)$2 >= (int_32)$8) ){ goto $label$9 }
	*($0) = $2
	*($1) = $8
	$9 = ($9 + [4])
	
.LABEL $label$12
	return $9
	
.LABEL $label$11
	return ($9 + [1])
	
.LABEL $label$10
	return ($9 + [2])
	
.LABEL $label$9
	return ($9 + [3])
}

int_32 .FUNC $197 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($1 - $0)
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$19 }
	$8 = [1]
	goto $label$1 
	
.LABEL $label$20
	$3 = *($0)
	$4 = ($1 + [-1])
	$2 = *($4)
	if ( ((int_32)$2 >= (int_32)$3) ){ goto $label$1 }
	*($0) = $2
	*($4) = $3
	goto $label$1 
	
.LABEL $label$19
	$8 = *($0 + [2])
	$2 = *($0)
	$4 = *($0 + [1])
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$15 }
	if ( ((int_32)$8 >= (int_32)$4) ){ goto $label$12 }
	*($0) = $8
	*(($0 + [2])) = $2
	goto $label$11 
	
.LABEL $label$18
	$3 = ($1 + [-1])
	$4 = *($3)
	$6 = *($0)
	$2 = *($0 + [1])
	if ( ((int_32)$2 >= (int_32)$6) ){ goto $label$14 }
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$4 }
	*($0) = $4
	*($3) = $6
	goto $label$1 
	
.LABEL $label$17
	$8 = [1]
	CALL $196($0, ($0 + [1]), ($0 + [2]), ($0 + [3]), ($1 + [-1]), $2)
	goto $label$1 
	
.LABEL $label$16
	$6 = ($1 + [-1])
	$2 = *($0 + [2])
	$3 = *($0)
	$4 = *($0 + [1])
	if ( ((int_32)$4 >= (int_32)$3) ){ goto $label$13 }
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$8 }
	*($0) = $2
	*(($0 + [2])) = $3
	goto $label$7 
	
.LABEL $label$15
	if ( ((int_32)$8 >= (int_32)$4) ){ goto $label$10 }
	*(($0 + [2])) = $4
	*(($3 = ($0 + [1]))) = $8
	if ( ((int_32)$8 >= (int_32)$2) ){ goto $label$9 }
	*($0) = $8
	*($3) = $2
	goto $label$9 
	
.LABEL $label$14
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$1 }
	$8 = [1]
	*(($6 = ($0 + [1]))) = $4
	*($3) = $2
	$2 = *($0)
	$4 = *($6)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$1 }
	*($0) = $4
	$8 = [1]
	*(($0 + [1])) = $2
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$6 }
	*(($0 + [2])) = $4
	*(($5 = ($0 + [1]))) = $2
	if ( ((int_32)$2 >= (int_32)$3) ){ goto $label$5 }
	*($0) = $2
	*($5) = $3
	goto $label$5 
	
.LABEL $label$12
	*($0) = $4
	*(($4 = ($0 + [1]))) = $2
	if ( ((int_32)$8 >= (int_32)$2) ){ goto $label$10 }
	*(($0 + [2])) = $2
	*($4) = $8
	
.LABEL $label$11
	$4 = $2
	goto $label$9 
	
.LABEL $label$10
	$4 = $8
	
.LABEL $label$9
	$6 = ($0 + [3])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$3 }
	$5 = [0]
	$7 = [0]
	
.LOOP $label$22:
	$3 = *($6)
	if ( ((int_32)$3 >= (int_32)int_32(($4 << [24]) >> [24])) ){ goto $label$23 }
	$8 = $5
	
.LOOP $label$27:
	*((($2 = ($0 + $8)) + [3])) = $4
	if ( ((int_32)$8 == (int_32)[-2]) ){ goto $label$26 }
	$8 = ($8 + [-1])
	$4 = *(($2 + [1]))
	if ( ((int_32)$3 < (int_32)$4) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$8 = $0
	goto $label$24 
	
.LABEL $label$25
	$8 = (($0 + $8) + [3])
	
.LABEL $label$24
	*($8) = $3
	$7 = ($7 + [1])
	if ( ((int_32)$7 == (int_32)[8]) ){ goto $label$21 }
	
.LABEL $label$23
	$4 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [1])
	$4 = *($6)
	$6 = $8
	goto $label$22 
	
.LABEL $label$21
	$8 = (((int_32)($6 + [1]) == (int_32)$1) | [0])
	goto $label$1 
	
.LABEL $label$8
	*($0) = $4
	*(($4 = ($0 + [1]))) = $3
	if ( ((int_32)$2 >= (int_32)$3) ){ goto $label$6 }
	*(($0 + [2])) = $3
	*($4) = $2
	
.LABEL $label$7
	$4 = $3
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	$2 = *($6)
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$1 }
	*(($3 = ($0 + [2]))) = $2
	*($6) = $4
	$8 = [1]
	$2 = *(($0 + [1]))
	$4 = *($3)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$1 }
	*($3) = $2
	$8 = [1]
	*(($0 + [1])) = $4
	$2 = *($0)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$1 }
	*($0) = $4
	$8 = [1]
	*(($0 + [1])) = $2
	goto $label$1 
	
.LABEL $label$4
	*($0) = $2
	$8 = [1]
	*(($0 + [1])) = $6
	$4 = *($3)
	if ( ((int_32)$4 >= (int_32)$6) ){ goto $label$1 }
	$8 = [1]
	*(($0 + [1])) = $4
	*($3) = $6
	goto $label$1 
	
.LABEL $label$3
	$4 = [1]
	
.LABEL $label$2
	$8 = ($2 | $4)
	
.LABEL $label$1
	$4
	return ($8 & [1])
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [12204])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [12012]
	$1 = (((int_32)$2 * (int_32)[12]) + [12012])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $195 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	
.LOOP $label$1:
	$4 = ($1 + [-2])
	$3 = ($1 + [-1])
	
.LOOP $label$2:
	$5 = $0
	
.LOOP $label$4:
	$0 = ($1 - $5)
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$12 }
	if ( ((int_32)$0 <= (int_32)[30]) ){ goto $label$11 }
	$12 = ($5 + uint_32($0 >> [1]))
	if ( ((int_32)$0 < (int_32)[1000]) ){ goto $label$13 }
	$0 = uint_32($0 >> [2])
	$10 = CALL $196($5, ($5 + $0), $12, ($12 + $0), $3, $2)
	goto $label$7 
	
.LABEL $label$13
	$0 = *($3)
	$6 = *($5)
	$11 = *($12)
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$16 }
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$15 }
	*($5) = $0
	*($3) = $6
	$10 = [1]
	goto $label$7 
	
.LABEL $label$16
	$10 = [0]
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$7 }
	*($12) = $0
	*($3) = $11
	$10 = [1]
	$11 = *($5)
	$0 = *($12)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$7 }
	*($5) = $0
	*($12) = $11
	goto $label$14 
	
.LABEL $label$15
	*($5) = $11
	*($12) = $6
	$10 = [1]
	$0 = *($3)
	if ( ((int_32)$0 >= (int_32)$6) ){ goto $label$7 }
	*($12) = $0
	*($3) = $6
	
.LABEL $label$14
	$10 = [2]
	goto $label$7 
	
.LABEL $label$12
	goto $label$6 
	
.LABEL $label$17
	$11 = *($5)
	$0 = *($3)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$6 }
	*($5) = $0
	*($3) = $11
	return 
	
.LABEL $label$11
	$0 = *($5 + [2])
	$6 = *($5)
	$11 = *($5 + [1])
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$22 }
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$21 }
	*($5) = $0
	*(($5 + [2])) = $6
	goto $label$20 
	
.LABEL $label$22
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$19 }
	*(($5 + [2])) = $11
	*(($7 = ($5 + [1]))) = $0
	if ( ((int_32)$0 >= (int_32)$6) ){ goto $label$18 }
	*($5) = $0
	*($7) = $6
	goto $label$18 
	
.LABEL $label$21
	*($5) = $11
	*(($11 = ($5 + [1]))) = $6
	if ( ((int_32)$0 >= (int_32)$6) ){ goto $label$19 }
	*(($5 + [2])) = $6
	*($11) = $0
	
.LABEL $label$20
	$11 = $6
	goto $label$18 
	
.LABEL $label$19
	$11 = $0
	
.LABEL $label$18
	$8 = ($5 + [3])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$6 }
	$12 = [0]
	
.LOOP $label$23:
	$7 = *($8)
	if ( ((int_32)$7 >= (int_32)int_32(($11 << [24]) >> [24])) ){ goto $label$24 }
	$0 = $12
	
.LOOP $label$28:
	*((($6 = ($5 + $0)) + [3])) = $11
	if ( ((int_32)$0 == (int_32)[-2]) ){ goto $label$27 }
	$0 = ($0 + [-1])
	$11 = *(($6 + [1]))
	if ( ((int_32)$7 < (int_32)$11) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$0 = $5
	goto $label$25 
	
.LABEL $label$26
	$0 = (($5 + $0) + [3])
	
.LABEL $label$25
	*($0) = $7
	
.LABEL $label$24
	$0 = ($8 + [1])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$6 }
	$12 = ($12 + [1])
	$11 = *($8)
	$8 = $0
	goto $label$23 
	
.LABEL $label$10
	$11 = *($5 + [2])
	$6 = *($5)
	$0 = *($5 + [1])
	if ( ((int_32)$0 >= (int_32)$6) ){ goto $label$33 }
	if ( ((int_32)$11 >= (int_32)$0) ){ goto $label$32 }
	*($5) = $11
	*(($5 + [2])) = $6
	goto $label$31 
	
.LABEL $label$33
	if ( ((int_32)$11 >= (int_32)$0) ){ goto $label$30 }
	*(($5 + [2])) = $0
	*(($7 = ($5 + [1]))) = $11
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$29 }
	*($5) = $11
	*($7) = $6
	goto $label$29 
	
.LABEL $label$32
	*($5) = $0
	*(($0 = ($5 + [1]))) = $6
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$30 }
	*(($5 + [2])) = $6
	*($0) = $11
	
.LABEL $label$31
	$0 = $6
	goto $label$29 
	
.LABEL $label$30
	$0 = $11
	
.LABEL $label$29
	$11 = *($3)
	if ( ((int_32)$11 >= (int_32)$0) ){ goto $label$6 }
	*(($6 = ($5 + [2]))) = $11
	*($3) = $0
	$11 = ($5 + [1])
	$7 = *($11)
	$0 = *($6)
	if ( ((int_32)$0 >= (int_32)$7) ){ goto $label$6 }
	*($6) = $7
	*($11) = $0
	$11 = *($5)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$6 }
	*($5) = $0
	*(($5 + [1])) = $11
	return 
	
.LABEL $label$9
	CALL $196($5, ($5 + [1]), ($5 + [2]), ($5 + [3]), $3, $2)
	return 
	
.LABEL $label$8
	$0 = *($3)
	$6 = *($5)
	$11 = *($5 + [1])
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$35 }
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$34 }
	*($5) = $0
	*($3) = $6
	return 
	
.LABEL $label$35
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$6 }
	*(($6 = ($5 + [1]))) = $0
	*($3) = $11
	$11 = *($5)
	$0 = *($6)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$6 }
	*($5) = $0
	*($6) = $11
	return 
	
.LABEL $label$34
	*($5) = $11
	*(($0 = ($5 + [1]))) = $6
	$11 = *($3)
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$6 }
	*($0) = $11
	*($3) = $6
	return 
	
.LABEL $label$7
	$6 = *($12)
	$8 = *($5)
	if ( ((int_32)$8 < (int_32)$6) ){ goto $label$37 }
	$0 = $4
	
.LOOP $label$40:
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$39 }
	$11 = *($0)
	$7 = ($0 + [-1])
	$0 = $7
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$39
	$12 = ($5 + [1])
	$6 = *($3)
	if ( ((int_32)$8 < (int_32)$6) ){ goto $label$41 }
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$6 }
	$12 = ($5 + [2])
	
.LOOP $label$43:
	$0 = ($12 + [-1])
	$11 = *($0)
	if ( ((int_32)$8 < (int_32)$11) ){ goto $label$42 }
	$12 = ($12 + [1])
	if ( ((int_32)$1 != (int_32)$12) ){ goto $label$43 }
	goto $label$6 
	
.LABEL $label$42
	*($0) = $6
	*($3) = $11
	
.LABEL $label$41
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$6 }
	$11 = $3
	
.LOOP $label$44:
	$0 = ($12 + [-1])
	$6 = *($5)
	
.LOOP $label$45:
	$0 = ($0 + [1])
	$7 = *($0)
	if ( ((int_32)$6 >= (int_32)$7) ){ goto $label$45 }
	$12 = ($0 + [1])
	
.LOOP $label$46:
	$11 = ($11 + [-1])
	$8 = *($11)
	if ( ((int_32)$6 < (int_32)$8) ){ goto $label$46 }
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$5 }
	*($0) = $8
	*($11) = $7
	goto $label$44 
	
.LABEL $label$38
	*($5) = $11
	*(($11 = ($7 + [1]))) = $8
	$10 = ($10 + [1])
	goto $label$36 
	
.LABEL $label$37
	$11 = $3
	
.LABEL $label$36
	$9 = ($5 + [1])
	if ( ((uint_32)$9 >= (uint_32)$11) ){ goto $label$47 }
	
.LOOP $label$48:
	$0 = ($9 + [-1])
	$6 = *($12)
	
.LOOP $label$49:
	$0 = ($0 + [1])
	$7 = *($0)
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$49 }
	$9 = ($0 + [1])
	
.LOOP $label$50:
	$11 = ($11 + [-1])
	$8 = *($11)
	if ( ((int_32)$8 >= (int_32)$6) ){ goto $label$50 }
	if ( ((uint_32)$0 > (uint_32)$11) ){ goto $label$51 }
	*($0) = $8
	*($11) = $7
	$12 = ( $11 ? $12 : ((int_32)$12 == (int_32)$0) )
	$10 = ($10 + [1])
	goto $label$48 
	
.LABEL $label$51
	$9 = $0
	
.LABEL $label$47
	if ( ((int_32)$9 == (int_32)$12) ){ goto $label$52 }
	$11 = *($9)
	$0 = *($12)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$52 }
	*($9) = $0
	*($12) = $11
	$10 = ($10 + [1])
	
.LABEL $label$52
	if ( $10 ){ goto $label$54 }
	$11 = CALL $197($5, $9, $2)
	$0 = ($9 + [1])
	if ( CALL $197($0, $1, $2) ){ goto $label$53 }
	if ( $11 ){ goto $label$2 }
	
.LABEL $label$54
	if ( ((int_32)($9 - $5) >= (int_32)($1 - $9)) ){ goto $label$3 }
	CALL $195($5, $9, $2)
	$0 = ($9 + [1])
	goto $label$2 
	
.LABEL $label$53
	$1 = $9
	$0 = $5
	if ( ($11 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	return 
	
.LABEL $label$5
	$5 = $0
	goto $label$4 
	
.LABEL $label$3
	CALL $195(($9 + [1]), $1, $2)
	$1 = $9
	$0 = $5
	goto $label$1 
	$0
}

int_32 .FUNC $192 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $193($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [12224])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $193 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [12310]) == 0) ){ goto $label$2 }
	$7 = *([0] + [12312])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [12310]) = [1]
	$7 = ($7 << [16])
	*([0] + [12312]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [12312])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [12312]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [12310]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [12310]) = [1]
	$3 = ($3 << [16])
	*([0] + [12312]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [12312])
	
.LABEL $label$8
	*([0] + [12312]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC _ZN6gamenn8cardtestENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	$3 = [0]
	*($5 + [56]) = [0]
	*($5 + [48]) = (int_64)0
	$4 = CALL strlen([3792])
	*($5 + [40]) = $4
	*($5 + [32]) = [0]
	if ( ((uint_32)$4 >= (uint_32)[9]) ){ goto $label$3 }
	$2 = ($5 + [32])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$2 = CALL $199($4)
	*($5 + [32]) = $2
	
.LABEL $label$2
	CALL memmove($2, [3792], $4)
	$3 = *(($5 + [40]))
	
.LABEL $label$1
	CALL $195($2, ($2 + $3), ($5 + [16]))
	CALL $135(($5 + [48]), $1, ($5 + [32]), [1])
	if ( (*(($5 + [40])) <= [9]) ){ goto $label$4 }
	$4 = *($5 + [32])
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $201($4)
	
.LABEL $label$4
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = [0]
	$4 = *($5 + [48])
	$2 = *($5 + [52])
	if ( ((int_32)($2 - $4) != (int_32)[60]) ){ goto $label$5 }
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	$1 = ($5 + [24])
	
.LOOP $label$7:
	$2 = CALL _ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPji($4, [0], [10])
	*($5 + [15]) = $2
	$3 = *($5 + [20])
	if ( ((uint_32)$3 >= (uint_32)*($1)) ){ goto $label$9 }
	*($3) = $2
	*($5 + [20]) = (*($5 + [20]) + [1])
	goto $label$8 
	
.LABEL $label$9
	CALL $16(($5 + [16]), ($5 + [15]))
	
.LABEL $label$8
	$4 = ($4 + [12])
	if ( ((int_32)$4 != (int_32)*($5 + [52])) ){ goto $label$7 }
	
.LABEL $label$6
	$4 = CALL $53(($0 + [248]), ($5 + [16]))
	CALL prints([2144])
	CALL prints([3808])
	CALL printui((CASTING uint_64)(uint_32 $4))
	CALL prints([2176])
	$4 = *($5 + [16])
	if ( ($4 == 0) ){ goto $label$5 }
	*($5 + [20]) = $4
	CALL $200($4)
	
.LABEL $label$5
	$3 = *($5 + [48])
	if ( ($3 == 0) ){ goto $label$10 }
	$4 = *($5 + [52])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$12 }
	$2 = ([0] - $3)
	$4 = ($4 + [-12])
	
.LOOP $label$13:
	if ( ((*($4) & [1]) == 0) ){ goto $label$14 }
	CALL $200(*(($4 + [8])))
	
.LABEL $label$14
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $2) != (int_32)[-12]) ){ goto $label$13 }
	$4 = *($5 + [48])
	goto $label$11 
	
.LABEL $label$12
	$4 = $3
	
.LABEL $label$11
	*($5 + [52]) = $3
	CALL $200($4)
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $192([3820], $0)
}