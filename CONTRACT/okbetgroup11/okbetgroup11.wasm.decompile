(data (i32.const 4) "`l\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "eosio.token\00")
(data (i32.const 128) "transfer\00")
(data (i32.const 144) "okbettoken11\00")
(data (i32.const 160) "eosxyz111111\00")
(data (i32.const 176) "team\00")
(data (i32.const 192) "Invalid asset\00")
(data (i32.const 208) ",\00")
(data (i32.const 240) ":\00")
(data (i32.const 256) "game\00")
(data (i32.const 272) "name\00")
(data (i32.const 288) "id\00")
(data (i32.const 304) "price\00")
(data (i32.const 320) "amount\00")
(data (i32.const 336) "ref\00")
(data (i32.const 352) "payout\00")
(data (i32.const 368) "bid\00")
(data (i32.const 384) "dice\00")
(data (i32.const 400) "okbetdice111\00")
(data (i32.const 416) "bet name is empty!\00")
(data (i32.const 448) "action:mine,game:\00")
(data (i32.const 480) ",betid:\00")
(data (i32.const 496) ",info:Enjoy airdrop! Play: www.okbet.im\00")
(data (i32.const 544) "wefuckcasino\00")
(data (i32.const 560) "welovecasino\00")
(data (i32.const 576) "eostokenpark\00")
(data (i32.const 592) "active\00")
(data (i32.const 608) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 672) "invalid symbol name\00")
(data (i32.const 704) " Bet id: \00")
(data (i32.const 720) " -- Referral reward! Play: www.okbet.im\00")
(data (i32.const 768) ",info:invite reward! Play: www.okbet.im\00")
(data (i32.const 816) "sanguo\00")
(data (i32.const 832) "bull\00")
(data (i32.const 848) "cannot pass end iterator to modify\00")
(data (i32.const 896) "okbetteam111\00")
(data (i32.const 912) "save.www.okbet.im\00")
(data (i32.const 944) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 1008) "object passed to modify is not in multi_index\00")
(data (i32.const 1056) "cannot modify objects in table of another contract\00")
(data (i32.const 1120) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1184) "write\00")
(data (i32.const 1200) "cannot create objects in table of another contract\00")
(data (i32.const 1264) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1328) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1392) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1440) "error reading iterator\00")
(data (i32.const 1472) "read\00")
(data (i32.const 1488) "issue\00")
(data (i32.const 1504) "Only accept OKT Token\00")
(data (i32.const 1536) "Must more than 100\00")
(data (i32.const 1568) "Must be an integer multiple of 100\00")
(data (i32.const 1616) "no bid record\00")
(data (i32.const 1632) "bid is over\00")
(data (i32.const 1648) "current balance is empty\00")
(data (i32.const 1680) "bid time must more than last bid time\00")
(data (i32.const 1728) "bid amount must more than last bid amount\00")
(data (i32.const 1776) "attempt to add asset with different symbol\00")
(data (i32.const 1824) "addition underflow\00")
(data (i32.const 1856) "addition overflow\00")
(data (i32.const 1888) "okbetburn111\00")
(data (i32.const 1904) "token burn!bid game:www.okbet.im\00")
(data (i32.const 1952) "get\00")
(data (i32.const 1968) "cannot pass end iterator to erase\00")
(data (i32.const 2016) "cannot increment end iterator\00")
(data (i32.const 2048) "object passed to erase is not in multi_index\00")
(data (i32.const 2096) "cannot erase objects in table of another contract\00")
(data (i32.const 2160) "attempt to remove object that was not in multi_index\00")
(data (i32.const 2224) "action\00")
(data (i32.const 2240) "There is no payout\00")
(data (i32.const 2272) "Contract is not init\00")
(data (i32.const 2304) "payout now!please wait!\00")
(data (i32.const 2336) "dividend. www.okbet.im\00")
(data (i32.const 2368) "No unlocking record!\00")
(data (i32.const 2400) "Time has not arrived!\00")
(data (i32.const 2432) "unlock is not open!\00")
(data (i32.const 2464) "Invalid quantity\00")
(data (i32.const 2496) "No lock record!\00")
(data (i32.const 2512) "Not enough locking token\00")
(data (i32.const 2544) "Not enough token\00")
(data (i32.const 10960) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 11056) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 11328) "\00\01\02\04\07\03\06\05\00")
(import "env" "__divti3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__fixdfti" (func $fimport$1 (param i32 f64)))
(import "env" "__multi3" (func $fimport$2 (param i32 i64 i64 i64 i64)))
(import "env" "__udivti3" (func $fimport$3 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$4))
(import "env" "action_data_size" (func $fimport$5 (result i32)))
(import "env" "current_receiver" (func $fimport$6 (result i64)))
(import "env" "current_time" (func $fimport$7 (result i64)))
(import "env" "db_end_i64" (func $fimport$8 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$11 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$12 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$13 (param i32)))
(import "env" "db_idx64_store" (func $fimport$14 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$15 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$16 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$19 (param i32)))
(import "env" "db_store_i64" (func $fimport$20 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$21 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$22 (param i32 i32)))
(import "env" "has_auth" (func $fimport$23 (param i64) (result i32)))
(import "env" "is_account" (func $fimport$24 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$25 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$26 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$27 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$28 (param i64)))
(import "env" "require_auth2" (func $fimport$29 (param i64 i64)))
(import "env" "send_inline" (func $fimport$30 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_" (func $5))
(export "_Z13uint64_stringy" (func $7))
(export "apply" (func $9))
(export "malloc" (func $175))
(export "free" (func $178))
(export "floor" (func $194))
(export "strtoull" (func $195))
(export "__shlim" (func $196))
(export "__intscan" (func $197))
(export "__errno_location" (func $198))
(export "__shgetc" (func $199))
(export "__uflow" (func $200))
(export "__toread" (func $201))
(export "memchr" (func $202))
(export "memcmp" (func $203))
(export "strlen" (func $204))
(table $0 15 15 anyfunc)
(elem (i32.const 0) $205 $31 $29 $13 $23 $12 $26 $24 $10 $19 $21 $28 $17 $15 $22)



void .FUNC $174 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $179(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $191($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $180($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $180($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $179(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $191($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $180(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $180($4)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $177($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10960])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $177 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11046]) == 0) ){ goto $label$2 }
	$7 = *([0] + [11048])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [11046]) = [1]
	$7 = ($7 << [16])
	*([0] + [11048]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11048])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [11048]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [11046]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [11046]) = [1]
	$3 = ($3 << [16])
	*([0] + [11048]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11048])
	
.LABEL $label$8
	*([0] + [11048]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $170 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$5 = *($0 + [4])
	*($1) = (int_64)1
	$2 = *($0)
	$6 = *($5)
	*($1 + [8]) = *($6)
	*(($1 + [16])) = *(($6 + [8]))
	$3 = *(*($5) + [8])
	CALL eosio_assert([1], [608])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [672])
	*(($1 + [32])) = $3
	*($1 + [24]) = (int_64)0
	$6 = $8
	$5 = ($6 + [-48])
	*([0] + [4]) = $5
	*($7 + [4]) = $5
	*($7) = $5
	*($7 + [8]) = ($6 + [-8])
	CALL $156($7, $1)
	$4 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)-8281824612475469824, *(*($0 + [8])), $4, $5, [40])
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $171 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$2 = *($0)
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$4 = *($4 + [4])
	*($1 + [8]) = *($4)
	*(($5 = ($1 + [16]))) = *(($4 + [8]))
	CALL eosio_assert([1], [1184])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($6 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($6 + [16]), $5, [8])
	$3 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)-8281834620801105920, *(*($0 + [8])), $3, $6, [24])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $172 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1440])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $179([32])
	$6 = CALL $173($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $174(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $180($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC _Z13uint64_stringy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 ((uint_64)$1 % (uint_64)(int_64)10))
	CALL $8($5, ( ($3 | [48]) ? ($3 + [55]) : ($3 <= [10]) ), $0)
	$2 = ((uint_64)$1 / (uint_64)(int_64)10)
	if ( (*($0) & [1]) ){ goto $label$3 }
	*($0) = [0]
	goto $label$2 
	
.LABEL $label$3
	*(*(($0 + [8]))) = [0]
	*($4) = [0]
	
.LABEL $label$2
	CALL $184($0, [0])
	*(($0 + [8])) = *(($5 + [8]))
	*($0) = *($5)
	$3 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $2
	if ( $3 ){ goto $label$1 }
	*([0] + [4]) = ($5 + [16])
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10948])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10756]
	$1 = (((int_32)$2 * (int_32)[12]) + [10756])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [16])
	*([0] + [4]) = $14
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($2 + [1])
	$3 = ($1 + [1])
	$13 = *($2 + [4])
	$7 = *($2)
	$11 = ($1 + [4])
	$12 = [0]
	
.LOOP $label$2:
	$9 = ($10 & [1])
	$10 = *($1)
	$8 = ( *($11) ? uint_32($10 >> [1]) : $9 )
	if ( ($8 <= $12) ){ goto $label$1 }
	$10 = $12
	$6 = ($7 & [1])
	$7 = ( $13 ? uint_32(($7 & [254]) >> [1]) : $6 )
	if ( ($7 == 0) ){ goto $label$3 }
	$13 = ($5 + $12)
	$5 = ( *(($1 + [8])) ? $3 : $9 )
	$8 = ($5 + $8)
	$10 = ($8 - $13)
	if ( ((int_32)$10 < (int_32)$7) ){ goto $label$1 }
	$6 = ( *(($2 + [8])) ? $4 : $6 )
	$9 = *($6)
	
.LOOP $label$4:
	$10 = (($10 - $7) + [1])
	if ( ($10 == 0) ){ goto $label$1 }
	$10 = CALL memchr($13, $9, $10)
	if ( ($10 == 0) ){ goto $label$1 }
	if ( (CALL memcmp($10, $6, $7) == 0) ){ goto $label$5 }
	$13 = ($10 + [1])
	$10 = ($8 - $13)
	if ( ((int_32)$10 >= (int_32)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$1 }
	$10 = ($10 - $5)
	
.LABEL $label$3
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$1 }
	CALL $193($14, $1, $12, ($10 - $12), $1)
	$7 = ($0 + [4])
	$13 = *($7)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [8]))) ){ goto $label$7 }
	*($13) = *($14)
	$13 = ($14 + [8])
	*(($13 + [8])) = *($13)
	*($13) = [0]
	*($14) = [0]
	*($14 + [4]) = [0]
	*($7) = (*($7) + [12])
	goto $label$6 
	
.LABEL $label$7
	CALL $6($0, $14)
	if ( ((*($14) & [1]) == 0) ){ goto $label$6 }
	CALL $180(*(($14 + [8])))
	
.LABEL $label$6
	$7 = *($2)
	$13 = *(($2 + [4]))
	$12 = (( $13 ? uint_32($7 >> [1]) : ($7 & [1]) ) + $10)
	goto $label$2 
	
.LABEL $label$1
	$7 = *($1)
	if ( ((int_32)$12 == (int_32)( *(($1 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$8 }
	CALL $193($14, $1, $12, [-1], $1)
	$7 = *(($0 + [4]))
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [8]))) ){ goto $label$9 }
	*($7) = *($14)
	$7 = ($14 + [8])
	*(($7 + [8])) = *($7)
	*($7) = [0]
	*($14) = [0]
	*($14 + [4]) = [0]
	*(($7 = ($0 + [4]))) = (*($7) + [12])
	goto $label$8 
	
.LABEL $label$9
	CALL $6($0, $14)
	if ( ((*($14) & [1]) == 0) ){ goto $label$8 }
	CALL $180(*($14 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($14 + [16])
}

void .FUNC $127 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	*($1 + [8]) = [1]
	*($1 + [24]) = *(*(*($3) + [4]) + [28])
	$4 = *($1)
	$5 = *(*($3 + [4]))
	$6 = *(*(*($3) + [4]) + [28])
	*($1 + [16]) = (int_64)0
	*($1 + [28]) = ((int_64)$5 + (int_64)$6)
	CALL eosio_assert([1], [1120])
	*($7 + [40]) = ($7 + [25])
	*($7 + [36]) = $7
	*($7 + [32]) = $7
	CALL $112(($7 + [32]), $1)
	CALL db_update_i64(*($1 + [36]), $2, $7, [25])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC $189 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $188 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$3 }
	$4 = uint_32($5 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( $6 ){ goto $label$5 }
	$6 = [10]
	goto $label$4 
	
.LABEL $label$5
	$5 = *($0)
	$6 = (($5 & [-2]) + [-1])
	
.LABEL $label$4
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$6 }
	CALL $183($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	return $0
	
.LABEL $label$6
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ($5 & [1]) ){ goto $label$8 }
	$5 = ($0 + [1])
	goto $label$7 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	
.LABEL $label$7
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$10 }
	CALL memmove(($6 + $3), $6, $1)
	$2 = ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) )
	
.LABEL $label$10
	CALL memmove($6, $2, $3)
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$12 }
	*($0) = ($3 << [1])
	goto $label$11 
	
.LABEL $label$12
	*($0 + [4]) = $3
	
.LABEL $label$11
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	*($6 + [88]) = ((int_64)*($1 + [48]) + (int_64)*($1 + [56]))
	*($1 + [32]) = *(*($3))
	$4 = *($1)
	$5 = ((int_64)*(*($3)) * (int_64)1000000)
	*($1 + [16]) = $5
	*(($1 + [24])) = (int_64)$5 >> (int_64)63)
	CALL eosio_assert([1], [1120])
	*($6 + [80]) = ($6 + [57])
	*($6 + [76]) = $6
	*($6 + [72]) = $6
	CALL $49(($6 + [72]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $6, [57])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [104]) = ((int_64)*(($1 + [48])) + (int_64)*(($1 + [56])))
	if ( (CALL memcmp(($6 + [88]), ($6 + [104]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [72])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6215726811582562304, ($6 + [96]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($6 + [104]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [112])
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [1200])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $179([48])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [608])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [672])
	*($4 + [32]) = $1
	CALL $56(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4 + [24])
	*($7 + [16]) = $2
	$6 = *($4 + [36])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $57(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $180($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1440])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $179([48])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [608])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [672])
	*($4 + [32]) = $0
	CALL $58(($8 + [32]), $4)
	*($4 + [36]) = $1
	*($8 + [24]) = $4
	$7 = *($4 + [24])
	*($8 + [16]) = $7
	$6 = *($4 + [36])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $57($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $180($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	*($11 + [60]) = $1
	$3 = *($2 + [8])
	$4 = *(($0 + [304]))
	$10 = *(($0 + [308]))
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$1 }
	$9 = ($10 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9) + [24]) == (int_64)$3) ){ goto $label$1 }
	$10 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ((int_32)$1 == (int_32)[1550192400])
	$6 = ($0 + [280])
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$5 }
	$9 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$6), [944])
	$10 = $1
	if ( $9 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$9 = CALL db_find_i64(*(($0 + [280])), *(($0 + [288])), (int_64)-6215726805411567344, $3)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$4 }
	$9 = CALL $42($6, $9)
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$6), [944])
	$10 = $1
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0)
	*($11 + [48]) = $2
	CALL $43(($11 + [8]), $6, $3, ($11 + [48]))
	$9 = *($11 + [12])
	$10 = *($11 + [60])
	
.LABEL $label$3
	$8 = ( (int_64)200 ? (int_64)25 : $5 )
	$3 = *($9 + [8])
	*($11 + [48]) = $3
	$5 = ($0 + [360])
	*($11 + [40]) = $5
	*($11 + [32]) = ((int_64)(CASTING uint_64)(uint_32 $10) + (int_64)*(($2 + [8])))
	CALL $44(($11 + [8]), ($11 + [40]), ($11 + [32]))
	$10 = *($11 + [12])
	if ( ($10 == 0) ){ goto $label$7 }
	$10 = ( $10 ? [0] : ((int_64)*($11 + [32]) == (int_64)((int_64)*($10 + [48]) + (int_64)*($10 + [56]))) )
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	
.LABEL $label$6
	$8 = ( $8 ? (int_64)1000 : $1 )
	$7 = *($2)
	*($11 + [32]) = $7
	if ( ($10 == 0) ){ goto $label$9 }
	*($11 + [8]) = ((int_64)((int_64)((int_64)$7 + (int_64)$3) * (int_64)$8) / (int_64)1000)
	$3 = *($0)
	*($11 + [24]) = ($11 + [32])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [848])
	CALL $47($6, $9, $3, ($11 + [24]))
	$3 = *($0)
	*($11 + [24]) = ($11 + [8])
	CALL eosio_assert([1], [848])
	CALL $48(*($11 + [40]), $10, $3, ($11 + [24]))
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_64)$3 < (int_64)1) ){ goto $label$10 }
	$3 = (int_64))($3 - ((int_64)((int_64)$3 * (int_64)( (int_64)200 ? (int_64)25 : ((int_32)$1 == (int_32)[1550278800]) )) / (int_64)1000))
	
.LABEL $label$10
	*($11 + [48]) = ((int_64)$3 + (int_64)$7)
	$3 = *($0)
	*($11 + [12]) = $2
	*($11 + [8]) = ($11 + [48])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [848])
	CALL $45($6, $9, $3, ($11 + [8]))
	*($11 + [24]) = ((int_64)((int_64)*($11 + [48]) * (int_64)$8) / (int_64)1000)
	$3 = *($0)
	*($11 + [8]) = $0
	*($11 + [16]) = $2
	*($11 + [12]) = ($11 + [24])
	*($11 + [20]) = ($11 + [60])
	CALL $46($11, $5, $3, ($11 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($11 + [64])
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1440])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $179([48])) + [32]) = $0
	*($6 + [16]) = (int_64)0
	CALL $59(($8 + [32]), $6)
	*($6 + [36]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [36])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $60(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $180($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$4 = *($1 + [24])
	CALL eosio_assert([1], [1120])
	CALL eosio_assert([1], [1184])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($5 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($5 + [24]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $5, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [1200])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $179([80])
	CALL $50($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [68])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $51(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $180($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = *([0] + [4])
	$11 = $12
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	$5 = *($1 + [24])
	$7 = *(*($3 + [4]) + [8])
	$6 = *(*($3))
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [608])
	$4 = ($1 + [24])
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$10 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [672])
	*(($8 = ($1 + [16]))) = $7
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)*(($1 + [24]))), [1120])
	$3 = $12
	$10 = ($3 + [-32])
	*([0] + [4]) = $10
	CALL eosio_assert([1], [1184])
	CALL memcpy($10, $1, [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($3 + [-24]), ($1 + [8]), [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($3 + [-16]), $8, [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($3 + [-8]), $4, [8])
	CALL db_update_i64(*($1 + [36]), $2, $10, [32])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = $11
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-6215726811582562304, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [64]) == (int_32)$4), [944])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $53($4, CALL $fimport$9(*($4), *($4 + [8]), (int_64)-6215726811582562304, $5))
	CALL eosio_assert(((int_32)*($2 + [64]) == (int_32)$4), [944])
	
.LABEL $label$4
	*(($2 + [72])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $167 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [1120])
	CALL eosio_assert([1], [1184])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($5 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $5, [24])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $166 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [1200])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $179([40])) + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [16]) = (int_64)1398362884
	CALL eosio_assert([1], [608])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [672])
	*($4 + [24]) = $1
	CALL $171(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [28])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $138(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $180($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

int_64 .FUNC $165 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($9 + [40])) = [0]
	*($9 + [24]) = (int_64)-1
	$8 = (int_64)0
	*($9 + [32]) = (int_64)0
	$6 = *($2)
	*($9 + [16]) = $3
	*($9 + [8]) = $1
	$2 = CALL db_find_i64($1, $3, (int_64)3607749779137757184, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$2) < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $172(($9 + [8]), $2)
	CALL eosio_assert(((int_32)*($2 + [16]) == (int_32)($9 + [8])), [944])
	$8 = *($2)
	$4 = *($9 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	$7 = ($9 + [36])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $180($5)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	$2 = *(($9 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $4
	
.LABEL $label$2
	*($7) = $4
	CALL $180($2)
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [48])
	return $8
}

void .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$2 = *($0)
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$4 = *($4 + [4])
	*($1 + [8]) = *($4)
	*(($5 = ($1 + [16]))) = *(($4 + [8]))
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [1184])
	CALL memcpy($8, $1, [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($8 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($8 + [16]), $5, [8])
	CALL eosio_assert([1], [1184])
	$4 = ($1 + [24])
	CALL memcpy(($8 + [24]), $4, [8])
	$3 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)-3106564272752777328, *(*($0 + [8])), $3, $8, [32])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($2 + [8]))
	$6 = *(*(($0 + [8])))
	$7 = *($1)
	*($8 + [40]) = *($4)
	*($1 + [40]) = CALL db_idx64_store($3, (int_64)-3106564272752777328, $6, $7, ($8 + [40]))
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $163 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	*($1 + [8]) = (int_64))(*($1 + [8]) - *(*($3)))
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [1120])
	*($5 + [56]) = ($5 + [40])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $156(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $5, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $162 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	*($5 + [40]) = *($1 + [24])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$4 = *($1)
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1120])
	CALL eosio_assert([1], [1184])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($5 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [1184])
	$3 = ($1 + [24])
	CALL memcpy(($5 + [24]), $3, [8])
	CALL db_update_i64(*($1 + [36]), $2, $5, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [56]) = *($3)
	if ( (CALL memcmp(($5 + [40]), ($5 + [56]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [40])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3106564272752777328, ($5 + [48]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [56]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $161 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [1200])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $179([48])) + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [16]) = (int_64)1398362884
	CALL eosio_assert([1], [608])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [672])
	*($4 + [32]) = $1
	CALL $164(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [36])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $158(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $180($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $160 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	*($1 + [8]) = (int_64))(*($1 + [8]) - *(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [1120])
	CALL eosio_assert([1], [1184])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($5 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $5, [24])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $169 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [1120])
	*($5 + [56]) = ($5 + [40])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $156(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $5, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $168 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [1200])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $179([56])
	CALL $139($3)
	*($3 + [40]) = $1
	CALL $170(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [44])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $141(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $180($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $176([2564], $0)
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1472])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1472])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1472])
	CALL memcpy(($1 + [8]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1472])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1472])
	CALL memcpy(($1 + [28]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $50 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	*($0 + [32]) = (int_64)0
	*(($6 = ($0 + [40]))) = (int_64)1398362884
	CALL eosio_assert([1], [608])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [672])
	*($0 + [64]) = $1
	$6 = *($2)
	CALL $52(*($2 + [4]), $0)
	*($8 + [80]) = ($8 + [57])
	*($8 + [76]) = $8
	*($8 + [72]) = $8
	CALL $49(($8 + [72]), $0)
	$5 = *($0)
	*($0 + [68]) = CALL db_store_i64(*($6 + [8]), (int_64)-6215726811582562304, *(*($2 + [8])), $5, $8, [57])
	if ( (uint_64)($5 <= *($6 + [16])) ){ goto $label$6 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$5 = *(($6 + [8]))
	$3 = *(*(($2 + [8])))
	$4 = *($0)
	*($8 + [88]) = ((int_64)*($0 + [48]) + (int_64)*($0 + [56]))
	*($0 + [72]) = CALL db_idx64_store($5, (int_64)-6215726811582562304, $3, $4, ($8 + [88]))
	*([0] + [4]) = ($8 + [96])
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $179(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $191($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $180($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $180($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$7 = *($0)
	$8 = ($7 + [376])
	$6 = *($8)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$2 = ($7 + [360])
	$3 = CALL db_lowerbound_i64(*($2), *(($7 + [368])), (int_64)-6215726811582562304, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $53($2, $3)
	*($9 + [12]) = [0]
	*($9 + [8]) = $2
	$6 = *(*(CALL $54(($9 + [8])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($7 + [376])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [1264])
	$6 = *($8)
	*($1 + [8]) = [0]
	*($1) = $6
	$6 = ((int_64)*(*($0 + [4])) * (int_64)1000000)
	*($1 + [16]) = $6
	*(($1 + [24])) = (int_64)$6 >> (int_64)63)
	$5 = *(*($0 + [8]) + [8])
	$4 = *(*($0 + [4]))
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [608])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	
.LABEL $label$3
	CALL eosio_assert($8, [672])
	*(($1 + [40])) = $5
	*($1 + [32]) = $4
	*($1 + [48]) = *(*(($0 + [8])) + [8])
	*($1 + [56]) = *(*($0 + [12]))
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1440])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $179([80])) + [40]) = (int_64)1398362884
	*($4 + [32]) = (int_64)0
	CALL eosio_assert([1], [608])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [672])
	*($4 + [64]) = $0
	CALL $55(($8 + [32]), $4)
	*($4 + [72]) = [-1]
	*($4 + [68]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [68])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $51($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $180($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [68]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1392])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-6215726811582562304)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1328])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1328])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $53(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1472])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [1472])
	CALL memcpy(($1 + [8]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [1472])
	CALL memcpy(($1 + [16]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = *([0] + [4])
	$9 = $10
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *(*($3) + [8])
	CALL eosio_assert([1], [608])
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [672])
	*(($5 = ($1 + [16]))) = $4
	*($1 + [8]) = (int_64)0
	*($1 + [24]) = *(*($3) + [8])
	$7 = $10
	$8 = ($7 + [-32])
	*([0] + [4]) = $8
	CALL eosio_assert([1], [1184])
	CALL memcpy($8, $1, [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($7 + [-24]), ($1 + [8]), [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($7 + [-16]), $5, [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($7 + [-8]), ($1 + [24]), [8])
	$6 = *($1 + [24])
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)-6215726805411567344, *(*($0 + [8])), $6, $8, [32])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = $9
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $179(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $191($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $180($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $180($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $173 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [608])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [672])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [1472])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [1472])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $152 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL eosio_assert([1], [1184])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159551874301952, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

int_32 .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1440])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $179([48])) + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [16]) = (int_64)1398362884
	CALL eosio_assert([1], [608])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [672])
	*($4 + [32]) = $0
	CALL $157(($8 + [32]), $4)
	*($4 + [40]) = [-1]
	*($4 + [36]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [36])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $158($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $180($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $150 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [1200])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $179([32])
	CALL $152($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $114(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $180($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $151 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1120])
	CALL eosio_assert([1], [1184])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $156 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1472])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $154 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	*($1 + [24]) = (int_64))(*($1 + [24]) - *(*(*($3) + [4]) + [8]))
	$4 = *($1)
	CALL eosio_assert([1], [1120])
	*($5 + [56]) = ($5 + [40])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $156(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $5, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $155 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [2048])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [2096])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2160])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $180($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $180($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
	$7 = *(($1 + [40]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3106564272752777328, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $158 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $179(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $191($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $180($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $180($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $159 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [2048])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [2096])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2160])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $180($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $180($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

int_32 .FUNC $179 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11052])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $183 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $179($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $180($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $179($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $191($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $180($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1472])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1472])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1472])
	CALL memcpy(($1 + [64]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1472])
	CALL memcpy(($1 + [112]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = *($0)
	$5 = ($7 + [416])
	$6 = *($5)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$2 = ($7 + [400])
	$3 = CALL db_lowerbound_i64(*($2), *(($7 + [408])), (int_64)4292915607302569984, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $66($2, $3)
	*($8 + [12]) = [0]
	*($8 + [8]) = $2
	$6 = *(*(CALL $67(($8 + [8])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($7 + [416])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [1264])
	$6 = *($5)
	*($1 + [8]) = (int_64)0
	*($1) = $6
	$5 = *($0 + [4])
	$6 = *(($5 + [8]))
	$4 = *($5)
	*($1 + [16]) = [0]
	*($1 + [112]) = [0]
	*($1 + [24]) = $4
	*(($1 + [32])) = $6
	*($1 + [72]) = *(*($0 + [8]))
	$5 = *($0 + [12])
	*($1 + [96]) = *($5)
	*(($1 + [104])) = *(($5 + [8]))
	$0 = *($0 + [16])
	*($1 + [80]) = *($0)
	*(($1 + [88])) = *(($0 + [8]))
	$4 = *($7 + [56])
	CALL eosio_assert([1], [608])
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	CALL eosio_assert($7, [672])
	*(($1 + [48])) = $4
	*($1 + [40]) = (int_64)0
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $64 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [24]) = (int_64)0
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [608])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [672])
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [608])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [672])
	*($0 + [72]) = (int_64)0
	*($0 + [56]) = (int_64)0
	*($0 + [80]) = (int_64)0
	*(($2 = ($0 + [88]))) = (int_64)1398362884
	CALL eosio_assert([1], [608])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [672])
	*(($2 = ($0 + [104]))) = (int_64)1398362884
	*($0 + [96]) = (int_64)0
	CALL eosio_assert([1], [608])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [672])
	return $0
}

int_32 .FUNC $67 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [120]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1392])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4292915607302569984)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1328])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1328])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $66(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1440])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $179([128])
	$4 = CALL $64($6)
	*($6 + [116]) = $0
	CALL $68(($8 + [32]), $4)
	*($6 + [124]) = [-1]
	*($6 + [120]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [120])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $63(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $180($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $179(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $191($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $180($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $180($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $179(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $191($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $180($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $180($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $62 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [144])
	*([0] + [4]) = $7
	$4 = CALL $64($0)
	*($0 + [116]) = $1
	$1 = *($2)
	CALL $65(*($2 + [4]), $4)
	*($7 + [128]) = ($7 + [108])
	*($7 + [124]) = $7
	*($7 + [120]) = $7
	CALL $61(($7 + [120]), $4)
	$3 = *($0)
	*($0 + [120]) = CALL db_store_i64(*($1 + [8]), (int_64)4292915607302569984, *(*($2 + [8])), $3, $7, [108])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($1 + [8]))
	$5 = *(*(($2 + [8])))
	$6 = *($0)
	*($7 + [136]) = *($0 + [8])
	*($0 + [124]) = CALL db_idx64_store($3, (int_64)4292915607302569984, $5, $6, ($7 + [136]))
	*([0] + [4]) = ($7 + [144])
	return $0
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $179(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $191($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $180($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $180($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1472])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1472])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [1472])
	CALL memcpy(($1 + [32]), *($0 + [4]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
	return $0
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
	return $0
}

void .FUNC $86 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [24]))), [1776])
	$5 = ((int_64)*($1 + [16]) + (int_64)*($3))
	*($1 + [16]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [1824])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [1856])
	*($1 + [8]) = (*($1 + [8]) + [1])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1120])
	*($6 + [56]) = ($6 + [44])
	*($6 + [52]) = $6
	*($6 + [48]) = $6
	CALL $87(($6 + [48]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $6, [44])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [64])
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1440])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $179([64])) + [16]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [24]) = (int_64)1398362884
	CALL eosio_assert([1], [608])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [672])
	*($4 + [48]) = $0
	CALL $88(($8 + [32]), $4)
	*($4 + [52]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [52])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $89($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $180($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [1200])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $179([64])
	CALL $90($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [52])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $89(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $180($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [1200])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $179([56])) + [24]) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4 + [32]) = (int_64)1398362884
	CALL eosio_assert([1], [608])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [672])
	*($4 + [40]) = $1
	CALL $91(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [44])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $92(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $180($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [1200])
	$4 = CALL $179([88])
	$6 = CALL $97($4)
	*($4 + [76]) = $1
	CALL $98($3, $6)
	*($8 + [104]) = (($8 + [16]) + [76])
	*($8 + [100]) = ($8 + [16])
	*($8 + [96]) = ($8 + [16])
	CALL $99(($8 + [96]), $6)
	$5 = *($4)
	*($4 + [80]) = CALL db_store_i64(*($1 + [8]), (int_64)4292929467866677248, $2, $5, ($8 + [16]), [76])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [96]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$3 = *($4 + [80])
	*($8 + [12]) = $3
	$7 = ($1 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($6 + [8]) = $5
	*($6 + [16]) = $3
	*($8 + [96]) = [0]
	*($6) = $4
	*($7) = ($6 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $100(($1 + [24]), ($8 + [96]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($8 + [96])
	*($8 + [96]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $180($1)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [112])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [76]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	$4 = *($1)
	$5 = *($3)
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)*(($1 + [32]))), [1776])
	$6 = ((int_64)*($1 + [24]) + (int_64)*($5))
	*($1 + [24]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1824])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [1856])
	$5 = *($3 + [4])
	*($1 + [56]) = *($5)
	*(($1 + [64])) = *(($5 + [8]))
	$5 = *($3 + [8])
	*($1 + [40]) = *($5)
	*(($1 + [48])) = *(($5 + [8]))
	*($1 + [72]) = *(*($3 + [12]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1120])
	*($7 + [88]) = ($7 + [76])
	*($7 + [84]) = $7
	*($7 + [80]) = $7
	CALL $99(($7 + [80]), $1)
	CALL db_update_i64(*($1 + [80]), $2, $7, [76])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [96])
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1440])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $179([88])
	$4 = CALL $97($6)
	*($6 + [76]) = $0
	CALL $101(($8 + [32]), $4)
	*($6 + [80]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [80])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $100(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $180($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $182 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $183($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$2 = *($0)
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$4 = *($4 + [8])
	$3 = *($4)
	*(($1 + [24])) = *(($4 + [8]))
	*($1 + [16]) = $3
	CALL eosio_assert([1], [1184])
	CALL memcpy($8, $1, [8])
	CALL eosio_assert([1], [1184])
	$4 = ($1 + [8])
	CALL memcpy(($8 | [8]), $4, [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($8 + [16]), ($1 + [16]), [16])
	$3 = ((int_64)*($1 + [8]) + (int_64)*($1))
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)-3020380869172259840, *(*($0 + [8])), $3, $8, [32])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($2 + [8]))
	$5 = *(*(($0 + [8])))
	$6 = *($4)
	$7 = *($1)
	*($8 + [40]) = $7
	*($1 + [40]) = CALL db_idx64_store($3, (int_64)-3020380869172259840, $5, ((int_64)$6 + (int_64)$7), ($8 + [40]))
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $148 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	$4 = *($1)
	*($11 + [40]) = $4
	$5 = ($1 + [24])
	$6 = *($5)
	$3 = *($3)
	$7 = *(($3 + [8]))
	$9 = *($3)
	$8 = *($1 + [16])
	$10 = ((int_64)$8 + (int_64)$9)
	*($1 + [16]) = $10
	*($5) = ((int_64)((int_64)$6 + (int_64)$7) + (int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($10 <= $8)) : (uint_64)($10 <= $9) ))
	$10 = *($1 + [8])
	CALL eosio_assert([1], [1120])
	CALL eosio_assert([1], [1184])
	CALL memcpy($11, $1, [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($11 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($11 + [16]), ($1 + [16]), [16])
	CALL db_update_i64(*($1 + [36]), $2, $11, [32])
	$10 = ((int_64)$10 + (int_64)$4)
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($11 + [56]) = *($1)
	if ( (CALL memcmp(($11 + [40]), ($11 + [56]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [40])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020380869172259840, ($11 + [48]), $10)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($11 + [56]))
	
.LABEL $label$2
	*([0] + [4]) = ($11 + [64])
}

void .FUNC $145 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	*($10 + [56]) = $1
	*($10 + [32]) = $2
	*($10 + [40]) = $3
	$5 = *(($0 + [344]))
	$9 = *(($0 + [348]))
	*($10 + [24]) = $4
	$4 = ((int_64)$4 + (int_64)$1)
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	$7 = *($8)
	if ( ((int_64)((int_64)*($7 + [8]) + (int_64)*($7)) == (int_64)$4) ){ goto $label$1 }
	$9 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = ($0 + [320])
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$7 }
	$7 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$8), [944])
	$4 = *($0)
	if ( $7 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$7 = CALL db_find_i64(*(($0 + [320])), *(($0 + [328])), (int_64)-3020380869172259840, $4)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$5 }
	$7 = CALL $123($8, $7)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$8), [944])
	$4 = *($0)
	
.LABEL $label$6
	*($10 + [8]) = ($10 + [32])
	CALL eosio_assert([1], [848])
	CALL $148($8, $7, $4, ($10 + [8]))
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0)
	
.LABEL $label$4
	*($10 + [12]) = ($10 + [24])
	*($10 + [8]) = ($10 + [56])
	*($10 + [16]) = ($10 + [32])
	CALL $147($10, $8, $4, ($10 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [64])
}

void .FUNC $144 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	$3 = *($3)
	$4 = *($3)
	*(($1 + [40])) = *(($3 + [8]))
	*($1 + [32]) = $4
	$4 = *($1)
	CALL eosio_assert([1], [1120])
	*($5 + [56]) = ($5 + [44])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $87(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $5, [44])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $147 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [1200])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $179([48])) + [32]) = $1
	*($3) = (int_64)0
	CALL $149(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = ((int_64)*($3 + [8]) + (int_64)*($3))
	*($7 + [16]) = $2
	$4 = *($3 + [36])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $126(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $180($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $146 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	$3 = *($3)
	$4 = *($3)
	*(($1 + [40])) = *(($3 + [8]))
	*($1 + [32]) = $4
	$4 = *($1)
	CALL eosio_assert([1], [1120])
	*($5 + [56]) = ($5 + [44])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $87(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $5, [44])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $141 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $179(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $191($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $180($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $180($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1472])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $143 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [76]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	$4 = *($1)
	$5 = *(*($3) + [4])
	CALL eosio_assert(((int_64)*(($5 + [32])) == (int_64)*(($1 + [16]))), [1776])
	$6 = ((int_64)*($1 + [8]) + (int_64)*($5 + [24]))
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1824])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1856])
	$5 = *($3 + [4])
	*($1 + [56]) = *($5)
	*(($1 + [64])) = *(($5 + [8]))
	$5 = *($3 + [8])
	*($1 + [40]) = *($5)
	*(($1 + [48])) = *(($5 + [8]))
	*($1 + [72]) = *(*($3 + [12]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1120])
	*($7 + [88]) = ($7 + [76])
	*($7 + [84]) = $7
	*($7 + [80]) = $7
	CALL $99(($7 + [80]), $1)
	CALL db_update_i64(*($1 + [80]), $2, $7, [76])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [96])
}

void .FUNC $142 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [160])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	$4 = *($1 + [8])
	*($1 + [8]) = (int_64)1
	*($6 + [136]) = $4
	$4 = *($1)
	CALL eosio_assert([1], [1120])
	*($6 + [128]) = ($6 + [108])
	*($6 + [124]) = $6
	*($6 + [120]) = $6
	CALL $61(($6 + [120]), $1)
	CALL db_update_i64(*($1 + [120]), $2, $6, [108])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [152]) = *(($1 + [8]))
	if ( (CALL memcmp(($6 + [136]), ($6 + [152]), [8]) == 0) ){ goto $label$2 }
	$5 = *($1 + [124])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$3 }
	$5 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4292915607302569984, ($6 + [144]), $4)
	*(($1 + [124])) = $5
	
.LABEL $label$3
	CALL db_idx64_update($5, $2, ($6 + [152]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [160])
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1184])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1184])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1184])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $73(*($1), ($0 + [32]))
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1184])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1184])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [1184])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1184])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1184])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1184])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1184])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $76 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [608])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [672])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [608])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [672])
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1472])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [1472])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1472])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [1472])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1472])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1440])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $179([56])
	CALL $76($6)
	*($6 + [40]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [16])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [32])
	CALL $77(($8 + [32]), ($8 + [24]))
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8
	*($8 + [32]) = $5)
	$7 = *($6 + [44])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $78(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $180($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $179([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [24])
	$1 = ( *(($4 + [28])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [24])
	$2 = (CASTING uint_64)(uint_32 $1)
	$5 = ($4 + [24])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $69($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9) = $8
	*($9 + [8]) = $1
	CALL eosio_assert(((int_32)($1 - $8) > (int_32)[7]), [1184])
	CALL memcpy($8, $4, [8])
	$6 = ($8 + [8])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [1184])
	CALL memcpy($6, ($4 + [8]), [8])
	$6 = ($8 + [16])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [1184])
	CALL memcpy($6, ($4 + [16]), [8])
	*($9 + [4]) = ($8 + [24])
	CALL $73($9, $5)
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $78 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $179(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $191($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $180($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $180($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [160])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	$5 = *($3)
	*($1 + [40]) = *($5)
	*(($1 + [52])) = *(($5 + [12]))
	*(($1 + [48])) = *(($5 + [8]))
	*(($1 + [44])) = *(($5 + [4]))
	*($6 + [136]) = *($1 + [8])
	$4 = *($1)
	*($1 + [56]) = *(*($3 + [4]))
	*($1 + [64]) = *(*($3 + [8]))
	*($1 + [112]) = (*($1 + [112]) + [1])
	*($1 + [16]) = ((int_64)*(*($3 + [8])) + (int_64)300)
	CALL eosio_assert([1], [1120])
	*($6 + [128]) = ($6 + [108])
	*($6 + [124]) = $6
	*($6 + [120]) = $6
	CALL $61(($6 + [120]), $1)
	CALL db_update_i64(*($1 + [120]), $2, $6, [108])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [152]) = *(($1 + [8]))
	if ( (CALL memcmp(($6 + [136]), ($6 + [152]), [8]) == 0) ){ goto $label$2 }
	$3 = *($1 + [124])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4292915607302569984, ($6 + [144]), $4)
	*(($1 + [124])) = $3
	
.LABEL $label$3
	CALL db_idx64_update($3, $2, ($6 + [152]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [160])
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	*($1 + [24]) = *($3)
	*(($1 + [32])) = *(($3 + [8]))
	$3 = *($0)
	*($1 + [56]) = *($3)
	*(($1 + [64])) = *(($3 + [8]))
	CALL eosio_assert([1], [608])
	$3 = [0]
	$2 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [672])
	*(($1 + [48])) = (int_64)1397703940
	*($1 + [40]) = (int_64)0
	CALL eosio_assert([1], [608])
	$2 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [672])
	*(($1 + [16])) = (int_64)1397703940
	*($1 + [8]) = (int_64)0
	*($1 + [72]) = *(*($0 + [4]))
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $94 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [44]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1392])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4292920740433641472)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1328])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1328])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $93(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1472])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1472])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $97 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [608])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [672])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [608])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [672])
	*(($2 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [608])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [672])
	*(($2 = ($0 + [64]))) = (int_64)1398362884
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [608])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [672])
	return $0
}

int_32 .FUNC $90 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*($0) = (int_64)0
	*(($4 = ($0 + [24]))) = (int_64)1398362884
	CALL eosio_assert([1], [608])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [672])
	*($0 + [48]) = $1
	$5 = *($2 + [4])
	$1 = *($5)
	*($0 + [8]) = [1]
	$4 = *($2)
	*($0) = *($1)
	$5 = *($5 + [4])
	*($0 + [16]) = *($5)
	*(($0 + [24])) = *(($5 + [8]))
	*($6 + [56]) = ($6 + [44])
	*($6 + [52]) = $6
	*($6 + [48]) = $6
	CALL $87(($6 + [48]), $0)
	$3 = *($0)
	*($0 + [52]) = CALL db_store_i64(*($4 + [8]), (int_64)4292927555353182208, *(*($2 + [8])), $3, $6, [44])
	if ( (uint_64)($3 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [64])
	return $0
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$6 = *($4 + [16])
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($4), *($4 + [8]), (int_64)4292920740433641472, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $93($4, $5)
	*($7 + [4]) = [0]
	*($7) = $4
	$6 = *(*(CALL $94($7) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [16])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [1264])
	*($1) = *(($4 + [16]))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	$3 = *($3 + [12])
	*($1 + [24]) = *($3)
	*(($1 + [32])) = *(($3 + [8]))
	$4 = $8
	$3 = ($4 + [-48])
	*([0] + [4]) = $3
	*($7 + [4]) = $3
	*($7) = $3
	*($7 + [8]) = ($4 + [-12])
	CALL $95($7, $1)
	$6 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)4292920740433641472, *(*($0 + [8])), $6, $3, [36])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $179(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $191($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $180($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $180($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1440])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $179([56])) + [24]) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4 + [32]) = (int_64)1398362884
	CALL eosio_assert([1], [608])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [672])
	*($4 + [40]) = $0
	CALL $96(($8 + [32]), $4)
	*($4 + [44]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [44])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $92($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $180($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $138 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $179(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $191($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $180($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $180($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $139 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [608])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [672])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [608])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [672])
	return $0
}

int_32 .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1440])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $179([40])
	$6 = CALL $137($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [28])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $138(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $180($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $131 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	*($1 + [8]) = [0]
	*($1 + [16]) = (int_64)0
	$4 = *($1)
	CALL eosio_assert([1], [1120])
	*($5 + [40]) = ($5 + [25])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $112(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [36]), $2, $5, [25])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $132 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	*($1 + [16]) = *(*(*($3) + [4]))
	$4 = *($1)
	CALL eosio_assert([1], [1120])
	*($5 + [40]) = ($5 + [25])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $112(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [36]), $2, $5, [25])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $133 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [1200])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $179([48])) + [32]) = $1
	*($3) = (int_64)0
	CALL $136(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = ((int_64)*($3 + [8]) + (int_64)*($3))
	*($7 + [16]) = $2
	$4 = *($3 + [36])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $126(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $180($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $134 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	$4 = *($1)
	*($11 + [40]) = $4
	$5 = ($1 + [24])
	$6 = *($5)
	$3 = *($3)
	$7 = *(($3 + [8]))
	$9 = *($3)
	$8 = *($1 + [16])
	$10 = ((int_64)$8 + (int_64)$9)
	*($1 + [16]) = $10
	*($5) = ((int_64)((int_64)$6 + (int_64)$7) + (int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($10 <= $8)) : (uint_64)($10 <= $9) ))
	$10 = *($1 + [8])
	CALL eosio_assert([1], [1120])
	CALL eosio_assert([1], [1184])
	CALL memcpy($11, $1, [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($11 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($11 + [16]), ($1 + [16]), [16])
	CALL db_update_i64(*($1 + [36]), $2, $11, [32])
	$10 = ((int_64)$10 + (int_64)$4)
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($11 + [56]) = *($1)
	if ( (CALL memcmp(($11 + [40]), ($11 + [56]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [40])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020380869172259840, ($11 + [48]), $10)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($11 + [56]))
	
.LABEL $label$2
	*([0] + [4]) = ($11 + [64])
}

void .FUNC $135 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	*($9 + [88]) = ((int_64)*($1 + [48]) + (int_64)*($1 + [56]))
	$5 = ($1 + [24])
	$4 = *($5)
	$3 = *($3)
	$6 = *(($3 + [8]))
	$8 = *($3)
	$7 = *($1 + [16])
	*($1 + [16]) = (int_64))($7 - $8)
	*($5) = (int_64))((int_64))($4 - $6) - (CASTING uint_64)(uint_32 (uint_64)($7 <= $8)))
	$4 = *($1)
	CALL eosio_assert([1], [1120])
	*($9 + [80]) = ($9 + [57])
	*($9 + [76]) = $9
	*($9 + [72]) = $9
	CALL $49(($9 + [72]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $9, [57])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($9 + [104]) = ((int_64)*(($1 + [48])) + (int_64)*(($1 + [56])))
	if ( (CALL memcmp(($9 + [88]), ($9 + [104]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [72])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6215726811582562304, ($9 + [96]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($9 + [104]))
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [112])
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$2 = *($0)
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$4 = *($4 + [8])
	$3 = *($4)
	*(($1 + [24])) = *(($4 + [8]))
	*($1 + [16]) = $3
	CALL eosio_assert([1], [1184])
	CALL memcpy($8, $1, [8])
	CALL eosio_assert([1], [1184])
	$4 = ($1 + [8])
	CALL memcpy(($8 | [8]), $4, [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($8 + [16]), ($1 + [16]), [16])
	$3 = ((int_64)*($1 + [8]) + (int_64)*($1))
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)-3020380869172259840, *(*($0 + [8])), $3, $8, [32])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($2 + [8]))
	$5 = *(*(($0 + [8])))
	$6 = *($4)
	$7 = *($1)
	*($8 + [40]) = $7
	*($1 + [40]) = CALL db_idx64_store($3, (int_64)-3020380869172259840, $5, ((int_64)$6 + (int_64)$7), ($8 + [40]))
	*([0] + [4]) = ($8 + [48])
}

int_32 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [608])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [672])
	*($0 + [24]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [1472])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [1472])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [1472])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC __uflow (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = [-1]
	if ( CALL __toread($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($2 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$1 = *($2 + [15])
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $1
}

int_32 .FUNC __toread (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $205 ()
{
	(unreachable)
}

void .FUNC $181 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1440])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $179([56])
	$4 = CALL $139($6)
	*($6 + [40]) = $0
	CALL $140(($8 + [32]), $4)
	*($6 + [44]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [44])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $141(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $180($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $128 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	*($1 + [8]) = [1]
	*($6 + [88]) = ((int_64)*($1 + [48]) + (int_64)*($1 + [56]))
	$4 = *($1)
	CALL eosio_assert([1], [1120])
	*($6 + [80]) = ($6 + [57])
	*($6 + [76]) = $6
	*($6 + [72]) = $6
	CALL $49(($6 + [72]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $6, [57])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [104]) = ((int_64)*(($1 + [48])) + (int_64)*(($1 + [56])))
	if ( (CALL memcmp(($6 + [88]), ($6 + [104]), [8]) == 0) ){ goto $label$2 }
	$5 = ($1 + [72])
	$1 = *($5)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6215726811582562304, ($6 + [96]), $4)
	*($5) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($6 + [104]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [112])
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($5 + [15]) = $1
	$1 = *($2)
	$3 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($3 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$4 = (($3 + [17]) & [-16])
	$1 = CALL $179($4)
	*($0) = ($4 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($5 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $185($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $3)
	*([0] + [4]) = ($5 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $181($0)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [752])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [16]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$7 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [32]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$9 == (int_64)$1), [48])
	
.LABEL $label$7
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [112]
	$9 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$19 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$15
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$14 }
	if ( ((int_64)$9 != (int_64)$1) ){ goto $label$22 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [128]
	$9 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$28 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$24
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$9 == (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$22
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [144]
	$9 = (int_64)0
	
.LOOP $label$29:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$30 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$3 = ($3 + [165])
	goto $label$31 
	
.LABEL $label$32
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$30
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$9 != (int_64)$1) ){ goto $label$20 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [128]
	$9 = (int_64)0
	
.LOOP $label$33:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$38 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$37 }
	$3 = ($3 + [165])
	goto $label$36 
	
.LABEL $label$38
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$37
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$36
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$35
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$34
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$33 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$20 }
	
.LABEL $label$21
	*($11 + [240]) = (int_64)1
	*($11 + [232]) = $0
	*($11 + [248]) = (int_64)2
	*($11 + [256]) = (int_64)3
	*($11 + [264]) = (int_64)4
	*($11 + [272]) = (int_64)0
	*($11 + [280]) = [42]
	*($11 + [281]) = [20]
	*($11 + [282]) = [10]
	*($11 + [283]) = [4]
	*($11 + [288]) = (int_64)1414221572
	*(($6 = CALL $179([16]))) = (int_64)1397703940
	*($6 + [8]) = (int_64)1414221572
	*(($11 + [320])) = $0
	$3 = ($6 + [16])
	*(($11 + [304])) = $3
	*(($11 + [300])) = $3
	*($11 + [296]) = $6
	*($11 + [312]) = $0
	*(($11 + [328])) = (int_64)-1
	*(($11 + [336])) = [0]
	*(($11 + [340])) = [0]
	*(($11 + [344])) = [0]
	*($11 + [352]) = $0
	*(($11 + [360])) = $0
	*(($11 + [368])) = (int_64)-1
	*(($11 + [376])) = [0]
	*(($11 + [380])) = [0]
	*(($11 + [384])) = [0]
	*(($11 + [388])) = [0]
	*($11 + [392]) = $0
	*(($11 + [400])) = $0
	*(($11 + [408])) = (int_64)-1
	*(($11 + [416])) = [0]
	*(($11 + [420])) = [0]
	*(($11 + [424])) = [0]
	*($11 + [432]) = $0
	*(($11 + [440])) = $0
	*(($11 + [448])) = (int_64)-1
	*(($11 + [456])) = [0]
	*(($11 + [460])) = [0]
	*(($11 + [464])) = [0]
	*($11 + [472]) = $0
	*(($11 + [480])) = $0
	*(($11 + [488])) = (int_64)-1
	*(($11 + [496])) = [0]
	*(($11 + [500])) = [0]
	*(($11 + [504])) = [0]
	*($11 + [512]) = $0
	*(($11 + [520])) = $0
	*(($11 + [528])) = (int_64)-1
	*(($11 + [536])) = [0]
	*(($11 + [540])) = [0]
	*(($11 + [544])) = [0]
	*($11 + [552]) = $0
	*(($11 + [560])) = $0
	*(($11 + [568])) = (int_64)-1
	*(($11 + [576])) = [0]
	*(($11 + [580])) = [0]
	*(($11 + [584])) = [0]
	*(($11 + [588])) = [0]
	*($11 + [592]) = $0
	*(($11 + [600])) = $0
	*(($11 + [608])) = (int_64)-1
	*(($11 + [616])) = [0]
	*(($11 + [620])) = [0]
	*(($11 + [624])) = [0]
	*(($11 + [628])) = [0]
	$8 = *($11 + [232])
	*($11 + [632]) = $8
	*(($11 + [640])) = $8
	*(($11 + [648])) = (int_64)-1
	*(($11 + [656])) = [0]
	*(($11 + [660])) = [0]
	*(($11 + [664])) = [0]
	*(($11 + [668])) = [0]
	*($11 + [672]) = $8
	*(($11 + [680])) = $8
	*(($11 + [688])) = (int_64)-1
	*(($11 + [696])) = [0]
	*(($11 + [700])) = [0]
	*(($11 + [704])) = [0]
	*($11 + [712]) = $8
	*(($11 + [720])) = $8
	*(($11 + [728])) = (int_64)-1
	*(($11 + [736])) = [0]
	*(($11 + [740])) = [0]
	*(($11 + [744])) = [0]
	*($11 + [224]) = [1]
	*($11 + [228]) = [0]
	*($11 + [112 align=4]) = *($11 + [224])
	CALL $16(($11 + [232]), ($11 + [112]))
	CALL $30(($11 + [232]))
	
.LABEL $label$20
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$39 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [128]
	$9 = (int_64)0
	
.LOOP $label$40:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$45 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$44 }
	$3 = ($3 + [165])
	goto $label$43 
	
.LABEL $label$45
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$44
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$43
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$42
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$41
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$40 }
	if ( ((int_64)$9 == (int_64)$2) ){ goto $label$39 }
	*($11 + [240]) = (int_64)1
	*($11 + [232]) = $1
	*($11 + [248]) = (int_64)2
	*($11 + [256]) = (int_64)3
	*($11 + [264]) = (int_64)4
	*($11 + [272]) = (int_64)0
	*($11 + [280]) = [42]
	*($11 + [281]) = [20]
	*($11 + [282]) = [10]
	*($11 + [283]) = [4]
	*($11 + [288]) = (int_64)1414221572
	*($11 + [296]) = [0]
	*(($3 = ($11 + [300]))) = [0]
	*(($4 = ($11 + [304]))) = [0]
	*(($6 = CALL $179([16]))) = (int_64)1397703940
	*($6 + [8]) = (int_64)1414221572
	$5 = ($6 + [16])
	*($4) = $5
	*($3) = $5
	*($11 + [296]) = $6
	$8 = *($11 + [232])
	*($11 + [312]) = $8
	*(($11 + [320])) = $8
	*(($11 + [328])) = (int_64)-1
	*(($11 + [336])) = [0]
	*(($11 + [340])) = [0]
	*(($11 + [344])) = [0]
	*($11 + [352]) = $8
	*(($11 + [360])) = $8
	*(($11 + [368])) = (int_64)-1
	*(($11 + [376])) = [0]
	*(($11 + [380])) = [0]
	*(($11 + [384])) = [0]
	*(($11 + [388])) = [0]
	*($11 + [392]) = $8
	*(($11 + [400])) = $8
	*(($11 + [408])) = (int_64)-1
	*(($11 + [416])) = [0]
	*(($11 + [420])) = [0]
	*(($11 + [424])) = [0]
	*($11 + [432]) = $8
	*(($11 + [440])) = $8
	*(($11 + [448])) = (int_64)-1
	*(($11 + [456])) = [0]
	*(($11 + [460])) = [0]
	*(($11 + [464])) = [0]
	*($11 + [472]) = $8
	*(($11 + [480])) = $8
	*(($11 + [488])) = (int_64)-1
	*(($11 + [496])) = [0]
	*(($11 + [500])) = [0]
	*(($11 + [504])) = [0]
	*($11 + [512]) = $8
	*(($11 + [520])) = $8
	*(($11 + [528])) = (int_64)-1
	*(($11 + [536])) = [0]
	*(($11 + [540])) = [0]
	*(($11 + [544])) = [0]
	*($11 + [552]) = $8
	*(($11 + [560])) = $8
	*(($11 + [568])) = (int_64)-1
	*(($11 + [576])) = [0]
	*(($11 + [580])) = [0]
	*(($11 + [584])) = [0]
	*(($11 + [588])) = [0]
	*($11 + [592]) = $8
	*(($11 + [600])) = $8
	*(($11 + [608])) = (int_64)-1
	*(($11 + [616])) = [0]
	*(($11 + [620])) = [0]
	*(($11 + [624])) = [0]
	*(($11 + [628])) = [0]
	$8 = *($11 + [232])
	*($11 + [632]) = $8
	*(($11 + [640])) = $8
	*(($11 + [648])) = (int_64)-1
	*(($11 + [656])) = [0]
	*(($11 + [660])) = [0]
	*(($11 + [664])) = [0]
	*(($11 + [668])) = [0]
	*($11 + [672]) = $8
	*(($11 + [680])) = $8
	*(($11 + [688])) = (int_64)-1
	*(($11 + [696])) = [0]
	*(($11 + [700])) = [0]
	*(($11 + [704])) = [0]
	*($11 + [712]) = $8
	*(($11 + [720])) = $8
	*(($11 + [728])) = (int_64)-1
	*(($11 + [736])) = [0]
	*(($11 + [740])) = [0]
	*(($11 + [744])) = [0]
	if ( ((int_64)$2 <= (int_64)-2039333636196532225) ){ goto $label$58 }
	if ( ((int_64)$2 <= (int_64)4923676291099525119) ){ goto $label$57 }
	if ( ((int_64)$2 > (int_64)5614120222447370239) ){ goto $label$55 }
	if ( ((int_64)$2 == (int_64)4923676291099525120) ){ goto $label$54 }
	if ( ((int_64)$2 != (int_64)5378050746634870784) ){ goto $label$46 }
	*($11 + [124]) = [0]
	*($11 + [120]) = [2]
	*($11 + [104 align=4]) = *($11 + [120])
	CALL $14(($11 + [232]), ($11 + [104]))
	goto $label$46 
	
.LABEL $label$58
	if ( ((int_64)$2 > (int_64)-4992623620442816513) ){ goto $label$56 }
	if ( ((int_64)$2 == (int_64)-8281838239757631488) ){ goto $label$53 }
	if ( ((int_64)$2 == (int_64)-6215726809336168448) ){ goto $label$52 }
	if ( ((int_64)$2 != (int_64)-4998252998346932224) ){ goto $label$46 }
	*($11 + [204]) = [0]
	*($11 + [200]) = [3]
	*($11 + [24 align=4]) = *($11 + [200])
	CALL $14(($11 + [232]), ($11 + [24]))
	goto $label$46 
	
.LABEL $label$57
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$51 }
	if ( ((int_64)$2 == (int_64)3626093248780435456) ){ goto $label$50 }
	if ( ((int_64)$2 != (int_64)4849591930565506448) ){ goto $label$46 }
	*($11 + [156]) = [0]
	*($11 + [152]) = [4]
	*($11 + [72 align=4]) = *($11 + [152])
	CALL $16(($11 + [232]), ($11 + [72]))
	goto $label$46 
	
.LABEL $label$56
	if ( ((int_64)$2 == (int_64)-4992623620442816512) ){ goto $label$49 }
	if ( ((int_64)$2 == (int_64)-4417247484950164112) ){ goto $label$48 }
	if ( ((int_64)$2 != (int_64)-3106564276286914560) ){ goto $label$46 }
	*($11 + [212]) = [0]
	*($11 + [208]) = [5]
	*($11 + [16 align=4]) = *($11 + [208])
	CALL $11(($11 + [232]), ($11 + [16]))
	goto $label$46 
	
.LABEL $label$55
	if ( ((int_64)$2 == (int_64)5614120222447370240) ){ goto $label$47 }
	if ( ((int_64)$2 != (int_64)8421056872334114816) ){ goto $label$46 }
	*($11 + [140]) = [0]
	*($11 + [136]) = [6]
	*($11 + [88 align=4]) = *($11 + [136])
	CALL $27(($11 + [232]), ($11 + [88]))
	goto $label$46 
	
.LABEL $label$54
	*($11 + [148]) = [0]
	*($11 + [144]) = [7]
	*($11 + [80 align=4]) = *($11 + [144])
	CALL $25(($11 + [232]), ($11 + [80]))
	goto $label$46 
	
.LABEL $label$53
	*($11 + [220]) = [0]
	*($11 + [216]) = [8]
	*($11 + [8 align=4]) = *($11 + [216])
	CALL $11(($11 + [232]), ($11 + [8]))
	goto $label$46 
	
.LABEL $label$52
	*($11 + [180]) = [0]
	*($11 + [176]) = [9]
	*($11 + [48 align=4]) = *($11 + [176])
	CALL $20(($11 + [232]), ($11 + [48]))
	goto $label$46 
	
.LABEL $label$51
	*($11 + [172]) = [0]
	*($11 + [168]) = [10]
	*($11 + [56 align=4]) = *($11 + [168])
	CALL $14(($11 + [232]), ($11 + [56]))
	goto $label$46 
	
.LABEL $label$50
	*($11 + [132]) = [0]
	*($11 + [128]) = [11]
	*($11 + [96 align=4]) = *($11 + [128])
	CALL $14(($11 + [232]), ($11 + [96]))
	goto $label$46 
	
.LABEL $label$49
	*($11 + [188]) = [0]
	*($11 + [184]) = [12]
	*($11 + [40 align=4]) = *($11 + [184])
	CALL $18(($11 + [232]), ($11 + [40]))
	goto $label$46 
	
.LABEL $label$48
	*($11 + [196]) = [0]
	*($11 + [192]) = [13]
	*($11 + [32 align=4]) = *($11 + [192])
	CALL $16(($11 + [232]), ($11 + [32]))
	goto $label$46 
	
.LABEL $label$47
	*($11 + [164]) = [0]
	*($11 + [160]) = [14]
	*($11 + [64 align=4]) = *($11 + [160])
	CALL $20(($11 + [232]), ($11 + [64]))
	
.LABEL $label$46
	CALL $30(($11 + [232]))
	
.LABEL $label$39
	*([0] + [4]) = ($11 + [752])
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [1440])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $179([48])) + [32]) = $0
	*($6) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [1472])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [1472])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)($4 & [-16]) != (int_32)[16]), [1472])
	CALL memcpy(($6 + [16]), ($7 + [16]), [16])
	*($6 + [40]) = [-1]
	*($6 + [36]) = $1
	*($8 + [24]) = $6
	$5 = ((int_64)*($6 + [8]) + (int_64)*($6))
	*($8 + [16]) = $5
	$7 = *($6 + [36])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $126(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $180($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [2048])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [2096])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1 + [24])
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8) + [24]) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2160])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $180($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $180($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC $121 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	$4 = *($1 + [56])
	*($1 + [56]) = *(*($3))
	*($5 + [88]) = ((int_64)$4 + (int_64)*($1 + [48]))
	$4 = *($1)
	CALL eosio_assert([1], [1120])
	*($5 + [80]) = ($5 + [57])
	*($5 + [76]) = $5
	*($5 + [72]) = $5
	CALL $49(($5 + [72]), $1)
	CALL db_update_i64(*($1 + [68]), $2, $5, [57])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [104]) = ((int_64)*(($1 + [48])) + (int_64)*(($1 + [56])))
	if ( (CALL memcmp(($5 + [88]), ($5 + [104]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [72])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6215726811582562304, ($5 + [96]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [104]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $120 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	*($1 + [28]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1120])
	*($5 + [40]) = ($5 + [25])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $112(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [36]), $2, $5, [25])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

void .FUNC $126 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $179(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $191($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $180($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $180($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $125 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	$4 = *($1)
	*($9 + [40]) = $4
	$5 = ($1 + [24])
	$6 = *($5)
	$7 = ((int_64)*(*($3)) * (int_64)1000000)
	$8 = *($1 + [16])
	*($1 + [16]) = (int_64))($8 - $7)
	*($5) = (int_64))($6 - (CASTING uint_64)(uint_32 (uint_64)($8 <= $7)))
	$6 = *($1 + [8])
	CALL eosio_assert([1], [1120])
	CALL eosio_assert([1], [1184])
	CALL memcpy($9, $1, [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($9 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy(($9 + [16]), ($1 + [16]), [16])
	CALL db_update_i64(*($1 + [36]), $2, $9, [32])
	$4 = ((int_64)$6 + (int_64)$4)
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($9 + [56]) = *($1)
	if ( (CALL memcmp(($9 + [40]), ($9 + [56]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [40])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020380869172259840, ($9 + [48]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($9 + [56]))
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [64])
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1184])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1184])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1184])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $73(*($1), ($0 + [32]))
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1472])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	*([0] + [4]) = $11
	*($11 + [24]) = $1
	*($11 + [16]) = $2
	$2 = (int_64)0
	$7 = (int_64)59
	$6 = [160]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($8)
	$4 = *(($0 + [464]))
	$10 = *(($0 + [468]))
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$5 }
	$6 = ($10 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$5 }
	$10 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [440])
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$11 }
	$3 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$6), [944])
	$2 = *($0)
	if ( $3 ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$3 = CALL db_find_i64(*(($0 + [440])), *(($0 + [448])), (int_64)7235159551874301952, $1)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$9 }
	$3 = CALL $113($6, $3)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$6), [944])
	$2 = *($0)
	
.LABEL $label$10
	*($11 + [8]) = ($11 + [16])
	CALL eosio_assert([1], [848])
	CALL $151($6, $3, $2, ($11 + [8]))
	goto $label$7 
	
.LABEL $label$9
	$2 = *($0)
	
.LABEL $label$8
	*($11 + [12]) = ($11 + [16])
	*($11 + [8]) = ($11 + [24])
	CALL $150($11, $6, $2, ($11 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($11 + [32])
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1472])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [1472])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $17 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	float_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [208])
	*([0] + [4]) = $14
	$2 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [896]
	$10 = (int_64)0
	
.LOOP $label$1:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	if ( (CALL has_auth($10) == 0) ){ goto $label$6 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [896]
	$10 = (int_64)0
	
.LOOP $label$7:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$8 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$3 = ($3 + [165])
	goto $label$9 
	
.LABEL $label$10
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$8
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$7 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [2224]
	$12 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$16 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$3 = ($3 + [165])
	goto $label$14 
	
.LABEL $label$16
	$8 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$12
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$12 = ((int_64)$8 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$11 }
	CALL require_auth2($10, $12)
	goto $label$5 
	
.LABEL $label$6
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [160]
	$10 = (int_64)0
	
.LOOP $label$17:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$18 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$18
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$17 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [2224]
	$12 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$26 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$3 = ($3 + [165])
	goto $label$24 
	
.LABEL $label$26
	$8 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$22
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$12 = ((int_64)$8 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$21 }
	CALL require_auth2($10, $12)
	
.LABEL $label$5
	$4 = *(($0 + [424]))
	$13 = *(($0 + [428]))
	if ( ((int_32)$13 == (int_32)$4) ){ goto $label$27 }
	$7 = ($13 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$28:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$27 }
	$13 = $7
	$3 = ($7 + [-24])
	$7 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$28 }
	
.LABEL $label$27
	$3 = ($0 + [400])
	if ( ((int_32)$13 == (int_32)$4) ){ goto $label$34 }
	$7 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [116]) == (int_32)$3), [944])
	*($14 + [140]) = $7
	*($14 + [136]) = $3
	if ( ($7 == 0) ){ goto $label$29 }
	$13 = (($14 + [136]) | [4])
	goto $label$33 
	
.LABEL $label$34
	$7 = CALL db_find_i64(*(($0 + [400])), *(($0 + [408])), (int_64)4292915607302569984, $1)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$32 }
	$7 = CALL $66($3, $7)
	CALL eosio_assert(((int_32)*($7 + [116]) == (int_32)$3), [944])
	*($14 + [140]) = $7
	*($14 + [136]) = $3
	$13 = (($14 + [136]) | [4])
	
.LABEL $label$33
	if ( ((int_64)*($7 + [8]) != (int_64)0) ){ goto $label$29 }
	if ( ((uint_32)(*($7 + [16]) + [-1]) >= (uint_32)$2) ){ goto $label$29 }
	$9 = *($0)
	$7 = *($14 + [140])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [848])
	CALL $142($3, $7, $9, ($14 + [64]))
	CALL eosio_assert([1], [608])
	$9 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$35:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$36 }
	
.LOOP $label$37:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$31 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$37 }
	
.LABEL $label$36
	$5 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$35 }
	goto $label$30 
	
.LABEL $label$32
	*($14 + [140]) = [0]
	*($14 + [136]) = $3
	goto $label$29 
	
.LABEL $label$31
	$5 = [0]
	
.LABEL $label$30
	CALL eosio_assert($5, [672])
	$7 = *($13)
	*(($14 + [132])) = *(($7 + [36]))
	*(($5 = (($14 + [120]) + [8]))) = *(($7 + [32]))
	*($14 + [120]) = *($7 + [24])
	*($14 + [124]) = *(($7 + [28]))
	*(($4 = (($14 + [104]) + [8]))) = *(($7 + [48]))
	*($14 + [104]) = *($7 + [40])
	$9 = *($7 + [56])
	*((($14 + [176]) + [8])) = *($4)
	*((($14 + [160]) + [8])) = *($5)
	*($14 + [176]) = *($14 + [104])
	*($14 + [160]) = *($14 + [120])
	*($14 + [144]) = (int_64)0
	*($14 + [200]) = $9
	*($14 + [152]) = (int_64)1397703940
	$9 = *($0)
	*($14 + [64]) = $0
	*($14 + [68]) = ($14 + [144])
	*($14 + [72]) = ($14 + [200])
	*($14 + [76]) = ($14 + [176])
	*($14 + [80]) = ($14 + [160])
	CALL $38(($14 + [192]), $3, $9, ($14 + [64]))
	$7 = *($13)
	if ( ((int_64)*($7 + [24]) < (int_64)1) ){ goto $label$29 }
	if ( ((int_64)*($7 + [40]) < (int_64)1) ){ goto $label$29 }
	$7 = [0]
	$3 = CALL db_lowerbound_i64(*($0 + [240]), *(($0 + [248])), (int_64)4292929467866677248, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$38 }
	$4 = ($0 + [240])
	$5 = CALL $80($4, $3)
	*($14 + [64]) = (int_64)0
	*($14 + [72]) = *($0 + [56])
	CALL eosio_assert([1], [608])
	$9 = (uint_64)*($14 + [72]) >> (uint_64)(int_64)8)
	
.LOOP $label$40:
	$3 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$39 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$41 }
	
.LOOP $label$42:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$39 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$42 }
	
.LABEL $label$41
	$3 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$40 }
	
.LABEL $label$39
	CALL eosio_assert($3, [672])
	$7 = *($13)
	*(($14 + [188])) = *(($7 + [36]))
	*((($14 + [176]) + [8])) = *(($7 + [32]))
	*($14 + [176]) = *($7 + [24])
	*($14 + [180]) = *(($7 + [28]))
	$7 = (CASTING uint_32)(float_64 ((float_64)((float_64)CALL floor((CASTING float_64)(uint_32 ((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$7() / (uint_64)(int_64)1000000)) + [-1544371200]) / (uint_32)[86400]))) * (float_64)(float_64)86400) + (float_64)(float_64)1544371200))
	*($14 + [144]) = $7
	if ( ((int_32)$7 != (int_32)*($5 + [72])) ){ goto $label$43 }
	*((($14 + [64]) + [8])) = *(($5 + [64]))
	*($14 + [64]) = *($5 + [56])
	CALL eosio_assert(((int_64)*(($5 + [48])) == (int_64)*($14 + [184])), [1776])
	$9 = ((int_64)*($14 + [176]) + (int_64)*($5 + [40]))
	*($14 + [176]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [1824])
	CALL eosio_assert(((int_64)*($14 + [176]) < (int_64)4611686018427387904), [1856])
	
.LABEL $label$43
	$9 = *($0)
	*($14 + [164]) = ($14 + [64])
	*($14 + [160]) = ($14 + [136])
	*($14 + [168]) = ($14 + [176])
	*($14 + [172]) = ($14 + [144])
	CALL eosio_assert([1], [848])
	CALL $143($4, $5, $9, ($14 + [160]))
	
.LABEL $label$38
	*(($14 + [96])) = [0]
	*($14 + [80]) = (int_64)-1
	*($14 + [88]) = (int_64)0
	$9 = *($0)
	*($14 + [64]) = $9
	*($14 + [72]) = $1
	$7 = *($13)
	$8 = ((int_64)*($7 + [24]) * (int_64)1000000)
	$6 = (CASTING float_64)(int_64 $8)
	CALL __fixdfti(($14 + [48]), ((float_64)$6 * (float_64)(float_64)0.7))
	$3 = *($7 + [112])
	*($14 + [184]) = *((($14 + [48]) + [8]))
	*($14 + [176]) = *($14 + [48])
	CALL __fixdfti(($14 + [32]), ((float_64)$6 * (float_64)(float_64)0.3))
	$7 = CALL db_find_i64($9, $1, (int_64)4292927555353182208, *($7 + [56]))
	$10 = *((($14 + [32]) + [8]))
	$12 = *($14 + [32])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$44 }
	$7 = CALL $85(($14 + [64]), $7)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)($14 + [64])), [944])
	$3 = ($3 - *($7 + [8]))
	if ( ((int_32)$3 > (int_32)[0]) ){ goto $label$45 }
	*($14 + [176]) = $8
	*($14 + [184]) = (int_64)$8 >> (int_64)63)
	
.LABEL $label$45
	$9 = *($0)
	*($14 + [160]) = ($14 + [176])
	CALL eosio_assert([1], [848])
	CALL $144(($14 + [64]), $7, $9, ($14 + [160]))
	CALL $145($0, *(*($13) + [56]), *($14 + [176]), *($14 + [184]), (int_64)1397703940)
	
.LABEL $label$44
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$46 }
	$7 = CALL db_lowerbound_i64(*($14 + [64]), *((($14 + [64]) + [8])), (int_64)4292927555353182208, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$46 }
	$7 = CALL $85(($14 + [64]), $7)
	
.LOOP $label$47:
	$8 = *($7)
	if ( ((int_64)$8 == (int_64)*(*($13) + [56])) ){ goto $label$48 }
	CALL __multi3(($14 + [16]), *($7 + [8]), (int_64)0, $12, $10)
	$9 = (CASTING int_64)(int_32 $3)
	CALL __divti3($14, *($14 + [16]), *((($14 + [16]) + [8])), $9, (int_64)$9 >> (int_64)63))
	$9 = *(($14 + [8]))
	*($14 + [168]) = $9
	$11 = *($14)
	*($14 + [160]) = $11
	if ( ( (int_64)($11 == 0) ? ((int_64)$9 < (int_64)0) : (int_64)($9 == 0) ) ){ goto $label$48 }
	$9 = *($0)
	*($14 + [144]) = ($14 + [160])
	CALL eosio_assert([1], [848])
	CALL $146(($14 + [64]), $7, $9, ($14 + [144]))
	CALL $145($0, $8, *($14 + [160]), *($14 + [168]), (int_64)1397703940)
	
.LABEL $label$48
	CALL eosio_assert([1], [2016])
	$7 = CALL db_next_i64(*($7 + [52]), ($14 + [160]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$46 }
	$7 = CALL $85(($14 + [64]), $7)
	goto $label$47 
	
.LABEL $label$46
	$13 = *($14 + [88])
	if ( ($13 == 0) ){ goto $label$29 }
	$5 = ($14 + [92])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$13) ){ goto $label$50 }
	
.LOOP $label$51:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$52 }
	CALL $180($3)
	
.LABEL $label$52
	if ( ((int_32)$13 != (int_32)$7) ){ goto $label$51 }
	$7 = *(($14 + [88]))
	goto $label$49 
	
.LABEL $label$50
	$7 = $13
	
.LABEL $label$49
	*($5) = $13
	CALL $180($7)
	
.LABEL $label$29
	*([0] + [4]) = ($14 + [208])
}

void .FUNC $10 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	*([0] + [4]) = $12
	*($12 + [24]) = $1
	CALL require_auth($1)
	$7 = *($2 + [8])
	$3 = [0]
	$10 = *($2)
	if ( ((uint_64)((int_64)$10 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [192])
	CALL eosio_assert(((int_64)$7 == (int_64)*($0 + [56])), [192])
	$8 = (int_64)0
	CALL eosio_assert(((int_64)$10 > (int_64)0), [2464])
	$11 = ($2 + [8])
	$7 = (int_64)59
	$6 = [144]
	$9 = (int_64)0
	
.LOOP $label$6:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$7 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$3 = ($3 + [165])
	goto $label$8 
	
.LABEL $label$9
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$7
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$6 }
	$7 = CALL $165($0, $9, $11, $1)
	$6 = [0]
	$3 = CALL db_lowerbound_i64(*($0 + [200]), *(($0 + [208])), (int_64)-6215726805501446784, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$10 }
	$6 = CALL $40(($0 + [200]), $3)
	$1 = *($12 + [24])
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [2272])
	CALL eosio_assert((*($6 + [8]) == 0), [2304])
	$4 = *(($0 + [104]))
	$11 = *(($0 + [108]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$11 }
	$6 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$12:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$11 }
	$11 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = ($0 + [80])
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$17 }
	$3 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$6), [944])
	$8 = *($0)
	if ( $3 ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$3 = CALL db_find_i64(*(($0 + [80])), *(($0 + [88])), (int_64)-8281834620801105920, $1)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$15 }
	$3 = CALL $130($6, $3)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$6), [944])
	$8 = *($0)
	
.LABEL $label$16
	$10 = *($3 + [8])
	*($12 + [16]) = $2
	CALL eosio_assert([1], [848])
	CALL $167($6, $3, $8, ($12 + [16]))
	$7 = (int_64))($7 - $10)
	goto $label$13 
	
.LABEL $label$15
	$8 = *($0)
	
.LABEL $label$14
	*($12 + [20]) = $2
	*($12 + [16]) = ($12 + [24])
	CALL $166(($12 + [8]), $6, $8, ($12 + [16]))
	
.LABEL $label$13
	$8 = *($12 + [24])
	$4 = *(($0 + [144]))
	$11 = *(($0 + [148]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$18 }
	$6 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$19:
	if ( ((int_64)*(*($6)) == (int_64)$8) ){ goto $label$18 }
	$11 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$19 }
	
.LABEL $label$18
	$3 = ($0 + [120])
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$22 }
	$6 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$3), [944])
	if ( $6 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$6 = CALL db_find_i64(*(($0 + [120])), *(($0 + [128])), (int_64)-3106564272752777328, $8)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$20 }
	$6 = CALL $153($3, $6)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$3), [944])
	
.LABEL $label$21
	$7 = (int_64))($7 - *($6 + [8]))
	
.LABEL $label$20
	CALL eosio_assert(((uint_64)$7 >= (uint_64)*($2)), [2544])
	$6 = ($0 + [160])
	$3 = CALL db_lowerbound_i64(*($0 + [160]), *(($0 + [168])), (int_64)-8281824612475469824, (int_64)0)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$24 }
	$3 = CALL $129($6, $3)
	$8 = *($0)
	*($12 + [16]) = $2
	CALL eosio_assert([1], [848])
	CALL $169($6, $3, $8, ($12 + [16]))
	goto $label$23 
	
.LABEL $label$24
	$8 = *($0)
	*($12 + [8]) = $2
	CALL $168(($12 + [16]), $6, $8, ($12 + [8]))
	
.LABEL $label$23
	*([0] + [4]) = ($12 + [32])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [608])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [672])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [1472])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [1472])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [1472])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	*([0] + [4]) = $11
	*($11 + [16]) = $1
	CALL require_auth($1)
	$10 = *($0 + [8])
	$3 = *(($0 + [464]))
	$9 = *(($0 + [468]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$10) ){ goto $label$1 }
	$9 = $8
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [440])
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$4 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$5), [944])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$9 = CALL db_find_i64(*(($0 + [440])), *(($0 + [448])), (int_64)7235159551874301952, $10)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $113($5, $9)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$5), [944])
	
.LABEL $label$3
	$9 = [0]
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [2432])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)1), [2432])
	$7 = *($2 + [8])
	$5 = [0]
	$6 = *($2)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$5 }
	$10 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$5 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$5 = [0]
	
.LABEL $label$5
	CALL eosio_assert($5, [192])
	CALL eosio_assert(((int_64)$7 == (int_64)*($0 + [56])), [192])
	CALL eosio_assert(((int_64)$6 > (int_64)0), [2464])
	$8 = CALL db_lowerbound_i64(*($0 + [200]), *(($0 + [208])), (int_64)-6215726805501446784, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$10 }
	$9 = CALL $40(($0 + [200]), $8)
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [2272])
	CALL eosio_assert((*($9 + [8]) == 0), [2304])
	$3 = *(($0 + [104]))
	$9 = *(($0 + [108]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$12:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$11 }
	$9 = $8
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	$5 = ($0 + [80])
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$14 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$5), [944])
	goto $label$13 
	
.LABEL $label$14
	$8 = [0]
	$9 = CALL db_find_i64(*(($0 + [80])), *(($0 + [88])), (int_64)-8281834620801105920, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$13 }
	$8 = CALL $130($5, $9)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$5), [944])
	
.LABEL $label$13
	$9 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($9, [2496])
	$1 = *($2)
	$10 = *($8 + [8])
	CALL eosio_assert(((uint_64)$10 >= (uint_64)$1), [2512])
	if ( ((int_64)$10 != (int_64)$1) ){ goto $label$16 }
	CALL eosio_assert($9, [1968])
	CALL eosio_assert($9, [2016])
	$9 = CALL db_next_i64(*($8 + [28]), ($11 + [24]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$17 }
	CALL $130($5, $9)
	
.LABEL $label$17
	CALL $159($5, $8)
	goto $label$15 
	
.LABEL $label$16
	$10 = *($0)
	*($11 + [24]) = $2
	CALL eosio_assert($9, [848])
	CALL $160($5, $8, $10, ($11 + [24]))
	
.LABEL $label$15
	$10 = *($11 + [16])
	$3 = *(($0 + [144]))
	$9 = *(($0 + [148]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$18 }
	$8 = ($9 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$19:
	if ( ((int_64)*(*($8)) == (int_64)$10) ){ goto $label$18 }
	$9 = $8
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$19 }
	
.LABEL $label$18
	$8 = ($0 + [120])
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$24 }
	$5 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$8), [944])
	$10 = *($0)
	if ( $5 ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$5 = CALL db_find_i64(*(($0 + [120])), *(($0 + [128])), (int_64)-3106564272752777328, $10)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$22 }
	$5 = CALL $153($8, $5)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$8), [944])
	$10 = *($0)
	
.LABEL $label$23
	*($11 + [24]) = $2
	CALL eosio_assert([1], [848])
	CALL $162($8, $5, $10, ($11 + [24]))
	goto $label$20 
	
.LABEL $label$22
	$10 = *($0)
	
.LABEL $label$21
	*($11 + [28]) = $2
	*($11 + [24]) = ($11 + [16])
	CALL $161(($11 + [8]), $8, $10, ($11 + [24]))
	
.LABEL $label$20
	$8 = CALL db_lowerbound_i64(*($0 + [160]), *(($0 + [168])), (int_64)-8281824612475469824, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$25 }
	$5 = ($0 + [160])
	$8 = CALL $129($5, $8)
	$10 = *($0)
	*($11 + [24]) = $2
	CALL eosio_assert([1], [848])
	CALL $163($5, $8, $10, ($11 + [24]))
	
.LABEL $label$25
	*([0] + [4]) = ($11 + [32])
}

void .FUNC $13 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [896]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	if ( (CALL has_auth($8) == 0) ){ goto $label$6 }
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [896]
	$8 = (int_64)0
	
.LOOP $label$7:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$8 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$2 = ($2 + [165])
	goto $label$9 
	
.LABEL $label$10
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$7 }
	$7 = (int_64)0
	$9 = (int_64)59
	$5 = [2224]
	$10 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$16 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$2 = ($2 + [165])
	goto $label$14 
	
.LABEL $label$16
	$6 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$12
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$6 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$11 }
	CALL require_auth2($8, $10)
	goto $label$5 
	
.LABEL $label$6
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [160]
	$8 = (int_64)0
	
.LOOP $label$17:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$18 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$2 = ($2 + [165])
	goto $label$19 
	
.LABEL $label$20
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$18
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$17 }
	$7 = (int_64)0
	$9 = (int_64)59
	$5 = [2224]
	$10 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$26 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$2 = ($2 + [165])
	goto $label$24 
	
.LABEL $label$26
	$6 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$22
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$6 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$21 }
	CALL require_auth2($8, $10)
	
.LABEL $label$5
	$3 = *(($0 + [144]))
	$11 = *(($0 + [148]))
	if ( ((int_32)$11 == (int_32)$3) ){ goto $label$27 }
	$5 = ($11 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$28:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$27 }
	$11 = $5
	$2 = ($5 + [-24])
	$5 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$28 }
	
.LABEL $label$27
	$5 = ($0 + [120])
	if ( ((int_32)$11 == (int_32)$3) ){ goto $label$30 }
	$2 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$5), [944])
	goto $label$29 
	
.LABEL $label$30
	$2 = CALL db_find_i64(*(($0 + [120])), *(($0 + [128])), (int_64)-3106564272752777328, $1)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$31 }
	$2 = CALL $153($5, $2)
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$5), [944])
	goto $label$29 
	
.LABEL $label$31
	$2 = [0]
	
.LABEL $label$29
	*($12 + [4]) = $2
	*($12) = $5
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [2368])
	CALL eosio_assert(((uint_64)((int_64)((uint_64)CALL $fimport$7() / (uint_64)(int_64)1000000) & (int_64)4294967295) >= (uint_64)((int_64)*($2 + [24]) + (int_64)86400)), [2400])
	$2 = CALL db_lowerbound_i64(*($0 + [160]), *(($0 + [168])), (int_64)-8281824612475469824, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$32 }
	$11 = ($0 + [160])
	$2 = CALL $129($11, $2)
	$7 = *($0)
	*($12 + [8]) = $12
	CALL eosio_assert([1], [848])
	CALL $154($11, $2, $7, ($12 + [8]))
	
.LABEL $label$32
	$7 = *($12)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32)
	$11 = ((int_32)$2) != (int_32)[0]
	CALL eosio_assert($11), [1968])
	CALL eosio_assert($11, [2016])
	$11 = CALL db_next_i64(*($2 + [36]), ($12 + [8]))
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$33 }
	CALL $153((CASTING uint_32)(uint_64 $7), $11)
	
.LABEL $label$33
	CALL $155($5, $2)
	*([0] + [4]) = ($12 + [16])
}

int_32 .FUNC $185 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $183($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [1472])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $19 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$23 = (*([0] + [4]) - [160])
	*([0] + [4]) = $23
	$16 = (int_64)0
	$15 = (int_64)59
	$14 = [896]
	$17 = (int_64)0
	
.LOOP $label$1:
	$18 = (int_64)0
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($14)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$18 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$2
	$14 = ($14 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$1 }
	if ( (CALL has_auth($17) == 0) ){ goto $label$6 }
	$16 = (int_64)0
	$15 = (int_64)59
	$14 = [896]
	$17 = (int_64)0
	
.LOOP $label$7:
	$18 = (int_64)0
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$8 }
	$4 = *($14)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$4 = ($4 + [165])
	goto $label$9 
	
.LABEL $label$10
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$18 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$8
	$14 = ($14 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$7 }
	$16 = (int_64)0
	$18 = (int_64)59
	$14 = [2224]
	$19 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$16 > (uint_64)(int_64)5) ){ goto $label$16 }
	$4 = *($14)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$4 = ($4 + [165])
	goto $label$14 
	
.LABEL $label$16
	$15 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$12
	$14 = ($14 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$19 = ((int_64)$15 | (int_64)$19)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$11 }
	CALL require_auth2($17, $19)
	goto $label$5 
	
.LABEL $label$6
	$16 = (int_64)0
	$15 = (int_64)59
	$14 = [160]
	$17 = (int_64)0
	
.LOOP $label$17:
	$18 = (int_64)0
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$18 }
	$4 = *($14)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$4 = ($4 + [165])
	goto $label$19 
	
.LABEL $label$20
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$18 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$18
	$14 = ($14 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$17 }
	$16 = (int_64)0
	$18 = (int_64)59
	$14 = [2224]
	$19 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$16 > (uint_64)(int_64)5) ){ goto $label$26 }
	$4 = *($14)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$4 = ($4 + [165])
	goto $label$24 
	
.LABEL $label$26
	$15 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$22
	$14 = ($14 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$19 = ((int_64)$15 | (int_64)$19)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$21 }
	CALL require_auth2($17, $19)
	
.LABEL $label$5
	$1 = ($0 + [200])
	$16 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$14 = CALL db_lowerbound_i64(*($0 + [200]), *(($0 + [208])), (int_64)-6215726805501446784, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$28 }
	$14 = CALL $40($1, $14)
	*($23 + [156]) = $14
	*($23 + [152]) = $1
	if ( (*($14 + [28]) == 0) ){ goto $label$27 }
	$15 = CALL $110($0, *($0 + [16]))
	*($23 + [144]) = ( (int_64)86400 ? $15 : (int_64)($15 == 0) )
	*($23 + [136]) = ($0 + [360])
	if ( (*($14 + [8]) == 0) ){ goto $label$29 }
	$16 = *($14 + [16])
	$15 = *($14 + [24])
	$14 = CALL db_lowerbound_i64(*($0 + [160]), *(($0 + [168])), (int_64)-8281824612475469824, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$27 }
	$4 = ($0 + [80])
	$17 = *(CALL $129(($0 + [160]), $14) + [8])
	$14 = CALL db_lowerbound_i64(*($0 + [80]), *(($0 + [88])), (int_64)-8281834620801105920, $16)
	if ( ((int_32)$14 <= (int_32)[-1]) ){ goto $label$31 }
	$14 = CALL $130($4, $14)
	*($23 + [116]) = $14
	*($23 + [112]) = $4
	if ( ((int_64)*($14) != (int_64)$16) ){ goto $label$33 }
	CALL eosio_assert([1], [2016])
	$14 = CALL db_next_i64(*($14 + [28]), ($23 + [80]))
	if ( ((int_32)$14 <= (int_32)[-1]) ){ goto $label$32 }
	*($23 + [116]) = CALL $130(*($23 + [112]), $14)
	
.LABEL $label$33
	$16 = CALL $110($0, *($0 + [24]))
	$14 = *($23 + [116])
	if ( ($14 == 0) ){ goto $label$27 }
	$2 = ( (int_64)1000 ? $16 : (int_64)($16 == 0) )
	$3 = ($0 + [320])
	$7 = ($0 + [64])
	$8 = ($0 + [68])
	$10 = ($0 + [344])
	$11 = ($0 + [348])
	$13 = ($0 + [328])
	$20 = (int_64)0
	
.LOOP $label$34:
	$18 = *($14 + [8])
	*($23 + [104]) = *($14)
	$20 = ((int_64)$20 + (int_64)1)
	$14 = *($7)
	if ( ((int_32)*($8) == (int_32)$14) ){ goto $label$35 }
	$21 = [0]
	
.LOOP $label$36:
	$16 = *(($14 + ($21 << [3])))
	*($23 + [96]) = $16
	*($23 + [64]) = ((int_64)$16 + (int_64)$15)
	CALL $44(($23 + [80]), ($23 + [136]), ($23 + [64]))
	$4 = *($23 + [84])
	if ( ($4 == 0) ){ goto $label$37 }
	if ( ((int_64)*($23 + [64]) != (int_64)((int_64)*($4 + [48]) + (int_64)*($4 + [56]))) ){ goto $label$37 }
	if ( ($4 == 0) ){ goto $label$37 }
	$9 = ($4 + [24])
	$16 = *($9)
	if ( ( (int_64)(*($4 + [16]) == 0) ? ((int_64)$16 < (int_64)0) : (int_64)($16 == 0) ) ){ goto $label$37 }
	$16 = *($4 + [32])
	if ( ((int_64)$16 < (int_64)1) ){ goto $label$37 }
	$16 = ((int_64)$16 * (int_64)1000000)
	CALL __multi3(($23 + [40]), $16, (int_64)$16 >> (int_64)63), $18, (int_64)$18 >> (int_64)63))
	CALL __udivti3(($23 + [24]), *($23 + [40]), *((($23 + [40]) + [8])), $17, (int_64)$17 >> (int_64)63))
	*($23 + [80]) = *($23 + [24])
	*($23 + [88]) = *((($23 + [24]) + [8]))
	$16 = ((int_64)*($23 + [96]) + (int_64)*($23 + [104]))
	$5 = *($10)
	$22 = *($11)
	if ( ((int_32)$22 == (int_32)$5) ){ goto $label$38 }
	$14 = ($22 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$39:
	$12 = *($14)
	if ( ((int_64)((int_64)*($12 + [8]) + (int_64)*($12)) == (int_64)$16) ){ goto $label$38 }
	$22 = $14
	$12 = ($14 + [-24])
	$14 = $12
	if ( ((int_32)($12 + $6) != (int_32)[-24]) ){ goto $label$39 }
	
.LABEL $label$38
	if ( ((int_32)$22 == (int_32)$5) ){ goto $label$44 }
	$14 = *(($22 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [32]) == (int_32)$3), [944])
	$16 = *($0)
	if ( $14 ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$44
	$14 = CALL db_find_i64(*($3), *($13), (int_64)-3020380869172259840, $16)
	if ( ((int_32)$14 <= (int_32)[-1]) ){ goto $label$42 }
	$14 = CALL $123($3, $14)
	CALL eosio_assert(((int_32)*($14 + [32]) == (int_32)$3), [944])
	$16 = *($0)
	
.LABEL $label$43
	*($23 + [64]) = ($23 + [80])
	CALL eosio_assert([1], [848])
	CALL $134($3, $14, $16, ($23 + [64]))
	goto $label$40 
	
.LABEL $label$42
	$16 = *($0)
	
.LABEL $label$41
	*((($23 + [64]) + [8])) = ($23 + [80])
	*($23 + [68]) = ($23 + [96])
	*($23 + [64]) = ($23 + [104])
	CALL $133(($23 + [56]), $3, $16, ($23 + [64]))
	
.LABEL $label$40
	$19 = *($23 + [88])
	$16 = *($9)
	if ( ( (uint_64)(*(($4 + [16])) <= *($23 + [80])) ? (uint_64)($16 <= $19) : ((int_64)$16 == (int_64)$19) ) ){ goto $label$37 }
	$16 = *($0)
	*($23 + [64]) = ($23 + [80])
	CALL eosio_assert([1], [848])
	CALL $135(*($23 + [136]), $4, $16, ($23 + [64]))
	
.LABEL $label$37
	$14 = *($7)
	$21 = ($21 + [1])
	if ( ($21 <= int_32((*($8) - $14) >> [3])) ){ goto $label$36 }
	
.LABEL $label$35
	$14 = *($23 + [156])
	$16 = *($0)
	*($23 + [80]) = ($23 + [112])
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [848])
	CALL $132($1, $14, $16, ($23 + [80]))
	if ( ((int_64)$20 == (int_64)$2) ){ goto $label$27 }
	CALL eosio_assert(((int_32)*($23 + [116]) != (int_32)[0]), [2016])
	$14 = CALL db_next_i64(*(*($23 + [116]) + [28]), ($23 + [80]))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$45 }
	$14 = CALL $130(*($23 + [112]), $14)
	*($23 + [116]) = $14
	goto $label$34 
	
.LABEL $label$45
	*($23 + [116]) = [0]
	goto $label$27 
	
.LABEL $label$32
	*($23 + [116]) = [0]
	goto $label$30 
	
.LABEL $label$31
	*($23 + [116]) = [0]
	*($23 + [112]) = $4
	
.LABEL $label$30
	$16 = *($0)
	$14 = *($23 + [156])
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [848])
	CALL $131($1, $14, $16, ($23 + [80]))
	goto $label$27 
	
.LABEL $label$29
	$4 = *($14 + [28])
	if ( ((CASTING uint_32)(uint_64 $16) <= $4) ){ goto $label$27 }
	$21 = [0]
	$14 = *($23 + [156])
	$16 = *($0)
	*($23 + [84]) = ($23 + [144])
	*($23 + [80]) = ($23 + [152])
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [848])
	CALL $127($1, $14, $16, ($23 + [80]))
	$14 = *($0 + [64])
	$7 = ($0 + [68])
	if ( ((int_32)*($7) == (int_32)$14) ){ goto $label$27 }
	$15 = (CASTING uint_64)(uint_32 $4)
	$12 = (($23 + [120]) + [8])
	$8 = ($0 + [64])
	
.LOOP $label$46:
	$16 = *(($14 + ($21 << [3])))
	*($23 + [64]) = ((int_64)$16 + (int_64)$15)
	CALL $44(($23 + [80]), ($23 + [136]), ($23 + [64]))
	$14 = *($23 + [84])
	if ( ($14 == 0) ){ goto $label$47 }
	if ( ((int_64)*($23 + [64]) != (int_64)((int_64)*($14 + [48]) + (int_64)*($14 + [56]))) ){ goto $label$47 }
	if ( ($14 == 0) ){ goto $label$47 }
	$18 = *($0)
	CALL eosio_assert([1], [848])
	CALL $128(*($23 + [136]), $14, $18, ($23 + [80]))
	
.LABEL $label$47
	*($12) = $16
	$18 = *($23 + [144])
	*($23 + [120]) = (int_64)0
	CALL eosio_assert([1], [608])
	$16 = (uint_64)*($12) >> (uint_64)(int_64)8)
	$22 = (CASTING uint_32)(uint_64 ((int_64)$18 + (int_64)$15))
	$14 = [0]
	
.LOOP $label$50:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$49 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$51 }
	
.LOOP $label$52:
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$49 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$52 }
	
.LABEL $label$51
	$4 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$50 }
	goto $label$48 
	
.LABEL $label$49
	$4 = [0]
	
.LABEL $label$48
	CALL eosio_assert($4, [672])
	*((($23 + [8]) + [8])) = *($12)
	*($23 + [8]) = *($23 + [120])
	CALL $41($0, $22, ($23 + [8]))
	$14 = *($8)
	$21 = ($21 + [1])
	if ( ($21 <= int_32((*($7) - $14) >> [3])) ){ goto $label$46 }
	goto $label$27 
	
.LABEL $label$28
	*($23 + [156]) = [0]
	*($23 + [152]) = $1
	
.LABEL $label$27
	*([0] + [4]) = ($23 + [160])
}

void .FUNC $184 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $179(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $180($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $187 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $188($0, $1, $2, CALL $204($2))
}

int_32 .FUNC $186 (int_32 $0, int_32 $1)
{
	return CALL $185($0, $1, CALL $204($1))
}

void .FUNC $180 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [2048])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [2096])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2160])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $180($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $180($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
	$7 = *(($1 + [72]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6215726811582562304, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [2048])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [2096])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2160])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $180($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $180($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $179(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $191($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $180($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $180($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$2 = *($1)
	CALL $192($4, ($1 + [8]))
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$1 = (*(*($0)) + int_32($3 >> [1]))
	$0 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	CALL $192(($4 + [16]), $4)
	CALL void $1((int_32 $2), (int_64 ($4 + [16])), (int_32 $0))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $180(*($4 + [24]))
	
.LABEL $label$2
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	CALL $180(*($4 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [32])
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [1184])
	CALL memcpy(*($0 + [4]), ($1 + [28]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [1440])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $179([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [1472])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [1472])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $114(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $180($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_64 .FUNC $110 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *(($0 + [464]))
	$6 = *(($0 + [468]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [440])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$5 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$4), [944])
	if ( $5 ){ goto $label$4 }
	return (int_64)0
	
.LABEL $label$5
	$5 = CALL db_find_i64(*(($0 + [440])), *(($0 + [448])), (int_64)7235159551874301952, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $113($4, $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$4), [944])
	
.LABEL $label$4
	return *($5 + [8])
	
.LABEL $label$3
	return (int_64)0
}

void .FUNC $111 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [1200])
	*(($4 = CALL $179([48])) + [32]) = $1
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = [0]
	*($4 + [8]) = [0]
	*($4 + [28]) = *(*($3))
	*($8 + [56]) = (($8 + [16]) + [25])
	*($8 + [52]) = ($8 + [16])
	*($8 + [48]) = ($8 + [16])
	CALL $112(($8 + [48]), $4)
	$5 = *($4)
	*($4 + [36]) = CALL db_store_i64(*($1 + [8]), (int_64)-6215726805501446784, $2, $5, ($8 + [16]), [25])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [48]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [36])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [48]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $60(($1 + [24]), ($8 + [48]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [48])
	*($8 + [48]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $180($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [64])
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [2048])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [2096])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2160])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $180($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $180($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [2048])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [2096])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2160])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $180($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $180($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [120]))
	$7 = *($1 + [124])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4292915607302569984, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $29 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [160]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	*(($9 + [32])) = [0]
	*($9 + [16]) = (int_64)-1
	*($9 + [24]) = (int_64)0
	$6 = *($0)
	*($9) = $6
	*($9 + [8]) = $6
	$4 = CALL db_find_i64($6, $6, (int_64)4344997686403923968, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $106($9, $4)
	CALL eosio_assert(((int_32)*($4 + [12]) == (int_32)$9), [944])
	CALL eosio_assert([1], [1968])
	CALL eosio_assert([1], [2016])
	$2 = CALL db_next_i64(*($4 + [16]), ($9 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	CALL $106($9, $2)
	
.LABEL $label$6
	CALL $107($9, $4)
	
.LABEL $label$5
	$0 = *($9 + [24])
	if ( ($0 == 0) ){ goto $label$7 }
	$3 = ($9 + [28])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $180($2)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($9 + [24]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $0
	
.LABEL $label$8
	*($3) = $0
	CALL $180($4)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $28 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	*($10 + [56]) = $1
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [896]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( (CALL has_auth($7) == 0) ){ goto $label$6 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [896]
	$7 = (int_64)0
	
.LOOP $label$7:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$8 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$2 = ($2 + [165])
	goto $label$9 
	
.LABEL $label$10
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$7 }
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [2224]
	$9 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$16 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$2 = ($2 + [165])
	goto $label$14 
	
.LABEL $label$16
	$5 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$12
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$5 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$11 }
	CALL require_auth2($7, $9)
	goto $label$5 
	
.LABEL $label$6
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [160]
	$7 = (int_64)0
	
.LOOP $label$17:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$18 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$2 = ($2 + [165])
	goto $label$19 
	
.LABEL $label$20
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$18
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$17 }
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [2224]
	$9 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$26 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$2 = ($2 + [165])
	goto $label$24 
	
.LABEL $label$26
	$5 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$22
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$5 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$21 }
	CALL require_auth2($7, $9)
	
.LABEL $label$5
	*(($10 + [48])) = [0]
	*($10 + [32]) = (int_64)-1
	*($10 + [40]) = (int_64)0
	$6 = *($0)
	*($10 + [16]) = $6
	*($10 + [24]) = $6
	$4 = CALL db_find_i64($6, $6, (int_64)4344997686403923968, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$29 }
	CALL eosio_assert(((int_32)*(CALL $106(($10 + [16]), $4) + [12]) == (int_32)($10 + [16])), [944])
	$0 = *($10 + [40])
	if ( $0 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$6 = *($0)
	*($10 + [8]) = ($10 + [56])
	CALL $109($10, ($10 + [16]), $6, ($10 + [8]))
	$0 = *($10 + [40])
	if ( ($0 == 0) ){ goto $label$27 }
	
.LABEL $label$28
	$3 = ($10 + [44])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$31 }
	
.LOOP $label$32:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$33 }
	CALL $180($2)
	
.LABEL $label$33
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$32 }
	$4 = *(($10 + [40]))
	goto $label$30 
	
.LABEL $label$31
	$4 = $0
	
.LABEL $label$30
	*($3) = $0
	CALL $180($4)
	
.LABEL $label$27
	*([0] + [4]) = ($10 + [64])
}

void .FUNC $21 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_64 $26
	int_64 $27
	int_64 $28
	int_32 $29
	$29 = (*([0] + [4]) - [160])
	*([0] + [4]) = $29
	CALL require_auth($1)
	$22 = [0]
	$10 = CALL db_lowerbound_i64(*($0 + [200]), *(($0 + [208])), (int_64)-6215726805501446784, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$22 = CALL $40(($0 + [200]), $10)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$22 != (int_32)[0]), [2272])
	CALL eosio_assert((*($22 + [8]) == 0), [2304])
	$2 = ($0 + [280])
	$22 = ($0 + [288])
	$10 = CALL db_lowerbound_i64(*($0 + [280]), *($22), (int_64)-6215726805411567344, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $42($2, $10)
	
.LABEL $label$2
	$22 = CALL db_lowerbound_i64(*($2), *($22), (int_64)-6215726805411567344, (int_64)0)
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + [320])
	$7 = CALL $42($2, $22)
	$6 = ($29 + [108])
	$4 = (($29 + [16]) | [1])
	$14 = ($0 + [344])
	$15 = ($0 + [348])
	$16 = ($0 + [328])
	$17 = (($29 + [16]) + [8])
	$5 = (($29 + [32]) + [32])
	$18 = ($5 + [4])
	$19 = ($29 + [100])
	$20 = ($29 + [72])
	
.LOOP $label$5:
	$24 = ((int_64)*($7 + [24]) + (int_64)$1)
	$8 = *($14)
	$21 = *($15)
	if ( ((int_32)$21 == (int_32)$8) ){ goto $label$6 }
	$22 = ($21 + [-24])
	$9 = ([0] - $8)
	
.LOOP $label$7:
	$10 = *($22)
	if ( ((int_64)((int_64)*($10 + [8]) + (int_64)*($10)) == (int_64)$24) ){ goto $label$6 }
	$21 = $22
	$10 = ($22 + [-24])
	$22 = $10
	if ( ((int_32)($10 + $9) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$21 == (int_32)$8) ){ goto $label$9 }
	$21 = *(($21 + [-24]))
	CALL eosio_assert(((int_32)*($21 + [32]) == (int_32)$3), [944])
	goto $label$8 
	
.LABEL $label$9
	$21 = [0]
	$22 = CALL db_find_i64(*($3), *($16), (int_64)-3020380869172259840, $24)
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$8 }
	$21 = CALL $123($3, $22)
	CALL eosio_assert(((int_32)*($21 + [32]) == (int_32)$3), [944])
	
.LABEL $label$8
	$24 = (int_64)0
	$23 = (int_64)59
	$22 = [112]
	$26 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$24 > (uint_64)(int_64)10) ){ goto $label$15 }
	$10 = *($22)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$10 = ($10 + [165])
	goto $label$13 
	
.LABEL $label$15
	$25 = (int_64)0
	if ( ((int_64)$24 == (int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$11
	$22 = ($22 + [1])
	$23 = ((int_64)$23 + (int_64)-5)
	$26 = ((int_64)$25 | (int_64)$26)
	$24 = ((int_64)$24 + (int_64)1)
	if ( ((int_64)$24 != (int_64)13) ){ goto $label$10 }
	$13 = *($21 + [8])
	if ( ((int_64)$13 == (int_64)1397703940) ){ goto $label$16 }
	$24 = (int_64)0
	$25 = (int_64)59
	$22 = [144]
	$26 = (int_64)0
	
.LOOP $label$17:
	$23 = (int_64)0
	if ( ((uint_64)$24 > (uint_64)(int_64)11) ){ goto $label$18 }
	$10 = *($22)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$10 = ($10 + [165])
	goto $label$19 
	
.LABEL $label$20
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$23 = ((int_64)(CASTING uint_64)(uint_32 ($10 & [31])) << (int_64)((int_64)$25 & (int_64)4294967295))
	
.LABEL $label$18
	$22 = ($22 + [1])
	$24 = ((int_64)$24 + (int_64)1)
	$26 = ((int_64)$23 | (int_64)$26)
	$25 = ((int_64)$25 + (int_64)-5)
	if ( ((int_64)$25 != (int_64)-6) ){ goto $label$17 }
	
.LABEL $label$16
	if ( ($21 == 0) ){ goto $label$21 }
	CALL __udivti3($29, *(($21 + [16])), *(($21 + [24])), (int_64)1000000, (int_64)0)
	$11 = *($29)
	*($29 + [120]) = $11
	if ( (int_64)($11 == 0) ){ goto $label$21 }
	$12 = *($0)
	$24 = (int_64)0
	$23 = (int_64)59
	$22 = [592]
	$27 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$24 > (uint_64)(int_64)5) ){ goto $label$27 }
	$10 = *($22)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$10 = ($10 + [165])
	goto $label$25 
	
.LABEL $label$27
	$25 = (int_64)0
	if ( ((uint_64)$24 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$23
	$22 = ($22 + [1])
	$24 = ((int_64)$24 + (int_64)1)
	$27 = ((int_64)$25 | (int_64)$27)
	$23 = ((int_64)$23 + (int_64)-5)
	if ( ((int_64)$23 != (int_64)-6) ){ goto $label$22 }
	$24 = (int_64)0
	$23 = (int_64)59
	$22 = [128]
	$28 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$24 > (uint_64)(int_64)7) ){ goto $label$33 }
	$10 = *($22)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$10 = ($10 + [165])
	goto $label$31 
	
.LABEL $label$33
	$25 = (int_64)0
	if ( ((uint_64)$24 <= (uint_64)(int_64)11) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$29
	$22 = ($22 + [1])
	$24 = ((int_64)$24 + (int_64)1)
	$28 = ((int_64)$25 | (int_64)$28)
	$23 = ((int_64)$23 + (int_64)-5)
	if ( ((int_64)$23 != (int_64)-6) ){ goto $label$28 }
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [608])
	$24 = (uint_64)$13 >> (uint_64)(int_64)8)
	$22 = [0]
	
.LOOP $label$36:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $24) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$35 }
	$24 = (uint_64)$24 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$24) & (int_64)255) != (int_64)0) ){ goto $label$37 }
	
.LOOP $label$38:
	$24 = (uint_64)$24 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$24) & (int_64)255) != (int_64)0) ){ goto $label$35 }
	$22 = ($22 + [1])
	if ( ((int_32)$22 < (int_32)[7]) ){ goto $label$38 }
	
.LABEL $label$37
	$10 = [1]
	$22 = ($22 + [1])
	if ( ((int_32)$22 < (int_32)[7]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$35
	$10 = [0]
	
.LABEL $label$34
	CALL eosio_assert($10, [672])
	*($17) = [0]
	*($29 + [16]) = (int_64)0
	$22 = CALL strlen([2336])
	if ( ((uint_32)$22 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$22 >= (uint_32)[11]) ){ goto $label$41 }
	*($29 + [16]) = ($22 << [1])
	$10 = $4
	if ( $22 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$9 = (($22 + [16]) & [-16])
	$10 = CALL $179($9)
	*($17) = $10
	*($29 + [16]) = ($9 | [1])
	*($29 + [20]) = $22
	
.LABEL $label$40
	CALL memcpy($10, [2336], $22)
	
.LABEL $label$39
	*(($10 + $22)) = [0]
	*((($29 + [32]) + [8])) = $1
	*((($29 + [32]) + [16])) = $11
	*((($29 + [32]) + [24])) = $13
	*($18) = *($29 + [20])
	*(($5 + [8])) = *($17)
	*($29 + [32]) = *($0)
	*($5) = *($29 + [16])
	*($29 + [16]) = [0]
	*($29 + [20]) = [0]
	*($17) = [0]
	*((($29 + [80]) + [8])) = $28
	*($29 + [80]) = $26
	*(($10 = (($29 + [80]) + [16]))) = [0]
	*($19) = [0]
	*(($8 = (($29 + [80]) + [24]))) = [0]
	$22 = CALL $179([16])
	*($10) = $22
	*($22) = $12
	*($22 + [8]) = $27
	*($6) = [0]
	*(($9 = (($29 + [80]) + [32]))) = [0]
	$22 = ($22 + [16])
	*($8) = $22
	*($19) = $22
	*((($29 + [80]) + [36])) = [0]
	$22 = *($5)
	$8 = ( *((($29 + [32]) + [36])) ? uint_32($22 >> [1]) : ($22 & [1]) )
	$22 = ($8 + [32])
	$24 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$42:
	$22 = ($22 + [1])
	$24 = (uint_64)$24 >> (uint_64)(int_64)7
	if ( ((int_64)$24) != (int_64)0) ){ goto $label$42 }
	if ( ($22 == 0) ){ goto $label$44 }
	CALL $69($6, $22)
	$8 = *($9)
	$22 = *($6)
	goto $label$43 
	
.LABEL $label$44
	$8 = [0]
	$22 = [0]
	
.LABEL $label$43
	*((($29 + [144]) + [8])) = $8
	*($29 + [148]) = $22
	*($29 + [144]) = $22
	*($29 + [128]) = ($29 + [144])
	*($29 + [136]) = ($29 + [32])
	CALL $124(($29 + [136]), ($29 + [128]))
	CALL $36(($29 + [144]), ($29 + [80]))
	$22 = *($29 + [144])
	CALL send_inline($22, (*($29 + [148]) - $22))
	$22 = *($29 + [144])
	if ( ($22 == 0) ){ goto $label$45 }
	*($29 + [148]) = $22
	CALL $180($22)
	
.LABEL $label$45
	$22 = *($6)
	if ( ($22 == 0) ){ goto $label$46 }
	*($9) = $22
	CALL $180($22)
	
.LABEL $label$46
	$22 = *($10)
	if ( ($22 == 0) ){ goto $label$47 }
	*($19) = $22
	CALL $180($22)
	
.LABEL $label$47
	if ( ((*($5) & [1]) == 0) ){ goto $label$48 }
	CALL $180(*($20))
	
.LABEL $label$48
	if ( ((*($29 + [16]) & [1]) == 0) ){ goto $label$49 }
	CALL $180(*($17))
	
.LABEL $label$49
	$24 = *($0)
	*($29 + [32]) = ($29 + [120])
	CALL eosio_assert([1], [848])
	CALL $125($3, $21, $24, ($29 + [32]))
	
.LABEL $label$21
	CALL eosio_assert([1], [2016])
	$22 = CALL db_next_i64(*($7 + [36]), ($29 + [32]))
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$4 }
	$7 = CALL $42($2, $22)
	goto $label$5 
	
.LABEL $label$4
	*([0] + [4]) = ($29 + [160])
	return (unreachable)
	
.LABEL $label$3
	CALL $181(($29 + [16]))
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $23 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [32])
	*([0] + [4]) = $15
	*($15 + [16]) = $2
	$2 = (int_64)0
	$10 = (int_64)59
	$9 = [160]
	$11 = (int_64)0
	
.LOOP $label$1:
	$12 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$2 }
	$5 = *($9)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$5 = ($5 + [165])
	goto $label$3 
	
.LABEL $label$4
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$2
	$9 = ($9 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($11)
	$7 = *(($0 + [224]))
	$14 = *(($0 + [228]))
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$5 }
	$9 = ($14 + [-24])
	$6 = ([0] - $7)
	
.LOOP $label$6:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$5 }
	$14 = $9
	$5 = ($9 + [-24])
	$9 = $5
	if ( ((int_32)($5 + $6) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$3 = ($0 + [200])
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$8 }
	$13 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [32]) == (int_32)$3), [944])
	goto $label$7 
	
.LABEL $label$8
	$13 = [0]
	$9 = CALL db_find_i64(*(($0 + [200])), *(($0 + [208])), (int_64)-6215726805501446784, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$7 }
	$13 = CALL $40($3, $9)
	CALL eosio_assert(((int_32)*($13 + [32]) == (int_32)$3), [944])
	
.LABEL $label$7
	$9 = [0]
	$4 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($4, [2240])
	*($15 + [8]) = ($0 + [360])
	$5 = *($0 + [64])
	$6 = ($0 + [68])
	if ( ((int_32)*($6) == (int_32)$5) ){ goto $label$9 }
	$7 = ($13 + [28])
	$8 = ($0 + [64])
	$14 = [0]
	
.LOOP $label$10:
	*($15) = ((int_64)*($7) + (int_64)*(($5 + $9)))
	CALL $44(($15 + [24]), ($15 + [8]), $15)
	$5 = *($15 + [28])
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_64)*($15) != (int_64)((int_64)*($5 + [48]) + (int_64)*($5 + [56]))) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	$2 = *($0)
	*($15 + [24]) = ($15 + [16])
	CALL eosio_assert([1], [848])
	CALL $121(*($15 + [8]), $5, $2, ($15 + [24]))
	
.LABEL $label$11
	$9 = ($9 + [8])
	$5 = *($8)
	$14 = ($14 + [1])
	if ( ($14 <= int_32((*($6) - $5) >> [3])) ){ goto $label$10 }
	
.LABEL $label$9
	$2 = *($0)
	*($15 + [24]) = ($15 + [16])
	CALL eosio_assert($4, [848])
	CALL $120($3, $13, $2, ($15 + [24]))
	*([0] + [4]) = ($15 + [32])
}

void .FUNC $22 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [96])
	*([0] + [4]) = $17
	$10 = (int_64)0
	$9 = (int_64)59
	$15 = [160]
	$11 = (int_64)0
	
.LOOP $label$1:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$2 }
	$14 = *($15)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$14 = ($14 + [165])
	goto $label$3 
	
.LABEL $label$4
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($14 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$2
	$15 = ($15 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($11)
	$15 = CALL db_lowerbound_i64(*($0 + [280]), *(($0 + [288])), (int_64)-6215726805411567344, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + [280])
	$14 = CALL $42($2, $15)
	
.LOOP $label$6:
	CALL eosio_assert([1], [1968])
	CALL eosio_assert([1], [2016])
	$15 = [0]
	$13 = CALL db_next_i64(*($14 + [36]), ($17 + [48]))
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$7 }
	$15 = CALL $42($2, $13)
	
.LABEL $label$7
	CALL $122($2, $14)
	$14 = $15
	if ( $15 ){ goto $label$6 }
	
.LABEL $label$5
	$15 = CALL db_lowerbound_i64(*($0 + [360]), *(($0 + [368])), (int_64)-6215726811582562304, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$8 }
	$2 = ($0 + [360])
	$14 = CALL $53($2, $15)
	
.LOOP $label$9:
	CALL eosio_assert([1], [1968])
	CALL eosio_assert([1], [2016])
	$15 = [0]
	$13 = CALL db_next_i64(*($14 + [68]), ($17 + [48]))
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$10 }
	$15 = CALL $53($2, $13)
	
.LABEL $label$10
	CALL $116($2, $14)
	$14 = $15
	if ( $15 ){ goto $label$9 }
	
.LABEL $label$8
	$15 = CALL db_lowerbound_i64(*($0 + [400]), *(($0 + [408])), (int_64)4292915607302569984, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$11 }
	$1 = ($0 + [400])
	$13 = CALL $66($1, $15)
	$3 = (($17 + [48]) + [8])
	$4 = (($17 + [48]) + [16])
	$5 = (($17 + [48]) + [24])
	$6 = (($17 + [48]) + [32])
	$8 = (($17 + [48]) + [28])
	
.LOOP $label$12:
	$10 = *($13)
	*($3) = $10
	*($4) = (int_64)-1
	*($5) = (int_64)0
	*($6) = [0]
	$9 = *($0)
	*($17 + [48]) = $9
	$15 = CALL db_lowerbound_i64($9, $10, (int_64)4292920740433641472, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$13 }
	$14 = CALL $93(($17 + [48]), $15)
	
.LOOP $label$14:
	CALL eosio_assert([1], [1968])
	CALL eosio_assert([1], [2016])
	$15 = [0]
	$2 = CALL db_next_i64(*($14 + [44]), ($17 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$15 }
	$15 = CALL $93(($17 + [48]), $2)
	
.LABEL $label$15
	CALL $117(($17 + [48]), $14)
	$14 = $15
	if ( $15 ){ goto $label$14 }
	
.LABEL $label$13
	*((($17 + [8]) + [8])) = $10
	*((($17 + [8]) + [16])) = (int_64)-1
	*(($7 = (($17 + [8]) + [24]))) = (int_64)0
	*((($17 + [8]) + [32])) = [0]
	$9 = *($0)
	*($17 + [8]) = $9
	$15 = CALL db_lowerbound_i64($9, $10, (int_64)4292927555353182208, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$16 }
	$14 = CALL $85(($17 + [8]), $15)
	
.LOOP $label$17:
	CALL eosio_assert([1], [1968])
	CALL eosio_assert([1], [2016])
	$15 = [0]
	$2 = CALL db_next_i64(*($14 + [52]), ($17 + [88]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$18 }
	$15 = CALL $85(($17 + [8]), $2)
	
.LABEL $label$18
	CALL $118(($17 + [8]), $14)
	$14 = $15
	if ( $15 ){ goto $label$17 }
	
.LABEL $label$16
	$16 = [0]
	$15 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($15, [1968])
	CALL eosio_assert($15, [2016])
	$15 = CALL db_next_i64(*($13 + [120]), ($17 + [88]))
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$19 }
	$16 = CALL $66($1, $15)
	
.LABEL $label$19
	CALL $119($1, $13)
	$2 = *($7)
	if ( ($2 == 0) ){ goto $label$20 }
	$13 = (($17 + [8]) + [28])
	$15 = *($13)
	if ( ((int_32)$15 == (int_32)$2) ){ goto $label$22 }
	
.LOOP $label$23:
	$15 = ($15 + [-24])
	$14 = *($15)
	*($15) = [0]
	if ( ($14 == 0) ){ goto $label$24 }
	CALL $180($14)
	
.LABEL $label$24
	if ( ((int_32)$2 != (int_32)$15) ){ goto $label$23 }
	$15 = *($7)
	goto $label$21 
	
.LABEL $label$22
	$15 = $2
	
.LABEL $label$21
	*($13) = $2
	CALL $180($15)
	
.LABEL $label$20
	$2 = *($5)
	if ( ($2 == 0) ){ goto $label$25 }
	$15 = *($8)
	if ( ((int_32)$15 == (int_32)$2) ){ goto $label$27 }
	
.LOOP $label$28:
	$15 = ($15 + [-24])
	$14 = *($15)
	*($15) = [0]
	if ( ($14 == 0) ){ goto $label$29 }
	CALL $180($14)
	
.LABEL $label$29
	if ( ((int_32)$2 != (int_32)$15) ){ goto $label$28 }
	$15 = *($5)
	goto $label$26 
	
.LABEL $label$27
	$15 = $2
	
.LABEL $label$26
	*($8) = $2
	CALL $180($15)
	
.LABEL $label$25
	$13 = $16
	if ( $16 ){ goto $label$12 }
	
.LABEL $label$11
	*([0] + [4]) = ($17 + [96])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [1472])
	CALL memcpy(($2 + [8]), $1, [8])
	*($2 + [52]) = ($1 + [8])
	CALL $104(($2 + [48]), (($2 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $115(($2 + [48]), ($2 + [8]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $180(*(($2 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

void .FUNC $24 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [96])
	*([0] + [4]) = $19
	$11 = (int_64)0
	$10 = (int_64)59
	$17 = [896]
	$12 = (int_64)0
	
.LOOP $label$1:
	$13 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$2 }
	$16 = *($17)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$16 = ($16 + [165])
	goto $label$3 
	
.LABEL $label$4
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($16 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$2
	$17 = ($17 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$1 }
	if ( (CALL has_auth($12) == 0) ){ goto $label$6 }
	$11 = (int_64)0
	$10 = (int_64)59
	$17 = [896]
	$12 = (int_64)0
	
.LOOP $label$7:
	$13 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$8 }
	$16 = *($17)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$16 = ($16 + [165])
	goto $label$9 
	
.LABEL $label$10
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($16 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$8
	$17 = ($17 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$7 }
	$11 = (int_64)0
	$13 = (int_64)59
	$17 = [2224]
	$14 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$16 }
	$16 = *($17)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$16 = ($16 + [165])
	goto $label$14 
	
.LABEL $label$16
	$10 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$12
	$17 = ($17 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$14 = ((int_64)$10 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$11 }
	CALL require_auth2($12, $14)
	goto $label$5 
	
.LABEL $label$6
	$11 = (int_64)0
	$10 = (int_64)59
	$17 = [160]
	$12 = (int_64)0
	
.LOOP $label$17:
	$13 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$18 }
	$16 = *($17)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$16 = ($16 + [165])
	goto $label$19 
	
.LABEL $label$20
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($16 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$18
	$17 = ($17 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$17 }
	$11 = (int_64)0
	$13 = (int_64)59
	$17 = [2224]
	$14 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$26 }
	$16 = *($17)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$16 = ($16 + [165])
	goto $label$24 
	
.LABEL $label$26
	$10 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$22
	$17 = ($17 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$14 = ((int_64)$10 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$21 }
	CALL require_auth2($12, $14)
	
.LABEL $label$5
	$17 = *($2)
	$16 = CALL strlen([352])
	if ( ((int_32)$16 != (int_32)( *($2 + [4]) ? uint_32($17 >> [1]) : ($17 & [1]) )) ){ goto $label$29 }
	$17 = [0]
	if ( (CALL $189($2, [0], [-1], [352], $16) == 0) ){ goto $label$28 }
	
.LABEL $label$29
	$17 = *($2)
	$16 = CALL strlen([368])
	if ( ((int_32)$16 != (int_32)( *(($2 + [4])) ? uint_32($17 >> [1]) : ($17 & [1]) )) ){ goto $label$27 }
	$15 = [0]
	if ( CALL $189($2, [0], [-1], [368], $16) ){ goto $label$27 }
	$3 = ($0 + [400])
	$17 = CALL db_lowerbound_i64(*($0 + [400]), *(($0 + [408])), (int_64)4292915607302569984, (int_64)0)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$30 }
	$15 = CALL $66($3, $17)
	
.LABEL $label$30
	$4 = (($19 + [48]) + [8])
	$5 = (($19 + [48]) + [16])
	$6 = (($19 + [48]) + [24])
	$7 = (($19 + [48]) + [32])
	$9 = (($19 + [48]) + [28])
	
.LOOP $label$31:
	if ( ($15 == 0) ){ goto $label$27 }
	$11 = *($15)
	if ( ((int_64)*($15 + [8]) != (int_64)1) ){ goto $label$36 }
	*($4) = $11
	*($5) = (int_64)-1
	*($6) = (int_64)0
	*($7) = [0]
	$10 = *($0)
	*($19 + [48]) = $10
	$17 = CALL db_lowerbound_i64($10, $11, (int_64)4292920740433641472, (int_64)0)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$37 }
	$16 = CALL $93(($19 + [48]), $17)
	
.LOOP $label$38:
	CALL eosio_assert([1], [1968])
	CALL eosio_assert([1], [2016])
	$17 = [0]
	$2 = CALL db_next_i64(*($16 + [44]), ($19 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$39 }
	$17 = CALL $93(($19 + [48]), $2)
	
.LABEL $label$39
	CALL $117(($19 + [48]), $16)
	$16 = $17
	if ( $17 ){ goto $label$38 }
	
.LABEL $label$37
	*((($19 + [8]) + [8])) = $11
	*((($19 + [8]) + [16])) = (int_64)-1
	*(($8 = (($19 + [8]) + [24]))) = (int_64)0
	*((($19 + [8]) + [32])) = [0]
	$10 = *($0)
	*($19 + [8]) = $10
	$17 = CALL db_lowerbound_i64($10, $11, (int_64)4292927555353182208, (int_64)0)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$40 }
	$16 = CALL $85(($19 + [8]), $17)
	
.LOOP $label$41:
	CALL eosio_assert([1], [1968])
	CALL eosio_assert([1], [2016])
	$17 = [0]
	$2 = CALL db_next_i64(*($16 + [52]), ($19 + [88]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$42 }
	$17 = CALL $85(($19 + [8]), $2)
	
.LABEL $label$42
	CALL $118(($19 + [8]), $16)
	$16 = $17
	if ( $17 ){ goto $label$41 }
	
.LABEL $label$40
	CALL eosio_assert([1], [1968])
	CALL eosio_assert([1], [2016])
	$18 = [0]
	$17 = CALL db_next_i64(*($15 + [120]), ($19 + [88]))
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$43 }
	$18 = CALL $66($3, $17)
	
.LABEL $label$43
	CALL $119($3, $15)
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$33 }
	$15 = (($19 + [8]) + [28])
	$17 = *($15)
	if ( ((int_32)$17 == (int_32)$2) ){ goto $label$35 }
	
.LOOP $label$44:
	$17 = ($17 + [-24])
	$16 = *($17)
	*($17) = [0]
	if ( ($16 == 0) ){ goto $label$45 }
	CALL $180($16)
	
.LABEL $label$45
	if ( ((int_32)$2 != (int_32)$17) ){ goto $label$44 }
	$17 = *($8)
	goto $label$34 
	
.LABEL $label$36
	CALL eosio_assert([1], [2016])
	$17 = *($15 + [120])
	$15 = [0]
	$17 = CALL db_next_i64($17, ($19 + [48]))
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$32 }
	$15 = CALL $66($3, $17)
	goto $label$32 
	
.LABEL $label$35
	$17 = $2
	
.LABEL $label$34
	*($15) = $2
	CALL $180($17)
	
.LABEL $label$33
	$2 = *($6)
	if ( ($2 == 0) ){ goto $label$46 }
	$17 = *($9)
	if ( ((int_32)$17 == (int_32)$2) ){ goto $label$48 }
	
.LOOP $label$49:
	$17 = ($17 + [-24])
	$16 = *($17)
	*($17) = [0]
	if ( ($16 == 0) ){ goto $label$50 }
	CALL $180($16)
	
.LABEL $label$50
	if ( ((int_32)$2 != (int_32)$17) ){ goto $label$49 }
	$17 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$17 = $2
	
.LABEL $label$47
	*($9) = $2
	CALL $180($17)
	
.LABEL $label$46
	$15 = $18
	
.LABEL $label$32
	if ( ((int_64)$11 != (int_64)$1) ){ goto $label$31 }
	goto $label$27 
	
.LABEL $label$28
	$2 = ($0 + [360])
	$16 = CALL db_lowerbound_i64(*($0 + [360]), *(($0 + [368])), (int_64)-6215726811582562304, (int_64)0)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$51 }
	$17 = CALL $53($2, $16)
	
.LABEL $label$51
	
.LOOP $label$52:
	if ( ($17 == 0) ){ goto $label$27 }
	$11 = *($17)
	if ( ((int_32)*($17 + [8]) != (int_32)[1]) ){ goto $label$53 }
	CALL eosio_assert([1], [1968])
	CALL eosio_assert([1], [2016])
	$16 = [0]
	$15 = CALL db_next_i64(*($17 + [68]), ($19 + [48]))
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$54 }
	$16 = CALL $53($2, $15)
	
.LABEL $label$54
	CALL $116($2, $17)
	$17 = $16
	if ( ((int_64)$11 != (int_64)$1) ){ goto $label$52 }
	goto $label$27 
	
.LABEL $label$53
	CALL eosio_assert([1], [2016])
	$16 = *($17 + [68])
	$17 = [0]
	$16 = CALL db_next_i64($16, ($19 + [48]))
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$55 }
	$17 = CALL $53($2, $16)
	
.LABEL $label$55
	if ( ((int_64)$11 != (int_64)$1) ){ goto $label$52 }
	
.LABEL $label$27
	*([0] + [4]) = ($19 + [96])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [36]) = $1
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + $3)
	CALL $104(($5 + [32]), $5)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	CALL $192(($5 + [16]), $5)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL $192(($5 + [32]), ($5 + [16]))
	CALL void $1((int_32 ($5 + [32])), (int_32 $4))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $180(*($5 + [40]))
	
.LABEL $label$6
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $180(*($5 + [24]))
	
.LABEL $label$7
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $180(*(($5 + [8])))
	
.LABEL $label$8
	*([0] + [4]) = ($5 + [48])
	return [1]
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [160]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($6)
	$5 = CALL $110($0, *($0 + [16]))
	$5 = ( (int_64)86400 ? $5 : (int_64)($5 == 0) )
	*($8 + [12]) = (CASTING uint_32)(float_64 ((float_64)((float_64)(CASTING float_64)(uint_64 $5) * (float_64)((float_64)CALL floor((CASTING float_64)(uint_64 ((uint_64)((int_64)((int_64)((uint_64)CALL $fimport$7() / (uint_64)(int_64)1000000) + (int_64)2752554496) & (int_64)4294967295) / (uint_64)$5))) + (float_64)(float_64)1)) + (float_64)(float_64)1542412800))
	$3 = ($0 + [200])
	$2 = CALL db_lowerbound_i64(*($0 + [200]), *(($0 + [208])), (int_64)-6215726805501446784, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	CALL $40($3, $2)
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0)
	*($8 + [8]) = ($8 + [12])
	CALL $111($8, $3, $5, ($8 + [8]))
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1472])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1472])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [1472])
	CALL memcpy(($1 + [72]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $179(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $191($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $180($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $180($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1472])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1472])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [1472])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [1472])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $104(*($1), *($0 + [12]))
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [608])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [672])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $103(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1952])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $69($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [1472])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $105($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $184($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $179($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $184($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $180($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $181($7)
	return (unreachable)
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [12]) == (int_32)$0), [2048])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [2096])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2160])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $180($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $180($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [16]))
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [1440])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $179([24])) + [12]) = $0
	*($6) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [1472])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [1472])
	CALL memcpy(($6 + [8]), ($7 + [8]), [4])
	*($6 + [16]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [16])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $108(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $180($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $109 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [1200])
	*(($4 = CALL $179([24])) + [12]) = $1
	*($4) = (int_64)0
	*($4) = *(*($3))
	*($4 + [8]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert([1], [1184])
	CALL memcpy(($8 + [16]), $4, [8])
	CALL eosio_assert([1], [1184])
	CALL memcpy((($8 + [16]) | [8]), ($4 + [8]), [4])
	$5 = *($4)
	*($4 + [16]) = CALL db_store_i64(*($1 + [8]), (int_64)4344997686403923968, $2, $5, ($8 + [16]), [12])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [8]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [16])
	*($8 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [8]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $108(($1 + [24]), ($8 + [8]), ($8 + [16]), ($8 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [8])
	*($8 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $180($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $108 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $179(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $191($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $180($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $180($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [1200])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $179([128])
	CALL $62($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [120])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $63(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $180($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [160])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [1008])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1056])
	*($5 + [136]) = *($1 + [8])
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [1120])
	*($5 + [128]) = ($5 + [108])
	*($5 + [124]) = $5
	*($5 + [120]) = $5
	CALL $61(($5 + [120]), $1)
	CALL db_update_i64(*($1 + [120]), $2, $5, [108])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [152]) = *(($1 + [8]))
	if ( (CALL memcmp(($5 + [136]), ($5 + [152]), [8]) == 0) ){ goto $label$2 }
	$3 = *($1 + [124])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4292915607302569984, ($5 + [144]), $4)
	*(($1 + [124])) = $3
	
.LABEL $label$3
	CALL db_idx64_update($3, $2, ($5 + [152]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [160])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $69($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [1184])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [1184])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $71(CALL $70($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)4292915607302569984, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [116]) == (int_32)$4), [944])
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$8 = CALL db_find_i64(*($4), *($4 + [8]), (int_64)4292915607302569984, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $66($4, $8)
	CALL eosio_assert(((int_32)*($2 + [116]) == (int_32)$4), [944])
	
.LABEL $label$4
	*($2 + [124]) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $34 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [160])
	*([0] + [4]) = $13
	$7 = CALL is_account($1)
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$1 }
	$4 = *($0 + [56])
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [144]
	$10 = (int_64)0
	
.LOOP $label$2:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$3 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$3
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$2 }
	*(($13 + [136])) = [0]
	*($13 + [120]) = (int_64)-1
	$12 = (uint_64)$4 >> (uint_64)(int_64)8
	*($13 + [112]) = $12)
	*($13 + [104]) = $10
	*($13 + [128]) = (int_64)0
	$7 = CALL db_lowerbound_i64($10, $12, (int_64)-4157508551318700032, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$9 = *(CALL $74(($13 + [104]), $7))
	$6 = ( (int_64))((int_64)3000000000000 - $9) ? $2 : ((uint_64)((int_64)$9 + (int_64)$2) > (uint_64)(int_64)3000000000000) 
	if ( ((int_64)$6) < (int_64)1) ){ goto $label$6 }
	$2 = *($0)
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [592]
	$10 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$12 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$12
	$8 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$8
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$7 }
	*($13 + [56]) = $10
	*($13 + [48]) = $2
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [144]
	$10 = (int_64)0
	
.LOOP $label$13:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$14 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$5 = ($5 + [165])
	goto $label$15 
	
.LABEL $label$16
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$14
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$13 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [1488]
	$2 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$9 > (uint_64)(int_64)4) ){ goto $label$22 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$5 = ($5 + [165])
	goto $label$20 
	
.LABEL $label$22
	$8 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$18
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$2 = ((int_64)$8 | (int_64)$2)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$17 }
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [608])
	$7 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	
.LOOP $label$27:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$27 }
	
.LABEL $label$26
	$5 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$5 = [0]
	
.LABEL $label$23
	CALL eosio_assert($5, [672])
	*(($13 + [24])) = $4
	*($13 + [16]) = $6
	*($13 + [8]) = $1
	CALL $192(($13 + [32]), $3)
	$7 = CALL $75(($13 + [64]), ($13 + [48]), $10, $2, ($13 + [8]))
	CALL $36(($13 + [144]), $7)
	$5 = *($13 + [144])
	CALL send_inline($5, (*($13 + [148]) - $5))
	$5 = *($13 + [144])
	if ( ($5 == 0) ){ goto $label$28 }
	*($13 + [148]) = $5
	CALL $180($5)
	
.LABEL $label$28
	$5 = *($7 + [28])
	if ( ($5 == 0) ){ goto $label$29 }
	*(($7 + [32])) = $5
	CALL $180($5)
	
.LABEL $label$29
	$5 = *($7 + [16])
	if ( ($5 == 0) ){ goto $label$30 }
	*(($7 + [20])) = $5
	CALL $180($5)
	
.LABEL $label$30
	if ( ((*($13 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $180(*(($13 + [40])))
	
.LABEL $label$6
	$0 = *($13 + [128])
	if ( ($0 == 0) ){ goto $label$1 }
	$3 = ($13 + [132])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$32 }
	
.LOOP $label$33:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$34 }
	CALL $180($5)
	
.LABEL $label$34
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$33 }
	$7 = *(($13 + [128]))
	goto $label$31 
	
.LABEL $label$32
	$7 = $0
	
.LABEL $label$31
	*($3) = $0
	CALL $180($7)
	
.LABEL $label$1
	*([0] + [4]) = ($13 + [160])
}

int_32 .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $179([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $69($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $72(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $102($0, $2, $1)
	if ( ($1 <= [513]) ){ goto $label$3 }
	CALL free($2)
	
.LABEL $label$3
	*([0] + [4]) = $3
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [272])
	*([0] + [4]) = $13
	*($13 + [248]) = $2
	$2 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($13 + [240]) = $2
	if ( (*($1) & [1]) ){ goto $label$2 }
	$1 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($1 + [8])
	
.LABEL $label$1
	$10 = CALL strtoull($1, [0], [0])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($0 + [56])), [1504])
	CALL eosio_assert(((int_64)*($3) > (int_64)999999), [1536])
	CALL eosio_assert((int_64)(((int_64)((int_64)*($3) % (int_64)1000000) & (int_64)255) == 0), [1568])
	$4 = *(($0 + [424]))
	$7 = *(($0 + [428]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$3 }
	$1 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$4:
	if ( ((int_64)*(*($1)) == (int_64)$10) ){ goto $label$3 }
	$7 = $1
	$6 = ($1 + [-24])
	$1 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	$5 = ($0 + [400])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [116]) == (int_32)$5), [944])
	goto $label$5 
	
.LABEL $label$6
	$6 = [0]
	$1 = CALL db_find_i64(*(($0 + [400])), *(($0 + [408])), (int_64)4292915607302569984, $10)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $66($5, $1)
	CALL eosio_assert(((int_32)*($6 + [116]) == (int_32)$5), [944])
	
.LABEL $label$5
	$1 = [0]
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [1616])
	CALL eosio_assert((int_64)(*($6 + [8]) == 0), [1632])
	CALL eosio_assert(((int_64)*($6 + [24]) > (int_64)0), [1648])
	$8 = *($6 + [16])
	CALL eosio_assert(((int_64)($8 == 0) | ((uint_64)$2 <= (uint_64)$8)), [1632])
	CALL eosio_assert(((uint_64)$2 >= (uint_64)*($6 + [64])), [1680])
	CALL eosio_assert(((int_64)*($3) > (int_64)*($6 + [40])), [1728])
	$2 = *($0)
	*($13 + [16]) = $3
	*($13 + [20]) = ($13 + [248])
	*($13 + [24]) = ($13 + [240])
	CALL eosio_assert($7, [848])
	CALL $79($5, $6, $2, ($13 + [16]))
	$5 = ($0 + [240])
	$7 = [0]
	$6 = CALL db_lowerbound_i64(*($0 + [240]), *(($0 + [248])), (int_64)4292929467866677248, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $80($5, $6)
	
.LABEL $label$7
	*((($13 + [224]) + [8])) = *(($3 + [8]))
	*($13 + [224]) = *($3)
	*($13 + [216]) = (int_64)1397703940
	*($13 + [208]) = (int_64)0
	CALL eosio_assert([1], [608])
	$2 = (uint_64)*($13 + [216]) >> (uint_64)(int_64)8)
	
.LOOP $label$9:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$6 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($6, [672])
	$1 = (CASTING uint_32)(float_64 ((float_64)((float_64)CALL floor((CASTING float_64)(uint_32 ((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$7() / (uint_64)(int_64)1000000)) + [-1544371200]) / (uint_32)[86400]))) * (float_64)(float_64)86400) + (float_64)(float_64)1544371200))
	*($13 + [204]) = $1
	if ( ($7 == 0) ){ goto $label$13 }
	if ( ((int_32)$1 != (int_32)*($7 + [72])) ){ goto $label$14 }
	CALL eosio_assert(((int_64)*(($7 + [64])) == (int_64)*($13 + [232])), [1776])
	$2 = ((int_64)*($13 + [224]) + (int_64)*($7 + [56]))
	*($13 + [224]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1824])
	CALL eosio_assert(((int_64)*($13 + [224]) < (int_64)4611686018427387904), [1856])
	*(($13 + [216])) = *(($7 + [48]))
	*($13 + [208]) = *($7 + [40])
	
.LABEL $label$14
	$2 = *($0)
	*($13 + [16]) = $3
	*($13 + [20]) = ($13 + [224])
	*($13 + [24]) = ($13 + [208])
	*($13 + [28]) = ($13 + [204])
	CALL eosio_assert([1], [848])
	CALL $81($5, $7, $2, ($13 + [16]))
	goto $label$12 
	
.LABEL $label$13
	$2 = *($0)
	*($13 + [16]) = $3
	*($13 + [20]) = ($13 + [204])
	CALL $82(($13 + [160]), $5, $2, ($13 + [16]))
	
.LABEL $label$12
	*((($13 + [160]) + [32])) = [0]
	*($13 + [168]) = $10
	*($13 + [176]) = (int_64)-1
	*($13 + [184]) = (int_64)0
	$2 = *($0)
	*($13 + [160]) = $2
	*($13 + [28]) = $3
	*($13 + [20]) = ($13 + [248])
	*($13 + [16]) = ($13 + [160])
	*($13 + [24]) = ($13 + [240])
	CALL $83(($13 + [120]), ($13 + [160]), $2, ($13 + [16]))
	*((($13 + [120]) + [32])) = [0]
	$2 = *($0)
	*($13 + [120]) = $2
	*($13 + [128]) = $10
	*($13 + [136]) = (int_64)-1
	*($13 + [144]) = (int_64)0
	$1 = CALL db_find_i64($2, $10, (int_64)4292927555353182208, *($13 + [248]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$16 }
	$1 = CALL $85(($13 + [120]), $1)
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)($13 + [120])), [944])
	$2 = *($0)
	*($13 + [16]) = $3
	CALL eosio_assert([1], [848])
	CALL $86(($13 + [120]), $1, $2, ($13 + [16]))
	goto $label$15 
	
.LABEL $label$16
	$2 = *($0)
	*($13 + [20]) = $3
	*($13 + [16]) = ($13 + [248])
	CALL $84(($13 + [80]), ($13 + [120]), $2, ($13 + [16]))
	
.LABEL $label$15
	$11 = *($0)
	$2 = (int_64)0
	$8 = (int_64)59
	$1 = [592]
	$9 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$22 }
	$6 = *($1)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$6 = ($6 + [165])
	goto $label$20 
	
.LABEL $label$22
	$10 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$18
	$1 = ($1 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$17 }
	*($13 + [72]) = $9
	*($13 + [64]) = $11
	$2 = (int_64)0
	$10 = (int_64)59
	$1 = [144]
	$9 = (int_64)0
	
.LOOP $label$23:
	$8 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$24 }
	$6 = *($1)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$6 = ($6 + [165])
	goto $label$25 
	
.LABEL $label$26
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$24
	$1 = ($1 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$23 }
	$2 = (int_64)0
	$8 = (int_64)59
	$1 = [128]
	$11 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$32 }
	$6 = *($1)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$6 = ($6 + [165])
	goto $label$30 
	
.LABEL $label$32
	$10 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$28
	$1 = ($1 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$27 }
	$2 = (int_64)0
	$10 = (int_64)59
	$1 = [1888]
	$12 = (int_64)0
	
.LOOP $label$33:
	$8 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$34 }
	$6 = *($1)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$6 = ($6 + [165])
	goto $label$35 
	
.LABEL $label$36
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$34
	$1 = ($1 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$12 = ((int_64)$8 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$33 }
	*(($13 + [8])) = [0]
	*($13) = (int_64)0
	$1 = CALL strlen([1904])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$37 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$40 }
	*($13) = ($1 << [1])
	$6 = ($13 | [1])
	if ( $1 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	$7 = (($1 + [16]) & [-16])
	$6 = CALL $179($7)
	*($13) = ($7 | [1])
	*($13 + [8]) = $6
	*($13 + [4]) = $1
	
.LABEL $label$39
	CALL memcpy($6, [1904], $1)
	
.LABEL $label$38
	*(($6 + $1)) = [0]
	*(($13 + [44])) = *(($3 + [12]))
	*(($13 + [40])) = *(($3 + [8]))
	*(($13 + [36])) = *(($3 + [4]))
	*($13 + [24]) = $12
	*($13 + [16]) = *($0)
	*($13 + [32]) = *($3)
	$1 = ($13 + [8])
	*(($13 + [56])) = *($1)
	*($13 + [48]) = *($13)
	*($13) = [0]
	*($13 + [4]) = [0]
	*($1) = [0]
	$1 = CALL $35(($13 + [80]), ($13 + [64]), $9, $11, ($13 + [16]))
	CALL $36(($13 + [256]), $1)
	$6 = *($13 + [256])
	CALL send_inline($6, (*($13 + [260]) - $6))
	$6 = *($13 + [256])
	if ( ($6 == 0) ){ goto $label$41 }
	*($13 + [260]) = $6
	CALL $180($6)
	
.LABEL $label$41
	$6 = *($1 + [28])
	if ( ($6 == 0) ){ goto $label$42 }
	*(($1 + [32])) = $6
	CALL $180($6)
	
.LABEL $label$42
	$6 = *($1 + [16])
	if ( ($6 == 0) ){ goto $label$43 }
	*(($1 + [20])) = $6
	CALL $180($6)
	
.LABEL $label$43
	if ( ((*(($13 + [48])) & [1]) == 0) ){ goto $label$44 }
	CALL $180(*(($13 + [56])))
	
.LABEL $label$44
	if ( ((*($13) & [1]) == 0) ){ goto $label$45 }
	CALL $180(*(($13 + [8])))
	
.LABEL $label$45
	$0 = *($13 + [144])
	if ( ($0 == 0) ){ goto $label$46 }
	$3 = ($13 + [148])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$48 }
	
.LOOP $label$49:
	$1 = ($1 + [-24])
	$6 = *($1)
	*($1) = [0]
	if ( ($6 == 0) ){ goto $label$50 }
	CALL $180($6)
	
.LABEL $label$50
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$49 }
	$1 = *(($13 + [144]))
	goto $label$47 
	
.LABEL $label$48
	$1 = $0
	
.LABEL $label$47
	*($3) = $0
	CALL $180($1)
	
.LABEL $label$46
	$0 = *($13 + [184])
	if ( ($0 == 0) ){ goto $label$51 }
	$3 = ($13 + [188])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$53 }
	
.LOOP $label$54:
	$1 = ($1 + [-24])
	$6 = *($1)
	*($1) = [0]
	if ( ($6 == 0) ){ goto $label$55 }
	CALL $180($6)
	
.LABEL $label$55
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$54 }
	$1 = *(($13 + [184]))
	goto $label$52 
	
.LABEL $label$53
	$1 = $0
	
.LABEL $label$52
	*($3) = $0
	CALL $180($1)
	
.LABEL $label$51
	*([0] + [4]) = ($13 + [272])
	return (unreachable)
	
.LABEL $label$37
	CALL $181($13)
}

int_32 .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [504]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [508])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $180($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($0 + [504]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $180($4)
	
.LABEL $label$1
	$1 = *(($0 + [464]))
	if ( ($1 == 0) ){ goto $label$6 }
	$3 = ($0 + [468])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $180($2)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($0 + [464]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $1
	
.LABEL $label$7
	*($3) = $1
	CALL $180($4)
	
.LABEL $label$6
	$1 = *(($0 + [424]))
	if ( ($1 == 0) ){ goto $label$11 }
	$3 = ($0 + [428])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	CALL $180($2)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($0 + [424]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $1
	
.LABEL $label$12
	*($3) = $1
	CALL $180($4)
	
.LABEL $label$11
	$1 = *(($0 + [384]))
	if ( ($1 == 0) ){ goto $label$16 }
	$3 = ($0 + [388])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$20 }
	CALL $180($2)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$19 }
	$4 = *(($0 + [384]))
	goto $label$17 
	
.LABEL $label$18
	$4 = $1
	
.LABEL $label$17
	*($3) = $1
	CALL $180($4)
	
.LABEL $label$16
	$1 = *(($0 + [344]))
	if ( ($1 == 0) ){ goto $label$21 }
	$3 = ($0 + [348])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$25 }
	CALL $180($2)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$24 }
	$4 = *(($0 + [344]))
	goto $label$22 
	
.LABEL $label$23
	$4 = $1
	
.LABEL $label$22
	*($3) = $1
	CALL $180($4)
	
.LABEL $label$21
	$1 = *(($0 + [304]))
	if ( ($1 == 0) ){ goto $label$26 }
	$3 = ($0 + [308])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$28 }
	
.LOOP $label$29:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$30 }
	CALL $180($2)
	
.LABEL $label$30
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$29 }
	$4 = *(($0 + [304]))
	goto $label$27 
	
.LABEL $label$28
	$4 = $1
	
.LABEL $label$27
	*($3) = $1
	CALL $180($4)
	
.LABEL $label$26
	$1 = *(($0 + [264]))
	if ( ($1 == 0) ){ goto $label$31 }
	$3 = ($0 + [268])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$33 }
	
.LOOP $label$34:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$35 }
	CALL $180($2)
	
.LABEL $label$35
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$34 }
	$4 = *(($0 + [264]))
	goto $label$32 
	
.LABEL $label$33
	$4 = $1
	
.LABEL $label$32
	*($3) = $1
	CALL $180($4)
	
.LABEL $label$31
	$1 = *(($0 + [224]))
	if ( ($1 == 0) ){ goto $label$36 }
	$3 = ($0 + [228])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$38 }
	
.LOOP $label$39:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$40 }
	CALL $180($2)
	
.LABEL $label$40
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$39 }
	$4 = *(($0 + [224]))
	goto $label$37 
	
.LABEL $label$38
	$4 = $1
	
.LABEL $label$37
	*($3) = $1
	CALL $180($4)
	
.LABEL $label$36
	$1 = *(($0 + [184]))
	if ( ($1 == 0) ){ goto $label$41 }
	$3 = ($0 + [188])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$43 }
	
.LOOP $label$44:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$45 }
	CALL $180($2)
	
.LABEL $label$45
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$44 }
	$4 = *(($0 + [184]))
	goto $label$42 
	
.LABEL $label$43
	$4 = $1
	
.LABEL $label$42
	*($3) = $1
	CALL $180($4)
	
.LABEL $label$41
	$1 = *(($0 + [144]))
	if ( ($1 == 0) ){ goto $label$46 }
	$3 = ($0 + [148])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$48 }
	
.LOOP $label$49:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$50 }
	CALL $180($2)
	
.LABEL $label$50
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$49 }
	$4 = *(($0 + [144]))
	goto $label$47 
	
.LABEL $label$48
	$4 = $1
	
.LABEL $label$47
	*($3) = $1
	CALL $180($4)
	
.LABEL $label$46
	$1 = *(($0 + [104]))
	if ( ($1 == 0) ){ goto $label$51 }
	$3 = ($0 + [108])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$53 }
	
.LOOP $label$54:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$55 }
	CALL $180($2)
	
.LABEL $label$55
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$54 }
	$4 = *(($0 + [104]))
	goto $label$52 
	
.LABEL $label$53
	$4 = $1
	
.LABEL $label$52
	*($3) = $1
	CALL $180($4)
	
.LABEL $label$51
	$4 = *($0 + [64])
	if ( ($4 == 0) ){ goto $label$56 }
	*(($0 + [68])) = $4
	CALL $180($4)
	
.LABEL $label$56
	return $0
}

void .FUNC $31 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	float_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_64 $22
	int_32 $23
	$23 = (*([0] + [4]) - [512])
	*([0] + [4]) = $23
	CALL $32(($23 + [432]))
	$16 = *($0)
	$21 = *($23 + [432])
	if ( ((int_64)$21 == (int_64)$16) ){ goto $label$4 }
	if ( ((int_64)*($23 + [440]) != (int_64)$16) ){ goto $label$4 }
	$16 = (int_64)0
	$15 = (int_64)59
	$20 = [160]
	$17 = (int_64)0
	
.LOOP $label$5:
	$18 = (int_64)0
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$6 }
	$5 = *($20)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$5 = ($5 + [165])
	goto $label$7 
	
.LABEL $label$8
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$18 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$6
	$20 = ($20 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$5 }
	if ( ((int_64)$21 == (int_64)$17) ){ goto $label$4 }
	$20 = ($23 + [464])
	$5 = *($23 + [464])
	$19 = CALL strlen([176])
	if ( ((int_32)$19 != (int_32)( *(($23 + [468])) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$9 }
	if ( (CALL $189($20, [0], [-1], [176], $19) == 0) ){ goto $label$4 }
	
.LABEL $label$9
	CALL $192(($23 + [416]), $20)
	$5 = [0]
	if ( ((uint_64)((int_64)*($23 + [448]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$10 }
	$16 = (uint_64)*((($23 + [432]) + [24])) >> (uint_64)(int_64)8)
	$20 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	
.LOOP $label$14:
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	$5 = [1]
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$5 = [0]
	
.LABEL $label$10
	CALL eosio_assert($5, [192])
	*(($23 + [144])) = [0]
	*($23 + [136]) = (int_64)0
	$20 = CALL strlen([208])
	if ( ((uint_32)$20 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$20 >= (uint_32)[11]) ){ goto $label$27 }
	*($23 + [136]) = ($20 << [1])
	$5 = (($23 + [136]) | [1])
	if ( $20 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$19 = (($20 + [16]) & [-16])
	$5 = CALL $179($19)
	*($23 + [136]) = ($19 | [1])
	*($23 + [144]) = $5
	*($23 + [140]) = $20
	
.LABEL $label$26
	CALL memcpy($5, [208], $20)
	
.LABEL $label$25
	*(($5 + $20)) = [0]
	CALL _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_(($23 + [400]), ($23 + [416]), ($23 + [136]))
	if ( ((*($23 + [136]) & [1]) == 0) ){ goto $label$28 }
	CALL $180(*($23 + [144]))
	
.LABEL $label$28
	*(($23 + [392])) = [0]
	*($23 + [384]) = (int_64)0
	$20 = CALL strlen([224])
	if ( ((uint_32)$20 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$20 >= (uint_32)[11]) ){ goto $label$31 }
	*($23 + [384]) = ($20 << [1])
	$5 = (($23 + [384]) | [1])
	if ( $20 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$19 = (($20 + [16]) & [-16])
	$5 = CALL $179($19)
	*($23 + [384]) = ($19 | [1])
	*($23 + [392]) = $5
	*($23 + [388]) = $20
	
.LABEL $label$30
	CALL memcpy($5, [224], $20)
	
.LABEL $label$29
	*(($5 + $20)) = [0]
	*(($23 + [376])) = [0]
	*($23 + [368]) = (int_64)0
	$20 = CALL strlen([224])
	if ( ((uint_32)$20 >= (uint_32)[-16]) ){ goto $label$22 }
	if ( ((uint_32)$20 >= (uint_32)[11]) ){ goto $label$34 }
	*($23 + [368]) = ($20 << [1])
	$5 = (($23 + [368]) | [1])
	if ( $20 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$19 = (($20 + [16]) & [-16])
	$5 = CALL $179($19)
	*($23 + [368]) = ($19 | [1])
	*($23 + [376]) = $5
	*($23 + [372]) = $20
	
.LABEL $label$33
	CALL memcpy($5, [224], $20)
	
.LABEL $label$32
	*(($5 + $20)) = [0]
	*(($23 + [360])) = [0]
	*($23 + [352]) = (int_64)0
	$20 = CALL strlen([224])
	if ( ((uint_32)$20 >= (uint_32)[-16]) ){ goto $label$21 }
	if ( ((uint_32)$20 >= (uint_32)[11]) ){ goto $label$37 }
	*($23 + [352]) = ($20 << [1])
	$5 = (($23 + [352]) | [1])
	if ( $20 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	$19 = (($20 + [16]) & [-16])
	$5 = CALL $179($19)
	*($23 + [352]) = ($19 | [1])
	*($23 + [360]) = $5
	*($23 + [356]) = $20
	
.LABEL $label$36
	CALL memcpy($5, [224], $20)
	
.LABEL $label$35
	*(($5 + $20)) = [0]
	*(($23 + [344])) = [0]
	*($23 + [336]) = (int_64)0
	$20 = CALL strlen([224])
	if ( ((uint_32)$20 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$20 >= (uint_32)[11]) ){ goto $label$40 }
	*($23 + [336]) = ($20 << [1])
	$5 = (($23 + [336]) | [1])
	if ( $20 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	$19 = (($20 + [16]) & [-16])
	$5 = CALL $179($19)
	*($23 + [336]) = ($19 | [1])
	*($23 + [344]) = $5
	*($23 + [340]) = $20
	
.LABEL $label$39
	CALL memcpy($5, [224], $20)
	
.LABEL $label$38
	*(($5 + $20)) = [0]
	*(($23 + [328])) = [0]
	*($23 + [320]) = (int_64)0
	$20 = CALL strlen([224])
	if ( ((uint_32)$20 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$20 >= (uint_32)[11]) ){ goto $label$43 }
	*($23 + [320]) = ($20 << [1])
	$5 = (($23 + [320]) | [1])
	if ( $20 ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$43
	$19 = (($20 + [16]) & [-16])
	$5 = CALL $179($19)
	*($23 + [320]) = ($19 | [1])
	*($23 + [328]) = $5
	*($23 + [324]) = $20
	
.LABEL $label$42
	CALL memcpy($5, [224], $20)
	
.LABEL $label$41
	*(($5 + $20)) = [0]
	*(($23 + [312])) = [0]
	*($23 + [304]) = (int_64)0
	$20 = CALL strlen([224])
	if ( ((uint_32)$20 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$20 >= (uint_32)[11]) ){ goto $label$46 }
	*($23 + [304]) = ($20 << [1])
	$5 = (($23 + [304]) | [1])
	if ( $20 ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$46
	$19 = (($20 + [16]) & [-16])
	$5 = CALL $179($19)
	*($23 + [304]) = ($19 | [1])
	*($23 + [312]) = $5
	*($23 + [308]) = $20
	
.LABEL $label$45
	CALL memcpy($5, [224], $20)
	
.LABEL $label$44
	*(($5 + $20)) = [0]
	*(($23 + [296])) = [0]
	*($23 + [288]) = (int_64)0
	$20 = CALL strlen([224])
	if ( ((uint_32)$20 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$20 >= (uint_32)[11]) ){ goto $label$49 }
	*($23 + [288]) = ($20 << [1])
	$5 = (($23 + [288]) | [1])
	if ( $20 ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$49
	$19 = (($20 + [16]) & [-16])
	$5 = CALL $179($19)
	*($23 + [288]) = ($19 | [1])
	*($23 + [296]) = $5
	*($23 + [292]) = $20
	
.LABEL $label$48
	CALL memcpy($5, [224], $20)
	
.LABEL $label$47
	*(($5 + $20)) = [0]
	$5 = *($23 + [400])
	if ( ((int_32)*($23 + [404]) == (int_32)$5) ){ goto $label$51 }
	$3 = (($23 + [184]) | [1])
	$12 = (($23 + [184]) + [8])
	$19 = [0]
	
.LOOP $label$52:
	*($12) = [0]
	*($23 + [184]) = (int_64)0
	$20 = CALL strlen([240])
	if ( ((uint_32)$20 >= (uint_32)[-16]) ){ goto $label$50 }
	$4 = ($5 + ((int_32)$19 * (int_32)[12]))
	if ( ((uint_32)$20 >= (uint_32)[11]) ){ goto $label$55 }
	*($23 + [184]) = ($20 << [1])
	$5 = $3
	if ( $20 ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$55
	$13 = (($20 + [16]) & [-16])
	$5 = CALL $179($13)
	*($12) = $5
	*($23 + [184]) = ($13 | [1])
	*($23 + [188]) = $20
	
.LABEL $label$54
	CALL memcpy($5, [240], $20)
	
.LABEL $label$53
	*(($5 + $20)) = [0]
	CALL _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_(($23 + [136]), $4, ($23 + [184]))
	if ( ((*($23 + [184]) & [1]) == 0) ){ goto $label$56 }
	CALL $180(*($12))
	
.LABEL $label$56
	$5 = *($20)
	$20 = *($23 + [136])
	$4 = CALL strlen([256])
	if ( ((int_32)$4 != (int_32)( *($20 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$57 }
	if ( CALL $189($20, [0], [-1], [256], $4) ){ goto $label$57 }
	CALL $182(($23 + [384]), (*($23 + [136]) + [12]))
	
.LABEL $label$57
	$5 = *($20)
	$20 = *($23 + [136])
	$4 = CALL strlen([272])
	if ( ((int_32)$4 != (int_32)( *($20 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$58 }
	if ( CALL $189($20, [0], [-1], [272], $4) ){ goto $label$58 }
	CALL $182(($23 + [368]), (*($23 + [136]) + [12]))
	
.LABEL $label$58
	$5 = *($20)
	$20 = *($23 + [136])
	$4 = CALL strlen([288])
	if ( ((int_32)$4 != (int_32)( *($20 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$59 }
	if ( CALL $189($20, [0], [-1], [288], $4) ){ goto $label$59 }
	CALL $182(($23 + [352]), (*($23 + [136]) + [12]))
	
.LABEL $label$59
	$5 = *($20)
	$20 = *($23 + [136])
	$4 = CALL strlen([304])
	if ( ((int_32)$4 != (int_32)( *($20 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$60 }
	if ( CALL $189($20, [0], [-1], [304], $4) ){ goto $label$60 }
	CALL $182(($23 + [336]), (*($23 + [136]) + [12]))
	
.LABEL $label$60
	$5 = *($20)
	$20 = *($23 + [136])
	$4 = CALL strlen([320])
	if ( ((int_32)$4 != (int_32)( *($20 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$61 }
	if ( CALL $189($20, [0], [-1], [320], $4) ){ goto $label$61 }
	CALL $182(($23 + [320]), (*($23 + [136]) + [12]))
	
.LABEL $label$61
	$5 = *($20)
	$20 = *($23 + [136])
	$4 = CALL strlen([336])
	if ( ((int_32)$4 != (int_32)( *($20 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$62 }
	if ( CALL $189($20, [0], [-1], [336], $4) ){ goto $label$62 }
	CALL $182(($23 + [304]), (*($23 + [136]) + [12]))
	
.LABEL $label$62
	$5 = *($20)
	$20 = *($23 + [136])
	$4 = CALL strlen([352])
	if ( ((int_32)$4 != (int_32)( *($20 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$63 }
	if ( CALL $189($20, [0], [-1], [352], $4) ){ goto $label$63 }
	CALL $182(($23 + [288]), (*($23 + [136]) + [12]))
	
.LABEL $label$63
	$4 = *($23 + [136])
	if ( ($4 == 0) ){ goto $label$64 }
	$20 = *($23 + [140])
	if ( ((int_32)$20 == (int_32)$4) ){ goto $label$66 }
	$5 = ([0] - $4)
	$20 = ($20 + [-12])
	
.LOOP $label$67:
	if ( ((*($20) & [1]) == 0) ){ goto $label$68 }
	CALL $180(*(($20 + [8])))
	
.LABEL $label$68
	$20 = ($20 + [-12])
	if ( ((int_32)($20 + $5) != (int_32)[-12]) ){ goto $label$67 }
	$20 = *($23 + [136])
	goto $label$65 
	
.LABEL $label$66
	$20 = $4
	
.LABEL $label$65
	*($23 + [140]) = $4
	CALL $180($20)
	
.LABEL $label$64
	$5 = *($23 + [400])
	$19 = ($19 + [1])
	if ( ((int_32)$19 != (int_32)((int_32)(*($23 + [404]) - $5) / (int_32)[12])) ){ goto $label$52 }
	
.LABEL $label$51
	$20 = *($23 + [384])
	$5 = CALL strlen([224])
	if ( ((int_32)$5 != (int_32)( *($23 + [388]) ? uint_32($20 >> [1]) : ($20 & [1]) )) ){ goto $label$69 }
	if ( (CALL $189(($23 + [384]), [0], [-1], [224], $5) == 0) ){ goto $label$15 }
	
.LABEL $label$69
	$7 = *(($23 + [456]))
	$6 = *(($23 + [448]))
	$20 = *($23 + [384])
	$5 = CALL strlen([368])
	if ( ((int_32)$5 != (int_32)( *($23 + [388]) ? uint_32($20 >> [1]) : ($20 & [1]) )) ){ goto $label$16 }
	if ( CALL $189(($23 + [384]), [0], [-1], [368], $5) ){ goto $label$16 }
	$20 = *($23 + [352])
	$5 = CALL strlen([224])
	if ( ((int_32)$5 != (int_32)( *($23 + [356]) ? uint_32($20 >> [1]) : ($20 & [1]) )) ){ goto $label$70 }
	if ( (CALL $189(($23 + [352]), [0], [-1], [224], $5) == 0) ){ goto $label$16 }
	
.LABEL $label$70
	CALL $192(($23 + [272]), ($23 + [352]))
	$20 = ($23 + [448])
	*((($23 + [256]) + [12])) = *(($20 + [12]))
	*(($5 = (($23 + [256]) + [8]))) = *(($20 + [8]))
	$16 = *($23 + [432])
	*($23 + [256]) = *($20)
	*((($23 + [24]) + [8])) = *($5)
	*($23 + [24]) = *($23 + [256])
	CALL $33($0, ($23 + [272]), $16, ($23 + [24]))
	if ( ((*($23 + [272]) & [1]) == 0) ){ goto $label$15 }
	CALL $180(*($23 + [280]))
	goto $label$15 
	
.LABEL $label$50
	CALL $181(($23 + [184]))
	
.LABEL $label$24
	CALL $181(($23 + [136]))
	
.LABEL $label$23
	CALL $181(($23 + [384]))
	
.LABEL $label$22
	CALL $181(($23 + [368]))
	
.LABEL $label$21
	CALL $181(($23 + [352]))
	
.LABEL $label$20
	CALL $181(($23 + [336]))
	
.LABEL $label$19
	CALL $181(($23 + [320]))
	
.LABEL $label$18
	CALL $181(($23 + [304]))
	
.LABEL $label$17
	CALL $181(($23 + [288]))
	
.LABEL $label$16
	$11 = CALL strtoull(( *($23 + [328]) ? (($23 + [320]) | [1]) : (*($23 + [320]) & [1]) ), [0], [0])
	$8 = CALL strtoull(( *($23 + [296]) ? (($23 + [288]) | [1]) : (*($23 + [288]) & [1]) ), [0], [0])
	$12 = (($23 + [352]) | [1])
	CALL strtoull(( *($23 + [360]) ? $12 : (*($23 + [352]) & [1]) ), [0], [0])
	$20 = ( *($23 + [376]) ? (($23 + [368]) | [1]) : (*($23 + [368]) & [1]) )
	$5 = [-1]
	
.LOOP $label$71:
	$19 = ($20 + $5)
	$4 = ($5 + [1])
	$5 = $4
	if ( *(($19 + [1])) ){ goto $label$71 }
	$17 = (CASTING uint_64)(uint_32 $4)
	$16 = (int_64)0
	$15 = (int_64)59
	$21 = (int_64)0
	
.LOOP $label$72:
	$18 = (int_64)0
	if ( ((uint_64)$16 >= (uint_64)$17) ){ goto $label$73 }
	$5 = *($20)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$75 }
	$5 = ($5 + [165])
	goto $label$74 
	
.LABEL $label$75
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$74
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$73
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$77 }
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	goto $label$76 
	
.LABEL $label$77
	$18 = ((int_64)$18 & (int_64)15)
	
.LABEL $label$76
	$20 = ($20 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$21 = ((int_64)$18 | (int_64)$21)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$72 }
	$13 = (($23 + [304]) | [1])
	$20 = ( *($23 + [312]) ? $13 : (*($23 + [304]) & [1]) )
	$5 = [-1]
	
.LOOP $label$78:
	$19 = ($20 + $5)
	$4 = ($5 + [1])
	$5 = $4
	if ( *(($19 + [1])) ){ goto $label$78 }
	$9 = (CASTING uint_64)(uint_32 $4)
	$16 = (int_64)0
	$15 = (int_64)59
	$17 = (int_64)0
	
.LOOP $label$79:
	$18 = (int_64)0
	if ( ((uint_64)$16 >= (uint_64)$9) ){ goto $label$80 }
	$5 = *($20)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$82 }
	$5 = ($5 + [165])
	goto $label$81 
	
.LABEL $label$82
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$81
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$80
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$84 }
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	goto $label$83 
	
.LABEL $label$84
	$18 = ((int_64)$18 & (int_64)15)
	
.LABEL $label$83
	$20 = ($20 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$79 }
	$22 = (int_64)0
	$20 = *($23 + [384])
	$5 = CALL strlen([384])
	if ( ((int_32)$5 != (int_32)( *($23 + [388]) ? uint_32($20 >> [1]) : ($20 & [1]) )) ){ goto $label$85 }
	$22 = (int_64)0
	if ( CALL $189(($23 + [384]), [0], [-1], [384], $5) ){ goto $label$85 }
	$16 = (int_64)0
	$15 = (int_64)59
	$20 = [400]
	$9 = (int_64)0
	
.LOOP $label$86:
	$18 = (int_64)0
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$87 }
	$5 = *($20)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$89 }
	$5 = ($5 + [165])
	goto $label$88 
	
.LABEL $label$89
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$88
	$18 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$87
	$20 = ($20 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$9 = ((int_64)$18 | (int_64)$9)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$86 }
	CALL require_auth($9)
	$20 = [1]
	$5 = *($23 + [368])
	$19 = CALL strlen([224])
	if ( ((int_32)$19 != (int_32)( *($23 + [372]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$90 }
	$20 = ((int_32)CALL $189(($23 + [368]), [0], [-1], [224], $19) != (int_32)[0])
	
.LABEL $label$90
	CALL eosio_assert($20, [416])
	$22 = (int_64)0
	if ( ((int_64)$7 != (int_64)1397703940) ){ goto $label$85 }
	$20 = *($23 + [384])
	$5 = CALL strlen([384])
	if ( ((int_32)$5 != (int_32)( *($23 + [388]) ? uint_32($20 >> [1]) : ($20 & [1]) )) ){ goto $label$85 }
	if ( CALL $189(($23 + [384]), [0], [-1], [384], $5) ){ goto $label$85 }
	CALL $190(($23 + [496]), [448], ($23 + [384]))
	$20 = CALL $186(($23 + [496]), [480])
	$5 = ($20 + [8])
	*((($23 + [184]) + [8])) = *($5)
	*($23 + [184]) = *($20)
	*($20) = [0]
	*(($20 + [4])) = [0]
	*($5) = [0]
	$20 = *($23 + [352])
	$5 = ($20 & [1])
	$20 = CALL $185(($23 + [184]), ( *((($23 + [352]) + [8])) ? $12 : $5 ), ( *($23 + [356]) ? uint_32($20 >> [1]) : $5 ))
	$5 = ($20 + [8])
	*((($23 + [136]) + [8])) = *($5)
	*($23 + [136]) = *($20)
	*($20) = [0]
	*(($20 + [4])) = [0]
	*($5) = [0]
	$20 = CALL $186(($23 + [136]), [496])
	$5 = ($20 + [8])
	*((($23 + [240]) + [8])) = *($5)
	*($23 + [240]) = *($20)
	*($20) = [0]
	*(($20 + [4])) = [0]
	*($5) = [0]
	if ( ((*($23 + [136]) & [1]) == 0) ){ goto $label$91 }
	CALL $180(*($23 + [144]))
	
.LABEL $label$91
	if ( ((*($23 + [184]) & [1]) == 0) ){ goto $label$92 }
	CALL $180(*($23 + [192]))
	
.LABEL $label$92
	if ( ((*($23 + [496]) & [1]) == 0) ){ goto $label$93 }
	CALL $180(*($23 + [504]))
	
.LABEL $label$93
	CALL $192(($23 + [224]), ($23 + [240]))
	$9 = ((int_64)$11 * (int_64)40)
	CALL $34($0, $21, $9, ($23 + [224]))
	if ( ((*($23 + [224]) & [1]) == 0) ){ goto $label$94 }
	CALL $180(*($23 + [232]))
	
.LABEL $label$94
	$16 = (int_64)0
	$15 = (int_64)59
	$20 = [544]
	$21 = (int_64)0
	
.LOOP $label$95:
	$18 = (int_64)0
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$96 }
	$5 = *($20)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$98 }
	$5 = ($5 + [165])
	goto $label$97 
	
.LABEL $label$98
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$97
	$18 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$96
	$20 = ($20 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$21 = ((int_64)$18 | (int_64)$21)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$95 }
	if ( ((int_64)$17 == (int_64)$21) ){ goto $label$101 }
	$16 = (int_64)0
	$15 = (int_64)59
	$20 = [560]
	$21 = (int_64)0
	
.LOOP $label$102:
	$18 = (int_64)0
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$103 }
	$5 = *($20)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$105 }
	$5 = ($5 + [165])
	goto $label$104 
	
.LABEL $label$105
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$104
	$18 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$103
	$20 = ($20 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$21 = ((int_64)$18 | (int_64)$21)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$102 }
	if ( ((int_64)$17 == (int_64)$21) ){ goto $label$101 }
	$16 = (int_64)0
	$15 = (int_64)59
	$20 = [576]
	$21 = (int_64)0
	
.LOOP $label$106:
	$18 = (int_64)0
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$107 }
	$5 = *($20)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$109 }
	$5 = ($5 + [165])
	goto $label$108 
	
.LABEL $label$109
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$108
	$18 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$107
	$20 = ($20 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$21 = ((int_64)$18 | (int_64)$21)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$106 }
	if ( ((int_64)$17 != (int_64)$21) ){ goto $label$100 }
	
.LABEL $label$101
	$16 = ((int_64)$11 * (int_64)6)
	$22 = ((uint_64)$16 / (uint_64)(int_64)1000)
	if ( (uint_64)($16 <= (int_64)1000) ){ goto $label$99 }
	$9 = *($0)
	$16 = (int_64)0
	$18 = (int_64)59
	$20 = [592]
	$21 = (int_64)0
	
.LOOP $label$110:
	if ( ((uint_64)$16 > (uint_64)(int_64)5) ){ goto $label$115 }
	$5 = *($20)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$114 }
	$5 = ($5 + [165])
	goto $label$113 
	
.LABEL $label$115
	$15 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$112 }
	goto $label$111 
	
.LABEL $label$114
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$113
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$112
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$111
	$20 = ($20 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$21 = ((int_64)$15 | (int_64)$21)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$110 }
	*($23 + [504]) = $21
	*($23 + [496]) = $9
	$16 = (int_64)0
	$18 = (int_64)59
	$20 = [112]
	$21 = (int_64)0
	
.LOOP $label$116:
	if ( ((uint_64)$16 > (uint_64)(int_64)10) ){ goto $label$121 }
	$5 = *($20)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$120 }
	$5 = ($5 + [165])
	goto $label$119 
	
.LABEL $label$121
	$15 = (int_64)0
	if ( ((int_64)$16 == (int_64)11) ){ goto $label$118 }
	goto $label$117 
	
.LABEL $label$120
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$119
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$118
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$117
	$20 = ($20 + [1])
	$18 = ((int_64)$18 + (int_64)-5)
	$21 = ((int_64)$15 | (int_64)$21)
	$16 = ((int_64)$16 + (int_64)1)
	if ( ((int_64)$16 != (int_64)13) ){ goto $label$116 }
	$16 = (int_64)0
	$18 = (int_64)59
	$20 = [128]
	$9 = (int_64)0
	
.LOOP $label$122:
	if ( ((uint_64)$16 > (uint_64)(int_64)7) ){ goto $label$127 }
	$5 = *($20)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$126 }
	$5 = ($5 + [165])
	goto $label$125 
	
.LABEL $label$127
	$15 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$124 }
	goto $label$123 
	
.LABEL $label$126
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$125
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$124
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$123
	$20 = ($20 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$9 = ((int_64)$15 | (int_64)$9)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$122 }
	CALL eosio_assert([1], [608])
	$16 = (uint_64)$7 >> (uint_64)(int_64)8)
	$20 = [0]
	
.LOOP $label$130:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$129 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$131 }
	
.LOOP $label$132:
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$129 }
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$132 }
	
.LABEL $label$131
	$5 = [1]
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$130 }
	goto $label$128 
	
.LABEL $label$129
	$5 = [0]
	
.LABEL $label$128
	CALL eosio_assert($5, [672])
	$5 = *((($23 + [304]) + [8]))
	$19 = *($23 + [304])
	*((($23 + [88]) + [8])) = [0]
	*($23 + [88]) = (int_64)0
	$20 = CALL strlen([704])
	if ( ((uint_32)$20 >= (uint_32)[-16]) ){ goto $label$2 }
	$19 = ( $5 ? $13 : ($19 & [1]) )
	if ( ((uint_32)$20 >= (uint_32)[11]) ){ goto $label$135 }
	*($23 + [88]) = ($20 << [1])
	$5 = (($23 + [88]) | [1])
	if ( $20 ){ goto $label$134 }
	goto $label$133 
	
.LABEL $label$135
	$4 = (($20 + [16]) & [-16])
	$5 = CALL $179($4)
	*($23 + [88]) = ($4 | [1])
	*($23 + [96]) = $5
	*($23 + [92]) = $20
	
.LABEL $label$134
	CALL memcpy($5, [704], $20)
	
.LABEL $label$133
	*(($5 + $20)) = [0]
	$20 = CALL $187(($23 + [88]), [0], $19)
	$5 = ($20 + [8])
	*((($23 + [104]) + [8])) = *($5)
	*($23 + [104]) = *($20)
	*($20) = [0]
	*(($20 + [4])) = [0]
	*($5) = [0]
	$20 = *($23 + [352])
	$5 = ($20 & [1])
	$20 = CALL $185(($23 + [104]), ( *((($23 + [352]) + [8])) ? $12 : $5 ), ( *($23 + [356]) ? uint_32($20 >> [1]) : $5 ))
	$5 = ($20 + [8])
	*((($23 + [120]) + [8])) = *($5)
	*($23 + [120]) = *($20)
	*($20) = [0]
	*(($20 + [4])) = [0]
	*($5) = [0]
	*((($23 + [72]) + [8])) = [0]
	*($23 + [72]) = (int_64)0
	$20 = CALL strlen([720])
	if ( ((uint_32)$20 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$20 >= (uint_32)[11]) ){ goto $label$138 }
	*($23 + [72]) = ($20 << [1])
	$19 = (($23 + [72]) | [1])
	$5 = $19
	if ( $20 ){ goto $label$137 }
	goto $label$136 
	
.LABEL $label$138
	$19 = (($20 + [16]) & [-16])
	$5 = CALL $179($19)
	*($23 + [72]) = ($19 | [1])
	*($23 + [80]) = $5
	*($23 + [76]) = $20
	$19 = (($23 + [72]) | [1])
	
.LABEL $label$137
	CALL memcpy($5, [720], $20)
	
.LABEL $label$136
	*(($5 + $20)) = [0]
	$20 = *($23 + [72])
	$5 = ($20 & [1])
	$20 = CALL $185(($23 + [120]), ( *($23 + [80]) ? $19 : $5 ), ( *($23 + [76]) ? uint_32($20 >> [1]) : $5 ))
	$16 = *($20)
	*($20) = (int_64)0
	$5 = *($20 + [8])
	*($20 + [8]) = [0]
	*(($23 + [160])) = $7
	*($23 + [144]) = $17
	*($23 + [152]) = $22
	*($23 + [168]) = $16
	*($23 + [136]) = *($0)
	*(($23 + [176])) = $5
	$20 = CALL $35(($23 + [184]), ($23 + [496]), $21, $9, ($23 + [136]))
	CALL $36(($23 + [480]), $20)
	$5 = *($23 + [480])
	CALL send_inline($5, (*($23 + [484]) - $5))
	$5 = *($23 + [480])
	if ( ($5 == 0) ){ goto $label$139 }
	*($23 + [484]) = $5
	CALL $180($5)
	
.LABEL $label$139
	$5 = *($20 + [28])
	if ( ($5 == 0) ){ goto $label$140 }
	*(($20 + [32])) = $5
	CALL $180($5)
	
.LABEL $label$140
	$5 = *($20 + [16])
	if ( ($5 == 0) ){ goto $label$141 }
	*(($20 + [20])) = $5
	CALL $180($5)
	
.LABEL $label$141
	if ( ((*($23 + [168]) & [1]) == 0) ){ goto $label$142 }
	CALL $180(*(($23 + [176])))
	
.LABEL $label$142
	if ( ((*($23 + [72]) & [1]) == 0) ){ goto $label$143 }
	CALL $180(*(($23 + [80])))
	
.LABEL $label$143
	if ( ((*($23 + [120]) & [1]) == 0) ){ goto $label$144 }
	CALL $180(*($23 + [128]))
	
.LABEL $label$144
	if ( ((*($23 + [104]) & [1]) == 0) ){ goto $label$145 }
	CALL $180(*($23 + [112]))
	
.LABEL $label$145
	if ( ((*($23 + [88]) & [1]) == 0) ){ goto $label$99 }
	CALL $180(*($23 + [96]))
	goto $label$99 
	
.LABEL $label$100
	CALL $190(($23 + [496]), [448], ($23 + [384]))
	$20 = CALL $186(($23 + [496]), [480])
	$5 = ($20 + [8])
	*((($23 + [184]) + [8])) = *($5)
	*($23 + [184]) = *($20)
	*($20) = [0]
	*(($20 + [4])) = [0]
	*($5) = [0]
	$20 = *($23 + [352])
	$5 = ($20 & [1])
	$20 = CALL $185(($23 + [184]), ( *((($23 + [352]) + [8])) ? $12 : $5 ), ( *($23 + [356]) ? uint_32($20 >> [1]) : $5 ))
	$5 = ($20 + [8])
	*((($23 + [136]) + [8])) = *($5)
	*($23 + [136]) = *($20)
	*($20) = [0]
	*(($20 + [4])) = [0]
	*($5) = [0]
	$20 = CALL $186(($23 + [136]), [768])
	$5 = *($20)
	*($20) = [0]
	$19 = *($20 + [4])
	*($20 + [4]) = [0]
	$4 = *($20 + [8])
	*($20 + [8]) = [0]
	if ( (*($23 + [240]) & [1]) ){ goto $label$147 }
	*($23 + [240]) = [0]
	$20 = (($23 + [240]) + [8])
	goto $label$146 
	
.LABEL $label$147
	*(*($23 + [248])) = [0]
	*($23 + [244]) = [0]
	$20 = (($23 + [240]) + [8])
	
.LABEL $label$146
	CALL $184(($23 + [240]), [0])
	*($20) = $4
	*($23 + [240]) = $5
	*($23 + [244]) = $19
	if ( ((*($23 + [136]) & [1]) == 0) ){ goto $label$148 }
	CALL $180(*($23 + [144]))
	
.LABEL $label$148
	if ( ((*($23 + [184]) & [1]) == 0) ){ goto $label$149 }
	CALL $180(*($23 + [192]))
	
.LABEL $label$149
	if ( ((*($23 + [496]) & [1]) == 0) ){ goto $label$150 }
	CALL $180(*($23 + [504]))
	
.LABEL $label$150
	CALL $192(($23 + [56]), ($23 + [240]))
	CALL $34($0, $17, (Rounds 0)(((float_64)(CASTING float_64)(uint_64 $9) * (float_64)(float_64)0.1)), ($23 + [56]))
	$22 = (int_64)0
	if ( ((*($23 + [56]) & [1]) == 0) ){ goto $label$99 }
	CALL $180(*($23 + [64]))
	
.LABEL $label$99
	if ( ((*($23 + [240]) & [1]) == 0) ){ goto $label$85 }
	CALL $180(*($23 + [248]))
	
.LABEL $label$85
	*($23 + [104]) = (int_64)0
	$20 = *($23 + [384])
	$5 = CALL strlen([816])
	if ( ((int_32)$5 != (int_32)( *($23 + [388]) ? uint_32($20 >> [1]) : ($20 & [1]) )) ){ goto $label$155 }
	if ( (CALL $189(($23 + [384]), [0], [-1], [816], $5) == 0) ){ goto $label$154 }
	
.LABEL $label$155
	$20 = *($23 + [384])
	$5 = CALL strlen([832])
	if ( ((int_32)$5 != (int_32)( *($23 + [388]) ? uint_32($20 >> [1]) : ($20 & [1]) )) ){ goto $label$156 }
	if ( (CALL $189(($23 + [384]), [0], [-1], [832], $5) == 0) ){ goto $label$153 }
	
.LABEL $label$156
	$14 = ((float_64)(CASTING float_64)(uint_64 $11) * (float_64)(float_64)0.02)
	*($23 + [104]) = (Rounds 0)(((float_64)$14 * (float_64)(float_64)0.1))
	$10 = (Rounds 0)(((float_64)$14 * (float_64)(float_64)0.2))
	goto $label$151 
	
.LABEL $label$154
	$10 = (int_64)0
	goto $label$152 
	
.LABEL $label$153
	$14 = (CASTING float_64)(uint_64 $6)
	*($23 + [104]) = (Rounds 0)(((float_64)$14 * (float_64)(float_64)0.1))
	$10 = (Rounds 0)(((float_64)$14 * (float_64)(float_64)0.2))
	
.LABEL $label$152
	$11 = $6
	
.LABEL $label$151
	if ( ((int_64)$7 != (int_64)1397703940) ){ goto $label$159 }
	if ( ((int_64)*($23 + [104]) == (int_64)0) ){ goto $label$159 }
	$19 = ($0 + [400])
	*($23 + [88]) = $19
	*($23 + [184]) = (int_64)0
	CALL $37(($23 + [136]), ($23 + [88]), ($23 + [184]))
	$20 = *($23 + [140])
	if ( ($20 == 0) ){ goto $label$160 }
	if ( ((int_64)*($23 + [184]) != (int_64)*($20 + [8])) ){ goto $label$160 }
	if ( ($20 == 0) ){ goto $label$160 }
	$16 = *($0)
	*($23 + [136]) = ($23 + [104])
	CALL eosio_assert([1], [848])
	CALL $39(*($23 + [88]), $20, $16, ($23 + [136]))
	if ( ((int_64)($10 == 0) == 0) ){ goto $label$158 }
	goto $label$157 
	
.LABEL $label$160
	$18 = *($23 + [104])
	CALL eosio_assert((uint_64)(((int_64)$18 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [608])
	$16 = (int_64)5459781
	$20 = [0]
	
.LOOP $label$163:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$162 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$164 }
	
.LOOP $label$165:
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$162 }
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$165 }
	
.LABEL $label$164
	$5 = [1]
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$163 }
	goto $label$161 
	
.LABEL $label$162
	$5 = [0]
	
.LABEL $label$161
	CALL eosio_assert($5, [672])
	CALL eosio_assert([1], [608])
	$16 = (int_64)5459781
	$20 = [0]
	
.LOOP $label$168:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$167 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$169 }
	
.LOOP $label$170:
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$167 }
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$170 }
	
.LABEL $label$169
	$5 = [1]
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$168 }
	goto $label$166 
	
.LABEL $label$167
	$5 = [0]
	
.LABEL $label$166
	CALL eosio_assert($5, [672])
	$15 = *($0 + [56])
	CALL eosio_assert([1], [608])
	$16 = (uint_64)$15 >> (uint_64)(int_64)8)
	$20 = [0]
	
.LOOP $label$173:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$172 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$174 }
	
.LOOP $label$175:
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$172 }
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$175 }
	
.LABEL $label$174
	$5 = [1]
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$173 }
	goto $label$171 
	
.LABEL $label$172
	$5 = [0]
	
.LABEL $label$171
	CALL eosio_assert($5, [672])
	*($23 + [184]) = (int_64)0
	*($23 + [496]) = (int_64)0
	*($23 + [192]) = $15
	*($23 + [480]) = $18
	*($23 + [504]) = (int_64)1397703940
	*($23 + [240]) = (int_64)0
	*($23 + [488]) = (int_64)1397703940
	$16 = *($0)
	*($23 + [136]) = $0
	*($23 + [140]) = ($23 + [480])
	*($23 + [144]) = ($23 + [240])
	*($23 + [148]) = ($23 + [184])
	*($23 + [152]) = ($23 + [496])
	CALL $38(($23 + [120]), $19, $16, ($23 + [136]))
	
.LABEL $label$159
	if ( (int_64)($10 == 0) ){ goto $label$157 }
	
.LABEL $label$158
	if ( ((int_64)$7 != (int_64)1397703940) ){ goto $label$157 }
	$16 = (int_64)0
	$17 = (int_64)59
	$20 = [112]
	$18 = (int_64)0
	
.LOOP $label$176:
	if ( ((uint_64)$16 > (uint_64)(int_64)10) ){ goto $label$181 }
	$5 = *($20)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$180 }
	$5 = ($5 + [165])
	goto $label$179 
	
.LABEL $label$181
	$15 = (int_64)0
	if ( ((int_64)$16 == (int_64)11) ){ goto $label$178 }
	goto $label$177 
	
.LABEL $label$180
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$179
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$178
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$177
	$20 = ($20 + [1])
	$17 = ((int_64)$17 + (int_64)-5)
	$18 = ((int_64)$15 | (int_64)$18)
	$16 = ((int_64)$16 + (int_64)1)
	if ( ((int_64)$16 != (int_64)13) ){ goto $label$176 }
	if ( ((int_64)$7 == (int_64)1397703940) ){ goto $label$182 }
	$16 = (int_64)0
	$15 = (int_64)59
	$20 = [144]
	$18 = (int_64)0
	
.LOOP $label$183:
	$17 = (int_64)0
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$184 }
	$5 = *($20)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$186 }
	$5 = ($5 + [165])
	goto $label$185 
	
.LABEL $label$186
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$185
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$184
	$20 = ($20 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$18 = ((int_64)$17 | (int_64)$18)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$183 }
	
.LABEL $label$182
	$9 = *($0)
	$16 = (int_64)0
	$17 = (int_64)59
	$20 = [592]
	$21 = (int_64)0
	
.LOOP $label$187:
	if ( ((uint_64)$16 > (uint_64)(int_64)5) ){ goto $label$192 }
	$5 = *($20)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$191 }
	$5 = ($5 + [165])
	goto $label$190 
	
.LABEL $label$192
	$15 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$189 }
	goto $label$188 
	
.LABEL $label$191
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$190
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$189
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$188
	$20 = ($20 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$21 = ((int_64)$15 | (int_64)$21)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$187 }
	*($23 + [504]) = $21
	*($23 + [496]) = $9
	$16 = (int_64)0
	$17 = (int_64)59
	$20 = [128]
	$21 = (int_64)0
	
.LOOP $label$193:
	if ( ((uint_64)$16 > (uint_64)(int_64)7) ){ goto $label$198 }
	$5 = *($20)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$197 }
	$5 = ($5 + [165])
	goto $label$196 
	
.LABEL $label$198
	$15 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$195 }
	goto $label$194 
	
.LABEL $label$197
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$196
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$195
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$194
	$20 = ($20 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$21 = ((int_64)$15 | (int_64)$21)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$193 }
	$16 = (int_64)0
	$15 = (int_64)59
	$20 = [896]
	$9 = (int_64)0
	
.LOOP $label$199:
	$17 = (int_64)0
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$200 }
	$5 = *($20)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$202 }
	$5 = ($5 + [165])
	goto $label$201 
	
.LABEL $label$202
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$201
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$200
	$20 = ($20 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$9 = ((int_64)$17 | (int_64)$9)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$199 }
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [608])
	$16 = (uint_64)$7 >> (uint_64)(int_64)8)
	$20 = [0]
	
.LOOP $label$205:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$204 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$206 }
	
.LOOP $label$207:
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$204 }
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$207 }
	
.LABEL $label$206
	$5 = [1]
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$205 }
	goto $label$203 
	
.LABEL $label$204
	$5 = [0]
	
.LABEL $label$203
	CALL eosio_assert($5, [672])
	*(($23 + [248])) = [0]
	*($23 + [240]) = (int_64)0
	$20 = CALL strlen([912])
	if ( ((uint_32)$20 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$20 >= (uint_32)[11]) ){ goto $label$210 }
	*($23 + [240]) = ($20 << [1])
	$5 = (($23 + [240]) | [1])
	if ( $20 ){ goto $label$209 }
	goto $label$208 
	
.LABEL $label$210
	$19 = (($20 + [16]) & [-16])
	$5 = CALL $179($19)
	*($23 + [240]) = ($19 | [1])
	*($23 + [248]) = $5
	*($23 + [244]) = $20
	
.LABEL $label$209
	CALL memcpy($5, [912], $20)
	
.LABEL $label$208
	*(($5 + $20)) = [0]
	*(($23 + [160])) = $7
	*(($23 + [172])) = *($23 + [244])
	*($23 + [144]) = $9
	$20 = ($23 + [248])
	*(($23 + [176])) = *($20)
	*($23 + [136]) = *($0)
	*($23 + [152]) = $10
	*($23 + [168]) = *($23 + [240])
	*($23 + [240]) = [0]
	*($23 + [244]) = [0]
	*($20) = [0]
	$20 = CALL $35(($23 + [184]), ($23 + [496]), $18, $21, ($23 + [136]))
	CALL $36(($23 + [480]), $20)
	$5 = *($23 + [480])
	CALL send_inline($5, (*($23 + [484]) - $5))
	$5 = *($23 + [480])
	if ( ($5 == 0) ){ goto $label$211 }
	*($23 + [484]) = $5
	CALL $180($5)
	
.LABEL $label$211
	$5 = *($20 + [28])
	if ( ($5 == 0) ){ goto $label$212 }
	*(($20 + [32])) = $5
	CALL $180($5)
	
.LABEL $label$212
	$5 = *($20 + [16])
	if ( ($5 == 0) ){ goto $label$213 }
	*(($20 + [20])) = $5
	CALL $180($5)
	
.LABEL $label$213
	if ( ((*(($23 + [168])) & [1]) == 0) ){ goto $label$214 }
	CALL $180(*(($23 + [176])))
	
.LABEL $label$214
	if ( ((*($23 + [240]) & [1]) == 0) ){ goto $label$157 }
	CALL $180(*(($23 + [248])))
	
.LABEL $label$157
	$16 = *($23 + [104])
	$20 = [0]
	$5 = CALL db_lowerbound_i64(*($0 + [200]), *(($0 + [208])), (int_64)-6215726805501446784, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$15 }
	$19 = *(CALL $40(($0 + [200]), $5) + [28])
	$16 = (int_64)
	*($23 + [40]) = $16((int_64))($11 - ((int_64)((int_64)$22 + (int_64)$8) + (int_64)$10)) - $16))
	*($23 + [48]) = $7
	CALL eosio_assert((uint_64)(((int_64)$16 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [608])
	$16 = (uint_64)$7 >> (uint_64)(int_64)8)
	
.LOOP $label$216:
	$5 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$215 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$217 }
	
.LOOP $label$218:
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$215 }
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$218 }
	
.LABEL $label$217
	$5 = [1]
	$20 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[7]) ){ goto $label$216 }
	
.LABEL $label$215
	CALL eosio_assert($5, [672])
	*((($23 + [8]) + [8])) = *((($23 + [40]) + [8]))
	*($23 + [8]) = *($23 + [40])
	CALL $41($0, $19, ($23 + [8]))
	
.LABEL $label$15
	if ( ((*($23 + [288]) & [1]) == 0) ){ goto $label$219 }
	CALL $180(*($23 + [296]))
	
.LABEL $label$219
	if ( ((*($23 + [304]) & [1]) == 0) ){ goto $label$220 }
	CALL $180(*($23 + [312]))
	
.LABEL $label$220
	if ( ((*($23 + [320]) & [1]) == 0) ){ goto $label$221 }
	CALL $180(*($23 + [328]))
	
.LABEL $label$221
	if ( ((*($23 + [336]) & [1]) == 0) ){ goto $label$222 }
	CALL $180(*($23 + [344]))
	
.LABEL $label$222
	if ( ((*($23 + [352]) & [1]) == 0) ){ goto $label$223 }
	CALL $180(*($23 + [360]))
	
.LABEL $label$223
	if ( ((*($23 + [368]) & [1]) == 0) ){ goto $label$224 }
	CALL $180(*($23 + [376]))
	
.LABEL $label$224
	if ( ((*($23 + [384]) & [1]) == 0) ){ goto $label$225 }
	CALL $180(*($23 + [392]))
	
.LABEL $label$225
	$19 = *($23 + [400])
	if ( ($19 == 0) ){ goto $label$226 }
	$20 = *($23 + [404])
	if ( ((int_32)$20 == (int_32)$19) ){ goto $label$228 }
	$5 = ([0] - $19)
	$20 = ($20 + [-12])
	
.LOOP $label$229:
	if ( ((*($20) & [1]) == 0) ){ goto $label$230 }
	CALL $180(*(($20 + [8])))
	
.LABEL $label$230
	$20 = ($20 + [-12])
	if ( ((int_32)($20 + $5) != (int_32)[-12]) ){ goto $label$229 }
	$20 = *($23 + [400])
	goto $label$227 
	
.LABEL $label$228
	$20 = $19
	
.LABEL $label$227
	*($23 + [404]) = $19
	CALL $180($20)
	
.LABEL $label$226
	if ( ((*($23 + [416]) & [1]) == 0) ){ goto $label$4 }
	CALL $180(*($23 + [424]))
	
.LABEL $label$4
	if ( ((*($23 + [464]) & [1]) == 0) ){ goto $label$231 }
	CALL $180(*(($23 + [472])))
	
.LABEL $label$231
	*([0] + [4]) = ($23 + [512])
	return (unreachable)
	
.LABEL $label$3
	CALL $181(($23 + [240]))
	
.LABEL $label$2
	CALL $181(($23 + [88]))
	
.LABEL $label$1
	CALL $181(($23 + [72]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC __errno_location ()
{
	return [11340]
}

int_32 .FUNC __shgetc (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL __uflow($0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$1 = (int_64)
	$2 = *($0 + [4])
	$3 = *(($0 + [8]))
	if ( ((int_64)(CASTING int_64)(int_32 ($3 - $2)) < (int_64)$1($1 - *($0 + [120])))) ){ goto $label$4 }
	*($0 + [104]) = ($2 + (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294967295)))
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$5
	$3 = *(($0 + [8]))
	
.LABEL $label$4
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)) + (int_64)*($0 + [120]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)*($0) == (int_32)$4) ){ goto $label$8 }
	*($0) = $4
	
.LABEL $label$8
	return $4
}

void .FUNC __shlim (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($3 - $2))
	*($0 + [120]) = $4
	*($0 + [104]) = ( ( ($2 + (CASTING uint_32)(uint_64 $1)) ? $3 : ((int_64)$4 > (int_64)$1) ) ? $3 : ((int_64)$1 != (int_64)0) )
}

int_64 .FUNC __intscan (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$5:
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$7 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL __shgetc($0)
	
.LABEL $label$6
	$10 = ($13 + [-9])
	if ( ((uint_32)$10 > (uint_32)[36]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( [-1] ? [0] : ((int_32)$13 == (int_32)[45]) )
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$2 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$1 
	
.LABEL $label$4
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL __shgetc($0)
	
.LABEL $label$1
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$20 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$20 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$19 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$18 
	
.LABEL $label$20
	$1 = ( $1 ? [10] : $1 )
	if ( (*(($13 + [11057])) <= $1) ){ goto $label$17 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$21 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$21
	CALL __shlim($0, (int_64)0)
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$19
	$13 = CALL __shgetc($0)
	
.LABEL $label$18
	if ( ((int_32)($13 | [32]) != (int_32)[120]) ){ goto $label$22 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$15 
	
.LABEL $label$22
	if ( ($1 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$13 }
	$14 = (int_64)0
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$23 }
	$10 = [0]
	$8 = ($0 + [104])
	$1 = ($0 + [4])
	
.LOOP $label$24:
	$10 = ((int_32)$10 * (int_32)[10])
	$13 = *($1)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$26 }
	*($1) = ($13 + [1])
	$13 = *($13)
	goto $label$25 
	
.LABEL $label$26
	$13 = CALL __shgetc($0)
	
.LABEL $label$25
	$10 = ($10 + $9)
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	if ( ($10 <= [429496729]) ){ goto $label$24 }
	
.LABEL $label$27
	$14 = (CASTING uint_64)(uint_32 $10)
	
.LABEL $label$23
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$11 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$28:
	$1 = [10]
	$5 = (CASTING int_64)(int_32 $10)
	$12 = ((int_64)$14 * (int_64)10)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$30 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$29 
	
.LABEL $label$30
	$13 = CALL __shgetc($0)
	
.LABEL $label$29
	$14 = ((int_64)$12 + (int_64)$5)
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$31 }
	if ( (uint_64)($14 <= (int_64)1844674407370955162) ){ goto $label$28 }
	
.LABEL $label$31
	if ( ((uint_32)$10 <= (uint_32)[9]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$13 = CALL __shgetc($0)
	
.LABEL $label$15
	$1 = [16]
	if ( (*(($13 + [11057])) <= [16]) ){ goto $label$13 }
	$13 = *(($0 + [104]))
	if ( ($13 == 0) ){ goto $label$32 }
	*(($10 = ($0 + [4]))) = (*($10) + [-1])
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$9 }
	$14 = (int_64)0
	if ( ($13 == 0) ){ goto $label$10 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	return (int_64)0
	
.LABEL $label$14
	$1 = [8]
	
.LABEL $label$13
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$37 }
	$10 = *(($13 + [11057]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$36 }
	$9 = [0]
	$2 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$38:
	$9 = ($10 + ((int_32)$9 * (int_32)$1))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($2)) ){ goto $label$40 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$39 
	
.LABEL $label$40
	$13 = CALL __shgetc($0)
	
.LABEL $label$39
	$10 = *(($13 + [11057]))
	if ( ((uint_32)$9 > (uint_32)[119304646]) ){ goto $label$41 }
	if ( ($10 <= $1) ){ goto $label$38 }
	
.LABEL $label$41
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$35 }
	goto $label$12 
	
.LABEL $label$37
	$2 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [11328]))
	$10 = *(($13 + [11057]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$34 }
	$9 = [0]
	$11 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$42:
	$9 = ($10 | ($9 << $2))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$44 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$43 
	
.LABEL $label$44
	$13 = CALL __shgetc($0)
	
.LABEL $label$43
	$10 = *(($13 + [11057]))
	if ( ((uint_32)$9 > (uint_32)[134217727]) ){ goto $label$45 }
	if ( ($10 <= $1) ){ goto $label$42 }
	
.LABEL $label$45
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$33 }
	goto $label$12 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$35
	$7 = (CASTING uint_64)(uint_32 $1)
	$6 = ((uint_64)(int_64)-1 / (uint_64)$7)
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)$6) ){ goto $label$12 }
	$5 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$12 = ((int_64)$14 * (int_64)$7)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$48 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$47 
	
.LABEL $label$48
	$13 = CALL __shgetc($0)
	
.LABEL $label$47
	$14 = ((int_64)$5 + (int_64)$12)
	$10 = *(($13 + [11057]))
	if ( ($10 <= $1) ){ goto $label$46 }
	goto $label$12 
	
.LABEL $label$34
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$33
	$5 = (CASTING uint_64)(uint_32 $2)
	$6 = (uint_64)(int_64)-1 >> (uint_64)$5
	if ( ((uint_64)$14 > (uint_64)$6)) ){ goto $label$12 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$49:
	$14 = ((int_64)$14 << (int_64)$5)
	$12 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$51 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$50 
	
.LABEL $label$51
	$13 = CALL __shgetc($0)
	
.LABEL $label$50
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = *(($13 + [11057]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	if ( ((uint_64)$14 <= (uint_64)$6) ){ goto $label$49 }
	
.LABEL $label$12
	if ( ((uint_32)*(($13 + [11057])) >= (uint_32)$1) ){ goto $label$11 }
	$9 = ($0 + [104])
	$10 = ($0 + [4])
	
.LOOP $label$52:
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($9)) ){ goto $label$54 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$53 
	
.LABEL $label$54
	$13 = CALL __shgetc($0)
	
.LABEL $label$53
	if ( (*(($13 + [11057])) <= $1) ){ goto $label$52 }
	*(CALL __errno_location()) = [34]
	$4 = ( $4 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$14 = $3
	
.LABEL $label$11
	if ( (*(($0 + [104])) == 0) ){ goto $label$55 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$55
	if ( (uint_64)($14 <= $3) ){ goto $label$56 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$57 }
	if ( $4 ){ goto $label$57 }
	*(CALL __errno_location()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$57
	if ( ((uint_64)$14 <= (uint_64)$3) ){ goto $label$56 }
	*(CALL __errno_location()) = [34]
	return $3
	
.LABEL $label$56
	$12 = (CASTING int_64)(int_32 $4)
	$14 = (int_64))(((int_64)$14 ^ (int_64)$12) - $12)
	
.LABEL $label$10
	return $14
	
.LABEL $label$9
	CALL __shlim($0, (int_64)0)
	$10
	return (int_64)0
}

int_64 .FUNC floor (float_64 $0)
{
	int_64 $1
	int_32 $2
	float_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	if ( ((float_64)$0 == (float_64)(float_64)0) ){ goto $label$1 }
	$1 = (CASTING int_64)(float_64 $0)
	$2 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)) & [2047]
	if ( ((uint_32)$2) > (uint_32)[1074]) ){ goto $label$1 }
	$4 = ((int_64)$1 < (int_64)0)
	$3 = (float_64))(((float_64)( (float_64)4503599627370496 ? (float_64)-4503599627370496 : $4 ) + (float_64)((float_64)( (float_64)-4503599627370496 ? (float_64)4503599627370496 : $4 ) + (float_64)$0)) - $0)
	if ( ((uint_32)$2 > (uint_32)[1022]) ){ goto $label$2 }
	*($5 + [8]) = $3
	return (CASTING float_64)(int_32 (CASTING uint_32)(uint_64 (int_64)$1 >> (int_64)63)))
	
.LABEL $label$2
	$0 = ((float_64)$3 + (float_64)$0)
	if ( (((float_64)$3 <= (float_64)(float_64)0) | ((float_64)$3 != (float_64)$3)) ){ goto $label$1 }
	$0 = ((float_64)$0 + (float_64)(float_64)-1)
	
.LABEL $label$1
	return $0
}

int_64 .FUNC strtoull (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return $3
}

int_32 .FUNC $192 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $179($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $193 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $179($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $190 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = CALL strlen($1)
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$6 = ($4 + $3)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$6 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($6 + [16]) & [-16])
	$6 = CALL $179($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $6
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($6, $1, $3)
	
.LABEL $label$2
	*(($6 + $3)) = [0]
	CALL $185($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $191 (int_32 $0)
{
	CALL abort()
	(unreachable)
}